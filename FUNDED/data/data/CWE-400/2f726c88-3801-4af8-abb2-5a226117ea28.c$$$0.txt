-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(GLOBAL_CONST_FIVE==5)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read data using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to unsigned int */
                data = strtoul(inputBuffer, NULL, 0);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(GLOBAL_CONST_FIVE==5)
    {
        {
            wchar_t * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING) && data < 100)
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
23,25
23,26
23,27
23,28
23,29
24,25
25,26
25,27
27,28
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
44,45
45,46
45,47
47,48
47,49
49,50
50,51
52,53
52,54
53,54
53,55
53,56
53,57
53,58
53,59
53,60
53,61
53,62
53,63
53,64
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
59,60
61,62
63,64
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
75,76
76,77
76,78
76,79
76,80
77,78
79,80
80,81
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
96,97
96,98
97,98
97,99
98,99
98,100
99,100
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
110,112
111,112
114,115
114,116
115,116
117,118
119,120
119,121
120,121
120,122
121,122
121,123
121,124
121,125
122,123
124,125
126,127
126,128
127,128
127,129
128,129
130,131
132,133
133,134
135,136
136,137
137,138
139,140
141,142
143,144
144,145
144,146
145,146
147,148
147,149
147,150
147,151
147,152
148,149
150,151
152,153
154,155
154,156
155,156
159,160
159,161
160,161
160,162
161,162
161,163
162,163
164,165
166,167
166,168
167,168
170,171
172,173
173,174
173,175
174,175
174,176
175,176
177,178
180,181
181,182
181,183
182,183
184,185
184,186
184,187
184,188
185,186
187,188
189,190
193,194
193,195
194,195
194,196
195,196
197,198
199,200
200,201
201,202
201,203
202,203
204,205
206,207
206,208
207,208
207,209
208,209
211,212
212,213
212,214
213,214
214,215
214,216
216,217
216,218
219,220
219,221
219,222
220,221
220,222
221,222
221,223
222,223
224,225
224,226
225,226
227,228
229,230
229,231
230,231
233,234
233,235
233,236
233,237
233,238
234,235
235,236
235,237
236,237
238,239
238,240
239,240
239,241
241,242
243,244
243,245
244,245
246,247
246,248
247,248
249,250
250,251
250,252
253,254
253,255
254,255
254,256
255,256
257,258
259,260
260,261
261,262
261,263
262,263
264,265
266,267
267,268
267,269
267,270
268,269
270,271
272,273
274,275
275,276
275,277
276,277
278,279
280,281
281,282
281,283
282,283
284,285
286,287
287,288
288,289
288,290
289,290
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,32,34,38,40,43,46,48,51,57,60,62,64,66,70,72,74,78,81,82,86,91,92,94,100,101,102,105,107,112,113,116,118,123,125,129,131,134,138,140,142,146,149,151,153,156,157,158,163,165,168,169,171,176,178,179,183,186,188,190,191,192,196,198,203,205,209,210,215,217,218,223,226,228,231,232,237,240,242,245,248,251,252,256,258,263,265,269,271,273,277,279,283,285,290,291
-----computeFrom-----
13,14
13,15
18,19
18,20
55,56
55,57
68,69
68,70
88,89
88,90
96,97
96,98
109,110
109,111
120,121
120,122
144,145
144,146
154,155
154,156
160,161
160,162
161,162
161,163
166,167
166,168
173,174
173,175
181,182
181,183
194,195
194,196
207,208
207,209
220,221
220,222
221,222
221,223
229,230
229,231
235,236
235,237
246,247
246,248
254,255
254,256
-----guardedBy-----
196,205
228,273
231,248
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(GLOBAL_CONST_FIVE==5)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(GLOBAL_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(GLOBAL_CONST_FIVE==5)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(GLOBAL_CONST_FIVE==5)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read data using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to unsigned int */                data = strtoul(inputBuffer, NULL, 0);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(GLOBAL_CONST_FIVE==5)    {        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
GLOBAL_CONST_FIVE==5
GLOBAL_CONST_FIVE
GLOBAL_CONST_FIVE
5
{        {            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            wchar_t * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(153,175,0)
(140,78,0)
(150,65,0)
(66,175,0)
(82,37,0)
(151,140,0)
(62,44,0)
(6,161,0)
(61,170,0)
(109,5,0)
(65,3,0)
(135,145,0)
(76,78,0)
(100,74,0)
(132,51,0)
(130,159,0)
(48,3,0)
(51,132,0)
(64,51,0)
(136,173,0)
(122,134,0)
(155,21,0)
(37,125,0)
(157,70,0)
(103,175,0)
(21,15,0)
(141,129,0)
(32,34,0)
(115,163,0)
(105,116,0)
(166,77,0)
(57,3,0)
(7,166,0)
(80,107,0)
(99,5,0)
(133,44,0)
(161,4,0)
(96,23,0)
(2,151,0)
(24,21,0)
(149,15,0)
(159,130,0)
(113,36,0)
(134,107,0)
(174,101,0)
(159,175,0)
(94,12,0)
(1,132,0)
(98,0,0)
(125,37,0)
(112,119,0)
(104,151,0)
(28,99,0)
(125,44,0)
(9,45,0)
(111,66,0)
(46,7,0)
(31,152,0)
(50,99,0)
(151,93,0)
(27,154,0)
(51,11,0)
(145,11,0)
(7,46,0)
(71,34,0)
(173,103,0)
(171,15,0)
(145,34,0)
(16,175,0)
(70,175,0)
(74,107,0)
(83,96,0)
(129,23,0)
(89,134,0)
(127,15,0)
(76,107,0)
(124,118,0)
(143,156,0)
(116,151,0)
(40,2,0)
(139,52,0)
(140,151,0)
(45,11,0)
(30,159,0)
(140,68,0)
(5,175,0)
(7,107,0)
(169,72,0)
(103,152,0)
(92,55,0)
(68,140,0)
(142,159,0)
(5,161,0)
(76,163,0)
(12,11,0)
(51,168,0)
(160,4,0)
(17,77,0)
(128,113,0)
(118,51,0)
(38,119,0)
(154,118,0)
(138,65,0)
(20,48,0)
(131,142,0)
(23,96,0)
(29,15,0)
(99,66,0)
(129,141,0)
(165,70,0)
(114,141,0)
(10,2,0)
(137,166,0)
(7,85,0)
(167,15,0)
(3,48,0)
(147,161,0)
(44,5,0)
(18,7,0)
(25,77,0)
(161,5,0)
(148,93,0)
(47,175,0)
(67,32,0)
(161,11,0)
(11,175,0)
(43,166,0)
(158,129,0)
(32,11,0)
(37,5,0)
(120,161,0)
(78,76,0)
(35,93,0)
(106,46,0)
(110,37,0)
(54,76,0)
(148,151,0)
(164,34,0)
(144,134,0)
(22,55,0)
(108,148,0)
(15,90,0)
(69,15,0)
(121,175,0)
(159,142,0)
(107,134,0)
(4,161,0)
(123,175,0)
(60,141,0)
(51,118,0)
(97,11,0)
(117,4,0)
(8,13,0)
(74,85,0)
(23,175,0)
(168,51,0)
(53,35,0)
(3,57,0)
(74,166,0)
(118,124,0)
(34,15,0)
(163,76,0)
(42,45,0)
(86,170,0)
(84,32,0)
(19,15,0)
(126,156,0)
(79,15,0)
(92,73,0)
(85,74,0)
(76,166,0)
(156,153,0)
(85,7,0)
(44,125,0)
(102,101,0)
(63,77,0)
(11,12,0)
(91,12,0)
(146,12,0)
(33,130,0)
(56,15,0)
(118,154,0)
(41,168,0)
(152,103,0)
(116,93,0)
(107,175,0)
(81,57,0)
(78,140,0)
(55,92,0)
(145,49,0)
(170,39,0)
(59,93,0)
(162,74,0)
(87,148,0)
(88,173,0)
(26,153,0)
(3,65,0)
(172,75,0)
(35,151,0)
(150,34,1)
(108,2,1)
(118,124,1)
(82,5,1)
(45,9,1)
(62,133,1)
(53,148,1)
(84,8,1)
(116,151,1)
(140,68,1)
(84,98,1)
(80,66,1)
(101,102,1)
(35,53,1)
(95,101,1)
(44,62,1)
(42,11,1)
(133,37,1)
(126,159,1)
(85,7,1)
(105,35,1)
(164,71,1)
(95,116,1)
(100,162,1)
(57,81,1)
(34,164,1)
(146,94,1)
(74,166,1)
(155,24,1)
(76,166,1)
(92,55,1)
(134,122,1)
(32,34,1)
(152,31,1)
(28,125,1)
(99,50,1)
(37,110,1)
(48,3,1)
(74,100,1)
(32,67,1)
(51,11,1)
(129,141,1)
(95,113,1)
(140,78,1)
(132,51,1)
(168,41,1)
(20,3,1)
(147,109,1)
(165,48,1)
(2,151,1)
(107,134,1)
(33,45,1)
(50,28,1)
(150,58,1)
(14,32,1)
(67,84,1)
(84,139,1)
(7,46,1)
(30,130,1)
(128,85,1)
(125,44,1)
(96,83,1)
(46,106,1)
(174,14,1)
(108,92,1)
(153,26,1)
(138,150,1)
(35,151,1)
(113,128,1)
(161,6,1)
(51,118,1)
(106,18,1)
(11,12,1)
(131,30,1)
(41,118,1)
(4,160,1)
(65,138,1)
(21,155,1)
(166,137,1)
(158,141,1)
(145,34,1)
(114,60,1)
(99,5,1)
(94,97,1)
(115,54,1)
(104,85,1)
(54,104,1)
(112,38,1)
(156,143,1)
(118,154,1)
(3,57,1)
(174,119,1)
(40,151,1)
(38,166,1)
(103,152,1)
(70,157,1)
(110,82,1)
(1,51,1)
(45,11,1)
(22,2,1)
(37,5,1)
(14,145,1)
(76,107,1)
(60,153,1)
(23,96,1)
(12,91,1)
(24,119,1)
(7,166,1)
(6,4,1)
(71,21,1)
(87,108,1)
(91,146,1)
(10,40,1)
(159,142,1)
(136,23,1)
(78,76,1)
(135,32,1)
(163,115,1)
(44,5,1)
(129,158,1)
(139,45,1)
(84,58,1)
(31,173,1)
(32,11,1)
(98,132,1)
(141,114,1)
(89,144,1)
(64,103,1)
(7,107,1)
(125,37,1)
(85,74,1)
(27,64,1)
(9,42,1)
(161,11,1)
(130,33,1)
(122,89,1)
(83,129,1)
(142,131,1)
(111,99,1)
(84,172,1)
(145,135,1)
(26,156,1)
(160,117,1)
(66,111,1)
(55,22,1)
(3,65,1)
(51,168,1)
(143,126,1)
(109,132,1)
(137,43,1)
(81,65,1)
(88,136,1)
(76,163,1)
(154,27,1)
(144,80,1)
(162,7,1)
(173,88,1)
(74,107,1)
(116,105,1)
(119,112,1)
(172,48,1)
(169,14,1)
(48,20,1)
(8,125,1)
(97,70,1)
(117,120,1)
(102,174,1)
(145,11,1)
(2,10,1)
(174,169,1)
(148,151,1)
(151,140,1)
(157,165,1)
(132,1,1)
(5,161,1)
(58,107,1)
(161,4,1)
(148,87,1)
(18,101,1)
(120,147,1)
(159,130,1)
(125,37,2)
(161,132,2)
(50,125,2)
(55,2,2)
(51,11,2)
(107,125,2)
(14,119,2)
(99,5,2)
(2,151,2)
(142,45,2)
(116,85,2)
(88,45,2)
(159,45,2)
(172,48,2)
(159,130,2)
(20,58,2)
(76,163,2)
(30,45,2)
(134,125,2)
(28,125,2)
(145,11,2)
(48,58,2)
(57,58,2)
(27,45,2)
(66,125,2)
(136,45,2)
(42,48,2)
(51,45,2)
(32,11,2)
(53,85,2)
(125,44,2)
(138,58,2)
(7,101,2)
(160,132,2)
(82,132,2)
(6,132,2)
(7,107,2)
(21,119,2)
(80,125,2)
(71,119,2)
(51,118,2)
(46,101,2)
(157,48,2)
(151,85,2)
(76,166,2)
(23,45,2)
(111,125,2)
(173,45,2)
(145,32,2)
(155,119,2)
(65,119,2)
(139,45,2)
(107,134,2)
(115,85,2)
(143,45,2)
(117,132,2)
(85,101,2)
(48,3,2)
(78,85,2)
(60,45,2)
(81,58,2)
(100,7,2)
(125,132,2)
(153,45,2)
(34,119,2)
(91,48,2)
(4,132,2)
(126,45,2)
(65,58,2)
(110,132,2)
(114,45,2)
(35,85,2)
(165,48,2)
(12,48,2)
(70,48,2)
(159,142,2)
(161,4,2)
(116,151,2)
(35,151,2)
(11,48,2)
(7,166,2)
(23,96,2)
(3,58,2)
(8,125,2)
(120,132,2)
(164,119,2)
(51,168,2)
(10,85,2)
(3,57,2)
(33,45,2)
(31,45,2)
(67,119,2)
(45,48,2)
(106,101,2)
(133,37,2)
(140,78,2)
(78,76,2)
(83,45,2)
(131,45,2)
(89,125,2)
(2,85,2)
(169,14,2)
(150,58,2)
(118,124,2)
(24,119,2)
(3,65,2)
(64,45,2)
(103,45,2)
(85,7,2)
(40,85,2)
(109,132,2)
(84,119,2)
(44,37,2)
(168,45,2)
(3,119,2)
(57,119,2)
(158,45,2)
(32,34,2)
(152,45,2)
(96,45,2)
(103,152,2)
(37,5,2)
(105,85,2)
(154,45,2)
(118,154,2)
(76,85,2)
(132,51,2)
(85,74,2)
(92,2,2)
(54,85,2)
(5,161,2)
(163,85,2)
(62,37,2)
(74,7,2)
(130,45,2)
(92,55,2)
(74,107,2)
(108,85,2)
(138,119,2)
(128,85,2)
(7,46,2)
(74,166,2)
(151,140,2)
(26,45,2)
(132,45,2)
(162,7,2)
(97,48,2)
(9,48,2)
(141,45,2)
(135,32,2)
(140,68,2)
(76,107,2)
(145,34,2)
(98,132,2)
(104,85,2)
(129,45,2)
(1,45,2)
(48,119,2)
(45,11,2)
(22,2,2)
(87,85,2)
(11,12,2)
(81,119,2)
(44,5,2)
(148,85,2)
(41,45,2)
(20,119,2)
(94,48,2)
(58,125,2)
(140,85,2)
(32,119,2)
(147,132,2)
(99,125,2)
(156,45,2)
(129,141,2)
(37,132,2)
(144,125,2)
(18,101,2)
(150,119,2)
(118,45,2)
(122,125,2)
(5,132,2)
(113,85,2)
(148,151,2)
(161,11,2)
(146,48,2)
-----------------------------------
(0,)
(1,SOCKET_ERROR)
(2,myString == NULL)
(3,WSAStartup(MAKEWORD(2,2)
(4,CHAR_ARRAY_SIZE - 1)
(5,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(6,0)
(7,data > wcslen(HELLO_STRING)
(8,break;)
(9,INVALID_SOCKET)
(10,NULL)
(11,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(12,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(13,)
(14,wsaDataInit)
(15,)
(16,if (recvResult == SOCKET_ERROR || recvResult == 0)
(17,data)
(18,data)
(19,if (wsaDataInit)
(20,NO_ERROR)
(21,wsaDataInit = 0)
(22,1)
(23,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(24,wsaDataInit)
(25,if(GLOBAL_CONST_FIVE==5)
(26,AF_INET)
(27,service)
(28,inputBuffer)
(29,inputBuffer)
(30,0)
(31,TCP_PORT)
(32,connectSocket != INVALID_SOCKET)
(33,service)
(34,connectSocket = INVALID_SOCKET)
(35,printWLine(myString)
(36,)
(37,recvResult == SOCKET_ERROR)
(38,GLOBAL_CONST_FIVE)
(39,)
(40,myString)
(41,service)
(42,connectSocket)
(43,data)
(44,recvResult == 0)
(45,connectSocket == INVALID_SOCKET)
(46,wcslen(HELLO_STRING)
(47,if (WSAStartup(MAKEWORD(2,2)
(48,WSAStartup(MAKEWORD(2,2)
(49,)
(50,recvResult)
(51,connect(connectSocket, (struct sockaddr*)
(52,)
(53,myString)
(54,data)
(55,-1)
(56,do)
(57,&wsaData)
(58,0)
(59,if (myString == NULL)
(60,service)
(61,if (data > wcslen(HELLO_STRING)
(62,0)
(63,if(GLOBAL_CONST_FIVE==5)
(64,connectSocket)
(65,MAKEWORD(2,2)
(66,inputBuffer[recvResult] = \'\\0\')
(67,INVALID_SOCKET)
(68,wchar_t *)
(69,wsaData)
(70,wsaDataInit = 1)
(71,connectSocket)
(72,)
(73,)
(74,data < 100)
(75,)
(76,data*sizeof(wchar_t)
(77,)
(78,malloc(data*sizeof(wchar_t)
(79,connectSocket)
(80,data)
(81,wsaData)
(82,recvResult)
(83,IP_ADDRESS)
(84,connectSocket)
(85,data > wcslen(HELLO_STRING)
(86,myString)
(87,HELLO_STRING)
(88,sin_port)
(89,NULL)
(90,)
(91,IPPROTO_TCP)
(92,exit(-1)
(93,)
(94,AF_INET)
(95,RET)
(96,inet_addr(IP_ADDRESS)
(97,connectSocket)
(98,break;)
(99,inputBuffer[recvResult])
(100,100)
(101,GLOBAL_CONST_FIVE==5)
(102,5)
(103,service.sin_port = htons(TCP_PORT)
(104,myString)
(105,myString)
(106,HELLO_STRING)
(107,data = strtoul(inputBuffer, NULL, 0)
(108,myString)
(109,recvResult)
(110,SOCKET_ERROR)
(111,\'\\0\')
(112,5)
(113,printLine("Input is less than the length of the source string or too large")
(114,sin_addr)
(115,wchar_t)
(116,free(myString)
(117,CHAR_ARRAY_SIZE)
(118,(struct sockaddr*)
(119,GLOBAL_CONST_FIVE==5)
(120,inputBuffer)
(121,if (connectSocket == INVALID_SOCKET)
(122,0)
(123,if (connect(connectSocket, (struct sockaddr*)
(124,struct sockaddr*)
(125,recvResult == SOCKET_ERROR || recvResult == 0)
(126,service)
(127,recvResult)
(128,"Input is less than the length of the source string or too large")
(129,service.sin_addr.s_addr)
(130,&service)
(131,service)
(132,connect(connectSocket, (struct sockaddr*)
(133,recvResult)
(134,strtoul(inputBuffer, NULL, 0)
(135,connectSocket)
(136,service)
(137,0)
(138,2)
(139,break;)
(140,(wchar_t *)
(141,service.sin_addr)
(142,sizeof(service)
(143,sin_family)
(144,inputBuffer)
(145,CLOSE_SOCKET(connectSocket)
(146,SOCK_STREAM)
(147,connectSocket)
(148,wcscpy(myString, HELLO_STRING)
(149,if (connectSocket != INVALID_SOCKET)
(150,2)
(151,myString = (wchar_t *)
(152,htons(TCP_PORT)
(153,service.sin_family = AF_INET)
(154,&service)
(155,0)
(156,service.sin_family)
(157,1)
(158,s_addr)
(159,memset(&service, 0, sizeof(service)
(160,1)
(161,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(162,data)
(163,sizeof(wchar_t)
(164,INVALID_SOCKET)
(165,wsaDataInit)
(166,data = 0)
(167,wsaDataInit)
(168,sizeof(service)
(169,WSACleanup()
(170,)
(171,service)
(172,break;)
(173,service.sin_port)
(174,GLOBAL_CONST_FIVE)
(175,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^