-----label-----
1
-----code-----
unsigned long
arch_get_unmapped_area(struct file *filp, unsigned long addr,
		unsigned long len, unsigned long pgoff, unsigned long flags)
{
	struct mm_struct *mm = current->mm;
	struct vm_area_struct *vma;
	unsigned long start_addr;
	unsigned long begin, end;

	if (flags & MAP_FIXED)
		return addr;

	find_start_end(flags, &begin, &end);

	if (len > end)
		return -ENOMEM;

	if (addr) {
		addr = PAGE_ALIGN(addr);
		vma = find_vma(mm, addr);
		if (end - len >= addr &&
		    (!vma || addr + len <= vm_start_gap(vma)))
			return addr;
	}
	if (((flags & MAP_32BIT) || test_thread_flag(TIF_ADDR32))
	    && len <= mm->cached_hole_size) {
		mm->cached_hole_size = 0;
		mm->free_area_cache = begin;
	}
	addr = mm->free_area_cache;
	if (addr < begin)
		addr = begin;
	start_addr = addr;

full_search:

	addr = align_addr(addr, filp, 0);

	for (vma = find_vma(mm, addr); ; vma = vma->vm_next) {
		/* At this point:  (!vma || addr < vma->vm_end). */
		if (end - len < addr) {
			/*
			 * Start a new search - just in case we missed
			 * some holes.
			 */
			if (start_addr != begin) {
				start_addr = addr = begin;
				mm->cached_hole_size = 0;
				goto full_search;
			}
			return -ENOMEM;
		}
		if (!vma || addr + len <= vma->vm_start) {
			/*
			 * Remember the place where we stopped the search:
			 */
			mm->free_area_cache = addr + len;
			return addr;
		}
		if (addr + mm->cached_hole_size < vma->vm_start)
			mm->cached_hole_size = vma->vm_start - addr;

		addr = vma->vm_end;
		addr = align_addr(addr, filp, 0);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
40,41
41,42
41,43
42,43
44,45
44,46
47,48
48,49
48,50
50,51
52,53
53,54
53,55
53,56
55,56
57,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
68,69
69,70
69,71
69,72
69,73
70,71
72,73
74,75
75,76
77,78
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
88,89
90,91
90,92
91,92
93,94
93,95
93,96
94,95
95,96
95,97
96,97
98,99
98,100
99,100
101,102
103,104
104,105
104,106
105,106
107,108
107,109
107,110
108,109
110,111
112,113
114,115
114,116
115,116
115,117
116,117
116,118
117,118
117,119
118,119
120,121
122,123
124,125
125,126
125,127
126,127
127,128
129,130
129,131
130,131
130,132
131,132
133,134
135,136
135,137
136,137
138,139
140,141
141,142
143,144
143,145
144,145
144,146
145,146
146,147
146,148
147,148
148,149
148,150
149,150
151,152
153,154
153,155
154,155
156,157
158,159
158,160
159,160
161,162
161,163
162,163
165,166
165,167
166,167
167,168
167,169
168,169
168,170
169,170
173,174
174,175
174,176
175,176
175,177
176,177
179,180
181,182
182,183
182,184
183,184
185,186
185,187
186,187
189,190
189,191
190,191
190,192
191,192
193,194
195,196
196,197
196,198
197,198
199,200
201,202
202,203
202,204
203,204
205,206
207,208
207,209
209,210
210,211
210,212
211,212
213,214
213,215
213,216
213,217
214,215
216,217
218,219
221,222
221,223
221,224
222,223
223,224
223,225
224,225
226,227
226,228
226,229
227,228
229,230
231,232
233,234
233,235
234,235
236,237
236,238
237,238
240,241
240,242
240,243
240,244
240,245
241,242
241,243
242,243
242,244
243,244
243,245
244,245
246,247
248,249
250,251
250,252
251,252
251,253
252,253
252,254
253,254
255,256
257,258
257,259
257,260
258,259
259,260
259,261
260,261
262,263
262,264
263,264
265,266
267,268
268,269
268,270
269,270
269,271
270,271
274,275
276,277
277,278
278,279
280,281
280,282
281,282
281,283
282,283
283,284
285,286
285,287
286,287
286,288
287,288
289,290
291,292
291,293
292,293
295,296
295,297
296,297
297,298
297,299
298,299
298,300
299,300
302,303
302,304
303,304
305,306
307,308
308,309
310,311
310,312
311,312
311,313
312,313
312,314
313,314
315,316
315,317
316,317
319,320
319,321
320,321
323,324
324,325
324,326
325,326
325,327
326,327
329,330
329,331
330,331
330,332
331,332
334,335
336,337
337,338
337,339
338,339
340,341
340,342
341,342
344,345
345,346
345,347
346,347
348,349
348,350
348,351
348,352
349,350
351,352
353,354
-----nextToken-----
2,4,7,9,10,12,14,16,18,20,22,24,26,31,33,34,38,39,43,45,46,49,51,54,56,58,62,64,67,71,73,76,79,83,85,89,92,97,100,102,106,109,111,113,119,121,123,128,132,134,137,139,142,150,152,155,157,160,163,164,170,171,172,177,178,180,184,187,188,192,194,198,200,204,206,208,212,215,217,219,220,225,228,230,232,235,238,239,245,247,249,254,256,261,264,266,271,272,273,275,279,284,288,290,293,294,300,301,304,306,309,314,317,318,321,322,327,328,332,333,335,339,342,343,347,350,352,354,355
-----computeFrom-----
60,61
60,62
81,82
81,83
95,96
95,97
104,105
104,106
115,116
115,117
116,117
116,118
117,118
117,119
125,126
125,127
129,130
129,131
130,131
130,132
144,145
144,146
146,147
146,148
148,149
148,150
158,159
158,160
167,168
167,169
174,175
174,176
182,183
182,184
190,191
190,192
196,197
196,198
202,203
202,204
210,211
210,212
223,224
223,225
233,234
233,235
242,243
242,244
243,244
243,245
252,253
252,254
259,260
259,261
262,263
262,264
268,269
268,270
281,282
281,283
285,286
285,287
286,287
286,288
297,298
297,299
302,303
302,304
311,312
311,313
312,313
312,314
324,325
324,326
329,330
329,331
337,338
337,339
345,346
345,347
-----guardedBy-----
132,142
163,177
164,171
192,198
194,200
249,264
254,261
256,266
290,306
288,309
317,327
318,328
322,333
321,332
314,335
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;GotoStatement;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;
-----ast_node-----
unsigned longarch_get_unmapped_area(struct file *filp, unsigned long addr,		unsigned long len, unsigned long pgoff, unsigned long flags){	struct mm_struct *mm = current->mm;	struct vm_area_struct *vma;	unsigned long start_addr;	unsigned long begin, end;	if (flags & MAP_FIXED)		return addr;	find_start_end(flags, &begin, &end);	if (len > end)		return -ENOMEM;	if (addr) {		addr = PAGE_ALIGN(addr);		vma = find_vma(mm, addr);		if (end - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;	}	if (((flags & MAP_32BIT) || test_thread_flag(TIF_ADDR32))	    && len <= mm->cached_hole_size) {		mm->cached_hole_size = 0;		mm->free_area_cache = begin;	}	addr = mm->free_area_cache;	if (addr < begin)		addr = begin;	start_addr = addr;full_search:	addr = align_addr(addr, filp, 0);	for (vma = find_vma(mm, addr); ; vma = vma->vm_next) {		/* At this point:  (!vma || addr < vma->vm_end). */		if (end - len < addr) {			/*			 * Start a new search - just in case we missed			 * some holes.			 */			if (start_addr != begin) {				start_addr = addr = begin;				mm->cached_hole_size = 0;				goto full_search;			}			return -ENOMEM;		}		if (!vma || addr + len <= vma->vm_start) {			/*			 * Remember the place where we stopped the search:			 */			mm->free_area_cache = addr + len;			return addr;		}		if (addr + mm->cached_hole_size < vma->vm_start)			mm->cached_hole_size = vma->vm_start - addr;		addr = vma->vm_end;		addr = align_addr(addr, filp, 0);	}}
unsigned long
arch_get_unmapped_area(struct file *filp, unsigned long addr,		unsigned long len, unsigned long pgoff, unsigned long flags)
arch_get_unmapped_area
struct file *filp
struct file
file
*filp
*
filp
unsigned long addr
unsigned long
addr
addr
unsigned long len
unsigned long
len
len
unsigned long pgoff
unsigned long
pgoff
pgoff
unsigned long flags
unsigned long
flags
flags
{	struct mm_struct *mm = current->mm;	struct vm_area_struct *vma;	unsigned long start_addr;	unsigned long begin, end;	if (flags & MAP_FIXED)		return addr;	find_start_end(flags, &begin, &end);	if (len > end)		return -ENOMEM;	if (addr) {		addr = PAGE_ALIGN(addr);		vma = find_vma(mm, addr);		if (end - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;	}	if (((flags & MAP_32BIT) || test_thread_flag(TIF_ADDR32))	    && len <= mm->cached_hole_size) {		mm->cached_hole_size = 0;		mm->free_area_cache = begin;	}	addr = mm->free_area_cache;	if (addr < begin)		addr = begin;	start_addr = addr;full_search:	addr = align_addr(addr, filp, 0);	for (vma = find_vma(mm, addr); ; vma = vma->vm_next) {		/* At this point:  (!vma || addr < vma->vm_end). */		if (end - len < addr) {			/*			 * Start a new search - just in case we missed			 * some holes.			 */			if (start_addr != begin) {				start_addr = addr = begin;				mm->cached_hole_size = 0;				goto full_search;			}			return -ENOMEM;		}		if (!vma || addr + len <= vma->vm_start) {			/*			 * Remember the place where we stopped the search:			 */			mm->free_area_cache = addr + len;			return addr;		}		if (addr + mm->cached_hole_size < vma->vm_start)			mm->cached_hole_size = vma->vm_start - addr;		addr = vma->vm_end;		addr = align_addr(addr, filp, 0);	}}
struct mm_struct *mm = current->mm;
struct mm_struct *mm = current->mm;
struct mm_struct
mm_struct
*mm = current->mm
*
mm
= current->mm
current->mm
current
current
mm
struct vm_area_struct *vma;
struct vm_area_struct *vma;
struct vm_area_struct
vm_area_struct
*vma
*
vma
unsigned long start_addr;
unsigned long start_addr;
unsigned long
start_addr
start_addr
unsigned long begin, end;
unsigned long begin, end;
unsigned long
begin
begin
end
end
if (flags & MAP_FIXED)		return addr;
flags & MAP_FIXED
flags
flags
MAP_FIXED
MAP_FIXED
return addr;
addr
addr
find_start_end(flags, &begin, &end);
find_start_end(flags, &begin, &end)
find_start_end
find_start_end
flags
flags
&begin
begin
begin
&end
end
end
if (len > end)		return -ENOMEM;
len > end
len
len
end
end
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
if (addr) {		addr = PAGE_ALIGN(addr);		vma = find_vma(mm, addr);		if (end - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;	}
addr
addr
{		addr = PAGE_ALIGN(addr);		vma = find_vma(mm, addr);		if (end - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;	}
addr = PAGE_ALIGN(addr);
addr = PAGE_ALIGN(addr)
addr
addr
PAGE_ALIGN(addr)
PAGE_ALIGN
PAGE_ALIGN
addr
addr
vma = find_vma(mm, addr);
vma = find_vma(mm, addr)
vma
vma
find_vma(mm, addr)
find_vma
find_vma
mm
mm
addr
addr
if (end - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma)))			return addr;
end - len >= addr &&		    (!vma || addr + len <= vm_start_gap(vma))
end - len >= addr
end - len
end
end
len
len
addr
addr
(!vma || addr + len <= vm_start_gap(vma))
!vma || addr + len <= vm_start_gap(vma)
!vma
vma
vma
addr + len <= vm_start_gap(vma)
addr + len
addr
addr
len
len
vm_start_gap(vma)
vm_start_gap
vm_start_gap
vma
vma
return addr;
addr
addr
if (((flags & MAP_32BIT) || test_thread_flag(TIF_ADDR32))	    && len <= mm->cached_hole_size) {		mm->cached_hole_size = 0;		mm->free_area_cache = begin;	}
((flags & MAP_32BIT) || test_thread_flag(TIF_ADDR32))	    && len <= mm->cached_hole_size
((flags & MAP_32BIT) || test_thread_flag(TIF_ADDR32))
(flags & MAP_32BIT) || test_thread_flag(TIF_ADDR32)
(flags & MAP_32BIT)
flags & MAP_32BIT
flags
flags
MAP_32BIT
MAP_32BIT
test_thread_flag(TIF_ADDR32)
test_thread_flag
test_thread_flag
TIF_ADDR32
TIF_ADDR32
len <= mm->cached_hole_size
len
len
mm->cached_hole_size
mm
mm
cached_hole_size
{		mm->cached_hole_size = 0;		mm->free_area_cache = begin;	}
mm->cached_hole_size = 0;
mm->cached_hole_size = 0
mm->cached_hole_size
mm
mm
cached_hole_size
0
mm->free_area_cache = begin;
mm->free_area_cache = begin
mm->free_area_cache
mm
mm
free_area_cache
begin
begin
addr = mm->free_area_cache;
addr = mm->free_area_cache
addr
addr
mm->free_area_cache
mm
mm
free_area_cache
if (addr < begin)		addr = begin;
addr < begin
addr
addr
begin
begin
addr = begin;
addr = begin
addr
addr
begin
begin
start_addr = addr;
start_addr = addr
start_addr
start_addr
addr
addr
full_search:	addr = align_addr(addr, filp, 0);
full_search
addr = align_addr(addr, filp, 0);
addr = align_addr(addr, filp, 0)
addr
addr
align_addr(addr, filp, 0)
align_addr
align_addr
addr
addr
filp
filp
0
for (vma = find_vma(mm, addr); ; vma = vma->vm_next) {		/* At this point:  (!vma || addr < vma->vm_end). */		if (end - len < addr) {			/*			 * Start a new search - just in case we missed			 * some holes.			 */			if (start_addr != begin) {				start_addr = addr = begin;				mm->cached_hole_size = 0;				goto full_search;			}			return -ENOMEM;		}		if (!vma || addr + len <= vma->vm_start) {			/*			 * Remember the place where we stopped the search:			 */			mm->free_area_cache = addr + len;			return addr;		}		if (addr + mm->cached_hole_size < vma->vm_start)			mm->cached_hole_size = vma->vm_start - addr;		addr = vma->vm_end;		addr = align_addr(addr, filp, 0);	}
vma = find_vma(mm, addr);
vma = find_vma(mm, addr)
vma
vma
find_vma(mm, addr)
find_vma
find_vma
mm
mm
addr
addr
vma = vma->vm_next
vma
vma
vma->vm_next
vma
vma
vm_next
{		/* At this point:  (!vma || addr < vma->vm_end). */		if (end - len < addr) {			/*			 * Start a new search - just in case we missed			 * some holes.			 */			if (start_addr != begin) {				start_addr = addr = begin;				mm->cached_hole_size = 0;				goto full_search;			}			return -ENOMEM;		}		if (!vma || addr + len <= vma->vm_start) {			/*			 * Remember the place where we stopped the search:			 */			mm->free_area_cache = addr + len;			return addr;		}		if (addr + mm->cached_hole_size < vma->vm_start)			mm->cached_hole_size = vma->vm_start - addr;		addr = vma->vm_end;		addr = align_addr(addr, filp, 0);	}
if (end - len < addr) {			/*			 * Start a new search - just in case we missed			 * some holes.			 */			if (start_addr != begin) {				start_addr = addr = begin;				mm->cached_hole_size = 0;				goto full_search;			}			return -ENOMEM;		}
end - len < addr
end - len
end
end
len
len
addr
addr
{			/*			 * Start a new search - just in case we missed			 * some holes.			 */			if (start_addr != begin) {				start_addr = addr = begin;				mm->cached_hole_size = 0;				goto full_search;			}			return -ENOMEM;		}
if (start_addr != begin) {				start_addr = addr = begin;				mm->cached_hole_size = 0;				goto full_search;			}
start_addr != begin
start_addr
start_addr
begin
begin
{				start_addr = addr = begin;				mm->cached_hole_size = 0;				goto full_search;			}
start_addr = addr = begin;
start_addr = addr = begin
start_addr
start_addr
addr = begin
addr
addr
begin
begin
mm->cached_hole_size = 0;
mm->cached_hole_size = 0
mm->cached_hole_size
mm
mm
cached_hole_size
0
goto full_search;
full_search
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
if (!vma || addr + len <= vma->vm_start) {			/*			 * Remember the place where we stopped the search:			 */			mm->free_area_cache = addr + len;			return addr;		}
!vma || addr + len <= vma->vm_start
!vma
vma
vma
addr + len <= vma->vm_start
addr + len
addr
addr
len
len
vma->vm_start
vma
vma
vm_start
{			/*			 * Remember the place where we stopped the search:			 */			mm->free_area_cache = addr + len;			return addr;		}
mm->free_area_cache = addr + len;
mm->free_area_cache = addr + len
mm->free_area_cache
mm
mm
free_area_cache
addr + len
addr
addr
len
len
return addr;
addr
addr
if (addr + mm->cached_hole_size < vma->vm_start)			mm->cached_hole_size = vma->vm_start - addr;
addr + mm->cached_hole_size < vma->vm_start
addr + mm->cached_hole_size
addr
addr
mm->cached_hole_size
mm
mm
cached_hole_size
vma->vm_start
vma
vma
vm_start
mm->cached_hole_size = vma->vm_start - addr;
mm->cached_hole_size = vma->vm_start - addr
mm->cached_hole_size
mm
mm
cached_hole_size
vma->vm_start - addr
vma->vm_start
vma
vma
vm_start
addr
addr
addr = vma->vm_end;
addr = vma->vm_end
addr
addr
vma->vm_end
vma
vma
vm_end
addr = align_addr(addr, filp, 0);
addr = align_addr(addr, filp, 0)
addr
addr
align_addr(addr, filp, 0)
align_addr
align_addr
addr
addr
filp
filp
0
-----joern-----
(133,189,0)
(112,128,0)
(159,111,0)
(6,199,0)
(186,25,0)
(182,179,0)
(78,28,0)
(120,33,0)
(194,11,0)
(199,125,0)
(73,121,0)
(51,87,0)
(165,199,0)
(155,42,0)
(84,58,0)
(175,121,0)
(7,121,0)
(84,186,0)
(75,139,0)
(3,19,0)
(120,40,0)
(43,117,0)
(38,92,0)
(18,154,0)
(184,173,0)
(13,125,0)
(103,26,0)
(64,3,0)
(90,78,0)
(91,139,0)
(32,90,0)
(53,171,0)
(79,90,0)
(9,73,0)
(128,19,0)
(154,99,0)
(129,107,0)
(129,56,0)
(11,166,0)
(3,40,0)
(1,49,0)
(114,84,0)
(29,39,0)
(197,169,0)
(120,157,0)
(71,139,0)
(146,139,0)
(190,107,0)
(131,37,0)
(42,164,0)
(31,30,0)
(172,40,0)
(186,84,0)
(8,89,0)
(36,179,0)
(80,8,0)
(171,40,0)
(137,46,0)
(106,17,0)
(137,111,0)
(85,44,0)
(17,186,0)
(157,133,0)
(59,60,0)
(1,78,0)
(31,40,0)
(19,128,0)
(1,58,0)
(26,35,0)
(11,8,0)
(107,190,0)
(30,40,0)
(190,30,0)
(157,40,0)
(121,35,0)
(59,180,0)
(171,19,0)
(164,40,0)
(43,35,0)
(111,137,0)
(192,28,0)
(119,87,0)
(159,8,0)
(188,173,0)
(151,55,0)
(77,19,0)
(162,133,0)
(15,182,0)
(61,89,0)
(63,25,0)
(37,40,0)
(99,160,0)
(113,159,0)
(173,150,0)
(124,80,0)
(60,49,0)
(70,133,0)
(177,28,0)
(154,129,0)
(49,40,0)
(134,15,0)
(82,1,0)
(160,8,0)
(176,30,0)
(182,40,0)
(136,95,0)
(56,37,0)
(199,8,0)
(81,39,0)
(198,59,0)
(164,166,0)
(15,58,0)
(12,7,0)
(163,165,0)
(160,99,0)
(173,8,0)
(121,7,0)
(24,171,0)
(44,58,0)
(178,190,0)
(19,179,0)
(16,122,0)
(144,58,0)
(123,80,0)
(69,185,0)
(185,69,0)
(20,55,0)
(8,139,0)
(96,42,0)
(117,69,0)
(48,43,0)
(191,78,0)
(56,129,0)
(17,46,0)
(84,78,0)
(54,139,0)
(23,99,0)
(160,40,0)
(167,109,0)
(17,157,0)
(52,65,0)
(49,19,0)
(185,80,0)
(101,190,0)
(110,199,0)
(28,58,0)
(99,95,0)
(63,78,0)
(117,43,0)
(126,157,0)
(117,169,0)
(158,4,0)
(133,109,0)
(83,182,0)
(102,33,0)
(190,178,0)
(72,139,0)
(94,3,0)
(55,46,0)
(169,117,0)
(30,176,0)
(196,164,0)
(166,139,0)
(141,99,0)
(121,139,0)
(130,30,0)
(56,141,0)
(132,122,0)
(63,58,0)
(171,59,0)
(37,30,0)
(170,178,0)
(44,8,0)
(94,92,0)
(92,40,0)
(107,129,0)
(100,128,0)
(147,31,0)
(33,46,0)
(90,53,0)
(59,8,0)
(133,51,0)
(150,34,0)
(180,183,0)
(141,56,0)
(22,172,0)
(37,56,0)
(51,40,0)
(185,46,0)
(165,65,0)
(80,185,0)
(76,26,0)
(87,183,0)
(181,179,0)
(178,46,0)
(57,1,0)
(160,30,0)
(66,180,0)
(118,141,0)
(87,51,0)
(25,63,0)
(128,189,0)
(133,40,0)
(152,11,0)
(176,40,0)
(182,15,0)
(37,46,0)
(105,179,0)
(90,58,0)
(148,133,0)
(153,176,0)
(156,160,0)
(168,164,0)
(69,117,0)
(49,1,0)
(157,139,0)
(133,166,0)
(122,60,0)
(59,171,0)
(172,166,0)
(129,154,0)
(165,122,0)
(17,40,0)
(33,120,0)
(171,53,0)
(165,39,0)
(44,40,0)
(17,19,0)
(28,78,0)
(109,40,0)
(41,150,0)
(125,34,0)
(97,43,0)
(39,8,0)
(89,8,0)
(94,31,0)
(68,51,0)
(44,157,0)
(111,135,0)
(53,90,0)
(104,128,0)
(14,178,0)
(3,157,0)
(67,137,0)
(164,139,0)
(128,182,0)
(115,44,0)
(94,165,0)
(49,157,0)
(121,73,0)
(137,19,0)
(171,157,0)
(50,139,0)
(187,139,0)
(137,157,0)
(108,59,0)
(19,40,0)
(137,40,0)
(122,8,0)
(166,40,0)
(88,84,0)
(2,37,0)
(42,87,0)
(45,160,0)
(127,8,0)
(128,40,0)
(49,60,0)
(143,120,0)
(11,150,0)
(47,109,0)
(30,95,0)
(190,40,0)
(15,78,0)
(166,11,0)
(195,139,0)
(161,163,0)
(93,166,0)
(58,44,0)
(149,183,0)
(165,173,0)
(0,185,0)
(25,186,0)
(138,17,0)
(164,109,0)
(10,139,0)
(145,51,0)
(27,15,0)
(4,5,0)
(174,137,0)
(120,19,0)
(140,63,0)
(142,49,0)
(98,172,0)
(193,33,0)
(3,135,0)
(39,180,0)
(59,125,0)
(74,139,0)
(116,89,0)
(133,157,0)
(62,139,0)
(21,159,0)
(186,17,0)
(94,5,0)
(171,40,1)
(14,170,1)
(141,118,1)
(172,40,1)
(154,99,1)
(70,126,1)
(150,41,1)
(58,44,1)
(51,68,1)
(25,186,1)
(160,30,1)
(192,191,1)
(122,8,1)
(2,131,1)
(132,16,1)
(193,58,1)
(174,67,1)
(113,25,1)
(165,39,1)
(43,48,1)
(107,190,1)
(84,78,1)
(137,46,1)
(158,55,1)
(137,174,1)
(160,8,1)
(21,113,1)
(128,112,1)
(42,155,1)
(49,157,1)
(170,99,1)
(45,156,1)
(159,8,1)
(56,37,1)
(48,97,1)
(44,40,1)
(171,19,1)
(25,63,1)
(154,18,1)
(42,87,1)
(28,177,1)
(82,57,1)
(37,2,1)
(190,40,1)
(153,130,1)
(148,70,1)
(120,40,1)
(97,107,1)
(26,76,1)
(30,40,1)
(178,46,1)
(76,103,1)
(166,40,1)
(88,114,1)
(56,141,1)
(29,87,1)
(173,8,1)
(126,149,1)
(193,78,1)
(90,32,1)
(133,40,1)
(59,8,1)
(92,40,1)
(167,172,1)
(164,109,1)
(49,40,1)
(177,192,1)
(17,40,1)
(39,8,1)
(156,23,1)
(15,134,1)
(133,109,1)
(92,38,1)
(17,157,1)
(33,102,1)
(4,158,1)
(94,5,1)
(17,138,1)
(67,159,1)
(1,58,1)
(59,198,1)
(32,79,1)
(3,64,1)
(90,78,1)
(137,157,1)
(9,7,1)
(121,7,1)
(155,96,1)
(41,173,1)
(194,152,1)
(128,189,1)
(164,40,1)
(120,157,1)
(120,33,1)
(96,120,1)
(86,55,1)
(145,119,1)
(17,19,1)
(53,90,1)
(112,100,1)
(188,125,1)
(31,147,1)
(83,60,1)
(61,127,1)
(28,78,1)
(198,108,1)
(120,143,1)
(37,30,1)
(26,35,1)
(97,86,1)
(78,28,1)
(164,196,1)
(157,40,1)
(119,42,1)
(1,78,1)
(55,20,1)
(68,145,1)
(199,6,1)
(122,132,1)
(106,63,1)
(84,88,1)
(123,0,1)
(110,69,1)
(5,4,1)
(37,46,1)
(190,30,1)
(133,51,1)
(175,26,1)
(69,185,1)
(98,166,1)
(44,8,1)
(59,60,1)
(27,83,1)
(93,69,1)
(66,39,1)
(11,8,1)
(49,142,1)
(116,61,1)
(57,122,1)
(163,161,1)
(121,35,1)
(176,153,1)
(168,172,1)
(140,120,1)
(162,148,1)
(172,22,1)
(38,26,1)
(80,8,1)
(180,66,1)
(114,17,1)
(102,193,1)
(15,58,1)
(182,40,1)
(160,40,1)
(8,89,1)
(159,21,1)
(94,31,1)
(109,47,1)
(59,125,1)
(18,190,1)
(199,8,1)
(151,121,1)
(165,173,1)
(73,9,1)
(124,123,1)
(81,29,1)
(103,8,1)
(3,19,1)
(128,40,1)
(30,176,1)
(120,19,1)
(178,14,1)
(99,160,1)
(117,43,1)
(125,13,1)
(23,30,1)
(7,12,1)
(49,19,1)
(94,3,1)
(144,157,1)
(169,197,1)
(33,46,1)
(165,199,1)
(3,40,1)
(184,188,1)
(133,166,1)
(42,164,1)
(15,78,1)
(31,40,1)
(19,128,1)
(94,92,1)
(109,40,1)
(22,98,1)
(85,144,1)
(134,27,1)
(47,167,1)
(128,182,1)
(171,157,1)
(28,58,1)
(24,25,1)
(171,59,1)
(133,162,1)
(6,110,1)
(37,40,1)
(0,117,1)
(165,163,1)
(63,78,1)
(80,124,1)
(16,53,1)
(172,166,1)
(93,150,1)
(129,56,1)
(173,184,1)
(49,1,1)
(131,154,1)
(63,58,1)
(100,104,1)
(55,46,1)
(165,122,1)
(94,165,1)
(11,150,1)
(44,157,1)
(43,35,1)
(69,117,1)
(137,40,1)
(20,151,1)
(164,166,1)
(44,115,1)
(196,168,1)
(64,111,1)
(141,99,1)
(19,40,1)
(63,140,1)
(126,164,1)
(101,178,1)
(79,171,1)
(160,45,1)
(186,17,1)
(118,37,1)
(59,180,1)
(166,11,1)
(83,53,1)
(1,82,1)
(185,46,1)
(182,15,1)
(39,81,1)
(89,116,1)
(13,199,1)
(17,46,1)
(133,189,1)
(161,42,1)
(3,157,1)
(121,73,1)
(87,51,1)
(12,175,1)
(84,58,1)
(117,169,1)
(186,84,1)
(168,109,1)
(157,133,1)
(129,154,1)
(90,58,1)
(143,33,1)
(176,40,1)
(107,129,1)
(108,24,1)
(137,19,1)
(111,137,1)
(104,77,1)
(190,101,1)
(115,85,1)
(147,107,1)
(149,180,1)
(197,43,1)
(152,93,1)
(185,80,1)
(51,40,1)
(11,194,1)
(53,171,1)
(138,106,1)
(77,182,1)
(191,19,1)
(190,178,1)
(60,49,1)
(130,86,1)
(31,30,1)
(142,1,1)
(172,40,2)
(178,46,2)
(117,86,2)
(2,154,2)
(69,185,2)
(190,40,2)
(121,7,2)
(58,42,2)
(193,107,2)
(48,107,2)
(120,157,2)
(172,166,2)
(70,107,2)
(14,86,2)
(63,120,2)
(59,125,2)
(3,19,2)
(151,26,2)
(128,40,2)
(30,86,2)
(134,25,2)
(30,40,2)
(160,30,2)
(22,86,2)
(199,8,2)
(42,120,2)
(58,86,2)
(53,171,2)
(67,25,2)
(140,120,2)
(148,86,2)
(162,86,2)
(145,42,2)
(77,25,2)
(110,69,2)
(33,46,2)
(165,122,2)
(44,8,2)
(37,30,2)
(17,19,2)
(182,40,2)
(143,25,2)
(97,107,2)
(166,107,2)
(44,42,2)
(162,42,2)
(49,157,2)
(108,25,2)
(99,86,2)
(164,40,2)
(28,58,2)
(180,42,2)
(93,107,2)
(176,40,2)
(28,78,2)
(184,69,2)
(15,58,2)
(42,164,2)
(94,92,2)
(70,86,2)
(156,86,2)
(4,55,2)
(193,86,2)
(171,19,2)
(190,178,2)
(23,86,2)
(137,25,2)
(84,58,2)
(133,109,2)
(80,117,2)
(124,117,2)
(3,40,2)
(49,40,2)
(69,86,2)
(178,86,2)
(164,166,2)
(102,86,2)
(150,69,2)
(81,42,2)
(11,150,2)
(143,86,2)
(48,86,2)
(154,99,2)
(78,25,2)
(16,53,2)
(174,25,2)
(185,46,2)
(5,55,2)
(149,42,2)
(100,25,2)
(1,53,2)
(107,129,2)
(59,180,2)
(43,35,2)
(115,107,2)
(171,59,2)
(177,25,2)
(115,86,2)
(190,86,2)
(144,42,2)
(167,172,2)
(162,107,2)
(49,19,2)
(84,63,2)
(27,25,2)
(1,78,2)
(144,107,2)
(19,40,2)
(128,189,2)
(120,42,2)
(79,25,2)
(49,1,2)
(133,86,2)
(101,86,2)
(128,182,2)
(133,40,2)
(37,40,2)
(175,26,2)
(142,53,2)
(193,42,2)
(19,128,2)
(188,69,2)
(31,107,2)
(172,86,2)
(25,186,2)
(60,49,2)
(171,25,2)
(120,19,2)
(73,26,2)
(93,86,2)
(38,26,2)
(165,199,2)
(120,86,2)
(53,25,2)
(58,44,2)
(102,25,2)
(69,107,2)
(42,87,2)
(0,117,2)
(194,107,2)
(104,25,2)
(22,107,2)
(137,157,2)
(33,107,2)
(137,46,2)
(121,73,2)
(97,86,2)
(147,107,2)
(199,69,2)
(196,107,2)
(55,46,2)
(53,90,2)
(92,26,2)
(182,25,2)
(185,117,2)
(194,86,2)
(112,25,2)
(191,25,2)
(13,69,2)
(3,157,2)
(164,107,2)
(133,107,2)
(114,63,2)
(157,42,2)
(30,176,2)
(163,42,2)
(31,30,2)
(98,86,2)
(59,25,2)
(78,28,2)
(141,99,2)
(84,78,2)
(160,8,2)
(159,8,2)
(21,25,2)
(85,107,2)
(164,109,2)
(120,40,2)
(92,40,2)
(126,42,2)
(11,107,2)
(39,42,2)
(31,40,2)
(197,43,2)
(55,26,2)
(129,154,2)
(185,80,2)
(176,86,2)
(126,86,2)
(122,8,2)
(68,42,2)
(166,11,2)
(166,86,2)
(173,69,2)
(137,19,2)
(25,120,2)
(83,25,2)
(66,42,2)
(165,39,2)
(25,63,2)
(41,69,2)
(158,55,2)
(148,107,2)
(171,157,2)
(160,40,2)
(90,78,2)
(19,25,2)
(121,26,2)
(119,42,2)
(86,55,2)
(144,86,2)
(49,53,2)
(58,107,2)
(132,53,2)
(9,26,2)
(29,42,2)
(17,46,2)
(157,107,2)
(102,42,2)
(56,141,2)
(11,8,2)
(43,86,2)
(120,107,2)
(94,5,2)
(63,78,2)
(33,25,2)
(90,58,2)
(33,42,2)
(18,190,2)
(121,35,2)
(17,40,2)
(59,8,2)
(123,117,2)
(186,84,2)
(20,26,2)
(138,63,2)
(37,154,2)
(107,190,2)
(111,137,2)
(190,30,2)
(165,42,2)
(32,25,2)
(45,86,2)
(126,107,2)
(1,58,2)
(117,107,2)
(182,15,2)
(111,25,2)
(6,69,2)
(125,69,2)
(44,157,2)
(133,51,2)
(172,107,2)
(157,133,2)
(164,86,2)
(44,40,2)
(87,51,2)
(198,25,2)
(122,53,2)
(113,25,2)
(133,166,2)
(33,86,2)
(128,25,2)
(154,190,2)
(170,86,2)
(15,78,2)
(11,86,2)
(160,86,2)
(120,25,2)
(60,53,2)
(148,42,2)
(57,53,2)
(186,63,2)
(51,42,2)
(7,26,2)
(96,120,2)
(118,154,2)
(98,107,2)
(168,107,2)
(85,42,2)
(94,31,2)
(153,86,2)
(171,40,2)
(115,42,2)
(47,172,2)
(24,25,2)
(131,154,2)
(106,63,2)
(166,40,2)
(196,86,2)
(88,63,2)
(37,46,2)
(192,25,2)
(168,86,2)
(63,58,2)
(80,8,2)
(137,40,2)
(59,60,2)
(120,33,2)
(85,86,2)
(173,8,2)
(159,25,2)
(43,107,2)
(186,17,2)
(165,173,2)
(51,40,2)
(129,56,2)
(157,86,2)
(94,3,2)
(155,120,2)
(157,40,2)
(17,157,2)
(129,190,2)
(117,169,2)
(141,154,2)
(143,42,2)
(69,117,2)
(17,63,2)
(56,154,2)
(117,43,2)
(64,25,2)
(39,8,2)
(133,189,2)
(143,107,2)
(26,35,2)
(90,25,2)
(15,25,2)
(169,43,2)
(44,107,2)
(56,37,2)
(109,40,2)
(87,42,2)
(152,86,2)
(70,42,2)
(8,89,2)
(44,86,2)
(102,107,2)
(152,107,2)
(109,172,2)
(99,160,2)
(82,53,2)
(133,42,2)
(130,86,2)
(94,165,2)
(161,42,2)
(12,26,2)
(193,25,2)
(3,25,2)
(28,25,2)
(107,86,2)
-----------------------------------
(0,len)
(1,vma->vm_start)
(2,len)
(3,return addr;)
(4,-ENOMEM)
(5,return -ENOMEM;)
(6,cached_hole_size)
(7,&begin)
(8,*mm = current->mm)
(9,end)
(10,if (flags & MAP_FIXED)
(11,mm->free_area_cache)
(12,begin)
(13,0)
(14,len)
(15,vma->vm_end)
(16,mm)
(17,addr + len)
(18,vma)
(19,addr = align_addr(addr, filp, 0)
(20,end)
(21,free_area_cache)
(22,begin)
(23,vma)
(24,addr)
(25,!vma || addr + len <= vma->vm_start)
(26,flags & MAP_FIXED)
(27,vma)
(28,vma->vm_next)
(29,mm)
(30,addr = PAGE_ALIGN(addr)
(31,return addr;)
(32,vm_start)
(33,end - len)
(34,)
(35,unsigned long flags)
(36,if (end - len < addr)
(37,addr + len)
(38,addr)
(39,mm->cached_hole_size)
(40,unsigned long addr)
(41,begin)
(42,start_addr != begin)
(43,flags & MAP_32BIT)
(44,find_vma(mm, addr)
(45,addr)
(46,unsigned long len)
(47,begin)
(48,MAP_32BIT)
(49,vma->vm_start - addr)
(50,if (len > end)
(51,addr = begin)
(52,if (start_addr != begin)
(53,addr + mm->cached_hole_size < vma->vm_start)
(54,vma)
(55,len > end)
(56,addr + len <= vm_start_gap(vma)
(57,vma)
(58,vma = find_vma(mm, addr)
(59,mm->cached_hole_size)
(60,mm->cached_hole_size = vma->vm_start - addr)
(61,current)
(62,full_search:)
(63,!vma)
(64,addr)
(65,)
(66,0)
(67,addr)
(68,begin)
(69,((flags & MAP_32BIT)
(70,addr)
(71,if (addr)
(72,mm)
(73,&end)
(74,start_addr)
(75,if (addr < begin)
(76,MAP_FIXED)
(77,addr)
(78,vma = vma->vm_next)
(79,vma)
(80,mm->cached_hole_size)
(81,cached_hole_size)
(82,vm_start)
(83,addr)
(84,vma->vm_start)
(85,mm)
(86,addr)
(87,start_addr = addr = begin)
(88,vm_start)
(89,current->mm)
(90,vma->vm_start)
(91,if (((flags & MAP_32BIT)
(92,return addr;)
(93,addr)
(94,RET)
(95,)
(96,start_addr)
(97,flags)
(98,addr)
(99,vma = find_vma(mm, addr)
(100,filp)
(101,addr)
(102,len)
(103,flags)
(104,addr)
(105,if (addr + mm->cached_hole_size < vma->vm_start)
(106,addr)
(107,end - len >= addr &&\n\\n\\t\\t    (!vma || addr + len <= vm_start_gap(vma)
(108,mm)
(109,addr = begin)
(110,mm)
(111,mm->free_area_cache = addr + len)
(112,0)
(113,mm)
(114,vma)
(115,addr)
(116,mm)
(117,(flags & MAP_32BIT)
(118,vma)
(119,start_addr)
(120,end - len < addr)
(121,find_start_end(flags, &begin, &end)
(122,mm->cached_hole_size)
(123,mm)
(124,cached_hole_size)
(125,mm->cached_hole_size = 0)
(126,addr)
(127,mm)
(128,align_addr(addr, filp, 0)
(129,!vma || addr + len <= vm_start_gap(vma)
(130,addr)
(131,addr)
(132,cached_hole_size)
(133,align_addr(addr, filp, 0)
(134,vm_end)
(135,)
(136,if (end - len >= addr &&\n\\n\\t\\t    (!vma || addr + len <= vm_start_gap(vma)
(137,addr + len)
(138,len)
(139,)
(140,vma)
(141,vm_start_gap(vma)
(142,addr)
(143,addr)
(144,vma)
(145,addr)
(146,begin)
(147,addr)
(148,filp)
(149,goto full_search;)
(150,mm->free_area_cache = begin)
(151,len)
(152,mm)
(153,addr)
(154,!vma)
(155,begin)
(156,mm)
(157,addr = align_addr(addr, filp, 0)
(158,ENOMEM)
(159,mm->free_area_cache)
(160,find_vma(mm, addr)
(161,ENOMEM)
(162,0)
(163,-ENOMEM)
(164,start_addr = addr)
(165,return -ENOMEM;)
(166,addr = mm->free_area_cache)
(167,addr)
(168,start_addr)
(169,test_thread_flag(TIF_ADDR32)
(170,end)
(171,addr + mm->cached_hole_size)
(172,addr < begin)
(173,mm->free_area_cache)
(174,len)
(175,flags)
(176,PAGE_ALIGN(addr)
(177,vm_next)
(178,end - len)
(179,)
(180,mm->cached_hole_size = 0)
(181,if (!vma || addr + len <= vma->vm_start)
(182,addr = vma->vm_end)
(183,)
(184,free_area_cache)
(185,len <= mm->cached_hole_size)
(186,addr + len <= vma->vm_start)
(187,end)
(188,mm)
(189,struct file *filp)
(190,end - len >= addr)
(191,vma)
(192,vma)
(193,end)
(194,free_area_cache)
(195,for (vma = find_vma(mm, addr)
(196,addr)
(197,TIF_ADDR32)
(198,cached_hole_size)
(199,mm->cached_hole_size)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^