-----label-----
0
-----code-----
static void goodG2B1()
{
    twoIntsStruct * data;
    data = NULL;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
22,23
24,25
25,26
25,27
26,27
31,32
32,33
32,34
33,34
35,36
35,37
36,37
36,38
37,38
39,40
41,42
41,43
42,43
44,45
44,46
46,47
47,48
47,49
48,49
51,52
52,53
52,54
53,54
53,55
54,55
54,56
55,56
60,61
61,62
61,63
62,63
62,64
63,64
63,65
64,65
69,70
70,71
70,72
71,72
73,74
74,75
74,76
75,76
79,80
79,81
81,82
81,83
81,84
81,85
81,86
81,87
82,83
87,88
88,89
88,90
89,90
-----nextToken-----
2,4,9,11,12,16,18,20,23,27,28,29,30,34,38,40,43,45,49,50,56,57,58,59,65,66,67,68,72,76,77,78,80,83,84,85,86,90,91,92
-----computeFrom-----
14,15
14,16
32,33
32,34
44,45
44,46
52,53
52,54
61,62
61,63
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodG2B1(){    twoIntsStruct * data;    data = NULL;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodG2B1()
goodG2B1
{    twoIntsStruct * data;    data = NULL;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct));
data = (twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)ALLOCA(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
ALLOCA(100*sizeof(twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(18,16,0)
(4,31,0)
(21,18,0)
(30,28,0)
(50,6,0)
(6,50,0)
(49,0,0)
(14,11,0)
(33,11,0)
(20,29,0)
(8,28,0)
(45,46,0)
(3,17,0)
(4,46,0)
(1,28,0)
(17,29,0)
(34,16,0)
(4,36,0)
(22,9,0)
(19,16,0)
(12,13,0)
(2,28,0)
(40,10,0)
(7,10,0)
(39,11,0)
(36,16,0)
(35,16,0)
(50,16,0)
(36,4,0)
(42,16,0)
(9,11,0)
(31,4,0)
(13,36,0)
(17,36,0)
(41,17,0)
(0,45,0)
(46,45,0)
(6,13,0)
(46,4,0)
(29,44,0)
(25,16,0)
(10,21,0)
(24,42,0)
(43,11,0)
(23,18,0)
(26,45,0)
(15,8,0)
(13,6,0)
(44,16,0)
(10,36,0)
(38,36,0)
(32,13,0)
(45,0,0)
(29,17,0)
(48,21,0)
(5,8,0)
(21,10,0)
(37,44,0)
(51,33,1)
(50,6,1)
(42,24,1)
(35,42,1)
(4,31,1)
(38,27,1)
(10,36,1)
(26,38,1)
(13,32,1)
(21,10,1)
(44,37,1)
(20,17,1)
(5,15,1)
(47,25,1)
(33,47,1)
(9,22,1)
(18,23,1)
(41,18,1)
(21,48,1)
(17,3,1)
(12,44,1)
(10,40,1)
(29,20,1)
(47,35,1)
(8,5,1)
(24,27,1)
(6,13,1)
(48,10,1)
(32,12,1)
(29,17,1)
(39,9,1)
(36,4,1)
(23,21,1)
(25,50,1)
(22,47,1)
(27,8,1)
(3,41,1)
(4,46,1)
(51,39,1)
(40,7,1)
(7,36,1)
(49,26,1)
(13,36,1)
(45,0,1)
(0,49,1)
(37,29,1)
(46,45,1)
(17,36,1)
(10,36,2)
(17,36,2)
(4,46,2)
(6,13,2)
(36,27,2)
(40,27,2)
(37,27,2)
(48,27,2)
(10,27,2)
(38,27,2)
(29,17,2)
(4,31,2)
(3,27,2)
(46,27,2)
(41,27,2)
(36,4,2)
(9,47,2)
(21,10,2)
(0,27,2)
(39,47,2)
(13,27,2)
(49,27,2)
(26,27,2)
(21,27,2)
(44,27,2)
(50,27,2)
(12,27,2)
(25,27,2)
(24,27,2)
(32,27,2)
(13,36,2)
(6,27,2)
(45,0,2)
(20,27,2)
(18,27,2)
(45,27,2)
(22,47,2)
(46,45,2)
(7,27,2)
(33,47,2)
(50,6,2)
(29,27,2)
(42,27,2)
(35,27,2)
(23,27,2)
(4,27,2)
(17,27,2)
-----------------------------------
(0,sizeof(twoIntsStruct)
(1,switch(5)
(2,data)
(3,0)
(4,(twoIntsStruct *)
(5,NULL)
(6,&data[0])
(7,data)
(8,data = NULL)
(9,printLine("Benign, fixed string")
(10,data[0])
(11,)
(12,data)
(13,data[0])
(14,default:)
(15,data)
(16,)
(17,data[0])
(18,data[0].intOne = 0)
(19,case 6:)
(20,intTwo)
(21,data[0].intOne)
(22,"Benign, fixed string")
(23,0)
(24,"Benign, fixed string")
(25,break;)
(26,100)
(27,5)
(28,)
(29,data[0].intTwo)
(30,switch(7)
(31,twoIntsStruct *)
(32,0)
(33,break;)
(34,default:)
(35,break;)
(36,data = (twoIntsStruct *)
(37,0)
(38,data)
(39,break;)
(40,0)
(41,data)
(42,printLine("Benign, fixed string")
(43,case 7:)
(44,data[0].intTwo = 0)
(45,100*sizeof(twoIntsStruct)
(46,ALLOCA(100*sizeof(twoIntsStruct)
(47,7)
(48,intOne)
(49,twoIntsStruct)
(50,printStructLine(&data[0])
(51,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^