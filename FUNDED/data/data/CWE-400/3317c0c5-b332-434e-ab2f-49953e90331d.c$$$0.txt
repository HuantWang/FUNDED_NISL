-----label-----
0
-----code-----
static void goodB2G2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
49,50
51,52
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
60,62
61,62
61,63
62,63
67,68
68,69
68,70
69,70
69,71
70,71
70,72
71,72
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
91,92
91,93
92,93
94,95
95,96
96,97
96,98
97,98
99,100
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,37,39,43,44,48,50,55,57,63,64,65,66,72,73,74,75,79,83,85,89,90,93,98,100
-----computeFrom-----
14,15
14,16
24,25
24,26
38,39
38,40
46,47
46,48
59,60
59,61
68,69
68,70
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    struct _twoIntsStruct * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)realloc(data, 100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
realloc(data, 100*sizeof(struct _twoIntsStruct))
realloc
realloc
data
data
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(GLOBAL_CONST_TRUE)    {        /* FIX: Deallocate memory */        free(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(21,39,0)
(35,20,0)
(42,9,0)
(37,17,0)
(8,28,0)
(31,34,0)
(47,10,0)
(38,2,0)
(9,4,0)
(36,46,0)
(21,20,0)
(2,38,0)
(48,15,0)
(1,30,0)
(39,21,0)
(28,9,0)
(30,9,0)
(26,28,0)
(17,9,0)
(45,34,0)
(25,27,0)
(34,12,0)
(32,45,0)
(44,42,0)
(36,42,0)
(5,21,0)
(14,38,0)
(13,30,0)
(46,4,0)
(47,1,0)
(30,1,0)
(45,9,0)
(9,11,0)
(11,9,0)
(12,4,0)
(11,22,0)
(18,27,0)
(10,47,0)
(42,36,0)
(41,42,0)
(43,15,0)
(20,15,0)
(40,45,0)
(17,15,0)
(29,47,0)
(39,16,0)
(33,36,0)
(6,12,0)
(51,4,0)
(29,4,0)
(23,27,0)
(2,7,0)
(47,29,0)
(20,11,0)
(17,19,0)
(22,11,0)
(11,20,0)
(0,30,0)
(15,27,0)
(1,47,0)
(34,45,0)
(24,46,0)
(20,21,0)
(16,39,0)
(49,9,0)
(52,3,1)
(3,50,1)
(28,26,1)
(36,42,1)
(49,50,1)
(9,11,1)
(29,47,1)
(34,31,1)
(30,0,1)
(35,49,1)
(12,6,1)
(11,20,1)
(47,1,1)
(37,3,1)
(17,9,1)
(14,28,1)
(2,38,1)
(30,9,1)
(47,10,1)
(41,12,1)
(48,43,1)
(42,9,1)
(36,33,1)
(38,14,1)
(5,35,1)
(50,15,1)
(17,37,1)
(31,45,1)
(28,9,1)
(0,13,1)
(15,48,1)
(20,15,1)
(6,34,1)
(13,46,1)
(39,5,1)
(40,2,1)
(17,15,1)
(34,45,1)
(42,44,1)
(44,41,1)
(33,42,1)
(40,28,1)
(21,39,1)
(45,9,1)
(20,21,1)
(24,36,1)
(8,9,1)
(46,24,1)
(11,22,1)
(45,32,1)
(3,29,1)
(26,8,1)
(52,17,1)
(32,40,1)
(39,16,1)
(1,30,1)
(11,20,2)
(13,50,2)
(37,3,2)
(45,50,2)
(30,9,2)
(49,50,2)
(11,50,2)
(42,9,2)
(20,21,2)
(30,50,2)
(40,50,2)
(1,50,2)
(47,1,2)
(9,11,2)
(28,50,2)
(36,42,2)
(31,50,2)
(24,50,2)
(34,45,2)
(46,50,2)
(11,22,2)
(29,47,2)
(6,50,2)
(38,28,2)
(0,50,2)
(2,28,2)
(39,50,2)
(29,50,2)
(42,50,2)
(41,50,2)
(20,15,2)
(5,50,2)
(2,38,2)
(9,50,2)
(17,15,2)
(45,9,2)
(21,50,2)
(32,50,2)
(1,30,2)
(12,50,2)
(17,9,2)
(21,39,2)
(36,50,2)
(34,50,2)
(8,50,2)
(17,3,2)
(39,16,2)
(26,50,2)
(35,50,2)
(33,50,2)
(20,50,2)
(14,28,2)
(28,9,2)
(47,50,2)
(44,50,2)
(47,10,2)
-----------------------------------
(0,0)
(1,&data[0])
(2,exit(-1)
(3,GLOBAL_CONST_TRUE)
(4,)
(5,100)
(6,0)
(7,)
(8,data)
(9,data = (struct _twoIntsStruct *)
(10,twoIntsStruct *)
(11,(struct _twoIntsStruct *)
(12,data[0].intOne = 0)
(13,data)
(14,1)
(15,data = NULL)
(16,struct _twoIntsStruct)
(17,free(data)
(18,if(GLOBAL_CONST_TRUE)
(19,)
(20,realloc(data, 100*sizeof(struct _twoIntsStruct)
(21,100*sizeof(struct _twoIntsStruct)
(22,struct _twoIntsStruct *)
(23,data)
(24,0)
(25,if(GLOBAL_CONST_TRUE)
(26,NULL)
(27,)
(28,data == NULL)
(29,printStructLine((twoIntsStruct *)
(30,data[0])
(31,intOne)
(32,0)
(33,intTwo)
(34,data[0].intOne)
(35,data)
(36,data[0].intTwo)
(37,data)
(38,-1)
(39,sizeof(struct _twoIntsStruct)
(40,data)
(41,data)
(42,data[0])
(43,data)
(44,0)
(45,data[0])
(46,data[0].intTwo = 0)
(47,(twoIntsStruct *)
(48,NULL)
(49,data)
(50,GLOBAL_CONST_TRUE)
(51,if (data == NULL)
(52,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^