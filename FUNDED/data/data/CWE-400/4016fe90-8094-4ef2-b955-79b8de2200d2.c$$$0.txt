-----label-----
0
-----code-----
static void goodB2G2()
{
    wchar_t * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(staticTrue)
    {
        /* FIX: Deallocate memory */
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
21,25
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
69,70
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,50,52,56,58,59,63,65,68,73,75
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodB2G2(){    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
static void
goodB2G2()
goodB2G2
{    wchar_t * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(staticTrue)    {        /* FIX: Deallocate memory */        free(data);    }
staticTrue
staticTrue
{        /* FIX: Deallocate memory */        free(data);    }
free(data);
free(data)
free
free
data
data
-----joern-----
(7,1,0)
(21,0,0)
(22,31,0)
(30,0,0)
(29,1,0)
(17,5,0)
(25,16,0)
(31,21,0)
(2,3,0)
(14,5,0)
(16,28,0)
(18,5,0)
(24,21,0)
(1,7,0)
(29,0,0)
(3,17,0)
(0,30,0)
(12,1,0)
(28,16,0)
(0,29,0)
(11,13,0)
(28,8,0)
(3,21,0)
(0,21,0)
(31,13,0)
(3,10,0)
(19,24,0)
(6,7,0)
(20,21,0)
(4,24,0)
(23,17,0)
(9,17,0)
(21,13,0)
(1,29,0)
(32,5,0)
(20,26,1)
(21,0,1)
(24,4,1)
(22,24,1)
(28,16,1)
(0,30,1)
(1,7,1)
(3,2,1)
(24,21,1)
(22,28,1)
(31,21,1)
(15,27,1)
(17,23,1)
(26,17,1)
(3,17,1)
(27,31,1)
(25,24,1)
(0,29,1)
(31,22,1)
(7,6,1)
(4,19,1)
(12,20,1)
(3,21,1)
(27,26,1)
(23,9,1)
(16,25,1)
(2,27,1)
(6,12,1)
(15,3,1)
(29,1,1)
(19,21,1)
(29,26,2)
(7,26,2)
(6,26,2)
(1,26,2)
(3,21,2)
(24,26,2)
(12,26,2)
(28,16,2)
(3,27,2)
(0,26,2)
(2,27,2)
(1,7,2)
(16,24,2)
(29,1,2)
(28,24,2)
(3,17,2)
(24,21,2)
(25,24,2)
(0,29,2)
(31,21,2)
(20,26,2)
(4,26,2)
(0,30,2)
(31,26,2)
(22,26,2)
(21,0,2)
(19,26,2)
(21,26,2)
-----------------------------------
(0,(wchar_t *)
(1,100*sizeof(wchar_t)
(2,data)
(3,free(data)
(4,NULL)
(5,)
(6,wchar_t)
(7,sizeof(wchar_t)
(8,)
(9,data)
(10,)
(11,if (data == NULL)
(12,100)
(13,)
(14,if(staticTrue)
(15,RET)
(16,-1)
(17,data = NULL)
(18,if(staticTrue)
(19,data)
(20,data)
(21,data = (wchar_t *)
(22,data)
(23,NULL)
(24,data == NULL)
(25,1)
(26,staticTrue)
(27,staticTrue)
(28,exit(-1)
(29,malloc(100*sizeof(wchar_t)
(30,wchar_t *)
(31,printWLine(data)
(32,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^