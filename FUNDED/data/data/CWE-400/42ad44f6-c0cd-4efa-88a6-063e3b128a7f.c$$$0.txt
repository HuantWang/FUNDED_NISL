-----label-----
1
-----code-----
int
main (int argc, char **argv)
{
  int c;
  const char *valid_symbols;
  enum demangling_styles style = auto_demangling;

  program_name = argv[0];
  xmalloc_set_program_name (program_name);
  bfd_set_error_program_name (program_name);

  expandargv (&argc, &argv);

  while ((c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *) 0)) != EOF)
    {
      switch (c)
	{
	case '?':
	  usage (stderr, 1);
	  break;
	case 'h':
	  usage (stdout, 0);
	case 'n':
	  strip_underscore = 0;
	  break;
	case 'p':
	  flags &= ~ DMGL_PARAMS;
	  break;
	case 't':
	  flags |= DMGL_TYPES;
	  break;
	case 'i':
	  flags &= ~ DMGL_VERBOSE;
	  break;
	case 'v':
	  print_version ("c++filt");
	  return 0;
	case '_':
	  strip_underscore = 1;
	  break;
	case 's':
	  style = cplus_demangle_name_to_style (optarg);
	  if (style == unknown_demangling)
	    {
	      fprintf (stderr, "%s: unknown demangling style `%s'\n",
		       program_name, optarg);
	      return 1;
	    }
	  cplus_demangle_set_style (style);
	  break;
	}
    }

  if (optind < argc)
    {
      for ( ; optind < argc; optind++)
	{
	  demangle_it (argv[optind]);
	  putchar ('\n');
	}

      return 0;
    }

  switch (current_demangling_style)
    {
    case gnu_demangling:
    case lucid_demangling:
    case arm_demangling:
    case java_demangling:
    case edg_demangling:
    case gnat_demangling:
    case gnu_v3_demangling:
    case dlang_demangling:
    case rust_demangling:
    case auto_demangling:
      valid_symbols = standard_symbol_characters ();
      break;
    case hp_demangling:
      valid_symbols = hp_symbol_characters ();
      break;
    default:
      /* Folks should explicitly indicate the appropriate alphabet for
	 each demangling.  Providing a default would allow the
	 question to go unconsidered.  */
      fatal ("Internal error: no symbol alphabet for current style");
    }

  for (;;)
    {
      static char mbuffer[32767];
      unsigned i = 0;

      c = getchar ();
      /* Try to read a mangled name.  */
      while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))
	{
	  if (i >= sizeof (mbuffer) - 1)
	    break;
	  mbuffer[i++] = c;
	  c = getchar ();
	}

      if (i > 0)
	{
	  mbuffer[i] = 0;
	  demangle_it (mbuffer);
	}

      if (c == EOF)
	break;

      /* Echo the whitespace characters so that the output looks
	 like the input, only with the mangled names demangled.  */
      putchar (c);
      if (c == '\n')
	fflush (stdout);
    }

  fflush (stdout);
  return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
16,17
17,18
17,19
19,20
21,22
22,23
22,24
24,25
24,26
27,28
28,29
28,30
29,30
31,32
31,33
33,34
34,35
36,37
37,38
37,39
38,39
40,41
40,42
41,42
44,45
45,46
45,47
46,47
48,49
49,50
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
62,63
64,65
65,66
67,68
67,69
68,69
68,70
69,70
70,71
70,72
71,72
73,74
73,75
73,76
73,77
73,78
73,79
74,75
76,77
78,79
81,82
83,84
83,85
84,85
84,86
86,87
89,90
91,92
92,93
92,94
93,94
95,96
95,97
95,98
95,99
95,100
95,101
95,102
95,103
95,104
95,105
95,106
95,107
95,108
95,109
95,110
95,111
95,112
95,113
95,114
95,115
95,116
95,117
95,118
95,119
95,120
95,121
95,122
95,123
96,97
98,99
99,100
99,101
99,102
100,101
102,103
106,107
108,109
109,110
109,111
109,112
110,111
112,113
115,116
117,118
118,119
118,120
119,120
123,124
125,126
126,127
126,128
127,128
129,130
130,131
133,134
135,136
136,137
136,138
137,138
139,140
142,143
144,145
145,146
145,147
146,147
148,149
149,150
152,153
154,155
155,156
155,157
156,157
159,160
161,162
163,164
164,165
164,166
165,166
169,170
171,172
172,173
172,174
173,174
175,176
175,177
176,177
178,179
180,181
180,182
181,182
181,183
182,183
184,185
186,187
186,188
187,188
188,189
188,190
188,191
188,192
188,193
189,190
191,192
194,195
196,197
198,199
200,201
201,202
201,203
202,203
204,205
207,208
207,209
208,209
208,210
209,210
211,212
213,214
213,215
214,215
214,216
214,217
214,218
216,217
216,218
217,218
219,220
221,222
222,223
224,225
224,226
225,226
226,227
226,228
227,228
229,230
229,231
230,231
232,233
234,235
235,236
235,237
236,237
239,240
241,242
241,243
242,243
244,245
244,246
244,247
244,248
244,249
244,250
244,251
244,252
244,253
244,254
244,255
244,256
244,257
244,258
244,259
244,260
244,261
245,246
246,247
248,249
249,250
251,252
252,253
254,255
255,256
257,258
258,259
260,261
261,262
263,264
264,265
266,267
267,268
269,270
270,271
272,273
273,274
275,276
276,277
276,278
277,278
279,280
280,281
283,284
284,285
286,287
287,288
287,289
288,289
290,291
291,292
295,296
296,297
296,298
297,298
300,301
300,302
302,303
302,304
302,305
302,306
302,307
302,308
302,309
302,310
303,304
304,305
304,306
306,307
306,308
308,309
310,311
311,312
311,313
313,314
313,315
315,316
317,318
318,319
318,320
319,320
321,322
322,323
324,325
324,326
325,326
325,327
326,327
326,328
327,328
329,330
331,332
332,333
332,334
333,334
333,335
334,335
336,337
338,339
338,340
338,341
339,340
341,342
343,344
345,346
345,347
345,348
346,347
346,348
347,348
347,349
348,349
350,351
350,352
351,352
352,353
353,354
357,358
358,359
358,360
359,360
359,361
360,361
362,363
363,364
365,366
367,368
368,369
368,370
369,370
371,372
372,373
374,375
374,376
375,376
375,377
376,377
379,380
379,381
380,381
381,382
381,383
382,383
382,384
383,384
385,386
388,389
389,390
389,391
390,391
392,393
394,395
394,396
395,396
395,397
396,397
398,399
401,402
402,403
402,404
403,404
405,406
407,408
407,409
408,409
408,410
409,410
412,413
413,414
413,415
414,415
416,417
417,418
419,420
420,421
420,422
421,422
423,424
424,425
426,427
-----nextToken-----
2,4,6,8,10,12,13,14,18,20,23,25,26,30,32,35,39,42,43,47,50,54,56,60,63,66,72,75,77,79,80,82,85,87,88,90,94,97,101,103,104,105,107,111,113,114,116,120,121,122,124,128,131,132,134,138,140,141,143,147,150,151,153,157,158,160,162,166,167,168,170,174,177,179,183,185,190,192,193,195,197,199,203,205,206,210,212,215,218,220,223,228,231,233,237,238,240,243,247,250,253,256,259,262,265,268,271,274,278,281,282,285,289,292,293,294,298,299,301,305,307,309,312,314,316,320,323,328,330,335,337,340,342,344,349,354,355,356,361,364,366,370,373,377,378,384,386,387,391,393,397,399,400,404,406,410,411,415,418,422,425,427
-----computeFrom-----
37,38
37,39
68,69
68,70
70,71
70,72
118,119
118,120
126,127
126,128
136,137
136,138
145,146
145,147
164,165
164,166
172,173
172,174
181,182
181,183
208,209
208,210
216,217
216,218
276,277
276,278
287,288
287,289
318,319
318,320
325,326
325,327
326,327
326,328
332,333
332,334
347,348
347,349
350,351
350,352
358,359
358,360
368,369
368,370
375,376
375,377
381,382
381,383
395,396
395,397
408,409
408,410
-----guardedBy-----
212,220
210,233
377,386
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;IdExpression;Name;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ForStatement;NullStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;NullStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;WhileStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
intmain (int argc, char **argv){  int c;  const char *valid_symbols;  enum demangling_styles style = auto_demangling;  program_name = argv[0];  xmalloc_set_program_name (program_name);  bfd_set_error_program_name (program_name);  expandargv (&argc, &argv);  while ((c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *) 0)) != EOF)    {      switch (c)	{	case '?':	  usage (stderr, 1);	  break;	case 'h':	  usage (stdout, 0);	case 'n':	  strip_underscore = 0;	  break;	case 'p':	  flags &= ~ DMGL_PARAMS;	  break;	case 't':	  flags |= DMGL_TYPES;	  break;	case 'i':	  flags &= ~ DMGL_VERBOSE;	  break;	case 'v':	  print_version ("c++filt");	  return 0;	case '_':	  strip_underscore = 1;	  break;	case 's':	  style = cplus_demangle_name_to_style (optarg);	  if (style == unknown_demangling)	    {	      fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg);	      return 1;	    }	  cplus_demangle_set_style (style);	  break;	}    }  if (optind < argc)    {      for ( ; optind < argc; optind++)	{	  demangle_it (argv[optind]);	  putchar ('\n');	}      return 0;    }  switch (current_demangling_style)    {    case gnu_demangling:    case lucid_demangling:    case arm_demangling:    case java_demangling:    case edg_demangling:    case gnat_demangling:    case gnu_v3_demangling:    case dlang_demangling:    case rust_demangling:    case auto_demangling:      valid_symbols = standard_symbol_characters ();      break;    case hp_demangling:      valid_symbols = hp_symbol_characters ();      break;    default:      /* Folks should explicitly indicate the appropriate alphabet for	 each demangling.  Providing a default would allow the	 question to go unconsidered.  */      fatal ("Internal error: no symbol alphabet for current style");    }  for (;;)    {      static char mbuffer[32767];      unsigned i = 0;      c = getchar ();      /* Try to read a mangled name.  */      while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))	{	  if (i >= sizeof (mbuffer) - 1)	    break;	  mbuffer[i++] = c;	  c = getchar ();	}      if (i > 0)	{	  mbuffer[i] = 0;	  demangle_it (mbuffer);	}      if (c == EOF)	break;      /* Echo the whitespace characters so that the output looks	 like the input, only with the mangled names demangled.  */      putchar (c);      if (c == '\n')	fflush (stdout);    }  fflush (stdout);  return 0;}
int
main (int argc, char **argv)
main
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
{  int c;  const char *valid_symbols;  enum demangling_styles style = auto_demangling;  program_name = argv[0];  xmalloc_set_program_name (program_name);  bfd_set_error_program_name (program_name);  expandargv (&argc, &argv);  while ((c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *) 0)) != EOF)    {      switch (c)	{	case '?':	  usage (stderr, 1);	  break;	case 'h':	  usage (stdout, 0);	case 'n':	  strip_underscore = 0;	  break;	case 'p':	  flags &= ~ DMGL_PARAMS;	  break;	case 't':	  flags |= DMGL_TYPES;	  break;	case 'i':	  flags &= ~ DMGL_VERBOSE;	  break;	case 'v':	  print_version ("c++filt");	  return 0;	case '_':	  strip_underscore = 1;	  break;	case 's':	  style = cplus_demangle_name_to_style (optarg);	  if (style == unknown_demangling)	    {	      fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg);	      return 1;	    }	  cplus_demangle_set_style (style);	  break;	}    }  if (optind < argc)    {      for ( ; optind < argc; optind++)	{	  demangle_it (argv[optind]);	  putchar ('\n');	}      return 0;    }  switch (current_demangling_style)    {    case gnu_demangling:    case lucid_demangling:    case arm_demangling:    case java_demangling:    case edg_demangling:    case gnat_demangling:    case gnu_v3_demangling:    case dlang_demangling:    case rust_demangling:    case auto_demangling:      valid_symbols = standard_symbol_characters ();      break;    case hp_demangling:      valid_symbols = hp_symbol_characters ();      break;    default:      /* Folks should explicitly indicate the appropriate alphabet for	 each demangling.  Providing a default would allow the	 question to go unconsidered.  */      fatal ("Internal error: no symbol alphabet for current style");    }  for (;;)    {      static char mbuffer[32767];      unsigned i = 0;      c = getchar ();      /* Try to read a mangled name.  */      while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))	{	  if (i >= sizeof (mbuffer) - 1)	    break;	  mbuffer[i++] = c;	  c = getchar ();	}      if (i > 0)	{	  mbuffer[i] = 0;	  demangle_it (mbuffer);	}      if (c == EOF)	break;      /* Echo the whitespace characters so that the output looks	 like the input, only with the mangled names demangled.  */      putchar (c);      if (c == '\n')	fflush (stdout);    }  fflush (stdout);  return 0;}
int c;
int c;
int
c
c
const char *valid_symbols;
const char *valid_symbols;
const char
*valid_symbols
*
valid_symbols
enum demangling_styles style = auto_demangling;
enum demangling_styles style = auto_demangling;
enum demangling_styles
demangling_styles
style = auto_demangling
style
= auto_demangling
auto_demangling
auto_demangling
program_name = argv[0];
program_name = argv[0]
program_name
program_name
argv[0]
argv
argv
0
xmalloc_set_program_name (program_name);
xmalloc_set_program_name (program_name);
xmalloc_set_program_name
xmalloc_set_program_name
(program_name)
program_name
program_name
bfd_set_error_program_name (program_name);
bfd_set_error_program_name (program_name)
bfd_set_error_program_name
bfd_set_error_program_name
program_name
program_name
expandargv (&argc, &argv);
expandargv (&argc, &argv)
expandargv
expandargv
&argc
argc
argc
&argv
argv
argv
while ((c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *) 0)) != EOF)    {      switch (c)	{	case '?':	  usage (stderr, 1);	  break;	case 'h':	  usage (stdout, 0);	case 'n':	  strip_underscore = 0;	  break;	case 'p':	  flags &= ~ DMGL_PARAMS;	  break;	case 't':	  flags |= DMGL_TYPES;	  break;	case 'i':	  flags &= ~ DMGL_VERBOSE;	  break;	case 'v':	  print_version ("c++filt");	  return 0;	case '_':	  strip_underscore = 1;	  break;	case 's':	  style = cplus_demangle_name_to_style (optarg);	  if (style == unknown_demangling)	    {	      fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg);	      return 1;	    }	  cplus_demangle_set_style (style);	  break;	}    }
(c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *) 0)) != EOF
(c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *) 0))
c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *) 0)
c
c
getopt_long (argc, argv, "_hinps:tv", long_options, (int *) 0)
getopt_long
getopt_long
argc
argc
argv
argv
"_hinps:tv"
long_options
long_options
(int *) 0
int *
int
*
*
0
EOF
EOF
{      switch (c)	{	case '?':	  usage (stderr, 1);	  break;	case 'h':	  usage (stdout, 0);	case 'n':	  strip_underscore = 0;	  break;	case 'p':	  flags &= ~ DMGL_PARAMS;	  break;	case 't':	  flags |= DMGL_TYPES;	  break;	case 'i':	  flags &= ~ DMGL_VERBOSE;	  break;	case 'v':	  print_version ("c++filt");	  return 0;	case '_':	  strip_underscore = 1;	  break;	case 's':	  style = cplus_demangle_name_to_style (optarg);	  if (style == unknown_demangling)	    {	      fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg);	      return 1;	    }	  cplus_demangle_set_style (style);	  break;	}    }
switch (c)	{	case '?':	  usage (stderr, 1);	  break;	case 'h':	  usage (stdout, 0);	case 'n':	  strip_underscore = 0;	  break;	case 'p':	  flags &= ~ DMGL_PARAMS;	  break;	case 't':	  flags |= DMGL_TYPES;	  break;	case 'i':	  flags &= ~ DMGL_VERBOSE;	  break;	case 'v':	  print_version ("c++filt");	  return 0;	case '_':	  strip_underscore = 1;	  break;	case 's':	  style = cplus_demangle_name_to_style (optarg);	  if (style == unknown_demangling)	    {	      fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg);	      return 1;	    }	  cplus_demangle_set_style (style);	  break;	}
c
c
{	case '?':	  usage (stderr, 1);	  break;	case 'h':	  usage (stdout, 0);	case 'n':	  strip_underscore = 0;	  break;	case 'p':	  flags &= ~ DMGL_PARAMS;	  break;	case 't':	  flags |= DMGL_TYPES;	  break;	case 'i':	  flags &= ~ DMGL_VERBOSE;	  break;	case 'v':	  print_version ("c++filt");	  return 0;	case '_':	  strip_underscore = 1;	  break;	case 's':	  style = cplus_demangle_name_to_style (optarg);	  if (style == unknown_demangling)	    {	      fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg);	      return 1;	    }	  cplus_demangle_set_style (style);	  break;	}
case '?':
'?'
usage (stderr, 1);
usage (stderr, 1)
usage
usage
stderr
stderr
1
break;
case 'h':
'h'
usage (stdout, 0);
usage (stdout, 0)
usage
usage
stdout
stdout
0
case 'n':
'n'
strip_underscore = 0;
strip_underscore = 0
strip_underscore
strip_underscore
0
break;
case 'p':
'p'
flags &= ~ DMGL_PARAMS;
flags &= ~ DMGL_PARAMS
flags
flags
~ DMGL_PARAMS
DMGL_PARAMS
DMGL_PARAMS
break;
case 't':
't'
flags |= DMGL_TYPES;
flags |= DMGL_TYPES
flags
flags
DMGL_TYPES
DMGL_TYPES
break;
case 'i':
'i'
flags &= ~ DMGL_VERBOSE;
flags &= ~ DMGL_VERBOSE
flags
flags
~ DMGL_VERBOSE
DMGL_VERBOSE
DMGL_VERBOSE
break;
case 'v':
'v'
print_version ("c++filt");
print_version ("c++filt")
print_version
print_version
"c++filt"
return 0;
0
case '_':
'_'
strip_underscore = 1;
strip_underscore = 1
strip_underscore
strip_underscore
1
break;
case 's':
's'
style = cplus_demangle_name_to_style (optarg);
style = cplus_demangle_name_to_style (optarg)
style
style
cplus_demangle_name_to_style (optarg)
cplus_demangle_name_to_style
cplus_demangle_name_to_style
optarg
optarg
if (style == unknown_demangling)	    {	      fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg);	      return 1;	    }
style == unknown_demangling
style
style
unknown_demangling
unknown_demangling
{	      fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg);	      return 1;	    }
fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg);
fprintf (stderr, "%s: unknown demangling style `%s'\n",		       program_name, optarg)
fprintf
fprintf
stderr
stderr
"%s: unknown demangling style `%s'\n"
program_name
program_name
optarg
optarg
return 1;
1
cplus_demangle_set_style (style);
cplus_demangle_set_style (style)
cplus_demangle_set_style
cplus_demangle_set_style
style
style
break;
if (optind < argc)    {      for ( ; optind < argc; optind++)	{	  demangle_it (argv[optind]);	  putchar ('\n');	}      return 0;    }
optind < argc
optind
optind
argc
argc
{      for ( ; optind < argc; optind++)	{	  demangle_it (argv[optind]);	  putchar ('\n');	}      return 0;    }
for ( ; optind < argc; optind++)	{	  demangle_it (argv[optind]);	  putchar ('\n');	}
;
optind < argc
optind
optind
argc
argc
optind++
optind
optind
{	  demangle_it (argv[optind]);	  putchar ('\n');	}
demangle_it (argv[optind]);
demangle_it (argv[optind])
demangle_it
demangle_it
argv[optind]
argv
argv
optind
optind
putchar ('\n');
putchar ('\n')
putchar
putchar
'\n'
return 0;
0
switch (current_demangling_style)    {    case gnu_demangling:    case lucid_demangling:    case arm_demangling:    case java_demangling:    case edg_demangling:    case gnat_demangling:    case gnu_v3_demangling:    case dlang_demangling:    case rust_demangling:    case auto_demangling:      valid_symbols = standard_symbol_characters ();      break;    case hp_demangling:      valid_symbols = hp_symbol_characters ();      break;    default:      /* Folks should explicitly indicate the appropriate alphabet for	 each demangling.  Providing a default would allow the	 question to go unconsidered.  */      fatal ("Internal error: no symbol alphabet for current style");    }
current_demangling_style
current_demangling_style
{    case gnu_demangling:    case lucid_demangling:    case arm_demangling:    case java_demangling:    case edg_demangling:    case gnat_demangling:    case gnu_v3_demangling:    case dlang_demangling:    case rust_demangling:    case auto_demangling:      valid_symbols = standard_symbol_characters ();      break;    case hp_demangling:      valid_symbols = hp_symbol_characters ();      break;    default:      /* Folks should explicitly indicate the appropriate alphabet for	 each demangling.  Providing a default would allow the	 question to go unconsidered.  */      fatal ("Internal error: no symbol alphabet for current style");    }
case gnu_demangling:
gnu_demangling
gnu_demangling
case lucid_demangling:
lucid_demangling
lucid_demangling
case arm_demangling:
arm_demangling
arm_demangling
case java_demangling:
java_demangling
java_demangling
case edg_demangling:
edg_demangling
edg_demangling
case gnat_demangling:
gnat_demangling
gnat_demangling
case gnu_v3_demangling:
gnu_v3_demangling
gnu_v3_demangling
case dlang_demangling:
dlang_demangling
dlang_demangling
case rust_demangling:
rust_demangling
rust_demangling
case auto_demangling:
auto_demangling
auto_demangling
valid_symbols = standard_symbol_characters ();
valid_symbols = standard_symbol_characters ()
valid_symbols
valid_symbols
standard_symbol_characters ()
standard_symbol_characters
standard_symbol_characters
break;
case hp_demangling:
hp_demangling
hp_demangling
valid_symbols = hp_symbol_characters ();
valid_symbols = hp_symbol_characters ()
valid_symbols
valid_symbols
hp_symbol_characters ()
hp_symbol_characters
hp_symbol_characters
break;
default:
fatal ("Internal error: no symbol alphabet for current style");
fatal ("Internal error: no symbol alphabet for current style")
fatal
fatal
"Internal error: no symbol alphabet for current style"
for (;;)    {      static char mbuffer[32767];      unsigned i = 0;      c = getchar ();      /* Try to read a mangled name.  */      while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))	{	  if (i >= sizeof (mbuffer) - 1)	    break;	  mbuffer[i++] = c;	  c = getchar ();	}      if (i > 0)	{	  mbuffer[i] = 0;	  demangle_it (mbuffer);	}      if (c == EOF)	break;      /* Echo the whitespace characters so that the output looks	 like the input, only with the mangled names demangled.  */      putchar (c);      if (c == '\n')	fflush (stdout);    }
;
{      static char mbuffer[32767];      unsigned i = 0;      c = getchar ();      /* Try to read a mangled name.  */      while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))	{	  if (i >= sizeof (mbuffer) - 1)	    break;	  mbuffer[i++] = c;	  c = getchar ();	}      if (i > 0)	{	  mbuffer[i] = 0;	  demangle_it (mbuffer);	}      if (c == EOF)	break;      /* Echo the whitespace characters so that the output looks	 like the input, only with the mangled names demangled.  */      putchar (c);      if (c == '\n')	fflush (stdout);    }
static char mbuffer[32767];
static char mbuffer[32767];
static char
mbuffer[32767]
mbuffer
[32767]
32767
unsigned i = 0;
unsigned i = 0;
unsigned
i = 0
i
= 0
0
c = getchar ();
c = getchar ()
c
c
getchar ()
getchar
getchar
while (c != EOF && (ISALNUM (c) || strchr (valid_symbols, c)))	{	  if (i >= sizeof (mbuffer) - 1)	    break;	  mbuffer[i++] = c;	  c = getchar ();	}
c != EOF && (ISALNUM (c) || strchr (valid_symbols, c))
c != EOF
c
c
EOF
EOF
(ISALNUM (c) || strchr (valid_symbols, c))
ISALNUM (c) || strchr (valid_symbols, c)
ISALNUM (c)
ISALNUM
ISALNUM
c
c
strchr (valid_symbols, c)
strchr
strchr
valid_symbols
valid_symbols
c
c
{	  if (i >= sizeof (mbuffer) - 1)	    break;	  mbuffer[i++] = c;	  c = getchar ();	}
if (i >= sizeof (mbuffer) - 1)	    break;
i >= sizeof (mbuffer) - 1
i
i
sizeof (mbuffer) - 1
sizeof (mbuffer)
(mbuffer)
mbuffer
mbuffer
1
break;
mbuffer[i++] = c;
mbuffer[i++] = c
mbuffer[i++]
mbuffer
mbuffer
i++
i
i
c
c
c = getchar ();
c = getchar ()
c
c
getchar ()
getchar
getchar
if (i > 0)	{	  mbuffer[i] = 0;	  demangle_it (mbuffer);	}
i > 0
i
i
0
{	  mbuffer[i] = 0;	  demangle_it (mbuffer);	}
mbuffer[i] = 0;
mbuffer[i] = 0
mbuffer[i]
mbuffer
mbuffer
i
i
0
demangle_it (mbuffer);
demangle_it (mbuffer)
demangle_it
demangle_it
mbuffer
mbuffer
if (c == EOF)	break;
c == EOF
c
c
EOF
EOF
break;
putchar (c);
putchar (c)
putchar
putchar
c
c
if (c == '\n')	fflush (stdout);
c == '\n'
c
c
'\n'
fflush (stdout);
fflush (stdout);
fflush
fflush
(stdout)
stdout
stdout
fflush (stdout);
fflush (stdout);
fflush
fflush
(stdout)
stdout
stdout
return 0;
0
-----joern-----
(166,135,0)
(24,140,0)
(144,181,0)
(136,145,0)
(153,172,0)
(29,76,0)
(179,21,0)
(70,117,0)
(176,172,0)
(16,135,0)
(18,11,0)
(53,69,0)
(109,172,0)
(84,111,0)
(14,44,0)
(8,121,0)
(59,5,0)
(164,195,0)
(58,39,0)
(3,56,0)
(167,50,0)
(142,198,0)
(34,184,0)
(193,194,0)
(206,160,0)
(100,92,0)
(97,117,0)
(196,50,0)
(147,74,0)
(178,184,0)
(120,76,0)
(62,76,0)
(101,161,0)
(87,95,0)
(12,195,0)
(123,80,0)
(132,95,0)
(89,150,0)
(112,87,0)
(58,176,0)
(28,112,0)
(4,195,0)
(63,142,0)
(66,135,0)
(160,206,0)
(2,195,0)
(115,160,0)
(208,175,0)
(181,163,0)
(161,163,0)
(55,115,0)
(78,60,0)
(70,5,0)
(86,172,0)
(5,59,0)
(197,87,0)
(1,167,0)
(115,199,0)
(125,199,0)
(42,167,0)
(105,39,0)
(184,195,0)
(190,170,0)
(81,209,0)
(80,135,0)
(143,148,0)
(169,201,0)
(146,172,0)
(188,11,0)
(17,125,0)
(107,24,0)
(75,194,0)
(175,92,0)
(158,11,0)
(213,172,0)
(43,135,0)
(65,172,0)
(185,195,0)
(71,70,0)
(188,172,0)
(126,157,0)
(191,96,0)
(11,172,0)
(196,148,0)
(73,51,0)
(212,143,0)
(151,172,0)
(92,95,0)
(75,76,0)
(58,180,0)
(167,44,0)
(129,58,0)
(142,92,0)
(92,27,0)
(67,120,0)
(207,172,0)
(120,122,0)
(137,201,0)
(150,199,0)
(100,95,0)
(31,70,0)
(167,92,0)
(152,135,0)
(57,95,0)
(117,97,0)
(120,180,0)
(121,172,0)
(140,24,0)
(176,76,0)
(104,172,0)
(24,172,0)
(75,63,0)
(116,48,0)
(98,18,0)
(189,58,0)
(100,148,0)
(160,135,0)
(143,92,0)
(60,11,0)
(176,176,0)
(106,176,0)
(143,212,0)
(160,115,0)
(26,180,0)
(124,172,0)
(82,70,0)
(142,148,0)
(25,140,0)
(148,134,0)
(110,96,0)
(214,125,0)
(149,92,0)
(114,195,0)
(103,194,0)
(58,152,0)
(63,209,0)
(75,180,0)
(150,152,0)
(70,56,0)
(189,120,0)
(84,125,0)
(154,195,0)
(119,175,0)
(168,195,0)
(182,195,0)
(189,128,0)
(210,149,0)
(137,145,0)
(68,63,0)
(139,188,0)
(177,73,0)
(47,143,0)
(204,90,0)
(205,92,0)
(20,48,0)
(120,176,0)
(32,152,0)
(145,87,0)
(155,5,0)
(15,172,0)
(194,181,0)
(186,172,0)
(209,87,0)
(50,212,0)
(127,195,0)
(79,149,0)
(99,172,0)
(180,172,0)
(187,172,0)
(76,172,0)
(134,148,0)
(194,87,0)
(167,184,0)
(51,172,0)
(192,90,0)
(93,148,0)
(72,195,0)
(157,172,0)
(167,148,0)
(152,150,0)
(102,96,0)
(128,180,0)
(58,76,0)
(113,100,0)
(175,148,0)
(128,152,0)
(130,18,0)
(120,152,0)
(90,172,0)
(176,180,0)
(54,137,0)
(88,96,0)
(189,75,0)
(148,198,0)
(128,76,0)
(22,135,0)
(48,56,0)
(212,50,0)
(211,135,0)
(206,56,0)
(37,172,0)
(145,137,0)
(176,152,0)
(108,166,0)
(203,3,0)
(36,195,0)
(10,70,0)
(162,135,0)
(45,95,0)
(35,87,0)
(23,117,0)
(83,128,0)
(64,135,0)
(19,150,0)
(117,70,0)
(94,111,0)
(125,84,0)
(75,176,0)
(40,195,0)
(149,148,0)
(49,112,0)
(156,95,0)
(128,176,0)
(13,196,0)
(201,137,0)
(61,176,0)
(7,142,0)
(183,44,0)
(11,60,0)
(196,92,0)
(74,135,0)
(9,95,0)
(51,73,0)
(44,195,0)
(171,195,0)
(209,63,0)
(202,95,0)
(50,196,0)
(41,135,0)
(38,168,0)
(70,199,0)
(200,51,0)
(174,172,0)
(0,97,0)
(184,34,0)
(96,122,0)
(141,157,0)
(138,3,0)
(52,206,0)
(27,92,0)
(118,143,0)
(46,180,0)
(77,94,0)
(44,14,0)
(131,172,0)
(75,152,0)
(133,198,0)
(128,172,0)
(173,75,0)
(85,195,0)
(5,70,0)
(6,166,0)
(75,135,0)
(50,167,0)
(165,43,0)
(80,123,1)
(189,75,1)
(197,21,1)
(126,33,1)
(58,76,1)
(187,76,1)
(143,92,1)
(193,103,1)
(5,155,1)
(67,96,1)
(70,199,1)
(150,199,1)
(97,117,1)
(108,6,1)
(120,152,1)
(94,77,1)
(209,81,1)
(54,201,1)
(21,179,1)
(23,65,1)
(17,3,1)
(117,70,1)
(128,76,1)
(50,167,1)
(184,34,1)
(210,79,1)
(25,107,1)
(139,18,1)
(74,147,1)
(70,56,1)
(208,112,1)
(77,84,1)
(65,176,1)
(196,13,1)
(73,177,1)
(192,33,1)
(11,60,1)
(176,152,1)
(98,130,1)
(83,121,1)
(168,38,1)
(151,188,1)
(166,108,1)
(42,1,1)
(75,63,1)
(24,140,1)
(146,180,1)
(141,126,1)
(197,168,1)
(128,83,1)
(33,97,1)
(0,117,1)
(142,92,1)
(52,43,1)
(201,169,1)
(205,87,1)
(206,52,1)
(44,14,1)
(160,206,1)
(140,25,1)
(23,146,1)
(134,93,1)
(89,32,1)
(204,192,1)
(164,44,1)
(167,92,1)
(29,33,1)
(212,143,1)
(128,176,1)
(161,101,1)
(58,180,1)
(158,33,1)
(178,91,1)
(23,187,1)
(112,87,1)
(203,138,1)
(103,112,1)
(13,143,1)
(206,56,1)
(35,197,1)
(50,196,1)
(115,199,1)
(55,206,1)
(58,176,1)
(75,76,1)
(102,110,1)
(118,148,1)
(167,148,1)
(183,91,1)
(123,152,1)
(175,148,1)
(78,158,1)
(173,74,1)
(68,145,1)
(214,17,1)
(34,178,1)
(29,157,1)
(100,113,1)
(181,144,1)
(157,141,1)
(149,92,1)
(176,180,1)
(176,76,1)
(46,26,1)
(120,176,1)
(49,212,1)
(48,56,1)
(75,152,1)
(10,71,1)
(14,183,1)
(18,11,1)
(116,97,1)
(127,184,1)
(138,48,1)
(76,62,1)
(137,201,1)
(97,0,1)
(212,50,1)
(71,23,1)
(100,148,1)
(47,118,1)
(7,63,1)
(131,24,1)
(196,148,1)
(194,193,1)
(23,151,1)
(149,210,1)
(189,128,1)
(23,33,1)
(189,58,1)
(129,3,1)
(196,92,1)
(177,200,1)
(23,160,1)
(5,59,1)
(3,56,1)
(200,33,1)
(84,125,1)
(69,53,1)
(197,127,1)
(96,102,1)
(136,212,1)
(38,91,1)
(20,116,1)
(155,31,1)
(75,176,1)
(110,191,1)
(61,106,1)
(32,166,1)
(23,131,1)
(143,47,1)
(169,136,1)
(58,129,1)
(79,100,1)
(128,180,1)
(30,175,1)
(179,149,1)
(152,150,1)
(191,88,1)
(115,55,1)
(175,119,1)
(90,204,1)
(147,30,1)
(19,89,1)
(87,35,1)
(197,149,1)
(197,164,1)
(180,46,1)
(26,33,1)
(176,176,1)
(188,11,1)
(75,194,1)
(18,98,1)
(49,159,1)
(62,29,1)
(27,205,1)
(138,69,1)
(209,87,1)
(120,180,1)
(175,92,1)
(167,44,1)
(145,87,1)
(104,90,1)
(160,115,1)
(51,73,1)
(75,180,1)
(120,76,1)
(8,33,1)
(113,175,1)
(107,33,1)
(93,142,1)
(167,42,1)
(149,148,1)
(145,137,1)
(137,54,1)
(125,199,1)
(23,15,1)
(101,181,1)
(88,18,1)
(3,203,1)
(60,78,1)
(75,173,1)
(142,148,1)
(188,139,1)
(15,51,1)
(92,27,1)
(82,10,1)
(43,165,1)
(130,11,1)
(53,94,1)
(194,87,1)
(100,92,1)
(48,20,1)
(119,208,1)
(128,152,1)
(142,7,1)
(58,152,1)
(28,49,1)
(125,214,1)
(144,194,1)
(81,68,1)
(63,209,1)
(159,145,1)
(23,104,1)
(148,134,1)
(106,33,1)
(118,92,1)
(176,61,1)
(143,148,1)
(91,48,1)
(165,80,1)
(70,5,1)
(31,82,1)
(120,67,1)
(112,28,1)
(189,120,1)
(167,184,1)
(1,196,1)
(121,8,1)
(150,19,1)
(208,161,1)
(58,76,2)
(46,33,2)
(167,184,2)
(35,48,2)
(120,180,2)
(101,112,2)
(17,3,2)
(137,201,2)
(164,91,2)
(92,27,2)
(75,48,2)
(0,18,2)
(71,33,2)
(112,175,2)
(100,92,2)
(7,145,2)
(74,48,2)
(206,56,2)
(137,212,2)
(194,112,2)
(191,18,2)
(5,59,2)
(143,145,2)
(145,137,2)
(176,180,2)
(134,145,2)
(90,33,2)
(24,140,2)
(106,33,2)
(212,48,2)
(208,48,2)
(125,3,2)
(82,18,2)
(179,149,2)
(197,48,2)
(60,33,2)
(175,148,2)
(176,76,2)
(146,33,2)
(155,33,2)
(149,175,2)
(212,145,2)
(58,152,2)
(93,145,2)
(209,87,2)
(143,148,2)
(81,145,2)
(126,33,2)
(193,112,2)
(51,33,2)
(97,33,2)
(11,33,2)
(128,180,2)
(48,97,2)
(128,76,2)
(144,112,2)
(177,33,2)
(53,3,2)
(75,152,2)
(84,3,2)
(49,175,2)
(210,175,2)
(128,33,2)
(178,91,2)
(23,33,2)
(75,176,2)
(70,5,2)
(62,33,2)
(50,143,2)
(117,33,2)
(70,18,2)
(103,112,2)
(155,18,2)
(88,18,2)
(0,33,2)
(200,33,2)
(192,33,2)
(48,56,2)
(18,33,2)
(167,44,2)
(10,33,2)
(3,56,2)
(176,152,2)
(15,33,2)
(175,175,2)
(125,199,2)
(25,33,2)
(87,175,2)
(173,48,2)
(167,92,2)
(196,92,2)
(54,212,2)
(143,92,2)
(159,145,2)
(47,48,2)
(107,33,2)
(196,148,2)
(91,48,2)
(208,175,2)
(92,48,2)
(18,11,2)
(63,145,2)
(118,175,2)
(194,87,2)
(96,18,2)
(82,33,2)
(209,145,2)
(140,33,2)
(92,175,2)
(129,48,2)
(10,18,2)
(160,206,2)
(44,91,2)
(148,145,2)
(189,58,2)
(97,117,2)
(157,33,2)
(130,33,2)
(184,34,2)
(116,97,2)
(142,92,2)
(31,33,2)
(118,145,2)
(212,143,2)
(33,97,2)
(75,63,2)
(147,48,2)
(117,70,2)
(11,60,2)
(142,148,2)
(70,199,2)
(117,18,2)
(24,33,2)
(84,125,2)
(23,18,2)
(131,33,2)
(160,115,2)
(205,48,2)
(50,167,2)
(189,75,2)
(203,48,2)
(70,33,2)
(79,175,2)
(27,48,2)
(97,18,2)
(73,33,2)
(1,196,2)
(44,14,2)
(58,176,2)
(38,91,2)
(115,199,2)
(87,48,2)
(29,33,2)
(120,76,2)
(76,33,2)
(145,212,2)
(180,33,2)
(65,33,2)
(71,18,2)
(78,33,2)
(28,175,2)
(49,48,2)
(143,175,2)
(181,112,2)
(187,33,2)
(145,87,2)
(148,134,2)
(75,194,2)
(100,175,2)
(75,76,2)
(3,3,2)
(75,180,2)
(120,18,2)
(5,33,2)
(136,212,2)
(204,33,2)
(183,91,2)
(69,3,2)
(68,145,2)
(152,150,2)
(50,196,2)
(110,18,2)
(100,148,2)
(14,91,2)
(34,91,2)
(169,212,2)
(61,33,2)
(138,3,2)
(139,18,2)
(143,48,2)
(184,91,2)
(31,18,2)
(13,143,2)
(128,176,2)
(142,145,2)
(21,149,2)
(118,48,2)
(83,33,2)
(5,18,2)
(120,152,2)
(119,175,2)
(120,176,2)
(167,196,2)
(67,18,2)
(77,3,2)
(188,18,2)
(212,175,2)
(94,3,2)
(35,175,2)
(203,3,2)
(189,128,2)
(27,175,2)
(189,120,2)
(161,112,2)
(30,48,2)
(149,148,2)
(28,48,2)
(196,143,2)
(175,92,2)
(121,33,2)
(128,152,2)
(98,33,2)
(188,11,2)
(167,148,2)
(141,33,2)
(197,175,2)
(63,209,2)
(127,91,2)
(70,56,2)
(112,87,2)
(175,48,2)
(26,33,2)
(47,145,2)
(104,33,2)
(168,91,2)
(150,199,2)
(149,92,2)
(47,175,2)
(119,48,2)
(205,175,2)
(3,48,2)
(212,50,2)
(8,33,2)
(158,33,2)
(51,73,2)
(20,97,2)
(58,48,2)
(138,48,2)
(113,175,2)
(214,3,2)
(102,18,2)
(58,180,2)
(201,212,2)
(176,33,2)
(42,196,2)
(176,176,2)
(151,18,2)
(112,48,2)
-----------------------------------
(0,EOF)
(1,valid_symbols)
(2,case gnu_demangling:)
(3,optind < argc)
(4,default:)
(5,(int *)
(6,style)
(7,c)
(8,"c++filt")
(9,if (c == EOF)
(10,argv)
(11,style = cplus_demangle_name_to_style (optarg)
(12,case auto_demangling:)
(13,c)
(14,standard_symbol_characters ()
(15,break;)
(16,style)
(17,argv)
(18,style == unknown_demangling)
(19,0)
(20,argc)
(21,fflush (stdout)
(22,while ((c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *)
(23,c)
(24,flags &= ~ DMGL_PARAMS)
(25,DMGL_PARAMS)
(26,strip_underscore)
(27,getchar ()
(28,0)
(29,strip_underscore)
(30,break;)
(31,long_options)
(32,program_name)
(33,c)
(34,hp_symbol_characters ()
(35,0)
(36,case gnat_demangling:)
(37,case \'s\':)
(38,"Internal error: no symbol alphabet for current style")
(39,)
(40,case hp_demangling:)
(41,c)
(42,c)
(43,bfd_set_error_program_name (program_name)
(44,valid_symbols = standard_symbol_characters ()
(45,if (c == \'\\n\')
(46,1)
(47,EOF)
(48,optind < argc)
(49,i)
(50,ISALNUM (c)
(51,flags &= ~ DMGL_VERBOSE)
(52,argc)
(53,optind)
(54,1)
(55,argv)
(56,int argc)
(57,if (i > 0)
(58,return 0;)
(59,int *)
(60,cplus_demangle_name_to_style (optarg)
(61,DMGL_TYPES)
(62,0)
(63,mbuffer[i++])
(64,if (optind < argc)
(65,break;)
(66,switch (current_demangling_style)
(67,1)
(68,mbuffer)
(69,optind++)
(70,getopt_long (argc, argv, "_hinps:tv", long_options, (int *)
(71,argc)
(72,case edg_demangling:)
(73,~ DMGL_VERBOSE)
(74,fflush (stdout)
(75,return 0;)
(76,strip_underscore = 0)
(77,\'\\n\')
(78,optarg)
(79,c)
(80,xmalloc_set_program_name (program_name)
(81,i)
(82,"_hinps:tv")
(83,0)
(84,demangle_it (argv[optind])
(85,case arm_demangling:)
(86,case \'?\':)
(87,i = 0)
(88,stderr)
(89,argv)
(90,usage (stderr, 1)
(91,current_demangling_style)
(92,c = getchar ()
(93,c)
(94,putchar (\'\\n\')
(95,)
(96,fprintf (stderr, "%s: unknown demangling style `%s\'\\n",\n\\n\\t\\t       program_name, optarg)
(97,(c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *)
(98,unknown_demangling)
(99,case \'t\':)
(100,putchar (c)
(101,mbuffer)
(102,optarg)
(103,mbuffer)
(104,break;)
(105,for ( ; optind < argc; optind++)
(106,flags)
(107,flags)
(108,auto_demangling)
(109,case \'i\':)
(110,program_name)
(111,)
(112,i > 0)
(113,c)
(114,case gnu_v3_demangling:)
(115,&argv)
(116,optind)
(117,c = getopt_long (argc, argv, "_hinps:tv", long_options, (int *)
(118,c)
(119,EOF)
(120,return 1;)
(121,print_version ("c++filt")
(122,)
(123,program_name)
(124,case \'_\':)
(125,argv[optind])
(126,stdout)
(127,break;)
(128,return 0;)
(129,0)
(130,style)
(131,break;)
(132,i)
(133,if (i >= sizeof (mbuffer)
(134,getchar ()
(135,)
(136,i)
(137,sizeof (mbuffer)
(138,optind)
(139,style)
(140,~ DMGL_PARAMS)
(141,0)
(142,mbuffer[i++] = c)
(143,c != EOF)
(144,0)
(145,i >= sizeof (mbuffer)
(146,break;)
(147,stdout)
(148,c = getchar ()
(149,c == \'\\n\')
(150,argv[0])
(151,break;)
(152,program_name = argv[0])
(153,case \'p\':)
(154,case dlang_demangling:)
(155,0)
(156,while (c != EOF && (ISALNUM (c)
(157,usage (stdout, 0)
(158,style)
(159,break;)
(160,expandargv (&argc, &argv)
(161,demangle_it (mbuffer)
(162,for (;;)
(163,)
(164,break;)
(165,program_name)
(166,style = auto_demangling)
(167,strchr (valid_symbols, c)
(168,fatal ("Internal error: no symbol alphabet for current style")
(169,mbuffer)
(170,)
(171,case java_demangling:)
(172,)
(173,0)
(174,case \'v\':)
(175,c == EOF)
(176,flags |= DMGL_TYPES)
(177,DMGL_VERBOSE)
(178,valid_symbols)
(179,stdout)
(180,strip_underscore = 1)
(181,mbuffer[i] = 0)
(182,case lucid_demangling:)
(183,valid_symbols)
(184,valid_symbols = hp_symbol_characters ()
(185,case rust_demangling:)
(186,case \'n\':)
(187,break;)
(188,cplus_demangle_set_style (style)
(189,RET)
(190,switch (c)
(191,"%s: unknown demangling style `%s\'\\n")
(192,stderr)
(193,i)
(194,mbuffer[i])
(195,)
(196,ISALNUM (c)
(197,i)
(198,)
(199,char **argv)
(200,flags)
(201,sizeof (mbuffer)
(202,mbuffer)
(203,argc)
(204,1)
(205,c)
(206,&argc)
(207,case \'h\':)
(208,c)
(209,i++)
(210,\'\\n\')
(211,valid_symbols)
(212,c != EOF && (ISALNUM (c)
(213,if (style == unknown_demangling)
(214,optind)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^