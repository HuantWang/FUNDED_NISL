-----label-----
1
-----code-----
void
sorflush(struct socket *so)
{
	struct sockbuf	*sb, asb;
	struct protosw	*pr;
	int		s;

	sb = &so->so_rcv;
	pr = so->so_proto;
	sb->sb_flags |= SB_NOINTR;
	(void) sblock(sb, M_WAITOK);
	s = splnet();
	socantrcvmore(so);
	sbunlock(sb);
	asb = *sb;
	/*
	 * Clear most of the sockbuf structure, but leave some of the
	 * fields valid.
	 */
	memset(&sb->sb_startzero, 0,
	    sizeof(*sb) - offsetof(struct sockbuf, sb_startzero));
	splx(s);
	if (pr->pr_flags & PR_RIGHTS && pr->pr_domain->dom_dispose)
		(*pr->pr_domain->dom_dispose)(asb.sb_mb);
	sbrelease(&asb, so);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
12,13
13,14
13,15
13,16
14,15
16,17
16,18
19,20
21,22
22,23
22,24
23,24
25,26
25,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
35,36
37,38
38,39
38,40
39,40
42,43
43,44
43,45
44,45
46,47
46,48
47,48
50,51
51,52
51,53
52,53
52,54
53,54
56,57
58,59
59,60
59,61
60,61
60,62
63,64
63,65
63,66
64,65
66,67
68,69
70,71
71,72
71,73
72,73
74,75
75,76
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
87,88
89,90
90,91
90,92
91,92
93,94
94,95
96,97
97,98
98,99
98,100
99,100
101,102
103,104
103,105
104,105
104,106
105,106
105,107
106,107
106,108
107,108
110,111
112,113
112,114
113,114
113,115
114,115
118,119
119,120
119,121
120,121
121,122
122,123
122,124
123,124
123,125
124,125
128,129
128,130
129,130
132,133
133,134
133,135
133,136
134,135
136,137
137,138
139,140
-----nextToken-----
2,4,7,9,10,15,17,18,20,24,26,27,30,32,36,40,41,45,48,49,54,55,57,61,62,65,67,69,73,76,80,82,86,88,92,95,100,102,108,109,111,115,116,117,125,126,127,130,131,135,138,140
-----computeFrom-----
34,35
34,36
43,44
43,45
51,52
51,53
71,72
71,73
90,91
90,92
104,105
104,106
105,106
105,107
-----guardedBy-----
115,125
117,127
116,126
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidsorflush(struct socket *so){	struct sockbuf	*sb, asb;	struct protosw	*pr;	int		s;	sb = &so->so_rcv;	pr = so->so_proto;	sb->sb_flags |= SB_NOINTR;	(void) sblock(sb, M_WAITOK);	s = splnet();	socantrcvmore(so);	sbunlock(sb);	asb = *sb;	/*	 * Clear most of the sockbuf structure, but leave some of the	 * fields valid.	 */	memset(&sb->sb_startzero, 0,	    sizeof(*sb) - offsetof(struct sockbuf, sb_startzero));	splx(s);	if (pr->pr_flags & PR_RIGHTS && pr->pr_domain->dom_dispose)		(*pr->pr_domain->dom_dispose)(asb.sb_mb);	sbrelease(&asb, so);}
void
sorflush(struct socket *so)
sorflush
struct socket *so
struct socket
socket
*so
*
so
{	struct sockbuf	*sb, asb;	struct protosw	*pr;	int		s;	sb = &so->so_rcv;	pr = so->so_proto;	sb->sb_flags |= SB_NOINTR;	(void) sblock(sb, M_WAITOK);	s = splnet();	socantrcvmore(so);	sbunlock(sb);	asb = *sb;	/*	 * Clear most of the sockbuf structure, but leave some of the	 * fields valid.	 */	memset(&sb->sb_startzero, 0,	    sizeof(*sb) - offsetof(struct sockbuf, sb_startzero));	splx(s);	if (pr->pr_flags & PR_RIGHTS && pr->pr_domain->dom_dispose)		(*pr->pr_domain->dom_dispose)(asb.sb_mb);	sbrelease(&asb, so);}
struct sockbuf	*sb, asb;
struct sockbuf	*sb, asb;
struct sockbuf
sockbuf
*sb
*
sb
asb
asb
struct protosw	*pr;
struct protosw	*pr;
struct protosw
protosw
*pr
*
pr
int		s;
int		s;
int
s
s
sb = &so->so_rcv;
sb = &so->so_rcv
sb
sb
&so->so_rcv
so->so_rcv
so
so
so_rcv
pr = so->so_proto;
pr = so->so_proto
pr
pr
so->so_proto
so
so
so_proto
sb->sb_flags |= SB_NOINTR;
sb->sb_flags |= SB_NOINTR
sb->sb_flags
sb
sb
sb_flags
SB_NOINTR
SB_NOINTR
(void) sblock(sb, M_WAITOK);
(void) sblock(sb, M_WAITOK)
void
void

sblock(sb, M_WAITOK)
sblock
sblock
sb
sb
M_WAITOK
M_WAITOK
s = splnet();
s = splnet()
s
s
splnet()
splnet
splnet
socantrcvmore(so);
socantrcvmore(so)
socantrcvmore
socantrcvmore
so
so
sbunlock(sb);
sbunlock(sb)
sbunlock
sbunlock
sb
sb
asb = *sb;
asb = *sb
asb
asb
*sb
sb
sb
memset(&sb->sb_startzero, 0,	    sizeof(*sb) - offsetof(struct sockbuf, sb_startzero));
splx(s);
splx(s)
splx
splx
s
s
if (pr->pr_flags & PR_RIGHTS && pr->pr_domain->dom_dispose)		(*pr->pr_domain->dom_dispose)(asb.sb_mb);
pr->pr_flags & PR_RIGHTS && pr->pr_domain->dom_dispose
pr->pr_flags & PR_RIGHTS
pr->pr_flags
pr
pr
pr_flags
PR_RIGHTS
PR_RIGHTS
pr->pr_domain->dom_dispose
pr->pr_domain
pr
pr
pr_domain
dom_dispose
(*pr->pr_domain->dom_dispose)(asb.sb_mb);
(*pr->pr_domain->dom_dispose)(asb.sb_mb)
(*pr->pr_domain->dom_dispose)
*pr->pr_domain->dom_dispose
pr->pr_domain->dom_dispose
pr->pr_domain
pr
pr
pr_domain
dom_dispose
asb.sb_mb
asb
asb
sb_mb
sbrelease(&asb, so);
sbrelease(&asb, so)
sbrelease
sbrelease
&asb
asb
asb
so
so
-----joern-----
(22,18,0)
(24,18,0)
(57,14,0)
(44,30,0)
(53,29,0)
(27,10,0)
(25,60,0)
(59,17,0)
(56,37,0)
(47,30,0)
(51,38,0)
(60,22,0)
(9,14,0)
(17,48,0)
(29,30,0)
(42,41,0)
(60,56,0)
(29,38,0)
(48,17,0)
(5,9,0)
(11,18,0)
(3,46,0)
(0,12,0)
(17,18,0)
(58,46,0)
(41,14,0)
(56,18,0)
(28,18,0)
(38,29,0)
(21,0,0)
(6,0,0)
(0,6,0)
(39,49,0)
(48,12,0)
(13,18,0)
(41,31,0)
(8,48,0)
(45,39,0)
(7,22,0)
(54,12,0)
(10,17,0)
(51,10,0)
(6,14,0)
(22,60,0)
(52,18,0)
(14,6,0)
(46,52,0)
(19,39,0)
(38,51,0)
(52,46,0)
(36,37,0)
(30,29,0)
(32,20,0)
(54,18,0)
(46,14,0)
(16,51,0)
(20,18,0)
(31,18,0)
(37,56,0)
(20,11,0)
(40,18,0)
(11,23,0)
(37,14,0)
(34,41,0)
(14,18,0)
(4,31,0)
(1,52,0)
(10,51,0)
(52,1,0)
(43,48,0)
(55,56,0)
(30,17,0)
(2,10,0)
(35,11,0)
(33,18,0)
(49,39,0)
(9,18,0)
(26,54,0)
(39,56,0)
(15,0,0)
(22,12,0)
(23,11,0)
(58,3,1)
(55,9,1)
(30,47,1)
(22,12,1)
(42,17,1)
(51,16,1)
(10,17,1)
(8,43,1)
(30,17,1)
(22,60,1)
(17,48,1)
(41,34,1)
(49,39,1)
(51,10,1)
(4,41,1)
(9,5,1)
(34,42,1)
(44,51,1)
(0,21,1)
(48,8,1)
(41,14,1)
(14,6,1)
(39,56,1)
(29,30,1)
(22,7,1)
(6,0,1)
(60,25,1)
(7,60,1)
(35,52,1)
(50,22,1)
(46,14,1)
(43,59,1)
(25,38,1)
(20,32,1)
(32,56,1)
(25,49,1)
(36,55,1)
(26,11,1)
(38,51,1)
(9,14,1)
(37,36,1)
(39,45,1)
(11,23,1)
(52,1,1)
(15,57,1)
(47,44,1)
(37,14,1)
(27,2,1)
(38,29,1)
(5,54,1)
(56,37,1)
(10,27,1)
(2,20,1)
(60,56,1)
(45,19,1)
(3,31,1)
(0,12,1)
(19,38,1)
(31,4,1)
(46,58,1)
(20,11,1)
(29,53,1)
(16,10,1)
(21,15,1)
(54,26,1)
(23,35,1)
(54,12,1)
(59,14,1)
(52,46,1)
(53,30,1)
(48,12,1)
(10,17,2)
(49,39,2)
(0,12,2)
(37,14,2)
(20,11,2)
(53,51,2)
(38,29,2)
(39,38,2)
(39,56,2)
(29,51,2)
(30,51,2)
(9,14,2)
(51,10,2)
(52,1,2)
(48,12,2)
(47,51,2)
(14,6,2)
(54,12,2)
(19,38,2)
(49,38,2)
(52,46,2)
(46,14,2)
(56,37,2)
(22,60,2)
(60,56,2)
(45,38,2)
(6,0,2)
(17,48,2)
(41,14,2)
(11,23,2)
(30,17,2)
(29,30,2)
(38,51,2)
(22,12,2)
(44,51,2)
-----------------------------------
(0,so->so_rcv)
(1,void)
(2,pr)
(3,sb)
(4,SB_NOINTR)
(5,sb)
(6,&so->so_rcv)
(7,so)
(8,so_proto)
(9,sbunlock(sb)
(10,pr->pr_flags)
(11,s = splnet()
(12,struct socket *so)
(13,s)
(14,sb = &so->so_rcv)
(15,so)
(16,PR_RIGHTS)
(17,pr = so->so_proto)
(18,)
(19,asb)
(20,splx(s)
(21,so_rcv)
(22,sbrelease(&asb, so)
(23,splnet()
(24,if (pr->pr_flags & PR_RIGHTS && pr->pr_domain->dom_dispose)
(25,asb)
(26,so)
(27,pr_flags)
(28,asb)
(29,pr->pr_domain->dom_dispose)
(30,pr->pr_domain)
(31,sb->sb_flags |= SB_NOINTR)
(32,s)
(33,pr)
(34,sb_flags)
(35,s)
(36,sb)
(37,*sb)
(38,pr->pr_flags & PR_RIGHTS && pr->pr_domain->dom_dispose)
(39,asb.sb_mb)
(40,sb)
(41,sb->sb_flags)
(42,sb)
(43,so)
(44,pr)
(45,sb_mb)
(46,sblock(sb, M_WAITOK)
(47,pr_domain)
(48,so->so_proto)
(49,(*pr->pr_domain->dom_dispose)
(50,RET)
(51,pr->pr_flags & PR_RIGHTS)
(52,(void)
(53,dom_dispose)
(54,socantrcvmore(so)
(55,asb)
(56,asb = *sb)
(57,sb)
(58,M_WAITOK)
(59,pr)
(60,&asb)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^