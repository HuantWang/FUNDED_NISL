-----label-----
1
-----code-----
static void Gcat(register char *s1, register char *s2, boolean_t check_ncargs)
{
    register size_t len = strlen(s1) + strlen(s2) + 1;

    if (globerr)
	return;
    if ((check_ncargs) && ((len + sizeof (char *)) >= gnleft)) {
	globerr = "Arguments too long";
	return;
    }
    if (len > MAXPATHLEN) {
	globerr = "Pathname too long";
	return;
    }
    if (gargc >= agargv_size - 1) {
	char **tmp;

	tmp = (char **)realloc(agargv,
		(agargv_size + GAVSIZ) * sizeof (char *));
	if (tmp == NULL) {
	    fatal("Out of memory");
	} else {
	    agargv = tmp;
	    agargv_size += GAVSIZ;
	}
	gargv = agargv;
	sortbas = agargv;
    }
    gargc++;
    if (check_ncargs)
	gnleft -= len + sizeof (char *);
    gargv[gargc] = 0;
    gargv[gargc - 1] = strspl(s1, s2);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
7,8
7,9
10,11
10,12
12,13
12,14
15,16
15,17
16,17
18,19
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
22,23
22,24
23,24
25,26
25,27
27,28
28,29
28,30
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
41,42
41,43
42,43
45,46
45,47
46,47
46,48
47,48
48,49
50,51
51,52
51,53
52,53
53,54
53,55
54,55
56,57
57,58
57,59
59,60
61,62
63,64
63,65
64,65
65,66
65,67
66,67
70,71
70,72
71,72
71,73
72,73
74,75
76,77
76,78
77,78
78,79
78,80
79,80
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
91,92
91,93
91,94
91,95
91,96
92,93
93,94
93,95
95,96
95,97
95,98
99,100
100,101
100,102
101,102
103,104
103,105
104,105
104,106
106,107
106,108
109,110
109,111
109,112
110,111
112,113
114,115
114,116
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
124,125
126,127
126,128
126,129
127,128
127,129
128,129
130,131
132,133
133,134
134,135
134,136
135,136
138,139
138,140
139,140
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
149,150
151,152
152,153
152,154
153,154
155,156
157,158
158,159
158,160
159,160
161,162
163,164
164,165
165,166
167,168
167,169
168,169
170,171
171,172
171,173
172,173
174,175
174,176
175,176
177,178
178,179
178,180
180,181
182,183
183,184
183,185
184,185
184,186
185,186
187,188
190,191
191,192
191,193
192,193
192,194
193,194
195,196
195,197
196,197
199,200
199,201
199,202
200,201
202,203
204,205
-----nextToken-----
2,4,6,8,9,11,13,14,17,19,24,26,32,34,37,39,40,43,44,49,55,58,60,62,67,68,69,73,75,80,81,82,86,89,90,94,96,97,98,102,105,107,108,111,113,118,120,123,125,129,131,136,137,142,144,148,150,154,156,160,162,166,169,173,176,179,181,186,188,189,194,197,198,201,203,205
-----computeFrom-----
28,29
28,30
29,30
29,31
46,47
46,48
51,52
51,53
53,54
53,55
65,66
65,67
71,72
71,73
78,79
78,80
84,85
84,86
87,88
87,89
100,101
100,102
114,115
114,116
116,117
116,118
127,128
127,129
140,141
140,142
146,147
146,148
152,153
152,154
158,159
158,160
171,172
171,173
174,175
174,176
183,184
183,185
191,192
191,193
195,196
195,197
-----guardedBy-----
89,148
-----guardedByNegation-----
129,144
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ReturnStatement;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void Gcat(register char *s1, register char *s2, boolean_t check_ncargs){    register size_t len = strlen(s1) + strlen(s2) + 1;    if (globerr)	return;    if ((check_ncargs) && ((len + sizeof (char *)) >= gnleft)) {	globerr = "Arguments too long";	return;    }    if (len > MAXPATHLEN) {	globerr = "Pathname too long";	return;    }    if (gargc >= agargv_size - 1) {	char **tmp;	tmp = (char **)realloc(agargv,		(agargv_size + GAVSIZ) * sizeof (char *));	if (tmp == NULL) {	    fatal("Out of memory");	} else {	    agargv = tmp;	    agargv_size += GAVSIZ;	}	gargv = agargv;	sortbas = agargv;    }    gargc++;    if (check_ncargs)	gnleft -= len + sizeof (char *);    gargv[gargc] = 0;    gargv[gargc - 1] = strspl(s1, s2);}
static void
Gcat(register char *s1, register char *s2, boolean_t check_ncargs)
Gcat
register char *s1
register char
*s1
*
s1
register char *s2
register char
*s2
*
s2
boolean_t check_ncargs
boolean_t
boolean_t
check_ncargs
check_ncargs
{    register size_t len = strlen(s1) + strlen(s2) + 1;    if (globerr)	return;    if ((check_ncargs) && ((len + sizeof (char *)) >= gnleft)) {	globerr = "Arguments too long";	return;    }    if (len > MAXPATHLEN) {	globerr = "Pathname too long";	return;    }    if (gargc >= agargv_size - 1) {	char **tmp;	tmp = (char **)realloc(agargv,		(agargv_size + GAVSIZ) * sizeof (char *));	if (tmp == NULL) {	    fatal("Out of memory");	} else {	    agargv = tmp;	    agargv_size += GAVSIZ;	}	gargv = agargv;	sortbas = agargv;    }    gargc++;    if (check_ncargs)	gnleft -= len + sizeof (char *);    gargv[gargc] = 0;    gargv[gargc - 1] = strspl(s1, s2);}
register size_t len = strlen(s1) + strlen(s2) + 1;
register size_t len = strlen(s1) + strlen(s2) + 1;
register size_t
size_t
len = strlen(s1) + strlen(s2) + 1
len
= strlen(s1) + strlen(s2) + 1
strlen(s1) + strlen(s2) + 1
strlen(s1) + strlen(s2)
strlen(s1)
strlen
strlen
s1
s1
strlen(s2)
strlen
strlen
s2
s2
1
if (globerr)	return;
globerr
globerr
return;
if ((check_ncargs) && ((len + sizeof (char *)) >= gnleft)) {	globerr = "Arguments too long";	return;    }
(check_ncargs) && ((len + sizeof (char *)) >= gnleft)
(check_ncargs)
check_ncargs
check_ncargs
((len + sizeof (char *)) >= gnleft)
(len + sizeof (char *)) >= gnleft
(len + sizeof (char *))
len + sizeof (char *)
len
len
sizeof (char *)
char *
char
*
*
gnleft
gnleft
{	globerr = "Arguments too long";	return;    }
globerr = "Arguments too long";
globerr = "Arguments too long"
globerr
globerr
"Arguments too long"
return;
if (len > MAXPATHLEN) {	globerr = "Pathname too long";	return;    }
len > MAXPATHLEN
len
len
MAXPATHLEN
MAXPATHLEN
{	globerr = "Pathname too long";	return;    }
globerr = "Pathname too long";
globerr = "Pathname too long"
globerr
globerr
"Pathname too long"
return;
if (gargc >= agargv_size - 1) {	char **tmp;	tmp = (char **)realloc(agargv,		(agargv_size + GAVSIZ) * sizeof (char *));	if (tmp == NULL) {	    fatal("Out of memory");	} else {	    agargv = tmp;	    agargv_size += GAVSIZ;	}	gargv = agargv;	sortbas = agargv;    }
gargc >= agargv_size - 1
gargc
gargc
agargv_size - 1
agargv_size
agargv_size
1
{	char **tmp;	tmp = (char **)realloc(agargv,		(agargv_size + GAVSIZ) * sizeof (char *));	if (tmp == NULL) {	    fatal("Out of memory");	} else {	    agargv = tmp;	    agargv_size += GAVSIZ;	}	gargv = agargv;	sortbas = agargv;    }
char **tmp;
char **tmp;
char
**tmp
*
*
tmp
tmp = (char **)realloc(agargv,		(agargv_size + GAVSIZ) * sizeof (char *));
tmp = (char **)realloc(agargv,		(agargv_size + GAVSIZ) * sizeof (char *))
tmp
tmp
(char **)realloc(agargv,		(agargv_size + GAVSIZ) * sizeof (char *))
char **
char
**
*
*
realloc(agargv,		(agargv_size + GAVSIZ) * sizeof (char *))
realloc
realloc
agargv
agargv
(agargv_size + GAVSIZ) * sizeof (char *)
(agargv_size + GAVSIZ)
agargv_size + GAVSIZ
agargv_size
agargv_size
GAVSIZ
GAVSIZ
sizeof (char *)
char *
char
*
*
if (tmp == NULL) {	    fatal("Out of memory");	} else {	    agargv = tmp;	    agargv_size += GAVSIZ;	}
tmp == NULL
tmp
tmp
NULL
NULL
{	    fatal("Out of memory");	}
fatal("Out of memory");
fatal("Out of memory")
fatal
fatal
"Out of memory"
{	    agargv = tmp;	    agargv_size += GAVSIZ;	}
agargv = tmp;
agargv = tmp
agargv
agargv
tmp
tmp
agargv_size += GAVSIZ;
agargv_size += GAVSIZ
agargv_size
agargv_size
GAVSIZ
GAVSIZ
gargv = agargv;
gargv = agargv
gargv
gargv
agargv
agargv
sortbas = agargv;
sortbas = agargv
sortbas
sortbas
agargv
agargv
gargc++;
gargc++
gargc
gargc
if (check_ncargs)	gnleft -= len + sizeof (char *);
check_ncargs
check_ncargs
gnleft -= len + sizeof (char *);
gnleft -= len + sizeof (char *)
gnleft
gnleft
len + sizeof (char *)
len
len
sizeof (char *)
char *
char
*
*
gargv[gargc] = 0;
gargv[gargc] = 0
gargv[gargc]
gargv
gargv
gargc
gargc
0
gargv[gargc - 1] = strspl(s1, s2);
gargv[gargc - 1] = strspl(s1, s2)
gargv[gargc - 1]
gargv
gargv
gargc - 1
gargc
gargc
1
strspl(s1, s2)
strspl
strspl
s1
s1
s2
s2
-----joern-----
(61,54,0)
(95,104,0)
(52,64,0)
(66,55,0)
(50,103,0)
(73,54,0)
(104,95,0)
(26,41,0)
(22,24,0)
(11,24,0)
(49,104,0)
(14,29,0)
(48,88,0)
(27,55,0)
(82,53,0)
(71,22,0)
(3,43,0)
(86,24,0)
(99,72,0)
(101,32,0)
(13,45,0)
(63,47,0)
(98,94,0)
(1,19,0)
(9,54,0)
(76,51,0)
(19,86,0)
(79,84,0)
(42,45,0)
(1,95,0)
(38,41,0)
(46,45,0)
(30,84,0)
(50,86,0)
(97,17,0)
(80,84,0)
(7,21,0)
(35,72,0)
(19,16,0)
(39,45,0)
(70,81,0)
(20,83,0)
(67,102,0)
(34,32,0)
(17,64,0)
(62,50,0)
(41,95,0)
(77,102,0)
(51,56,0)
(83,12,0)
(68,59,0)
(14,84,0)
(68,98,0)
(81,5,0)
(80,71,0)
(89,24,0)
(80,47,0)
(71,32,0)
(55,17,0)
(71,50,0)
(100,45,0)
(78,22,0)
(75,102,0)
(21,7,0)
(74,50,0)
(47,80,0)
(4,48,0)
(28,94,0)
(95,1,0)
(2,30,0)
(60,14,0)
(37,45,0)
(53,43,0)
(90,28,0)
(29,14,0)
(68,87,0)
(81,27,0)
(52,5,0)
(51,29,0)
(84,45,0)
(86,19,0)
(104,49,0)
(0,83,0)
(8,29,0)
(71,11,0)
(23,11,0)
(17,55,0)
(15,73,0)
(10,28,0)
(69,71,0)
(72,86,0)
(32,103,0)
(57,52,0)
(102,67,0)
(58,24,0)
(27,81,0)
(93,45,0)
(32,50,0)
(39,52,0)
(71,80,0)
(18,30,0)
(16,19,0)
(14,21,0)
(33,52,0)
(92,86,0)
(54,73,0)
(67,39,0)
(52,39,0)
(43,45,0)
(44,53,0)
(6,67,0)
(19,1,0)
(21,14,0)
(36,22,0)
(55,27,0)
(91,1,0)
(31,45,0)
(29,51,0)
(85,80,0)
(95,41,0)
(47,63,0)
(40,11,0)
(84,27,0)
(96,46,0)
(27,84,0)
(59,12,0)
(75,6,1)
(72,86,1)
(44,25,1)
(25,46,1)
(61,15,1)
(55,17,1)
(68,87,1)
(30,18,1)
(81,70,1)
(104,49,1)
(99,86,1)
(29,8,1)
(17,64,1)
(52,5,1)
(14,21,1)
(9,61,1)
(8,14,1)
(3,53,1)
(50,86,1)
(71,50,1)
(21,7,1)
(6,43,1)
(27,81,1)
(10,51,1)
(104,41,1)
(28,90,1)
(50,62,1)
(2,51,1)
(70,79,1)
(41,38,1)
(101,34,1)
(67,102,1)
(22,78,1)
(78,36,1)
(96,22,1)
(81,5,1)
(44,71,1)
(32,50,1)
(98,28,1)
(84,27,1)
(39,52,1)
(80,84,1)
(46,96,1)
(53,82,1)
(57,67,1)
(52,64,1)
(40,23,1)
(87,65,1)
(51,76,1)
(65,84,1)
(52,33,1)
(43,3,1)
(36,11,1)
(72,35,1)
(60,76,1)
(47,85,1)
(73,54,1)
(23,48,1)
(68,39,1)
(0,30,1)
(97,81,1)
(51,56,1)
(38,26,1)
(26,91,1)
(11,40,1)
(82,44,1)
(90,10,1)
(27,55,1)
(47,63,1)
(76,65,1)
(17,97,1)
(34,50,1)
(85,69,1)
(4,72,1)
(54,9,1)
(77,75,1)
(23,32,1)
(29,14,1)
(51,29,1)
(21,60,1)
(14,84,1)
(35,99,1)
(95,104,1)
(20,0,1)
(68,59,1)
(59,83,1)
(66,17,1)
(86,19,1)
(95,41,1)
(1,95,1)
(48,4,1)
(30,84,1)
(91,92,1)
(71,11,1)
(83,20,1)
(68,98,1)
(92,73,1)
(74,72,1)
(33,57,1)
(69,25,1)
(71,32,1)
(102,77,1)
(32,101,1)
(71,22,1)
(96,73,1)
(62,74,1)
(55,66,1)
(18,2,1)
(71,80,1)
(19,16,1)
(15,30,1)
(19,1,1)
(80,47,1)
(4,72,2)
(19,1,2)
(55,17,2)
(20,30,2)
(32,50,2)
(38,73,2)
(68,87,2)
(98,51,2)
(67,102,2)
(30,84,2)
(92,73,2)
(32,72,2)
(74,72,2)
(71,11,2)
(14,76,2)
(101,72,2)
(78,73,2)
(82,30,2)
(33,30,2)
(48,72,2)
(71,80,2)
(50,72,2)
(77,30,2)
(40,73,2)
(27,55,2)
(9,30,2)
(3,30,2)
(15,30,2)
(59,30,2)
(21,76,2)
(28,51,2)
(18,51,2)
(2,51,2)
(61,30,2)
(41,73,2)
(104,73,2)
(80,84,2)
(29,14,2)
(10,51,2)
(96,30,2)
(19,73,2)
(52,5,2)
(22,73,2)
(36,73,2)
(62,72,2)
(39,52,2)
(57,30,2)
(73,54,2)
(35,73,2)
(47,25,2)
(53,30,2)
(60,76,2)
(51,65,2)
(26,73,2)
(52,30,2)
(44,30,2)
(104,49,2)
(87,65,2)
(86,73,2)
(73,30,2)
(95,104,2)
(71,25,2)
(30,51,2)
(11,73,2)
(19,16,2)
(86,19,2)
(27,81,2)
(75,30,2)
(0,30,2)
(6,30,2)
(95,73,2)
(47,63,2)
(46,30,2)
(91,73,2)
(51,29,2)
(72,73,2)
(52,64,2)
(68,59,2)
(95,41,2)
(68,98,2)
(51,56,2)
(29,76,2)
(39,30,2)
(80,25,2)
(34,72,2)
(71,22,2)
(90,51,2)
(84,27,2)
(81,5,2)
(1,73,2)
(14,84,2)
(8,76,2)
(99,73,2)
(80,47,2)
(67,30,2)
(54,30,2)
(76,65,2)
(1,95,2)
(17,64,2)
(21,7,2)
(102,30,2)
(71,32,2)
(50,86,2)
(43,30,2)
(71,50,2)
(25,30,2)
(14,21,2)
(72,86,2)
(23,73,2)
(85,25,2)
(69,25,2)
(83,30,2)
-----------------------------------
(0,globerr)
(1,realloc(agargv,\n\\n\\t\\t(agargv_size + GAVSIZ)
(2,len)
(3,0)
(4,"Out of memory")
(5,register char *s1)
(6,gargv)
(7,char *)
(8,gnleft)
(9,1)
(10,globerr)
(11,gargv = agargv)
(12,)
(13,if (len > MAXPATHLEN)
(14,len + sizeof (char *)
(15,gargc)
(16,char **)
(17,strlen(s2)
(18,MAXPATHLEN)
(19,(char **)
(20,"Pathname too long")
(21,sizeof (char *)
(22,sortbas = agargv)
(23,gargv)
(24,)
(25,check_ncargs)
(26,agargv_size)
(27,strlen(s1)
(28,globerr = "Arguments too long")
(29,(len + sizeof (char *)
(30,len > MAXPATHLEN)
(31,if (check_ncargs)
(32,agargv_size += GAVSIZ)
(33,s2)
(34,agargv_size)
(35,NULL)
(36,sortbas)
(37,if ((check_ncargs)
(38,GAVSIZ)
(39,gargv[gargc - 1] = strspl(s1, s2)
(40,agargv)
(41,agargv_size + GAVSIZ)
(42,len)
(43,gargv[gargc] = 0)
(44,gargv)
(45,)
(46,gargc++)
(47,sizeof (char *)
(48,fatal("Out of memory")
(49,char *)
(50,agargv = tmp)
(51,(check_ncargs)
(52,strspl(s1, s2)
(53,gargv[gargc])
(54,agargv_size - 1)
(55,strlen(s2)
(56,boolean_t check_ncargs)
(57,s1)
(58,if (tmp == NULL)
(59,return;)
(60,len)
(61,agargv_size)
(62,tmp)
(63,char *)
(64,register char *s2)
(65,globerr)
(66,1)
(67,gargv[gargc - 1])
(68,RET)
(69,gnleft)
(70,s1)
(71,gnleft -= len + sizeof (char *)
(72,tmp == NULL)
(73,gargc >= agargv_size - 1)
(74,agargv)
(75,gargc)
(76,check_ncargs)
(77,1)
(78,agargv)
(79,len)
(80,len + sizeof (char *)
(81,strlen(s1)
(82,gargc)
(83,globerr = "Pathname too long")
(84,len = strlen(s1)
(85,len)
(86,tmp = (char **)
(87,return;)
(88,)
(89,tmp)
(90,"Arguments too long")
(91,agargv)
(92,tmp)
(93,if (gargc >= agargv_size - 1)
(94,)
(95,(agargv_size + GAVSIZ)
(96,gargc)
(97,s2)
(98,return;)
(99,tmp)
(100,if (globerr)
(101,GAVSIZ)
(102,gargc - 1)
(103,)
(104,sizeof (char *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^