-----label-----
0
-----code-----
void
_gdp_req_free(gdp_req_t **reqp)
{
	gdp_req_t *req = *reqp;

	if (req == NULL)
		return;

	// make sure the original pointer is invalid
	*reqp = NULL;

	ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",
			req, req->state, req->gcl);

	EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);
	if (req->state == GDP_REQ_FREE)
	{
		// req was freed after a reference was taken
		return;
	}

	// remove the request from the channel subscription list
	if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags))
	{
		ep_thr_mutex_lock(&req->chan->mutex);
		LIST_REMOVE(req, chanlist);
		req->flags &= ~GDP_REQ_ON_CHAN_LIST;
		ep_thr_mutex_unlock(&req->chan->mutex);
	}

	// remove the request from the GCL list
	if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))
	{
		EP_ASSERT_ELSE(req->gcl != NULL, return);
		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);
		LIST_REMOVE(req, gcllist);
		req->flags &= ~GDP_REQ_ON_GCL_LIST;
	}

	// dereference the gcl
	// (refcnt may be zero if called from _gdp_gcl_freehandle)
	if (req->gcl != NULL && req->gcl->refcnt > 0)
		_gdp_gcl_decref(&req->gcl);

	// remove any pending events from the request
	{
		gdp_event_t *gev;
		while ((gev = STAILQ_FIRST(&req->events)) != NULL)
			STAILQ_REMOVE_HEAD(&req->events, queue);
	}

	// free the associated PDU(s)
	if (req->rpdu != NULL && req->rpdu != req->cpdu)
		_gdp_pdu_free(req->rpdu);
	if (req->cpdu != NULL)
		_gdp_pdu_free(req->cpdu);
	req->rpdu = req->cpdu = NULL;

	req->state = GDP_REQ_FREE;
	req->flags = 0;
	req->md = NULL;
	req->udata = NULL;

	// add the empty request to the free list
	ep_thr_mutex_lock(&ReqFreeListMutex);
	LIST_INSERT_HEAD(&ReqFreeList, req, gcllist);
	NReqsAllocated--;
	ep_thr_mutex_unlock(&ReqFreeListMutex);

	_gdp_req_unlock(req);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
8,11
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
12,23
12,24
12,25
12,26
12,27
12,28
12,29
12,30
12,31
12,32
12,33
12,34
13,14
14,15
14,16
15,16
17,18
17,19
17,20
20,21
21,22
22,23
24,25
24,26
25,26
25,27
26,27
28,29
31,32
32,33
32,34
33,34
34,35
36,37
38,39
39,40
39,41
39,42
39,43
39,44
39,45
39,46
40,41
42,43
46,47
48,49
48,50
49,50
52,53
52,54
53,54
56,57
57,58
57,59
58,59
60,61
61,62
61,63
62,63
65,66
65,67
66,67
66,68
67,68
67,69
68,69
71,72
73,74
75,76
75,77
76,77
76,78
76,79
77,78
79,80
81,82
81,83
82,83
85,86
85,87
85,88
85,89
86,87
87,88
87,89
88,89
90,91
91,92
91,93
92,93
92,94
93,94
97,98
98,99
98,100
98,101
99,100
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
112,113
114,115
115,116
115,117
116,117
118,119
119,120
119,121
120,121
120,122
121,122
125,126
125,127
126,127
126,128
126,129
127,128
129,130
131,132
131,133
132,133
135,136
135,137
135,138
135,139
136,137
137,138
138,139
138,140
139,140
141,142
142,143
142,144
143,144
143,145
144,145
148,149
149,150
149,151
149,152
150,151
152,153
154,155
156,157
157,158
157,159
158,159
158,160
159,160
162,163
163,164
165,166
165,167
166,167
166,168
167,168
167,169
168,169
168,170
169,170
172,173
174,175
174,176
175,176
175,177
176,177
176,178
177,178
182,183
183,184
183,185
184,185
186,187
187,188
187,189
188,189
191,192
191,193
192,193
193,194
193,195
194,195
196,197
196,198
199,200
199,201
200,201
200,202
201,202
202,203
202,204
203,204
205,206
205,207
206,207
208,209
209,210
209,211
210,211
213,214
215,216
216,217
216,218
216,219
217,218
219,220
220,221
220,222
221,222
224,225
226,227
226,228
227,228
227,229
228,229
228,230
229,230
229,231
230,231
233,234
235,236
235,237
236,237
236,238
237,238
240,241
240,242
241,242
244,245
245,246
245,247
246,247
248,249
248,250
249,250
252,253
252,254
253,254
253,255
254,255
254,256
255,256
258,259
260,261
261,262
261,263
262,263
264,265
264,266
265,266
268,269
269,270
269,271
270,271
270,272
271,272
274,275
274,276
275,276
275,277
276,277
279,280
281,282
282,283
282,284
283,284
283,285
284,285
287,288
289,290
290,291
290,292
291,292
291,293
292,293
296,297
297,298
297,299
298,299
298,300
299,300
302,303
304,305
305,306
305,307
306,307
306,308
307,308
310,311
312,313
313,314
313,315
314,315
316,317
317,318
317,319
320,321
321,322
321,323
321,324
321,325
322,323
324,325
325,326
327,328
329,330
331,332
332,333
333,334
335,336
336,337
336,338
337,338
339,340
340,341
342,343
343,344
343,345
344,345
346,347
-----nextToken-----
2,4,7,9,10,11,16,18,19,23,27,29,30,35,37,41,43,44,45,47,50,51,54,55,59,63,64,69,70,72,74,78,80,83,84,89,94,95,96,100,102,104,109,110,113,117,122,123,124,128,130,133,134,140,145,146,147,151,153,155,160,161,164,170,171,173,178,179,180,181,185,189,190,195,197,198,204,207,211,212,214,218,222,223,225,231,232,234,238,239,242,243,247,250,251,256,257,259,263,266,267,272,273,277,278,280,285,286,288,293,294,295,300,301,303,308,309,311,315,318,319,323,326,328,330,334,338,341,345,347
-----computeFrom-----
25,26
25,27
32,33
32,34
66,67
66,68
106,107
106,108
157,158
157,159
166,167
166,168
167,168
167,169
174,175
174,176
200,201
200,202
202,203
202,204
227,228
227,229
228,229
228,230
235,236
235,237
253,254
253,255
269,270
269,271
274,275
274,276
282,283
282,284
290,291
290,292
297,298
297,299
305,306
305,307
-----guardedBy-----
179,190
178,189
239,251
242,250
257,267
256,266
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ReturnStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void_gdp_req_free(gdp_req_t **reqp){	gdp_req_t *req = *reqp;	if (req == NULL)		return;	// make sure the original pointer is invalid	*reqp = NULL;	ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",			req, req->state, req->gcl);	EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);	if (req->state == GDP_REQ_FREE)	{		// req was freed after a reference was taken		return;	}	// remove the request from the channel subscription list	if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags))	{		ep_thr_mutex_lock(&req->chan->mutex);		LIST_REMOVE(req, chanlist);		req->flags &= ~GDP_REQ_ON_CHAN_LIST;		ep_thr_mutex_unlock(&req->chan->mutex);	}	// remove the request from the GCL list	if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))	{		EP_ASSERT_ELSE(req->gcl != NULL, return);		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);		LIST_REMOVE(req, gcllist);		req->flags &= ~GDP_REQ_ON_GCL_LIST;	}	// dereference the gcl	// (refcnt may be zero if called from _gdp_gcl_freehandle)	if (req->gcl != NULL && req->gcl->refcnt > 0)		_gdp_gcl_decref(&req->gcl);	// remove any pending events from the request	{		gdp_event_t *gev;		while ((gev = STAILQ_FIRST(&req->events)) != NULL)			STAILQ_REMOVE_HEAD(&req->events, queue);	}	// free the associated PDU(s)	if (req->rpdu != NULL && req->rpdu != req->cpdu)		_gdp_pdu_free(req->rpdu);	if (req->cpdu != NULL)		_gdp_pdu_free(req->cpdu);	req->rpdu = req->cpdu = NULL;	req->state = GDP_REQ_FREE;	req->flags = 0;	req->md = NULL;	req->udata = NULL;	// add the empty request to the free list	ep_thr_mutex_lock(&ReqFreeListMutex);	LIST_INSERT_HEAD(&ReqFreeList, req, gcllist);	NReqsAllocated--;	ep_thr_mutex_unlock(&ReqFreeListMutex);	_gdp_req_unlock(req);}
void
_gdp_req_free(gdp_req_t **reqp)
_gdp_req_free
gdp_req_t **reqp
gdp_req_t
gdp_req_t
**reqp
*
*
reqp
{	gdp_req_t *req = *reqp;	if (req == NULL)		return;	// make sure the original pointer is invalid	*reqp = NULL;	ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",			req, req->state, req->gcl);	EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);	if (req->state == GDP_REQ_FREE)	{		// req was freed after a reference was taken		return;	}	// remove the request from the channel subscription list	if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags))	{		ep_thr_mutex_lock(&req->chan->mutex);		LIST_REMOVE(req, chanlist);		req->flags &= ~GDP_REQ_ON_CHAN_LIST;		ep_thr_mutex_unlock(&req->chan->mutex);	}	// remove the request from the GCL list	if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))	{		EP_ASSERT_ELSE(req->gcl != NULL, return);		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);		LIST_REMOVE(req, gcllist);		req->flags &= ~GDP_REQ_ON_GCL_LIST;	}	// dereference the gcl	// (refcnt may be zero if called from _gdp_gcl_freehandle)	if (req->gcl != NULL && req->gcl->refcnt > 0)		_gdp_gcl_decref(&req->gcl);	// remove any pending events from the request	{		gdp_event_t *gev;		while ((gev = STAILQ_FIRST(&req->events)) != NULL)			STAILQ_REMOVE_HEAD(&req->events, queue);	}	// free the associated PDU(s)	if (req->rpdu != NULL && req->rpdu != req->cpdu)		_gdp_pdu_free(req->rpdu);	if (req->cpdu != NULL)		_gdp_pdu_free(req->cpdu);	req->rpdu = req->cpdu = NULL;	req->state = GDP_REQ_FREE;	req->flags = 0;	req->md = NULL;	req->udata = NULL;	// add the empty request to the free list	ep_thr_mutex_lock(&ReqFreeListMutex);	LIST_INSERT_HEAD(&ReqFreeList, req, gcllist);	NReqsAllocated--;	ep_thr_mutex_unlock(&ReqFreeListMutex);	_gdp_req_unlock(req);}
gdp_req_t *req = *reqp;
gdp_req_t *req = *reqp;
gdp_req_t
gdp_req_t
*req = *reqp
*
req
= *reqp
*reqp
reqp
reqp
if (req == NULL)		return;
req == NULL
req
req
NULL
NULL
return;
*reqp = NULL;
*reqp = NULL
*reqp
reqp
reqp
NULL
NULL
ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",			req, req->state, req->gcl);
ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)  state=%d, gcl=%p\n",			req, req->state, req->gcl)
ep_dbg_cprintf
ep_dbg_cprintf
Dbg
Dbg
48
"_gdp_req_free(%p)  state=%d, gcl=%p\n"
req
req
req->state
req
req
state
req->gcl
req
req
gcl
EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex);
EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex)
EP_THR_MUTEX_ASSERT_ISLOCKED
EP_THR_MUTEX_ASSERT_ISLOCKED
&req->mutex
req->mutex
req
req
mutex
if (req->state == GDP_REQ_FREE)	{		// req was freed after a reference was taken		return;	}
req->state == GDP_REQ_FREE
req->state
req
req
state
GDP_REQ_FREE
GDP_REQ_FREE
{		// req was freed after a reference was taken		return;	}
return;
if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags))	{		ep_thr_mutex_lock(&req->chan->mutex);		LIST_REMOVE(req, chanlist);		req->flags &= ~GDP_REQ_ON_CHAN_LIST;		ep_thr_mutex_unlock(&req->chan->mutex);	}
EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags)
EP_UT_BITSET
EP_UT_BITSET
GDP_REQ_ON_CHAN_LIST
GDP_REQ_ON_CHAN_LIST
req->flags
req
req
flags
{		ep_thr_mutex_lock(&req->chan->mutex);		LIST_REMOVE(req, chanlist);		req->flags &= ~GDP_REQ_ON_CHAN_LIST;		ep_thr_mutex_unlock(&req->chan->mutex);	}
ep_thr_mutex_lock(&req->chan->mutex);
ep_thr_mutex_lock(&req->chan->mutex)
ep_thr_mutex_lock
ep_thr_mutex_lock
&req->chan->mutex
req->chan->mutex
req->chan
req
req
chan
mutex
LIST_REMOVE(req, chanlist);
LIST_REMOVE(req, chanlist)
LIST_REMOVE
LIST_REMOVE
req
req
chanlist
chanlist
req->flags &= ~GDP_REQ_ON_CHAN_LIST;
req->flags &= ~GDP_REQ_ON_CHAN_LIST
req->flags
req
req
flags
~GDP_REQ_ON_CHAN_LIST
GDP_REQ_ON_CHAN_LIST
GDP_REQ_ON_CHAN_LIST
ep_thr_mutex_unlock(&req->chan->mutex);
ep_thr_mutex_unlock(&req->chan->mutex)
ep_thr_mutex_unlock
ep_thr_mutex_unlock
&req->chan->mutex
req->chan->mutex
req->chan
req
req
chan
mutex
if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags))	{		EP_ASSERT_ELSE(req->gcl != NULL, return);		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);		LIST_REMOVE(req, gcllist);		req->flags &= ~GDP_REQ_ON_GCL_LIST;	}
EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags)
EP_UT_BITSET
EP_UT_BITSET
GDP_REQ_ON_GCL_LIST
GDP_REQ_ON_GCL_LIST
req->flags
req
req
flags
{		EP_ASSERT_ELSE(req->gcl != NULL, return);		EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);		LIST_REMOVE(req, gcllist);		req->flags &= ~GDP_REQ_ON_GCL_LIST;	}
EP_ASSERT_ELSE(req->gcl != NULL, return);
EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex);
EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex)
EP_THR_MUTEX_ASSERT_ISLOCKED
EP_THR_MUTEX_ASSERT_ISLOCKED
&req->gcl->mutex
req->gcl->mutex
req->gcl
req
req
gcl
mutex
LIST_REMOVE(req, gcllist);
LIST_REMOVE(req, gcllist)
LIST_REMOVE
LIST_REMOVE
req
req
gcllist
gcllist
req->flags &= ~GDP_REQ_ON_GCL_LIST;
req->flags &= ~GDP_REQ_ON_GCL_LIST
req->flags
req
req
flags
~GDP_REQ_ON_GCL_LIST
GDP_REQ_ON_GCL_LIST
GDP_REQ_ON_GCL_LIST
if (req->gcl != NULL && req->gcl->refcnt > 0)		_gdp_gcl_decref(&req->gcl);
req->gcl != NULL && req->gcl->refcnt > 0
req->gcl != NULL
req->gcl
req
req
gcl
NULL
NULL
req->gcl->refcnt > 0
req->gcl->refcnt
req->gcl
req
req
gcl
refcnt
0
_gdp_gcl_decref(&req->gcl);
_gdp_gcl_decref(&req->gcl)
_gdp_gcl_decref
_gdp_gcl_decref
&req->gcl
req->gcl
req
req
gcl
{		gdp_event_t *gev;		while ((gev = STAILQ_FIRST(&req->events)) != NULL)			STAILQ_REMOVE_HEAD(&req->events, queue);	}
gdp_event_t *gev;
gdp_event_t *gev;
gdp_event_t
gdp_event_t
*gev
*
gev
while ((gev = STAILQ_FIRST(&req->events)) != NULL)			STAILQ_REMOVE_HEAD(&req->events, queue);
(gev = STAILQ_FIRST(&req->events)) != NULL
(gev = STAILQ_FIRST(&req->events))
gev = STAILQ_FIRST(&req->events)
gev
gev
STAILQ_FIRST(&req->events)
STAILQ_FIRST
STAILQ_FIRST
&req->events
req->events
req
req
events
NULL
NULL
STAILQ_REMOVE_HEAD(&req->events, queue);
STAILQ_REMOVE_HEAD(&req->events, queue)
STAILQ_REMOVE_HEAD
STAILQ_REMOVE_HEAD
&req->events
req->events
req
req
events
queue
queue
if (req->rpdu != NULL && req->rpdu != req->cpdu)		_gdp_pdu_free(req->rpdu);
req->rpdu != NULL && req->rpdu != req->cpdu
req->rpdu != NULL
req->rpdu
req
req
rpdu
NULL
NULL
req->rpdu != req->cpdu
req->rpdu
req
req
rpdu
req->cpdu
req
req
cpdu
_gdp_pdu_free(req->rpdu);
_gdp_pdu_free(req->rpdu)
_gdp_pdu_free
_gdp_pdu_free
req->rpdu
req
req
rpdu
if (req->cpdu != NULL)		_gdp_pdu_free(req->cpdu);
req->cpdu != NULL
req->cpdu
req
req
cpdu
NULL
NULL
_gdp_pdu_free(req->cpdu);
_gdp_pdu_free(req->cpdu)
_gdp_pdu_free
_gdp_pdu_free
req->cpdu
req
req
cpdu
req->rpdu = req->cpdu = NULL;
req->rpdu = req->cpdu = NULL
req->rpdu
req
req
rpdu
req->cpdu = NULL
req->cpdu
req
req
cpdu
NULL
NULL
req->state = GDP_REQ_FREE;
req->state = GDP_REQ_FREE
req->state
req
req
state
GDP_REQ_FREE
GDP_REQ_FREE
req->flags = 0;
req->flags = 0
req->flags
req
req
flags
0
req->md = NULL;
req->md = NULL
req->md
req
req
md
NULL
NULL
req->udata = NULL;
req->udata = NULL
req->udata
req
req
udata
NULL
NULL
ep_thr_mutex_lock(&ReqFreeListMutex);
ep_thr_mutex_lock(&ReqFreeListMutex);
ep_thr_mutex_lock
ep_thr_mutex_lock
(&ReqFreeListMutex)
&ReqFreeListMutex
&
ReqFreeListMutex
LIST_INSERT_HEAD(&ReqFreeList, req, gcllist);
LIST_INSERT_HEAD(&ReqFreeList, req, gcllist)
LIST_INSERT_HEAD
LIST_INSERT_HEAD
&ReqFreeList
ReqFreeList
ReqFreeList
req
req
gcllist
gcllist
NReqsAllocated--;
NReqsAllocated--
NReqsAllocated
NReqsAllocated
ep_thr_mutex_unlock(&ReqFreeListMutex);
ep_thr_mutex_unlock(&ReqFreeListMutex)
ep_thr_mutex_unlock
ep_thr_mutex_unlock
&ReqFreeListMutex
ReqFreeListMutex
ReqFreeListMutex
_gdp_req_unlock(req);
_gdp_req_unlock(req)
_gdp_req_unlock
_gdp_req_unlock
req
req
-----joern-----
(31,196,0)
(119,121,0)
(186,151,0)
(165,49,0)
(148,153,0)
(184,49,0)
(23,137,0)
(0,191,0)
(143,33,0)
(92,75,0)
(81,53,0)
(147,72,0)
(34,33,0)
(181,84,0)
(175,187,0)
(142,18,0)
(143,176,0)
(170,49,0)
(193,90,0)
(82,79,0)
(21,132,0)
(196,31,0)
(50,49,0)
(62,25,0)
(94,31,0)
(199,106,0)
(177,17,0)
(137,49,0)
(84,194,0)
(71,119,0)
(18,59,0)
(8,54,0)
(164,98,0)
(153,95,0)
(70,172,0)
(200,56,0)
(95,176,0)
(22,119,0)
(100,77,0)
(80,17,0)
(118,109,0)
(1,103,0)
(25,62,0)
(141,80,0)
(19,85,0)
(6,128,0)
(46,19,0)
(147,51,0)
(181,85,0)
(58,13,0)
(183,103,0)
(198,153,0)
(119,153,0)
(65,144,0)
(91,97,0)
(47,122,0)
(140,78,0)
(29,49,0)
(97,77,0)
(106,199,0)
(190,17,0)
(156,15,0)
(137,153,0)
(78,153,0)
(173,11,0)
(17,177,0)
(35,101,0)
(185,29,0)
(92,103,0)
(4,179,0)
(88,27,0)
(77,97,0)
(148,160,0)
(149,68,0)
(107,12,0)
(157,49,0)
(6,49,0)
(27,153,0)
(56,153,0)
(144,153,0)
(196,153,0)
(77,45,0)
(187,153,0)
(103,153,0)
(10,56,0)
(182,20,0)
(167,156,0)
(162,45,0)
(160,148,0)
(198,165,0)
(159,11,0)
(54,153,0)
(150,72,0)
(152,78,0)
(116,82,0)
(16,49,0)
(44,137,0)
(33,49,0)
(169,127,0)
(64,55,0)
(123,135,0)
(51,179,0)
(57,160,0)
(135,123,0)
(36,177,0)
(97,153,0)
(115,79,0)
(160,57,0)
(66,59,0)
(197,137,0)
(124,62,0)
(29,153,0)
(161,187,0)
(188,194,0)
(189,196,0)
(5,154,0)
(120,143,0)
(87,199,0)
(110,148,0)
(168,162,0)
(15,156,0)
(98,20,0)
(72,147,0)
(180,166,0)
(32,122,0)
(95,153,0)
(136,106,0)
(42,122,0)
(59,153,0)
(145,198,0)
(125,37,0)
(186,64,0)
(67,113,0)
(135,49,0)
(55,101,0)
(122,49,0)
(83,101,0)
(12,53,0)
(39,153,0)
(138,49,0)
(154,153,0)
(93,153,0)
(193,49,0)
(170,127,0)
(134,177,0)
(128,144,0)
(38,55,0)
(153,49,0)
(114,121,0)
(30,97,0)
(117,139,0)
(75,92,0)
(172,85,0)
(18,151,0)
(106,153,0)
(19,46,0)
(162,31,0)
(48,27,0)
(139,49,0)
(133,25,0)
(12,153,0)
(158,109,0)
(108,113,0)
(156,153,0)
(61,144,0)
(86,49,0)
(150,153,0)
(13,153,0)
(21,149,0)
(129,24,0)
(113,85,0)
(192,62,0)
(20,98,0)
(63,106,0)
(9,154,0)
(59,18,0)
(177,153,0)
(7,90,0)
(93,137,0)
(166,28,0)
(171,118,0)
(28,166,0)
(144,128,0)
(89,166,0)
(73,82,0)
(172,78,0)
(130,37,0)
(55,64,0)
(128,6,0)
(41,148,0)
(79,49,0)
(82,153,0)
(194,84,0)
(127,170,0)
(2,12,0)
(11,153,0)
(37,24,0)
(31,162,0)
(126,123,0)
(56,151,0)
(20,153,0)
(161,46,0)
(137,13,0)
(113,153,0)
(76,196,0)
(122,153,0)
(72,150,0)
(191,49,0)
(51,147,0)
(122,42,0)
(53,12,0)
(155,42,0)
(101,153,0)
(27,193,0)
(64,186,0)
(84,181,0)
(195,93,0)
(101,55,0)
(80,153,0)
(190,25,0)
(137,93,0)
(104,13,0)
(3,80,0)
(14,198,0)
(17,80,0)
(17,190,0)
(46,161,0)
(111,75,0)
(13,137,0)
(37,153,0)
(74,95,0)
(103,92,0)
(96,165,0)
(105,54,0)
(90,193,0)
(52,150,0)
(146,150,0)
(131,20,0)
(174,59,0)
(69,109,0)
(166,153,0)
(121,49,0)
(102,49,0)
(62,153,0)
(60,156,0)
(163,93,0)
(45,77,0)
(26,51,0)
(78,172,0)
(45,162,0)
(40,137,0)
(109,153,0)
(54,194,0)
(25,190,0)
(24,49,0)
(154,90,0)
(112,161,0)
(178,187,0)
(179,51,0)
(99,49,0)
(194,54,0)
(187,161,0)
(43,139,0)
(109,118,0)
(183,1,1)
(113,108,1)
(34,143,1)
(0,122,1)
(153,95,1)
(179,4,1)
(27,48,1)
(2,81,1)
(171,109,1)
(48,88,1)
(72,150,1)
(110,41,1)
(21,149,1)
(18,142,1)
(54,8,1)
(45,77,1)
(95,74,1)
(115,82,1)
(113,153,1)
(101,35,1)
(192,124,1)
(134,25,1)
(166,153,1)
(159,153,1)
(144,61,1)
(82,73,1)
(108,67,1)
(89,180,1)
(14,121,1)
(26,75,1)
(185,170,1)
(56,10,1)
(148,110,1)
(150,153,1)
(170,127,1)
(136,63,1)
(150,52,1)
(104,23,1)
(11,153,1)
(28,166,1)
(103,183,1)
(5,9,1)
(101,153,1)
(46,161,1)
(59,153,1)
(112,187,1)
(26,45,1)
(168,31,1)
(166,89,1)
(114,119,1)
(75,111,1)
(137,93,1)
(191,0,1)
(187,153,1)
(21,29,1)
(33,34,1)
(25,133,1)
(60,118,1)
(98,20,1)
(69,190,1)
(78,152,1)
(61,65,1)
(6,128,1)
(73,116,1)
(196,153,1)
(167,60,1)
(63,87,1)
(161,187,1)
(56,153,1)
(164,20,1)
(36,134,1)
(29,153,1)
(186,64,1)
(92,103,1)
(122,153,1)
(75,92,1)
(11,173,1)
(174,56,1)
(200,186,1)
(120,11,1)
(156,167,1)
(19,46,1)
(88,118,1)
(172,70,1)
(109,153,1)
(20,153,1)
(149,98,1)
(107,2,1)
(13,153,1)
(93,153,1)
(3,177,1)
(132,11,1)
(47,32,1)
(190,17,1)
(162,168,1)
(103,153,1)
(152,140,1)
(32,42,1)
(130,79,1)
(12,107,1)
(100,97,1)
(41,45,1)
(90,7,1)
(80,153,1)
(88,15,1)
(31,196,1)
(29,185,1)
(55,101,1)
(155,135,1)
(62,192,1)
(4,51,1)
(80,141,1)
(17,80,1)
(71,22,1)
(76,189,1)
(93,163,1)
(122,47,1)
(141,3,1)
(10,200,1)
(7,154,1)
(125,130,1)
(199,106,1)
(119,71,1)
(158,69,1)
(84,194,1)
(197,33,1)
(161,112,1)
(31,94,1)
(30,53,1)
(58,104,1)
(40,44,1)
(79,115,1)
(53,12,1)
(26,57,1)
(140,113,1)
(81,199,1)
(65,137,1)
(70,78,1)
(131,182,1)
(156,153,1)
(116,165,1)
(52,146,1)
(9,27,1)
(129,37,1)
(55,38,1)
(194,188,1)
(196,76,1)
(181,84,1)
(105,172,1)
(106,153,1)
(51,147,1)
(178,175,1)
(133,62,1)
(66,174,1)
(145,14,1)
(123,126,1)
(15,156,1)
(18,59,1)
(82,153,1)
(160,148,1)
(177,153,1)
(87,98,1)
(169,191,1)
(35,83,1)
(1,179,1)
(42,155,1)
(177,36,1)
(195,13,1)
(54,153,1)
(98,164,1)
(59,66,1)
(20,131,1)
(119,153,1)
(189,77,1)
(78,153,1)
(175,199,1)
(179,51,1)
(128,144,1)
(77,97,1)
(96,198,1)
(37,125,1)
(44,197,1)
(24,129,1)
(67,19,1)
(77,100,1)
(146,26,1)
(22,193,1)
(187,178,1)
(135,123,1)
(154,153,1)
(91,30,1)
(118,109,1)
(97,91,1)
(143,120,1)
(37,153,1)
(182,6,1)
(118,171,1)
(194,54,1)
(27,153,1)
(81,181,1)
(74,39,1)
(173,159,1)
(94,196,1)
(144,153,1)
(122,42,1)
(137,13,1)
(198,145,1)
(95,176,1)
(148,153,1)
(25,62,1)
(64,55,1)
(13,58,1)
(127,169,1)
(147,72,1)
(190,25,1)
(106,136,1)
(162,31,1)
(137,153,1)
(180,190,1)
(193,90,1)
(111,92,1)
(83,53,1)
(165,96,1)
(121,114,1)
(172,78,1)
(126,24,1)
(12,153,1)
(97,153,1)
(17,177,1)
(30,18,1)
(163,195,1)
(109,158,1)
(124,179,1)
(188,54,1)
(198,153,1)
(142,59,1)
(38,101,1)
(69,28,1)
(154,5,1)
(23,40,1)
(45,162,1)
(57,160,1)
(21,132,1)
(8,105,1)
(62,153,1)
(143,176,1)
(15,156,2)
(26,98,2)
(122,98,2)
(31,196,2)
(189,77,2)
(73,98,2)
(66,53,2)
(129,98,2)
(71,98,2)
(60,118,2)
(3,25,2)
(6,11,2)
(177,25,2)
(164,11,2)
(166,190,2)
(155,98,2)
(128,11,2)
(194,54,2)
(181,199,2)
(120,11,2)
(33,11,2)
(196,77,2)
(156,118,2)
(83,53,2)
(59,153,2)
(63,98,2)
(112,199,2)
(54,153,2)
(36,25,2)
(131,11,2)
(7,98,2)
(94,77,2)
(177,153,2)
(21,149,2)
(92,179,2)
(185,98,2)
(64,55,2)
(76,77,2)
(187,153,2)
(136,98,2)
(147,98,2)
(128,144,2)
(110,45,2)
(31,77,2)
(61,11,2)
(170,127,2)
(168,77,2)
(52,98,2)
(186,64,2)
(107,98,2)
(135,98,2)
(121,98,2)
(198,153,2)
(10,53,2)
(196,153,2)
(122,42,2)
(148,153,2)
(141,25,2)
(80,25,2)
(65,11,2)
(175,199,2)
(77,98,2)
(116,98,2)
(12,98,2)
(45,162,2)
(87,98,2)
(200,53,2)
(92,103,2)
(126,98,2)
(113,153,2)
(13,153,2)
(62,98,2)
(75,92,2)
(17,80,2)
(57,45,2)
(98,20,2)
(27,98,2)
(28,190,2)
(54,199,2)
(29,98,2)
(109,98,2)
(25,98,2)
(57,160,2)
(70,199,2)
(24,98,2)
(162,77,2)
(111,179,2)
(193,90,2)
(195,11,2)
(118,109,2)
(45,98,2)
(77,97,2)
(167,118,2)
(88,98,2)
(97,153,2)
(93,11,2)
(183,179,2)
(46,161,2)
(80,153,2)
(47,98,2)
(148,45,2)
(178,199,2)
(105,199,2)
(52,179,2)
(137,11,2)
(42,98,2)
(165,98,2)
(166,153,2)
(160,45,2)
(198,98,2)
(96,98,2)
(197,11,2)
(179,179,2)
(55,101,2)
(19,199,2)
(45,77,2)
(51,147,2)
(32,98,2)
(14,98,2)
(41,45,2)
(5,98,2)
(161,199,2)
(72,179,2)
(11,153,2)
(119,153,2)
(106,98,2)
(124,98,2)
(199,106,2)
(100,98,2)
(82,98,2)
(190,98,2)
(150,153,2)
(26,179,2)
(79,98,2)
(119,98,2)
(193,98,2)
(142,53,2)
(163,11,2)
(161,187,2)
(192,98,2)
(147,179,2)
(30,98,2)
(162,31,2)
(69,98,2)
(171,98,2)
(170,98,2)
(179,51,2)
(127,98,2)
(93,153,2)
(78,199,2)
(18,59,2)
(22,98,2)
(190,17,2)
(182,11,2)
(84,194,2)
(144,153,2)
(6,128,2)
(20,11,2)
(150,179,2)
(12,153,2)
(37,98,2)
(158,98,2)
(106,153,2)
(118,98,2)
(191,98,2)
(89,190,2)
(67,199,2)
(152,199,2)
(84,199,2)
(82,153,2)
(172,78,2)
(0,98,2)
(122,153,2)
(137,153,2)
(140,199,2)
(34,11,2)
(2,98,2)
(19,46,2)
(4,179,2)
(13,11,2)
(143,11,2)
(29,153,2)
(55,53,2)
(44,11,2)
(9,98,2)
(95,176,2)
(145,98,2)
(194,199,2)
(51,98,2)
(17,177,2)
(134,25,2)
(25,62,2)
(137,93,2)
(62,153,2)
(154,98,2)
(199,98,2)
(130,98,2)
(64,53,2)
(149,98,2)
(153,95,2)
(91,98,2)
(109,153,2)
(108,199,2)
(59,53,2)
(123,98,2)
(72,150,2)
(78,153,2)
(58,11,2)
(174,53,2)
(190,25,2)
(135,123,2)
(137,13,2)
(172,199,2)
(98,11,2)
(154,153,2)
(1,179,2)
(169,98,2)
(18,53,2)
(113,199,2)
(115,98,2)
(180,190,2)
(35,53,2)
(90,98,2)
(72,98,2)
(147,72,2)
(81,98,2)
(37,153,2)
(28,166,2)
(53,98,2)
(188,199,2)
(156,153,2)
(15,118,2)
(23,11,2)
(187,199,2)
(101,153,2)
(56,53,2)
(56,153,2)
(146,179,2)
(114,98,2)
(51,179,2)
(27,153,2)
(181,84,2)
(75,179,2)
(132,11,2)
(160,148,2)
(144,11,2)
(133,98,2)
(21,132,2)
(40,11,2)
(97,98,2)
(38,53,2)
(101,53,2)
(103,153,2)
(103,179,2)
(8,199,2)
(125,98,2)
(48,98,2)
(4,98,2)
(20,153,2)
(46,199,2)
(143,176,2)
(17,25,2)
(186,53,2)
(179,98,2)
(104,11,2)
(53,12,2)
(150,98,2)
(146,98,2)
-----------------------------------
(0,NReqsAllocated)
(1,req)
(2,req)
(3,req)
(4,NULL)
(5,cpdu)
(6,EP_THR_MUTEX_ASSERT_ISLOCKED(&req->mutex)
(7,NULL)
(8,chan)
(9,req)
(10,gcllist)
(11,req == NULL)
(12,req->flags)
(13,req->state)
(14,req)
(15,_gdp_pdu_free(req->cpdu)
(16,if (req->cpdu != NULL)
(17,req->rpdu != req->cpdu)
(18,req->flags &= ~GDP_REQ_ON_GCL_LIST)
(19,ep_thr_mutex_lock(&req->chan->mutex)
(20,req->state)
(21,RET)
(22,req)
(23,req)
(24,req->udata = NULL)
(25,req->rpdu != NULL)
(26,gev)
(27,req->rpdu)
(28,_gdp_pdu_free(req->rpdu)
(29,_gdp_req_unlock(req)
(30,req)
(31,req->gcl->refcnt)
(32,req)
(33,*reqp = NULL)
(34,NULL)
(35,gcl)
(36,rpdu)
(37,req->udata)
(38,mutex)
(39,req)
(40,"_gdp_req_free(%p)
(41,req)
(42,&ReqFreeList)
(43,gev)
(44,48)
(45,req->gcl != NULL && req->gcl->refcnt > 0)
(46,&req->chan->mutex)
(47,gcllist)
(48,rpdu)
(49,)
(50,if (req->rpdu != NULL && req->rpdu != req->cpdu)
(51,gev = STAILQ_FIRST(&req->events)
(52,events)
(53,EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags)
(54,req->chan)
(55,req->gcl->mutex)
(56,LIST_REMOVE(req, gcllist)
(57,_gdp_gcl_decref(&req->gcl)
(58,state)
(59,req->flags)
(60,req)
(61,mutex)
(62,req->rpdu)
(63,req)
(64,&req->gcl->mutex)
(65,req)
(66,flags)
(67,req)
(68,)
(69,req)
(70,~GDP_REQ_ON_CHAN_LIST)
(71,state)
(72,&req->events)
(73,md)
(74,reqp)
(75,STAILQ_REMOVE_HEAD(&req->events, queue)
(76,gcl)
(77,req->gcl != NULL)
(78,req->flags)
(79,req->md = NULL)
(80,req->cpdu)
(81,GDP_REQ_ON_GCL_LIST)
(82,req->md)
(83,req)
(84,&req->chan->mutex)
(85,)
(86,if (EP_UT_BITSET(GDP_REQ_ON_GCL_LIST, req->flags)
(87,GDP_REQ_ON_CHAN_LIST)
(88,req)
(89,rpdu)
(90,req->cpdu = NULL)
(91,gcl)
(92,&req->events)
(93,req->gcl)
(94,refcnt)
(95,*reqp)
(96,0)
(97,req->gcl)
(98,req->state == GDP_REQ_FREE)
(99,if (req->state == GDP_REQ_FREE)
(100,NULL)
(101,req->gcl)
(102,if (req->gcl != NULL && req->gcl->refcnt > 0)
(103,req->events)
(104,req)
(105,req)
(106,req->flags)
(107,flags)
(108,chanlist)
(109,req->cpdu)
(110,gcl)
(111,queue)
(112,mutex)
(113,LIST_REMOVE(req, chanlist)
(114,GDP_REQ_FREE)
(115,NULL)
(116,req)
(117,while ((gev = STAILQ_FIRST(&req->events)
(118,req->cpdu != NULL)
(119,req->state)
(120,reqp)
(121,req->state = GDP_REQ_FREE)
(122,LIST_INSERT_HEAD(&ReqFreeList, req, gcllist)
(123,&ReqFreeListMutex)
(124,req)
(125,udata)
(126,ReqFreeListMutex)
(127,&ReqFreeListMutex)
(128,&req->mutex)
(129,NULL)
(130,req)
(131,state)
(132,return;)
(133,NULL)
(134,req)
(135,ep_thr_mutex_lock(&ReqFreeListMutex)
(136,flags)
(137,ep_dbg_cprintf(Dbg, 48, "_gdp_req_free(%p)
(138,req)
(139,)
(140,req)
(141,cpdu)
(142,~GDP_REQ_ON_GCL_LIST)
(143,*reqp)
(144,req->mutex)
(145,flags)
(146,req)
(147,STAILQ_FIRST(&req->events)
(148,req->gcl)
(149,return;)
(150,req->events)
(151,)
(152,flags)
(153,*req = *reqp)
(154,req->cpdu)
(155,ReqFreeList)
(156,req->cpdu)
(157,if (EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags)
(158,cpdu)
(159,req)
(160,&req->gcl)
(161,req->chan->mutex)
(162,req->gcl->refcnt > 0)
(163,gcl)
(164,GDP_REQ_FREE)
(165,req->flags = 0)
(166,req->rpdu)
(167,cpdu)
(168,0)
(169,ReqFreeListMutex)
(170,ep_thr_mutex_unlock(&ReqFreeListMutex)
(171,NULL)
(172,req->flags &= ~GDP_REQ_ON_CHAN_LIST)
(173,NULL)
(174,req)
(175,req)
(176,gdp_req_t **reqp)
(177,req->rpdu)
(178,chan)
(179,(gev = STAILQ_FIRST(&req->events)
(180,req)
(181,ep_thr_mutex_unlock(&req->chan->mutex)
(182,req)
(183,events)
(184,if (req == NULL)
(185,req)
(186,EP_THR_MUTEX_ASSERT_ISLOCKED(&req->gcl->mutex)
(187,req->chan)
(188,mutex)
(189,req)
(190,req->rpdu != NULL && req->rpdu != req->cpdu)
(191,NReqsAllocated--)
(192,rpdu)
(193,req->rpdu = req->cpdu = NULL)
(194,req->chan->mutex)
(195,req)
(196,req->gcl)
(197,Dbg)
(198,req->flags)
(199,EP_UT_BITSET(GDP_REQ_ON_CHAN_LIST, req->flags)
(200,req)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^