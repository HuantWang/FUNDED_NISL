-----label-----
0
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Sink(int count)
{
    if(CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Global)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Validate count before using it as a parameter in the sleep function */
        if (count > 0 && count <= 2000)
        {
            SLEEP(count);
            printLine("Sleep time OK");
        }
        else
        {
            printLine("Sleep time too long");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
10,12
10,13
11,12
13,14
14,15
15,16
15,17
16,17
19,20
20,21
20,22
20,23
21,22
21,23
22,23
22,24
23,24
26,27
26,28
27,28
30,31
30,32
31,32
32,33
32,34
33,34
35,36
37,38
38,39
38,40
39,40
42,43
43,44
44,45
44,46
45,46
-----nextToken-----
2,4,6,8,12,17,18,24,25,28,29,34,36,40,41,46,47
-----computeFrom-----
21,22
21,23
22,23
22,24
26,27
26,28
-----guardedBy-----
28,36
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Sink(int count){    if(CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Global)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Sink(int count)
CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Sink
int count
int
count
count
{    if(CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Global)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }}
if(CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Global)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Global
CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Global
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Validate count before using it as a parameter in the sleep function */        if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }    }
if (count > 0 && count <= 2000)        {            SLEEP(count);            printLine("Sleep time OK");        }        else        {            printLine("Sleep time too long");        }
count > 0 && count <= 2000
count > 0
count
count
0
count <= 2000
count
count
2000
{            SLEEP(count);            printLine("Sleep time OK");        }
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time OK");
printLine("Sleep time OK")
printLine
printLine
"Sleep time OK"
{            printLine("Sleep time too long");        }
printLine("Sleep time too long");
printLine("Sleep time too long")
printLine
printLine
"Sleep time too long"
-----joern-----
(17,16,0)
(0,5,0)
(12,2,0)
(8,11,0)
(5,14,0)
(2,14,0)
(15,6,0)
(5,24,0)
(22,23,0)
(9,24,0)
(3,13,0)
(4,2,0)
(1,6,0)
(21,2,0)
(10,9,0)
(23,7,0)
(4,6,0)
(6,14,0)
(6,4,0)
(2,4,0)
(16,20,0)
(15,19,1)
(4,2,1)
(2,14,1)
(2,21,1)
(17,19,1)
(6,1,1)
(9,10,1)
(10,5,1)
(5,14,1)
(22,4,1)
(6,14,1)
(18,23,1)
(0,4,1)
(1,15,1)
(23,22,1)
(16,17,1)
(18,9,1)
(21,12,1)
(4,6,1)
(18,16,1)
(5,0,1)
(12,6,1)
(2,6,2)
(6,19,2)
(16,19,2)
(4,6,2)
(15,19,2)
(1,19,2)
(21,6,2)
(0,4,2)
(2,14,2)
(22,4,2)
(12,6,2)
(23,4,2)
(6,14,2)
(5,14,2)
(10,4,2)
(4,2,2)
(4,19,2)
(17,19,2)
(9,4,2)
(5,4,2)
-----------------------------------
(0,count)
(1,0)
(2,count <= 2000)
(3,if (count > 0 && count <= 2000)
(4,count > 0 && count <= 2000)
(5,SLEEP(count)
(6,count > 0)
(7,)
(8,if(CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Global)
(9,printLine("Sleep time OK")
(10,"Sleep time OK")
(11,)
(12,count)
(13,)
(14,int count)
(15,count)
(16,printLine("Benign, fixed string")
(17,"Benign, fixed string")
(18,RET)
(19,CWE400_Resource_Exhaustion__connect_socket_sleep_22_goodB2G1Global)
(20,)
(21,2000)
(22,"Sleep time too long")
(23,printLine("Sleep time too long")
(24,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^