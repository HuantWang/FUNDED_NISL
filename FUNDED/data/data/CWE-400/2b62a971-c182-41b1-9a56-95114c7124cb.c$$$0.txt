-----label-----
0
-----code-----
static void goodG2B2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(STATIC_CONST_FIVE==5)
    {
        /* FIX: Use a relatively small number for memory allocation */
        data = 20;
    }
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
25,26
28,29
28,30
29,30
29,31
30,31
33,34
34,35
34,36
35,36
36,37
36,38
38,39
38,40
41,42
41,43
41,44
42,43
42,44
43,44
45,46
45,47
46,47
48,49
50,51
50,52
50,53
50,54
50,55
51,52
52,53
52,54
53,54
55,56
55,57
56,57
56,58
58,59
60,61
60,62
61,62
63,64
63,65
64,65
66,67
67,68
67,69
70,71
70,72
71,72
71,73
72,73
74,75
76,77
77,78
78,79
78,80
79,80
81,82
83,84
84,85
84,86
84,87
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
101,102
103,104
104,105
105,106
105,107
106,107
-----nextToken-----
2,4,9,11,15,16,20,21,26,27,31,32,37,39,40,44,47,49,54,57,59,62,65,68,69,73,75,80,82,86,88,90,94,96,100,102,107,108
-----computeFrom-----
13,14
13,15
18,19
18,20
24,25
24,26
29,30
29,31
42,43
42,44
52,53
52,54
63,64
63,65
71,72
71,73
-----guardedBy-----
49,90
44,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
static void
goodG2B2()
goodG2B2
{    size_t data;    /* Initialize data */    data = 0;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(STATIC_CONST_FIVE==5)    {        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FIX: Use a relatively small number for memory allocation */        data = 20;    }
data = 20;
data = 20
data
data
20
if(STATIC_CONST_FIVE==5)    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(9,29,0)
(30,25,0)
(41,24,0)
(44,45,0)
(19,15,0)
(47,48,0)
(23,45,0)
(18,15,0)
(17,45,0)
(17,50,0)
(49,17,0)
(51,47,0)
(45,24,0)
(23,16,0)
(42,17,0)
(7,29,0)
(17,42,0)
(23,50,0)
(39,53,0)
(50,14,0)
(47,51,0)
(31,9,0)
(2,36,0)
(1,11,0)
(38,23,0)
(9,53,0)
(5,29,0)
(21,8,0)
(29,15,0)
(22,50,0)
(23,18,0)
(35,50,0)
(26,9,0)
(33,46,0)
(27,24,0)
(15,29,0)
(37,1,0)
(40,46,0)
(43,4,0)
(28,51,0)
(5,53,0)
(15,19,0)
(34,42,0)
(20,45,0)
(6,16,0)
(29,53,0)
(4,53,0)
(12,36,0)
(13,24,0)
(46,0,0)
(16,23,0)
(3,8,0)
(15,18,0)
(18,23,0)
(4,29,0)
(10,25,0)
(52,5,0)
(36,29,0)
(49,8,1)
(4,43,1)
(32,1,1)
(9,29,1)
(18,23,1)
(37,17,1)
(17,42,1)
(23,50,1)
(45,20,1)
(34,49,1)
(20,44,1)
(28,36,1)
(29,15,1)
(23,45,1)
(16,6,1)
(17,45,1)
(2,29,1)
(42,34,1)
(32,8,1)
(50,22,1)
(10,45,1)
(21,25,1)
(3,21,1)
(38,7,1)
(1,37,1)
(26,36,1)
(31,26,1)
(23,16,1)
(30,10,1)
(15,19,1)
(7,17,1)
(52,4,1)
(8,3,1)
(32,5,1)
(25,30,1)
(36,29,1)
(21,50,1)
(9,31,1)
(5,52,1)
(15,18,1)
(6,38,1)
(4,29,1)
(51,28,1)
(47,51,1)
(26,47,1)
(35,25,1)
(36,12,1)
(43,9,1)
(22,35,1)
(5,29,1)
(17,50,1)
(12,2,1)
(42,8,2)
(9,17,2)
(29,17,2)
(47,36,2)
(36,17,2)
(17,8,2)
(12,17,2)
(18,17,2)
(17,50,2)
(16,17,2)
(51,36,2)
(1,17,2)
(49,8,2)
(23,16,2)
(29,15,2)
(31,17,2)
(50,25,2)
(2,17,2)
(36,29,2)
(18,23,2)
(4,29,2)
(15,17,2)
(7,17,2)
(17,42,2)
(5,29,2)
(23,17,2)
(23,50,2)
(28,36,2)
(15,19,2)
(9,29,2)
(37,17,2)
(26,17,2)
(52,17,2)
(15,18,2)
(38,17,2)
(6,17,2)
(23,45,2)
(47,51,2)
(5,17,2)
(22,25,2)
(34,8,2)
(43,17,2)
(4,17,2)
(17,45,2)
(35,25,2)
-----------------------------------
(0,)
(1,printLine("Input is less than the length of the source string")
(2,myString)
(3,5)
(4,printWLine(myString)
(5,free(myString)
(6,wchar_t)
(7,myString)
(8,STATIC_CONST_FIVE==5)
(9,wcscpy(myString, HELLO_STRING)
(10,STATIC_CONST_FIVE)
(11,)
(12,NULL)
(13,if(STATIC_CONST_FIVE==5)
(14,)
(15,(wchar_t *)
(16,sizeof(wchar_t)
(17,data > wcslen(HELLO_STRING)
(18,malloc(data*sizeof(wchar_t)
(19,wchar_t *)
(20,0)
(21,STATIC_CONST_FIVE)
(22,20)
(23,data*sizeof(wchar_t)
(24,)
(25,STATIC_CONST_FIVE==5)
(26,myString)
(27,if(STATIC_CONST_FIVE==5)
(28,1)
(29,myString = (wchar_t *)
(30,5)
(31,HELLO_STRING)
(32,RET)
(33,if (data > wcslen(HELLO_STRING)
(34,HELLO_STRING)
(35,data)
(36,myString == NULL)
(37,"Input is less than the length of the source string")
(38,data)
(39,if (myString == NULL)
(40,myString)
(41,data)
(42,wcslen(HELLO_STRING)
(43,myString)
(44,data)
(45,data = 0)
(46,)
(47,exit(-1)
(48,)
(49,data)
(50,data = 20)
(51,-1)
(52,myString)
(53,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^