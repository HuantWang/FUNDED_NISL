-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    switch(6)
    {
    case 6:
    {
        char inputBuffer[CHAR_ARRAY_SIZE] = "";
        /* POTENTIAL FLAW: Read data from the console using fgets() */
        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)
        {
            /* Convert to unsigned int */
            data = strtoul(inputBuffer, NULL, 0);
        }
        else
        {
            printLine("fgets() failed.");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
    {
        wchar_t * myString;
        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
         * for the wcscpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > wcslen(HELLO_STRING) && data < 100)
        {
            myString = (wchar_t *)malloc(data*sizeof(wchar_t));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            wcscpy(myString, HELLO_STRING);
            printWLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string or too large");
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
19,21
19,22
19,23
19,24
19,25
20,21
22,23
22,24
23,24
24,25
24,26
26,27
26,28
26,29
28,29
29,30
31,32
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
40,41
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
51,53
51,54
51,55
52,53
54,55
56,57
59,60
60,61
61,62
61,63
62,63
67,68
68,69
68,70
69,70
73,74
73,75
75,76
75,77
75,78
75,79
75,80
75,81
76,77
78,79
78,80
79,80
80,81
80,82
82,83
82,84
85,86
85,87
85,88
86,87
86,88
87,88
87,89
88,89
90,91
90,92
91,92
93,94
95,96
95,97
96,97
99,100
99,101
99,102
99,103
99,104
100,101
101,102
101,103
102,103
104,105
104,106
105,106
105,107
107,108
109,110
109,111
110,111
112,113
112,114
113,114
115,116
116,117
116,118
119,120
119,121
120,121
120,122
121,122
123,124
125,126
126,127
127,128
127,129
128,129
130,131
132,133
133,134
133,135
133,136
134,135
136,137
138,139
140,141
141,142
141,143
142,143
144,145
146,147
147,148
147,149
148,149
150,151
152,153
153,154
154,155
154,156
155,156
160,161
161,162
161,163
162,163
-----nextToken-----
2,4,9,11,15,16,18,21,25,27,30,32,37,39,41,43,45,50,53,55,57,58,63,64,65,66,70,71,72,74,77,81,83,84,89,92,94,97,98,103,106,108,111,114,117,118,122,124,129,131,135,137,139,143,145,149,151,156,157,158,159,163,164,165
-----computeFrom-----
13,14
13,15
34,35
34,36
48,49
48,50
86,87
86,88
87,88
87,89
95,96
95,97
101,102
101,103
112,113
112,114
120,121
120,122
-----guardedBy-----
39,55
45,57
94,139
97,114
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
switch(6)    {    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        char inputBuffer[CHAR_ARRAY_SIZE] = "";        /* POTENTIAL FLAW: Read data from the console using fgets() */        if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }    }
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char inputBuffer[CHAR_ARRAY_SIZE] = "";
char
inputBuffer[CHAR_ARRAY_SIZE] = ""
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
= ""
""
if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL)        {            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }        else        {            printLine("fgets() failed.");        }
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin) != NULL
fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
fgets
fgets
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
stdin
stdin
NULL
NULL
{            /* Convert to unsigned int */            data = strtoul(inputBuffer, NULL, 0);        }
data = strtoul(inputBuffer, NULL, 0);
data = strtoul(inputBuffer, NULL, 0)
data
data
strtoul(inputBuffer, NULL, 0)
strtoul
strtoul
inputBuffer
inputBuffer
NULL
NULL
0
{            printLine("fgets() failed.");        }
printLine("fgets() failed.");
printLine("fgets() failed.")
printLine
printLine
"fgets() failed."
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:    {        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
{        wchar_t * myString;        /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough         * for the wcscpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }    }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING) && data < 100)        {            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string or too large");        }
data > wcslen(HELLO_STRING) && data < 100
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{            myString = (wchar_t *)malloc(data*sizeof(wchar_t));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            wcscpy(myString, HELLO_STRING);            printWLine(myString);            free(myString);        }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string or too large");        }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(38,23,0)
(32,35,0)
(53,57,0)
(24,45,0)
(79,82,0)
(23,69,0)
(12,58,0)
(19,45,0)
(21,57,0)
(82,69,0)
(56,48,0)
(15,21,0)
(83,79,0)
(39,57,0)
(16,19,0)
(46,9,0)
(5,58,0)
(1,21,0)
(58,12,0)
(72,69,0)
(3,24,0)
(50,61,0)
(81,19,0)
(56,57,0)
(64,39,0)
(31,65,0)
(36,82,0)
(4,78,0)
(76,45,0)
(62,25,0)
(17,68,0)
(36,4,0)
(54,66,0)
(82,36,0)
(34,17,0)
(39,48,0)
(18,56,0)
(57,4,0)
(37,71,0)
(6,7,0)
(10,46,0)
(71,49,0)
(40,23,0)
(11,19,0)
(22,19,0)
(63,24,0)
(82,22,0)
(12,13,0)
(19,22,0)
(33,66,0)
(73,45,0)
(26,24,0)
(27,68,0)
(82,79,0)
(4,36,0)
(60,7,0)
(67,61,0)
(2,44,0)
(29,65,0)
(23,33,0)
(23,38,0)
(33,23,0)
(75,48,0)
(66,69,0)
(69,61,0)
(35,57,0)
(4,57,0)
(80,66,0)
(22,20,0)
(25,68,0)
(30,65,0)
(14,38,0)
(45,25,0)
(28,68,0)
(77,68,0)
(42,35,0)
(43,63,0)
(74,82,0)
(44,65,0)
(24,63,0)
(35,48,0)
(23,22,0)
(59,61,0)
(57,48,0)
(66,33,0)
(55,65,0)
(8,24,0)
(47,68,0)
(78,4,0)
(7,65,0)
(0,22,0)
(84,25,0)
(66,22,0)
(41,69,0)
(2,70,1)
(34,52,1)
(22,19,1)
(18,39,1)
(40,70,1)
(35,42,1)
(39,57,1)
(54,80,1)
(56,18,1)
(23,38,1)
(81,0,1)
(36,82,1)
(76,52,1)
(56,57,1)
(19,11,1)
(28,17,1)
(4,78,1)
(80,23,1)
(33,23,1)
(46,10,1)
(37,33,1)
(1,57,1)
(15,1,1)
(66,54,1)
(21,57,1)
(32,21,1)
(16,81,1)
(39,64,1)
(43,24,1)
(11,16,1)
(23,22,1)
(83,74,1)
(14,40,1)
(19,45,1)
(79,83,1)
(26,3,1)
(3,45,1)
(24,8,1)
(57,4,1)
(24,45,1)
(47,46,1)
(52,69,1)
(63,43,1)
(64,35,1)
(5,21,1)
(23,69,1)
(21,15,1)
(51,29,1)
(82,79,1)
(0,63,1)
(29,56,1)
(82,69,1)
(42,32,1)
(44,2,1)
(53,33,1)
(12,58,1)
(70,28,1)
(66,69,1)
(4,36,1)
(33,66,1)
(82,22,1)
(29,71,1)
(51,55,1)
(47,22,1)
(73,76,1)
(72,41,1)
(63,24,1)
(58,5,1)
(71,37,1)
(45,73,1)
(8,26,1)
(17,34,1)
(10,63,1)
(70,47,1)
(32,12,1)
(35,57,1)
(55,44,1)
(66,22,1)
(69,72,1)
(38,14,1)
(74,53,1)
(12,58,2)
(53,33,2)
(34,52,2)
(33,23,2)
(21,57,2)
(8,52,2)
(80,23,2)
(36,33,2)
(63,24,2)
(45,52,2)
(81,63,2)
(43,52,2)
(23,22,2)
(54,23,2)
(10,63,2)
(3,52,2)
(16,63,2)
(73,52,2)
(57,33,2)
(56,33,2)
(11,63,2)
(83,33,2)
(71,33,2)
(82,33,2)
(2,70,2)
(66,69,2)
(19,63,2)
(57,4,2)
(46,63,2)
(47,52,2)
(23,70,2)
(35,33,2)
(15,33,2)
(66,23,2)
(26,52,2)
(33,70,2)
(76,52,2)
(36,82,2)
(55,70,2)
(5,21,2)
(58,21,2)
(4,36,2)
(42,33,2)
(63,52,2)
(14,70,2)
(22,19,2)
(23,38,2)
(18,33,2)
(37,33,2)
(24,52,2)
(82,22,2)
(33,66,2)
(4,33,2)
(40,70,2)
(1,33,2)
(82,69,2)
(66,22,2)
(64,33,2)
(56,57,2)
(74,33,2)
(28,52,2)
(35,57,2)
(44,70,2)
(79,33,2)
(17,52,2)
(4,78,2)
(0,63,2)
(12,21,2)
(21,33,2)
(39,33,2)
(39,57,2)
(23,69,2)
(22,63,2)
(82,79,2)
(29,70,2)
(19,45,2)
(38,70,2)
(32,33,2)
(24,45,2)
-----------------------------------
(0,data)
(1,myString)
(2,"Benign, fixed string")
(3,inputBuffer)
(4,(wchar_t *)
(5,1)
(6,myString)
(7,)
(8,stdin)
(9,)
(10,"fgets()
(11,0)
(12,exit(-1)
(13,)
(14,HELLO_STRING)
(15,NULL)
(16,NULL)
(17,printLine("Benign, fixed string")
(18,myString)
(19,strtoul(inputBuffer, NULL, 0)
(20,)
(21,myString == NULL)
(22,data = strtoul(inputBuffer, NULL, 0)
(23,data > wcslen(HELLO_STRING)
(24,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(25,)
(26,CHAR_ARRAY_SIZE)
(27,default:)
(28,break;)
(29,break;)
(30,default:)
(31,case 7:)
(32,myString)
(33,data > wcslen(HELLO_STRING)
(34,"Benign, fixed string")
(35,wcscpy(myString, HELLO_STRING)
(36,malloc(data*sizeof(wchar_t)
(37,"Input is less than the length of the source string or too large")
(38,wcslen(HELLO_STRING)
(39,printWLine(myString)
(40,data)
(41,data)
(42,HELLO_STRING)
(43,NULL)
(44,printLine("Benign, fixed string")
(45,inputBuffer[CHAR_ARRAY_SIZE] = "")
(46,printLine("fgets()
(47,break;)
(48,)
(49,)
(50,data)
(51,RET)
(52,6)
(53,myString)
(54,100)
(55,break;)
(56,free(myString)
(57,myString = (wchar_t *)
(58,-1)
(59,switch(7)
(60,if (data > wcslen(HELLO_STRING)
(61,)
(62,if (fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(63,fgets(inputBuffer, CHAR_ARRAY_SIZE, stdin)
(64,myString)
(65,)
(66,data < 100)
(67,switch(6)
(68,)
(69,data = 0)
(70,7)
(71,printLine("Input is less than the length of the source string or too large")
(72,0)
(73,"")
(74,data)
(75,if (myString == NULL)
(76,inputBuffer)
(77,case 6:)
(78,wchar_t *)
(79,sizeof(wchar_t)
(80,data)
(81,inputBuffer)
(82,data*sizeof(wchar_t)
(83,wchar_t)
(84,inputBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^