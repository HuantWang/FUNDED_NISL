-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_badSink(size_t dataArray[])
{
    /* copy data out of dataArray */
    size_t data = dataArray[2];
    {
        char * myString;
        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
         * for the strcpy() function to not cause a buffer overflow */
        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
        if (data > strlen(HELLO_STRING))
        {
            myString = (char *)malloc(data*sizeof(char));
            if (myString == NULL) {exit(-1);}
            /* Copy a small string into myString */
            strcpy(myString, HELLO_STRING);
            printLine(myString);
            free(myString);
        }
        else
        {
            printLine("Input is less than the length of the source string");
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
19,21
20,21
23,24
23,25
24,25
25,26
25,27
27,28
27,29
30,31
30,32
30,33
31,32
31,33
32,33
34,35
34,36
35,36
37,38
39,40
39,41
39,42
39,43
39,44
40,41
41,42
41,43
42,43
44,45
44,46
45,46
45,47
47,48
49,50
49,51
50,51
52,53
52,54
53,54
55,56
56,57
56,58
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
-----nextToken-----
2,4,7,9,10,15,17,21,22,26,28,29,33,36,38,43,46,48,51,54,57,58,62,64,69,71,75,77,79,83,85,89,91,96,97
-----computeFrom-----
31,32
31,33
41,42
41,43
52,53
52,54
60,61
60,62
-----guardedBy-----
38,79
33,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_badSink(size_t dataArray[]){    /* copy data out of dataArray */    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_badSink(size_t dataArray[])
CWE789_Uncontrolled_Mem_Alloc__malloc_char_fscanf_66b_badSink
size_t dataArray[]
size_t
size_t
dataArray[]
dataArray
[]
{    /* copy data out of dataArray */    size_t data = dataArray[2];    {        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }}
size_t data = dataArray[2];
size_t data = dataArray[2];
size_t
size_t
data = dataArray[2]
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
{        char * myString;        /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough         * for the strcpy() function to not cause a buffer overflow */        /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */        if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }    }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))        {            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }        else        {            printLine("Input is less than the length of the source string");        }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{            myString = (char *)malloc(data*sizeof(char));            if (myString == NULL) {exit(-1);}            /* Copy a small string into myString */            strcpy(myString, HELLO_STRING);            printLine(myString);            free(myString);        }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{            printLine("Input is less than the length of the source string");        }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(26,41,0)
(39,38,0)
(36,31,0)
(2,26,0)
(6,27,0)
(0,33,0)
(4,26,0)
(12,14,0)
(32,37,0)
(13,5,0)
(19,8,0)
(40,28,0)
(38,43,0)
(3,41,0)
(35,15,0)
(42,22,0)
(19,22,0)
(41,40,0)
(7,31,0)
(20,37,0)
(40,21,0)
(28,40,0)
(5,24,0)
(38,41,0)
(18,24,0)
(27,25,0)
(29,10,0)
(27,5,0)
(30,12,0)
(11,35,0)
(34,35,0)
(9,43,0)
(40,41,0)
(33,41,0)
(17,14,0)
(37,41,0)
(21,40,0)
(1,29,0)
(21,27,0)
(12,5,0)
(27,21,0)
(26,43,0)
(22,19,0)
(35,5,0)
(23,25,0)
(41,43,0)
(14,12,0)
(31,24,0)
(5,35,0)
(33,43,0)
(25,27,0)
(34,13,1)
(20,41,1)
(16,38,1)
(21,27,1)
(30,5,1)
(1,12,1)
(38,41,1)
(33,41,1)
(14,17,1)
(37,32,1)
(35,15,1)
(38,39,1)
(16,29,1)
(2,19,1)
(27,25,1)
(25,23,1)
(23,6,1)
(40,21,1)
(26,41,1)
(33,0,1)
(12,14,1)
(2,37,1)
(37,41,1)
(4,2,1)
(41,40,1)
(40,28,1)
(35,11,1)
(39,33,1)
(22,42,1)
(5,35,1)
(19,22,1)
(11,34,1)
(32,20,1)
(3,12,1)
(0,26,1)
(29,1,1)
(6,3,1)
(26,4,1)
(42,37,1)
(12,5,1)
(17,30,1)
(27,5,1)
(38,41,2)
(4,12,2)
(2,12,2)
(19,37,2)
(5,35,2)
(41,40,2)
(37,41,2)
(6,12,2)
(41,12,2)
(23,12,2)
(26,41,2)
(42,37,2)
(27,25,2)
(40,28,2)
(26,12,2)
(27,5,2)
(38,12,2)
(0,12,2)
(29,12,2)
(37,12,2)
(21,27,2)
(33,41,2)
(25,12,2)
(35,15,2)
(21,12,2)
(40,21,2)
(3,12,2)
(20,12,2)
(22,37,2)
(40,12,2)
(33,12,2)
(27,12,2)
(19,22,2)
(1,12,2)
(32,12,2)
(12,14,2)
(39,12,2)
(12,5,2)
-----------------------------------
(0,myString)
(1,"Input is less than the length of the source string")
(2,myString)
(3,myString)
(4,HELLO_STRING)
(5,data = dataArray[2])
(6,data)
(7,if (data > strlen(HELLO_STRING)
(8,)
(9,if (myString == NULL)
(10,)
(11,2)
(12,data > strlen(HELLO_STRING)
(13,data)
(14,strlen(HELLO_STRING)
(15,size_t dataArray[])
(16,RET)
(17,HELLO_STRING)
(18,data)
(19,exit(-1)
(20,myString)
(21,malloc(data*sizeof(char)
(22,-1)
(23,char)
(24,)
(25,sizeof(char)
(26,strcpy(myString, HELLO_STRING)
(27,data*sizeof(char)
(28,char *)
(29,printLine("Input is less than the length of the source string")
(30,data)
(31,)
(32,NULL)
(33,printLine(myString)
(34,dataArray)
(35,dataArray[2])
(36,myString)
(37,myString == NULL)
(38,free(myString)
(39,myString)
(40,(char *)
(41,myString = (char *)
(42,1)
(43,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^