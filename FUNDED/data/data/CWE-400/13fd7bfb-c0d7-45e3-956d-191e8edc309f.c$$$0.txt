-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_fwrite_34_bad()
{
    int count;
    CWE400_Resource_Exhaustion__rand_fwrite_34_unionType myUnion;
    /* Initialize count */
    count = -1;
    /* POTENTIAL FLAW: Set count to a random value */
    count = RAND32();
    myUnion.unionFirst = count;
    {
        int count = myUnion.unionSecond;
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
28,29
30,31
31,32
31,33
32,33
32,34
33,34
36,37
38,39
38,40
39,40
40,41
40,42
42,43
42,44
44,45
45,46
45,47
46,47
49,50
49,51
49,52
49,53
49,54
49,55
49,56
50,51
51,52
51,53
52,53
54,55
54,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
62,65
65,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
74,75
76,77
77,78
77,79
78,79
80,81
80,82
80,83
81,82
83,84
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
95,96
98,99
98,100
98,101
98,102
99,100
100,101
100,102
101,102
104,105
104,106
105,106
107,108
107,109
108,109
108,110
109,110
112,113
114,115
115,116
117,118
118,119
118,120
119,120
119,121
120,121
120,122
121,122
123,124
125,126
125,127
125,128
125,129
125,130
126,127
128,129
130,131
131,132
131,133
134,135
134,136
135,136
137,138
139,140
141,142
142,143
143,144
143,145
144,145
147,148
147,149
148,149
150,151
151,152
152,153
152,154
153,154
155,156
-----nextToken-----
2,4,8,10,14,16,20,22,26,29,34,35,37,41,43,47,48,53,55,57,61,63,64,67,70,72,73,75,79,82,84,85,89,91,96,97,102,103,106,110,111,113,116,122,124,127,129,132,133,136,138,140,145,146,149,154,156
-----computeFrom-----
18,19
18,20
24,25
24,26
31,32
31,33
77,78
77,79
87,88
87,89
100,101
100,102
104,105
104,106
119,120
119,121
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_fwrite_34_bad(){    int count;    CWE400_Resource_Exhaustion__rand_fwrite_34_unionType myUnion;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Set count to a random value */    count = RAND32();    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__rand_fwrite_34_bad()
CWE400_Resource_Exhaustion__rand_fwrite_34_bad
{    int count;    CWE400_Resource_Exhaustion__rand_fwrite_34_unionType myUnion;    /* Initialize count */    count = -1;    /* POTENTIAL FLAW: Set count to a random value */    count = RAND32();    myUnion.unionFirst = count;    {        int count = myUnion.unionSecond;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
CWE400_Resource_Exhaustion__rand_fwrite_34_unionType myUnion;
CWE400_Resource_Exhaustion__rand_fwrite_34_unionType myUnion;
CWE400_Resource_Exhaustion__rand_fwrite_34_unionType
CWE400_Resource_Exhaustion__rand_fwrite_34_unionType
myUnion
myUnion
count = -1;
count = -1
count
count
-1
1
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
myUnion.unionFirst = count;
myUnion.unionFirst = count
myUnion.unionFirst
myUnion
myUnion
unionFirst
count
count
{        int count = myUnion.unionSecond;        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
int count = myUnion.unionSecond;
int count = myUnion.unionSecond;
int
count = myUnion.unionSecond
count
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(50,33,0)
(27,34,0)
(32,73,0)
(40,38,0)
(60,20,0)
(33,70,0)
(29,14,0)
(21,27,0)
(68,63,0)
(56,60,0)
(70,34,0)
(53,40,0)
(44,33,0)
(38,29,0)
(3,33,0)
(71,24,0)
(48,36,0)
(1,19,0)
(4,48,0)
(11,27,0)
(10,33,0)
(31,36,0)
(46,60,0)
(63,33,0)
(5,29,0)
(38,40,0)
(43,36,0)
(64,39,0)
(27,21,0)
(72,77,0)
(49,15,0)
(45,14,0)
(16,33,0)
(66,17,0)
(74,25,0)
(59,51,0)
(32,70,0)
(76,73,0)
(15,29,0)
(26,74,0)
(69,7,0)
(41,21,0)
(48,77,0)
(57,71,0)
(18,29,0)
(6,54,0)
(77,33,0)
(78,70,0)
(75,42,0)
(73,32,0)
(47,37,0)
(9,46,0)
(37,71,0)
(58,32,0)
(52,42,0)
(46,19,0)
(67,63,0)
(54,19,0)
(39,33,0)
(29,38,0)
(8,77,0)
(71,34,0)
(13,34,0)
(30,69,0)
(65,48,0)
(77,48,0)
(29,15,0)
(2,34,0)
(60,46,0)
(60,32,0)
(37,34,0)
(61,33,0)
(42,37,0)
(22,17,0)
(17,77,0)
(12,39,0)
(28,19,0)
(23,73,0)
(29,77,0)
(24,71,0)
(62,72,0)
(14,29,0)
(20,60,0)
(72,0,0)
(36,33,0)
(29,15,1)
(52,71,1)
(67,68,1)
(21,41,1)
(8,36,1)
(45,15,1)
(66,77,1)
(9,19,1)
(56,9,1)
(46,19,1)
(18,14,1)
(49,5,1)
(37,71,1)
(6,38,1)
(32,73,1)
(28,74,1)
(64,63,1)
(58,37,1)
(60,56,1)
(36,31,1)
(31,43,1)
(63,67,1)
(4,8,1)
(74,26,1)
(76,23,1)
(28,17,1)
(12,64,1)
(29,18,1)
(1,28,1)
(22,66,1)
(15,49,1)
(5,40,1)
(30,38,1)
(35,72,1)
(6,69,1)
(38,40,1)
(57,27,1)
(42,75,1)
(17,22,1)
(26,17,1)
(77,48,1)
(68,32,1)
(72,62,1)
(46,60,1)
(17,77,1)
(73,76,1)
(72,77,1)
(35,55,1)
(14,45,1)
(48,65,1)
(37,47,1)
(40,53,1)
(60,32,1)
(69,30,1)
(38,29,1)
(65,4,1)
(48,36,1)
(43,39,1)
(24,57,1)
(19,1,1)
(9,54,1)
(54,6,1)
(53,46,1)
(71,24,1)
(75,52,1)
(54,19,1)
(62,55,1)
(47,42,1)
(39,12,1)
(29,77,1)
(23,58,1)
(27,21,1)
(60,20,1)
(29,14,1)
(41,11,1)
(55,46,1)
(37,71,2)
(60,46,2)
(14,46,2)
(5,46,2)
(15,46,2)
(29,46,2)
(32,73,2)
(53,46,2)
(29,14,2)
(56,46,2)
(54,46,2)
(71,24,2)
(72,55,2)
(49,46,2)
(69,38,2)
(38,40,2)
(77,48,2)
(46,46,2)
(54,19,2)
(6,46,2)
(18,46,2)
(62,55,2)
(26,17,2)
(48,36,2)
(29,15,2)
(60,32,2)
(29,77,2)
(46,19,2)
(17,77,2)
(38,29,2)
(27,21,2)
(40,46,2)
(38,46,2)
(30,38,2)
(74,17,2)
(45,46,2)
(60,20,2)
(46,60,2)
(72,77,2)
(9,46,2)
-----------------------------------
(0,)
(1,0)
(2,count)
(3,if (pFile == NULL)
(4,filename)
(5,SENTENCE)
(6,i)
(7,)
(8,pFile)
(9,i)
(10,i)
(11,count)
(12,NULL)
(13,myUnion)
(14,strlen(SENTENCE)
(15,sizeof(char)
(16,if (pFile)
(17,pFile == NULL)
(18,pFile)
(19,i = 0)
(20,size_t)
(21,-1)
(22,NULL)
(23,myUnion)
(24,RAND32()
(25,)
(26,1)
(27,count = -1)
(28,i)
(29,fwrite(SENTENCE, sizeof(char)
(30,1)
(31,"output_bad.txt")
(32,count = myUnion.unionSecond)
(33,)
(34,)
(35,RET)
(36,*filename = "output_bad.txt")
(37,myUnion.unionFirst = count)
(38,strlen(SENTENCE)
(39,*pFile = NULL)
(40,strlen(SENTENCE)
(41,1)
(42,myUnion.unionFirst)
(43,filename)
(44,for (i = 0; i < (size_t)
(45,SENTENCE)
(46,i < (size_t)
(47,count)
(48,fopen(filename, "w+")
(49,char)
(50,pFile)
(51,)
(52,myUnion)
(53,SENTENCE)
(54,i++)
(55,pFile)
(56,count)
(57,count)
(58,count)
(59,if (strlen(SENTENCE)
(60,(size_t)
(61,filename)
(62,pFile)
(63,i = 0)
(64,pFile)
(65,"w+")
(66,pFile)
(67,0)
(68,i)
(69,exit(1)
(70,)
(71,count = RAND32()
(72,fclose(pFile)
(73,myUnion.unionSecond)
(74,exit(1)
(75,unionFirst)
(76,unionSecond)
(77,pFile = fopen(filename, "w+")
(78,count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^