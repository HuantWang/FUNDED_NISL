-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_11_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(globalReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
38,39
39,40
39,41
40,41
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
58,60
59,60
59,61
60,61
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
74,75
75,76
75,77
76,77
78,79
78,80
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
89,90
89,91
90,91
91,92
93,94
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,37,41,42,46,48,53,55,61,62,63,64,70,71,72,73,77,81,83,87,88,92,94
-----computeFrom-----
14,15
14,16
25,26
25,27
44,45
44,46
57,58
57,59
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_11_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_11_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_11_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(globalReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(6,33,0)
(8,44,0)
(17,41,0)
(21,16,0)
(23,40,0)
(45,13,0)
(7,31,0)
(29,3,0)
(15,31,0)
(28,24,0)
(13,41,0)
(4,15,0)
(35,17,0)
(46,40,0)
(24,28,0)
(30,41,0)
(29,22,0)
(28,7,0)
(3,29,0)
(20,8,0)
(33,6,0)
(48,28,0)
(24,41,0)
(39,36,0)
(34,7,0)
(41,17,0)
(43,31,0)
(11,46,0)
(40,15,0)
(6,16,0)
(17,35,0)
(18,24,0)
(45,8,0)
(42,13,0)
(38,36,0)
(17,16,0)
(5,13,0)
(2,36,0)
(32,46,0)
(8,20,0)
(13,45,0)
(19,24,0)
(8,45,0)
(40,46,0)
(46,41,0)
(14,2,0)
(41,31,0)
(0,2,0)
(12,41,0)
(47,30,0)
(9,30,0)
(1,36,0)
(44,31,0)
(16,17,0)
(16,6,0)
(10,3,0)
(44,8,0)
(40,46,1)
(40,23,1)
(8,45,1)
(21,12,1)
(47,9,1)
(6,21,1)
(24,18,1)
(18,19,1)
(2,14,1)
(7,34,1)
(28,48,1)
(41,17,1)
(8,20,1)
(26,44,1)
(45,13,1)
(13,42,1)
(32,30,1)
(19,15,1)
(28,24,1)
(13,41,1)
(48,24,1)
(17,35,1)
(30,41,1)
(9,41,1)
(6,33,1)
(24,41,1)
(27,2,1)
(3,10,1)
(42,5,1)
(16,6,1)
(23,46,1)
(15,4,1)
(26,27,1)
(14,0,1)
(10,30,1)
(4,40,1)
(44,8,1)
(17,16,1)
(46,11,1)
(30,47,1)
(5,7,1)
(46,41,1)
(32,29,1)
(29,3,1)
(11,32,1)
(12,27,1)
(34,28,1)
(25,26,1)
(17,35,2)
(16,6,2)
(42,27,2)
(24,41,2)
(18,27,2)
(11,27,2)
(28,24,2)
(30,27,2)
(40,27,2)
(44,27,2)
(45,13,2)
(5,27,2)
(44,8,2)
(41,27,2)
(17,27,2)
(16,27,2)
(8,27,2)
(19,27,2)
(12,27,2)
(29,30,2)
(40,46,2)
(24,27,2)
(15,27,2)
(8,45,2)
(45,27,2)
(47,27,2)
(7,27,2)
(46,41,2)
(28,27,2)
(10,30,2)
(23,27,2)
(41,17,2)
(13,41,2)
(13,27,2)
(4,27,2)
(6,33,2)
(8,20,2)
(29,3,2)
(48,27,2)
(21,27,2)
(6,27,2)
(46,27,2)
(30,41,2)
(32,27,2)
(34,27,2)
(9,27,2)
(3,30,2)
(17,16,2)
-----------------------------------
(0,data)
(1,if(globalReturnsTrue()
(2,data = NULL)
(3,-1)
(4,0)
(5,data)
(6,sizeof(struct _twoIntsStruct)
(7,data[0].intTwo = 0)
(8,(twoIntsStruct *)
(9,data)
(10,1)
(11,0)
(12,data)
(13,data[0])
(14,NULL)
(15,data[0].intOne = 0)
(16,calloc(100, sizeof(struct _twoIntsStruct)
(17,(struct _twoIntsStruct *)
(18,0)
(19,data)
(20,twoIntsStruct *)
(21,100)
(22,)
(23,intOne)
(24,data[0])
(25,RET)
(26,globalReturnsTrue()
(27,globalReturnsTrue()
(28,data[0].intTwo)
(29,exit(-1)
(30,data == NULL)
(31,)
(32,data)
(33,struct _twoIntsStruct)
(34,0)
(35,struct _twoIntsStruct *)
(36,)
(37, sizeof(struct _twoIntsStruct)
(38,data)
(39,if(globalReturnsTrue()
(40,data[0].intOne)
(41,data = (struct _twoIntsStruct *)
(42,0)
(43,if (data == NULL)
(44,printStructLine((twoIntsStruct *)
(45,&data[0])
(46,data[0])
(47,NULL)
(48,intTwo)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^