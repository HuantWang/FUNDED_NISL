-----label-----
1
-----code-----
void CWE401_Memory_Leak__char_realloc_08_bad()
{
    char * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (char *)realloc(data, 100*sizeof(char));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
20,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
35,36
37,38
37,39
39,40
40,41
40,42
43,44
43,45
44,45
44,46
45,46
47,48
49,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
57,60
58,59
60,61
63,64
64,65
64,66
65,66
67,68
69,70
69,71
70,71
71,72
73,74
-----nextToken-----
2,4,8,10,11,15,17,21,26,29,31,34,36,38,41,42,46,48,53,55,59,61,62,66,68,72,74
-----computeFrom-----
13,14
13,15
24,25
24,26
37,38
37,39
44,45
44,46
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__char_realloc_08_bad(){    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__char_realloc_08_bad()
CWE401_Memory_Leak__char_realloc_08_bad
{    char * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (char *)realloc(data, 100*sizeof(char));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)realloc(data, 100*sizeof(char));
data = (char *)realloc(data, 100*sizeof(char))
data
data
(char *)realloc(data, 100*sizeof(char))
char *
char
*
*
realloc(data, 100*sizeof(char))
realloc
realloc
data
data
100*sizeof(char)
100
sizeof(char)
char
char

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(12,19,0)
(13,31,0)
(14,31,0)
(1,6,0)
(15,8,0)
(23,20,0)
(5,19,0)
(30,17,0)
(17,30,0)
(27,1,0)
(2,3,0)
(29,8,0)
(33,7,0)
(3,6,0)
(31,3,0)
(4,32,0)
(10,4,0)
(4,10,0)
(2,6,0)
(7,23,0)
(23,7,0)
(21,1,0)
(22,8,0)
(32,4,0)
(19,8,0)
(4,3,0)
(32,19,0)
(9,2,0)
(16,3,0)
(24,6,0)
(26,30,0)
(1,3,0)
(32,30,0)
(3,4,0)
(18,32,0)
(30,32,0)
(11,17,0)
(1,3,1)
(3,4,1)
(9,1,1)
(13,14,1)
(16,28,1)
(32,19,1)
(14,3,1)
(7,33,1)
(28,19,1)
(27,21,1)
(4,32,1)
(25,0,1)
(19,12,1)
(0,2,1)
(17,11,1)
(21,31,1)
(0,28,1)
(21,23,1)
(30,17,1)
(1,27,1)
(32,30,1)
(11,26,1)
(31,3,1)
(31,13,1)
(26,18,1)
(18,16,1)
(4,10,1)
(2,9,1)
(2,3,1)
(12,5,1)
(33,31,1)
(23,7,1)
(13,28,2)
(2,3,2)
(4,10,2)
(31,3,2)
(26,28,2)
(33,31,2)
(3,28,2)
(11,28,2)
(32,19,2)
(2,28,2)
(27,28,2)
(14,28,2)
(9,28,2)
(7,31,2)
(23,7,2)
(1,3,2)
(18,28,2)
(16,28,2)
(17,28,2)
(1,28,2)
(30,28,2)
(3,4,2)
(32,28,2)
(4,32,2)
(32,30,2)
(30,17,2)
(31,28,2)
(23,31,2)
(4,28,2)
(21,28,2)
-----------------------------------
(0,staticReturnsTrue()
(1,strcpy(data, "A String")
(2,printLine(data)
(3,data = (char *)
(4,(char *)
(5,data)
(6,)
(7,-1)
(8,)
(9,data)
(10,char *)
(11,char)
(12,NULL)
(13,NULL)
(14,data)
(15,if(staticReturnsTrue()
(16,data)
(17,sizeof(char)
(18,data)
(19,data = NULL)
(20,)
(21,data)
(22,data)
(23,exit(-1)
(24,if (data == NULL)
(25,RET)
(26,100)
(27,"A String")
(28,staticReturnsTrue()
(29,if(staticReturnsTrue()
(30,100*sizeof(char)
(31,data == NULL)
(32,realloc(data, 100*sizeof(char)
(33,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^