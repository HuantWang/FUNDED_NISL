-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_15_bad()
{
    switch(6)
    {
    case 6:
    {
        int * data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (int *)realloc(data, (130000)*sizeof(int));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            data[0] = 10;
            printIntLine(data[0]);
            free(data);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
8,10
8,11
8,12
8,13
8,14
9,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
20,22
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
33,34
33,35
34,35
34,36
35,36
37,38
39,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
48,49
48,50
49,50
53,54
54,55
54,56
55,56
57,58
57,59
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
68,69
70,71
70,72
70,73
71,72
73,74
75,76
75,77
76,77
78,79
79,80
79,81
82,83
82,84
83,84
83,85
84,85
86,87
88,89
88,90
88,91
89,90
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
100,101
100,102
101,102
104,105
105,106
105,107
106,107
108,109
112,113
113,114
113,115
114,115
-----nextToken-----
2,4,7,10,14,16,17,21,23,26,28,31,32,36,38,43,45,50,51,52,56,59,60,64,67,69,72,74,77,80,81,85,87,93,94,95,99,102,103,107,109,110,111,115,116,117
-----computeFrom-----
27,28
27,29
34,35
34,36
47,48
47,49
62,63
62,64
75,76
75,77
83,84
83,85
90,91
90,92
-----guardedBy-----
85,109
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_15_bad(){    switch(6)    {    case 6:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__malloc_realloc_int_15_bad()
CWE401_Memory_Leak__malloc_realloc_int_15_bad
{    switch(6)    {    case 6:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
switch(6)    {    case 6:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(52,14,0)
(49,18,0)
(30,0,0)
(4,34,0)
(8,32,0)
(24,38,0)
(28,60,0)
(1,37,0)
(40,12,0)
(53,57,0)
(25,26,0)
(29,60,0)
(15,0,0)
(54,39,0)
(44,11,0)
(32,26,0)
(5,14,0)
(54,48,0)
(64,57,0)
(51,14,0)
(37,2,0)
(2,14,0)
(9,21,0)
(58,54,0)
(48,12,0)
(25,2,0)
(10,59,0)
(38,0,0)
(17,62,0)
(32,2,0)
(47,11,0)
(30,42,0)
(59,10,0)
(41,37,0)
(21,61,0)
(61,21,0)
(11,47,0)
(0,14,0)
(54,26,0)
(6,26,0)
(21,43,0)
(35,25,0)
(33,54,0)
(63,61,0)
(2,59,0)
(20,38,0)
(27,48,0)
(55,32,0)
(45,62,0)
(13,25,0)
(43,21,0)
(23,32,0)
(3,59,0)
(40,0,0)
(59,2,0)
(61,2,0)
(62,17,0)
(54,0,0)
(10,17,0)
(42,30,0)
(34,57,0)
(38,48,0)
(46,17,0)
(22,57,0)
(17,10,0)
(39,54,0)
(7,43,0)
(26,14,0)
(47,31,0)
(36,57,0)
(19,40,0)
(23,14,0)
(56,2,0)
(30,61,0)
(39,12,0)
(60,0,0)
(0,30,0)
(14,57,0)
(32,23,0)
(61,30,0)
(59,3,0)
(25,13,1)
(54,48,1)
(37,2,1)
(11,44,1)
(53,34,1)
(25,2,1)
(59,10,1)
(62,45,1)
(15,23,1)
(16,22,1)
(39,54,1)
(19,39,1)
(8,26,1)
(24,20,1)
(21,43,1)
(26,6,1)
(34,4,1)
(28,29,1)
(27,38,1)
(22,40,1)
(58,48,1)
(35,47,1)
(32,2,1)
(45,46,1)
(48,27,1)
(0,30,1)
(54,33,1)
(32,55,1)
(61,2,1)
(7,9,1)
(61,21,1)
(17,62,1)
(6,25,1)
(40,19,1)
(40,0,1)
(35,37,1)
(23,32,1)
(55,8,1)
(30,61,1)
(38,24,1)
(54,26,1)
(44,37,1)
(22,60,1)
(10,17,1)
(60,0,1)
(63,15,1)
(9,63,1)
(33,58,1)
(1,41,1)
(32,26,1)
(29,0,1)
(4,50,1)
(60,28,1)
(38,0,1)
(2,59,1)
(30,42,1)
(56,50,1)
(20,60,1)
(16,53,1)
(41,2,1)
(47,11,1)
(54,0,1)
(46,56,1)
(43,7,1)
(13,35,1)
(37,1,1)
(59,3,1)
(45,50,2)
(26,50,2)
(41,50,2)
(1,50,2)
(38,60,2)
(37,2,2)
(34,50,2)
(22,50,2)
(63,50,2)
(61,21,2)
(61,2,2)
(0,50,2)
(47,37,2)
(54,0,2)
(7,50,2)
(55,50,2)
(33,60,2)
(11,37,2)
(4,50,2)
(60,50,2)
(23,32,2)
(17,62,2)
(43,50,2)
(40,0,2)
(28,50,2)
(44,37,2)
(62,50,2)
(38,0,2)
(17,50,2)
(39,54,2)
(61,50,2)
(30,42,2)
(40,60,2)
(25,2,2)
(48,60,2)
(21,43,2)
(27,60,2)
(32,26,2)
(37,50,2)
(2,50,2)
(46,50,2)
(60,0,2)
(19,60,2)
(13,50,2)
(23,50,2)
(58,60,2)
(54,26,2)
(29,50,2)
(6,50,2)
(39,60,2)
(25,50,2)
(59,10,2)
(32,50,2)
(59,50,2)
(35,50,2)
(30,50,2)
(32,2,2)
(59,3,2)
(53,50,2)
(20,60,2)
(15,50,2)
(54,48,2)
(30,61,2)
(47,11,2)
(0,30,2)
(54,60,2)
(24,60,2)
(10,17,2)
(21,50,2)
(10,50,2)
(2,59,2)
(56,50,2)
(9,50,2)
(8,50,2)
-----------------------------------
(0,data = (int *)
(1,NULL)
(2,* data = (int *)
(3,int *)
(4,"Benign, fixed string")
(5,data)
(6,5)
(7,int)
(8,data)
(9,130000)
(10,malloc(100*sizeof(int)
(11,-1)
(12,)
(13,0)
(14,)
(15,data)
(16,RET)
(17,100*sizeof(int)
(18,)
(19,data)
(20,data)
(21,(130000)
(22,break;)
(23,printIntLine(data[0])
(24,0)
(25,data[0])
(26,data[0] = 5)
(27,10)
(28,NULL)
(29,data)
(30,(int *)
(31,)
(32,data[0])
(33,0)
(34,printLine("Benign, fixed string")
(35,data)
(36,default:)
(37,data == NULL)
(38,data[0])
(39,printIntLine(data[0])
(40,free(data)
(41,data)
(42,int *)
(43,sizeof(int)
(44,1)
(45,int)
(46,100)
(47,exit(-1)
(48,data[0] = 10)
(49,switch(6)
(50,6)
(51,if (data == NULL)
(52,if (data != NULL)
(53,break;)
(54,data[0])
(55,0)
(56,data)
(57,)
(58,data)
(59,(int *)
(60,data != NULL)
(61,realloc(data, (130000)
(62,sizeof(int)
(63,data)
(64,case 6:)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^