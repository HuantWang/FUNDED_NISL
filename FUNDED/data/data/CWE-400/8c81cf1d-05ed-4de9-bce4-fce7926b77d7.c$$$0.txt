-----label-----
1
-----code-----
void CWE401_Memory_Leak__strdup_char_66b_badSink(char * dataArray[])
{
    /* copy data out of dataArray */
    char * data = dataArray[2];
    /* POTENTIAL FLAW: No deallocation of memory */
    /* no deallocation */
    ; /* empty statement needed for some flow variants */
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
7,10
11,12
11,13
12,13
13,14
13,15
15,16
15,17
15,18
18,19
19,20
19,21
20,21
-----nextToken-----
2,4,6,8,9,10,14,16,17,21,22,23
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__strdup_char_66b_badSink(char * dataArray[]){    /* copy data out of dataArray */    char * data = dataArray[2];    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
void
CWE401_Memory_Leak__strdup_char_66b_badSink(char * dataArray[])
CWE401_Memory_Leak__strdup_char_66b_badSink
char * dataArray[]
char
* dataArray[]
*
dataArray
[]
{    /* copy data out of dataArray */    char * data = dataArray[2];    /* POTENTIAL FLAW: No deallocation of memory */    /* no deallocation */    ; /* empty statement needed for some flow variants */}
char * data = dataArray[2];
char * data = dataArray[2];
char
* data = dataArray[2]
*
data
= dataArray[2]
dataArray[2]
dataArray
dataArray
2
;
-----joern-----
(1,2,0)
(7,6,0)
(2,4,0)
(6,2,0)
(0,6,0)
(5,4,0)
(6,3,0)
(2,6,0)
(6,7,1)
(8,2,1)
(7,0,1)
(0,1,1)
(6,3,1)
(2,6,1)
(2,6,2)
(6,3,2)
-----------------------------------
(0,dataArray)
(1,data)
(2,* data = dataArray[2])
(3,char * dataArray[])
(4,)
(5,data)
(6,dataArray[2])
(7,2)
(8,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^