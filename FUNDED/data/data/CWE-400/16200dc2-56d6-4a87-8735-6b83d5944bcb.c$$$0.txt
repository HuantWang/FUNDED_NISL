-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_03_bad()
{
    wchar_t * data;
    data = NULL;
    if(5==5)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(5==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
70,71
-----nextToken-----
2,4,8,10,11,15,17,20,21,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,68,69,71
-----computeFrom-----
13,14
13,15
19,20
19,21
24,25
24,26
41,42
41,43
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_03_bad(){    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__wchar_t_calloc_03_bad()
CWE401_Memory_Leak__wchar_t_calloc_03_bad
{    wchar_t * data;    data = NULL;    if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(5==5)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
5==5
5
5
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(5==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
5==5
5
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(22,24,0)
(7,26,0)
(16,14,0)
(2,20,0)
(7,0,0)
(33,20,0)
(11,16,0)
(10,18,0)
(25,29,0)
(9,22,0)
(12,14,0)
(17,23,0)
(27,22,0)
(6,1,0)
(18,23,0)
(19,26,0)
(9,24,0)
(29,16,0)
(1,22,0)
(32,18,0)
(13,24,0)
(22,29,0)
(3,9,0)
(26,7,0)
(29,25,0)
(16,29,0)
(4,30,0)
(5,23,0)
(29,22,0)
(21,23,0)
(31,1,0)
(14,16,0)
(15,30,0)
(31,6,1)
(33,9,1)
(3,1,1)
(20,2,1)
(16,14,1)
(29,25,1)
(4,15,1)
(26,19,1)
(15,18,1)
(3,7,1)
(18,10,1)
(33,30,1)
(30,4,1)
(12,11,1)
(11,27,1)
(2,33,1)
(1,22,1)
(6,22,1)
(8,20,1)
(27,30,1)
(19,1,1)
(10,32,1)
(9,3,1)
(1,31,1)
(22,29,1)
(14,12,1)
(7,26,1)
(9,22,1)
(29,16,1)
(29,16,2)
(6,30,2)
(1,22,2)
(22,29,2)
(1,30,2)
(27,30,2)
(9,30,2)
(19,1,2)
(7,26,2)
(22,30,2)
(3,30,2)
(31,30,2)
(29,25,2)
(14,30,2)
(7,1,2)
(29,30,2)
(12,30,2)
(9,22,2)
(16,14,2)
(26,1,2)
(11,30,2)
(16,30,2)
-----------------------------------
(0,)
(1,data == NULL)
(2,5)
(3,data)
(4,5)
(5,if(5==5)
(6,data)
(7,exit(-1)
(8,RET)
(9,printWLine(data)
(10,NULL)
(11,100)
(12,wchar_t)
(13,if (data == NULL)
(14,sizeof(wchar_t)
(15,5)
(16,calloc(100, sizeof(wchar_t)
(17,data)
(18,data = NULL)
(19,1)
(20,5==5)
(21,if(5==5)
(22,data = (wchar_t *)
(23,)
(24,)
(25,wchar_t *)
(26,-1)
(27,data)
(28, sizeof(wchar_t)
(29,(wchar_t *)
(30,5==5)
(31,NULL)
(32,data)
(33,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^