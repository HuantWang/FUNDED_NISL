-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__rand_sleep_32_bad()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        /* POTENTIAL FLAW: Set count to a random value */
        count = RAND32();
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */
        SLEEP(count);
        printLine("Sleep time possibly too long");
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
52,53
54,55
55,56
55,57
56,57
57,58
59,60
61,62
61,63
61,64
62,63
63,64
63,65
65,66
65,67
67,68
68,69
69,70
71,72
72,73
72,74
73,74
75,76
77,78
78,79
78,80
79,80
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,53,58,60,64,66,70,74,76,80,81
-----computeFrom-----
32,33
32,34
48,49
48,50
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__rand_sleep_32_bad(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        *countPtr1 = count;    }    {        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
void
CWE400_Resource_Exhaustion__rand_sleep_32_bad()
CWE400_Resource_Exhaustion__rand_sleep_32_bad
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        *countPtr1 = count;    }    {        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        /* POTENTIAL FLAW: Set count to a random value */        count = RAND32();        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
count = RAND32();
count = RAND32()
count
count
RAND32()
RAND32
RAND32
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        /* POTENTIAL FLAW: Sleep function using count as the parameter with no validation */        SLEEP(count);        printLine("Sleep time possibly too long");    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
SLEEP(count);
SLEEP(count)
SLEEP
SLEEP
count
count
printLine("Sleep time possibly too long");
printLine("Sleep time possibly too long")
printLine
printLine
"Sleep time possibly too long"
-----joern-----
(16,30,0)
(38,3,0)
(23,20,0)
(34,4,0)
(32,3,0)
(6,27,0)
(25,19,0)
(33,4,0)
(18,37,0)
(6,29,0)
(2,30,0)
(35,19,0)
(3,32,0)
(12,5,0)
(39,37,0)
(15,34,0)
(29,37,0)
(10,2,0)
(1,25,0)
(9,39,0)
(28,6,0)
(22,23,0)
(30,37,0)
(19,30,0)
(4,34,0)
(4,37,0)
(3,29,0)
(39,9,0)
(8,16,0)
(20,23,0)
(31,39,0)
(27,20,0)
(7,38,0)
(36,37,0)
(13,30,0)
(0,3,0)
(27,6,0)
(19,25,0)
(14,20,0)
(16,19,0)
(26,27,0)
(21,37,0)
(11,29,0)
(20,37,0)
(25,39,0)
(5,38,0)
(17,9,0)
(5,20,0)
(38,29,0)
(32,0,1)
(28,4,1)
(4,34,1)
(15,33,1)
(8,19,1)
(19,25,1)
(7,5,1)
(12,3,1)
(17,31,1)
(26,28,1)
(5,12,1)
(31,20,1)
(16,19,1)
(25,39,1)
(1,35,1)
(34,15,1)
(16,8,1)
(22,14,1)
(6,27,1)
(38,7,1)
(20,23,1)
(23,22,1)
(35,38,1)
(2,10,1)
(27,20,1)
(5,20,1)
(38,3,1)
(0,6,1)
(33,39,1)
(25,1,1)
(10,16,1)
(9,17,1)
(27,26,1)
(39,9,1)
(3,32,1)
(24,2,1)
(25,39,2)
(39,9,2)
(27,20,2)
(20,23,2)
(6,27,2)
(38,3,2)
(19,25,2)
(3,32,2)
(5,20,2)
(16,19,2)
(4,34,2)
-----------------------------------
(0,count)
(1,countPtr2)
(2,printLine("Sleep time possibly too long")
(3,count = RAND32()
(4,count = -1)
(5,*countPtr1)
(6,count = *countPtr1)
(7,count)
(8,count)
(9,&count)
(10,"Sleep time possibly too long")
(11,count)
(12,countPtr1)
(13,count)
(14,countPtr1)
(15,1)
(16,SLEEP(count)
(17,count)
(18,countPtr2)
(19,count = *countPtr2)
(20,*countPtr1 = &count)
(21,count)
(22,count)
(23,&count)
(24,RET)
(25,*countPtr2)
(26,countPtr1)
(27,*countPtr1)
(28,count)
(29,)
(30,)
(31,countPtr2)
(32,RAND32()
(33,count)
(34,-1)
(35,count)
(36,countPtr1)
(37,)
(38,*countPtr1 = count)
(39,*countPtr2 = &count)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^