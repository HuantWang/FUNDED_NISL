-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_for_loop_05_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(staticTrue)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(staticTrue)
    {
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
21,22
21,23
21,24
21,25
21,26
21,27
22,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
40,41
42,43
43,44
43,45
45,46
45,47
47,48
48,49
50,51
50,52
51,52
51,53
51,54
51,55
51,56
51,57
51,58
51,59
51,60
51,61
51,62
52,53
53,54
53,55
54,55
56,57
56,58
56,59
56,60
57,58
59,60
61,62
63,64
65,66
65,67
66,67
66,68
67,68
69,70
71,72
73,74
74,75
74,76
74,77
74,78
75,76
77,78
78,79
81,82
82,83
83,84
85,86
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
96,98
97,98
101,102
101,103
102,103
104,105
106,107
107,108
107,109
108,109
108,110
109,110
112,113
112,114
113,114
115,116
117,118
117,119
118,119
118,120
119,120
119,121
119,122
119,123
120,121
122,123
124,125
124,126
125,126
125,127
126,127
128,129
130,131
131,132
133,134
134,135
135,136
137,138
139,140
141,142
142,143
142,144
143,144
145,146
145,147
145,148
145,149
145,150
146,147
148,149
150,151
152,153
152,154
153,154
157,158
157,159
158,159
158,160
159,160
159,161
160,161
162,163
164,165
164,166
165,166
168,169
170,171
171,172
171,173
172,173
172,174
173,174
175,176
178,179
179,180
179,181
180,181
182,183
182,184
183,184
185,186
188,189
188,190
189,190
189,191
190,191
192,193
194,195
195,196
196,197
196,198
197,198
199,200
201,202
201,203
202,203
204,205
205,206
205,207
206,207
207,208
207,209
208,209
210,211
210,212
212,213
214,215
214,216
214,217
214,218
215,216
216,217
216,218
217,218
220,221
220,222
221,222
223,224
223,225
224,225
224,226
225,226
228,229
230,231
231,232
233,234
234,235
235,236
235,237
236,237
-----nextToken-----
2,4,8,10,14,16,19,24,26,30,32,36,38,41,44,46,49,55,58,60,62,64,68,70,72,76,79,80,84,89,90,92,98,99,100,103,105,110,111,114,116,121,123,127,129,132,136,138,140,144,147,149,151,154,155,156,161,163,166,167,169,174,176,177,181,184,186,187,191,193,198,200,203,209,211,213,218,219,222,226,227,229,232,237,238
-----computeFrom-----
12,13
12,14
53,54
53,55
66,67
66,68
86,87
86,88
94,95
94,96
107,108
107,109
118,119
118,120
142,143
142,144
152,153
152,154
158,159
158,160
159,160
159,161
164,165
164,166
171,172
171,173
179,180
179,181
189,190
189,191
216,217
216,218
220,221
220,222
-----guardedBy-----
191,200
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_for_loop_05_bad(){    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(staticTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_for_loop_05_bad()
CWE400_Resource_Exhaustion__connect_socket_for_loop_05_bad
{    int count;    /* Initialize count */    count = -1;    if(staticTrue)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(staticTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(staticTrue)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
staticTrue
staticTrue
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(staticTrue)    {        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
staticTrue
staticTrue
{        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(117,53,0)
(85,148,0)
(57,60,0)
(14,95,0)
(4,2,0)
(106,49,0)
(120,118,0)
(127,53,0)
(21,144,0)
(1,2,0)
(120,144,0)
(68,93,0)
(71,116,0)
(67,131,0)
(20,128,0)
(105,25,0)
(139,1,0)
(146,125,0)
(138,49,0)
(119,75,0)
(81,137,0)
(137,120,0)
(10,136,0)
(33,89,0)
(0,104,0)
(143,87,0)
(25,75,0)
(118,13,0)
(74,13,0)
(42,122,0)
(108,34,0)
(48,7,0)
(104,87,0)
(93,34,0)
(73,53,0)
(36,120,0)
(141,45,0)
(37,17,0)
(145,39,0)
(57,2,0)
(113,53,0)
(125,146,0)
(34,93,0)
(150,60,0)
(136,132,0)
(93,68,0)
(125,4,0)
(88,135,0)
(95,147,0)
(85,24,0)
(51,2,0)
(86,59,0)
(56,4,0)
(13,118,0)
(53,43,0)
(75,149,0)
(96,64,0)
(121,19,0)
(84,64,0)
(95,2,0)
(49,2,0)
(60,57,0)
(60,132,0)
(80,5,0)
(118,2,0)
(98,57,0)
(114,93,0)
(58,136,0)
(28,14,0)
(120,111,0)
(54,53,0)
(128,82,0)
(45,141,0)
(99,116,0)
(17,90,0)
(5,135,0)
(85,128,0)
(5,132,0)
(133,3,0)
(85,132,0)
(1,61,0)
(89,53,0)
(137,7,0)
(18,130,0)
(130,7,0)
(15,2,0)
(66,68,0)
(116,45,0)
(29,2,0)
(11,24,0)
(27,118,0)
(128,20,0)
(26,141,0)
(129,7,0)
(1,139,0)
(82,128,0)
(115,132,0)
(91,82,0)
(102,68,0)
(120,137,0)
(138,57,0)
(109,53,0)
(101,89,0)
(38,140,0)
(50,61,0)
(55,85,0)
(116,57,0)
(64,60,0)
(128,85,0)
(148,85,0)
(103,122,0)
(46,53,0)
(97,138,0)
(52,25,0)
(16,146,0)
(77,75,0)
(100,124,0)
(45,116,0)
(92,114,0)
(122,132,0)
(4,56,0)
(134,147,0)
(144,124,0)
(72,125,0)
(22,2,0)
(44,104,0)
(31,60,0)
(111,120,0)
(62,145,0)
(40,22,0)
(141,57,0)
(107,22,0)
(110,2,0)
(145,135,0)
(87,2,0)
(24,85,0)
(9,53,0)
(23,122,0)
(61,1,0)
(126,5,0)
(8,138,0)
(147,95,0)
(93,114,0)
(132,2,0)
(123,19,0)
(35,60,0)
(47,14,0)
(30,53,0)
(94,1,0)
(144,19,0)
(32,56,0)
(145,132,0)
(6,139,0)
(112,148,0)
(78,141,0)
(142,146,0)
(60,64,0)
(12,135,0)
(135,53,0)
(132,122,0)
(83,19,0)
(124,144,0)
(63,79,0)
(25,52,1)
(98,148,1)
(142,16,1)
(112,85,1)
(45,141,1)
(101,76,1)
(104,44,1)
(12,88,1)
(36,81,1)
(63,114,1)
(88,89,1)
(41,5,1)
(42,103,1)
(4,56,1)
(136,58,1)
(130,18,1)
(126,38,1)
(148,85,1)
(41,145,1)
(85,128,1)
(26,57,1)
(136,132,1)
(23,42,1)
(94,139,1)
(102,135,1)
(40,107,1)
(38,136,1)
(57,60,1)
(116,71,1)
(70,41,1)
(48,129,1)
(86,148,1)
(82,91,1)
(14,28,1)
(122,23,1)
(148,112,1)
(92,93,1)
(72,146,1)
(102,69,1)
(126,86,1)
(22,40,1)
(125,72,1)
(7,48,1)
(125,146,1)
(141,57,1)
(114,93,1)
(31,35,1)
(76,144,1)
(133,41,1)
(99,141,1)
(118,13,1)
(11,128,1)
(68,66,1)
(100,21,1)
(115,22,1)
(116,57,1)
(35,98,1)
(93,68,1)
(60,150,1)
(120,36,1)
(137,7,1)
(96,84,1)
(74,27,1)
(17,37,1)
(139,6,1)
(34,108,1)
(6,136,1)
(5,80,1)
(144,124,1)
(130,7,1)
(126,67,1)
(132,122,1)
(120,111,1)
(91,55,1)
(147,134,1)
(50,94,1)
(120,144,1)
(64,96,1)
(28,47,1)
(80,126,1)
(81,130,1)
(145,62,1)
(44,0,1)
(114,92,1)
(60,64,1)
(128,82,1)
(1,139,1)
(70,133,1)
(62,5,1)
(61,50,1)
(69,118,1)
(24,11,1)
(10,132,1)
(126,69,1)
(143,104,1)
(124,100,1)
(49,106,1)
(65,137,1)
(70,76,1)
(52,105,1)
(146,142,1)
(5,135,1)
(138,57,1)
(128,20,1)
(1,61,1)
(97,45,1)
(60,132,1)
(56,32,1)
(65,70,1)
(89,33,1)
(45,116,1)
(134,14,1)
(66,102,1)
(95,147,1)
(33,101,1)
(67,45,1)
(37,137,1)
(120,118,1)
(32,125,1)
(105,70,1)
(150,64,1)
(145,135,1)
(138,8,1)
(18,17,1)
(103,115,1)
(135,12,1)
(58,10,1)
(85,24,1)
(81,7,1)
(5,132,1)
(0,1,1)
(13,74,1)
(55,95,1)
(78,26,1)
(71,99,1)
(137,120,1)
(141,78,1)
(108,68,1)
(145,132,1)
(107,114,1)
(106,138,1)
(16,87,1)
(126,63,1)
(129,25,1)
(27,49,1)
(8,97,1)
(84,31,1)
(47,4,1)
(87,143,1)
(85,132,1)
(93,34,1)
(67,45,2)
(95,136,2)
(136,132,2)
(116,57,2)
(69,45,2)
(138,45,2)
(145,135,2)
(45,141,2)
(37,137,2)
(102,76,2)
(114,76,2)
(33,76,2)
(95,147,2)
(0,136,2)
(55,136,2)
(137,120,2)
(66,76,2)
(102,69,2)
(11,136,2)
(91,136,2)
(144,124,2)
(34,69,2)
(85,24,2)
(105,70,2)
(45,116,2)
(125,146,2)
(62,5,2)
(72,136,2)
(146,136,2)
(12,76,2)
(1,136,2)
(24,136,2)
(93,76,2)
(50,136,2)
(88,76,2)
(68,76,2)
(108,76,2)
(1,61,2)
(68,69,2)
(116,141,2)
(13,45,2)
(28,136,2)
(138,57,2)
(18,137,2)
(150,148,2)
(128,82,2)
(1,139,2)
(136,114,2)
(135,76,2)
(120,137,2)
(22,114,2)
(45,148,2)
(133,41,2)
(60,64,2)
(85,136,2)
(93,34,2)
(38,136,2)
(126,76,2)
(4,56,2)
(143,136,2)
(148,136,2)
(82,136,2)
(64,148,2)
(74,45,2)
(49,45,2)
(132,114,2)
(60,148,2)
(139,136,2)
(92,69,2)
(6,136,2)
(142,136,2)
(93,68,2)
(114,93,2)
(84,148,2)
(92,76,2)
(26,148,2)
(14,136,2)
(134,136,2)
(86,148,2)
(63,114,2)
(61,136,2)
(130,7,2)
(141,148,2)
(57,60,2)
(85,132,2)
(5,135,2)
(120,144,2)
(71,141,2)
(4,136,2)
(104,136,2)
(7,70,2)
(41,76,2)
(16,136,2)
(96,148,2)
(97,45,2)
(5,132,2)
(23,114,2)
(118,45,2)
(81,70,2)
(98,148,2)
(101,76,2)
(25,70,2)
(56,136,2)
(94,136,2)
(42,114,2)
(10,114,2)
(128,136,2)
(58,114,2)
(36,137,2)
(89,76,2)
(112,136,2)
(103,114,2)
(80,76,2)
(40,114,2)
(57,148,2)
(118,13,2)
(120,111,2)
(47,136,2)
(107,114,2)
(115,114,2)
(99,141,2)
(27,45,2)
(141,57,2)
(137,137,2)
(120,118,2)
(32,136,2)
(114,69,2)
(122,114,2)
(36,70,2)
(31,148,2)
(8,45,2)
(145,5,2)
(128,20,2)
(85,128,2)
(93,69,2)
(106,45,2)
(66,69,2)
(132,122,2)
(125,136,2)
(145,132,2)
(137,7,2)
(78,148,2)
(60,132,2)
(52,70,2)
(17,137,2)
(34,76,2)
(5,76,2)
(130,137,2)
(147,136,2)
(48,70,2)
(108,69,2)
(129,70,2)
(120,70,2)
(35,148,2)
(87,136,2)
(44,136,2)
(148,85,2)
(81,137,2)
(137,70,2)
-----------------------------------
(0,service)
(1,memset(&service, 0, sizeof(service)
(2,)
(3,)
(4,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(5,connectSocket != INVALID_SOCKET)
(6,service)
(7,i = 0)
(8,recvResult)
(9,if (wsaDataInit)
(10,connectSocket)
(11,service)
(12,INVALID_SOCKET)
(13,atoi(inputBuffer)
(14,service.sin_port)
(15,if (recvResult == SOCKET_ERROR || recvResult == 0)
(16,service)
(17,printLine("Hello")
(18,i)
(19,)
(20,struct sockaddr*)
(21,count)
(22,wsaDataInit = 1)
(23,IPPROTO_TCP)
(24,sizeof(service)
(25,i = 0)
(26,recvResult)
(27,count)
(28,sin_port)
(29,if (connect(connectSocket, (struct sockaddr*)
(30,inputBuffer)
(31,inputBuffer)
(32,IP_ADDRESS)
(33,0)
(34,&wsaData)
(35,connectSocket)
(36,count)
(37,"Hello")
(38,break;)
(39,)
(40,1)
(41,wsaDataInit)
(42,SOCK_STREAM)
(43,)
(44,sin_family)
(45,recvResult == SOCKET_ERROR || recvResult == 0)
(46,wsaDataInit)
(47,service)
(48,0)
(49,inputBuffer[recvResult] = \'\\0\')
(50,service)
(51,if (connectSocket == INVALID_SOCKET)
(52,0)
(53,)
(54,if (connectSocket != INVALID_SOCKET)
(55,connectSocket)
(56,inet_addr(IP_ADDRESS)
(57,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(58,INVALID_SOCKET)
(59,)
(60,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(61,sizeof(service)
(62,connectSocket)
(63,break;)
(64,CHAR_ARRAY_SIZE - 1)
(65,RET)
(66,2)
(67,break;)
(68,MAKEWORD(2,2)
(69,0)
(70,staticTrue)
(71,0)
(72,s_addr)
(73,do)
(74,inputBuffer)
(75,)
(76,staticTrue)
(77,i)
(78,SOCKET_ERROR)
(79,)
(80,INVALID_SOCKET)
(81,i)
(82,&service)
(83,if(staticTrue)
(84,CHAR_ARRAY_SIZE)
(85,connect(connectSocket, (struct sockaddr*)
(86,break;)
(87,service.sin_family = AF_INET)
(88,connectSocket)
(89,wsaDataInit = 0)
(90,)
(91,service)
(92,NO_ERROR)
(93,WSAStartup(MAKEWORD(2,2)
(94,0)
(95,service.sin_port = htons(TCP_PORT)
(96,1)
(97,inputBuffer)
(98,recvResult)
(99,recvResult)
(100,1)
(101,wsaDataInit)
(102,2)
(103,AF_INET)
(104,service.sin_family)
(105,i)
(106,\'\\0\')
(107,wsaDataInit)
(108,wsaData)
(109,connectSocket)
(110,if (WSAStartup(MAKEWORD(2,2)
(111,size_t)
(112,SOCKET_ERROR)
(113,service)
(114,WSAStartup(MAKEWORD(2,2)
(115,connectSocket)
(116,recvResult == 0)
(117,recvResult)
(118,count = atoi(inputBuffer)
(119,for (i = 0; i < (size_t)
(120,(size_t)
(121,if(staticTrue)
(122,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(123,count)
(124,-1)
(125,service.sin_addr.s_addr)
(126,connectSocket)
(127,wsaData)
(128,(struct sockaddr*)
(129,i)
(130,i++)
(131,)
(132,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(133,WSACleanup()
(134,TCP_PORT)
(135,connectSocket = INVALID_SOCKET)
(136,connectSocket == INVALID_SOCKET)
(137,i < (size_t)
(138,inputBuffer[recvResult])
(139,&service)
(140,)
(141,recvResult == SOCKET_ERROR)
(142,sin_addr)
(143,AF_INET)
(144,count = -1)
(145,CLOSE_SOCKET(connectSocket)
(146,service.sin_addr)
(147,htons(TCP_PORT)
(148,connect(connectSocket, (struct sockaddr*)
(149,)
(150,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^