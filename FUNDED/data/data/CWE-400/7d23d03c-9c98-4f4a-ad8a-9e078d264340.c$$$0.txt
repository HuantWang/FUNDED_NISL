-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_02_bad()
{
    int count;
    /* Initialize count */
    count = -1;
    if(1)
    {
        {
#ifdef _WIN32
            WSADATA wsaData;
            int wsaDataInit = 0;
#endif
            int recvResult;
            struct sockaddr_in service;
            SOCKET connectSocket = INVALID_SOCKET;
            char inputBuffer[CHAR_ARRAY_SIZE];
            do
            {
#ifdef _WIN32
                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)
                {
                    break;
                }
                wsaDataInit = 1;
#endif
                /* POTENTIAL FLAW: Read count using a connect socket */
                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
                if (connectSocket == INVALID_SOCKET)
                {
                    break;
                }
                memset(&service, 0, sizeof(service));
                service.sin_family = AF_INET;
                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
                service.sin_port = htons(TCP_PORT);
                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)
                {
                    break;
                }
                /* Abort on error or the connection was closed, make sure to recv one
                 * less char than is in the recv_buf in order to append a terminator */
                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
                if (recvResult == SOCKET_ERROR || recvResult == 0)
                {
                    break;
                }
                /* NUL-terminate the string */
                inputBuffer[recvResult] = '\0';
                /* Convert to int */
                count = atoi(inputBuffer);
            }
            while (0);
            if (connectSocket != INVALID_SOCKET)
            {
                CLOSE_SOCKET(connectSocket);
            }
#ifdef _WIN32
            if (wsaDataInit)
            {
                WSACleanup();
            }
#endif
        }
    }
    if(1)
    {
        {
            size_t i = 0;
            FILE *pFile = NULL;
            const char *filename = "output_bad.txt";
            pFile = fopen(filename, "w+");
            if (pFile == NULL)
            {
                exit(1);
            }
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
             * This can cause a file to become very large */
            for (i = 0; i < (size_t)count; i++)
            {
                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
                {
                    exit(1);
                }
            }
            if (pFile)
            {
                fclose(pFile);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
11,12
12,13
12,14
13,14
15,16
17,18
17,19
19,20
20,21
20,22
20,23
20,24
20,25
20,26
21,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
41,42
42,43
42,44
44,45
44,46
46,47
47,48
49,50
49,51
50,51
50,52
50,53
50,54
50,55
50,56
50,57
50,58
50,59
50,60
50,61
51,52
52,53
52,54
53,54
55,56
55,57
55,58
55,59
56,57
58,59
60,61
62,63
64,65
64,66
65,66
65,67
66,67
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
77,78
80,81
81,82
82,83
84,85
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
100,101
100,102
101,102
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
114,115
116,117
116,118
117,118
117,119
118,119
118,120
118,121
118,122
119,120
121,122
123,124
123,125
124,125
124,126
125,126
127,128
129,130
130,131
132,133
133,134
134,135
136,137
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
144,149
145,146
147,148
149,150
151,152
151,153
152,153
156,157
156,158
157,158
157,159
158,159
158,160
159,160
161,162
163,164
163,165
164,165
167,168
169,170
170,171
170,172
171,172
171,173
172,173
174,175
177,178
178,179
178,180
179,180
181,182
181,183
182,183
184,185
187,188
187,189
188,189
188,190
189,190
191,192
193,194
194,195
195,196
195,197
196,197
198,199
200,201
200,202
202,203
203,204
203,205
203,206
203,207
203,208
203,209
203,210
204,205
205,206
205,207
206,207
208,209
208,210
210,211
212,213
213,214
213,215
214,215
216,217
216,218
216,219
219,220
220,221
222,223
223,224
223,225
225,226
225,227
225,228
228,229
230,231
231,232
231,233
232,233
234,235
234,236
234,237
235,236
237,238
240,241
240,242
241,242
241,243
242,243
244,245
246,247
247,248
248,249
248,250
249,250
252,253
252,254
252,255
252,256
253,254
254,255
254,256
255,256
258,259
258,260
259,260
261,262
261,263
262,263
262,264
263,264
266,267
268,269
269,270
271,272
272,273
272,274
273,274
273,275
274,275
274,276
275,276
277,278
279,280
279,281
279,282
279,283
279,284
280,281
282,283
284,285
285,286
285,287
288,289
288,290
289,290
291,292
293,294
295,296
296,297
297,298
297,299
298,299
301,302
301,303
302,303
304,305
305,306
306,307
306,308
307,308
309,310
-----nextToken-----
2,4,8,10,14,16,18,23,25,29,31,35,37,40,43,45,48,54,57,59,61,63,67,69,71,75,78,79,83,88,89,91,97,98,99,102,104,109,110,113,115,120,122,126,128,131,135,137,139,143,146,148,150,153,154,155,160,162,165,166,168,173,175,176,180,183,185,186,190,192,197,199,201,207,209,211,215,217,218,221,224,226,227,229,233,236,238,239,243,245,250,251,256,257,260,264,265,267,270,276,278,281,283,286,287,290,292,294,299,300,303,308,310
-----computeFrom-----
12,13
12,14
52,53
52,54
65,66
65,67
85,86
85,87
93,94
93,95
106,107
106,108
117,118
117,119
141,142
141,143
151,152
151,153
157,158
157,159
158,159
158,160
163,164
163,165
170,171
170,172
178,179
178,180
188,189
188,190
231,232
231,233
241,242
241,243
254,255
254,256
258,259
258,260
273,274
273,275
-----guardedBy-----
190,199
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;DoStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__connect_socket_fwrite_02_bad(){    int count;    /* Initialize count */    count = -1;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
void
CWE400_Resource_Exhaustion__connect_socket_fwrite_02_bad()
CWE400_Resource_Exhaustion__connect_socket_fwrite_02_bad
{    int count;    /* Initialize count */    count = -1;    if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }    if(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }}
int count;
int count;
int
count
count
count = -1;
count = -1
count
count
-1
1
if(1)    {        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
1
{        {#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }    }
{#ifdef _WIN32            WSADATA wsaData;            int wsaDataInit = 0;#endif            int recvResult;            struct sockaddr_in service;            SOCKET connectSocket = INVALID_SOCKET;            char inputBuffer[CHAR_ARRAY_SIZE];            do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);            if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }#ifdef _WIN32            if (wsaDataInit)            {                WSACleanup();            }#endif        }
int recvResult;
int recvResult;
int
recvResult
recvResult
struct sockaddr_in service;
struct sockaddr_in service;
struct sockaddr_in
sockaddr_in
service
service
SOCKET connectSocket = INVALID_SOCKET;
SOCKET connectSocket = INVALID_SOCKET;
SOCKET
SOCKET
connectSocket = INVALID_SOCKET
connectSocket
= INVALID_SOCKET
INVALID_SOCKET
INVALID_SOCKET
char inputBuffer[CHAR_ARRAY_SIZE];
char inputBuffer[CHAR_ARRAY_SIZE];
char
inputBuffer[CHAR_ARRAY_SIZE]
inputBuffer
[CHAR_ARRAY_SIZE]
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
do            {#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }            while (0);
{#ifdef _WIN32                if (WSAStartup(MAKEWORD(2,2), &wsaData) != NO_ERROR)                {                    break;                }                wsaDataInit = 1;#endif                /* POTENTIAL FLAW: Read count using a connect socket */                connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);                if (connectSocket == INVALID_SOCKET)                {                    break;                }                memset(&service, 0, sizeof(service));                service.sin_family = AF_INET;                service.sin_addr.s_addr = inet_addr(IP_ADDRESS);                service.sin_port = htons(TCP_PORT);                if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }                /* Abort on error or the connection was closed, make sure to recv one                 * less char than is in the recv_buf in order to append a terminator */                recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);                if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }                /* NUL-terminate the string */                inputBuffer[recvResult] = '\0';                /* Convert to int */                count = atoi(inputBuffer);            }
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
connectSocket
connectSocket
socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
socket
socket
AF_INET
AF_INET
SOCK_STREAM
SOCK_STREAM
IPPROTO_TCP
IPPROTO_TCP
if (connectSocket == INVALID_SOCKET)                {                    break;                }
connectSocket == INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                    break;                }
break;
memset(&service, 0, sizeof(service));
memset(&service, 0, sizeof(service))
memset
memset
&service
service
service
0
sizeof(service)
(service)
service
service
service.sin_family = AF_INET;
service.sin_family = AF_INET
service.sin_family
service
service
sin_family
AF_INET
AF_INET
service.sin_addr.s_addr = inet_addr(IP_ADDRESS);
service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
service.sin_addr.s_addr
service.sin_addr
service
service
sin_addr
s_addr
inet_addr(IP_ADDRESS)
inet_addr
inet_addr
IP_ADDRESS
IP_ADDRESS
service.sin_port = htons(TCP_PORT);
service.sin_port = htons(TCP_PORT)
service.sin_port
service
service
sin_port
htons(TCP_PORT)
htons
htons
TCP_PORT
TCP_PORT
if (connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR)                {                    break;                }
connect(connectSocket, (struct sockaddr*)&service, sizeof(service)) == SOCKET_ERROR
connect(connectSocket, (struct sockaddr*)&service, sizeof(service))
connect
connect
connectSocket
connectSocket
(struct sockaddr*)&service
struct sockaddr*
struct sockaddr
sockaddr
*
*
&service
service
service
sizeof(service)
(service)
service
service
SOCKET_ERROR
SOCKET_ERROR
{                    break;                }
break;
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0);
recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recvResult
recvResult
recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
recv
recv
connectSocket
connectSocket
inputBuffer
inputBuffer
CHAR_ARRAY_SIZE - 1
CHAR_ARRAY_SIZE
CHAR_ARRAY_SIZE
1
0
if (recvResult == SOCKET_ERROR || recvResult == 0)                {                    break;                }
recvResult == SOCKET_ERROR || recvResult == 0
recvResult == SOCKET_ERROR
recvResult
recvResult
SOCKET_ERROR
SOCKET_ERROR
recvResult == 0
recvResult
recvResult
0
{                    break;                }
break;
inputBuffer[recvResult] = '\0';
inputBuffer[recvResult] = '\0'
inputBuffer[recvResult]
inputBuffer
inputBuffer
recvResult
recvResult
'\0'
count = atoi(inputBuffer);
count = atoi(inputBuffer)
count
count
atoi(inputBuffer)
atoi
atoi
inputBuffer
inputBuffer
0
if (connectSocket != INVALID_SOCKET)            {                CLOSE_SOCKET(connectSocket);            }
connectSocket != INVALID_SOCKET
connectSocket
connectSocket
INVALID_SOCKET
INVALID_SOCKET
{                CLOSE_SOCKET(connectSocket);            }
CLOSE_SOCKET(connectSocket);
CLOSE_SOCKET(connectSocket)
CLOSE_SOCKET
CLOSE_SOCKET
connectSocket
connectSocket
if(1)    {        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
1
{        {            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }    }
{            size_t i = 0;            FILE *pFile = NULL;            const char *filename = "output_bad.txt";            pFile = fopen(filename, "w+");            if (pFile == NULL)            {                exit(1);            }            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation             * This can cause a file to become very large */            for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }            if (pFile)            {                fclose(pFile);            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)            {                exit(1);            }
pFile == NULL
pFile
pFile
NULL
NULL
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)            {                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }            }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))                {                    exit(1);                }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                    exit(1);                }
exit(1);
exit(1)
exit
exit
1
if (pFile)            {                fclose(pFile);            }
pFile
pFile
{                fclose(pFile);            }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(127,109,0)
(100,183,0)
(162,171,0)
(76,75,0)
(140,2,0)
(134,1,0)
(166,171,0)
(97,31,0)
(18,94,0)
(171,36,0)
(93,111,0)
(135,107,0)
(77,166,0)
(130,2,0)
(73,20,0)
(90,99,0)
(132,86,0)
(20,109,0)
(59,45,0)
(45,67,0)
(46,98,0)
(170,12,0)
(164,87,0)
(27,137,0)
(13,91,0)
(153,121,0)
(4,74,0)
(94,2,0)
(160,145,0)
(2,12,0)
(66,172,0)
(154,70,0)
(11,120,0)
(26,139,0)
(112,173,0)
(23,43,0)
(6,149,0)
(143,171,0)
(7,114,0)
(71,113,0)
(69,59,0)
(37,11,0)
(39,78,0)
(45,59,0)
(57,187,0)
(54,180,0)
(31,97,0)
(167,100,0)
(115,60,0)
(4,120,0)
(150,86,0)
(34,131,0)
(120,87,0)
(175,86,0)
(82,61,0)
(58,154,0)
(44,36,0)
(162,139,0)
(61,82,0)
(50,145,0)
(48,6,0)
(114,45,0)
(147,169,0)
(139,162,0)
(187,131,0)
(8,182,0)
(128,6,0)
(3,19,0)
(101,183,0)
(178,116,0)
(9,164,0)
(60,125,0)
(18,75,0)
(131,187,0)
(186,127,0)
(108,158,0)
(70,132,0)
(97,125,0)
(47,87,0)
(52,43,0)
(122,142,0)
(152,6,0)
(78,180,0)
(15,173,0)
(97,17,0)
(145,137,0)
(120,11,0)
(145,61,0)
(146,67,0)
(25,158,0)
(45,114,0)
(157,31,0)
(28,18,0)
(9,169,0)
(171,162,0)
(62,183,0)
(36,171,0)
(12,2,0)
(155,50,0)
(94,87,0)
(125,158,0)
(171,70,0)
(29,99,0)
(40,76,0)
(164,172,0)
(121,16,0)
(105,183,0)
(17,97,0)
(1,70,0)
(38,87,0)
(125,60,0)
(145,50,0)
(177,183,0)
(84,120,0)
(182,22,0)
(65,158,0)
(85,169,0)
(5,78,0)
(41,59,0)
(92,171,0)
(154,55,0)
(42,142,0)
(103,87,0)
(131,87,0)
(51,76,0)
(161,131,0)
(168,80,0)
(137,145,0)
(95,63,0)
(67,45,0)
(131,161,0)
(169,9,0)
(96,6,0)
(102,80,0)
(141,152,0)
(184,9,0)
(129,182,0)
(2,94,0)
(68,18,0)
(89,22,0)
(64,97,0)
(33,11,0)
(185,6,0)
(109,127,0)
(32,12,0)
(110,183,0)
(98,61,0)
(24,174,0)
(104,183,0)
(163,183,0)
(49,4,0)
(63,6,0)
(173,87,0)
(159,161,0)
(61,98,0)
(22,87,0)
(111,136,0)
(181,183,0)
(23,87,0)
(142,120,0)
(56,132,0)
(180,87,0)
(183,176,0)
(43,23,0)
(144,70,0)
(72,151,0)
(78,94,0)
(70,6,0)
(75,76,0)
(14,87,0)
(91,183,0)
(124,63,0)
(172,164,0)
(179,6,0)
(61,145,0)
(0,11,0)
(75,18,0)
(145,120,0)
(117,132,0)
(86,6,0)
(123,23,0)
(2,120,0)
(79,100,0)
(171,166,0)
(76,94,0)
(116,80,0)
(106,152,0)
(81,183,0)
(97,23,0)
(99,100,0)
(83,125,0)
(165,20,0)
(133,94,0)
(4,100,0)
(21,6,0)
(148,2,0)
(31,80,0)
(109,87,0)
(30,1,0)
(138,10,0)
(132,70,0)
(99,120,0)
(35,91,0)
(29,3,1)
(145,120,1)
(118,119,1)
(178,121,1)
(70,132,1)
(166,77,1)
(77,36,1)
(184,169,1)
(146,45,1)
(173,112,1)
(60,115,1)
(50,155,1)
(138,75,1)
(75,76,1)
(78,5,1)
(3,67,1)
(31,97,1)
(171,92,1)
(88,99,1)
(1,70,1)
(125,60,1)
(162,171,1)
(64,157,1)
(172,66,1)
(39,75,1)
(97,64,1)
(99,100,1)
(37,33,1)
(118,88,1)
(0,37,1)
(80,102,1)
(57,142,1)
(90,29,1)
(61,82,1)
(187,57,1)
(95,124,1)
(4,100,1)
(69,156,1)
(67,45,1)
(132,86,1)
(137,27,1)
(42,120,1)
(102,168,1)
(127,186,1)
(54,78,1)
(99,90,1)
(56,117,1)
(133,50,1)
(154,58,1)
(119,125,1)
(129,131,1)
(35,119,1)
(20,73,1)
(53,118,1)
(171,166,1)
(89,182,1)
(28,68,1)
(22,89,1)
(175,152,1)
(123,180,1)
(66,9,1)
(144,86,1)
(98,46,1)
(53,126,1)
(118,71,1)
(157,80,1)
(168,111,1)
(2,120,1)
(44,143,1)
(2,140,1)
(12,32,1)
(150,175,1)
(76,51,1)
(31,80,1)
(49,99,1)
(141,106,1)
(8,129,1)
(86,150,1)
(41,69,1)
(148,133,1)
(26,31,1)
(114,7,1)
(30,70,1)
(93,1,1)
(109,127,1)
(33,84,1)
(73,165,1)
(171,36,1)
(152,141,1)
(165,164,1)
(153,162,1)
(178,162,1)
(78,94,1)
(18,28,1)
(142,122,1)
(120,11,1)
(29,138,1)
(186,20,1)
(29,156,1)
(67,146,1)
(32,170,1)
(63,95,1)
(79,167,1)
(140,12,1)
(106,63,1)
(162,139,1)
(142,120,1)
(121,153,1)
(9,169,1)
(112,15,1)
(88,4,1)
(85,147,1)
(34,187,1)
(94,2,1)
(9,184,1)
(126,31,1)
(45,114,1)
(43,52,1)
(155,145,1)
(58,126,1)
(171,70,1)
(97,23,1)
(69,100,1)
(131,161,1)
(164,172,1)
(145,61,1)
(76,94,1)
(24,50,1)
(1,134,1)
(36,44,1)
(147,22,1)
(167,91,1)
(117,144,1)
(134,30,1)
(115,83,1)
(132,56,1)
(29,72,1)
(180,54,1)
(84,173,1)
(182,8,1)
(23,43,1)
(160,109,1)
(53,154,1)
(75,18,1)
(168,1,1)
(139,26,1)
(71,88,1)
(170,130,1)
(111,93,1)
(61,98,1)
(4,120,1)
(91,13,1)
(4,49,1)
(52,123,1)
(13,35,1)
(122,42,1)
(130,148,1)
(11,0,1)
(159,34,1)
(68,76,1)
(161,159,1)
(15,67,1)
(154,70,1)
(7,59,1)
(143,139,1)
(156,23,1)
(145,137,1)
(92,166,1)
(18,94,1)
(116,178,1)
(50,145,1)
(131,187,1)
(2,12,1)
(46,160,1)
(40,94,1)
(99,120,1)
(97,17,1)
(124,118,1)
(45,59,1)
(116,80,1)
(27,61,1)
(157,116,1)
(97,125,1)
(72,142,1)
(5,39,1)
(59,41,1)
(51,40,1)
(169,85,1)
(100,79,1)
(29,24,1)
(67,119,2)
(97,125,2)
(70,132,2)
(59,119,2)
(18,94,2)
(42,67,2)
(41,156,2)
(8,142,2)
(28,76,2)
(67,45,2)
(131,187,2)
(146,156,2)
(57,142,2)
(75,76,2)
(187,142,2)
(111,1,2)
(106,118,2)
(130,50,2)
(129,142,2)
(126,118,2)
(91,119,2)
(1,70,2)
(142,67,2)
(123,75,2)
(86,118,2)
(150,118,2)
(98,142,2)
(93,1,2)
(161,142,2)
(24,50,2)
(157,118,2)
(139,31,2)
(171,166,2)
(76,50,2)
(173,67,2)
(31,97,2)
(120,67,2)
(92,31,2)
(145,137,2)
(43,75,2)
(155,142,2)
(2,12,2)
(133,50,2)
(131,142,2)
(78,94,2)
(23,43,2)
(166,31,2)
(97,31,2)
(114,119,2)
(171,70,2)
(2,50,2)
(186,142,2)
(116,80,2)
(69,156,2)
(165,142,2)
(20,142,2)
(142,120,2)
(144,118,2)
(76,94,2)
(70,118,2)
(23,75,2)
(75,50,2)
(154,126,2)
(52,75,2)
(141,118,2)
(143,31,2)
(99,120,2)
(29,119,2)
(31,31,2)
(160,142,2)
(4,100,2)
(90,119,2)
(154,70,2)
(33,67,2)
(168,118,2)
(97,17,2)
(27,142,2)
(184,142,2)
(15,67,2)
(162,139,2)
(4,99,2)
(46,142,2)
(153,162,2)
(109,127,2)
(180,75,2)
(124,118,2)
(132,86,2)
(97,23,2)
(45,156,2)
(167,119,2)
(80,118,2)
(88,119,2)
(157,31,2)
(175,118,2)
(109,142,2)
(152,118,2)
(69,119,2)
(22,142,2)
(7,119,2)
(121,162,2)
(61,82,2)
(145,61,2)
(95,118,2)
(102,118,2)
(171,36,2)
(117,118,2)
(51,50,2)
(64,118,2)
(72,142,2)
(140,50,2)
(54,75,2)
(9,142,2)
(162,31,2)
(148,50,2)
(35,119,2)
(112,67,2)
(67,156,2)
(32,50,2)
(120,11,2)
(178,31,2)
(9,169,2)
(145,120,2)
(5,75,2)
(49,99,2)
(40,50,2)
(170,50,2)
(64,31,2)
(12,50,2)
(7,156,2)
(13,119,2)
(94,2,2)
(31,118,2)
(147,142,2)
(100,119,2)
(132,118,2)
(4,120,2)
(45,119,2)
(171,31,2)
(3,67,2)
(138,75,2)
(97,118,2)
(45,114,2)
(61,98,2)
(30,118,2)
(164,142,2)
(45,59,2)
(61,142,2)
(125,60,2)
(99,119,2)
(59,156,2)
(78,75,2)
(114,156,2)
(159,142,2)
(156,75,2)
(58,126,2)
(73,142,2)
(79,119,2)
(172,142,2)
(44,31,2)
(1,118,2)
(137,142,2)
(116,31,2)
(36,31,2)
(169,142,2)
(50,145,2)
(145,142,2)
(85,142,2)
(56,118,2)
(164,172,2)
(131,161,2)
(146,119,2)
(68,76,2)
(99,100,2)
(162,171,2)
(31,80,2)
(41,119,2)
(77,31,2)
(11,67,2)
(26,31,2)
(127,142,2)
(39,75,2)
(182,142,2)
(37,67,2)
(94,50,2)
(18,76,2)
(34,142,2)
(89,142,2)
(0,67,2)
(122,67,2)
(134,118,2)
(63,118,2)
(71,88,2)
(66,142,2)
(84,67,2)
(50,142,2)
(2,120,2)
(75,18,2)
-----------------------------------
(0,IPPROTO_TCP)
(1,pFile == NULL)
(2,recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(3,break;)
(4,CLOSE_SOCKET(connectSocket)
(5,recvResult)
(6,)
(7,wsaData)
(8,sin_family)
(9,service.sin_addr.s_addr)
(10,)
(11,socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(12,CHAR_ARRAY_SIZE - 1)
(13,0)
(14,if (WSAStartup(MAKEWORD(2,2)
(15,wsaDataInit)
(16,)
(17,size_t)
(18,recvResult == 0)
(19,)
(20,service.sin_port)
(21,for (i = 0; i < (size_t)
(22,service.sin_family = AF_INET)
(23,count = atoi(inputBuffer)
(24,break;)
(25,if(1)
(26,SENTENCE)
(27,service)
(28,0)
(29,connectSocket)
(30,pFile)
(31,i < (size_t)
(32,1)
(33,AF_INET)
(34,0)
(35,wsaDataInit)
(36,sizeof(char)
(37,SOCK_STREAM)
(38,if (connect(connectSocket, (struct sockaddr*)
(39,inputBuffer)
(40,recvResult)
(41,2)
(42,connectSocket)
(43,atoi(inputBuffer)
(44,char)
(45,WSAStartup(MAKEWORD(2,2)
(46,service)
(47,if (recvResult == SOCKET_ERROR || recvResult == 0)
(48,filename)
(49,connectSocket)
(50,connect(connectSocket, (struct sockaddr*)
(51,SOCKET_ERROR)
(52,inputBuffer)
(53,RET)
(54,\'\\0\')
(55,)
(56,"w+")
(57,service)
(58,pFile)
(59,MAKEWORD(2,2)
(60,-1)
(61,(struct sockaddr*)
(62,inputBuffer)
(63,i = 0)
(64,count)
(65,count)
(66,IP_ADDRESS)
(67,WSAStartup(MAKEWORD(2,2)
(68,recvResult)
(69,2)
(70,pFile = fopen(filename, "w+")
(71,WSACleanup()
(72,break;)
(73,sin_port)
(74,)
(75,recvResult == SOCKET_ERROR || recvResult == 0)
(76,recvResult == SOCKET_ERROR)
(77,SENTENCE)
(78,inputBuffer[recvResult])
(79,INVALID_SOCKET)
(80,i = 0)
(81,recvResult)
(82,struct sockaddr*)
(83,count)
(84,connectSocket)
(85,sin_addr)
(86,*filename = "output_bad.txt")
(87,)
(88,wsaDataInit)
(89,AF_INET)
(90,INVALID_SOCKET)
(91,wsaDataInit = 0)
(92,pFile)
(93,1)
(94,recvResult = recv(connectSocket, inputBuffer, CHAR_ARRAY_SIZE - 1, 0)
(95,0)
(96,i)
(97,(size_t)
(98,&service)
(99,connectSocket != INVALID_SOCKET)
(100,connectSocket = INVALID_SOCKET)
(101,wsaDataInit)
(102,0)
(103,if (connectSocket == INVALID_SOCKET)
(104,if (wsaDataInit)
(105,do)
(106,pFile)
(107,)
(108,if(1)
(109,service.sin_port = htons(TCP_PORT)
(110,connectSocket)
(111,exit(1)
(112,1)
(113,)
(114,&wsaData)
(115,1)
(116,i++)
(117,filename)
(118,1)
(119,1)
(120,connectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP)
(121,exit(1)
(122,INVALID_SOCKET)
(123,count)
(124,i)
(125,count = -1)
(126,pFile)
(127,htons(TCP_PORT)
(128,pFile)
(129,service)
(130,inputBuffer)
(131,memset(&service, 0, sizeof(service)
(132,fopen(filename, "w+")
(133,recvResult)
(134,NULL)
(135,if (strlen(SENTENCE)
(136,)
(137,sizeof(service)
(138,break;)
(139,strlen(SENTENCE)
(140,0)
(141,NULL)
(142,connectSocket == INVALID_SOCKET)
(143,SENTENCE)
(144,pFile)
(145,connect(connectSocket, (struct sockaddr*)
(146,NO_ERROR)
(147,service)
(148,connectSocket)
(149,)
(150,"output_bad.txt")
(151,)
(152,*pFile = NULL)
(153,1)
(154,fclose(pFile)
(155,SOCKET_ERROR)
(156,0)
(157,i)
(158,)
(159,service)
(160,connectSocket)
(161,sizeof(service)
(162,strlen(SENTENCE)
(163,service)
(164,service.sin_addr.s_addr = inet_addr(IP_ADDRESS)
(165,service)
(166,strlen(SENTENCE)
(167,connectSocket)
(168,i)
(169,service.sin_addr)
(170,CHAR_ARRAY_SIZE)
(171,fwrite(SENTENCE, sizeof(char)
(172,inet_addr(IP_ADDRESS)
(173,wsaDataInit = 1)
(174,)
(175,filename)
(176,)
(177,if (connectSocket != INVALID_SOCKET)
(178,i)
(179,if (pFile == NULL)
(180,inputBuffer[recvResult] = \'\\0\')
(181,wsaData)
(182,service.sin_family)
(183,)
(184,s_addr)
(185,if (pFile)
(186,TCP_PORT)
(187,&service)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^