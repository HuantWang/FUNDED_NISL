-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(staticReturnsTrue())
    {
        {
            wchar_t * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the wcscpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > wcslen(HELLO_STRING))
            {
                myString = (wchar_t *)malloc(data*sizeof(wchar_t));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                wcscpy(myString, HELLO_STRING);
                printWLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
19,20
21,22
22,23
23,24
23,25
23,26
23,27
24,25
26,27
29,30
30,31
32,33
32,34
33,34
34,35
36,37
37,38
37,39
38,39
39,40
39,41
41,42
41,43
44,45
44,46
44,47
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
53,55
53,56
53,57
53,58
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
61,62
63,64
63,65
64,65
66,67
66,68
67,68
69,70
70,71
70,72
73,74
73,75
74,75
74,76
75,76
77,78
79,80
80,81
81,82
81,83
82,83
84,85
86,87
87,88
87,89
87,90
88,89
90,91
92,93
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
106,107
107,108
108,109
108,110
109,110
-----nextToken-----
2,4,9,11,15,16,20,25,27,28,31,35,40,42,43,47,50,52,57,60,62,65,68,71,72,76,78,83,85,89,91,93,97,99,103,105,110,111
-----computeFrom-----
13,14
13,15
45,46
45,47
55,56
55,57
66,67
66,68
74,75
74,76
-----guardedBy-----
52,93
47,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_bad(){    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_wchar_t_fscanf_08_bad
{    size_t data;    /* Initialize data */    data = 0;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(staticReturnsTrue())    {        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        {            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            wchar_t * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the wcscpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
wchar_t * myString;
wchar_t * myString;
wchar_t
* myString
*
myString
if (data > wcslen(HELLO_STRING))            {                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > wcslen(HELLO_STRING)
data
data
wcslen(HELLO_STRING)
wcslen
wcslen
HELLO_STRING
HELLO_STRING
{                myString = (wchar_t *)malloc(data*sizeof(wchar_t));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                wcscpy(myString, HELLO_STRING);                printWLine(myString);                free(myString);            }
myString = (wchar_t *)malloc(data*sizeof(wchar_t));
myString = (wchar_t *)malloc(data*sizeof(wchar_t))
myString
myString
(wchar_t *)malloc(data*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(data*sizeof(wchar_t))
malloc
malloc
data*sizeof(wchar_t)
data
data
sizeof(wchar_t)
wchar_t
wchar_t

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(myString, HELLO_STRING);
wcscpy(myString, HELLO_STRING)
wcscpy
wcscpy
myString
myString
HELLO_STRING
HELLO_STRING
printWLine(myString);
printWLine(myString)
printWLine
printWLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(22,3,0)
(33,1,0)
(37,22,0)
(5,40,0)
(27,44,0)
(31,41,0)
(20,42,0)
(43,26,0)
(48,1,0)
(51,10,0)
(16,30,0)
(15,1,0)
(11,42,0)
(41,28,0)
(39,8,0)
(3,36,0)
(30,33,0)
(12,22,0)
(32,36,0)
(42,11,0)
(43,29,0)
(25,10,0)
(24,16,0)
(26,43,0)
(49,47,0)
(20,14,0)
(2,3,0)
(21,33,0)
(35,41,0)
(10,25,0)
(25,33,0)
(34,30,0)
(42,3,0)
(19,8,0)
(14,33,0)
(46,16,0)
(40,3,0)
(50,2,0)
(22,36,0)
(45,1,0)
(2,36,0)
(47,17,0)
(16,38,0)
(13,33,0)
(44,14,0)
(3,42,0)
(14,20,0)
(42,20,0)
(0,14,0)
(23,26,0)
(40,36,0)
(14,44,0)
(30,16,0)
(8,3,0)
(4,3,0)
(18,25,0)
(27,0,1)
(30,34,1)
(6,7,1)
(2,3,1)
(34,24,1)
(26,23,1)
(3,42,1)
(44,27,1)
(12,37,1)
(9,6,1)
(9,40,1)
(22,3,1)
(0,4,1)
(39,19,1)
(20,14,1)
(8,39,1)
(21,13,1)
(23,8,1)
(8,3,1)
(24,46,1)
(7,33,1)
(4,25,1)
(5,2,1)
(46,7,1)
(14,44,1)
(22,12,1)
(47,49,1)
(2,50,1)
(37,43,1)
(14,33,1)
(42,11,1)
(51,18,1)
(43,26,1)
(6,16,1)
(16,30,1)
(30,33,1)
(25,10,1)
(18,6,1)
(40,3,1)
(40,5,1)
(9,47,1)
(10,51,1)
(37,8,1)
(42,20,1)
(19,3,1)
(25,33,1)
(49,25,1)
(50,22,1)
(33,21,1)
(14,25,2)
(20,14,2)
(42,11,2)
(10,6,2)
(4,25,2)
(46,7,2)
(30,7,2)
(44,25,2)
(14,33,2)
(24,7,2)
(34,7,2)
(27,25,2)
(14,44,2)
(39,25,2)
(26,8,2)
(8,25,2)
(51,6,2)
(2,25,2)
(49,25,2)
(37,25,2)
(19,25,2)
(25,33,2)
(18,6,2)
(20,25,2)
(22,25,2)
(25,6,2)
(47,25,2)
(43,8,2)
(42,20,2)
(40,3,2)
(40,25,2)
(23,8,2)
(3,42,2)
(16,7,2)
(5,25,2)
(12,25,2)
(0,25,2)
(3,25,2)
(16,30,2)
(25,10,2)
(30,33,2)
(2,3,2)
(43,26,2)
(42,25,2)
(22,3,2)
(50,25,2)
(8,3,2)
-----------------------------------
(0,data)
(1,)
(2,printWLine(myString)
(3,myString = (wchar_t *)
(4,myString)
(5,myString)
(6,staticReturnsTrue()
(7,staticReturnsTrue()
(8,myString == NULL)
(9,RET)
(10,wcslen(HELLO_STRING)
(11,wchar_t *)
(12,HELLO_STRING)
(13,data)
(14,data*sizeof(wchar_t)
(15,if(staticReturnsTrue()
(16,fscanf(stdin, "%zu", &data)
(17,)
(18,data)
(19,myString)
(20,malloc(data*sizeof(wchar_t)
(21,0)
(22,wcscpy(myString, HELLO_STRING)
(23,1)
(24,"%zu")
(25,data > wcslen(HELLO_STRING)
(26,-1)
(27,wchar_t)
(28,)
(29,)
(30,&data)
(31,if (data > wcslen(HELLO_STRING)
(32,if (myString == NULL)
(33,data = 0)
(34,data)
(35,myString)
(36,)
(37,myString)
(38,)
(39,NULL)
(40,free(myString)
(41,)
(42,(wchar_t *)
(43,exit(-1)
(44,sizeof(wchar_t)
(45,if(staticReturnsTrue()
(46,stdin)
(47,printLine("Input is less than the length of the source string")
(48,data)
(49,"Input is less than the length of the source string")
(50,myString)
(51,HELLO_STRING)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^