-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_calloc_15_bad()
{
    wchar_t * data;
    data = NULL;
    switch(6)
    {
    case 6:
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)calloc(100, sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    switch(7)
    {
    case 7:
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
20,26
20,27
20,28
20,29
21,22
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
60,61
61,62
61,63
62,63
64,65
68,69
69,70
69,71
70,71
74,75
74,76
76,77
76,78
76,79
76,80
76,81
76,82
77,78
82,83
83,84
83,85
84,85
-----nextToken-----
2,4,8,10,11,15,17,19,22,26,29,31,34,35,38,39,43,45,50,52,56,58,59,63,65,66,67,71,72,73,75,78,79,80,81,85,86,87
-----computeFrom-----
13,14
13,15
24,25
24,26
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;NullStatement;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_calloc_15_bad(){    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
void
CWE401_Memory_Leak__wchar_t_calloc_15_bad()
CWE401_Memory_Leak__wchar_t_calloc_15_bad
{    wchar_t * data;    data = NULL;    switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
switch(6)    {    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)calloc(100, sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
data = (wchar_t *)calloc(100, sizeof(wchar_t));
data = (wchar_t *)calloc(100, sizeof(wchar_t))
data
data
(wchar_t *)calloc(100, sizeof(wchar_t))
wchar_t *
wchar_t
*
*
calloc(100, sizeof(wchar_t))
calloc
calloc
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
switch(7)    {    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
7
{    case 7:        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 7:
7
;
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
-----joern-----
(15,8,0)
(9,10,0)
(3,13,0)
(11,13,0)
(1,19,0)
(12,23,0)
(11,21,0)
(21,11,0)
(21,16,0)
(34,10,0)
(29,21,0)
(40,23,0)
(17,19,0)
(3,19,0)
(8,13,0)
(11,6,0)
(31,23,0)
(33,39,0)
(0,16,0)
(36,5,0)
(27,19,0)
(39,33,0)
(42,19,0)
(18,10,0)
(16,21,0)
(13,19,0)
(26,13,0)
(13,11,0)
(2,23,0)
(4,12,0)
(37,19,0)
(32,1,0)
(5,10,0)
(6,11,0)
(22,3,0)
(39,41,0)
(14,8,0)
(28,5,0)
(20,19,0)
(30,33,0)
(24,23,0)
(38,42,1)
(7,24,1)
(8,13,1)
(1,32,1)
(29,26,1)
(25,5,1)
(31,38,1)
(11,21,1)
(3,13,1)
(5,36,1)
(21,16,1)
(22,8,1)
(33,30,1)
(3,22,1)
(12,4,1)
(42,3,1)
(11,6,1)
(4,38,1)
(38,17,1)
(14,13,1)
(24,12,1)
(22,39,1)
(0,29,1)
(26,25,1)
(32,25,1)
(15,14,1)
(16,0,1)
(39,33,1)
(17,1,1)
(13,11,1)
(8,15,1)
(30,8,1)
(36,28,1)
(7,31,1)
(8,13,2)
(33,8,2)
(24,38,2)
(29,25,2)
(39,8,2)
(3,13,2)
(17,25,2)
(31,38,2)
(12,38,2)
(21,25,2)
(30,8,2)
(0,25,2)
(13,11,2)
(13,25,2)
(32,25,2)
(15,25,2)
(3,25,2)
(42,25,2)
(39,33,2)
(22,25,2)
(11,6,2)
(11,21,2)
(1,25,2)
(14,25,2)
(8,25,2)
(16,25,2)
(26,25,2)
(11,25,2)
(4,38,2)
(21,16,2)
-----------------------------------
(0,wchar_t)
(1,printLine("Benign, fixed string")
(2,case 7:)
(3,printWLine(data)
(4,"Benign, fixed string")
(5,data = NULL)
(6,wchar_t *)
(7,RET)
(8,data == NULL)
(9,data)
(10,)
(11,(wchar_t *)
(12,printLine("Benign, fixed string")
(13,data = (wchar_t *)
(14,data)
(15,NULL)
(16,sizeof(wchar_t)
(17,break;)
(18,switch(6)
(19,)
(20,case 6:)
(21,calloc(100, sizeof(wchar_t)
(22,data)
(23,)
(24,break;)
(25,6)
(26,data)
(27,default:)
(28,data)
(29,100)
(30,1)
(31,break;)
(32,"Benign, fixed string")
(33,-1)
(34,switch(7)
(35, sizeof(wchar_t)
(36,NULL)
(37,if (data == NULL)
(38,7)
(39,exit(-1)
(40,default:)
(41,)
(42,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^