-----label-----
0
-----code-----
static void good2()
{
    if(1)
    {
        {
            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
            if (data == NULL) {exit(-1);}
            twoIntsStruct * tmpData;
            /* Initialize and make use of data */
            data[0].intOne = 0;
            data[0].intTwo = 0;
            printStructLine(&data[0]);
            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
            /* FIX: Ensure realloc() was successful before assigning data to the memory block
            * allocated with realloc() */
            if (tmpData != NULL)
            {
                data = tmpData;
                /* Reinitialize and make use of data */
                data[0].intOne = 1;
                data[0].intTwo = 1;
                printStructLine(&data[0]);
            }
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
8,9
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
20,21
22,23
24,25
24,26
25,26
27,28
27,29
29,30
30,31
30,32
31,32
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
85,87
86,87
86,88
87,88
89,90
91,92
91,93
91,94
92,93
94,95
96,97
96,98
97,98
99,100
100,101
100,102
101,102
104,105
104,106
105,106
105,107
106,107
108,109
110,111
110,112
110,113
110,114
111,112
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
119,121
120,121
120,122
121,122
126,127
127,128
127,129
128,129
128,130
129,130
129,131
130,131
135,136
136,137
136,138
137,138
139,140
140,141
140,142
141,142
144,145
145,146
145,147
146,147
148,149
-----nextToken-----
2,4,7,13,15,16,21,23,26,28,32,33,37,39,44,46,50,52,53,59,60,61,62,68,69,70,71,75,79,80,84,88,90,93,95,98,102,103,107,109,114,116,122,123,124,125,131,132,133,134,138,142,143,147,149
-----computeFrom-----
27,28
27,29
35,36
35,37
55,56
55,57
64,65
64,66
82,83
82,84
96,97
96,98
105,106
105,107
112,113
112,114
118,119
118,120
127,128
127,129
-----guardedBy-----
107,116
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good2(){    if(1)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }}
static void
good2()
good2
{    if(1)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }}
if(1)    {        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }
1
{        {            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }    }
{            twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));            if (data == NULL) {exit(-1);}            twoIntsStruct * tmpData;            /* Initialize and make use of data */            data[0].intOne = 0;            data[0].intTwo = 0;            printStructLine(&data[0]);            tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));            /* FIX: Ensure realloc() was successful before assigning data to the memory block            * allocated with realloc() */            if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }            free(data);        }
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct * data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct));
twoIntsStruct
twoIntsStruct
* data = (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
*
data
= (twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
(twoIntsStruct *)malloc(100*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
malloc(100*sizeof(twoIntsStruct))
malloc
malloc
100*sizeof(twoIntsStruct)
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
twoIntsStruct * tmpData;
twoIntsStruct * tmpData;
twoIntsStruct
twoIntsStruct
* tmpData
*
tmpData
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct));
tmpData = (twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
tmpData
tmpData
(twoIntsStruct *)realloc(data, (130000)*sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
realloc(data, (130000)*sizeof(twoIntsStruct))
realloc
realloc
data
data
(130000)*sizeof(twoIntsStruct)
(130000)
130000
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (tmpData != NULL)            {                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{                data = tmpData;                /* Reinitialize and make use of data */                data[0].intOne = 1;                data[0].intTwo = 1;                printStructLine(&data[0]);            }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0].intOne = 1;
data[0].intOne = 1
data[0].intOne
data[0]
data
data
0
intOne
1
data[0].intTwo = 1;
data[0].intTwo = 1
data[0].intTwo
data[0]
data
data
0
intTwo
1
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(70,35,0)
(9,1,0)
(17,11,0)
(43,82,0)
(35,24,0)
(12,18,0)
(82,50,0)
(26,6,0)
(62,37,0)
(46,82,0)
(32,39,0)
(19,37,0)
(56,50,0)
(49,14,0)
(31,74,0)
(40,15,0)
(2,46,0)
(41,54,0)
(54,41,0)
(18,26,0)
(37,5,0)
(36,5,0)
(23,19,0)
(48,14,0)
(6,30,0)
(18,68,0)
(11,17,0)
(47,44,0)
(60,67,0)
(50,27,0)
(62,82,0)
(50,82,0)
(72,6,0)
(45,68,0)
(0,67,0)
(76,11,0)
(46,11,0)
(13,19,0)
(67,0,0)
(21,6,0)
(4,41,0)
(58,19,0)
(69,74,0)
(74,31,0)
(63,17,0)
(3,68,0)
(37,14,0)
(41,4,0)
(15,75,0)
(52,6,0)
(16,36,0)
(75,1,0)
(66,6,0)
(24,59,0)
(82,6,0)
(23,36,0)
(10,37,0)
(34,49,0)
(24,35,0)
(59,5,0)
(39,44,0)
(49,46,0)
(46,49,0)
(42,14,0)
(22,26,0)
(79,82,0)
(49,34,0)
(39,37,0)
(81,75,0)
(50,56,0)
(80,48,0)
(77,62,0)
(11,46,0)
(47,5,0)
(62,6,0)
(44,39,0)
(44,47,0)
(68,18,0)
(68,82,0)
(28,71,0)
(55,4,0)
(53,4,0)
(67,56,0)
(19,23,0)
(15,82,0)
(20,39,0)
(4,82,0)
(27,50,0)
(1,6,0)
(38,35,0)
(14,49,0)
(33,59,0)
(51,43,0)
(14,6,0)
(73,23,0)
(7,0,0)
(54,6,0)
(65,37,0)
(56,67,0)
(75,15,0)
(31,61,0)
(25,48,0)
(8,24,0)
(57,15,0)
(29,43,0)
(35,37,0)
(53,1,1)
(19,13,1)
(62,82,1)
(67,0,1)
(41,4,1)
(77,48,1)
(32,20,1)
(36,16,1)
(25,14,1)
(24,35,1)
(18,68,1)
(44,39,1)
(39,32,1)
(63,76,1)
(15,82,1)
(46,82,1)
(20,36,1)
(48,14,1)
(47,44,1)
(7,60,1)
(26,22,1)
(76,2,1)
(51,82,1)
(81,15,1)
(16,23,1)
(42,54,1)
(4,82,1)
(10,48,1)
(40,26,1)
(22,18,1)
(17,63,1)
(59,33,1)
(50,56,1)
(49,34,1)
(50,27,1)
(60,79,1)
(11,17,1)
(79,64,1)
(75,81,1)
(23,73,1)
(19,37,1)
(39,37,1)
(43,29,1)
(73,19,1)
(74,69,1)
(2,42,1)
(78,62,1)
(58,59,1)
(37,14,1)
(48,80,1)
(69,43,1)
(70,38,1)
(68,45,1)
(35,37,1)
(15,57,1)
(24,8,1)
(13,58,1)
(31,74,1)
(3,31,1)
(49,46,1)
(43,82,1)
(77,47,1)
(62,77,1)
(80,25,1)
(62,37,1)
(9,75,1)
(14,49,1)
(54,41,1)
(37,65,1)
(33,24,1)
(82,50,1)
(75,15,1)
(3,43,1)
(78,64,1)
(38,37,1)
(18,12,1)
(29,51,1)
(65,10,1)
(68,82,1)
(12,68,1)
(45,3,1)
(0,7,1)
(8,35,1)
(35,70,1)
(55,53,1)
(57,40,1)
(46,11,1)
(4,55,1)
(56,67,1)
(1,9,1)
(23,19,1)
(43,64,2)
(42,64,2)
(40,64,2)
(16,48,2)
(38,48,2)
(12,64,2)
(1,64,2)
(41,4,2)
(37,14,2)
(69,43,2)
(50,56,2)
(62,37,2)
(49,34,2)
(14,64,2)
(17,64,2)
(54,64,2)
(80,64,2)
(49,46,2)
(70,48,2)
(15,82,2)
(11,17,2)
(44,39,2)
(55,64,2)
(9,64,2)
(73,48,2)
(62,64,2)
(74,43,2)
(25,64,2)
(47,44,2)
(82,50,2)
(35,48,2)
(4,82,2)
(81,64,2)
(63,64,2)
(68,64,2)
(24,48,2)
(2,64,2)
(62,82,2)
(39,48,2)
(29,64,2)
(36,48,2)
(65,48,2)
(23,48,2)
(82,64,2)
(59,48,2)
(18,64,2)
(46,11,2)
(43,82,2)
(67,0,2)
(49,64,2)
(77,64,2)
(45,64,2)
(47,48,2)
(53,64,2)
(37,48,2)
(41,64,2)
(24,35,2)
(7,64,2)
(26,64,2)
(76,64,2)
(20,48,2)
(23,19,2)
(54,41,2)
(31,43,2)
(67,64,2)
(8,48,2)
(58,48,2)
(31,74,2)
(79,64,2)
(19,48,2)
(0,64,2)
(14,49,2)
(4,64,2)
(75,15,2)
(50,64,2)
(18,68,2)
(22,64,2)
(35,37,2)
(48,64,2)
(13,48,2)
(46,64,2)
(11,64,2)
(48,14,2)
(56,64,2)
(3,64,2)
(57,64,2)
(51,64,2)
(44,48,2)
(39,37,2)
(33,48,2)
(60,64,2)
(50,27,2)
(56,67,2)
(32,48,2)
(19,37,2)
(75,64,2)
(15,64,2)
(68,82,2)
(46,82,2)
(10,48,2)
-----------------------------------
(0,sizeof(twoIntsStruct)
(1,data[0].intTwo = 0)
(2,data)
(3,data)
(4,data[0])
(5,)
(6,)
(7,twoIntsStruct)
(8,intOne)
(9,0)
(10,data)
(11,(130000)
(12,intOne)
(13,0)
(14,tmpData = (twoIntsStruct *)
(15,data[0])
(16,1)
(17,sizeof(twoIntsStruct)
(18,data[0].intOne)
(19,data[0])
(20,data)
(21,data)
(22,0)
(23,data[0].intTwo)
(24,data[0].intOne)
(25,tmpData)
(26,data[0].intOne = 0)
(27,twoIntsStruct *)
(28,if(1)
(29,NULL)
(30,)
(31,exit(-1)
(32,0)
(33,1)
(34,twoIntsStruct *)
(35,data[0])
(36,data[0].intTwo = 1)
(37,data = tmpData)
(38,data)
(39,data[0])
(40,data)
(41,&data[0])
(42,tmpData)
(43,data == NULL)
(44,&data[0])
(45,0)
(46,realloc(data, (130000)
(47,printStructLine(&data[0])
(48,tmpData != NULL)
(49,(twoIntsStruct *)
(50,(twoIntsStruct *)
(51,data)
(52,tmpData)
(53,data)
(54,printStructLine(&data[0])
(55,0)
(56,malloc(100*sizeof(twoIntsStruct)
(57,0)
(58,data)
(59,data[0].intOne = 1)
(60,100)
(61,)
(62,free(data)
(63,twoIntsStruct)
(64,1)
(65,tmpData)
(66,if (tmpData != NULL)
(67,100*sizeof(twoIntsStruct)
(68,data[0])
(69,1)
(70,0)
(71,)
(72,if (data == NULL)
(73,intTwo)
(74,-1)
(75,data[0].intTwo)
(76,130000)
(77,data)
(78,RET)
(79,data)
(80,NULL)
(81,intTwo)
(82,* data = (twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^