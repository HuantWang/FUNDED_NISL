-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_06_bad()
{
    if(STATIC_CONST_FIVE==5)
    {
        {
            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
            if (data == NULL) {exit(-1);}
            /* Initialize and make use of data */
            wcscpy(data, L"A String");
            printWLine(data);
            /* FLAW: If realloc() fails, the initial memory block will not be freed() */
            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
            if (data != NULL)
            {
                /* Reinitialize and make use of data */
                wcscpy(data, L"New String");
                printWLine(data);
                free(data);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
6,7
6,8
7,8
7,9
8,9
11,12
12,13
12,14
12,15
12,16
12,17
12,18
13,14
14,15
14,16
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
23,24
25,26
25,27
26,27
28,29
28,30
30,31
31,32
31,33
34,35
34,36
35,36
35,37
36,37
38,39
40,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
89,92
90,91
92,93
95,96
96,97
96,98
97,98
99,100
101,102
102,103
102,104
103,104
105,106
-----nextToken-----
2,4,9,10,15,17,18,22,24,27,29,32,33,37,39,44,46,50,52,53,57,59,63,66,68,71,73,76,79,80,84,86,91,93,94,98,100,104,106
-----computeFrom-----
7,8
7,9
28,29
28,30
35,36
35,37
61,62
61,63
74,75
74,76
82,83
82,84
-----guardedBy-----
84,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_wchar_t_06_bad(){    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
void
CWE401_Memory_Leak__malloc_realloc_wchar_t_06_bad()
CWE401_Memory_Leak__malloc_realloc_wchar_t_06_bad
{    if(STATIC_CONST_FIVE==5)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }}
if(STATIC_CONST_FIVE==5)    {        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        {            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }    }
{            wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));            if (data == NULL) {exit(-1);}            /* Initialize and make use of data */            wcscpy(data, L"A String");            printWLine(data);            /* FLAW: If realloc() fails, the initial memory block will not be freed() */            data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));            if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }        }
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t * data = (wchar_t *)malloc(100*sizeof(wchar_t));
wchar_t
* data = (wchar_t *)malloc(100*sizeof(wchar_t))
*
data
= (wchar_t *)malloc(100*sizeof(wchar_t))
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t));
data = (wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
data
data
(wchar_t *)realloc(data, (130000)*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
realloc(data, (130000)*sizeof(wchar_t))
realloc
realloc
data
data
(130000)*sizeof(wchar_t)
(130000)
130000
sizeof(wchar_t)
wchar_t
wchar_t

if (data != NULL)            {                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
data != NULL
data
data
NULL
NULL
{                /* Reinitialize and make use of data */                wcscpy(data, L"New String");                printWLine(data);                free(data);            }
wcscpy(data, L"New String");
wcscpy(data, L"New String")
wcscpy
wcscpy
data
data
L"New String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
free(data);
free(data)
free
free
data
data
-----joern-----
(35,16,0)
(19,45,0)
(27,42,0)
(29,19,0)
(8,35,0)
(37,32,0)
(30,7,0)
(26,40,0)
(11,13,0)
(28,20,0)
(24,39,0)
(2,34,0)
(13,7,0)
(41,36,0)
(34,19,0)
(33,19,0)
(16,32,0)
(16,3,0)
(23,2,0)
(32,16,0)
(15,18,0)
(4,17,0)
(3,16,0)
(43,38,0)
(24,35,0)
(5,25,0)
(36,41,0)
(22,18,0)
(25,5,0)
(42,20,0)
(8,39,0)
(38,34,0)
(36,14,0)
(13,32,0)
(46,8,0)
(20,42,0)
(6,35,0)
(9,41,0)
(5,34,0)
(32,13,0)
(31,34,0)
(42,0,0)
(38,19,0)
(18,35,0)
(1,17,0)
(12,2,0)
(7,13,0)
(5,0,0)
(32,34,0)
(0,5,0)
(16,35,0)
(0,42,0)
(10,19,0)
(35,19,0)
(44,24,0)
(34,5,0)
(17,4,1)
(15,22,1)
(16,32,1)
(43,36,1)
(43,2,1)
(0,42,1)
(18,15,1)
(34,5,1)
(20,28,1)
(24,44,1)
(9,2,1)
(22,35,1)
(5,25,1)
(2,34,1)
(5,0,1)
(41,9,1)
(36,41,1)
(16,3,1)
(44,8,1)
(8,46,1)
(21,18,1)
(11,37,1)
(38,34,1)
(46,18,1)
(30,11,1)
(35,16,1)
(27,31,1)
(38,43,1)
(21,24,1)
(24,35,1)
(32,34,1)
(37,6,1)
(8,35,1)
(28,27,1)
(18,35,1)
(13,7,1)
(32,13,1)
(4,1,1)
(31,17,1)
(6,38,1)
(2,12,1)
(7,30,1)
(12,23,1)
(42,20,1)
(21,17,1)
(23,34,1)
(36,2,2)
(42,17,2)
(5,0,2)
(38,34,2)
(13,7,2)
(12,17,2)
(32,17,2)
(38,17,2)
(16,3,2)
(31,17,2)
(24,18,2)
(8,18,2)
(5,25,2)
(27,17,2)
(22,17,2)
(37,17,2)
(2,34,2)
(42,20,2)
(23,17,2)
(35,17,2)
(13,17,2)
(30,17,2)
(36,41,2)
(7,17,2)
(35,16,2)
(5,17,2)
(24,35,2)
(0,17,2)
(18,17,2)
(6,17,2)
(34,5,2)
(41,2,2)
(43,17,2)
(15,17,2)
(16,17,2)
(32,13,2)
(34,17,2)
(32,34,2)
(28,17,2)
(11,17,2)
(8,35,2)
(20,17,2)
(0,42,2)
(18,35,2)
(9,2,2)
(46,18,2)
(16,32,2)
(44,18,2)
(2,17,2)
-----------------------------------
(0,malloc(100*sizeof(wchar_t)
(1,STATIC_CONST_FIVE)
(2,data == NULL)
(3,wchar_t *)
(4,5)
(5,(wchar_t *)
(6,data)
(7,sizeof(wchar_t)
(8,printWLine(data)
(9,1)
(10,if (data == NULL)
(11,130000)
(12,NULL)
(13,(130000)
(14,)
(15,NULL)
(16,(wchar_t *)
(17,STATIC_CONST_FIVE==5)
(18,data != NULL)
(19,)
(20,sizeof(wchar_t)
(21,RET)
(22,data)
(23,data)
(24,free(data)
(25,wchar_t *)
(26,if(STATIC_CONST_FIVE==5)
(27,100)
(28,wchar_t)
(29,data)
(30,wchar_t)
(31,data)
(32,realloc(data, (130000)
(33,if (data != NULL)
(34,* data = (wchar_t *)
(35,data = (wchar_t *)
(36,exit(-1)
(37,data)
(38,printWLine(data)
(39,)
(40,)
(41,-1)
(42,100*sizeof(wchar_t)
(43,data)
(44,data)
(45,)
(46,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^