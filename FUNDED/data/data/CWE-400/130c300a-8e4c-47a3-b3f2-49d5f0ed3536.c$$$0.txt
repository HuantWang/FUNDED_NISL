-----label-----
0
-----code-----
static void goodG2B2()
{
    int64_t * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (int64_t *)ALLOCA(100*sizeof(int64_t));
        /* Initialize and make use of data */
        data[0] = 5LL;
        printLongLongLine(data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
45,46
45,47
46,47
46,48
47,48
51,52
52,53
52,54
53,54
55,56
55,57
56,57
59,60
59,61
60,61
61,62
63,64
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,48,49,50,54,57,58,62,64
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    int64_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    int64_t * data;    data = NULL;    if(staticReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int64_t * data;
int64_t * data;
int64_t
int64_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (int64_t *)ALLOCA(100*sizeof(int64_t));        /* Initialize and make use of data */        data[0] = 5LL;        printLongLongLine(data[0]);    }
data = (int64_t *)ALLOCA(100*sizeof(int64_t));
data = (int64_t *)ALLOCA(100*sizeof(int64_t))
data
data
(int64_t *)ALLOCA(100*sizeof(int64_t))
int64_t *
int64_t
int64_t
*
*
ALLOCA(100*sizeof(int64_t))
ALLOCA
ALLOCA
100*sizeof(int64_t)
100
sizeof(int64_t)
int64_t
int64_t
int64_t

data[0] = 5LL;
data[0] = 5LL
data[0]
data
data
0
5LL
printLongLongLine(data[0]);
printLongLongLine(data[0])
printLongLongLine
printLongLongLine
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(20,3,0)
(17,1,0)
(8,23,0)
(24,9,0)
(2,3,0)
(15,23,0)
(5,14,0)
(3,2,0)
(9,24,0)
(2,10,0)
(18,1,0)
(22,23,0)
(20,14,0)
(1,23,0)
(2,6,0)
(4,20,0)
(24,6,0)
(9,0,0)
(11,24,0)
(10,2,0)
(16,24,0)
(19,6,0)
(6,2,0)
(14,20,0)
(12,0,0)
(3,20,0)
(6,0,0)
(7,1,1)
(2,10,1)
(19,7,1)
(6,2,1)
(1,17,1)
(12,6,1)
(4,19,1)
(20,14,1)
(21,9,1)
(24,16,1)
(9,24,1)
(5,4,1)
(11,12,1)
(17,18,1)
(16,11,1)
(13,21,1)
(24,6,1)
(14,5,1)
(3,20,1)
(2,3,1)
(21,7,1)
(20,14,2)
(6,7,2)
(24,6,2)
(3,20,2)
(9,7,2)
(9,24,2)
(6,2,2)
(16,7,2)
(2,7,2)
(24,7,2)
(3,7,2)
(5,7,2)
(4,7,2)
(19,7,2)
(20,7,2)
(11,7,2)
(2,10,2)
(12,7,2)
(2,3,2)
(14,7,2)
-----------------------------------
(0,)
(1,data = NULL)
(2,(int64_t *)
(3,ALLOCA(100*sizeof(int64_t)
(4,100)
(5,int64_t)
(6,data = (int64_t *)
(7,staticReturnsTrue()
(8,if(staticReturnsTrue()
(9,printLongLongLine(data[0])
(10,int64_t *)
(11,data)
(12,L)
(13,RET)
(14,sizeof(int64_t)
(15,if(staticReturnsTrue()
(16,0)
(17,NULL)
(18,data)
(19,data)
(20,100*sizeof(int64_t)
(21,staticReturnsTrue()
(22,data)
(23,)
(24,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^