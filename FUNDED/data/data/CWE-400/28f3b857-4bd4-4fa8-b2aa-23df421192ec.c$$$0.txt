-----label-----
1
-----code-----
static int
process_put(struct sftp_conn *conn, char *src, char *dst, char *pwd, int pflag)
{
	char *tmp_dst = NULL;
	char *abs_dst = NULL;
	char *tmp;
	glob_t g;
	int err = 0;
	int i;

	if (dst) {
		tmp_dst = xstrdup(dst);
		tmp_dst = make_absolute(tmp_dst, pwd);
	}

	memset(&g, 0, sizeof(g));
	debug3("Looking up %s", src);
	if (glob(src, GLOB_LIMIT, NULL, &g)) {
		error("File \"%s\" not found.", src);
		err = -1;
		goto out;
	}

	/* If multiple matches, dst may be directory or unspecified */
	if (g.gl_matchc > 1 && tmp_dst && !remote_is_dir(conn, tmp_dst)) {
		error("Multiple files match, but \"%s\" is not a directory",
		    tmp_dst);
		err = -1;
		goto out;
	}

	for (i = 0; g.gl_pathv[i] && !interrupted; i++) {
		if (!is_reg(g.gl_pathv[i])) {
			error("skipping non-regular file %s",
			    g.gl_pathv[i]);
			continue;
		}
		if (infer_path(g.gl_pathv[i], &tmp)) {
			err = -1;
			goto out;
		}

		if (g.gl_matchc == 1 && tmp_dst) {
			/* If directory specified, append filename */
			if (remote_is_dir(conn, tmp_dst)) {
				if (infer_path(g.gl_pathv[0], &tmp)) {
					err = 1;
					goto out;
				}
				abs_dst = path_append(tmp_dst, tmp);
				xfree(tmp);
			} else
				abs_dst = xstrdup(tmp_dst);

		} else if (tmp_dst) {
			abs_dst = path_append(tmp_dst, tmp);
			xfree(tmp);
		} else
			abs_dst = make_absolute(tmp, pwd);

		printf(gettext("Uploading %s to %s\n"), g.gl_pathv[i], abs_dst);
		if (do_upload(conn, g.gl_pathv[i], abs_dst, pflag) == -1)
			err = -1;
	}

out:
	if (abs_dst)
		xfree(abs_dst);
	if (tmp_dst)
		xfree(tmp_dst);
	globfree(&g);
	return(err);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
18,20
21,22
21,23
23,24
23,25
26,27
26,28
28,29
30,31
30,32
30,33
30,34
30,35
30,36
30,37
30,38
30,39
30,40
30,41
30,42
30,43
30,44
30,45
30,46
31,32
32,33
32,34
34,35
34,36
34,37
37,38
38,39
40,41
41,42
41,43
43,44
43,45
43,46
46,47
47,48
49,50
50,51
50,52
52,53
52,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
64,65
64,66
66,67
68,69
69,70
69,71
71,72
73,74
73,75
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
82,83
84,85
86,87
87,88
87,89
88,89
90,91
90,92
90,93
91,92
93,94
95,96
97,98
98,99
98,100
98,101
98,102
99,100
101,102
102,103
105,106
106,107
107,108
109,110
110,111
110,112
110,113
111,112
114,115
116,117
116,118
117,118
117,119
117,120
117,121
117,122
118,119
120,121
122,123
124,125
126,127
127,128
129,130
129,131
129,132
130,131
131,132
131,133
131,134
132,133
135,136
137,138
138,139
138,140
139,140
141,142
143,144
145,146
145,147
146,147
146,148
147,148
147,149
148,149
148,150
149,150
149,151
150,151
154,155
156,157
157,158
157,159
157,160
158,159
160,161
162,163
164,165
164,166
164,167
165,166
166,167
166,168
166,169
167,168
170,171
172,173
173,174
173,175
174,175
176,177
178,179
180,181
180,182
180,183
180,184
181,182
182,183
182,184
183,184
186,187
186,188
187,188
187,189
188,189
188,190
189,190
192,193
194,195
195,196
197,198
198,199
200,201
200,202
200,203
200,204
200,205
201,202
201,203
202,203
203,204
203,205
204,205
206,207
206,208
207,208
207,209
208,209
211,212
213,214
213,215
214,215
215,216
215,217
215,218
216,217
219,220
219,221
220,221
220,222
221,222
224,225
227,228
227,229
228,229
228,230
228,231
229,230
231,232
231,233
232,233
232,234
233,234
236,237
238,239
239,240
241,242
241,243
242,243
243,244
243,245
244,245
246,247
248,249
250,251
250,252
250,253
251,252
251,253
252,253
252,254
253,254
253,255
254,255
258,259
260,261
261,262
261,263
261,264
262,263
262,264
262,265
263,264
265,266
267,268
269,270
269,271
269,272
270,271
270,272
271,272
271,273
271,274
272,273
274,275
274,276
275,276
275,277
276,277
280,281
281,282
283,284
283,285
284,285
285,286
285,287
286,287
289,290
291,292
292,293
292,294
293,294
295,296
295,297
295,298
296,297
298,299
300,301
302,303
303,304
303,305
304,305
306,307
308,309
309,310
309,311
310,311
312,313
312,314
313,314
315,316
317,318
317,319
317,320
318,319
320,321
320,322
321,322
322,323
322,324
323,324
325,326
325,327
325,328
326,327
328,329
330,331
332,333
333,334
333,335
334,335
336,337
338,339
339,340
339,341
340,341
342,343
342,344
342,345
343,344
345,346
347,348
349,350
350,351
350,352
350,353
350,354
351,352
353,354
353,355
354,355
357,358
357,359
358,359
358,360
359,360
362,363
364,365
366,367
366,368
367,368
367,369
368,369
368,370
368,371
368,372
368,373
369,370
371,372
373,374
373,375
374,375
374,376
375,376
378,379
380,381
382,383
384,385
386,387
387,388
387,389
388,389
390,391
392,393
392,394
394,395
394,396
395,396
397,398
398,399
398,400
399,400
401,402
403,404
403,405
404,405
406,407
407,408
407,409
408,409
410,411
412,413
413,414
413,415
414,415
416,417
417,418
419,420
420,421
421,422
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,20,22,24,25,27,29,33,35,36,39,42,44,45,48,51,53,54,58,60,63,65,67,70,72,75,80,83,85,89,92,94,96,100,103,104,108,112,113,115,119,121,123,125,128,133,134,136,140,142,144,151,152,153,155,159,161,163,168,169,171,175,177,179,184,185,190,191,193,196,199,205,209,210,212,217,218,222,223,225,226,230,234,235,237,240,245,247,249,255,256,257,259,264,266,268,273,277,278,279,282,287,288,290,294,297,299,301,305,307,311,314,316,319,324,327,329,331,335,337,341,344,346,348,352,355,356,360,361,363,365,370,372,376,377,379,381,383,385,389,391,393,396,400,402,405,409,411,415,418,422
-----computeFrom-----
78,79
78,80
87,88
87,89
138,139
138,140
146,147
146,148
147,148
147,149
148,149
148,150
173,174
173,175
182,183
182,184
186,187
186,188
243,244
243,245
251,252
251,253
252,253
252,254
285,286
285,287
292,293
292,294
309,310
309,311
322,323
322,324
339,340
339,341
367,368
367,369
387,388
387,389
-----guardedBy-----
163,171
255,277
259,316
-----guardedByNegation-----
259,329
-----lastLexicalUse-----
259,329
-----jump-----
259,329
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ContinueStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;LabelStatement;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static intprocess_put(struct sftp_conn *conn, char *src, char *dst, char *pwd, int pflag){	char *tmp_dst = NULL;	char *abs_dst = NULL;	char *tmp;	glob_t g;	int err = 0;	int i;	if (dst) {		tmp_dst = xstrdup(dst);		tmp_dst = make_absolute(tmp_dst, pwd);	}	memset(&g, 0, sizeof(g));	debug3("Looking up %s", src);	if (glob(src, GLOB_LIMIT, NULL, &g)) {		error("File \"%s\" not found.", src);		err = -1;		goto out;	}	/* If multiple matches, dst may be directory or unspecified */	if (g.gl_matchc > 1 && tmp_dst && !remote_is_dir(conn, tmp_dst)) {		error("Multiple files match, but \"%s\" is not a directory",		    tmp_dst);		err = -1;		goto out;	}	for (i = 0; g.gl_pathv[i] && !interrupted; i++) {		if (!is_reg(g.gl_pathv[i])) {			error("skipping non-regular file %s",			    g.gl_pathv[i]);			continue;		}		if (infer_path(g.gl_pathv[i], &tmp)) {			err = -1;			goto out;		}		if (g.gl_matchc == 1 && tmp_dst) {			/* If directory specified, append filename */			if (remote_is_dir(conn, tmp_dst)) {				if (infer_path(g.gl_pathv[0], &tmp)) {					err = 1;					goto out;				}				abs_dst = path_append(tmp_dst, tmp);				xfree(tmp);			} else				abs_dst = xstrdup(tmp_dst);		} else if (tmp_dst) {			abs_dst = path_append(tmp_dst, tmp);			xfree(tmp);		} else			abs_dst = make_absolute(tmp, pwd);		printf(gettext("Uploading %s to %s\n"), g.gl_pathv[i], abs_dst);		if (do_upload(conn, g.gl_pathv[i], abs_dst, pflag) == -1)			err = -1;	}out:	if (abs_dst)		xfree(abs_dst);	if (tmp_dst)		xfree(tmp_dst);	globfree(&g);	return(err);}
static int
process_put(struct sftp_conn *conn, char *src, char *dst, char *pwd, int pflag)
process_put
struct sftp_conn *conn
struct sftp_conn
sftp_conn
*conn
*
conn
char *src
char
*src
*
src
char *dst
char
*dst
*
dst
char *pwd
char
*pwd
*
pwd
int pflag
int
pflag
pflag
{	char *tmp_dst = NULL;	char *abs_dst = NULL;	char *tmp;	glob_t g;	int err = 0;	int i;	if (dst) {		tmp_dst = xstrdup(dst);		tmp_dst = make_absolute(tmp_dst, pwd);	}	memset(&g, 0, sizeof(g));	debug3("Looking up %s", src);	if (glob(src, GLOB_LIMIT, NULL, &g)) {		error("File \"%s\" not found.", src);		err = -1;		goto out;	}	/* If multiple matches, dst may be directory or unspecified */	if (g.gl_matchc > 1 && tmp_dst && !remote_is_dir(conn, tmp_dst)) {		error("Multiple files match, but \"%s\" is not a directory",		    tmp_dst);		err = -1;		goto out;	}	for (i = 0; g.gl_pathv[i] && !interrupted; i++) {		if (!is_reg(g.gl_pathv[i])) {			error("skipping non-regular file %s",			    g.gl_pathv[i]);			continue;		}		if (infer_path(g.gl_pathv[i], &tmp)) {			err = -1;			goto out;		}		if (g.gl_matchc == 1 && tmp_dst) {			/* If directory specified, append filename */			if (remote_is_dir(conn, tmp_dst)) {				if (infer_path(g.gl_pathv[0], &tmp)) {					err = 1;					goto out;				}				abs_dst = path_append(tmp_dst, tmp);				xfree(tmp);			} else				abs_dst = xstrdup(tmp_dst);		} else if (tmp_dst) {			abs_dst = path_append(tmp_dst, tmp);			xfree(tmp);		} else			abs_dst = make_absolute(tmp, pwd);		printf(gettext("Uploading %s to %s\n"), g.gl_pathv[i], abs_dst);		if (do_upload(conn, g.gl_pathv[i], abs_dst, pflag) == -1)			err = -1;	}out:	if (abs_dst)		xfree(abs_dst);	if (tmp_dst)		xfree(tmp_dst);	globfree(&g);	return(err);}
char *tmp_dst = NULL;
char *tmp_dst = NULL;
char
*tmp_dst = NULL
*
tmp_dst
= NULL
NULL
NULL
char *abs_dst = NULL;
char *abs_dst = NULL;
char
*abs_dst = NULL
*
abs_dst
= NULL
NULL
NULL
char *tmp;
char *tmp;
char
*tmp
*
tmp
glob_t g;
glob_t g;
glob_t
glob_t
g
g
int err = 0;
int err = 0;
int
err = 0
err
= 0
0
int i;
int i;
int
i
i
if (dst) {		tmp_dst = xstrdup(dst);		tmp_dst = make_absolute(tmp_dst, pwd);	}
dst
dst
{		tmp_dst = xstrdup(dst);		tmp_dst = make_absolute(tmp_dst, pwd);	}
tmp_dst = xstrdup(dst);
tmp_dst = xstrdup(dst)
tmp_dst
tmp_dst
xstrdup(dst)
xstrdup
xstrdup
dst
dst
tmp_dst = make_absolute(tmp_dst, pwd);
tmp_dst = make_absolute(tmp_dst, pwd)
tmp_dst
tmp_dst
make_absolute(tmp_dst, pwd)
make_absolute
make_absolute
tmp_dst
tmp_dst
pwd
pwd
memset(&g, 0, sizeof(g));
memset(&g, 0, sizeof(g))
memset
memset
&g
g
g
0
sizeof(g)
(g)
g
g
debug3("Looking up %s", src);
debug3("Looking up %s", src)
debug3
debug3
"Looking up %s"
src
src
if (glob(src, GLOB_LIMIT, NULL, &g)) {		error("File \"%s\" not found.", src);		err = -1;		goto out;	}
glob(src, GLOB_LIMIT, NULL, &g)
glob
glob
src
src
GLOB_LIMIT
GLOB_LIMIT
NULL
NULL
&g
g
g
{		error("File \"%s\" not found.", src);		err = -1;		goto out;	}
error("File \"%s\" not found.", src);
error("File \"%s\" not found.", src)
error
error
"File \"%s\" not found."
src
src
err = -1;
err = -1
err
err
-1
1
goto out;
out
if (g.gl_matchc > 1 && tmp_dst && !remote_is_dir(conn, tmp_dst)) {		error("Multiple files match, but \"%s\" is not a directory",		    tmp_dst);		err = -1;		goto out;	}
g.gl_matchc > 1 && tmp_dst && !remote_is_dir(conn, tmp_dst)
g.gl_matchc > 1 && tmp_dst
g.gl_matchc > 1
g.gl_matchc
g
g
gl_matchc
1
tmp_dst
tmp_dst
!remote_is_dir(conn, tmp_dst)
remote_is_dir(conn, tmp_dst)
remote_is_dir
remote_is_dir
conn
conn
tmp_dst
tmp_dst
{		error("Multiple files match, but \"%s\" is not a directory",		    tmp_dst);		err = -1;		goto out;	}
error("Multiple files match, but \"%s\" is not a directory",		    tmp_dst);
error("Multiple files match, but \"%s\" is not a directory",		    tmp_dst)
error
error
"Multiple files match, but \"%s\" is not a directory"
tmp_dst
tmp_dst
err = -1;
err = -1
err
err
-1
1
goto out;
out
for (i = 0; g.gl_pathv[i] && !interrupted; i++) {		if (!is_reg(g.gl_pathv[i])) {			error("skipping non-regular file %s",			    g.gl_pathv[i]);			continue;		}		if (infer_path(g.gl_pathv[i], &tmp)) {			err = -1;			goto out;		}		if (g.gl_matchc == 1 && tmp_dst) {			/* If directory specified, append filename */			if (remote_is_dir(conn, tmp_dst)) {				if (infer_path(g.gl_pathv[0], &tmp)) {					err = 1;					goto out;				}				abs_dst = path_append(tmp_dst, tmp);				xfree(tmp);			} else				abs_dst = xstrdup(tmp_dst);		} else if (tmp_dst) {			abs_dst = path_append(tmp_dst, tmp);			xfree(tmp);		} else			abs_dst = make_absolute(tmp, pwd);		printf(gettext("Uploading %s to %s\n"), g.gl_pathv[i], abs_dst);		if (do_upload(conn, g.gl_pathv[i], abs_dst, pflag) == -1)			err = -1;	}
i = 0;
i = 0
i
i
0
g.gl_pathv[i] && !interrupted
g.gl_pathv[i]
g.gl_pathv
g
g
gl_pathv
i
i
!interrupted
interrupted
interrupted
i++
i
i
{		if (!is_reg(g.gl_pathv[i])) {			error("skipping non-regular file %s",			    g.gl_pathv[i]);			continue;		}		if (infer_path(g.gl_pathv[i], &tmp)) {			err = -1;			goto out;		}		if (g.gl_matchc == 1 && tmp_dst) {			/* If directory specified, append filename */			if (remote_is_dir(conn, tmp_dst)) {				if (infer_path(g.gl_pathv[0], &tmp)) {					err = 1;					goto out;				}				abs_dst = path_append(tmp_dst, tmp);				xfree(tmp);			} else				abs_dst = xstrdup(tmp_dst);		} else if (tmp_dst) {			abs_dst = path_append(tmp_dst, tmp);			xfree(tmp);		} else			abs_dst = make_absolute(tmp, pwd);		printf(gettext("Uploading %s to %s\n"), g.gl_pathv[i], abs_dst);		if (do_upload(conn, g.gl_pathv[i], abs_dst, pflag) == -1)			err = -1;	}
if (!is_reg(g.gl_pathv[i])) {			error("skipping non-regular file %s",			    g.gl_pathv[i]);			continue;		}
!is_reg(g.gl_pathv[i])
is_reg(g.gl_pathv[i])
is_reg
is_reg
g.gl_pathv[i]
g.gl_pathv
g
g
gl_pathv
i
i
{			error("skipping non-regular file %s",			    g.gl_pathv[i]);			continue;		}
error("skipping non-regular file %s",			    g.gl_pathv[i]);
error("skipping non-regular file %s",			    g.gl_pathv[i])
error
error
"skipping non-regular file %s"
g.gl_pathv[i]
g.gl_pathv
g
g
gl_pathv
i
i
continue;
if (infer_path(g.gl_pathv[i], &tmp)) {			err = -1;			goto out;		}
infer_path(g.gl_pathv[i], &tmp)
infer_path
infer_path
g.gl_pathv[i]
g.gl_pathv
g
g
gl_pathv
i
i
&tmp
tmp
tmp
{			err = -1;			goto out;		}
err = -1;
err = -1
err
err
-1
1
goto out;
out
if (g.gl_matchc == 1 && tmp_dst) {			/* If directory specified, append filename */			if (remote_is_dir(conn, tmp_dst)) {				if (infer_path(g.gl_pathv[0], &tmp)) {					err = 1;					goto out;				}				abs_dst = path_append(tmp_dst, tmp);				xfree(tmp);			} else				abs_dst = xstrdup(tmp_dst);		} else if (tmp_dst) {			abs_dst = path_append(tmp_dst, tmp);			xfree(tmp);		} else			abs_dst = make_absolute(tmp, pwd);
g.gl_matchc == 1 && tmp_dst
g.gl_matchc == 1
g.gl_matchc
g
g
gl_matchc
1
tmp_dst
tmp_dst
{			/* If directory specified, append filename */			if (remote_is_dir(conn, tmp_dst)) {				if (infer_path(g.gl_pathv[0], &tmp)) {					err = 1;					goto out;				}				abs_dst = path_append(tmp_dst, tmp);				xfree(tmp);			} else				abs_dst = xstrdup(tmp_dst);		}
if (remote_is_dir(conn, tmp_dst)) {				if (infer_path(g.gl_pathv[0], &tmp)) {					err = 1;					goto out;				}				abs_dst = path_append(tmp_dst, tmp);				xfree(tmp);			} else				abs_dst = xstrdup(tmp_dst);
remote_is_dir(conn, tmp_dst)
remote_is_dir
remote_is_dir
conn
conn
tmp_dst
tmp_dst
{				if (infer_path(g.gl_pathv[0], &tmp)) {					err = 1;					goto out;				}				abs_dst = path_append(tmp_dst, tmp);				xfree(tmp);			}
if (infer_path(g.gl_pathv[0], &tmp)) {					err = 1;					goto out;				}
infer_path(g.gl_pathv[0], &tmp)
infer_path
infer_path
g.gl_pathv[0]
g.gl_pathv
g
g
gl_pathv
0
&tmp
tmp
tmp
{					err = 1;					goto out;				}
err = 1;
err = 1
err
err
1
goto out;
out
abs_dst = path_append(tmp_dst, tmp);
abs_dst = path_append(tmp_dst, tmp)
abs_dst
abs_dst
path_append(tmp_dst, tmp)
path_append
path_append
tmp_dst
tmp_dst
tmp
tmp
xfree(tmp);
xfree(tmp)
xfree
xfree
tmp
tmp
abs_dst = xstrdup(tmp_dst);
abs_dst = xstrdup(tmp_dst)
abs_dst
abs_dst
xstrdup(tmp_dst)
xstrdup
xstrdup
tmp_dst
tmp_dst
if (tmp_dst) {			abs_dst = path_append(tmp_dst, tmp);			xfree(tmp);		} else			abs_dst = make_absolute(tmp, pwd);
tmp_dst
tmp_dst
{			abs_dst = path_append(tmp_dst, tmp);			xfree(tmp);		}
abs_dst = path_append(tmp_dst, tmp);
abs_dst = path_append(tmp_dst, tmp)
abs_dst
abs_dst
path_append(tmp_dst, tmp)
path_append
path_append
tmp_dst
tmp_dst
tmp
tmp
xfree(tmp);
xfree(tmp)
xfree
xfree
tmp
tmp
abs_dst = make_absolute(tmp, pwd);
abs_dst = make_absolute(tmp, pwd)
abs_dst
abs_dst
make_absolute(tmp, pwd)
make_absolute
make_absolute
tmp
tmp
pwd
pwd
printf(gettext("Uploading %s to %s\n"), g.gl_pathv[i], abs_dst);
printf(gettext("Uploading %s to %s\n"), g.gl_pathv[i], abs_dst)
printf
printf
gettext("Uploading %s to %s\n")
gettext
gettext
"Uploading %s to %s\n"
g.gl_pathv[i]
g.gl_pathv
g
g
gl_pathv
i
i
abs_dst
abs_dst
if (do_upload(conn, g.gl_pathv[i], abs_dst, pflag) == -1)			err = -1;
do_upload(conn, g.gl_pathv[i], abs_dst, pflag) == -1
do_upload(conn, g.gl_pathv[i], abs_dst, pflag)
do_upload
do_upload
conn
conn
g.gl_pathv[i]
g.gl_pathv
g
g
gl_pathv
i
i
abs_dst
abs_dst
pflag
pflag
-1
1
err = -1;
err = -1
err
err
-1
1
out:	if (abs_dst)		xfree(abs_dst);
out
if (abs_dst)		xfree(abs_dst);
abs_dst
abs_dst
xfree(abs_dst);
xfree(abs_dst)
xfree
xfree
abs_dst
abs_dst
if (tmp_dst)		xfree(tmp_dst);
tmp_dst
tmp_dst
xfree(tmp_dst);
xfree(tmp_dst)
xfree
xfree
tmp_dst
tmp_dst
globfree(&g);
globfree(&g)
globfree
globfree
&g
g
g
return(err);
(err)
err
err
-----joern-----
(14,60,0)
(34,49,0)
(189,29,0)
(39,199,0)
(15,13,0)
(94,207,0)
(126,77,0)
(45,60,0)
(61,196,0)
(132,192,0)
(36,178,0)
(99,55,0)
(204,60,0)
(199,195,0)
(66,2,0)
(190,184,0)
(7,90,0)
(194,59,0)
(167,166,0)
(70,52,0)
(120,119,0)
(108,201,0)
(24,119,0)
(16,52,0)
(82,62,0)
(134,84,0)
(90,7,0)
(57,70,0)
(135,142,0)
(178,142,0)
(160,44,0)
(70,146,0)
(121,115,0)
(52,70,0)
(33,207,0)
(200,2,0)
(143,201,0)
(163,127,0)
(114,204,0)
(182,49,0)
(204,2,0)
(151,131,0)
(131,151,0)
(100,126,0)
(7,60,0)
(44,160,0)
(4,174,0)
(84,62,0)
(26,119,0)
(101,159,0)
(160,74,0)
(129,192,0)
(87,188,0)
(91,34,0)
(71,102,0)
(56,65,0)
(153,32,0)
(79,67,0)
(124,34,0)
(179,14,0)
(71,185,0)
(60,119,0)
(90,188,0)
(12,2,0)
(149,25,0)
(51,71,0)
(123,45,0)
(155,50,0)
(122,217,0)
(13,25,0)
(178,210,0)
(148,217,0)
(80,60,0)
(207,40,0)
(21,116,0)
(91,50,0)
(80,2,0)
(161,60,0)
(77,126,0)
(125,148,0)
(200,96,0)
(89,207,0)
(209,95,0)
(195,199,0)
(110,65,0)
(95,60,0)
(71,148,0)
(165,41,0)
(133,101,0)
(194,29,0)
(109,161,0)
(191,12,0)
(20,95,0)
(2,66,0)
(210,211,0)
(41,74,0)
(73,119,0)
(14,179,0)
(164,91,0)
(106,95,0)
(86,66,0)
(162,119,0)
(78,11,0)
(71,179,0)
(76,66,0)
(154,211,0)
(193,119,0)
(34,91,0)
(205,195,0)
(137,49,0)
(107,47,0)
(38,194,0)
(84,192,0)
(29,27,0)
(53,99,0)
(23,218,0)
(34,111,0)
(216,63,0)
(196,203,0)
(159,101,0)
(211,210,0)
(31,142,0)
(72,21,0)
(159,63,0)
(12,60,0)
(197,23,0)
(161,2,0)
(185,3,0)
(194,25,0)
(145,71,0)
(2,35,0)
(131,203,0)
(98,207,0)
(118,187,0)
(203,131,0)
(32,12,0)
(200,60,0)
(169,29,0)
(194,70,0)
(202,116,0)
(171,50,0)
(50,91,0)
(179,127,0)
(69,74,0)
(80,102,0)
(175,55,0)
(92,131,0)
(64,146,0)
(95,2,0)
(25,13,0)
(11,120,0)
(95,102,0)
(126,35,0)
(201,187,0)
(63,47,0)
(160,167,0)
(55,99,0)
(215,71,0)
(95,209,0)
(66,126,0)
(84,179,0)
(198,59,0)
(130,0,0)
(214,74,0)
(210,178,0)
(201,119,0)
(194,21,0)
(152,98,0)
(177,74,0)
(6,27,0)
(97,44,0)
(91,74,0)
(157,49,0)
(88,119,0)
(142,178,0)
(111,34,0)
(68,90,0)
(84,148,0)
(28,200,0)
(188,90,0)
(10,159,0)
(46,59,0)
(83,160,0)
(41,165,0)
(168,161,0)
(195,67,0)
(167,160,0)
(5,45,0)
(201,143,0)
(120,11,0)
(93,80,0)
(1,2,0)
(12,32,0)
(192,119,0)
(0,21,0)
(141,119,0)
(203,196,0)
(14,2,0)
(186,111,0)
(176,177,0)
(220,156,0)
(19,119,0)
(159,74,0)
(81,60,0)
(174,127,0)
(105,14,0)
(75,101,0)
(138,44,0)
(71,42,0)
(113,199,0)
(73,40,0)
(17,119,0)
(208,3,0)
(200,209,0)
(84,32,0)
(71,62,0)
(65,8,0)
(183,60,0)
(194,119,0)
(103,151,0)
(206,73,0)
(140,143,0)
(65,62,0)
(131,74,0)
(66,8,0)
(22,49,0)
(161,148,0)
(63,159,0)
(207,98,0)
(59,119,0)
(166,167,0)
(34,62,0)
(67,79,0)
(41,71,0)
(71,41,0)
(96,200,0)
(112,115,0)
(96,218,0)
(128,119,0)
(213,151,0)
(104,23,0)
(148,161,0)
(37,79,0)
(115,146,0)
(180,119,0)
(77,48,0)
(62,65,0)
(58,119,0)
(144,14,0)
(178,74,0)
(218,23,0)
(85,119,0)
(54,188,0)
(34,148,0)
(9,122,0)
(209,200,0)
(187,201,0)
(45,116,0)
(170,119,0)
(150,7,0)
(212,165,0)
(117,73,0)
(34,179,0)
(194,99,0)
(173,165,0)
(147,179,0)
(34,32,0)
(3,185,0)
(71,32,0)
(25,184,0)
(115,40,0)
(181,77,0)
(172,194,0)
(185,71,0)
(67,195,0)
(21,0,0)
(218,96,0)
(45,2,0)
(30,218,0)
(219,80,0)
(7,2,0)
(136,41,0)
(216,166,1)
(23,197,1)
(65,8,1)
(198,46,1)
(37,195,1)
(176,99,1)
(166,167,1)
(130,72,1)
(30,23,1)
(71,179,1)
(3,208,1)
(12,60,1)
(41,136,1)
(39,113,1)
(84,179,1)
(100,18,1)
(152,33,1)
(112,121,1)
(134,43,1)
(31,166,1)
(7,60,1)
(174,4,1)
(178,36,1)
(43,64,1)
(16,57,1)
(69,214,1)
(160,74,1)
(159,74,1)
(176,185,1)
(98,152,1)
(165,173,1)
(177,176,1)
(28,218,1)
(59,198,1)
(154,178,1)
(71,62,1)
(84,62,1)
(95,60,1)
(177,74,1)
(34,124,1)
(159,101,1)
(161,2,1)
(60,81,1)
(14,2,1)
(129,132,1)
(91,50,1)
(196,61,1)
(175,53,1)
(190,25,1)
(81,183,1)
(51,215,1)
(76,1,1)
(43,203,1)
(219,93,1)
(186,122,1)
(195,199,1)
(194,21,1)
(208,71,1)
(204,60,1)
(43,190,1)
(140,18,1)
(125,158,1)
(194,70,1)
(61,131,1)
(179,14,1)
(66,8,1)
(41,74,1)
(80,219,1)
(194,29,1)
(195,205,1)
(167,160,1)
(46,192,1)
(7,2,1)
(104,207,1)
(210,178,1)
(189,169,1)
(91,164,1)
(194,99,1)
(145,34,1)
(199,39,1)
(71,148,1)
(161,60,1)
(5,123,1)
(80,102,1)
(122,9,1)
(200,2,1)
(173,212,1)
(200,209,1)
(171,155,1)
(123,96,1)
(79,37,1)
(218,23,1)
(95,20,1)
(144,147,1)
(4,179,1)
(29,189,1)
(33,89,1)
(71,32,1)
(148,161,1)
(153,80,1)
(71,102,1)
(68,188,1)
(10,101,1)
(138,97,1)
(84,192,1)
(84,148,1)
(110,82,1)
(72,45,1)
(188,54,1)
(131,151,1)
(25,13,1)
(70,52,1)
(45,2,1)
(92,151,1)
(67,195,1)
(140,2,1)
(117,206,1)
(67,79,1)
(131,92,1)
(96,200,1)
(62,65,1)
(143,140,1)
(57,115,1)
(43,6,1)
(203,131,1)
(192,129,1)
(0,130,1)
(93,7,1)
(44,138,1)
(194,172,1)
(204,2,1)
(214,96,1)
(120,11,1)
(186,174,1)
(161,168,1)
(136,165,1)
(135,31,1)
(90,188,1)
(207,40,1)
(159,10,1)
(172,120,1)
(1,126,1)
(77,48,1)
(2,66,1)
(41,165,1)
(139,43,1)
(45,5,1)
(111,186,1)
(80,2,1)
(121,207,1)
(115,112,1)
(169,67,1)
(9,148,1)
(176,107,1)
(139,84,1)
(109,125,1)
(21,0,1)
(142,135,1)
(186,62,1)
(87,210,1)
(126,77,1)
(178,74,1)
(201,187,1)
(54,87,1)
(89,94,1)
(97,203,1)
(95,2,1)
(213,74,1)
(205,199,1)
(106,28,1)
(151,103,1)
(118,108,1)
(55,175,1)
(7,150,1)
(200,60,1)
(209,95,1)
(78,139,1)
(158,7,1)
(185,3,1)
(32,12,1)
(202,21,1)
(18,59,1)
(186,32,1)
(115,40,1)
(56,110,1)
(124,91,1)
(77,181,1)
(201,143,1)
(34,111,1)
(132,60,1)
(91,74,1)
(52,16,1)
(96,218,1)
(204,114,1)
(50,171,1)
(108,143,1)
(66,86,1)
(71,42,1)
(12,191,1)
(164,50,1)
(64,70,1)
(211,154,1)
(13,15,1)
(43,202,1)
(194,25,1)
(34,32,1)
(71,51,1)
(103,213,1)
(212,145,1)
(203,196,1)
(75,216,1)
(213,177,1)
(178,142,1)
(45,60,1)
(207,98,1)
(12,2,1)
(200,28,1)
(74,69,1)
(187,118,1)
(14,60,1)
(95,102,1)
(215,41,1)
(155,111,1)
(53,185,1)
(160,83,1)
(78,204,1)
(34,62,1)
(149,210,1)
(99,55,1)
(73,40,1)
(34,179,1)
(6,29,1)
(11,78,1)
(147,67,1)
(83,44,1)
(71,41,1)
(185,71,1)
(82,158,1)
(114,139,1)
(90,68,1)
(34,91,1)
(36,142,1)
(168,109,1)
(80,60,1)
(14,105,1)
(113,80,1)
(181,100,1)
(94,73,1)
(160,44,1)
(197,104,1)
(218,30,1)
(38,194,1)
(15,149,1)
(105,144,1)
(7,90,1)
(191,153,1)
(107,63,1)
(84,32,1)
(86,76,1)
(150,90,1)
(101,133,1)
(194,59,1)
(20,106,1)
(65,56,1)
(66,126,1)
(206,201,1)
(133,75,1)
(210,211,1)
(63,159,1)
(84,134,1)
(34,148,1)
(131,74,1)
(73,117,1)
(151,80,2)
(176,80,2)
(151,166,2)
(71,7,2)
(160,44,2)
(34,179,2)
(210,178,2)
(66,18,2)
(84,32,2)
(91,80,2)
(151,7,2)
(218,207,2)
(203,7,2)
(201,187,2)
(106,28,2)
(56,158,2)
(197,207,2)
(124,7,2)
(95,28,2)
(203,67,2)
(160,203,2)
(195,199,2)
(165,7,2)
(115,207,2)
(112,207,2)
(196,131,2)
(215,7,2)
(205,80,2)
(62,158,2)
(203,196,2)
(71,67,2)
(113,80,2)
(165,67,2)
(173,80,2)
(191,80,2)
(151,67,2)
(179,67,2)
(158,7,2)
(21,96,2)
(155,67,2)
(38,194,2)
(174,67,2)
(103,96,2)
(34,91,2)
(194,70,2)
(144,67,2)
(109,158,2)
(135,166,2)
(63,159,2)
(45,96,2)
(204,139,2)
(186,7,2)
(210,166,2)
(97,203,2)
(92,67,2)
(164,7,2)
(50,7,2)
(168,158,2)
(211,166,2)
(36,166,2)
(37,80,2)
(111,67,2)
(214,96,2)
(80,2,2)
(212,67,2)
(71,62,2)
(30,207,2)
(91,7,2)
(95,2,2)
(159,166,2)
(100,18,2)
(213,7,2)
(41,74,2)
(213,67,2)
(194,21,2)
(189,67,2)
(90,188,2)
(82,158,2)
(150,90,2)
(15,210,2)
(23,207,2)
(130,96,2)
(16,207,2)
(66,126,2)
(138,203,2)
(12,60,2)
(167,203,2)
(177,67,2)
(41,165,2)
(84,43,2)
(131,151,2)
(71,41,2)
(155,80,2)
(175,185,2)
(91,74,2)
(203,80,2)
(65,8,2)
(194,29,2)
(41,80,2)
(204,60,2)
(71,42,2)
(171,80,2)
(51,67,2)
(159,101,2)
(76,18,2)
(164,80,2)
(147,67,2)
(72,96,2)
(4,67,2)
(7,90,2)
(77,18,2)
(96,218,2)
(34,7,2)
(3,67,2)
(114,139,2)
(124,80,2)
(93,7,2)
(148,158,2)
(14,2,2)
(134,43,2)
(41,67,2)
(151,96,2)
(167,160,2)
(105,67,2)
(159,74,2)
(3,7,2)
(67,195,2)
(190,210,2)
(200,60,2)
(142,166,2)
(215,67,2)
(54,210,2)
(126,77,2)
(20,28,2)
(103,166,2)
(149,210,2)
(186,67,2)
(171,7,2)
(195,80,2)
(111,80,2)
(41,7,2)
(65,158,2)
(208,80,2)
(145,67,2)
(7,2,2)
(12,80,2)
(31,166,2)
(176,7,2)
(136,7,2)
(14,60,2)
(66,8,2)
(210,211,2)
(70,52,2)
(122,158,2)
(218,23,2)
(177,74,2)
(123,96,2)
(50,67,2)
(115,40,2)
(124,67,2)
(39,80,2)
(171,67,2)
(1,18,2)
(178,74,2)
(200,218,2)
(5,96,2)
(188,210,2)
(103,67,2)
(86,18,2)
(92,166,2)
(7,210,2)
(14,67,2)
(90,210,2)
(208,67,2)
(71,32,2)
(145,7,2)
(61,131,2)
(95,102,2)
(34,80,2)
(166,167,2)
(203,131,2)
(153,80,2)
(212,80,2)
(185,71,2)
(45,2,2)
(200,2,2)
(2,18,2)
(186,80,2)
(7,60,2)
(136,67,2)
(199,80,2)
(131,7,2)
(101,166,2)
(133,166,2)
(95,60,2)
(176,67,2)
(64,207,2)
(96,200,2)
(62,65,2)
(68,210,2)
(204,2,2)
(80,102,2)
(99,185,2)
(161,60,2)
(71,102,2)
(73,40,2)
(21,0,2)
(215,80,2)
(110,158,2)
(84,62,2)
(213,80,2)
(177,80,2)
(70,207,2)
(96,207,2)
(29,67,2)
(181,18,2)
(185,67,2)
(74,96,2)
(32,12,2)
(194,25,2)
(125,158,2)
(161,158,2)
(173,7,2)
(12,2,2)
(209,95,2)
(52,207,2)
(185,3,2)
(34,62,2)
(131,67,2)
(136,80,2)
(80,60,2)
(107,166,2)
(202,96,2)
(201,143,2)
(161,2,2)
(44,203,2)
(50,80,2)
(173,67,2)
(177,7,2)
(111,7,2)
(216,166,2)
(103,80,2)
(165,80,2)
(203,96,2)
(166,203,2)
(207,98,2)
(79,80,2)
(207,40,2)
(219,7,2)
(0,96,2)
(83,203,2)
(69,96,2)
(55,185,2)
(51,7,2)
(99,55,2)
(77,48,2)
(131,80,2)
(45,60,2)
(75,166,2)
(194,59,2)
(25,13,2)
(13,210,2)
(2,66,2)
(32,80,2)
(155,7,2)
(176,166,2)
(131,74,2)
(121,207,2)
(148,161,2)
(131,166,2)
(51,80,2)
(71,148,2)
(87,210,2)
(67,79,2)
(213,166,2)
(84,148,2)
(178,142,2)
(9,158,2)
(160,74,2)
(92,96,2)
(25,210,2)
(71,80,2)
(10,166,2)
(185,7,2)
(57,207,2)
(34,148,2)
(104,207,2)
(3,80,2)
(131,96,2)
(203,166,2)
(145,80,2)
(179,14,2)
(91,50,2)
(53,185,2)
(126,18,2)
(63,166,2)
(213,96,2)
(154,166,2)
(84,179,2)
(34,111,2)
(212,7,2)
(194,99,2)
(164,67,2)
(91,67,2)
(208,7,2)
(71,179,2)
(200,209,2)
(103,7,2)
(6,67,2)
(84,192,2)
(169,67,2)
(67,80,2)
(177,166,2)
(28,218,2)
(185,80,2)
(34,32,2)
(209,28,2)
(92,80,2)
(92,7,2)
(178,166,2)
(120,11,2)
(80,7,2)
(34,67,2)
-----------------------------------
(0,-1)
(1,tmp_dst)
(2,tmp_dst = make_absolute(tmp_dst, pwd)
(3,-1)
(4,tmp)
(5,tmp_dst)
(6,goto out;)
(7,g.gl_matchc == 1 && tmp_dst)
(8,char *pwd)
(9,tmp)
(10,i)
(11,&g)
(12,xstrdup(tmp_dst)
(13,-1)
(14,path_append(tmp_dst, tmp)
(15,1)
(16,1)
(17,for (i = 0; g.gl_pathv[i] && !interrupted; i++)
(18,dst)
(19,err)
(20,tmp_dst)
(21,err = -1)
(22,if (!is_reg(g.gl_pathv[i])
(23,g.gl_matchc)
(24,if (tmp_dst)
(25,err = -1)
(26,if (abs_dst)
(27,)
(28,tmp_dst)
(29,err = 1)
(30,1)
(31,g)
(32,abs_dst = xstrdup(tmp_dst)
(33,NULL)
(34,printf(gettext("Uploading %s to %s\\n")
(35,)
(36,i)
(37,tmp)
(38,RET)
(39,gl_pathv)
(40,char *src)
(41,g.gl_pathv[i])
(42,int pflag)
(43,abs_dst)
(44,g.gl_pathv)
(45,error("Multiple files match, but \\"%s\\" is not a directory",\n\\n\\t\\t    tmp_dst)
(46,err)
(47,)
(48,char *dst)
(49,)
(50,g.gl_pathv)
(51,pflag)
(52,-1)
(53,err)
(54,gl_matchc)
(55,-1)
(56,pwd)
(57,err)
(58,g)
(59,err = 0)
(60,*tmp_dst = NULL)
(61,interrupted)
(62,abs_dst = make_absolute(tmp, pwd)
(63,error("skipping non-regular file %s",\n\\n\\t\\t\\t    g.gl_pathv[i])
(64,goto out;)
(65,make_absolute(tmp, pwd)
(66,make_absolute(tmp_dst, pwd)
(67,infer_path(g.gl_pathv[0], &tmp)
(68,1)
(69,0)
(70,err = -1)
(71,do_upload(conn, g.gl_pathv[i], abs_dst, pflag)
(72,err)
(73,debug3("Looking up %s", src)
(74,i = 0)
(75,g)
(76,tmp_dst)
(77,xstrdup(dst)
(78,g)
(79,&tmp)
(80,remote_is_dir(conn, tmp_dst)
(81,NULL)
(82,abs_dst)
(83,i)
(84,xfree(abs_dst)
(85,out:)
(86,pwd)
(87,g)
(88,if (glob(src, GLOB_LIMIT, NULL, &g)
(89,GLOB_LIMIT)
(90,g.gl_matchc == 1)
(91,g.gl_pathv[i])
(92,i)
(93,conn)
(94,src)
(95,remote_is_dir(conn, tmp_dst)
(96,g.gl_matchc > 1 && tmp_dst && !remote_is_dir(conn, tmp_dst)
(97,g)
(98,&g)
(99,err = -1)
(100,tmp_dst)
(101,g.gl_pathv)
(102,struct sftp_conn *conn)
(103,gl_pathv)
(104,g)
(105,tmp)
(106,conn)
(107,continue;)
(108,0)
(109,tmp_dst)
(110,tmp)
(111,gettext("Uploading %s to %s\\n")
(112,src)
(113,g)
(114,tmp_dst)
(115,error("File \\"%s\\" not found.", src)
(116,)
(117,src)
(118,g)
(119,)
(120,globfree(&g)
(121,"File \\"%s\\" not found.")
(122,xfree(tmp)
(123,"Multiple files match, but \\"%s\\" is not a directory")
(124,abs_dst)
(125,abs_dst)
(126,tmp_dst = xstrdup(dst)
(127,)
(128,if (dst)
(129,NULL)
(130,1)
(131,g.gl_pathv[i])
(132,abs_dst)
(133,gl_pathv)
(134,abs_dst)
(135,gl_pathv)
(136,i)
(137,if (g.gl_matchc == 1 && tmp_dst)
(138,gl_pathv)
(139,tmp_dst)
(140,g)
(141,i)
(142,g.gl_pathv)
(143,&g)
(144,tmp_dst)
(145,conn)
(146,)
(147,abs_dst)
(148,abs_dst = path_append(tmp_dst, tmp)
(149,err)
(150,tmp_dst)
(151,g.gl_pathv)
(152,g)
(153,abs_dst)
(154,tmp)
(155,g)
(156,)
(157,if (do_upload(conn, g.gl_pathv[i], abs_dst, pflag)
(158,tmp_dst)
(159,g.gl_pathv[i])
(160,g.gl_pathv[i])
(161,path_append(tmp_dst, tmp)
(162,tmp)
(163,if (infer_path(g.gl_pathv[0], &tmp)
(164,i)
(165,g.gl_pathv)
(166,!is_reg(g.gl_pathv[i])
(167,is_reg(g.gl_pathv[i])
(168,tmp)
(169,err)
(170,if (g.gl_matchc > 1 && tmp_dst && !remote_is_dir(conn, tmp_dst)
(171,gl_pathv)
(172,err)
(173,gl_pathv)
(174,xfree(tmp)
(175,1)
(176,i)
(177,i++)
(178,g.gl_pathv[i])
(179,abs_dst = path_append(tmp_dst, tmp)
(180,abs_dst)
(181,dst)
(182,if (infer_path(g.gl_pathv[i], &tmp)
(183,tmp_dst)
(184,)
(185,do_upload(conn, g.gl_pathv[i], abs_dst, pflag)
(186,"Uploading %s to %s\\n")
(187,sizeof(g)
(188,g.gl_matchc)
(189,1)
(190,goto out;)
(191,tmp_dst)
(192,*abs_dst = NULL)
(193,tmp_dst)
(194,return(err)
(195,g.gl_pathv[0])
(196,!interrupted)
(197,gl_matchc)
(198,0)
(199,g.gl_pathv)
(200,tmp_dst && !remote_is_dir(conn, tmp_dst)
(201,memset(&g, 0, sizeof(g)
(202,goto out;)
(203,g.gl_pathv[i] && !interrupted)
(204,xfree(tmp_dst)
(205,0)
(206,"Looking up %s")
(207,glob(src, GLOB_LIMIT, NULL, &g)
(208,1)
(209,!remote_is_dir(conn, tmp_dst)
(210,infer_path(g.gl_pathv[i], &tmp)
(211,&tmp)
(212,g)
(213,g)
(214,i)
(215,abs_dst)
(216,"skipping non-regular file %s")
(217,)
(218,g.gl_matchc > 1)
(219,tmp_dst)
(220,if (remote_is_dir(conn, tmp_dst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^