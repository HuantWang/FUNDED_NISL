-----label-----
0
-----code-----
static int socket_process_helper(struct iax2_thread *thread)
{
	struct sockaddr_in sin;
	int res;
	int updatehistory=1;
	int new = NEW_PREVENT;
	int dcallno = 0;
	char decrypted = 0;
	struct ast_iax2_full_hdr *fh = (struct ast_iax2_full_hdr *)thread->buf;
	struct ast_iax2_mini_hdr *mh = (struct ast_iax2_mini_hdr *)thread->buf;
	struct ast_iax2_meta_hdr *meta = (struct ast_iax2_meta_hdr *)thread->buf;
	struct ast_iax2_video_hdr *vh = (struct ast_iax2_video_hdr *)thread->buf;
	struct iax_frame *fr;
	struct iax_frame *cur;
	struct ast_frame f = { 0, };
	struct ast_channel *c = NULL;
	struct iax2_dpcache *dp;
	struct iax2_peer *peer;
	struct iax_ies ies;
	struct iax_ie_data ied0, ied1;
	iax2_format format;
	int fd;
	int exists;
	int minivid = 0;
	char empty[32]="";		/* Safety measure */
	struct iax_frame *duped_fr;
	char host_pref_buf[128];
	char caller_pref_buf[128];
	struct ast_codec_pref pref;
	char *using_prefs = "mine";

	/* allocate an iax_frame with 4096 bytes of data buffer */
	fr = ast_alloca(sizeof(*fr) + 4096);
	memset(fr, 0, sizeof(*fr));
	fr->afdatalen = 4096; /* From ast_alloca() above */

	/* Copy frequently used parameters to the stack */
	res = thread->buf_len;
	fd = thread->iofd;
	memcpy(&sin, &thread->iosin, sizeof(sin));

	if (res < sizeof(*mh)) {
		ast_log(LOG_WARNING, "midget packet received (%d of %d min)\n", res, (int) sizeof(*mh));
		return 1;
	}
	if ((vh->zeros == 0) && (ntohs(vh->callno) & 0x8000)) {
		if (res < sizeof(*vh)) {
			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));
			return 1;
		}

		/* This is a video frame, get call number */
		fr->callno = find_callno(ntohs(vh->callno) & ~0x8000, dcallno, &sin, new, fd, 0);
		minivid = 1;
	} else if ((meta->zeros == 0) && !(ntohs(meta->metacmd) & 0x8000))
		return socket_process_meta(res, meta, &sin, fd, fr);

#ifdef DEBUG_SUPPORT
	if (res >= sizeof(*fh))
		iax_outputframe(NULL, fh, 1, &sin, res - sizeof(*fh));
#endif
	if (ntohs(mh->callno) & IAX_FLAG_FULL) {
		if (res < sizeof(*fh)) {
			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));
			return 1;
		}

		/* Get the destination call number */
		dcallno = ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS;


		/* check to make sure this full frame isn't encrypted before we attempt
 		 * to look inside of it. If it is encrypted, decrypt it first. Its ok if the
		 * callno is not found here, that just means one hasn't been allocated for
		 * this connection yet. */
		if ((dcallno != 1) && (fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1))) {
			ast_mutex_lock(&iaxsl[fr->callno]);
			if (iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)) {
				if (decrypt_frame(fr->callno, fh, &f, &res)) {
					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");
					ast_mutex_unlock(&iaxsl[fr->callno]);
					return 1;
				}
				decrypted = 1;
			}
			ast_mutex_unlock(&iaxsl[fr->callno]);
		}

		/* Retrieve the type and subclass */
		f.frametype = fh->type;
		if (f.frametype == AST_FRAME_VIDEO) {
			ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)));
			if ((fh->csub >> 6) & 0x1) {
				ast_format_set_video_mark(&f.subclass.format);
			}
		} else if (f.frametype == AST_FRAME_VOICE) {
			ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub));
		} else {
			f.subclass.integer = uncompress_subclass(fh->csub);
		}

		/* Deal with POKE/PONG without allocating a callno */
		if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_POKE) {
			/* Reply back with a PONG, but don't care about the result. */
			send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_PONG, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);
			return 1;
		} else if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1) {
			/* Ignore */
			return 1;
		}

		f.datalen = res - sizeof(*fh);
		if (f.datalen) {
			if (f.frametype == AST_FRAME_IAX) {
				if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {
					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));
					ast_variables_destroy(ies.vars);
					return 1;
				}
				f.data.ptr = NULL;
				f.datalen = 0;
			} else {
				f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);
				memset(&ies, 0, sizeof(ies));
			}
		} else {
			if (f.frametype == AST_FRAME_IAX)
				f.data.ptr = NULL;
			else
				f.data.ptr = empty;
			memset(&ies, 0, sizeof(ies));
		}

		if (!dcallno && iax2_allow_new(f.frametype, f.subclass.integer, 1)) {
			/* only set NEW_ALLOW if calltoken checks out */
			if (handle_call_token(fh, &ies, &sin, fd)) {
				ast_variables_destroy(ies.vars);
				return 1;
			}

			if (ies.calltoken && ies.calltokendata) {
				/* if we've gotten this far, and the calltoken ie data exists,
				 * then calltoken validation _MUST_ have taken place.  If calltoken
				 * data is provided, it is always validated reguardless of any
				 * calltokenoptional or requirecalltoken options */
				new = NEW_ALLOW_CALLTOKEN_VALIDATED;
			} else {
				new = NEW_ALLOW;
			}
		}
	} else {
		/* Don't know anything about it yet */
		f.frametype = AST_FRAME_NULL;
		f.subclass.integer = 0;
		memset(&ies, 0, sizeof(ies));
	}

	if (!fr->callno) {
		int check_dcallno = 0;

		/*
		 * We enforce accurate destination call numbers for ACKs.  This forces the other
		 * end to know the destination call number before call setup can complete.
		 *
		 * Discussed in the following thread:
		 *    http://lists.digium.com/pipermail/asterisk-dev/2008-May/033217.html 
		 */

		if ((ntohs(mh->callno) & IAX_FLAG_FULL) && ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer == IAX_COMMAND_ACK))) {
			check_dcallno = 1;
		}

		if (!(fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, new, fd, check_dcallno))) {
			if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW) {
				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);
			} else if (f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)) {
				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);
			}
			ast_variables_destroy(ies.vars);
			return 1;
		}
	}

	if (fr->callno > 0) {
		struct ast_callid *mount_callid;
		ast_mutex_lock(&iaxsl[fr->callno]);
		if (iaxs[fr->callno] && ((mount_callid = iax_pvt_callid_get(fr->callno)))) {
			/* Bind to thread */
			ast_callid_threadassoc_add(mount_callid);
			ast_callid_unref(mount_callid);
		}
	}

	if (!fr->callno || !iaxs[fr->callno]) {
		/* A call arrived for a nonexistent destination.  Unless it's an "inval"
		   frame, reply with an inval */
		if (ntohs(mh->callno) & IAX_FLAG_FULL) {
			/* We can only raw hangup control frames */
			if (((f.subclass.integer != IAX_COMMAND_INVAL) &&
				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&
				 (f.subclass.integer != IAX_COMMAND_TXACC) &&
				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))||
			    (f.frametype != AST_FRAME_IAX))
				raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,
				fd);
		}
		if (fr->callno > 0) 
			ast_mutex_unlock(&iaxsl[fr->callno]);
		ast_variables_destroy(ies.vars);
		return 1;
	}
	if (ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED) && !decrypted) {
		if (decrypt_frame(fr->callno, fh, &f, &res)) {
			ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");
			ast_variables_destroy(ies.vars);
			ast_mutex_unlock(&iaxsl[fr->callno]);
			return 1;
		}
		decrypted = 1;
	}

#ifdef DEBUG_SUPPORT
	if (decrypted) {
		iax_outputframe(NULL, fh, 3, &sin, res - sizeof(*fh));
	}
#endif

	if (iaxs[fr->callno]->owner && fh->type == AST_FRAME_IAX &&
			(fh->csub == IAX_COMMAND_HANGUP
			|| fh->csub == IAX_COMMAND_REJECT
			|| fh->csub == IAX_COMMAND_REGREJ
			|| fh->csub == IAX_COMMAND_TXREJ)) {
		struct ast_control_pvt_cause_code *cause_code;
		int data_size = sizeof(*cause_code);
		char subclass[40] = "";

		/* get subclass text */
		iax_frame_subclass2str(fh->csub, subclass, sizeof(subclass));

		/* add length of "IAX2 " */
		data_size += 5;
		/* for IAX hangup frames, add length of () and number */
		data_size += 3;
		if (ies.causecode > 9) {
			data_size++;
		}
		if (ies.causecode > 99) {
			data_size++;
		}
		/* add length of subclass */
		data_size += strlen(subclass);

		cause_code = ast_alloca(data_size);
		ast_copy_string(cause_code->chan_name, ast_channel_name(iaxs[fr->callno]->owner), AST_CHANNEL_NAME);

		cause_code->ast_cause = ies.causecode;
		snprintf(cause_code->code, data_size - sizeof(*cause_code) + 1, "IAX2 %s(%d)", subclass, ies.causecode);

		iax2_lock_owner(fr->callno);
		if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {
			ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size);
			ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size);
			ast_channel_unlock(iaxs[fr->callno]->owner);
		}
		if (!iaxs[fr->callno]) {
			ast_variables_destroy(ies.vars);
			ast_mutex_unlock(&iaxsl[fr->callno]);
			return 1;
		}
	}

	/* count this frame */
	iaxs[fr->callno]->frames_received++;

	if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) && !minivid &&
		f.subclass.integer != IAX_COMMAND_TXCNT &&		/* for attended transfer */
		f.subclass.integer != IAX_COMMAND_TXACC) {		/* for attended transfer */
		unsigned short new_peercallno;

		new_peercallno = (unsigned short) (ntohs(mh->callno) & ~IAX_FLAG_FULL);
		if (new_peercallno && new_peercallno != iaxs[fr->callno]->peercallno) {
			if (iaxs[fr->callno]->peercallno) {
				remove_by_peercallno(iaxs[fr->callno]);
			}
			iaxs[fr->callno]->peercallno = new_peercallno;
			store_by_peercallno(iaxs[fr->callno]);
		}
	}
	if (ntohs(mh->callno) & IAX_FLAG_FULL) {
		if (iaxdebug)
			ast_debug(1, "Received packet %d, (%d, %u)\n", fh->oseqno, f.frametype, f.subclass.integer);
		/* Check if it's out of order (and not an ACK or INVAL) */
		fr->oseqno = fh->oseqno;
		fr->iseqno = fh->iseqno;
		fr->ts = ntohl(fh->ts);
#ifdef IAXTESTS
		if (test_resync) {
			ast_debug(1, "Simulating frame ts resync, was %u now %u\n", fr->ts, fr->ts + test_resync);
			fr->ts += test_resync;
		}
#endif /* IAXTESTS */
#if 0
		if ( (ntohs(fh->dcallno) & IAX_FLAG_RETRANS) ||
		     ( (f.frametype != AST_FRAME_VOICE) && ! (f.frametype == AST_FRAME_IAX &&
								(f.subclass == IAX_COMMAND_NEW ||
								 f.subclass == IAX_COMMAND_AUTHREQ ||
								 f.subclass == IAX_COMMAND_ACCEPT ||
								 f.subclass == IAX_COMMAND_REJECT))      ) )
#endif
		if ((ntohs(fh->dcallno) & IAX_FLAG_RETRANS) || (f.frametype != AST_FRAME_VOICE))
			updatehistory = 0;
		if ((iaxs[fr->callno]->iseqno != fr->oseqno) &&
			(iaxs[fr->callno]->iseqno ||
				((f.subclass.integer != IAX_COMMAND_TXCNT) &&
				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */
				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */
				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */
				(f.subclass.integer != IAX_COMMAND_TXACC)) ||
				(f.frametype != AST_FRAME_IAX))) {
			if (
			 ((f.subclass.integer != IAX_COMMAND_ACK) &&
			  (f.subclass.integer != IAX_COMMAND_INVAL) &&
			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&
			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */
			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */
			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */
			  (f.subclass.integer != IAX_COMMAND_TXACC) &&
			  (f.subclass.integer != IAX_COMMAND_VNAK)) ||
			  (f.frametype != AST_FRAME_IAX)) {
				/* If it's not an ACK packet, it's out of order. */
				ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",
					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);
				/* Check to see if we need to request retransmission,
				 * and take sequence number wraparound into account */
				if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {
					/* If we've already seen it, ack it XXX There's a border condition here XXX */
					if ((f.frametype != AST_FRAME_IAX) ||
							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {
						ast_debug(1, "Acking anyway\n");
						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if
						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */
						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
					}
				} else {
					/* Send a VNAK requesting retransmission */
					iax2_vnak(fr->callno);
				}
				ast_variables_destroy(ies.vars);
				ast_mutex_unlock(&iaxsl[fr->callno]);
				return 1;
			}
		} else {
			/* Increment unless it's an ACK or VNAK */
			if (((f.subclass.integer != IAX_COMMAND_ACK) &&
			    (f.subclass.integer != IAX_COMMAND_INVAL) &&
			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&
			    (f.subclass.integer != IAX_COMMAND_TXACC) &&
				(f.subclass.integer != IAX_COMMAND_VNAK)) ||
			    (f.frametype != AST_FRAME_IAX))
				iaxs[fr->callno]->iseqno++;
		}
		/* Ensure text frames are NULL-terminated */
		if (f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != '\0') {
			if (res < thread->buf_size)
				thread->buf[res++] = '\0';
			else /* Trims one character from the text message, but that's better than overwriting the end of the buffer. */
				thread->buf[res - 1] = '\0';
		}

		/* Handle implicit ACKing unless this is an INVAL, and only if this is 
		   from the real peer, not the transfer peer */
		if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&
		    ((f.subclass.integer != IAX_COMMAND_INVAL) ||
		     (f.frametype != AST_FRAME_IAX))) {
			unsigned char x;
			int call_to_destroy;
			/* First we have to qualify that the ACKed value is within our window */
			if (iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno))
				x = fr->iseqno;
			else
				x = iaxs[fr->callno]->oseqno;
			if ((x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)) {
				/* The acknowledgement is within our window.  Time to acknowledge everything
				   that it says to */
				for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {
					/* Ack the packet with the given timestamp */
					if (iaxdebug)
						ast_debug(1, "Cancelling transmission of packet %d\n", x);
					call_to_destroy = 0;
					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {
						/* If it's our call, and our timestamp, mark -1 retries */
						if (x == cur->oseqno) {
							cur->retries = -1;
							/* Destroy call if this is the end */
							if (cur->final)
								call_to_destroy = fr->callno;
						}
					}
					if (call_to_destroy) {
						if (iaxdebug)
							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);
						ast_mutex_lock(&iaxsl[call_to_destroy]);
						iax2_destroy(call_to_destroy);
						ast_mutex_unlock(&iaxsl[call_to_destroy]);
					}
				}
				/* Note how much we've received acknowledgement for */
				if (iaxs[fr->callno])
					iaxs[fr->callno]->rseqno = fr->iseqno;
				else {
					/* Stop processing now */
					ast_variables_destroy(ies.vars);
					ast_mutex_unlock(&iaxsl[fr->callno]);
					return 1;
				}
			} else {
				ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);
			}
		}
		if (inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&
			((f.frametype != AST_FRAME_IAX) ||
			 ((f.subclass.integer != IAX_COMMAND_TXACC) &&
			  (f.subclass.integer != IAX_COMMAND_TXCNT)))) {
			/* Only messages we accept from a transfer host are TXACC and TXCNT */
			ast_variables_destroy(ies.vars);
			ast_mutex_unlock(&iaxsl[fr->callno]);
			return 1;
		}

		/* when we receive the first full frame for a new incoming channel,
		   it is safe to start the PBX on the channel because we have now
		   completed a 3-way handshake with the peer */
		if ((f.frametype == AST_FRAME_VOICE) ||
		    (f.frametype == AST_FRAME_VIDEO) ||
		    (f.frametype == AST_FRAME_IAX)) {
			if (ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)) {
				ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);
				if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,
						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {
					ast_variables_destroy(ies.vars);
					ast_mutex_unlock(&iaxsl[fr->callno]);
					return 1;
				}
			}

			if (ies.vars) {
				struct ast_datastore *variablestore = NULL;
				struct ast_variable *var, *prev = NULL;
				AST_LIST_HEAD(, ast_var_t) *varlist;

				iax2_lock_owner(fr->callno);
				if (!iaxs[fr->callno]) {
					ast_variables_destroy(ies.vars);
					ast_mutex_unlock(&iaxsl[fr->callno]);
					return 1;
				}
				if ((c = iaxs[fr->callno]->owner)) {
					varlist = ast_calloc(1, sizeof(*varlist));
					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);

					if (variablestore && varlist) {
						variablestore->data = varlist;
						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;
						AST_LIST_HEAD_INIT(varlist);
						ast_debug(1, "I can haz IAX vars?\n");
						for (var = ies.vars; var; var = var->next) {
							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
							if (prev) {
								ast_free(prev);
							}
							prev = var;
							if (!newvar) {
								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */
								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
							} else {
								AST_LIST_INSERT_TAIL(varlist, newvar, entries);
							}
						}
						if (prev) {
							ast_free(prev);
						}
						ies.vars = NULL;
						ast_channel_datastore_add(c, variablestore);
					} else {
						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
						if (variablestore) {
							ast_datastore_free(variablestore);
						}
						if (varlist) {
							ast_free(varlist);
						}
					}
					ast_channel_unlock(c);
				} else {
					/* No channel yet, so transfer the variables directly over to the pvt,
					 * for later inheritance. */
					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");
					for (var = ies.vars; var && var->next; var = var->next);
					if (var) {
						var->next = iaxs[fr->callno]->iaxvars;
						iaxs[fr->callno]->iaxvars = ies.vars;
						ies.vars = NULL;
					}
				}
			}

			if (ies.vars) {
				ast_debug(1, "I have IAX variables, but they were not processed\n");
			}
		}

		/* once we receive our first IAX Full Frame that is not CallToken related, send all
		 * queued signaling frames that were being held. */
		if ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer != IAX_COMMAND_CALLTOKEN) && iaxs[fr->callno]->hold_signaling) {
			send_signaling(iaxs[fr->callno]);
		}

		if (f.frametype == AST_FRAME_VOICE) {
			if (ast_format_to_old_bitfield(&f.subclass.format) != iaxs[fr->callno]->voiceformat) {
					iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);
					ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));
					if (iaxs[fr->callno]->owner) {
						iax2_lock_owner(fr->callno);
						if (iaxs[fr->callno]) {
							if (iaxs[fr->callno]->owner) {
								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));
								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);
								if (orignative) {
									ast_format_cap_set(native, &f.subclass.format);
									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {
										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));
									}
									ast_format_cap_copy(native, orignative);
									ast_channel_unlock(iaxs[fr->callno]->owner);
									orignative = ast_format_cap_destroy(orignative);
								}
							}
						} else {
							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");
							/* Free remote variables (if any) */
							if (ies.vars) {
								ast_variables_destroy(ies.vars);
								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");
								ies.vars = NULL;
							}
							ast_mutex_unlock(&iaxsl[fr->callno]);
							return 1;
						}
					}
			}
		}
		if (f.frametype == AST_FRAME_VIDEO) {
			if (f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)) {
				ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));
				iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);
			}
		}
		if (f.frametype == AST_FRAME_CONTROL && iaxs[fr->callno]->owner) {
			if (f.subclass.integer == AST_CONTROL_BUSY) {
				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);
			} else if (f.subclass.integer == AST_CONTROL_CONGESTION) {
				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);
			}
		}
		if (f.frametype == AST_FRAME_IAX) {
			AST_SCHED_DEL(sched, iaxs[fr->callno]->initid);
			/* Handle the IAX pseudo frame itself */
			if (iaxdebug)
				ast_debug(1, "IAX subclass %d received\n", f.subclass.integer);

                        /* Update last ts unless the frame's timestamp originated with us. */
			if (iaxs[fr->callno]->last < fr->ts &&
                            f.subclass.integer != IAX_COMMAND_ACK &&
                            f.subclass.integer != IAX_COMMAND_PONG &&
                            f.subclass.integer != IAX_COMMAND_LAGRP) {
				iaxs[fr->callno]->last = fr->ts;
				if (iaxdebug)
					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);
			}
			iaxs[fr->callno]->last_iax_message = f.subclass.integer;
			if (!iaxs[fr->callno]->first_iax_message) {
				iaxs[fr->callno]->first_iax_message = f.subclass.integer;
			}
			switch(f.subclass.integer) {
			case IAX_COMMAND_ACK:
				/* Do nothing */
				break;
			case IAX_COMMAND_QUELCH:
				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {
				        /* Generate Manager Hold event, if necessary*/
					if (iaxs[fr->callno]->owner) {
						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",
							"Status: On\r\n"
							"Channel: %s\r\n"
							"Uniqueid: %s\r\n",
							ast_channel_name(iaxs[fr->callno]->owner),
							ast_channel_uniqueid(iaxs[fr->callno]->owner));
					}

					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);
					if (ies.musiconhold) {
						iax2_lock_owner(fr->callno);
						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {
							break;
						}
						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {
							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;

							/*
							 * We already hold the owner lock so we do not
							 * need to check iaxs[fr->callno] after it returns.
							 */
							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 
								S_OR(moh_suggest, NULL),
								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);
						}
						ast_channel_unlock(iaxs[fr->callno]->owner);
					}
				}
				break;
			case IAX_COMMAND_UNQUELCH:
				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {
					iax2_lock_owner(fr->callno);
					if (!iaxs[fr->callno]) {
						break;
					}
					/* Generate Manager Unhold event, if necessary */
					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {
						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",
							"Status: Off\r\n"
							"Channel: %s\r\n"
							"Uniqueid: %s\r\n",
							ast_channel_name(iaxs[fr->callno]->owner),
							ast_channel_uniqueid(iaxs[fr->callno]->owner));
					}

					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);
					if (!iaxs[fr->callno]->owner) {
						break;
					}
					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {
						/*
						 * We already hold the owner lock so we do not
						 * need to check iaxs[fr->callno] after it returns.
						 */
						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);
					}
					ast_channel_unlock(iaxs[fr->callno]->owner);
				}
				break;
			case IAX_COMMAND_TXACC:
				if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {
					/* Ack the packet with the given timestamp */
					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {
						/* Cancel any outstanding txcnt's */
						if (cur->transfer) {
							cur->retries = -1;
						}
					}
					memset(&ied1, 0, sizeof(ied1));
					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);
					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);
					iaxs[fr->callno]->transferring = TRANSFER_READY;
				}
				break;
			case IAX_COMMAND_NEW:
				/* Ignore if it's already up */
				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))
					break;
				if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {
					ast_mutex_unlock(&iaxsl[fr->callno]);
					check_provisioning(&sin, fd, ies.serviceident, ies.provver);
					ast_mutex_lock(&iaxsl[fr->callno]);
					if (!iaxs[fr->callno]) {
						break;
					}
				}
				/* If we're in trunk mode, do it now, and update the trunk number in our frame before continuing */
				if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {
					int new_callno;
					if ((new_callno = make_trunk(fr->callno, 1)) != -1)
						fr->callno = new_callno;
				}
				/* For security, always ack immediately */
				if (delayreject)
					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
				if (check_access(fr->callno, &sin, &ies)) {
					/* They're not allowed on */
					auth_fail(fr->callno, IAX_COMMAND_REJECT);
					if (authdebug)
						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
					break;
				}
				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {
					auth_fail(fr->callno, IAX_COMMAND_REJECT);
					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");
					break;
				}
				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {
					const char *context, *exten, *cid_num;

					context = ast_strdupa(iaxs[fr->callno]->context);
					exten = ast_strdupa(iaxs[fr->callno]->exten);
					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);

					/* This might re-enter the IAX code and need the lock */
					ast_mutex_unlock(&iaxsl[fr->callno]);
					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);
					ast_mutex_lock(&iaxsl[fr->callno]);

					if (!iaxs[fr->callno]) {
						break;
					}
				} else
					exists = 0;
				/* Get OSP token if it does exist */
				save_osptoken(fr, &ies);
				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {
					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {
						memset(&ied0, 0, sizeof(ied0));
						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");
						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);
						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
						if (!iaxs[fr->callno]) {
							break;
						}
						if (authdebug)
							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
					} else {
						/* Select an appropriate format */

						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {
							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {
								using_prefs = "reqonly";
							} else {
								using_prefs = "disabled";
							}
							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;
							memset(&pref, 0, sizeof(pref));
							strcpy(caller_pref_buf, "disabled");
							strcpy(host_pref_buf, "disabled");
						} else {
							struct ast_format tmpfmt;
							using_prefs = "mine";
							/* If the information elements are in here... use them */
							if (ies.codec_prefs)
								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);
							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {
								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/
								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {
									pref = iaxs[fr->callno]->rprefs;
									using_prefs = "caller";
								} else {
									pref = iaxs[fr->callno]->prefs;
								}
							} else
								pref = iaxs[fr->callno]->prefs;

							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);
							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);
							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);
						}
						if (!format) {
							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))
								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;
							if (!format) {
								memset(&ied0, 0, sizeof(ied0));
								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
								if (!iaxs[fr->callno]) {
									break;
								}
								if (authdebug) {
									char tmp[256], tmp2[256], tmp3[256];
									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {
										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",
											ast_inet_ntoa(sin.sin_addr),
											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),
											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));
									} else {
										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",
											ast_inet_ntoa(sin.sin_addr),
											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),
											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),
											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));
									}
								}
							} else {
								/* Pick one... */
								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {
									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))
										format = 0;
								} else {
									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {
										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";
										memset(&pref, 0, sizeof(pref));
										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);
										strcpy(caller_pref_buf,"disabled");
										strcpy(host_pref_buf,"disabled");
									} else {
										struct ast_format tmpfmt;
										using_prefs = "mine";
										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {
											/* Do the opposite of what we tried above. */
											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {
												pref = iaxs[fr->callno]->prefs;
											} else {
												pref = iaxs[fr->callno]->rprefs;
												using_prefs = "caller";
											}
											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);
										} else /* if no codec_prefs IE do it the old way */
											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);
									}
								}

								if (!format) {
									char tmp[256], tmp2[256], tmp3[256];
									memset(&ied0, 0, sizeof(ied0));
									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));
									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
									if (!iaxs[fr->callno]) {
										break;
									}
									if (authdebug) {
										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",
											ast_inet_ntoa(sin.sin_addr),
											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),
											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),
											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));
									}
									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);
									break;
								}
							}
						}
						if (format) {
							/* No authentication required, let them in */
							memset(&ied1, 0, sizeof(ied1));
							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);
							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);
							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);
							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {
								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"
												"%srequested format = %s,\n"
												"%srequested prefs = %s,\n"
												"%sactual format = %s,\n"
												"%shost prefs = %s,\n"
												"%spriority = %s\n",
												ast_inet_ntoa(sin.sin_addr), 
												VERBOSE_PREFIX_4,
												iax2_getformatname(iaxs[fr->callno]->peerformat), 
												VERBOSE_PREFIX_4,
												caller_pref_buf,
												VERBOSE_PREFIX_4,
												iax2_getformatname(format), 
												VERBOSE_PREFIX_4,
												host_pref_buf, 
												VERBOSE_PREFIX_4,
												using_prefs);

								iaxs[fr->callno]->chosenformat = format;

								/* Since this is a new call, we should go ahead and set the callid for it. */
								iax_pvt_callid_new(fr->callno);
								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);
							} else {
								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);
								/* If this is a TBD call, we're ready but now what...  */
								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));
							}
						}
					}
					break;
				}
				if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)
					merge_encryption(iaxs[fr->callno],ies.encmethods);
				else
					iaxs[fr->callno]->encmethods = 0;
				if (!authenticate_request(fr->callno) && iaxs[fr->callno])
					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);
				break;
			case IAX_COMMAND_DPREQ:
				/* Request status in the dialplan */
				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&
					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {
					if (iaxcompat) {
						/* Spawn a thread for the lookup */
						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);
					} else {
						/* Just look it up */
						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);
					}
				}
				break;
			case IAX_COMMAND_HANGUP:
				ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);
				ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);
				/* Set hangup cause according to remote and hangupsource */
				if (iaxs[fr->callno]->owner) {
					set_hangup_source_and_cause(fr->callno, ies.causecode);
					if (!iaxs[fr->callno]) {
						break;
					}
				}

				/* Send ack immediately, before we destroy */
				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
				iax2_destroy(fr->callno);
				break;
			case IAX_COMMAND_REJECT:
				/* Set hangup cause according to remote and hangup source */
				if (iaxs[fr->callno]->owner) {
					set_hangup_source_and_cause(fr->callno, ies.causecode);
					if (!iaxs[fr->callno]) {
						break;
					}
				}

				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {
					if (iaxs[fr->callno]->owner && authdebug)
						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",
							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),
							ies.cause ? ies.cause : "<Unknown>");
					ast_debug(1, "Immediately destroying %d, having received reject\n",
						fr->callno);
				}
				/* Send ack immediately, before we destroy */
				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,
						       fr->ts, NULL, 0, fr->iseqno);
				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))
					iaxs[fr->callno]->error = EPERM;
				iax2_destroy(fr->callno);
				break;
			case IAX_COMMAND_TRANSFER:
			{
				struct ast_channel *bridged_chan;
				struct ast_channel *owner;

				iax2_lock_owner(fr->callno);
				if (!iaxs[fr->callno]) {
					/* Initiating call went away before we could transfer. */
					break;
				}
				owner = iaxs[fr->callno]->owner;
				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;
				if (bridged_chan && ies.called_number) {
					const char *context;

					context = ast_strdupa(iaxs[fr->callno]->context);

					ast_channel_ref(owner);
					ast_channel_ref(bridged_chan);
					ast_channel_unlock(owner);
					ast_mutex_unlock(&iaxsl[fr->callno]);

					/* Set BLINDTRANSFER channel variables */
					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));
					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));

					/* DO NOT hold any locks while calling ast_parking_ext_valid() */
					if (ast_parking_ext_valid(ies.called_number, owner, context)) {
						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));
						if (iax_park(bridged_chan, owner, ies.called_number, context)) {
							ast_log(LOG_WARNING, "Failed to park call '%s'\n",
								ast_channel_name(bridged_chan));
						}
					} else {
						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {
							ast_log(LOG_WARNING,
								"Async goto of '%s' to '%s@%s' failed\n",
								ast_channel_name(bridged_chan), ies.called_number, context);
						} else {
							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",
								ast_channel_name(bridged_chan), ies.called_number, context);
						}
					}
					ast_channel_unref(owner);
					ast_channel_unref(bridged_chan);

					ast_mutex_lock(&iaxsl[fr->callno]);
				} else {
					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);
					if (owner) {
						ast_channel_unlock(owner);
					}
				}

				break;
			}
			case IAX_COMMAND_ACCEPT:
				/* Ignore if call is already up or needs authentication or is a TBD */
				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))
					break;
				if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {
					/* Send ack immediately, before we destroy */
					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
					iax2_destroy(fr->callno);
					break;
				}
				if (ies.format) {
					iaxs[fr->callno]->peerformat = ies.format;
				} else {
					if (iaxs[fr->callno]->owner)
						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));
					else
						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;
				}
				ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));
				if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {
					memset(&ied0, 0, sizeof(ied0));
					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
					if (!iaxs[fr->callno]) {
						break;
					}
					if (authdebug) {
						char tmp1[256], tmp2[256];
						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",
							ast_inet_ntoa(sin.sin_addr),
							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),
							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));
					}
				} else {
					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
					iax2_lock_owner(fr->callno);
					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {
						char tmp[256];
						/* Switch us to use a compatible format */
						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);
						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));

						/* Setup read/write formats properly. */
						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)
							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));
						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)
							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));
						ast_channel_unlock(iaxs[fr->callno]->owner);
					}
				}
				if (iaxs[fr->callno]) {
					AST_LIST_LOCK(&dpcache);
					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)
						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))
							iax2_dprequest(dp, fr->callno);
					AST_LIST_UNLOCK(&dpcache);
				}
				break;
			case IAX_COMMAND_POKE:
				/* Send back a pong packet with the original timestamp */
				send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);
				break;
			case IAX_COMMAND_PING:
			{
				struct iax_ie_data pingied;
				construct_rr(iaxs[fr->callno], &pingied);
				/* Send back a pong packet with the original timestamp */
				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);
			}
				break;
			case IAX_COMMAND_PONG:
				/* Calculate ping time */
				iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;
				/* save RR info */
				save_rr(fr, &ies);

				/* Good time to write jb stats for this call */
				log_jitterstats(fr->callno);

				if (iaxs[fr->callno]->peerpoke) {
					peer = iaxs[fr->callno]->peerpoke;
					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {
						if (iaxs[fr->callno]->pingtime <= peer->maxms) {
							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);
							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 
							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */
						}
					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {
						if (iaxs[fr->callno]->pingtime > peer->maxms) {
							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);
							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 
							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */
						}
					}
					peer->lastms = iaxs[fr->callno]->pingtime;
					if (peer->smoothing && (peer->lastms > -1))
						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;
					else if (peer->smoothing && peer->lastms < 0)
						peer->historicms = (0 + peer->historicms) / 2;
					else					
						peer->historicms = iaxs[fr->callno]->pingtime;

					/* Remove scheduled iax2_poke_noanswer */
					if (peer->pokeexpire > -1) {
						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {
							peer_unref(peer);
							peer->pokeexpire = -1;
						}
					}
					/* Schedule the next cycle */
					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))
						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));
					else
						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));
					if (peer->pokeexpire == -1)
						peer_unref(peer);
					/* and finally send the ack */
					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
					/* And wrap up the qualify call */
					iax2_destroy(fr->callno);
					peer->callno = 0;
					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);
				}
				break;
			case IAX_COMMAND_LAGRQ:
			case IAX_COMMAND_LAGRP:
				f.src = "LAGRQ";
				f.mallocd = 0;
				f.offset = 0;
				f.samples = 0;
				iax_frame_wrap(fr, &f);
				if (f.subclass.integer == IAX_COMMAND_LAGRQ) {
					/* Received a LAGRQ - echo back a LAGRP */
					fr->af.subclass.integer = IAX_COMMAND_LAGRP;
					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);
				} else {
					/* Received LAGRP in response to our LAGRQ */
					unsigned int ts;
					/* This is a reply we've been given, actually measure the difference */
					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);
					iaxs[fr->callno]->lag = ts - fr->ts;
					if (iaxdebug)
						ast_debug(1, "Peer %s lag measured as %dms\n",
							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);
				}
				break;
			case IAX_COMMAND_AUTHREQ:
				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {
					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");
					break;
				}
				if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {
					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,
								.subclass.integer = AST_CONTROL_HANGUP,
					};
					ast_log(LOG_WARNING, 
						"I don't know how to authenticate %s to %s\n", 
						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));
					iax2_queue_frame(fr->callno, &hangup_fr);
				}
				break;
			case IAX_COMMAND_AUTHREP:
				/* For security, always ack immediately */
				if (delayreject)
					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
				/* Ignore once we've started */
				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {
					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");
					break;
				}
				if (authenticate_verify(iaxs[fr->callno], &ies)) {
					if (authdebug)
						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);
					memset(&ied0, 0, sizeof(ied0));
					auth_fail(fr->callno, IAX_COMMAND_REJECT);
					break;
				}
				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {
					/* This might re-enter the IAX code and need the lock */
					exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);
				} else
					exists = 0;
				if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {
					if (authdebug)
						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
					memset(&ied0, 0, sizeof(ied0));
					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");
					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);
					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
					if (!iaxs[fr->callno]) {
						break;
					}
				} else {
					/* Select an appropriate format */
					if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {
						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {
							using_prefs = "reqonly";
						} else {
							using_prefs = "disabled";
						}
						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;
						memset(&pref, 0, sizeof(pref));
						strcpy(caller_pref_buf, "disabled");
						strcpy(host_pref_buf, "disabled");
					} else {
						struct ast_format tmpfmt;
						using_prefs = "mine";
						if (ies.codec_prefs)
							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);
						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {
							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {
								pref = iaxs[fr->callno]->rprefs;
								using_prefs = "caller";
							} else {
								pref = iaxs[fr->callno]->prefs;
							}
						} else /* if no codec_prefs IE do it the old way */
							pref = iaxs[fr->callno]->prefs;
						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);
						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);
						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);
					}
					if (!format) {
						char tmp1[256], tmp2[256], tmp3[256];
						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {
							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",
								iax2_getformatname(iaxs[fr->callno]->peerformat),
								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));
							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;
						}
						if (!format) {
							if (authdebug) {
								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {
									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),
										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),
										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));
								} else {
									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",
										ast_inet_ntoa(sin.sin_addr),
										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),
										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),
										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));
								}
							}
							memset(&ied0, 0, sizeof(ied0));
							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
							if (!iaxs[fr->callno]) {
								break;
							}
						} else {
							/* Pick one... */
							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {
								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))
									format = 0;
							} else {
								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {
									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";
									memset(&pref, 0, sizeof(pref));
									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?
										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);
									strcpy(caller_pref_buf,"disabled");
									strcpy(host_pref_buf,"disabled");
								} else {
									struct ast_format tmpfmt;
									using_prefs = "mine";
									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {
										/* Do the opposite of what we tried above. */
										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {
											pref = iaxs[fr->callno]->prefs;
										} else {
											pref = iaxs[fr->callno]->rprefs;
											using_prefs = "caller";
										}
										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);
									} else /* if no codec_prefs IE do it the old way */
										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);	
								}
							}
							if (!format) {
								char tmp1[256], tmp2[256], tmp3[256];
								ast_log(LOG_ERROR, "No best format in %s???\n",
									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));
								if (authdebug) {
									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {
										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",
											ast_inet_ntoa(sin.sin_addr),
											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),
											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));
									} else {
										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",
											ast_inet_ntoa(sin.sin_addr),
											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),
											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),
											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));
									}
								}
								memset(&ied0, 0, sizeof(ied0));
								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
								if (!iaxs[fr->callno]) {
									break;
								}
							}
						}
					}
					if (format) {
						/* Authentication received */
						memset(&ied1, 0, sizeof(ied1));
						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);
						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);
						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);
						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {
							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"
											"%srequested format = %s,\n"
											"%srequested prefs = %s,\n"
											"%sactual format = %s,\n"
											"%shost prefs = %s,\n"
											"%spriority = %s\n", 
											ast_inet_ntoa(sin.sin_addr), 
											VERBOSE_PREFIX_4,
											iax2_getformatname(iaxs[fr->callno]->peerformat),
											VERBOSE_PREFIX_4,
											caller_pref_buf,
											VERBOSE_PREFIX_4,
											iax2_getformatname(format),
											VERBOSE_PREFIX_4,
											host_pref_buf,
											VERBOSE_PREFIX_4,
											using_prefs);

							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))
								iax2_destroy(fr->callno);
							else if (ies.vars) {
								struct ast_datastore *variablestore;
								struct ast_variable *var, *prev = NULL;
								AST_LIST_HEAD(, ast_var_t) *varlist;
								varlist = ast_calloc(1, sizeof(*varlist));
								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);
								if (variablestore && varlist) {
									variablestore->data = varlist;
									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;
									AST_LIST_HEAD_INIT(varlist);
									ast_debug(1, "I can haz IAX vars? w00t\n");
									for (var = ies.vars; var; var = var->next) {
										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
										if (prev)
											ast_free(prev);
										prev = var;
										if (!newvar) {
											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */
											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
										} else {
											AST_LIST_INSERT_TAIL(varlist, newvar, entries);
										}
									}
									if (prev)
										ast_free(prev);
									ies.vars = NULL;
									ast_channel_datastore_add(c, variablestore);
								} else {
									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
									if (variablestore)
										ast_datastore_free(variablestore);
									if (varlist)
										ast_free(varlist);
								}
							}
						} else {
							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);
							/* If this is a TBD call, we're ready but now what...  */
							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));
							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {
								goto immediatedial;
							}
						}
					}
				}
				break;
			case IAX_COMMAND_DIAL:
immediatedial:
				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {
					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);
					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");
					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {
						if (authdebug)
							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
						memset(&ied0, 0, sizeof(ied0));
						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");
						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);
						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
						if (!iaxs[fr->callno]) {
							break;
						}
					} else {
						char tmp[256];
						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",
							ast_inet_ntoa(sin.sin_addr),
							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));
						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);
						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))
							iax2_destroy(fr->callno);
						else if (ies.vars) {
							struct ast_datastore *variablestore;
							struct ast_variable *var, *prev = NULL;
							AST_LIST_HEAD(, ast_var_t) *varlist;
							varlist = ast_calloc(1, sizeof(*varlist));
							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);
							ast_debug(1, "I can haz IAX vars? w00t\n");
							if (variablestore && varlist) {
								variablestore->data = varlist;
								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;
								AST_LIST_HEAD_INIT(varlist);
								for (var = ies.vars; var; var = var->next) {
									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
									if (prev)
										ast_free(prev);
									prev = var;
									if (!newvar) {
										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */
										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
									} else {
										AST_LIST_INSERT_TAIL(varlist, newvar, entries);
									}
								}
								if (prev)
									ast_free(prev);
								ies.vars = NULL;
								ast_channel_datastore_add(c, variablestore);
							} else {
								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
								if (variablestore)
									ast_datastore_free(variablestore);
								if (varlist)
									ast_free(varlist);
							}
						}
					}
				}
				break;
			case IAX_COMMAND_INVAL:
				iaxs[fr->callno]->error = ENOTCONN;
				ast_debug(1, "Immediately destroying %d, having received INVAL\n", fr->callno);
				iax2_destroy(fr->callno);
				ast_debug(1, "Destroying call %d\n", fr->callno);
				break;
			case IAX_COMMAND_VNAK:
				ast_debug(1, "Received VNAK: resending outstanding frames\n");
				/* Force retransmission */
				vnak_retransmit(fr->callno, fr->iseqno);
				break;
			case IAX_COMMAND_REGREQ:
			case IAX_COMMAND_REGREL:
				/* For security, always ack immediately */
				if (delayreject)
					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
				if (register_verify(fr->callno, &sin, &ies)) {
					if (!iaxs[fr->callno]) {
						break;
					}
					/* Send delayed failure */
					auth_fail(fr->callno, IAX_COMMAND_REGREJ);
					break;
				}
				if (!iaxs[fr->callno]) {
					break;
				}
				if ((ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||
						ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)) {

					if (f.subclass.integer == IAX_COMMAND_REGREL) {
						memset(&sin, 0, sizeof(sin));
						sin.sin_family = AF_INET;
					}
					if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {
						ast_log(LOG_WARNING, "Registry error\n");
					}
					if (!iaxs[fr->callno]) {
						break;
					}
					if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {
						ast_mutex_unlock(&iaxsl[fr->callno]);
						check_provisioning(&sin, fd, ies.serviceident, ies.provver);
						ast_mutex_lock(&iaxsl[fr->callno]);
					}
					break;
				}
				registry_authrequest(fr->callno);
				break;
			case IAX_COMMAND_REGACK:
				if (iax2_ack_registry(&ies, &sin, fr->callno)) 
					ast_log(LOG_WARNING, "Registration failure\n");
				/* Send ack immediately, before we destroy */
				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
				iax2_destroy(fr->callno);
				break;
			case IAX_COMMAND_REGREJ:
				if (iaxs[fr->callno]->reg) {
					if (authdebug) {
						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));
						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");
					}
					iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;
				}
				/* Send ack immediately, before we destroy */
				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
				iax2_destroy(fr->callno);
				break;
			case IAX_COMMAND_REGAUTH:
				/* Authentication request */
				if (registry_rerequest(&ies, fr->callno, &sin)) {
					memset(&ied0, 0, sizeof(ied0));
					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");
					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);
					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
				}
				break;
			case IAX_COMMAND_TXREJ:
				iaxs[fr->callno]->transferring = 0;
				ast_verb(3, "Channel '%s' unable to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");
				memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer));
				if (iaxs[fr->callno]->bridgecallno) {
					if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {
						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;
						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);
					}
				}
				break;
			case IAX_COMMAND_TXREADY:
				if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||
				    (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)) {
					if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)
						iaxs[fr->callno]->transferring = TRANSFER_MREADY;
					else
						iaxs[fr->callno]->transferring = TRANSFER_READY;
					ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");
					if (iaxs[fr->callno]->bridgecallno) {
						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||
						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {
							/* They're both ready, now release them. */
							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {
								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",
										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");

								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;
								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;

								memset(&ied0, 0, sizeof(ied0));
								memset(&ied1, 0, sizeof(ied1));
								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);
								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);
								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);
								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);
							} else {
								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",
										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");

								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;
								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;
								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);
								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);

								/* Stop doing lag & ping requests */
								stop_stuff(fr->callno);
								stop_stuff(iaxs[fr->callno]->bridgecallno);

								memset(&ied0, 0, sizeof(ied0));
								memset(&ied1, 0, sizeof(ied1));
								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);
								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);
								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);
								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);
							}

						}
					}
				}
				break;
			case IAX_COMMAND_TXREQ:
				try_transfer(iaxs[fr->callno], &ies);
				break;
			case IAX_COMMAND_TXCNT:
				if (iaxs[fr->callno]->transferring)
					send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);
				break;
			case IAX_COMMAND_TXREL:
				/* Send ack immediately, rather than waiting until we've changed addresses */
				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
				complete_transfer(fr->callno, &ies);
				stop_stuff(fr->callno);	/* for attended transfer to work with libiax */
				break;	
			case IAX_COMMAND_TXMEDIA:
				if (iaxs[fr->callno]->transferring == TRANSFER_READY) {
					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {
						/* Cancel any outstanding frames and start anew */
						if (cur->transfer) {
							cur->retries = -1;
						}
					}
					/* Start sending our media to the transfer address, but otherwise leave the call as-is */
					iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;
				}
				break;
			case IAX_COMMAND_RTKEY:
				if (!IAX_CALLENCRYPTED(iaxs[fr->callno])) {
					ast_log(LOG_WARNING, 
						"we've been told to rotate our encryption key, "
						"but this isn't an encrypted call. bad things will happen.\n"
					);
					break;
				}

				IAX_DEBUGDIGEST("Receiving", ies.challenge);

				ast_aes_set_decrypt_key((unsigned char *) ies.challenge, &iaxs[fr->callno]->dcx);
				break;
			case IAX_COMMAND_DPREP:
				complete_dpreply(iaxs[fr->callno], &ies);
				break;
			case IAX_COMMAND_UNSUPPORT:
				ast_log(LOG_NOTICE, "Peer did not understand our iax command '%d'\n", ies.iax_unknown);
				break;
			case IAX_COMMAND_FWDOWNL:
				/* Firmware download */
				if (!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)) {
					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);
					break;
				}
				memset(&ied0, 0, sizeof(ied0));
				res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc);
				if (res < 0)
					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
				else if (res > 0)
					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);
				else
					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);
				break;
			case IAX_COMMAND_CALLTOKEN:
			{
				struct iax_frame *cur;
				/* find last sent frame */
				if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata) {
					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);
				}
				break;
			}
			default:
				ast_debug(1, "Unknown IAX command %d on %d/%d\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno);
				memset(&ied0, 0, sizeof(ied0));
				iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer);
				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1);
			}
			/* Free remote variables (if any) */
			if (ies.vars) {
				ast_variables_destroy(ies.vars);
				ast_debug(1, "I can haz IAX vars, but they is no good :-(\n");
				ies.vars = NULL;
			}

			/* Don't actually pass these frames along */
			if ((f.subclass.integer != IAX_COMMAND_ACK) &&
			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&
			  (f.subclass.integer != IAX_COMMAND_TXACC) &&
			  (f.subclass.integer != IAX_COMMAND_INVAL) &&
			  (f.subclass.integer != IAX_COMMAND_VNAK)) {
				if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)
					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
			}
			ast_mutex_unlock(&iaxsl[fr->callno]);
			return 1;
		}
		/* Unless this is an ACK or INVAL frame, ack it */
		if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)
			send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
	}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
11,51
11,52
11,53
11,54
11,55
11,56
11,57
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
23,24
24,25
24,26
26,27
26,28
28,29
30,31
31,32
32,33
32,34
34,35
34,36
36,37
38,39
39,40
39,41
41,42
41,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
49,52
52,53
53,54
53,55
54,55
54,56
55,56
57,58
59,60
59,61
60,61
63,64
64,65
64,66
65,66
67,68
67,69
67,70
70,71
71,72
71,73
72,73
72,74
73,74
75,76
77,78
77,79
78,79
81,82
82,83
82,84
83,84
85,86
85,87
85,88
88,89
89,90
89,91
90,91
90,92
91,92
93,94
95,96
95,97
96,97
99,100
100,101
100,102
101,102
103,104
103,105
103,106
106,107
107,108
107,109
108,109
108,110
109,110
111,112
113,114
113,115
114,115
117,118
118,119
118,120
119,120
121,122
121,123
124,125
125,126
125,127
126,127
128,129
128,130
131,132
132,133
132,134
133,134
135,136
135,137
137,138
138,139
140,141
141,142
141,143
142,143
144,145
144,146
144,147
147,148
148,149
150,151
151,152
151,153
152,153
154,155
154,156
157,158
158,159
158,160
159,160
161,162
161,163
164,165
165,166
165,167
166,167
168,169
170,171
171,172
171,173
171,174
172,173
174,175
176,177
178,179
179,180
179,181
180,181
182,183
184,185
185,186
185,187
187,188
189,190
190,191
190,192
192,193
194,195
195,196
195,197
197,198
197,199
199,200
201,202
202,203
202,204
204,205
204,206
204,207
206,207
208,209
210,211
211,212
211,213
212,213
214,215
214,216
217,218
218,219
218,220
220,221
220,222
222,223
224,225
225,226
225,227
227,228
227,229
229,230
231,232
232,233
232,234
233,234
235,236
237,238
238,239
238,240
240,241
240,242
240,243
243,244
245,246
246,247
246,248
247,248
249,250
249,251
250,251
252,253
252,254
253,254
254,255
255,256
256,257
259,260
260,261
260,262
260,263
260,264
261,262
263,264
266,267
267,268
268,269
269,270
271,272
272,273
272,274
273,274
273,275
274,275
278,279
279,280
279,281
280,281
282,283
282,284
283,284
286,287
287,288
287,289
288,289
290,291
290,292
291,292
294,295
295,296
295,297
295,298
295,299
296,297
298,299
299,300
301,302
302,303
302,304
303,304
306,307
307,308
308,309
310,311
310,312
311,312
311,313
312,313
314,315
315,316
316,317
317,318
319,320
319,321
320,321
321,322
321,323
321,324
321,325
321,326
322,323
324,325
327,328
329,330
329,331
330,331
330,332
333,334
334,335
335,336
336,337
338,339
340,341
340,342
340,343
341,342
341,343
342,343
343,344
343,345
344,345
344,346
345,346
349,350
350,351
350,352
351,352
351,353
352,353
354,355
354,356
355,356
359,360
359,361
359,362
360,361
360,362
361,362
361,363
362,363
364,365
365,366
366,367
367,368
369,370
369,371
370,371
371,372
371,373
371,374
371,375
371,376
372,373
374,375
377,378
377,379
378,379
380,381
380,382
381,382
384,385
384,386
385,386
387,388
387,389
388,389
391,392
393,394
394,395
395,396
395,397
396,397
399,400
399,401
400,401
400,402
401,402
402,403
402,404
403,404
403,405
404,405
408,409
409,410
410,411
410,412
411,412
411,413
412,413
414,415
414,416
415,416
419,420
420,421
420,422
420,423
420,424
420,425
420,426
421,422
423,424
425,426
427,428
428,429
430,431
432,433
434,435
434,436
434,437
435,436
435,437
436,437
436,438
437,438
439,440
439,441
440,441
443,444
445,446
445,447
445,448
445,449
445,450
445,451
445,452
445,453
445,454
446,447
446,448
447,448
447,449
448,449
450,451
451,452
452,453
453,454
455,456
455,457
456,457
457,458
457,459
457,460
457,461
457,462
458,459
460,461
463,464
463,465
464,465
466,467
466,468
467,468
470,471
470,472
471,472
473,474
473,475
474,475
477,478
479,480
480,481
480,482
481,482
483,484
483,485
484,485
484,486
485,486
487,488
487,489
488,489
491,492
492,493
494,495
494,496
495,496
495,497
496,497
497,498
497,499
498,499
501,502
502,503
502,504
503,504
503,505
504,505
507,508
507,509
507,510
507,511
507,512
507,513
507,514
508,509
510,511
510,512
511,512
511,513
512,513
514,515
514,516
515,516
518,519
519,520
521,522
523,524
524,525
526,527
528,529
531,532
531,533
531,534
532,533
533,534
533,535
534,535
536,537
537,538
537,539
537,540
540,541
541,542
541,543
542,543
545,546
545,547
546,547
546,548
547,548
547,549
548,549
550,551
550,552
551,552
554,555
554,556
554,557
555,556
557,558
557,559
558,559
560,561
560,562
561,562
564,565
566,567
566,568
567,568
567,569
568,569
568,570
568,571
568,572
568,573
569,570
571,572
571,573
572,573
575,576
577,578
578,579
580,581
581,582
583,584
583,585
583,586
584,585
585,586
585,587
585,588
586,587
588,589
591,592
592,593
592,594
593,594
595,596
596,597
596,598
597,598
599,600
599,601
600,601
603,604
605,606
606,607
606,608
607,608
610,611
611,612
611,613
612,613
614,615
615,616
615,617
616,617
618,619
618,620
619,620
622,623
623,624
623,625
624,625
624,626
625,626
628,629
628,630
629,630
632,633
632,634
632,635
633,634
633,635
634,635
634,636
635,636
638,639
640,641
640,642
641,642
642,643
642,644
642,645
643,644
645,646
646,647
646,648
647,648
647,649
648,649
652,653
653,654
653,655
654,655
656,657
656,658
657,658
657,659
658,659
661,662
663,664
663,665
664,665
664,666
665,666
666,667
666,668
667,668
667,669
668,669
673,674
674,675
675,676
675,677
676,677
678,679
679,680
679,681
680,681
680,682
681,682
685,686
685,687
685,688
686,687
686,688
687,688
687,689
688,689
691,692
693,694
694,695
695,696
695,697
695,698
696,697
698,699
699,700
699,701
700,701
700,702
701,702
705,706
705,707
706,707
708,709
708,710
709,710
712,713
713,714
714,715
714,716
715,716
715,717
716,717
716,718
717,718
721,722
721,723
722,723
724,725
724,726
725,726
728,729
728,730
728,731
729,730
729,731
730,731
730,732
731,732
731,733
732,733
735,736
737,738
737,739
738,739
738,740
739,740
739,741
740,741
744,745
746,747
746,748
747,748
748,749
748,750
748,751
748,752
748,753
748,754
748,755
748,756
748,757
749,750
752,753
752,754
753,754
755,756
755,757
756,757
759,760
760,761
762,763
764,765
764,766
765,766
767,768
767,769
768,769
771,772
771,773
772,773
772,774
773,774
777,778
779,780
781,782
783,784
783,785
784,785
784,786
785,786
785,787
786,787
786,788
787,788
787,789
788,789
791,792
793,794
793,795
794,795
794,796
795,796
795,797
796,797
800,801
802,803
802,804
803,804
806,807
807,808
809,810
810,811
810,812
811,812
811,813
812,813
815,816
815,817
816,817
818,819
819,820
820,821
821,822
823,824
823,825
823,826
824,825
824,826
825,826
828,829
829,830
829,831
829,832
830,831
830,832
831,832
831,833
832,833
835,836
837,838
837,839
837,840
838,839
838,840
839,840
839,841
839,842
839,843
840,841
842,843
843,844
845,846
845,847
846,847
846,848
847,848
850,851
851,852
851,853
852,853
855,856
855,857
856,857
859,860
859,861
859,862
860,861
861,862
861,863
861,864
861,865
862,863
864,865
867,868
867,869
868,869
870,871
870,872
871,872
874,875
875,876
875,877
876,877
878,879
878,880
879,880
882,883
884,885
885,886
885,887
886,887
886,888
887,888
887,889
888,889
892,893
894,895
895,896
895,897
896,897
896,898
897,898
901,902
901,903
902,903
903,904
903,905
904,905
904,906
905,906
905,907
906,907
910,911
910,912
911,912
911,913
912,913
915,916
916,917
916,918
917,918
920,921
921,922
921,923
921,924
921,925
922,923
924,925
925,926
928,929
929,930
930,931
932,933
932,934
933,934
933,935
933,936
934,935
934,936
935,936
935,937
936,937
939,940
941,942
942,943
942,944
943,944
943,945
944,945
944,946
945,946
949,950
951,952
952,953
952,954
953,954
953,955
954,955
954,956
955,956
959,960
961,962
962,963
962,964
962,965
962,966
963,964
965,966
966,967
969,970
970,971
971,972
973,974
973,975
974,975
974,976
975,976
976,977
978,979
978,980
978,981
978,982
979,980
981,982
981,983
982,983
985,986
985,987
986,987
986,988
987,988
992,993
992,994
993,994
993,995
994,995
994,996
994,997
994,998
994,999
995,996
997,998
999,1000
1000,1001
1002,1003
1003,1004
1005,1006
1007,1008
1007,1009
1008,1009
1009,1010
1009,1011
1010,1011
1012,1013
1012,1014
1013,1014
1016,1017
1018,1019
1018,1020
1018,1021
1019,1020
1019,1021
1020,1021
1020,1022
1021,1022
1024,1025
1024,1026
1025,1026
1028,1029
1029,1030
1030,1031
1031,1032
1032,1033
1032,1034
1032,1035
1033,1034
1034,1035
1034,1036
1035,1036
1035,1037
1036,1037
1039,1040
1041,1042
1042,1043
1042,1044
1043,1044
1043,1045
1044,1045
1044,1046
1045,1046
1050,1051
1051,1052
1051,1053
1051,1054
1051,1055
1052,1053
1054,1055
1055,1056
1058,1059
1059,1060
1060,1061
1062,1063
1062,1064
1063,1064
1064,1065
1064,1066
1065,1066
1068,1069
1068,1070
1068,1071
1069,1070
1070,1071
1070,1072
1072,1073
1072,1074
1074,1075
1076,1077
1076,1078
1077,1078
1077,1079
1078,1079
1079,1080
1079,1081
1080,1081
1080,1082
1081,1082
1083,1084
1083,1085
1084,1085
1087,1088
1089,1090
1090,1091
1090,1092
1091,1092
1092,1093
1092,1094
1093,1094
1093,1095
1094,1095
1097,1098
1099,1100
1100,1101
1100,1102
1101,1102
1101,1103
1102,1103
1102,1104
1103,1104
1107,1108
1109,1110
1110,1111
1111,1112
1111,1113
1112,1113
1115,1116
1115,1117
1116,1117
1117,1118
1117,1119
1117,1120
1118,1119
1118,1120
1118,1121
1119,1120
1119,1121
1120,1121
1120,1122
1121,1122
1121,1123
1122,1123
1125,1126
1127,1128
1127,1129
1128,1129
1128,1130
1129,1130
1129,1131
1130,1131
1134,1135
1136,1137
1137,1138
1138,1139
1138,1140
1138,1141
1138,1142
1138,1143
1138,1144
1138,1145
1138,1146
1138,1147
1139,1140
1142,1143
1142,1144
1143,1144
1145,1146
1145,1147
1146,1147
1149,1150
1150,1151
1152,1153
1154,1155
1154,1156
1155,1156
1157,1158
1157,1159
1158,1159
1161,1162
1161,1163
1162,1163
1162,1164
1163,1164
1167,1168
1169,1170
1171,1172
1171,1173
1172,1173
1172,1174
1173,1174
1173,1175
1174,1175
1174,1176
1175,1176
1178,1179
1180,1181
1181,1182
1181,1183
1182,1183
1182,1184
1183,1184
1183,1185
1184,1185
1184,1186
1185,1186
1189,1190
1191,1192
1191,1193
1192,1193
1192,1194
1193,1194
1193,1195
1194,1195
1198,1199
1200,1201
1201,1202
1202,1203
1202,1204
1202,1205
1202,1206
1202,1207
1202,1208
1202,1209
1202,1210
1202,1211
1203,1204
1206,1207
1206,1208
1207,1208
1209,1210
1209,1211
1210,1211
1213,1214
1214,1215
1216,1217
1218,1219
1218,1220
1219,1220
1221,1222
1221,1223
1222,1223
1225,1226
1225,1227
1226,1227
1226,1228
1227,1228
1231,1232
1233,1234
1235,1236
1236,1237
1236,1238
1237,1238
1239,1240
1239,1241
1240,1241
1243,1244
1245,1246
1245,1247
1246,1247
1246,1248
1247,1248
1247,1249
1248,1249
1252,1253
1252,1254
1252,1255
1253,1254
1254,1255
1254,1256
1255,1256
1257,1258
1257,1259
1260,1261
1261,1262
1261,1263
1262,1263
1264,1265
1265,1266
1265,1267
1265,1268
1268,1269
1269,1270
1269,1271
1270,1271
1273,1274
1273,1275
1274,1275
1274,1276
1275,1276
1275,1277
1276,1277
1278,1279
1278,1280
1279,1280
1282,1283
1283,1284
1284,1285
1284,1286
1285,1286
1287,1288
1287,1289
1288,1289
1290,1291
1290,1292
1291,1292
1294,1295
1294,1296
1295,1296
1296,1297
1296,1298
1297,1298
1299,1300
1301,1302
1302,1303
1302,1304
1303,1304
1305,1306
1307,1308
1307,1309
1308,1309
1308,1310
1309,1310
1310,1311
1310,1312
1311,1312
1314,1315
1315,1316
1315,1317
1316,1317
1318,1319
1318,1320
1319,1320
1322,1323
1322,1324
1322,1325
1322,1326
1323,1324
1323,1325
1324,1325
1324,1326
1325,1326
1325,1327
1326,1327
1328,1329
1328,1330
1329,1330
1332,1333
1334,1335
1335,1336
1335,1337
1336,1337
1336,1338
1337,1338
1338,1339
1338,1340
1339,1340
1339,1341
1340,1341
1340,1342
1341,1342
1342,1343
1342,1344
1343,1344
1343,1345
1344,1345
1344,1346
1345,1346
1349,1350
1351,1352
1352,1353
1352,1354
1353,1354
1353,1355
1354,1355
1354,1356
1355,1356
1359,1360
1361,1362
1362,1363
1362,1364
1363,1364
1363,1365
1364,1365
1364,1366
1365,1366
1369,1370
1371,1372
1372,1373
1372,1374
1373,1374
1373,1375
1374,1375
1374,1376
1375,1376
1379,1380
1381,1382
1382,1383
1382,1384
1383,1384
1383,1385
1384,1385
1387,1388
1389,1390
1390,1391
1390,1392
1390,1393
1390,1394
1390,1395
1391,1392
1393,1394
1394,1395
1396,1397
1396,1398
1397,1398
1397,1399
1398,1399
1400,1401
1400,1402
1401,1402
1404,1405
1405,1406
1407,1408
1407,1409
1408,1409
1408,1410
1409,1410
1411,1412
1411,1413
1412,1413
1415,1416
1416,1417
1418,1419
1420,1421
1420,1422
1421,1422
1421,1423
1422,1423
1422,1424
1423,1424
1427,1428
1428,1429
1428,1430
1429,1430
1431,1432
1432,1433
1432,1434
1432,1435
1435,1436
1436,1437
1436,1438
1437,1438
1440,1441
1441,1442
1441,1443
1442,1443
1444,1445
1444,1446
1445,1446
1448,1449
1450,1451
1450,1452
1451,1452
1451,1453
1452,1453
1452,1454
1452,1455
1453,1454
1455,1456
1455,1457
1456,1457
1458,1459
1458,1460
1459,1460
1462,1463
1464,1465
1465,1466
1467,1468
1467,1469
1468,1469
1468,1470
1469,1470
1469,1471
1469,1472
1469,1473
1469,1474
1470,1471
1472,1473
1472,1474
1473,1474
1476,1477
1478,1479
1479,1480
1481,1482
1482,1483
1484,1485
1484,1486
1484,1487
1484,1488
1485,1486
1486,1487
1486,1488
1486,1489
1487,1488
1489,1490
1492,1493
1493,1494
1493,1495
1494,1495
1496,1497
1496,1498
1497,1498
1500,1501
1501,1502
1501,1503
1502,1503
1504,1505
1505,1506
1505,1507
1505,1508
1508,1509
1509,1510
1509,1511
1510,1511
1513,1514
1515,1516
1516,1517
1516,1518
1517,1518
1520,1521
1520,1522
1521,1522
1521,1523
1522,1523
1522,1524
1523,1524
1523,1525
1524,1525
1524,1526
1525,1526
1527,1528
1527,1529
1528,1529
1532,1533
1532,1534
1533,1534
1533,1535
1534,1535
1537,1538
1539,1540
1540,1541
1540,1542
1541,1542
1541,1543
1542,1543
1542,1544
1543,1544
1543,1545
1544,1545
1544,1546
1545,1546
1548,1549
1550,1551
1550,1552
1551,1552
1551,1553
1552,1553
1555,1556
1557,1558
1557,1559
1558,1559
1558,1560
1559,1560
1562,1563
1564,1565
1564,1566
1565,1566
1565,1567
1566,1567
1569,1570
1571,1572
1571,1573
1571,1574
1571,1575
1571,1576
1571,1577
1571,1578
1571,1579
1571,1580
1571,1581
1571,1582
1571,1583
1571,1584
1571,1585
1571,1586
1571,1587
1572,1573
1573,1574
1573,1575
1574,1575
1576,1577
1576,1578
1579,1580
1580,1581
1580,1582
1582,1583
1582,1584
1584,1585
1585,1586
1586,1587
1587,1588
1588,1589
1590,1591
1591,1592
1591,1593
1593,1594
1593,1595
1593,1596
1595,1596
1597,1598
1599,1600
1600,1601
1600,1602
1600,1603
1600,1604
1601,1602
1603,1604
1603,1605
1604,1605
1607,1608
1609,1610
1610,1611
1611,1612
1613,1614
1614,1615
1614,1616
1615,1616
1618,1619
1619,1620
1619,1621
1620,1621
1623,1624
1623,1625
1624,1625
1624,1626
1625,1626
1625,1627
1626,1627
1630,1631
1631,1632
1632,1633
1633,1634
1635,1636
1635,1637
1636,1637
1636,1638
1637,1638
1637,1639
1638,1639
1642,1643
1643,1644
1644,1645
1645,1646
1647,1648
1648,1649
1648,1650
1649,1650
1651,1652
1651,1653
1652,1653
1654,1655
1656,1657
1657,1658
1657,1659
1658,1659
1660,1661
1660,1662
1661,1662
1663,1664
1665,1666
1666,1667
1666,1668
1666,1669
1666,1670
1667,1668
1669,1670
1669,1671
1670,1671
1673,1674
1673,1675
1674,1675
1676,1677
1676,1678
1677,1678
1677,1679
1678,1679
1680,1681
1680,1682
1681,1682
1685,1686
1687,1688
1688,1689
1688,1690
1689,1690
1689,1691
1690,1691
1693,1694
1693,1695
1694,1695
1697,1698
1698,1699
1698,1700
1698,1701
1698,1702
1698,1703
1698,1704
1699,1700
1701,1702
1701,1703
1702,1703
1705,1706
1705,1707
1706,1707
1706,1708
1707,1708
1709,1710
1710,1711
1711,1712
1712,1713
1716,1717
1718,1719
1718,1720
1719,1720
1722,1723
1723,1724
1723,1725
1724,1725
1726,1727
1726,1728
1727,1728
1730,1731
1730,1732
1731,1732
1731,1733
1732,1733
1732,1734
1733,1734
1735,1736
1735,1737
1736,1737
1739,1740
1739,1741
1740,1741
1740,1742
1741,1742
1743,1744
1743,1745
1744,1745
1748,1749
1748,1750
1748,1751
1749,1750
1750,1751
1750,1752
1750,1753
1750,1754
1750,1755
1751,1752
1753,1754
1753,1755
1754,1755
1754,1756
1755,1756
1757,1758
1757,1759
1758,1759
1762,1763
1764,1765
1766,1767
1768,1769
1769,1770
1769,1771
1769,1772
1769,1773
1770,1771
1772,1773
1772,1774
1773,1774
1773,1775
1774,1775
1776,1777
1776,1778
1777,1778
1781,1782
1783,1784
1785,1786
1786,1787
1786,1788
1787,1788
1789,1790
1789,1791
1790,1791
1790,1792
1791,1792
1793,1794
1793,1795
1794,1795
1798,1799
1798,1800
1799,1800
1800,1801
1800,1802
1801,1802
1803,1804
1803,1805
1804,1805
1807,1808
1807,1809
1807,1810
1808,1809
1809,1810
1809,1811
1810,1811
1812,1813
1812,1814
1813,1814
1816,1817
1817,1818
1817,1819
1818,1819
1820,1821
1821,1822
1821,1823
1821,1824
1824,1825
1825,1826
1825,1827
1826,1827
1829,1830
1831,1832
1832,1833
1833,1834
1833,1835
1834,1835
1834,1836
1835,1836
1837,1838
1837,1839
1838,1839
1842,1843
1842,1844
1843,1844
1843,1845
1844,1845
1844,1846
1845,1846
1845,1847
1846,1847
1847,1848
1847,1849
1847,1850
1848,1849
1850,1851
1851,1852
1853,1854
1854,1855
1854,1856
1855,1856
1855,1857
1856,1857
1858,1859
1858,1860
1859,1860
1863,1864
1864,1865
1866,1867
1866,1868
1867,1868
1867,1869
1868,1869
1868,1870
1869,1870
1873,1874
1875,1876
1875,1877
1876,1877
1876,1878
1877,1878
1877,1879
1878,1879
1882,1883
1884,1885
1884,1886
1884,1887
1885,1886
1886,1887
1886,1888
1888,1889
1890,1891
1891,1892
1891,1893
1892,1893
1894,1895
1894,1896
1895,1896
1895,1897
1898,1899
1899,1900
1899,1901
1900,1901
1900,1902
1901,1902
1903,1904
1903,1905
1904,1905
1907,1908
1908,1909
1910,1911
1910,1912
1911,1912
1911,1913
1912,1913
1914,1915
1914,1916
1915,1916
1917,1918
1917,1919
1918,1919
1918,1920
1919,1920
1921,1922
1921,1923
1922,1923
1926,1927
1926,1928
1926,1929
1927,1928
1927,1929
1928,1929
1928,1930
1929,1930
1929,1931
1930,1931
1932,1933
1932,1934
1933,1934
1937,1938
1938,1939
1939,1940
1939,1941
1940,1941
1942,1943
1943,1944
1943,1945
1945,1946
1946,1947
1946,1948
1947,1948
1950,1951
1951,1952
1951,1953
1952,1953
1952,1954
1953,1954
1953,1955
1954,1955
1956,1957
1956,1958
1957,1958
1961,1962
1963,1964
1964,1965
1964,1966
1965,1966
1967,1968
1968,1969
1968,1970
1970,1971
1971,1972
1971,1973
1972,1973
1975,1976
1975,1977
1976,1977
1976,1978
1977,1978
1977,1979
1978,1979
1980,1981
1980,1982
1981,1982
1984,1985
1986,1987
1986,1988
1986,1989
1986,1990
1986,1991
1986,1992
1986,1993
1986,1994
1986,1995
1986,1996
1986,1997
1986,1998
1986,1999
1986,2000
1986,2001
1986,2002
1986,2003
1986,2004
1986,2005
1987,1988
1987,1989
1988,1989
1990,1991
1991,1992
1991,1993
1991,1994
1991,1995
1991,1996
1991,1997
1992,1993
1996,1997
1996,1998
1997,1998
2000,2001
2000,2002
2001,2002
2004,2005
2004,2006
2005,2006
2005,2007
2006,2007
2010,2011
2011,2012
2011,2013
2012,2013
2012,2014
2013,2014
2016,2017
2016,2018
2017,2018
2020,2021
2021,2022
2021,2023
2022,2023
2022,2024
2023,2024
2026,2027
2026,2028
2027,2028
2030,2031
2031,2032
2031,2033
2032,2033
2032,2034
2033,2034
2036,2037
2036,2038
2037,2038
2039,2040
2039,2041
2040,2041
2043,2044
2043,2045
2044,2045
2044,2046
2045,2046
2046,2047
2046,2048
2047,2048
2047,2049
2048,2049
2050,2051
2050,2052
2051,2052
2054,2055
2056,2057
2057,2058
2057,2059
2058,2059
2058,2060
2059,2060
2062,2063
2064,2065
2065,2066
2065,2067
2066,2067
2069,2070
2069,2071
2069,2072
2070,2071
2070,2072
2071,2072
2072,2073
2072,2074
2073,2074
2073,2075
2074,2075
2074,2076
2075,2076
2077,2078
2077,2079
2078,2079
2082,2083
2082,2084
2083,2084
2086,2087
2087,2088
2087,2089
2088,2089
2088,2090
2089,2090
2089,2091
2090,2091
2090,2092
2091,2092
2093,2094
2093,2095
2094,2095
2098,2099
2099,2100
2099,2101
2100,2101
2100,2102
2101,2102
2101,2103
2102,2103
2102,2104
2103,2104
2104,2105
2104,2106
2105,2106
2105,2107
2106,2107
2106,2108
2107,2108
2111,2112
2113,2114
2114,2115
2114,2116
2115,2116
2115,2117
2116,2117
2116,2118
2117,2118
2121,2122
2123,2124
2124,2125
2124,2126
2125,2126
2125,2127
2126,2127
2126,2128
2127,2128
2131,2132
2133,2134
2134,2135
2134,2136
2135,2136
2135,2137
2136,2137
2136,2138
2137,2138
2141,2142
2143,2144
2144,2145
2144,2146
2145,2146
2145,2147
2146,2147
2146,2148
2147,2148
2151,2152
2153,2154
2154,2155
2154,2156
2155,2156
2155,2157
2156,2157
2159,2160
2161,2162
2162,2163
2162,2164
2163,2164
2163,2165
2164,2165
2165,2166
2165,2167
2166,2167
2166,2168
2167,2168
2167,2169
2168,2169
2168,2170
2169,2170
2169,2171
2170,2171
2170,2172
2171,2172
2171,2173
2172,2173
2173,2174
2173,2175
2174,2175
2174,2176
2175,2176
2175,2177
2176,2177
2180,2181
2182,2183
2183,2184
2183,2185
2184,2185
2184,2186
2185,2186
2185,2187
2186,2187
2190,2191
2192,2193
2193,2194
2193,2195
2194,2195
2194,2196
2195,2196
2195,2197
2196,2197
2200,2201
2202,2203
2203,2204
2203,2205
2204,2205
2204,2206
2205,2206
2205,2207
2206,2207
2210,2211
2212,2213
2213,2214
2213,2215
2214,2215
2214,2216
2215,2216
2215,2217
2216,2217
2220,2221
2222,2223
2223,2224
2223,2225
2224,2225
2224,2226
2225,2226
2225,2227
2226,2227
2230,2231
2232,2233
2233,2234
2233,2235
2234,2235
2234,2236
2235,2236
2235,2237
2236,2237
2240,2241
2242,2243
2243,2244
2243,2245
2244,2245
2244,2246
2245,2246
2245,2247
2246,2247
2250,2251
2252,2253
2253,2254
2253,2255
2254,2255
2254,2256
2255,2256
2258,2259
2260,2261
2260,2262
2260,2263
2260,2264
2260,2265
2261,2262
2262,2263
2262,2264
2262,2265
2262,2266
2262,2267
2262,2268
2262,2269
2263,2264
2267,2268
2267,2269
2268,2269
2268,2270
2269,2270
2271,2272
2271,2273
2272,2273
2276,2277
2276,2278
2277,2278
2280,2281
2280,2282
2281,2282
2284,2285
2284,2286
2285,2286
2285,2287
2286,2287
2290,2291
2290,2292
2290,2293
2291,2292
2291,2293
2292,2293
2292,2294
2293,2294
2293,2295
2296,2297
2297,2298
2297,2299
2298,2299
2298,2300
2299,2300
2299,2301
2300,2301
2302,2303
2302,2304
2303,2304
2307,2308
2307,2309
2308,2309
2312,2313
2313,2314
2313,2315
2314,2315
2314,2316
2315,2316
2316,2317
2316,2318
2317,2318
2317,2319
2318,2319
2321,2322
2323,2324
2324,2325
2324,2326
2325,2326
2326,2327
2326,2328
2327,2328
2327,2329
2328,2329
2328,2330
2329,2330
2333,2334
2335,2336
2336,2337
2336,2338
2337,2338
2337,2339
2338,2339
2338,2340
2339,2340
2343,2344
2345,2346
2345,2347
2346,2347
2347,2348
2347,2349
2347,2350
2348,2349
2352,2353
2353,2354
2353,2355
2353,2356
2353,2357
2353,2358
2353,2359
2353,2360
2353,2361
2354,2355
2356,2357
2356,2358
2357,2358
2359,2360
2359,2361
2360,2361
2363,2364
2365,2366
2367,2368
2367,2369
2368,2369
2371,2372
2374,2375
2374,2376
2375,2376
2378,2379
2379,2380
2380,2381
2380,2382
2381,2382
2383,2384
2383,2385
2384,2385
2387,2388
2388,2389
2388,2390
2389,2390
2391,2392
2391,2393
2392,2393
2395,2396
2396,2397
2396,2398
2397,2398
2399,2400
2400,2401
2400,2402
2400,2403
2403,2404
2404,2405
2404,2406
2405,2406
2408,2409
2410,2411
2411,2412
2411,2413
2412,2413
2412,2414
2413,2414
2414,2415
2414,2416
2415,2416
2415,2417
2416,2417
2416,2418
2417,2418
2417,2419
2418,2419
2419,2420
2419,2421
2420,2421
2420,2422
2421,2422
2421,2423
2422,2423
2426,2427
2428,2429
2429,2430
2429,2431
2430,2431
2430,2432
2431,2432
2431,2433
2432,2433
2436,2437
2438,2439
2439,2440
2439,2441
2440,2441
2440,2442
2441,2442
2441,2443
2442,2443
2446,2447
2448,2449
2449,2450
2449,2451
2450,2451
2450,2452
2451,2452
2451,2453
2452,2453
2456,2457
2458,2459
2459,2460
2459,2461
2460,2461
2460,2462
2461,2462
2461,2463
2462,2463
2466,2467
2468,2469
2469,2470
2469,2471
2470,2471
2470,2472
2471,2472
2474,2475
2476,2477
2477,2478
2478,2479
2478,2480
2479,2480
2479,2481
2480,2481
2482,2483
2482,2484
2483,2484
2487,2488
2487,2489
2488,2489
2488,2490
2489,2490
2489,2491
2490,2491
2490,2492
2491,2492
2494,2495
2496,2497
2496,2498
2497,2498
2497,2499
2498,2499
2498,2500
2499,2500
2502,2503
2502,2504
2503,2504
2507,2508
2508,2509
2508,2510
2508,2511
2509,2510
2509,2511
2510,2511
2512,2513
2512,2514
2513,2514
2516,2517
2517,2518
2517,2519
2518,2519
2518,2520
2519,2520
2519,2521
2520,2521
2523,2524
2524,2525
2527,2528
2528,2529
2528,2530
2529,2530
2529,2531
2530,2531
2530,2532
2531,2532
2534,2535
2534,2536
2535,2536
2539,2540
2539,2541
2540,2541
2540,2542
2541,2542
2542,2543
2542,2544
2542,2545
2543,2544
2545,2546
2546,2547
2548,2549
2549,2550
2549,2551
2550,2551
2550,2552
2551,2552
2553,2554
2553,2555
2554,2555
2558,2559
2559,2560
2559,2561
2560,2561
2561,2562
2561,2563
2562,2563
2562,2564
2563,2564
2563,2565
2564,2565
2568,2569
2570,2571
2571,2572
2571,2573
2572,2573
2572,2574
2573,2574
2576,2577
2578,2579
2578,2580
2578,2581
2578,2582
2579,2580
2580,2581
2580,2582
2582,2583
2584,2585
2585,2586
2585,2587
2587,2588
2589,2590
2589,2591
2589,2592
2590,2591
2590,2592
2591,2592
2591,2593
2592,2593
2592,2594
2593,2594
2593,2595
2594,2595
2596,2597
2596,2598
2597,2598
2601,2602
2601,2603
2602,2603
2602,2604
2603,2604
2605,2606
2605,2607
2606,2607
2610,2611
2611,2612
2611,2613
2612,2613
2612,2614
2613,2614
2613,2615
2614,2615
2617,2618
2617,2619
2618,2619
2618,2620
2619,2620
2621,2622
2621,2623
2622,2623
2626,2627
2626,2628
2627,2628
2627,2629
2628,2629
2631,2632
2631,2633
2632,2633
2632,2634
2633,2634
2635,2636
2635,2637
2636,2637
2640,2641
2641,2642
2641,2643
2642,2643
2644,2645
2644,2646
2645,2646
2648,2649
2649,2650
2649,2651
2650,2651
2652,2653
2652,2654
2653,2654
2653,2655
2654,2655
2656,2657
2656,2658
2657,2658
2661,2662
2661,2663
2661,2664
2662,2663
2662,2664
2663,2664
2664,2665
2664,2666
2665,2666
2667,2668
2667,2669
2668,2669
2668,2670
2669,2670
2671,2672
2671,2673
2672,2673
2676,2677
2677,2678
2677,2679
2678,2679
2678,2680
2679,2680
2679,2681
2680,2681
2682,2683
2682,2684
2683,2684
2687,2688
2687,2689
2688,2689
2691,2692
2691,2693
2692,2693
2692,2694
2692,2695
2692,2696
2693,2694
2694,2695
2694,2696
2695,2696
2697,2698
2697,2699
2698,2699
2698,2700
2699,2700
2701,2702
2701,2703
2702,2703
2706,2707
2706,2708
2707,2708
2709,2710
2709,2711
2710,2711
2713,2714
2714,2715
2716,2717
2716,2718
2716,2719
2716,2720
2716,2721
2716,2722
2717,2718
2717,2719
2718,2719
2720,2721
2721,2722
2721,2723
2721,2724
2721,2725
2722,2723
2726,2727
2728,2729
2729,2730
2729,2731
2730,2731
2733,2734
2734,2735
2734,2736
2734,2737
2734,2738
2735,2736
2737,2738
2738,2739
2738,2740
2739,2740
2741,2742
2741,2743
2742,2743
2745,2746
2747,2748
2749,2750
2750,2751
2751,2752
2751,2753
2752,2753
2752,2754
2753,2754
2755,2756
2755,2757
2756,2757
2759,2760
2759,2761
2760,2761
2761,2762
2761,2763
2762,2763
2762,2764
2763,2764
2766,2767
2768,2769
2768,2770
2769,2770
2769,2771
2770,2771
2773,2774
2774,2775
2774,2776
2775,2776
2777,2778
2777,2779
2778,2779
2781,2782
2781,2783
2782,2783
2784,2785
2784,2786
2784,2787
2784,2788
2785,2786
2785,2787
2786,2787
2788,2789
2789,2790
2789,2791
2789,2792
2789,2793
2790,2791
2794,2795
2796,2797
2797,2798
2797,2799
2798,2799
2800,2801
2801,2802
2801,2803
2801,2804
2804,2805
2805,2806
2807,2808
2808,2809
2808,2810
2809,2810
2811,2812
2813,2814
2814,2815
2814,2816
2815,2816
2817,2818
2818,2819
2818,2820
2819,2820
2821,2822
2823,2824
2823,2825
2823,2826
2824,2825
2824,2826
2825,2826
2827,2828
2827,2829
2828,2829
2831,2832
2832,2833
2832,2834
2833,2834
2833,2835
2834,2835
2834,2836
2835,2836
2837,2838
2837,2839
2838,2839
2842,2843
2842,2844
2843,2844
2846,2847
2846,2848
2846,2849
2847,2848
2848,2849
2848,2850
2849,2850
2851,2852
2851,2853
2852,2853
2855,2856
2856,2857
2856,2858
2857,2858
2859,2860
2860,2861
2860,2862
2860,2863
2863,2864
2864,2865
2864,2866
2865,2866
2868,2869
2870,2871
2871,2872
2872,2873
2872,2874
2872,2875
2872,2876
2872,2877
2872,2878
2873,2874
2877,2878
2877,2879
2878,2879
2881,2882
2881,2883
2882,2883
2882,2884
2883,2884
2885,2886
2885,2887
2886,2887
2890,2891
2890,2892
2891,2892
2891,2893
2892,2893
2894,2895
2894,2896
2895,2896
2899,2900
2899,2901
2900,2901
2900,2902
2901,2902
2901,2903
2901,2904
2902,2903
2904,2905
2905,2906
2907,2908
2908,2909
2908,2910
2909,2910
2909,2911
2910,2911
2912,2913
2912,2914
2913,2914
2917,2918
2918,2919
2918,2920
2919,2920
2920,2921
2920,2922
2921,2922
2921,2923
2922,2923
2925,2926
2927,2928
2928,2929
2928,2930
2929,2930
2930,2931
2930,2932
2931,2932
2931,2933
2932,2933
2932,2934
2933,2934
2937,2938
2939,2940
2940,2941
2940,2942
2941,2942
2941,2943
2942,2943
2942,2944
2943,2944
2947,2948
2949,2950
2949,2951
2949,2952
2950,2951
2951,2952
2951,2953
2952,2953
2954,2955
2954,2956
2955,2956
2958,2959
2959,2960
2959,2961
2960,2961
2962,2963
2963,2964
2963,2965
2963,2966
2966,2967
2967,2968
2967,2969
2968,2969
2971,2972
2973,2974
2973,2975
2974,2975
2974,2976
2975,2976
2975,2977
2976,2977
2977,2978
2977,2979
2978,2979
2978,2980
2979,2980
2982,2983
2984,2985
2985,2986
2985,2987
2986,2987
2986,2988
2987,2988
2990,2991
2992,2993
2993,2994
2993,2995
2994,2995
2994,2996
2995,2996
2998,2999
3000,3001
3000,3002
3000,3003
3001,3002
3001,3003
3002,3003
3002,3004
3002,3005
3003,3004
3005,3006
3005,3007
3006,3007
3008,3009
3008,3010
3009,3010
3012,3013
3014,3015
3014,3016
3015,3016
3016,3017
3016,3018
3016,3019
3017,3018
3019,3020
3019,3021
3020,3021
3022,3023
3022,3024
3023,3024
3026,3027
3028,3029
3028,3030
3029,3030
3030,3031
3030,3032
3030,3033
3030,3034
3030,3035
3030,3036
3031,3032
3033,3034
3033,3035
3034,3035
3037,3038
3039,3040
3039,3041
3040,3041
3040,3042
3041,3042
3043,3044
3043,3045
3044,3045
3048,3049
3050,3051
3050,3052
3050,3053
3051,3052
3053,3054
3054,3055
3054,3056
3055,3056
3055,3057
3056,3057
3058,3059
3058,3060
3059,3060
3063,3064
3065,3066
3065,3067
3065,3068
3066,3067
3067,3068
3067,3069
3068,3069
3070,3071
3070,3072
3071,3072
3074,3075
3075,3076
3075,3077
3076,3077
3078,3079
3079,3080
3079,3081
3079,3082
3082,3083
3083,3084
3083,3085
3084,3085
3087,3088
3089,3090
3089,3091
3090,3091
3090,3092
3091,3092
3094,3095
3094,3096
3094,3097
3094,3098
3094,3099
3094,3100
3095,3096
3096,3097
3096,3098
3097,3098
3099,3100
3099,3101
3099,3102
3102,3103
3103,3104
3105,3106
3106,3107
3106,3108
3106,3109
3107,3108
3109,3110
3109,3111
3112,3113
3112,3114
3112,3115
3115,3116
3116,3117
3118,3119
3119,3120
3120,3121
3120,3122
3121,3122
3123,3124
3123,3125
3124,3125
3127,3128
3127,3129
3128,3129
3129,3130
3129,3131
3130,3131
3132,3133
3132,3134
3133,3134
3136,3137
3136,3138
3136,3139
3137,3138
3138,3139
3138,3140
3139,3140
3141,3142
3141,3143
3142,3143
3145,3146
3146,3147
3146,3148
3147,3148
3149,3150
3150,3151
3150,3152
3150,3153
3153,3154
3154,3155
3154,3156
3155,3156
3158,3159
3160,3161
3160,3162
3160,3163
3161,3162
3162,3163
3162,3164
3163,3164
3165,3166
3165,3167
3166,3167
3166,3168
3167,3168
3169,3170
3169,3171
3170,3171
3174,3175
3174,3176
3174,3177
3174,3178
3175,3176
3176,3177
3176,3178
3177,3178
3179,3180
3179,3181
3179,3182
3180,3181
3183,3184
3184,3185
3185,3186
3186,3187
3188,3189
3189,3190
3189,3191
3190,3191
3192,3193
3192,3194
3192,3195
3193,3194
3195,3196
3196,3197
3198,3199
3200,3201
3200,3202
3200,3203
3201,3202
3201,3203
3202,3203
3204,3205
3206,3207
3206,3208
3206,3209
3206,3210
3206,3211
3206,3212
3206,3213
3206,3214
3207,3208
3208,3209
3208,3210
3209,3210
3209,3211
3210,3211
3213,3214
3215,3216
3216,3217
3216,3218
3217,3218
3217,3219
3218,3219
3221,3222
3223,3224
3224,3225
3224,3226
3225,3226
3227,3228
3228,3229
3230,3231
3231,3232
3231,3233
3231,3234
3232,3233
3236,3237
3236,3238
3236,3239
3236,3240
3237,3238
3238,3239
3238,3240
3239,3240
3241,3242
3241,3243
3242,3243
3245,3246
3247,3248
3247,3249
3248,3249
3250,3251
3250,3252
3251,3252
3254,3255
3254,3256
3254,3257
3254,3258
3255,3256
3256,3257
3256,3258
3257,3258
3259,3260
3259,3261
3259,3262
3262,3263
3263,3264
3263,3265
3263,3266
3264,3265
3266,3267
3266,3268
3267,3268
3270,3271
3270,3272
3271,3272
3274,3275
3274,3276
3275,3276
3277,3278
3278,3279
3279,3280
3279,3281
3280,3281
3282,3283
3284,3285
3285,3286
3285,3287
3286,3287
3288,3289
3290,3291
3290,3292
3290,3293
3291,3292
3292,3293
3294,3295
3295,3296
3296,3297
3296,3298
3296,3299
3297,3298
3299,3300
3302,3303
3303,3304
3304,3305
3304,3306
3304,3307
3304,3308
3305,3306
3307,3308
3309,3310
3311,3312
3313,3314
3313,3315
3314,3315
3316,3317
3317,3318
3318,3319
3318,3320
3319,3320
3321,3322
3323,3324
3324,3325
3324,3326
3325,3326
3325,3327
3326,3327
3329,3330
3331,3332
3332,3333
3332,3334
3332,3335
3333,3334
3335,3336
3337,3338
3339,3340
3339,3341
3339,3342
3340,3341
3341,3342
3341,3343
3341,3344
3342,3343
3344,3345
3347,3348
3347,3349
3348,3349
3350,3351
3351,3352
3352,3353
3352,3354
3353,3354
3355,3356
3357,3358
3357,3359
3358,3359
3360,3361
3361,3362
3362,3363
3362,3364
3363,3364
3365,3366
3366,3367
3368,3369
3369,3370
3369,3371
3370,3371
3372,3373
3374,3375
3374,3376
3374,3377
3375,3376
3376,3377
3376,3378
3376,3379
3377,3378
3381,3382
3381,3383
3381,3384
3381,3385
3382,3383
3383,3384
3383,3385
3384,3385
3386,3387
3386,3388
3387,3388
3390,3391
3390,3392
3391,3392
3393,3394
3393,3395
3394,3395
3397,3398
3397,3399
3398,3399
3400,3401
3400,3402
3401,3402
3405,3406
3405,3407
3406,3407
3408,3409
3408,3410
3408,3411
3409,3410
3410,3411
3410,3412
3411,3412
3411,3413
3412,3413
3415,3416
3415,3417
3416,3417
3416,3418
3417,3418
3419,3420
3419,3421
3420,3421
3424,3425
3425,3426
3425,3427
3426,3427
3426,3428
3427,3428
3427,3429
3428,3429
3430,3431
3430,3432
3431,3432
3435,3436
3435,3437
3436,3437
3439,3440
3440,3441
3440,3442
3441,3442
3441,3443
3442,3443
3445,3446
3447,3448
3447,3449
3448,3449
3448,3450
3449,3450
3452,3453
3453,3454
3454,3455
3454,3456
3454,3457
3455,3456
3459,3460
3459,3461
3460,3461
3460,3462
3461,3462
3461,3463
3462,3463
3463,3464
3463,3465
3464,3465
3464,3466
3465,3466
3468,3469
3470,3471
3471,3472
3471,3473
3472,3473
3472,3474
3473,3474
3473,3475
3474,3475
3478,3479
3480,3481
3480,3482
3481,3482
3481,3483
3482,3483
3484,3485
3484,3486
3485,3486
3489,3490
3490,3491
3491,3492
3491,3493
3492,3493
3494,3495
3495,3496
3495,3497
3497,3498
3498,3499
3498,3500
3499,3500
3502,3503
3502,3504
3503,3504
3503,3505
3504,3505
3504,3506
3505,3506
3508,3509
3510,3511
3511,3512
3511,3513
3512,3513
3512,3514
3513,3514
3513,3515
3514,3515
3516,3517
3517,3518
3517,3519
3518,3519
3518,3520
3519,3520
3523,3524
3523,3525
3524,3525
3524,3526
3525,3526
3527,3528
3527,3529
3528,3529
3532,3533
3532,3534
3532,3535
3533,3534
3534,3535
3534,3536
3535,3536
3535,3537
3536,3537
3536,3538
3537,3538
3539,3540
3539,3541
3540,3541
3544,3545
3544,3546
3545,3546
3547,3548
3548,3549
3548,3550
3549,3550
3549,3551
3550,3551
3554,3555
3555,3556
3555,3557
3555,3558
3555,3559
3556,3557
3560,3561
3560,3562
3561,3562
3563,3564
3564,3565
3564,3566
3565,3566
3565,3567
3566,3567
3570,3571
3570,3572
3571,3572
3571,3573
3572,3573
3572,3574
3573,3574
3575,3576
3575,3577
3576,3577
3580,3581
3580,3582
3581,3582
3582,3583
3582,3584
3583,3584
3585,3586
3585,3587
3586,3587
3589,3590
3589,3591
3589,3592
3590,3591
3590,3592
3591,3592
3593,3594
3593,3595
3594,3595
3597,3598
3598,3599
3598,3600
3599,3600
3599,3601
3600,3601
3600,3602
3601,3602
3603,3604
3603,3605
3604,3605
3608,3609
3608,3610
3608,3611
3609,3610
3610,3611
3610,3612
3611,3612
3613,3614
3613,3615
3613,3616
3616,3617
3617,3618
3617,3619
3618,3619
3620,3621
3620,3622
3621,3622
3623,3624
3623,3625
3624,3625
3624,3626
3625,3626
3627,3628
3627,3629
3628,3629
3632,3633
3633,3634
3633,3635
3634,3635
3636,3637
3636,3638
3636,3639
3639,3640
3640,3641
3640,3642
3641,3642
3643,3644
3643,3645
3644,3645
3644,3646
3645,3646
3647,3648
3647,3649
3648,3649
3652,3653
3652,3654
3653,3654
3655,3656
3655,3657
3655,3658
3655,3659
3655,3660
3656,3657
3657,3658
3657,3659
3657,3660
3658,3659
3660,3661
3662,3663
3663,3664
3663,3665
3664,3665
3664,3666
3665,3666
3669,3670
3669,3671
3670,3671
3670,3672
3671,3672
3671,3673
3672,3673
3674,3675
3674,3676
3675,3676
3675,3677
3676,3677
3678,3679
3678,3680
3679,3680
3684,3685
3685,3686
3686,3687
3686,3688
3686,3689
3687,3688
3689,3690
3689,3691
3690,3691
3690,3692
3691,3692
3693,3694
3693,3695
3694,3695
3698,3699
3698,3700
3699,3700
3701,3702
3701,3703
3702,3703
3702,3704
3703,3704
3705,3706
3705,3707
3706,3707
3710,3711
3711,3712
3711,3713
3711,3714
3712,3713
3714,3715
3716,3717
3718,3719
3719,3720
3719,3721
3720,3721
3722,3723
3722,3724
3723,3724
3723,3725
3724,3725
3726,3727
3726,3728
3727,3728
3731,3732
3732,3733
3732,3734
3733,3734
3735,3736
3735,3737
3736,3737
3738,3739
3740,3741
3740,3742
3740,3743
3740,3744
3741,3742
3742,3743
3742,3744
3742,3745
3743,3744
3747,3748
3747,3749
3748,3749
3748,3750
3749,3750
3752,3753
3752,3754
3752,3755
3753,3754
3754,3755
3754,3756
3755,3756
3757,3758
3757,3759
3758,3759
3761,3762
3762,3763
3762,3764
3762,3765
3763,3764
3767,3768
3768,3769
3768,3770
3769,3770
3769,3771
3770,3771
3773,3774
3775,3776
3776,3777
3776,3778
3777,3778
3779,3780
3780,3781
3780,3782
3780,3783
3783,3784
3784,3785
3784,3786
3785,3786
3788,3789
3790,3791
3790,3792
3791,3792
3791,3793
3792,3793
3792,3794
3793,3794
3796,3797
3798,3799
3799,3800
3799,3801
3800,3801
3800,3802
3801,3802
3801,3803
3802,3803
3802,3804
3803,3804
3803,3805
3804,3805
3809,3810
3809,3811
3810,3811
3812,3813
3812,3814
3813,3814
3813,3815
3814,3815
3816,3817
3816,3818
3817,3818
3821,3822
3821,3823
3822,3823
3823,3824
3823,3825
3823,3826
3823,3827
3824,3825
3828,3829
3828,3830
3829,3830
3831,3832
3832,3833
3832,3834
3833,3834
3833,3835
3834,3835
3838,3839
3839,3840
3839,3841
3840,3841
3840,3842
3841,3842
3841,3843
3842,3843
3844,3845
3844,3846
3845,3846
3849,3850
3849,3851
3850,3851
3852,3853
3853,3854
3853,3855
3854,3855
3854,3856
3855,3856
3859,3860
3859,3861
3860,3861
3860,3862
3861,3862
3861,3863
3862,3863
3862,3864
3863,3864
3866,3867
3868,3869
3868,3870
3869,3870
3869,3871
3870,3871
3872,3873
3872,3874
3873,3874
3877,3878
3878,3879
3878,3880
3878,3881
3879,3880
3879,3881
3880,3881
3880,3882
3881,3882
3881,3883
3882,3883
3886,3887
3888,3889
3889,3890
3890,3891
3890,3892
3890,3893
3891,3892
3893,3894
3893,3895
3894,3895
3894,3896
3895,3896
3897,3898
3897,3899
3898,3899
3902,3903
3904,3905
3904,3906
3905,3906
3905,3907
3906,3907
3906,3908
3907,3908
3907,3909
3908,3909
3912,3913
3914,3915
3915,3916
3916,3917
3916,3918
3916,3919
3917,3918
3919,3920
3919,3921
3920,3921
3920,3922
3921,3922
3923,3924
3923,3925
3924,3925
3928,3929
3930,3931
3930,3932
3931,3932
3931,3933
3932,3933
3932,3934
3933,3934
3936,3937
3938,3939
3938,3940
3938,3941
3938,3942
3938,3943
3938,3944
3938,3945
3938,3946
3938,3947
3938,3948
3938,3949
3938,3950
3938,3951
3938,3952
3938,3953
3938,3954
3938,3955
3938,3956
3938,3957
3938,3958
3938,3959
3938,3960
3938,3961
3938,3962
3938,3963
3938,3964
3938,3965
3938,3966
3938,3967
3938,3968
3938,3969
3938,3970
3938,3971
3938,3972
3938,3973
3938,3974
3938,3975
3938,3976
3938,3977
3938,3978
3938,3979
3938,3980
3938,3981
3938,3982
3938,3983
3938,3984
3938,3985
3938,3986
3938,3987
3938,3988
3938,3989
3938,3990
3938,3991
3938,3992
3938,3993
3938,3994
3938,3995
3938,3996
3938,3997
3938,3998
3938,3999
3938,4000
3938,4001
3938,4002
3938,4003
3938,4004
3938,4005
3938,4006
3938,4007
3938,4008
3938,4009
3938,4010
3938,4011
3938,4012
3938,4013
3938,4014
3938,4015
3938,4016
3938,4017
3938,4018
3938,4019
3938,4020
3938,4021
3938,4022
3938,4023
3938,4024
3938,4025
3938,4026
3938,4027
3938,4028
3938,4029
3938,4030
3938,4031
3938,4032
3938,4033
3939,3940
3940,3941
3940,3942
3940,3943
3941,3942
3943,3944
3945,3946
3945,3947
3946,3947
3946,3948
3947,3948
3949,3950
3949,3951
3950,3951
3954,3955
3954,3956
3955,3956
3957,3958
3958,3959
3958,3960
3958,3961
3958,3962
3959,3960
3963,3964
3963,3965
3964,3965
3964,3966
3965,3966
3969,3970
3969,3971
3970,3971
3970,3972
3971,3972
3971,3973
3972,3973
3972,3974
3973,3974
3973,3975
3974,3975
3974,3976
3975,3976
3975,3977
3976,3977
3978,3979
3978,3980
3979,3980
3983,3984
3983,3985
3984,3985
3987,3988
3987,3989
3988,3989
3988,3990
3989,3990
3989,3991
3990,3991
3994,3995
3996,3997
3996,3998
3997,3998
3997,3999
3998,3999
3998,4000
3999,4000
4003,4004
4005,4006
4005,4007
4006,4007
4006,4008
4007,4008
4007,4009
4008,4009
4012,4013
4014,4015
4014,4016
4015,4016
4016,4017
4016,4018
4017,4018
4017,4019
4018,4019
4018,4020
4019,4020
4021,4022
4021,4023
4022,4023
4026,4027
4026,4028
4027,4028
4030,4031
4030,4032
4031,4032
4033,4034
4034,4035
4034,4036
4034,4037
4034,4038
4034,4039
4035,4036
4039,4040
4039,4041
4040,4041
4043,4044
4043,4045
4044,4045
4047,4048
4048,4049
4048,4050
4049,4050
4049,4051
4050,4051
4050,4052
4051,4052
4053,4054
4053,4055
4054,4055
4058,4059
4058,4060
4059,4060
4059,4061
4060,4061
4064,4065
4064,4066
4065,4066
4066,4067
4066,4068
4067,4068
4067,4069
4068,4069
4070,4071
4070,4072
4071,4072
4075,4076
4076,4077
4077,4078
4077,4079
4078,4079
4078,4080
4079,4080
4079,4081
4080,4081
4082,4083
4082,4084
4083,4084
4087,4088
4087,4089
4088,4089
4088,4090
4089,4090
4093,4094
4093,4095
4094,4095
4094,4096
4095,4096
4095,4097
4096,4097
4100,4101
4100,4102
4100,4103
4100,4104
4100,4105
4100,4106
4100,4107
4100,4108
4100,4109
4100,4110
4100,4111
4100,4112
4100,4113
4100,4114
4100,4115
4100,4116
4100,4117
4100,4118
4100,4119
4100,4120
4100,4121
4100,4122
4100,4123
4100,4124
4100,4125
4100,4126
4100,4127
4100,4128
4100,4129
4100,4130
4100,4131
4100,4132
4100,4133
4100,4134
4100,4135
4100,4136
4100,4137
4100,4138
4100,4139
4100,4140
4100,4141
4100,4142
4100,4143
4100,4144
4100,4145
4100,4146
4100,4147
4100,4148
4100,4149
4100,4150
4100,4151
4100,4152
4100,4153
4100,4154
4100,4155
4100,4156
4100,4157
4100,4158
4100,4159
4100,4160
4100,4161
4100,4162
4100,4163
4100,4164
4100,4165
4100,4166
4100,4167
4100,4168
4100,4169
4100,4170
4100,4171
4100,4172
4100,4173
4100,4174
4100,4175
4100,4176
4100,4177
4100,4178
4101,4102
4102,4103
4105,4106
4106,4107
4108,4109
4108,4110
4109,4110
4109,4111
4109,4112
4110,4111
4112,4113
4113,4114
4113,4115
4114,4115
4114,4116
4115,4116
4117,4118
4117,4119
4118,4119
4122,4123
4124,4125
4124,4126
4124,4127
4125,4126
4125,4127
4126,4127
4126,4128
4127,4128
4127,4129
4128,4129
4130,4131
4130,4132
4131,4132
4135,4136
4136,4137
4137,4138
4137,4139
4137,4140
4137,4141
4137,4142
4137,4143
4137,4144
4138,4139
4140,4141
4140,4142
4141,4142
4141,4143
4142,4143
4144,4145
4144,4146
4145,4146
4149,4150
4153,4154
4153,4155
4154,4155
4156,4157
4156,4158
4157,4158
4157,4159
4158,4159
4160,4161
4160,4162
4161,4162
4165,4166
4165,4167
4166,4167
4168,4169
4168,4170
4169,4170
4169,4171
4170,4171
4172,4173
4172,4174
4173,4174
4177,4178
4178,4179
4178,4180
4178,4181
4179,4180
4181,4182
4181,4183
4182,4183
4184,4185
4184,4186
4185,4186
4188,4189
4190,4191
4190,4192
4191,4192
4191,4193
4192,4193
4195,4196
4195,4197
4195,4198
4195,4199
4196,4197
4197,4198
4197,4199
4198,4199
4200,4201
4200,4202
4201,4202
4204,4205
4204,4206
4205,4206
4205,4207
4206,4207
4207,4208
4207,4209
4208,4209
4210,4211
4210,4212
4211,4212
4214,4215
4215,4216
4215,4217
4216,4217
4216,4218
4217,4218
4219,4220
4219,4221
4220,4221
4224,4225
4226,4227
4226,4228
4227,4228
4227,4229
4228,4229
4230,4231
4230,4232
4231,4232
4231,4233
4232,4233
4234,4235
4234,4236
4235,4236
4239,4240
4239,4241
4240,4241
4241,4242
4241,4243
4243,4244
4243,4245
4243,4246
4246,4247
4247,4248
4247,4249
4248,4249
4248,4250
4249,4250
4251,4252
4251,4253
4252,4253
4256,4257
4257,4258
4257,4259
4257,4260
4257,4261
4257,4262
4258,4259
4260,4261
4260,4262
4261,4262
4264,4265
4266,4267
4266,4268
4266,4269
4267,4268
4269,4270
4271,4272
4273,4274
4273,4275
4273,4276
4274,4275
4275,4276
4275,4277
4276,4277
4278,4279
4280,4281
4280,4282
4281,4282
4281,4283
4282,4283
4284,4285
4288,4289
4289,4290
4289,4291
4290,4291
4292,4293
4292,4294
4293,4294
4293,4295
4294,4295
4296,4297
4296,4298
4297,4298
4302,4303
4303,4304
4305,4306
4305,4307
4306,4307
4306,4308
4306,4309
4307,4308
4309,4310
4310,4311
4310,4312
4311,4312
4311,4313
4312,4313
4314,4315
4314,4316
4315,4316
4319,4320
4321,4322
4321,4323
4321,4324
4321,4325
4321,4326
4321,4327
4321,4328
4322,4323
4323,4324
4323,4325
4324,4325
4326,4327
4326,4328
4327,4328
4330,4331
4330,4332
4331,4332
4332,4333
4332,4334
4333,4334
4335,4336
4335,4337
4336,4337
4339,4340
4341,4342
4341,4343
4342,4343
4342,4344
4343,4344
4343,4345
4344,4345
4344,4346
4345,4346
4347,4348
4347,4349
4348,4349
4352,4353
4352,4354
4352,4355
4353,4354
4355,4356
4355,4357
4356,4357
4358,4359
4358,4360
4359,4360
4362,4363
4364,4365
4365,4366
4366,4367
4366,4368
4366,4369
4366,4370
4366,4371
4366,4372
4366,4373
4367,4368
4369,4370
4369,4371
4370,4371
4370,4372
4371,4372
4373,4374
4373,4375
4374,4375
4378,4379
4382,4383
4382,4384
4383,4384
4385,4386
4385,4387
4386,4387
4386,4388
4387,4388
4389,4390
4389,4391
4390,4391
4394,4395
4394,4396
4395,4396
4397,4398
4397,4399
4398,4399
4398,4400
4399,4400
4401,4402
4401,4403
4402,4403
4406,4407
4407,4408
4407,4409
4407,4410
4408,4409
4410,4411
4410,4412
4411,4412
4413,4414
4413,4415
4414,4415
4417,4418
4419,4420
4419,4421
4420,4421
4421,4422
4421,4423
4422,4423
4422,4424
4423,4424
4425,4426
4425,4427
4426,4427
4430,4431
4432,4433
4432,4434
4433,4434
4433,4435
4434,4435
4436,4437
4436,4438
4437,4438
4437,4439
4438,4439
4440,4441
4440,4442
4441,4442
4445,4446
4446,4447
4447,4448
4447,4449
4447,4450
4447,4451
4447,4452
4448,4449
4450,4451
4450,4452
4451,4452
4454,4455
4456,4457
4459,4460
4460,4461
4460,4462
4461,4462
4463,4464
4463,4465
4464,4465
4464,4466
4465,4466
4467,4468
4467,4469
4468,4469
4473,4474
4474,4475
4476,4477
4476,4478
4477,4478
4477,4479
4478,4479
4478,4480
4479,4480
4479,4481
4480,4481
4482,4483
4482,4484
4483,4484
4487,4488
4489,4490
4489,4491
4489,4492
4489,4493
4489,4494
4489,4495
4489,4496
4490,4491
4491,4492
4491,4493
4491,4494
4491,4495
4492,4493
4494,4495
4495,4496
4495,4497
4496,4497
4498,4499
4498,4500
4499,4500
4502,4503
4504,4505
4506,4507
4507,4508
4508,4509
4508,4510
4509,4510
4509,4511
4510,4511
4513,4514
4514,4515
4515,4516
4515,4517
4516,4517
4516,4518
4517,4518
4520,4521
4522,4523
4523,4524
4523,4525
4523,4526
4523,4527
4524,4525
4526,4527
4527,4528
4530,4531
4531,4532
4532,4533
4534,4535
4535,4536
4535,4537
4535,4538
4535,4539
4536,4537
4538,4539
4539,4540
4541,4542
4543,4544
4543,4545
4544,4545
4544,4546
4545,4546
4547,4548
4547,4549
4548,4549
4552,4553
4553,4554
4553,4555
4553,4556
4553,4557
4553,4558
4553,4559
4553,4560
4553,4561
4554,4555
4556,4557
4556,4558
4557,4558
4559,4560
4559,4561
4560,4561
4563,4564
4565,4566
4568,4569
4568,4570
4569,4570
4572,4573
4572,4574
4573,4574
4576,4577
4578,4579
4579,4580
4579,4581
4580,4581
4580,4582
4581,4582
4581,4583
4582,4583
4584,4585
4584,4586
4585,4586
4589,4590
4592,4593
4593,4594
4595,4596
4595,4597
4596,4597
4596,4598
4596,4599
4597,4598
4599,4600
4600,4601
4600,4602
4601,4602
4601,4603
4602,4603
4604,4605
4604,4606
4605,4606
4609,4610
4609,4611
4610,4611
4612,4613
4615,4616
4615,4617
4616,4617
4616,4618
4617,4618
4617,4619
4618,4619
4618,4620
4619,4620
4622,4623
4622,4624
4623,4624
4626,4627
4626,4628
4627,4628
4627,4629
4628,4629
4632,4633
4632,4634
4632,4635
4632,4636
4633,4634
4634,4635
4634,4636
4635,4636
4637,4638
4638,4639
4638,4640
4638,4641
4641,4642
4642,4643
4642,4644
4643,4644
4646,4647
4647,4648
4647,4649
4647,4650
4647,4651
4647,4652
4648,4649
4650,4651
4651,4652
4653,4654
4655,4656
4655,4657
4656,4657
4659,4660
4659,4661
4660,4661
4663,4664
4664,4665
4664,4666
4665,4666
4667,4668
4668,4669
4668,4670
4669,4670
4671,4672
4671,4673
4672,4673
4675,4676
4675,4677
4676,4677
4677,4678
4677,4679
4678,4679
4680,4681
4680,4682
4681,4682
4684,4685
4686,4687
4686,4688
4687,4688
4687,4689
4687,4690
4688,4689
4690,4691
4690,4692
4691,4692
4693,4694
4693,4695
4694,4695
4697,4698
4699,4700
4699,4701
4700,4701
4701,4702
4701,4703
4703,4704
4705,4706
4705,4707
4706,4707
4706,4708
4707,4708
4708,4709
4708,4710
4709,4710
4711,4712
4711,4713
4711,4714
4712,4713
4714,4715
4714,4716
4715,4716
4719,4720
4721,4722
4722,4723
4722,4724
4723,4724
4723,4725
4724,4725
4727,4728
4729,4730
4729,4731
4730,4731
4732,4733
4733,4734
4733,4735
4733,4736
4733,4737
4733,4738
4733,4739
4733,4740
4733,4741
4734,4735
4736,4737
4736,4738
4737,4738
4739,4740
4739,4741
4740,4741
4743,4744
4745,4746
4747,4748
4747,4749
4748,4749
4751,4752
4754,4755
4754,4756
4755,4756
4758,4759
4758,4760
4759,4760
4759,4761
4759,4762
4759,4763
4760,4761
4762,4763
4762,4764
4763,4764
4766,4767
4767,4768
4769,4770
4770,4771
4772,4773
4772,4774
4772,4775
4773,4774
4774,4775
4774,4776
4774,4777
4775,4776
4777,4778
4777,4779
4778,4779
4781,4782
4783,4784
4783,4785
4784,4785
4786,4787
4787,4788
4787,4789
4787,4790
4787,4791
4787,4792
4787,4793
4788,4789
4790,4791
4793,4794
4793,4795
4794,4795
4796,4797
4796,4798
4797,4798
4800,4801
4800,4802
4801,4802
4801,4803
4802,4803
4804,4805
4804,4806
4805,4806
4809,4810
4809,4811
4810,4811
4810,4812
4811,4812
4813,4814
4813,4815
4814,4815
4819,4820
4819,4821
4820,4821
4820,4822
4821,4822
4821,4823
4822,4823
4824,4825
4824,4826
4825,4826
4825,4827
4826,4827
4828,4829
4828,4830
4829,4830
4833,4834
4833,4835
4833,4836
4834,4835
4836,4837
4836,4838
4837,4838
4839,4840
4839,4841
4840,4841
4843,4844
4845,4846
4845,4847
4845,4848
4846,4847
4847,4848
4847,4849
4847,4850
4848,4849
4850,4851
4850,4852
4851,4852
4854,4855
4856,4857
4857,4858
4857,4859
4857,4860
4858,4859
4860,4861
4864,4865
4864,4866
4864,4867
4865,4866
4865,4867
4865,4868
4866,4867
4868,4869
4868,4870
4869,4870
4869,4871
4870,4871
4872,4873
4872,4874
4873,4874
4878,4879
4878,4880
4878,4881
4878,4882
4878,4883
4878,4884
4878,4885
4878,4886
4879,4880
4880,4881
4880,4882
4880,4883
4880,4884
4882,4883
4882,4884
4885,4886
4885,4887
4888,4889
4888,4890
4891,4892
4892,4893
4892,4894
4893,4894
4895,4896
4895,4897
4896,4897
4898,4899
4898,4900
4899,4900
4899,4901
4900,4901
4902,4903
4902,4904
4903,4904
4907,4908
4908,4909
4908,4910
4909,4910
4911,4912
4911,4913
4912,4913
4914,4915
4914,4916
4915,4916
4915,4917
4916,4917
4918,4919
4918,4920
4919,4920
4923,4924
4924,4925
4924,4926
4925,4926
4927,4928
4927,4929
4928,4929
4930,4931
4930,4932
4931,4932
4931,4933
4932,4933
4934,4935
4934,4936
4935,4936
4939,4940
4940,4941
4940,4942
4941,4942
4943,4944
4944,4945
4944,4946
4944,4947
4947,4948
4948,4949
4948,4950
4949,4950
4952,4953
4953,4954
4953,4955
4954,4955
4956,4957
4956,4958
4956,4959
4956,4960
4956,4961
4956,4962
4957,4958
4959,4960
4961,4962
4963,4964
4966,4967
4968,4969
4969,4970
4969,4971
4970,4971
4972,4973
4973,4974
4973,4975
4974,4975
4976,4977
4976,4978
4977,4978
4980,4981
4980,4982
4981,4982
4982,4983
4982,4984
4983,4984
4985,4986
4985,4987
4986,4987
4989,4990
4991,4992
4992,4993
4992,4994
4993,4994
4996,4997
4997,4998
4997,4999
4997,5000
4998,4999
5000,5001
5002,5003
5003,5004
5005,5006
5005,5007
5006,5007
5006,5008
5007,5008
5007,5009
5008,5009
5010,5011
5010,5012
5011,5012
5011,5013
5012,5013
5014,5015
5014,5016
5015,5016
5019,5020
5019,5021
5020,5021
5022,5023
5022,5024
5023,5024
5023,5025
5024,5025
5026,5027
5026,5028
5027,5028
5031,5032
5031,5033
5032,5033
5032,5034
5032,5035
5033,5034
5033,5035
5034,5035
5034,5036
5034,5037
5035,5036
5037,5038
5037,5039
5038,5039
5038,5040
5039,5040
5041,5042
5041,5043
5042,5043
5047,5048
5048,5049
5050,5051
5050,5052
5050,5053
5050,5054
5050,5055
5050,5056
5051,5052
5052,5053
5052,5054
5052,5055
5052,5056
5053,5054
5055,5056
5056,5057
5059,5060
5060,5061
5061,5062
5063,5064
5064,5065
5064,5066
5064,5067
5064,5068
5065,5066
5067,5068
5068,5069
5070,5071
5073,5074
5074,5075
5074,5076
5074,5077
5074,5078
5075,5076
5077,5078
5078,5079
5080,5081
5082,5083
5084,5085
5085,5086
5085,5087
5085,5088
5085,5089
5085,5090
5085,5091
5085,5092
5085,5093
5086,5087
5088,5089
5088,5090
5089,5090
5091,5092
5091,5093
5092,5093
5095,5096
5097,5098
5100,5101
5100,5102
5101,5102
5104,5105
5104,5106
5105,5106
5108,5109
5110,5111
5110,5112
5111,5112
5112,5113
5112,5114
5113,5114
5115,5116
5115,5117
5116,5117
5119,5120
5121,5122
5121,5123
5122,5123
5124,5125
5125,5126
5125,5127
5125,5128
5125,5129
5125,5130
5125,5131
5126,5127
5128,5129
5131,5132
5131,5133
5132,5133
5134,5135
5134,5136
5135,5136
5138,5139
5138,5140
5139,5140
5139,5141
5140,5141
5142,5143
5142,5144
5143,5144
5147,5148
5147,5149
5148,5149
5148,5150
5149,5150
5151,5152
5151,5153
5152,5153
5156,5157
5156,5158
5156,5159
5157,5158
5157,5159
5157,5160
5158,5159
5158,5160
5158,5161
5159,5160
5161,5162
5161,5163
5162,5163
5164,5165
5164,5166
5165,5166
5168,5169
5170,5171
5170,5172
5170,5173
5170,5174
5170,5175
5171,5172
5171,5173
5171,5174
5172,5173
5172,5174
5172,5175
5173,5174
5175,5176
5175,5177
5176,5177
5178,5179
5178,5180
5179,5180
5182,5183
5184,5185
5185,5186
5186,5187
5186,5188
5187,5188
5190,5191
5191,5192
5192,5193
5192,5194
5193,5194
5196,5197
5197,5198
5197,5199
5198,5199
5200,5201
5200,5202
5201,5202
5201,5203
5202,5203
5202,5204
5203,5204
5205,5206
5205,5207
5206,5207
5210,5211
5210,5212
5211,5212
5211,5213
5212,5213
5214,5215
5214,5216
5215,5216
5219,5220
5220,5221
5220,5222
5220,5223
5220,5224
5221,5222
5223,5224
5224,5225
5227,5228
5228,5229
5229,5230
5231,5232
5232,5233
5232,5234
5232,5235
5233,5234
5235,5236
5238,5239
5239,5240
5239,5241
5239,5242
5240,5241
5242,5243
5245,5246
5245,5247
5245,5248
5245,5249
5245,5250
5245,5251
5245,5252
5246,5247
5247,5248
5247,5249
5248,5249
5250,5251
5252,5253
5253,5254
5253,5255
5254,5255
5257,5258
5257,5259
5258,5259
5258,5260
5259,5260
5262,5263
5263,5264
5263,5265
5263,5266
5263,5267
5263,5268
5264,5265
5266,5267
5267,5268
5267,5269
5268,5269
5268,5270
5269,5270
5271,5272
5271,5273
5272,5273
5276,5277
5276,5278
5277,5278
5282,5283
5282,5284
5282,5285
5283,5284
5283,5285
5283,5286
5283,5287
5284,5285
5286,5287
5287,5288
5287,5289
5288,5289
5288,5290
5289,5290
5291,5292
5291,5293
5292,5293
5297,5298
5298,5299
5300,5301
5301,5302
5301,5303
5301,5304
5302,5303
5302,5304
5302,5305
5303,5304
5305,5306
5305,5307
5306,5307
5308,5309
5308,5310
5309,5310
5312,5313
5314,5315
5314,5316
5315,5316
5316,5317
5316,5318
5317,5318
5319,5320
5319,5321
5320,5321
5320,5322
5321,5322
5323,5324
5323,5325
5324,5325
5328,5329
5329,5330
5329,5331
5330,5331
5333,5334
5334,5335
5335,5336
5335,5337
5336,5337
5338,5339
5338,5340
5339,5340
5339,5341
5340,5341
5342,5343
5342,5344
5343,5344
5347,5348
5348,5349
5348,5350
5349,5350
5351,5352
5351,5353
5352,5353
5352,5354
5353,5354
5355,5356
5355,5357
5356,5357
5360,5361
5361,5362
5361,5363
5362,5363
5364,5365
5364,5366
5364,5367
5364,5368
5365,5366
5367,5368
5368,5369
5370,5371
5370,5372
5371,5372
5371,5373
5372,5373
5372,5374
5373,5374
5375,5376
5375,5377
5376,5377
5380,5381
5380,5382
5381,5382
5381,5383
5382,5383
5384,5385
5384,5386
5385,5386
5390,5391
5391,5392
5391,5393
5391,5394
5391,5395
5392,5393
5394,5395
5395,5396
5395,5397
5396,5397
5396,5398
5397,5398
5399,5400
5399,5401
5400,5401
5404,5405
5406,5407
5406,5408
5407,5408
5408,5409
5409,5410
5412,5413
5413,5414
5413,5415
5413,5416
5413,5417
5414,5415
5416,5417
5417,5418
5417,5419
5418,5419
5418,5420
5419,5420
5421,5422
5421,5423
5422,5423
5426,5427
5428,5429
5428,5430
5429,5430
5430,5431
5431,5432
5434,5435
5434,5436
5435,5436
5436,5437
5438,5439
5438,5440
5439,5440
5439,5441
5440,5441
5441,5442
5441,5443
5441,5444
5442,5443
5444,5445
5444,5446
5445,5446
5447,5448
5447,5449
5448,5449
5451,5452
5453,5454
5454,5455
5454,5456
5455,5456
5457,5458
5457,5459
5458,5459
5458,5460
5459,5460
5459,5461
5460,5461
5462,5463
5462,5464
5463,5464
5467,5468
5467,5469
5468,5469
5468,5470
5469,5470
5471,5472
5471,5473
5472,5473
5476,5477
5476,5478
5476,5479
5477,5478
5478,5479
5480,5481
5480,5482
5480,5483
5480,5484
5480,5485
5480,5486
5481,5482
5482,5483
5482,5484
5482,5485
5482,5486
5483,5484
5485,5486
5486,5487
5489,5490
5490,5491
5491,5492
5493,5494
5494,5495
5494,5496
5494,5497
5494,5498
5495,5496
5497,5498
5498,5499
5500,5501
5503,5504
5504,5505
5504,5506
5504,5507
5504,5508
5505,5506
5507,5508
5508,5509
5510,5511
5512,5513
5514,5515
5515,5516
5515,5517
5515,5518
5515,5519
5515,5520
5515,5521
5515,5522
5515,5523
5516,5517
5518,5519
5518,5520
5519,5520
5521,5522
5521,5523
5522,5523
5525,5526
5527,5528
5530,5531
5530,5532
5531,5532
5534,5535
5534,5536
5535,5536
5538,5539
5540,5541
5540,5542
5541,5542
5542,5543
5542,5544
5543,5544
5545,5546
5545,5547
5546,5547
5549,5550
5551,5552
5551,5553
5552,5553
5554,5555
5554,5556
5555,5556
5556,5557
5556,5558
5556,5559
5556,5560
5558,5559
5558,5560
5560,5561
5562,5563
5562,5564
5564,5565
5566,5567
5566,5568
5568,5569
5570,5571
5570,5572
5570,5573
5571,5572
5571,5573
5571,5574
5572,5573
5574,5575
5574,5576
5575,5576
5577,5578
5577,5579
5578,5579
5581,5582
5583,5584
5584,5585
5585,5586
5585,5587
5585,5588
5585,5589
5585,5590
5585,5591
5586,5587
5588,5589
5591,5592
5591,5593
5592,5593
5594,5595
5594,5596
5595,5596
5598,5599
5598,5600
5598,5601
5598,5602
5599,5600
5601,5602
5603,5604
5604,5605
5605,5606
5607,5608
5607,5609
5608,5609
5608,5610
5609,5610
5611,5612
5611,5613
5612,5613
5616,5617
5616,5618
5616,5619
5616,5620
5617,5618
5619,5620
5621,5622
5622,5623
5623,5624
5625,5626
5625,5627
5626,5627
5626,5628
5627,5628
5629,5630
5629,5631
5630,5631
5634,5635
5635,5636
5636,5637
5636,5638
5636,5639
5636,5640
5636,5641
5636,5642
5636,5643
5637,5638
5639,5640
5642,5643
5642,5644
5643,5644
5645,5646
5645,5647
5646,5647
5649,5650
5649,5651
5649,5652
5649,5653
5650,5651
5652,5653
5654,5655
5655,5656
5656,5657
5658,5659
5658,5660
5659,5660
5659,5661
5660,5661
5662,5663
5662,5664
5663,5664
5667,5668
5667,5669
5667,5670
5667,5671
5668,5669
5670,5671
5672,5673
5673,5674
5674,5675
5676,5677
5676,5678
5677,5678
5677,5679
5678,5679
5680,5681
5680,5682
5681,5682
5685,5686
5685,5687
5685,5688
5685,5689
5686,5687
5688,5689
5690,5691
5691,5692
5692,5693
5694,5695
5694,5696
5695,5696
5695,5697
5696,5697
5698,5699
5698,5700
5699,5700
5703,5704
5703,5705
5704,5705
5704,5706
5704,5707
5705,5706
5705,5707
5705,5708
5706,5707
5708,5709
5708,5710
5709,5710
5711,5712
5711,5713
5712,5713
5715,5716
5717,5718
5718,5719
5718,5720
5719,5720
5720,5721
5721,5722
5721,5723
5722,5723
5722,5724
5723,5724
5723,5725
5724,5725
5726,5727
5726,5728
5727,5728
5731,5732
5731,5733
5732,5733
5732,5734
5733,5734
5735,5736
5735,5737
5736,5737
5740,5741
5741,5742
5741,5743
5742,5743
5745,5746
5746,5747
5746,5748
5746,5749
5747,5748
5747,5749
5747,5750
5748,5749
5750,5751
5750,5752
5751,5752
5753,5754
5753,5755
5754,5755
5757,5758
5759,5760
5759,5761
5759,5762
5759,5763
5759,5764
5760,5761
5761,5762
5761,5763
5762,5763
5764,5765
5764,5766
5764,5767
5765,5766
5765,5767
5765,5768
5766,5767
5768,5769
5768,5770
5769,5770
5771,5772
5771,5773
5772,5773
5775,5776
5779,5780
5780,5781
5780,5782
5780,5783
5780,5784
5781,5782
5783,5784
5784,5785
5787,5788
5788,5789
5789,5790
5791,5792
5792,5793
5792,5794
5793,5794
5795,5796
5795,5797
5796,5797
5798,5799
5798,5800
5799,5800
5799,5801
5800,5801
5800,5802
5801,5802
5803,5804
5803,5805
5804,5805
5808,5809
5808,5810
5809,5810
5809,5811
5810,5811
5812,5813
5812,5814
5813,5814
5817,5818
5818,5819
5818,5820
5818,5821
5819,5820
5821,5822
5824,5825
5825,5826
5825,5827
5825,5828
5826,5827
5828,5829
5831,5832
5831,5833
5831,5834
5832,5833
5833,5834
5833,5835
5834,5835
5836,5837
5838,5839
5839,5840
5839,5841
5840,5841
5843,5844
5843,5845
5843,5846
5844,5845
5844,5846
5844,5847
5844,5848
5845,5846
5847,5848
5848,5849
5848,5850
5849,5850
5849,5851
5850,5851
5852,5853
5852,5854
5853,5854
5858,5859
5859,5860
5861,5862
5861,5863
5862,5863
5862,5864
5862,5865
5863,5864
5863,5865
5863,5866
5864,5865
5866,5867
5866,5868
5867,5868
5869,5870
5869,5871
5870,5871
5873,5874
5875,5876
5876,5877
5877,5878
5877,5879
5878,5879
5880,5881
5880,5882
5881,5882
5881,5883
5882,5883
5884,5885
5884,5886
5885,5886
5889,5890
5889,5891
5890,5891
5891,5892
5891,5893
5892,5893
5894,5895
5894,5896
5895,5896
5895,5897
5896,5897
5898,5899
5898,5900
5899,5900
5903,5904
5904,5905
5904,5906
5905,5906
5908,5909
5909,5910
5909,5911
5910,5911
5912,5913
5912,5914
5912,5915
5912,5916
5913,5914
5915,5916
5916,5917
5918,5919
5918,5920
5919,5920
5919,5921
5920,5921
5920,5922
5921,5922
5923,5924
5923,5925
5924,5925
5928,5929
5928,5930
5929,5930
5929,5931
5930,5931
5932,5933
5932,5934
5933,5934
5938,5939
5939,5940
5939,5941
5940,5941
5942,5943
5942,5944
5943,5944
5945,5946
5945,5947
5946,5947
5946,5948
5947,5948
5947,5949
5948,5949
5950,5951
5950,5952
5951,5952
5955,5956
5955,5957
5956,5957
5956,5958
5957,5958
5959,5960
5959,5961
5960,5961
5964,5965
5964,5966
5965,5966
5966,5967
5968,5969
5968,5970
5968,5971
5968,5972
5968,5973
5968,5974
5968,5975
5968,5976
5968,5977
5968,5978
5969,5970
5970,5971
5970,5972
5970,5973
5970,5974
5972,5973
5972,5974
5974,5975
5976,5977
5976,5978
5978,5979
5980,5981
5980,5982
5982,5983
5984,5985
5985,5986
5985,5987
5985,5988
5985,5989
5986,5987
5988,5989
5989,5990
5992,5993
5993,5994
5994,5995
5996,5997
5997,5998
5997,5999
5997,6000
5997,6001
5998,5999
6000,6001
6001,6002
6003,6004
6006,6007
6007,6008
6007,6009
6007,6010
6007,6011
6008,6009
6010,6011
6011,6012
6013,6014
6015,6016
6017,6018
6018,6019
6018,6020
6018,6021
6018,6022
6019,6020
6021,6022
6024,6025
6024,6026
6024,6027
6024,6028
6025,6026
6027,6028
6029,6030
6030,6031
6031,6032
6033,6034
6033,6035
6034,6035
6034,6036
6035,6036
6035,6037
6036,6037
6038,6039
6038,6040
6039,6040
6043,6044
6043,6045
6044,6045
6044,6046
6045,6046
6047,6048
6047,6049
6048,6049
6052,6053
6053,6054
6053,6055
6053,6056
6053,6057
6053,6058
6053,6059
6053,6060
6053,6061
6054,6055
6056,6057
6056,6058
6057,6058
6059,6060
6059,6061
6060,6061
6063,6064
6065,6066
6068,6069
6068,6070
6069,6070
6072,6073
6072,6074
6073,6074
6076,6077
6078,6079
6078,6080
6079,6080
6080,6081
6080,6082
6081,6082
6083,6084
6083,6085
6084,6085
6087,6088
6089,6090
6089,6091
6090,6091
6092,6093
6093,6094
6094,6095
6094,6096
6094,6097
6094,6098
6094,6099
6094,6100
6094,6101
6095,6096
6097,6098
6100,6101
6100,6102
6101,6102
6103,6104
6103,6105
6104,6105
6107,6108
6107,6109
6107,6110
6107,6111
6108,6109
6110,6111
6112,6113
6113,6114
6114,6115
6116,6117
6116,6118
6117,6118
6117,6119
6118,6119
6120,6121
6120,6122
6121,6122
6125,6126
6125,6127
6125,6128
6125,6129
6126,6127
6128,6129
6130,6131
6131,6132
6132,6133
6134,6135
6134,6136
6135,6136
6135,6137
6136,6137
6138,6139
6138,6140
6139,6140
6143,6144
6143,6145
6143,6146
6143,6147
6144,6145
6146,6147
6148,6149
6149,6150
6150,6151
6152,6153
6152,6154
6153,6154
6153,6155
6154,6155
6156,6157
6156,6158
6157,6158
6161,6162
6162,6163
6162,6164
6162,6165
6163,6164
6165,6166
6165,6167
6166,6167
6168,6169
6168,6170
6169,6170
6172,6173
6175,6176
6175,6177
6176,6177
6178,6179
6178,6180
6178,6181
6178,6182
6178,6183
6179,6180
6180,6181
6180,6182
6180,6183
6180,6184
6181,6182
6183,6184
6184,6185
6187,6188
6188,6189
6189,6190
6191,6192
6192,6193
6192,6194
6192,6195
6192,6196
6193,6194
6195,6196
6196,6197
6198,6199
6200,6201
6202,6203
6203,6204
6203,6205
6203,6206
6203,6207
6203,6208
6204,6205
6206,6207
6207,6208
6209,6210
6212,6213
6214,6215
6215,6216
6215,6217
6215,6218
6215,6219
6215,6220
6215,6221
6215,6222
6215,6223
6216,6217
6218,6219
6218,6220
6219,6220
6221,6222
6221,6223
6222,6223
6225,6226
6227,6228
6230,6231
6230,6232
6231,6232
6234,6235
6234,6236
6235,6236
6238,6239
6240,6241
6240,6242
6240,6243
6241,6242
6241,6243
6241,6244
6242,6243
6244,6245
6244,6246
6245,6246
6245,6247
6246,6247
6248,6249
6248,6250
6249,6250
6254,6255
6254,6256
6254,6257
6254,6258
6254,6259
6255,6256
6256,6257
6256,6258
6256,6259
6257,6258
6259,6260
6260,6261
6260,6262
6261,6262
6261,6263
6262,6263
6264,6265
6264,6266
6265,6266
6269,6270
6271,6272
6272,6273
6272,6274
6272,6275
6272,6276
6272,6277
6272,6278
6272,6279
6272,6280
6272,6281
6272,6282
6272,6283
6272,6284
6272,6285
6272,6286
6273,6274
6277,6278
6277,6279
6278,6279
6280,6281
6280,6282
6281,6282
6284,6285
6286,6287
6286,6288
6287,6288
6289,6290
6289,6291
6290,6291
6290,6292
6291,6292
6293,6294
6293,6295
6294,6295
6298,6299
6300,6301
6302,6303
6304,6305
6304,6306
6305,6306
6307,6308
6309,6310
6311,6312
6313,6314
6315,6316
6317,6318
6318,6319
6318,6320
6319,6320
6319,6321
6320,6321
6320,6322
6321,6322
6323,6324
6323,6325
6324,6325
6328,6329
6330,6331
6331,6332
6331,6333
6332,6333
6334,6335
6334,6336
6335,6336
6338,6339
6339,6340
6339,6341
6339,6342
6340,6341
6342,6343
6342,6344
6343,6344
6345,6346
6345,6347
6346,6347
6349,6350
6351,6352
6351,6353
6352,6353
6353,6354
6353,6355
6353,6356
6354,6355
6356,6357
6357,6358
6357,6359
6358,6359
6358,6360
6359,6360
6361,6362
6361,6363
6362,6363
6366,6367
6368,6369
6369,6370
6369,6371
6369,6372
6369,6373
6370,6371
6374,6375
6374,6376
6375,6376
6377,6378
6377,6379
6378,6379
6382,6383
6382,6384
6382,6385
6383,6384
6383,6385
6384,6385
6384,6386
6385,6386
6385,6387
6386,6387
6388,6389
6388,6390
6389,6390
6393,6394
6395,6396
6396,6397
6396,6398
6396,6399
6397,6398
6399,6400
6399,6401
6400,6401
6402,6403
6402,6404
6403,6404
6406,6407
6406,6408
6407,6408
6410,6411
6411,6412
6411,6413
6412,6413
6412,6414
6413,6414
6413,6415
6414,6415
6416,6417
6416,6418
6417,6418
6422,6423
6422,6424
6423,6424
6423,6425
6424,6425
6425,6426
6425,6427
6426,6427
6428,6429
6428,6430
6429,6430
6432,6433
6432,6434
6433,6434
6435,6436
6435,6437
6436,6437
6439,6440
6440,6441
6440,6442
6440,6443
6441,6442
6443,6444
6444,6445
6444,6446
6445,6446
6445,6447
6446,6447
6448,6449
6448,6450
6449,6450
6453,6454
6456,6457
6457,6458
6459,6460
6459,6461
6460,6461
6460,6462
6461,6462
6461,6463
6462,6463
6462,6464
6462,6465
6463,6464
6465,6466
6466,6467
6466,6468
6467,6468
6467,6469
6468,6469
6470,6471
6470,6472
6471,6472
6475,6476
6477,6478
6478,6479
6478,6480
6478,6481
6479,6480
6481,6482
6482,6483
6482,6484
6483,6484
6483,6485
6484,6485
6486,6487
6486,6488
6487,6488
6491,6492
6493,6494
6493,6495
6494,6495
6497,6498
6498,6499
6498,6500
6498,6501
6499,6500
6501,6502
6502,6503
6503,6504
6503,6505
6503,6506
6503,6507
6503,6508
6504,6505
6506,6507
6506,6508
6507,6508
6510,6511
6510,6512
6511,6512
6511,6513
6512,6513
6514,6515
6514,6516
6515,6516
6519,6520
6519,6521
6520,6521
6523,6524
6523,6525
6524,6525
6524,6526
6525,6526
6527,6528
6527,6529
6528,6529
6532,6533
6533,6534
6534,6535
6534,6536
6534,6537
6534,6538
6534,6539
6534,6540
6535,6536
6537,6538
6537,6539
6538,6539
6541,6542
6541,6543
6542,6543
6542,6544
6543,6544
6545,6546
6545,6547
6546,6547
6550,6551
6550,6552
6551,6552
6554,6555
6554,6556
6555,6556
6555,6557
6556,6557
6558,6559
6558,6560
6559,6560
6565,6566
6566,6567
6568,6569
6569,6570
6569,6571
6569,6572
6570,6571
6572,6573
6572,6574
6573,6574
6575,6576
6575,6577
6576,6577
6579,6580
6581,6582
6582,6583
6582,6584
6582,6585
6582,6586
6583,6584
6587,6588
6587,6589
6588,6589
6591,6592
6591,6593
6592,6593
6592,6594
6593,6594
6593,6595
6594,6595
6596,6597
6596,6598
6597,6598
6601,6602
6601,6603
6602,6603
6603,6604
6603,6605
6603,6606
6604,6605
6606,6607
6606,6608
6607,6608
6610,6611
6610,6612
6611,6612
6614,6615
6614,6616
6615,6616
6616,6617
6616,6618
6617,6618
6619,6620
6619,6621
6620,6621
6623,6624
6625,6626
6626,6627
6626,6628
6626,6629
6626,6630
6626,6631
6626,6632
6626,6633
6626,6634
6627,6628
6629,6630
6629,6631
6630,6631
6632,6633
6632,6634
6633,6634
6636,6637
6638,6639
6640,6641
6640,6642
6641,6642
6644,6645
6647,6648
6647,6649
6648,6649
6651,6652
6652,6653
6652,6654
6653,6654
6655,6656
6655,6657
6656,6657
6660,6661
6661,6662
6663,6664
6663,6665
6664,6665
6664,6666
6665,6666
6665,6667
6666,6667
6668,6669
6668,6670
6669,6670
6673,6674
6673,6675
6674,6675
6675,6676
6675,6677
6675,6678
6676,6677
6678,6679
6678,6680
6679,6680
6682,6683
6682,6684
6683,6684
6686,6687
6686,6688
6687,6688
6688,6689
6688,6690
6689,6690
6691,6692
6691,6693
6692,6693
6695,6696
6697,6698
6697,6699
6698,6699
6699,6700
6699,6701
6699,6702
6700,6701
6702,6703
6702,6704
6703,6704
6705,6706
6705,6707
6706,6707
6709,6710
6711,6712
6711,6713
6712,6713
6712,6714
6713,6714
6713,6715
6714,6715
6714,6716
6715,6716
6715,6717
6716,6717
6718,6719
6718,6720
6719,6720
6723,6724
6725,6726
6726,6727
6726,6728
6726,6729
6726,6730
6726,6731
6727,6728
6729,6730
6732,6733
6732,6734
6733,6734
6735,6736
6735,6737
6736,6737
6736,6738
6737,6738
6737,6739
6738,6739
6740,6741
6740,6742
6741,6742
6746,6747
6746,6748
6746,6749
6747,6748
6747,6749
6748,6749
6751,6752
6751,6753
6752,6753
6756,6757
6757,6758
6757,6759
6757,6760
6757,6761
6758,6759
6762,6763
6762,6764
6763,6764
6766,6767
6767,6768
6767,6769
6767,6770
6767,6771
6767,6772
6767,6773
6767,6774
6767,6775
6768,6769
6770,6771
6770,6772
6771,6772
6773,6774
6773,6775
6774,6775
6777,6778
6779,6780
6781,6782
6781,6783
6782,6783
6785,6786
6788,6789
6788,6790
6789,6790
6792,6793
6792,6794
6793,6794
6794,6795
6794,6796
6794,6797
6795,6796
6797,6798
6797,6799
6798,6799
6800,6801
6800,6802
6801,6802
6804,6805
6806,6807
6807,6808
6807,6809
6808,6809
6808,6810
6809,6810
6809,6811
6810,6811
6812,6813
6812,6814
6813,6814
6817,6818
6819,6820
6820,6821
6820,6822
6821,6822
6823,6824
6823,6825
6824,6825
6828,6829
6829,6830
6831,6832
6831,6833
6831,6834
6831,6835
6831,6836
6831,6837
6831,6838
6831,6839
6832,6833
6833,6834
6833,6835
6834,6835
6836,6837
6836,6838
6839,6840
6840,6841
6840,6842
6841,6842
6843,6844
6843,6845
6846,6847
6847,6848
6847,6849
6848,6849
6850,6851
6850,6852
6851,6852
6854,6855
6854,6856
6855,6856
6856,6857
6856,6858
6857,6858
6859,6860
6859,6861
6860,6861
6863,6864
6865,6866
6866,6867
6866,6868
6867,6868
6869,6870
6869,6871
6870,6871
6870,6872
6871,6872
6873,6874
6873,6875
6874,6875
6878,6879
6879,6880
6879,6881
6880,6881
6882,6883
6882,6884
6882,6885
6883,6884
6885,6886
6885,6887
6886,6887
6888,6889
6890,6891
6892,6893
6892,6894
6892,6895
6893,6894
6893,6895
6894,6895
6896,6897
6896,6898
6897,6898
6900,6901
6900,6902
6900,6903
6900,6904
6900,6905
6900,6906
6900,6907
6900,6908
6900,6909
6900,6910
6900,6911
6900,6912
6901,6902
6902,6903
6902,6904
6904,6905
6904,6906
6907,6908
6908,6909
6908,6910
6909,6910
6911,6912
6911,6913
6912,6913
6914,6915
6914,6916
6915,6916
6915,6917
6916,6917
6918,6919
6918,6920
6919,6920
6923,6924
6924,6925
6924,6926
6925,6926
6927,6928
6929,6930
6930,6931
6930,6932
6931,6932
6933,6934
6935,6936
6936,6937
6936,6938
6937,6938
6939,6940
6941,6942
6942,6943
6942,6944
6943,6944
6945,6946
6946,6947
6946,6948
6946,6949
6949,6950
6950,6951
6950,6952
6951,6952
6954,6955
6955,6956
6955,6957
6955,6958
6955,6959
6956,6957
6958,6959
6961,6962
6961,6963
6962,6963
6964,6965
6966,6967
6967,6968
6967,6969
6967,6970
6967,6971
6968,6969
6970,6971
6973,6974
6973,6975
6974,6975
6976,6977
6978,6979
6978,6980
6978,6981
6979,6980
6979,6981
6979,6982
6979,6983
6980,6981
6982,6983
6982,6984
6983,6984
6986,6987
6988,6989
6990,6991
6990,6992
6991,6992
6992,6993
6992,6994
6992,6995
6992,6996
6993,6994
6997,6998
6997,6999
6998,6999
7000,7001
7002,7003
7002,7004
7003,7004
7003,7005
7003,7006
7003,7007
7003,7008
7004,7005
7006,7007
7008,7009
7010,7011
7010,7012
7011,7012
7014,7015
7016,7017
7017,7018
7018,7019
7018,7020
7018,7021
7018,7022
7019,7020
7021,7022
7024,7025
7024,7026
7025,7026
7027,7028
7029,7030
7030,7031
7030,7032
7030,7033
7031,7032
7031,7033
7031,7034
7031,7035
7031,7036
7032,7033
7034,7035
7036,7037
7038,7039
7038,7040
7039,7040
7043,7044
7044,7045
7045,7046
7045,7047
7045,7048
7045,7049
7045,7050
7045,7051
7046,7047
7048,7049
7051,7052
7051,7053
7052,7053
7054,7055
7056,7057
7056,7058
7057,7058
7060,7061
7062,7063
7063,7064
7064,7065
7064,7066
7064,7067
7064,7068
7064,7069
7064,7070
7065,7066
7069,7070
7069,7071
7070,7071
7072,7073
7074,7075
7074,7076
7075,7076
7078,7079
7080,7081
7081,7082
7081,7083
7082,7083
7084,7085
7086,7087
7087,7088
7087,7089
7088,7089
7090,7091
7092,7093
7093,7094
7093,7095
7094,7095
7096,7097
7097,7098
7097,7099
7098,7099
7100,7101
7100,7102
7101,7102
7104,7105
7104,7106
7105,7106
7106,7107
7106,7108
7106,7109
7106,7110
7107,7108
7111,7112
7111,7113
7112,7113
7115,7116
7115,7117
7116,7117
7118,7119
7119,7120
7120,7121
7120,7122
7121,7122
7123,7124
7126,7127
7127,7128
7129,7130
7129,7131
7130,7131
7130,7132
7130,7133
7131,7132
7133,7134
7134,7135
7134,7136
7135,7136
7135,7137
7136,7137
7138,7139
7138,7140
7139,7140
7143,7144
7143,7145
7144,7145
7144,7146
7145,7146
7147,7148
7149,7150
7152,7153
7152,7154
7153,7154
7153,7155
7153,7156
7154,7155
7156,7157
7156,7158
7157,7158
7159,7160
7159,7161
7160,7161
7163,7164
7165,7166
7165,7167
7165,7168
7166,7167
7167,7168
7167,7169
7167,7170
7167,7171
7167,7172
7167,7173
7167,7174
7167,7175
7168,7169
7170,7171
7170,7172
7171,7172
7173,7174
7173,7175
7174,7175
7177,7178
7179,7180
7181,7182
7181,7183
7182,7183
7185,7186
7188,7189
7188,7190
7189,7190
7192,7193
7193,7194
7193,7195
7194,7195
7196,7197
7196,7198
7197,7198
7201,7202
7201,7203
7201,7204
7202,7203
7202,7204
7203,7204
7206,7207
7207,7208
7208,7209
7208,7210
7209,7210
7209,7211
7210,7211
7210,7212
7211,7212
7213,7214
7213,7215
7214,7215
7218,7219
7218,7220
7219,7220
7222,7223
7223,7224
7223,7225
7223,7226
7224,7225
7224,7226
7225,7226
7225,7227
7226,7227
7228,7229
7228,7230
7229,7230
7233,7234
7234,7235
7234,7236
7235,7236
7235,7237
7236,7237
7236,7238
7237,7238
7239,7240
7239,7241
7240,7241
7244,7245
7244,7246
7245,7246
7247,7248
7247,7249
7248,7249
7250,7251
7250,7252
7251,7252
7251,7253
7252,7253
7254,7255
7254,7256
7255,7256
7259,7260
7260,7261
7260,7262
7261,7262
7261,7263
7262,7263
7262,7264
7263,7264
7265,7266
7265,7267
7266,7267
7270,7271
7270,7272
7271,7272
7271,7273
7272,7273
7274,7275
7274,7276
7275,7276
7279,7280
7280,7281
7280,7282
7280,7283
7280,7284
7280,7285
7281,7282
7285,7286
7285,7287
7286,7287
7288,7289
7288,7290
7289,7290
7289,7291
7290,7291
7290,7292
7291,7292
7293,7294
7293,7295
7294,7295
7299,7300
7299,7301
7300,7301
7302,7303
7302,7304
7303,7304
7303,7305
7304,7305
7306,7307
7306,7308
7307,7308
7311,7312
7311,7313
7311,7314
7312,7313
7313,7314
7314,7315
7314,7316
7315,7316
7315,7317
7316,7317
7316,7318
7317,7318
7319,7320
7319,7321
7320,7321
7324,7325
7324,7326
7325,7326
7325,7327
7326,7327
7328,7329
7328,7330
7329,7330
7333,7334
7333,7335
7333,7336
7333,7337
7333,7338
7333,7339
7334,7335
7335,7336
7335,7337
7335,7338
7335,7339
7336,7337
7338,7339
7339,7340
7342,7343
7343,7344
7344,7345
7346,7347
7347,7348
7347,7349
7347,7350
7347,7351
7348,7349
7350,7351
7351,7352
7353,7354
7356,7357
7357,7358
7357,7359
7357,7360
7357,7361
7358,7359
7360,7361
7361,7362
7363,7364
7365,7366
7367,7368
7368,7369
7368,7370
7368,7371
7368,7372
7368,7373
7368,7374
7368,7375
7368,7376
7369,7370
7371,7372
7371,7373
7372,7373
7374,7375
7374,7376
7375,7376
7378,7379
7380,7381
7383,7384
7383,7385
7384,7385
7387,7388
7387,7389
7388,7389
7391,7392
7393,7394
7393,7395
7394,7395
7395,7396
7395,7397
7396,7397
7398,7399
7398,7400
7399,7400
7402,7403
7404,7405
7404,7406
7405,7406
7407,7408
7407,7409
7408,7409
7409,7410
7409,7411
7409,7412
7411,7412
7411,7413
7413,7414
7415,7416
7415,7417
7417,7418
7419,7420
7420,7421
7420,7422
7420,7423
7420,7424
7420,7425
7420,7426
7421,7422
7423,7424
7426,7427
7426,7428
7427,7428
7429,7430
7429,7431
7430,7431
7433,7434
7433,7435
7433,7436
7433,7437
7434,7435
7436,7437
7438,7439
7439,7440
7440,7441
7442,7443
7442,7444
7443,7444
7443,7445
7444,7445
7446,7447
7446,7448
7447,7448
7451,7452
7451,7453
7451,7454
7451,7455
7452,7453
7454,7455
7456,7457
7457,7458
7458,7459
7460,7461
7460,7462
7461,7462
7461,7463
7462,7463
7464,7465
7464,7466
7465,7466
7469,7470
7469,7471
7469,7472
7470,7471
7471,7472
7471,7473
7471,7474
7472,7473
7474,7475
7475,7476
7475,7477
7476,7477
7476,7478
7477,7478
7479,7480
7479,7481
7480,7481
7484,7485
7486,7487
7487,7488
7487,7489
7488,7489
7490,7491
7490,7492
7491,7492
7494,7495
7494,7496
7495,7496
7495,7497
7496,7497
7496,7498
7497,7498
7499,7500
7499,7501
7500,7501
7503,7504
7503,7505
7504,7505
7504,7506
7505,7506
7507,7508
7507,7509
7508,7509
7512,7513
7512,7514
7512,7515
7512,7516
7512,7517
7512,7518
7513,7514
7514,7515
7514,7516
7516,7517
7516,7518
7518,7519
7520,7521
7521,7522
7521,7523
7521,7524
7522,7523
7524,7525
7524,7526
7525,7526
7527,7528
7527,7529
7528,7529
7528,7530
7529,7530
7531,7532
7531,7533
7532,7533
7536,7537
7536,7538
7537,7538
7537,7539
7538,7539
7540,7541
7540,7542
7541,7542
7545,7546
7546,7547
7546,7548
7546,7549
7546,7550
7547,7548
7551,7552
7551,7553
7551,7554
7551,7555
7552,7553
7554,7555
7556,7557
7557,7558
7558,7559
7560,7561
7560,7562
7561,7562
7563,7564
7563,7565
7564,7565
7564,7566
7565,7566
7567,7568
7567,7569
7568,7569
7572,7573
7572,7574
7573,7574
7573,7575
7574,7575
7574,7576
7575,7576
7577,7578
7577,7579
7578,7579
7578,7580
7579,7580
7581,7582
7581,7583
7582,7583
7587,7588
7588,7589
7588,7590
7588,7591
7589,7590
7591,7592
7591,7593
7592,7593
7592,7594
7593,7594
7595,7596
7595,7597
7596,7597
7600,7601
7600,7602
7601,7602
7603,7604
7603,7605
7604,7605
7604,7606
7605,7606
7607,7608
7607,7609
7608,7609
7612,7613
7612,7614
7613,7614
7613,7615
7614,7615
7614,7616
7615,7616
7617,7618
7617,7619
7618,7619
7618,7620
7619,7620
7621,7622
7621,7623
7622,7623
7627,7628
7628,7629
7628,7630
7628,7631
7629,7630
7631,7632
7631,7633
7632,7633
7632,7634
7633,7634
7635,7636
7635,7637
7636,7637
7640,7641
7640,7642
7641,7642
7643,7644
7643,7645
7644,7645
7644,7646
7645,7646
7647,7648
7647,7649
7648,7649
7652,7653
7653,7654
7653,7655
7654,7655
7656,7657
7656,7658
7657,7658
7657,7659
7658,7659
7660,7661
7660,7662
7661,7662
7665,7666
7665,7667
7666,7667
7666,7668
7667,7668
7669,7670
7669,7671
7670,7671
7673,7674
7673,7675
7673,7676
7673,7677
7673,7678
7674,7675
7675,7676
7675,7677
7676,7677
7678,7679
7679,7680
7679,7681
7682,7683
7683,7684
7683,7685
7683,7686
7683,7687
7684,7685
7686,7687
7687,7688
7687,7689
7688,7689
7688,7690
7689,7690
7691,7692
7691,7693
7692,7693
7696,7697
7698,7699
7700,7701
7701,7702
7701,7703
7702,7703
7703,7704
7704,7705
7704,7706
7705,7706
7705,7707
7706,7707
7709,7710
7711,7712
7712,7713
7712,7714
7712,7715
7713,7714
7715,7716
7717,7718
7717,7719
7718,7719
7721,7722
7722,7723
7722,7724
7723,7724
7725,7726
7726,7727
7729,7730
7730,7731
7732,7733
7733,7734
7733,7735
7733,7736
7733,7737
7733,7738
7733,7739
7733,7740
7733,7741
7734,7735
7736,7737
7736,7738
7737,7738
7739,7740
7739,7741
7740,7741
7743,7744
7745,7746
7747,7748
7747,7749
7748,7749
7751,7752
7754,7755
7757,7758
7758,7759
7760,7761
7760,7762
7760,7763
7761,7762
7762,7763
7762,7764
7763,7764
7765,7766
7767,7768
7768,7769
7768,7770
7768,7771
7769,7770
7771,7772
7771,7773
7772,7773
7774,7775
7774,7776
7775,7776
7778,7779
7779,7780
7781,7782
7782,7783
7782,7784
7782,7785
7782,7786
7782,7787
7782,7788
7782,7789
7782,7790
7783,7784
7785,7786
7785,7787
7786,7787
7788,7789
7788,7790
7789,7790
7792,7793
7794,7795
7796,7797
7796,7798
7797,7798
7800,7801
7800,7802
7801,7802
7804,7805
7804,7806
7805,7806
7808,7809
7811,7812
7812,7813
7814,7815
7815,7816
7815,7817
7816,7817
7816,7818
7817,7818
7817,7819
7818,7819
7820,7821
7820,7822
7821,7822
7825,7826
7825,7827
7826,7827
7826,7828
7826,7829
7826,7830
7827,7828
7829,7830
7829,7831
7830,7831
7832,7833
7832,7834
7833,7834
7837,7838
7838,7839
7840,7841
7840,7842
7841,7842
7844,7845
7845,7846
7845,7847
7845,7848
7846,7847
7848,7849
7850,7851
7851,7852
7853,7854
7854,7855
7854,7856
7855,7856
7857,7858
7857,7859
7858,7859
7861,7862
7861,7863
7862,7863
7862,7864
7863,7864
7863,7865
7864,7865
7866,7867
7866,7868
7867,7868
7871,7872
7871,7873
7871,7874
7871,7875
7871,7876
7871,7877
7871,7878
7871,7879
7871,7880
7871,7881
7871,7882
7872,7873
7873,7874
7873,7875
7874,7875
7876,7877
7876,7878
7877,7878
7877,7879
7878,7879
7880,7881
7880,7882
7881,7882
7885,7886
7885,7887
7885,7888
7886,7887
7886,7888
7887,7888
7888,7889
7888,7890
7889,7890
7889,7891
7890,7891
7894,7895
7895,7896
7895,7897
7896,7897
7896,7898
7897,7898
7900,7901
7900,7902
7901,7902
7904,7905
7905,7906
7905,7907
7906,7907
7906,7908
7907,7908
7907,7909
7908,7909
7908,7910
7909,7910
7911,7912
7911,7913
7912,7913
7916,7917
7916,7918
7917,7918
7920,7921
7920,7922
7920,7923
7921,7922
7922,7923
7922,7924
7922,7925
7922,7926
7922,7927
7923,7924
7925,7926
7928,7929
7928,7930
7929,7930
7932,7933
7932,7934
7933,7934
7933,7935
7934,7935
7936,7937
7936,7938
7937,7938
7941,7942
7942,7943
7942,7944
7942,7945
7942,7946
7942,7947
7942,7948
7943,7944
7945,7946
7949,7950
7949,7951
7950,7951
7953,7954
7953,7955
7954,7955
7954,7956
7955,7956
7957,7958
7957,7959
7958,7959
7962,7963
7963,7964
7963,7965
7963,7966
7963,7967
7963,7968
7964,7965
7966,7967
7968,7969
7971,7972
7971,7973
7972,7973
7975,7976
7975,7977
7976,7977
7976,7978
7977,7978
7978,7979
7978,7980
7979,7980
7979,7981
7980,7981
7984,7985
7985,7986
7985,7987
7986,7987
7986,7988
7987,7988
7990,7991
7990,7992
7991,7992
7994,7995
7995,7996
7995,7997
7996,7997
7996,7998
7997,7998
7997,7999
7998,7999
7998,8000
7999,8000
8001,8002
8001,8003
8002,8003
8006,8007
8006,8008
8007,8008
8010,8011
8010,8012
8010,8013
8011,8012
8012,8013
8012,8014
8012,8015
8012,8016
8012,8017
8013,8014
8015,8016
8018,8019
8018,8020
8019,8020
8022,8023
8022,8024
8023,8024
8023,8025
8024,8025
8026,8027
8026,8028
8027,8028
8031,8032
8032,8033
8032,8034
8032,8035
8032,8036
8032,8037
8032,8038
8033,8034
8035,8036
8039,8040
8039,8041
8040,8041
8043,8044
8043,8045
8044,8045
8044,8046
8045,8046
8047,8048
8047,8049
8048,8049
8052,8053
8053,8054
8053,8055
8053,8056
8053,8057
8053,8058
8054,8055
8056,8057
8058,8059
8061,8062
8061,8063
8062,8063
8065,8066
8066,8067
8066,8068
8067,8068
8067,8069
8068,8069
8071,8072
8071,8073
8072,8073
8072,8074
8073,8074
8075,8076
8075,8077
8076,8077
8080,8081
8080,8082
8080,8083
8081,8082
8081,8083
8082,8083
8082,8084
8083,8084
8086,8087
8087,8088
8087,8089
8088,8089
8088,8090
8089,8090
8092,8093
8094,8095
8095,8096
8095,8097
8096,8097
8096,8098
8097,8098
8100,8101
8100,8102
8101,8102
8102,8103
8102,8104
8103,8104
8103,8105
8104,8105
8104,8106
8105,8106
8107,8108
8107,8109
8108,8109
8112,8113
8112,8114
8113,8114
8117,8118
8117,8119
8117,8120
8118,8119
8118,8120
8119,8120
8119,8121
8120,8121
8123,8124
8123,8125
8124,8125
8124,8126
8125,8126
8129,8130
8130,8131
8130,8132
8131,8132
8131,8133
8132,8133
8135,8136
8135,8137
8136,8137
8137,8138
8137,8139
8139,8140
8139,8141
8140,8141
8144,8145
8145,8146
8145,8147
8146,8147
8146,8148
8147,8148
8150,8151
8150,8152
8151,8152
8151,8153
8152,8153
8154,8155
8154,8156
8155,8156
8159,8160
8159,8161
8160,8161
8160,8162
8161,8162
8161,8163
8162,8163
8165,8166
8167,8168
8168,8169
8168,8170
8169,8170
8170,8171
8170,8172
8170,8173
8171,8172
8173,8174
8175,8176
8175,8177
8176,8177
8179,8180
8179,8181
8180,8181
8181,8182
8181,8183
8182,8183
8184,8185
8186,8187
8187,8188
8187,8189
8188,8189
8188,8190
8189,8190
8192,8193
8194,8195
8194,8196
8194,8197
8195,8196
8195,8197
8196,8197
8197,8198
8197,8199
8198,8199
8198,8200
8199,8200
8203,8204
8204,8205
8204,8206
8205,8206
8205,8207
8206,8207
8209,8210
8209,8211
8210,8211
8213,8214
8214,8215
8214,8216
8215,8216
8215,8217
8216,8217
8219,8220
8219,8221
8219,8222
8219,8223
8219,8224
8220,8221
8222,8223
8224,8225
8224,8226
8225,8226
8228,8229
8230,8231
8230,8232
8231,8232
8233,8234
8235,8236
8236,8237
8236,8238
8237,8238
8237,8239
8238,8239
8241,8242
8241,8243
8241,8244
8241,8245
8241,8246
8242,8243
8244,8245
8246,8247
8246,8248
8247,8248
8250,8251
8252,8253
8252,8254
8253,8254
8255,8256
8257,8258
8257,8259
8258,8259
8258,8260
8259,8260
8259,8261
8260,8261
8263,8264
8265,8266
8266,8267
8266,8268
8267,8268
8269,8270
8271,8272
8272,8273
8272,8274
8272,8275
8272,8276
8272,8277
8272,8278
8272,8279
8272,8280
8273,8274
8275,8276
8275,8277
8276,8277
8278,8279
8278,8280
8279,8280
8282,8283
8284,8285
8286,8287
8286,8288
8287,8288
8290,8291
8293,8294
8293,8295
8294,8295
8297,8298
8298,8299
8298,8300
8299,8300
8301,8302
8301,8303
8302,8303
8305,8306
8306,8307
8306,8308
8307,8308
8307,8309
8308,8309
8312,8313
8313,8314
8313,8315
8313,8316
8313,8317
8313,8318
8313,8319
8313,8320
8314,8315
8318,8319
8318,8320
8319,8320
8322,8323
8322,8324
8323,8324
8326,8327
8326,8328
8327,8328
8330,8331
8330,8332
8331,8332
8335,8336
8336,8337
8338,8339
8339,8340
8341,8342
8342,8343
8342,8344
8343,8344
8343,8345
8344,8345
8348,8349
8349,8350
8349,8351
8350,8351
8350,8352
8351,8352
8355,8356
8356,8357
8356,8358
8357,8358
8357,8359
8358,8359
8362,8363
8363,8364
8363,8365
8364,8365
8364,8366
8365,8366
8369,8370
8370,8371
8370,8372
8370,8373
8371,8372
8373,8374
8375,8376
8376,8377
8378,8379
8378,8380
8378,8381
8379,8380
8379,8381
8380,8381
8380,8382
8381,8382
8381,8383
8382,8383
8386,8387
8388,8389
8388,8390
8389,8390
8390,8391
8390,8392
8391,8392
8391,8393
8392,8393
8392,8394
8393,8394
8393,8395
8394,8395
8399,8400
8401,8402
8402,8403
8402,8404
8402,8405
8402,8406
8402,8407
8402,8408
8402,8409
8402,8410
8403,8404
8405,8406
8405,8407
8406,8407
8408,8409
8408,8410
8409,8410
8412,8413
8413,8414
8413,8415
8414,8415
8417,8418
8417,8419
8418,8419
8421,8422
8426,8427
8426,8428
8426,8429
8426,8430
8427,8428
8428,8429
8428,8430
8430,8431
8432,8433
8433,8434
8433,8435
8434,8435
8436,8437
8436,8438
8436,8439
8436,8440
8437,8438
8439,8440
8439,8441
8440,8441
8442,8443
8442,8444
8443,8444
8447,8448
8448,8449
8448,8450
8449,8450
8452,8453
8453,8454
8453,8455
8454,8455
8454,8456
8455,8456
8455,8457
8456,8457
8458,8459
8458,8460
8459,8460
8463,8464
8463,8465
8464,8465
8466,8467
8466,8468
8467,8468
8470,8471
8470,8472
8471,8472
8473,8474
8474,8475
8474,8476
8474,8477
8474,8478
8474,8479
8475,8476
8479,8480
8479,8481
8480,8481
8482,8483
8482,8484
8483,8484
8483,8485
8484,8485
8484,8486
8485,8486
8487,8488
8487,8489
8488,8489
8493,8494
8493,8495
8494,8495
8494,8496
8495,8496
8497,8498
8497,8499
8498,8499
8503,8504
8504,8505
8506,8507
8506,8508
8507,8508
8507,8509
8507,8510
8508,8509
8510,8511
8511,8512
8511,8513
8512,8513
8512,8514
8513,8514
8515,8516
8515,8517
8516,8517
8520,8521
8520,8522
8521,8522
8523,8524
8525,8526
8525,8527
8526,8527
8527,8528
8527,8529
8527,8530
8527,8531
8528,8529
8530,8531
8533,8534
8533,8535
8533,8536
8534,8535
8534,8536
8535,8536
8535,8537
8536,8537
8538,8539
8538,8540
8539,8540
8543,8544
8543,8545
8544,8545
8546,8547
8546,8548
8547,8548
8547,8549
8548,8549
8550,8551
8550,8552
8551,8552
8557,8558
8557,8559
8558,8559
8558,8560
8558,8561
8558,8562
8558,8563
8558,8564
8559,8560
8561,8562
8561,8563
8562,8563
8564,8565
8564,8566
8565,8566
8568,8569
8569,8570
8569,8571
8570,8571
8570,8572
8571,8572
8573,8574
8573,8575
8574,8575
8578,8579
8579,8580
8581,8582
8581,8583
8582,8583
8582,8584
8583,8584
8585,8586
8585,8587
8586,8587
8590,8591
8590,8592
8591,8592
8591,8593
8592,8593
8594,8595
8594,8596
8595,8596
8599,8600
8600,8601
8602,8603
8603,8604
8603,8605
8603,8606
8603,8607
8603,8608
8604,8605
8606,8607
8609,8610
8609,8611
8609,8612
8610,8611
8610,8612
8611,8612
8614,8615
8614,8616
8615,8616
8619,8620
8619,8621
8620,8621
8622,8623
8622,8624
8623,8624
8623,8625
8624,8625
8624,8626
8625,8626
8627,8628
8627,8629
8628,8629
8633,8634
8634,8635
8634,8636
8634,8637
8635,8636
8637,8638
8637,8639
8638,8639
8641,8642
8642,8643
8645,8646
8646,8647
8648,8649
8648,8650
8649,8650
8651,8652
8652,8653
8652,8654
8652,8655
8652,8656
8652,8657
8652,8658
8652,8659
8652,8660
8653,8654
8655,8656
8655,8657
8656,8657
8658,8659
8658,8660
8659,8660
8662,8663
8664,8665
8666,8667
8666,8668
8667,8668
8670,8671
8673,8674
8673,8675
8674,8675
8677,8678
8677,8679
8678,8679
8678,8680
8678,8681
8679,8680
8681,8682
8682,8683
8682,8684
8683,8684
8683,8685
8684,8685
8686,8687
8686,8688
8687,8688
8691,8692
8691,8693
8692,8693
8694,8695
8696,8697
8696,8698
8697,8698
8698,8699
8698,8700
8698,8701
8698,8702
8699,8700
8701,8702
8704,8705
8704,8706
8704,8707
8705,8706
8705,8707
8706,8707
8706,8708
8707,8708
8709,8710
8709,8711
8710,8711
8714,8715
8714,8716
8715,8716
8717,8718
8717,8719
8718,8719
8718,8720
8719,8720
8721,8722
8721,8723
8722,8723
8728,8729
8728,8730
8729,8730
8729,8731
8729,8732
8730,8731
8732,8733
8732,8734
8733,8734
8735,8736
8735,8737
8736,8737
8739,8740
8740,8741
8742,8743
8742,8744
8742,8745
8742,8746
8743,8744
8743,8745
8744,8745
8746,8747
8747,8748
8747,8749
8747,8750
8747,8751
8747,8752
8748,8749
8750,8751
8753,8754
8753,8755
8754,8755
8756,8757
8756,8758
8757,8758
8757,8759
8758,8759
8758,8760
8759,8760
8761,8762
8761,8763
8762,8763
8767,8768
8767,8769
8768,8769
8768,8770
8769,8770
8771,8772
8771,8773
8772,8773
8776,8777
8777,8778
8777,8779
8777,8780
8777,8781
8778,8779
8780,8781
8781,8782
8784,8785
8785,8786
8786,8787
8788,8789
8789,8790
8789,8791
8789,8792
8790,8791
8792,8793
8792,8794
8793,8794
8796,8797
8799,8800
8799,8801
8799,8802
8800,8801
8800,8802
8800,8803
8801,8802
8803,8804
8803,8805
8804,8805
8804,8806
8805,8806
8807,8808
8807,8809
8808,8809
8813,8814
8814,8815
8815,8816
8815,8817
8816,8817
8818,8819
8818,8820
8818,8821
8818,8822
8818,8823
8818,8824
8819,8820
8821,8822
8823,8824
8823,8825
8824,8825
8824,8826
8825,8826
8827,8828
8827,8829
8828,8829
8832,8833
8832,8834
8833,8834
8833,8835
8834,8835
8836,8837
8836,8838
8837,8838
8842,8843
8842,8844
8843,8844
8843,8845
8844,8845
8846,8847
8846,8848
8847,8848
8851,8852
8852,8853
8852,8854
8853,8854
8856,8857
8856,8858
8856,8859
8857,8858
8857,8859
8858,8859
8858,8860
8858,8861
8859,8860
8861,8862
8861,8863
8862,8863
8862,8864
8863,8864
8865,8866
8865,8867
8866,8867
8871,8872
8872,8873
8874,8875
8874,8876
8874,8877
8874,8878
8874,8879
8874,8880
8875,8876
8875,8877
8876,8877
8878,8879
8879,8880
8879,8881
8879,8882
8879,8883
8879,8884
8879,8885
8880,8881
8882,8883
8885,8886
8885,8887
8886,8887
8888,8889
8888,8890
8889,8890
8892,8893
8892,8894
8893,8894
8893,8895
8894,8895
8896,8897
8896,8898
8897,8898
8901,8902
8901,8903
8902,8903
8902,8904
8903,8904
8905,8906
8905,8907
8906,8907
8910,8911
8911,8912
8911,8913
8911,8914
8911,8915
8912,8913
8914,8915
8915,8916
8918,8919
8919,8920
8920,8921
8922,8923
8923,8924
8923,8925
8923,8926
8923,8927
8924,8925
8926,8927
8927,8928
8929,8930
8932,8933
8933,8934
8933,8935
8933,8936
8933,8937
8934,8935
8936,8937
8937,8938
8939,8940
8941,8942
8943,8944
8944,8945
8944,8946
8944,8947
8944,8948
8944,8949
8944,8950
8944,8951
8944,8952
8945,8946
8947,8948
8947,8949
8948,8949
8950,8951
8950,8952
8951,8952
8954,8955
8956,8957
8959,8960
8959,8961
8960,8961
8963,8964
8963,8965
8964,8965
8967,8968
8969,8970
8969,8971
8970,8971
8971,8972
8971,8973
8972,8973
8974,8975
8974,8976
8975,8976
8978,8979
8980,8981
8980,8982
8980,8983
8981,8982
8981,8983
8981,8984
8982,8983
8982,8984
8982,8985
8983,8984
8985,8986
8985,8987
8986,8987
8988,8989
8988,8990
8989,8990
8992,8993
8994,8995
8994,8996
8994,8997
8994,8998
8994,8999
8995,8996
8995,8997
8995,8998
8996,8997
8996,8998
8996,8999
8997,8998
8999,9000
8999,9001
9000,9001
9002,9003
9002,9004
9003,9004
9006,9007
9008,9009
9009,9010
9010,9011
9010,9012
9011,9012
9014,9015
9015,9016
9016,9017
9016,9018
9017,9018
9020,9021
9021,9022
9021,9023
9022,9023
9024,9025
9024,9026
9025,9026
9025,9027
9026,9027
9026,9028
9027,9028
9029,9030
9029,9031
9030,9031
9034,9035
9034,9036
9035,9036
9035,9037
9036,9037
9038,9039
9038,9040
9039,9040
9043,9044
9044,9045
9044,9046
9044,9047
9044,9048
9045,9046
9047,9048
9048,9049
9051,9052
9052,9053
9053,9054
9055,9056
9056,9057
9056,9058
9056,9059
9057,9058
9059,9060
9062,9063
9063,9064
9063,9065
9063,9066
9064,9065
9066,9067
9069,9070
9069,9071
9069,9072
9069,9073
9069,9074
9069,9075
9069,9076
9070,9071
9071,9072
9071,9073
9072,9073
9074,9075
9076,9077
9077,9078
9077,9079
9078,9079
9081,9082
9081,9083
9082,9083
9082,9084
9083,9084
9086,9087
9087,9088
9087,9089
9087,9090
9087,9091
9087,9092
9088,9089
9090,9091
9091,9092
9091,9093
9092,9093
9092,9094
9093,9094
9095,9096
9095,9097
9096,9097
9100,9101
9100,9102
9101,9102
9106,9107
9106,9108
9106,9109
9107,9108
9107,9109
9107,9110
9107,9111
9108,9109
9110,9111
9111,9112
9111,9113
9112,9113
9112,9114
9113,9114
9115,9116
9115,9117
9116,9117
9121,9122
9122,9123
9124,9125
9125,9126
9125,9127
9125,9128
9126,9127
9126,9128
9126,9129
9127,9128
9129,9130
9129,9131
9130,9131
9132,9133
9132,9134
9133,9134
9136,9137
9138,9139
9138,9140
9139,9140
9140,9141
9140,9142
9141,9142
9143,9144
9143,9145
9144,9145
9144,9146
9145,9146
9147,9148
9147,9149
9148,9149
9152,9153
9153,9154
9153,9155
9154,9155
9157,9158
9158,9159
9159,9160
9159,9161
9160,9161
9162,9163
9162,9164
9163,9164
9163,9165
9164,9165
9166,9167
9166,9168
9167,9168
9171,9172
9172,9173
9172,9174
9173,9174
9175,9176
9175,9177
9176,9177
9176,9178
9177,9178
9179,9180
9179,9181
9180,9181
9184,9185
9185,9186
9185,9187
9186,9187
9188,9189
9188,9190
9188,9191
9188,9192
9189,9190
9191,9192
9192,9193
9194,9195
9194,9196
9195,9196
9195,9197
9196,9197
9196,9198
9197,9198
9199,9200
9199,9201
9200,9201
9204,9205
9204,9206
9205,9206
9205,9207
9206,9207
9208,9209
9208,9210
9209,9210
9214,9215
9215,9216
9215,9217
9215,9218
9215,9219
9216,9217
9218,9219
9219,9220
9219,9221
9220,9221
9220,9222
9221,9222
9223,9224
9223,9225
9224,9225
9228,9229
9230,9231
9230,9232
9231,9232
9232,9233
9233,9234
9236,9237
9237,9238
9237,9239
9237,9240
9237,9241
9238,9239
9240,9241
9241,9242
9241,9243
9242,9243
9242,9244
9243,9244
9245,9246
9245,9247
9246,9247
9250,9251
9252,9253
9252,9254
9253,9254
9254,9255
9255,9256
9258,9259
9258,9260
9259,9260
9260,9261
9262,9263
9262,9264
9262,9265
9263,9264
9264,9265
9264,9266
9264,9267
9264,9268
9266,9267
9266,9268
9268,9269
9270,9271
9270,9272
9272,9273
9274,9275
9274,9276
9276,9277
9278,9279
9278,9280
9279,9280
9280,9281
9280,9282
9280,9283
9281,9282
9283,9284
9283,9285
9284,9285
9286,9287
9286,9288
9287,9288
9290,9291
9292,9293
9292,9294
9293,9294
9294,9295
9294,9296
9294,9297
9294,9298
9294,9299
9295,9296
9299,9300
9299,9301
9300,9301
9302,9303
9302,9304
9303,9304
9303,9305
9304,9305
9306,9307
9306,9308
9307,9308
9311,9312
9311,9313
9311,9314
9311,9315
9312,9313
9314,9315
9316,9317
9317,9318
9318,9319
9320,9321
9320,9322
9321,9322
9321,9323
9322,9323
9324,9325
9324,9326
9325,9326
9329,9330
9330,9331
9330,9332
9331,9332
9333,9334
9333,9335
9334,9335
9334,9336
9335,9336
9335,9337
9336,9337
9338,9339
9338,9340
9339,9340
9343,9344
9343,9345
9344,9345
9344,9346
9345,9346
9347,9348
9347,9349
9348,9349
9352,9353
9352,9354
9352,9355
9353,9354
9354,9355
9356,9357
9356,9358
9356,9359
9356,9360
9356,9361
9356,9362
9357,9358
9357,9359
9358,9359
9360,9361
9361,9362
9361,9363
9361,9364
9362,9363
9362,9364
9362,9365
9363,9364
9365,9366
9365,9367
9366,9367
9368,9369
9368,9370
9369,9370
9372,9373
9374,9375
9375,9376
9376,9377
9376,9378
9376,9379
9376,9380
9376,9381
9376,9382
9377,9378
9379,9380
9382,9383
9382,9384
9383,9384
9385,9386
9385,9387
9386,9387
9389,9390
9389,9391
9389,9392
9389,9393
9390,9391
9392,9393
9394,9395
9395,9396
9396,9397
9398,9399
9398,9400
9399,9400
9399,9401
9400,9401
9402,9403
9402,9404
9403,9404
9407,9408
9407,9409
9407,9410
9407,9411
9408,9409
9410,9411
9412,9413
9413,9414
9414,9415
9416,9417
9416,9418
9417,9418
9417,9419
9418,9419
9420,9421
9420,9422
9421,9422
9425,9426
9426,9427
9427,9428
9427,9429
9427,9430
9427,9431
9427,9432
9427,9433
9427,9434
9428,9429
9430,9431
9433,9434
9433,9435
9434,9435
9436,9437
9436,9438
9437,9438
9440,9441
9440,9442
9440,9443
9440,9444
9441,9442
9443,9444
9445,9446
9446,9447
9447,9448
9449,9450
9449,9451
9450,9451
9450,9452
9451,9452
9453,9454
9453,9455
9454,9455
9458,9459
9458,9460
9458,9461
9458,9462
9459,9460
9461,9462
9463,9464
9464,9465
9465,9466
9467,9468
9467,9469
9468,9469
9468,9470
9469,9470
9471,9472
9471,9473
9472,9473
9476,9477
9476,9478
9476,9479
9476,9480
9477,9478
9479,9480
9481,9482
9482,9483
9483,9484
9485,9486
9485,9487
9486,9487
9486,9488
9487,9488
9489,9490
9489,9491
9490,9491
9494,9495
9495,9496
9495,9497
9495,9498
9495,9499
9496,9497
9498,9499
9499,9500
9502,9503
9503,9504
9504,9505
9506,9507
9507,9508
9507,9509
9507,9510
9507,9511
9508,9509
9510,9511
9511,9512
9513,9514
9516,9517
9517,9518
9517,9519
9517,9520
9517,9521
9518,9519
9520,9521
9521,9522
9523,9524
9525,9526
9527,9528
9528,9529
9528,9530
9528,9531
9528,9532
9528,9533
9528,9534
9528,9535
9528,9536
9529,9530
9531,9532
9531,9533
9532,9533
9534,9535
9534,9536
9535,9536
9538,9539
9540,9541
9543,9544
9543,9545
9544,9545
9547,9548
9547,9549
9548,9549
9551,9552
9553,9554
9553,9555
9554,9555
9555,9556
9555,9557
9556,9557
9558,9559
9558,9560
9559,9560
9562,9563
9564,9565
9564,9566
9565,9566
9565,9567
9565,9568
9566,9567
9566,9568
9566,9569
9567,9568
9569,9570
9569,9571
9570,9571
9572,9573
9572,9574
9573,9574
9576,9577
9578,9579
9579,9580
9579,9581
9580,9581
9581,9582
9582,9583
9582,9584
9583,9584
9583,9585
9584,9585
9584,9586
9585,9586
9587,9588
9587,9589
9588,9589
9592,9593
9592,9594
9593,9594
9593,9595
9594,9595
9596,9597
9596,9598
9597,9598
9601,9602
9602,9603
9602,9604
9603,9604
9606,9607
9607,9608
9607,9609
9607,9610
9608,9609
9608,9610
9608,9611
9609,9610
9611,9612
9611,9613
9612,9613
9614,9615
9614,9616
9615,9616
9618,9619
9620,9621
9620,9622
9620,9623
9620,9624
9620,9625
9621,9622
9622,9623
9622,9624
9623,9624
9625,9626
9625,9627
9625,9628
9626,9627
9626,9628
9626,9629
9627,9628
9629,9630
9629,9631
9630,9631
9632,9633
9632,9634
9633,9634
9636,9637
9640,9641
9641,9642
9641,9643
9641,9644
9641,9645
9642,9643
9644,9645
9645,9646
9648,9649
9649,9650
9650,9651
9652,9653
9653,9654
9653,9655
9654,9655
9656,9657
9656,9658
9656,9659
9657,9658
9657,9659
9657,9660
9658,9659
9660,9661
9660,9662
9661,9662
9663,9664
9663,9665
9664,9665
9667,9668
9669,9670
9669,9671
9670,9671
9670,9672
9671,9672
9673,9674
9673,9675
9674,9675
9678,9679
9678,9680
9679,9680
9681,9682
9681,9683
9682,9683
9682,9684
9683,9684
9683,9685
9684,9685
9686,9687
9686,9688
9687,9688
9691,9692
9691,9693
9692,9693
9692,9694
9693,9694
9695,9696
9695,9697
9696,9697
9700,9701
9701,9702
9701,9703
9701,9704
9702,9703
9704,9705
9707,9708
9708,9709
9708,9710
9708,9711
9709,9710
9711,9712
9714,9715
9714,9716
9714,9717
9715,9716
9716,9717
9716,9718
9717,9718
9719,9720
9721,9722
9722,9723
9722,9724
9723,9724
9726,9727
9726,9728
9726,9729
9727,9728
9727,9729
9727,9730
9727,9731
9728,9729
9730,9731
9731,9732
9731,9733
9732,9733
9732,9734
9733,9734
9735,9736
9735,9737
9736,9737
9741,9742
9742,9743
9744,9745
9744,9746
9745,9746
9745,9747
9745,9748
9746,9747
9746,9748
9746,9749
9747,9748
9749,9750
9749,9751
9750,9751
9752,9753
9752,9754
9753,9754
9756,9757
9758,9759
9759,9760
9760,9761
9760,9762
9761,9762
9763,9764
9763,9765
9764,9765
9764,9766
9765,9766
9767,9768
9767,9769
9768,9769
9772,9773
9772,9774
9773,9774
9774,9775
9774,9776
9775,9776
9777,9778
9777,9779
9778,9779
9778,9780
9779,9780
9781,9782
9781,9783
9782,9783
9786,9787
9787,9788
9787,9789
9788,9789
9791,9792
9792,9793
9792,9794
9793,9794
9795,9796
9795,9797
9795,9798
9795,9799
9796,9797
9798,9799
9799,9800
9801,9802
9801,9803
9802,9803
9802,9804
9803,9804
9803,9805
9804,9805
9806,9807
9806,9808
9807,9808
9811,9812
9811,9813
9812,9813
9812,9814
9813,9814
9815,9816
9815,9817
9816,9817
9821,9822
9822,9823
9822,9824
9823,9824
9825,9826
9825,9827
9826,9827
9828,9829
9828,9830
9829,9830
9829,9831
9830,9831
9830,9832
9831,9832
9833,9834
9833,9835
9834,9835
9838,9839
9838,9840
9839,9840
9839,9841
9840,9841
9842,9843
9842,9844
9843,9844
9847,9848
9847,9849
9848,9849
9849,9850
9851,9852
9851,9853
9851,9854
9851,9855
9851,9856
9851,9857
9851,9858
9851,9859
9852,9853
9853,9854
9853,9855
9853,9856
9853,9857
9855,9856
9855,9857
9857,9858
9859,9860
9859,9861
9861,9862
9863,9864
9863,9865
9865,9866
9867,9868
9868,9869
9868,9870
9868,9871
9868,9872
9869,9870
9871,9872
9874,9875
9874,9876
9874,9877
9874,9878
9875,9876
9877,9878
9879,9880
9880,9881
9881,9882
9883,9884
9883,9885
9884,9885
9884,9886
9885,9886
9885,9887
9886,9887
9888,9889
9888,9890
9889,9890
9893,9894
9893,9895
9894,9895
9894,9896
9895,9896
9897,9898
9897,9899
9898,9899
9902,9903
9902,9904
9903,9904
9905,9906
9906,9907
9906,9908
9906,9909
9907,9908
9907,9909
9907,9910
9908,9909
9910,9911
9910,9912
9911,9912
9913,9914
9913,9915
9914,9915
9917,9918
9919,9920
9920,9921
9921,9922
9921,9923
9921,9924
9921,9925
9921,9926
9921,9927
9922,9923
9924,9925
9927,9928
9927,9929
9928,9929
9930,9931
9930,9932
9931,9932
9934,9935
9934,9936
9934,9937
9934,9938
9935,9936
9937,9938
9939,9940
9940,9941
9941,9942
9943,9944
9943,9945
9944,9945
9944,9946
9945,9946
9947,9948
9947,9949
9948,9949
9952,9953
9952,9954
9952,9955
9952,9956
9953,9954
9955,9956
9957,9958
9958,9959
9959,9960
9961,9962
9961,9963
9962,9963
9962,9964
9963,9964
9965,9966
9965,9967
9966,9967
9970,9971
9971,9972
9972,9973
9972,9974
9972,9975
9972,9976
9972,9977
9972,9978
9972,9979
9973,9974
9975,9976
9978,9979
9978,9980
9979,9980
9981,9982
9981,9983
9982,9983
9985,9986
9985,9987
9985,9988
9985,9989
9986,9987
9988,9989
9990,9991
9991,9992
9992,9993
9994,9995
9994,9996
9995,9996
9995,9997
9996,9997
9998,9999
9998,10000
9999,10000
10003,10004
10003,10005
10003,10006
10003,10007
10004,10005
10006,10007
10008,10009
10009,10010
10010,10011
10012,10013
10012,10014
10013,10014
10013,10015
10014,10015
10016,10017
10016,10018
10017,10018
10021,10022
10021,10023
10021,10024
10021,10025
10022,10023
10024,10025
10026,10027
10027,10028
10028,10029
10030,10031
10030,10032
10031,10032
10031,10033
10032,10033
10034,10035
10034,10036
10035,10036
10039,10040
10040,10041
10040,10042
10040,10043
10040,10044
10041,10042
10043,10044
10044,10045
10047,10048
10048,10049
10049,10050
10051,10052
10052,10053
10052,10054
10052,10055
10052,10056
10053,10054
10055,10056
10056,10057
10058,10059
10061,10062
10062,10063
10062,10064
10062,10065
10062,10066
10063,10064
10065,10066
10066,10067
10068,10069
10070,10071
10072,10073
10073,10074
10073,10075
10073,10076
10073,10077
10073,10078
10073,10079
10073,10080
10073,10081
10074,10075
10076,10077
10076,10078
10077,10078
10079,10080
10079,10081
10080,10081
10083,10084
10085,10086
10088,10089
10088,10090
10089,10090
10092,10093
10092,10094
10093,10094
10096,10097
10098,10099
10098,10100
10099,10100
10100,10101
10100,10102
10101,10102
10103,10104
10103,10105
10104,10105
10107,10108
10109,10110
10109,10111
10110,10111
10112,10113
10112,10114
10112,10115
10112,10116
10112,10117
10113,10114
10114,10115
10114,10116
10114,10117
10114,10118
10115,10116
10117,10118
10118,10119
10121,10122
10122,10123
10123,10124
10125,10126
10126,10127
10126,10128
10126,10129
10126,10130
10127,10128
10129,10130
10130,10131
10132,10133
10134,10135
10136,10137
10137,10138
10137,10139
10137,10140
10137,10141
10137,10142
10138,10139
10140,10141
10141,10142
10143,10144
10146,10147
10148,10149
10149,10150
10149,10151
10149,10152
10149,10153
10149,10154
10149,10155
10149,10156
10149,10157
10150,10151
10152,10153
10152,10154
10153,10154
10155,10156
10155,10157
10156,10157
10159,10160
10161,10162
10164,10165
10164,10166
10165,10166
10168,10169
10168,10170
10169,10170
10172,10173
10174,10175
10174,10176
10174,10177
10175,10176
10175,10177
10175,10178
10176,10177
10178,10179
10178,10180
10179,10180
10179,10181
10180,10181
10182,10183
10182,10184
10183,10184
10188,10189
10188,10190
10188,10191
10188,10192
10189,10190
10190,10191
10190,10192
10190,10193
10191,10192
10193,10194
10194,10195
10194,10196
10195,10196
10195,10197
10196,10197
10198,10199
10198,10200
10199,10200
10203,10204
10205,10206
10206,10207
10206,10208
10206,10209
10206,10210
10206,10211
10206,10212
10206,10213
10206,10214
10206,10215
10206,10216
10206,10217
10206,10218
10206,10219
10206,10220
10207,10208
10211,10212
10211,10213
10212,10213
10214,10215
10214,10216
10215,10216
10218,10219
10220,10221
10220,10222
10221,10222
10223,10224
10223,10225
10224,10225
10224,10226
10225,10226
10227,10228
10227,10229
10228,10229
10232,10233
10234,10235
10236,10237
10238,10239
10238,10240
10239,10240
10241,10242
10243,10244
10245,10246
10247,10248
10249,10250
10251,10252
10252,10253
10252,10254
10252,10255
10253,10254
10255,10256
10256,10257
10256,10258
10257,10258
10257,10259
10258,10259
10260,10261
10260,10262
10261,10262
10265,10266
10267,10268
10267,10269
10267,10270
10268,10269
10269,10270
10270,10271
10270,10272
10271,10272
10273,10274
10273,10275
10273,10276
10273,10277
10273,10278
10273,10279
10274,10275
10276,10277
10276,10278
10277,10278
10280,10281
10282,10283
10284,10285
10287,10288
10288,10289
10288,10290
10289,10290
10291,10292
10291,10293
10292,10293
10295,10296
10295,10297
10296,10297
10296,10298
10297,10298
10300,10301
10300,10302
10300,10303
10300,10304
10300,10305
10300,10306
10301,10302
10302,10303
10302,10304
10303,10304
10305,10306
10305,10307
10308,10309
10309,10310
10309,10311
10309,10312
10310,10311
10312,10313
10312,10314
10315,10316
10315,10317
10315,10318
10318,10319
10319,10320
10321,10322
10322,10323
10323,10324
10323,10325
10324,10325
10326,10327
10326,10328
10326,10329
10327,10328
10330,10331
10331,10332
10332,10333
10333,10334
10335,10336
10336,10337
10336,10338
10337,10338
10339,10340
10339,10341
10339,10342
10340,10341
10342,10343
10343,10344
10345,10346
10347,10348
10347,10349
10347,10350
10348,10349
10348,10350
10349,10350
10351,10352
10353,10354
10353,10355
10353,10356
10353,10357
10353,10358
10353,10359
10353,10360
10353,10361
10354,10355
10355,10356
10355,10357
10356,10357
10356,10358
10357,10358
10360,10361
10362,10363
10363,10364
10363,10365
10364,10365
10364,10366
10365,10366
10368,10369
10370,10371
10371,10372
10371,10373
10372,10373
10374,10375
10375,10376
10377,10378
10378,10379
10378,10380
10378,10381
10379,10380
10383,10384
10383,10385
10383,10386
10383,10387
10384,10385
10385,10386
10385,10387
10386,10387
10388,10389
10388,10390
10389,10390
10392,10393
10394,10395
10394,10396
10395,10396
10397,10398
10397,10399
10398,10399
10401,10402
10401,10403
10401,10404
10401,10405
10402,10403
10403,10404
10403,10405
10404,10405
10406,10407
10406,10408
10406,10409
10409,10410
10410,10411
10410,10412
10410,10413
10411,10412
10413,10414
10413,10415
10414,10415
10417,10418
10417,10419
10418,10419
10421,10422
10421,10423
10422,10423
10424,10425
10425,10426
10425,10427
10426,10427
10428,10429
10430,10431
10431,10432
10431,10433
10432,10433
10434,10435
10436,10437
10436,10438
10436,10439
10437,10438
10438,10439
10440,10441
10441,10442
10442,10443
10442,10444
10442,10445
10443,10444
10445,10446
10448,10449
10449,10450
10450,10451
10450,10452
10450,10453
10450,10454
10451,10452
10453,10454
10455,10456
10457,10458
10459,10460
10459,10461
10460,10461
10462,10463
10463,10464
10463,10465
10464,10465
10466,10467
10468,10469
10469,10470
10469,10471
10470,10471
10470,10472
10471,10472
10474,10475
10476,10477
10477,10478
10477,10479
10477,10480
10478,10479
10480,10481
10482,10483
10484,10485
10484,10486
10484,10487
10485,10486
10486,10487
10486,10488
10486,10489
10487,10488
10489,10490
10492,10493
10492,10494
10493,10494
10495,10496
10496,10497
10496,10498
10497,10498
10499,10500
10501,10502
10501,10503
10502,10503
10504,10505
10505,10506
10505,10507
10506,10507
10508,10509
10509,10510
10511,10512
10511,10513
10511,10514
10512,10513
10513,10514
10513,10515
10513,10516
10514,10515
10516,10517
10517,10518
10517,10519
10518,10519
10518,10520
10519,10520
10521,10522
10521,10523
10522,10523
10526,10527
10528,10529
10529,10530
10529,10531
10529,10532
10529,10533
10530,10531
10534,10535
10534,10536
10535,10536
10537,10538
10537,10539
10538,10539
10541,10542
10541,10543
10542,10543
10542,10544
10542,10545
10543,10544
10545,10546
10545,10547
10546,10547
10548,10549
10548,10550
10549,10550
10552,10553
10554,10555
10555,10556
10558,10559
10559,10560
10561,10562
10561,10563
10563,10564
10563,10565
10564,10565
10564,10566
10564,10567
10565,10566
10567,10568
10568,10569
10568,10570
10569,10570
10569,10571
10570,10571
10572,10573
10572,10574
10573,10574
10577,10578
10579,10580
10579,10581
10579,10582
10580,10581
10581,10582
10581,10583
10581,10584
10582,10583
10584,10585
10585,10586
10585,10587
10586,10587
10586,10588
10587,10588
10589,10590
10589,10591
10590,10591
10594,10595
10596,10597
10597,10598
10597,10599
10597,10600
10597,10601
10598,10599
10600,10601
10600,10602
10601,10602
10603,10604
10603,10605
10604,10605
10607,10608
10609,10610
10609,10611
10609,10612
10610,10611
10610,10612
10611,10612
10614,10615
10614,10616
10615,10616
10619,10620
10619,10621
10619,10622
10620,10621
10621,10622
10621,10623
10621,10624
10621,10625
10621,10626
10621,10627
10622,10623
10624,10625
10626,10627
10626,10628
10627,10628
10627,10629
10628,10629
10630,10631
10630,10632
10631,10632
10635,10636
10635,10637
10636,10637
10636,10638
10637,10638
10639,10640
10639,10641
10640,10641
10645,10646
10645,10647
10646,10647
10646,10648
10647,10648
10649,10650
10649,10651
10650,10651
10654,10655
10654,10656
10654,10657
10654,10658
10654,10659
10654,10660
10655,10656
10655,10657
10656,10657
10658,10659
10659,10660
10659,10661
10659,10662
10659,10663
10659,10664
10659,10665
10660,10661
10662,10663
10665,10666
10665,10667
10666,10667
10668,10669
10668,10670
10669,10670
10672,10673
10672,10674
10673,10674
10673,10675
10674,10675
10676,10677
10676,10678
10677,10678
10681,10682
10681,10683
10682,10683
10682,10684
10683,10684
10685,10686
10685,10687
10686,10687
10690,10691
10691,10692
10691,10693
10691,10694
10691,10695
10692,10693
10694,10695
10695,10696
10698,10699
10699,10700
10700,10701
10702,10703
10703,10704
10703,10705
10703,10706
10703,10707
10704,10705
10706,10707
10707,10708
10709,10710
10712,10713
10713,10714
10713,10715
10713,10716
10713,10717
10714,10715
10716,10717
10717,10718
10719,10720
10721,10722
10723,10724
10724,10725
10724,10726
10724,10727
10724,10728
10724,10729
10724,10730
10724,10731
10724,10732
10725,10726
10727,10728
10727,10729
10728,10729
10730,10731
10730,10732
10731,10732
10734,10735
10736,10737
10739,10740
10739,10741
10740,10741
10743,10744
10743,10745
10744,10745
10747,10748
10749,10750
10749,10751
10750,10751
10751,10752
10751,10753
10752,10753
10754,10755
10754,10756
10755,10756
10758,10759
10760,10761
10760,10762
10760,10763
10760,10764
10760,10765
10760,10766
10761,10762
10762,10763
10762,10764
10764,10765
10764,10766
10766,10767
10768,10769
10769,10770
10769,10771
10769,10772
10770,10771
10772,10773
10773,10774
10773,10775
10774,10775
10774,10776
10775,10776
10777,10778
10777,10779
10778,10779
10782,10783
10784,10785
10785,10786
10785,10787
10785,10788
10785,10789
10785,10790
10786,10787
10790,10791
10790,10792
10791,10792
10793,10794
10793,10795
10794,10795
10797,10798
10797,10799
10797,10800
10797,10801
10798,10799
10800,10801
10802,10803
10803,10804
10804,10805
10806,10807
10806,10808
10807,10808
10807,10809
10808,10809
10810,10811
10810,10812
10811,10812
10815,10816
10816,10817
10816,10818
10816,10819
10817,10818
10819,10820
10820,10821
10820,10822
10821,10822
10821,10823
10822,10823
10824,10825
10824,10826
10825,10826
10829,10830
10831,10832
10832,10833
10832,10834
10832,10835
10832,10836
10832,10837
10832,10838
10832,10839
10832,10840
10833,10834
10835,10836
10835,10837
10836,10837
10838,10839
10838,10840
10839,10840
10842,10843
10844,10845
10847,10848
10850,10851
10852,10853
10852,10854
10852,10855
10853,10854
10854,10855
10855,10856
10855,10857
10856,10857
10858,10859
10858,10860
10858,10861
10858,10862
10858,10863
10858,10864
10859,10860
10861,10862
10861,10863
10862,10863
10865,10866
10867,10868
10867,10869
10868,10869
10868,10870
10869,10870
10871,10872
10871,10873
10872,10873
10876,10877
10879,10880
10880,10881
10880,10882
10881,10882
10883,10884
10883,10885
10884,10885
10887,10888
10887,10889
10888,10889
10888,10890
10889,10890
10892,10893
10892,10894
10892,10895
10892,10896
10892,10897
10892,10898
10892,10899
10893,10894
10894,10895
10894,10896
10895,10896
10897,10898
10897,10899
10900,10901
10901,10902
10901,10903
10901,10904
10902,10903
10904,10905
10904,10906
10907,10908
10907,10909
10907,10910
10910,10911
10911,10912
10913,10914
10914,10915
10915,10916
10915,10917
10916,10917
10918,10919
10918,10920
10918,10921
10919,10920
10922,10923
10923,10924
10924,10925
10925,10926
10927,10928
10928,10929
10928,10930
10929,10930
10931,10932
10931,10933
10931,10934
10932,10933
10934,10935
10935,10936
10937,10938
10939,10940
10940,10941
10940,10942
10940,10943
10941,10942
10945,10946
10945,10947
10945,10948
10946,10947
10946,10948
10947,10948
10949,10950
10951,10952
10951,10953
10951,10954
10951,10955
10951,10956
10951,10957
10951,10958
10952,10953
10953,10954
10953,10955
10954,10955
10954,10956
10955,10956
10958,10959
10960,10961
10961,10962
10961,10963
10962,10963
10962,10964
10963,10964
10966,10967
10968,10969
10969,10970
10969,10971
10970,10971
10972,10973
10973,10974
10975,10976
10975,10977
10975,10978
10975,10979
10976,10977
10977,10978
10977,10979
10978,10979
10980,10981
10980,10982
10981,10982
10984,10985
10986,10987
10986,10988
10987,10988
10989,10990
10989,10991
10990,10991
10993,10994
10993,10995
10993,10996
10993,10997
10994,10995
10995,10996
10995,10997
10996,10997
10998,10999
10998,11000
10998,11001
11001,11002
11002,11003
11002,11004
11002,11005
11003,11004
11005,11006
11005,11007
11006,11007
11009,11010
11009,11011
11010,11011
11013,11014
11013,11015
11014,11015
11016,11017
11017,11018
11017,11019
11018,11019
11020,11021
11022,11023
11023,11024
11023,11025
11024,11025
11026,11027
11028,11029
11028,11030
11028,11031
11029,11030
11030,11031
11032,11033
11033,11034
11034,11035
11034,11036
11034,11037
11035,11036
11037,11038
11040,11041
11041,11042
11042,11043
11042,11044
11042,11045
11042,11046
11043,11044
11045,11046
11047,11048
11049,11050
11051,11052
11051,11053
11052,11053
11054,11055
11055,11056
11055,11057
11056,11057
11058,11059
11060,11061
11061,11062
11061,11063
11062,11063
11062,11064
11063,11064
11066,11067
11068,11069
11069,11070
11069,11071
11069,11072
11070,11071
11072,11073
11074,11075
11076,11077
11076,11078
11076,11079
11077,11078
11078,11079
11078,11080
11078,11081
11079,11080
11081,11082
11084,11085
11084,11086
11085,11086
11087,11088
11088,11089
11088,11090
11089,11090
11091,11092
11093,11094
11093,11095
11094,11095
11096,11097
11097,11098
11097,11099
11098,11099
11100,11101
11101,11102
11104,11105
11105,11106
11107,11108
11108,11109
11108,11110
11109,11110
11109,11111
11110,11111
11110,11112
11111,11112
11113,11114
11113,11115
11114,11115
11118,11119
11120,11121
11121,11122
11121,11123
11121,11124
11121,11125
11122,11123
11126,11127
11126,11128
11127,11128
11130,11131
11131,11132
11131,11133
11132,11133
11134,11135
11134,11136
11135,11136
11138,11139
11139,11140
11139,11141
11139,11142
11139,11143
11140,11141
11144,11145
11144,11146
11145,11146
11149,11150
11150,11151
11152,11153
11153,11154
11153,11155
11153,11156
11154,11155
11158,11159
11159,11160
11159,11161
11159,11162
11160,11161
11162,11163
11162,11164
11163,11164
11166,11167
11166,11168
11167,11168
11171,11172
11172,11173
11174,11175
11175,11176
11177,11178
11177,11179
11178,11179
11180,11181
11181,11182
11181,11183
11181,11184
11181,11185
11181,11186
11181,11187
11181,11188
11181,11189
11182,11183
11184,11185
11184,11186
11185,11186
11187,11188
11187,11189
11188,11189
11191,11192
11193,11194
11195,11196
11195,11197
11196,11197
11199,11200
11202,11203
11202,11204
11203,11204
11206,11207
11206,11208
11207,11208
11207,11209
11207,11210
11207,11211
11208,11209
11210,11211
11210,11212
11211,11212
11214,11215
11215,11216
11217,11218
11218,11219
11220,11221
11220,11222
11220,11223
11221,11222
11221,11223
11222,11223
11223,11224
11223,11225
11224,11225
11226,11227
11226,11228
11227,11228
11230,11231
11232,11233
11233,11234
11233,11235
11233,11236
11234,11235
11236,11237
11236,11238
11237,11238
11240,11241
11243,11244
11243,11245
11244,11245
11245,11246
11245,11247
11246,11247
11248,11249
11248,11250
11249,11250
11252,11253
11254,11255
11254,11256
11255,11256
11255,11257
11256,11257
11257,11258
11257,11259
11258,11259
11258,11260
11259,11260
11261,11262
11261,11263
11262,11263
11262,11264
11263,11264
11265,11266
11265,11267
11266,11267
11270,11271
11270,11272
11271,11272
11273,11274
11273,11275
11274,11275
11274,11276
11275,11276
11277,11278
11277,11279
11278,11279
11282,11283
11282,11284
11282,11285
11283,11284
11285,11286
11286,11287
11286,11288
11287,11288
11287,11289
11288,11289
11290,11291
11290,11292
11291,11292
11295,11296
11297,11298
11297,11299
11297,11300
11297,11301
11297,11302
11298,11299
11298,11300
11299,11300
11299,11301
11300,11301
11300,11302
11301,11302
11301,11303
11302,11303
11306,11307
11308,11309
11308,11310
11309,11310
11310,11311
11310,11312
11310,11313
11310,11314
11311,11312
11313,11314
11314,11315
11317,11318
11318,11319
11319,11320
11321,11322
11322,11323
11322,11324
11323,11324
11323,11325
11324,11325
11327,11328
11329,11330
11329,11331
11330,11331
11330,11332
11330,11333
11330,11334
11330,11335
11330,11336
11331,11332
11333,11334
11334,11335
11336,11337
11336,11338
11337,11338
11340,11341
11340,11342
11341,11342
11344,11345
11346,11347
11346,11348
11347,11348
11350,11351
11351,11352
11352,11353
11352,11354
11352,11355
11353,11354
11355,11356
11358,11359
11358,11360
11359,11360
11360,11361
11360,11362
11361,11362
11363,11364
11363,11365
11364,11365
11367,11368
11369,11370
11369,11371
11370,11371
11370,11372
11371,11372
11371,11373
11372,11373
11372,11374
11373,11374
11376,11377
11376,11378
11377,11378
11380,11381
11380,11382
11381,11382
11381,11383
11382,11383
11386,11387
11386,11388
11386,11389
11387,11388
11388,11389
11388,11390
11389,11390
11391,11392
11392,11393
11392,11394
11392,11395
11395,11396
11396,11397
11396,11398
11397,11398
11400,11401
11401,11402
11401,11403
11401,11404
11401,11405
11401,11406
11402,11403
11404,11405
11405,11406
11407,11408
11409,11410
11409,11411
11410,11411
11413,11414
11413,11415
11414,11415
11417,11418
11418,11419
11418,11420
11419,11420
11421,11422
11422,11423
11422,11424
11423,11424
11425,11426
11425,11427
11426,11427
11430,11431
11431,11432
11431,11433
11432,11433
11434,11435
11434,11436
11435,11436
11439,11440
11440,11441
11442,11443
11442,11444
11443,11444
11443,11445
11443,11446
11443,11447
11444,11445
11446,11447
11447,11448
11449,11450
11450,11451
11452,11453
11452,11454
11453,11454
11456,11457
11457,11458
11457,11459
11457,11460
11458,11459
11460,11461
11463,11464
11464,11465
11464,11466
11464,11467
11464,11468
11464,11469
11464,11470
11464,11471
11464,11472
11465,11466
11467,11468
11467,11469
11468,11469
11470,11471
11470,11472
11471,11472
11474,11475
11476,11477
11478,11479
11478,11480
11479,11480
11482,11483
11485,11486
11485,11487
11486,11487
11489,11490
11490,11491
11490,11492
11491,11492
11493,11494
11493,11495
11494,11495
11498,11499
11499,11500
11501,11502
11501,11503
11502,11503
11502,11504
11503,11504
11503,11505
11504,11505
11506,11507
11506,11508
11507,11508
11511,11512
11511,11513
11512,11513
11512,11514
11513,11514
11515,11516
11515,11517
11516,11517
11517,11518
11517,11519
11517,11520
11517,11521
11517,11522
11517,11523
11518,11519
11520,11521
11523,11524
11523,11525
11524,11525
11524,11526
11525,11526
11525,11527
11526,11527
11528,11529
11528,11530
11529,11530
11534,11535
11534,11536
11534,11537
11535,11536
11535,11537
11536,11537
11539,11540
11539,11541
11540,11541
11544,11545
11544,11546
11545,11546
11547,11548
11547,11549
11548,11549
11551,11552
11552,11553
11552,11554
11552,11555
11552,11556
11552,11557
11552,11558
11553,11554
11555,11556
11559,11560
11559,11561
11560,11561
11560,11562
11561,11562
11561,11563
11562,11563
11564,11565
11564,11566
11565,11566
11570,11571
11570,11572
11570,11573
11571,11572
11571,11573
11572,11573
11575,11576
11575,11577
11576,11577
11580,11581
11581,11582
11581,11583
11582,11583
11582,11584
11583,11584
11583,11585
11584,11585
11584,11586
11585,11586
11587,11588
11587,11589
11588,11589
11593,11594
11595,11596
11596,11597
11596,11598
11596,11599
11596,11600
11596,11601
11596,11602
11596,11603
11596,11604
11597,11598
11599,11600
11599,11601
11600,11601
11602,11603
11602,11604
11603,11604
11606,11607
11608,11609
11610,11611
11610,11612
11611,11612
11614,11615
11617,11618
11617,11619
11618,11619
11621,11622
11622,11623
11622,11624
11623,11624
11625,11626
11625,11627
11626,11627
11630,11631
11631,11632
11633,11634
11633,11635
11634,11635
11634,11636
11634,11637
11634,11638
11635,11636
11637,11638
11638,11639
11640,11641
11640,11642
11641,11642
11644,11645
11645,11646
11647,11648
11647,11649
11647,11650
11647,11651
11648,11649
11649,11650
11649,11651
11649,11652
11649,11653
11650,11651
11652,11653
11653,11654
11656,11657
11657,11658
11658,11659
11660,11661
11661,11662
11661,11663
11661,11664
11661,11665
11662,11663
11664,11665
11665,11666
11667,11668
11670,11671
11671,11672
11671,11673
11671,11674
11671,11675
11672,11673
11674,11675
11675,11676
11677,11678
11679,11680
11681,11682
11682,11683
11682,11684
11682,11685
11682,11686
11682,11687
11682,11688
11682,11689
11682,11690
11683,11684
11685,11686
11685,11687
11686,11687
11688,11689
11688,11690
11689,11690
11692,11693
11694,11695
11697,11698
11697,11699
11698,11699
11701,11702
11701,11703
11702,11703
11705,11706
11708,11709
11709,11710
11711,11712
11712,11713
11712,11714
11713,11714
11713,11715
11714,11715
11714,11716
11715,11716
11717,11718
11717,11719
11718,11719
11723,11724
11724,11725
11724,11726
11724,11727
11724,11728
11725,11726
11729,11730
11729,11731
11729,11732
11730,11731
11730,11732
11731,11732
11731,11733
11732,11733
11734,11735
11734,11736
11735,11736
11739,11740
11739,11741
11740,11741
11742,11743
11742,11744
11743,11744
11743,11745
11744,11745
11746,11747
11746,11748
11747,11748
11752,11753
11753,11754
11753,11755
11753,11756
11753,11757
11754,11755
11756,11757
11757,11758
11757,11759
11758,11759
11758,11760
11759,11760
11761,11762
11761,11763
11762,11763
11767,11768
11768,11769
11769,11770
11769,11771
11770,11771
11770,11772
11771,11772
11773,11774
11773,11775
11774,11775
11778,11779
11778,11780
11779,11780
11779,11781
11780,11781
11780,11782
11781,11782
11783,11784
11783,11785
11784,11785
11788,11789
11789,11790
11789,11791
11790,11791
11790,11792
11791,11792
11791,11793
11792,11793
11794,11795
11794,11796
11795,11796
11795,11797
11796,11797
11798,11799
11798,11800
11799,11800
11804,11805
11804,11806
11805,11806
11806,11807
11806,11808
11807,11808
11807,11809
11808,11809
11808,11810
11809,11810
11811,11812
11811,11813
11812,11813
11812,11814
11813,11814
11815,11816
11815,11817
11816,11817
11822,11823
11823,11824
11823,11825
11823,11826
11823,11827
11823,11828
11823,11829
11823,11830
11823,11831
11824,11825
11826,11827
11826,11828
11827,11828
11829,11830
11829,11831
11830,11831
11830,11832
11831,11832
11833,11834
11833,11835
11834,11835
11838,11839
11840,11841
11843,11844
11846,11847
11849,11850
11850,11851
11852,11853
11852,11854
11853,11854
11853,11855
11854,11855
11855,11856
11855,11857
11856,11857
11856,11858
11857,11858
11857,11859
11858,11859
11860,11861
11860,11862
11861,11862
11865,11866
11867,11868
11868,11869
11868,11870
11869,11870
11869,11871
11870,11871
11870,11872
11871,11872
11873,11874
11873,11875
11874,11875
11878,11879
11880,11881
11880,11882
11880,11883
11881,11882
11881,11883
11881,11884
11882,11883
11882,11884
11883,11884
11883,11885
11884,11885
11884,11886
11885,11886
11887,11888
11887,11889
11888,11889
11892,11893
11894,11895
11895,11896
11895,11897
11896,11897
11896,11898
11897,11898
11897,11899
11898,11899
11900,11901
11900,11902
11901,11902
11905,11906
11907,11908
11908,11909
11908,11910
11909,11910
11909,11911
11910,11911
11910,11912
11911,11912
11913,11914
11913,11915
11914,11915
11918,11919
11920,11921
11921,11922
11921,11923
11921,11924
11921,11925
11922,11923
11926,11927
11926,11928
11926,11929
11927,11928
11927,11929
11928,11929
11928,11930
11929,11930
11931,11932
11931,11933
11932,11933
11936,11937
11936,11938
11937,11938
11939,11940
11939,11941
11940,11941
11940,11942
11941,11942
11943,11944
11943,11945
11944,11945
11949,11950
11949,11951
11950,11951
11950,11952
11951,11952
11951,11953
11952,11953
11954,11955
11954,11956
11955,11956
11959,11960
11960,11961
11960,11962
11961,11962
11961,11963
11962,11963
11963,11964
11963,11965
11964,11965
11964,11966
11965,11966
11965,11967
11966,11967
11968,11969
11968,11970
11969,11970
11969,11971
11970,11971
11972,11973
11972,11974
11973,11974
11978,11979
11980,11981
11981,11982
11981,11983
11982,11983
11982,11984
11983,11984
11983,11985
11984,11985
11986,11987
11986,11988
11987,11988
11987,11989
11988,11989
11990,11991
11990,11992
11991,11992
11996,11997
11998,11999
11999,12000
11999,12001
11999,12002
12000,12001
12000,12002
12001,12002
12001,12003
12002,12003
12002,12004
12003,12004
12005,12006
12005,12007
12006,12007
12010,12011
12012,12013
12012,12014
12012,12015
12012,12016
12012,12017
12012,12018
12012,12019
12012,12020
12012,12021
12013,12014
12014,12015
12014,12016
12014,12017
12014,12018
12014,12019
12015,12016
12019,12020
12019,12021
12019,12022
12020,12021
12020,12022
12021,12022
12021,12023
12022,12023
12024,12025
12024,12026
12025,12026
12029,12030
12029,12031
12030,12031
12032,12033
12032,12034
12033,12034
12033,12035
12034,12035
12036,12037
12036,12038
12037,12038
12042,12043
12042,12044
12042,12045
12043,12044
12043,12045
12044,12045
12044,12046
12045,12046
12047,12048
12047,12049
12048,12049
12048,12050
12049,12050
12051,12052
12051,12053
12052,12053
12057,12058
12057,12059
12058,12059
12060,12061
12060,12062
12061,12062
12061,12063
12062,12063
12064,12065
12064,12066
12065,12066
12065,12067
12066,12067
12068,12069
12068,12070
12069,12070
12075,12076
12076,12077
12076,12078
12077,12078
12077,12079
12078,12079
12078,12080
12079,12080
12081,12082
12081,12083
12082,12083
12082,12084
12083,12084
12085,12086
12085,12087
12086,12087
12091,12092
12093,12094
12094,12095
12094,12096
12095,12096
12095,12097
12096,12097
12096,12098
12097,12098
12099,12100
12099,12101
12100,12101
12104,12105
12106,12107
12107,12108
12107,12109
12107,12110
12107,12111
12108,12109
12110,12111
12111,12112
12114,12115
12115,12116
12116,12117
12118,12119
12119,12120
12119,12121
12119,12122
12119,12123
12120,12121
12122,12123
12123,12124
12126,12127
12127,12128
12128,12129
12130,12131
12131,12132
12131,12133
12131,12134
12131,12135
12132,12133
12134,12135
12135,12136
12137,12138
12139,12140
12139,12141
12140,12141
12140,12142
12141,12142
12143,12144
12143,12145
12144,12145
12144,12146
12145,12146
12147,12148
12147,12149
12148,12149
12153,12154
12154,12155
12154,12156
12154,12157
12154,12158
12155,12156
12157,12158
12158,12159
12160,12161
12162,12163
12162,12164
12163,12164
12163,12165
12164,12165
12166,12167
12166,12168
12167,12168
12171,12172
12172,12173
12172,12174
12172,12175
12172,12176
12172,12177
12172,12178
12172,12179
12172,12180
12173,12174
12175,12176
12175,12177
12176,12177
12178,12179
12178,12180
12179,12180
12182,12183
12184,12185
12187,12188
12187,12189
12188,12189
12191,12192
12191,12193
12192,12193
12195,12196
12197,12198
12198,12199
12198,12200
12198,12201
12198,12202
12198,12203
12198,12204
12198,12205
12198,12206
12199,12200
12201,12202
12201,12203
12202,12203
12204,12205
12204,12206
12205,12206
12205,12207
12206,12207
12208,12209
12208,12210
12209,12210
12213,12214
12215,12216
12218,12219
12218,12220
12219,12220
12222,12223
12222,12224
12223,12224
12226,12227
12228,12229
12228,12230
12228,12231
12228,12232
12228,12233
12228,12234
12228,12235
12228,12236
12228,12237
12228,12238
12228,12239
12228,12240
12228,12241
12229,12230
12230,12231
12230,12232
12230,12233
12230,12234
12230,12235
12231,12232
12235,12236
12235,12237
12235,12238
12236,12237
12236,12238
12237,12238
12237,12239
12238,12239
12240,12241
12240,12242
12241,12242
12245,12246
12245,12247
12246,12247
12248,12249
12248,12250
12249,12250
12249,12251
12250,12251
12252,12253
12252,12254
12253,12254
12258,12259
12258,12260
12258,12261
12259,12260
12259,12261
12260,12261
12260,12262
12261,12262
12263,12264
12263,12265
12264,12265
12264,12266
12265,12266
12267,12268
12267,12269
12268,12269
12273,12274
12273,12275
12274,12275
12276,12277
12276,12278
12277,12278
12277,12279
12278,12279
12280,12281
12280,12282
12281,12282
12281,12283
12282,12283
12284,12285
12284,12286
12285,12286
12291,12292
12292,12293
12292,12294
12293,12294
12293,12295
12294,12295
12294,12296
12295,12296
12297,12298
12297,12299
12298,12299
12298,12300
12299,12300
12301,12302
12301,12303
12302,12303
12307,12308
12309,12310
12310,12311
12310,12312
12311,12312
12311,12313
12312,12313
12312,12314
12313,12314
12315,12316
12315,12317
12316,12317
12320,12321
12322,12323
12323,12324
12323,12325
12323,12326
12324,12325
12326,12327
12326,12328
12327,12328
12329,12330
12329,12331
12330,12331
12330,12332
12331,12332
12333,12334
12333,12335
12334,12335
12338,12339
12340,12341
12341,12342
12341,12343
12341,12344
12342,12343
12344,12345
12344,12346
12345,12346
12347,12348
12347,12349
12348,12349
12351,12352
12353,12354
12354,12355
12354,12356
12355,12356
12357,12358
12357,12359
12358,12359
12361,12362
12362,12363
12362,12364
12363,12364
12365,12366
12365,12367
12366,12367
12366,12368
12367,12368
12369,12370
12369,12371
12370,12371
12374,12375
12375,12376
12375,12377
12375,12378
12375,12379
12376,12377
12378,12379
12379,12380
12382,12383
12383,12384
12384,12385
12386,12387
12387,12388
12387,12389
12387,12390
12387,12391
12388,12389
12390,12391
12391,12392
12394,12395
12395,12396
12396,12397
12398,12399
12399,12400
12399,12401
12399,12402
12399,12403
12400,12401
12402,12403
12403,12404
12405,12406
12407,12408
12407,12409
12408,12409
12408,12410
12409,12410
12411,12412
12411,12413
12412,12413
12412,12414
12413,12414
12415,12416
12415,12417
12416,12417
12421,12422
12422,12423
12422,12424
12422,12425
12422,12426
12423,12424
12425,12426
12426,12427
12428,12429
12430,12431
12430,12432
12431,12432
12431,12433
12432,12433
12434,12435
12434,12436
12435,12436
12439,12440
12440,12441
12440,12442
12440,12443
12440,12444
12440,12445
12440,12446
12440,12447
12440,12448
12441,12442
12443,12444
12443,12445
12444,12445
12446,12447
12446,12448
12447,12448
12450,12451
12452,12453
12455,12456
12455,12457
12456,12457
12459,12460
12459,12461
12460,12461
12463,12464
12465,12466
12466,12467
12466,12468
12466,12469
12466,12470
12466,12471
12466,12472
12466,12473
12466,12474
12467,12468
12469,12470
12469,12471
12470,12471
12472,12473
12472,12474
12473,12474
12473,12475
12474,12475
12476,12477
12476,12478
12477,12478
12481,12482
12483,12484
12486,12487
12486,12488
12487,12488
12490,12491
12490,12492
12491,12492
12494,12495
12497,12498
12498,12499
12500,12501
12501,12502
12501,12503
12501,12504
12502,12503
12504,12505
12504,12506
12505,12506
12507,12508
12507,12509
12508,12509
12511,12512
12512,12513
12515,12516
12516,12517
12518,12519
12518,12520
12519,12520
12519,12521
12520,12521
12520,12522
12521,12522
12523,12524
12523,12525
12524,12525
12528,12529
12529,12530
12529,12531
12529,12532
12529,12533
12529,12534
12529,12535
12529,12536
12530,12531
12532,12533
12532,12534
12533,12534
12535,12536
12535,12537
12536,12537
12539,12540
12541,12542
12544,12545
12548,12549
12549,12550
12551,12552
12552,12553
12552,12554
12552,12555
12552,12556
12552,12557
12552,12558
12552,12559
12552,12560
12553,12554
12555,12556
12555,12557
12556,12557
12558,12559
12558,12560
12559,12560
12562,12563
12564,12565
12566,12567
12566,12568
12567,12568
12570,12571
12573,12574
12573,12575
12574,12575
12577,12578
12578,12579
12578,12580
12578,12581
12579,12580
12581,12582
12581,12583
12582,12583
12585,12586
12586,12587
12588,12589
12589,12590
12589,12591
12590,12591
12592,12593
12592,12594
12593,12594
12597,12598
12598,12599
12600,12601
12600,12602
12601,12602
12601,12603
12602,12603
12602,12604
12603,12604
12603,12605
12604,12605
12606,12607
12606,12608
12607,12608
12611,12612
12613,12614
12613,12615
12613,12616
12613,12617
12614,12615
12615,12616
12615,12617
12615,12618
12615,12619
12616,12617
12618,12619
12619,12620
12619,12621
12620,12621
12622,12623
12622,12624
12623,12624
12626,12627
12628,12629
12630,12631
12631,12632
12632,12633
12632,12634
12633,12634
12633,12635
12634,12635
12637,12638
12638,12639
12639,12640
12639,12641
12640,12641
12640,12642
12641,12642
12644,12645
12646,12647
12647,12648
12647,12649
12648,12649
12648,12650
12649,12650
12649,12651
12650,12651
12652,12653
12652,12654
12653,12654
12657,12658
12660,12661
12661,12662
12663,12664
12663,12665
12664,12665
12665,12666
12665,12667
12666,12667
12668,12669
12668,12670
12669,12670
12671,12672
12671,12673
12672,12673
12675,12676
12675,12677
12676,12677
12677,12678
12677,12679
12677,12680
12678,12679
12680,12681
12684,12685
12685,12686
12685,12687
12685,12688
12686,12687
12689,12690
12689,12691
12690,12691
12693,12694
12694,12695
12694,12696
12694,12697
12695,12696
12697,12698
12697,12699
12698,12699
12698,12700
12700,12701
12702,12703
12702,12704
12703,12704
12706,12707
12707,12708
12707,12709
12708,12709
12708,12710
12709,12710
12711,12712
12711,12713
12712,12713
12717,12718
12718,12719
12720,12721
12721,12722
12721,12723
12721,12724
12722,12723
12724,12725
12724,12726
12725,12726
12727,12728
12727,12729
12728,12729
12731,12732
12732,12733
12735,12736
12736,12737
12738,12739
12739,12740
12739,12741
12739,12742
12739,12743
12740,12741
12742,12743
12745,12746
12745,12747
12746,12747
12750,12751
12751,12752
12753,12754
12753,12755
12754,12755
12755,12756
12755,12757
12755,12758
12756,12757
12758,12759
12759,12760
12761,12762
12763,12764
12763,12765
12764,12765
12765,12766
12765,12767
12765,12768
12765,12769
12765,12770
12765,12771
12765,12772
12765,12773
12766,12767
12768,12769
12768,12770
12769,12770
12771,12772
12771,12773
12772,12773
12775,12776
12777,12778
12780,12781
12783,12784
12786,12787
12787,12788
12787,12789
12787,12790
12787,12791
12788,12789
12790,12791
12791,12792
12794,12795
12795,12796
12796,12797
12798,12799
12799,12800
12799,12801
12800,12801
12802,12803
12802,12804
12802,12805
12802,12806
12803,12804
12805,12806
12806,12807
12808,12809
12808,12810
12809,12810
12809,12811
12811,12812
12813,12814
12813,12815
12814,12815
12817,12818
12817,12819
12818,12819
12821,12822
12821,12823
12821,12824
12822,12823
12822,12824
12823,12824
12826,12827
12827,12828
12827,12829
12827,12830
12827,12831
12827,12832
12827,12833
12827,12834
12827,12835
12828,12829
12830,12831
12830,12832
12831,12832
12833,12834
12833,12835
12834,12835
12837,12838
12839,12840
12842,12843
12842,12844
12843,12844
12846,12847
12846,12848
12847,12848
12850,12851
12852,12853
12852,12854
12852,12855
12853,12854
12853,12855
12854,12855
12857,12858
12858,12859
12858,12860
12858,12861
12858,12862
12858,12863
12858,12864
12858,12865
12858,12866
12859,12860
12861,12862
12861,12863
12862,12863
12864,12865
12864,12866
12865,12866
12868,12869
12870,12871
12873,12874
12873,12875
12874,12875
12877,12878
12877,12879
12878,12879
12881,12882
12883,12884
12884,12885
12884,12886
12884,12887
12884,12888
12884,12889
12884,12890
12884,12891
12884,12892
12885,12886
12887,12888
12887,12889
12888,12889
12890,12891
12890,12892
12891,12892
12894,12895
12896,12897
12899,12900
12899,12901
12900,12901
12903,12904
12903,12905
12904,12905
12907,12908
12910,12911
12911,12912
12913,12914
12913,12915
12913,12916
12914,12915
12915,12916
12915,12917
12916,12917
12918,12919
12918,12920
12921,12922
12921,12923
12922,12923
12922,12924
12923,12924
12923,12925
12924,12925
12925,12926
12925,12927
12926,12927
12928,12929
12928,12930
12929,12930
12931,12932
12932,12933
12932,12934
12933,12934
12935,12936
12935,12937
12936,12937
12939,12940
12939,12941
12940,12941
12943,12944
12943,12945
12944,12945
12947,12948
12948,12949
12949,12950
12949,12951
12949,12952
12949,12953
12950,12951
12952,12953
12952,12954
12953,12954
12956,12957
12958,12959
12958,12960
12959,12960
12959,12961
12961,12962
12963,12964
12963,12965
12964,12965
12969,12970
12970,12971
12970,12972
12970,12973
12970,12974
12970,12975
12970,12976
12971,12972
12975,12976
12975,12977
12976,12977
12976,12978
12977,12978
12981,12982
12981,12983
12982,12983
12985,12986
12985,12987
12986,12987
12986,12988
12987,12988
12989,12990
12989,12991
12990,12991
12994,12995
12995,12996
12995,12997
12995,12998
12995,12999
12996,12997
12998,12999
12999,13000
13002,13003
13003,13004
13004,13005
13006,13007
13007,13008
13007,13009
13007,13010
13007,13011
13008,13009
13010,13011
13011,13012
13013,13014
13015,13016
13015,13017
13016,13017
13016,13018
13017,13018
13021,13022
13022,13023
13022,13024
13022,13025
13022,13026
13022,13027
13022,13028
13022,13029
13022,13030
13023,13024
13025,13026
13025,13027
13026,13027
13028,13029
13028,13030
13029,13030
13032,13033
13034,13035
13037,13038
13037,13039
13038,13039
13041,13042
13041,13043
13042,13043
13045,13046
13047,13048
13047,13049
13048,13049
13048,13050
13049,13050
13052,13053
13052,13054
13052,13055
13053,13054
13054,13055
13054,13056
13055,13056
13057,13058
13057,13059
13058,13059
13061,13062
13062,13063
13062,13064
13062,13065
13063,13064
13067,13068
13068,13069
13068,13070
13069,13070
13069,13071
13070,13071
13073,13074
13075,13076
13075,13077
13076,13077
13076,13078
13077,13078
13077,13079
13078,13079
13078,13080
13079,13080
13079,13081
13080,13081
13081,13082
13081,13083
13082,13083
13082,13084
13083,13084
13083,13085
13084,13085
13088,13089
13090,13091
13091,13092
13091,13093
13092,13093
13092,13094
13093,13094
13093,13095
13094,13095
13098,13099
13100,13101
13101,13102
13101,13103
13102,13103
13102,13104
13103,13104
13103,13105
13104,13105
13108,13109
13110,13111
13111,13112
13111,13113
13112,13113
13112,13114
13113,13114
13113,13115
13114,13115
13118,13119
13120,13121
13121,13122
13121,13123
13122,13123
13122,13124
13123,13124
13123,13125
13124,13125
13128,13129
13130,13131
13131,13132
13131,13133
13132,13133
13132,13134
13133,13134
13133,13135
13134,13135
13136,13137
13136,13138
13137,13138
13140,13141
13140,13142
13141,13142
13141,13143
13142,13143
13142,13144
13143,13144
13145,13146
13145,13147
13146,13147
13150,13151
13150,13152
13151,13152
13151,13153
13152,13153
13154,13155
13154,13156
13155,13156
13159,13160
13160,13161
13160,13162
13160,13163
13160,13164
13160,13165
13160,13166
13160,13167
13160,13168
13161,13162
13163,13164
13163,13165
13164,13165
13166,13167
13166,13168
13167,13168
13170,13171
13172,13173
13174,13175
13174,13176
13175,13176
13178,13179
13181,13182
13181,13183
13182,13183
13185,13186
13186,13187
13186,13188
13187,13188
13189,13190
13190,13191
13190,13192
13190,13193
13193,13194
13194,13195
13194,13196
13195,13196
13198,13199
13200,13201
13200,13202
13201,13202
13201,13203
13202,13203
13202,13204
13203,13204
13205,13206
13205,13207
13206,13207
13209,13210
13209,13211
13210,13211
13210,13212
13211,13212
13211,13213
13212,13213
13214,13215
13214,13216
13215,13216
13219,13220
13219,13221
13220,13221
13220,13222
13221,13222
13223,13224
13223,13225
13224,13225
13228,13229
13229,13230
13229,13231
13229,13232
13229,13233
13229,13234
13229,13235
13229,13236
13229,13237
13230,13231
13232,13233
13232,13234
13233,13234
13235,13236
13235,13237
13236,13237
13239,13240
13241,13242
13243,13244
13243,13245
13244,13245
13247,13248
13250,13251
13250,13252
13251,13252
-----nextToken-----
2,4,7,9,10,15,17,20,22,25,27,29,33,35,37,40,42,44,48,50,51,56,58,61,62,66,68,69,74,76,79,80,84,86,87,92,94,97,98,102,104,105,110,112,115,116,120,122,123,127,129,130,134,136,139,143,145,146,149,153,155,156,160,162,163,167,169,173,175,177,181,183,186,188,191,193,196,198,200,203,205,207,209,213,215,216,219,221,223,226,228,230,234,236,239,241,242,244,248,251,257,258,262,264,265,270,275,276,277,281,284,285,289,292,293,297,300,304,305,309,313,318,323,325,326,328,331,332,337,339,346,347,348,353,356,357,358,363,368,373,375,376,379,382,383,386,389,390,392,397,398,405,406,407,413,416,417,418,422,424,426,429,431,433,438,441,442,444,449,454,459,461,462,465,468,469,472,475,476,478,482,486,489,490,493,499,500,505,506,509,513,516,517,520,522,525,527,529,530,535,538,539,543,544,549,552,553,556,559,562,563,565,570,573,574,576,579,582,587,589,590,594,598,601,602,604,608,609,613,617,620,621,626,627,630,631,636,637,639,644,649,650,651,655,659,660,662,669,670,671,672,677,682,683,684,689,690,692,697,702,703,704,707,710,711,718,719,720,723,726,727,733,734,736,741,742,743,745,750,751,754,757,758,761,763,766,769,770,774,775,776,778,780,782,789,790,792,797,798,799,801,804,805,808,813,814,817,822,826,827,833,834,836,841,844,848,849,853,854,857,858,863,865,866,869,872,873,877,880,881,883,889,890,891,893,898,899,900,907,908,909,913,914,918,919,923,926,927,931,937,938,940,946,947,948,950,956,957,958,960,964,967,968,972,977,980,983,984,988,989,990,991,996,998,1001,1004,1006,1011,1014,1015,1017,1022,1023,1026,1027,1037,1038,1040,1046,1047,1048,1049,1053,1056,1057,1061,1066,1067,1071,1073,1075,1082,1085,1086,1088,1095,1096,1098,1104,1105,1106,1108,1113,1114,1123,1124,1126,1131,1132,1133,1135,1140,1141,1144,1147,1148,1151,1153,1156,1159,1160,1164,1165,1166,1168,1170,1176,1177,1179,1186,1187,1188,1190,1195,1196,1197,1199,1204,1205,1208,1211,1212,1215,1217,1220,1223,1224,1228,1229,1230,1232,1234,1238,1241,1242,1244,1249,1250,1251,1256,1258,1259,1263,1266,1267,1271,1272,1277,1280,1281,1286,1289,1292,1293,1298,1300,1304,1306,1312,1313,1317,1320,1321,1327,1330,1331,1333,1346,1347,1348,1350,1356,1357,1358,1360,1366,1367,1368,1370,1376,1377,1378,1380,1385,1386,1388,1392,1395,1399,1402,1403,1406,1410,1413,1414,1417,1419,1424,1425,1426,1430,1433,1434,1438,1439,1443,1446,1447,1449,1454,1457,1460,1461,1463,1466,1471,1474,1475,1477,1480,1483,1488,1490,1491,1495,1498,1499,1503,1506,1507,1511,1512,1514,1518,1519,1526,1529,1530,1531,1535,1536,1538,1546,1547,1549,1553,1554,1556,1560,1561,1563,1567,1568,1570,1575,1577,1578,1581,1583,1589,1592,1594,1596,1598,1602,1605,1606,1608,1612,1616,1617,1621,1622,1627,1628,1629,1634,1639,1640,1641,1646,1650,1653,1655,1659,1662,1664,1668,1671,1672,1675,1679,1682,1683,1684,1686,1691,1692,1695,1696,1700,1703,1704,1708,1713,1714,1715,1717,1720,1721,1725,1728,1729,1734,1737,1738,1742,1745,1746,1747,1752,1756,1759,1760,1761,1763,1765,1767,1771,1775,1778,1779,1780,1782,1784,1788,1792,1795,1796,1797,1802,1805,1806,1811,1814,1815,1819,1822,1823,1827,1828,1830,1836,1839,1840,1841,1849,1852,1857,1860,1861,1862,1865,1870,1871,1872,1874,1879,1880,1881,1883,1887,1889,1893,1896,1897,1902,1905,1906,1909,1913,1916,1920,1923,1924,1925,1931,1934,1935,1936,1941,1944,1948,1949,1955,1958,1959,1960,1962,1966,1969,1973,1974,1979,1982,1983,1985,1989,1993,1994,1995,1998,1999,2002,2003,2007,2008,2009,2014,2015,2018,2019,2024,2025,2028,2029,2034,2035,2038,2041,2042,2049,2052,2053,2055,2060,2061,2063,2067,2068,2076,2079,2080,2081,2084,2085,2092,2095,2096,2097,2108,2109,2110,2112,2118,2119,2120,2122,2128,2129,2130,2132,2138,2139,2140,2142,2148,2149,2150,2152,2157,2158,2160,2177,2178,2179,2181,2187,2188,2189,2191,2197,2198,2199,2201,2207,2208,2209,2211,2217,2218,2219,2221,2227,2228,2229,2231,2237,2238,2239,2241,2247,2248,2249,2251,2256,2257,2259,2264,2265,2266,2270,2273,2274,2275,2278,2279,2282,2283,2287,2288,2289,2294,2295,2301,2304,2305,2306,2309,2310,2311,2319,2320,2322,2330,2331,2332,2334,2340,2341,2342,2344,2349,2350,2351,2355,2358,2361,2362,2364,2366,2369,2370,2372,2373,2376,2377,2382,2385,2386,2390,2393,2394,2398,2401,2402,2406,2407,2409,2423,2424,2425,2427,2433,2434,2435,2437,2443,2444,2445,2447,2453,2454,2455,2457,2463,2464,2465,2467,2472,2473,2475,2481,2484,2485,2486,2492,2493,2495,2500,2501,2504,2505,2506,2511,2514,2515,2521,2522,2525,2526,2532,2533,2536,2537,2538,2544,2547,2552,2555,2556,2557,2565,2566,2567,2569,2574,2575,2577,2581,2583,2586,2588,2595,2598,2599,2600,2604,2607,2608,2609,2615,2616,2620,2623,2624,2625,2629,2630,2634,2637,2638,2639,2643,2646,2647,2651,2655,2658,2659,2660,2666,2670,2673,2674,2675,2681,2684,2685,2686,2689,2690,2696,2700,2703,2704,2705,2708,2711,2712,2715,2719,2723,2724,2725,2727,2731,2732,2736,2740,2743,2744,2746,2748,2754,2757,2758,2764,2765,2767,2771,2772,2776,2779,2780,2783,2787,2791,2792,2793,2795,2799,2802,2803,2806,2810,2812,2816,2820,2822,2826,2829,2830,2836,2839,2840,2841,2844,2845,2850,2853,2854,2858,2861,2862,2866,2867,2869,2874,2875,2876,2879,2880,2884,2887,2888,2889,2893,2896,2897,2898,2903,2906,2911,2914,2915,2916,2923,2924,2926,2934,2935,2936,2938,2944,2945,2946,2948,2953,2956,2957,2961,2964,2965,2969,2970,2972,2980,2981,2983,2988,2989,2991,2996,2997,2999,3004,3007,3010,3011,3013,3018,3021,3024,3025,3027,3032,3035,3036,3038,3042,3045,3046,3047,3049,3052,3057,3060,3061,3062,3064,3069,3072,3073,3077,3080,3081,3085,3086,3088,3092,3093,3098,3100,3101,3104,3108,3110,3111,3113,3114,3117,3122,3125,3126,3131,3134,3135,3140,3143,3144,3148,3151,3152,3156,3157,3159,3164,3168,3171,3172,3173,3178,3181,3182,3187,3191,3194,3197,3199,3203,3205,3211,3212,3214,3219,3220,3222,3226,3229,3233,3234,3235,3240,3243,3244,3246,3249,3252,3253,3258,3260,3261,3265,3268,3269,3272,3273,3276,3281,3283,3287,3289,3293,3298,3300,3301,3306,3308,3310,3312,3315,3320,3322,3327,3328,3330,3334,3336,3338,3343,3345,3346,3349,3354,3356,3359,3364,3367,3371,3373,3378,3379,3380,3385,3388,3389,3392,3395,3396,3399,3402,3403,3404,3407,3413,3414,3418,3421,3422,3423,3429,3432,3433,3434,3437,3438,3443,3444,3446,3450,3451,3456,3457,3458,3466,3467,3469,3475,3476,3477,3479,3483,3486,3487,3488,3493,3496,3500,3501,3506,3507,3509,3515,3520,3521,3522,3526,3529,3530,3531,3538,3541,3542,3543,3546,3551,3552,3553,3557,3558,3559,3562,3567,3568,3569,3574,3577,3578,3579,3584,3587,3588,3592,3595,3596,3602,3605,3606,3607,3612,3614,3615,3619,3622,3626,3629,3630,3631,3635,3637,3638,3642,3646,3649,3650,3651,3654,3659,3661,3666,3667,3668,3673,3677,3680,3681,3682,3683,3688,3692,3695,3696,3697,3700,3704,3707,3708,3709,3713,3715,3717,3721,3725,3728,3729,3730,3734,3737,3739,3744,3745,3746,3750,3751,3756,3759,3760,3764,3765,3766,3771,3772,3774,3778,3781,3782,3786,3787,3789,3794,3795,3797,3805,3806,3807,3808,3811,3815,3818,3819,3820,3825,3826,3827,3830,3835,3836,3837,3843,3846,3847,3848,3851,3856,3857,3858,3864,3865,3867,3871,3874,3875,3876,3883,3884,3885,3887,3892,3896,3899,3900,3901,3903,3909,3910,3911,3913,3918,3922,3925,3926,3927,3929,3934,3935,3937,3942,3944,3948,3951,3952,3953,3956,3960,3961,3962,3966,3967,3968,3977,3980,3981,3982,3985,3986,3991,3992,3993,3995,4000,4001,4002,4004,4009,4010,4011,4013,4020,4023,4024,4025,4028,4029,4032,4036,4037,4038,4041,4042,4045,4046,4052,4055,4056,4057,4061,4062,4063,4069,4072,4073,4074,4081,4084,4085,4086,4090,4091,4092,4097,4098,4099,4103,4104,4107,4111,4116,4119,4120,4121,4123,4129,4132,4133,4134,4139,4143,4146,4147,4148,4150,4151,4152,4155,4159,4162,4163,4164,4167,4171,4174,4175,4176,4180,4183,4186,4187,4189,4193,4194,4199,4202,4203,4209,4212,4213,4218,4221,4222,4223,4225,4229,4233,4236,4237,4238,4242,4244,4245,4250,4253,4254,4255,4259,4262,4263,4265,4268,4270,4272,4277,4279,4283,4285,4286,4287,4291,4295,4298,4299,4300,4301,4304,4308,4313,4316,4317,4318,4320,4325,4328,4329,4334,4337,4338,4340,4346,4349,4350,4351,4354,4357,4360,4361,4363,4368,4372,4375,4376,4377,4379,4380,4381,4384,4388,4391,4392,4393,4396,4400,4403,4404,4405,4409,4412,4415,4416,4418,4424,4427,4428,4429,4431,4435,4439,4442,4443,4444,4449,4452,4453,4455,4457,4458,4462,4466,4469,4470,4471,4472,4475,4481,4484,4485,4486,4488,4493,4497,4500,4501,4503,4505,4511,4512,4518,4519,4521,4525,4528,4529,4533,4537,4540,4542,4546,4549,4550,4551,4555,4558,4561,4562,4564,4566,4567,4570,4571,4574,4575,4577,4583,4586,4587,4588,4590,4591,4594,4598,4603,4606,4607,4608,4611,4613,4614,4620,4621,4624,4625,4629,4630,4631,4636,4639,4640,4644,4645,4649,4652,4654,4657,4658,4661,4662,4666,4670,4673,4674,4679,4682,4683,4685,4689,4692,4695,4696,4698,4702,4704,4710,4713,4716,4717,4718,4720,4725,4726,4728,4731,4735,4738,4741,4742,4744,4746,4749,4750,4752,4753,4756,4757,4761,4764,4765,4768,4771,4776,4779,4780,4782,4785,4789,4791,4792,4795,4798,4799,4803,4806,4807,4808,4812,4815,4816,4817,4818,4823,4827,4830,4831,4832,4835,4838,4841,4842,4844,4849,4852,4853,4855,4859,4861,4862,4863,4867,4871,4874,4875,4876,4877,4881,4883,4884,4886,4887,4889,4890,4894,4897,4901,4904,4905,4906,4910,4913,4917,4920,4921,4922,4926,4929,4933,4936,4937,4938,4942,4945,4946,4950,4951,4955,4958,4960,4962,4964,4965,4967,4971,4975,4978,4979,4984,4987,4988,4990,4994,4995,4999,5001,5004,5009,5013,5016,5017,5018,5021,5025,5028,5029,5030,5036,5040,5043,5044,5045,5046,5049,5054,5057,5058,5062,5066,5069,5071,5072,5076,5079,5081,5083,5087,5090,5093,5094,5096,5098,5099,5102,5103,5106,5107,5109,5114,5117,5118,5120,5123,5127,5129,5130,5133,5136,5137,5141,5144,5145,5146,5150,5153,5154,5155,5160,5163,5166,5167,5169,5174,5177,5180,5181,5183,5188,5189,5194,5195,5199,5204,5207,5208,5209,5213,5216,5217,5218,5222,5225,5226,5230,5234,5236,5237,5241,5243,5244,5249,5251,5255,5256,5260,5261,5265,5270,5273,5274,5275,5278,5279,5280,5281,5285,5290,5293,5294,5295,5296,5299,5304,5307,5310,5311,5313,5318,5322,5325,5326,5327,5331,5332,5337,5341,5344,5345,5346,5350,5354,5357,5358,5359,5363,5366,5369,5374,5377,5378,5379,5383,5386,5387,5388,5389,5393,5398,5401,5402,5403,5405,5410,5411,5415,5420,5423,5424,5425,5427,5432,5433,5437,5443,5446,5449,5450,5452,5456,5461,5464,5465,5466,5470,5473,5474,5475,5479,5484,5487,5488,5492,5496,5499,5501,5502,5506,5509,5511,5513,5517,5520,5523,5524,5526,5528,5529,5532,5533,5536,5537,5539,5544,5547,5548,5550,5553,5557,5559,5561,5563,5565,5567,5569,5573,5576,5579,5580,5582,5587,5589,5590,5593,5596,5597,5600,5602,5606,5610,5613,5614,5615,5618,5620,5624,5628,5631,5632,5633,5638,5640,5641,5644,5647,5648,5651,5653,5657,5661,5664,5665,5666,5669,5671,5675,5679,5682,5683,5684,5687,5689,5693,5697,5700,5701,5702,5707,5710,5713,5714,5716,5725,5728,5729,5730,5734,5737,5738,5739,5743,5744,5749,5752,5755,5756,5758,5763,5767,5770,5773,5774,5776,5777,5778,5782,5785,5786,5790,5794,5797,5802,5805,5806,5807,5811,5814,5815,5816,5820,5822,5823,5827,5829,5830,5835,5837,5841,5842,5846,5851,5854,5855,5856,5857,5860,5865,5868,5871,5872,5874,5879,5883,5886,5887,5888,5893,5897,5900,5901,5902,5906,5907,5911,5914,5917,5922,5925,5926,5927,5931,5934,5935,5936,5937,5941,5944,5949,5952,5953,5954,5958,5961,5962,5963,5967,5971,5973,5975,5977,5979,5981,5983,5987,5990,5991,5995,5999,6002,6004,6005,6009,6012,6014,6016,6020,6022,6023,6026,6028,6032,6037,6040,6041,6042,6046,6049,6050,6051,6055,6058,6061,6062,6064,6066,6067,6070,6071,6074,6075,6077,6082,6085,6086,6088,6091,6096,6098,6099,6102,6105,6106,6109,6111,6115,6119,6122,6123,6124,6127,6129,6133,6137,6140,6141,6142,6145,6147,6151,6155,6158,6159,6160,6164,6167,6170,6171,6173,6174,6177,6182,6185,6186,6190,6194,6197,6199,6201,6205,6208,6210,6211,6213,6217,6220,6223,6224,6226,6228,6229,6232,6233,6236,6237,6239,6243,6247,6250,6251,6252,6253,6258,6263,6266,6267,6268,6270,6274,6275,6276,6279,6282,6283,6285,6288,6292,6295,6296,6297,6299,6301,6303,6306,6308,6310,6312,6314,6316,6322,6325,6326,6327,6329,6333,6336,6337,6341,6344,6347,6348,6350,6355,6360,6363,6364,6365,6367,6371,6372,6373,6376,6379,6380,6381,6387,6390,6391,6392,6394,6398,6401,6404,6405,6408,6409,6415,6418,6419,6420,6421,6427,6430,6431,6434,6437,6438,6442,6447,6450,6451,6452,6454,6455,6458,6464,6469,6472,6473,6474,6476,6480,6485,6488,6489,6490,6492,6495,6496,6500,6505,6508,6509,6513,6516,6517,6518,6521,6522,6526,6529,6530,6531,6536,6539,6540,6544,6547,6548,6549,6552,6553,6557,6560,6561,6562,6563,6564,6567,6571,6574,6577,6578,6580,6584,6585,6586,6589,6590,6595,6598,6599,6600,6605,6608,6609,6612,6613,6618,6621,6622,6624,6628,6631,6634,6635,6637,6639,6642,6643,6645,6646,6649,6650,6654,6657,6658,6659,6662,6667,6670,6671,6672,6677,6680,6681,6684,6685,6690,6693,6694,6696,6701,6704,6707,6708,6710,6717,6720,6721,6722,6724,6728,6730,6731,6734,6739,6742,6743,6744,6745,6749,6750,6753,6754,6755,6759,6760,6761,6764,6765,6769,6772,6775,6776,6778,6780,6783,6784,6786,6787,6790,6791,6796,6799,6802,6803,6805,6811,6814,6815,6816,6818,6822,6825,6826,6827,6830,6835,6837,6838,6842,6844,6845,6849,6852,6853,6858,6861,6862,6864,6868,6872,6875,6876,6877,6881,6884,6887,6889,6891,6895,6898,6899,6903,6905,6906,6910,6913,6917,6920,6921,6922,6926,6928,6932,6934,6938,6940,6944,6947,6948,6952,6953,6957,6959,6960,6963,6965,6969,6971,6972,6975,6977,6981,6984,6985,6987,6989,6994,6995,6996,6999,7001,7005,7007,7009,7012,7013,7015,7020,7022,7023,7026,7028,7033,7035,7037,7040,7041,7042,7047,7049,7050,7053,7055,7058,7059,7061,7066,7067,7068,7071,7073,7076,7077,7079,7083,7085,7089,7091,7095,7099,7102,7103,7108,7109,7110,7113,7114,7117,7122,7124,7125,7128,7132,7137,7140,7141,7142,7146,7148,7150,7151,7155,7158,7161,7162,7164,7169,7172,7175,7176,7178,7180,7183,7184,7186,7187,7190,7191,7195,7198,7199,7200,7204,7205,7212,7215,7216,7217,7220,7221,7227,7230,7231,7232,7238,7241,7242,7243,7246,7249,7253,7256,7257,7258,7264,7267,7268,7269,7273,7276,7277,7278,7282,7283,7284,7287,7292,7295,7296,7297,7298,7301,7305,7308,7309,7310,7318,7321,7322,7323,7327,7330,7331,7332,7337,7340,7341,7345,7349,7352,7354,7355,7359,7362,7364,7366,7370,7373,7376,7377,7379,7381,7382,7385,7386,7389,7390,7392,7397,7400,7401,7403,7406,7410,7412,7414,7416,7418,7422,7424,7425,7428,7431,7432,7435,7437,7441,7445,7448,7449,7450,7453,7455,7459,7463,7466,7467,7468,7473,7478,7481,7482,7483,7485,7489,7492,7493,7498,7501,7502,7506,7509,7510,7511,7515,7517,7519,7523,7526,7530,7533,7534,7535,7539,7542,7543,7544,7548,7549,7550,7553,7555,7559,7562,7566,7569,7570,7571,7576,7580,7583,7584,7585,7586,7590,7594,7597,7598,7599,7602,7606,7609,7610,7611,7616,7620,7623,7624,7625,7626,7630,7634,7637,7638,7639,7642,7646,7649,7650,7651,7655,7659,7662,7663,7664,7668,7671,7672,7677,7680,7681,7685,7690,7693,7694,7695,7697,7699,7707,7708,7710,7714,7716,7719,7720,7724,7727,7728,7731,7735,7738,7741,7742,7744,7746,7749,7750,7752,7753,7755,7756,7759,7764,7766,7770,7773,7776,7777,7780,7784,7787,7790,7791,7793,7795,7798,7799,7802,7803,7806,7807,7809,7810,7813,7819,7822,7823,7824,7828,7831,7834,7835,7836,7839,7842,7843,7847,7849,7852,7856,7859,7860,7865,7868,7869,7870,7875,7879,7882,7883,7884,7891,7892,7893,7898,7899,7902,7903,7910,7913,7914,7915,7918,7919,7924,7926,7927,7930,7931,7935,7938,7939,7940,7944,7946,7947,7948,7951,7952,7956,7959,7960,7961,7965,7967,7969,7970,7973,7974,7981,7982,7983,7988,7989,7992,7993,8000,8003,8004,8005,8008,8009,8014,8016,8017,8020,8021,8025,8028,8029,8030,8034,8036,8037,8038,8041,8042,8046,8049,8050,8051,8055,8057,8059,8060,8063,8064,8069,8070,8074,8077,8078,8079,8084,8085,8090,8091,8093,8098,8099,8106,8109,8110,8111,8114,8115,8116,8121,8122,8126,8127,8128,8133,8134,8138,8141,8142,8143,8148,8149,8153,8156,8157,8158,8163,8164,8166,8172,8174,8177,8178,8183,8185,8190,8191,8193,8200,8201,8202,8207,8208,8211,8212,8217,8218,8221,8223,8226,8227,8229,8232,8234,8239,8240,8243,8245,8248,8249,8251,8254,8256,8261,8262,8264,8268,8270,8274,8277,8280,8281,8283,8285,8288,8289,8291,8292,8295,8296,8300,8303,8304,8309,8310,8311,8315,8316,8317,8320,8321,8324,8325,8328,8329,8332,8333,8334,8337,8340,8345,8346,8347,8352,8353,8354,8359,8360,8361,8366,8367,8368,8372,8374,8377,8383,8384,8385,8387,8395,8396,8397,8398,8400,8404,8407,8410,8411,8415,8416,8419,8420,8422,8423,8424,8425,8429,8431,8435,8438,8441,8444,8445,8446,8450,8451,8457,8460,8461,8462,8465,8468,8469,8472,8476,8477,8478,8481,8486,8489,8490,8491,8492,8496,8499,8500,8501,8502,8505,8509,8514,8517,8518,8519,8522,8524,8529,8531,8532,8537,8540,8541,8542,8545,8549,8552,8553,8554,8555,8556,8560,8563,8566,8567,8572,8575,8576,8577,8580,8584,8587,8588,8589,8593,8596,8597,8598,8601,8605,8607,8608,8612,8613,8616,8617,8618,8621,8626,8629,8630,8631,8632,8636,8639,8640,8643,8644,8647,8650,8654,8657,8660,8661,8663,8665,8668,8669,8671,8672,8675,8676,8680,8685,8688,8689,8690,8693,8695,8700,8702,8703,8708,8711,8712,8713,8716,8720,8723,8724,8725,8726,8727,8731,8734,8737,8738,8741,8745,8749,8751,8752,8755,8760,8763,8764,8765,8766,8770,8773,8774,8775,8779,8782,8783,8787,8791,8794,8795,8797,8798,8802,8806,8809,8810,8811,8812,8817,8820,8822,8826,8829,8830,8831,8835,8838,8839,8840,8841,8845,8848,8849,8850,8854,8855,8860,8864,8867,8868,8869,8870,8873,8877,8881,8883,8884,8887,8890,8891,8895,8898,8899,8900,8904,8907,8908,8909,8913,8916,8917,8921,8925,8928,8930,8931,8935,8938,8940,8942,8946,8949,8952,8953,8955,8957,8958,8961,8962,8965,8966,8968,8973,8976,8977,8979,8984,8987,8990,8991,8993,8998,9001,9004,9005,9007,9012,9013,9018,9019,9023,9028,9031,9032,9033,9037,9040,9041,9042,9046,9049,9050,9054,9058,9060,9061,9065,9067,9068,9073,9075,9079,9080,9084,9085,9089,9094,9097,9098,9099,9102,9103,9104,9105,9109,9114,9117,9118,9119,9120,9123,9128,9131,9134,9135,9137,9142,9146,9149,9150,9151,9155,9156,9161,9165,9168,9169,9170,9174,9178,9181,9182,9183,9187,9190,9193,9198,9201,9202,9203,9207,9210,9211,9212,9213,9217,9222,9225,9226,9227,9229,9234,9235,9239,9244,9247,9248,9249,9251,9256,9257,9261,9265,9267,9269,9271,9273,9275,9277,9282,9285,9288,9289,9291,9296,9297,9298,9301,9305,9308,9309,9310,9313,9315,9319,9323,9326,9327,9328,9332,9337,9340,9341,9342,9346,9349,9350,9351,9355,9359,9364,9367,9370,9371,9373,9378,9380,9381,9384,9387,9388,9391,9393,9397,9401,9404,9405,9406,9409,9411,9415,9419,9422,9423,9424,9429,9431,9432,9435,9438,9439,9442,9444,9448,9452,9455,9456,9457,9460,9462,9466,9470,9473,9474,9475,9478,9480,9484,9488,9491,9492,9493,9497,9500,9501,9505,9509,9512,9514,9515,9519,9522,9524,9526,9530,9533,9536,9537,9539,9541,9542,9545,9546,9549,9550,9552,9557,9560,9561,9563,9568,9571,9574,9575,9577,9586,9589,9590,9591,9595,9598,9599,9600,9604,9605,9610,9613,9616,9617,9619,9624,9628,9631,9634,9635,9637,9638,9639,9643,9646,9647,9651,9655,9659,9662,9665,9666,9668,9672,9675,9676,9677,9680,9685,9688,9689,9690,9694,9697,9698,9699,9703,9705,9706,9710,9712,9713,9718,9720,9724,9725,9729,9734,9737,9738,9739,9740,9743,9748,9751,9754,9755,9757,9762,9766,9769,9770,9771,9776,9780,9783,9784,9785,9789,9790,9794,9797,9800,9805,9808,9809,9810,9814,9817,9818,9819,9820,9824,9827,9832,9835,9836,9837,9841,9844,9845,9846,9850,9854,9856,9858,9860,9862,9864,9866,9870,9872,9873,9876,9878,9882,9887,9890,9891,9892,9896,9899,9900,9901,9904,9909,9912,9915,9916,9918,9923,9925,9926,9929,9932,9933,9936,9938,9942,9946,9949,9950,9951,9954,9956,9960,9964,9967,9968,9969,9974,9976,9977,9980,9983,9984,9987,9989,9993,9997,10000,10001,10002,10005,10007,10011,10015,10018,10019,10020,10023,10025,10029,10033,10036,10037,10038,10042,10045,10046,10050,10054,10057,10059,10060,10064,10067,10069,10071,10075,10078,10081,10082,10084,10086,10087,10090,10091,10094,10095,10097,10102,10105,10106,10108,10111,10116,10119,10120,10124,10128,10131,10133,10135,10139,10142,10144,10145,10147,10151,10154,10157,10158,10160,10162,10163,10166,10167,10170,10171,10173,10177,10181,10184,10185,10186,10187,10192,10197,10200,10201,10202,10204,10208,10209,10210,10213,10216,10217,10219,10222,10226,10229,10230,10231,10233,10235,10237,10240,10242,10244,10246,10248,10250,10254,10259,10262,10263,10264,10266,10272,10275,10278,10279,10281,10283,10285,10286,10290,10293,10294,10298,10299,10304,10306,10307,10311,10313,10314,10316,10317,10320,10325,10328,10329,10334,10338,10341,10344,10346,10350,10352,10358,10359,10361,10366,10367,10369,10373,10376,10380,10381,10382,10387,10390,10391,10393,10396,10399,10400,10405,10407,10408,10412,10415,10416,10419,10420,10423,10427,10429,10433,10435,10439,10444,10446,10447,10452,10454,10456,10458,10461,10465,10467,10472,10473,10475,10479,10481,10483,10488,10490,10491,10494,10498,10500,10503,10507,10510,10515,10520,10523,10524,10525,10527,10531,10532,10533,10536,10539,10540,10544,10547,10550,10551,10553,10556,10557,10560,10562,10566,10571,10574,10575,10576,10578,10583,10588,10591,10592,10593,10595,10599,10602,10605,10606,10608,10612,10613,10616,10617,10618,10623,10625,10629,10632,10633,10634,10638,10641,10642,10643,10644,10648,10651,10652,10653,10657,10661,10663,10664,10667,10670,10671,10675,10678,10679,10680,10684,10687,10688,10689,10693,10696,10697,10701,10705,10708,10710,10711,10715,10718,10720,10722,10726,10729,10732,10733,10735,10737,10738,10741,10742,10745,10746,10748,10753,10756,10757,10759,10763,10765,10767,10771,10776,10779,10780,10781,10783,10787,10788,10789,10792,10795,10796,10799,10801,10805,10809,10812,10813,10814,10818,10823,10826,10827,10828,10830,10834,10837,10840,10841,10843,10845,10846,10848,10849,10851,10857,10860,10863,10864,10866,10870,10873,10874,10875,10877,10878,10882,10885,10886,10890,10891,10896,10898,10899,10903,10905,10906,10908,10909,10912,10917,10920,10921,10926,10930,10933,10936,10938,10942,10943,10944,10948,10950,10956,10957,10959,10964,10965,10967,10971,10974,10979,10982,10983,10985,10988,10991,10992,10997,10999,11000,11004,11007,11008,11011,11012,11015,11019,11021,11025,11027,11031,11036,11038,11039,11044,11046,11048,11050,11053,11057,11059,11064,11065,11067,11071,11073,11075,11080,11082,11083,11086,11090,11092,11095,11099,11102,11103,11106,11112,11115,11116,11117,11119,11123,11124,11125,11128,11129,11133,11136,11137,11141,11142,11143,11146,11147,11148,11151,11155,11156,11157,11161,11164,11165,11168,11169,11170,11173,11176,11179,11183,11186,11189,11190,11192,11194,11197,11198,11200,11201,11204,11205,11209,11212,11213,11216,11219,11225,11228,11229,11231,11235,11238,11239,11241,11242,11247,11250,11251,11253,11260,11264,11267,11268,11269,11272,11276,11279,11280,11281,11284,11289,11292,11293,11294,11296,11303,11304,11305,11307,11312,11315,11316,11320,11325,11326,11328,11332,11335,11338,11339,11342,11343,11345,11348,11349,11354,11356,11357,11362,11365,11366,11368,11374,11375,11378,11379,11383,11384,11385,11390,11393,11394,11398,11399,11403,11406,11408,11411,11412,11415,11416,11420,11424,11427,11428,11429,11433,11436,11437,11438,11441,11445,11448,11451,11454,11455,11459,11461,11462,11466,11469,11472,11473,11475,11477,11480,11481,11483,11484,11487,11488,11492,11495,11496,11497,11500,11505,11508,11509,11510,11514,11519,11521,11522,11527,11530,11531,11532,11533,11537,11538,11541,11542,11543,11546,11549,11550,11554,11556,11557,11558,11563,11566,11567,11568,11569,11573,11574,11577,11578,11579,11586,11589,11590,11591,11592,11594,11598,11601,11604,11605,11607,11609,11612,11613,11615,11616,11619,11620,11624,11627,11628,11629,11632,11636,11639,11642,11643,11646,11651,11654,11655,11659,11663,11666,11668,11669,11673,11676,11678,11680,11684,11687,11690,11691,11693,11695,11696,11699,11700,11703,11704,11706,11707,11710,11716,11719,11720,11721,11722,11726,11727,11728,11733,11736,11737,11738,11741,11745,11748,11749,11750,11751,11755,11760,11763,11764,11765,11766,11772,11775,11776,11777,11782,11785,11786,11787,11793,11797,11800,11801,11802,11803,11810,11814,11817,11818,11819,11820,11821,11825,11828,11832,11835,11836,11837,11839,11841,11842,11844,11845,11847,11848,11851,11859,11862,11863,11864,11866,11872,11875,11876,11877,11879,11886,11889,11890,11891,11893,11899,11902,11903,11904,11906,11912,11915,11916,11917,11919,11923,11924,11925,11930,11933,11934,11935,11938,11942,11945,11946,11947,11948,11953,11956,11957,11958,11967,11971,11974,11975,11976,11977,11979,11985,11989,11992,11993,11994,11995,11997,12004,12007,12008,12009,12011,12016,12017,12018,12023,12026,12027,12028,12031,12035,12038,12039,12040,12041,12046,12050,12053,12054,12055,12056,12059,12063,12067,12070,12071,12072,12073,12074,12080,12084,12087,12088,12089,12090,12092,12098,12101,12102,12103,12105,12109,12112,12113,12117,12121,12124,12125,12129,12133,12136,12138,12142,12146,12149,12150,12151,12152,12156,12159,12161,12165,12168,12169,12170,12174,12177,12180,12181,12183,12185,12186,12189,12190,12193,12194,12196,12200,12203,12207,12210,12211,12212,12214,12216,12217,12220,12221,12224,12225,12227,12232,12233,12234,12239,12242,12243,12244,12247,12251,12254,12255,12256,12257,12262,12266,12269,12270,12271,12272,12275,12279,12283,12286,12287,12288,12289,12290,12296,12300,12303,12304,12305,12306,12308,12314,12317,12318,12319,12321,12325,12328,12332,12335,12336,12337,12339,12343,12346,12349,12350,12352,12356,12359,12360,12364,12368,12371,12372,12373,12377,12380,12381,12385,12389,12392,12393,12397,12401,12404,12406,12410,12414,12417,12418,12419,12420,12424,12427,12429,12433,12436,12437,12438,12442,12445,12448,12449,12451,12453,12454,12457,12458,12461,12462,12464,12468,12471,12475,12478,12479,12480,12482,12484,12485,12488,12489,12492,12493,12495,12496,12499,12503,12506,12509,12510,12513,12514,12517,12522,12525,12526,12527,12531,12534,12537,12538,12540,12542,12543,12545,12546,12547,12550,12554,12557,12560,12561,12563,12565,12568,12569,12571,12572,12575,12576,12580,12583,12584,12587,12591,12594,12595,12596,12599,12605,12608,12609,12610,12612,12617,12621,12624,12625,12627,12629,12635,12636,12642,12643,12645,12651,12654,12655,12656,12658,12659,12662,12667,12670,12673,12674,12679,12681,12682,12683,12687,12688,12691,12692,12696,12699,12701,12704,12705,12710,12713,12714,12715,12716,12719,12723,12726,12729,12730,12733,12734,12737,12741,12743,12744,12747,12748,12749,12752,12757,12760,12762,12767,12770,12773,12774,12776,12778,12779,12781,12782,12784,12785,12789,12792,12793,12797,12801,12804,12807,12810,12812,12815,12816,12819,12820,12824,12825,12829,12832,12835,12836,12838,12840,12841,12844,12845,12848,12849,12851,12855,12856,12860,12863,12866,12867,12869,12871,12872,12875,12876,12879,12880,12882,12886,12889,12892,12893,12895,12897,12898,12901,12902,12905,12906,12908,12909,12912,12917,12919,12920,12927,12930,12934,12937,12938,12941,12942,12945,12946,12951,12954,12955,12957,12960,12962,12965,12966,12967,12968,12972,12973,12974,12978,12979,12980,12983,12984,12988,12991,12992,12993,12997,13000,13001,13005,13009,13012,13014,13018,13019,13020,13024,13027,13030,13031,13033,13035,13036,13039,13040,13043,13044,13046,13050,13051,13056,13059,13060,13064,13065,13066,13071,13072,13074,13085,13086,13087,13089,13095,13096,13097,13099,13105,13106,13107,13109,13115,13116,13117,13119,13125,13126,13127,13129,13135,13138,13139,13144,13147,13148,13149,13153,13156,13157,13158,13162,13165,13168,13169,13171,13173,13176,13177,13179,13180,13183,13184,13188,13191,13192,13196,13197,13199,13204,13207,13208,13213,13216,13217,13218,13222,13225,13226,13227,13231,13234,13237,13238,13240,13242,13245,13246,13248,13249,13252,13253
-----computeFrom-----
246,247
246,248
252,253
252,254
272,273
272,274
279,280
279,281
287,288
287,289
311,312
311,313
341,342
341,343
343,344
343,345
350,351
350,352
361,362
361,363
395,396
395,397
400,401
400,402
402,403
402,404
410,411
410,412
435,436
435,437
447,448
447,449
480,481
480,482
483,484
483,485
495,496
495,497
497,498
497,499
502,503
502,504
510,511
510,512
546,547
546,548
606,607
606,608
623,624
623,625
633,634
633,635
656,657
656,658
664,665
664,666
666,667
666,668
686,687
686,688
714,715
714,716
729,730
729,731
730,731
730,732
737,738
737,739
771,772
771,773
784,785
784,786
785,786
785,787
786,787
786,788
793,794
793,795
802,803
802,804
810,811
810,812
815,816
815,817
830,831
830,832
845,846
845,847
885,886
885,887
895,896
895,897
903,904
903,905
910,911
910,912
934,935
934,936
942,943
942,944
952,953
952,954
974,975
974,976
1019,1020
1019,1021
1034,1035
1034,1036
1042,1043
1042,1044
1077,1078
1077,1079
1079,1080
1079,1081
1090,1091
1090,1092
1092,1093
1092,1094
1100,1101
1100,1102
1111,1112
1111,1113
1119,1120
1119,1121
1120,1121
1120,1122
1127,1128
1127,1129
1161,1162
1161,1163
1172,1173
1172,1174
1173,1174
1173,1175
1181,1182
1181,1183
1182,1183
1182,1184
1191,1192
1191,1193
1225,1226
1225,1227
1246,1247
1246,1248
1274,1275
1274,1276
1284,1285
1284,1286
1308,1309
1308,1310
1324,1325
1324,1326
1336,1337
1336,1338
1338,1339
1338,1340
1339,1340
1339,1341
1340,1341
1340,1342
1342,1343
1342,1344
1352,1353
1352,1354
1362,1363
1362,1364
1372,1373
1372,1374
1382,1383
1382,1384
1396,1397
1396,1398
1407,1408
1407,1409
1421,1422
1421,1423
1451,1452
1451,1453
1516,1517
1516,1518
1521,1522
1521,1523
1522,1523
1522,1524
1532,1533
1532,1534
1540,1541
1540,1542
1541,1542
1541,1543
1542,1543
1542,1544
1543,1544
1543,1545
1550,1551
1550,1552
1557,1558
1557,1559
1564,1565
1564,1566
1614,1615
1614,1616
1619,1620
1619,1621
1624,1625
1624,1626
1636,1637
1636,1638
1648,1649
1648,1650
1657,1658
1657,1659
1688,1689
1688,1690
1705,1706
1705,1707
1706,1707
1706,1708
1731,1732
1731,1733
1843,1844
1843,1845
1844,1845
1844,1846
1845,1846
1845,1847
1866,1867
1866,1868
1875,1876
1875,1877
1891,1892
1891,1893
1899,1900
1899,1901
1911,1912
1911,1913
1914,1915
1914,1916
1951,1952
1951,1953
1976,1977
1976,1978
2011,2012
2011,2013
2021,2022
2021,2023
2031,2032
2031,2033
2044,2045
2044,2046
2046,2047
2046,2048
2057,2058
2057,2059
2065,2066
2065,2067
2070,2071
2070,2072
2072,2073
2072,2074
2087,2088
2087,2089
2088,2089
2088,2090
2099,2100
2099,2101
2100,2101
2100,2102
2101,2102
2101,2103
2102,2103
2102,2104
2104,2105
2104,2106
2114,2115
2114,2116
2124,2125
2124,2126
2134,2135
2134,2136
2144,2145
2144,2146
2154,2155
2154,2156
2163,2164
2163,2165
2165,2166
2165,2167
2166,2167
2166,2168
2167,2168
2167,2169
2168,2169
2168,2170
2169,2170
2169,2171
2170,2171
2170,2172
2171,2172
2171,2173
2173,2174
2173,2175
2183,2184
2183,2185
2193,2194
2193,2195
2203,2204
2203,2205
2213,2214
2213,2215
2223,2224
2223,2225
2233,2234
2233,2235
2243,2244
2243,2245
2253,2254
2253,2255
2291,2292
2291,2293
2297,2298
2297,2299
2314,2315
2314,2316
2316,2317
2316,2318
2324,2325
2324,2326
2326,2327
2326,2328
2336,2337
2336,2338
2412,2413
2412,2414
2414,2415
2414,2416
2415,2416
2415,2417
2416,2417
2416,2418
2417,2418
2417,2419
2419,2420
2419,2421
2429,2430
2429,2431
2439,2440
2439,2441
2449,2450
2449,2451
2459,2460
2459,2461
2469,2470
2469,2471
2488,2489
2488,2490
2489,2490
2489,2491
2496,2497
2496,2498
2502,2503
2502,2504
2509,2510
2509,2511
2517,2518
2517,2519
2528,2529
2528,2530
2534,2535
2534,2536
2540,2541
2540,2542
2559,2560
2559,2561
2561,2562
2561,2563
2571,2572
2571,2573
2590,2591
2590,2592
2591,2592
2591,2593
2611,2612
2611,2613
2612,2613
2612,2614
2626,2627
2626,2628
2641,2642
2641,2643
2649,2650
2649,2651
2662,2663
2662,2664
2664,2665
2664,2666
2677,2678
2677,2679
2694,2695
2694,2696
2706,2707
2706,2708
2729,2730
2729,2731
2752,2753
2752,2754
2761,2762
2761,2763
2774,2775
2774,2776
2832,2833
2832,2834
2900,2901
2900,2902
2918,2919
2918,2920
2920,2921
2920,2922
2928,2929
2928,2930
2930,2931
2930,2932
2940,2941
2940,2942
2974,2975
2974,2976
2975,2976
2975,2977
2977,2978
2977,2979
2985,2986
2985,2987
2993,2994
2993,2995
3162,3163
3162,3164
3176,3177
3176,3178
3189,3190
3189,3191
3201,3202
3201,3203
3208,3209
3208,3210
3216,3217
3216,3218
3238,3239
3238,3240
3247,3248
3247,3249
3285,3286
3285,3287
3324,3325
3324,3326
3383,3384
3383,3385
3390,3391
3390,3392
3397,3398
3397,3399
3410,3411
3410,3412
3425,3426
3425,3427
3440,3441
3440,3442
3460,3461
3460,3462
3461,3462
3461,3463
3463,3464
3463,3465
3471,3472
3471,3473
3503,3504
3503,3505
3512,3513
3512,3514
3534,3535
3534,3536
3732,3733
3732,3734
3768,3769
3768,3770
3791,3792
3791,3793
3800,3801
3800,3802
3839,3840
3839,3841
3860,3861
3860,3862
3861,3862
3861,3863
3879,3880
3879,3881
3905,3906
3905,3907
3931,3932
3931,3933
3970,3971
3970,3972
3971,3972
3971,3973
3972,3973
3972,3974
3973,3974
3973,3975
3987,3988
3987,3989
3996,3997
3996,3998
4005,4006
4005,4007
4016,4017
4016,4018
4048,4049
4048,4050
4077,4078
4077,4079
4205,4206
4205,4207
4280,4281
4280,4282
4342,4343
4342,4344
4477,4478
4477,4479
4515,4516
4515,4517
4579,4580
4579,4581
4609,4610
4609,4611
4616,4617
4616,4618
4617,4618
4617,4619
4706,4707
4706,4708
4708,4709
4708,4710
4722,4723
4722,4724
4820,4821
4820,4822
4892,4893
4892,4894
4908,4909
4908,4910
4924,4925
4924,4926
4953,4954
4953,4955
4992,4993
4992,4994
5006,5007
5006,5008
5033,5034
5033,5035
5186,5187
5186,5188
5192,5193
5192,5194
5197,5198
5197,5199
5200,5201
5200,5202
5253,5254
5253,5255
5316,5317
5316,5318
5329,5330
5329,5331
5335,5336
5335,5337
5348,5349
5348,5350
5361,5362
5361,5363
5370,5371
5370,5372
5406,5407
5406,5408
5428,5429
5428,5430
5454,5455
5454,5456
5457,5458
5457,5459
5721,5722
5721,5723
5741,5742
5741,5743
5761,5762
5761,5763
5792,5793
5792,5794
5798,5799
5798,5800
5839,5840
5839,5841
5877,5878
5877,5879
5891,5892
5891,5893
5904,5905
5904,5906
5909,5910
5909,5911
5918,5919
5918,5920
5939,5940
5939,5941
5945,5946
5945,5947
6033,6034
6033,6035
6318,6319
6318,6320
6383,6384
6383,6385
6411,6412
6411,6413
6423,6424
6423,6425
6460,6461
6460,6462
6461,6462
6461,6463
6713,6714
6713,6715
6807,6808
6807,6809
6866,6867
6866,6868
6879,6880
6879,6881
6893,6894
6893,6895
6908,6909
6908,6910
7143,7144
7143,7145
7144,7145
7144,7146
7208,7209
7208,7210
7234,7235
7234,7236
7260,7261
7260,7262
7314,7315
7314,7316
7495,7496
7495,7497
7704,7705
7704,7706
7815,7816
7815,7817
7825,7826
7825,7827
7873,7874
7873,7875
7886,7887
7886,7888
7888,7889
7888,7890
7895,7896
7895,7897
7906,7907
7906,7908
7976,7977
7976,7978
7978,7979
7978,7980
7985,7986
7985,7987
7996,7997
7996,7998
8066,8067
8066,8068
8081,8082
8081,8083
8087,8088
8087,8089
8095,8096
8095,8097
8100,8101
8100,8102
8102,8103
8102,8104
8118,8119
8118,8120
8123,8124
8123,8125
8130,8131
8130,8132
8135,8136
8135,8137
8137,8138
8137,8139
8145,8146
8145,8147
8160,8161
8160,8162
8187,8188
8187,8189
8195,8196
8195,8197
8197,8198
8197,8199
8204,8205
8204,8206
8214,8215
8214,8216
8236,8237
8236,8238
8258,8259
8258,8260
8306,8307
8306,8308
8342,8343
8342,8344
8349,8350
8349,8351
8356,8357
8356,8358
8363,8364
8363,8365
8379,8380
8379,8381
8390,8391
8390,8392
8433,8434
8433,8435
8453,8454
8453,8455
8463,8464
8463,8465
8520,8521
8520,8522
8691,8692
8691,8693
8815,8816
8815,8817
8852,8853
8852,8854
8857,8858
8857,8859
9010,9011
9010,9012
9016,9017
9016,9018
9021,9022
9021,9023
9024,9025
9024,9026
9077,9078
9077,9079
9140,9141
9140,9142
9153,9154
9153,9155
9159,9160
9159,9161
9172,9173
9172,9174
9185,9186
9185,9187
9194,9195
9194,9196
9230,9231
9230,9232
9252,9253
9252,9254
9330,9331
9330,9332
9333,9334
9333,9335
9582,9583
9582,9584
9602,9603
9602,9604
9622,9623
9622,9624
9653,9654
9653,9655
9681,9682
9681,9683
9722,9723
9722,9724
9760,9761
9760,9762
9774,9775
9774,9776
9787,9788
9787,9789
9792,9793
9792,9794
9801,9802
9801,9803
9822,9823
9822,9824
9828,9829
9828,9830
9883,9884
9883,9885
10270,10271
10270,10272
10323,10324
10323,10325
10336,10337
10336,10338
10348,10349
10348,10350
10355,10356
10355,10357
10363,10364
10363,10365
10385,10386
10385,10387
10394,10395
10394,10396
10431,10432
10431,10433
10469,10470
10469,10471
10855,10856
10855,10857
10915,10916
10915,10917
10928,10929
10928,10930
10946,10947
10946,10948
10953,10954
10953,10955
10961,10962
10961,10963
10977,10978
10977,10979
10986,10987
10986,10988
11023,11024
11023,11025
11061,11062
11061,11063
11108,11109
11108,11110
11255,11256
11255,11257
11257,11258
11257,11259
11299,11300
11299,11301
11322,11323
11322,11324
11370,11371
11370,11372
11371,11372
11371,11373
11581,11582
11581,11583
11712,11713
11712,11714
11806,11807
11806,11808
11853,11854
11853,11855
11855,11856
11855,11857
11868,11869
11868,11870
11882,11883
11882,11884
11895,11896
11895,11897
11908,11909
11908,11910
11961,11962
11961,11963
11963,11964
11963,11965
11981,11982
11981,11983
12000,12001
12000,12002
12076,12077
12076,12078
12094,12095
12094,12096
12292,12293
12292,12294
12310,12311
12310,12312
12601,12602
12601,12603
12639,12640
12639,12641
12647,12648
12647,12649
12799,12800
12799,12801
12822,12823
12822,12824
12853,12854
12853,12855
12922,12923
12922,12924
12923,12924
12923,12925
12925,12926
12925,12927
13068,13069
13068,13070
13076,13077
13076,13078
13077,13078
13077,13079
13078,13079
13078,13080
13079,13080
13079,13081
13081,13082
13081,13083
13091,13092
13091,13093
13101,13102
13101,13103
13111,13112
13111,13113
13121,13122
13121,13123
13132,13133
13132,13134
13140,13141
13140,13142
13201,13202
13201,13203
13209,13210
13209,13211
-----guardedBy-----
313,328
318,337
353,386
356,368
416,426
438,754
442,621
441,516
444,520
517,621
505,620
563,602
562,601
636,682
689,702
833,898
937,946
1250,1293
1249,1292
1286,1306
1321,1439
1320,1438
1327,1410
1331,1414
1330,1413
1333,1417
1425,1439
1424,1438
1461,1512
1460,1511
1466,1518
1531,1797
1526,1802
1567,1605
1568,1606
1530,1828
1529,1827
1747,1797
1742,1792
1746,1796
1745,1795
1857,1969
1861,1974
1860,1973
1920,1969
1924,1974
1925,1960
1916,1962
1923,1973
1979,2049
1983,13197
2092,2358
2160,2364
2096,2407
2097,2377
2157,2340
2142,2231
2112,2201
2122,2211
2150,2342
2158,2320
2095,2406
2152,2241
2149,2341
2132,2221
2085,2310
2259,2364
2256,2340
2249,2342
2257,2320
2181,2366
2191,2344
2248,2341
2301,2358
2305,2362
2306,2377
2309,2376
2334,2366
2322,2364
2504,2536
2501,2533
2500,2532
2511,2525
2514,2521
2552,2893
2556,2897
2555,2896
2630,2647
2637,2646
2681,2836
2685,2867
2690,2845
2666,2754
2689,2866
2686,2758
2757,2771
2915,2970
2914,2969
3203,3338
3205,3308
3483,3496
3487,3501
3486,3500
3506,3666
3515,3546
3526,3725
3531,3543
3520,3666
3530,3787
3521,3667
3522,3668
3529,3786
3794,3856
3815,3843
3805,3856
3819,3847
3806,3857
3807,3858
3818,3846
3820,3848
3876,3927
3871,3922
3864,3909
3875,3926
3874,3925
3937,13033
3934,13018
3977,4020
3982,4025
3981,4042
3985,4045
3986,4046
4351,4405
4357,4400
4361,4404
4360,4403
4486,4588
4481,4583
4485,4587
4484,4586
4625,4658
4624,4661
4629,4652
4717,4726
4716,4725
4710,4728
4842,4853
4841,4852
5025,6360
5029,6364
5028,6363
5040,5150
5044,5154
5043,5153
5045,5146
6387,6401
6391,6405
6390,6404
6434,6447
6438,6451
6437,6450
6485,6557
6489,6561
6495,6552
6496,6553
6488,6560
6717,6739
6721,6743
6720,6742
6895,7091
6898,7076
6899,7077
7511,7664
7506,7659
7510,7663
7509,7662
7902,7973
7903,7919
7910,7956
7914,7960
7918,7973
7915,7961
7913,7959
7992,8063
7993,8009
8000,8046
8004,8050
8008,8063
8005,8051
8003,8049
8090,8114
8126,8141
8164,8191
8163,8190
8211,8234
8261,8270
8384,8397
8385,8398
8864,8973
8868,8977
8867,8976
8869,8900
10350,10483
10352,10454
10948,11075
10950,11046
11289,11362
11293,11428
11292,11427
11379,11412
11378,11415
11383,11406
11877,12319
11872,12475
11879,11893
11876,12479
11875,12478
11891,11904
11886,11899
11890,11903
11889,11902
11995,12319
11989,12475
11994,12480
11993,12479
11992,12478
11997,12011
12009,12103
12004,12207
12008,12211
12007,12210
12610,12656
12605,12651
12609,12655
12608,12654
12927,12957
12938,12955
12945,12965
12937,12954
12946,12966
13089,13173
13153,13165
13157,13169
13158,13184
13156,13183
13222,13234
13226,13238
13227,13253
13225,13252
-----guardedByNegation-----
353,413
347,406
636,718
637,690
689,718
736,792
741,797
742,798
734,790
743,799
833,907
937,956
1126,1179
1131,1195
1132,1196
1124,1177
1133,1197
2092,2481
2160,2475
2096,2485
2097,2486
2157,2472
2112,2447
2150,2465
2158,2473
2095,2484
2152,2457
2149,2464
2305,2386
2309,2385
2511,2536
2514,2532
2634,2655
2638,2659
2637,2658
2639,2660
2681,2893
2685,2897
2690,2880
2689,2896
2686,2898
3203,3356
3205,3367
3883,3909
3884,3910
3885,3911
5036,6243
5040,6360
5044,6364
5043,6363
5045,6252
6387,6415
6391,6419
6390,6418
7902,8063
7899,7989
7903,8009
8091,8127
8090,8148
8085,8122
8126,8148
8211,8256
8860,10177
8864,10547
8868,10551
8867,10550
8869,10186
10350,10500
10352,10510
10948,11092
10950,11102
11891,11917
11886,11912
11890,11916
11889,11915
12009,12319
12004,12475
12008,12479
12007,12478
12824,12855
-----lastLexicalUse-----
353,413
636,718
689,718
833,907
937,956
2112,2447
2150,2465
2095,2484
2092,2481
2160,2475
2157,2472
2096,2485
2097,2486
2158,2473
2152,2457
2149,2464
2305,2386
2309,2385
2511,2536
2514,2532
2637,2658
2681,2893
2685,2897
2690,2880
2689,2896
2686,2898
3205,3367
3203,3356
5040,6360
5044,6364
5043,6363
5045,6252
6387,6415
6391,6419
6390,6418
7903,8009
7902,8063
8090,8148
8126,8148
8211,8256
8864,10547
8868,10551
8867,10550
8869,10186
10352,10510
10350,10500
10948,11092
10950,11102
11891,11917
11886,11912
11890,11916
11889,11915
12004,12475
12008,12479
12007,12478
12009,12319
-----jump-----
353,413
636,718
689,718
833,907
937,956
2112,2447
2150,2465
2095,2484
2092,2481
2160,2475
2157,2472
2096,2485
2097,2486
2158,2473
2152,2457
2149,2464
2305,2386
2309,2385
2511,2536
2514,2532
2637,2658
2681,2893
2685,2897
2690,2880
2689,2896
2686,2898
3205,3367
3203,3356
5040,6360
5044,6364
5043,6363
5045,6252
6387,6415
6391,6419
6390,6418
7903,8009
7902,8063
8090,8148
8126,8148
8211,8256
8864,10547
8868,10551
8867,10550
8869,10186
10352,10510
10350,10500
10948,11092
10950,11102
11891,11917
11886,11912
11890,11916
11889,11915
12004,12475
12008,12479
12007,12478
12009,12319
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ProblemStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ProblemStatement;CompoundStatement;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;ProblemExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;IfStatement;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;NullStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;SwitchStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ConditionalExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;FieldReference;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ConditionalExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ProblemStatement;NullStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ConditionalExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;ConditionalExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;LabelStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;BreakStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ConditionalExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ConditionalExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ConditionalExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ConditionalExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ConditionalExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ConditionalExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FieldReference;IdExpression;Name;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;ArrayDeclarator;ReferenceOperator;Name;ArrayModifier;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;IfStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;
-----ast_node-----
static int socket_process_helper(struct iax2_thread *thread){	struct sockaddr_in sin;	int res;	int updatehistory=1;	int new = NEW_PREVENT;	int dcallno = 0;	char decrypted = 0;	struct ast_iax2_full_hdr *fh = (struct ast_iax2_full_hdr *)thread->buf;	struct ast_iax2_mini_hdr *mh = (struct ast_iax2_mini_hdr *)thread->buf;	struct ast_iax2_meta_hdr *meta = (struct ast_iax2_meta_hdr *)thread->buf;	struct ast_iax2_video_hdr *vh = (struct ast_iax2_video_hdr *)thread->buf;	struct iax_frame *fr;	struct iax_frame *cur;	struct ast_frame f = { 0, };	struct ast_channel *c = NULL;	struct iax2_dpcache *dp;	struct iax2_peer *peer;	struct iax_ies ies;	struct iax_ie_data ied0, ied1;	iax2_format format;	int fd;	int exists;	int minivid = 0;	char empty[32]="";		/* Safety measure */	struct iax_frame *duped_fr;	char host_pref_buf[128];	char caller_pref_buf[128];	struct ast_codec_pref pref;	char *using_prefs = "mine";	/* allocate an iax_frame with 4096 bytes of data buffer */	fr = ast_alloca(sizeof(*fr) + 4096);	memset(fr, 0, sizeof(*fr));	fr->afdatalen = 4096; /* From ast_alloca() above */	/* Copy frequently used parameters to the stack */	res = thread->buf_len;	fd = thread->iofd;	memcpy(&sin, &thread->iosin, sizeof(sin));	if (res < sizeof(*mh)) {		ast_log(LOG_WARNING, "midget packet received (%d of %d min)\n", res, (int) sizeof(*mh));		return 1;	}	if ((vh->zeros == 0) && (ntohs(vh->callno) & 0x8000)) {		if (res < sizeof(*vh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}		/* This is a video frame, get call number */		fr->callno = find_callno(ntohs(vh->callno) & ~0x8000, dcallno, &sin, new, fd, 0);		minivid = 1;	} else if ((meta->zeros == 0) && !(ntohs(meta->metacmd) & 0x8000))		return socket_process_meta(res, meta, &sin, fd, fr);#ifdef DEBUG_SUPPORT	if (res >= sizeof(*fh))		iax_outputframe(NULL, fh, 1, &sin, res - sizeof(*fh));#endif	if (ntohs(mh->callno) & IAX_FLAG_FULL) {		if (res < sizeof(*fh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}		/* Get the destination call number */		dcallno = ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS;		/* check to make sure this full frame isn't encrypted before we attempt 		 * to look inside of it. If it is encrypted, decrypt it first. Its ok if the		 * callno is not found here, that just means one hasn't been allocated for		 * this connection yet. */		if ((dcallno != 1) && (fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1))) {			ast_mutex_lock(&iaxsl[fr->callno]);			if (iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)) {				if (decrypt_frame(fr->callno, fh, &f, &res)) {					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				decrypted = 1;			}			ast_mutex_unlock(&iaxsl[fr->callno]);		}		/* Retrieve the type and subclass */		f.frametype = fh->type;		if (f.frametype == AST_FRAME_VIDEO) {			ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)));			if ((fh->csub >> 6) & 0x1) {				ast_format_set_video_mark(&f.subclass.format);			}		} else if (f.frametype == AST_FRAME_VOICE) {			ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub));		} else {			f.subclass.integer = uncompress_subclass(fh->csub);		}		/* Deal with POKE/PONG without allocating a callno */		if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_POKE) {			/* Reply back with a PONG, but don't care about the result. */			send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_PONG, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			return 1;		} else if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1) {			/* Ignore */			return 1;		}		f.datalen = res - sizeof(*fh);		if (f.datalen) {			if (f.frametype == AST_FRAME_IAX) {				if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}				f.data.ptr = NULL;				f.datalen = 0;			} else {				f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);				memset(&ies, 0, sizeof(ies));			}		} else {			if (f.frametype == AST_FRAME_IAX)				f.data.ptr = NULL;			else				f.data.ptr = empty;			memset(&ies, 0, sizeof(ies));		}		if (!dcallno && iax2_allow_new(f.frametype, f.subclass.integer, 1)) {			/* only set NEW_ALLOW if calltoken checks out */			if (handle_call_token(fh, &ies, &sin, fd)) {				ast_variables_destroy(ies.vars);				return 1;			}			if (ies.calltoken && ies.calltokendata) {				/* if we've gotten this far, and the calltoken ie data exists,				 * then calltoken validation _MUST_ have taken place.  If calltoken				 * data is provided, it is always validated reguardless of any				 * calltokenoptional or requirecalltoken options */				new = NEW_ALLOW_CALLTOKEN_VALIDATED;			} else {				new = NEW_ALLOW;			}		}	} else {		/* Don't know anything about it yet */		f.frametype = AST_FRAME_NULL;		f.subclass.integer = 0;		memset(&ies, 0, sizeof(ies));	}	if (!fr->callno) {		int check_dcallno = 0;		/*		 * We enforce accurate destination call numbers for ACKs.  This forces the other		 * end to know the destination call number before call setup can complete.		 *		 * Discussed in the following thread:		 *    http://lists.digium.com/pipermail/asterisk-dev/2008-May/033217.html 		 */		if ((ntohs(mh->callno) & IAX_FLAG_FULL) && ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer == IAX_COMMAND_ACK))) {			check_dcallno = 1;		}		if (!(fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, new, fd, check_dcallno))) {			if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			} else if (f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}			ast_variables_destroy(ies.vars);			return 1;		}	}	if (fr->callno > 0) {		struct ast_callid *mount_callid;		ast_mutex_lock(&iaxsl[fr->callno]);		if (iaxs[fr->callno] && ((mount_callid = iax_pvt_callid_get(fr->callno)))) {			/* Bind to thread */			ast_callid_threadassoc_add(mount_callid);			ast_callid_unref(mount_callid);		}	}	if (!fr->callno || !iaxs[fr->callno]) {		/* A call arrived for a nonexistent destination.  Unless it's an "inval"		   frame, reply with an inval */		if (ntohs(mh->callno) & IAX_FLAG_FULL) {			/* We can only raw hangup control frames */			if (((f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))||			    (f.frametype != AST_FRAME_IAX))				raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,				fd);		}		if (fr->callno > 0) 			ast_mutex_unlock(&iaxsl[fr->callno]);		ast_variables_destroy(ies.vars);		return 1;	}	if (ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED) && !decrypted) {		if (decrypt_frame(fr->callno, fh, &f, &res)) {			ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		decrypted = 1;	}#ifdef DEBUG_SUPPORT	if (decrypted) {		iax_outputframe(NULL, fh, 3, &sin, res - sizeof(*fh));	}#endif	if (iaxs[fr->callno]->owner && fh->type == AST_FRAME_IAX &&			(fh->csub == IAX_COMMAND_HANGUP			|| fh->csub == IAX_COMMAND_REJECT			|| fh->csub == IAX_COMMAND_REGREJ			|| fh->csub == IAX_COMMAND_TXREJ)) {		struct ast_control_pvt_cause_code *cause_code;		int data_size = sizeof(*cause_code);		char subclass[40] = "";		/* get subclass text */		iax_frame_subclass2str(fh->csub, subclass, sizeof(subclass));		/* add length of "IAX2 " */		data_size += 5;		/* for IAX hangup frames, add length of () and number */		data_size += 3;		if (ies.causecode > 9) {			data_size++;		}		if (ies.causecode > 99) {			data_size++;		}		/* add length of subclass */		data_size += strlen(subclass);		cause_code = ast_alloca(data_size);		ast_copy_string(cause_code->chan_name, ast_channel_name(iaxs[fr->callno]->owner), AST_CHANNEL_NAME);		cause_code->ast_cause = ies.causecode;		snprintf(cause_code->code, data_size - sizeof(*cause_code) + 1, "IAX2 %s(%d)", subclass, ies.causecode);		iax2_lock_owner(fr->callno);		if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {			ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size);			ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size);			ast_channel_unlock(iaxs[fr->callno]->owner);		}		if (!iaxs[fr->callno]) {			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}	}	/* count this frame */	iaxs[fr->callno]->frames_received++;	if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) && !minivid &&		f.subclass.integer != IAX_COMMAND_TXCNT &&		/* for attended transfer */		f.subclass.integer != IAX_COMMAND_TXACC) {		/* for attended transfer */		unsigned short new_peercallno;		new_peercallno = (unsigned short) (ntohs(mh->callno) & ~IAX_FLAG_FULL);		if (new_peercallno && new_peercallno != iaxs[fr->callno]->peercallno) {			if (iaxs[fr->callno]->peercallno) {				remove_by_peercallno(iaxs[fr->callno]);			}			iaxs[fr->callno]->peercallno = new_peercallno;			store_by_peercallno(iaxs[fr->callno]);		}	}	if (ntohs(mh->callno) & IAX_FLAG_FULL) {		if (iaxdebug)			ast_debug(1, "Received packet %d, (%d, %u)\n", fh->oseqno, f.frametype, f.subclass.integer);		/* Check if it's out of order (and not an ACK or INVAL) */		fr->oseqno = fh->oseqno;		fr->iseqno = fh->iseqno;		fr->ts = ntohl(fh->ts);#ifdef IAXTESTS		if (test_resync) {			ast_debug(1, "Simulating frame ts resync, was %u now %u\n", fr->ts, fr->ts + test_resync);			fr->ts += test_resync;		}#endif /* IAXTESTS */#if 0		if ( (ntohs(fh->dcallno) & IAX_FLAG_RETRANS) ||		     ( (f.frametype != AST_FRAME_VOICE) && ! (f.frametype == AST_FRAME_IAX &&								(f.subclass == IAX_COMMAND_NEW ||								 f.subclass == IAX_COMMAND_AUTHREQ ||								 f.subclass == IAX_COMMAND_ACCEPT ||								 f.subclass == IAX_COMMAND_REJECT))      ) )#endif		if ((ntohs(fh->dcallno) & IAX_FLAG_RETRANS) || (f.frametype != AST_FRAME_VOICE))			updatehistory = 0;		if ((iaxs[fr->callno]->iseqno != fr->oseqno) &&			(iaxs[fr->callno]->iseqno ||				((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC)) ||				(f.frametype != AST_FRAME_IAX))) {			if (			 ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) ||			  (f.frametype != AST_FRAME_IAX)) {				/* If it's not an ACK packet, it's out of order. */				ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);				/* Check to see if we need to request retransmission,				 * and take sequence number wraparound into account */				if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				} else {					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}				ast_variables_destroy(ies.vars);				ast_mutex_unlock(&iaxsl[fr->callno]);				return 1;			}		} else {			/* Increment unless it's an ACK or VNAK */			if (((f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK)) ||			    (f.frametype != AST_FRAME_IAX))				iaxs[fr->callno]->iseqno++;		}		/* Ensure text frames are NULL-terminated */		if (f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != '\0') {			if (res < thread->buf_size)				thread->buf[res++] = '\0';			else /* Trims one character from the text message, but that's better than overwriting the end of the buffer. */				thread->buf[res - 1] = '\0';		}		/* Handle implicit ACKing unless this is an INVAL, and only if this is 		   from the real peer, not the transfer peer */		if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&		    ((f.subclass.integer != IAX_COMMAND_INVAL) ||		     (f.frametype != AST_FRAME_IAX))) {			unsigned char x;			int call_to_destroy;			/* First we have to qualify that the ACKed value is within our window */			if (iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno))				x = fr->iseqno;			else				x = iaxs[fr->callno]->oseqno;			if ((x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)) {				/* The acknowledgement is within our window.  Time to acknowledge everything				   that it says to */				for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}				/* Note how much we've received acknowledgement for */				if (iaxs[fr->callno])					iaxs[fr->callno]->rseqno = fr->iseqno;				else {					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			} else {				ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);			}		}		if (inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&			((f.frametype != AST_FRAME_IAX) ||			 ((f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)))) {			/* Only messages we accept from a transfer host are TXACC and TXCNT */			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		/* when we receive the first full frame for a new incoming channel,		   it is safe to start the PBX on the channel because we have now		   completed a 3-way handshake with the peer */		if ((f.frametype == AST_FRAME_VOICE) ||		    (f.frametype == AST_FRAME_VIDEO) ||		    (f.frametype == AST_FRAME_IAX)) {			if (ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)) {				ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);				if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			}			if (ies.vars) {				struct ast_datastore *variablestore = NULL;				struct ast_variable *var, *prev = NULL;				AST_LIST_HEAD(, ast_var_t) *varlist;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				if ((c = iaxs[fr->callno]->owner)) {					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				} else {					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}			}			if (ies.vars) {				ast_debug(1, "I have IAX variables, but they were not processed\n");			}		}		/* once we receive our first IAX Full Frame that is not CallToken related, send all		 * queued signaling frames that were being held. */		if ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer != IAX_COMMAND_CALLTOKEN) && iaxs[fr->callno]->hold_signaling) {			send_signaling(iaxs[fr->callno]);		}		if (f.frametype == AST_FRAME_VOICE) {			if (ast_format_to_old_bitfield(&f.subclass.format) != iaxs[fr->callno]->voiceformat) {					iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);					ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));					if (iaxs[fr->callno]->owner) {						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}			}		}		if (f.frametype == AST_FRAME_VIDEO) {			if (f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)) {				ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));				iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);			}		}		if (f.frametype == AST_FRAME_CONTROL && iaxs[fr->callno]->owner) {			if (f.subclass.integer == AST_CONTROL_BUSY) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);			} else if (f.subclass.integer == AST_CONTROL_CONGESTION) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);			}		}		if (f.frametype == AST_FRAME_IAX) {			AST_SCHED_DEL(sched, iaxs[fr->callno]->initid);			/* Handle the IAX pseudo frame itself */			if (iaxdebug)				ast_debug(1, "IAX subclass %d received\n", f.subclass.integer);                        /* Update last ts unless the frame's timestamp originated with us. */			if (iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK &&                            f.subclass.integer != IAX_COMMAND_PONG &&                            f.subclass.integer != IAX_COMMAND_LAGRP) {				iaxs[fr->callno]->last = fr->ts;				if (iaxdebug)					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);			}			iaxs[fr->callno]->last_iax_message = f.subclass.integer;			if (!iaxs[fr->callno]->first_iax_message) {				iaxs[fr->callno]->first_iax_message = f.subclass.integer;			}			switch(f.subclass.integer) {			case IAX_COMMAND_ACK:				/* Do nothing */				break;			case IAX_COMMAND_QUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				break;			case IAX_COMMAND_UNQUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}				break;			case IAX_COMMAND_TXACC:				if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}				break;			case IAX_COMMAND_NEW:				/* Ignore if it's already up */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))					break;				if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}				/* If we're in trunk mode, do it now, and update the trunk number in our frame before continuing */				if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (check_access(fr->callno, &sin, &ies)) {					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				} else					exists = 0;				/* Get OSP token if it does exist */				save_osptoken(fr, &ies);				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}				if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)					merge_encryption(iaxs[fr->callno],ies.encmethods);				else					iaxs[fr->callno]->encmethods = 0;				if (!authenticate_request(fr->callno) && iaxs[fr->callno])					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);				break;			case IAX_COMMAND_DPREQ:				/* Request status in the dialplan */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}				break;			case IAX_COMMAND_HANGUP:				ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);				ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);				/* Set hangup cause according to remote and hangupsource */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REJECT:				/* Set hangup cause according to remote and hangup source */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno);				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))					iaxs[fr->callno]->error = EPERM;				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_TRANSFER:			{				struct ast_channel *bridged_chan;				struct ast_channel *owner;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}				owner = iaxs[fr->callno]->owner;				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;				if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}				break;			}			case IAX_COMMAND_ACCEPT:				/* Ignore if call is already up or needs authentication or is a TBD */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))					break;				if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}				if (ies.format) {					iaxs[fr->callno]->peerformat = ies.format;				} else {					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}				ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));				if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				} else {					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				if (iaxs[fr->callno]) {					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}				break;			case IAX_COMMAND_POKE:				/* Send back a pong packet with the original timestamp */				send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);				break;			case IAX_COMMAND_PING:			{				struct iax_ie_data pingied;				construct_rr(iaxs[fr->callno], &pingied);				/* Send back a pong packet with the original timestamp */				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);			}				break;			case IAX_COMMAND_PONG:				/* Calculate ping time */				iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;				/* save RR info */				save_rr(fr, &ies);				/* Good time to write jb stats for this call */				log_jitterstats(fr->callno);				if (iaxs[fr->callno]->peerpoke) {					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}				break;			case IAX_COMMAND_LAGRQ:			case IAX_COMMAND_LAGRP:				f.src = "LAGRQ";				f.mallocd = 0;				f.offset = 0;				f.samples = 0;				iax_frame_wrap(fr, &f);				if (f.subclass.integer == IAX_COMMAND_LAGRQ) {					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				} else {					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}				break;			case IAX_COMMAND_AUTHREQ:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					};					ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));					iax2_queue_frame(fr->callno, &hangup_fr);				}				break;			case IAX_COMMAND_AUTHREP:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				/* Ignore once we've started */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_verify(iaxs[fr->callno], &ies)) {					if (authdebug)						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);					memset(&ied0, 0, sizeof(ied0));					auth_fail(fr->callno, IAX_COMMAND_REJECT);					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					/* This might re-enter the IAX code and need the lock */					exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);				} else					exists = 0;				if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}				} else {					/* Select an appropriate format */					if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					} else {						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}					if (!format) {						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}					if (format) {						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}				}				break;			case IAX_COMMAND_DIAL:immediatedial:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}				}				break;			case IAX_COMMAND_INVAL:				iaxs[fr->callno]->error = ENOTCONN;				ast_debug(1, "Immediately destroying %d, having received INVAL\n", fr->callno);				iax2_destroy(fr->callno);				ast_debug(1, "Destroying call %d\n", fr->callno);				break;			case IAX_COMMAND_VNAK:				ast_debug(1, "Received VNAK: resending outstanding frames\n");				/* Force retransmission */				vnak_retransmit(fr->callno, fr->iseqno);				break;			case IAX_COMMAND_REGREQ:			case IAX_COMMAND_REGREL:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (register_verify(fr->callno, &sin, &ies)) {					if (!iaxs[fr->callno]) {						break;					}					/* Send delayed failure */					auth_fail(fr->callno, IAX_COMMAND_REGREJ);					break;				}				if (!iaxs[fr->callno]) {					break;				}				if ((ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||						ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)) {					if (f.subclass.integer == IAX_COMMAND_REGREL) {						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}					if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {						ast_log(LOG_WARNING, "Registry error\n");					}					if (!iaxs[fr->callno]) {						break;					}					if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}					break;				}				registry_authrequest(fr->callno);				break;			case IAX_COMMAND_REGACK:				if (iax2_ack_registry(&ies, &sin, fr->callno)) 					ast_log(LOG_WARNING, "Registration failure\n");				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGREJ:				if (iaxs[fr->callno]->reg) {					if (authdebug) {						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}					iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGAUTH:				/* Authentication request */				if (registry_rerequest(&ies, fr->callno, &sin)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				}				break;			case IAX_COMMAND_TXREJ:				iaxs[fr->callno]->transferring = 0;				ast_verb(3, "Channel '%s' unable to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");				memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer));				if (iaxs[fr->callno]->bridgecallno) {					if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}				}				break;			case IAX_COMMAND_TXREADY:				if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||				    (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)) {					if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)						iaxs[fr->callno]->transferring = TRANSFER_MREADY;					else						iaxs[fr->callno]->transferring = TRANSFER_READY;					ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					if (iaxs[fr->callno]->bridgecallno) {						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}				}				break;			case IAX_COMMAND_TXREQ:				try_transfer(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_TXCNT:				if (iaxs[fr->callno]->transferring)					send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);				break;			case IAX_COMMAND_TXREL:				/* Send ack immediately, rather than waiting until we've changed addresses */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				complete_transfer(fr->callno, &ies);				stop_stuff(fr->callno);	/* for attended transfer to work with libiax */				break;				case IAX_COMMAND_TXMEDIA:				if (iaxs[fr->callno]->transferring == TRANSFER_READY) {					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding frames and start anew */						if (cur->transfer) {							cur->retries = -1;						}					}					/* Start sending our media to the transfer address, but otherwise leave the call as-is */					iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;				}				break;			case IAX_COMMAND_RTKEY:				if (!IAX_CALLENCRYPTED(iaxs[fr->callno])) {					ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					);					break;				}				IAX_DEBUGDIGEST("Receiving", ies.challenge);				ast_aes_set_decrypt_key((unsigned char *) ies.challenge, &iaxs[fr->callno]->dcx);				break;			case IAX_COMMAND_DPREP:				complete_dpreply(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_UNSUPPORT:				ast_log(LOG_NOTICE, "Peer did not understand our iax command '%d'\n", ies.iax_unknown);				break;			case IAX_COMMAND_FWDOWNL:				/* Firmware download */				if (!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)) {					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);					break;				}				memset(&ied0, 0, sizeof(ied0));				res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc);				if (res < 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				else if (res > 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				else					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				break;			case IAX_COMMAND_CALLTOKEN:			{				struct iax_frame *cur;				/* find last sent frame */				if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata) {					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);				}				break;			}			default:				ast_debug(1, "Unknown IAX command %d on %d/%d\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno);				memset(&ied0, 0, sizeof(ied0));				iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer);				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1);			}			/* Free remote variables (if any) */			if (ies.vars) {				ast_variables_destroy(ies.vars);				ast_debug(1, "I can haz IAX vars, but they is no good :-(\n");				ies.vars = NULL;			}			/* Don't actually pass these frames along */			if ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) {				if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);			}			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		/* Unless this is an ACK or INVAL frame, ack it */		if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)			send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);	}
static int
socket_process_helper(struct iax2_thread *thread)
socket_process_helper
struct iax2_thread *thread
struct iax2_thread
iax2_thread
*thread
*
thread
{	struct sockaddr_in sin;	int res;	int updatehistory=1;	int new = NEW_PREVENT;	int dcallno = 0;	char decrypted = 0;	struct ast_iax2_full_hdr *fh = (struct ast_iax2_full_hdr *)thread->buf;	struct ast_iax2_mini_hdr *mh = (struct ast_iax2_mini_hdr *)thread->buf;	struct ast_iax2_meta_hdr *meta = (struct ast_iax2_meta_hdr *)thread->buf;	struct ast_iax2_video_hdr *vh = (struct ast_iax2_video_hdr *)thread->buf;	struct iax_frame *fr;	struct iax_frame *cur;	struct ast_frame f = { 0, };	struct ast_channel *c = NULL;	struct iax2_dpcache *dp;	struct iax2_peer *peer;	struct iax_ies ies;	struct iax_ie_data ied0, ied1;	iax2_format format;	int fd;	int exists;	int minivid = 0;	char empty[32]="";		/* Safety measure */	struct iax_frame *duped_fr;	char host_pref_buf[128];	char caller_pref_buf[128];	struct ast_codec_pref pref;	char *using_prefs = "mine";	/* allocate an iax_frame with 4096 bytes of data buffer */	fr = ast_alloca(sizeof(*fr) + 4096);	memset(fr, 0, sizeof(*fr));	fr->afdatalen = 4096; /* From ast_alloca() above */	/* Copy frequently used parameters to the stack */	res = thread->buf_len;	fd = thread->iofd;	memcpy(&sin, &thread->iosin, sizeof(sin));	if (res < sizeof(*mh)) {		ast_log(LOG_WARNING, "midget packet received (%d of %d min)\n", res, (int) sizeof(*mh));		return 1;	}	if ((vh->zeros == 0) && (ntohs(vh->callno) & 0x8000)) {		if (res < sizeof(*vh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}		/* This is a video frame, get call number */		fr->callno = find_callno(ntohs(vh->callno) & ~0x8000, dcallno, &sin, new, fd, 0);		minivid = 1;	} else if ((meta->zeros == 0) && !(ntohs(meta->metacmd) & 0x8000))		return socket_process_meta(res, meta, &sin, fd, fr);#ifdef DEBUG_SUPPORT	if (res >= sizeof(*fh))		iax_outputframe(NULL, fh, 1, &sin, res - sizeof(*fh));#endif	if (ntohs(mh->callno) & IAX_FLAG_FULL) {		if (res < sizeof(*fh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}		/* Get the destination call number */		dcallno = ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS;		/* check to make sure this full frame isn't encrypted before we attempt 		 * to look inside of it. If it is encrypted, decrypt it first. Its ok if the		 * callno is not found here, that just means one hasn't been allocated for		 * this connection yet. */		if ((dcallno != 1) && (fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1))) {			ast_mutex_lock(&iaxsl[fr->callno]);			if (iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)) {				if (decrypt_frame(fr->callno, fh, &f, &res)) {					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				decrypted = 1;			}			ast_mutex_unlock(&iaxsl[fr->callno]);		}		/* Retrieve the type and subclass */		f.frametype = fh->type;		if (f.frametype == AST_FRAME_VIDEO) {			ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)));			if ((fh->csub >> 6) & 0x1) {				ast_format_set_video_mark(&f.subclass.format);			}		} else if (f.frametype == AST_FRAME_VOICE) {			ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub));		} else {			f.subclass.integer = uncompress_subclass(fh->csub);		}		/* Deal with POKE/PONG without allocating a callno */		if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_POKE) {			/* Reply back with a PONG, but don't care about the result. */			send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_PONG, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			return 1;		} else if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1) {			/* Ignore */			return 1;		}		f.datalen = res - sizeof(*fh);		if (f.datalen) {			if (f.frametype == AST_FRAME_IAX) {				if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}				f.data.ptr = NULL;				f.datalen = 0;			} else {				f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);				memset(&ies, 0, sizeof(ies));			}		} else {			if (f.frametype == AST_FRAME_IAX)				f.data.ptr = NULL;			else				f.data.ptr = empty;			memset(&ies, 0, sizeof(ies));		}		if (!dcallno && iax2_allow_new(f.frametype, f.subclass.integer, 1)) {			/* only set NEW_ALLOW if calltoken checks out */			if (handle_call_token(fh, &ies, &sin, fd)) {				ast_variables_destroy(ies.vars);				return 1;			}			if (ies.calltoken && ies.calltokendata) {				/* if we've gotten this far, and the calltoken ie data exists,				 * then calltoken validation _MUST_ have taken place.  If calltoken				 * data is provided, it is always validated reguardless of any				 * calltokenoptional or requirecalltoken options */				new = NEW_ALLOW_CALLTOKEN_VALIDATED;			} else {				new = NEW_ALLOW;			}		}	} else {		/* Don't know anything about it yet */		f.frametype = AST_FRAME_NULL;		f.subclass.integer = 0;		memset(&ies, 0, sizeof(ies));	}	if (!fr->callno) {		int check_dcallno = 0;		/*		 * We enforce accurate destination call numbers for ACKs.  This forces the other		 * end to know the destination call number before call setup can complete.		 *		 * Discussed in the following thread:		 *    http://lists.digium.com/pipermail/asterisk-dev/2008-May/033217.html 		 */		if ((ntohs(mh->callno) & IAX_FLAG_FULL) && ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer == IAX_COMMAND_ACK))) {			check_dcallno = 1;		}		if (!(fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, new, fd, check_dcallno))) {			if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			} else if (f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}			ast_variables_destroy(ies.vars);			return 1;		}	}	if (fr->callno > 0) {		struct ast_callid *mount_callid;		ast_mutex_lock(&iaxsl[fr->callno]);		if (iaxs[fr->callno] && ((mount_callid = iax_pvt_callid_get(fr->callno)))) {			/* Bind to thread */			ast_callid_threadassoc_add(mount_callid);			ast_callid_unref(mount_callid);		}	}	if (!fr->callno || !iaxs[fr->callno]) {		/* A call arrived for a nonexistent destination.  Unless it's an "inval"		   frame, reply with an inval */		if (ntohs(mh->callno) & IAX_FLAG_FULL) {			/* We can only raw hangup control frames */			if (((f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))||			    (f.frametype != AST_FRAME_IAX))				raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,				fd);		}		if (fr->callno > 0) 			ast_mutex_unlock(&iaxsl[fr->callno]);		ast_variables_destroy(ies.vars);		return 1;	}	if (ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED) && !decrypted) {		if (decrypt_frame(fr->callno, fh, &f, &res)) {			ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		decrypted = 1;	}#ifdef DEBUG_SUPPORT	if (decrypted) {		iax_outputframe(NULL, fh, 3, &sin, res - sizeof(*fh));	}#endif	if (iaxs[fr->callno]->owner && fh->type == AST_FRAME_IAX &&			(fh->csub == IAX_COMMAND_HANGUP			|| fh->csub == IAX_COMMAND_REJECT			|| fh->csub == IAX_COMMAND_REGREJ			|| fh->csub == IAX_COMMAND_TXREJ)) {		struct ast_control_pvt_cause_code *cause_code;		int data_size = sizeof(*cause_code);		char subclass[40] = "";		/* get subclass text */		iax_frame_subclass2str(fh->csub, subclass, sizeof(subclass));		/* add length of "IAX2 " */		data_size += 5;		/* for IAX hangup frames, add length of () and number */		data_size += 3;		if (ies.causecode > 9) {			data_size++;		}		if (ies.causecode > 99) {			data_size++;		}		/* add length of subclass */		data_size += strlen(subclass);		cause_code = ast_alloca(data_size);		ast_copy_string(cause_code->chan_name, ast_channel_name(iaxs[fr->callno]->owner), AST_CHANNEL_NAME);		cause_code->ast_cause = ies.causecode;		snprintf(cause_code->code, data_size - sizeof(*cause_code) + 1, "IAX2 %s(%d)", subclass, ies.causecode);		iax2_lock_owner(fr->callno);		if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {			ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size);			ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size);			ast_channel_unlock(iaxs[fr->callno]->owner);		}		if (!iaxs[fr->callno]) {			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}	}	/* count this frame */	iaxs[fr->callno]->frames_received++;	if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) && !minivid &&		f.subclass.integer != IAX_COMMAND_TXCNT &&		/* for attended transfer */		f.subclass.integer != IAX_COMMAND_TXACC) {		/* for attended transfer */		unsigned short new_peercallno;		new_peercallno = (unsigned short) (ntohs(mh->callno) & ~IAX_FLAG_FULL);		if (new_peercallno && new_peercallno != iaxs[fr->callno]->peercallno) {			if (iaxs[fr->callno]->peercallno) {				remove_by_peercallno(iaxs[fr->callno]);			}			iaxs[fr->callno]->peercallno = new_peercallno;			store_by_peercallno(iaxs[fr->callno]);		}	}	if (ntohs(mh->callno) & IAX_FLAG_FULL) {		if (iaxdebug)			ast_debug(1, "Received packet %d, (%d, %u)\n", fh->oseqno, f.frametype, f.subclass.integer);		/* Check if it's out of order (and not an ACK or INVAL) */		fr->oseqno = fh->oseqno;		fr->iseqno = fh->iseqno;		fr->ts = ntohl(fh->ts);#ifdef IAXTESTS		if (test_resync) {			ast_debug(1, "Simulating frame ts resync, was %u now %u\n", fr->ts, fr->ts + test_resync);			fr->ts += test_resync;		}#endif /* IAXTESTS */#if 0		if ( (ntohs(fh->dcallno) & IAX_FLAG_RETRANS) ||		     ( (f.frametype != AST_FRAME_VOICE) && ! (f.frametype == AST_FRAME_IAX &&								(f.subclass == IAX_COMMAND_NEW ||								 f.subclass == IAX_COMMAND_AUTHREQ ||								 f.subclass == IAX_COMMAND_ACCEPT ||								 f.subclass == IAX_COMMAND_REJECT))      ) )#endif		if ((ntohs(fh->dcallno) & IAX_FLAG_RETRANS) || (f.frametype != AST_FRAME_VOICE))			updatehistory = 0;		if ((iaxs[fr->callno]->iseqno != fr->oseqno) &&			(iaxs[fr->callno]->iseqno ||				((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC)) ||				(f.frametype != AST_FRAME_IAX))) {			if (			 ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) ||			  (f.frametype != AST_FRAME_IAX)) {				/* If it's not an ACK packet, it's out of order. */				ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);				/* Check to see if we need to request retransmission,				 * and take sequence number wraparound into account */				if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				} else {					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}				ast_variables_destroy(ies.vars);				ast_mutex_unlock(&iaxsl[fr->callno]);				return 1;			}		} else {			/* Increment unless it's an ACK or VNAK */			if (((f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK)) ||			    (f.frametype != AST_FRAME_IAX))				iaxs[fr->callno]->iseqno++;		}		/* Ensure text frames are NULL-terminated */		if (f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != '\0') {			if (res < thread->buf_size)				thread->buf[res++] = '\0';			else /* Trims one character from the text message, but that's better than overwriting the end of the buffer. */				thread->buf[res - 1] = '\0';		}		/* Handle implicit ACKing unless this is an INVAL, and only if this is 		   from the real peer, not the transfer peer */		if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&		    ((f.subclass.integer != IAX_COMMAND_INVAL) ||		     (f.frametype != AST_FRAME_IAX))) {			unsigned char x;			int call_to_destroy;			/* First we have to qualify that the ACKed value is within our window */			if (iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno))				x = fr->iseqno;			else				x = iaxs[fr->callno]->oseqno;			if ((x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)) {				/* The acknowledgement is within our window.  Time to acknowledge everything				   that it says to */				for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}				/* Note how much we've received acknowledgement for */				if (iaxs[fr->callno])					iaxs[fr->callno]->rseqno = fr->iseqno;				else {					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			} else {				ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);			}		}		if (inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&			((f.frametype != AST_FRAME_IAX) ||			 ((f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)))) {			/* Only messages we accept from a transfer host are TXACC and TXCNT */			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		/* when we receive the first full frame for a new incoming channel,		   it is safe to start the PBX on the channel because we have now		   completed a 3-way handshake with the peer */		if ((f.frametype == AST_FRAME_VOICE) ||		    (f.frametype == AST_FRAME_VIDEO) ||		    (f.frametype == AST_FRAME_IAX)) {			if (ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)) {				ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);				if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			}			if (ies.vars) {				struct ast_datastore *variablestore = NULL;				struct ast_variable *var, *prev = NULL;				AST_LIST_HEAD(, ast_var_t) *varlist;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				if ((c = iaxs[fr->callno]->owner)) {					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				} else {					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}			}			if (ies.vars) {				ast_debug(1, "I have IAX variables, but they were not processed\n");			}		}		/* once we receive our first IAX Full Frame that is not CallToken related, send all		 * queued signaling frames that were being held. */		if ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer != IAX_COMMAND_CALLTOKEN) && iaxs[fr->callno]->hold_signaling) {			send_signaling(iaxs[fr->callno]);		}		if (f.frametype == AST_FRAME_VOICE) {			if (ast_format_to_old_bitfield(&f.subclass.format) != iaxs[fr->callno]->voiceformat) {					iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);					ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));					if (iaxs[fr->callno]->owner) {						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}			}		}		if (f.frametype == AST_FRAME_VIDEO) {			if (f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)) {				ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));				iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);			}		}		if (f.frametype == AST_FRAME_CONTROL && iaxs[fr->callno]->owner) {			if (f.subclass.integer == AST_CONTROL_BUSY) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);			} else if (f.subclass.integer == AST_CONTROL_CONGESTION) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);			}		}		if (f.frametype == AST_FRAME_IAX) {			AST_SCHED_DEL(sched, iaxs[fr->callno]->initid);			/* Handle the IAX pseudo frame itself */			if (iaxdebug)				ast_debug(1, "IAX subclass %d received\n", f.subclass.integer);                        /* Update last ts unless the frame's timestamp originated with us. */			if (iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK &&                            f.subclass.integer != IAX_COMMAND_PONG &&                            f.subclass.integer != IAX_COMMAND_LAGRP) {				iaxs[fr->callno]->last = fr->ts;				if (iaxdebug)					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);			}			iaxs[fr->callno]->last_iax_message = f.subclass.integer;			if (!iaxs[fr->callno]->first_iax_message) {				iaxs[fr->callno]->first_iax_message = f.subclass.integer;			}			switch(f.subclass.integer) {			case IAX_COMMAND_ACK:				/* Do nothing */				break;			case IAX_COMMAND_QUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				break;			case IAX_COMMAND_UNQUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}				break;			case IAX_COMMAND_TXACC:				if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}				break;			case IAX_COMMAND_NEW:				/* Ignore if it's already up */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))					break;				if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}				/* If we're in trunk mode, do it now, and update the trunk number in our frame before continuing */				if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (check_access(fr->callno, &sin, &ies)) {					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				} else					exists = 0;				/* Get OSP token if it does exist */				save_osptoken(fr, &ies);				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}				if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)					merge_encryption(iaxs[fr->callno],ies.encmethods);				else					iaxs[fr->callno]->encmethods = 0;				if (!authenticate_request(fr->callno) && iaxs[fr->callno])					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);				break;			case IAX_COMMAND_DPREQ:				/* Request status in the dialplan */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}				break;			case IAX_COMMAND_HANGUP:				ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);				ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);				/* Set hangup cause according to remote and hangupsource */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REJECT:				/* Set hangup cause according to remote and hangup source */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno);				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))					iaxs[fr->callno]->error = EPERM;				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_TRANSFER:			{				struct ast_channel *bridged_chan;				struct ast_channel *owner;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}				owner = iaxs[fr->callno]->owner;				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;				if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}				break;			}			case IAX_COMMAND_ACCEPT:				/* Ignore if call is already up or needs authentication or is a TBD */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))					break;				if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}				if (ies.format) {					iaxs[fr->callno]->peerformat = ies.format;				} else {					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}				ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));				if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				} else {					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				if (iaxs[fr->callno]) {					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}				break;			case IAX_COMMAND_POKE:				/* Send back a pong packet with the original timestamp */				send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);				break;			case IAX_COMMAND_PING:			{				struct iax_ie_data pingied;				construct_rr(iaxs[fr->callno], &pingied);				/* Send back a pong packet with the original timestamp */				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);			}				break;			case IAX_COMMAND_PONG:				/* Calculate ping time */				iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;				/* save RR info */				save_rr(fr, &ies);				/* Good time to write jb stats for this call */				log_jitterstats(fr->callno);				if (iaxs[fr->callno]->peerpoke) {					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}				break;			case IAX_COMMAND_LAGRQ:			case IAX_COMMAND_LAGRP:				f.src = "LAGRQ";				f.mallocd = 0;				f.offset = 0;				f.samples = 0;				iax_frame_wrap(fr, &f);				if (f.subclass.integer == IAX_COMMAND_LAGRQ) {					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				} else {					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}				break;			case IAX_COMMAND_AUTHREQ:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					};					ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));					iax2_queue_frame(fr->callno, &hangup_fr);				}				break;			case IAX_COMMAND_AUTHREP:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				/* Ignore once we've started */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_verify(iaxs[fr->callno], &ies)) {					if (authdebug)						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);					memset(&ied0, 0, sizeof(ied0));					auth_fail(fr->callno, IAX_COMMAND_REJECT);					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					/* This might re-enter the IAX code and need the lock */					exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);				} else					exists = 0;				if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}				} else {					/* Select an appropriate format */					if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					} else {						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}					if (!format) {						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}					if (format) {						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}				}				break;			case IAX_COMMAND_DIAL:immediatedial:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}				}				break;			case IAX_COMMAND_INVAL:				iaxs[fr->callno]->error = ENOTCONN;				ast_debug(1, "Immediately destroying %d, having received INVAL\n", fr->callno);				iax2_destroy(fr->callno);				ast_debug(1, "Destroying call %d\n", fr->callno);				break;			case IAX_COMMAND_VNAK:				ast_debug(1, "Received VNAK: resending outstanding frames\n");				/* Force retransmission */				vnak_retransmit(fr->callno, fr->iseqno);				break;			case IAX_COMMAND_REGREQ:			case IAX_COMMAND_REGREL:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (register_verify(fr->callno, &sin, &ies)) {					if (!iaxs[fr->callno]) {						break;					}					/* Send delayed failure */					auth_fail(fr->callno, IAX_COMMAND_REGREJ);					break;				}				if (!iaxs[fr->callno]) {					break;				}				if ((ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||						ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)) {					if (f.subclass.integer == IAX_COMMAND_REGREL) {						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}					if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {						ast_log(LOG_WARNING, "Registry error\n");					}					if (!iaxs[fr->callno]) {						break;					}					if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}					break;				}				registry_authrequest(fr->callno);				break;			case IAX_COMMAND_REGACK:				if (iax2_ack_registry(&ies, &sin, fr->callno)) 					ast_log(LOG_WARNING, "Registration failure\n");				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGREJ:				if (iaxs[fr->callno]->reg) {					if (authdebug) {						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}					iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGAUTH:				/* Authentication request */				if (registry_rerequest(&ies, fr->callno, &sin)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				}				break;			case IAX_COMMAND_TXREJ:				iaxs[fr->callno]->transferring = 0;				ast_verb(3, "Channel '%s' unable to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");				memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer));				if (iaxs[fr->callno]->bridgecallno) {					if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}				}				break;			case IAX_COMMAND_TXREADY:				if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||				    (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)) {					if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)						iaxs[fr->callno]->transferring = TRANSFER_MREADY;					else						iaxs[fr->callno]->transferring = TRANSFER_READY;					ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					if (iaxs[fr->callno]->bridgecallno) {						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}				}				break;			case IAX_COMMAND_TXREQ:				try_transfer(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_TXCNT:				if (iaxs[fr->callno]->transferring)					send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);				break;			case IAX_COMMAND_TXREL:				/* Send ack immediately, rather than waiting until we've changed addresses */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				complete_transfer(fr->callno, &ies);				stop_stuff(fr->callno);	/* for attended transfer to work with libiax */				break;				case IAX_COMMAND_TXMEDIA:				if (iaxs[fr->callno]->transferring == TRANSFER_READY) {					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding frames and start anew */						if (cur->transfer) {							cur->retries = -1;						}					}					/* Start sending our media to the transfer address, but otherwise leave the call as-is */					iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;				}				break;			case IAX_COMMAND_RTKEY:				if (!IAX_CALLENCRYPTED(iaxs[fr->callno])) {					ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					);					break;				}				IAX_DEBUGDIGEST("Receiving", ies.challenge);				ast_aes_set_decrypt_key((unsigned char *) ies.challenge, &iaxs[fr->callno]->dcx);				break;			case IAX_COMMAND_DPREP:				complete_dpreply(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_UNSUPPORT:				ast_log(LOG_NOTICE, "Peer did not understand our iax command '%d'\n", ies.iax_unknown);				break;			case IAX_COMMAND_FWDOWNL:				/* Firmware download */				if (!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)) {					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);					break;				}				memset(&ied0, 0, sizeof(ied0));				res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc);				if (res < 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				else if (res > 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				else					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				break;			case IAX_COMMAND_CALLTOKEN:			{				struct iax_frame *cur;				/* find last sent frame */				if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata) {					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);				}				break;			}			default:				ast_debug(1, "Unknown IAX command %d on %d/%d\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno);				memset(&ied0, 0, sizeof(ied0));				iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer);				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1);			}			/* Free remote variables (if any) */			if (ies.vars) {				ast_variables_destroy(ies.vars);				ast_debug(1, "I can haz IAX vars, but they is no good :-(\n");				ies.vars = NULL;			}			/* Don't actually pass these frames along */			if ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) {				if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);			}			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		/* Unless this is an ACK or INVAL frame, ack it */		if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)			send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);	}
struct sockaddr_in sin;
struct sockaddr_in sin;
struct sockaddr_in
sockaddr_in
sin
sin
int res;
int res;
int
res
res
int updatehistory=1;
int updatehistory=1;
int
updatehistory=1
updatehistory
=1
1
int new = NEW_PREVENT;
int dcallno = 0;
int dcallno = 0;
int
dcallno = 0
dcallno
= 0
0
char decrypted = 0;
char decrypted = 0;
char
decrypted = 0
decrypted
= 0
0
struct ast_iax2_full_hdr *fh = (struct ast_iax2_full_hdr *)thread->buf;
struct ast_iax2_full_hdr *fh = (struct ast_iax2_full_hdr *)thread->buf;
struct ast_iax2_full_hdr
ast_iax2_full_hdr
*fh = (struct ast_iax2_full_hdr *)thread->buf
*
fh
= (struct ast_iax2_full_hdr *)thread->buf
(struct ast_iax2_full_hdr *)thread->buf
struct ast_iax2_full_hdr *
struct ast_iax2_full_hdr
ast_iax2_full_hdr
*
*
thread->buf
thread
thread
buf
struct ast_iax2_mini_hdr *mh = (struct ast_iax2_mini_hdr *)thread->buf;
struct ast_iax2_mini_hdr *mh = (struct ast_iax2_mini_hdr *)thread->buf;
struct ast_iax2_mini_hdr
ast_iax2_mini_hdr
*mh = (struct ast_iax2_mini_hdr *)thread->buf
*
mh
= (struct ast_iax2_mini_hdr *)thread->buf
(struct ast_iax2_mini_hdr *)thread->buf
struct ast_iax2_mini_hdr *
struct ast_iax2_mini_hdr
ast_iax2_mini_hdr
*
*
thread->buf
thread
thread
buf
struct ast_iax2_meta_hdr *meta = (struct ast_iax2_meta_hdr *)thread->buf;
struct ast_iax2_meta_hdr *meta = (struct ast_iax2_meta_hdr *)thread->buf;
struct ast_iax2_meta_hdr
ast_iax2_meta_hdr
*meta = (struct ast_iax2_meta_hdr *)thread->buf
*
meta
= (struct ast_iax2_meta_hdr *)thread->buf
(struct ast_iax2_meta_hdr *)thread->buf
struct ast_iax2_meta_hdr *
struct ast_iax2_meta_hdr
ast_iax2_meta_hdr
*
*
thread->buf
thread
thread
buf
struct ast_iax2_video_hdr *vh = (struct ast_iax2_video_hdr *)thread->buf;
struct ast_iax2_video_hdr *vh = (struct ast_iax2_video_hdr *)thread->buf;
struct ast_iax2_video_hdr
ast_iax2_video_hdr
*vh = (struct ast_iax2_video_hdr *)thread->buf
*
vh
= (struct ast_iax2_video_hdr *)thread->buf
(struct ast_iax2_video_hdr *)thread->buf
struct ast_iax2_video_hdr *
struct ast_iax2_video_hdr
ast_iax2_video_hdr
*
*
thread->buf
thread
thread
buf
struct iax_frame *fr;
struct iax_frame *fr;
struct iax_frame
iax_frame
*fr
*
fr
struct iax_frame *cur;
struct iax_frame *cur;
struct iax_frame
iax_frame
*cur
*
cur
struct ast_frame f = { 0, };
struct ast_frame f = { 0, };
struct ast_frame
ast_frame
f = { 0, }
f
= { 0, }
{ 0, }
0
struct ast_channel *c = NULL;
struct ast_channel *c = NULL;
struct ast_channel
ast_channel
*c = NULL
*
c
= NULL
NULL
NULL
struct iax2_dpcache *dp;
struct iax2_dpcache *dp;
struct iax2_dpcache
iax2_dpcache
*dp
*
dp
struct iax2_peer *peer;
struct iax2_peer *peer;
struct iax2_peer
iax2_peer
*peer
*
peer
struct iax_ies ies;
struct iax_ies ies;
struct iax_ies
iax_ies
ies
ies
struct iax_ie_data ied0, ied1;
struct iax_ie_data ied0, ied1;
struct iax_ie_data
iax_ie_data
ied0
ied0
ied1
ied1
iax2_format format;
iax2_format format;
iax2_format
iax2_format
format
format
int fd;
int fd;
int
fd
fd
int exists;
int exists;
int
exists
exists
int minivid = 0;
int minivid = 0;
int
minivid = 0
minivid
= 0
0
char empty[32]="";
char empty[32]="";
char
empty[32]=""
empty
[32]
32
=""
""
struct iax_frame *duped_fr;
struct iax_frame *duped_fr;
struct iax_frame
iax_frame
*duped_fr
*
duped_fr
char host_pref_buf[128];
char host_pref_buf[128];
char
host_pref_buf[128]
host_pref_buf
[128]
128
char caller_pref_buf[128];
char caller_pref_buf[128];
char
caller_pref_buf[128]
caller_pref_buf
[128]
128
struct ast_codec_pref pref;
struct ast_codec_pref pref;
struct ast_codec_pref
ast_codec_pref
pref
pref
char *using_prefs = "mine";
char *using_prefs = "mine";
char
*using_prefs = "mine"
*
using_prefs
= "mine"
"mine"
fr = ast_alloca(sizeof(*fr) + 4096);
fr = ast_alloca(sizeof(*fr) + 4096)
fr
fr
ast_alloca(sizeof(*fr) + 4096)
ast_alloca
ast_alloca
sizeof(*fr) + 4096
sizeof(*fr)
(*fr)
*fr
fr
fr
4096
memset(fr, 0, sizeof(*fr));
memset(fr, 0, sizeof(*fr))
memset
memset
fr
fr
0
sizeof(*fr)
(*fr)
*fr
fr
fr
fr->afdatalen = 4096;
fr->afdatalen = 4096
fr->afdatalen
fr
fr
afdatalen
4096
res = thread->buf_len;
res = thread->buf_len
res
res
thread->buf_len
thread
thread
buf_len
fd = thread->iofd;
fd = thread->iofd
fd
fd
thread->iofd
thread
thread
iofd
memcpy(&sin, &thread->iosin, sizeof(sin));
memcpy(&sin, &thread->iosin, sizeof(sin))
memcpy
memcpy
&sin
sin
sin
&thread->iosin
thread->iosin
thread
thread
iosin
sizeof(sin)
(sin)
sin
sin
if (res < sizeof(*mh)) {		ast_log(LOG_WARNING, "midget packet received (%d of %d min)\n", res, (int) sizeof(*mh));		return 1;	}
res < sizeof(*mh)
res
res
sizeof(*mh)
(*mh)
*mh
mh
mh
{		ast_log(LOG_WARNING, "midget packet received (%d of %d min)\n", res, (int) sizeof(*mh));		return 1;	}
ast_log(LOG_WARNING, "midget packet received (%d of %d min)\n", res, (int) sizeof(*mh));
ast_log(LOG_WARNING, "midget packet received (%d of %d min)\n", res, (int) sizeof(*mh))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"midget packet received (%d of %d min)\n"
res
res
(int) sizeof(*mh)
int
int

sizeof(*mh)
(*mh)
*mh
mh
mh
return 1;
1
if ((vh->zeros == 0) && (ntohs(vh->callno) & 0x8000)) {		if (res < sizeof(*vh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}		/* This is a video frame, get call number */		fr->callno = find_callno(ntohs(vh->callno) & ~0x8000, dcallno, &sin, new, fd, 0);		minivid = 1;	} else if ((meta->zeros == 0) && !(ntohs(meta->metacmd) & 0x8000))		return socket_process_meta(res, meta, &sin, fd, fr);
(vh->zeros == 0) && (ntohs(vh->callno) & 0x8000)
(vh->zeros == 0)
vh->zeros == 0
vh->zeros
vh
vh
zeros
0
(ntohs(vh->callno) & 0x8000)
ntohs(vh->callno) & 0x8000
ntohs(vh->callno)
ntohs
ntohs
vh->callno
vh
vh
callno
0x8000
{		if (res < sizeof(*vh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}		/* This is a video frame, get call number */		fr->callno = find_callno(ntohs(vh->callno) & ~0x8000, dcallno, &sin, new, fd, 0);		minivid = 1;	}
if (res < sizeof(*vh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}
res < sizeof(*vh)
res
res
sizeof(*vh)
(*vh)
*vh
vh
vh
{			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}
ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));
ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Rejecting packet from '%s.%d' that is flagged as a video frame but is too short\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
ntohs(sin.sin_port)
ntohs
ntohs
sin.sin_port
sin
sin
sin_port
return 1;
1
fr->callno = find_callno(ntohs(vh->callno) & ~0x8000, dcallno, &sin, new, fd, 0);
minivid = 1;
minivid = 1
minivid
minivid
1
if ((meta->zeros == 0) && !(ntohs(meta->metacmd) & 0x8000))		return socket_process_meta(res, meta, &sin, fd, fr);
(meta->zeros == 0) && !(ntohs(meta->metacmd) & 0x8000)
(meta->zeros == 0)
meta->zeros == 0
meta->zeros
meta
meta
zeros
0
!(ntohs(meta->metacmd) & 0x8000)
(ntohs(meta->metacmd) & 0x8000)
ntohs(meta->metacmd) & 0x8000
ntohs(meta->metacmd)
ntohs
ntohs
meta->metacmd
meta
meta
metacmd
0x8000
return socket_process_meta(res, meta, &sin, fd, fr);
socket_process_meta(res, meta, &sin, fd, fr)
socket_process_meta
socket_process_meta
res
res
meta
meta
&sin
sin
sin
fd
fd
fr
fr
if (ntohs(mh->callno) & IAX_FLAG_FULL) {		if (res < sizeof(*fh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}		/* Get the destination call number */		dcallno = ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS;		/* check to make sure this full frame isn't encrypted before we attempt 		 * to look inside of it. If it is encrypted, decrypt it first. Its ok if the		 * callno is not found here, that just means one hasn't been allocated for		 * this connection yet. */		if ((dcallno != 1) && (fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1))) {			ast_mutex_lock(&iaxsl[fr->callno]);			if (iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)) {				if (decrypt_frame(fr->callno, fh, &f, &res)) {					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				decrypted = 1;			}			ast_mutex_unlock(&iaxsl[fr->callno]);		}		/* Retrieve the type and subclass */		f.frametype = fh->type;		if (f.frametype == AST_FRAME_VIDEO) {			ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)));			if ((fh->csub >> 6) & 0x1) {				ast_format_set_video_mark(&f.subclass.format);			}		} else if (f.frametype == AST_FRAME_VOICE) {			ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub));		} else {			f.subclass.integer = uncompress_subclass(fh->csub);		}		/* Deal with POKE/PONG without allocating a callno */		if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_POKE) {			/* Reply back with a PONG, but don't care about the result. */			send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_PONG, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			return 1;		} else if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1) {			/* Ignore */			return 1;		}		f.datalen = res - sizeof(*fh);		if (f.datalen) {			if (f.frametype == AST_FRAME_IAX) {				if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}				f.data.ptr = NULL;				f.datalen = 0;			} else {				f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);				memset(&ies, 0, sizeof(ies));			}		} else {			if (f.frametype == AST_FRAME_IAX)				f.data.ptr = NULL;			else				f.data.ptr = empty;			memset(&ies, 0, sizeof(ies));		}		if (!dcallno && iax2_allow_new(f.frametype, f.subclass.integer, 1)) {			/* only set NEW_ALLOW if calltoken checks out */			if (handle_call_token(fh, &ies, &sin, fd)) {				ast_variables_destroy(ies.vars);				return 1;			}			if (ies.calltoken && ies.calltokendata) {				/* if we've gotten this far, and the calltoken ie data exists,				 * then calltoken validation _MUST_ have taken place.  If calltoken				 * data is provided, it is always validated reguardless of any				 * calltokenoptional or requirecalltoken options */				new = NEW_ALLOW_CALLTOKEN_VALIDATED;			} else {				new = NEW_ALLOW;			}		}	} else {		/* Don't know anything about it yet */		f.frametype = AST_FRAME_NULL;		f.subclass.integer = 0;		memset(&ies, 0, sizeof(ies));	}
ntohs(mh->callno) & IAX_FLAG_FULL
ntohs(mh->callno)
ntohs
ntohs
mh->callno
mh
mh
callno
IAX_FLAG_FULL
IAX_FLAG_FULL
{		if (res < sizeof(*fh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}		/* Get the destination call number */		dcallno = ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS;		/* check to make sure this full frame isn't encrypted before we attempt 		 * to look inside of it. If it is encrypted, decrypt it first. Its ok if the		 * callno is not found here, that just means one hasn't been allocated for		 * this connection yet. */		if ((dcallno != 1) && (fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1))) {			ast_mutex_lock(&iaxsl[fr->callno]);			if (iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)) {				if (decrypt_frame(fr->callno, fh, &f, &res)) {					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				decrypted = 1;			}			ast_mutex_unlock(&iaxsl[fr->callno]);		}		/* Retrieve the type and subclass */		f.frametype = fh->type;		if (f.frametype == AST_FRAME_VIDEO) {			ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)));			if ((fh->csub >> 6) & 0x1) {				ast_format_set_video_mark(&f.subclass.format);			}		} else if (f.frametype == AST_FRAME_VOICE) {			ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub));		} else {			f.subclass.integer = uncompress_subclass(fh->csub);		}		/* Deal with POKE/PONG without allocating a callno */		if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_POKE) {			/* Reply back with a PONG, but don't care about the result. */			send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_PONG, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			return 1;		} else if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1) {			/* Ignore */			return 1;		}		f.datalen = res - sizeof(*fh);		if (f.datalen) {			if (f.frametype == AST_FRAME_IAX) {				if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}				f.data.ptr = NULL;				f.datalen = 0;			} else {				f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);				memset(&ies, 0, sizeof(ies));			}		} else {			if (f.frametype == AST_FRAME_IAX)				f.data.ptr = NULL;			else				f.data.ptr = empty;			memset(&ies, 0, sizeof(ies));		}		if (!dcallno && iax2_allow_new(f.frametype, f.subclass.integer, 1)) {			/* only set NEW_ALLOW if calltoken checks out */			if (handle_call_token(fh, &ies, &sin, fd)) {				ast_variables_destroy(ies.vars);				return 1;			}			if (ies.calltoken && ies.calltokendata) {				/* if we've gotten this far, and the calltoken ie data exists,				 * then calltoken validation _MUST_ have taken place.  If calltoken				 * data is provided, it is always validated reguardless of any				 * calltokenoptional or requirecalltoken options */				new = NEW_ALLOW_CALLTOKEN_VALIDATED;			} else {				new = NEW_ALLOW;			}		}	}
if (res < sizeof(*fh)) {			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}
res < sizeof(*fh)
res
res
sizeof(*fh)
(*fh)
*fh
fh
fh
{			ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));			return 1;		}
ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port));
ast_log(LOG_WARNING, "Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n", ast_inet_ntoa(sin.sin_addr), ntohs(sin.sin_port))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Rejecting packet from '%s.%d' that is flagged as a full frame but is too short\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
ntohs(sin.sin_port)
ntohs
ntohs
sin.sin_port
sin
sin
sin_port
return 1;
1
dcallno = ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS;
dcallno = ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS
dcallno
dcallno
ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS
ntohs(fh->dcallno)
ntohs
ntohs
fh->dcallno
fh
fh
dcallno
~IAX_FLAG_RETRANS
IAX_FLAG_RETRANS
IAX_FLAG_RETRANS
if ((dcallno != 1) && (fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1))) {			ast_mutex_lock(&iaxsl[fr->callno]);			if (iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)) {				if (decrypt_frame(fr->callno, fh, &f, &res)) {					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				decrypted = 1;			}			ast_mutex_unlock(&iaxsl[fr->callno]);		}
(dcallno != 1) && (fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1))
(dcallno != 1)
dcallno != 1
dcallno
dcallno
1
(fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1))
fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1)
fr->callno
fr
fr
callno
find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, NEW_PREVENT, fd, 1)
find_callno
find_callno
ntohs(mh->callno) & ~IAX_FLAG_FULL
ntohs(mh->callno)
ntohs
ntohs
mh->callno
mh
mh
callno
~IAX_FLAG_FULL
IAX_FLAG_FULL
IAX_FLAG_FULL
dcallno
dcallno
&sin
sin
sin
NEW_PREVENT
NEW_PREVENT
fd
fd
1
{			ast_mutex_lock(&iaxsl[fr->callno]);			if (iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)) {				if (decrypt_frame(fr->callno, fh, &f, &res)) {					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				decrypted = 1;			}			ast_mutex_unlock(&iaxsl[fr->callno]);		}
ast_mutex_lock(&iaxsl[fr->callno]);
ast_mutex_lock(&iaxsl[fr->callno]);
ast_mutex_lock
ast_mutex_lock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
if (iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)) {				if (decrypt_frame(fr->callno, fh, &f, &res)) {					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				decrypted = 1;			}
iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_ENCRYPTED
IAX_ENCRYPTED
{				if (decrypt_frame(fr->callno, fh, &f, &res)) {					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				decrypted = 1;			}
if (decrypt_frame(fr->callno, fh, &f, &res)) {					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}
decrypt_frame(fr->callno, fh, &f, &res)
decrypt_frame
decrypt_frame
fr->callno
fr
fr
callno
fh
fh
&f
f
f
&res
res
res
{					ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}
ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");
ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n")
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Packet Decrypt Failed!\n"
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno])
ast_mutex_unlock
ast_mutex_unlock
&iaxsl[fr->callno]
iaxsl[fr->callno]
iaxsl
iaxsl
fr->callno
fr
fr
callno
return 1;
1
decrypted = 1;
decrypted = 1
decrypted
decrypted
1
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno])
ast_mutex_unlock
ast_mutex_unlock
&iaxsl[fr->callno]
iaxsl[fr->callno]
iaxsl
iaxsl
fr->callno
fr
fr
callno
f.frametype = fh->type;
f.frametype = fh->type
f.frametype
f
f
frametype
fh->type
fh
fh
type
if (f.frametype == AST_FRAME_VIDEO) {			ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)));			if ((fh->csub >> 6) & 0x1) {				ast_format_set_video_mark(&f.subclass.format);			}		} else if (f.frametype == AST_FRAME_VOICE) {			ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub));		} else {			f.subclass.integer = uncompress_subclass(fh->csub);		}
f.frametype == AST_FRAME_VIDEO
f.frametype
f
f
frametype
AST_FRAME_VIDEO
AST_FRAME_VIDEO
{			ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)));			if ((fh->csub >> 6) & 0x1) {				ast_format_set_video_mark(&f.subclass.format);			}		}
ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)));
ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)))
ast_format_from_old_bitfield
ast_format_from_old_bitfield
&f.subclass.format
f.subclass.format
f.subclass
f
f
subclass
format
(uncompress_subclass(fh->csub & ~0x40))
uncompress_subclass(fh->csub & ~0x40)
uncompress_subclass
uncompress_subclass
fh->csub & ~0x40
fh->csub
fh
fh
csub
~0x40
0x40
if ((fh->csub >> 6) & 0x1) {				ast_format_set_video_mark(&f.subclass.format);			}
(fh->csub >> 6) & 0x1
(fh->csub >> 6)
fh->csub >> 6
fh->csub
fh
fh
csub
6
0x1
{				ast_format_set_video_mark(&f.subclass.format);			}
ast_format_set_video_mark(&f.subclass.format);
ast_format_set_video_mark(&f.subclass.format)
ast_format_set_video_mark
ast_format_set_video_mark
&f.subclass.format
f.subclass.format
f.subclass
f
f
subclass
format
if (f.frametype == AST_FRAME_VOICE) {			ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub));		} else {			f.subclass.integer = uncompress_subclass(fh->csub);		}
f.frametype == AST_FRAME_VOICE
f.frametype
f
f
frametype
AST_FRAME_VOICE
AST_FRAME_VOICE
{			ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub));		}
ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub));
ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub))
ast_format_from_old_bitfield
ast_format_from_old_bitfield
&f.subclass.format
f.subclass.format
f.subclass
f
f
subclass
format
uncompress_subclass(fh->csub)
uncompress_subclass
uncompress_subclass
fh->csub
fh
fh
csub
{			f.subclass.integer = uncompress_subclass(fh->csub);		}
f.subclass.integer = uncompress_subclass(fh->csub);
f.subclass.integer = uncompress_subclass(fh->csub)
f.subclass.integer
f.subclass
f
f
subclass
integer
uncompress_subclass(fh->csub)
uncompress_subclass
uncompress_subclass
fh->csub
fh
fh
csub
if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_POKE) {			/* Reply back with a PONG, but don't care about the result. */			send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_PONG, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			return 1;		} else if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1) {			/* Ignore */			return 1;		}
f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_POKE
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
f.subclass.integer == IAX_COMMAND_POKE
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_POKE
IAX_COMMAND_POKE
{			/* Reply back with a PONG, but don't care about the result. */			send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_PONG, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			return 1;		}
send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_PONG, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);
send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_PONG, ntohl(fh->ts), fh->iseqno + 1, fd, NULL)
send_apathetic_reply
send_apathetic_reply
1
ntohs(fh->scallno)
ntohs
ntohs
fh->scallno
fh
fh
scallno
&sin
sin
sin
IAX_COMMAND_PONG
IAX_COMMAND_PONG
ntohl(fh->ts)
ntohl
ntohl
fh->ts
fh
fh
ts
fh->iseqno + 1
fh->iseqno
fh
fh
iseqno
1
fd
fd
NULL
NULL
return 1;
1
if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1) {			/* Ignore */			return 1;		}
f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1
f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
f.subclass.integer == IAX_COMMAND_ACK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_ACK
IAX_COMMAND_ACK
dcallno == 1
dcallno
dcallno
1
{			/* Ignore */			return 1;		}
return 1;
1
f.datalen = res - sizeof(*fh);
f.datalen = res - sizeof(*fh)
f.datalen
f
f
datalen
res - sizeof(*fh)
res
res
sizeof(*fh)
(*fh)
*fh
fh
fh
if (f.datalen) {			if (f.frametype == AST_FRAME_IAX) {				if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}				f.data.ptr = NULL;				f.datalen = 0;			} else {				f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);				memset(&ies, 0, sizeof(ies));			}		} else {			if (f.frametype == AST_FRAME_IAX)				f.data.ptr = NULL;			else				f.data.ptr = empty;			memset(&ies, 0, sizeof(ies));		}
f.datalen
f
f
datalen
{			if (f.frametype == AST_FRAME_IAX) {				if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}				f.data.ptr = NULL;				f.datalen = 0;			} else {				f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);				memset(&ies, 0, sizeof(ies));			}		}
if (f.frametype == AST_FRAME_IAX) {				if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}				f.data.ptr = NULL;				f.datalen = 0;			} else {				f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);				memset(&ies, 0, sizeof(ies));			}
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
{				if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}				f.data.ptr = NULL;				f.datalen = 0;			}
if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)) {					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}
iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr), f.datalen)
iax_parse_ies
iax_parse_ies
&ies
ies
ies
thread->buf + sizeof(struct ast_iax2_full_hdr)
thread->buf
thread
thread
buf
sizeof(struct ast_iax2_full_hdr)
struct ast_iax2_full_hdr
struct ast_iax2_full_hdr
ast_iax2_full_hdr

f.datalen
f
f
datalen
{					ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));					ast_variables_destroy(ies.vars);					return 1;				}
ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr));
ast_log(LOG_WARNING, "Undecodable frame received from '%s'\n", ast_inet_ntoa(sin.sin_addr))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Undecodable frame received from '%s'\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
return 1;
1
f.data.ptr = NULL;
f.data.ptr = NULL
f.data.ptr
f.data
f
f
data
ptr
NULL
NULL
f.datalen = 0;
f.datalen = 0
f.datalen
f
f
datalen
0
{				f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);				memset(&ies, 0, sizeof(ies));			}
f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr);
f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr)
f.data.ptr
f.data
f
f
data
ptr
thread->buf + sizeof(struct ast_iax2_full_hdr)
thread->buf
thread
thread
buf
sizeof(struct ast_iax2_full_hdr)
struct ast_iax2_full_hdr
struct ast_iax2_full_hdr
ast_iax2_full_hdr

memset(&ies, 0, sizeof(ies));
memset(&ies, 0, sizeof(ies))
memset
memset
&ies
ies
ies
0
sizeof(ies)
(ies)
ies
ies
{			if (f.frametype == AST_FRAME_IAX)				f.data.ptr = NULL;			else				f.data.ptr = empty;			memset(&ies, 0, sizeof(ies));		}
if (f.frametype == AST_FRAME_IAX)				f.data.ptr = NULL;			else				f.data.ptr = empty;
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
f.data.ptr = NULL;
f.data.ptr = NULL
f.data.ptr
f.data
f
f
data
ptr
NULL
NULL
f.data.ptr = empty;
f.data.ptr = empty
f.data.ptr
f.data
f
f
data
ptr
empty
empty
memset(&ies, 0, sizeof(ies));
memset(&ies, 0, sizeof(ies))
memset
memset
&ies
ies
ies
0
sizeof(ies)
(ies)
ies
ies
if (!dcallno && iax2_allow_new(f.frametype, f.subclass.integer, 1)) {			/* only set NEW_ALLOW if calltoken checks out */			if (handle_call_token(fh, &ies, &sin, fd)) {				ast_variables_destroy(ies.vars);				return 1;			}			if (ies.calltoken && ies.calltokendata) {				/* if we've gotten this far, and the calltoken ie data exists,				 * then calltoken validation _MUST_ have taken place.  If calltoken				 * data is provided, it is always validated reguardless of any				 * calltokenoptional or requirecalltoken options */				new = NEW_ALLOW_CALLTOKEN_VALIDATED;			} else {				new = NEW_ALLOW;			}		}
!dcallno && iax2_allow_new(f.frametype, f.subclass.integer, 1)
!dcallno
dcallno
dcallno
iax2_allow_new(f.frametype, f.subclass.integer, 1)
iax2_allow_new
iax2_allow_new
f.frametype
f
f
frametype
f.subclass.integer
f.subclass
f
f
subclass
integer
1
{			/* only set NEW_ALLOW if calltoken checks out */			if (handle_call_token(fh, &ies, &sin, fd)) {				ast_variables_destroy(ies.vars);				return 1;			}			if (ies.calltoken && ies.calltokendata) {				/* if we've gotten this far, and the calltoken ie data exists,				 * then calltoken validation _MUST_ have taken place.  If calltoken				 * data is provided, it is always validated reguardless of any				 * calltokenoptional or requirecalltoken options */				new = NEW_ALLOW_CALLTOKEN_VALIDATED;			} else {				new = NEW_ALLOW;			}		}
if (handle_call_token(fh, &ies, &sin, fd)) {				ast_variables_destroy(ies.vars);				return 1;			}
handle_call_token(fh, &ies, &sin, fd)
handle_call_token
handle_call_token
fh
fh
&ies
ies
ies
&sin
sin
sin
fd
fd
{				ast_variables_destroy(ies.vars);				return 1;			}
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
return 1;
1
if (ies.calltoken && ies.calltokendata) {				/* if we've gotten this far, and the calltoken ie data exists,				 * then calltoken validation _MUST_ have taken place.  If calltoken				 * data is provided, it is always validated reguardless of any				 * calltokenoptional or requirecalltoken options */				new = NEW_ALLOW_CALLTOKEN_VALIDATED;			} else {				new = NEW_ALLOW;			}
ies.calltoken && ies.calltokendata
ies.calltoken
ies
ies
calltoken
ies.calltokendata
ies
ies
calltokendata
{				/* if we've gotten this far, and the calltoken ie data exists,				 * then calltoken validation _MUST_ have taken place.  If calltoken				 * data is provided, it is always validated reguardless of any				 * calltokenoptional or requirecalltoken options */				new = NEW_ALLOW_CALLTOKEN_VALIDATED;			}
new = NEW_ALLOW_CALLTOKEN_VALIDATED;
{				new = NEW_ALLOW;			}
new = NEW_ALLOW;
{		/* Don't know anything about it yet */		f.frametype = AST_FRAME_NULL;		f.subclass.integer = 0;		memset(&ies, 0, sizeof(ies));	}
f.frametype = AST_FRAME_NULL;
f.frametype = AST_FRAME_NULL
f.frametype
f
f
frametype
AST_FRAME_NULL
AST_FRAME_NULL
f.subclass.integer = 0;
f.subclass.integer = 0
f.subclass.integer
f.subclass
f
f
subclass
integer
0
memset(&ies, 0, sizeof(ies));
memset(&ies, 0, sizeof(ies))
memset
memset
&ies
ies
ies
0
sizeof(ies)
(ies)
ies
ies
if (!fr->callno) {		int check_dcallno = 0;		/*		 * We enforce accurate destination call numbers for ACKs.  This forces the other		 * end to know the destination call number before call setup can complete.		 *		 * Discussed in the following thread:		 *    http://lists.digium.com/pipermail/asterisk-dev/2008-May/033217.html 		 */		if ((ntohs(mh->callno) & IAX_FLAG_FULL) && ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer == IAX_COMMAND_ACK))) {			check_dcallno = 1;		}		if (!(fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, new, fd, check_dcallno))) {			if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			} else if (f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}			ast_variables_destroy(ies.vars);			return 1;		}	}
!fr->callno
fr->callno
fr
fr
callno
{		int check_dcallno = 0;		/*		 * We enforce accurate destination call numbers for ACKs.  This forces the other		 * end to know the destination call number before call setup can complete.		 *		 * Discussed in the following thread:		 *    http://lists.digium.com/pipermail/asterisk-dev/2008-May/033217.html 		 */		if ((ntohs(mh->callno) & IAX_FLAG_FULL) && ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer == IAX_COMMAND_ACK))) {			check_dcallno = 1;		}		if (!(fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, new, fd, check_dcallno))) {			if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			} else if (f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}			ast_variables_destroy(ies.vars);			return 1;		}	}
int check_dcallno = 0;
int check_dcallno = 0;
int
check_dcallno = 0
check_dcallno
= 0
0
if ((ntohs(mh->callno) & IAX_FLAG_FULL) && ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer == IAX_COMMAND_ACK))) {			check_dcallno = 1;		}
(ntohs(mh->callno) & IAX_FLAG_FULL) && ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer == IAX_COMMAND_ACK))
(ntohs(mh->callno) & IAX_FLAG_FULL)
ntohs(mh->callno) & IAX_FLAG_FULL
ntohs(mh->callno)
ntohs
ntohs
mh->callno
mh
mh
callno
IAX_FLAG_FULL
IAX_FLAG_FULL
((f.frametype == AST_FRAME_IAX) && (f.subclass.integer == IAX_COMMAND_ACK))
(f.frametype == AST_FRAME_IAX) && (f.subclass.integer == IAX_COMMAND_ACK)
(f.frametype == AST_FRAME_IAX)
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
(f.subclass.integer == IAX_COMMAND_ACK)
f.subclass.integer == IAX_COMMAND_ACK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_ACK
IAX_COMMAND_ACK
{			check_dcallno = 1;		}
check_dcallno = 1;
check_dcallno = 1
check_dcallno
check_dcallno
1
if (!(fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, new, fd, check_dcallno))) {			if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			} else if (f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}			ast_variables_destroy(ies.vars);			return 1;		}
!(fr->callno = find_callno(ntohs(mh->callno) & ~IAX_FLAG_FULL, dcallno, &sin, new, fd, check_dcallno))
{			if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			} else if (f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}			ast_variables_destroy(ies.vars);			return 1;		}
if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			} else if (f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}
f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
f.subclass.integer == IAX_COMMAND_NEW
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_NEW
IAX_COMMAND_NEW
{				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}
send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);
send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REJECT, ntohl(fh->ts), fh->iseqno + 1, fd, NULL)
send_apathetic_reply
send_apathetic_reply
1
ntohs(fh->scallno)
ntohs
ntohs
fh->scallno
fh
fh
scallno
&sin
sin
sin
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
ntohl(fh->ts)
ntohl
ntohl
fh->ts
fh
fh
ts
fh->iseqno + 1
fh->iseqno
fh
fh
iseqno
1
fd
fd
NULL
NULL
if (f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)) {				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}
f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
(f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)
f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL
f.subclass.integer == IAX_COMMAND_REGREQ
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_REGREQ
IAX_COMMAND_REGREQ
f.subclass.integer == IAX_COMMAND_REGREL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_REGREL
IAX_COMMAND_REGREL
{				send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);			}
send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL);
send_apathetic_reply(1, ntohs(fh->scallno), &sin, IAX_COMMAND_REGREJ, ntohl(fh->ts), fh->iseqno + 1, fd, NULL)
send_apathetic_reply
send_apathetic_reply
1
ntohs(fh->scallno)
ntohs
ntohs
fh->scallno
fh
fh
scallno
&sin
sin
sin
IAX_COMMAND_REGREJ
IAX_COMMAND_REGREJ
ntohl(fh->ts)
ntohl
ntohl
fh->ts
fh
fh
ts
fh->iseqno + 1
fh->iseqno
fh
fh
iseqno
1
fd
fd
NULL
NULL
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
return 1;
1
if (fr->callno > 0) {		struct ast_callid *mount_callid;		ast_mutex_lock(&iaxsl[fr->callno]);		if (iaxs[fr->callno] && ((mount_callid = iax_pvt_callid_get(fr->callno)))) {			/* Bind to thread */			ast_callid_threadassoc_add(mount_callid);			ast_callid_unref(mount_callid);		}	}
fr->callno > 0
fr->callno
fr
fr
callno
0
{		struct ast_callid *mount_callid;		ast_mutex_lock(&iaxsl[fr->callno]);		if (iaxs[fr->callno] && ((mount_callid = iax_pvt_callid_get(fr->callno)))) {			/* Bind to thread */			ast_callid_threadassoc_add(mount_callid);			ast_callid_unref(mount_callid);		}	}
struct ast_callid *mount_callid;
struct ast_callid *mount_callid;
struct ast_callid
ast_callid
*mount_callid
*
mount_callid
ast_mutex_lock(&iaxsl[fr->callno]);
ast_mutex_lock(&iaxsl[fr->callno]);
ast_mutex_lock
ast_mutex_lock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
if (iaxs[fr->callno] && ((mount_callid = iax_pvt_callid_get(fr->callno)))) {			/* Bind to thread */			ast_callid_threadassoc_add(mount_callid);			ast_callid_unref(mount_callid);		}
iaxs[fr->callno] && ((mount_callid = iax_pvt_callid_get(fr->callno)))
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
((mount_callid = iax_pvt_callid_get(fr->callno)))
(mount_callid = iax_pvt_callid_get(fr->callno))
mount_callid = iax_pvt_callid_get(fr->callno)
mount_callid
mount_callid
iax_pvt_callid_get(fr->callno)
iax_pvt_callid_get
iax_pvt_callid_get
fr->callno
fr
fr
callno
{			/* Bind to thread */			ast_callid_threadassoc_add(mount_callid);			ast_callid_unref(mount_callid);		}
ast_callid_threadassoc_add(mount_callid);
ast_callid_threadassoc_add(mount_callid)
ast_callid_threadassoc_add
ast_callid_threadassoc_add
mount_callid
mount_callid
ast_callid_unref(mount_callid);
ast_callid_unref(mount_callid)
ast_callid_unref
ast_callid_unref
mount_callid
mount_callid
if (!fr->callno || !iaxs[fr->callno]) {		/* A call arrived for a nonexistent destination.  Unless it's an "inval"		   frame, reply with an inval */		if (ntohs(mh->callno) & IAX_FLAG_FULL) {			/* We can only raw hangup control frames */			if (((f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))||			    (f.frametype != AST_FRAME_IAX))				raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,				fd);		}		if (fr->callno > 0) 			ast_mutex_unlock(&iaxsl[fr->callno]);		ast_variables_destroy(ies.vars);		return 1;	}
!fr->callno || !iaxs[fr->callno]
!fr->callno
fr->callno
fr
fr
callno
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{		/* A call arrived for a nonexistent destination.  Unless it's an "inval"		   frame, reply with an inval */		if (ntohs(mh->callno) & IAX_FLAG_FULL) {			/* We can only raw hangup control frames */			if (((f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))||			    (f.frametype != AST_FRAME_IAX))				raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,				fd);		}		if (fr->callno > 0) 			ast_mutex_unlock(&iaxsl[fr->callno]);		ast_variables_destroy(ies.vars);		return 1;	}
if (ntohs(mh->callno) & IAX_FLAG_FULL) {			/* We can only raw hangup control frames */			if (((f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))||			    (f.frametype != AST_FRAME_IAX))				raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,				fd);		}
ntohs(mh->callno) & IAX_FLAG_FULL
ntohs(mh->callno)
ntohs
ntohs
mh->callno
mh
mh
callno
IAX_FLAG_FULL
IAX_FLAG_FULL
{			/* We can only raw hangup control frames */			if (((f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))||			    (f.frametype != AST_FRAME_IAX))				raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,				fd);		}
if (((f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))||			    (f.frametype != AST_FRAME_IAX))				raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,				fd);
((f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))||			    (f.frametype != AST_FRAME_IAX)
((f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL))
(f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC) &&				 (f.subclass.integer != IAX_COMMAND_FWDOWNL)
(f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT) &&				 (f.subclass.integer != IAX_COMMAND_TXACC)
(f.subclass.integer != IAX_COMMAND_INVAL) &&				 (f.subclass.integer != IAX_COMMAND_TXCNT)
(f.subclass.integer != IAX_COMMAND_INVAL)
f.subclass.integer != IAX_COMMAND_INVAL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_INVAL
IAX_COMMAND_INVAL
(f.subclass.integer != IAX_COMMAND_TXCNT)
f.subclass.integer != IAX_COMMAND_TXCNT
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXCNT
IAX_COMMAND_TXCNT
(f.subclass.integer != IAX_COMMAND_TXACC)
f.subclass.integer != IAX_COMMAND_TXACC
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXACC
IAX_COMMAND_TXACC
(f.subclass.integer != IAX_COMMAND_FWDOWNL)
f.subclass.integer != IAX_COMMAND_FWDOWNL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_FWDOWNL
IAX_COMMAND_FWDOWNL
(f.frametype != AST_FRAME_IAX)
f.frametype != AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,				fd);
raw_hangup(&sin, ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS, ntohs(mh->callno) & ~IAX_FLAG_FULL,				fd)
raw_hangup
raw_hangup
&sin
sin
sin
ntohs(fh->dcallno) & ~IAX_FLAG_RETRANS
ntohs(fh->dcallno)
ntohs
ntohs
fh->dcallno
fh
fh
dcallno
~IAX_FLAG_RETRANS
IAX_FLAG_RETRANS
IAX_FLAG_RETRANS
ntohs(mh->callno) & ~IAX_FLAG_FULL
ntohs(mh->callno)
ntohs
ntohs
mh->callno
mh
mh
callno
~IAX_FLAG_FULL
IAX_FLAG_FULL
IAX_FLAG_FULL
fd
fd
if (fr->callno > 0) 			ast_mutex_unlock(&iaxsl[fr->callno]);
fr->callno > 0
fr->callno
fr
fr
callno
0
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
return 1;
1
if (ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED) && !decrypted) {		if (decrypt_frame(fr->callno, fh, &f, &res)) {			ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		decrypted = 1;	}
ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED) && !decrypted
ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_ENCRYPTED
IAX_ENCRYPTED
!decrypted
decrypted
decrypted
{		if (decrypt_frame(fr->callno, fh, &f, &res)) {			ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		decrypted = 1;	}
if (decrypt_frame(fr->callno, fh, &f, &res)) {			ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}
decrypt_frame(fr->callno, fh, &f, &res)
decrypt_frame
decrypt_frame
fr->callno
fr
fr
callno
fh
fh
&f
f
f
&res
res
res
{			ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}
ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n");
ast_log(LOG_NOTICE, "Packet Decrypt Failed!\n")
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Packet Decrypt Failed!\n"
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
return 1;
1
decrypted = 1;
decrypted = 1
decrypted
decrypted
1
if (iaxs[fr->callno]->owner && fh->type == AST_FRAME_IAX &&			(fh->csub == IAX_COMMAND_HANGUP			|| fh->csub == IAX_COMMAND_REJECT			|| fh->csub == IAX_COMMAND_REGREJ			|| fh->csub == IAX_COMMAND_TXREJ)) {		struct ast_control_pvt_cause_code *cause_code;		int data_size = sizeof(*cause_code);		char subclass[40] = "";		/* get subclass text */		iax_frame_subclass2str(fh->csub, subclass, sizeof(subclass));		/* add length of "IAX2 " */		data_size += 5;		/* for IAX hangup frames, add length of () and number */		data_size += 3;		if (ies.causecode > 9) {			data_size++;		}		if (ies.causecode > 99) {			data_size++;		}		/* add length of subclass */		data_size += strlen(subclass);		cause_code = ast_alloca(data_size);		ast_copy_string(cause_code->chan_name, ast_channel_name(iaxs[fr->callno]->owner), AST_CHANNEL_NAME);		cause_code->ast_cause = ies.causecode;		snprintf(cause_code->code, data_size - sizeof(*cause_code) + 1, "IAX2 %s(%d)", subclass, ies.causecode);		iax2_lock_owner(fr->callno);		if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {			ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size);			ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size);			ast_channel_unlock(iaxs[fr->callno]->owner);		}		if (!iaxs[fr->callno]) {			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}	}
iaxs[fr->callno]->owner && fh->type == AST_FRAME_IAX &&			(fh->csub == IAX_COMMAND_HANGUP			|| fh->csub == IAX_COMMAND_REJECT			|| fh->csub == IAX_COMMAND_REGREJ			|| fh->csub == IAX_COMMAND_TXREJ)
iaxs[fr->callno]->owner && fh->type == AST_FRAME_IAX
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
fh->type == AST_FRAME_IAX
fh->type
fh
fh
type
AST_FRAME_IAX
AST_FRAME_IAX
(fh->csub == IAX_COMMAND_HANGUP			|| fh->csub == IAX_COMMAND_REJECT			|| fh->csub == IAX_COMMAND_REGREJ			|| fh->csub == IAX_COMMAND_TXREJ)
fh->csub == IAX_COMMAND_HANGUP			|| fh->csub == IAX_COMMAND_REJECT			|| fh->csub == IAX_COMMAND_REGREJ			|| fh->csub == IAX_COMMAND_TXREJ
fh->csub == IAX_COMMAND_HANGUP			|| fh->csub == IAX_COMMAND_REJECT			|| fh->csub == IAX_COMMAND_REGREJ
fh->csub == IAX_COMMAND_HANGUP			|| fh->csub == IAX_COMMAND_REJECT
fh->csub == IAX_COMMAND_HANGUP
fh->csub
fh
fh
csub
IAX_COMMAND_HANGUP
IAX_COMMAND_HANGUP
fh->csub == IAX_COMMAND_REJECT
fh->csub
fh
fh
csub
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
fh->csub == IAX_COMMAND_REGREJ
fh->csub
fh
fh
csub
IAX_COMMAND_REGREJ
IAX_COMMAND_REGREJ
fh->csub == IAX_COMMAND_TXREJ
fh->csub
fh
fh
csub
IAX_COMMAND_TXREJ
IAX_COMMAND_TXREJ
{		struct ast_control_pvt_cause_code *cause_code;		int data_size = sizeof(*cause_code);		char subclass[40] = "";		/* get subclass text */		iax_frame_subclass2str(fh->csub, subclass, sizeof(subclass));		/* add length of "IAX2 " */		data_size += 5;		/* for IAX hangup frames, add length of () and number */		data_size += 3;		if (ies.causecode > 9) {			data_size++;		}		if (ies.causecode > 99) {			data_size++;		}		/* add length of subclass */		data_size += strlen(subclass);		cause_code = ast_alloca(data_size);		ast_copy_string(cause_code->chan_name, ast_channel_name(iaxs[fr->callno]->owner), AST_CHANNEL_NAME);		cause_code->ast_cause = ies.causecode;		snprintf(cause_code->code, data_size - sizeof(*cause_code) + 1, "IAX2 %s(%d)", subclass, ies.causecode);		iax2_lock_owner(fr->callno);		if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {			ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size);			ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size);			ast_channel_unlock(iaxs[fr->callno]->owner);		}		if (!iaxs[fr->callno]) {			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}	}
struct ast_control_pvt_cause_code *cause_code;
struct ast_control_pvt_cause_code *cause_code;
struct ast_control_pvt_cause_code
ast_control_pvt_cause_code
*cause_code
*
cause_code
int data_size = sizeof(*cause_code);
int data_size = sizeof(*cause_code);
int
data_size = sizeof(*cause_code)
data_size
= sizeof(*cause_code)
sizeof(*cause_code)
(*cause_code)
*cause_code
cause_code
cause_code
char subclass[40] = "";
char subclass[40] = "";
char
subclass[40] = ""
subclass
[40]
40
= ""
""
iax_frame_subclass2str(fh->csub, subclass, sizeof(subclass));
iax_frame_subclass2str(fh->csub, subclass, sizeof(subclass))
iax_frame_subclass2str
iax_frame_subclass2str
fh->csub
fh
fh
csub
subclass
subclass
sizeof(subclass)
(subclass)
subclass
subclass
data_size += 5;
data_size += 5
data_size
data_size
5
data_size += 3;
data_size += 3
data_size
data_size
3
if (ies.causecode > 9) {			data_size++;		}
ies.causecode > 9
ies.causecode
ies
ies
causecode
9
{			data_size++;		}
data_size++;
data_size++
data_size
data_size
if (ies.causecode > 99) {			data_size++;		}
ies.causecode > 99
ies.causecode
ies
ies
causecode
99
{			data_size++;		}
data_size++;
data_size++
data_size
data_size
data_size += strlen(subclass);
data_size += strlen(subclass)
data_size
data_size
strlen(subclass)
strlen
strlen
subclass
subclass
cause_code = ast_alloca(data_size);
cause_code = ast_alloca(data_size)
cause_code
cause_code
ast_alloca(data_size)
ast_alloca
ast_alloca
data_size
data_size
ast_copy_string(cause_code->chan_name, ast_channel_name(iaxs[fr->callno]->owner), AST_CHANNEL_NAME);
ast_copy_string(cause_code->chan_name, ast_channel_name(iaxs[fr->callno]->owner), AST_CHANNEL_NAME)
ast_copy_string
ast_copy_string
cause_code->chan_name
cause_code
cause_code
chan_name
ast_channel_name(iaxs[fr->callno]->owner)
ast_channel_name
ast_channel_name
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
AST_CHANNEL_NAME
AST_CHANNEL_NAME
cause_code->ast_cause = ies.causecode;
cause_code->ast_cause = ies.causecode
cause_code->ast_cause
cause_code
cause_code
ast_cause
ies.causecode
ies
ies
causecode
snprintf(cause_code->code, data_size - sizeof(*cause_code) + 1, "IAX2 %s(%d)", subclass, ies.causecode);
snprintf(cause_code->code, data_size - sizeof(*cause_code) + 1, "IAX2 %s(%d)", subclass, ies.causecode)
snprintf
snprintf
cause_code->code
cause_code
cause_code
code
data_size - sizeof(*cause_code) + 1
data_size - sizeof(*cause_code)
data_size
data_size
sizeof(*cause_code)
(*cause_code)
*cause_code
cause_code
cause_code
1
"IAX2 %s(%d)"
subclass
subclass
ies.causecode
ies
ies
causecode
iax2_lock_owner(fr->callno);
iax2_lock_owner(fr->callno)
iax2_lock_owner
iax2_lock_owner
fr->callno
fr
fr
callno
if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {			ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size);			ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size);			ast_channel_unlock(iaxs[fr->callno]->owner);		}
iaxs[fr->callno] && iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{			ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size);			ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size);			ast_channel_unlock(iaxs[fr->callno]->owner);		}
ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size);
ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size)
ast_queue_control_data
ast_queue_control_data
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
AST_CONTROL_PVT_CAUSE_CODE
AST_CONTROL_PVT_CAUSE_CODE
cause_code
cause_code
data_size
data_size
ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size);
ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size)
ast_channel_hangupcause_hash_set
ast_channel_hangupcause_hash_set
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
cause_code
cause_code
data_size
data_size
ast_channel_unlock(iaxs[fr->callno]->owner);
ast_channel_unlock(iaxs[fr->callno]->owner)
ast_channel_unlock
ast_channel_unlock
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
if (!iaxs[fr->callno]) {			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
return 1;
1
iaxs[fr->callno]->frames_received++;
iaxs[fr->callno]->frames_received++
iaxs[fr->callno]->frames_received
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
frames_received
if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) && !minivid &&		f.subclass.integer != IAX_COMMAND_TXCNT &&		/* for attended transfer */		f.subclass.integer != IAX_COMMAND_TXACC) {		/* for attended transfer */		unsigned short new_peercallno;		new_peercallno = (unsigned short) (ntohs(mh->callno) & ~IAX_FLAG_FULL);		if (new_peercallno && new_peercallno != iaxs[fr->callno]->peercallno) {			if (iaxs[fr->callno]->peercallno) {				remove_by_peercallno(iaxs[fr->callno]);			}			iaxs[fr->callno]->peercallno = new_peercallno;			store_by_peercallno(iaxs[fr->callno]);		}	}
!inaddrcmp(&sin, &iaxs[fr->callno]->addr) && !minivid &&		f.subclass.integer != IAX_COMMAND_TXCNT &&		/* for attended transfer */		f.subclass.integer != IAX_COMMAND_TXACC
!inaddrcmp(&sin, &iaxs[fr->callno]->addr) && !minivid &&		f.subclass.integer != IAX_COMMAND_TXCNT
!inaddrcmp(&sin, &iaxs[fr->callno]->addr) && !minivid
!inaddrcmp(&sin, &iaxs[fr->callno]->addr)
inaddrcmp(&sin, &iaxs[fr->callno]->addr)
inaddrcmp
inaddrcmp
&sin
sin
sin
&iaxs[fr->callno]->addr
iaxs[fr->callno]->addr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
addr
!minivid
minivid
minivid
f.subclass.integer != IAX_COMMAND_TXCNT
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXCNT
IAX_COMMAND_TXCNT
f.subclass.integer != IAX_COMMAND_TXACC
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXACC
IAX_COMMAND_TXACC
{		/* for attended transfer */		unsigned short new_peercallno;		new_peercallno = (unsigned short) (ntohs(mh->callno) & ~IAX_FLAG_FULL);		if (new_peercallno && new_peercallno != iaxs[fr->callno]->peercallno) {			if (iaxs[fr->callno]->peercallno) {				remove_by_peercallno(iaxs[fr->callno]);			}			iaxs[fr->callno]->peercallno = new_peercallno;			store_by_peercallno(iaxs[fr->callno]);		}	}
unsigned short new_peercallno;
unsigned short new_peercallno;
unsigned short
new_peercallno
new_peercallno
new_peercallno = (unsigned short) (ntohs(mh->callno) & ~IAX_FLAG_FULL);
new_peercallno = (unsigned short) (ntohs(mh->callno) & ~IAX_FLAG_FULL)
new_peercallno
new_peercallno
(unsigned short) (ntohs(mh->callno) & ~IAX_FLAG_FULL)
unsigned short
unsigned short

(ntohs(mh->callno) & ~IAX_FLAG_FULL)
ntohs(mh->callno) & ~IAX_FLAG_FULL
ntohs(mh->callno)
ntohs
ntohs
mh->callno
mh
mh
callno
~IAX_FLAG_FULL
IAX_FLAG_FULL
IAX_FLAG_FULL
if (new_peercallno && new_peercallno != iaxs[fr->callno]->peercallno) {			if (iaxs[fr->callno]->peercallno) {				remove_by_peercallno(iaxs[fr->callno]);			}			iaxs[fr->callno]->peercallno = new_peercallno;			store_by_peercallno(iaxs[fr->callno]);		}
new_peercallno && new_peercallno != iaxs[fr->callno]->peercallno
new_peercallno
new_peercallno
new_peercallno != iaxs[fr->callno]->peercallno
new_peercallno
new_peercallno
iaxs[fr->callno]->peercallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercallno
{			if (iaxs[fr->callno]->peercallno) {				remove_by_peercallno(iaxs[fr->callno]);			}			iaxs[fr->callno]->peercallno = new_peercallno;			store_by_peercallno(iaxs[fr->callno]);		}
if (iaxs[fr->callno]->peercallno) {				remove_by_peercallno(iaxs[fr->callno]);			}
iaxs[fr->callno]->peercallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercallno
{				remove_by_peercallno(iaxs[fr->callno]);			}
remove_by_peercallno(iaxs[fr->callno]);
remove_by_peercallno(iaxs[fr->callno]);
remove_by_peercallno
remove_by_peercallno
(iaxs[fr->callno])
iaxs[fr->callno]
iaxs
[fr->callno]
fr->callno
fr
fr
callno
iaxs[fr->callno]->peercallno = new_peercallno;
iaxs[fr->callno]->peercallno = new_peercallno
iaxs[fr->callno]->peercallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercallno
new_peercallno
new_peercallno
store_by_peercallno(iaxs[fr->callno]);
store_by_peercallno(iaxs[fr->callno]);
store_by_peercallno
store_by_peercallno
(iaxs[fr->callno])
iaxs[fr->callno]
iaxs
[fr->callno]
fr->callno
fr
fr
callno
if (ntohs(mh->callno) & IAX_FLAG_FULL) {		if (iaxdebug)			ast_debug(1, "Received packet %d, (%d, %u)\n", fh->oseqno, f.frametype, f.subclass.integer);		/* Check if it's out of order (and not an ACK or INVAL) */		fr->oseqno = fh->oseqno;		fr->iseqno = fh->iseqno;		fr->ts = ntohl(fh->ts);#ifdef IAXTESTS		if (test_resync) {			ast_debug(1, "Simulating frame ts resync, was %u now %u\n", fr->ts, fr->ts + test_resync);			fr->ts += test_resync;		}#endif /* IAXTESTS */#if 0		if ( (ntohs(fh->dcallno) & IAX_FLAG_RETRANS) ||		     ( (f.frametype != AST_FRAME_VOICE) && ! (f.frametype == AST_FRAME_IAX &&								(f.subclass == IAX_COMMAND_NEW ||								 f.subclass == IAX_COMMAND_AUTHREQ ||								 f.subclass == IAX_COMMAND_ACCEPT ||								 f.subclass == IAX_COMMAND_REJECT))      ) )#endif		if ((ntohs(fh->dcallno) & IAX_FLAG_RETRANS) || (f.frametype != AST_FRAME_VOICE))			updatehistory = 0;		if ((iaxs[fr->callno]->iseqno != fr->oseqno) &&			(iaxs[fr->callno]->iseqno ||				((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC)) ||				(f.frametype != AST_FRAME_IAX))) {			if (			 ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) ||			  (f.frametype != AST_FRAME_IAX)) {				/* If it's not an ACK packet, it's out of order. */				ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);				/* Check to see if we need to request retransmission,				 * and take sequence number wraparound into account */				if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				} else {					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}				ast_variables_destroy(ies.vars);				ast_mutex_unlock(&iaxsl[fr->callno]);				return 1;			}		} else {			/* Increment unless it's an ACK or VNAK */			if (((f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK)) ||			    (f.frametype != AST_FRAME_IAX))				iaxs[fr->callno]->iseqno++;		}		/* Ensure text frames are NULL-terminated */		if (f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != '\0') {			if (res < thread->buf_size)				thread->buf[res++] = '\0';			else /* Trims one character from the text message, but that's better than overwriting the end of the buffer. */				thread->buf[res - 1] = '\0';		}		/* Handle implicit ACKing unless this is an INVAL, and only if this is 		   from the real peer, not the transfer peer */		if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&		    ((f.subclass.integer != IAX_COMMAND_INVAL) ||		     (f.frametype != AST_FRAME_IAX))) {			unsigned char x;			int call_to_destroy;			/* First we have to qualify that the ACKed value is within our window */			if (iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno))				x = fr->iseqno;			else				x = iaxs[fr->callno]->oseqno;			if ((x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)) {				/* The acknowledgement is within our window.  Time to acknowledge everything				   that it says to */				for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}				/* Note how much we've received acknowledgement for */				if (iaxs[fr->callno])					iaxs[fr->callno]->rseqno = fr->iseqno;				else {					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			} else {				ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);			}		}		if (inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&			((f.frametype != AST_FRAME_IAX) ||			 ((f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)))) {			/* Only messages we accept from a transfer host are TXACC and TXCNT */			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		/* when we receive the first full frame for a new incoming channel,		   it is safe to start the PBX on the channel because we have now		   completed a 3-way handshake with the peer */		if ((f.frametype == AST_FRAME_VOICE) ||		    (f.frametype == AST_FRAME_VIDEO) ||		    (f.frametype == AST_FRAME_IAX)) {			if (ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)) {				ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);				if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			}			if (ies.vars) {				struct ast_datastore *variablestore = NULL;				struct ast_variable *var, *prev = NULL;				AST_LIST_HEAD(, ast_var_t) *varlist;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				if ((c = iaxs[fr->callno]->owner)) {					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				} else {					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}			}			if (ies.vars) {				ast_debug(1, "I have IAX variables, but they were not processed\n");			}		}		/* once we receive our first IAX Full Frame that is not CallToken related, send all		 * queued signaling frames that were being held. */		if ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer != IAX_COMMAND_CALLTOKEN) && iaxs[fr->callno]->hold_signaling) {			send_signaling(iaxs[fr->callno]);		}		if (f.frametype == AST_FRAME_VOICE) {			if (ast_format_to_old_bitfield(&f.subclass.format) != iaxs[fr->callno]->voiceformat) {					iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);					ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));					if (iaxs[fr->callno]->owner) {						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}			}		}		if (f.frametype == AST_FRAME_VIDEO) {			if (f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)) {				ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));				iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);			}		}		if (f.frametype == AST_FRAME_CONTROL && iaxs[fr->callno]->owner) {			if (f.subclass.integer == AST_CONTROL_BUSY) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);			} else if (f.subclass.integer == AST_CONTROL_CONGESTION) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);			}		}		if (f.frametype == AST_FRAME_IAX) {			AST_SCHED_DEL(sched, iaxs[fr->callno]->initid);			/* Handle the IAX pseudo frame itself */			if (iaxdebug)				ast_debug(1, "IAX subclass %d received\n", f.subclass.integer);                        /* Update last ts unless the frame's timestamp originated with us. */			if (iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK &&                            f.subclass.integer != IAX_COMMAND_PONG &&                            f.subclass.integer != IAX_COMMAND_LAGRP) {				iaxs[fr->callno]->last = fr->ts;				if (iaxdebug)					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);			}			iaxs[fr->callno]->last_iax_message = f.subclass.integer;			if (!iaxs[fr->callno]->first_iax_message) {				iaxs[fr->callno]->first_iax_message = f.subclass.integer;			}			switch(f.subclass.integer) {			case IAX_COMMAND_ACK:				/* Do nothing */				break;			case IAX_COMMAND_QUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				break;			case IAX_COMMAND_UNQUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}				break;			case IAX_COMMAND_TXACC:				if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}				break;			case IAX_COMMAND_NEW:				/* Ignore if it's already up */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))					break;				if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}				/* If we're in trunk mode, do it now, and update the trunk number in our frame before continuing */				if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (check_access(fr->callno, &sin, &ies)) {					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				} else					exists = 0;				/* Get OSP token if it does exist */				save_osptoken(fr, &ies);				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}				if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)					merge_encryption(iaxs[fr->callno],ies.encmethods);				else					iaxs[fr->callno]->encmethods = 0;				if (!authenticate_request(fr->callno) && iaxs[fr->callno])					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);				break;			case IAX_COMMAND_DPREQ:				/* Request status in the dialplan */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}				break;			case IAX_COMMAND_HANGUP:				ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);				ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);				/* Set hangup cause according to remote and hangupsource */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REJECT:				/* Set hangup cause according to remote and hangup source */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno);				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))					iaxs[fr->callno]->error = EPERM;				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_TRANSFER:			{				struct ast_channel *bridged_chan;				struct ast_channel *owner;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}				owner = iaxs[fr->callno]->owner;				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;				if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}				break;			}			case IAX_COMMAND_ACCEPT:				/* Ignore if call is already up or needs authentication or is a TBD */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))					break;				if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}				if (ies.format) {					iaxs[fr->callno]->peerformat = ies.format;				} else {					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}				ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));				if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				} else {					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				if (iaxs[fr->callno]) {					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}				break;			case IAX_COMMAND_POKE:				/* Send back a pong packet with the original timestamp */				send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);				break;			case IAX_COMMAND_PING:			{				struct iax_ie_data pingied;				construct_rr(iaxs[fr->callno], &pingied);				/* Send back a pong packet with the original timestamp */				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);			}				break;			case IAX_COMMAND_PONG:				/* Calculate ping time */				iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;				/* save RR info */				save_rr(fr, &ies);				/* Good time to write jb stats for this call */				log_jitterstats(fr->callno);				if (iaxs[fr->callno]->peerpoke) {					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}				break;			case IAX_COMMAND_LAGRQ:			case IAX_COMMAND_LAGRP:				f.src = "LAGRQ";				f.mallocd = 0;				f.offset = 0;				f.samples = 0;				iax_frame_wrap(fr, &f);				if (f.subclass.integer == IAX_COMMAND_LAGRQ) {					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				} else {					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}				break;			case IAX_COMMAND_AUTHREQ:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					};					ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));					iax2_queue_frame(fr->callno, &hangup_fr);				}				break;			case IAX_COMMAND_AUTHREP:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				/* Ignore once we've started */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_verify(iaxs[fr->callno], &ies)) {					if (authdebug)						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);					memset(&ied0, 0, sizeof(ied0));					auth_fail(fr->callno, IAX_COMMAND_REJECT);					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					/* This might re-enter the IAX code and need the lock */					exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);				} else					exists = 0;				if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}				} else {					/* Select an appropriate format */					if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					} else {						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}					if (!format) {						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}					if (format) {						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}				}				break;			case IAX_COMMAND_DIAL:immediatedial:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}				}				break;			case IAX_COMMAND_INVAL:				iaxs[fr->callno]->error = ENOTCONN;				ast_debug(1, "Immediately destroying %d, having received INVAL\n", fr->callno);				iax2_destroy(fr->callno);				ast_debug(1, "Destroying call %d\n", fr->callno);				break;			case IAX_COMMAND_VNAK:				ast_debug(1, "Received VNAK: resending outstanding frames\n");				/* Force retransmission */				vnak_retransmit(fr->callno, fr->iseqno);				break;			case IAX_COMMAND_REGREQ:			case IAX_COMMAND_REGREL:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (register_verify(fr->callno, &sin, &ies)) {					if (!iaxs[fr->callno]) {						break;					}					/* Send delayed failure */					auth_fail(fr->callno, IAX_COMMAND_REGREJ);					break;				}				if (!iaxs[fr->callno]) {					break;				}				if ((ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||						ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)) {					if (f.subclass.integer == IAX_COMMAND_REGREL) {						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}					if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {						ast_log(LOG_WARNING, "Registry error\n");					}					if (!iaxs[fr->callno]) {						break;					}					if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}					break;				}				registry_authrequest(fr->callno);				break;			case IAX_COMMAND_REGACK:				if (iax2_ack_registry(&ies, &sin, fr->callno)) 					ast_log(LOG_WARNING, "Registration failure\n");				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGREJ:				if (iaxs[fr->callno]->reg) {					if (authdebug) {						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}					iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGAUTH:				/* Authentication request */				if (registry_rerequest(&ies, fr->callno, &sin)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				}				break;			case IAX_COMMAND_TXREJ:				iaxs[fr->callno]->transferring = 0;				ast_verb(3, "Channel '%s' unable to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");				memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer));				if (iaxs[fr->callno]->bridgecallno) {					if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}				}				break;			case IAX_COMMAND_TXREADY:				if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||				    (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)) {					if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)						iaxs[fr->callno]->transferring = TRANSFER_MREADY;					else						iaxs[fr->callno]->transferring = TRANSFER_READY;					ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					if (iaxs[fr->callno]->bridgecallno) {						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}				}				break;			case IAX_COMMAND_TXREQ:				try_transfer(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_TXCNT:				if (iaxs[fr->callno]->transferring)					send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);				break;			case IAX_COMMAND_TXREL:				/* Send ack immediately, rather than waiting until we've changed addresses */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				complete_transfer(fr->callno, &ies);				stop_stuff(fr->callno);	/* for attended transfer to work with libiax */				break;				case IAX_COMMAND_TXMEDIA:				if (iaxs[fr->callno]->transferring == TRANSFER_READY) {					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding frames and start anew */						if (cur->transfer) {							cur->retries = -1;						}					}					/* Start sending our media to the transfer address, but otherwise leave the call as-is */					iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;				}				break;			case IAX_COMMAND_RTKEY:				if (!IAX_CALLENCRYPTED(iaxs[fr->callno])) {					ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					);					break;				}				IAX_DEBUGDIGEST("Receiving", ies.challenge);				ast_aes_set_decrypt_key((unsigned char *) ies.challenge, &iaxs[fr->callno]->dcx);				break;			case IAX_COMMAND_DPREP:				complete_dpreply(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_UNSUPPORT:				ast_log(LOG_NOTICE, "Peer did not understand our iax command '%d'\n", ies.iax_unknown);				break;			case IAX_COMMAND_FWDOWNL:				/* Firmware download */				if (!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)) {					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);					break;				}				memset(&ied0, 0, sizeof(ied0));				res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc);				if (res < 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				else if (res > 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				else					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				break;			case IAX_COMMAND_CALLTOKEN:			{				struct iax_frame *cur;				/* find last sent frame */				if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata) {					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);				}				break;			}			default:				ast_debug(1, "Unknown IAX command %d on %d/%d\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno);				memset(&ied0, 0, sizeof(ied0));				iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer);				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1);			}			/* Free remote variables (if any) */			if (ies.vars) {				ast_variables_destroy(ies.vars);				ast_debug(1, "I can haz IAX vars, but they is no good :-(\n");				ies.vars = NULL;			}			/* Don't actually pass these frames along */			if ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) {				if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);			}			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}
ntohs(mh->callno) & IAX_FLAG_FULL
ntohs(mh->callno)
ntohs
ntohs
mh->callno
mh
mh
callno
IAX_FLAG_FULL
IAX_FLAG_FULL
{		if (iaxdebug)			ast_debug(1, "Received packet %d, (%d, %u)\n", fh->oseqno, f.frametype, f.subclass.integer);		/* Check if it's out of order (and not an ACK or INVAL) */		fr->oseqno = fh->oseqno;		fr->iseqno = fh->iseqno;		fr->ts = ntohl(fh->ts);#ifdef IAXTESTS		if (test_resync) {			ast_debug(1, "Simulating frame ts resync, was %u now %u\n", fr->ts, fr->ts + test_resync);			fr->ts += test_resync;		}#endif /* IAXTESTS */#if 0		if ( (ntohs(fh->dcallno) & IAX_FLAG_RETRANS) ||		     ( (f.frametype != AST_FRAME_VOICE) && ! (f.frametype == AST_FRAME_IAX &&								(f.subclass == IAX_COMMAND_NEW ||								 f.subclass == IAX_COMMAND_AUTHREQ ||								 f.subclass == IAX_COMMAND_ACCEPT ||								 f.subclass == IAX_COMMAND_REJECT))      ) )#endif		if ((ntohs(fh->dcallno) & IAX_FLAG_RETRANS) || (f.frametype != AST_FRAME_VOICE))			updatehistory = 0;		if ((iaxs[fr->callno]->iseqno != fr->oseqno) &&			(iaxs[fr->callno]->iseqno ||				((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC)) ||				(f.frametype != AST_FRAME_IAX))) {			if (			 ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) ||			  (f.frametype != AST_FRAME_IAX)) {				/* If it's not an ACK packet, it's out of order. */				ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);				/* Check to see if we need to request retransmission,				 * and take sequence number wraparound into account */				if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				} else {					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}				ast_variables_destroy(ies.vars);				ast_mutex_unlock(&iaxsl[fr->callno]);				return 1;			}		} else {			/* Increment unless it's an ACK or VNAK */			if (((f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK)) ||			    (f.frametype != AST_FRAME_IAX))				iaxs[fr->callno]->iseqno++;		}		/* Ensure text frames are NULL-terminated */		if (f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != '\0') {			if (res < thread->buf_size)				thread->buf[res++] = '\0';			else /* Trims one character from the text message, but that's better than overwriting the end of the buffer. */				thread->buf[res - 1] = '\0';		}		/* Handle implicit ACKing unless this is an INVAL, and only if this is 		   from the real peer, not the transfer peer */		if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&		    ((f.subclass.integer != IAX_COMMAND_INVAL) ||		     (f.frametype != AST_FRAME_IAX))) {			unsigned char x;			int call_to_destroy;			/* First we have to qualify that the ACKed value is within our window */			if (iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno))				x = fr->iseqno;			else				x = iaxs[fr->callno]->oseqno;			if ((x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)) {				/* The acknowledgement is within our window.  Time to acknowledge everything				   that it says to */				for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}				/* Note how much we've received acknowledgement for */				if (iaxs[fr->callno])					iaxs[fr->callno]->rseqno = fr->iseqno;				else {					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			} else {				ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);			}		}		if (inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&			((f.frametype != AST_FRAME_IAX) ||			 ((f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)))) {			/* Only messages we accept from a transfer host are TXACC and TXCNT */			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}		/* when we receive the first full frame for a new incoming channel,		   it is safe to start the PBX on the channel because we have now		   completed a 3-way handshake with the peer */		if ((f.frametype == AST_FRAME_VOICE) ||		    (f.frametype == AST_FRAME_VIDEO) ||		    (f.frametype == AST_FRAME_IAX)) {			if (ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)) {				ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);				if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			}			if (ies.vars) {				struct ast_datastore *variablestore = NULL;				struct ast_variable *var, *prev = NULL;				AST_LIST_HEAD(, ast_var_t) *varlist;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				if ((c = iaxs[fr->callno]->owner)) {					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				} else {					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}			}			if (ies.vars) {				ast_debug(1, "I have IAX variables, but they were not processed\n");			}		}		/* once we receive our first IAX Full Frame that is not CallToken related, send all		 * queued signaling frames that were being held. */		if ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer != IAX_COMMAND_CALLTOKEN) && iaxs[fr->callno]->hold_signaling) {			send_signaling(iaxs[fr->callno]);		}		if (f.frametype == AST_FRAME_VOICE) {			if (ast_format_to_old_bitfield(&f.subclass.format) != iaxs[fr->callno]->voiceformat) {					iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);					ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));					if (iaxs[fr->callno]->owner) {						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}			}		}		if (f.frametype == AST_FRAME_VIDEO) {			if (f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)) {				ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));				iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);			}		}		if (f.frametype == AST_FRAME_CONTROL && iaxs[fr->callno]->owner) {			if (f.subclass.integer == AST_CONTROL_BUSY) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);			} else if (f.subclass.integer == AST_CONTROL_CONGESTION) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);			}		}		if (f.frametype == AST_FRAME_IAX) {			AST_SCHED_DEL(sched, iaxs[fr->callno]->initid);			/* Handle the IAX pseudo frame itself */			if (iaxdebug)				ast_debug(1, "IAX subclass %d received\n", f.subclass.integer);                        /* Update last ts unless the frame's timestamp originated with us. */			if (iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK &&                            f.subclass.integer != IAX_COMMAND_PONG &&                            f.subclass.integer != IAX_COMMAND_LAGRP) {				iaxs[fr->callno]->last = fr->ts;				if (iaxdebug)					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);			}			iaxs[fr->callno]->last_iax_message = f.subclass.integer;			if (!iaxs[fr->callno]->first_iax_message) {				iaxs[fr->callno]->first_iax_message = f.subclass.integer;			}			switch(f.subclass.integer) {			case IAX_COMMAND_ACK:				/* Do nothing */				break;			case IAX_COMMAND_QUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				break;			case IAX_COMMAND_UNQUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}				break;			case IAX_COMMAND_TXACC:				if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}				break;			case IAX_COMMAND_NEW:				/* Ignore if it's already up */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))					break;				if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}				/* If we're in trunk mode, do it now, and update the trunk number in our frame before continuing */				if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (check_access(fr->callno, &sin, &ies)) {					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				} else					exists = 0;				/* Get OSP token if it does exist */				save_osptoken(fr, &ies);				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}				if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)					merge_encryption(iaxs[fr->callno],ies.encmethods);				else					iaxs[fr->callno]->encmethods = 0;				if (!authenticate_request(fr->callno) && iaxs[fr->callno])					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);				break;			case IAX_COMMAND_DPREQ:				/* Request status in the dialplan */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}				break;			case IAX_COMMAND_HANGUP:				ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);				ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);				/* Set hangup cause according to remote and hangupsource */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REJECT:				/* Set hangup cause according to remote and hangup source */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno);				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))					iaxs[fr->callno]->error = EPERM;				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_TRANSFER:			{				struct ast_channel *bridged_chan;				struct ast_channel *owner;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}				owner = iaxs[fr->callno]->owner;				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;				if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}				break;			}			case IAX_COMMAND_ACCEPT:				/* Ignore if call is already up or needs authentication or is a TBD */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))					break;				if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}				if (ies.format) {					iaxs[fr->callno]->peerformat = ies.format;				} else {					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}				ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));				if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				} else {					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				if (iaxs[fr->callno]) {					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}				break;			case IAX_COMMAND_POKE:				/* Send back a pong packet with the original timestamp */				send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);				break;			case IAX_COMMAND_PING:			{				struct iax_ie_data pingied;				construct_rr(iaxs[fr->callno], &pingied);				/* Send back a pong packet with the original timestamp */				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);			}				break;			case IAX_COMMAND_PONG:				/* Calculate ping time */				iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;				/* save RR info */				save_rr(fr, &ies);				/* Good time to write jb stats for this call */				log_jitterstats(fr->callno);				if (iaxs[fr->callno]->peerpoke) {					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}				break;			case IAX_COMMAND_LAGRQ:			case IAX_COMMAND_LAGRP:				f.src = "LAGRQ";				f.mallocd = 0;				f.offset = 0;				f.samples = 0;				iax_frame_wrap(fr, &f);				if (f.subclass.integer == IAX_COMMAND_LAGRQ) {					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				} else {					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}				break;			case IAX_COMMAND_AUTHREQ:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					};					ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));					iax2_queue_frame(fr->callno, &hangup_fr);				}				break;			case IAX_COMMAND_AUTHREP:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				/* Ignore once we've started */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_verify(iaxs[fr->callno], &ies)) {					if (authdebug)						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);					memset(&ied0, 0, sizeof(ied0));					auth_fail(fr->callno, IAX_COMMAND_REJECT);					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					/* This might re-enter the IAX code and need the lock */					exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);				} else					exists = 0;				if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}				} else {					/* Select an appropriate format */					if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					} else {						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}					if (!format) {						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}					if (format) {						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}				}				break;			case IAX_COMMAND_DIAL:immediatedial:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}				}				break;			case IAX_COMMAND_INVAL:				iaxs[fr->callno]->error = ENOTCONN;				ast_debug(1, "Immediately destroying %d, having received INVAL\n", fr->callno);				iax2_destroy(fr->callno);				ast_debug(1, "Destroying call %d\n", fr->callno);				break;			case IAX_COMMAND_VNAK:				ast_debug(1, "Received VNAK: resending outstanding frames\n");				/* Force retransmission */				vnak_retransmit(fr->callno, fr->iseqno);				break;			case IAX_COMMAND_REGREQ:			case IAX_COMMAND_REGREL:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (register_verify(fr->callno, &sin, &ies)) {					if (!iaxs[fr->callno]) {						break;					}					/* Send delayed failure */					auth_fail(fr->callno, IAX_COMMAND_REGREJ);					break;				}				if (!iaxs[fr->callno]) {					break;				}				if ((ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||						ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)) {					if (f.subclass.integer == IAX_COMMAND_REGREL) {						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}					if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {						ast_log(LOG_WARNING, "Registry error\n");					}					if (!iaxs[fr->callno]) {						break;					}					if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}					break;				}				registry_authrequest(fr->callno);				break;			case IAX_COMMAND_REGACK:				if (iax2_ack_registry(&ies, &sin, fr->callno)) 					ast_log(LOG_WARNING, "Registration failure\n");				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGREJ:				if (iaxs[fr->callno]->reg) {					if (authdebug) {						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}					iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGAUTH:				/* Authentication request */				if (registry_rerequest(&ies, fr->callno, &sin)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				}				break;			case IAX_COMMAND_TXREJ:				iaxs[fr->callno]->transferring = 0;				ast_verb(3, "Channel '%s' unable to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");				memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer));				if (iaxs[fr->callno]->bridgecallno) {					if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}				}				break;			case IAX_COMMAND_TXREADY:				if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||				    (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)) {					if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)						iaxs[fr->callno]->transferring = TRANSFER_MREADY;					else						iaxs[fr->callno]->transferring = TRANSFER_READY;					ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					if (iaxs[fr->callno]->bridgecallno) {						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}				}				break;			case IAX_COMMAND_TXREQ:				try_transfer(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_TXCNT:				if (iaxs[fr->callno]->transferring)					send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);				break;			case IAX_COMMAND_TXREL:				/* Send ack immediately, rather than waiting until we've changed addresses */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				complete_transfer(fr->callno, &ies);				stop_stuff(fr->callno);	/* for attended transfer to work with libiax */				break;				case IAX_COMMAND_TXMEDIA:				if (iaxs[fr->callno]->transferring == TRANSFER_READY) {					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding frames and start anew */						if (cur->transfer) {							cur->retries = -1;						}					}					/* Start sending our media to the transfer address, but otherwise leave the call as-is */					iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;				}				break;			case IAX_COMMAND_RTKEY:				if (!IAX_CALLENCRYPTED(iaxs[fr->callno])) {					ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					);					break;				}				IAX_DEBUGDIGEST("Receiving", ies.challenge);				ast_aes_set_decrypt_key((unsigned char *) ies.challenge, &iaxs[fr->callno]->dcx);				break;			case IAX_COMMAND_DPREP:				complete_dpreply(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_UNSUPPORT:				ast_log(LOG_NOTICE, "Peer did not understand our iax command '%d'\n", ies.iax_unknown);				break;			case IAX_COMMAND_FWDOWNL:				/* Firmware download */				if (!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)) {					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);					break;				}				memset(&ied0, 0, sizeof(ied0));				res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc);				if (res < 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				else if (res > 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				else					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				break;			case IAX_COMMAND_CALLTOKEN:			{				struct iax_frame *cur;				/* find last sent frame */				if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata) {					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);				}				break;			}			default:				ast_debug(1, "Unknown IAX command %d on %d/%d\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno);				memset(&ied0, 0, sizeof(ied0));				iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer);				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1);			}			/* Free remote variables (if any) */			if (ies.vars) {				ast_variables_destroy(ies.vars);				ast_debug(1, "I can haz IAX vars, but they is no good :-(\n");				ies.vars = NULL;			}			/* Don't actually pass these frames along */			if ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) {				if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);			}			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}
if (iaxdebug)			ast_debug(1, "Received packet %d, (%d, %u)\n", fh->oseqno, f.frametype, f.subclass.integer);
iaxdebug
iaxdebug
ast_debug(1, "Received packet %d, (%d, %u)\n", fh->oseqno, f.frametype, f.subclass.integer);
ast_debug(1, "Received packet %d, (%d, %u)\n", fh->oseqno, f.frametype, f.subclass.integer)
ast_debug
ast_debug
1
"Received packet %d, (%d, %u)\n"
fh->oseqno
fh
fh
oseqno
f.frametype
f
f
frametype
f.subclass.integer
f.subclass
f
f
subclass
integer
fr->oseqno = fh->oseqno;
fr->oseqno = fh->oseqno
fr->oseqno
fr
fr
oseqno
fh->oseqno
fh
fh
oseqno
fr->iseqno = fh->iseqno;
fr->iseqno = fh->iseqno
fr->iseqno
fr
fr
iseqno
fh->iseqno
fh
fh
iseqno
fr->ts = ntohl(fh->ts);
fr->ts = ntohl(fh->ts)
fr->ts
fr
fr
ts
ntohl(fh->ts)
ntohl
ntohl
fh->ts
fh
fh
ts
if ((ntohs(fh->dcallno) & IAX_FLAG_RETRANS) || (f.frametype != AST_FRAME_VOICE))			updatehistory = 0;
(ntohs(fh->dcallno) & IAX_FLAG_RETRANS) || (f.frametype != AST_FRAME_VOICE)
(ntohs(fh->dcallno) & IAX_FLAG_RETRANS)
ntohs(fh->dcallno) & IAX_FLAG_RETRANS
ntohs(fh->dcallno)
ntohs
ntohs
fh->dcallno
fh
fh
dcallno
IAX_FLAG_RETRANS
IAX_FLAG_RETRANS
(f.frametype != AST_FRAME_VOICE)
f.frametype != AST_FRAME_VOICE
f.frametype
f
f
frametype
AST_FRAME_VOICE
AST_FRAME_VOICE
updatehistory = 0;
updatehistory = 0
updatehistory
updatehistory
0
if ((iaxs[fr->callno]->iseqno != fr->oseqno) &&			(iaxs[fr->callno]->iseqno ||				((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC)) ||				(f.frametype != AST_FRAME_IAX))) {			if (			 ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) ||			  (f.frametype != AST_FRAME_IAX)) {				/* If it's not an ACK packet, it's out of order. */				ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);				/* Check to see if we need to request retransmission,				 * and take sequence number wraparound into account */				if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				} else {					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}				ast_variables_destroy(ies.vars);				ast_mutex_unlock(&iaxsl[fr->callno]);				return 1;			}		} else {			/* Increment unless it's an ACK or VNAK */			if (((f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK)) ||			    (f.frametype != AST_FRAME_IAX))				iaxs[fr->callno]->iseqno++;		}
(iaxs[fr->callno]->iseqno != fr->oseqno) &&			(iaxs[fr->callno]->iseqno ||				((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC)) ||				(f.frametype != AST_FRAME_IAX))
(iaxs[fr->callno]->iseqno != fr->oseqno)
iaxs[fr->callno]->iseqno != fr->oseqno
iaxs[fr->callno]->iseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iseqno
fr->oseqno
fr
fr
oseqno
(iaxs[fr->callno]->iseqno ||				((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC)) ||				(f.frametype != AST_FRAME_IAX))
iaxs[fr->callno]->iseqno ||				((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC)) ||				(f.frametype != AST_FRAME_IAX)
iaxs[fr->callno]->iseqno ||				((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC))
iaxs[fr->callno]->iseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iseqno
((f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC))
(f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXACC)
(f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_UNQUELCH )
(f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */				(f.subclass.integer != IAX_COMMAND_TXREL)
(f.subclass.integer != IAX_COMMAND_TXCNT) &&				(f.subclass.integer != IAX_COMMAND_TXREADY)
(f.subclass.integer != IAX_COMMAND_TXCNT)
f.subclass.integer != IAX_COMMAND_TXCNT
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXCNT
IAX_COMMAND_TXCNT
(f.subclass.integer != IAX_COMMAND_TXREADY)
f.subclass.integer != IAX_COMMAND_TXREADY
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXREADY
IAX_COMMAND_TXREADY
(f.subclass.integer != IAX_COMMAND_TXREL)
f.subclass.integer != IAX_COMMAND_TXREL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXREL
IAX_COMMAND_TXREL
(f.subclass.integer != IAX_COMMAND_UNQUELCH )
f.subclass.integer != IAX_COMMAND_UNQUELCH
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_UNQUELCH
IAX_COMMAND_UNQUELCH
(f.subclass.integer != IAX_COMMAND_TXACC)
f.subclass.integer != IAX_COMMAND_TXACC
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXACC
IAX_COMMAND_TXACC
(f.frametype != AST_FRAME_IAX)
f.frametype != AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
{			if (			 ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) ||			  (f.frametype != AST_FRAME_IAX)) {				/* If it's not an ACK packet, it's out of order. */				ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);				/* Check to see if we need to request retransmission,				 * and take sequence number wraparound into account */				if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				} else {					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}				ast_variables_destroy(ies.vars);				ast_mutex_unlock(&iaxsl[fr->callno]);				return 1;			}		}
if (			 ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) ||			  (f.frametype != AST_FRAME_IAX)) {				/* If it's not an ACK packet, it's out of order. */				ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);				/* Check to see if we need to request retransmission,				 * and take sequence number wraparound into account */				if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				} else {					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}				ast_variables_destroy(ies.vars);				ast_mutex_unlock(&iaxsl[fr->callno]);				return 1;			}
((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) ||			  (f.frametype != AST_FRAME_IAX)
((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK))
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH ) &&	/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXACC)
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_UNQUELCH )
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY) &&		/* for attended transfer */			  (f.subclass.integer != IAX_COMMAND_TXREL)
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXREADY)
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_INVAL)
(f.subclass.integer != IAX_COMMAND_ACK)
f.subclass.integer != IAX_COMMAND_ACK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_ACK
IAX_COMMAND_ACK
(f.subclass.integer != IAX_COMMAND_INVAL)
f.subclass.integer != IAX_COMMAND_INVAL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_INVAL
IAX_COMMAND_INVAL
(f.subclass.integer != IAX_COMMAND_TXCNT)
f.subclass.integer != IAX_COMMAND_TXCNT
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXCNT
IAX_COMMAND_TXCNT
(f.subclass.integer != IAX_COMMAND_TXREADY)
f.subclass.integer != IAX_COMMAND_TXREADY
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXREADY
IAX_COMMAND_TXREADY
(f.subclass.integer != IAX_COMMAND_TXREL)
f.subclass.integer != IAX_COMMAND_TXREL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXREL
IAX_COMMAND_TXREL
(f.subclass.integer != IAX_COMMAND_UNQUELCH )
f.subclass.integer != IAX_COMMAND_UNQUELCH
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_UNQUELCH
IAX_COMMAND_UNQUELCH
(f.subclass.integer != IAX_COMMAND_TXACC)
f.subclass.integer != IAX_COMMAND_TXACC
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXACC
IAX_COMMAND_TXACC
(f.subclass.integer != IAX_COMMAND_VNAK)
f.subclass.integer != IAX_COMMAND_VNAK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_VNAK
IAX_COMMAND_VNAK
(f.frametype != AST_FRAME_IAX)
f.frametype != AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
{				/* If it's not an ACK packet, it's out of order. */				ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);				/* Check to see if we need to request retransmission,				 * and take sequence number wraparound into account */				if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				} else {					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}				ast_variables_destroy(ies.vars);				ast_mutex_unlock(&iaxsl[fr->callno]);				return 1;			}
ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer);
ast_debug(1, "Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n",					iaxs[fr->callno]->iseqno, fr->oseqno, f.frametype, f.subclass.integer)
ast_debug
ast_debug
1
"Packet arrived out of order (expecting %d, got %d) (frametype = %d, subclass = %d)\n"
iaxs[fr->callno]->iseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iseqno
fr->oseqno
fr
fr
oseqno
f.frametype
f
f
frametype
f.subclass.integer
f.subclass
f
f
subclass
integer
if ((unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128) {					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				} else {					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}
(unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno) < 128
(unsigned char) (iaxs[fr->callno]->iseqno - fr->oseqno)
unsigned char
unsigned char

(iaxs[fr->callno]->iseqno - fr->oseqno)
iaxs[fr->callno]->iseqno - fr->oseqno
iaxs[fr->callno]->iseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iseqno
fr->oseqno
fr
fr
oseqno
128
{					/* If we've already seen it, ack it XXX There's a border condition here XXX */					if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}				}
if ((f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))) {						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}
(f.frametype != AST_FRAME_IAX) ||							((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))
(f.frametype != AST_FRAME_IAX)
f.frametype != AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
((f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL))
(f.subclass.integer != IAX_COMMAND_ACK) && (f.subclass.integer != IAX_COMMAND_INVAL)
(f.subclass.integer != IAX_COMMAND_ACK)
f.subclass.integer != IAX_COMMAND_ACK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_ACK
IAX_COMMAND_ACK
(f.subclass.integer != IAX_COMMAND_INVAL)
f.subclass.integer != IAX_COMMAND_INVAL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_INVAL
IAX_COMMAND_INVAL
{						ast_debug(1, "Acking anyway\n");						/* XXX Maybe we should handle its ack to us, but then again, it's probably outdated anyway, and if						   we have anything to send, we'll retransmit and get an ACK back anyway XXX */						send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					}
ast_debug(1, "Acking anyway\n");
ast_debug(1, "Acking anyway\n")
ast_debug
ast_debug
1
"Acking anyway\n"
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
{					/* Send a VNAK requesting retransmission */					iax2_vnak(fr->callno);				}
iax2_vnak(fr->callno);
iax2_vnak(fr->callno)
iax2_vnak
iax2_vnak
fr->callno
fr
fr
callno
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
return 1;
1
{			/* Increment unless it's an ACK or VNAK */			if (((f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK)) ||			    (f.frametype != AST_FRAME_IAX))				iaxs[fr->callno]->iseqno++;		}
if (((f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK)) ||			    (f.frametype != AST_FRAME_IAX))				iaxs[fr->callno]->iseqno++;
((f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK)) ||			    (f.frametype != AST_FRAME_IAX)
((f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK))
(f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC) &&				(f.subclass.integer != IAX_COMMAND_VNAK)
(f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT) &&			    (f.subclass.integer != IAX_COMMAND_TXACC)
(f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL) &&			    (f.subclass.integer != IAX_COMMAND_TXCNT)
(f.subclass.integer != IAX_COMMAND_ACK) &&			    (f.subclass.integer != IAX_COMMAND_INVAL)
(f.subclass.integer != IAX_COMMAND_ACK)
f.subclass.integer != IAX_COMMAND_ACK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_ACK
IAX_COMMAND_ACK
(f.subclass.integer != IAX_COMMAND_INVAL)
f.subclass.integer != IAX_COMMAND_INVAL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_INVAL
IAX_COMMAND_INVAL
(f.subclass.integer != IAX_COMMAND_TXCNT)
f.subclass.integer != IAX_COMMAND_TXCNT
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXCNT
IAX_COMMAND_TXCNT
(f.subclass.integer != IAX_COMMAND_TXACC)
f.subclass.integer != IAX_COMMAND_TXACC
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXACC
IAX_COMMAND_TXACC
(f.subclass.integer != IAX_COMMAND_VNAK)
f.subclass.integer != IAX_COMMAND_VNAK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_VNAK
IAX_COMMAND_VNAK
(f.frametype != AST_FRAME_IAX)
f.frametype != AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
iaxs[fr->callno]->iseqno++;
iaxs[fr->callno]->iseqno++
iaxs[fr->callno]->iseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iseqno
if (f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != '\0') {			if (res < thread->buf_size)				thread->buf[res++] = '\0';			else /* Trims one character from the text message, but that's better than overwriting the end of the buffer. */				thread->buf[res - 1] = '\0';		}
f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != '\0'
f.frametype == AST_FRAME_TEXT
f.frametype
f
f
frametype
AST_FRAME_TEXT
AST_FRAME_TEXT
thread->buf[res - 1] != '\0'
thread->buf[res - 1]
thread->buf
thread
thread
buf
res - 1
res
res
1
'\0'
{			if (res < thread->buf_size)				thread->buf[res++] = '\0';			else /* Trims one character from the text message, but that's better than overwriting the end of the buffer. */				thread->buf[res - 1] = '\0';		}
if (res < thread->buf_size)				thread->buf[res++] = '\0';			else /* Trims one character from the text message, but that's better than overwriting the end of the buffer. */				thread->buf[res - 1] = '\0';
res < thread->buf_size
res
res
thread->buf_size
thread
thread
buf_size
thread->buf[res++] = '\0';
thread->buf[res++] = '\0'
thread->buf[res++]
thread->buf
thread
thread
buf
res++
res
res
'\0'
thread->buf[res - 1] = '\0';
thread->buf[res - 1] = '\0'
thread->buf[res - 1]
thread->buf
thread
thread
buf
res - 1
res
res
1
'\0'
if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&		    ((f.subclass.integer != IAX_COMMAND_INVAL) ||		     (f.frametype != AST_FRAME_IAX))) {			unsigned char x;			int call_to_destroy;			/* First we have to qualify that the ACKed value is within our window */			if (iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno))				x = fr->iseqno;			else				x = iaxs[fr->callno]->oseqno;			if ((x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)) {				/* The acknowledgement is within our window.  Time to acknowledge everything				   that it says to */				for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}				/* Note how much we've received acknowledgement for */				if (iaxs[fr->callno])					iaxs[fr->callno]->rseqno = fr->iseqno;				else {					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			} else {				ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);			}		}
!inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&		    ((f.subclass.integer != IAX_COMMAND_INVAL) ||		     (f.frametype != AST_FRAME_IAX))
!inaddrcmp(&sin, &iaxs[fr->callno]->addr)
inaddrcmp(&sin, &iaxs[fr->callno]->addr)
inaddrcmp
inaddrcmp
&sin
sin
sin
&iaxs[fr->callno]->addr
iaxs[fr->callno]->addr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
addr
((f.subclass.integer != IAX_COMMAND_INVAL) ||		     (f.frametype != AST_FRAME_IAX))
(f.subclass.integer != IAX_COMMAND_INVAL) ||		     (f.frametype != AST_FRAME_IAX)
(f.subclass.integer != IAX_COMMAND_INVAL)
f.subclass.integer != IAX_COMMAND_INVAL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_INVAL
IAX_COMMAND_INVAL
(f.frametype != AST_FRAME_IAX)
f.frametype != AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
{			unsigned char x;			int call_to_destroy;			/* First we have to qualify that the ACKed value is within our window */			if (iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno))				x = fr->iseqno;			else				x = iaxs[fr->callno]->oseqno;			if ((x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)) {				/* The acknowledgement is within our window.  Time to acknowledge everything				   that it says to */				for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}				/* Note how much we've received acknowledgement for */				if (iaxs[fr->callno])					iaxs[fr->callno]->rseqno = fr->iseqno;				else {					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			} else {				ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);			}		}
unsigned char x;
unsigned char x;
unsigned char
x
x
int call_to_destroy;
int call_to_destroy;
int
call_to_destroy
call_to_destroy
if (iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno))				x = fr->iseqno;			else				x = iaxs[fr->callno]->oseqno;
iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno)
iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno
iaxs[fr->callno]->rseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rseqno
iaxs[fr->callno]->oseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
oseqno
(fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno)
fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno
fr->iseqno >= iaxs[fr->callno]->rseqno
fr->iseqno
fr
fr
iseqno
iaxs[fr->callno]->rseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rseqno
fr->iseqno < iaxs[fr->callno]->oseqno
fr->iseqno
fr
fr
iseqno
iaxs[fr->callno]->oseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
oseqno
x = fr->iseqno;
x = fr->iseqno
x
x
fr->iseqno
fr
fr
iseqno
x = iaxs[fr->callno]->oseqno;
x = iaxs[fr->callno]->oseqno
x
x
iaxs[fr->callno]->oseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
oseqno
if ((x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)) {				/* The acknowledgement is within our window.  Time to acknowledge everything				   that it says to */				for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}				/* Note how much we've received acknowledgement for */				if (iaxs[fr->callno])					iaxs[fr->callno]->rseqno = fr->iseqno;				else {					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			} else {				ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);			}
(x != iaxs[fr->callno]->oseqno) || (iaxs[fr->callno]->oseqno == fr->iseqno)
(x != iaxs[fr->callno]->oseqno)
x != iaxs[fr->callno]->oseqno
x
x
iaxs[fr->callno]->oseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
oseqno
(iaxs[fr->callno]->oseqno == fr->iseqno)
iaxs[fr->callno]->oseqno == fr->iseqno
iaxs[fr->callno]->oseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
oseqno
fr->iseqno
fr
fr
iseqno
{				/* The acknowledgement is within our window.  Time to acknowledge everything				   that it says to */				for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}				/* Note how much we've received acknowledgement for */				if (iaxs[fr->callno])					iaxs[fr->callno]->rseqno = fr->iseqno;				else {					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			}
for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++) {					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}
x=iaxs[fr->callno]->rseqno;
x=iaxs[fr->callno]->rseqno
x
x
iaxs[fr->callno]->rseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rseqno
x != fr->iseqno
x
x
fr->iseqno
fr
fr
iseqno
x++
x
x
{					/* Ack the packet with the given timestamp */					if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);					call_to_destroy = 0;					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}					if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}				}
if (iaxdebug)						ast_debug(1, "Cancelling transmission of packet %d\n", x);
iaxdebug
iaxdebug
ast_debug(1, "Cancelling transmission of packet %d\n", x);
ast_debug(1, "Cancelling transmission of packet %d\n", x)
ast_debug
ast_debug
1
"Cancelling transmission of packet %d\n"
x
x
call_to_destroy = 0;
call_to_destroy = 0
call_to_destroy
call_to_destroy
0
AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list)
AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&frame_queue[fr->callno]
frame_queue[fr->callno]
frame_queue
frame_queue
fr->callno
fr
fr
callno
cur
cur
list
list
)
{						/* If it's our call, and our timestamp, mark -1 retries */						if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}					}
if (x == cur->oseqno) {							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}
x == cur->oseqno
x
x
cur->oseqno
cur
cur
oseqno
{							cur->retries = -1;							/* Destroy call if this is the end */							if (cur->final)								call_to_destroy = fr->callno;						}
cur->retries = -1;
cur->retries = -1
cur->retries
cur
cur
retries
-1
1
if (cur->final)								call_to_destroy = fr->callno;
cur->final
cur
cur
final
call_to_destroy = fr->callno;
call_to_destroy = fr->callno
call_to_destroy
call_to_destroy
fr->callno
fr
fr
callno
if (call_to_destroy) {						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}
call_to_destroy
call_to_destroy
{						if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);						ast_mutex_lock(&iaxsl[call_to_destroy]);						iax2_destroy(call_to_destroy);						ast_mutex_unlock(&iaxsl[call_to_destroy]);					}
if (iaxdebug)							ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);
iaxdebug
iaxdebug
ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy);
ast_debug(1, "Really destroying %d, having been acked on final message\n", call_to_destroy)
ast_debug
ast_debug
1
"Really destroying %d, having been acked on final message\n"
call_to_destroy
call_to_destroy
ast_mutex_lock(&iaxsl[call_to_destroy]);
ast_mutex_lock(&iaxsl[call_to_destroy]);
ast_mutex_lock
ast_mutex_lock
(&iaxsl[call_to_destroy])
&iaxsl[call_to_destroy]
&
iaxsl
[call_to_destroy]
call_to_destroy
call_to_destroy
iax2_destroy(call_to_destroy);
iax2_destroy(call_to_destroy)
iax2_destroy
iax2_destroy
call_to_destroy
call_to_destroy
ast_mutex_unlock(&iaxsl[call_to_destroy]);
ast_mutex_unlock(&iaxsl[call_to_destroy])
ast_mutex_unlock
ast_mutex_unlock
&iaxsl[call_to_destroy]
iaxsl[call_to_destroy]
iaxsl
iaxsl
call_to_destroy
call_to_destroy
if (iaxs[fr->callno])					iaxs[fr->callno]->rseqno = fr->iseqno;				else {					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iaxs[fr->callno]->rseqno = fr->iseqno;
iaxs[fr->callno]->rseqno = fr->iseqno
iaxs[fr->callno]->rseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rseqno
fr->iseqno
fr
fr
iseqno
{					/* Stop processing now */					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
return 1;
1
{				ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);			}
ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno);
ast_debug(1, "Received iseqno %d not within window %d->%d\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno)
ast_debug
ast_debug
1
"Received iseqno %d not within window %d->%d\n"
fr->iseqno
fr
fr
iseqno
iaxs[fr->callno]->rseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rseqno
iaxs[fr->callno]->oseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
oseqno
if (inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&			((f.frametype != AST_FRAME_IAX) ||			 ((f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)))) {			/* Only messages we accept from a transfer host are TXACC and TXCNT */			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}
inaddrcmp(&sin, &iaxs[fr->callno]->addr) &&			((f.frametype != AST_FRAME_IAX) ||			 ((f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)))
inaddrcmp(&sin, &iaxs[fr->callno]->addr)
inaddrcmp
inaddrcmp
&sin
sin
sin
&iaxs[fr->callno]->addr
iaxs[fr->callno]->addr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
addr
((f.frametype != AST_FRAME_IAX) ||			 ((f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)))
(f.frametype != AST_FRAME_IAX) ||			 ((f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT))
(f.frametype != AST_FRAME_IAX)
f.frametype != AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
((f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT))
(f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)
(f.subclass.integer != IAX_COMMAND_TXACC)
f.subclass.integer != IAX_COMMAND_TXACC
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXACC
IAX_COMMAND_TXACC
(f.subclass.integer != IAX_COMMAND_TXCNT)
f.subclass.integer != IAX_COMMAND_TXCNT
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXCNT
IAX_COMMAND_TXCNT
{			/* Only messages we accept from a transfer host are TXACC and TXCNT */			ast_variables_destroy(ies.vars);			ast_mutex_unlock(&iaxsl[fr->callno]);			return 1;		}
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
return 1;
1
if ((f.frametype == AST_FRAME_VOICE) ||		    (f.frametype == AST_FRAME_VIDEO) ||		    (f.frametype == AST_FRAME_IAX)) {			if (ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)) {				ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);				if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			}			if (ies.vars) {				struct ast_datastore *variablestore = NULL;				struct ast_variable *var, *prev = NULL;				AST_LIST_HEAD(, ast_var_t) *varlist;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				if ((c = iaxs[fr->callno]->owner)) {					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				} else {					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}			}			if (ies.vars) {				ast_debug(1, "I have IAX variables, but they were not processed\n");			}		}
(f.frametype == AST_FRAME_VOICE) ||		    (f.frametype == AST_FRAME_VIDEO) ||		    (f.frametype == AST_FRAME_IAX)
(f.frametype == AST_FRAME_VOICE) ||		    (f.frametype == AST_FRAME_VIDEO)
(f.frametype == AST_FRAME_VOICE)
f.frametype == AST_FRAME_VOICE
f.frametype
f
f
frametype
AST_FRAME_VOICE
AST_FRAME_VOICE
(f.frametype == AST_FRAME_VIDEO)
f.frametype == AST_FRAME_VIDEO
f.frametype
f
f
frametype
AST_FRAME_VIDEO
AST_FRAME_VIDEO
(f.frametype == AST_FRAME_IAX)
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
{			if (ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)) {				ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);				if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			}			if (ies.vars) {				struct ast_datastore *variablestore = NULL;				struct ast_variable *var, *prev = NULL;				AST_LIST_HEAD(, ast_var_t) *varlist;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				if ((c = iaxs[fr->callno]->owner)) {					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				} else {					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}			}			if (ies.vars) {				ast_debug(1, "I have IAX variables, but they were not processed\n");			}		}
if (ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)) {				ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);				if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			}
ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_DELAYPBXSTART
IAX_DELAYPBXSTART
{				ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);				if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}			}
ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);
ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)
ast_clear_flag64
ast_clear_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_DELAYPBXSTART
IAX_DELAYPBXSTART
if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}
!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))
ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,						  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED))
ast_iax2_new
ast_iax2_new
fr->callno
fr
fr
callno
AST_STATE_RING
AST_STATE_RING
iaxs[fr->callno]->chosenformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
chosenformat
NULL
NULL
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_AUTHENTICATED
IAX_STATE_AUTHENTICATED
{					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
return 1;
1
if (ies.vars) {				struct ast_datastore *variablestore = NULL;				struct ast_variable *var, *prev = NULL;				AST_LIST_HEAD(, ast_var_t) *varlist;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				if ((c = iaxs[fr->callno]->owner)) {					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				} else {					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}			}
ies.vars
ies
ies
vars
{				struct ast_datastore *variablestore = NULL;				struct ast_variable *var, *prev = NULL;				AST_LIST_HEAD(, ast_var_t) *varlist;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}				if ((c = iaxs[fr->callno]->owner)) {					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				} else {					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}			}
struct ast_datastore *variablestore = NULL;
struct ast_datastore *variablestore = NULL;
struct ast_datastore
ast_datastore
*variablestore = NULL
*
variablestore
= NULL
NULL
NULL
struct ast_variable *var, *prev = NULL;
struct ast_variable *var, *prev = NULL;
struct ast_variable
ast_variable
*var
*
var
*prev = NULL
*
prev
= NULL
NULL
NULL
AST_LIST_HEAD(, ast_var_t) *varlist;
iax2_lock_owner(fr->callno);
iax2_lock_owner(fr->callno)
iax2_lock_owner
iax2_lock_owner
fr->callno
fr
fr
callno
if (!iaxs[fr->callno]) {					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{					ast_variables_destroy(ies.vars);					ast_mutex_unlock(&iaxsl[fr->callno]);					return 1;				}
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
return 1;
1
if ((c = iaxs[fr->callno]->owner)) {					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				} else {					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}
(c = iaxs[fr->callno]->owner)
c = iaxs[fr->callno]->owner
c
c
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{					varlist = ast_calloc(1, sizeof(*varlist));					variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);					if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}					ast_channel_unlock(c);				}
varlist = ast_calloc(1, sizeof(*varlist));
varlist = ast_calloc(1, sizeof(*varlist))
varlist
varlist
ast_calloc(1, sizeof(*varlist))
ast_calloc
ast_calloc
1
sizeof(*varlist)
(*varlist)
*varlist
varlist
varlist
variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);
variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
variablestore
variablestore
ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
ast_datastore_alloc
ast_datastore_alloc
&iax2_variable_datastore_info
iax2_variable_datastore_info
iax2_variable_datastore_info
NULL
NULL
if (variablestore && varlist) {						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					} else {						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}
variablestore && varlist
variablestore
variablestore
varlist
varlist
{						variablestore->data = varlist;						variablestore->inheritance = DATASTORE_INHERIT_FOREVER;						AST_LIST_HEAD_INIT(varlist);						ast_debug(1, "I can haz IAX vars?\n");						for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}						if (prev) {							ast_free(prev);						}						ies.vars = NULL;						ast_channel_datastore_add(c, variablestore);					}
variablestore->data = varlist;
variablestore->data = varlist
variablestore->data
variablestore
variablestore
data
varlist
varlist
variablestore->inheritance = DATASTORE_INHERIT_FOREVER;
variablestore->inheritance = DATASTORE_INHERIT_FOREVER
variablestore->inheritance
variablestore
variablestore
inheritance
DATASTORE_INHERIT_FOREVER
DATASTORE_INHERIT_FOREVER
AST_LIST_HEAD_INIT(varlist);
AST_LIST_HEAD_INIT(varlist);
AST_LIST_HEAD_INIT
AST_LIST_HEAD_INIT
(varlist)
varlist
varlist
ast_debug(1, "I can haz IAX vars?\n");
ast_debug(1, "I can haz IAX vars?\n")
ast_debug
ast_debug
1
"I can haz IAX vars?\n"
for (var = ies.vars; var; var = var->next) {							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}
var = ies.vars;
var = ies.vars
var
var
ies.vars
ies
ies
vars
var
var
var = var->next
var
var
var->next
var
var
next
{							struct ast_var_t *newvar = ast_var_assign(var->name, var->value);							if (prev) {								ast_free(prev);							}							prev = var;							if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}						}
struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
struct ast_var_t
ast_var_t
*newvar = ast_var_assign(var->name, var->value)
*
newvar
= ast_var_assign(var->name, var->value)
ast_var_assign(var->name, var->value)
ast_var_assign
ast_var_assign
var->name
var
var
name
var->value
var
var
value
if (prev) {								ast_free(prev);							}
prev
prev
{								ast_free(prev);							}
ast_free(prev);
ast_free(prev)
ast_free
ast_free
prev
prev
prev = var;
prev = var
prev
prev
var
var
if (!newvar) {								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							} else {								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}
!newvar
newvar
newvar
{								/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");							}
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n")
ast_log
ast_log
LOG_ERROR
LOG_ERROR
"Memory allocation error while processing IAX2 variables\n"
{								AST_LIST_INSERT_TAIL(varlist, newvar, entries);							}
AST_LIST_INSERT_TAIL(varlist, newvar, entries);
AST_LIST_INSERT_TAIL(varlist, newvar, entries)
AST_LIST_INSERT_TAIL
AST_LIST_INSERT_TAIL
varlist
varlist
newvar
newvar
entries
entries
if (prev) {							ast_free(prev);						}
prev
prev
{							ast_free(prev);						}
ast_free(prev);
ast_free(prev)
ast_free
ast_free
prev
prev
ies.vars = NULL;
ies.vars = NULL
ies.vars
ies
ies
vars
NULL
NULL
ast_channel_datastore_add(c, variablestore);
ast_channel_datastore_add(c, variablestore)
ast_channel_datastore_add
ast_channel_datastore_add
c
c
variablestore
variablestore
{						ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");						if (variablestore) {							ast_datastore_free(variablestore);						}						if (varlist) {							ast_free(varlist);						}					}
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n")
ast_log
ast_log
LOG_ERROR
LOG_ERROR
"Memory allocation error while processing IAX2 variables\n"
if (variablestore) {							ast_datastore_free(variablestore);						}
variablestore
variablestore
{							ast_datastore_free(variablestore);						}
ast_datastore_free(variablestore);
ast_datastore_free(variablestore)
ast_datastore_free
ast_datastore_free
variablestore
variablestore
if (varlist) {							ast_free(varlist);						}
varlist
varlist
{							ast_free(varlist);						}
ast_free(varlist);
ast_free(varlist);
ast_free
ast_free
(varlist)
varlist
varlist
ast_channel_unlock(c);
ast_channel_unlock(c)
ast_channel_unlock
ast_channel_unlock
c
c
{					/* No channel yet, so transfer the variables directly over to the pvt,					 * for later inheritance. */					ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");					for (var = ies.vars; var && var->next; var = var->next);					if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}				}
ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n");
ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\n")
ast_debug
ast_debug
1
"No channel, so populating IAXVARs to the pvt, as an intermediate step.\n"
for (var = ies.vars; var && var->next; var = var->next);
var = ies.vars;
var = ies.vars
var
var
ies.vars
ies
ies
vars
var && var->next
var
var
var->next
var
var
next
var = var->next
var
var
var->next
var
var
next
;
if (var) {						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}
var
var
{						var->next = iaxs[fr->callno]->iaxvars;						iaxs[fr->callno]->iaxvars = ies.vars;						ies.vars = NULL;					}
var->next = iaxs[fr->callno]->iaxvars;
var->next = iaxs[fr->callno]->iaxvars
var->next
var
var
next
iaxs[fr->callno]->iaxvars
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iaxvars
iaxs[fr->callno]->iaxvars = ies.vars;
iaxs[fr->callno]->iaxvars = ies.vars
iaxs[fr->callno]->iaxvars
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iaxvars
ies.vars
ies
ies
vars
ies.vars = NULL;
ies.vars = NULL
ies.vars
ies
ies
vars
NULL
NULL
if (ies.vars) {				ast_debug(1, "I have IAX variables, but they were not processed\n");			}
ies.vars
ies
ies
vars
{				ast_debug(1, "I have IAX variables, but they were not processed\n");			}
ast_debug(1, "I have IAX variables, but they were not processed\n");
ast_debug(1, "I have IAX variables, but they were not processed\n")
ast_debug
ast_debug
1
"I have IAX variables, but they were not processed\n"
if ((f.frametype == AST_FRAME_IAX) && (f.subclass.integer != IAX_COMMAND_CALLTOKEN) && iaxs[fr->callno]->hold_signaling) {			send_signaling(iaxs[fr->callno]);		}
(f.frametype == AST_FRAME_IAX) && (f.subclass.integer != IAX_COMMAND_CALLTOKEN) && iaxs[fr->callno]->hold_signaling
(f.frametype == AST_FRAME_IAX) && (f.subclass.integer != IAX_COMMAND_CALLTOKEN)
(f.frametype == AST_FRAME_IAX)
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
(f.subclass.integer != IAX_COMMAND_CALLTOKEN)
f.subclass.integer != IAX_COMMAND_CALLTOKEN
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_CALLTOKEN
IAX_COMMAND_CALLTOKEN
iaxs[fr->callno]->hold_signaling
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
hold_signaling
{			send_signaling(iaxs[fr->callno]);		}
send_signaling(iaxs[fr->callno]);
send_signaling(iaxs[fr->callno]);
send_signaling
send_signaling
(iaxs[fr->callno])
iaxs[fr->callno]
iaxs
[fr->callno]
fr->callno
fr
fr
callno
if (f.frametype == AST_FRAME_VOICE) {			if (ast_format_to_old_bitfield(&f.subclass.format) != iaxs[fr->callno]->voiceformat) {					iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);					ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));					if (iaxs[fr->callno]->owner) {						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}			}		}
f.frametype == AST_FRAME_VOICE
f.frametype
f
f
frametype
AST_FRAME_VOICE
AST_FRAME_VOICE
{			if (ast_format_to_old_bitfield(&f.subclass.format) != iaxs[fr->callno]->voiceformat) {					iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);					ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));					if (iaxs[fr->callno]->owner) {						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}			}		}
if (ast_format_to_old_bitfield(&f.subclass.format) != iaxs[fr->callno]->voiceformat) {					iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);					ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));					if (iaxs[fr->callno]->owner) {						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}			}
ast_format_to_old_bitfield(&f.subclass.format) != iaxs[fr->callno]->voiceformat
ast_format_to_old_bitfield(&f.subclass.format)
ast_format_to_old_bitfield
ast_format_to_old_bitfield
&f.subclass.format
f.subclass.format
f.subclass
f
f
subclass
format
iaxs[fr->callno]->voiceformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
voiceformat
{					iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);					ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));					if (iaxs[fr->callno]->owner) {						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}			}
iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format);
iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format)
iaxs[fr->callno]->voiceformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
voiceformat
ast_format_to_old_bitfield(&f.subclass.format)
ast_format_to_old_bitfield
ast_format_to_old_bitfield
&f.subclass.format
f.subclass.format
f.subclass
f
f
subclass
format
ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format));
ast_debug(1, "Ooh, voice format changed to '%s'\n", ast_getformatname(&f.subclass.format))
ast_debug
ast_debug
1
"Ooh, voice format changed to '%s'\n"
ast_getformatname(&f.subclass.format)
ast_getformatname
ast_getformatname
&f.subclass.format
f.subclass.format
f.subclass
f
f
subclass
format
if (iaxs[fr->callno]->owner) {						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{						iax2_lock_owner(fr->callno);						if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}					}
iax2_lock_owner(fr->callno);
iax2_lock_owner(fr->callno)
iax2_lock_owner
iax2_lock_owner
fr->callno
fr
fr
callno
if (iaxs[fr->callno]) {							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						} else {							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{							if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}						}
if (iaxs[fr->callno]->owner) {								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{								struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));								struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);								if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}							}
struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));
struct ast_format_cap *orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner));
struct ast_format_cap
ast_format_cap
*orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner))
*
orignative
= ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner))
ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner))
ast_format_cap_dup
ast_format_cap_dup
ast_channel_nativeformats(iaxs[fr->callno]->owner)
ast_channel_nativeformats
ast_channel_nativeformats
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);
struct ast_format_cap *native = ast_channel_nativeformats(iaxs[fr->callno]->owner);
struct ast_format_cap
ast_format_cap
*native = ast_channel_nativeformats(iaxs[fr->callno]->owner)
*
native
= ast_channel_nativeformats(iaxs[fr->callno]->owner)
ast_channel_nativeformats(iaxs[fr->callno]->owner)
ast_channel_nativeformats
ast_channel_nativeformats
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
if (orignative) {									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}
orignative
orignative
{									ast_format_cap_set(native, &f.subclass.format);									if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}									ast_format_cap_copy(native, orignative);									ast_channel_unlock(iaxs[fr->callno]->owner);									orignative = ast_format_cap_destroy(orignative);								}
ast_format_cap_set(native, &f.subclass.format);
ast_format_cap_set(native, &f.subclass.format)
ast_format_cap_set
ast_format_cap_set
native
native
&f.subclass.format
f.subclass.format
f.subclass
f
f
subclass
format
if (ast_channel_readformat(iaxs[fr->callno]->owner)->id) {										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}
ast_channel_readformat(iaxs[fr->callno]->owner)->id
ast_channel_readformat(iaxs[fr->callno]->owner)
ast_channel_readformat
ast_channel_readformat
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
id
{										ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));									}
ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));
ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner))
ast_set_read_format
ast_set_read_format
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_readformat(iaxs[fr->callno]->owner)
ast_channel_readformat
ast_channel_readformat
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_format_cap_copy(native, orignative);
ast_format_cap_copy(native, orignative)
ast_format_cap_copy
ast_format_cap_copy
native
native
orignative
orignative
ast_channel_unlock(iaxs[fr->callno]->owner);
ast_channel_unlock(iaxs[fr->callno]->owner)
ast_channel_unlock
ast_channel_unlock
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
orignative = ast_format_cap_destroy(orignative);
orignative = ast_format_cap_destroy(orignative)
orignative
orignative
ast_format_cap_destroy(orignative)
ast_format_cap_destroy
ast_format_cap_destroy
orignative
orignative
{							ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");							/* Free remote variables (if any) */							if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}							ast_mutex_unlock(&iaxsl[fr->callno]);							return 1;						}
ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n");
ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\n")
ast_debug
ast_debug
1
"Neat, somebody took away the channel at a magical time but i found it!\n"
if (ies.vars) {								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}
ies.vars
ies
ies
vars
{								ast_variables_destroy(ies.vars);								ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");								ies.vars = NULL;							}
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n");
ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\n")
ast_debug
ast_debug
1
"I can haz iaxvars, but they is no good.  :-(\n"
ies.vars = NULL;
ies.vars = NULL
ies.vars
ies
ies
vars
NULL
NULL
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
return 1;
1
if (f.frametype == AST_FRAME_VIDEO) {			if (f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)) {				ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));				iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);			}		}
f.frametype == AST_FRAME_VIDEO
f.frametype
f
f
frametype
AST_FRAME_VIDEO
AST_FRAME_VIDEO
{			if (f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)) {				ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));				iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);			}		}
if (f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)) {				ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));				iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);			}
f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)
f.subclass.format.id
f.subclass.format
f.subclass
f
f
subclass
format
id
ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)
ast_format_id_from_old_bitfield
ast_format_id_from_old_bitfield
iaxs[fr->callno]->videoformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
videoformat
{				ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));				iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);			}
ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format));
ast_debug(1, "Ooh, video format changed to %s\n", ast_getformatname(&f.subclass.format))
ast_debug
ast_debug
1
"Ooh, video format changed to %s\n"
ast_getformatname(&f.subclass.format)
ast_getformatname
ast_getformatname
&f.subclass.format
f.subclass.format
f.subclass
f
f
subclass
format
iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format);
iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format)
iaxs[fr->callno]->videoformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
videoformat
ast_format_to_old_bitfield(&f.subclass.format)
ast_format_to_old_bitfield
ast_format_to_old_bitfield
&f.subclass.format
f.subclass.format
f.subclass
f
f
subclass
format
if (f.frametype == AST_FRAME_CONTROL && iaxs[fr->callno]->owner) {			if (f.subclass.integer == AST_CONTROL_BUSY) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);			} else if (f.subclass.integer == AST_CONTROL_CONGESTION) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);			}		}
f.frametype == AST_FRAME_CONTROL && iaxs[fr->callno]->owner
f.frametype == AST_FRAME_CONTROL
f.frametype
f
f
frametype
AST_FRAME_CONTROL
AST_FRAME_CONTROL
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{			if (f.subclass.integer == AST_CONTROL_BUSY) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);			} else if (f.subclass.integer == AST_CONTROL_CONGESTION) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);			}		}
if (f.subclass.integer == AST_CONTROL_BUSY) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);			} else if (f.subclass.integer == AST_CONTROL_CONGESTION) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);			}
f.subclass.integer == AST_CONTROL_BUSY
f.subclass.integer
f.subclass
f
f
subclass
integer
AST_CONTROL_BUSY
AST_CONTROL_BUSY
{				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);			}
ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY);
ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY)
ast_channel_hangupcause_set
ast_channel_hangupcause_set
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
AST_CAUSE_BUSY
AST_CAUSE_BUSY
if (f.subclass.integer == AST_CONTROL_CONGESTION) {				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);			}
f.subclass.integer == AST_CONTROL_CONGESTION
f.subclass.integer
f.subclass
f
f
subclass
integer
AST_CONTROL_CONGESTION
AST_CONTROL_CONGESTION
{				ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);			}
ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION);
ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION)
ast_channel_hangupcause_set
ast_channel_hangupcause_set
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
AST_CAUSE_CONGESTION
AST_CAUSE_CONGESTION
if (f.frametype == AST_FRAME_IAX) {			AST_SCHED_DEL(sched, iaxs[fr->callno]->initid);			/* Handle the IAX pseudo frame itself */			if (iaxdebug)				ast_debug(1, "IAX subclass %d received\n", f.subclass.integer);                        /* Update last ts unless the frame's timestamp originated with us. */			if (iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK &&                            f.subclass.integer != IAX_COMMAND_PONG &&                            f.subclass.integer != IAX_COMMAND_LAGRP) {				iaxs[fr->callno]->last = fr->ts;				if (iaxdebug)					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);			}			iaxs[fr->callno]->last_iax_message = f.subclass.integer;			if (!iaxs[fr->callno]->first_iax_message) {				iaxs[fr->callno]->first_iax_message = f.subclass.integer;			}			switch(f.subclass.integer) {			case IAX_COMMAND_ACK:				/* Do nothing */				break;			case IAX_COMMAND_QUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				break;			case IAX_COMMAND_UNQUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}				break;			case IAX_COMMAND_TXACC:				if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}				break;			case IAX_COMMAND_NEW:				/* Ignore if it's already up */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))					break;				if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}				/* If we're in trunk mode, do it now, and update the trunk number in our frame before continuing */				if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (check_access(fr->callno, &sin, &ies)) {					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				} else					exists = 0;				/* Get OSP token if it does exist */				save_osptoken(fr, &ies);				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}				if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)					merge_encryption(iaxs[fr->callno],ies.encmethods);				else					iaxs[fr->callno]->encmethods = 0;				if (!authenticate_request(fr->callno) && iaxs[fr->callno])					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);				break;			case IAX_COMMAND_DPREQ:				/* Request status in the dialplan */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}				break;			case IAX_COMMAND_HANGUP:				ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);				ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);				/* Set hangup cause according to remote and hangupsource */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REJECT:				/* Set hangup cause according to remote and hangup source */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno);				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))					iaxs[fr->callno]->error = EPERM;				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_TRANSFER:			{				struct ast_channel *bridged_chan;				struct ast_channel *owner;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}				owner = iaxs[fr->callno]->owner;				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;				if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}				break;			}			case IAX_COMMAND_ACCEPT:				/* Ignore if call is already up or needs authentication or is a TBD */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))					break;				if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}				if (ies.format) {					iaxs[fr->callno]->peerformat = ies.format;				} else {					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}				ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));				if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				} else {					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				if (iaxs[fr->callno]) {					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}				break;			case IAX_COMMAND_POKE:				/* Send back a pong packet with the original timestamp */				send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);				break;			case IAX_COMMAND_PING:			{				struct iax_ie_data pingied;				construct_rr(iaxs[fr->callno], &pingied);				/* Send back a pong packet with the original timestamp */				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);			}				break;			case IAX_COMMAND_PONG:				/* Calculate ping time */				iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;				/* save RR info */				save_rr(fr, &ies);				/* Good time to write jb stats for this call */				log_jitterstats(fr->callno);				if (iaxs[fr->callno]->peerpoke) {					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}				break;			case IAX_COMMAND_LAGRQ:			case IAX_COMMAND_LAGRP:				f.src = "LAGRQ";				f.mallocd = 0;				f.offset = 0;				f.samples = 0;				iax_frame_wrap(fr, &f);				if (f.subclass.integer == IAX_COMMAND_LAGRQ) {					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				} else {					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}				break;			case IAX_COMMAND_AUTHREQ:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					};					ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));					iax2_queue_frame(fr->callno, &hangup_fr);				}				break;			case IAX_COMMAND_AUTHREP:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				/* Ignore once we've started */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_verify(iaxs[fr->callno], &ies)) {					if (authdebug)						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);					memset(&ied0, 0, sizeof(ied0));					auth_fail(fr->callno, IAX_COMMAND_REJECT);					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					/* This might re-enter the IAX code and need the lock */					exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);				} else					exists = 0;				if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}				} else {					/* Select an appropriate format */					if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					} else {						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}					if (!format) {						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}					if (format) {						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}				}				break;			case IAX_COMMAND_DIAL:immediatedial:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}				}				break;			case IAX_COMMAND_INVAL:				iaxs[fr->callno]->error = ENOTCONN;				ast_debug(1, "Immediately destroying %d, having received INVAL\n", fr->callno);				iax2_destroy(fr->callno);				ast_debug(1, "Destroying call %d\n", fr->callno);				break;			case IAX_COMMAND_VNAK:				ast_debug(1, "Received VNAK: resending outstanding frames\n");				/* Force retransmission */				vnak_retransmit(fr->callno, fr->iseqno);				break;			case IAX_COMMAND_REGREQ:			case IAX_COMMAND_REGREL:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (register_verify(fr->callno, &sin, &ies)) {					if (!iaxs[fr->callno]) {						break;					}					/* Send delayed failure */					auth_fail(fr->callno, IAX_COMMAND_REGREJ);					break;				}				if (!iaxs[fr->callno]) {					break;				}				if ((ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||						ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)) {					if (f.subclass.integer == IAX_COMMAND_REGREL) {						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}					if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {						ast_log(LOG_WARNING, "Registry error\n");					}					if (!iaxs[fr->callno]) {						break;					}					if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}					break;				}				registry_authrequest(fr->callno);				break;			case IAX_COMMAND_REGACK:				if (iax2_ack_registry(&ies, &sin, fr->callno)) 					ast_log(LOG_WARNING, "Registration failure\n");				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGREJ:				if (iaxs[fr->callno]->reg) {					if (authdebug) {						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}					iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGAUTH:				/* Authentication request */				if (registry_rerequest(&ies, fr->callno, &sin)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				}				break;			case IAX_COMMAND_TXREJ:				iaxs[fr->callno]->transferring = 0;				ast_verb(3, "Channel '%s' unable to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");				memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer));				if (iaxs[fr->callno]->bridgecallno) {					if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}				}				break;			case IAX_COMMAND_TXREADY:				if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||				    (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)) {					if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)						iaxs[fr->callno]->transferring = TRANSFER_MREADY;					else						iaxs[fr->callno]->transferring = TRANSFER_READY;					ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					if (iaxs[fr->callno]->bridgecallno) {						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}				}				break;			case IAX_COMMAND_TXREQ:				try_transfer(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_TXCNT:				if (iaxs[fr->callno]->transferring)					send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);				break;			case IAX_COMMAND_TXREL:				/* Send ack immediately, rather than waiting until we've changed addresses */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				complete_transfer(fr->callno, &ies);				stop_stuff(fr->callno);	/* for attended transfer to work with libiax */				break;				case IAX_COMMAND_TXMEDIA:				if (iaxs[fr->callno]->transferring == TRANSFER_READY) {					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding frames and start anew */						if (cur->transfer) {							cur->retries = -1;						}					}					/* Start sending our media to the transfer address, but otherwise leave the call as-is */					iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;				}				break;			case IAX_COMMAND_RTKEY:				if (!IAX_CALLENCRYPTED(iaxs[fr->callno])) {					ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					);					break;				}				IAX_DEBUGDIGEST("Receiving", ies.challenge);				ast_aes_set_decrypt_key((unsigned char *) ies.challenge, &iaxs[fr->callno]->dcx);				break;			case IAX_COMMAND_DPREP:				complete_dpreply(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_UNSUPPORT:				ast_log(LOG_NOTICE, "Peer did not understand our iax command '%d'\n", ies.iax_unknown);				break;			case IAX_COMMAND_FWDOWNL:				/* Firmware download */				if (!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)) {					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);					break;				}				memset(&ied0, 0, sizeof(ied0));				res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc);				if (res < 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				else if (res > 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				else					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				break;			case IAX_COMMAND_CALLTOKEN:			{				struct iax_frame *cur;				/* find last sent frame */				if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata) {					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);				}				break;			}			default:				ast_debug(1, "Unknown IAX command %d on %d/%d\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno);				memset(&ied0, 0, sizeof(ied0));				iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer);				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1);			}
f.frametype == AST_FRAME_IAX
f.frametype
f
f
frametype
AST_FRAME_IAX
AST_FRAME_IAX
{			AST_SCHED_DEL(sched, iaxs[fr->callno]->initid);			/* Handle the IAX pseudo frame itself */			if (iaxdebug)				ast_debug(1, "IAX subclass %d received\n", f.subclass.integer);                        /* Update last ts unless the frame's timestamp originated with us. */			if (iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK &&                            f.subclass.integer != IAX_COMMAND_PONG &&                            f.subclass.integer != IAX_COMMAND_LAGRP) {				iaxs[fr->callno]->last = fr->ts;				if (iaxdebug)					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);			}			iaxs[fr->callno]->last_iax_message = f.subclass.integer;			if (!iaxs[fr->callno]->first_iax_message) {				iaxs[fr->callno]->first_iax_message = f.subclass.integer;			}			switch(f.subclass.integer) {			case IAX_COMMAND_ACK:				/* Do nothing */				break;			case IAX_COMMAND_QUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				break;			case IAX_COMMAND_UNQUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}				break;			case IAX_COMMAND_TXACC:				if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}				break;			case IAX_COMMAND_NEW:				/* Ignore if it's already up */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))					break;				if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}				/* If we're in trunk mode, do it now, and update the trunk number in our frame before continuing */				if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (check_access(fr->callno, &sin, &ies)) {					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				} else					exists = 0;				/* Get OSP token if it does exist */				save_osptoken(fr, &ies);				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}				if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)					merge_encryption(iaxs[fr->callno],ies.encmethods);				else					iaxs[fr->callno]->encmethods = 0;				if (!authenticate_request(fr->callno) && iaxs[fr->callno])					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);				break;			case IAX_COMMAND_DPREQ:				/* Request status in the dialplan */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}				break;			case IAX_COMMAND_HANGUP:				ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);				ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);				/* Set hangup cause according to remote and hangupsource */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REJECT:				/* Set hangup cause according to remote and hangup source */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno);				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))					iaxs[fr->callno]->error = EPERM;				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_TRANSFER:			{				struct ast_channel *bridged_chan;				struct ast_channel *owner;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}				owner = iaxs[fr->callno]->owner;				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;				if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}				break;			}			case IAX_COMMAND_ACCEPT:				/* Ignore if call is already up or needs authentication or is a TBD */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))					break;				if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}				if (ies.format) {					iaxs[fr->callno]->peerformat = ies.format;				} else {					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}				ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));				if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				} else {					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				if (iaxs[fr->callno]) {					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}				break;			case IAX_COMMAND_POKE:				/* Send back a pong packet with the original timestamp */				send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);				break;			case IAX_COMMAND_PING:			{				struct iax_ie_data pingied;				construct_rr(iaxs[fr->callno], &pingied);				/* Send back a pong packet with the original timestamp */				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);			}				break;			case IAX_COMMAND_PONG:				/* Calculate ping time */				iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;				/* save RR info */				save_rr(fr, &ies);				/* Good time to write jb stats for this call */				log_jitterstats(fr->callno);				if (iaxs[fr->callno]->peerpoke) {					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}				break;			case IAX_COMMAND_LAGRQ:			case IAX_COMMAND_LAGRP:				f.src = "LAGRQ";				f.mallocd = 0;				f.offset = 0;				f.samples = 0;				iax_frame_wrap(fr, &f);				if (f.subclass.integer == IAX_COMMAND_LAGRQ) {					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				} else {					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}				break;			case IAX_COMMAND_AUTHREQ:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					};					ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));					iax2_queue_frame(fr->callno, &hangup_fr);				}				break;			case IAX_COMMAND_AUTHREP:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				/* Ignore once we've started */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_verify(iaxs[fr->callno], &ies)) {					if (authdebug)						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);					memset(&ied0, 0, sizeof(ied0));					auth_fail(fr->callno, IAX_COMMAND_REJECT);					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					/* This might re-enter the IAX code and need the lock */					exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);				} else					exists = 0;				if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}				} else {					/* Select an appropriate format */					if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					} else {						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}					if (!format) {						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}					if (format) {						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}				}				break;			case IAX_COMMAND_DIAL:immediatedial:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}				}				break;			case IAX_COMMAND_INVAL:				iaxs[fr->callno]->error = ENOTCONN;				ast_debug(1, "Immediately destroying %d, having received INVAL\n", fr->callno);				iax2_destroy(fr->callno);				ast_debug(1, "Destroying call %d\n", fr->callno);				break;			case IAX_COMMAND_VNAK:				ast_debug(1, "Received VNAK: resending outstanding frames\n");				/* Force retransmission */				vnak_retransmit(fr->callno, fr->iseqno);				break;			case IAX_COMMAND_REGREQ:			case IAX_COMMAND_REGREL:				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (register_verify(fr->callno, &sin, &ies)) {					if (!iaxs[fr->callno]) {						break;					}					/* Send delayed failure */					auth_fail(fr->callno, IAX_COMMAND_REGREJ);					break;				}				if (!iaxs[fr->callno]) {					break;				}				if ((ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||						ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)) {					if (f.subclass.integer == IAX_COMMAND_REGREL) {						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}					if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {						ast_log(LOG_WARNING, "Registry error\n");					}					if (!iaxs[fr->callno]) {						break;					}					if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}					break;				}				registry_authrequest(fr->callno);				break;			case IAX_COMMAND_REGACK:				if (iax2_ack_registry(&ies, &sin, fr->callno)) 					ast_log(LOG_WARNING, "Registration failure\n");				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGREJ:				if (iaxs[fr->callno]->reg) {					if (authdebug) {						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}					iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REGAUTH:				/* Authentication request */				if (registry_rerequest(&ies, fr->callno, &sin)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				}				break;			case IAX_COMMAND_TXREJ:				iaxs[fr->callno]->transferring = 0;				ast_verb(3, "Channel '%s' unable to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");				memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer));				if (iaxs[fr->callno]->bridgecallno) {					if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}				}				break;			case IAX_COMMAND_TXREADY:				if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||				    (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)) {					if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)						iaxs[fr->callno]->transferring = TRANSFER_MREADY;					else						iaxs[fr->callno]->transferring = TRANSFER_READY;					ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					if (iaxs[fr->callno]->bridgecallno) {						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}				}				break;			case IAX_COMMAND_TXREQ:				try_transfer(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_TXCNT:				if (iaxs[fr->callno]->transferring)					send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);				break;			case IAX_COMMAND_TXREL:				/* Send ack immediately, rather than waiting until we've changed addresses */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				complete_transfer(fr->callno, &ies);				stop_stuff(fr->callno);	/* for attended transfer to work with libiax */				break;				case IAX_COMMAND_TXMEDIA:				if (iaxs[fr->callno]->transferring == TRANSFER_READY) {					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding frames and start anew */						if (cur->transfer) {							cur->retries = -1;						}					}					/* Start sending our media to the transfer address, but otherwise leave the call as-is */					iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;				}				break;			case IAX_COMMAND_RTKEY:				if (!IAX_CALLENCRYPTED(iaxs[fr->callno])) {					ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					);					break;				}				IAX_DEBUGDIGEST("Receiving", ies.challenge);				ast_aes_set_decrypt_key((unsigned char *) ies.challenge, &iaxs[fr->callno]->dcx);				break;			case IAX_COMMAND_DPREP:				complete_dpreply(iaxs[fr->callno], &ies);				break;			case IAX_COMMAND_UNSUPPORT:				ast_log(LOG_NOTICE, "Peer did not understand our iax command '%d'\n", ies.iax_unknown);				break;			case IAX_COMMAND_FWDOWNL:				/* Firmware download */				if (!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)) {					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);					break;				}				memset(&ied0, 0, sizeof(ied0));				res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc);				if (res < 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				else if (res > 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				else					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				break;			case IAX_COMMAND_CALLTOKEN:			{				struct iax_frame *cur;				/* find last sent frame */				if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata) {					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);				}				break;			}			default:				ast_debug(1, "Unknown IAX command %d on %d/%d\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno);				memset(&ied0, 0, sizeof(ied0));				iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer);				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1);			}
AST_SCHED_DEL(sched, iaxs[fr->callno]->initid);
AST_SCHED_DEL(sched, iaxs[fr->callno]->initid)
AST_SCHED_DEL
AST_SCHED_DEL
sched
sched
iaxs[fr->callno]->initid
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
initid
if (iaxdebug)				ast_debug(1, "IAX subclass %d received\n", f.subclass.integer);
iaxdebug
iaxdebug
ast_debug(1, "IAX subclass %d received\n", f.subclass.integer);
ast_debug(1, "IAX subclass %d received\n", f.subclass.integer)
ast_debug
ast_debug
1
"IAX subclass %d received\n"
f.subclass.integer
f.subclass
f
f
subclass
integer
if (iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK &&                            f.subclass.integer != IAX_COMMAND_PONG &&                            f.subclass.integer != IAX_COMMAND_LAGRP) {				iaxs[fr->callno]->last = fr->ts;				if (iaxdebug)					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);			}
iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK &&                            f.subclass.integer != IAX_COMMAND_PONG &&                            f.subclass.integer != IAX_COMMAND_LAGRP
iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK &&                            f.subclass.integer != IAX_COMMAND_PONG
iaxs[fr->callno]->last < fr->ts &&                            f.subclass.integer != IAX_COMMAND_ACK
iaxs[fr->callno]->last < fr->ts
iaxs[fr->callno]->last
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
last
fr->ts
fr
fr
ts
f.subclass.integer != IAX_COMMAND_ACK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_ACK
IAX_COMMAND_ACK
f.subclass.integer != IAX_COMMAND_PONG
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_PONG
IAX_COMMAND_PONG
f.subclass.integer != IAX_COMMAND_LAGRP
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_LAGRP
IAX_COMMAND_LAGRP
{				iaxs[fr->callno]->last = fr->ts;				if (iaxdebug)					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);			}
iaxs[fr->callno]->last = fr->ts;
iaxs[fr->callno]->last = fr->ts
iaxs[fr->callno]->last
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
last
fr->ts
fr
fr
ts
if (iaxdebug)					ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);
iaxdebug
iaxdebug
ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts);
ast_debug(1, "For call=%d, set last=%d\n", fr->callno, fr->ts)
ast_debug
ast_debug
1
"For call=%d, set last=%d\n"
fr->callno
fr
fr
callno
fr->ts
fr
fr
ts
iaxs[fr->callno]->last_iax_message = f.subclass.integer;
iaxs[fr->callno]->last_iax_message = f.subclass.integer
iaxs[fr->callno]->last_iax_message
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
last_iax_message
f.subclass.integer
f.subclass
f
f
subclass
integer
if (!iaxs[fr->callno]->first_iax_message) {				iaxs[fr->callno]->first_iax_message = f.subclass.integer;			}
!iaxs[fr->callno]->first_iax_message
iaxs[fr->callno]->first_iax_message
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
first_iax_message
{				iaxs[fr->callno]->first_iax_message = f.subclass.integer;			}
iaxs[fr->callno]->first_iax_message = f.subclass.integer;
iaxs[fr->callno]->first_iax_message = f.subclass.integer
iaxs[fr->callno]->first_iax_message
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
first_iax_message
f.subclass.integer
f.subclass
f
f
subclass
integer
switch(f.subclass.integer) {			case IAX_COMMAND_ACK:				/* Do nothing */				break;			case IAX_COMMAND_QUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				break;			case IAX_COMMAND_UNQUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}				break;			case IAX_COMMAND_TXACC:				if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}				break;			case IAX_COMMAND_NEW:				/* Ignore if it's already up */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))					break;				if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}				/* If we're in trunk mode, do it now, and update the trunk number in our frame before continuing */				if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (check_access(fr->callno, &sin, &ies)) {					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				} else					exists = 0;				/* Get OSP token if it does exist */				save_osptoken(fr, &ies);				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}				if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)					merge_encryption(iaxs[fr->callno],ies.encmethods);				else					iaxs[fr->callno]->encmethods = 0;				if (!authenticate_request(fr->callno) && iaxs[fr->callno])					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);				break;			case IAX_COMMAND_DPREQ:				/* Request status in the dialplan */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}				break;			case IAX_COMMAND_HANGUP:				ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);				ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);				/* Set hangup cause according to remote and hangupsource */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REJECT:				/* Set hangup cause according to remote and hangup source */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno);				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))					iaxs[fr->callno]->error = EPERM;				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_TRANSFER:			{				struct ast_channel *bridged_chan;				struct ast_channel *owner;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}				owner = iaxs[fr->callno]->owner;				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;				if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}				break;			}			case IAX_COMMAND_ACCEPT:				/* Ignore if call is already up or needs authentication or is a TBD */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))					break;				if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}				if (ies.format) {					iaxs[fr->callno]->peerformat = ies.format;				} else {					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}				ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));				if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				} else {					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				if (iaxs[fr->callno]) {					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}				break;			case IAX_COMMAND_POKE:				/* Send back a pong packet with the original timestamp */				send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);				break;			case IAX_COMMAND_PING:			{				struct iax_ie_data pingied;				construct_rr(iaxs[fr->callno], &pingied);				/* Send back a pong packet with the original timestamp */				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);			}				break;			case IAX_COMMAND_PONG:				/* Calculate ping time */				iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;				/* save RR info */				save_rr(fr, &ies);				/* Good time to write jb stats for this call */				log_jitterstats(fr->callno);				if (iaxs[fr->callno]->peerpoke) {					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}				break;			case IAX_COMMAND_LAGRQ:			case IAX_COMMAND_LAGRP:				f.src = "LAGRQ";				f.mallocd = 0;				f.offset = 0;				f.samples = 0;				iax_frame_wrap(fr, &f);				if (f.subclass.integer == IAX_COMMAND_LAGRQ) {					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				} else {					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}				break;			case IAX_COMMAND_AUTHREQ:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					};					ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));					iax2_queue_frame(fr->callno, &hangup_fr);				}
f.subclass.integer
f.subclass
f
f
subclass
integer
{			case IAX_COMMAND_ACK:				/* Do nothing */				break;			case IAX_COMMAND_QUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				break;			case IAX_COMMAND_UNQUELCH:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}				break;			case IAX_COMMAND_TXACC:				if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}				break;			case IAX_COMMAND_NEW:				/* Ignore if it's already up */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))					break;				if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}				/* If we're in trunk mode, do it now, and update the trunk number in our frame before continuing */				if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}				/* For security, always ack immediately */				if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				if (check_access(fr->callno, &sin, &ies)) {					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}				if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				} else					exists = 0;				/* Get OSP token if it does exist */				save_osptoken(fr, &ies);				if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}				if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)					merge_encryption(iaxs[fr->callno],ies.encmethods);				else					iaxs[fr->callno]->encmethods = 0;				if (!authenticate_request(fr->callno) && iaxs[fr->callno])					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);				break;			case IAX_COMMAND_DPREQ:				/* Request status in the dialplan */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}				break;			case IAX_COMMAND_HANGUP:				ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);				ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);				/* Set hangup cause according to remote and hangupsource */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_REJECT:				/* Set hangup cause according to remote and hangup source */				if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}				/* Send ack immediately, before we destroy */				send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno);				if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))					iaxs[fr->callno]->error = EPERM;				iax2_destroy(fr->callno);				break;			case IAX_COMMAND_TRANSFER:			{				struct ast_channel *bridged_chan;				struct ast_channel *owner;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}				owner = iaxs[fr->callno]->owner;				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;				if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}				break;			}			case IAX_COMMAND_ACCEPT:				/* Ignore if call is already up or needs authentication or is a TBD */				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))					break;				if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}				if (ies.format) {					iaxs[fr->callno]->peerformat = ies.format;				} else {					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}				ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));				if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				} else {					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}				if (iaxs[fr->callno]) {					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}				break;			case IAX_COMMAND_POKE:				/* Send back a pong packet with the original timestamp */				send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);				break;			case IAX_COMMAND_PING:			{				struct iax_ie_data pingied;				construct_rr(iaxs[fr->callno], &pingied);				/* Send back a pong packet with the original timestamp */				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);			}				break;			case IAX_COMMAND_PONG:				/* Calculate ping time */				iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;				/* save RR info */				save_rr(fr, &ies);				/* Good time to write jb stats for this call */				log_jitterstats(fr->callno);				if (iaxs[fr->callno]->peerpoke) {					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}				break;			case IAX_COMMAND_LAGRQ:			case IAX_COMMAND_LAGRP:				f.src = "LAGRQ";				f.mallocd = 0;				f.offset = 0;				f.samples = 0;				iax_frame_wrap(fr, &f);				if (f.subclass.integer == IAX_COMMAND_LAGRQ) {					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				} else {					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}				break;			case IAX_COMMAND_AUTHREQ:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}				if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					};					ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));					iax2_queue_frame(fr->callno, &hangup_fr);				}
case IAX_COMMAND_ACK:
IAX_COMMAND_ACK
IAX_COMMAND_ACK
break;
case IAX_COMMAND_QUELCH:
IAX_COMMAND_QUELCH
IAX_COMMAND_QUELCH
if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED
IAX_STATE_STARTED
{				        /* Generate Manager Hold event, if necessary*/					if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);					if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}
if (iaxs[fr->callno]->owner) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}
ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));
ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner))
ast_manager_event
ast_manager_event
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"Hold"
"Status: On\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n"
ast_channel_name(iaxs[fr->callno]->owner)
ast_channel_name
ast_channel_name
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_uniqueid(iaxs[fr->callno]->owner)
ast_channel_uniqueid
ast_channel_uniqueid
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_set_flag64(iaxs[fr->callno], IAX_QUELCH);
ast_set_flag64(iaxs[fr->callno], IAX_QUELCH)
ast_set_flag64
ast_set_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_QUELCH
IAX_QUELCH
if (ies.musiconhold) {						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}
ies.musiconhold
ies
ies
musiconhold
{						iax2_lock_owner(fr->callno);						if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}						if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}						ast_channel_unlock(iaxs[fr->callno]->owner);					}
iax2_lock_owner(fr->callno);
iax2_lock_owner(fr->callno)
iax2_lock_owner
iax2_lock_owner
fr->callno
fr
fr
callno
if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner) {							break;						}
!iaxs[fr->callno] || !iaxs[fr->callno]->owner
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
!iaxs[fr->callno]->owner
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{							break;						}
break;
if (ast_bridged_channel(iaxs[fr->callno]->owner)) {							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}
ast_bridged_channel(iaxs[fr->callno]->owner)
ast_bridged_channel
ast_bridged_channel
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{							const char *moh_suggest = iaxs[fr->callno]->mohsuggest;							/*							 * We already hold the owner lock so we do not							 * need to check iaxs[fr->callno] after it returns.							 */							iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);						}
const char *moh_suggest = iaxs[fr->callno]->mohsuggest;
const char *moh_suggest = iaxs[fr->callno]->mohsuggest;
const char
*moh_suggest = iaxs[fr->callno]->mohsuggest
*
moh_suggest
= iaxs[fr->callno]->mohsuggest
iaxs[fr->callno]->mohsuggest
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
mohsuggest
iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0);
iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, 								S_OR(moh_suggest, NULL),								!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0)
iax2_queue_control_data
iax2_queue_control_data
fr->callno
fr
fr
callno
AST_CONTROL_HOLD
AST_CONTROL_HOLD
S_OR(moh_suggest, NULL)
S_OR
S_OR
moh_suggest
moh_suggest
NULL
NULL
!ast_strlen_zero(moh_suggest) ? strlen(moh_suggest) + 1 : 0
!ast_strlen_zero(moh_suggest)
ast_strlen_zero(moh_suggest)
ast_strlen_zero
ast_strlen_zero
moh_suggest
moh_suggest
strlen(moh_suggest) + 1
strlen(moh_suggest)
strlen
strlen
moh_suggest
moh_suggest
1
0
ast_channel_unlock(iaxs[fr->callno]->owner);
ast_channel_unlock(iaxs[fr->callno]->owner)
ast_channel_unlock
ast_channel_unlock
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
break;
case IAX_COMMAND_UNQUELCH:
IAX_COMMAND_UNQUELCH
IAX_COMMAND_UNQUELCH
if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)) {					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED
IAX_STATE_STARTED
{					iax2_lock_owner(fr->callno);					if (!iaxs[fr->callno]) {						break;					}					/* Generate Manager Unhold event, if necessary */					if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}					ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);					if (!iaxs[fr->callno]->owner) {						break;					}					if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}					ast_channel_unlock(iaxs[fr->callno]->owner);				}
iax2_lock_owner(fr->callno);
iax2_lock_owner(fr->callno)
iax2_lock_owner
iax2_lock_owner
fr->callno
fr
fr
callno
if (!iaxs[fr->callno]) {						break;					}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{						break;					}
break;
if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)) {						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}
iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_QUELCH
IAX_QUELCH
{						ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));					}
ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner));
ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",							"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n",							ast_channel_name(iaxs[fr->callno]->owner),							ast_channel_uniqueid(iaxs[fr->callno]->owner))
ast_manager_event
ast_manager_event
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
EVENT_FLAG_CALL
EVENT_FLAG_CALL
"Hold"
"Status: Off\r\n"							"Channel: %s\r\n"							"Uniqueid: %s\r\n"
ast_channel_name(iaxs[fr->callno]->owner)
ast_channel_name
ast_channel_name
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_uniqueid(iaxs[fr->callno]->owner)
ast_channel_uniqueid
ast_channel_uniqueid
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH);
ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH)
ast_clear_flag64
ast_clear_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_QUELCH
IAX_QUELCH
if (!iaxs[fr->callno]->owner) {						break;					}
!iaxs[fr->callno]->owner
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{						break;					}
break;
if (ast_bridged_channel(iaxs[fr->callno]->owner)) {						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}
ast_bridged_channel(iaxs[fr->callno]->owner)
ast_bridged_channel
ast_bridged_channel
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{						/*						 * We already hold the owner lock so we do not						 * need to check iaxs[fr->callno] after it returns.						 */						iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);					}
iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0);
iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0)
iax2_queue_control_data
iax2_queue_control_data
fr->callno
fr
fr
callno
AST_CONTROL_UNHOLD
AST_CONTROL_UNHOLD
NULL
NULL
0
ast_channel_unlock(iaxs[fr->callno]->owner);
ast_channel_unlock(iaxs[fr->callno]->owner)
ast_channel_unlock
ast_channel_unlock
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
break;
case IAX_COMMAND_TXACC:
IAX_COMMAND_TXACC
IAX_COMMAND_TXACC
if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN) {					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}
iaxs[fr->callno]->transferring == TRANSFER_BEGIN
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_BEGIN
TRANSFER_BEGIN
{					/* Ack the packet with the given timestamp */					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}					memset(&ied1, 0, sizeof(ied1));					iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);					iaxs[fr->callno]->transferring = TRANSFER_READY;				}
AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list)
AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&frame_queue[fr->callno]
frame_queue[fr->callno]
frame_queue
frame_queue
fr->callno
fr
fr
callno
cur
cur
list
list
)
{						/* Cancel any outstanding txcnt's */						if (cur->transfer) {							cur->retries = -1;						}					}
if (cur->transfer) {							cur->retries = -1;						}
cur->transfer
cur
cur
transfer
{							cur->retries = -1;						}
cur->retries = -1;
cur->retries = -1
cur->retries
cur
cur
retries
-1
1
memset(&ied1, 0, sizeof(ied1));
memset(&ied1, 0, sizeof(ied1))
memset
memset
&ied1
ied1
ied1
0
sizeof(ied1)
(ied1)
ied1
ied1
iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno);
iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno)
iax_ie_append_short
iax_ie_append_short
&ied1
ied1
ied1
IAX_IE_CALLNO
IAX_IE_CALLNO
iaxs[fr->callno]->callno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
callno
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1);
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1)
send_command
send_command
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_TXREADY
IAX_COMMAND_TXREADY
0
ied1.buf
ied1
ied1
buf
ied1.pos
ied1
ied1
pos
-1
1
iaxs[fr->callno]->transferring = TRANSFER_READY;
iaxs[fr->callno]->transferring = TRANSFER_READY
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_READY
TRANSFER_READY
break;
case IAX_COMMAND_NEW:
IAX_COMMAND_NEW
IAX_COMMAND_NEW
if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD))					break;
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED | IAX_STATE_TBD
IAX_STATE_STARTED
IAX_STATE_STARTED
IAX_STATE_TBD
IAX_STATE_TBD
break;
if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}
ies.provverpres && ies.serviceident && sin.sin_addr.s_addr
ies.provverpres && ies.serviceident
ies.provverpres
ies
ies
provverpres
ies.serviceident
ies
ies
serviceident
sin.sin_addr.s_addr
sin.sin_addr
sin
sin
sin_addr
s_addr
{					ast_mutex_unlock(&iaxsl[fr->callno]);					check_provisioning(&sin, fd, ies.serviceident, ies.provver);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
check_provisioning(&sin, fd, ies.serviceident, ies.provver);
check_provisioning(&sin, fd, ies.serviceident, ies.provver)
check_provisioning
check_provisioning
&sin
sin
sin
fd
fd
ies.serviceident
ies
ies
serviceident
ies.provver
ies
ies
provver
ast_mutex_lock(&iaxsl[fr->callno]);
ast_mutex_lock(&iaxsl[fr->callno])
ast_mutex_lock
ast_mutex_lock
&iaxsl[fr->callno]
iaxsl[fr->callno]
iaxsl
iaxsl
fr->callno
fr
fr
callno
if (!iaxs[fr->callno]) {						break;					}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{						break;					}
break;
if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)) {					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}
ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_TRUNK
IAX_TRUNK
{					int new_callno;					if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;				}
int new_callno;
int new_callno;
int
new_callno
new_callno
if ((new_callno = make_trunk(fr->callno, 1)) != -1)						fr->callno = new_callno;
(new_callno = make_trunk(fr->callno, 1)) != -1
(new_callno = make_trunk(fr->callno, 1))
new_callno = make_trunk(fr->callno, 1)
new_callno
new_callno
make_trunk(fr->callno, 1)
make_trunk
make_trunk
fr->callno
fr
fr
callno
1
-1
1
fr->callno = new_callno;
fr->callno = new_callno
fr->callno
fr
fr
callno
new_callno
new_callno
if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
delayreject
delayreject
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
if (check_access(fr->callno, &sin, &ies)) {					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}
check_access(fr->callno, &sin, &ies)
check_access
check_access
fr->callno
fr
fr
callno
&sin
sin
sin
&ies
ies
ies
{					/* They're not allowed on */					auth_fail(fr->callno, IAX_COMMAND_REJECT);					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					break;				}
auth_fail(fr->callno, IAX_COMMAND_REJECT);
auth_fail(fr->callno, IAX_COMMAND_REJECT)
auth_fail
auth_fail
fr->callno
fr
fr
callno
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
authdebug
authdebug
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach '%s@%s'\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, who was trying to reach '%s@%s'\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
break;
if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)) {					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}
ast_strlen_zero(iaxs[fr->callno]->secret) && ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)
ast_strlen_zero(iaxs[fr->callno]->secret)
ast_strlen_zero
ast_strlen_zero
iaxs[fr->callno]->secret
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
secret
ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_FORCE_ENCRYPT
IAX_FORCE_ENCRYPT
{					auth_fail(fr->callno, IAX_COMMAND_REJECT);					ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");					break;				}
auth_fail(fr->callno, IAX_COMMAND_REJECT);
auth_fail(fr->callno, IAX_COMMAND_REJECT)
auth_fail
auth_fail
fr->callno
fr
fr
callno
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n");
ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Rejected connect attempt.  No secret present while force encrypt enabled.\n"
break;
if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				} else					exists = 0;
strcasecmp(iaxs[fr->callno]->exten, "TBD")
strcasecmp
strcasecmp
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
"TBD"
{					const char *context, *exten, *cid_num;					context = ast_strdupa(iaxs[fr->callno]->context);					exten = ast_strdupa(iaxs[fr->callno]->exten);					cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);					/* This might re-enter the IAX code and need the lock */					ast_mutex_unlock(&iaxsl[fr->callno]);					exists = ast_exists_extension(NULL, context, exten, 1, cid_num);					ast_mutex_lock(&iaxsl[fr->callno]);					if (!iaxs[fr->callno]) {						break;					}				}
const char *context, *exten, *cid_num;
const char *context, *exten, *cid_num;
const char
*context
*
context
*exten
*
exten
*cid_num
*
cid_num
context = ast_strdupa(iaxs[fr->callno]->context);
context = ast_strdupa(iaxs[fr->callno]->context)
context
context
ast_strdupa(iaxs[fr->callno]->context)
ast_strdupa
ast_strdupa
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
exten = ast_strdupa(iaxs[fr->callno]->exten);
exten = ast_strdupa(iaxs[fr->callno]->exten)
exten
exten
ast_strdupa(iaxs[fr->callno]->exten)
ast_strdupa
ast_strdupa
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
cid_num = ast_strdupa(iaxs[fr->callno]->cid_num);
cid_num = ast_strdupa(iaxs[fr->callno]->cid_num)
cid_num
cid_num
ast_strdupa(iaxs[fr->callno]->cid_num)
ast_strdupa
ast_strdupa
iaxs[fr->callno]->cid_num
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
cid_num
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
exists = ast_exists_extension(NULL, context, exten, 1, cid_num);
exists = ast_exists_extension(NULL, context, exten, 1, cid_num)
exists
exists
ast_exists_extension(NULL, context, exten, 1, cid_num)
ast_exists_extension
ast_exists_extension
NULL
NULL
context
context
exten
exten
1
cid_num
cid_num
ast_mutex_lock(&iaxsl[fr->callno]);
ast_mutex_lock(&iaxsl[fr->callno])
ast_mutex_lock
ast_mutex_lock
&iaxsl[fr->callno]
iaxsl[fr->callno]
iaxsl
iaxsl
fr->callno
fr
fr
callno
if (!iaxs[fr->callno]) {						break;					}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{						break;					}
break;
exists = 0;
exists = 0
exists
exists
0
save_osptoken(fr, &ies);
save_osptoken(fr, &ies)
save_osptoken
save_osptoken
fr
fr
&ies
ies
ies
if (ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) {					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}
ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)
ast_strlen_zero(iaxs[fr->callno]->secret)
ast_strlen_zero
ast_strlen_zero
iaxs[fr->callno]->secret
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
secret
ast_strlen_zero(iaxs[fr->callno]->inkeys)
ast_strlen_zero
ast_strlen_zero
iaxs[fr->callno]->inkeys
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
inkeys
{					if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}					break;				}
if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					} else {						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}
strcmp(iaxs[fr->callno]->exten, "TBD") && !exists
strcmp(iaxs[fr->callno]->exten, "TBD")
strcmp
strcmp
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
"TBD"
!exists
exists
exists
{						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}						if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					}
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension")
iax_ie_append_str
iax_ie_append_str
&ied0
ied0
ied0
IAX_IE_CAUSE
IAX_IE_CAUSE
"No such context/extension"
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_CAUSECODE
IAX_IE_CAUSECODE
AST_CAUSE_NO_ROUTE_DESTINATION
AST_CAUSE_NO_ROUTE_DESTINATION
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (!iaxs[fr->callno]) {							break;						}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{							break;						}
break;
if (authdebug)							ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
authdebug
authdebug
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, request '%s@%s' does not exist\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
{						/* Select an appropriate format */						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}						if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}						if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}					}
if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						} else {							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOPREFS
IAX_CODEC_NOPREFS
{							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}							format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;							memset(&pref, 0, sizeof(pref));							strcpy(caller_pref_buf, "disabled");							strcpy(host_pref_buf, "disabled");						}
if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								using_prefs = "reqonly";							} else {								using_prefs = "disabled";							}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
{								using_prefs = "reqonly";							}
using_prefs = "reqonly";
using_prefs = "reqonly"
using_prefs
using_prefs
"reqonly"
{								using_prefs = "disabled";							}
using_prefs = "disabled";
using_prefs = "disabled"
using_prefs
using_prefs
"disabled"
format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;
format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability
format
format
iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
memset(&pref, 0, sizeof(pref));
memset(&pref, 0, sizeof(pref))
memset
memset
&pref
pref
pref
0
sizeof(pref)
(pref)
pref
pref
strcpy(caller_pref_buf, "disabled");
strcpy(caller_pref_buf, "disabled")
strcpy
strcpy
caller_pref_buf
caller_pref_buf
"disabled"
strcpy(host_pref_buf, "disabled");
strcpy(host_pref_buf, "disabled")
strcpy
strcpy
host_pref_buf
host_pref_buf
"disabled"
{							struct ast_format tmpfmt;							using_prefs = "mine";							/* If the information elements are in here... use them */							if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);							if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;							format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);							ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);							ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);						}
struct ast_format tmpfmt;
struct ast_format tmpfmt;
struct ast_format
ast_format
tmpfmt
tmpfmt
using_prefs = "mine";
using_prefs = "mine"
using_prefs
using_prefs
"mine"
if (ies.codec_prefs)								ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);
ies.codec_prefs
ies
ies
codec_prefs
ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);
ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0)
ast_codec_pref_convert
ast_codec_pref_convert
&iaxs[fr->callno]->rprefs
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
ies.codec_prefs
ies
ies
codec_prefs
32
0
if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							} else								pref = iaxs[fr->callno]->prefs;
ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
ast_codec_pref_index
ast_codec_pref_index
&iaxs[fr->callno]->rprefs
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
0
&tmpfmt
tmpfmt
tmpfmt
{								/* If we are codec_first_choice we let the caller have the 1st shot at picking the codec.*/								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}							}
if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								} else {									pref = iaxs[fr->callno]->prefs;								}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_USER_FIRST
IAX_CODEC_USER_FIRST
{									pref = iaxs[fr->callno]->rprefs;									using_prefs = "caller";								}
pref = iaxs[fr->callno]->rprefs;
pref = iaxs[fr->callno]->rprefs
pref
pref
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
using_prefs = "caller";
using_prefs = "caller"
using_prefs
using_prefs
"caller"
{									pref = iaxs[fr->callno]->prefs;								}
pref = iaxs[fr->callno]->prefs;
pref = iaxs[fr->callno]->prefs
pref
pref
iaxs[fr->callno]->prefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
prefs
pref = iaxs[fr->callno]->prefs;
pref = iaxs[fr->callno]->prefs
pref
pref
iaxs[fr->callno]->prefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
prefs
format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);
format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0)
format
format
iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0)
iax2_codec_choose
iax2_codec_choose
&pref
pref
pref
iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
0
ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);
ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1)
ast_codec_pref_string
ast_codec_pref_string
&iaxs[fr->callno]->rprefs
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
caller_pref_buf
caller_pref_buf
sizeof(caller_pref_buf) - 1
sizeof(caller_pref_buf)
(caller_pref_buf)
caller_pref_buf
caller_pref_buf
1
ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);
ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1)
ast_codec_pref_string
ast_codec_pref_string
&iaxs[fr->callno]->prefs
iaxs[fr->callno]->prefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
prefs
host_pref_buf
host_pref_buf
sizeof(host_pref_buf) - 1
sizeof(host_pref_buf)
(host_pref_buf)
host_pref_buf
host_pref_buf
1
if (!format) {							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}
!format
format
format
{							if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;							if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}						}
if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP))								format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;
!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;
format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
format
format
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
if (!format) {								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							} else {								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}
!format
format
format
{								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}								if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}							}
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
iax_ie_append_str
iax_ie_append_str
&ied0
ied0
ied0
IAX_IE_CAUSE
IAX_IE_CAUSE
"Unable to negotiate codec"
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_CAUSECODE
IAX_IE_CAUSECODE
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (!iaxs[fr->callno]) {									break;								}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{									break;								}
break;
if (authdebug) {									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}
authdebug
authdebug
{									char tmp[256], tmp2[256], tmp3[256];									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}
char tmp[256], tmp2[256], tmp3[256];
char tmp[256], tmp2[256], tmp3[256];
char
tmp[256]
tmp
[256]
256
tmp2[256]
tmp2
[256]
256
tmp3[256]
tmp3
[256]
256
if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
{										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									}
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp
tmp
sizeof(tmp)
(tmp)
tmp
tmp
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp2
tmp2
sizeof(tmp2)
(tmp2)
tmp2
tmp2
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
{										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp
tmp
sizeof(tmp)
(tmp)
tmp
tmp
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp2
tmp2
sizeof(tmp2)
(tmp2)
tmp2
tmp2
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp3
tmp3
sizeof(tmp3)
(tmp3)
tmp3
tmp3
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
{								/* Pick one... */								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}								if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}							}
if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								} else {									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
{									if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;								}
if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))										format = 0;
!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
format = 0;
format = 0
format
format
0
{									if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}								}
if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									} else {										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOPREFS
IAX_CODEC_NOPREFS
{										using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";										memset(&pref, 0, sizeof(pref));										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);										strcpy(caller_pref_buf,"disabled");										strcpy(host_pref_buf,"disabled");									}
using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";
using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled"
using_prefs
using_prefs
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled"
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
"reqonly"
"disabled"
memset(&pref, 0, sizeof(pref));
memset(&pref, 0, sizeof(pref))
memset
memset
&pref
pref
pref
0
sizeof(pref)
(pref)
pref
pref
format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);
format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
format
format
iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
iax2_best_codec
iax2_best_codec
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
strcpy(caller_pref_buf,"disabled");
strcpy(caller_pref_buf,"disabled")
strcpy
strcpy
caller_pref_buf
caller_pref_buf
"disabled"
strcpy(host_pref_buf,"disabled");
strcpy(host_pref_buf,"disabled")
strcpy
strcpy
host_pref_buf
host_pref_buf
"disabled"
{										struct ast_format tmpfmt;										using_prefs = "mine";										if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}
struct ast_format tmpfmt;
struct ast_format tmpfmt;
struct ast_format
ast_format
tmpfmt
tmpfmt
using_prefs = "mine";
using_prefs = "mine"
using_prefs
using_prefs
"mine"
if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										} else /* if no codec_prefs IE do it the old way */											format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);
ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
ast_codec_pref_index
ast_codec_pref_index
&iaxs[fr->callno]->rprefs
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
0
&tmpfmt
tmpfmt
tmpfmt
{											/* Do the opposite of what we tried above. */											if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}											format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);										}
if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {												pref = iaxs[fr->callno]->prefs;											} else {												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_USER_FIRST
IAX_CODEC_USER_FIRST
{												pref = iaxs[fr->callno]->prefs;											}
pref = iaxs[fr->callno]->prefs;
pref = iaxs[fr->callno]->prefs
pref
pref
iaxs[fr->callno]->prefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
prefs
{												pref = iaxs[fr->callno]->rprefs;												using_prefs = "caller";											}
pref = iaxs[fr->callno]->rprefs;
pref = iaxs[fr->callno]->rprefs
pref
pref
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
using_prefs = "caller";
using_prefs = "caller"
using_prefs
using_prefs
"caller"
format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);
format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1)
format
format
iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1)
iax2_codec_choose
iax2_codec_choose
&pref
pref
pref
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
1
format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);
format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
format
format
iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
iax2_best_codec
iax2_best_codec
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
if (!format) {									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}
!format
format
format
{									char tmp[256], tmp2[256], tmp3[256];									memset(&ied0, 0, sizeof(ied0));									iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");									iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);									ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));									send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);									if (!iaxs[fr->callno]) {										break;									}									if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}									ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);									break;								}
char tmp[256], tmp2[256], tmp3[256];
char tmp[256], tmp2[256], tmp3[256];
char
tmp[256]
tmp
[256]
256
tmp2[256]
tmp2
[256]
256
tmp3[256]
tmp3
[256]
256
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
iax_ie_append_str
iax_ie_append_str
&ied0
ied0
ied0
IAX_IE_CAUSE
IAX_IE_CAUSE
"Unable to negotiate codec"
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_CAUSECODE
IAX_IE_CAUSECODE
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));
ast_log(LOG_ERROR, "No best format in '%s'???\n", iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_ERROR
LOG_ERROR
"No best format in '%s'???\n"
iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp
tmp
sizeof(tmp)
(tmp)
tmp
tmp
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (!iaxs[fr->callno]) {										break;									}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{										break;									}
break;
if (authdebug) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}
authdebug
authdebug
{										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp
tmp
sizeof(tmp)
(tmp)
tmp
tmp
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp2
tmp2
sizeof(tmp2)
(tmp2)
tmp2
tmp2
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp3
tmp3
sizeof(tmp3)
(tmp3)
tmp3
tmp3
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);
ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE)
ast_set_flag64
ast_set_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_ALREADYGONE
IAX_ALREADYGONE
break;
if (format) {							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}
format
format
{							/* No authentication required, let them in */							memset(&ied1, 0, sizeof(ied1));							iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);							iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);							send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);							if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}						}
memset(&ied1, 0, sizeof(ied1));
memset(&ied1, 0, sizeof(ied1))
memset
memset
&ied1
ied1
ied1
0
sizeof(ied1)
(ied1)
ied1
ied1
iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);
iax_ie_append_int(&ied1, IAX_IE_FORMAT, format)
iax_ie_append_int
iax_ie_append_int
&ied1
ied1
ied1
IAX_IE_FORMAT
IAX_IE_FORMAT
format
format
iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);
iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format)
iax_ie_append_versioned_uint64
iax_ie_append_versioned_uint64
&ied1
ied1
ied1
IAX_IE_FORMAT2
IAX_IE_FORMAT2
0
format
format
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1)
send_command
send_command
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACCEPT
IAX_COMMAND_ACCEPT
0
ied1.buf
ied1
ied1
buf
ied1.pos
ied1
ied1
pos
-1
1
if (strcmp(iaxs[fr->callno]->exten, "TBD")) {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							} else {								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}
strcmp(iaxs[fr->callno]->exten, "TBD")
strcmp
strcmp
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
"TBD"
{								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);								ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);								iaxs[fr->callno]->chosenformat = format;								/* Since this is a new call, we should go ahead and set the callid for it. */								iax_pvt_callid_new(fr->callno);								ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);							}
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_set_flag
ast_set_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED
IAX_STATE_STARTED
ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs);
ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n",												ast_inet_ntoa(sin.sin_addr), 												VERBOSE_PREFIX_4,												iax2_getformatname(iaxs[fr->callno]->peerformat), 												VERBOSE_PREFIX_4,												caller_pref_buf,												VERBOSE_PREFIX_4,												iax2_getformatname(format), 												VERBOSE_PREFIX_4,												host_pref_buf, 												VERBOSE_PREFIX_4,												using_prefs)
ast_verb
ast_verb
3
"Accepting UNAUTHENTICATED call from %s:\n"												"%srequested format = %s,\n"												"%srequested prefs = %s,\n"												"%sactual format = %s,\n"												"%shost prefs = %s,\n"												"%spriority = %s\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
iax2_getformatname(iaxs[fr->callno]->peerformat)
iax2_getformatname
iax2_getformatname
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
caller_pref_buf
caller_pref_buf
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
iax2_getformatname(format)
iax2_getformatname
iax2_getformatname
format
format
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
host_pref_buf
host_pref_buf
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
using_prefs
using_prefs
iaxs[fr->callno]->chosenformat = format;
iaxs[fr->callno]->chosenformat = format
iaxs[fr->callno]->chosenformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
chosenformat
format
format
iax_pvt_callid_new(fr->callno);
iax_pvt_callid_new(fr->callno)
iax_pvt_callid_new
iax_pvt_callid_new
fr->callno
fr
fr
callno
ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART);
ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)
ast_set_flag64
ast_set_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_DELAYPBXSTART
IAX_DELAYPBXSTART
{								ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);								/* If this is a TBD call, we're ready but now what...  */								ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							}
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
ast_set_flag
ast_set_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_TBD
IAX_STATE_TBD
ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));
ast_verb(3, "Accepted unauthenticated TBD call from %s\n", ast_inet_ntoa(sin.sin_addr))
ast_verb
ast_verb
3
"Accepted unauthenticated TBD call from %s\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
break;
if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)					merge_encryption(iaxs[fr->callno],ies.encmethods);				else					iaxs[fr->callno]->encmethods = 0;
iaxs[fr->callno]->authmethods & IAX_AUTH_MD5
iaxs[fr->callno]->authmethods
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
authmethods
IAX_AUTH_MD5
IAX_AUTH_MD5
merge_encryption(iaxs[fr->callno],ies.encmethods);
merge_encryption(iaxs[fr->callno],ies.encmethods)
merge_encryption
merge_encryption
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
ies.encmethods
ies
ies
encmethods
iaxs[fr->callno]->encmethods = 0;
iaxs[fr->callno]->encmethods = 0
iaxs[fr->callno]->encmethods
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
encmethods
0
if (!authenticate_request(fr->callno) && iaxs[fr->callno])					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);
!authenticate_request(fr->callno) && iaxs[fr->callno]
!authenticate_request(fr->callno)
authenticate_request(fr->callno)
authenticate_request
authenticate_request
fr->callno
fr
fr
callno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED);
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
ast_set_flag
ast_set_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_AUTHENTICATED
IAX_STATE_AUTHENTICATED
break;
case IAX_COMMAND_DPREQ:
IAX_COMMAND_DPREQ
IAX_COMMAND_DPREQ
if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number) {					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED) && ies.called_number
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD) &&					!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_TBD
IAX_STATE_TBD
!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED
IAX_STATE_STARTED
ies.called_number
ies
ies
called_number
{					if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}				}
if (iaxcompat) {						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					} else {						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}
iaxcompat
iaxcompat
{						/* Spawn a thread for the lookup */						spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);					}
spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num);
spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num)
spawn_dp_lookup
spawn_dp_lookup
fr->callno
fr
fr
callno
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
ies.called_number
ies
ies
called_number
iaxs[fr->callno]->cid_num
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
cid_num
{						/* Just look it up */						dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);					}
dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1);
dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1)
dp_lookup
dp_lookup
fr->callno
fr
fr
callno
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
ies.called_number
ies
ies
called_number
iaxs[fr->callno]->cid_num
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
cid_num
1
break;
case IAX_COMMAND_HANGUP:
IAX_COMMAND_HANGUP
IAX_COMMAND_HANGUP
ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);
ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE)
ast_set_flag64
ast_set_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_ALREADYGONE
IAX_ALREADYGONE
ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno);
ast_debug(1, "Immediately destroying %d, having received hangup\n", fr->callno)
ast_debug
ast_debug
1
"Immediately destroying %d, having received hangup\n"
fr->callno
fr
fr
callno
if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}
set_hangup_source_and_cause(fr->callno, ies.causecode);
set_hangup_source_and_cause(fr->callno, ies.causecode)
set_hangup_source_and_cause
set_hangup_source_and_cause
fr->callno
fr
fr
callno
ies.causecode
ies
ies
causecode
if (!iaxs[fr->callno]) {						break;					}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{						break;					}
break;
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
iax2_destroy(fr->callno);
iax2_destroy(fr->callno)
iax2_destroy
iax2_destroy
fr->callno
fr
fr
callno
break;
case IAX_COMMAND_REJECT:
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
if (iaxs[fr->callno]->owner) {					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{					set_hangup_source_and_cause(fr->callno, ies.causecode);					if (!iaxs[fr->callno]) {						break;					}				}
set_hangup_source_and_cause(fr->callno, ies.causecode);
set_hangup_source_and_cause(fr->callno, ies.causecode)
set_hangup_source_and_cause
set_hangup_source_and_cause
fr->callno
fr
fr
callno
ies.causecode
ies
ies
causecode
if (!iaxs[fr->callno]) {						break;					}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{						break;					}
break;
if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}
!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_PROVISION
IAX_PROVISION
{					if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");					ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);				}
if (iaxs[fr->callno]->owner && authdebug)						ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");
iaxs[fr->callno]->owner && authdebug
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
authdebug
authdebug
ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>");
ast_log(LOG_WARNING, "Call rejected by %s: %s\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr),							ies.cause ? ies.cause : "<Unknown>")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Call rejected by %s: %s\n"
ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
iaxs[fr->callno]->addr.sin_addr
iaxs[fr->callno]->addr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
addr
sin_addr
ies.cause ? ies.cause : "<Unknown>"
ies.cause
ies
ies
cause
ies.cause
ies
ies
cause
"<Unknown>"
ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno);
ast_debug(1, "Immediately destroying %d, having received reject\n",						fr->callno)
ast_debug
ast_debug
1
"Immediately destroying %d, having received reject\n"
fr->callno
fr
fr
callno
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,						       fr->ts, NULL, 0, fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION))					iaxs[fr->callno]->error = EPERM;
!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_PROVISION
IAX_PROVISION
iaxs[fr->callno]->error = EPERM;
iaxs[fr->callno]->error = EPERM
iaxs[fr->callno]->error
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
error
EPERM
EPERM
iax2_destroy(fr->callno);
iax2_destroy(fr->callno)
iax2_destroy
iax2_destroy
fr->callno
fr
fr
callno
break;
case IAX_COMMAND_TRANSFER:
IAX_COMMAND_TRANSFER
IAX_COMMAND_TRANSFER
{				struct ast_channel *bridged_chan;				struct ast_channel *owner;				iax2_lock_owner(fr->callno);				if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}				owner = iaxs[fr->callno]->owner;				bridged_chan = owner ? ast_bridged_channel(owner) : NULL;				if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}				break;			}
struct ast_channel *bridged_chan;
struct ast_channel *bridged_chan;
struct ast_channel
ast_channel
*bridged_chan
*
bridged_chan
struct ast_channel *owner;
struct ast_channel *owner;
struct ast_channel
ast_channel
*owner
*
owner
iax2_lock_owner(fr->callno);
iax2_lock_owner(fr->callno)
iax2_lock_owner
iax2_lock_owner
fr->callno
fr
fr
callno
if (!iaxs[fr->callno]) {					/* Initiating call went away before we could transfer. */					break;				}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{					/* Initiating call went away before we could transfer. */					break;				}
break;
owner = iaxs[fr->callno]->owner;
owner = iaxs[fr->callno]->owner
owner
owner
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
bridged_chan = owner ? ast_bridged_channel(owner) : NULL;
bridged_chan = owner ? ast_bridged_channel(owner) : NULL
bridged_chan
bridged_chan
owner ? ast_bridged_channel(owner) : NULL
owner
owner
ast_bridged_channel(owner)
ast_bridged_channel
ast_bridged_channel
owner
owner
NULL
NULL
if (bridged_chan && ies.called_number) {					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				} else {					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}
bridged_chan && ies.called_number
bridged_chan
bridged_chan
ies.called_number
ies
ies
called_number
{					const char *context;					context = ast_strdupa(iaxs[fr->callno]->context);					ast_channel_ref(owner);					ast_channel_ref(bridged_chan);					ast_channel_unlock(owner);					ast_mutex_unlock(&iaxsl[fr->callno]);					/* Set BLINDTRANSFER channel variables */					pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));					pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));					/* DO NOT hold any locks while calling ast_parking_ext_valid() */					if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}					ast_channel_unref(owner);					ast_channel_unref(bridged_chan);					ast_mutex_lock(&iaxsl[fr->callno]);				}
const char *context;
const char *context;
const char
*context
*
context
context = ast_strdupa(iaxs[fr->callno]->context);
context = ast_strdupa(iaxs[fr->callno]->context)
context
context
ast_strdupa(iaxs[fr->callno]->context)
ast_strdupa
ast_strdupa
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
ast_channel_ref(owner);
ast_channel_ref(owner)
ast_channel_ref
ast_channel_ref
owner
owner
ast_channel_ref(bridged_chan);
ast_channel_ref(bridged_chan)
ast_channel_ref
ast_channel_ref
bridged_chan
bridged_chan
ast_channel_unlock(owner);
ast_channel_unlock(owner)
ast_channel_unlock
ast_channel_unlock
owner
owner
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan));
pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan))
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
owner
owner
"BLINDTRANSFER"
ast_channel_name(bridged_chan)
ast_channel_name
ast_channel_name
bridged_chan
bridged_chan
pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner));
pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner))
pbx_builtin_setvar_helper
pbx_builtin_setvar_helper
bridged_chan
bridged_chan
"BLINDTRANSFER"
ast_channel_name(owner)
ast_channel_name
ast_channel_name
owner
owner
if (ast_parking_ext_valid(ies.called_number, owner, context)) {						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					} else {						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}
ast_parking_ext_valid(ies.called_number, owner, context)
ast_parking_ext_valid
ast_parking_ext_valid
ies.called_number
ies
ies
called_number
owner
owner
context
context
{						ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));						if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}					}
ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan));
ast_debug(1, "Parking call '%s'\n", ast_channel_name(bridged_chan))
ast_debug
ast_debug
1
"Parking call '%s'\n"
ast_channel_name(bridged_chan)
ast_channel_name
ast_channel_name
bridged_chan
bridged_chan
if (iax_park(bridged_chan, owner, ies.called_number, context)) {							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}
iax_park(bridged_chan, owner, ies.called_number, context)
iax_park
iax_park
bridged_chan
bridged_chan
owner
owner
ies.called_number
ies
ies
called_number
context
context
{							ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));						}
ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan));
ast_log(LOG_WARNING, "Failed to park call '%s'\n",								ast_channel_name(bridged_chan))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Failed to park call '%s'\n"
ast_channel_name(bridged_chan)
ast_channel_name
ast_channel_name
bridged_chan
bridged_chan
{						if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}					}
if (ast_async_goto(bridged_chan, context, ies.called_number, 1)) {							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						} else {							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}
ast_async_goto(bridged_chan, context, ies.called_number, 1)
ast_async_goto
ast_async_goto
bridged_chan
bridged_chan
context
context
ies.called_number
ies
ies
called_number
1
{							ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}
ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context);
ast_log(LOG_WARNING,								"Async goto of '%s' to '%s@%s' failed\n",								ast_channel_name(bridged_chan), ies.called_number, context)
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Async goto of '%s' to '%s@%s' failed\n"
ast_channel_name(bridged_chan)
ast_channel_name
ast_channel_name
bridged_chan
bridged_chan
ies.called_number
ies
ies
called_number
context
context
{							ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);						}
ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context);
ast_debug(1, "Async goto of '%s' to '%s@%s' started\n",								ast_channel_name(bridged_chan), ies.called_number, context)
ast_debug
ast_debug
1
"Async goto of '%s' to '%s@%s' started\n"
ast_channel_name(bridged_chan)
ast_channel_name
ast_channel_name
bridged_chan
bridged_chan
ies.called_number
ies
ies
called_number
context
context
ast_channel_unref(owner);
ast_channel_unref(owner)
ast_channel_unref
ast_channel_unref
owner
owner
ast_channel_unref(bridged_chan);
ast_channel_unref(bridged_chan)
ast_channel_unref
ast_channel_unref
bridged_chan
bridged_chan
ast_mutex_lock(&iaxsl[fr->callno]);
ast_mutex_lock(&iaxsl[fr->callno])
ast_mutex_lock
ast_mutex_lock
&iaxsl[fr->callno]
iaxsl[fr->callno]
iaxsl
iaxsl
fr->callno
fr
fr
callno
{					ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);					if (owner) {						ast_channel_unlock(owner);					}				}
ast_debug(1, "Async goto not applicable on call %d\n", fr->callno);
ast_debug(1, "Async goto not applicable on call %d\n", fr->callno)
ast_debug
ast_debug
1
"Async goto not applicable on call %d\n"
fr->callno
fr
fr
callno
if (owner) {						ast_channel_unlock(owner);					}
owner
owner
{						ast_channel_unlock(owner);					}
ast_channel_unlock(owner);
ast_channel_unlock(owner)
ast_channel_unlock
ast_channel_unlock
owner
owner
break;
case IAX_COMMAND_ACCEPT:
IAX_COMMAND_ACCEPT
IAX_COMMAND_ACCEPT
if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED))					break;
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED
IAX_STATE_STARTED | IAX_STATE_TBD
IAX_STATE_STARTED
IAX_STATE_STARTED
IAX_STATE_TBD
IAX_STATE_TBD
IAX_STATE_AUTHENTICATED
IAX_STATE_AUTHENTICATED
break;
if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)) {					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}
ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_PROVISION
IAX_PROVISION
{					/* Send ack immediately, before we destroy */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					iax2_destroy(fr->callno);					break;				}
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
iax2_destroy(fr->callno);
iax2_destroy(fr->callno)
iax2_destroy
iax2_destroy
fr->callno
fr
fr
callno
break;
if (ies.format) {					iaxs[fr->callno]->peerformat = ies.format;				} else {					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}
ies.format
ies
ies
format
{					iaxs[fr->callno]->peerformat = ies.format;				}
iaxs[fr->callno]->peerformat = ies.format;
iaxs[fr->callno]->peerformat = ies.format
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
ies.format
ies
ies
format
{					if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;				}
if (iaxs[fr->callno]->owner)						iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));					else						iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner));
iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner))
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner))
ast_format_cap_to_old_bitfield
ast_format_cap_to_old_bitfield
ast_channel_nativeformats(iaxs[fr->callno]->owner)
ast_channel_nativeformats
ast_channel_nativeformats
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability;
iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat));
ast_verb(3, "Call accepted by %s (format %s)\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iax2_getformatname(iaxs[fr->callno]->peerformat))
ast_verb
ast_verb
3
"Call accepted by %s (format %s)\n"
ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
iaxs[fr->callno]->addr.sin_addr
iaxs[fr->callno]->addr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
addr
sin_addr
iax2_getformatname(iaxs[fr->callno]->peerformat)
iax2_getformatname
iax2_getformatname
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				} else {					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}
!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
{					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}					if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}				}
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
iax_ie_append_str
iax_ie_append_str
&ied0
ied0
ied0
IAX_IE_CAUSE
IAX_IE_CAUSE
"Unable to negotiate codec"
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_CAUSECODE
IAX_IE_CAUSECODE
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (!iaxs[fr->callno]) {						break;					}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{						break;					}
break;
if (authdebug) {						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}
authdebug
authdebug
{						char tmp1[256], tmp2[256];						ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));					}
char tmp1[256], tmp2[256];
char tmp1[256], tmp2[256];
char
tmp1[256]
tmp1
[256]
256
tmp2[256]
tmp2
[256]
256
ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));
ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),							iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected call to %s, format %s incompatible with our capability %s.\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp1
tmp1
sizeof(tmp1)
(tmp1)
tmp1
tmp1
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp2
tmp2
sizeof(tmp2)
(tmp2)
tmp2
tmp2
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
{					ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);					iax2_lock_owner(fr->callno);					if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}				}
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_set_flag
ast_set_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED
IAX_STATE_STARTED
iax2_lock_owner(fr->callno);
iax2_lock_owner(fr->callno)
iax2_lock_owner
iax2_lock_owner
fr->callno
fr
fr
callno
if (iaxs[fr->callno] && iaxs[fr->callno]->owner) {						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}
iaxs[fr->callno] && iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
{						char tmp[256];						/* Switch us to use a compatible format */						ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);						ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));						/* Setup read/write formats properly. */						if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));						if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));						ast_channel_unlock(iaxs[fr->callno]->owner);					}
char tmp[256];
char tmp[256];
char
tmp[256]
tmp
[256]
256
ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat);
ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner), iaxs[fr->callno]->peerformat)
ast_format_cap_from_old_bitfield
ast_format_cap_from_old_bitfield
ast_channel_nativeformats(iaxs[fr->callno]->owner)
ast_channel_nativeformats
ast_channel_nativeformats
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)));
ast_verb(3, "Format for call is %s\n", ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner)))
ast_verb
ast_verb
3
"Format for call is %s\n"
ast_getformatname_multiple(tmp, sizeof(tmp), ast_channel_nativeformats(iaxs[fr->callno]->owner))
ast_getformatname_multiple
ast_getformatname_multiple
tmp
tmp
sizeof(tmp)
(tmp)
tmp
tmp
ast_channel_nativeformats(iaxs[fr->callno]->owner)
ast_channel_nativeformats
ast_channel_nativeformats
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
if (ast_channel_writeformat(iaxs[fr->callno]->owner)->id)							ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));
ast_channel_writeformat(iaxs[fr->callno]->owner)->id
ast_channel_writeformat(iaxs[fr->callno]->owner)
ast_channel_writeformat
ast_channel_writeformat
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
id
ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner));
ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner))
ast_set_write_format
ast_set_write_format
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_writeformat(iaxs[fr->callno]->owner)
ast_channel_writeformat
ast_channel_writeformat
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
if (ast_channel_readformat(iaxs[fr->callno]->owner)->id)							ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));
ast_channel_readformat(iaxs[fr->callno]->owner)->id
ast_channel_readformat(iaxs[fr->callno]->owner)
ast_channel_readformat
ast_channel_readformat
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
id
ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner));
ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner))
ast_set_read_format
ast_set_read_format
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_readformat(iaxs[fr->callno]->owner)
ast_channel_readformat
ast_channel_readformat
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_unlock(iaxs[fr->callno]->owner);
ast_channel_unlock(iaxs[fr->callno]->owner)
ast_channel_unlock
ast_channel_unlock
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
if (iaxs[fr->callno]) {					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{					AST_LIST_LOCK(&dpcache);					AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)						if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);					AST_LIST_UNLOCK(&dpcache);				}
AST_LIST_LOCK(&dpcache);
AST_LIST_LOCK(&dpcache);
AST_LIST_LOCK
AST_LIST_LOCK
(&dpcache)
&dpcache
&
dpcache
AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)
AST_LIST_TRAVERSE(&iaxs[fr->callno]->dpentries, dp, peer_list)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&iaxs[fr->callno]->dpentries
iaxs[fr->callno]->dpentries
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
dpentries
dp
dp
peer_list
peer_list
)
if (!(dp->flags & CACHE_FLAG_TRANSMITTED))							iax2_dprequest(dp, fr->callno);
!(dp->flags & CACHE_FLAG_TRANSMITTED)
(dp->flags & CACHE_FLAG_TRANSMITTED)
dp->flags & CACHE_FLAG_TRANSMITTED
dp->flags
dp
dp
flags
CACHE_FLAG_TRANSMITTED
CACHE_FLAG_TRANSMITTED
iax2_dprequest(dp, fr->callno);
iax2_dprequest(dp, fr->callno)
iax2_dprequest
iax2_dprequest
dp
dp
fr->callno
fr
fr
callno
AST_LIST_UNLOCK(&dpcache);
AST_LIST_UNLOCK(&dpcache)
AST_LIST_UNLOCK
AST_LIST_UNLOCK
&dpcache
dpcache
dpcache
break;
case IAX_COMMAND_POKE:
IAX_COMMAND_POKE
IAX_COMMAND_POKE
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_PONG
IAX_COMMAND_PONG
fr->ts
fr
fr
ts
NULL
NULL
0
-1
1
break;
case IAX_COMMAND_PING:
IAX_COMMAND_PING
IAX_COMMAND_PING
{				struct iax_ie_data pingied;				construct_rr(iaxs[fr->callno], &pingied);				/* Send back a pong packet with the original timestamp */				send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);			}
struct iax_ie_data pingied;
struct iax_ie_data pingied;
struct iax_ie_data
iax_ie_data
pingied
pingied
construct_rr(iaxs[fr->callno], &pingied);
construct_rr(iaxs[fr->callno], &pingied)
construct_rr
construct_rr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
&pingied
pingied
pingied
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1);
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1)
send_command
send_command
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_PONG
IAX_COMMAND_PONG
fr->ts
fr
fr
ts
pingied.buf
pingied
pingied
buf
pingied.pos
pingied
pingied
pos
-1
1
break;
case IAX_COMMAND_PONG:
IAX_COMMAND_PONG
IAX_COMMAND_PONG
iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts;
iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
calc_timestamp(iaxs[fr->callno], 0, &f) - fr->ts
calc_timestamp(iaxs[fr->callno], 0, &f)
calc_timestamp
calc_timestamp
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
0
&f
f
f
fr->ts
fr
fr
ts
save_rr(fr, &ies);
save_rr(fr, &ies)
save_rr
save_rr
fr
fr
&ies
ies
ies
log_jitterstats(fr->callno);
log_jitterstats(fr->callno)
log_jitterstats
log_jitterstats
fr->callno
fr
fr
callno
if (iaxs[fr->callno]->peerpoke) {					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}
iaxs[fr->callno]->peerpoke
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerpoke
{					peer = iaxs[fr->callno]->peerpoke;					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}					peer->lastms = iaxs[fr->callno]->pingtime;					if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;					/* Remove scheduled iax2_poke_noanswer */					if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}					/* Schedule the next cycle */					if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));					if (peer->pokeexpire == -1)						peer_unref(peer);					/* and finally send the ack */					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);					/* And wrap up the qualify call */					iax2_destroy(fr->callno);					peer->callno = 0;					ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);				}
peer = iaxs[fr->callno]->peerpoke;
peer = iaxs[fr->callno]->peerpoke
peer
peer
iaxs[fr->callno]->peerpoke
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerpoke
if ((peer->lastms < 0)  || (peer->historicms > peer->maxms)) {						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					} else if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}
(peer->lastms < 0)  || (peer->historicms > peer->maxms)
(peer->lastms < 0)
peer->lastms < 0
peer->lastms
peer
peer
lastms
0
(peer->historicms > peer->maxms)
peer->historicms > peer->maxms
peer->historicms
peer
peer
historicms
peer->maxms
peer
peer
maxms
{						if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}
if (iaxs[fr->callno]->pingtime <= peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}
iaxs[fr->callno]->pingtime <= peer->maxms
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
peer->maxms
peer
peer
maxms
{							ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}
ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime);
ast_log(LOG_NOTICE, "Peer '%s' is now REACHABLE! Time: %d\n", peer->name, iaxs[fr->callno]->pingtime)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Peer '%s' is now REACHABLE! Time: %d\n"
peer->name
peer
peer
name
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime);
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime)
manager_event
manager_event
EVENT_FLAG_SYSTEM
EVENT_FLAG_SYSTEM
"PeerStatus"
"ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Reachable\r\nTime: %d\r\n"
peer->name
peer
peer
name
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name);
ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_NOT_INUSE
AST_DEVICE_NOT_INUSE
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"IAX2/%s"
peer->name
peer
peer
name
if ((peer->historicms > 0) && (peer->historicms <= peer->maxms)) {						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}
(peer->historicms > 0) && (peer->historicms <= peer->maxms)
(peer->historicms > 0)
peer->historicms > 0
peer->historicms
peer
peer
historicms
0
(peer->historicms <= peer->maxms)
peer->historicms <= peer->maxms
peer->historicms
peer
peer
historicms
peer->maxms
peer
peer
maxms
{						if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}					}
if (iaxs[fr->callno]->pingtime > peer->maxms) {							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}
iaxs[fr->callno]->pingtime > peer->maxms
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
peer->maxms
peer
peer
maxms
{							ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);							manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime); 							ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name); /* Activate notification */						}
ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime);
ast_log(LOG_NOTICE, "Peer '%s' is now TOO LAGGED (%d ms)!\n", peer->name, iaxs[fr->callno]->pingtime)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Peer '%s' is now TOO LAGGED (%d ms)!\n"
peer->name
peer
peer
name
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime);
manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n", peer->name, iaxs[fr->callno]->pingtime)
manager_event
manager_event
EVENT_FLAG_SYSTEM
EVENT_FLAG_SYSTEM
"PeerStatus"
"ChannelType: IAX2\r\nPeer: IAX2/%s\r\nPeerStatus: Lagged\r\nTime: %d\r\n"
peer->name
peer
peer
name
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name);
ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name)
ast_devstate_changed
ast_devstate_changed
AST_DEVICE_UNAVAILABLE
AST_DEVICE_UNAVAILABLE
AST_DEVSTATE_CACHABLE
AST_DEVSTATE_CACHABLE
"IAX2/%s"
peer->name
peer
peer
name
peer->lastms = iaxs[fr->callno]->pingtime;
peer->lastms = iaxs[fr->callno]->pingtime
peer->lastms
peer
peer
lastms
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
if (peer->smoothing && (peer->lastms > -1))						peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;					else if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;
peer->smoothing && (peer->lastms > -1)
peer->smoothing
peer
peer
smoothing
(peer->lastms > -1)
peer->lastms > -1
peer->lastms
peer
peer
lastms
-1
1
peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2;
peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms) / 2
peer->historicms
peer
peer
historicms
(iaxs[fr->callno]->pingtime + peer->historicms) / 2
(iaxs[fr->callno]->pingtime + peer->historicms)
iaxs[fr->callno]->pingtime + peer->historicms
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
peer->historicms
peer
peer
historicms
2
if (peer->smoothing && peer->lastms < 0)						peer->historicms = (0 + peer->historicms) / 2;					else											peer->historicms = iaxs[fr->callno]->pingtime;
peer->smoothing && peer->lastms < 0
peer->smoothing
peer
peer
smoothing
peer->lastms < 0
peer->lastms
peer
peer
lastms
0
peer->historicms = (0 + peer->historicms) / 2;
peer->historicms = (0 + peer->historicms) / 2
peer->historicms
peer
peer
historicms
(0 + peer->historicms) / 2
(0 + peer->historicms)
0 + peer->historicms
0
peer->historicms
peer
peer
historicms
2
peer->historicms = iaxs[fr->callno]->pingtime;
peer->historicms = iaxs[fr->callno]->pingtime
peer->historicms
peer
peer
historicms
iaxs[fr->callno]->pingtime
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
pingtime
if (peer->pokeexpire > -1) {						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}
peer->pokeexpire > -1
peer->pokeexpire
peer
peer
pokeexpire
-1
1
{						if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}					}
if (!AST_SCHED_DEL(sched, peer->pokeexpire)) {							peer_unref(peer);							peer->pokeexpire = -1;						}
!AST_SCHED_DEL(sched, peer->pokeexpire)
AST_SCHED_DEL(sched, peer->pokeexpire)
AST_SCHED_DEL
AST_SCHED_DEL
sched
sched
peer->pokeexpire
peer
peer
pokeexpire
{							peer_unref(peer);							peer->pokeexpire = -1;						}
peer_unref(peer);
peer_unref(peer)
peer_unref
peer_unref
peer
peer
peer->pokeexpire = -1;
peer->pokeexpire = -1
peer->pokeexpire
peer
peer
pokeexpire
-1
1
if ((peer->lastms < 0)  || (peer->historicms > peer->maxms))						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));					else						peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));
(peer->lastms < 0)  || (peer->historicms > peer->maxms)
(peer->lastms < 0)
peer->lastms < 0
peer->lastms
peer
peer
lastms
0
(peer->historicms > peer->maxms)
peer->historicms > peer->maxms
peer->historicms
peer
peer
historicms
peer->maxms
peer
peer
maxms
peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer));
peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer))
peer->pokeexpire
peer
peer
pokeexpire
iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer))
iax2_sched_add
iax2_sched_add
sched
sched
peer->pokefreqnotok
peer
peer
pokefreqnotok
iax2_poke_peer_s
iax2_poke_peer_s
peer_ref(peer)
peer_ref
peer_ref
peer
peer
peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer));
peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer))
peer->pokeexpire
peer
peer
pokeexpire
iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer))
iax2_sched_add
iax2_sched_add
sched
sched
peer->pokefreqok
peer
peer
pokefreqok
iax2_poke_peer_s
iax2_poke_peer_s
peer_ref(peer)
peer_ref
peer_ref
peer
peer
if (peer->pokeexpire == -1)						peer_unref(peer);
peer->pokeexpire == -1
peer->pokeexpire
peer
peer
pokeexpire
-1
1
peer_unref(peer);
peer_unref(peer)
peer_unref
peer_unref
peer
peer
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
iax2_destroy(fr->callno);
iax2_destroy(fr->callno)
iax2_destroy
iax2_destroy
fr->callno
fr
fr
callno
peer->callno = 0;
peer->callno = 0
peer->callno
peer
peer
callno
0
ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms);
ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\n", peer->name, peer->lastms, peer->historicms, peer->maxms)
ast_debug
ast_debug
1
"Peer %s: got pong, lastms %d, historicms %d, maxms %d\n"
peer->name
peer
peer
name
peer->lastms
peer
peer
lastms
peer->historicms
peer
peer
historicms
peer->maxms
peer
peer
maxms
break;
case IAX_COMMAND_LAGRQ:
IAX_COMMAND_LAGRQ
IAX_COMMAND_LAGRQ
case IAX_COMMAND_LAGRP:
IAX_COMMAND_LAGRP
IAX_COMMAND_LAGRP
f.src = "LAGRQ";
f.src = "LAGRQ"
f.src
f
f
src
"LAGRQ"
f.mallocd = 0;
f.mallocd = 0
f.mallocd
f
f
mallocd
0
f.offset = 0;
f.offset = 0
f.offset
f
f
offset
0
f.samples = 0;
f.samples = 0
f.samples
f
f
samples
0
iax_frame_wrap(fr, &f);
iax_frame_wrap(fr, &f)
iax_frame_wrap
iax_frame_wrap
fr
fr
&f
f
f
if (f.subclass.integer == IAX_COMMAND_LAGRQ) {					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				} else {					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}
f.subclass.integer == IAX_COMMAND_LAGRQ
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_LAGRQ
IAX_COMMAND_LAGRQ
{					/* Received a LAGRQ - echo back a LAGRP */					fr->af.subclass.integer = IAX_COMMAND_LAGRP;					iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);				}
fr->af.subclass.integer = IAX_COMMAND_LAGRP;
fr->af.subclass.integer = IAX_COMMAND_LAGRP
fr->af.subclass.integer
fr->af.subclass
fr->af
fr
fr
af
subclass
integer
IAX_COMMAND_LAGRP
IAX_COMMAND_LAGRP
iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0);
iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0)
iax2_send
iax2_send
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
&fr->af
fr->af
fr
fr
af
fr->ts
fr
fr
ts
-1
1
0
0
0
{					/* Received LAGRP in response to our LAGRQ */					unsigned int ts;					/* This is a reply we've been given, actually measure the difference */					ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);					iaxs[fr->callno]->lag = ts - fr->ts;					if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);				}
unsigned int ts;
unsigned int ts;
unsigned int
ts
ts
ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af);
ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af)
ts
ts
calc_timestamp(iaxs[fr->callno], 0, &fr->af)
calc_timestamp
calc_timestamp
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
0
&fr->af
fr->af
fr
fr
af
iaxs[fr->callno]->lag = ts - fr->ts;
iaxs[fr->callno]->lag = ts - fr->ts
iaxs[fr->callno]->lag
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
lag
ts - fr->ts
ts
ts
fr->ts
fr
fr
ts
if (iaxdebug)						ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);
iaxdebug
iaxdebug
ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag);
ast_debug(1, "Peer %s lag measured as %dms\n",							ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->lag)
ast_debug
ast_debug
1
"Peer %s lag measured as %dms\n"
ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
iaxs[fr->callno]->addr.sin_addr
iaxs[fr->callno]->addr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
addr
sin_addr
iaxs[fr->callno]->lag
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
lag
break;
case IAX_COMMAND_AUTHREQ:
IAX_COMMAND_AUTHREQ
IAX_COMMAND_AUTHREQ
if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED | IAX_STATE_TBD
IAX_STATE_STARTED
IAX_STATE_STARTED
IAX_STATE_TBD
IAX_STATE_TBD
{					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}
ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");
ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Call on %s is already up, can't start on it\n"
iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>"
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_name(iaxs[fr->callno]->owner)
ast_channel_name
ast_channel_name
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
"<Unknown>"
break;
if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)) {					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					}
authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)
authenticate_reply
authenticate_reply
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
&iaxs[fr->callno]->addr
iaxs[fr->callno]->addr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
addr
&ies
ies
ies
iaxs[fr->callno]->secret
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
secret
iaxs[fr->callno]->outkey
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
outkey
{					struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,					}
struct ast_frame hangup_fr = { .frametype = AST_FRAME_CONTROL,								.subclass.integer = AST_CONTROL_HANGUP,
;
ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr));
ast_log(LOG_WARNING, 						"I don't know how to authenticate %s to %s\n", 						ies.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr))
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"I don't know how to authenticate %s to %s\n"
ies.username ? ies.username : "<unknown>"
ies.username
ies
ies
username
ies.username
ies
ies
username
"<unknown>"
ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
iaxs[fr->callno]->addr.sin_addr
iaxs[fr->callno]->addr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
addr
sin_addr
iax2_queue_frame(fr->callno, &hangup_fr);
iax2_queue_frame(fr->callno, &hangup_fr)
iax2_queue_frame
iax2_queue_frame
fr->callno
fr
fr
callno
&hangup_fr
hangup_fr
hangup_fr
break;
case IAX_COMMAND_AUTHREP:
IAX_COMMAND_AUTHREP
IAX_COMMAND_AUTHREP
if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
delayreject
delayreject
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)) {					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED | IAX_STATE_TBD
IAX_STATE_STARTED
IAX_STATE_STARTED
IAX_STATE_TBD
IAX_STATE_TBD
{					ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					break;				}
ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");
ast_log(LOG_WARNING, "Call on %s is already up, can't start on it\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Call on %s is already up, can't start on it\n"
iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>"
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_name(iaxs[fr->callno]->owner)
ast_channel_name
ast_channel_name
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
"<Unknown>"
break;
if (authenticate_verify(iaxs[fr->callno], &ies)) {					if (authdebug)						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);					memset(&ied0, 0, sizeof(ied0));					auth_fail(fr->callno, IAX_COMMAND_REJECT);					break;				}
authenticate_verify(iaxs[fr->callno], &ies)
authenticate_verify
authenticate_verify
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
&ies
ies
ies
{					if (authdebug)						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);					memset(&ied0, 0, sizeof(ied0));					auth_fail(fr->callno, IAX_COMMAND_REJECT);					break;				}
if (authdebug)						ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);
authdebug
authdebug
ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username);
ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr), iaxs[fr->callno]->username)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Host %s failed to authenticate as %s\n"
ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
iaxs[fr->callno]->addr.sin_addr
iaxs[fr->callno]->addr
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
addr
sin_addr
iaxs[fr->callno]->username
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
username
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
auth_fail(fr->callno, IAX_COMMAND_REJECT);
auth_fail(fr->callno, IAX_COMMAND_REJECT)
auth_fail
auth_fail
fr->callno
fr
fr
callno
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
break;
if (strcasecmp(iaxs[fr->callno]->exten, "TBD")) {					/* This might re-enter the IAX code and need the lock */					exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);				} else					exists = 0;
strcasecmp(iaxs[fr->callno]->exten, "TBD")
strcasecmp
strcasecmp
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
"TBD"
{					/* This might re-enter the IAX code and need the lock */					exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);				}
exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num);
exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)
exists
exists
ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)
ast_exists_extension
ast_exists_extension
NULL
NULL
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
1
iaxs[fr->callno]->cid_num
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
cid_num
exists = 0;
exists = 0
exists
exists
0
if (strcmp(iaxs[fr->callno]->exten, "TBD") && !exists) {					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}				} else {					/* Select an appropriate format */					if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					} else {						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}					if (!format) {						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}					if (format) {						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}				}
strcmp(iaxs[fr->callno]->exten, "TBD") && !exists
strcmp(iaxs[fr->callno]->exten, "TBD")
strcmp
strcmp
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
"TBD"
!exists
exists
exists
{					if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);					if (!iaxs[fr->callno]) {						break;					}				}
if (authdebug)						ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
authdebug
authdebug
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, request '%s@%s' does not exist\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension")
iax_ie_append_str
iax_ie_append_str
&ied0
ied0
ied0
IAX_IE_CAUSE
IAX_IE_CAUSE
"No such context/extension"
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_CAUSECODE
IAX_IE_CAUSECODE
AST_CAUSE_NO_ROUTE_DESTINATION
AST_CAUSE_NO_ROUTE_DESTINATION
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (!iaxs[fr->callno]) {						break;					}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{						break;					}
break;
{					/* Select an appropriate format */					if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					} else {						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}					if (!format) {						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}					if (format) {						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}				}
if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					} else {						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOPREFS
IAX_CODEC_NOPREFS
{						if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}						format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;						memset(&pref, 0, sizeof(pref));						strcpy(caller_pref_buf, "disabled");						strcpy(host_pref_buf, "disabled");					}
if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							using_prefs = "reqonly";						} else {							using_prefs = "disabled";						}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
{							using_prefs = "reqonly";						}
using_prefs = "reqonly";
using_prefs = "reqonly"
using_prefs
using_prefs
"reqonly"
{							using_prefs = "disabled";						}
using_prefs = "disabled";
using_prefs = "disabled"
using_prefs
using_prefs
"disabled"
format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability;
format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability
format
format
iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
memset(&pref, 0, sizeof(pref));
memset(&pref, 0, sizeof(pref))
memset
memset
&pref
pref
pref
0
sizeof(pref)
(pref)
pref
pref
strcpy(caller_pref_buf, "disabled");
strcpy(caller_pref_buf, "disabled")
strcpy
strcpy
caller_pref_buf
caller_pref_buf
"disabled"
strcpy(host_pref_buf, "disabled");
strcpy(host_pref_buf, "disabled")
strcpy
strcpy
host_pref_buf
host_pref_buf
"disabled"
{						struct ast_format tmpfmt;						using_prefs = "mine";						if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);						if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;						format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);						ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);						ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);					}
struct ast_format tmpfmt;
struct ast_format tmpfmt;
struct ast_format
ast_format
tmpfmt
tmpfmt
using_prefs = "mine";
using_prefs = "mine"
using_prefs
using_prefs
"mine"
if (ies.codec_prefs)							ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);
ies.codec_prefs
ies
ies
codec_prefs
ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0);
ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0)
ast_codec_pref_convert
ast_codec_pref_convert
&iaxs[fr->callno]->rprefs
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
ies.codec_prefs
ies
ies
codec_prefs
32
0
if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						} else /* if no codec_prefs IE do it the old way */							pref = iaxs[fr->callno]->prefs;
ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
ast_codec_pref_index
ast_codec_pref_index
&iaxs[fr->callno]->rprefs
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
0
&tmpfmt
tmpfmt
tmpfmt
{							if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}						}
if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							} else {								pref = iaxs[fr->callno]->prefs;							}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_USER_FIRST
IAX_CODEC_USER_FIRST
{								pref = iaxs[fr->callno]->rprefs;								using_prefs = "caller";							}
pref = iaxs[fr->callno]->rprefs;
pref = iaxs[fr->callno]->rprefs
pref
pref
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
using_prefs = "caller";
using_prefs = "caller"
using_prefs
using_prefs
"caller"
{								pref = iaxs[fr->callno]->prefs;							}
pref = iaxs[fr->callno]->prefs;
pref = iaxs[fr->callno]->prefs
pref
pref
iaxs[fr->callno]->prefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
prefs
pref = iaxs[fr->callno]->prefs;
pref = iaxs[fr->callno]->prefs
pref
pref
iaxs[fr->callno]->prefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
prefs
format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0);
format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0)
format
format
iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0)
iax2_codec_choose
iax2_codec_choose
&pref
pref
pref
iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
0
ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1);
ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf) - 1)
ast_codec_pref_string
ast_codec_pref_string
&iaxs[fr->callno]->rprefs
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
caller_pref_buf
caller_pref_buf
sizeof(caller_pref_buf) - 1
sizeof(caller_pref_buf)
(caller_pref_buf)
caller_pref_buf
caller_pref_buf
1
ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1);
ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf) - 1)
ast_codec_pref_string
ast_codec_pref_string
&iaxs[fr->callno]->prefs
iaxs[fr->callno]->prefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
prefs
host_pref_buf
host_pref_buf
sizeof(host_pref_buf) - 1
sizeof(host_pref_buf)
(host_pref_buf)
host_pref_buf
host_pref_buf
1
if (!format) {						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}
!format
format
format
{						char tmp1[256], tmp2[256], tmp3[256];						if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}						if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}					}
char tmp1[256], tmp2[256], tmp3[256];
char tmp1[256], tmp2[256], tmp3[256];
char
tmp1[256]
tmp1
[256]
256
tmp2[256]
tmp2
[256]
256
tmp3[256]
tmp3
[256]
256
if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}
!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
{							ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));							format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;						}
ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability));
ast_debug(1, "We don't do requested format %s, falling back to peer capability '%s'\n",								iax2_getformatname(iaxs[fr->callno]->peerformat),								iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability))
ast_debug
ast_debug
1
"We don't do requested format %s, falling back to peer capability '%s'\n"
iax2_getformatname(iaxs[fr->callno]->peerformat)
iax2_getformatname
iax2_getformatname
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp1
tmp1
sizeof(tmp1)
(tmp1)
tmp1
tmp1
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability;
format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
format
format
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
if (!format) {							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						} else {							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}
!format
format
format
{							if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}							memset(&ied0, 0, sizeof(ied0));							iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");							iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);							send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);							if (!iaxs[fr->callno]) {								break;							}						}
if (authdebug) {								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}
authdebug
authdebug
{								if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}							}
if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								} else {									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
{									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));								}
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n", ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp1
tmp1
sizeof(tmp1)
(tmp1)
tmp1
tmp1
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp2
tmp2
sizeof(tmp2)
(tmp2)
tmp2
tmp2
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
{									ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));								}
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",										ast_inet_ntoa(sin.sin_addr),										iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),										iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),										iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp1
tmp1
sizeof(tmp1)
(tmp1)
tmp1
tmp1
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp2
tmp2
sizeof(tmp2)
(tmp2)
tmp2
tmp2
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp3
tmp3
sizeof(tmp3)
(tmp3)
tmp3
tmp3
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
iax_ie_append_str
iax_ie_append_str
&ied0
ied0
ied0
IAX_IE_CAUSE
IAX_IE_CAUSE
"Unable to negotiate codec"
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_CAUSECODE
IAX_IE_CAUSECODE
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (!iaxs[fr->callno]) {								break;							}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{								break;							}
break;
{							/* Pick one... */							if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}							if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}						}
if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							} else {								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
{								if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;							}
if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability))									format = 0;
!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
format = 0;
format = 0
format
format
0
{								if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}							}
if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)) {									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								} else {									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOPREFS
IAX_CODEC_NOPREFS
{									using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";									memset(&pref, 0, sizeof(pref));									format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									strcpy(caller_pref_buf,"disabled");									strcpy(host_pref_buf,"disabled");								}
using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled";
using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled"
using_prefs
using_prefs
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ? "reqonly" : "disabled"
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
"reqonly"
"disabled"
memset(&pref, 0, sizeof(pref));
memset(&pref, 0, sizeof(pref))
memset
memset
&pref
pref
pref
0
sizeof(pref)
(pref)
pref
pref
format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);
format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
format
format
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP) ?										iaxs[fr->callno]->peerformat : iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
iax2_best_codec
iax2_best_codec
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
strcpy(caller_pref_buf,"disabled");
strcpy(caller_pref_buf,"disabled")
strcpy
strcpy
caller_pref_buf
caller_pref_buf
"disabled"
strcpy(host_pref_buf,"disabled");
strcpy(host_pref_buf,"disabled")
strcpy
strcpy
host_pref_buf
host_pref_buf
"disabled"
{									struct ast_format tmpfmt;									using_prefs = "mine";									if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);									}
struct ast_format tmpfmt;
struct ast_format tmpfmt;
struct ast_format
ast_format
tmpfmt
tmpfmt
using_prefs = "mine";
using_prefs = "mine"
using_prefs
using_prefs
"mine"
if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)) {										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									} else /* if no codec_prefs IE do it the old way */										format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);
ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
ast_codec_pref_index
ast_codec_pref_index
&iaxs[fr->callno]->rprefs
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
0
&tmpfmt
tmpfmt
tmpfmt
{										/* Do the opposite of what we tried above. */										if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}										format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);									}
if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)) {											pref = iaxs[fr->callno]->prefs;										} else {											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_USER_FIRST
IAX_CODEC_USER_FIRST
{											pref = iaxs[fr->callno]->prefs;										}
pref = iaxs[fr->callno]->prefs;
pref = iaxs[fr->callno]->prefs
pref
pref
iaxs[fr->callno]->prefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
prefs
{											pref = iaxs[fr->callno]->rprefs;											using_prefs = "caller";										}
pref = iaxs[fr->callno]->rprefs;
pref = iaxs[fr->callno]->rprefs
pref
pref
iaxs[fr->callno]->rprefs
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
rprefs
using_prefs = "caller";
using_prefs = "caller"
using_prefs
using_prefs
"caller"
format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1);
format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1)
format
format
iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1)
iax2_codec_choose
iax2_codec_choose
&pref
pref
pref
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
1
format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability);
format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
format
format
iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
iax2_best_codec
iax2_best_codec
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
if (!format) {								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}
!format
format
format
{								char tmp1[256], tmp2[256], tmp3[256];								ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));								if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}								memset(&ied0, 0, sizeof(ied0));								iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");								iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);								send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);								if (!iaxs[fr->callno]) {									break;								}							}
char tmp1[256], tmp2[256], tmp3[256];
char tmp1[256], tmp2[256], tmp3[256];
char
tmp1[256]
tmp1
[256]
256
tmp2[256]
tmp2
[256]
256
tmp3[256]
tmp3
[256]
256
ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability));
ast_log(LOG_ERROR, "No best format in %s???\n",									iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_ERROR
LOG_ERROR
"No best format in %s???\n"
iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp1
tmp1
sizeof(tmp1)
(tmp1)
tmp1
tmp1
iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
if (authdebug) {									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}
authdebug
authdebug
{									if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}								}
if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)) {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									} else {										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}
ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_CODEC_NOCAP
IAX_CODEC_NOCAP
{										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));									}
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability));
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, requested '%s' incompatible with our capability '%s'.\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp1
tmp1
sizeof(tmp1)
(tmp1)
tmp1
tmp1
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp2
tmp2
sizeof(tmp2)
(tmp2)
tmp2
tmp2
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
{										ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));									}
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability));
ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n",											ast_inet_ntoa(sin.sin_addr),											iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat),											iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability),											iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability))
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected connect attempt from %s, requested/capability '%s'/'%s' incompatible with our capability '%s'.\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iax2_getformatname_multiple(tmp1, sizeof(tmp1), iaxs[fr->callno]->peerformat)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp1
tmp1
sizeof(tmp1)
(tmp1)
tmp1
tmp1
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
iax2_getformatname_multiple(tmp2, sizeof(tmp2), iaxs[fr->callno]->peercapability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp2
tmp2
sizeof(tmp2)
(tmp2)
tmp2
tmp2
iaxs[fr->callno]->peercapability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercapability
iax2_getformatname_multiple(tmp3, sizeof(tmp3), iaxs[fr->callno]->capability)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp3
tmp3
sizeof(tmp3)
(tmp3)
tmp3
tmp3
iaxs[fr->callno]->capability
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
capability
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec");
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
iax_ie_append_str
iax_ie_append_str
&ied0
ied0
ied0
IAX_IE_CAUSE
IAX_IE_CAUSE
"Unable to negotiate codec"
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL);
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_CAUSECODE
IAX_IE_CAUSECODE
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
AST_CAUSE_BEARERCAPABILITY_NOTAVAIL
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (!iaxs[fr->callno]) {									break;								}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{									break;								}
break;
if (format) {						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}
format
format
{						/* Authentication received */						memset(&ied1, 0, sizeof(ied1));						iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);						iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);						send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);						if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}					}
memset(&ied1, 0, sizeof(ied1));
memset(&ied1, 0, sizeof(ied1))
memset
memset
&ied1
ied1
ied1
0
sizeof(ied1)
(ied1)
ied1
ied1
iax_ie_append_int(&ied1, IAX_IE_FORMAT, format);
iax_ie_append_int(&ied1, IAX_IE_FORMAT, format)
iax_ie_append_int
iax_ie_append_int
&ied1
ied1
ied1
IAX_IE_FORMAT
IAX_IE_FORMAT
format
format
iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format);
iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format)
iax_ie_append_versioned_uint64
iax_ie_append_versioned_uint64
&ied1
ied1
ied1
IAX_IE_FORMAT2
IAX_IE_FORMAT2
0
format
format
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1);
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1)
send_command
send_command
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACCEPT
IAX_COMMAND_ACCEPT
0
ied1.buf
ied1
ied1
buf
ied1.pos
ied1
ied1
pos
-1
1
if (strcmp(iaxs[fr->callno]->exten, "TBD")) {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						} else {							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}
strcmp(iaxs[fr->callno]->exten, "TBD")
strcmp
strcmp
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
"TBD"
{							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);							if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}						}
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_set_flag
ast_set_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED
IAX_STATE_STARTED
ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs);
ast_verb(3, "Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n", 											ast_inet_ntoa(sin.sin_addr), 											VERBOSE_PREFIX_4,											iax2_getformatname(iaxs[fr->callno]->peerformat),											VERBOSE_PREFIX_4,											caller_pref_buf,											VERBOSE_PREFIX_4,											iax2_getformatname(format),											VERBOSE_PREFIX_4,											host_pref_buf,											VERBOSE_PREFIX_4,											using_prefs)
ast_verb
ast_verb
3
"Accepting AUTHENTICATED call from %s:\n"											"%srequested format = %s,\n"											"%srequested prefs = %s,\n"											"%sactual format = %s,\n"											"%shost prefs = %s,\n"											"%spriority = %s\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
iax2_getformatname(iaxs[fr->callno]->peerformat)
iax2_getformatname
iax2_getformatname
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
caller_pref_buf
caller_pref_buf
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
iax2_getformatname(format)
iax2_getformatname
iax2_getformatname
format
format
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
host_pref_buf
host_pref_buf
VERBOSE_PREFIX_4
VERBOSE_PREFIX_4
using_prefs
using_prefs
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_set_flag
ast_set_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED
IAX_STATE_STARTED
if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)))								iax2_destroy(fr->callno);							else if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}
!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1))
(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1))
c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)
c
c
ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)
ast_iax2_new
ast_iax2_new
fr->callno
fr
fr
callno
AST_STATE_RING
AST_STATE_RING
format
format
NULL
NULL
1
iax2_destroy(fr->callno);
iax2_destroy(fr->callno)
iax2_destroy
iax2_destroy
fr->callno
fr
fr
callno
if (ies.vars) {								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}
ies.vars
ies
ies
vars
{								struct ast_datastore *variablestore;								struct ast_variable *var, *prev = NULL;								AST_LIST_HEAD(, ast_var_t) *varlist;								varlist = ast_calloc(1, sizeof(*varlist));								variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);								if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}							}
struct ast_datastore *variablestore;
struct ast_datastore *variablestore;
struct ast_datastore
ast_datastore
*variablestore
*
variablestore
struct ast_variable *var, *prev = NULL;
struct ast_variable *var, *prev = NULL;
struct ast_variable
ast_variable
*var
*
var
*prev = NULL
*
prev
= NULL
NULL
NULL
AST_LIST_HEAD(, ast_var_t) *varlist;
varlist = ast_calloc(1, sizeof(*varlist));
varlist = ast_calloc(1, sizeof(*varlist))
varlist
varlist
ast_calloc(1, sizeof(*varlist))
ast_calloc
ast_calloc
1
sizeof(*varlist)
(*varlist)
*varlist
varlist
varlist
variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);
variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
variablestore
variablestore
ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
ast_datastore_alloc
ast_datastore_alloc
&iax2_variable_datastore_info
iax2_variable_datastore_info
iax2_variable_datastore_info
NULL
NULL
if (variablestore && varlist) {									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								} else {									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}
variablestore && varlist
variablestore
variablestore
varlist
varlist
{									variablestore->data = varlist;									variablestore->inheritance = DATASTORE_INHERIT_FOREVER;									AST_LIST_HEAD_INIT(varlist);									ast_debug(1, "I can haz IAX vars? w00t\n");									for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}									if (prev)										ast_free(prev);									ies.vars = NULL;									ast_channel_datastore_add(c, variablestore);								}
variablestore->data = varlist;
variablestore->data = varlist
variablestore->data
variablestore
variablestore
data
varlist
varlist
variablestore->inheritance = DATASTORE_INHERIT_FOREVER;
variablestore->inheritance = DATASTORE_INHERIT_FOREVER
variablestore->inheritance
variablestore
variablestore
inheritance
DATASTORE_INHERIT_FOREVER
DATASTORE_INHERIT_FOREVER
AST_LIST_HEAD_INIT(varlist);
AST_LIST_HEAD_INIT(varlist);
AST_LIST_HEAD_INIT
AST_LIST_HEAD_INIT
(varlist)
varlist
varlist
ast_debug(1, "I can haz IAX vars? w00t\n");
ast_debug(1, "I can haz IAX vars? w00t\n")
ast_debug
ast_debug
1
"I can haz IAX vars? w00t\n"
for (var = ies.vars; var; var = var->next) {										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}
var = ies.vars;
var = ies.vars
var
var
ies.vars
ies
ies
vars
var
var
var = var->next
var
var
var->next
var
var
next
{										struct ast_var_t *newvar = ast_var_assign(var->name, var->value);										if (prev)											ast_free(prev);										prev = var;										if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}									}
struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
struct ast_var_t
ast_var_t
*newvar = ast_var_assign(var->name, var->value)
*
newvar
= ast_var_assign(var->name, var->value)
ast_var_assign(var->name, var->value)
ast_var_assign
ast_var_assign
var->name
var
var
name
var->value
var
var
value
if (prev)											ast_free(prev);
prev
prev
ast_free(prev);
ast_free(prev)
ast_free
ast_free
prev
prev
prev = var;
prev = var
prev
prev
var
var
if (!newvar) {											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										} else {											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}
!newvar
newvar
newvar
{											/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */											ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");										}
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n")
ast_log
ast_log
LOG_ERROR
LOG_ERROR
"Memory allocation error while processing IAX2 variables\n"
{											AST_LIST_INSERT_TAIL(varlist, newvar, entries);										}
AST_LIST_INSERT_TAIL(varlist, newvar, entries);
AST_LIST_INSERT_TAIL(varlist, newvar, entries)
AST_LIST_INSERT_TAIL
AST_LIST_INSERT_TAIL
varlist
varlist
newvar
newvar
entries
entries
if (prev)										ast_free(prev);
prev
prev
ast_free(prev);
ast_free(prev)
ast_free
ast_free
prev
prev
ies.vars = NULL;
ies.vars = NULL
ies.vars
ies
ies
vars
NULL
NULL
ast_channel_datastore_add(c, variablestore);
ast_channel_datastore_add(c, variablestore)
ast_channel_datastore_add
ast_channel_datastore_add
c
c
variablestore
variablestore
{									ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									if (variablestore)										ast_datastore_free(variablestore);									if (varlist)										ast_free(varlist);								}
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n")
ast_log
ast_log
LOG_ERROR
LOG_ERROR
"Memory allocation error while processing IAX2 variables\n"
if (variablestore)										ast_datastore_free(variablestore);
variablestore
variablestore
ast_datastore_free(variablestore);
ast_datastore_free(variablestore)
ast_datastore_free
ast_datastore_free
variablestore
variablestore
if (varlist)										ast_free(varlist);
varlist
varlist
ast_free(varlist);
ast_free(varlist);
ast_free
ast_free
(varlist)
varlist
varlist
{							ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);							/* If this is a TBD call, we're ready but now what...  */							ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));							if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}						}
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
ast_set_flag
ast_set_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_TBD
IAX_STATE_TBD
ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr));
ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\n", ast_inet_ntoa(sin.sin_addr))
ast_verb
ast_verb
3
"Accepted AUTHENTICATED TBD call from %s\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)) {								goto immediatedial;							}
ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)
ast_test_flag64
ast_test_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_IMMEDIATE
IAX_IMMEDIATE
{								goto immediatedial;							}
goto immediatedial;
immediatedial
break;
case IAX_COMMAND_DIAL:
IAX_COMMAND_DIAL
IAX_COMMAND_DIAL
immediatedial:				if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}				}
immediatedial
if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)) {					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}				}
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_TBD
IAX_STATE_TBD
{					ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);					ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");					if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}				}
ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD);
ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
ast_clear_flag
ast_clear_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_TBD
IAX_STATE_TBD
ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s");
ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s")
ast_string_field_set
ast_string_field_set
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
exten
ies.called_number ? ies.called_number : "s"
ies.called_number
ies
ies
called_number
ies.called_number
ies
ies
called_number
"s"
if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)) {						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					} else {						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}
!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)
ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)
ast_exists_extension
ast_exists_extension
NULL
NULL
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
1
iaxs[fr->callno]->cid_num
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
cid_num
{						if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);						memset(&ied0, 0, sizeof(ied0));						iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");						iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);						send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);						if (!iaxs[fr->callno]) {							break;						}					}
if (authdebug)							ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
authdebug
authdebug
ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context);
ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request '%s@%s' does not exist\n", ast_inet_ntoa(sin.sin_addr), iaxs[fr->callno]->exten, iaxs[fr->callno]->context)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Rejected dial attempt from %s, request '%s@%s' does not exist\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iaxs[fr->callno]->exten
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
exten
iaxs[fr->callno]->context
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
context
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension");
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension")
iax_ie_append_str
iax_ie_append_str
&ied0
ied0
ied0
IAX_IE_CAUSE
IAX_IE_CAUSE
"No such context/extension"
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION);
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_CAUSECODE
IAX_IE_CAUSECODE
AST_CAUSE_NO_ROUTE_DESTINATION
AST_CAUSE_NO_ROUTE_DESTINATION
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (!iaxs[fr->callno]) {							break;						}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{							break;						}
break;
{						char tmp[256];						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));						ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);						send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);						if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}					}
char tmp[256];
char tmp[256];
char
tmp[256]
tmp
[256]
256
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_set_flag
ast_set_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED
IAX_STATE_STARTED
ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat));
ast_verb(3, "Accepting DIAL from %s, formats = %s\n",							ast_inet_ntoa(sin.sin_addr),							iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat))
ast_verb
ast_verb
3
"Accepting DIAL from %s, formats = %s\n"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
iax2_getformatname_multiple(tmp, sizeof(tmp), iaxs[fr->callno]->peerformat)
iax2_getformatname_multiple
iax2_getformatname_multiple
tmp
tmp
sizeof(tmp)
(tmp)
tmp
tmp
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED);
ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
ast_set_flag
ast_set_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_STARTED
IAX_STATE_STARTED
send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1);
send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1)
send_command
send_command
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_CONTROL
AST_FRAME_CONTROL
AST_CONTROL_PROGRESS
AST_CONTROL_PROGRESS
0
NULL
NULL
0
-1
1
if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)))							iax2_destroy(fr->callno);						else if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}
!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1))
(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1))
c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)
c
c
ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)
ast_iax2_new
ast_iax2_new
fr->callno
fr
fr
callno
AST_STATE_RING
AST_STATE_RING
iaxs[fr->callno]->peerformat
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peerformat
NULL
NULL
1
iax2_destroy(fr->callno);
iax2_destroy(fr->callno)
iax2_destroy
iax2_destroy
fr->callno
fr
fr
callno
if (ies.vars) {							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}
ies.vars
ies
ies
vars
{							struct ast_datastore *variablestore;							struct ast_variable *var, *prev = NULL;							AST_LIST_HEAD(, ast_var_t) *varlist;							varlist = ast_calloc(1, sizeof(*varlist));							variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);							ast_debug(1, "I can haz IAX vars? w00t\n");							if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}						}
struct ast_datastore *variablestore;
struct ast_datastore *variablestore;
struct ast_datastore
ast_datastore
*variablestore
*
variablestore
struct ast_variable *var, *prev = NULL;
struct ast_variable *var, *prev = NULL;
struct ast_variable
ast_variable
*var
*
var
*prev = NULL
*
prev
= NULL
NULL
NULL
AST_LIST_HEAD(, ast_var_t) *varlist;
varlist = ast_calloc(1, sizeof(*varlist));
varlist = ast_calloc(1, sizeof(*varlist))
varlist
varlist
ast_calloc(1, sizeof(*varlist))
ast_calloc
ast_calloc
1
sizeof(*varlist)
(*varlist)
*varlist
varlist
varlist
variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL);
variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
variablestore
variablestore
ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
ast_datastore_alloc
ast_datastore_alloc
&iax2_variable_datastore_info
iax2_variable_datastore_info
iax2_variable_datastore_info
NULL
NULL
ast_debug(1, "I can haz IAX vars? w00t\n");
ast_debug(1, "I can haz IAX vars? w00t\n")
ast_debug
ast_debug
1
"I can haz IAX vars? w00t\n"
if (variablestore && varlist) {								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							} else {								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}
variablestore && varlist
variablestore
variablestore
varlist
varlist
{								variablestore->data = varlist;								variablestore->inheritance = DATASTORE_INHERIT_FOREVER;								AST_LIST_HEAD_INIT(varlist);								for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}								if (prev)									ast_free(prev);								ies.vars = NULL;								ast_channel_datastore_add(c, variablestore);							}
variablestore->data = varlist;
variablestore->data = varlist
variablestore->data
variablestore
variablestore
data
varlist
varlist
variablestore->inheritance = DATASTORE_INHERIT_FOREVER;
variablestore->inheritance = DATASTORE_INHERIT_FOREVER
variablestore->inheritance
variablestore
variablestore
inheritance
DATASTORE_INHERIT_FOREVER
DATASTORE_INHERIT_FOREVER
AST_LIST_HEAD_INIT(varlist);
AST_LIST_HEAD_INIT(varlist);
AST_LIST_HEAD_INIT
AST_LIST_HEAD_INIT
(varlist)
varlist
varlist
for (var = ies.vars; var; var = var->next) {									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}
var = ies.vars;
var = ies.vars
var
var
ies.vars
ies
ies
vars
var
var
var = var->next
var
var
var->next
var
var
next
{									struct ast_var_t *newvar = ast_var_assign(var->name, var->value);									if (prev)										ast_free(prev);									prev = var;									if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}								}
struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
struct ast_var_t *newvar = ast_var_assign(var->name, var->value);
struct ast_var_t
ast_var_t
*newvar = ast_var_assign(var->name, var->value)
*
newvar
= ast_var_assign(var->name, var->value)
ast_var_assign(var->name, var->value)
ast_var_assign
ast_var_assign
var->name
var
var
name
var->value
var
var
value
if (prev)										ast_free(prev);
prev
prev
ast_free(prev);
ast_free(prev)
ast_free
ast_free
prev
prev
prev = var;
prev = var
prev
prev
var
var
if (!newvar) {										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									} else {										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}
!newvar
newvar
newvar
{										/* Don't abort list traversal, as this would leave ies.vars in an inconsistent state. */										ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");									}
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n")
ast_log
ast_log
LOG_ERROR
LOG_ERROR
"Memory allocation error while processing IAX2 variables\n"
{										AST_LIST_INSERT_TAIL(varlist, newvar, entries);									}
AST_LIST_INSERT_TAIL(varlist, newvar, entries);
AST_LIST_INSERT_TAIL(varlist, newvar, entries)
AST_LIST_INSERT_TAIL
AST_LIST_INSERT_TAIL
varlist
varlist
newvar
newvar
entries
entries
if (prev)									ast_free(prev);
prev
prev
ast_free(prev);
ast_free(prev)
ast_free
ast_free
prev
prev
ies.vars = NULL;
ies.vars = NULL
ies.vars
ies
ies
vars
NULL
NULL
ast_channel_datastore_add(c, variablestore);
ast_channel_datastore_add(c, variablestore)
ast_channel_datastore_add
ast_channel_datastore_add
c
c
variablestore
variablestore
{								ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");								if (variablestore)									ast_datastore_free(variablestore);								if (varlist)									ast_free(varlist);							}
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n");
ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\n")
ast_log
ast_log
LOG_ERROR
LOG_ERROR
"Memory allocation error while processing IAX2 variables\n"
if (variablestore)									ast_datastore_free(variablestore);
variablestore
variablestore
ast_datastore_free(variablestore);
ast_datastore_free(variablestore)
ast_datastore_free
ast_datastore_free
variablestore
variablestore
if (varlist)									ast_free(varlist);
varlist
varlist
ast_free(varlist);
ast_free(varlist);
ast_free
ast_free
(varlist)
varlist
varlist
break;
case IAX_COMMAND_INVAL:
IAX_COMMAND_INVAL
IAX_COMMAND_INVAL
iaxs[fr->callno]->error = ENOTCONN;
iaxs[fr->callno]->error = ENOTCONN
iaxs[fr->callno]->error
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
error
ENOTCONN
ENOTCONN
ast_debug(1, "Immediately destroying %d, having received INVAL\n", fr->callno);
ast_debug(1, "Immediately destroying %d, having received INVAL\n", fr->callno)
ast_debug
ast_debug
1
"Immediately destroying %d, having received INVAL\n"
fr->callno
fr
fr
callno
iax2_destroy(fr->callno);
iax2_destroy(fr->callno)
iax2_destroy
iax2_destroy
fr->callno
fr
fr
callno
ast_debug(1, "Destroying call %d\n", fr->callno);
ast_debug(1, "Destroying call %d\n", fr->callno)
ast_debug
ast_debug
1
"Destroying call %d\n"
fr->callno
fr
fr
callno
break;
case IAX_COMMAND_VNAK:
IAX_COMMAND_VNAK
IAX_COMMAND_VNAK
ast_debug(1, "Received VNAK: resending outstanding frames\n");
ast_debug(1, "Received VNAK: resending outstanding frames\n")
ast_debug
ast_debug
1
"Received VNAK: resending outstanding frames\n"
vnak_retransmit(fr->callno, fr->iseqno);
vnak_retransmit(fr->callno, fr->iseqno)
vnak_retransmit
vnak_retransmit
fr->callno
fr
fr
callno
fr->iseqno
fr
fr
iseqno
break;
case IAX_COMMAND_REGREQ:
IAX_COMMAND_REGREQ
IAX_COMMAND_REGREQ
case IAX_COMMAND_REGREL:
IAX_COMMAND_REGREL
IAX_COMMAND_REGREL
if (delayreject)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
delayreject
delayreject
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
if (register_verify(fr->callno, &sin, &ies)) {					if (!iaxs[fr->callno]) {						break;					}					/* Send delayed failure */					auth_fail(fr->callno, IAX_COMMAND_REGREJ);					break;				}
register_verify(fr->callno, &sin, &ies)
register_verify
register_verify
fr->callno
fr
fr
callno
&sin
sin
sin
&ies
ies
ies
{					if (!iaxs[fr->callno]) {						break;					}					/* Send delayed failure */					auth_fail(fr->callno, IAX_COMMAND_REGREJ);					break;				}
if (!iaxs[fr->callno]) {						break;					}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{						break;					}
break;
auth_fail(fr->callno, IAX_COMMAND_REGREJ);
auth_fail(fr->callno, IAX_COMMAND_REGREJ)
auth_fail
auth_fail
fr->callno
fr
fr
callno
IAX_COMMAND_REGREJ
IAX_COMMAND_REGREJ
break;
if (!iaxs[fr->callno]) {					break;				}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{					break;				}
break;
if ((ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||						ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)) {					if (f.subclass.integer == IAX_COMMAND_REGREL) {						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}					if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {						ast_log(LOG_WARNING, "Registry error\n");					}					if (!iaxs[fr->callno]) {						break;					}					if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}					break;				}
(ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)) ||						ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
(ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys))
ast_strlen_zero(iaxs[fr->callno]->secret) && ast_strlen_zero(iaxs[fr->callno]->inkeys)
ast_strlen_zero(iaxs[fr->callno]->secret)
ast_strlen_zero
ast_strlen_zero
iaxs[fr->callno]->secret
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
secret
ast_strlen_zero(iaxs[fr->callno]->inkeys)
ast_strlen_zero
ast_strlen_zero
iaxs[fr->callno]->inkeys
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
inkeys
ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
ast_test_flag
ast_test_flag
&iaxs[fr->callno]->state
iaxs[fr->callno]->state
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
state
IAX_STATE_AUTHENTICATED
IAX_STATE_AUTHENTICATED
{					if (f.subclass.integer == IAX_COMMAND_REGREL) {						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}					if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {						ast_log(LOG_WARNING, "Registry error\n");					}					if (!iaxs[fr->callno]) {						break;					}					if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}					break;				}
if (f.subclass.integer == IAX_COMMAND_REGREL) {						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}
f.subclass.integer == IAX_COMMAND_REGREL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_REGREL
IAX_COMMAND_REGREL
{						memset(&sin, 0, sizeof(sin));						sin.sin_family = AF_INET;					}
memset(&sin, 0, sizeof(sin));
memset(&sin, 0, sizeof(sin))
memset
memset
&sin
sin
sin
0
sizeof(sin)
(sin)
sin
sin
sin.sin_family = AF_INET;
sin.sin_family = AF_INET
sin.sin_family
sin
sin
sin_family
AF_INET
AF_INET
if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)) {						ast_log(LOG_WARNING, "Registry error\n");					}
update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)
update_registry
update_registry
&sin
sin
sin
fr->callno
fr
fr
callno
ies.devicetype
ies
ies
devicetype
fd
fd
ies.refresh
ies
ies
refresh
{						ast_log(LOG_WARNING, "Registry error\n");					}
ast_log(LOG_WARNING, "Registry error\n");
ast_log(LOG_WARNING, "Registry error\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Registry error\n"
if (!iaxs[fr->callno]) {						break;					}
!iaxs[fr->callno]
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{						break;					}
break;
if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr) {						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}
ies.provverpres && ies.serviceident && sin.sin_addr.s_addr
ies.provverpres && ies.serviceident
ies.provverpres
ies
ies
provverpres
ies.serviceident
ies
ies
serviceident
sin.sin_addr.s_addr
sin.sin_addr
sin
sin
sin_addr
s_addr
{						ast_mutex_unlock(&iaxsl[fr->callno]);						check_provisioning(&sin, fd, ies.serviceident, ies.provver);						ast_mutex_lock(&iaxsl[fr->callno]);					}
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
check_provisioning(&sin, fd, ies.serviceident, ies.provver);
check_provisioning(&sin, fd, ies.serviceident, ies.provver)
check_provisioning
check_provisioning
&sin
sin
sin
fd
fd
ies.serviceident
ies
ies
serviceident
ies.provver
ies
ies
provver
ast_mutex_lock(&iaxsl[fr->callno]);
ast_mutex_lock(&iaxsl[fr->callno])
ast_mutex_lock
ast_mutex_lock
&iaxsl[fr->callno]
iaxsl[fr->callno]
iaxsl
iaxsl
fr->callno
fr
fr
callno
break;
registry_authrequest(fr->callno);
registry_authrequest(fr->callno)
registry_authrequest
registry_authrequest
fr->callno
fr
fr
callno
break;
case IAX_COMMAND_REGACK:
IAX_COMMAND_REGACK
IAX_COMMAND_REGACK
if (iax2_ack_registry(&ies, &sin, fr->callno)) 					ast_log(LOG_WARNING, "Registration failure\n");
iax2_ack_registry(&ies, &sin, fr->callno)
iax2_ack_registry
iax2_ack_registry
&ies
ies
ies
&sin
sin
sin
fr->callno
fr
fr
callno
ast_log(LOG_WARNING, "Registration failure\n");
ast_log(LOG_WARNING, "Registration failure\n")
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"Registration failure\n"
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
iax2_destroy(fr->callno);
iax2_destroy(fr->callno)
iax2_destroy
iax2_destroy
fr->callno
fr
fr
callno
break;
case IAX_COMMAND_REGREJ:
IAX_COMMAND_REGREJ
IAX_COMMAND_REGREJ
if (iaxs[fr->callno]->reg) {					if (authdebug) {						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}					iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;				}
iaxs[fr->callno]->reg
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
reg
{					if (authdebug) {						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}					iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;				}
if (authdebug) {						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}
authdebug
authdebug
{						ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));						manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");					}
ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr));
ast_log(LOG_NOTICE, "Registration of '%s' rejected: '%s' from: '%s'\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr))
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Registration of '%s' rejected: '%s' from: '%s'\n"
iaxs[fr->callno]->reg->username
iaxs[fr->callno]->reg
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
reg
username
ies.cause ? ies.cause : "<unknown>"
ies.cause
ies
ies
cause
ies.cause
ies
ies
cause
"<unknown>"
ast_inet_ntoa(sin.sin_addr)
ast_inet_ntoa
ast_inet_ntoa
sin.sin_addr
sin
sin
sin_addr
manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>");
manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>")
manager_event
manager_event
EVENT_FLAG_SYSTEM
EVENT_FLAG_SYSTEM
"Registry"
"ChannelType: IAX2\r\nUsername: %s\r\nStatus: Rejected\r\nCause: %s\r\n"
iaxs[fr->callno]->reg->username
iaxs[fr->callno]->reg
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
reg
username
ies.cause ? ies.cause : "<unknown>"
ies.cause
ies
ies
cause
ies.cause
ies
ies
cause
"<unknown>"
iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED;
iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED
iaxs[fr->callno]->reg->regstate
iaxs[fr->callno]->reg
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
reg
regstate
REG_STATE_REJECTED
REG_STATE_REJECTED
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
iax2_destroy(fr->callno);
iax2_destroy(fr->callno)
iax2_destroy
iax2_destroy
fr->callno
fr
fr
callno
break;
case IAX_COMMAND_REGAUTH:
IAX_COMMAND_REGAUTH
IAX_COMMAND_REGAUTH
if (registry_rerequest(&ies, fr->callno, &sin)) {					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				}
registry_rerequest(&ies, fr->callno, &sin)
registry_rerequest
registry_rerequest
&ies
ies
ies
fr->callno
fr
fr
callno
&sin
sin
sin
{					memset(&ied0, 0, sizeof(ied0));					iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");					iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				}
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found");
iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found")
iax_ie_append_str
iax_ie_append_str
&ied0
ied0
ied0
IAX_IE_CAUSE
IAX_IE_CAUSE
"No authority found"
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED);
iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_CAUSECODE
IAX_IE_CAUSECODE
AST_CAUSE_FACILITY_NOT_SUBSCRIBED
AST_CAUSE_FACILITY_NOT_SUBSCRIBED
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
break;
case IAX_COMMAND_TXREJ:
IAX_COMMAND_TXREJ
IAX_COMMAND_TXREJ
iaxs[fr->callno]->transferring = 0;
iaxs[fr->callno]->transferring = 0
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
0
ast_verb(3, "Channel '%s' unable to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");
ast_verb(3, "Channel '%s' unable to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>")
ast_verb
ast_verb
3
"Channel '%s' unable to transfer\n"
iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>"
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_name(iaxs[fr->callno]->owner)
ast_channel_name
ast_channel_name
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
"<Unknown>"
memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer));
memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer))
memset
memset
&iaxs[fr->callno]->transfer
iaxs[fr->callno]->transfer
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transfer
0
sizeof(iaxs[fr->callno]->transfer)
(iaxs[fr->callno]->transfer)
iaxs[fr->callno]->transfer
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transfer
if (iaxs[fr->callno]->bridgecallno) {					if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}				}
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
{					if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}				}
if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring) {						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}
iaxs[iaxs[fr->callno]->bridgecallno]->transferring
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
transferring
{						iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;						send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);					}
iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0;
iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0
iaxs[iaxs[fr->callno]->bridgecallno]->transferring
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
transferring
0
send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1);
send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1)
send_command
send_command
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_TXREJ
IAX_COMMAND_TXREJ
0
NULL
NULL
0
-1
1
break;
case IAX_COMMAND_TXREADY:
IAX_COMMAND_TXREADY
IAX_COMMAND_TXREADY
if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||				    (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)) {					if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)						iaxs[fr->callno]->transferring = TRANSFER_MREADY;					else						iaxs[fr->callno]->transferring = TRANSFER_READY;					ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					if (iaxs[fr->callno]->bridgecallno) {						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}				}
(iaxs[fr->callno]->transferring == TRANSFER_BEGIN) ||				    (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)
(iaxs[fr->callno]->transferring == TRANSFER_BEGIN)
iaxs[fr->callno]->transferring == TRANSFER_BEGIN
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_BEGIN
TRANSFER_BEGIN
(iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)
iaxs[fr->callno]->transferring == TRANSFER_MBEGIN
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_MBEGIN
TRANSFER_MBEGIN
{					if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)						iaxs[fr->callno]->transferring = TRANSFER_MREADY;					else						iaxs[fr->callno]->transferring = TRANSFER_READY;					ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");					if (iaxs[fr->callno]->bridgecallno) {						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}				}
if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)						iaxs[fr->callno]->transferring = TRANSFER_MREADY;					else						iaxs[fr->callno]->transferring = TRANSFER_READY;
iaxs[fr->callno]->transferring == TRANSFER_MBEGIN
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_MBEGIN
TRANSFER_MBEGIN
iaxs[fr->callno]->transferring = TRANSFER_MREADY;
iaxs[fr->callno]->transferring = TRANSFER_MREADY
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_MREADY
TRANSFER_MREADY
iaxs[fr->callno]->transferring = TRANSFER_READY;
iaxs[fr->callno]->transferring = TRANSFER_READY
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_READY
TRANSFER_READY
ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>");
ast_verb(3, "Channel '%s' ready to transfer\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>")
ast_verb
ast_verb
3
"Channel '%s' ready to transfer\n"
iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>"
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_name(iaxs[fr->callno]->owner)
ast_channel_name
ast_channel_name
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
"<Unknown>"
if (iaxs[fr->callno]->bridgecallno) {						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
{						if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}					}
if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)) {							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}
(iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY) ||						    (iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)
(iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY)
iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY
iaxs[iaxs[fr->callno]->bridgecallno]->transferring
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
transferring
TRANSFER_READY
TRANSFER_READY
(iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)
iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY
iaxs[iaxs[fr->callno]->bridgecallno]->transferring
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
transferring
TRANSFER_MREADY
TRANSFER_MREADY
{							/* They're both ready, now release them. */							if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}						}
if (iaxs[fr->callno]->transferring == TRANSFER_MREADY) {								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							} else {								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}
iaxs[fr->callno]->transferring == TRANSFER_MREADY
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_MREADY
TRANSFER_MREADY
{								ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;								iaxs[fr->callno]->transferring = TRANSFER_MEDIA;								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);							}
ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");
ast_verb(3, "Attempting media bridge of %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>")
ast_verb
ast_verb
3
"Attempting media bridge of %s and %s\n"
iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>"
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_name(iaxs[fr->callno]->owner)
ast_channel_name
ast_channel_name
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
"<Unknown>"
iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>"
iaxs[iaxs[fr->callno]->bridgecallno]->owner
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
owner
ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner)
ast_channel_name
ast_channel_name
iaxs[iaxs[fr->callno]->bridgecallno]->owner
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
owner
"<Unknown>"
iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA;
iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA
iaxs[iaxs[fr->callno]->bridgecallno]->transferring
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
transferring
TRANSFER_MEDIA
TRANSFER_MEDIA
iaxs[fr->callno]->transferring = TRANSFER_MEDIA;
iaxs[fr->callno]->transferring = TRANSFER_MEDIA
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_MEDIA
TRANSFER_MEDIA
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
memset(&ied1, 0, sizeof(ied1));
memset(&ied1, 0, sizeof(ied1))
memset
memset
&ied1
ied1
ied1
0
sizeof(ied1)
(ied1)
ied1
ied1
iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);
iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno)
iax_ie_append_short
iax_ie_append_short
&ied0
ied0
ied0
IAX_IE_CALLNO
IAX_IE_CALLNO
iaxs[iaxs[fr->callno]->bridgecallno]->peercallno
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
peercallno
iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);
iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno)
iax_ie_append_short
iax_ie_append_short
&ied1
ied1
ied1
IAX_IE_CALLNO
IAX_IE_CALLNO
iaxs[fr->callno]->peercallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercallno
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1);
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1)
send_command
send_command
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_TXMEDIA
IAX_COMMAND_TXMEDIA
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1);
send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1)
send_command
send_command
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_TXMEDIA
IAX_COMMAND_TXMEDIA
0
ied1.buf
ied1
ied1
buf
ied1.pos
ied1
ied1
pos
-1
1
{								ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");								iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;								iaxs[fr->callno]->transferring = TRANSFER_RELEASED;								ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);								ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);								/* Stop doing lag & ping requests */								stop_stuff(fr->callno);								stop_stuff(iaxs[fr->callno]->bridgecallno);								memset(&ied0, 0, sizeof(ied0));								memset(&ied1, 0, sizeof(ied1));								iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);								iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);								send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);								send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);							}
ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>");
ast_verb(3, "Releasing %s and %s\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>",										iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>")
ast_verb
ast_verb
3
"Releasing %s and %s\n"
iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner) : "<Unknown>"
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
ast_channel_name(iaxs[fr->callno]->owner)
ast_channel_name
ast_channel_name
iaxs[fr->callno]->owner
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
owner
"<Unknown>"
iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner) : "<Unknown>"
iaxs[iaxs[fr->callno]->bridgecallno]->owner
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
owner
ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner)
ast_channel_name
ast_channel_name
iaxs[iaxs[fr->callno]->bridgecallno]->owner
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
owner
"<Unknown>"
iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED;
iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED
iaxs[iaxs[fr->callno]->bridgecallno]->transferring
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
transferring
TRANSFER_RELEASED
TRANSFER_RELEASED
iaxs[fr->callno]->transferring = TRANSFER_RELEASED;
iaxs[fr->callno]->transferring = TRANSFER_RELEASED
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_RELEASED
TRANSFER_RELEASED
ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE);
ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE)
ast_set_flag64
ast_set_flag64
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
IAX_ALREADYGONE
IAX_ALREADYGONE
ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE);
ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE)
ast_set_flag64
ast_set_flag64
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
IAX_ALREADYGONE
IAX_ALREADYGONE
stop_stuff(fr->callno);
stop_stuff(fr->callno)
stop_stuff
stop_stuff
fr->callno
fr
fr
callno
stop_stuff(iaxs[fr->callno]->bridgecallno);
stop_stuff(iaxs[fr->callno]->bridgecallno)
stop_stuff
stop_stuff
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
memset(&ied1, 0, sizeof(ied1));
memset(&ied1, 0, sizeof(ied1))
memset
memset
&ied1
ied1
ied1
0
sizeof(ied1)
(ied1)
ied1
ied1
iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno);
iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno)
iax_ie_append_short
iax_ie_append_short
&ied0
ied0
ied0
IAX_IE_CALLNO
IAX_IE_CALLNO
iaxs[iaxs[fr->callno]->bridgecallno]->peercallno
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
peercallno
iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno);
iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno)
iax_ie_append_short
iax_ie_append_short
&ied1
ied1
ied1
IAX_IE_CALLNO
IAX_IE_CALLNO
iaxs[fr->callno]->peercallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercallno
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1);
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1)
send_command
send_command
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_TXREL
IAX_COMMAND_TXREL
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1);
send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1)
send_command
send_command
iaxs[iaxs[fr->callno]->bridgecallno]
iaxs
iaxs
iaxs[fr->callno]->bridgecallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
bridgecallno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_TXREL
IAX_COMMAND_TXREL
0
ied1.buf
ied1
ied1
buf
ied1.pos
ied1
ied1
pos
-1
1
break;
case IAX_COMMAND_TXREQ:
IAX_COMMAND_TXREQ
IAX_COMMAND_TXREQ
try_transfer(iaxs[fr->callno], &ies);
try_transfer(iaxs[fr->callno], &ies)
try_transfer
try_transfer
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
&ies
ies
ies
break;
case IAX_COMMAND_TXCNT:
IAX_COMMAND_TXCNT
IAX_COMMAND_TXCNT
if (iaxs[fr->callno]->transferring)					send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0);
send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0)
send_command_transfer
send_command_transfer
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_TXACC
IAX_COMMAND_TXACC
0
NULL
NULL
0
break;
case IAX_COMMAND_TXREL:
IAX_COMMAND_TXREL
IAX_COMMAND_TXREL
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
complete_transfer(fr->callno, &ies);
complete_transfer(fr->callno, &ies)
complete_transfer
complete_transfer
fr->callno
fr
fr
callno
&ies
ies
ies
stop_stuff(fr->callno);
stop_stuff(fr->callno)
stop_stuff
stop_stuff
fr->callno
fr
fr
callno
break;
case IAX_COMMAND_TXMEDIA:
IAX_COMMAND_TXMEDIA
IAX_COMMAND_TXMEDIA
if (iaxs[fr->callno]->transferring == TRANSFER_READY) {					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding frames and start anew */						if (cur->transfer) {							cur->retries = -1;						}					}					/* Start sending our media to the transfer address, but otherwise leave the call as-is */					iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;				}
iaxs[fr->callno]->transferring == TRANSFER_READY
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_READY
TRANSFER_READY
{					AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list) {						/* Cancel any outstanding frames and start anew */						if (cur->transfer) {							cur->retries = -1;						}					}					/* Start sending our media to the transfer address, but otherwise leave the call as-is */					iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;				}
AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list)
AST_LIST_TRAVERSE(&frame_queue[fr->callno], cur, list)
AST_LIST_TRAVERSE
AST_LIST_TRAVERSE
&frame_queue[fr->callno]
frame_queue[fr->callno]
frame_queue
frame_queue
fr->callno
fr
fr
callno
cur
cur
list
list
)
{						/* Cancel any outstanding frames and start anew */						if (cur->transfer) {							cur->retries = -1;						}					}
if (cur->transfer) {							cur->retries = -1;						}
cur->transfer
cur
cur
transfer
{							cur->retries = -1;						}
cur->retries = -1;
cur->retries = -1
cur->retries
cur
cur
retries
-1
1
iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS;
iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS
iaxs[fr->callno]->transferring
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
transferring
TRANSFER_MEDIAPASS
TRANSFER_MEDIAPASS
break;
case IAX_COMMAND_RTKEY:
IAX_COMMAND_RTKEY
IAX_COMMAND_RTKEY
if (!IAX_CALLENCRYPTED(iaxs[fr->callno])) {					ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					);					break;				}
!IAX_CALLENCRYPTED(iaxs[fr->callno])
IAX_CALLENCRYPTED(iaxs[fr->callno])
IAX_CALLENCRYPTED
IAX_CALLENCRYPTED
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
{					ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					);					break;				}
ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					);
ast_log(LOG_WARNING, 						"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"					)
ast_log
ast_log
LOG_WARNING
LOG_WARNING
"we've been told to rotate our encryption key, "						"but this isn't an encrypted call. bad things will happen.\n"
break;
IAX_DEBUGDIGEST("Receiving", ies.challenge);
IAX_DEBUGDIGEST("Receiving", ies.challenge)
IAX_DEBUGDIGEST
IAX_DEBUGDIGEST
"Receiving"
ies.challenge
ies
ies
challenge
ast_aes_set_decrypt_key((unsigned char *) ies.challenge, &iaxs[fr->callno]->dcx);
ast_aes_set_decrypt_key((unsigned char *) ies.challenge, &iaxs[fr->callno]->dcx)
ast_aes_set_decrypt_key
ast_aes_set_decrypt_key
(unsigned char *) ies.challenge
unsigned char *
unsigned char
*
*
ies.challenge
ies
ies
challenge
&iaxs[fr->callno]->dcx
iaxs[fr->callno]->dcx
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
dcx
break;
case IAX_COMMAND_DPREP:
IAX_COMMAND_DPREP
IAX_COMMAND_DPREP
complete_dpreply(iaxs[fr->callno], &ies);
complete_dpreply(iaxs[fr->callno], &ies)
complete_dpreply
complete_dpreply
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
&ies
ies
ies
break;
case IAX_COMMAND_UNSUPPORT:
IAX_COMMAND_UNSUPPORT
IAX_COMMAND_UNSUPPORT
ast_log(LOG_NOTICE, "Peer did not understand our iax command '%d'\n", ies.iax_unknown);
ast_log(LOG_NOTICE, "Peer did not understand our iax command '%d'\n", ies.iax_unknown)
ast_log
ast_log
LOG_NOTICE
LOG_NOTICE
"Peer did not understand our iax command '%d'\n"
ies.iax_unknown
ies
ies
iax_unknown
break;
case IAX_COMMAND_FWDOWNL:
IAX_COMMAND_FWDOWNL
IAX_COMMAND_FWDOWNL
if (!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)) {					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);					break;				}
!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)
ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)
ast_test_flag64
ast_test_flag64
&globalflags
globalflags
globalflags
IAX_ALLOWFWDOWNLOAD
IAX_ALLOWFWDOWNLOAD
{					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);					break;				}
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_UNSUPPORT
IAX_COMMAND_UNSUPPORT
0
NULL
NULL
0
-1
1
break;
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc);
res = iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc)
res
res
iax_firmware_append(&ied0, (unsigned char *)ies.devicetype, ies.fwdesc)
iax_firmware_append
iax_firmware_append
&ied0
ied0
ied0
(unsigned char *)ies.devicetype
unsigned char *
unsigned char
*
*
ies.devicetype
ies
ies
devicetype
ies.fwdesc
ies
ies
fwdesc
if (res < 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);				else if (res > 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				else					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);
res < 0
res
res
0
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_REJECT
IAX_COMMAND_REJECT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (res > 0)					send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);				else					send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);
res > 0
res
res
0
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);
send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1)
send_command_final
send_command_final
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_FWDATA
IAX_COMMAND_FWDATA
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1);
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1)
send_command
send_command
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_FWDATA
IAX_COMMAND_FWDATA
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
break;
case IAX_COMMAND_CALLTOKEN:
IAX_COMMAND_CALLTOKEN
IAX_COMMAND_CALLTOKEN
{				struct iax_frame *cur;				/* find last sent frame */				if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata) {					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);				}				break;			}
struct iax_frame *cur;
struct iax_frame *cur;
struct iax_frame
iax_frame
*cur
*
cur
if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata) {					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);				}
(cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken && ies.calltokendata
(cur = AST_LIST_LAST(&frame_queue[fr->callno])) && ies.calltoken
(cur = AST_LIST_LAST(&frame_queue[fr->callno]))
cur = AST_LIST_LAST(&frame_queue[fr->callno])
cur
cur
AST_LIST_LAST(&frame_queue[fr->callno])
AST_LIST_LAST
AST_LIST_LAST
&frame_queue[fr->callno]
frame_queue[fr->callno]
frame_queue
frame_queue
fr->callno
fr
fr
callno
ies.calltoken
ies
ies
calltoken
ies.calltokendata
ies
ies
calltokendata
{					resend_with_token(fr->callno, cur, (char *) ies.calltokendata);				}
resend_with_token(fr->callno, cur, (char *) ies.calltokendata);
resend_with_token(fr->callno, cur, (char *) ies.calltokendata)
resend_with_token
resend_with_token
fr->callno
fr
fr
callno
cur
cur
(char *) ies.calltokendata
char *
char
*
*
ies.calltokendata
ies
ies
calltokendata
break;
default:
ast_debug(1, "Unknown IAX command %d on %d/%d\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno);
ast_debug(1, "Unknown IAX command %d on %d/%d\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno)
ast_debug
ast_debug
1
"Unknown IAX command %d on %d/%d\n"
f.subclass.integer
f.subclass
f
f
subclass
integer
fr->callno
fr
fr
callno
iaxs[fr->callno]->peercallno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
peercallno
memset(&ied0, 0, sizeof(ied0));
memset(&ied0, 0, sizeof(ied0))
memset
memset
&ied0
ied0
ied0
0
sizeof(ied0)
(ied0)
ied0
ied0
iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer);
iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer)
iax_ie_append_byte
iax_ie_append_byte
&ied0
ied0
ied0
IAX_IE_IAX_UNKNOWN
IAX_IE_IAX_UNKNOWN
f.subclass.integer
f.subclass
f
f
subclass
integer
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1);
send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1)
send_command
send_command
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_UNSUPPORT
IAX_COMMAND_UNSUPPORT
0
ied0.buf
ied0
ied0
buf
ied0.pos
ied0
ied0
pos
-1
1
if (ies.vars) {				ast_variables_destroy(ies.vars);				ast_debug(1, "I can haz IAX vars, but they is no good :-(\n");				ies.vars = NULL;			}
ies.vars
ies
ies
vars
{				ast_variables_destroy(ies.vars);				ast_debug(1, "I can haz IAX vars, but they is no good :-(\n");				ies.vars = NULL;			}
ast_variables_destroy(ies.vars);
ast_variables_destroy(ies.vars)
ast_variables_destroy
ast_variables_destroy
ies.vars
ies
ies
vars
ast_debug(1, "I can haz IAX vars, but they is no good :-(\n");
ast_debug(1, "I can haz IAX vars, but they is no good :-(\n")
ast_debug
ast_debug
1
"I can haz IAX vars, but they is no good :-(\n"
ies.vars = NULL;
ies.vars = NULL
ies.vars
ies
ies
vars
NULL
NULL
if ((f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)) {				if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);			}
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_INVAL) &&			  (f.subclass.integer != IAX_COMMAND_VNAK)
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXACC) &&			  (f.subclass.integer != IAX_COMMAND_INVAL)
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT) &&			  (f.subclass.integer != IAX_COMMAND_TXACC)
(f.subclass.integer != IAX_COMMAND_ACK) &&			  (f.subclass.integer != IAX_COMMAND_TXCNT)
(f.subclass.integer != IAX_COMMAND_ACK)
f.subclass.integer != IAX_COMMAND_ACK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_ACK
IAX_COMMAND_ACK
(f.subclass.integer != IAX_COMMAND_TXCNT)
f.subclass.integer != IAX_COMMAND_TXCNT
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXCNT
IAX_COMMAND_TXCNT
(f.subclass.integer != IAX_COMMAND_TXACC)
f.subclass.integer != IAX_COMMAND_TXACC
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_TXACC
IAX_COMMAND_TXACC
(f.subclass.integer != IAX_COMMAND_INVAL)
f.subclass.integer != IAX_COMMAND_INVAL
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_INVAL
IAX_COMMAND_INVAL
(f.subclass.integer != IAX_COMMAND_VNAK)
f.subclass.integer != IAX_COMMAND_VNAK
f.subclass.integer
f.subclass
f
f
subclass
integer
IAX_COMMAND_VNAK
IAX_COMMAND_VNAK
{				if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);			}
if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)					send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno
iaxs[fr->callno]->aseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
aseqno
iaxs[fr->callno]->iseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iseqno
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock(&iaxsl[fr->callno]);
ast_mutex_unlock
ast_mutex_unlock
(&iaxsl[fr->callno])
&iaxsl[fr->callno]
&
iaxsl
[fr->callno]
fr->callno
fr
fr
callno
return 1;
1
if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)			send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno
iaxs[fr->callno]->aseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
aseqno
iaxs[fr->callno]->iseqno
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
iseqno
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno);
send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
send_command_immediate
send_command_immediate
iaxs[fr->callno]
iaxs
iaxs
fr->callno
fr
fr
callno
AST_FRAME_IAX
AST_FRAME_IAX
IAX_COMMAND_ACK
IAX_COMMAND_ACK
fr->ts
fr
fr
ts
NULL
NULL
0
fr->iseqno
fr
fr
iseqno
-----joern-----
(8976,4273,0)
(4552,1241,0)
(2947,8232,0)
(5302,4854,0)
(4311,7430,0)
(8526,1302,0)
(7145,7845,0)
(1779,3535,0)
(8287,5296,0)
(2352,3612,0)
(6544,5166,0)
(9012,3409,0)
(9104,4816,0)
(7374,7414,0)
(5381,5061,0)
(8934,7374,0)
(4604,5061,0)
(2757,3096,0)
(5819,1854,0)
(1059,9126,0)
(4535,8972,0)
(4313,6643,0)
(2770,5061,0)
(6376,5218,0)
(8574,4403,0)
(3955,5987,0)
(2442,7470,0)
(671,5140,0)
(6517,5413,0)
(3214,1412,0)
(8147,8566,0)
(665,3531,0)
(8828,4871,0)
(7902,8566,0)
(1316,4555,0)
(446,2499,0)
(3865,6809,0)
(7322,1200,0)
(2187,8075,0)
(8253,5943,0)
(4886,4440,0)
(8047,4369,0)
(9099,8673,0)
(553,2816,0)
(8232,6233,0)
(8014,4613,0)
(323,5799,0)
(619,5937,0)
(1566,5061,0)
(6974,8165,0)
(8438,2068,0)
(1433,1135,0)
(5413,3490,0)
(4920,5798,0)
(5121,8566,0)
(5873,4701,0)
(3588,1365,0)
(4498,5093,0)
(2179,4773,0)
(8782,540,0)
(1884,7829,0)
(1992,507,0)
(40,2679,0)
(7644,4520,0)
(2146,1606,0)
(7274,2962,0)
(5165,7764,0)
(4435,8019,0)
(7277,4106,0)
(3324,3670,0)
(1544,3846,0)
(8114,6106,0)
(7468,4530,0)
(6128,1479,0)
(3437,2165,0)
(8892,2434,0)
(5883,5522,0)
(6233,455,0)
(6729,8788,0)
(7216,8673,0)
(5142,4209,0)
(4071,1400,0)
(198,4834,0)
(4101,7429,0)
(1843,6309,0)
(4836,5061,0)
(3478,3742,0)
(6475,596,0)
(1437,1600,0)
(8117,5937,0)
(1856,4550,0)
(5231,1357,0)
(7525,3915,0)
(4989,6754,0)
(62,3625,0)
(6278,4647,0)
(1530,1193,0)
(5764,4847,0)
(8699,7025,0)
(5811,8788,0)
(3844,4883,0)
(6872,1666,0)
(8966,8566,0)
(3569,6193,0)
(8241,1670,0)
(2420,3616,0)
(5215,1702,0)
(6611,6186,0)
(994,5061,0)
(2823,8836,0)
(2645,2496,0)
(5110,8075,0)
(3626,8566,0)
(4704,7623,0)
(6695,2767,0)
(257,8566,0)
(3768,6159,0)
(751,2196,0)
(8337,8610,0)
(3738,5937,0)
(7275,7885,0)
(9104,952,0)
(1480,4983,0)
(2374,8566,0)
(1217,8566,0)
(8188,1671,0)
(3465,8025,0)
(3044,2178,0)
(7188,2269,0)
(6940,4144,0)
(3985,3854,0)
(2009,4282,0)
(5880,127,0)
(4466,4279,0)
(5976,1549,0)
(1657,309,0)
(5919,4662,0)
(8606,5316,0)
(1769,9112,0)
(359,1995,0)
(4036,3018,0)
(6345,7548,0)
(6877,6281,0)
(3,1279,0)
(8605,6602,0)
(5995,3535,0)
(2188,3383,0)
(3980,1378,0)
(8782,5937,0)
(7109,3575,0)
(1902,4607,0)
(3937,7572,0)
(3973,3514,0)
(5164,3231,0)
(8760,8751,0)
(4952,3256,0)
(685,2457,0)
(2993,3403,0)
(5036,4831,0)
(256,7358,0)
(2231,5061,0)
(6516,958,0)
(8706,7962,0)
(4151,127,0)
(3430,1361,0)
(1717,8831,0)
(6814,6252,0)
(1747,8566,0)
(1880,5667,0)
(1284,1954,0)
(7613,4528,0)
(2275,3490,0)
(3072,7224,0)
(4303,2015,0)
(7164,4959,0)
(1606,6653,0)
(2509,3942,0)
(3800,7841,0)
(4719,1308,0)
(5937,7613,0)
(1686,1208,0)
(9087,5738,0)
(4527,3561,0)
(863,4388,0)
(7723,8566,0)
(8101,661,0)
(3403,127,0)
(8788,8316,0)
(4983,1282,0)
(2984,1983,0)
(1968,1346,0)
(4251,672,0)
(2914,8375,0)
(754,5098,0)
(6486,4827,0)
(1245,8566,0)
(8512,5184,0)
(2110,3593,0)
(9058,3475,0)
(1826,8673,0)
(1878,7435,0)
(5117,127,0)
(5817,5823,0)
(5341,1852,0)
(8454,4616,0)
(3053,5061,0)
(7823,8192,0)
(1389,117,0)
(6777,8680,0)
(7846,1419,0)
(8589,5061,0)
(2517,7032,0)
(7889,2931,0)
(6884,2131,0)
(3807,5490,0)
(4908,3822,0)
(8575,5661,0)
(619,1302,0)
(1328,5444,0)
(2062,5061,0)
(1722,4420,0)
(8926,4788,0)
(3425,2837,0)
(1672,7170,0)
(176,66,0)
(2429,7292,0)
(7818,258,0)
(1155,8499,0)
(9104,725,0)
(2601,7399,0)
(4972,5061,0)
(29,1568,0)
(1811,5061,0)
(4699,5814,0)
(5130,5061,0)
(5075,7271,0)
(2147,1716,0)
(6570,8862,0)
(2617,8683,0)
(390,4746,0)
(5235,3492,0)
(5969,8673,0)
(3020,7296,0)
(3104,8566,0)
(3497,3949,0)
(7951,5363,0)
(66,3724,0)
(8419,5189,0)
(5803,1225,0)
(5958,9001,0)
(3408,4347,0)
(3516,1690,0)
(5065,2485,0)
(4080,5061,0)
(5614,6548,0)
(7764,3362,0)
(967,4871,0)
(525,8869,0)
(5511,525,0)
(4393,3078,0)
(5185,2337,0)
(4836,17,0)
(5672,2023,0)
(5554,5626,0)
(1010,6922,0)
(5150,6867,0)
(7527,6939,0)
(5010,8566,0)
(165,8566,0)
(6559,5415,0)
(6408,5992,0)
(3804,2277,0)
(3505,8262,0)
(4354,6966,0)
(6364,2261,0)
(1918,8493,0)
(2204,3905,0)
(8557,8760,0)
(5820,6233,0)
(5806,2876,0)
(3729,5491,0)
(6613,1815,0)
(6284,7610,0)
(4050,8566,0)
(4069,6472,0)
(7683,122,0)
(5752,8566,0)
(7881,8196,0)
(2085,1696,0)
(486,4857,0)
(1938,5172,0)
(7606,3274,0)
(830,5061,0)
(3932,1031,0)
(6558,2074,0)
(4049,8539,0)
(8592,6622,0)
(1134,228,0)
(7976,8566,0)
(4376,1695,0)
(5659,8673,0)
(7879,425,0)
(312,5061,0)
(7558,7592,0)
(8577,1354,0)
(2398,2976,0)
(1392,5490,0)
(4,8244,0)
(779,4322,0)
(224,837,0)
(2759,1330,0)
(4450,688,0)
(4157,5200,0)
(7424,3169,0)
(4270,4469,0)
(6318,3772,0)
(939,1101,0)
(8339,4422,0)
(8755,8100,0)
(8983,4738,0)
(6065,5061,0)
(388,7005,0)
(949,6536,0)
(1914,8032,0)
(6142,5153,0)
(602,2548,0)
(3026,6680,0)
(1206,8500,0)
(4555,3846,0)
(8395,3287,0)
(2177,4941,0)
(6811,33,0)
(1668,802,0)
(5739,707,0)
(6422,8952,0)
(8285,2770,0)
(5797,1310,0)
(7874,5231,0)
(5778,8566,0)
(7114,8753,0)
(7094,4612,0)
(7456,1139,0)
(6345,5061,0)
(4801,8566,0)
(1934,5560,0)
(4919,65,0)
(2644,7424,0)
(4735,8201,0)
(4002,8054,0)
(796,602,0)
(437,3770,0)
(1363,5787,0)
(1964,6345,0)
(3944,8866,0)
(8313,8287,0)
(8971,6768,0)
(8653,5988,0)
(5363,7951,0)
(431,6577,0)
(9104,7358,0)
(2645,3592,0)
(1785,2271,0)
(7038,188,0)
(6115,599,0)
(7586,1891,0)
(9104,6129,0)
(6438,5128,0)
(4311,6064,0)
(5892,8152,0)
(309,5061,0)
(5011,2033,0)
(364,2966,0)
(4077,30,0)
(2277,7015,0)
(5642,1989,0)
(1690,2354,0)
(2473,352,0)
(5336,707,0)
(7446,1890,0)
(5105,6276,0)
(3249,5061,0)
(5349,5853,0)
(6594,3865,0)
(1067,8244,0)
(222,9155,0)
(1678,4989,0)
(5530,9068,0)
(6262,661,0)
(977,8232,0)
(1660,4732,0)
(4847,5061,0)
(8969,7792,0)
(224,4789,0)
(1731,3390,0)
(1719,4857,0)
(2861,3186,0)
(1504,8746,0)
(632,4797,0)
(3598,6047,0)
(2929,297,0)
(8022,8275,0)
(1106,8566,0)
(2157,8155,0)
(8426,4302,0)
(5148,1050,0)
(4040,2803,0)
(137,5253,0)
(5105,3592,0)
(1908,4,0)
(4369,8047,0)
(7081,3728,0)
(3845,7182,0)
(5436,6293,0)
(8637,2114,0)
(6566,952,0)
(627,1337,0)
(557,5376,0)
(3474,5607,0)
(1819,5061,0)
(2155,5749,0)
(4841,331,0)
(3788,4546,0)
(8462,2777,0)
(1683,901,0)
(7141,3496,0)
(2980,8297,0)
(1167,4326,0)
(2119,5503,0)
(8662,3148,0)
(8347,5003,0)
(6076,7062,0)
(8247,8360,0)
(2132,8396,0)
(1274,4767,0)
(4332,7056,0)
(6960,9027,0)
(8613,7323,0)
(7459,4104,0)
(4337,4969,0)
(8851,4460,0)
(1604,6246,0)
(774,5061,0)
(6542,2646,0)
(3431,7999,0)
(4322,2705,0)
(6227,2537,0)
(3414,8566,0)
(1488,3598,0)
(711,2141,0)
(6115,1876,0)
(3104,9093,0)
(3416,8566,0)
(2632,2747,0)
(6736,7095,0)
(1783,8985,0)
(2751,8566,0)
(1436,416,0)
(6656,7158,0)
(1057,7444,0)
(3835,8566,0)
(7855,1312,0)
(7441,8673,0)
(1457,7787,0)
(5779,9118,0)
(7520,7845,0)
(7025,8566,0)
(4493,6525,0)
(6580,1769,0)
(2428,1490,0)
(1222,7069,0)
(4813,7904,0)
(2308,2028,0)
(7502,5897,0)
(8853,6967,0)
(6483,2210,0)
(8782,8566,0)
(3025,3404,0)
(6561,5080,0)
(7593,9079,0)
(356,7696,0)
(7800,8814,0)
(2761,6768,0)
(9136,7962,0)
(2100,1747,0)
(5544,8566,0)
(7368,5561,0)
(3107,3412,0)
(3555,1567,0)
(2088,1069,0)
(3702,2886,0)
(7424,6749,0)
(3883,6829,0)
(1686,4057,0)
(9019,2431,0)
(1850,5039,0)
(1204,8566,0)
(7865,7837,0)
(2337,4602,0)
(4105,5270,0)
(9104,446,0)
(5594,3781,0)
(6567,2919,0)
(3774,8255,0)
(5039,5061,0)
(7247,5214,0)
(8804,7635,0)
(3629,2785,0)
(1407,2089,0)
(3522,1976,0)
(7825,5222,0)
(7552,8487,0)
(5496,1602,0)
(5448,4255,0)
(6222,5508,0)
(1886,5806,0)
(7421,968,0)
(6094,6394,0)
(3578,5222,0)
(5994,1225,0)
(1146,2513,0)
(8703,439,0)
(1629,8566,0)
(5237,6041,0)
(444,6121,0)
(279,7525,0)
(8657,8926,0)
(5001,4955,0)
(8911,5684,0)
(3524,7937,0)
(6738,1050,0)
(5451,2724,0)
(6493,1819,0)
(6520,5061,0)
(3108,429,0)
(6707,5262,0)
(2747,8960,0)
(1119,80,0)
(3852,7461,0)
(2997,2104,0)
(3544,1681,0)
(2178,4951,0)
(276,7041,0)
(4842,4889,0)
(5637,350,0)
(2650,8566,0)
(7834,8769,0)
(2645,5544,0)
(797,8089,0)
(3504,7533,0)
(6946,249,0)
(613,7604,0)
(1072,2543,0)
(1045,5061,0)
(1022,6220,0)
(1281,2443,0)
(8952,8743,0)
(3844,4264,0)
(3955,3437,0)
(3416,5061,0)
(8255,8566,0)
(8897,227,0)
(7130,8558,0)
(6105,7685,0)
(5960,5061,0)
(6772,8673,0)
(830,8566,0)
(1165,5458,0)
(4679,873,0)
(4147,6536,0)
(3467,7413,0)
(5086,3356,0)
(3312,5635,0)
(1613,7465,0)
(4430,6363,0)
(1842,2777,0)
(5451,7686,0)
(4845,8566,0)
(2637,4806,0)
(8981,3612,0)
(6567,2656,0)
(7881,7335,0)
(4243,3217,0)
(6906,8932,0)
(7367,7807,0)
(7083,803,0)
(3265,8676,0)
(2636,3335,0)
(1327,1227,0)
(1378,1655,0)
(2094,8459,0)
(7174,299,0)
(8534,1990,0)
(8189,7248,0)
(1975,6643,0)
(5391,6623,0)
(8848,4981,0)
(5120,8019,0)
(4937,4014,0)
(2717,8063,0)
(4744,2878,0)
(5689,7497,0)
(8456,8385,0)
(3124,2768,0)
(8091,1758,0)
(4309,966,0)
(5410,5061,0)
(2464,1842,0)
(5105,7878,0)
(480,2520,0)
(7746,5061,0)
(6557,7366,0)
(5656,7805,0)
(3843,2076,0)
(2885,5635,0)
(1191,8986,0)
(4199,5937,0)
(4340,5425,0)
(5377,2242,0)
(1075,4430,0)
(4794,1077,0)
(5655,7271,0)
(2340,8566,0)
(8193,2515,0)
(5623,8737,0)
(1386,6269,0)
(47,1201,0)
(3405,3389,0)
(5087,6876,0)
(1842,7388,0)
(7503,2965,0)
(1035,6926,0)
(3069,3605,0)
(360,6115,0)
(11,4474,0)
(8830,8177,0)
(4048,9076,0)
(6574,6315,0)
(6270,7874,0)
(4402,91,0)
(6132,979,0)
(2141,970,0)
(8977,7418,0)
(3231,7962,0)
(2412,3855,0)
(4994,3914,0)
(5333,4871,0)
(7811,3024,0)
(6474,565,0)
(9017,7594,0)
(8682,1011,0)
(3537,2579,0)
(2287,6115,0)
(9122,5061,0)
(115,6996,0)
(4233,982,0)
(630,6620,0)
(4755,3560,0)
(6080,303,0)
(3078,36,0)
(8265,3185,0)
(4542,7509,0)
(7047,9059,0)
(597,7669,0)
(267,3615,0)
(7030,3272,0)
(6621,6343,0)
(4992,8634,0)
(2345,6987,0)
(6581,1828,0)
(5371,9024,0)
(536,7759,0)
(3480,2592,0)
(5105,7326,0)
(1131,7227,0)
(8992,880,0)
(7966,5061,0)
(4324,1390,0)
(5172,2516,0)
(5334,8133,0)
(3274,4331,0)
(7733,2308,0)
(8381,1797,0)
(1940,5323,0)
(1834,5376,0)
(7878,1880,0)
(3413,1192,0)
(4840,8041,0)
(1244,6371,0)
(8409,5873,0)
(3254,700,0)
(2214,2421,0)
(6062,8566,0)
(8652,1031,0)
(2792,7289,0)
(7688,4208,0)
(1424,8673,0)
(8403,5061,0)
(7665,1388,0)
(211,6616,0)
(657,8792,0)
(3596,1768,0)
(5571,5869,0)
(7,8566,0)
(5037,5061,0)
(1681,3544,0)
(2448,1695,0)
(7003,6340,0)
(5017,3153,0)
(7919,8372,0)
(7148,5126,0)
(8628,3231,0)
(2191,1245,0)
(7818,6470,0)
(3916,65,0)
(8933,7075,0)
(8500,2519,0)
(4595,8345,0)
(5133,3196,0)
(8093,2434,0)
(1067,4144,0)
(7996,1695,0)
(472,4797,0)
(5148,4798,0)
(3295,1225,0)
(4375,2212,0)
(6485,2518,0)
(3676,1082,0)
(1587,3148,0)
(585,5649,0)
(5686,6184,0)
(3623,403,0)
(3244,5832,0)
(8169,4874,0)
(3437,3499,0)
(8985,4840,0)
(2725,1042,0)
(5418,1086,0)
(5860,1566,0)
(6484,6396,0)
(8658,258,0)
(7231,8566,0)
(5564,127,0)
(4001,7974,0)
(8497,1581,0)
(6486,5061,0)
(7234,439,0)
(8274,5723,0)
(2317,8338,0)
(4252,1953,0)
(4764,3315,0)
(8754,1604,0)
(6943,4871,0)
(6435,8036,0)
(6920,1024,0)
(3903,5867,0)
(8896,4247,0)
(3969,6597,0)
(8386,8153,0)
(2216,2011,0)
(7429,8566,0)
(5401,5061,0)
(8116,1662,0)
(4618,5061,0)
(2611,5937,0)
(4930,5061,0)
(8399,4316,0)
(6041,263,0)
(1743,728,0)
(7630,6488,0)
(1763,8579,0)
(5619,8460,0)
(610,3437,0)
(2749,4195,0)
(7369,4060,0)
(6408,4656,0)
(6393,6583,0)
(8178,1189,0)
(227,3375,0)
(2883,8623,0)
(7910,6393,0)
(9155,222,0)
(281,105,0)
(1693,258,0)
(1497,9050,0)
(8277,1808,0)
(8215,8879,0)
(5890,7578,0)
(1606,7450,0)
(9122,8566,0)
(6235,7043,0)
(1214,2822,0)
(2918,1030,0)
(7837,7865,0)
(2557,8022,0)
(9123,2530,0)
(5412,8797,0)
(4080,155,0)
(54,2057,0)
(8946,7126,0)
(2934,3722,0)
(5201,1204,0)
(3955,7849,0)
(6686,8673,0)
(7775,5061,0)
(950,8960,0)
(2049,906,0)
(3517,6674,0)
(2540,8200,0)
(4302,9048,0)
(1995,1027,0)
(221,7582,0)
(4725,4922,0)
(5107,6745,0)
(959,1386,0)
(821,8566,0)
(3231,6127,0)
(8239,4470,0)
(228,970,0)
(8669,895,0)
(236,800,0)
(256,7962,0)
(3309,6725,0)
(8843,1327,0)
(6863,8566,0)
(4019,8836,0)
(3327,4520,0)
(2838,8069,0)
(752,8566,0)
(6755,2893,0)
(1170,6435,0)
(7440,5061,0)
(1272,3134,0)
(7999,6258,0)
(4480,5348,0)
(7323,4347,0)
(6946,2454,0)
(7351,8855,0)
(5804,1689,0)
(8797,1097,0)
(378,3160,0)
(8680,6777,0)
(8789,3038,0)
(8533,6071,0)
(720,4457,0)
(8427,5061,0)
(5877,802,0)
(9104,6127,0)
(6123,1839,0)
(1302,619,0)
(9104,9042,0)
(1855,1160,0)
(3522,5121,0)
(8814,6234,0)
(4619,5901,0)
(4432,8700,0)
(3744,8566,0)
(2933,5003,0)
(2887,5070,0)
(696,1449,0)
(4869,6853,0)
(3893,2116,0)
(3439,7289,0)
(1067,8745,0)
(3290,1695,0)
(7050,3518,0)
(1115,7522,0)
(8607,3985,0)
(3835,5061,0)
(9136,7358,0)
(5597,7762,0)
(2716,2325,0)
(3145,4006,0)
(1976,3522,0)
(6451,4947,0)
(9113,486,0)
(4717,7425,0)
(348,8957,0)
(474,5217,0)
(4706,2777,0)
(8700,1952,0)
(7222,4560,0)
(6754,4989,0)
(140,6561,0)
(7974,4001,0)
(294,5481,0)
(4382,8918,0)
(2561,1085,0)
(780,4758,0)
(3808,1150,0)
(5484,2365,0)
(9104,1796,0)
(424,6609,0)
(5634,8607,0)
(3419,5403,0)
(5068,2340,0)
(7154,342,0)
(5651,4602,0)
(6129,8492,0)
(2841,454,0)
(4652,1958,0)
(4198,1636,0)
(2274,1059,0)
(4094,9059,0)
(3974,5108,0)
(6265,2815,0)
(2330,7692,0)
(119,3164,0)
(1742,8830,0)
(2276,5061,0)
(7129,64,0)
(1700,3135,0)
(2949,8566,0)
(3449,4761,0)
(6778,7724,0)
(5422,1524,0)
(2594,3157,0)
(3973,8752,0)
(1184,8566,0)
(5958,6768,0)
(2038,6769,0)
(8054,7995,0)
(2898,4470,0)
(2645,5599,0)
(5933,4778,0)
(1666,5061,0)
(4361,7703,0)
(8639,3909,0)
(4593,1323,0)
(2632,2015,0)
(8723,7178,0)
(3123,5667,0)
(5263,258,0)
(1279,5061,0)
(7756,1068,0)
(7689,5068,0)
(7195,8426,0)
(136,1016,0)
(6378,3306,0)
(970,228,0)
(2504,2805,0)
(2827,8952,0)
(4547,4542,0)
(5286,8566,0)
(8827,2908,0)
(3224,2124,0)
(9045,7574,0)
(5581,1378,0)
(724,7482,0)
(2419,8688,0)
(2798,2764,0)
(4736,5652,0)
(7308,3454,0)
(3345,8599,0)
(7723,8244,0)
(1338,8154,0)
(5148,8485,0)
(8407,6065,0)
(7489,1274,0)
(3351,65,0)
(165,3231,0)
(8400,3526,0)
(8490,1499,0)
(6715,8062,0)
(6560,8673,0)
(5509,5638,0)
(5470,1405,0)
(3709,7458,0)
(3071,1189,0)
(3329,8206,0)
(1761,6326,0)
(3577,8831,0)
(1244,8294,0)
(3514,2081,0)
(6694,4596,0)
(1245,2191,0)
(5044,5555,0)
(4385,1154,0)
(264,8566,0)
(7235,2614,0)
(3075,2803,0)
(3994,5661,0)
(6285,7714,0)
(9096,5061,0)
(4595,4299,0)
(5698,3707,0)
(4518,3046,0)
(8908,7824,0)
(137,3400,0)
(7416,5704,0)
(3538,3333,0)
(7557,8566,0)
(7644,2485,0)
(2501,2722,0)
(3640,4808,0)
(2339,5061,0)
(2135,4462,0)
(8436,4483,0)
(4993,7882,0)
(3043,3415,0)
(4529,5855,0)
(325,258,0)
(3022,5061,0)
(5692,5656,0)
(7722,1275,0)
(6338,1689,0)
(6913,5942,0)
(5583,8948,0)
(3397,3287,0)
(2675,5061,0)
(3566,7882,0)
(2895,8972,0)
(8168,4047,0)
(873,4679,0)
(8079,5885,0)
(6320,5855,0)
(2938,2612,0)
(1600,8352,0)
(310,6289,0)
(1030,3231,0)
(7516,8566,0)
(6692,2504,0)
(4550,965,0)
(1716,2962,0)
(3236,599,0)
(2037,4758,0)
(1414,3939,0)
(7228,5052,0)
(5881,2765,0)
(992,7301,0)
(2237,64,0)
(2457,7425,0)
(5796,4781,0)
(189,6927,0)
(4788,1361,0)
(2635,2184,0)
(5303,2887,0)
(2645,2462,0)
(3102,5872,0)
(8307,1281,0)
(3542,1056,0)
(4602,5250,0)
(5252,5061,0)
(7261,3854,0)
(4558,4608,0)
(4286,4937,0)
(1197,8673,0)
(5079,8475,0)
(3278,2199,0)
(7371,8673,0)
(4548,4834,0)
(6742,5061,0)
(5586,7684,0)
(6996,3389,0)
(8715,1696,0)
(664,916,0)
(2751,4181,0)
(102,4786,0)
(1316,8832,0)
(9154,7450,0)
(112,8771,0)
(8165,5061,0)
(2235,5061,0)
(7469,5713,0)
(673,8825,0)
(5105,4400,0)
(4665,5248,0)
(8607,5634,0)
(2987,2187,0)
(3484,8566,0)
(2781,5343,0)
(6490,3359,0)
(6024,2630,0)
(3822,4908,0)
(3951,1461,0)
(4604,8566,0)
(7875,8356,0)
(6182,5061,0)
(7353,3915,0)
(6382,4294,0)
(80,4067,0)
(2156,1600,0)
(4511,2141,0)
(3284,836,0)
(4250,8566,0)
(333,7043,0)
(3829,3042,0)
(1851,2396,0)
(1355,2407,0)
(607,5337,0)
(8990,1042,0)
(1539,5061,0)
(8758,6633,0)
(2457,1866,0)
(5997,8417,0)
(1445,8673,0)
(1598,5923,0)
(83,7048,0)
(869,4684,0)
(5558,3566,0)
(2534,531,0)
(1390,3150,0)
(8795,7296,0)
(3359,3099,0)
(252,1388,0)
(2286,2491,0)
(1837,6555,0)
(3433,5205,0)
(138,8566,0)
(1403,3231,0)
(5148,1922,0)
(1104,7577,0)
(6314,2637,0)
(1205,8566,0)
(2206,7818,0)
(22,8662,0)
(4073,7815,0)
(5148,7629,0)
(3898,1695,0)
(593,8974,0)
(3379,8597,0)
(2645,838,0)
(5128,6438,0)
(948,536,0)
(8097,6041,0)
(8272,5061,0)
(8232,1581,0)
(2203,5842,0)
(6947,4845,0)
(8012,6353,0)
(924,960,0)
(6360,4610,0)
(4874,1292,0)
(1357,2968,0)
(7536,8566,0)
(884,1539,0)
(1219,398,0)
(6186,6611,0)
(7404,1784,0)
(6182,8566,0)
(3955,3043,0)
(6510,5061,0)
(3531,1198,0)
(1451,120,0)
(6179,400,0)
(719,8566,0)
(8466,8566,0)
(1179,5385,0)
(3649,4689,0)
(6859,2705,0)
(3744,6831,0)
(282,1327,0)
(2075,8762,0)
(7708,1411,0)
(6719,5061,0)
(4746,390,0)
(909,4572,0)
(5429,3293,0)
(7455,8566,0)
(2805,3792,0)
(6797,3814,0)
(4891,8427,0)
(8550,5398,0)
(8227,0,0)
(6125,7890,0)
(6831,3744,0)
(4148,3158,0)
(7009,1939,0)
(24,861,0)
(7818,65,0)
(5617,6432,0)
(3726,3419,0)
(5535,8673,0)
(2948,8102,0)
(3496,7141,0)
(2350,6609,0)
(2318,7855,0)
(6414,4181,0)
(1677,9049,0)
(1367,5270,0)
(8219,2131,0)
(9104,8980,0)
(6273,5380,0)
(6407,2741,0)
(846,3270,0)
(802,5877,0)
(8460,6776,0)
(6620,4187,0)
(7069,5803,0)
(7100,7070,0)
(1215,5847,0)
(1512,4182,0)
(1067,8566,0)
(6657,4837,0)
(2081,3514,0)
(4721,2537,0)
(2990,258,0)
(6653,1606,0)
(1491,66,0)
(4596,6694,0)
(882,2675,0)
(6887,8883,0)
(2023,5672,0)
(4424,817,0)
(4605,3826,0)
(1248,5384,0)
(7019,6237,0)
(4594,484,0)
(5224,4930,0)
(7820,843,0)
(9071,9056,0)
(659,725,0)
(8802,8566,0)
(6344,3416,0)
(6905,7440,0)
(180,98,0)
(5200,7934,0)
(8473,2965,0)
(5844,1925,0)
(2123,3404,0)
(1899,5956,0)
(2261,5061,0)
(7040,1420,0)
(205,5937,0)
(2596,6435,0)
(8264,8566,0)
(2118,5726,0)
(8829,8042,0)
(2069,3198,0)
(7680,1965,0)
(3233,1834,0)
(8240,5061,0)
(390,2113,0)
(4471,4739,0)
(9079,7593,0)
(6303,8602,0)
(5979,5787,0)
(8498,5061,0)
(2645,2768,0)
(4209,3231,0)
(2243,258,0)
(783,958,0)
(4965,8264,0)
(1689,5061,0)
(7394,4783,0)
(5678,4988,0)
(4234,6276,0)
(3447,1789,0)
(1479,3958,0)
(8543,3997,0)
(6447,5164,0)
(5626,144,0)
(6527,5456,0)
(424,2303,0)
(4128,4106,0)
(8782,5061,0)
(4508,8025,0)
(1006,2775,0)
(3124,8703,0)
(4436,8831,0)
(2391,6706,0)
(6056,3055,0)
(1937,8792,0)
(5029,5612,0)
(1641,2060,0)
(3253,8802,0)
(3861,1775,0)
(3966,1747,0)
(2729,6869,0)
(3614,7696,0)
(6404,2285,0)
(4061,3921,0)
(8528,6662,0)
(6665,4817,0)
(5814,6942,0)
(7180,3974,0)
(1388,5061,0)
(9125,5640,0)
(8957,6047,0)
(942,7202,0)
(398,6511,0)
(4785,6245,0)
(1924,3840,0)
(4396,1321,0)
(8542,3596,0)
(6064,8518,0)
(1160,15,0)
(6214,4882,0)
(6531,4351,0)
(3305,2497,0)
(3965,8673,0)
(510,8988,0)
(4831,9126,0)
(5845,8673,0)
(6088,280,0)
(5505,8372,0)
(4370,1324,0)
(5777,5130,0)
(620,2863,0)
(5635,3312,0)
(6583,6393,0)
(2326,212,0)
(6116,3921,0)
(7228,5061,0)
(2176,8566,0)
(8486,8427,0)
(4100,1325,0)
(3308,8737,0)
(4312,1005,0)
(6819,1072,0)
(3042,1963,0)
(776,7067,0)
(2163,6426,0)
(1513,2160,0)
(3367,8094,0)
(2773,7046,0)
(349,2761,0)
(3366,2906,0)
(4943,5481,0)
(7640,2724,0)
(808,5607,0)
(1857,8053,0)
(752,5290,0)
(550,939,0)
(4513,5221,0)
(7839,8461,0)
(1064,1829,0)
(3136,6438,0)
(4472,2893,0)
(3709,4985,0)
(6623,8520,0)
(3824,1623,0)
(7474,2074,0)
(3750,7443,0)
(822,7056,0)
(117,455,0)
(6125,7517,0)
(7605,3312,0)
(431,4065,0)
(1749,7399,0)
(5604,4078,0)
(6876,8165,0)
(9041,4869,0)
(8127,4585,0)
(4426,8071,0)
(7949,1419,0)
(6486,8566,0)
(9145,991,0)
(3266,2165,0)
(5723,2256,0)
(5486,154,0)
(7030,3239,0)
(6130,7598,0)
(9081,4473,0)
(1922,4899,0)
(6513,8605,0)
(3535,4713,0)
(166,4057,0)
(7995,5061,0)
(9046,244,0)
(2318,1045,0)
(7493,5704,0)
(7243,6852,0)
(6566,7962,0)
(20,8566,0)
(3105,8566,0)
(1241,5061,0)
(2880,195,0)
(2814,8566,0)
(2255,2202,0)
(210,36,0)
(3124,6127,0)
(1919,1388,0)
(1042,2725,0)
(3253,4437,0)
(8922,8504,0)
(8019,6768,0)
(8819,2775,0)
(4859,5061,0)
(4483,1423,0)
(7688,4268,0)
(8845,8032,0)
(3205,8566,0)
(6622,5945,0)
(1735,7425,0)
(3150,3074,0)
(9059,4094,0)
(4062,6768,0)
(2508,2649,0)
(1161,6892,0)
(1343,63,0)
(2589,1589,0)
(8717,5939,0)
(5135,7129,0)
(5610,709,0)
(1819,4503,0)
(1284,1690,0)
(6162,3436,0)
(3821,1839,0)
(3508,8566,0)
(1407,4503,0)
(3920,6754,0)
(6641,4061,0)
(8369,3097,0)
(6566,1866,0)
(3329,5061,0)
(3264,256,0)
(3480,8164,0)
(1650,1321,0)
(7436,2475,0)
(2000,5061,0)
(2738,5686,0)
(105,2481,0)
(8126,8235,0)
(3360,2033,0)
(6033,834,0)
(1838,6678,0)
(185,5107,0)
(7412,456,0)
(1070,8334,0)
(3390,5113,0)
(1344,7507,0)
(3089,3535,0)
(7101,5052,0)
(1981,5061,0)
(4118,5431,0)
(3376,6011,0)
(972,2888,0)
(5032,3318,0)
(6238,1135,0)
(6948,1057,0)
(1793,4306,0)
(8174,5362,0)
(5105,4304,0)
(7443,8851,0)
(507,5024,0)
(368,3179,0)
(1524,5114,0)
(1801,6547,0)
(2741,6359,0)
(2027,9107,0)
(2298,325,0)
(6917,770,0)
(6512,3137,0)
(103,1984,0)
(8813,5009,0)
(1225,6655,0)
(7583,3191,0)
(3580,7504,0)
(244,9046,0)
(8549,3203,0)
(2614,7235,0)
(2607,1984,0)
(1194,3578,0)
(5752,5061,0)
(6894,8232,0)
(2581,1917,0)
(955,6564,0)
(4285,5061,0)
(7526,8232,0)
(1321,3036,0)
(205,8343,0)
(1082,8652,0)
(8358,635,0)
(652,3368,0)
(7487,7663,0)
(8498,8566,0)
(2200,3313,0)
(2339,4797,0)
(8219,850,0)
(6653,5640,0)
(2727,4743,0)
(6923,2527,0)
(4014,604,0)
(3849,5034,0)
(3338,3612,0)
(1515,1758,0)
(256,4642,0)
(5927,5061,0)
(2584,1866,0)
(2868,3768,0)
(3358,3592,0)
(6396,3231,0)
(6556,5279,0)
(7888,4437,0)
(8645,2592,0)
(3737,6501,0)
(2645,2485,0)
(4931,3651,0)
(2715,5854,0)
(4403,5439,0)
(7191,5559,0)
(2325,8566,0)
(8500,2354,0)
(2714,5254,0)
(6561,8566,0)
(4138,860,0)
(2556,7689,0)
(5112,1794,0)
(8191,6204,0)
(3871,5061,0)
(4239,4520,0)
(5941,5439,0)
(2293,384,0)
(5880,6215,0)
(5165,3970,0)
(5065,7358,0)
(868,4144,0)
(3647,4740,0)
(2132,6679,0)
(2722,7170,0)
(3915,7525,0)
(5568,6863,0)
(4185,3224,0)
(9120,8566,0)
(5105,7810,0)
(9104,6055,0)
(9013,4905,0)
(2137,5061,0)
(2787,5037,0)
(8504,6265,0)
(3996,5061,0)
(1803,6730,0)
(6141,7747,0)
(4195,2749,0)
(6023,4977,0)
(7717,2811,0)
(3934,5061,0)
(3419,7246,0)
(4747,5384,0)
(8838,4507,0)
(2359,5391,0)
(7890,8102,0)
(6690,5061,0)
(1316,2736,0)
(5387,1668,0)
(6361,3160,0)
(7005,5061,0)
(6389,7192,0)
(7449,5204,0)
(1287,7147,0)
(2802,2876,0)
(7384,7068,0)
(9065,3715,0)
(1376,8848,0)
(7956,5061,0)
(595,7127,0)
(4980,1346,0)
(8676,8566,0)
(6240,4555,0)
(4240,1067,0)
(2078,7077,0)
(7745,8566,0)
(3461,4213,0)
(337,3098,0)
(5109,7170,0)
(7214,1411,0)
(4770,4993,0)
(1045,8566,0)
(1983,8566,0)
(8237,829,0)
(8326,3388,0)
(4345,7440,0)
(7726,8566,0)
(6326,6173,0)
(7250,4092,0)
(6601,2472,0)
(2884,4085,0)
(1283,6008,0)
(8595,8049,0)
(9054,8566,0)
(6566,2496,0)
(8200,3781,0)
(7895,7564,0)
(6742,5699,0)
(5324,2940,0)
(6815,959,0)
(1671,8188,0)
(8250,6269,0)
(8036,6435,0)
(2569,1601,0)
(7355,8566,0)
(367,2843,0)
(732,8566,0)
(3237,7067,0)
(217,8383,0)
(702,5815,0)
(4463,4624,0)
(3418,4664,0)
(6929,8673,0)
(7730,3289,0)
(7418,8566,0)
(7205,5468,0)
(6010,6535,0)
(1519,1695,0)
(61,8566,0)
(2097,5061,0)
(9113,8673,0)
(4789,224,0)
(3880,3630,0)
(5592,4014,0)
(7719,6442,0)
(8523,47,0)
(431,1059,0)
(8279,4603,0)
(4034,8697,0)
(4648,5937,0)
(2373,667,0)
(2854,8566,0)
(5965,2690,0)
(204,6141,0)
(7771,1009,0)
(9098,8566,0)
(3700,4446,0)
(440,6623,0)
(3808,765,0)
(2401,8673,0)
(7476,709,0)
(8475,8566,0)
(7081,3202,0)
(4648,8566,0)
(386,4759,0)
(2227,1390,0)
(8791,328,0)
(4869,258,0)
(4646,8900,0)
(3365,8566,0)
(1057,8566,0)
(5807,2033,0)
(9104,838,0)
(3161,3899,0)
(1979,8475,0)
(1323,7685,0)
(7021,1336,0)
(3715,2609,0)
(3457,1813,0)
(4697,3754,0)
(1042,3880,0)
(1055,1596,0)
(3106,3070,0)
(5812,7027,0)
(4389,7328,0)
(8847,7781,0)
(6867,588,0)
(2438,722,0)
(146,7416,0)
(6901,3806,0)
(8455,5061,0)
(5091,7425,0)
(1870,3338,0)
(8936,6472,0)
(3021,7501,0)
(1941,8520,0)
(8768,8426,0)
(7932,6045,0)
(2139,2165,0)
(6734,5923,0)
(7507,5061,0)
(2164,4347,0)
(8444,3035,0)
(207,328,0)
(5701,258,0)
(5442,3189,0)
(9136,4864,0)
(2247,8022,0)
(6182,3887,0)
(6600,7082,0)
(6996,3166,0)
(7153,6996,0)
(7763,4319,0)
(7434,4812,0)
(8949,1078,0)
(5148,7810,0)
(4831,851,0)
(2719,2735,0)
(1327,5793,0)
(7648,7135,0)
(5743,5061,0)
(3960,6977,0)
(5408,965,0)
(9143,1088,0)
(3239,7030,0)
(5906,2663,0)
(8621,1278,0)
(2210,8431,0)
(8767,3074,0)
(2139,4642,0)
(1348,586,0)
(3164,8566,0)
(3955,5254,0)
(256,4400,0)
(8671,552,0)
(3962,8157,0)
(6412,4634,0)
(8519,8566,0)
(1702,4672,0)
(8154,1338,0)
(2985,7596,0)
(8309,5579,0)
(5669,6592,0)
(2537,4047,0)
(3635,2738,0)
(8270,5365,0)
(4991,3051,0)
(5737,3375,0)
(8716,5894,0)
(8079,5070,0)
(8467,1686,0)
(6909,8539,0)
(3388,2033,0)
(1870,6463,0)
(1390,8558,0)
(170,8495,0)
(6795,2812,0)
(6271,6106,0)
(5693,1331,0)
(2456,8869,0)
(7590,5037,0)
(8779,6982,0)
(6859,3110,0)
(4164,6403,0)
(1406,5408,0)
(4322,6636,0)
(5644,6534,0)
(2974,7234,0)
(1489,702,0)
(1185,8566,0)
(487,257,0)
(4395,2477,0)
(3749,2453,0)
(7941,838,0)
(7370,7700,0)
(3878,5564,0)
(2427,2662,0)
(4680,3528,0)
(9104,6836,0)
(2963,8673,0)
(3574,1097,0)
(579,1928,0)
(2278,6799,0)
(7825,4275,0)
(3234,8673,0)
(3427,5725,0)
(6594,6543,0)
(3103,3484,0)
(1030,8566,0)
(1933,2307,0)
(2770,8566,0)
(8912,2217,0)
(5597,3095,0)
(3386,8159,0)
(1948,7025,0)
(7408,5209,0)
(6672,5061,0)
(6051,7364,0)
(7611,5061,0)
(7144,6821,0)
(8947,377,0)
(5567,4901,0)
(8293,3908,0)
(1883,8961,0)
(7067,3237,0)
(8689,3141,0)
(2557,8508,0)
(2739,6214,0)
(5633,6301,0)
(3043,4400,0)
(9068,3742,0)
(3629,8446,0)
(5105,6127,0)
(4010,8947,0)
(7826,5986,0)
(5683,2977,0)
(8298,8743,0)
(6788,3202,0)
(6217,3480,0)
(2397,4078,0)
(979,1362,0)
(5865,500,0)
(7963,3140,0)
(960,8049,0)
(64,127,0)
(2282,2532,0)
(135,8459,0)
(7136,1693,0)
(1944,4732,0)
(1246,2356,0)
(3678,7976,0)
(5602,4803,0)
(2025,5061,0)
(9095,4486,0)
(1836,5133,0)
(4470,2898,0)
(855,3420,0)
(6481,7625,0)
(9127,8309,0)
(3511,4950,0)
(6933,4499,0)
(1581,3201,0)
(7056,5061,0)
(3947,502,0)
(7949,8566,0)
(8832,3497,0)
(4567,377,0)
(5212,1794,0)
(1698,6994,0)
(6617,2846,0)
(7671,2768,0)
(4707,466,0)
(2532,8566,0)
(6464,4395,0)
(986,1446,0)
(4995,2990,0)
(9104,4864,0)
(4037,8376,0)
(5700,7335,0)
(4755,1636,0)
(913,3513,0)
(7924,7015,0)
(7664,8798,0)
(1815,6675,0)
(4515,1876,0)
(7458,3709,0)
(5930,8335,0)
(1811,8566,0)
(3125,8566,0)
(1184,5676,0)
(6715,5061,0)
(5166,7974,0)
(5731,2997,0)
(3188,7309,0)
(8458,1941,0)
(3616,4347,0)
(6997,5672,0)
(7135,7648,0)
(8495,3509,0)
(3250,7781,0)
(7827,3605,0)
(634,5921,0)
(868,3153,0)
(4264,3844,0)
(1317,5061,0)
(7749,454,0)
(2616,6697,0)
(8078,998,0)
(46,732,0)
(4369,5061,0)
(7764,5165,0)
(2060,6252,0)
(792,8566,0)
(3404,8566,0)
(8688,495,0)
(6704,2128,0)
(5977,8348,0)
(1001,7206,0)
(8584,8658,0)
(2760,3546,0)
(4724,1566,0)
(23,5510,0)
(4940,1923,0)
(3192,2651,0)
(871,8673,0)
(5914,6679,0)
(5105,4798,0)
(8197,3474,0)
(7365,5220,0)
(8165,8566,0)
(8504,8922,0)
(4158,7172,0)
(1758,8091,0)
(1169,3446,0)
(8262,8192,0)
(2000,8566,0)
(1525,8115,0)
(4261,4990,0)
(8746,1504,0)
(5760,5061,0)
(6724,1375,0)
(7283,1869,0)
(7224,3236,0)
(7187,2806,0)
(1643,2854,0)
(5346,6257,0)
(3846,4555,0)
(5119,1653,0)
(7437,266,0)
(7644,952,0)
(5381,8566,0)
(8095,5061,0)
(4438,7281,0)
(6136,3590,0)
(5661,5937,0)
(2311,7958,0)
(2814,5061,0)
(5105,2870,0)
(4391,8433,0)
(592,45,0)
(7094,4248,0)
(1924,8244,0)
(1097,4272,0)
(8935,4874,0)
(4190,4922,0)
(8446,6793,0)
(1494,8566,0)
(3685,4306,0)
(6207,1982,0)
(4668,7280,0)
(8573,7649,0)
(75,1726,0)
(6272,1125,0)
(5063,6220,0)
(2193,4637,0)
(3673,5020,0)
(7185,5061,0)
(89,1842,0)
(7778,7082,0)
(3231,952,0)
(4119,2548,0)
(4365,8566,0)
(6443,3365,0)
(4979,9037,0)
(7742,7433,0)
(7881,4875,0)
(7929,2764,0)
(8576,7882,0)
(5,8673,0)
(238,8566,0)
(1399,6437,0)
(7832,6873,0)
(814,7119,0)
(7808,6435,0)
(2457,578,0)
(8251,1019,0)
(2400,901,0)
(1866,1492,0)
(8503,6225,0)
(8783,3666,0)
(5687,8833,0)
(8309,1292,0)
(2864,7328,0)
(2281,9034,0)
(7007,3535,0)
(3469,3097,0)
(588,258,0)
(7272,3814,0)
(8473,6727,0)
(4001,834,0)
(488,7685,0)
(7294,2374,0)
(6348,1860,0)
(4960,5756,0)
(1714,3303,0)
(3628,7721,0)
(8617,1494,0)
(7779,3925,0)
(367,1013,0)
(7399,8673,0)
(1138,786,0)
(2231,5725,0)
(5065,952,0)
(3526,953,0)
(860,6555,0)
(3942,4814,0)
(421,9121,0)
(4973,8673,0)
(1545,3484,0)
(8523,4488,0)
(4414,1786,0)
(4022,1185,0)
(1378,8566,0)
(9104,2786,0)
(12,3930,0)
(5168,987,0)
(8944,5296,0)
(326,8673,0)
(1260,1695,0)
(8103,4080,0)
(8079,127,0)
(4393,3201,0)
(2574,6220,0)
(958,783,0)
(7189,3894,0)
(2276,8566,0)
(6164,8135,0)
(6779,5060,0)
(8204,1394,0)
(8957,348,0)
(7936,1565,0)
(5652,6004,0)
(1877,6923,0)
(585,8566,0)
(2150,4298,0)
(1960,2243,0)
(8417,8066,0)
(6461,6407,0)
(2303,424,0)
(7626,2876,0)
(1538,8505,0)
(4888,2532,0)
(2952,6370,0)
(8133,5334,0)
(5723,36,0)
(5578,7128,0)
(5272,8242,0)
(7455,5061,0)
(2863,8566,0)
(3494,2869,0)
(5544,6388,0)
(7663,7487,0)
(4446,5787,0)
(1597,8101,0)
(3127,2594,0)
(807,6558,0)
(4528,7613,0)
(7276,2601,0)
(8870,6371,0)
(9082,9108,0)
(4599,8658,0)
(1240,6746,0)
(5385,1246,0)
(1162,6016,0)
(4848,3051,0)
(8919,2375,0)
(8886,8866,0)
(5704,3806,0)
(3037,1497,0)
(8560,5405,0)
(588,65,0)
(2828,3248,0)
(6794,3540,0)
(3518,1287,0)
(4473,4285,0)
(7113,5724,0)
(4065,2690,0)
(2325,2716,0)
(3626,5061,0)
(6973,219,0)
(14,2688,0)
(7906,7164,0)
(957,5997,0)
(6237,2273,0)
(407,7869,0)
(7576,927,0)
(7600,7991,0)
(8315,8694,0)
(599,3236,0)
(4504,3970,0)
(5877,2360,0)
(9063,967,0)
(3301,2853,0)
(8099,1167,0)
(1303,3361,0)
(6582,9008,0)
(7653,7116,0)
(3118,7652,0)
(8524,9046,0)
(3844,6726,0)
(8450,5061,0)
(7006,6724,0)
(2968,1923,0)
(1468,7472,0)
(3105,1869,0)
(2643,4988,0)
(4473,9081,0)
(852,5937,0)
(6335,2991,0)
(1664,6183,0)
(6097,4263,0)
(8341,152,0)
(5009,4306,0)
(5439,8566,0)
(6428,4345,0)
(6008,5061,0)
(4727,41,0)
(6849,7958,0)
(917,3270,0)
(695,224,0)
(6739,8566,0)
(3296,8343,0)
(1231,221,0)
(9104,2649,0)
(6840,3520,0)
(8758,258,0)
(8275,65,0)
(3789,4292,0)
(3946,3277,0)
(4580,4478,0)
(3767,3304,0)
(2949,6750,0)
(5823,2516,0)
(8753,4931,0)
(483,5818,0)
(8980,1059,0)
(8855,7351,0)
(4407,5061,0)
(4825,2110,0)
(3906,656,0)
(6566,2870,0)
(1066,4705,0)
(4503,1407,0)
(6175,2062,0)
(1080,401,0)
(5369,4192,0)
(2907,8299,0)
(2319,3312,0)
(7829,8566,0)
(4932,2304,0)
(8150,8673,0)
(1439,8338,0)
(1068,8566,0)
(2653,8579,0)
(1288,1284,0)
(5065,4400,0)
(5892,5003,0)
(1851,5061,0)
(2357,7195,0)
(6459,2475,0)
(2860,4720,0)
(7048,5937,0)
(3955,2457,0)
(536,7804,0)
(8089,2519,0)
(2420,7472,0)
(2354,1690,0)
(7580,5490,0)
(5972,6501,0)
(4166,6558,0)
(4623,1729,0)
(2576,1846,0)
(2841,8673,0)
(4827,5076,0)
(4883,3844,0)
(6996,4948,0)
(7504,3580,0)
(5306,6852,0)
(5924,4463,0)
(3117,4660,0)
(45,5832,0)
(615,6922,0)
(8547,1327,0)
(2152,4517,0)
(3403,124,0)
(1974,6203,0)
(7642,137,0)
(4617,737,0)
(7728,1651,0)
(8635,800,0)
(4214,8157,0)
(7727,4546,0)
(6568,6698,0)
(6057,5411,0)
(3141,5061,0)
(2002,5902,0)
(2472,5137,0)
(8986,2236,0)
(9001,5958,0)
(406,4996,0)
(8065,117,0)
(6465,6533,0)
(3060,2262,0)
(4804,5060,0)
(6343,1830,0)
(3831,7841,0)
(4865,1695,0)
(3423,1873,0)
(3825,4993,0)
(8641,5117,0)
(6427,7291,0)
(2645,8966,0)
(3548,8566,0)
(9039,7005,0)
(3230,6204,0)
(6279,7191,0)
(7416,2681,0)
(6480,8673,0)
(902,8566,0)
(3924,448,0)
(1689,8566,0)
(2575,7877,0)
(1361,1876,0)
(8064,6846,0)
(1221,2012,0)
(7400,4004,0)
(9096,5937,0)
(2000,5937,0)
(1716,5061,0)
(8902,3496,0)
(3779,72,0)
(214,838,0)
(5258,8700,0)
(6808,1468,0)
(6012,7241,0)
(549,1633,0)
(8507,3293,0)
(5144,2245,0)
(5682,2271,0)
(1232,8907,0)
(7311,2510,0)
(8434,8673,0)
(3305,8560,0)
(2220,1920,0)
(307,5508,0)
(7072,3365,0)
(41,4727,0)
(1213,7487,0)
(3879,98,0)
(8931,7915,0)
(9104,3719,0)
(938,4026,0)
(1936,4067,0)
(503,8481,0)
(5027,8790,0)
(1157,64,0)
(3897,3375,0)
(4377,1446,0)
(8619,5692,0)
(7846,1192,0)
(8068,2482,0)
(248,4273,0)
(107,8857,0)
(7213,3559,0)
(7523,2777,0)
(2845,7976,0)
(7849,2165,0)
(3431,2822,0)
(513,3105,0)
(3696,2033,0)
(1848,6877,0)
(4275,7825,0)
(2580,4403,0)
(5916,525,0)
(2139,667,0)
(9106,1441,0)
(5352,5951,0)
(636,4444,0)
(1408,2392,0)
(3152,6444,0)
(4074,7534,0)
(3061,145,0)
(3437,2496,0)
(5733,7896,0)
(6474,1982,0)
(940,5061,0)
(3666,5195,0)
(6036,434,0)
(5055,7058,0)
(1123,4714,0)
(544,6932,0)
(3936,8566,0)
(2363,8264,0)
(7713,2376,0)
(7518,2803,0)
(3457,4341,0)
(1154,6768,0)
(5480,81,0)
(6265,8579,0)
(5641,6719,0)
(3063,8016,0)
(2645,1866,0)
(7239,941,0)
(142,4742,0)
(1591,3963,0)
(3838,5351,0)
(1635,807,0)
(3151,3921,0)
(1203,6509,0)
(4666,7946,0)
(807,5061,0)
(2213,5900,0)
(1881,3093,0)
(267,2155,0)
(2429,8566,0)
(1727,3568,0)
(1645,8566,0)
(2240,8566,0)
(595,5937,0)
(9104,2887,0)
(8091,507,0)
(2810,7347,0)
(321,6533,0)
(5105,4864,0)
(4257,7153,0)
(6715,8566,0)
(6087,1529,0)
(3802,2850,0)
(4507,2850,0)
(4294,6294,0)
(8430,550,0)
(8221,829,0)
(500,5865,0)
(4501,6565,0)
(3622,5965,0)
(906,1187,0)
(3851,8771,0)
(7632,3238,0)
(4973,2769,0)
(4051,2281,0)
(4113,3806,0)
(7306,2866,0)
(7657,8827,0)
(8248,3202,0)
(1594,857,0)
(7829,5061,0)
(3867,7388,0)
(5605,1490,0)
(4378,7448,0)
(5132,7572,0)
(57,9009,0)
(8711,3519,0)
(6873,1142,0)
(5621,5937,0)
(843,1944,0)
(2246,3650,0)
(5692,8619,0)
(1027,3287,0)
(5105,1071,0)
(5443,3179,0)
(6509,2276,0)
(7042,518,0)
(6065,8407,0)
(3664,4086,0)
(3632,8348,0)
(1140,5115,0)
(4889,4842,0)
(6565,8506,0)
(4816,297,0)
(7787,1457,0)
(6616,3445,0)
(2185,6672,0)
(2139,1866,0)
(662,2127,0)
(458,1024,0)
(331,1695,0)
(7284,1693,0)
(6346,3560,0)
(5743,8566,0)
(7102,6719,0)
(4786,4993,0)
(3341,2998,0)
(4041,4739,0)
(1758,8143,0)
(8903,8764,0)
(821,7296,0)
(1598,5943,0)
(5254,7425,0)
(5634,6869,0)
(1147,5987,0)
(2075,5877,0)
(1888,118,0)
(4664,3418,0)
(1396,5108,0)
(7076,523,0)
(134,2548,0)
(4203,8128,0)
(875,5061,0)
(8423,280,0)
(7406,3580,0)
(1662,6627,0)
(6458,4541,0)
(6140,3522,0)
(4024,8865,0)
(764,1083,0)
(6260,1266,0)
(1645,700,0)
(5182,1676,0)
(4685,7158,0)
(8273,217,0)
(3215,2843,0)
(1903,5413,0)
(232,1304,0)
(145,3148,0)
(1737,8673,0)
(6215,8554,0)
(5538,3879,0)
(5427,65,0)
(8062,3420,0)
(4071,6069,0)
(4862,5547,0)
(4006,8992,0)
(4610,3153,0)
(6037,1077,0)
(4495,1423,0)
(4060,108,0)
(1073,4551,0)
(7246,3419,0)
(4416,8331,0)
(4738,8566,0)
(3598,768,0)
(8813,7991,0)
(6578,1568,0)
(1967,6651,0)
(3679,703,0)
(7229,3996,0)
(7898,6327,0)
(2189,8047,0)
(2503,2863,0)
(888,8673,0)
(9105,8858,0)
(1953,3874,0)
(9104,7126,0)
(337,7477,0)
(919,2164,0)
(2731,1028,0)
(769,3148,0)
(4622,5088,0)
(8859,5061,0)
(3754,8566,0)
(1019,2906,0)
(7223,8254,0)
(2195,5126,0)
(8583,1220,0)
(245,3871,0)
(635,8566,0)
(6023,2180,0)
(6086,1232,0)
(1630,1941,0)
(8009,1834,0)
(734,1958,0)
(9072,2685,0)
(5476,8198,0)
(8771,5061,0)
(766,5832,0)
(3862,7383,0)
(2057,9068,0)
(5209,3758,0)
(4570,8566,0)
(4179,8795,0)
(1656,5061,0)
(7857,138,0)
(4056,97,0)
(1613,4642,0)
(7726,7488,0)
(4143,7435,0)
(2707,4977,0)
(880,8992,0)
(8865,2543,0)
(7331,1554,0)
(402,456,0)
(1873,4580,0)
(6757,531,0)
(3185,8566,0)
(2015,2632,0)
(4585,8127,0)
(6507,8566,0)
(6908,1309,0)
(5507,4695,0)
(3546,8566,0)
(2025,5604,0)
(3483,2248,0)
(2448,3855,0)
(3469,737,0)
(2507,7974,0)
(33,7093,0)
(4285,8566,0)
(4939,5009,0)
(6562,3571,0)
(3452,2561,0)
(8668,8701,0)
(2375,4089,0)
(8097,8930,0)
(4114,8566,0)
(7281,1695,0)
(3718,4407,0)
(3535,7054,0)
(592,4474,0)
(3668,7028,0)
(7124,2241,0)
(2587,3230,0)
(8050,1655,0)
(4468,8831,0)
(2447,5475,0)
(8898,8234,0)
(2736,1316,0)
(2513,1146,0)
(7564,7895,0)
(4510,4451,0)
(7773,899,0)
(8629,2077,0)
(2611,8566,0)
(475,3156,0)
(6359,2741,0)
(7508,8272,0)
(4183,8619,0)
(6472,8936,0)
(3300,6824,0)
(4930,5224,0)
(7961,5140,0)
(6746,258,0)
(4752,5560,0)
(4594,3605,0)
(3936,1220,0)
(915,2106,0)
(156,1695,0)
(3863,2605,0)
(2941,1753,0)
(2477,4395,0)
(4958,9155,0)
(1654,7126,0)
(6800,3267,0)
(1999,1876,0)
(8131,4043,0)
(9009,8566,0)
(6611,1474,0)
(3231,4400,0)
(6736,1380,0)
(3955,2584,0)
(3406,1695,0)
(4695,7241,0)
(5031,1641,0)
(7849,4232,0)
(2283,6173,0)
(2548,5061,0)
(9104,8364,0)
(3937,9007,0)
(6931,8121,0)
(2253,621,0)
(285,4959,0)
(3018,4036,0)
(6789,2091,0)
(2468,6994,0)
(484,8566,0)
(3560,4755,0)
(2878,5061,0)
(6139,394,0)
(2923,4035,0)
(6924,1850,0)
(4040,1059,0)
(5964,3502,0)
(5044,4921,0)
(1403,8244,0)
(1851,8566,0)
(4864,1697,0)
(3591,7081,0)
(2389,2745,0)
(789,1981,0)
(3742,9068,0)
(4343,1762,0)
(8327,5781,0)
(6794,6893,0)
(3043,4642,0)
(168,3626,0)
(4399,2117,0)
(725,2835,0)
(8889,5874,0)
(1512,5057,0)
(7623,4704,0)
(4882,1272,0)
(1261,2769,0)
(8155,2157,0)
(7686,4634,0)
(2654,9049,0)
(1327,5836,0)
(2443,1281,0)
(5212,2586,0)
(1044,2013,0)
(8905,4720,0)
(6245,4785,0)
(5457,1316,0)
(2520,5061,0)
(1581,7250,0)
(1079,2535,0)
(6754,3547,0)
(7362,7646,0)
(6226,7523,0)
(416,3746,0)
(8095,7199,0)
(1745,470,0)
(1217,4347,0)
(2422,1011,0)
(1980,8066,0)
(7055,1233,0)
(5686,2738,0)
(4691,2515,0)
(4708,1420,0)
(6528,1513,0)
(2240,5061,0)
(6508,7634,0)
(5148,7962,0)
(1741,8566,0)
(352,197,0)
(3712,3560,0)
(3806,456,0)
(8137,4808,0)
(2996,7150,0)
(2648,1925,0)
(595,5061,0)
(8433,5334,0)
(6593,7231,0)
(8427,4891,0)
(1061,8957,0)
(8394,1766,0)
(4671,1108,0)
(4786,1492,0)
(6012,8772,0)
(5903,3431,0)
(5381,4468,0)
(2666,7458,0)
(2584,2768,0)
(7510,6647,0)
(1671,2109,0)
(1166,6426,0)
(3734,3920,0)
(1381,8232,0)
(3634,2511,0)
(6914,7916,0)
(3126,8383,0)
(997,958,0)
(4209,8244,0)
(7061,4947,0)
(233,2890,0)
(8634,4992,0)
(8317,7693,0)
(2886,3520,0)
(985,7239,0)
(6476,9136,0)
(439,7234,0)
(63,1386,0)
(1094,7192,0)
(5071,7544,0)
(8440,5418,0)
(8334,1070,0)
(3318,8227,0)
(1952,4174,0)
(6113,5200,0)
(4331,5061,0)
(4585,9093,0)
(179,9117,0)
(5829,5612,0)
(2701,7603,0)
(8869,525,0)
(4941,413,0)
(2493,1403,0)
(5500,6768,0)
(2211,6331,0)
(9006,7160,0)
(9118,5749,0)
(271,1744,0)
(7296,8795,0)
(5420,8673,0)
(8701,9024,0)
(3222,425,0)
(6313,3604,0)
(7786,6201,0)
(2423,8177,0)
(7591,92,0)
(9149,5558,0)
(6780,7658,0)
(3520,8495,0)
(7564,4916,0)
(4887,8922,0)
(3706,3408,0)
(7842,2261,0)
(8805,2649,0)
(5188,7506,0)
(387,1270,0)
(7516,6682,0)
(2055,2511,0)
(8835,4190,0)
(5478,1505,0)
(8282,2274,0)
(2674,5749,0)
(7224,3072,0)
(200,255,0)
(3975,8426,0)
(1266,6260,0)
(4832,4815,0)
(6191,8610,0)
(3663,5624,0)
(8514,6360,0)
(6989,4648,0)
(9134,8566,0)
(6269,6434,0)
(1882,2072,0)
(9104,7425,0)
(7698,8771,0)
(1388,8566,0)
(728,1743,0)
(8745,1067,0)
(2141,711,0)
(2124,3224,0)
(7051,2142,0)
(3362,5061,0)
(4057,2965,0)
(5148,6826,0)
(7469,1334,0)
(4540,5119,0)
(6062,5061,0)
(8234,3397,0)
(3477,6705,0)
(2007,6869,0)
(2064,2609,0)
(597,3098,0)
(4722,6901,0)
(6623,1954,0)
(6082,1341,0)
(256,3389,0)
(5974,708,0)
(6755,5061,0)
(5174,1766,0)
(3082,7873,0)
(6921,1945,0)
(3332,2234,0)
(5425,2866,0)
(2645,7358,0)
(2645,4304,0)
(6825,8936,0)
(2017,3007,0)
(2217,8912,0)
(1535,2082,0)
(5672,6589,0)
(205,8566,0)
(5253,6989,0)
(3461,7073,0)
(3723,889,0)
(4555,1316,0)
(6460,2033,0)
(2292,8311,0)
(8172,7487,0)
(891,5061,0)
(5126,6869,0)
(4959,5061,0)
(3508,1695,0)
(7886,2649,0)
(125,4235,0)
(918,8566,0)
(1981,8566,0)
(4674,8492,0)
(1418,4735,0)
(3513,5718,0)
(496,8240,0)
(1249,6159,0)
(8502,9083,0)
(877,788,0)
(1032,6863,0)
(5468,3683,0)
(1774,5061,0)
(3587,1016,0)
(1335,5061,0)
(8240,496,0)
(1696,8715,0)
(8403,8566,0)
(6540,5730,0)
(8792,1937,0)
(3287,1027,0)
(3871,8566,0)
(4014,4937,0)
(1447,8722,0)
(8831,165,0)
(6670,3148,0)
(8138,5061,0)
(8874,5574,0)
(7644,7425,0)
(4634,4111,0)
(2584,2703,0)
(1426,847,0)
(2331,5061,0)
(7515,8712,0)
(242,2304,0)
(6301,5061,0)
(1276,4066,0)
(6409,6346,0)
(1941,1630,0)
(9104,3666,0)
(5523,1165,0)
(6637,1607,0)
(6749,6858,0)
(2871,487,0)
(200,5231,0)
(3191,7583,0)
(6290,3441,0)
(1210,6960,0)
(8192,8262,0)
(8206,3329,0)
(2606,1474,0)
(4199,5061,0)
(922,6176,0)
(7868,5061,0)
(7777,8874,0)
(1904,384,0)
(2657,4541,0)
(741,5686,0)
(6926,5823,0)
(8023,6272,0)
(2245,3566,0)
(1137,3362,0)
(725,3571,0)
(3579,8358,0)
(9104,3313,0)
(8517,5090,0)
(5705,2527,0)
(2883,7931,0)
(7903,5008,0)
(5149,5671,0)
(8155,2880,0)
(2607,6651,0)
(1247,4729,0)
(8304,2599,0)
(3485,8825,0)
(97,4056,0)
(556,1412,0)
(3343,1097,0)
(377,8947,0)
(736,5958,0)
(1865,5649,0)
(6150,2388,0)
(1713,6064,0)
(6806,4681,0)
(7900,540,0)
(2848,1702,0)
(5254,952,0)
(2048,3351,0)
(8417,5997,0)
(2621,1130,0)
(2611,5061,0)
(1201,47,0)
(5077,7301,0)
(5205,3433,0)
(4921,5044,0)
(8950,5927,0)
(2982,9012,0)
(2718,1513,0)
(7700,4478,0)
(6372,6203,0)
(8216,5061,0)
(2101,7937,0)
(8044,8673,0)
(1187,906,0)
(3384,4038,0)
(9120,2612,0)
(8493,8754,0)
(2584,6340,0)
(7733,7106,0)
(8688,2687,0)
(1601,5080,0)
(4027,8650,0)
(7082,7778,0)
(243,130,0)
(4877,9094,0)
(876,1768,0)
(3687,1724,0)
(7166,1734,0)
(7426,8566,0)
(7523,8855,0)
(7715,6755,0)
(466,4707,0)
(3420,1030,0)
(4103,1365,0)
(5844,258,0)
(6750,842,0)
(5707,2106,0)
(6468,4217,0)
(2884,5061,0)
(794,4393,0)
(3919,7121,0)
(2256,5723,0)
(7067,3614,0)
(8454,8712,0)
(8359,8024,0)
(2179,5891,0)
(941,7239,0)
(6032,8673,0)
(6225,1546,0)
(1305,1045,0)
(5897,8566,0)
(2327,6001,0)
(2856,253,0)
(4914,2713,0)
(1016,8566,0)
(3852,2662,0)
(3684,7077,0)
(7872,1696,0)
(4530,7468,0)
(7310,5944,0)
(3731,2360,0)
(3758,8673,0)
(7712,2273,0)
(4750,2560,0)
(6770,7657,0)
(8678,4973,0)
(1382,2766,0)
(6239,2976,0)
(7522,8127,0)
(4801,5061,0)
(1336,2033,0)
(7644,4811,0)
(6261,8885,0)
(4173,8566,0)
(3530,7915,0)
(4025,4422,0)
(4330,4451,0)
(4226,769,0)
(370,7958,0)
(7049,8673,0)
(8460,5619,0)
(5042,6755,0)
(3458,8144,0)
(6761,6620,0)
(1034,3078,0)
(3043,952,0)
(7725,5809,0)
(874,6741,0)
(3231,4642,0)
(2475,6459,0)
(8254,8972,0)
(447,2056,0)
(3672,2317,0)
(3584,661,0)
(438,5263,0)
(3588,4652,0)
(507,6785,0)
(8110,7539,0)
(6131,8141,0)
(5351,3838,0)
(1483,3018,0)
(7885,2966,0)
(7413,4374,0)
(787,9042,0)
(8899,8281,0)
(6181,633,0)
(1006,1706,0)
(7892,1392,0)
(2634,8566,0)
(2136,2318,0)
(434,2111,0)
(8076,8519,0)
(6301,1368,0)
(4444,2574,0)
(1017,3459,0)
(175,1997,0)
(4799,1811,0)
(3326,3731,0)
(7699,6173,0)
(7890,3244,0)
(1353,5923,0)
(5223,3643,0)
(7086,3792,0)
(5963,4648,0)
(8627,2690,0)
(2740,6982,0)
(6146,2429,0)
(7750,5937,0)
(1454,5723,0)
(3226,8193,0)
(2126,5061,0)
(3821,1373,0)
(5640,5061,0)
(3001,683,0)
(4610,8566,0)
(802,1668,0)
(8636,1083,0)
(3535,5995,0)
(5073,8462,0)
(5828,8670,0)
(5010,3715,0)
(6897,7834,0)
(6220,6396,0)
(1327,4951,0)
(1680,2840,0)
(1782,8566,0)
(3077,7470,0)
(462,2701,0)
(1114,6833,0)
(3039,5502,0)
(9104,6441,0)
(1392,6894,0)
(5922,3158,0)
(4855,5340,0)
(8056,5599,0)
(5848,773,0)
(1060,1463,0)
(7008,5901,0)
(3747,315,0)
(5904,4074,0)
(1135,7355,0)
(6341,7135,0)
(3855,1059,0)
(6651,127,0)
(1681,3148,0)
(6702,8673,0)
(952,5061,0)
(3604,1173,0)
(9120,5061,0)
(8128,6647,0)
(2108,416,0)
(4298,3134,0)
(5667,8566,0)
(7770,4469,0)
(1095,8307,0)
(4770,4481,0)
(4817,2840,0)
(3758,8566,0)
(1390,2227,0)
(1976,5492,0)
(4478,4580,0)
(2532,5061,0)
(9104,1181,0)
(8161,830,0)
(8232,6643,0)
(3166,6996,0)
(5423,6213,0)
(8744,8778,0)
(3867,1876,0)
(1973,3389,0)
(1920,4176,0)
(4174,1952,0)
(1759,4174,0)
(5160,4788,0)
(328,8791,0)
(2855,4232,0)
(1684,8135,0)
(3521,0,0)
(9060,6059,0)
(374,1789,0)
(9004,4612,0)
(7266,1629,0)
(257,5061,0)
(2523,7868,0)
(6471,5651,0)
(2577,975,0)
(5732,4424,0)
(7060,578,0)
(2604,3196,0)
(4410,3252,0)
(5501,4422,0)
(1150,3808,0)
(5105,6340,0)
(1799,7058,0)
(5148,1633,0)
(5788,3164,0)
(2134,8028,0)
(8792,657,0)
(6399,321,0)
(5777,4601,0)
(6746,1240,0)
(4647,65,0)
(2296,8356,0)
(1187,5061,0)
(9054,5061,0)
(2228,8124,0)
(3388,3202,0)
(1277,5771,0)
(6041,2842,0)
(3924,537,0)
(5289,1665,0)
(5751,1224,0)
(3521,5109,0)
(9035,3315,0)
(3304,3767,0)
(3014,8782,0)
(1309,5061,0)
(7213,1791,0)
(2555,2786,0)
(2880,8155,0)
(1317,5937,0)
(1024,2338,0)
(9122,2288,0)
(5757,8566,0)
(962,5023,0)
(4358,213,0)
(1286,122,0)
(2733,4645,0)
(7684,2939,0)
(6210,7468,0)
(1437,7043,0)
(4541,2657,0)
(5974,690,0)
(2520,8566,0)
(7644,7878,0)
(8539,6909,0)
(1150,127,0)
(3356,494,0)
(3287,8395,0)
(4297,1076,0)
(4965,3140,0)
(9121,6901,0)
(1629,5061,0)
(6304,5458,0)
(303,7488,0)
(394,4347,0)
(4141,3307,0)
(3437,8703,0)
(3437,4400,0)
(5843,7163,0)
(4776,2313,0)
(7137,177,0)
(4603,2199,0)
(6209,1419,0)
(3934,8566,0)
(838,1497,0)
(5714,4796,0)
(344,5865,0)
(4922,4190,0)
(5152,8359,0)
(1193,8566,0)
(3523,6677,0)
(5118,3528,0)
(8597,1441,0)
(6703,5814,0)
(1463,8566,0)
(1192,4291,0)
(5476,3245,0)
(7135,2811,0)
(3488,7421,0)
(755,926,0)
(124,3403,0)
(7454,394,0)
(7150,8566,0)
(4897,1466,0)
(4895,1695,0)
(4572,8566,0)
(5250,823,0)
(182,4705,0)
(859,5777,0)
(27,156,0)
(4033,3053,0)
(2159,8779,0)
(6256,1963,0)
(611,9025,0)
(7887,3572,0)
(1840,8688,0)
(5986,6701,0)
(8410,5588,0)
(8895,3502,0)
(3746,416,0)
(5882,3844,0)
(9108,8566,0)
(8778,65,0)
(6557,4712,0)
(2105,2331,0)
(5314,3248,0)
(8291,6892,0)
(520,7396,0)
(7529,4871,0)
(5646,5114,0)
(8193,1636,0)
(2850,2998,0)
(5522,4337,0)
(492,113,0)
(1443,5153,0)
(4288,8980,0)
(2028,1554,0)
(5206,2303,0)
(7793,5061,0)
(9104,1114,0)
(6264,4871,0)
(2308,4248,0)
(8182,2114,0)
(6609,424,0)
(7992,4585,0)
(6511,6529,0)
(8606,4003,0)
(4613,4454,0)
(5657,3612,0)
(215,6314,0)
(8822,1019,0)
(1506,3036,0)
(1806,9056,0)
(1295,7455,0)
(1178,3973,0)
(3529,8673,0)
(2658,4057,0)
(227,340,0)
(4441,1480,0)
(1941,1954,0)
(212,7509,0)
(6679,2132,0)
(3137,8292,0)
(4047,2537,0)
(1540,8349,0)
(829,65,0)
(4705,1066,0)
(141,1394,0)
(2557,2452,0)
(3978,1139,0)
(8299,4012,0)
(256,1866,0)
(3216,7321,0)
(8749,2870,0)
(5074,7410,0)
(8157,6727,0)
(1622,3312,0)
(555,7534,0)
(8465,8219,0)
(1287,3518,0)
(508,164,0)
(5069,4471,0)
(3184,4770,0)
(2680,6690,0)
(5894,1866,0)
(7644,3647,0)
(5000,1184,0)
(6564,488,0)
(1665,5061,0)
(8646,1695,0)
(7461,3852,0)
(5447,244,0)
(5565,8255,0)
(6965,7429,0)
(3241,2957,0)
(7121,4607,0)
(5517,8610,0)
(5083,4145,0)
(4167,1695,0)
(8144,6234,0)
(9136,1866,0)
(3544,8863,0)
(8022,2557,0)
(8057,4399,0)
(4497,6287,0)
(5410,8566,0)
(4295,4512,0)
(8648,3840,0)
(3076,9048,0)
(6826,1813,0)
(8138,8215,0)
(3153,2474,0)
(5876,1734,0)
(3018,7285,0)
(2482,8068,0)
(6298,8487,0)
(353,5781,0)
(2713,8566,0)
(805,5023,0)
(7172,3899,0)
(1613,7425,0)
(531,65,0)
(3611,7299,0)
(4544,8741,0)
(7047,8566,0)
(3722,5413,0)
(7117,4422,0)
(834,6033,0)
(4596,8673,0)
(6915,7541,0)
(4945,1673,0)
(4574,4439,0)
(4803,8566,0)
(4030,4122,0)
(4883,8941,0)
(6255,1051,0)
(746,3304,0)
(4,8566,0)
(4531,1320,0)
(2651,8566,0)
(5627,6525,0)
(7482,3996,0)
(996,7443,0)
(6503,7888,0)
(2685,3551,0)
(4729,8566,0)
(4648,6989,0)
(2106,8861,0)
(534,8345,0)
(1571,2978,0)
(2343,7702,0)
(703,8499,0)
(2791,169,0)
(6173,4427,0)
(4375,1449,0)
(5536,8566,0)
(3312,1152,0)
(1532,769,0)
(406,8566,0)
(998,8566,0)
(2645,5951,0)
(1129,897,0)
(3186,4859,0)
(6066,7740,0)
(3414,5312,0)
(4523,1359,0)
(3781,5061,0)
(6193,8566,0)
(2532,111,0)
(8023,2609,0)
(7336,5229,0)
(7776,489,0)
(2749,3267,0)
(6183,1664,0)
(7178,3566,0)
(2761,349,0)
(4373,5374,0)
(2645,2870,0)
(7451,3501,0)
(1205,5061,0)
(4559,1728,0)
(2836,8566,0)
(8644,1894,0)
(1528,5547,0)
(6145,7550,0)
(6650,5235,0)
(7779,4303,0)
(6687,6852,0)
(6959,3222,0)
(2657,8683,0)
(6841,722,0)
(1652,873,0)
(2198,8232,0)
(340,2488,0)
(308,5747,0)
(1441,8597,0)
(3281,4713,0)
(6236,6634,0)
(5270,5937,0)
(1016,6107,0)
(9091,220,0)
(8827,258,0)
(1961,3366,0)
(5073,2990,0)
(5402,4424,0)
(4393,7250,0)
(1590,251,0)
(512,4727,0)
(2126,8150,0)
(3657,4831,0)
(8770,3438,0)
(7644,6340,0)
(1605,8791,0)
(1065,7545,0)
(7899,1669,0)
(2481,105,0)
(4885,824,0)
(3437,7358,0)
(3125,6432,0)
(3112,1312,0)
(4361,8041,0)
(4871,5333,0)
(5108,3974,0)
(4351,5061,0)
(9084,5061,0)
(4972,8566,0)
(2743,8995,0)
(2354,5075,0)
(5829,5749,0)
(7956,7501,0)
(3964,3219,0)
(3207,1346,0)
(5445,7966,0)
(5609,5950,0)
(2884,8566,0)
(7186,7775,0)
(5164,6447,0)
(7089,7143,0)
(2308,7250,0)
(7660,1869,0)
(3536,8566,0)
(6183,8736,0)
(968,4771,0)
(632,297,0)
(2584,2485,0)
(4184,8426,0)
(9132,1400,0)
(6556,8498,0)
(262,8473,0)
(1572,4457,0)
(6883,8700,0)
(7382,447,0)
(5494,2611,0)
(7485,3540,0)
(5101,162,0)
(4367,3865,0)
(4450,2720,0)
(3010,5908,0)
(6766,5841,0)
(5028,8725,0)
(8311,5417,0)
(5413,12,0)
(6155,3006,0)
(4854,6880,0)
(9008,6582,0)
(8748,4085,0)
(5837,3831,0)
(7703,8358,0)
(8146,9102,0)
(7981,5870,0)
(3231,1866,0)
(1015,4190,0)
(7301,992,0)
(6405,6062,0)
(1781,1504,0)
(4530,7756,0)
(4042,300,0)
(6963,258,0)
(7933,7902,0)
(8240,8566,0)
(866,3147,0)
(4250,70,0)
(5765,702,0)
(7263,964,0)
(3158,5922,0)
(3135,7080,0)
(7153,65,0)
(7,5061,0)
(7986,6774,0)
(425,3222,0)
(2990,5073,0)
(2584,4864,0)
(9136,5713,0)
(8660,1042,0)
(3269,8650,0)
(7851,4175,0)
(7164,3330,0)
(4620,3505,0)
(3352,312,0)
(2029,3125,0)
(7168,3256,0)
(3124,2870,0)
(5960,4660,0)
(2612,9120,0)
(3157,2594,0)
(5052,8124,0)
(7063,1420,0)
(6033,1402,0)
(7885,5061,0)
(3907,1483,0)
(1031,3932,0)
(8609,2847,0)
(3698,6809,0)
(5329,5061,0)
(1887,3354,0)
(2854,5061,0)
(4299,4595,0)
(2070,1020,0)
(4771,7248,0)
(4329,7966,0)
(60,7682,0)
(914,8542,0)
(1151,2169,0)
(8796,6808,0)
(8677,8089,0)
(533,8209,0)
(1126,7160,0)
(4165,5608,0)
(5492,2011,0)
(429,8196,0)
(3697,8485,0)
(6444,3152,0)
(2361,3301,0)
(5241,4248,0)
(7194,1437,0)
(5741,7115,0)
(2847,2164,0)
(199,2751,0)
(5380,6853,0)
(1551,2166,0)
(2562,1696,0)
(5726,1266,0)
(8020,5068,0)
(7971,4834,0)
(6988,8331,0)
(1613,8703,0)
(8544,5663,0)
(1209,1953,0)
(6394,1766,0)
(5370,8935,0)
(3195,2398,0)
(8511,5080,0)
(7305,805,0)
(7431,3508,0)
(8117,5061,0)
(6101,3893,0)
(7550,5061,0)
(2863,1167,0)
(7659,8446,0)
(9087,8566,0)
(4440,1417,0)
(2653,1325,0)
(7149,4379,0)
(5936,3544,0)
(600,8481,0)
(5074,3148,0)
(9012,2982,0)
(1537,7669,0)
(6941,291,0)
(3412,6941,0)
(3390,8566,0)
(1765,4120,0)
(2003,403,0)
(2878,8566,0)
(5282,9008,0)
(2334,980,0)
(7667,8010,0)
(6104,4629,0)
(6862,582,0)
(6004,5652,0)
(1,7518,0)
(877,340,0)
(8691,5007,0)
(9136,8703,0)
(1524,5061,0)
(5419,4219,0)
(8063,6720,0)
(1002,6253,0)
(58,177,0)
(8924,231,0)
(2453,502,0)
(8862,7439,0)
(5059,3662,0)
(9037,1679,0)
(1018,8521,0)
(1585,801,0)
(8818,5061,0)
(4349,5047,0)
(8095,8566,0)
(4339,2471,0)
(7588,8215,0)
(3755,4521,0)
(2176,5937,0)
(7210,1737,0)
(1666,4542,0)
(8713,5061,0)
(1347,8242,0)
(1504,661,0)
(5471,2724,0)
(2964,8232,0)
(6112,5145,0)
(7374,8934,0)
(6566,4864,0)
(5487,385,0)
(6592,8566,0)
(5211,7999,0)
(2808,4897,0)
(5829,7444,0)
(2315,8595,0)
(236,6889,0)
(66,1491,0)
(5551,165,0)
(4863,2472,0)
(5236,6482,0)
(6525,3407,0)
(8468,3315,0)
(327,2975,0)
(542,8883,0)
(7934,5200,0)
(1198,3531,0)
(5179,5750,0)
(1483,3907,0)
(8074,257,0)
(3092,8848,0)
(6887,5061,0)
(617,4508,0)
(842,8566,0)
(2850,2724,0)
(4394,9126,0)
(7784,4716,0)
(7579,5839,0)
(3625,62,0)
(6520,8566,0)
(6602,8566,0)
(476,2751,0)
(4519,4219,0)
(1658,927,0)
(3140,3231,0)
(958,8566,0)
(4135,8334,0)
(116,61,0)
(694,1671,0)
(1402,6033,0)
(3565,6047,0)
(7644,7358,0)
(1318,2042,0)
(5800,6876,0)
(1915,1981,0)
(7716,348,0)
(1387,5821,0)
(2645,4520,0)
(5783,7201,0)
(3886,152,0)
(2735,9053,0)
(6272,8023,0)
(5555,1356,0)
(6118,5061,0)
(4126,2922,0)
(9051,7093,0)
(5121,3522,0)
(5854,8505,0)
(2043,2278,0)
(4839,5141,0)
(2186,2843,0)
(2329,489,0)
(9115,4172,0)
(6589,540,0)
(5756,1084,0)
(4379,7342,0)
(7644,6382,0)
(4204,3617,0)
(8232,8546,0)
(8555,1697,0)
(9104,4151,0)
(5509,7304,0)
(2368,60,0)
(3892,7159,0)
(4787,2165,0)
(1615,8566,0)
(8548,1613,0)
(56,2243,0)
(3874,8590,0)
(684,5106,0)
(3899,7172,0)
(1428,2831,0)
(8810,824,0)
(2113,390,0)
(4407,8566,0)
(3404,6071,0)
(4309,3446,0)
(6258,8566,0)
(8683,4269,0)
(3374,8599,0)
(1817,1554,0)
(2968,1357,0)
(9136,2768,0)
(3350,8349,0)
(1852,9103,0)
(2208,5867,0)
(6534,8193,0)
(8974,593,0)
(4190,5061,0)
(4872,5665,0)
(1673,3085,0)
(3936,5061,0)
(2931,1114,0)
(5703,3454,0)
(7476,8181,0)
(1185,3137,0)
(6889,236,0)
(4654,6737,0)
(1470,1529,0)
(1314,3751,0)
(8134,1695,0)
(803,7083,0)
(4947,8566,0)
(3955,7644,0)
(3606,335,0)
(173,6031,0)
(1665,5937,0)
(979,8566,0)
(6167,5014,0)
(1862,4060,0)
(8115,1525,0)
(8461,17,0)
(4500,6719,0)
(6545,6386,0)
(8833,7479,0)
(4094,5231,0)
(3486,8333,0)
(5770,3770,0)
(2511,7388,0)
(5137,2472,0)
(2373,890,0)
(51,8375,0)
(1965,3867,0)
(6679,8566,0)
(7966,5854,0)
(77,5842,0)
(6620,5937,0)
(1128,2268,0)
(1716,5937,0)
(6748,8152,0)
(6367,3830,0)
(188,5090,0)
(8226,4463,0)
(2229,8758,0)
(3832,6422,0)
(3274,2332,0)
(8674,5061,0)
(6628,4422,0)
(8519,5937,0)
(7488,303,0)
(8718,3490,0)
(8245,474,0)
(8280,8024,0)
(2692,8566,0)
(1926,7087,0)
(2810,6234,0)
(1988,1330,0)
(2406,150,0)
(7366,6557,0)
(2180,6023,0)
(3894,7853,0)
(3795,8674,0)
(5978,3651,0)
(5260,4861,0)
(6765,5543,0)
(8842,8673,0)
(7373,4647,0)
(5356,4732,0)
(3437,1866,0)
(2920,2747,0)
(8676,5061,0)
(6805,8424,0)
(7158,3826,0)
(5536,5061,0)
(3067,6951,0)
(3273,5410,0)
(4125,7644,0)
(5012,1191,0)
(4155,7683,0)
(9104,1558,0)
(479,6581,0)
(3244,7890,0)
(1056,4219,0)
(5105,8980,0)
(1225,5862,0)
(7133,3089,0)
(2398,3195,0)
(4223,5655,0)
(6566,3647,0)
(2682,258,0)
(2369,7643,0)
(3232,5450,0)
(9104,1745,0)
(5973,8805,0)
(5119,5057,0)
(4439,8566,0)
(6673,5194,0)
(3356,5086,0)
(5815,702,0)
(5956,6680,0)
(5664,2836,0)
(111,3840,0)
(9026,1370,0)
(4802,7346,0)
(2090,3457,0)
(5003,8347,0)
(2564,2749,0)
(2812,8244,0)
(8831,3049,0)
(4786,1281,0)
(4573,5061,0)
(4668,8566,0)
(1570,6741,0)
(8821,1524,0)
(3090,7351,0)
(1077,6037,0)
(1611,3311,0)
(1593,3717,0)
(6523,7365,0)
(5419,7815,0)
(773,5061,0)
(7620,3510,0)
(5987,7425,0)
(8343,205,0)
(9104,3647,0)
(6247,8566,0)
(5245,8395,0)
(2692,5937,0)
(6193,5061,0)
(2190,3646,0)
(194,4955,0)
(6635,7879,0)
(6046,556,0)
(2843,1854,0)
(6194,5803,0)
(2139,2496,0)
(6623,6939,0)
(5706,8566,0)
(8004,1997,0)
(6489,1655,0)
(4925,3259,0)
(6509,1203,0)
(7602,2840,0)
(2131,8219,0)
(4000,3237,0)
(6627,5798,0)
(7993,2633,0)
(2316,8079,0)
(3102,4920,0)
(6735,8861,0)
(1898,1485,0)
(7768,7678,0)
(1607,4801,0)
(2212,4375,0)
(1889,2137,0)
(2822,5061,0)
(7196,543,0)
(856,5153,0)
(397,41,0)
(970,2141,0)
(6400,5966,0)
(5879,3063,0)
(8181,5061,0)
(5148,8703,0)
(1480,4607,0)
(1141,7889,0)
(8475,5079,0)
(7324,315,0)
(8844,5476,0)
(5048,8244,0)
(7840,6746,0)
(4463,4921,0)
(1754,1681,0)
(4525,8752,0)
(5332,2025,0)
(7611,8566,0)
(1113,264,0)
(4457,5007,0)
(3479,8802,0)
(2748,5671,0)
(930,8161,0)
(6095,8482,0)
(6960,1210,0)
(5284,6477,0)
(2450,8483,0)
(7638,4929,0)
(7540,7426,0)
(704,2962,0)
(2627,6312,0)
(5522,127,0)
(7416,456,0)
(1956,6883,0)
(4908,8852,0)
(5674,5664,0)
(421,3685,0)
(6100,5011,0)
(6301,3566,0)
(4745,1876,0)
(778,6247,0)
(4712,6557,0)
(406,5061,0)
(9102,2445,0)
(2721,4057,0)
(7168,1876,0)
(623,4921,0)
(2594,297,0)
(1180,2474,0)
(7450,1606,0)
(3271,4272,0)
(916,1152,0)
(8883,6887,0)
(3058,5070,0)
(5789,4172,0)
(6591,4985,0)
(7575,1696,0)
(6294,4294,0)
(5210,284,0)
(2584,3647,0)
(2130,3407,0)
(5323,8566,0)
(8375,5061,0)
(2789,5028,0)
(3798,952,0)
(1777,1135,0)
(7271,5075,0)
(4290,5381,0)
(5105,6382,0)
(3562,968,0)
(1224,8566,0)
(2294,8673,0)
(6775,4379,0)
(6807,4481,0)
(2623,1219,0)
(7792,3231,0)
(6706,403,0)
(8532,3187,0)
(6005,4972,0)
(2172,1035,0)
(4173,5061,0)
(8071,8566,0)
(6897,3165,0)
(5250,7534,0)
(1279,3593,0)
(5011,1855,0)
(5148,6382,0)
(3362,8566,0)
(5664,6371,0)
(7375,7347,0)
(7523,3148,0)
(4831,9027,0)
(6320,2421,0)
(5418,1152,0)
(6534,3575,0)
(4409,5727,0)
(1791,2942,0)
(1298,6940,0)
(7097,3616,0)
(7423,6432,0)
(2416,6258,0)
(8960,5937,0)
(5326,2202,0)
(6317,6633,0)
(7724,1021,0)
(2516,5823,0)
(5747,5937,0)
(6968,6986,0)
(2809,5437,0)
(7644,4864,0)
(1603,7629,0)
(6570,8566,0)
(2307,1933,0)
(1219,5061,0)
(7248,5137,0)
(7599,6093,0)
(8139,4586,0)
(3582,7201,0)
(3643,5223,0)
(4760,2890,0)
(1050,4707,0)
(4707,1695,0)
(2221,7178,0)
(6925,6065,0)
(1641,5684,0)
(6473,5617,0)
(5157,7499,0)
(7752,3207,0)
(5818,5061,0)
(8462,7388,0)
(8679,70,0)
(7593,6059,0)
(9107,1146,0)
(3905,5061,0)
(2308,6580,0)
(7909,7461,0)
(3498,7061,0)
(6340,6454,0)
(223,4400,0)
(8741,3148,0)
(2267,3612,0)
(5462,488,0)
(3770,5924,0)
(1409,6481,0)
(6615,8673,0)
(7649,8573,0)
(633,6308,0)
(6300,5635,0)
(4402,4237,0)
(5921,8970,0)
(8281,4136,0)
(7554,8833,0)
(1881,6477,0)
(5413,3722,0)
(7974,258,0)
(2925,4315,0)
(6852,527,0)
(8176,2864,0)
(707,3050,0)
(8310,3124,0)
(6056,8244,0)
(6228,5874,0)
(7081,4637,0)
(7532,3226,0)
(6450,8971,0)
(1176,7383,0)
(7952,4815,0)
(8982,1659,0)
(4701,5873,0)
(1112,3381,0)
(6865,4050,0)
(6452,1702,0)
(8544,8016,0)
(588,6867,0)
(2882,5740,0)
(8361,4770,0)
(8579,1695,0)
(6269,1386,0)
(8531,8062,0)
(7754,7604,0)
(5148,952,0)
(1106,5061,0)
(234,6846,0)
(6252,5061,0)
(2489,5285,0)
(94,7394,0)
(1492,1091,0)
(6730,1803,0)
(732,3608,0)
(6706,8566,0)
(8776,1695,0)
(4993,7206,0)
(2121,2931,0)
(4407,5333,0)
(6477,8566,0)
(2620,8240,0)
(5984,1205,0)
(1547,3673,0)
(7592,966,0)
(1417,5061,0)
(521,8540,0)
(1507,7116,0)
(2683,7252,0)
(6055,3650,0)
(2225,1243,0)
(7470,1802,0)
(7692,5061,0)
(7853,1204,0)
(8272,7508,0)
(2567,8291,0)
(2834,8566,0)
(5080,1601,0)
(3316,1757,0)
(2995,3205,0)
(5543,7917,0)
(7852,5057,0)
(6311,6180,0)
(6452,6939,0)
(6718,4299,0)
(7836,5061,0)
(833,8673,0)
(3229,8021,0)
(1854,2843,0)
(3617,516,0)
(491,2347,0)
(7215,2738,0)
(5569,8673,0)
(5033,8117,0)
(8094,8566,0)
(8918,4382,0)
(2542,5009,0)
(1760,672,0)
(258,3763,0)
(1526,9011,0)
(849,8455,0)
(2199,4603,0)
(1691,3711,0)
(6555,860,0)
(6056,8566,0)
(4235,8630,0)
(5894,6340,0)
(3306,135,0)
(912,4422,0)
(5621,2635,0)
(9055,790,0)
(1171,7191,0)
(8520,604,0)
(927,5061,0)
(2457,2485,0)
(4773,2179,0)
(688,4450,0)
(7219,7248,0)
(1768,3596,0)
(7700,7370,0)
(1471,1539,0)
(1871,8297,0)
(7629,6288,0)
(5105,4642,0)
(7433,7742,0)
(2390,1927,0)
(5105,2165,0)
(5130,8566,0)
(8516,1039,0)
(1493,594,0)
(7364,6051,0)
(101,1156,0)
(8229,4128,0)
(5726,2692,0)
(769,1532,0)
(1476,3724,0)
(4698,1830,0)
(6340,8649,0)
(5428,6441,0)
(6027,8245,0)
(8489,3724,0)
(4775,5634,0)
(3496,2505,0)
(2950,4350,0)
(1116,8772,0)
(8088,6840,0)
(155,3853,0)
(9005,5180,0)
(4653,8957,0)
(3325,431,0)
(3493,2289,0)
(1832,1369,0)
(3199,719,0)
(6294,4347,0)
(1782,5061,0)
(5488,1097,0)
(5148,5017,0)
(1945,9053,0)
(4334,3958,0)
(6417,8153,0)
(4564,2689,0)
(7344,690,0)
(1478,8961,0)
(1783,4681,0)
(192,5778,0)
(5959,7293,0)
(653,1334,0)
(1106,8281,0)
(9133,1240,0)
(7827,5962,0)
(9104,2462,0)
(3955,3124,0)
(3043,1866,0)
(2457,2870,0)
(5979,8566,0)
(6916,2810,0)
(4009,1944,0)
(4424,4953,0)
(3908,5061,0)
(4127,7747,0)
(7292,7664,0)
(3710,9066,0)
(6863,502,0)
(6788,4864,0)
(1565,5061,0)
(1828,5656,0)
(8974,3101,0)
(8850,3312,0)
(6244,2293,0)
(8192,7823,0)
(898,8673,0)
(6022,8673,0)
(4084,2787,0)
(3848,3235,0)
(2382,939,0)
(8230,351,0)
(1653,8566,0)
(3596,8542,0)
(2772,3026,0)
(4601,5777,0)
(608,7567,0)
(5169,6805,0)
(8963,5129,0)
(3650,7571,0)
(7888,6503,0)
(8542,2033,0)
(3855,2803,0)
(1842,2464,0)
(3990,8566,0)
(7405,8859,0)
(1377,454,0)
(2946,1228,0)
(9045,1047,0)
(5825,147,0)
(1133,8731,0)
(2727,4522,0)
(3888,2672,0)
(1805,4748,0)
(5048,8566,0)
(6258,4347,0)
(7089,5684,0)
(2681,7416,0)
(3291,4193,0)
(4076,8966,0)
(454,4347,0)
(1053,4663,0)
(3512,4350,0)
(2065,4012,0)
(7299,3611,0)
(7138,3499,0)
(1800,6289,0)
(5857,1469,0)
(7033,8657,0)
(4003,8606,0)
(2534,4773,0)
(2633,5061,0)
(8971,4347,0)
(9107,6482,0)
(302,2082,0)
(8342,36,0)
(1331,688,0)
(1565,6780,0)
(5105,2462,0)
(4805,6855,0)
(7705,4978,0)
(1341,3213,0)
(8209,792,0)
(5721,6247,0)
(2217,5061,0)
(8081,9079,0)
(9053,2735,0)
(4555,1152,0)
(765,5429,0)
(6903,7609,0)
(8091,8067,0)
(3705,4209,0)
(2979,7726,0)
(2847,8609,0)
(2554,8181,0)
(7147,964,0)
(1038,8509,0)
(5491,8009,0)
(1378,5061,0)
(680,1744,0)
(1333,8700,0)
(2966,364,0)
(5752,3841,0)
(1794,4534,0)
(575,8036,0)
(1864,456,0)
(8444,3148,0)
(2445,466,0)
(4274,2540,0)
(8364,127,0)
(7536,1179,0)
(8708,5698,0)
(6106,8114,0)
(6932,544,0)
(3055,4988,0)
(4968,6742,0)
(6768,1695,0)
(5497,5484,0)
(171,1695,0)
(4420,8582,0)
(6289,6184,0)
(6160,1193,0)
(9104,7962,0)
(588,7744,0)
(2525,3854,0)
(8142,1766,0)
(690,5061,0)
(1160,1855,0)
(6875,97,0)
(1829,1064,0)
(1743,9081,0)
(3897,3466,0)
(6984,8521,0)
(7345,4663,0)
(7644,838,0)
(2833,4109,0)
(7995,8054,0)
(4230,5805,0)
(6604,1547,0)
(7461,658,0)
(3904,4610,0)
(8232,6894,0)
(3172,5061,0)
(3897,5567,0)
(8806,3148,0)
(7895,357,0)
(8825,8566,0)
(5234,1349,0)
(5711,5205,0)
(7293,5959,0)
(1499,7951,0)
(187,6623,0)
(3083,8071,0)
(943,262,0)
(2469,294,0)
(3407,5061,0)
(2601,5061,0)
(160,3413,0)
(3147,5061,0)
(2807,1702,0)
(3065,486,0)
(8559,4474,0)
(7625,1280,0)
(5136,3037,0)
(6728,5756,0)
(7073,8945,0)
(4517,2152,0)
(4563,4900,0)
(5417,4521,0)
(7846,6730,0)
(5231,7874,0)
(1104,1694,0)
(2022,1529,0)
(2870,5749,0)
(5223,1082,0)
(1304,4918,0)
(7509,4542,0)
(7736,7357,0)
(897,8117,0)
(76,9134,0)
(4546,3148,0)
(4998,3240,0)
(6108,1763,0)
(5105,1200,0)
(544,2737,0)
(2240,3299,0)
(4568,1140,0)
(3728,1695,0)
(3503,716,0)
(2645,6276,0)
(5640,8566,0)
(5233,2653,0)
(4536,205,0)
(104,8353,0)
(7991,8813,0)
(5502,3039,0)
(656,5361,0)
(2909,8760,0)
(3781,8200,0)
(3400,137,0)
(2444,5752,0)
(9146,4842,0)
(7505,1618,0)
(3608,732,0)
(4351,8566,0)
(2485,8777,0)
(9102,3148,0)
(8184,6056,0)
(3173,6595,0)
(4797,632,0)
(4714,8566,0)
(3938,4959,0)
(2944,6186,0)
(239,3432,0)
(3134,1272,0)
(8688,1822,0)
(2338,862,0)
(5735,2869,0)
(1669,5329,0)
(3594,5774,0)
(6927,3896,0)
(7804,536,0)
(3717,902,0)
(6675,5061,0)
(2041,967,0)
(5511,127,0)
(2232,837,0)
(8581,2905,0)
(6566,2768,0)
(8771,8566,0)
(7551,4573,0)
(7805,987,0)
(7651,3085,0)
(2468,3815,0)
(244,4470,0)
(8794,8147,0)
(60,2227,0)
(91,4402,0)
(6204,3230,0)
(1358,1485,0)
(8871,8673,0)
(4929,1010,0)
(8030,4858,0)
(3041,7934,0)
(812,2383,0)
(1185,5061,0)
(8955,6748,0)
(5360,5741,0)
(1312,6275,0)
(8435,2957,0)
(8,3211,0)
(3602,8673,0)
(4974,704,0)
(7953,2974,0)
(3108,4903,0)
(5446,6957,0)
(6392,7482,0)
(5601,5757,0)
(3884,6275,0)
(7894,7174,0)
(5318,2614,0)
(2822,3431,0)
(2320,644,0)
(4761,940,0)
(6626,4541,0)
(2767,338,0)
(5455,7557,0)
(6212,4589,0)
(3775,8999,0)
(8496,2969,0)
(3303,8741,0)
(1205,2117,0)
(4584,8861,0)
(300,4042,0)
(2425,3482,0)
(8760,6346,0)
(138,3729,0)
(5519,8383,0)
(1522,1982,0)
(8249,3109,0)
(3492,5235,0)
(4608,8731,0)
(8316,8788,0)
(4211,5922,0)
(6694,8566,0)
(6829,7056,0)
(6071,2304,0)
(3168,4136,0)
(7815,5419,0)
(3006,2687,0)
(6671,3150,0)
(3457,2090,0)
(4114,5061,0)
(8706,4798,0)
(5157,5061,0)
(3921,8566,0)
(6647,8128,0)
(1229,4370,0)
(1444,8673,0)
(159,6285,0)
(990,8382,0)
(6926,8140,0)
(4703,4745,0)
(7163,4921,0)
(6880,6959,0)
(4660,5960,0)
(5683,2504,0)
(8875,2344,0)
(8168,8791,0)
(4507,1078,0)
(289,860,0)
(122,2687,0)
(5867,3049,0)
(4667,2847,0)
(8423,5061,0)
(8939,7448,0)
(7887,7464,0)
(183,5782,0)
(449,8895,0)
(507,1244,0)
(1211,2420,0)
(2640,5145,0)
(6490,7441,0)
(7775,8566,0)
(616,258,0)
(5938,7525,0)
(7161,6308,0)
(502,2453,0)
(2753,5868,0)
(1833,6129,0)
(1110,8083,0)
(6362,1071,0)
(1702,6855,0)
(1386,959,0)
(1326,4331,0)
(6745,8566,0)
(7847,5420,0)
(8772,906,0)
(8244,4422,0)
(7236,2467,0)
(3165,65,0)
(8778,5891,0)
(7514,4672,0)
(4634,7686,0)
(1623,8335,0)
(8207,4962,0)
(3043,2496,0)
(9033,2062,0)
(1852,5945,0)
(2536,500,0)
(3783,5204,0)
(6314,8566,0)
(6357,7441,0)
(9066,7709,0)
(4233,65,0)
(5603,2814,0)
(4623,488,0)
(3491,6768,0)
(2341,5189,0)
(8940,7120,0)
(8563,7734,0)
(2841,7723,0)
(5640,6653,0)
(4684,2207,0)
(5113,2170,0)
(8006,4981,0)
(1563,6287,0)
(2898,303,0)
(5291,7472,0)
(2584,8966,0)
(7744,588,0)
(6503,7077,0)
(5148,3647,0)
(1843,7406,0)
(2268,1128,0)
(9104,5398,0)
(5089,4402,0)
(2057,5061,0)
(7779,3078,0)
(4509,6047,0)
(7056,8566,0)
(7577,3986,0)
(2849,8673,0)
(3094,6011,0)
(2584,4642,0)
(7592,8566,0)
(1558,5420,0)
(5924,3770,0)
(3398,773,0)
(2530,5061,0)
(2145,1407,0)
(7199,4956,0)
(2242,1693,0)
(1145,5974,0)
(2446,156,0)
(7196,6248,0)
(270,7185,0)
(7849,7425,0)
(3730,6215,0)
(2521,8554,0)
(2643,7380,0)
(4249,852,0)
(9136,4400,0)
(5158,6067,0)
(5292,107,0)
(3353,6582,0)
(8170,6234,0)
(3547,6754,0)
(1991,5604,0)
(2645,8121,0)
(4301,5252,0)
(6646,9075,0)
(868,6759,0)
(8625,1673,0)
(7427,5514,0)
(5337,4733,0)
(6067,7153,0)
(1403,403,0)
(2864,7975,0)
(1631,4740,0)
(8233,4656,0)
(7571,3650,0)
(6922,1010,0)
(3033,8566,0)
(8573,8745,0)
(8083,1110,0)
(674,6543,0)
(547,4365,0)
(7167,6106,0)
(4854,4347,0)
(2288,975,0)
(8872,2570,0)
(7398,4233,0)
(5789,8989,0)
(7433,1982,0)
(799,3909,0)
(2811,7135,0)
(1613,6340,0)
(6648,7380,0)
(5148,2768,0)
(7366,7347,0)
(7282,5869,0)
(8122,8673,0)
(6874,6422,0)
(4874,6939,0)
(3124,2165,0)
(8393,2343,0)
(1375,6724,0)
(946,2308,0)
(661,1504,0)
(1610,317,0)
(5573,8673,0)
(1474,2606,0)
(5624,5061,0)
(205,5061,0)
(9111,1058,0)
(3732,5609,0)
(124,130,0)
(1282,8566,0)
(1623,5937,0)
(3860,2214,0)
(7723,3231,0)
(4732,1944,0)
(5049,144,0)
(1723,8138,0)
(1149,4672,0)
(2285,7093,0)
(8000,3299,0)
(5533,1181,0)
(6423,8123,0)
(4060,5617,0)
(994,8021,0)
(3249,8566,0)
(434,5061,0)
(7686,5451,0)
(2535,1079,0)
(5729,2107,0)
(5632,2126,0)
(1617,7775,0)
(5117,103,0)
(2302,2173,0)
(4542,1666,0)
(2097,5937,0)
(5414,2841,0)
(5606,4550,0)
(3106,4851,0)
(4044,6852,0)
(6536,122,0)
(419,8417,0)
(4874,7845,0)
(1103,4111,0)
(6623,1690,0)
(7780,75,0)
(7339,7478,0)
(351,8566,0)
(352,4057,0)
(2465,8455,0)
(3955,5744,0)
(8915,6220,0)
(1300,6004,0)
(8610,6191,0)
(7057,877,0)
(380,6774,0)
(5228,4822,0)
(4880,2841,0)
(3204,3728,0)
(5624,8566,0)
(231,1816,0)
(9108,5061,0)
(3685,7416,0)
(6931,8450,0)
(5927,8566,0)
(9047,5696,0)
(8372,5505,0)
(6156,6047,0)
(5327,830,0)
(7548,6345,0)
(3725,918,0)
(1033,4697,0)
(3806,2166,0)
(5090,4606,0)
(4550,3187,0)
(8475,5061,0)
(8359,65,0)
(8662,7023,0)
(3891,8887,0)
(7542,5612,0)
(454,2841,0)
(5901,4619,0)
(6606,3533,0)
(1647,2761,0)
(5148,3600,0)
(1175,3009,0)
(9104,2496,0)
(4176,1920,0)
(3573,95,0)
(2738,5061,0)
(8345,4595,0)
(3360,1154,0)
(5005,4408,0)
(901,1683,0)
(4810,4772,0)
(6564,7807,0)
(5148,1275,0)
(5781,8327,0)
(2969,5061,0)
(6275,1312,0)
(7290,8826,0)
(2815,6265,0)
(7917,4663,0)
(1906,5375,0)
(6669,2464,0)
(6129,33,0)
(7504,5378,0)
(2869,3696,0)
(2902,6206,0)
(1628,4201,0)
(3933,1187,0)
(2978,8241,0)
(1795,1956,0)
(8916,228,0)
(4159,982,0)
(4427,6173,0)
(6792,2949,0)
(1880,7878,0)
(8426,4184,0)
(5946,3583,0)
(1012,3443,0)
(2082,302,0)
(8374,1653,0)
(4237,8244,0)
(8996,6992,0)
(4835,4562,0)
(2591,2711,0)
(4918,801,0)
(4879,3729,0)
(687,7095,0)
(1646,932,0)
(4598,238,0)
(4604,5902,0)
(7918,3208,0)
(8860,4743,0)
(4342,7619,0)
(3114,4859,0)
(4581,8566,0)
(2515,3037,0)
(1299,8208,0)
(760,462,0)
(371,3148,0)
(3223,2735,0)
(974,4914,0)
(2839,6386,0)
(5334,8433,0)
(4756,1695,0)
(6507,5061,0)
(8216,7459,0)
(59,5705,0)
(3743,7455,0)
(1082,5223,0)
(6048,3050,0)
(3952,2000,0)
(6428,2227,0)
(3147,8566,0)
(291,6941,0)
(4191,4851,0)
(6343,4956,0)
(5375,1906,0)
(6255,5061,0)
(2040,1279,0)
(6721,1766,0)
(1148,7467,0)
(3236,7224,0)
(2548,8566,0)
(7720,2288,0)
(9060,2018,0)
(4102,1575,0)
(927,8566,0)
(3356,97,0)
(6232,8237,0)
(347,7081,0)
(1447,3146,0)
(5322,3692,0)
(2830,4727,0)
(4843,2081,0)
(9104,3592,0)
(2745,127,0)
(1262,1774,0)
(9060,1830,0)
(6892,3078,0)
(1242,8114,0)
(4175,6370,0)
(317,773,0)
(2957,2097,0)
(6426,5061,0)
(6690,8916,0)
(7153,258,0)
(7258,4098,0)
(8649,6340,0)
(8609,4095,0)
(4694,1030,0)
(6608,6609,0)
(9086,2352,0)
(5695,7754,0)
(5105,2496,0)
(1401,127,0)
(753,4889,0)
(1640,7523,0)
(821,5061,0)
(843,5475,0)
(7313,119,0)
(6147,1923,0)
(786,1138,0)
(5758,8752,0)
(8631,4697,0)
(6301,8579,0)
(8007,3979,0)
(8047,3970,0)
(4962,8207,0)
(4368,5343,0)
(256,2165,0)
(2651,5061,0)
(3368,8566,0)
(6109,8364,0)
(2524,3982,0)
(7099,774,0)
(1025,6571,0)
(4874,8558,0)
(8496,755,0)
(7564,65,0)
(114,2942,0)
(8525,3414,0)
(6449,5662,0)
(8924,400,0)
(2656,8863,0)
(4514,8985,0)
(3146,2466,0)
(4063,7831,0)
(3958,127,0)
(8330,8353,0)
(2226,711,0)
(5271,8360,0)
(6477,1881,0)
(8619,1927,0)
(2415,240,0)
(2134,2865,0)
(6588,3701,0)
(1201,5061,0)
(4796,6234,0)
(1528,5639,0)
(2021,4079,0)
(3285,3204,0)
(6900,5135,0)
(7511,9122,0)
(5298,1990,0)
(3738,8566,0)
(5148,4304,0)
(8769,7834,0)
(2953,2573,0)
(8323,8673,0)
(9104,356,0)
(7617,918,0)
(3636,1659,0)
(8809,2822,0)
(2837,6382,0)
(6035,1695,0)
(4783,843,0)
(7091,5704,0)
(6654,690,0)
(952,8566,0)
(7765,4918,0)
(5663,8544,0)
(1401,4471,0)
(6834,240,0)
(7597,6739,0)
(8960,2747,0)
(9119,6346,0)
(2236,8986,0)
(2966,7885,0)
(6894,1392,0)
(7190,1696,0)
(2342,1650,0)
(1193,8143,0)
(8142,4972,0)
(418,7378,0)
(3556,5511,0)
(6009,2397,0)
(2485,6501,0)
(4897,2808,0)
(3739,4434,0)
(394,8566,0)
(6955,658,0)
(3125,5061,0)
(5950,5609,0)
(8104,1058,0)
(4220,2646,0)
(3416,3304,0)
(17,8461,0)
(5220,7365,0)
(7193,5937,0)
(4152,9046,0)
(1108,8970,0)
(6462,1088,0)
(3500,4184,0)
(448,5061,0)
(4836,8566,0)
(3707,4422,0)
(6975,8385,0)
(9104,8121,0)
(6411,1658,0)
(2338,1024,0)
(4014,6180,0)
(1941,7845,0)
(672,4251,0)
(42,3600,0)
(8948,5583,0)
(9136,2496,0)
(4853,6064,0)
(2704,9104,0)
(6705,8168,0)
(737,3469,0)
(6709,5032,0)
(5490,7580,0)
(7221,2497,0)
(3637,8623,0)
(8352,3101,0)
(6622,2805,0)
(5423,1948,0)
(343,8566,0)
(4221,3552,0)
(3189,5442,0)
(6793,8446,0)
(4265,5760,0)
(3165,258,0)
(6869,1695,0)
(1789,3899,0)
(5516,3566,0)
(8446,3629,0)
(5105,7358,0)
(8124,5052,0)
(1854,8244,0)
(6674,7368,0)
(3120,1050,0)
(6852,8206,0)
(4439,5061,0)
(1370,5061,0)
(6791,1454,0)
(2825,5106,0)
(5132,8566,0)
(2096,7592,0)
(4096,4094,0)
(8463,4685,0)
(5111,1726,0)
(8449,5730,0)
(3546,5061,0)
(3910,1695,0)
(8297,8566,0)
(128,7887,0)
(6998,3154,0)
(4916,7564,0)
(446,1192,0)
(2168,1596,0)
(5949,1079,0)
(4537,8624,0)
(5065,8703,0)
(798,774,0)
(2774,8147,0)
(6743,1544,0)
(2056,9150,0)
(4219,8109,0)
(7172,127,0)
(6659,5815,0)
(4686,691,0)
(3875,10,0)
(3240,24,0)
(1143,4581,0)
(1278,3148,0)
(5164,8566,0)
(8745,8573,0)
(3280,5836,0)
(5894,2165,0)
(5897,5405,0)
(8181,8566,0)
(4411,3231,0)
(6371,1244,0)
(6944,8483,0)
(3928,1310,0)
(8579,1763,0)
(616,65,0)
(8900,4646,0)
(1721,8095,0)
(8568,6278,0)
(4306,5514,0)
(690,5974,0)
(6799,2278,0)
(1154,4385,0)
(5187,7745,0)
(6869,5940,0)
(3905,8566,0)
(4823,6740,0)
(3833,7412,0)
(8754,8493,0)
(9016,1027,0)
(6423,6488,0)
(7619,4342,0)
(4384,2302,0)
(2766,5843,0)
(1645,5061,0)
(7644,2496,0)
(3805,1983,0)
(3318,5032,0)
(239,3499,0)
(2152,6869,0)
(5484,3501,0)
(7682,60,0)
(5177,2586,0)
(1963,3042,0)
(1265,3604,0)
(3287,3397,0)
(7564,258,0)
(3220,1669,0)
(2071,8673,0)
(121,2716,0)
(8737,8566,0)
(1505,468,0)
(5148,4864,0)
(5114,1524,0)
(7418,7634,0)
(5148,681,0)
(5849,4774,0)
(6375,8633,0)
(1485,3986,0)
(8519,6571,0)
(726,4716,0)
(7621,1245,0)
(4774,5061,0)
(5682,1876,0)
(2673,4705,0)
(3748,5990,0)
(3865,6594,0)
(5508,2970,0)
(4959,7164,0)
(3954,8673,0)
(5384,4747,0)
(2584,4400,0)
(1639,50,0)
(8979,3146,0)
(4175,4955,0)
(8801,5237,0)
(3222,6959,0)
(5344,8630,0)
(1950,164,0)
(8837,4685,0)
(3187,4550,0)
(6938,5655,0)
(6706,4347,0)
(8089,8566,0)
(6499,8673,0)
(4833,3665,0)
(8836,8566,0)
(3955,2139,0)
(4317,2170,0)
(1025,4908,0)
(8869,2456,0)
(3139,8759,0)
(6470,7818,0)
(7031,6768,0)
(7406,1843,0)
(8225,5654,0)
(4682,5567,0)
(1876,139,0)
(3141,8566,0)
(8818,8566,0)
(811,3414,0)
(1029,873,0)
(4801,1607,0)
(1200,8566,0)
(1044,2504,0)
(4172,5789,0)
(945,1811,0)
(8826,8566,0)
(6787,6049,0)
(3979,2566,0)
(0,3521,0)
(4327,7223,0)
(6774,7307,0)
(5129,4206,0)
(3941,1479,0)
(3177,4342,0)
(3288,7518,0)
(8153,6768,0)
(1130,3231,0)
(416,5061,0)
(8713,5937,0)
(1403,8566,0)
(6007,8197,0)
(8380,8003,0)
(9152,1663,0)
(7850,1049,0)
(1182,8165,0)
(7499,3354,0)
(7094,7250,0)
(6327,5365,0)
(4854,8566,0)
(7081,6456,0)
(2752,546,0)
(9112,2526,0)
(9104,2768,0)
(5350,1139,0)
(2663,3231,0)
(5343,7106,0)
(2469,309,0)
(8053,5939,0)
(8321,2580,0)
(1385,4580,0)
(6573,2939,0)
(2586,8566,0)
(5184,1846,0)
(6804,1217,0)
(7951,1499,0)
(8030,4524,0)
(5285,6064,0)
(4847,7112,0)
(4705,65,0)
(8630,4235,0)
(1816,231,0)
(286,5010,0)
(8863,3544,0)
(4561,2462,0)
(1828,6581,0)
(3404,5061,0)
(1258,8560,0)
(6892,7250,0)
(3993,546,0)
(4135,4905,0)
(7377,7972,0)
(5452,5756,0)
(658,7461,0)
(7902,5061,0)
(2509,280,0)
(973,3696,0)
(7859,4163,0)
(2663,8566,0)
(4320,13,0)
(2897,1400,0)
(7080,4759,0)
(4800,6157,0)
(5539,8673,0)
(103,722,0)
(3310,2107,0)
(5239,8566,0)
(6843,459,0)
(4007,3936,0)
(5529,710,0)
(144,2301,0)
(993,258,0)
(7421,3488,0)
(3387,7751,0)
(7347,8217,0)
(7807,4057,0)
(7595,8144,0)
(3588,643,0)
(3526,3772,0)
(3921,5061,0)
(2410,5326,0)
(2128,39,0)
(1148,9050,0)
(8714,5544,0)
(6189,8554,0)
(7435,4382,0)
(7326,8244,0)
(5050,2691,0)
(8180,258,0)
(2180,2830,0)
(3614,7067,0)
(133,6996,0)
(8773,5272,0)
(3033,5061,0)
(5718,7058,0)
(5288,8879,0)
(7874,6270,0)
(3889,3164,0)
(8024,8359,0)
(6497,4742,0)
(5924,2821,0)
(7314,802,0)
(2530,9123,0)
(7227,3858,0)
(2929,2094,0)
(7835,6697,0)
(7868,5937,0)
(9121,421,0)
(5022,2737,0)
(7538,5706,0)
(6846,3665,0)
(272,2570,0)
(417,8423,0)
(516,6956,0)
(3323,2519,0)
(4109,1277,0)
(1131,4615,0)
(972,8376,0)
(7364,2482,0)
(1000,688,0)
(2077,4607,0)
(5105,8966,0)
(5014,456,0)
(4734,5073,0)
(8025,8149,0)
(3871,4297,0)
(8357,1852,0)
(2520,8476,0)
(3949,2124,0)
(4180,1244,0)
(7103,8175,0)
(9066,5846,0)
(6391,4836,0)
(841,7032,0)
(1391,5417,0)
(4355,9087,0)
(7081,8579,0)
(4632,1695,0)
(7976,2845,0)
(8025,4508,0)
(1549,4903,0)
(8833,5687,0)
(6117,2231,0)
(3996,7482,0)
(7211,7433,0)
(6809,3865,0)
(9104,4309,0)
(1702,2848,0)
(1281,4786,0)
(5329,8566,0)
(1225,5994,0)
(628,456,0)
(8031,8722,0)
(2928,4016,0)
(4944,6507,0)
(5474,2452,0)
(3956,6855,0)
(8413,8048,0)
(8185,5413,0)
(2836,5061,0)
(7238,2381,0)
(4905,8566,0)
(4181,3306,0)
(3250,4306,0)
(5213,5245,0)
(1775,3861,0)
(3520,2886,0)
(7426,5061,0)
(521,7234,0)
(8534,7206,0)
(6852,2127,0)
(4890,7759,0)
(260,8579,0)
(6196,7746,0)
(7666,6050,0)
(7217,635,0)
(1581,3078,0)
(6823,3291,0)
(3291,6823,0)
(1863,1189,0)
(2452,5986,0)
(8115,2397,0)
(1111,4206,0)
(3583,8566,0)
(5671,2748,0)
(7798,1038,0)
(339,152,0)
(4208,7688,0)
(4431,2000,0)
(6652,8673,0)
(5076,1753,0)
(3143,266,0)
(1097,8797,0)
(3336,5270,0)
(7128,5061,0)
(9123,3332,0)
(2321,216,0)
(4393,2028,0)
(1236,5807,0)
(6248,80,0)
(2397,8115,0)
(4969,4163,0)
(5148,4400,0)
(2019,2396,0)
(3373,6919,0)
(3261,5865,0)
(5621,8566,0)
(4757,2239,0)
(7193,8566,0)
(1257,527,0)
(8562,801,0)
(1309,3301,0)
(4089,8566,0)
(2962,1716,0)
(4271,3039,0)
(6482,2512,0)
(1708,8013,0)
(6342,7865,0)
(2104,1483,0)
(6032,8405,0)
(1223,2974,0)
(8042,5699,0)
(1066,6096,0)
(5250,1728,0)
(8426,7195,0)
(8986,1191,0)
(1429,3875,0)
(5239,951,0)
(1156,6593,0)
(2356,1246,0)
(8389,1189,0)
(7227,1131,0)
(8762,2075,0)
(6031,8673,0)
(7416,3685,0)
(3368,5061,0)
(6334,4111,0)
(6257,2908,0)
(8628,4144,0)
(4366,3551,0)
(3298,3198,0)
(5105,2768,0)
(5115,1140,0)
(256,8703,0)
(2677,6134,0)
(4623,8473,0)
(6662,5061,0)
(891,933,0)
(6188,7094,0)
(7094,3078,0)
(3762,2386,0)
(375,3932,0)
(9136,6382,0)
(7383,1176,0)
(3647,1243,0)
(37,166,0)
(3675,8566,0)
(708,5748,0)
(6245,4079,0)
(6957,127,0)
(2210,8566,0)
(593,1933,0)
(8205,3160,0)
(48,5121,0)
(5985,5061,0)
(6176,5671,0)
(1682,1546,0)
(5274,6715,0)
(807,8566,0)
(709,5610,0)
(2904,5218,0)
(2688,2650,0)
(8943,5141,0)
(1894,5061,0)
(5929,5992,0)
(7647,5063,0)
(8499,703,0)
(7812,910,0)
(3428,1125,0)
(6566,8703,0)
(4580,1873,0)
(961,1045,0)
(6281,6877,0)
(7488,7726,0)
(1105,719,0)
(8700,8313,0)
(4134,5559,0)
(1469,8473,0)
(7879,6635,0)
(3650,6055,0)
(8346,3466,0)
(53,1971,0)
(737,1974,0)
(8493,8566,0)
(8633,4900,0)
(8474,7831,0)
(5989,4645,0)
(287,3010,0)
(8208,8566,0)
(3463,8729,0)
(5403,3419,0)
(5802,7370,0)
(4392,33,0)
(6435,4057,0)
(7946,8343,0)
(6758,6877,0)
(1241,991,0)
(6577,835,0)
(6112,296,0)
(1683,337,0)
(4727,2830,0)
(2046,8680,0)
(5440,8144,0)
(8135,6164,0)
(770,3148,0)
(2935,4845,0)
(806,6366,0)
(1474,6611,0)
(2149,8193,0)
(217,8273,0)
(4225,8436,0)
(7603,2701,0)
(2583,9009,0)
(810,3245,0)
(5061,5441,0)
(7004,5362,0)
(7902,5349,0)
(2822,5937,0)
(5852,5061,0)
(4039,6214,0)
(3189,340,0)
(1583,8673,0)
(7516,5061,0)
(6000,1695,0)
(2050,4173,0)
(150,5937,0)
(8737,6553,0)
(330,3001,0)
(6435,488,0)
(7622,4427,0)
(3003,3986,0)
(772,1097,0)
(7098,5074,0)
(3738,5061,0)
(6185,5614,0)
(2793,35,0)
(1705,4193,0)
(8462,3148,0)
(8426,3481,0)
(295,6301,0)
(7864,9093,0)
(8891,3113,0)
(5599,5205,0)
(292,1982,0)
(3932,5966,0)
(4969,4337,0)
(8348,6740,0)
(1699,7048,0)
(5148,1866,0)
(3615,267,0)
(1842,1876,0)
(6250,6635,0)
(2783,4634,0)
(4981,8848,0)
(4350,5061,0)
(131,321,0)
(4572,5937,0)
(3263,3035,0)
(8383,217,0)
(1846,2252,0)
(7746,8566,0)
(6507,281,0)
(9018,9126,0)
(2866,5425,0)
(6616,127,0)
(6934,3360,0)
(7734,8563,0)
(9024,8701,0)
(2747,2632,0)
(3042,65,0)
(8949,2850,0)
(4282,8473,0)
(5614,6737,0)
(6701,8566,0)
(246,1330,0)
(4919,258,0)
(700,6768,0)
(6329,6811,0)
(8289,217,0)
(2553,7,0)
(3992,8100,0)
(5831,2711,0)
(3043,7358,0)
(1666,5937,0)
(8878,1629,0)
(622,8566,0)
(3475,5061,0)
(39,7150,0)
(2598,5072,0)
(6220,2574,0)
(5364,6966,0)
(4291,1741,0)
(6387,6932,0)
(1958,4652,0)
(1906,240,0)
(7652,8673,0)
(8019,5862,0)
(7937,5061,0)
(7158,4685,0)
(395,5126,0)
(2609,8023,0)
(1464,6481,0)
(7956,8566,0)
(2171,8793,0)
(1053,3096,0)
(7896,2131,0)
(8059,3683,0)
(6751,4350,0)
(8703,1320,0)
(7334,7213,0)
(4651,5825,0)
(4690,7294,0)
(8638,8566,0)
(5615,3006,0)
(8912,9118,0)
(5126,2195,0)
(8849,6869,0)
(3875,390,0)
(5820,2505,0)
(599,6115,0)
(8456,1982,0)
(5617,4060,0)
(1343,953,0)
(5843,7618,0)
(2645,8980,0)
(318,2761,0)
(3274,7609,0)
(4212,1706,0)
(9104,4641,0)
(8932,8035,0)
(2031,655,0)
(6999,991,0)
(5376,6118,0)
(7596,8886,0)
(5725,3427,0)
(4430,1075,0)
(7923,3189,0)
(288,3871,0)
(4919,5813,0)
(5148,2496,0)
(237,1695,0)
(1825,8143,0)
(921,1614,0)
(2176,5061,0)
(4263,2006,0)
(8857,5061,0)
(4182,7139,0)
(343,5061,0)
(3607,2538,0)
(8268,1982,0)
(4040,4111,0)
(2383,5061,0)
(3363,3835,0)
(3695,3907,0)
(3390,5061,0)
(1586,7714,0)
(202,8806,0)
(5148,4642,0)
(5908,3010,0)
(2202,1937,0)
(7796,4214,0)
(7347,7366,0)
(6204,5743,0)
(9138,8676,0)
(9136,7326,0)
(1997,3820,0)
(2306,539,0)
(959,3231,0)
(1729,4623,0)
(5492,2239,0)
(4520,1797,0)
(8032,5061,0)
(5588,3202,0)
(8684,1266,0)
(2093,4431,0)
(4590,8520,0)
(6547,5061,0)
(6265,3084,0)
(8658,713,0)
(4419,2524,0)
(4289,4712,0)
(1839,2775,0)
(4962,1139,0)
(3793,6889,0)
(2663,2835,0)
(1244,507,0)
(7335,7881,0)
(5311,8232,0)
(3413,124,0)
(2028,474,0)
(862,2338,0)
(8973,5222,0)
(2068,6321,0)
(4503,1819,0)
(4283,1695,0)
(4086,7417,0)
(5605,7450,0)
(2081,8885,0)
(6539,7949,0)
(3656,3612,0)
(574,2164,0)
(501,7421,0)
(3760,8424,0)
(5599,2570,0)
(2014,2111,0)
(1550,5912,0)
(5596,4048,0)
(218,7999,0)
(2815,7031,0)
(2434,8093,0)
(7704,3059,0)
(1770,8590,0)
(1709,197,0)
(4433,1151,0)
(4209,8566,0)
(1633,3939,0)
(586,2248,0)
(6762,7580,0)
(6740,8348,0)
(7609,3274,0)
(3742,3478,0)
(6215,3730,0)
(748,7278,0)
(3491,5793,0)
(1176,8566,0)
(5365,6327,0)
(8758,65,0)
(1100,5782,0)
(1386,63,0)
(4,2591,0)
(5697,7666,0)
(5948,8741,0)
(5473,7618,0)
(365,369,0)
(494,3356,0)
(828,1887,0)
(2643,3046,0)
(9136,952,0)
(671,65,0)
(3375,3897,0)
(5106,3279,0)
(1517,3400,0)
(1267,4038,0)
(3335,5061,0)
(1891,531,0)
(6511,398,0)
(2528,7068,0)
(3895,6121,0)
(3887,8554,0)
(6122,4803,0)
(979,5061,0)
(3208,7918,0)
(7596,6374,0)
(2777,6309,0)
(4591,2210,0)
(4987,367,0)
(1744,4361,0)
(6982,3570,0)
(4788,8926,0)
(4404,8278,0)
(4,6388,0)
(8859,5229,0)
(3249,3157,0)
(3525,3409,0)
(5696,5061,0)
(6965,1152,0)
(4720,8905,0)
(3427,1901,0)
(860,289,0)
(5458,6768,0)
(4798,6673,0)
(7410,5074,0)
(3070,3106,0)
(2656,6567,0)
(1437,3374,0)
(7501,7956,0)
(324,3335,0)
(2584,7425,0)
(2364,2634,0)
(4093,6320,0)
(5296,7836,0)
(8353,8330,0)
(6661,8673,0)
(2026,6994,0)
(5655,5061,0)
(5541,6428,0)
(1461,5571,0)
(6443,3492,0)
(7197,5106,0)
(4003,2633,0)
(2235,8566,0)
(8695,13,0)
(4055,5250,0)
(8046,2169,0)
(2506,3007,0)
(6984,4652,0)
(6345,8566,0)
(2495,7782,0)
(5747,5061,0)
(8513,5662,0)
(356,916,0)
(8745,8124,0)
(3255,2658,0)
(63,1343,0)
(6255,8566,0)
(2538,263,0)
(31,7855,0)
(5440,5510,0)
(3819,4089,0)
(1734,3154,0)
(5312,3414,0)
(2728,5061,0)
(4648,5061,0)
(5342,3744,0)
(7737,6026,0)
(3600,42,0)
(3803,713,0)
(7014,4914,0)
(1163,6474,0)
(4663,1053,0)
(8985,1783,0)
(2741,4429,0)
(6623,7845,0)
(2181,4991,0)
(50,2788,0)
(2804,2811,0)
(6282,1862,0)
(6263,9098,0)
(7877,2575,0)
(8907,3415,0)
(1159,4378,0)
(398,1219,0)
(70,3730,0)
(7786,8566,0)
(2097,8566,0)
(5088,3038,0)
(7530,1601,0)
(953,3526,0)
(3711,655,0)
(107,98,0)
(868,8244,0)
(6892,8291,0)
(5141,3899,0)
(5427,258,0)
(1905,1756,0)
(4457,5061,0)
(5376,1834,0)
(1368,6301,0)
(3553,1242,0)
(3105,5061,0)
(4933,4823,0)
(8335,1056,0)
(1362,979,0)
(6055,7346,0)
(1487,631,0)
(5367,2651,0)
(7648,7151,0)
(423,4151,0)
(7249,3996,0)
(7644,7326,0)
(4231,1189,0)
(7707,6694,0)
(6184,6289,0)
(1590,2365,0)
(5343,8566,0)
(2124,3949,0)
(4151,243,0)
(3478,5990,0)
(1314,8638,0)
(7639,5130,0)
(6326,3990,0)
(1275,3959,0)
(2912,6134,0)
(3605,7827,0)
(122,3662,0)
(2695,7750,0)
(8509,2418,0)
(3616,8566,0)
(3331,8673,0)
(7355,8244,0)
(2151,1702,0)
(8655,5063,0)
(1356,5555,0)
(5230,3457,0)
(1442,6345,0)
(151,182,0)
(363,7062,0)
(413,6016,0)
(8930,5237,0)
(5836,1327,0)
(5224,4746,0)
(987,2569,0)
(6827,8673,0)
(2307,5061,0)
(7802,7429,0)
(1568,29,0)
(5252,8989,0)
(9104,2485,0)
(1028,8473,0)
(1529,2022,0)
(3955,256,0)
(2224,8566,0)
(2633,8566,0)
(5673,9008,0)
(6201,7786,0)
(3047,7413,0)
(8311,8431,0)
(6293,5436,0)
(4541,8566,0)
(5832,7139,0)
(454,8566,0)
(7115,5608,0)
(6612,6571,0)
(3307,1224,0)
(5468,8566,0)
(2663,8244,0)
(488,5462,0)
(6184,5686,0)
(5479,8857,0)
(5148,6127,0)
(2202,65,0)
(4273,5061,0)
(7291,8566,0)
(5252,8566,0)
(8293,8913,0)
(1013,8244,0)
(2736,7510,0)
(7199,8095,0)
(3729,138,0)
(8484,7224,0)
(4821,4570,0)
(7318,6265,0)
(2153,6740,0)
(5923,8566,0)
(1079,5949,0)
(8450,6931,0)
(633,8566,0)
(6183,5756,0)
(5625,1426,0)
(1259,8566,0)
(4898,8673,0)
(3088,5942,0)
(8780,3488,0)
(4697,30,0)
(1844,7374,0)
(8090,8858,0)
(4344,3166,0)
(7232,4586,0)
(3741,7994,0)
(4308,3688,0)
(5656,1828,0)
(7044,4720,0)
(4676,1133,0)
(7403,6030,0)
(2396,2019,0)
(1599,5636,0)
(5148,3592,0)
(5966,3905,0)
(986,8566,0)
(1456,4573,0)
(5010,5061,0)
(2478,1757,0)
(1927,1981,0)
(3196,8566,0)
(5427,3552,0)
(7734,8566,0)
(3231,8703,0)
(1579,5128,0)
(186,902,0)
(712,891,0)
(4280,2339,0)
(6898,185,0)
(4661,2769,0)
(8232,7413,0)
(2107,3310,0)
(6448,6330,0)
(4326,1167,0)
(5074,1876,0)
(4938,3360,0)
(3943,7818,0)
(8195,3232,0)
(6093,3433,0)
(5053,165,0)
(6426,8566,0)
(5905,1446,0)
(300,1125,0)
(2664,6041,0)
(645,7281,0)
(7220,7447,0)
(4905,5061,0)
(2270,9018,0)
(8966,4347,0)
(8141,2770,0)
(4852,2432,0)
(4067,5361,0)
(3224,2114,0)
(7116,8566,0)
(5961,4874,0)
(1839,8333,0)
(7769,41,0)
(1692,6092,0)
(3293,6215,0)
(1773,6565,0)
(2114,8566,0)
(923,8126,0)
(691,8345,0)
(5449,8360,0)
(1782,1324,0)
(3754,8244,0)
(4553,6443,0)
(5583,2842,0)
(6463,2599,0)
(5894,4400,0)
(8499,2481,0)
(5685,2725,0)
(710,8359,0)
(3475,5846,0)
(4201,654,0)
(3560,6346,0)
(9147,6725,0)
(3139,7539,0)
(6724,8673,0)
(5655,8566,0)
(6566,1071,0)
(5853,6803,0)
(474,8245,0)
(5110,253,0)
(1834,8009,0)
(5960,8566,0)
(2978,2180,0)
(3026,8566,0)
(3808,5916,0)
(2248,65,0)
(4026,9084,0)
(8026,2076,0)
(2045,6989,0)
(6581,3103,0)
(2102,4604,0)
(7858,1862,0)
(6084,5361,0)
(4142,1695,0)
(6852,7243,0)
(3027,7054,0)
(4785,8566,0)
(8604,817,0)
(8651,6634,0)
(1307,8566,0)
(910,3823,0)
(6566,4304,0)
(6151,7911,0)
(8888,6943,0)
(2630,6024,0)
(312,3156,0)
(3156,5835,0)
(9136,2870,0)
(597,65,0)
(3827,993,0)
(6289,310,0)
(3766,4010,0)
(8970,4713,0)
(633,5061,0)
(4934,6105,0)
(1549,3536,0)
(1356,4173,0)
(6751,2786,0)
(2265,1532,0)
(6139,4004,0)
(3472,3643,0)
(4494,667,0)
(2016,6984,0)
(3208,3661,0)
(4602,5651,0)
(6221,2810,0)
(5510,8566,0)
(1679,9037,0)
(3080,8674,0)
(6566,6127,0)
(7175,3990,0)
(4643,1587,0)
(226,3359,0)
(1929,5654,0)
(6096,1066,0)
(6645,7838,0)
(1046,7501,0)
(3880,1042,0)
(5148,8735,0)
(1457,147,0)
(7644,4642,0)
(6967,5061,0)
(8914,7023,0)
(7355,1135,0)
(3437,6276,0)
(804,7467,0)
(2463,9102,0)
(6332,164,0)
(2854,4645,0)
(6609,8566,0)
(4468,5381,0)
(715,5750,0)
(7650,7545,0)
(6064,5285,0)
(2806,5436,0)
(4990,7060,0)
(7246,3361,0)
(7732,6695,0)
(5806,1886,0)
(7568,2116,0)
(4448,8539,0)
(7664,7292,0)
(34,8405,0)
(7809,5318,0)
(1984,2607,0)
(8509,1038,0)
(6647,7510,0)
(1792,7172,0)
(3443,2016,0)
(9009,2583,0)
(2901,4341,0)
(1282,5061,0)
(6418,8566,0)
(5851,3692,0)
(2705,6859,0)
(4481,4770,0)
(7018,7323,0)
(1051,1784,0)
(4969,5880,0)
(7466,8093,0)
(2579,5868,0)
(3817,352,0)
(1309,8566,0)
(2143,9113,0)
(3382,8216,0)
(8791,8168,0)
(2645,2165,0)
(4935,2245,0)
(8906,4750,0)
(2303,5452,0)
(840,2662,0)
(2202,5326,0)
(4759,8698,0)
(35,1892,0)
(5301,2000,0)
(6844,7047,0)
(3858,7227,0)
(3034,2097,0)
(2308,3201,0)
(3421,2791,0)
(3314,6672,0)
(2682,219,0)
(5148,6927,0)
(2475,1192,0)
(7183,1641,0)
(8408,4143,0)
(5614,1152,0)
(7644,1071,0)
(7540,2241,0)
(1830,4038,0)
(1656,8566,0)
(9104,4642,0)
(5793,3491,0)
(1869,3105,0)
(1285,1937,0)
(940,8566,0)
(2672,5228,0)
(1319,1949,0)
(8143,1758,0)
(1553,7082,0)
(8945,7073,0)
(6199,8409,0)
(6578,4687,0)
(2032,257,0)
(7824,4454,0)
(6963,1958,0)
(1315,8566,0)
(9108,5937,0)
(4760,2274,0)
(2158,357,0)
(9104,5750,0)
(6548,8133,0)
(1469,1028,0)
(7782,258,0)
(3733,4772,0)
(5715,6191,0)
(335,5229,0)
(729,4874,0)
(5239,5061,0)
(2829,7744,0)
(8491,8162,0)
(2836,5664,0)
(926,6698,0)
(7641,8673,0)
(9075,6646,0)
(6746,4412,0)
(3597,8352,0)
(980,5061,0)
(7300,7004,0)
(8734,3055,0)
(8822,1369,0)
(3299,4246,0)
(3417,7750,0)
(4743,5061,0)
(4811,8174,0)
(1539,8566,0)
(184,4070,0)
(6583,258,0)
(4253,8734,0)
(4948,6996,0)
(6251,2248,0)
(8049,960,0)
(658,2808,0)
(6855,8349,0)
(5699,6742,0)
(2624,1887,0)
(2471,8244,0)
(7884,4035,0)
(2239,5492,0)
(2878,5937,0)
(5877,1642,0)
(1894,8566,0)
(602,3683,0)
(6353,5061,0)
(8483,237,0)
(5810,8248,0)
(783,1737,0)
(1659,8566,0)
(6851,5410,0)
(4399,8057,0)
(2309,8566,0)
(7321,1479,0)
(5988,2277,0)
(1321,4396,0)
(6978,2520,0)
(1465,6578,0)
(2750,7609,0)
(7252,861,0)
(6689,2792,0)
(6258,7999,0)
(7534,8010,0)
(2384,7373,0)
(2433,5979,0)
(8712,8021,0)
(7094,5944,0)
(3785,5197,0)
(9112,1769,0)
(8222,6301,0)
(5130,5777,0)
(6452,8520,0)
(6231,1547,0)
(4874,1690,0)
(7368,6674,0)
(6040,2657,0)
(4779,4533,0)
(7141,8566,0)
(3248,8566,0)
(6667,7598,0)
(2645,7962,0)
(7037,1796,0)
(2455,1664,0)
(5460,9075,0)
(1490,6193,0)
(4214,8566,0)
(8539,4347,0)
(7709,6529,0)
(4924,8822,0)
(4217,8079,0)
(1655,1378,0)
(383,5744,0)
(8269,3953,0)
(7677,4641,0)
(1028,1469,0)
(6106,5061,0)
(5809,7725,0)
(4198,1059,0)
(5666,4370,0)
(9011,554,0)
(8904,1152,0)
(3402,3877,0)
(6553,621,0)
(6388,8115,0)
(7755,9092,0)
(4884,8651,0)
(6922,3738,0)
(953,6380,0)
(5048,62,0)
(5389,1766,0)
(3312,7544,0)
(3167,6561,0)
(1138,3559,0)
(3158,5241,0)
(6089,9113,0)
(5411,875,0)
(8825,5061,0)
(5034,909,0)
(8462,1876,0)
(8425,1307,0)
(1047,9045,0)
(3613,3967,0)
(8455,8566,0)
(2645,4798,0)
(2645,2511,0)
(6634,3148,0)
(6028,8485,0)
(1345,6754,0)
(2906,3366,0)
(1311,5402,0)
(4723,2886,0)
(5125,3172,0)
(6187,1683,0)
(6966,4354,0)
(980,5937,0)
(8873,8152,0)
(4720,3148,0)
(3823,3997,0)
(6618,4447,0)
(5772,6248,0)
(8696,1860,0)
(4085,4397,0)
(7573,3033,0)
(7794,4330,0)
(3172,2624,0)
(2281,8566,0)
(550,4845,0)
(1434,7937,0)
(3667,8164,0)
(2305,4786,0)
(9114,4412,0)
(2025,8566,0)
(1664,8265,0)
(3899,1789,0)
(6554,1068,0)
(8942,8302,0)
(4499,5465,0)
(6577,431,0)
(4300,456,0)
(25,5470,0)
(1524,8566,0)
(3854,3202,0)
(7767,6334,0)
(531,1891,0)
(4607,1902,0)
(6550,6112,0)
(4395,2775,0)
(5318,8694,0)
(2735,5937,0)
(7571,8566,0)
(1689,5937,0)
(6339,5829,0)
(4790,3592,0)
(3931,1911,0)
(9007,7685,0)
(5278,6331,0)
(1769,6580,0)
(1447,3551,0)
(6112,65,0)
(6845,752,0)
(3135,5061,0)
(2086,5747,0)
(7834,2705,0)
(4740,3647,0)
(5612,5029,0)
(3854,5915,0)
(4948,1876,0)
(1592,1106,0)
(5763,460,0)
(8114,1242,0)
(291,4354,0)
(3955,8706,0)
(4061,1668,0)
(5106,6752,0)
(8102,2948,0)
(6555,5061,0)
(6552,1292,0)
(1741,3231,0)
(8698,4759,0)
(8001,5536,0)
(3320,5350,0)
(3968,6330,0)
(825,1115,0)
(1120,6353,0)
(739,6832,0)
(2997,5731,0)
(1070,5628,0)
(7120,5363,0)
(5371,5180,0)
(7377,3927,0)
(8608,5430,0)
(6675,8566,0)
(6670,2388,0)
(6432,5617,0)
(4606,5937,0)
(5438,3738,0)
(4937,4286,0)
(5562,5511,0)
(6829,5767,0)
(6105,4057,0)
(41,6768,0)
(2655,8713,0)
(5945,6622,0)
(1741,8244,0)
(5593,5989,0)
(4067,80,0)
(6856,1866,0)
(1443,9042,0)
(6077,4402,0)
(7572,3937,0)
(2089,1407,0)
(7240,1354,0)
(3596,4414,0)
(9138,8673,0)
(3942,2509,0)
(5293,3535,0)
(8706,1866,0)
(2519,8089,0)
(1913,1534,0)
(8441,4747,0)
(1966,8456,0)
(3871,5937,0)
(3055,8734,0)
(5468,4347,0)
(4446,6712,0)
(2791,2077,0)
(1284,6939,0)
(9070,655,0)
(1279,8566,0)
(7277,8994,0)
(5384,8566,0)
(8764,8778,0)
(6478,8673,0)
(4896,9034,0)
(6171,7703,0)
(5731,5061,0)
(7702,2343,0)
(6811,8627,0)
(9032,1368,0)
(4922,255,0)
(4999,1076,0)
(1479,3941,0)
(3955,6566,0)
(79,2479,0)
(7081,8566,0)
(7823,7837,0)
(6462,8386,0)
(6832,3909,0)
(8911,2138,0)
(2435,1762,0)
(1067,6759,0)
(3520,6840,0)
(7592,5061,0)
(651,8252,0)
(7508,122,0)
(283,6201,0)
(4437,7888,0)
(1435,8198,0)
(5318,1902,0)
(7257,4570,0)
(8299,8566,0)
(8514,7646,0)
(256,2496,0)
(1264,7102,0)
(819,8688,0)
(5437,320,0)
(4712,5061,0)
(5021,2720,0)
(7938,4550,0)
(1342,4948,0)
(5275,3754,0)
(5316,4452,0)
(714,122,0)
(3098,597,0)
(4443,4615,0)
(2000,4431,0)
(7616,7657,0)
(3462,4697,0)
(1623,5061,0)
(3022,8566,0)
(3687,3202,0)
(314,4733,0)
(2670,8673,0)
(4227,7212,0)
(5105,8121,0)
(1855,5011,0)
(7401,1692,0)
(4095,8609,0)
(3528,5118,0)
(8438,6595,0)
(8670,3078,0)
(7613,1934,0)
(8778,258,0)
(5923,1598,0)
(1340,2588,0)
(3674,9081,0)
(5096,560,0)
(6961,62,0)
(1986,3584,0)
(5749,1830,0)
(7329,8273,0)
(1581,4612,0)
(6111,4822,0)
(5643,2464,0)
(8187,9006,0)
(3401,1068,0)
(2873,5182,0)
(966,7592,0)
(4476,7223,0)
(8481,600,0)
(5141,3445,0)
(887,1203,0)
(1254,5061,0)
(4471,1401,0)
(3990,6326,0)
(2104,2997,0)
(4451,4330,0)
(3627,5115,0)
(6223,6366,0)
(6857,5805,0)
(3470,1983,0)
(7087,6363,0)
(5266,1822,0)
(8824,2682,0)
(1449,5937,0)
(964,3784,0)
(8067,8091,0)
(4168,6602,0)
(6620,8566,0)
(5985,5442,0)
(5617,1192,0)
(67,586,0)
(3989,3061,0)
(2006,7804,0)
(50,1639,0)
(4786,1843,0)
(5998,2952,0)
(7212,1816,0)
(8536,1150,0)
(8021,8712,0)
(4749,6403,0)
(2020,4748,0)
(982,7477,0)
(5774,3893,0)
(4248,5241,0)
(2919,6567,0)
(8711,2675,0)
(5902,1959,0)
(8299,5061,0)
(8386,6462,0)
(5013,4740,0)
(9113,1217,0)
(8586,7610,0)
(2215,8673,0)
(6980,5065,0)
(6919,8566,0)
(5698,6768,0)
(6892,5944,0)
(5304,3827,0)
(7373,1590,0)
(3257,6069,0)
(4365,1814,0)
(3181,6745,0)
(8750,7193,0)
(4622,8598,0)
(5808,446,0)
(7795,2240,0)
(5371,7751,0)
(8587,7285,0)
(8333,1839,0)
(8360,2033,0)
(3610,4515,0)
(7170,65,0)
(7294,4816,0)
(6549,7619,0)
(2011,5492,0)
(2335,2020,0)
(7230,7433,0)
(1693,2242,0)
(7607,4811,0)
(1179,7536,0)
(1003,6193,0)
(721,7835,0)
(7169,1315,0)
(3724,66,0)
(6106,8566,0)
(1584,7766,0)
(7844,6690,0)
(4484,2505,0)
(9136,1071,0)
(6892,4248,0)
(351,5061,0)
(2634,5061,0)
(4267,2451,0)
(3578,1876,0)
(6768,1154,0)
(4875,7881,0)
(5442,5985,0)
(8588,2081,0)
(8100,8673,0)
(7678,5061,0)
(4195,8596,0)
(3492,6443,0)
(4452,82,0)
(88,6791,0)
(2765,1850,0)
(8558,3609,0)
(1989,5642,0)
(274,4916,0)
(8706,2165,0)
(7360,7890,0)
(7871,7368,0)
(7433,7211,0)
(1383,1185,0)
(5164,3153,0)
(4108,1571,0)
(7468,1463,0)
(2487,2940,0)
(3856,5413,0)
(5680,281,0)
(6370,4175,0)
(8332,3096,0)
(4859,5937,0)
(3407,6525,0)
(4393,4248,0)
(3730,1192,0)
(7383,2888,0)
(5415,5375,0)
(585,5061,0)
(7287,4050,0)
(1051,6255,0)
(3124,2496,0)
(8827,65,0)
(3124,8966,0)
(4124,2496,0)
(964,7147,0)
(2164,8566,0)
(6649,8605,0)
(8241,1173,0)
(145,3061,0)
(9076,4048,0)
(93,8144,0)
(4133,3840,0)
(425,7879,0)
(6201,7095,0)
(1639,681,0)
(2437,7776,0)
(5106,654,0)
(7849,4642,0)
(1201,8566,0)
(8589,8566,0)
(1724,3687,0)
(8634,7929,0)
(976,1464,0)
(7141,5061,0)
(7747,8566,0)
(9048,4302,0)
(2254,2834,0)
(1946,2276,0)
(6091,1463,0)
(8262,7437,0)
(2051,5676,0)
(2760,9083,0)
(7999,3431,0)
(8864,7451,0)
(4991,2380,0)
(8572,5076,0)
(4857,5061,0)
(2730,8673,0)
(240,1906,0)
(1067,3231,0)
(4153,7387,0)
(2111,2014,0)
(7873,8566,0)
(422,1920,0)
(5141,127,0)
(852,5061,0)
(3972,702,0)
(881,5665,0)
(2869,5735,0)
(45,592,0)
(5449,3211,0)
(3759,8850,0)
(4747,8441,0)
(6587,8217,0)
(1939,5427,0)
(7783,3022,0)
(2094,8698,0)
(4569,613,0)
(5431,8579,0)
(8197,8566,0)
(8027,2722,0)
(3437,952,0)
(6085,6206,0)
(2603,6001,0)
(5498,5916,0)
(4502,3609,0)
(8025,342,0)
(3109,8566,0)
(5589,9054,0)
(343,459,0)
(4083,8450,0)
(251,1590,0)
(3626,4042,0)
(4872,5061,0)
(7026,3059,0)
(4921,7163,0)
(1190,8032,0)
(6487,5580,0)
(3006,6155,0)
(8992,4006,0)
(405,2294,0)
(2769,5061,0)
(7016,1950,0)
(6440,8885,0)
(3196,5061,0)
(2770,8141,0)
(1803,127,0)
(718,6237,0)
(3974,8482,0)
(7134,2042,0)
(2769,8566,0)
(6889,8566,0)
(7883,4070,0)
(591,3318,0)
(6799,8566,0)
(7226,8514,0)
(2645,876,0)
(5780,8144,0)
(594,1493,0)
(6969,3416,0)
(5428,1665,0)
(8661,8673,0)
(4573,4056,0)
(4330,7794,0)
(1045,2318,0)
(3955,5894,0)
(219,1343,0)
(2068,8438,0)
(5822,4956,0)
(2889,3166,0)
(2460,3464,0)
(5730,7678,0)
(6571,1025,0)
(3457,5735,0)
(3110,6859,0)
(4634,2998,0)
(5861,2968,0)
(8345,691,0)
(3074,2434,0)
(6019,4304,0)
(468,1505,0)
(8151,9123,0)
(6321,7708,0)
(1716,8566,0)
(3645,7,0)
(5148,7326,0)
(2717,2649,0)
(6384,4803,0)
(4603,6672,0)
(1109,2518,0)
(5747,8566,0)
(4608,4558,0)
(8476,6032,0)
(8731,4608,0)
(8038,1517,0)
(6529,6511,0)
(8328,7583,0)
(5164,4144,0)
(6021,6742,0)
(6433,4714,0)
(4485,4388,0)
(1780,2685,0)
(2307,8566,0)
(6677,6228,0)
(5913,289,0)
(3124,2485,0)
(791,691,0)
(6429,237,0)
(2264,7766,0)
(3090,1843,0)
(9048,5061,0)
(5665,7666,0)
(8930,8097,0)
(7170,2722,0)
(2835,2663,0)
(5148,2199,0)
(3357,6847,0)
(6558,807,0)
(1153,8473,0)
(3262,8673,0)
(1994,3163,0)
(6324,42,0)
(4726,6130,0)
(4444,8566,0)
(8119,865,0)
(8713,2655,0)
(9104,1866,0)
(9068,2057,0)
(6446,1528,0)
(5757,7357,0)
(7535,7837,0)
(3814,2687,0)
(9124,5095,0)
(1566,8566,0)
(6720,2261,0)
(311,5286,0)
(6824,4815,0)
(4178,5642,0)
(1063,1568,0)
(572,6062,0)
(5731,8566,0)
(2530,5937,0)
(1365,3588,0)
(778,8673,0)
(9031,1563,0)
(862,4950,0)
(1031,8652,0)
(4985,3709,0)
(7946,3925,0)
(5430,36,0)
(583,7431,0)
(813,8673,0)
(1281,8307,0)
(2630,4714,0)
(1081,1044,0)
(5712,8514,0)
(461,3963,0)
(6479,5624,0)
(1477,255,0)
(3727,8460,0)
(7237,5951,0)
(7775,7186,0)
(7689,8807,0)
(8590,8566,0)
(8156,6233,0)
(7751,5371,0)
(4107,8095,0)
(2645,4642,0)
(683,1772,0)
(9118,4973,0)
(463,3927,0)
(8998,1546,0)
(6566,6340,0)
(8426,8003,0)
(4828,8970,0)
(8929,5419,0)
(6983,2864,0)
(5718,3513,0)
(1949,1847,0)
(349,456,0)
(6663,2948,0)
(5768,5442,0)
(5502,801,0)
(9053,1945,0)
(8863,2656,0)
(8501,3293,0)
(8792,4207,0)
(5400,3830,0)
(4650,1152,0)
(6755,8566,0)
(4866,1842,0)
(6110,8356,0)
(5070,2494,0)
(5952,3202,0)
(7165,2531,0)
(895,5197,0)
(2898,7448,0)
(655,8286,0)
(1514,600,0)
(3008,3037,0)
(5548,264,0)
(4695,1876,0)
(774,8566,0)
(4647,6278,0)
(7580,8566,0)
(6015,6694,0)
(3437,7425,0)
(6967,6045,0)
(3840,111,0)
(5203,1308,0)
(2457,7962,0)
(213,4092,0)
(897,3459,0)
(3497,8832,0)
(889,4111,0)
(5709,8079,0)
(1289,8102,0)
(8224,413,0)
(1078,6001,0)
(1941,1039,0)
(6725,9147,0)
(6708,6281,0)
(150,5061,0)
(6445,8278,0)
(1099,8475,0)
(6016,413,0)
(496,8956,0)
(486,9113,0)
(941,6627,0)
(3471,5378,0)
(3875,8725,0)
(7668,7061,0)
(1417,8566,0)
(8093,7291,0)
(5527,5061,0)
(5510,5061,0)
(4822,5061,0)
(8334,4135,0)
(420,3090,0)
(1859,6118,0)
(1560,8827,0)
(1219,8566,0)
(7095,6736,0)
(3736,8785,0)
(1824,7472,0)
(3516,7845,0)
(7459,8216,0)
(5547,5061,0)
(4992,1152,0)
(3567,3039,0)
(4453,8296,0)
(4304,3806,0)
(4529,234,0)
(4439,8137,0)
(6890,7112,0)
(523,7425,0)
(3550,4365,0)
(1125,300,0)
(5989,1308,0)
(1557,6799,0)
(5065,7962,0)
(5434,5916,0)
(2436,2240,0)
(6488,4891,0)
(7976,5061,0)
(6127,8566,0)
(3197,6225,0)
(824,5061,0)
(4148,4527,0)
(4733,688,0)
(8690,5118,0)
(1241,8566,0)
(7251,980,0)
(5052,7228,0)
(9104,6340,0)
(8975,1982,0)
(1767,4742,0)
(9096,8566,0)
(1788,3911,0)
(6369,755,0)
(1400,4071,0)
(8927,6220,0)
(8700,6883,0)
(3642,8035,0)
(371,2392,0)
(2479,79,0)
(568,5217,0)
(2056,447,0)
(8203,8252,0)
(5281,942,0)
(8806,1829,0)
(2471,7999,0)
(5572,2014,0)
(8145,6647,0)
(6510,5937,0)
(785,6701,0)
(5217,474,0)
(4360,4607,0)
(7838,7756,0)
(4572,5061,0)
(1959,5902,0)
(3830,5937,0)
(4733,4196,0)
(1815,6613,0)
(2447,8858,0)
(596,6173,0)
(7125,3616,0)
(1441,2137,0)
(7999,2471,0)
(4528,238,0)
(4571,8922,0)
(7419,6931,0)
(4210,8994,0)
(8972,8254,0)
(2158,8296,0)
(2165,3148,0)
(4429,1757,0)
(6396,6220,0)
(3578,3148,0)
(4578,5853,0)
(8798,6444,0)
(7248,3509,0)
(5826,2485,0)
(5463,7999,0)
(9104,1071,0)
(5407,1415,0)
(879,2760,0)
(3457,1281,0)
(1907,1695,0)
(2544,401,0)
(5123,3244,0)
(7428,8986,0)
(2726,7143,0)
(7598,137,0)
(5744,1227,0)
(1242,1904,0)
(8868,1563,0)
(4579,1716,0)
(2290,4925,0)
(1527,1614,0)
(2077,2791,0)
(7327,294,0)
(482,8673,0)
(7048,5061,0)
(2954,4395,0)
(8196,429,0)
(940,4761,0)
(5574,8874,0)
(7455,1461,0)
(8658,4599,0)
(1536,1702,0)
(4681,1783,0)
(526,7518,0)
(2392,3213,0)
(7931,2883,0)
(3256,7168,0)
(5618,2997,0)
(392,1338,0)
(3740,5605,0)
(268,8563,0)
(5627,9061,0)
(3823,910,0)
(2981,6356,0)
(8429,1676,0)
(3983,4003,0)
(5863,3301,0)
(4413,710,0)
(8378,2206,0)
(8876,7228,0)
(843,8858,0)
(4660,1072,0)
(5248,7583,0)
(1953,4252,0)
(7681,448,0)
(8505,5854,0)
(7092,6396,0)
(5916,3445,0)
(82,4452,0)
(5141,243,0)
(8731,1133,0)
(6854,3277,0)
(6586,5767,0)
(4209,2847,0)
(2728,222,0)
(1102,1051,0)
(9084,4026,0)
(8761,8422,0)
(2693,2268,0)
(4169,2467,0)
(3559,7213,0)
(5414,3787,0)
(8254,7223,0)
(6096,49,0)
(5103,8445,0)
(3570,5838,0)
(4269,8683,0)
(1819,8566,0)
(857,5061,0)
(2302,965,0)
(993,3827,0)
(3977,8782,0)
(8327,4713,0)
(4,6759,0)
(4808,3640,0)
(7644,5951,0)
(6402,5958,0)
(3875,8936,0)
(4400,258,0)
(5922,7280,0)
(9010,2090,0)
(1663,5137,0)
(7223,4327,0)
(368,2360,0)
(1096,7458,0)
(297,2594,0)
(6169,6127,0)
(5148,6340,0)
(2139,4400,0)
(2806,3146,0)
(2592,3480,0)
(3124,1866,0)
(6162,6920,0)
(92,5061,0)
(5889,6636,0)
(824,181,0)
(7482,6392,0)
(316,2984,0)
(4781,3165,0)
(6180,4014,0)
(4144,1425,0)
(880,4187,0)
(2308,4612,0)
(5159,4114,0)
(4268,7688,0)
(4412,6669,0)
(6861,5627,0)
(4469,2157,0)
(707,5061,0)
(2786,8257,0)
(6835,7031,0)
(8786,2566,0)
(3137,1185,0)
(5417,8311,0)
(352,488,0)
(3414,5061,0)
(1575,8566,0)
(3349,7015,0)
(1455,5391,0)
(6623,2834,0)
(4733,8177,0)
(9081,1743,0)
(1808,8790,0)
(8530,2655,0)
(1740,4653,0)
(4971,1803,0)
(7747,5061,0)
(6492,5995,0)
(1632,8546,0)
(9084,8566,0)
(5880,4969,0)
(3701,5061,0)
(5935,3855,0)
(4475,7243,0)
(3927,7377,0)
(5107,185,0)
(2069,2830,0)
(190,4080,0)
(2072,4057,0)
(8177,4733,0)
(2274,2803,0)
(722,103,0)
(6062,6405,0)
(529,1380,0)
(8015,3661,0)
(4905,4135,0)
(5102,5329,0)
(8688,647,0)
(7458,2792,0)
(870,6745,0)
(3586,6223,0)
(6,495,0)
(119,494,0)
(6956,516,0)
(3687,5458,0)
(7144,5847,0)
(1531,138,0)
(3822,3967,0)
(7389,9049,0)
(8537,8413,0)
(7110,8012,0)
(6725,5378,0)
(2960,3536,0)
(689,8673,0)
(2937,1741,0)
(3250,3498,0)
(543,7196,0)
(7107,6706,0)
(3213,5363,0)
(4172,576,0)
(900,5757,0)
(4738,7643,0)
(1168,543,0)
(8806,1876,0)
(1132,2530,0)
(8495,3520,0)
(6331,6768,0)
(3830,5061,0)
(489,7776,0)
(5704,7416,0)
(3211,5449,0)
(234,4529,0)
(3631,1091,0)
(5199,2374,0)
(1101,4175,0)
(445,5967,0)
(5675,2113,0)
(817,5456,0)
(8952,6422,0)
(6410,266,0)
(3444,9113,0)
(1370,3646,0)
(2116,3893,0)
(5390,3484,0)
(5575,3125,0)
(5219,1947,0)
(6850,1565,0)
(894,1321,0)
(8890,2188,0)
(8186,5429,0)
(2865,2134,0)
(5217,4431,0)
(5838,3570,0)
(6343,6621,0)
(5066,5408,0)
(3140,8244,0)
(3140,4965,0)
(7228,8566,0)
(2645,5017,0)
(9038,1705,0)
(8462,5073,0)
(8002,4739,0)
(3923,4738,0)
(3248,5061,0)
(8144,5780,0)
(8721,1321,0)
(4973,5844,0)
(7519,3485,0)
(4906,4869,0)
(1181,655,0)
(1044,1562,0)
(7176,6803,0)
(9059,7047,0)
(3213,2392,0)
(6904,4375,0)
(5602,4526,0)
(1615,5061,0)
(4174,2191,0)
(3216,127,0)
(3237,5061,0)
(9134,6004,0)
(1952,8700,0)
(5183,1765,0)
(276,993,0)
(1957,5588,0)
(7354,3934,0)
(3031,2104,0)
(6892,6580,0)
(3185,5061,0)
(5999,4684,0)
(7264,7872,0)
(8737,5061,0)
(2546,6440,0)
(8476,2520,0)
(6777,5061,0)
(1692,2689,0)
(5148,5574,0)
(4089,5061,0)
(2187,641,0)
(1581,4248,0)
(4092,213,0)
(2323,2949,0)
(3457,717,0)
(2927,2816,0)
(1470,556,0)
(2700,8673,0)
(8520,788,0)
(8449,2512,0)
(4720,1876,0)
(7634,7964,0)
(7278,5061,0)
(2407,1747,0)
(7973,2633,0)
(8161,930,0)
(147,1457,0)
(8281,1106,0)
(1669,7899,0)
(8593,4402,0)
(5116,3329,0)
(5730,8449,0)
(5547,8566,0)
(8582,258,0)
(8905,834,0)
(6296,3006,0)
(7674,1336,0)
(2249,1150,0)
(165,8244,0)
(1058,578,0)
(8614,6509,0)
(3988,7862,0)
(703,2814,0)
(8508,2557,0)
(6939,5012,0)
(5757,5061,0)
(2765,3625,0)
(1080,8566,0)
(853,8869,0)
(5194,6673,0)
(4186,7193,0)
(2684,8818,0)
(6287,1563,0)
(8205,3389,0)
(2081,5870,0)
(6839,2727,0)
(6051,5061,0)
(2969,8566,0)
(3203,8549,0)
(5131,7199,0)
(5683,1562,0)
(259,5820,0)
(7541,4201,0)
(7393,1695,0)
(1513,6528,0)
(6919,3235,0)
(7206,3202,0)
(8396,2132,0)
(2633,4003,0)
(638,2117,0)
(4018,8589,0)
(2125,6564,0)
(1533,8638,0)
(8427,8566,0)
(4812,5480,0)
(3128,1198,0)
(2584,6127,0)
(7308,4804,0)
(3099,8375,0)
(1180,4522,0)
(8045,3536,0)
(3293,5429,0)
(5378,1695,0)
(6537,5337,0)
(4857,8566,0)
(3053,2122,0)
(1449,4375,0)
(8932,349,0)
(4904,3670,0)
(795,8338,0)
(2931,7889,0)
(5785,1902,0)
(8960,8566,0)
(5549,6651,0)
(8089,5061,0)
(4292,2823,0)
(2844,7087,0)
(8296,8758,0)
(9142,1989,0)
(2686,6513,0)
(4963,7888,0)
(6219,8275,0)
(6892,3201,0)
(4230,3307,0)
(1118,7578,0)
(1601,2569,0)
(5458,1165,0)
(5310,4302,0)
(8100,8566,0)
(1272,7151,0)
(5649,585,0)
(4607,1480,0)
(6564,809,0)
(896,7884,0)
(2312,8286,0)
(6359,4889,0)
(6942,1694,0)
(6390,1374,0)
(8882,1960,0)
(2569,987,0)
(6133,1835,0)
(5681,6285,0)
(7995,8566,0)
(1255,5877,0)
(6518,2630,0)
(2266,182,0)
(1923,5061,0)
(8599,3374,0)
(2713,4914,0)
(8807,7689,0)
(8228,4823,0)
(877,5567,0)
(502,6863,0)
(29,2816,0)
(3484,5061,0)
(6689,3186,0)
(890,2373,0)
(4893,2331,0)
(4319,127,0)
(2467,4169,0)
(1446,986,0)
(5299,2454,0)
(7583,1993,0)
(3930,5061,0)
(5724,7113,0)
(5167,8149,0)
(4120,8331,0)
(7350,2785,0)
(8138,8566,0)
(4087,167,0)
(3051,4991,0)
(6233,5820,0)
(3716,8408,0)
(6846,234,0)
(5441,5061,0)
(908,653,0)
(8165,6876,0)
(4695,3148,0)
(7829,5591,0)
(3437,4304,0)
(8566,1695,0)
(8730,4440,0)
(6951,8473,0)
(5226,6889,0)
(3987,3095,0)
(3338,6048,0)
(86,7343,0)
(5374,7810,0)
(3683,5468,0)
(4106,4128,0)
(5269,5725,0)
(4231,7873,0)
(2205,6566,0)
(493,8886,0)
(2958,8967,0)
(6979,7448,0)
(357,2158,0)
(2261,5937,0)
(2233,312,0)
(7757,4370,0)
(2634,6697,0)
(1922,6447,0)
(3171,1636,0)
(6208,8879,0)
(1562,1766,0)
(7484,7186,0)
(2462,8438,0)
(206,2058,0)
(3062,2281,0)
(5148,8980,0)
(7711,4145,0)
(2018,9060,0)
(4867,349,0)
(632,5475,0)
(7346,984,0)
(12,5413,0)
(775,507,0)
(81,5480,0)
(603,537,0)
(3811,3866,0)
(6520,1069,0)
(2972,1470,0)
(3243,3441,0)
(43,8299,0)
(4451,3202,0)
(1798,2649,0)
(8735,8566,0)
(2243,1960,0)
(8712,8454,0)
(1350,4527,0)
(3165,6897,0)
(6510,803,0)
(4371,7873,0)
(3873,7227,0)
(317,2711,0)
(2911,3561,0)
(8284,1948,0)
(7799,1130,0)
(5115,8566,0)
(4562,82,0)
(3217,9034,0)
(1493,3070,0)
(788,8520,0)
(1613,2165,0)
(6868,5799,0)
(3007,655,0)
(8428,5582,0)
(2959,5564,0)
(8509,8673,0)
(7878,1148,0)
(4182,1512,0)
(7603,7032,0)
(786,4589,0)
(7797,5724,0)
(8893,4925,0)
(4860,4118,0)
(2965,8673,0)
(3688,65,0)
(7525,1982,0)
(1411,7708,0)
(2769,4973,0)
(7078,5107,0)
(8594,6489,0)
(5076,4827,0)
(5847,7144,0)
(3890,7574,0)
(4645,5989,0)
(5555,5044,0)
(8079,4217,0)
(854,7105,0)
(5932,596,0)
(4130,7137,0)
(349,8035,0)
(9104,6382,0)
(5148,6940,0)
(0,2179,0)
(7378,2033,0)
(228,8916,0)
(7885,8566,0)
(885,5696,0)
(376,1375,0)
(4146,2810,0)
(2843,7084,0)
(6570,5061,0)
(3955,6456,0)
(5525,14,0)
(8287,8313,0)
(6323,5312,0)
(5591,7829,0)
(5349,7902,0)
(6397,760,0)
(2842,6041,0)
(5023,805,0)
(4027,4751,0)
(9102,7388,0)
(340,3189,0)
(7140,4396,0)
(1329,7398,0)
(5714,8956,0)
(1930,352,0)
(4684,5999,0)
(2499,446,0)
(5619,188,0)
(5385,1179,0)
(1613,1866,0)
(447,2611,0)
(1473,4122,0)
(7208,1695,0)
(3436,6162,0)
(3712,1636,0)
(3752,3944,0)
(6415,7089,0)
(1291,7479,0)
(4845,5061,0)
(7510,2736,0)
(2735,5061,0)
(4297,5008,0)
(7916,7480,0)
(1636,4198,0)
(3200,8958,0)
(44,7250,0)
(6640,3249,0)
(325,1499,0)
(2258,310,0)
(432,470,0)
(2921,6374,0)
(1029,1811,0)
(5894,4642,0)
(3930,12,0)
(2166,4306,0)
(7828,616,0)
(5148,154,0)
(5366,3201,0)
(8033,2466,0)
(2244,7629,0)
(2447,2020,0)
(3057,33,0)
(5148,838,0)
(5276,5180,0)
(2058,8945,0)
(3194,2534,0)
(153,7127,0)
(3299,2240,0)
(3786,9075,0)
(5065,6340,0)
(2457,2511,0)
(1939,2016,0)
(1140,4589,0)
(4996,406,0)
(3093,1881,0)
(2951,6799,0)
(3949,3497,0)
(4949,5743,0)
(1756,8566,0)
(8399,344,0)
(4575,8673,0)
(7119,5061,0)
(4162,6418,0)
(8097,5235,0)
(8072,6026,0)
(5405,8560,0)
(8698,2094,0)
(2178,6768,0)
(7292,2429,0)
(5208,8934,0)
(2399,6497,0)
(1208,1686,0)
(411,3232,0)
(2462,339,0)
(3226,3575,0)
(6470,8192,0)
(2362,4422,0)
(5148,7425,0)
(2278,2043,0)
(8765,264,0)
(2115,6118,0)
(622,5937,0)
(1776,233,0)
(8196,7881,0)
(3772,118,0)
(3908,5937,0)
(681,5977,0)
(2755,5204,0)
(3768,342,0)
(2191,4174,0)
(2404,7746,0)
(2669,1732,0)
(8405,6032,0)
(7450,5605,0)
(6173,6326,0)
(5060,94,0)
(5382,8673,0)
(4647,7373,0)
(2817,1210,0)
(8909,1645,0)
(3457,6454,0)
(2929,8858,0)
(4128,4050,0)
(6592,5061,0)
(4187,880,0)
(7340,8196,0)
(3482,5701,0)
(256,6127,0)
(5546,8410,0)
(3078,7779,0)
(1542,2721,0)
(2822,8566,0)
(6440,3502,0)
(2820,674,0)
(5065,1866,0)
(2986,2579,0)
(5354,2866,0)
(8162,3222,0)
(2625,3629,0)
(7151,7648,0)
(906,8772,0)
(1948,5423,0)
(3561,4527,0)
(7550,8566,0)
(4819,1373,0)
(3211,3202,0)
(4804,7308,0)
(7628,1607,0)
(2742,7740,0)
(3333,1945,0)
(3212,8206,0)
(6740,4823,0)
(6496,4199,0)
(519,1271,0)
(522,1335,0)
(2491,3647,0)
(6314,5061,0)
(8057,1695,0)
(8705,4143,0)
(1656,2709,0)
(7203,1690,0)
(8098,8382,0)
(1037,8114,0)
(7708,6321,0)
(7039,3253,0)
(8194,6309,0)
(5015,4382,0)
(1702,2451,0)
(4303,5235,0)
(806,3202,0)
(7994,8673,0)
(3630,3880,0)
(4116,5029,0)
(4959,5937,0)
(2099,4512,0)
(7548,8673,0)
(7580,5937,0)
(4622,8447,0)
(1822,8688,0)
(8877,6437,0)
(2076,3351,0)
(1906,65,0)
(8118,8598,0)
(7509,212,0)
(7179,7884,0)
(1609,2307,0)
(4352,5701,0)
(1302,2526,0)
(5612,5829,0)
(7372,4233,0)
(7928,8638,0)
(5620,5349,0)
(5582,1567,0)
(3307,4230,0)
(7836,5296,0)
(784,3944,0)
(5799,8566,0)
(2491,2033,0)
(8847,8595,0)
(3818,626,0)
(3713,7508,0)
(6482,3201,0)
(403,2787,0)
(7523,1876,0)
(352,8473,0)
(532,3575,0)
(5987,5915,0)
(5537,3908,0)
(5532,6880,0)
(3703,8939,0)
(4054,2681,0)
(3639,8237,0)
(1750,2340,0)
(3365,5061,0)
(2007,1525,0)
(2609,3715,0)
(3109,3179,0)
(1810,4397,0)
(4616,8454,0)
(4386,4861,0)
(222,2728,0)
(6741,5061,0)
(7444,5829,0)
(2464,6669,0)
(5991,1314,0)
(6623,8558,0)
(1675,8444,0)
(8904,2465,0)
(3982,7507,0)
(9101,1695,0)
(6926,4447,0)
(8706,4400,0)
(2004,2381,0)
(4114,8506,0)
(468,9011,0)
(2044,5992,0)
(6352,4623,0)
(644,951,0)
(3228,356,0)
(8739,2884,0)
(487,1035,0)
(7955,302,0)
(4455,1681,0)
(998,7682,0)
(9098,5061,0)
(6452,1954,0)
(8297,2975,0)
(2355,8097,0)
(8729,42,0)
(1914,8673,0)
(5361,4067,0)
(2414,4963,0)
(2127,6852,0)
(3922,4361,0)
(6631,5351,0)
(4931,8753,0)
(5873,8409,0)
(5146,7231,0)
(2814,703,0)
(3885,438,0)
(2457,6340,0)
(1336,350,0)
(1071,3231,0)
(622,8234,0)
(4953,4424,0)
(3675,8053,0)
(2301,144,0)
(6837,8948,0)
(7915,6768,0)
(3751,8599,0)
(6732,7387,0)
(5435,2109,0)
(6776,8460,0)
(2812,1420,0)
(6566,8994,0)
(1574,6821,0)
(2072,262,0)
(6533,321,0)
(5571,1461,0)
(7301,8566,0)
(6881,6635,0)
(4306,3095,0)
(3530,6265,0)
(4140,4075,0)
(5060,4804,0)
(256,4304,0)
(7729,594,0)
(2540,1192,0)
(2128,3279,0)
(7074,5314,0)
(800,6287,0)
(6197,5137,0)
(735,3922,0)
(7060,4990,0)
(8092,1894,0)
(2137,8566,0)
(7356,618,0)
(6754,5944,0)
(7151,1272,0)
(5418,8440,0)
(8514,1917,0)
(4715,1575,0)
(4046,1919,0)
(7426,7540,0)
(5173,8554,0)
(256,952,0)
(518,8566,0)
(7317,5800,0)
(1943,5561,0)
(6061,5017,0)
(6334,1497,0)
(7743,1949,0)
(5975,8673,0)
(2870,7186,0)
(3122,1176,0)
(5237,5235,0)
(6380,953,0)
(551,2126,0)
(4751,4027,0)
(8348,2267,0)
(3433,6093,0)
(5294,6935,0)
(9153,8673,0)
(3441,5061,0)
(891,8566,0)
(30,4697,0)
(5585,4595,0)
(5490,1392,0)
(5063,4347,0)
(8968,4919,0)
(191,1335,0)
(4793,8688,0)
(127,364,0)
(801,4918,0)
(7536,5061,0)
(4840,3701,0)
(9136,7425,0)
(7550,5724,0)
(6697,7835,0)
(1552,5937,0)
(8158,3241,0)
(4456,8889,0)
(4732,8566,0)
(7477,7951,0)
(4039,7610,0)
(1621,7366,0)
(6809,8459,0)
(3624,6710,0)
(7880,4237,0)
(6308,633,0)
(5461,8673,0)
(1357,5231,0)
(6942,5814,0)
(4609,8575,0)
(3837,4250,0)
(5570,2273,0)
(8738,567,0)
(4572,909,0)
(8704,130,0)
(8303,6592,0)
(3124,7358,0)
(1689,1085,0)
(9110,5223,0)
(8726,8715,0)
(8687,5780,0)
(4228,5403,0)
(7355,3231,0)
(8437,5743,0)
(7464,7887,0)
(7278,6823,0)
(3561,8566,0)
(3914,1702,0)
(4275,5449,0)
(4785,5061,0)
(2322,2466,0)
(6218,5061,0)
(4645,2854,0)
(3124,4304,0)
(5148,1695,0)
(3953,393,0)
(127,8554,0)
(3028,7046,0)
(2857,2466,0)
(7064,7882,0)
(6214,4039,0)
(19,8911,0)
(4644,6393,0)
(5180,127,0)
(401,2544,0)
(6748,3625,0)
(5343,5937,0)
(1786,4414,0)
(3193,7861,0)
(6720,8063,0)
(790,3441,0)
(4874,1039,0)
(2370,5491,0)
(3777,1724,0)
(2615,421,0)
(9139,3250,0)
(750,6676,0)
(3483,5728,0)
(4679,8154,0)
(8147,8271,0)
(9061,5627,0)
(2195,9006,0)
(6441,1823,0)
(7438,635,0)
(227,3466,0)
(3955,2645,0)
(5638,5509,0)
(9105,1220,0)
(8208,4347,0)
(8611,5061,0)
(8166,2543,0)
(8798,7664,0)
(8582,4420,0)
(820,8706,0)
(9011,468,0)
(1748,6808,0)
(1092,1924,0)
(6373,3835,0)
(777,1310,0)
(5630,8523,0)
(2896,7081,0)
(2234,1139,0)
(2440,8549,0)
(3601,7882,0)
(4982,5962,0)
(8784,8466,0)
(4092,7083,0)
(6675,1815,0)
(1696,7872,0)
(1138,4144,0)
(3830,6367,0)
(6452,7845,0)
(5492,1976,0)
(7273,8673,0)
(6247,5061,0)
(8370,8293,0)
(5835,2481,0)
(8336,6580,0)
(2139,2485,0)
(4864,6788,0)
(7174,6909,0)
(5319,7879,0)
(5742,8049,0)
(7414,7374,0)
(1191,7110,0)
(4825,578,0)
(1596,7458,0)
(7979,2513,0)
(4306,456,0)
(4222,7868,0)
(691,5061,0)
(6882,2694,0)
(2430,4066,0)
(3413,3080,0)
(5503,7646,0)
(73,2768,0)
(3165,4781,0)
(7822,2461,0)
(4908,1025,0)
(8241,2978,0)
(4892,1814,0)
(7610,6768,0)
(5872,3102,0)
(2645,6340,0)
(1735,952,0)
(6052,2217,0)
(4517,8564,0)
(8623,2883,0)
(8706,7425,0)
(8742,8396,0)
(8663,368,0)
(255,200,0)
(2470,7836,0)
(4664,5061,0)
(3023,6247,0)
(3166,3707,0)
(6631,2331,0)
(3641,7662,0)
(1744,4840,0)
(7758,4468,0)
(5393,5468,0)
(2148,7779,0)
(1841,1245,0)
(1160,8999,0)
(8309,3129,0)
(5222,3578,0)
(2549,9054,0)
(8826,4347,0)
(7637,155,0)
(6669,4412,0)
(6018,5383,0)
(8148,717,0)
(9088,7154,0)
(3561,5061,0)
(8062,6715,0)
(2526,1302,0)
(5128,4292,0)
(5105,6826,0)
(757,1695,0)
(7705,4460,0)
(8373,6380,0)
(8541,3844,0)
(1910,8286,0)
(4975,1534,0)
(5148,2485,0)
(2344,3235,0)
(7045,6928,0)
(6008,1283,0)
(2445,9102,0)
(8724,79,0)
(3940,1259,0)
(8404,6343,0)
(2872,1702,0)
(6253,8566,0)
(6020,2942,0)
(7690,5011,0)
(6625,8662,0)
(7782,65,0)
(6992,1695,0)
(8589,3953,0)
(8100,8755,0)
(7958,3728,0)
(4045,1135,0)
(3204,3285,0)
(6139,7894,0)
(8527,6047,0)
(1927,8619,0)
(8492,2690,0)
(2111,434,0)
(8049,8595,0)
(3621,5574,0)
(8202,7129,0)
(1272,4882,0)
(7721,3683,0)
(6229,4098,0)
(9078,6741,0)
(6681,6727,0)
(559,8956,0)
(3010,8003,0)
(5862,1225,0)
(3236,1785,0)
(103,5117,0)
(8242,5272,0)
(4516,1695,0)
(4143,8408,0)
(6365,1468,0)
(6481,6026,0)
(8391,6670,0)
(87,2432,0)
(3432,5061,0)
(3410,6553,0)
(4677,4048,0)
(2447,5411,0)
(6403,8317,0)
(8985,162,0)
(497,7497,0)
(4202,8862,0)
(7244,4891,0)
(1997,8004,0)
(3683,7721,0)
(6246,1604,0)
(4899,1575,0)
(3218,842,0)
(4106,7277,0)
(2667,154,0)
(960,5061,0)
(5147,8673,0)
(6292,7326,0)
(7494,1114,0)
(1153,7685,0)
(3558,2347,0)
(8643,4286,0)
(7184,8673,0)
(7582,221,0)
(2139,7358,0)
(8989,5252,0)
(2365,1590,0)
(6447,8901,0)
(9056,2837,0)
(1313,8493,0)
(5832,45,0)
(986,5061,0)
(1343,219,0)
(7231,5937,0)
(3024,6418,0)
(3097,3469,0)
(364,127,0)
(7868,2523,0)
(3239,6868,0)
(8098,3499,0)
(6886,4245,0)
(5122,6023,0)
(1228,299,0)
(167,3320,0)
(3141,11,0)
(5754,7283,0)
(1067,6388,0)
(250,1085,0)
(1613,7358,0)
(3336,3381,0)
(6230,5253,0)
(2274,4760,0)
(7325,4407,0)
(2708,543,0)
(3411,8579,0)
(5097,8111,0)
(3351,258,0)
(8710,4246,0)
(7612,1851,0)
(2771,5985,0)
(697,1088,0)
(1886,2940,0)
(2812,8566,0)
(4740,3202,0)
(7181,5340,0)
(4471,5885,0)
(5105,1694,0)
(2252,1646,0)
(8273,8566,0)
(85,5699,0)
(4336,3420,0)
(4806,2637,0)
(6334,2998,0)
(273,6564,0)
(3124,6340,0)
(2869,3494,0)
(4035,2923,0)
(1796,6215,0)
(2551,6564,0)
(1177,1466,0)
(5105,952,0)
(5891,8778,0)
(4730,8440,0)
(2224,5061,0)
(7499,5157,0)
(6242,8162,0)
(537,3924,0)
(4961,8673,0)
(4095,5061,0)
(3172,8566,0)
(3887,6182,0)
(2129,3254,0)
(635,5061,0)
(7547,1755,0)
(4318,8466,0)
(3498,3250,0)
(3820,1997,0)
(5475,7022,0)
(113,5852,0)
(5959,1005,0)
(5965,5391,0)
(709,7476,0)
(1253,3163,0)
(196,4192,0)
(7429,5061,0)
(5006,2072,0)
(7581,5825,0)
(2552,7823,0)
(1054,8673,0)
(5493,17,0)
(3688,258,0)
(8198,5476,0)
(4882,6214,0)
(7441,6376,0)
(740,8760,0)
(6991,3105,0)
(8395,5245,0)
(4533,8275,0)
(6426,1228,0)
(5521,3666,0)
(3528,65,0)
(4602,2337,0)
(895,8566,0)
(5971,6556,0)
(5572,1608,0)
(1491,3590,0)
(839,959,0)
(24,3240,0)
(8387,7075,0)
(4302,8426,0)
(7682,998,0)
(2590,4619,0)
(3950,5937,0)
(7178,5559,0)
(1370,8566,0)
(6437,8877,0)
(6173,596,0)
(6754,8883,0)
(3335,8004,0)
(7644,4304,0)
(7420,4135,0)
(4527,4148,0)
(7563,6836,0)
(490,2530,0)
(971,5957,0)
(7173,9122,0)
(3344,1013,0)
(1256,6900,0)
(2021,2424,0)
(4539,7663,0)
(5806,8454,0)
(5748,3926,0)
(8452,1512,0)
(609,2573,0)
(1310,3551,0)
(2840,4817,0)
(5198,3237,0)
(3979,258,0)
(560,3899,0)
(528,7252,0)
(6712,4446,0)
(1204,5061,0)
(150,167,0)
(1085,1689,0)
(5417,8826,0)
(6144,4298,0)
(256,1071,0)
(3751,1314,0)
(6551,805,0)
(901,4066,0)
(1049,5431,0)
(3583,7049,0)
(7409,4530,0)
(1278,3638,0)
(2859,7537,0)
(1971,5717,0)
(2706,2697,0)
(6971,7678,0)
(4,3231,0)
(2012,3688,0)
(5875,8450,0)
(3055,6056,0)
(1156,6986,0)
(5030,8673,0)
(2431,4570,0)
(6265,284,0)
(1814,4365,0)
(5467,4733,0)
(7129,5135,0)
(3857,1259,0)
(1933,593,0)
(6253,6434,0)
(6528,6045,0)
(7023,4134,0)
(6120,3513,0)
(1947,2653,0)
(7782,4315,0)
(4637,7081,0)
(5650,9098,0)
(1932,7307,0)
(74,2122,0)
(1220,9105,0)
(2908,8827,0)
(8887,9146,0)
(1702,3914,0)
(2770,5937,0)
(3441,790,0)
(309,8566,0)
(457,3475,0)
(7666,5665,0)
(3318,258,0)
(7989,8916,0)
(8916,6690,0)
(8032,1914,0)
(403,8673,0)
(5450,3232,0)
(7980,6593,0)
(3238,6693,0)
(6241,7115,0)
(429,3108,0)
(7686,889,0)
(6670,1876,0)
(8164,3480,0)
(5925,4972,0)
(33,6001,0)
(3064,6474,0)
(8439,5397,0)
(8972,8566,0)
(1387,6533,0)
(1452,5684,0)
(1516,3982,0)
(2711,317,0)
(6566,4400,0)
(8245,5654,0)
(3605,4594,0)
(805,8003,0)
(9001,8657,0)
(2161,7241,0)
(7644,4400,0)
(8650,4919,0)
(567,8566,0)
(540,6589,0)
(1702,8697,0)
(4415,4372,0)
(4031,8611,0)
(6034,8193,0)
(1725,2713,0)
(3371,5047,0)
(2504,9103,0)
(5999,1676,0)
(554,9011,0)
(7094,4923,0)
(9042,7154,0)
(7475,1225,0)
(7614,8514,0)
(6514,2176,0)
(3792,9103,0)
(4488,2262,0)
(3908,8293,0)
(4008,1301,0)
(3274,8579,0)
(4589,786,0)
(296,6112,0)
(5148,2462,0)
(436,4,0)
(8799,5492,0)
(899,3294,0)
(7464,6308,0)
(5263,65,0)
(1909,7034,0)
(6497,2399,0)
(6672,8566,0)
(3070,1493,0)
(2952,716,0)
(4315,7782,0)
(1718,6173,0)
(1508,8673,0)
(2098,3245,0)
(4600,1641,0)
(8861,2106,0)
(4739,127,0)
(4820,8673,0)
(8053,3675,0)
(612,808,0)
(1359,4550,0)
(5009,8813,0)
(2348,8673,0)
(7750,3038,0)
(4285,4473,0)
(7200,9009,0)
(8706,2511,0)
(2360,5877,0)
(7289,2792,0)
(8595,8847,0)
(1662,812,0)
(7925,8649,0)
(3485,4641,0)
(6590,2737,0)
(5595,2831,0)
(98,8995,0)
(4556,3626,0)
(9034,2281,0)
(5868,2579,0)
(4973,9118,0)
(7368,1152,0)
(5105,1866,0)
(4505,4778,0)
(8623,8566,0)
(7965,2681,0)
(5909,2021,0)
(4581,2479,0)
(597,258,0)
(7966,8566,0)
(7031,2815,0)
(5574,4341,0)
(155,4080,0)
(3288,5362,0)
(2279,539,0)
(2164,2847,0)
(6127,3707,0)
(2139,7962,0)
(149,8265,0)
(9104,7824,0)
(2692,5061,0)
(2183,7004,0)
(7644,6363,0)
(506,6946,0)
(3901,7658,0)
(3191,857,0)
(3448,5172,0)
(2162,5682,0)
(8808,5088,0)
(6880,5532,0)
(8183,3205,0)
(8923,7034,0)
(4728,4245,0)
(1941,1292,0)
(5579,8309,0)
(5413,8185,0)
(5677,3897,0)
(5092,434,0)
(3918,5706,0)
(988,7031,0)
(1634,2694,0)
(8469,7829,0)
(5405,5897,0)
(1216,8101,0)
(3007,8895,0)
(6529,7709,0)
(7553,8352,0)
(8965,4668,0)
(9104,6616,0)
(5862,8019,0)
(7439,2512,0)
(4364,1695,0)
(3669,7391,0)
(2271,1785,0)
(90,5912,0)
(4849,1282,0)
(9023,1283,0)
(1976,2207,0)
(6432,3125,0)
(7270,8673,0)
(4477,2307,0)
(2109,1671,0)
(6474,3064,0)
(5358,8152,0)
(8111,6524,0)
(5608,7115,0)
(2042,6307,0)
(6315,5378,0)
(1715,1066,0)
(4704,3415,0)
(9085,8941,0)
(2751,5061,0)
(9056,5061,0)
(1596,4326,0)
(6643,6368,0)
(2160,4016,0)
(8962,4400,0)
(3124,952,0)
(7949,5061,0)
(4363,7514,0)
(1144,783,0)
(5308,7918,0)
(4016,2160,0)
(5229,8859,0)
(1135,5778,0)
(1464,5204,0)
(716,5061,0)
(6218,5937,0)
(9104,4400,0)
(2689,5061,0)
(130,124,0)
(6563,7106,0)
(2481,5835,0)
(152,8566,0)
(2691,6405,0)
(1711,1745,0)
(4873,3172,0)
(2679,4737,0)
(6630,1491,0)
(6739,5937,0)
(7269,1411,0)
(2983,770,0)
(6398,3548,0)
(2645,2890,0)
(7170,258,0)
(6165,3272,0)
(4030,4733,0)
(4207,2605,0)
(8066,8417,0)
(3630,1580,0)
(1619,8962,0)
(5351,6631,0)
(1804,1839,0)
(1135,2655,0)
(3460,3412,0)
(8382,8098,0)
(2184,2635,0)
(5148,8121,0)
(1320,8703,0)
(9007,3937,0)
(5338,6008,0)
(8242,5061,0)
(7337,8094,0)
(2746,8912,0)
(3847,3134,0)
(966,4309,0)
(8133,6548,0)
(619,8566,0)
(905,3712,0)
(6602,5061,0)
(6280,1282,0)
(5756,5452,0)
(7585,6909,0)
(3270,3176,0)
(254,6977,0)
(731,4877,0)
(3840,7323,0)
(844,6511,0)
(5766,1077,0)
(4397,4085,0)
(6636,3148,0)
(5105,838,0)
(8984,3614,0)
(4891,6488,0)
(2599,6463,0)
(1361,4788,0)
(1050,8566,0)
(6512,4837,0)
(6940,8566,0)
(8546,995,0)
(6158,3064,0)
(8596,4195,0)
(4200,5806,0)
(1860,3568,0)
(3124,7326,0)
(1338,790,0)
(4783,7394,0)
(1816,7212,0)
(5943,8715,0)
(1912,647,0)
(4689,342,0)
(257,487,0)
(7333,7899,0)
(3514,3973,0)
(3201,9077,0)
(9079,6869,0)
(1567,5582,0)
(8234,622,0)
(1186,7935,0)
(6632,7105,0)
(9155,4958,0)
(2638,2178,0)
(6425,8806,0)
(391,3719,0)
(2073,4594,0)
(8706,2485,0)
(635,8358,0)
(7705,5715,0)
(5469,7888,0)
(4871,6943,0)
(7056,6829,0)
(96,8272,0)
(6710,6963,0)
(6987,6831,0)
(5148,7358,0)
(8084,8382,0)
(5607,3474,0)
(5854,7966,0)
(7648,5111,0)
(6289,5877,0)
(3124,4400,0)
(2619,7976,0)
(4482,8673,0)
(4112,5323,0)
(4907,3005,0)
(4390,9012,0)
(3056,3491,0)
(728,5528,0)
(2154,7572,0)
(3437,2485,0)
(6325,82,0)
(8881,6833,0)
(8365,8628,0)
(6112,258,0)
(3169,7424,0)
(2851,2584,0)
(4903,3108,0)
(5277,9053,0)
(1752,6470,0)
(1923,2968,0)
(8232,5430,0)
(3018,1483,0)
(3048,5448,0)
(5193,4351,0)
(7254,7853,0)
(8707,431,0)
(8375,3099,0)
(9104,4230,0)
(4683,1069,0)
(953,1343,0)
(8515,5995,0)
(4414,3596,0)
(5035,5375,0)
(1679,8566,0)
(5939,7756,0)
(7159,4169,0)
(6038,1200,0)
(6805,7450,0)
(2281,5061,0)
(3488,8566,0)
(3925,7899,0)
(4910,2132,0)
(3162,8077,0)
(5823,6926,0)
(4521,5417,0)
(8147,5061,0)
(4213,5536,0)
(8464,8481,0)
(8272,8566,0)
(8385,8456,0)
(6126,6207,0)
(4650,2453,0)
(1030,3420,0)
(6911,7786,0)
(3042,258,0)
(8102,7890,0)
(1670,6331,0)
(278,2339,0)
(4056,4573,0)
(3653,6064,0)
(8416,5527,0)
(5238,3313,0)
(8231,6602,0)
(643,3610,0)
(5671,8879,0)
(5682,3148,0)
(2016,3443,0)
(3241,2424,0)
(6561,5061,0)
(7962,65,0)
(6386,516,0)
(7202,942,0)
(4068,1179,0)
(3986,7577,0)
(2059,3388,0)
(3745,7904,0)
(8596,4026,0)
(9009,5937,0)
(185,2788,0)
(6923,6869,0)
(719,5061,0)
(1733,1922,0)
(7127,595,0)
(2734,5855,0)
(675,2411,0)
(7649,6157,0)
(3174,4422,0)
(6962,5039,0)
(7108,1702,0)
(2637,6314,0)
(2387,5194,0)
(7970,7956,0)
(8777,156,0)
(9112,3459,0)
(1846,5184,0)
(6462,65,0)
(4858,8030,0)
(4325,5079,0)
(4743,8566,0)
(5148,3059,0)
(5245,7048,0)
(1254,6926,0)
(5263,6380,0)
(3368,8433,0)
(4629,1993,0)
(1790,3203,0)
(6546,161,0)
(7239,385,0)
(5503,8566,0)
(7227,1434,0)
(8831,3408,0)
(4255,5448,0)
(3408,8566,0)
(5893,3497,0)
(5396,6392,0)
(5105,4520,0)
(5259,2573,0)
(4829,656,0)
(531,258,0)
(7168,3148,0)
(6818,3137,0)
(4733,5337,0)
(3024,3055,0)
(1802,8232,0)
(4864,7378,0)
(3888,1695,0)
(2575,8566,0)
(499,5960,0)
(5740,2882,0)
(8255,5061,0)
(5162,2965,0)
(7259,460,0)
(8125,8041,0)
(4460,8851,0)
(1142,6873,0)
(166,4735,0)
(3539,5844,0)
(3647,2491,0)
(6990,5546,0)
(5409,8227,0)
(6621,1830,0)
(1212,3058,0)
(2795,7711,0)
(6431,2685,0)
(6453,3546,0)
(6056,3231,0)
(4657,7721,0)
(2084,6689,0)
(580,2456,0)
(7062,3979,0)
(3955,5065,0)
(1009,3110,0)
(1398,8606,0)
(3317,5624,0)
(4310,8149,0)
(9024,5371,0)
(4499,6763,0)
(3131,3329,0)
(7652,2407,0)
(1196,4434,0)
(1097,3009,0)
(733,3137,0)
(289,1189,0)
(6745,5107,0)
(2042,127,0)
(6887,8566,0)
(2082,3148,0)
(466,2445,0)
(2518,7358,0)
(7268,4459,0)
(5954,6597,0)
(6582,127,0)
(6422,3832,0)
(4064,6520,0)
(5375,8673,0)
(3464,1571,0)
(2336,1876,0)
(4659,7882,0)
(6937,4646,0)
(8029,752,0)
(7241,6012,0)
(4714,5061,0)
(5918,2465,0)
(2510,8417,0)
(4314,5813,0)
(8590,5061,0)
(4951,1327,0)
(435,1735,0)
(4406,732,0)
(1661,6749,0)
(135,3306,0)
(4342,8633,0)
(8889,5841,0)
(1763,2033,0)
(4534,1794,0)
(6774,5945,0)
(68,8697,0)
(666,1763,0)
(5180,5371,0)
(7392,1225,0)
(7128,2764,0)
(6680,5956,0)
(92,1501,0)
(2803,9050,0)
(6029,488,0)
(165,8831,0)
(6267,4612,0)
(6607,5130,0)
(8887,8403,0)
(773,317,0)
(3457,439,0)
(6113,8566,0)
(7569,2082,0)
(5365,5061,0)
(4197,81,0)
(6802,2309,0)
(5799,6868,0)
(3339,622,0)
(6376,7441,0)
(2652,7171,0)
(4739,4471,0)
(6658,2461,0)
(8448,8673,0)
(7867,8852,0)
(4282,3693,0)
(4042,3626,0)
(7739,4272,0)
(5699,8042,0)
(4558,8286,0)
(8051,8518,0)
(6810,4581,0)
(2645,7878,0)
(7271,5655,0)
(4442,9008,0)
(755,8496,0)
(309,2469,0)
(3911,1327,0)
(8305,8159,0)
(1048,2386,0)
(1534,5061,0)
(4562,7557,0)
(2874,1695,0)
(3593,2110,0)
(7429,6965,0)
(2526,9112,0)
(7915,3530,0)
(1638,2709,0)
(4607,2077,0)
(9104,4304,0)
(9021,9044,0)
(8686,7838,0)
(7849,952,0)
(7803,6221,0)
(9030,4279,0)
(2471,8566,0)
(79,1341,0)
(4881,4047,0)
(8628,8244,0)
(3940,5626,0)
(2297,5988,0)
(7584,8242,0)
(6935,9078,0)
(3999,6228,0)
(661,8673,0)
(834,4001,0)
(2122,3053,0)
(4156,6312,0)
(3443,671,0)
(5587,2982,0)
(9069,1567,0)
(4207,357,0)
(325,2922,0)
(8267,300,0)
(3312,1589,0)
(6337,6507,0)
(3026,5061,0)
(2482,7364,0)
(7116,5061,0)
(3782,8934,0)
(2402,5667,0)
(5189,6826,0)
(505,7846,0)
(5439,4403,0)
(2219,1278,0)
(6190,3248,0)
(4826,3867,0)
(8956,496,0)
(5137,7248,0)
(6683,3821,0)
(3210,4903,0)
(3505,4620,0)
(2260,3311,0)
(5844,4973,0)
(1430,5157,0)
(2682,8824,0)
(2989,2650,0)
(8281,8899,0)
(5365,8566,0)
(1016,5061,0)
(4956,6343,0)
(705,3548,0)
(7792,9113,0)
(643,3588,0)
(129,1494,0)
(4785,5937,0)
(4170,8948,0)
(3459,9112,0)
(3991,4899,0)
(1450,7398,0)
(613,3203,0)
(1751,3211,0)
(167,150,0)
(6048,3338,0)
(4869,4906,0)
(5986,2452,0)
(1951,5448,0)
(3399,1756,0)
(3292,495,0)
(7634,7418,0)
(8858,8090,0)
(8236,852,0)
(2767,6695,0)
(2308,3078,0)
(4348,7564,0)
(7776,1374,0)
(1637,5771,0)
(6203,3319,0)
(3725,2268,0)
(2702,8067,0)
(64,7129,0)
(8246,2748,0)
(8079,7321,0)
(9156,5807,0)
(7837,65,0)
(7747,6141,0)
(1641,6206,0)
(6989,5253,0)
(8450,8566,0)
(3899,8554,0)
(3780,1767,0)
(4447,6926,0)
(3022,7815,0)
(5556,7522,0)
(6746,65,0)
(3079,1270,0)
(2585,2729,0)
(5852,8566,0)
(7024,5747,0)
(4742,1767,0)
(3554,7865,0)
(1671,139,0)
(5135,6900,0)
(4693,424,0)
(4287,4422,0)
(8296,2158,0)
(106,8673,0)
(3510,5791,0)
(1789,127,0)
(4689,3649,0)
(1307,5061,0)
(2584,8703,0)
(8359,258,0)
(1595,1201,0)
(5401,6130,0)
(61,5061,0)
(6954,3730,0)
(4647,258,0)
(4260,2127,0)
(7083,4092,0)
(8852,4908,0)
(6081,4345,0)
(8706,952,0)
(5100,3169,0)
(6438,8937,0)
(2431,6437,0)
(7207,6182,0)
(4566,6296,0)
(1925,5844,0)
(3826,8566,0)
(2800,964,0)
(4020,7794,0)
(7450,6805,0)
(98,107,0)
(7163,5843,0)
(4282,7685,0)
(7896,2224,0)
(260,2588,0)
(7386,7138,0)
(2457,4304,0)
(756,1847,0)
(6405,2691,0)
(823,5250,0)
(78,8735,0)
(590,6434,0)
(1561,6441,0)
(2133,3508,0)
(1191,5012,0)
(3854,3985,0)
(6680,3026,0)
(1839,9117,0)
(1861,8185,0)
(3835,320,0)
(7870,5608,0)
(6580,455,0)
(793,1695,0)
(3604,6768,0)
(6895,585,0)
(3321,254,0)
(5330,2884,0)
(8338,2317,0)
(3905,5966,0)
(3378,6633,0)
(8800,3722,0)
(625,8673,0)
(1308,9076,0)
(7578,8673,0)
(3277,6768,0)
(9107,8219,0)
(8953,1029,0)
(2588,260,0)
(4581,5061,0)
(2744,1208,0)
(2388,1775,0)
(6651,2607,0)
(2846,7449,0)
(334,3499,0)
(4878,6463,0)
(5218,1362,0)
(3456,5760,0)
(2054,2841,0)
(2356,4251,0)
(2662,6869,0)
(6366,6223,0)
(2612,2938,0)
(4088,8495,0)
(4857,486,0)
(7452,393,0)
(1335,8566,0)
(225,8673,0)
(9025,9147,0)
(8852,4487,0)
(4822,8566,0)
(4233,258,0)
(2728,5937,0)
(3882,3498,0)
(1280,7625,0)
(4457,8566,0)
(7972,7377,0)
(8756,456,0)
(6017,1924,0)
(5153,8566,0)
(2624,3172,0)
(6498,6008,0)
(4467,1005,0)
(7806,3256,0)
(3203,8077,0)
(5844,65,0)
(3319,1695,0)
(5558,9149,0)
(700,1645,0)
(7957,2882,0)
(8657,9001,0)
(7278,8566,0)
(6488,6423,0)
(3294,899,0)
(9108,7212,0)
(7449,2846,0)
(7866,7416,0)
(7868,8566,0)
(2079,8988,0)
(3846,1544,0)
(8999,1160,0)
(5088,4622,0)
(5078,1128,0)
(7791,8352,0)
(8736,6183,0)
(494,119,0)
(5629,6438,0)
(3536,1549,0)
(169,2791,0)
(7908,1434,0)
(2899,8694,0)
(5459,708,0)
(229,5439,0)
(4923,7094,0)
(8017,4326,0)
(5436,2806,0)
(163,1782,0)
(2272,8401,0)
(6896,24,0)
(8455,2465,0)
(7453,930,0)
(8263,4647,0)
(6548,5614,0)
(3724,5061,0)
(5654,8245,0)
(7361,1321,0)
(4522,2727,0)
(1965,466,0)
(4429,2741,0)
(2887,127,0)
(3944,8566,0)
(4005,1071,0)
(1931,6353,0)
(8352,1600,0)
(1373,3821,0)
(4463,20,0)
(8454,5806,0)
(8367,1464,0)
(4652,6984,0)
(6381,6191,0)
(2519,8500,0)
(5843,2766,0)
(4461,7437,0)
(4244,2775,0)
(4610,8244,0)
(1613,2496,0)
(413,8673,0)
(154,1843,0)
(3133,6114,0)
(6593,1156,0)
(1462,39,0)
(5154,2766,0)
(322,5891,0)
(1496,137,0)
(8130,5440,0)
(1924,3231,0)
(5982,3840,0)
(5868,4252,0)
(3858,1315,0)
(8565,2690,0)
(3198,2845,0)
(3124,4864,0)
(3206,3535,0)
(2762,2360,0)
(6355,7764,0)
(2269,5020,0)
(2227,6428,0)
(3838,1325,0)
(8256,5105,0)
(4353,1741,0)
(8620,8417,0)
(7071,4282,0)
(2848,7028,0)
(2142,5818,0)
(1176,5061,0)
(6741,8566,0)
(4264,6030,0)
(5588,702,0)
(2417,5014,0)
(2698,7168,0)
(516,6386,0)
(5988,8653,0)
(6644,7358,0)
(5286,4347,0)
(6773,2834,0)
(7177,7571,0)
(7604,613,0)
(3435,7507,0)
(2835,1911,0)
(357,4207,0)
(4032,7185,0)
(6627,1662,0)
(2248,3483,0)
(8926,8657,0)
(1121,665,0)
(4915,769,0)
(8481,8464,0)
(9104,7326,0)
(708,5974,0)
(8159,5061,0)
(1472,1580,0)
(7610,4039,0)
(4258,1630,0)
(1107,4859,0)
(7618,5843,0)
(4856,7499,0)
(1124,8773,0)
(8570,5157,0)
(169,5061,0)
(122,7508,0)
(2892,1587,0)
(8217,7347,0)
(6893,2523,0)
(4963,5133,0)
(2426,665,0)
(4936,1180,0)
(698,5638,0)
(2067,6634,0)
(1463,5061,0)
(3272,7030,0)
(7262,126,0)
(889,7686,0)
(8964,2496,0)
(8338,795,0)
(1010,4929,0)
(6218,4858,0)
(5911,1479,0)
(3986,1485,0)
(6936,4042,0)
(1421,7874,0)
(7644,8980,0)
(8090,4269,0)
(8575,6474,0)
(7467,1148,0)
(7011,1349,0)
(3306,4181,0)
(3670,8566,0)
(3644,899,0)
(3638,1278,0)
(2662,3852,0)
(8417,2510,0)
(4347,8971,0)
(4842,9146,0)
(507,8091,0)
(8162,8566,0)
(2888,972,0)
(3559,1138,0)
(2894,5610,0)
(1482,4122,0)
(1440,1760,0)
(8743,8566,0)
(7984,5431,0)
(7512,1816,0)
(3618,516,0)
(2094,2929,0)
(1602,1776,0)
(4789,8566,0)
(7352,4372,0)
(6750,2949,0)
(3297,7304,0)
(7131,6763,0)
(8109,4219,0)
(280,2509,0)
(7024,8598,0)
(3055,4586,0)
(6543,6594,0)
(451,4533,0)
(5769,2847,0)
(1374,7776,0)
(8356,6110,0)
(2572,145,0)
(4626,6062,0)
(2441,6252,0)
(1332,1656,0)
(1198,2196,0)
(7389,8563,0)
(8701,5564,0)
(3925,7946,0)
(7430,4311,0)
(7518,1059,0)
(5241,3158,0)
(6168,2728,0)
(647,8688,0)
(9104,1413,0)
(9129,5846,0)
(1334,653,0)
(2157,4469,0)
(1753,8495,0)
(5491,3729,0)
(650,4977,0)
(4110,8673,0)
(8857,8566,0)
(2819,2682,0)
(6972,516,0)
(7959,8554,0)
(6801,8900,0)
(8420,7047,0)
(5894,952,0)
(4636,4104,0)
(4080,8566,0)
(7855,2318,0)
(2729,7324,0)
(7472,4979,0)
(8385,6739,0)
(5231,4094,0)
(221,7877,0)
(3815,9025,0)
(704,2256,0)
(8616,5061,0)
(2818,3432,0)
(6711,6754,0)
(260,5990,0)
(1573,3491,0)
(2645,7810,0)
(2158,8024,0)
(3408,8831,0)
(1962,544,0)
(3072,1876,0)
(247,4095,0)
(6434,6269,0)
(5048,3231,0)
(3072,3148,0)
(294,2469,0)
(7821,4486,0)
(4488,8523,0)
(1746,7444,0)
(4092,7250,0)
(5054,500,0)
(9104,7878,0)
(3354,1887,0)
(6032,8476,0)
(8157,4214,0)
(5286,4697,0)
(4692,2785,0)
(4606,5061,0)
(6353,8566,0)
(3611,5738,0)
(4714,2630,0)
(2530,8566,0)
(94,5060,0)
(2665,2690,0)
(1665,8566,0)
(7204,1552,0)
(7589,7775,0)
(8706,4304,0)
(6068,7080,0)
(1490,5605,0)
(4206,5129,0)
(732,5061,0)
(3137,6512,0)
(8638,5061,0)
(256,7425,0)
(3313,4462,0)
(8352,4962,0)
(4983,1480,0)
(7904,184,0)
(2112,3930,0)
(3383,2188,0)
(7047,5061,0)
(4023,7882,0)
(5329,1669,0)
(5940,5482,0)
(4333,8272,0)
(2862,2991,0)
(3359,6490,0)
(6598,8993,0)
(618,8566,0)
(3050,707,0)
(885,7088,0)
(9104,5951,0)
(5109,3521,0)
(4620,6444,0)
(3893,3245,0)
(6672,4603,0)
(2505,3496,0)
(812,1662,0)
(538,7335,0)
(1346,3207,0)
(5588,8410,0)
(8510,4930,0)
(6744,9096,0)
(4483,8436,0)
(3877,8075,0)
(20,4463,0)
(5504,2736,0)
(7507,8566,0)
(6474,8575,0)
(2252,1846,0)
(3100,3033,0)
(668,6059,0)
(8856,3238,0)
(2548,602,0)
(2180,2978,0)
(2273,5570,0)
(792,8209,0)
(6780,1565,0)
(1730,2023,0)
(8693,4950,0)
(764,8312,0)
(5531,2692,0)
(6700,4771,0)
(4761,7121,0)
(5105,5544,0)
(3139,5378,0)
(8301,1803,0)
(5466,8012,0)
(8702,169,0)
(2864,6983,0)
(7644,2768,0)
(7380,2643,0)
(9094,7574,0)
(3272,4672,0)
(9136,3647,0)
(3310,3252,0)
(5105,5951,0)
(6880,4854,0)
(2405,8395,0)
(2641,7307,0)
(3651,4931,0)
(7302,7994,0)
(7452,2763,0)
(2395,567,0)
(5877,2075,0)
(4335,4668,0)
(2841,5414,0)
(8706,8703,0)
(4338,2836,0)
(1290,8851,0)
(8232,5470,0)
(5186,2953,0)
(4601,5567,0)
(4487,2878,0)
(6191,5715,0)
(5441,2245,0)
(1030,8244,0)
(3365,5937,0)
(2878,4487,0)
(6288,1695,0)
(5216,8309,0)
(4099,6583,0)
(3534,8025,0)
(6075,3584,0)
(4082,4035,0)
(2930,7284,0)
(3372,6368,0)
(7143,7089,0)
(253,5110,0)
(5939,8053,0)
(1238,7440,0)
(8096,2845,0)
(20,5061,0)
(699,6050,0)
(3585,2056,0)
(2651,2236,0)
(4237,8566,0)
(3995,7803,0)
(7934,1497,0)
(219,2682,0)
(2990,65,0)
(8120,4737,0)
(2584,2165,0)
(975,2288,0)
(8832,1316,0)
(227,5567,0)
(5485,9084,0)
(5065,2165,0)
(6519,2929,0)
(4964,8462,0)
(459,4043,0)
(5483,6637,0)
(6635,8566,0)
(3575,8286,0)
(7678,5937,0)
(1776,1602,0)
(8918,2260,0)
(358,986,0)
(4791,3831,0)
(5701,3482,0)
(5526,5880,0)
(5401,8566,0)
(1618,7611,0)
(6202,6983,0)
(6306,9096,0)
(8560,3305,0)
(1534,2317,0)
(55,1562,0)
(3825,6524,0)
(5846,9066,0)
(2030,406,0)
(5148,1200,0)
(8177,8830,0)
(6585,1131,0)
(3693,4282,0)
(2797,2376,0)
(1808,1756,0)
(2796,3427,0)
(4745,7365,0)
(3659,184,0)
(2591,2043,0)
(251,1587,0)
(1954,4767,0)
(8752,5061,0)
(8867,4526,0)
(3689,8004,0)
(790,1338,0)
(4412,6746,0)
(5850,7292,0)
(2251,3600,0)
(238,5061,0)
(947,4546,0)
(3453,8949,0)
(5570,5260,0)
(2072,7685,0)
(233,1776,0)
(400,8924,0)
(4219,1056,0)
(6624,3147,0)
(4834,7472,0)
(4524,8030,0)
(6265,8504,0)
(742,3464,0)
(1582,1420,0)
(3124,1071,0)
(3765,6001,0)
(1280,2122,0)
(350,1336,0)
(8615,4806,0)
(1080,5061,0)
(7988,3239,0)
(3138,6725,0)
(3730,70,0)
(3175,1254,0)
(7323,8566,0)
(4526,5602,0)
(452,955,0)
(7193,5061,0)
(7513,5684,0)
(2457,2496,0)
(303,2898,0)
(598,1241,0)
(1419,7949,0)
(1310,3146,0)
(6253,5061,0)
(960,8566,0)
(7312,2820,0)
(7013,4444,0)
(7094,2028,0)
(2812,3231,0)
(7518,3288,0)
(1613,4400,0)
(4139,8252,0)
(8551,3777,0)
(80,6248,0)
(5954,5337,0)
(7395,7459,0)
(5546,6768,0)
(3002,6408,0)
(4729,576,0)
(5561,7368,0)
(8466,5061,0)
(1019,8822,0)
(6749,7424,0)
(8917,2386,0)
(5841,8889,0)
(3997,932,0)
(8840,2749,0)
(8502,5020,0)
(1996,6675,0)
(9144,2312,0)
(6148,5698,0)
(4524,2583,0)
(4871,967,0)
(6110,8244,0)
(5813,4919,0)
(5113,3390,0)
(5323,5061,0)
(7766,1584,0)
(6252,2060,0)
(7678,8566,0)
(2456,6957,0)
(5361,656,0)
(5148,2511,0)
(3231,2870,0)
(530,1356,0)
(1434,7227,0)
(5846,3475,0)
(426,8673,0)
(5505,3091,0)
(3535,3089,0)
(4663,1379,0)
(6524,415,0)
(7756,4530,0)
(5722,3985,0)
(5388,1047,0)
(2358,1375,0)
(8889,2540,0)
(4953,8773,0)
(3090,6673,0)
(4496,3949,0)
(8271,4402,0)
(509,5145,0)
(2635,5621,0)
(993,65,0)
(394,6139,0)
(4210,369,0)
(5450,7582,0)
(3160,8205,0)
(7170,5109,0)
(3169,3670,0)
(4876,8673,0)
(6985,951,0)
(109,802,0)
(1693,65,0)
(6602,8605,0)
(5584,5868,0)
(8558,1390,0)
(7069,6768,0)
(4060,1862,0)
(7119,1956,0)
(3022,5937,0)
(5745,934,0)
(3231,7425,0)
(9043,9092,0)
(616,7120,0)
(3566,5558,0)
(842,6750,0)
(8603,8144,0)
(7899,3925,0)
(1085,2561,0)
(8075,3877,0)
(838,1412,0)
(7171,2652,0)
(1847,5872,0)
(7235,8505,0)
(1360,3053,0)
(9136,2165,0)
(6697,2634,0)
(5417,1771,0)
(3468,5428,0)
(8817,1760,0)
(7324,2729,0)
(4803,5061,0)
(9092,516,0)
(8021,994,0)
(8855,7523,0)
(5928,8554,0)
(4950,5061,0)
(174,6701,0)
(801,5502,0)
(6682,7516,0)
(9036,2243,0)
(1612,8941,0)
(6748,1501,0)
(7810,5374,0)
(5600,3311,0)
(2645,7425,0)
(209,3221,0)
(6367,2513,0)
(4052,2583,0)
(2584,1071,0)
(132,4789,0)
(761,622,0)
(7876,940,0)
(1767,1539,0)
(1321,1650,0)
(1341,6082,0)
(6200,8967,0)
(1202,3675,0)
(8713,8566,0)
(1575,4899,0)
(5148,4520,0)
(5394,8673,0)
(6636,4322,0)
(7772,8674,0)
(6051,8566,0)
(3375,4767,0)
(8115,6388,0)
(2863,5937,0)
(8209,533,0)
(1978,4010,0)
(5949,4372,0)
(8790,1808,0)
(951,5239,0)
(7655,8444,0)
(2257,6113,0)
(8466,7063,0)
(595,8566,0)
(2568,994,0)
(2653,4716,0)
(1842,3148,0)
(1224,5061,0)
(4668,5061,0)
(3221,3274,0)
(8598,4622,0)
(255,4922,0)
(5894,7693,0)
(464,1317,0)
(4091,2510,0)
(8664,1695,0)
(1712,260,0)
(907,2207,0)
(7104,8431,0)
(7185,4678,0)
(1419,7846,0)
(6986,1156,0)
(3043,6340,0)
(2785,3629,0)
(6083,3064,0)
(3688,2012,0)
(2324,700,0)
(9104,5853,0)
(2310,2919,0)
(6533,1387,0)
(5247,1656,0)
(2721,6285,0)
(2360,368,0)
(4956,7199,0)
(8715,5943,0)
(6830,2728,0)
(5190,4662,0)
(2139,952,0)
(5145,6112,0)
(2250,1695,0)
(1670,8241,0)
(7399,2601,0)
(484,5061,0)
(1235,3758,0)
(2353,35,0)
(1525,2007,0)
(3590,1491,0)
(4592,1971,0)
(5153,5061,0)
(6143,1695,0)
(313,6334,0)
(7619,5636,0)
(3984,1240,0)
(6684,4285,0)
(7115,5741,0)
(4808,8137,0)
(5559,7178,0)
(2317,1534,0)
(1644,5224,0)
(7833,1080,0)
(4597,2650,0)
(7834,6897,0)
(682,2688,0)
(4543,4148,0)
(5178,4572,0)
(1291,3651,0)
(403,6706,0)
(8009,5491,0)
(1685,3104,0)
(8212,8232,0)
(7066,2491,0)
(6174,6234,0)
(749,1187,0)
(6157,7649,0)
(893,369,0)
(8362,1781,0)
(5970,2224,0)
(260,5340,0)
(8159,8566,0)
(6522,4351,0)
(6691,7995,0)
(4273,5727,0)
(5834,127,0)
(7884,5061,0)
(2325,8673,0)
(431,2803,0)
(3652,5640,0)
(2378,145,0)
(2820,8566,0)
(3683,8554,0)
(1616,12,0)
(1614,1527,0)
(2339,8566,0)
(2236,2651,0)
(7644,2462,0)
(8343,7946,0)
(8290,6278,0)
(7929,8634,0)
(120,2990,0)
(2209,5543,0)
(6436,5597,0)
(3685,421,0)
(5242,4602,0)
(4545,8623,0)
(6221,7803,0)
(3651,3338,0)
(681,1639,0)
(6277,4558,0)
(4214,5061,0)
(4350,6751,0)
(8514,4795,0)
(563,7410,0)
(3481,8426,0)
(672,1760,0)
(9141,5097,0)
(5462,7658,0)
(1702,2411,0)
(4458,2516,0)
(5552,8918,0)
(4946,3941,0)
(2906,1019,0)
(3302,5820,0)
(576,4172,0)
(5894,7358,0)
(7418,5061,0)
(100,309,0)
(3832,8387,0)
(5007,7396,0)
(2936,3361,0)
(8013,1458,0)
(8823,5509,0)
(1068,5061,0)
(2333,8462,0)
(1625,4600,0)
(6172,5968,0)
(6753,6454,0)
(272,851,0)
(2582,8386,0)
(5767,6829,0)
(6717,403,0)
(2893,6755,0)
(2326,1139,0)
(2866,965,0)
(7643,4738,0)
(414,4559,0)
(1494,5061,0)
(6553,8737,0)
(6205,8268,0)
(8314,518,0)
(8258,3103,0)
(1728,5250,0)
(8758,8296,0)
(892,6831,0)
(1518,5994,0)
(7437,8262,0)
(6050,7787,0)
(6526,8795,0)
(9083,2760,0)
(4610,6360,0)
(8626,7028,0)
(7111,7211,0)
(3231,7084,0)
(5648,7127,0)
(2457,7358,0)
(3532,7389,0)
(4763,821,0)
(2929,5475,0)
(4136,8281,0)
(4792,4906,0)
(5148,7878,0)
(2379,8971,0)
(1852,2805,0)
(4132,7940,0)
(6719,8566,0)
(7068,552,0)
(815,5661,0)
(6784,6992,0)
(8058,7314,0)
(6524,8111,0)
(834,8905,0)
(8556,2820,0)
(8948,5061,0)
(8388,3908,0)
(2764,7128,0)
(7443,6768,0)
(2737,8566,0)
(3202,3388,0)
(8862,6570,0)
(4382,7435,0)
(6346,1349,0)
(8954,8300,0)
(4337,5522,0)
(9150,2056,0)
(7298,4965,0)
(6069,4071,0)
(676,7742,0)
(6166,7069,0)
(9025,3815,0)
(2990,120,0)
(2522,5528,0)
(256,2870,0)
(5148,5951,0)
(6777,8566,0)
(4801,5937,0)
(8706,2870,0)
(5784,5009,0)
(2573,8566,0)
(951,644,0)
(4710,8937,0)
(6614,8036,0)
(7814,1517,0)
(2949,1695,0)
(254,3548,0)
(2498,8546,0)
(7562,4230,0)
(5776,4816,0)
(7027,3113,0)
(2418,8509,0)
(7112,5628,0)
(6994,2468,0)
(3258,2477,0)
(2492,2325,0)
(3113,8653,0)
(5340,260,0)
(8432,3001,0)
(2922,325,0)
(8123,3137,0)
(6996,7153,0)
(4254,2386,0)
(2701,462,0)
(1203,6996,0)
(562,1695,0)
(6366,806,0)
(1587,251,0)
(1900,2235,0)
(2457,2165,0)
(3976,6155,0)
(7186,2870,0)
(5983,5066,0)
(5065,4642,0)
(9022,8597,0)
(5926,2652,0)
(2605,4207,0)
(5985,8566,0)
(9056,8566,0)
(4028,3488,0)
(1668,4061,0)
(6782,6405,0)
(6312,5061,0)
(6107,3640,0)
(5792,4604,0)
(6006,8091,0)
(1814,6186,0)
(1872,9113,0)
(9135,8327,0)
(11,3141,0)
(968,7421,0)
(6634,1876,0)
(5706,5061,0)
(4696,7430,0)
(6754,3920,0)
(6893,6794,0)
(4732,5061,0)
(3997,3823,0)
(3688,7869,0)
(5576,45,0)
(2688,14,0)
(6838,918,0)
(1400,6869,0)
(7316,339,0)
(3440,2770,0)
(4115,1059,0)
(6983,4057,0)
(1317,7070,0)
(8656,4743,0)
(5916,127,0)
(172,8628,0)
(861,7252,0)
(403,1403,0)
(3922,162,0)
(7430,5061,0)
(1641,4600,0)
(3830,8566,0)
(1460,4801,0)
(7644,8966,0)
(2374,7294,0)
(3671,1623,0)
(4773,4599,0)
(3683,602,0)
(7687,7868,0)
(975,2577,0)
(1271,5314,0)
(2879,8736,0)
(1580,3630,0)
(6071,3404,0)
(1479,7321,0)
(459,343,0)
(6566,7425,0)
(5706,1115,0)
(7709,9066,0)
(6745,5061,0)
(4010,5061,0)
(4646,61,0)
(5267,5738,0)
(7985,5374,0)
(8322,2607,0)
(1696,8445,0)
(6107,1016,0)
(4655,9108,0)
(567,8738,0)
(8951,2236,0)
(2047,5547,0)
(5945,1852,0)
(4284,8352,0)
(8418,3561,0)
(4403,2580,0)
(2217,8566,0)
(7105,4814,0)
(8825,3485,0)
(773,8566,0)
(7756,2578,0)
(4506,4979,0)
(8190,4349,0)
(2831,5595,0)
(5899,8582,0)
(8993,1720,0)
(3518,8787,0)
(2584,952,0)
(6149,2380,0)
(8811,4095,0)
(3450,7231,0)
(2678,1695,0)
(8340,5813,0)
(6833,2687,0)
(7242,2814,0)
(3899,5141,0)
(8989,5789,0)
(3097,5061,0)
(7566,8174,0)
(3135,8566,0)
(8472,1941,0)
(4977,6768,0)
(7241,4695,0)
(6281,5061,0)
(3050,6048,0)
(2592,8566,0)
(7627,516,0)
(1245,5061,0)
(3617,5760,0)
(5489,4937,0)
(3907,8566,0)
(8444,1876,0)
(7358,2518,0)
(8552,3927,0)
(5553,8754,0)
(4058,4981,0)
(8729,8837,0)
(589,7399,0)
(6705,5111,0)
(4911,377,0)
(6713,3244,0)
(1420,3294,0)
(4266,1447,0)
(5725,2231,0)
(8108,112,0)
(7171,8025,0)
(7818,2206,0)
(7947,1880,0)
(1453,8673,0)
(1501,92,0)
(6370,2952,0)
(1787,8153,0)
(515,4437,0)
(8599,3751,0)
(1393,6967,0)
(7922,2304,0)
(3059,4483,0)
(8535,3608,0)
(2039,3147,0)
(5803,7069,0)
(3484,3103,0)
(5760,8566,0)
(2513,6367,0)
(4463,5924,0)
(231,8924,0)
(2245,5441,0)
(7778,8495,0)
(7381,9146,0)
(1335,6003,0)
(3101,8974,0)
(335,1728,0)
(3231,7326,0)
(1987,193,0)
(2975,8297,0)
(4259,2499,0)
(8399,5690,0)
(2811,1876,0)
(7073,3461,0)
(7751,127,0)
(6195,1745,0)
(8752,8566,0)
(5744,952,0)
(6152,7278,0)
(3289,1695,0)
(6354,3216,0)
(4678,7185,0)
(4351,6522,0)
(6995,5028,0)
(3583,4347,0)
(5148,1071,0)
(1420,984,0)
(8970,5921,0)
(6022,7692,0)
(8885,2081,0)
(2586,5061,0)
(5111,7648,0)
(6698,127,0)
(548,415,0)
(4769,8722,0)
(4947,5061,0)
(6350,8252,0)
(3796,7793,0)
(15,1160,0)
(654,4201,0)
(6629,1901,0)
(1651,2709,0)
(5184,7193,0)
(4576,1976,0)
(377,4567,0)
(564,398,0)
(4986,8673,0)
(6440,655,0)
(2645,7326,0)
(6603,6769,0)
(2984,1075,0)
(2139,6340,0)
(2834,6623,0)
(9120,5937,0)
(8173,3547,0)
(3157,3249,0)
(7889,113,0)
(5877,6289,0)
(6994,5378,0)
(2457,952,0)
(5852,113,0)
(184,7904,0)
(3035,8508,0)
(1950,8347,0)
(2881,3206,0)
(9103,8967,0)
(2337,3746,0)
(7644,1866,0)
(7633,8232,0)
(5598,5140,0)
(2192,4697,0)
(6225,127,0)
(8358,7703,0)
(3205,3571,0)
(2380,6001,0)
(1563,8566,0)
(4193,1705,0)
(1125,6272,0)
(8709,5522,0)
(1469,4057,0)
(8795,4179,0)
(9094,4877,0)
(5827,3934,0)
(7917,5543,0)
(2367,3055,0)
(408,667,0)
(6747,5790,0)
(765,3808,0)
(2991,6785,0)
(6868,3239,0)
(7363,4664,0)
(8900,3316,0)
(5806,2020,0)
(4029,8673,0)
(4169,7159,0)
(2969,8496,0)
(1941,8558,0)
(2967,8596,0)
(5264,2007,0)
(3038,7750,0)
(3275,8459,0)
(6760,823,0)
(9116,5595,0)
(3473,1933,0)
(350,3202,0)
(7869,5220,0)
(4988,8673,0)
(7052,4268,0)
(6566,2165,0)
(3935,6294,0)
(4269,8090,0)
(5855,4529,0)
(256,7326,0)
(807,5937,0)
(2034,6022,0)
(1778,8755,0)
(3699,3936,0)
(6945,4689,0)
(4738,5061,0)
(5992,8566,0)
(1254,8566,0)
(8642,618,0)
(1655,6489,0)
(1981,1927,0)
(7342,7465,0)
(7913,6265,0)
(2710,1971,0)
(6030,4264,0)
(256,6340,0)
(4246,3299,0)
(4486,8602,0)
(4440,8730,0)
(3701,4840,0)
(203,6883,0)
(2238,5580,0)
(7025,1948,0)
(1873,852,0)
(8152,6748,0)
(6599,4608,0)
(5335,6270,0)
(701,5039,0)
(3225,2965,0)
(4303,6041,0)
(1807,251,0)
(2036,7394,0)
(5339,986,0)
(4742,6497,0)
(5283,4522,0)
(3032,3240,0)
(3535,3206,0)
(2214,1283,0)
(8163,2815,0)
(4797,2339,0)
(4772,4767,0)
(1497,7934,0)
(5727,4004,0)
(158,3267,0)
(6678,3661,0)
(4837,5323,0)
(2639,3249,0)
(8569,8386,0)
(441,3157,0)
(8207,2561,0)
(6113,5061,0)
(5564,8701,0)
(349,8932,0)
(8457,6049,0)
(357,7895,0)
(6831,6987,0)
(5325,868,0)
(1130,8566,0)
(1195,8132,0)
(4532,1369,0)
(5748,621,0)
(1924,8566,0)
(137,7598,0)
(5897,5061,0)
(5363,3213,0)
(7921,2575,0)
(5856,1695,0)
(8144,5440,0)
(9104,6811,0)
(1351,4811,0)
(3098,337,0)
(5723,1454,0)
(3661,3208,0)
(6157,5061,0)
(7102,6743,0)
(8218,7196,0)
(2396,1851,0)
(2001,2176,0)
(8208,2304,0)
(6059,7593,0)
(5043,8403,0)
(3592,9018,0)
(235,6698,0)
(7945,2586,0)
(2139,7425,0)
(5218,6376,0)
(4607,7121,0)
(7068,2528,0)
(4950,862,0)
(3735,7793,0)
(7702,3612,0)
(3091,5505,0)
(6064,4311,0)
(3134,4298,0)
(5263,438,0)
(3489,4875,0)
(920,6710,0)
(978,3277,0)
(1035,487,0)
(5753,8777,0)
(6497,632,0)
(9042,1443,0)
(6701,5061,0)
(5760,3617,0)
(32,1139,0)
(1941,6939,0)
(4465,1039,0)
(7888,4963,0)
(3304,3416,0)
(4868,3092,0)
(5197,5402,0)
(6349,5437,0)
(6891,6616,0)
(1667,6258,0)
(5337,607,0)
(2166,3806,0)
(683,3001,0)
(6270,8566,0)
(3913,2304,0)
(5429,765,0)
(764,8958,0)
(9027,2570,0)
(4512,6966,0)
(98,6803,0)
(2823,4292,0)
(2647,6047,0)
(284,6265,0)
(281,6507,0)
(9136,2485,0)
(3776,3091,0)
(6454,1091,0)
(6821,7144,0)
(1052,8664,0)
(4630,5510,0)
(6295,6301,0)
(1869,7283,0)
(4307,4235,0)
(4425,3289,0)
(390,3875,0)
(4947,7061,0)
(6668,4648,0)
(1307,8425,0)
(5176,4422,0)
(3362,7764,0)
(2685,3146,0)
(2,3610,0)
(4809,6279,0)
(1373,8566,0)
(2039,7343,0)
(4658,5527,0)
(5790,5451,0)
(7533,7583,0)
(3244,2687,0)
(4276,2637,0)
(3457,8777,0)
(6308,7464,0)
(7594,4065,0)
(5380,3841,0)
(6676,3814,0)
(4059,1219,0)
(8297,5061,0)
(6045,6528,0)
(373,7751,0)
(6203,1974,0)
(3870,6840,0)
(8273,5061,0)
(5825,5378,0)
(5105,7962,0)
(5105,3647,0)
(8706,6340,0)
(2345,7514,0)
(1427,7439,0)
(2645,4864,0)
(2728,8566,0)
(8740,7682,0)
(4762,4619,0)
(6892,2028,0)
(4489,910,0)
(6739,8385,0)
(693,2528,0)
(5518,1786,0)
(5251,5766,0)
(2421,2214,0)
(4589,1140,0)
(5061,6301,0)
(332,3958,0)
(8414,1173,0)
(4487,8852,0)
(6813,5591,0)
(3437,7962,0)
(8329,8673,0)
(5761,8506,0)
(5408,836,0)
(8034,3072,0)
(3746,2337,0)
(8521,6984,0)
(2202,258,0)
(3875,5672,0)
(8814,4179,0)
(8447,4622,0)
(2712,272,0)
(3043,7962,0)
(7212,9108,0)
(6467,641,0)
(5346,657,0)
(7688,1292,0)
(6690,8566,0)
(545,4618,0)
(5148,13,0)
(770,6768,0)
(4919,8650,0)
(5111,6705,0)
(2543,8865,0)
(873,1029,0)
(7252,2451,0)
(1114,2931,0)
(5902,4604,0)
(3385,8590,0)
(3004,2220,0)
(5520,7995,0)
(2174,8449,0)
(3090,4993,0)
(573,533,0)
(1659,5061,0)
(2141,456,0)
(2457,4642,0)
(2591,4,0)
(2549,7075,0)
(8386,2336,0)
(6887,5937,0)
(5756,6183,0)
(5008,4297,0)
(3911,1788,0)
(8121,6931,0)
(5917,4872,0)
(4840,8985,0)
(5431,6768,0)
(1724,3777,0)
(8376,972,0)
(7118,5950,0)
(3055,3024,0)
(5475,2646,0)
(8540,521,0)
(5085,4606,0)
(8392,8963,0)
(8674,3080,0)
(3495,4948,0)
(3661,6678,0)
(7005,8566,0)
(1422,1486,0)
(1008,2526,0)
(7789,6897,0)
(5524,4735,0)
(3540,6794,0)
(1835,1839,0)
(762,2816,0)
(4912,6623,0)
(9128,7228,0)
(5057,1512,0)
(4712,8566,0)
(7309,1458,0)
(113,7889,0)
(7041,2048,0)
(3777,6768,0)
(5196,2966,0)
(518,4347,0)
(320,3835,0)
(7093,2285,0)
(3116,6959,0)
(5368,390,0)
(2452,2557,0)
(3839,489,0)
(8331,4120,0)
(8728,8286,0)
(5814,1059,0)
(6265,3530,0)
(935,8988,0)
(7010,3343,0)
(1074,2725,0)
(1963,657,0)
(4759,7080,0)
(5791,3510,0)
(5696,8566,0)
(1027,1995,0)
(7643,4994,0)
(7761,2235,0)
(5148,8966,0)
(3719,3234,0)
(4251,2356,0)
(1673,5061,0)
(3801,1729,0)
(5608,8566,0)
(9104,1552,0)
(4217,6468,0)
(8124,8745,0)
(7603,3392,0)
(1839,1835,0)
(2910,2854,0)
(6060,5778,0)
(3231,6340,0)
(396,7174,0)
(5505,5684,0)
(8836,5061,0)
(498,8509,0)
(4016,8164,0)
(7969,205,0)
(8936,3894,0)
(7577,1104,0)
(2628,6218,0)
(1224,3307,0)
(4396,7,0)
(427,5571,0)
(6623,5391,0)
(477,340,0)
(5073,220,0)
(2821,5924,0)
(4004,5727,0)
(3756,3072,0)
(903,7295,0)
(939,550,0)
(305,1507,0)
(5256,2634,0)
(5141,525,0)
(2097,2957,0)
(556,1470,0)
(4354,291,0)
(3896,1695,0)
(9134,5061,0)
(5007,4457,0)
(1043,1614,0)
(2122,1280,0)
(8650,4027,0)
(4954,2039,0)
(3528,258,0)
(4298,1876,0)
(2114,5061,0)
(2155,267,0)
(6396,8566,0)
(6848,4747,0)
(5869,5571,0)
(5870,2081,0)
(7644,3592,0)
(3464,6768,0)
(9104,35,0)
(469,5073,0)
(4894,4905,0)
(1849,2679,0)
(8553,296,0)
(2571,7956,0)
(466,1965,0)
(8397,2011,0)
(7147,1287,0)
(3424,7611,0)
(1651,7754,0)
(1970,2294,0)
(6141,8309,0)
(7528,6682,0)
(299,1228,0)
(2299,7307,0)
(2600,1142,0)
(6466,6548,0)
(5864,6220,0)
(1136,6003,0)
(4997,6675,0)
(1041,979,0)
(2732,8673,0)
(5232,1959,0)
(6786,6555,0)
(6082,236,0)
(8482,3974,0)
(3179,368,0)
(4716,2653,0)
(2713,5061,0)
(4838,7128,0)
(7696,356,0)
(6705,3477,0)
(7015,8566,0)
(858,9105,0)
(6639,425,0)
(4,3153,0)
(7065,2031,0)
(7174,808,0)
(5621,5061,0)
(262,2072,0)
(5885,4471,0)
(2139,8703,0)
(1154,3360,0)
(2529,6064,0)
(5515,7669,0)
(904,2973,0)
(6469,4315,0)
(4150,807,0)
(1892,3502,0)
(293,5602,0)
(1504,1781,0)
(5775,6460,0)
(6331,1670,0)
(6714,3784,0)
(3144,7962,0)
(7482,724,0)
(531,2534,0)
(2652,5061,0)
(4697,8673,0)
(9080,952,0)
(3148,7882,0)
(1293,6407,0)
(7792,8566,0)
(4131,6816,0)
(8175,7425,0)
(6860,4687,0)
(4837,6512,0)
(3166,8566,0)
(7958,2311,0)
(8967,9103,0)
(3979,7062,0)
(1510,8264,0)
(8348,5977,0)
(1187,8566,0)
(4782,4388,0)
(2474,1180,0)
(3926,5748,0)
(8137,4439,0)
(1432,1558,0)
(1528,6446,0)
(8412,105,0)
(690,8566,0)
(671,258,0)
(5265,1598,0)
(5314,1271,0)
(2531,8286,0)
(1380,2196,0)
(3361,7246,0)
(7150,5061,0)
(6592,206,0)
(5099,1080,0)
(5038,4847,0)
(2010,3152,0)
(7684,1772,0)
(1365,6583,0)
(2539,7753,0)
(6727,8473,0)
(7967,8889,0)
(3822,6207,0)
(460,7259,0)
(18,9079,0)
(3116,8653,0)
(8127,7522,0)
(4967,4642,0)
(4599,4773,0)
(8922,6768,0)
(830,8161,0)
(999,5839,0)
(2454,6946,0)
(2689,8566,0)
(1204,5937,0)
(6477,5061,0)
(6798,3383,0)
(8425,8673,0)
(7005,7541,0)
(4021,6056,0)
(728,1402,0)
(3510,4618,0)
(2277,5988,0)
(6193,1490,0)
(6237,3728,0)
(7939,1201,0)
(2262,4488,0)
(8647,6107,0)
(1475,3418,0)
(7948,4151,0)
(1498,1520,0)
(3097,8566,0)
(7974,5166,0)
(7721,8566,0)
(3815,2468,0)
(8766,1317,0)
(9136,4304,0)
(6739,5061,0)
(6086,3033,0)
(991,9145,0)
(2227,60,0)
(1284,7845,0)
(3395,456,0)
(4328,5365,0)
(7514,2345,0)
(6530,3649,0)
(9054,2549,0)
(5602,293,0)
(5663,1658,0)
(2961,1695,0)
(8945,2058,0)
(9104,2765,0)
(4582,6793,0)
(3869,7301,0)
(8149,8025,0)
(2573,5061,0)
(7756,7838,0)
(6135,3751,0)
(3085,7517,0)
(3001,6595,0)
(2241,7540,0)
(462,760,0)
(6283,7536,0)
(4175,1101,0)
(7146,8609,0)
(8688,819,0)
(5018,7664,0)
(5254,8016,0)
(5034,6968,0)
(7750,8566,0)
(7546,4056,0)
(6216,8478,0)
(8238,4687,0)
(4241,5287,0)
(9104,4520,0)
(1850,2765,0)
(2926,5378,0)
(843,4783,0)
(9136,8966,0)
(6489,3445,0)
(5315,1006,0)
(2672,3888,0)
(6223,6768,0)
(241,4537,0)
(7090,5458,0)
(7120,616,0)
(6442,6275,0)
(1854,8566,0)
(5727,4273,0)
(484,4594,0)
(8833,4382,0)
(5567,4601,0)
(4687,8566,0)
(7465,3909,0)
(5426,5164,0)
(6224,8673,0)
(5510,5440,0)
(2988,7388,0)
(9118,8912,0)
(2374,5061,0)
(105,281,0)
(688,1331,0)
(6162,2687,0)
(4207,8792,0)
(4803,5602,0)
(4255,4814,0)
(112,4737,0)
(2550,7094,0)
(5907,5806,0)
(4194,6288,0)
(4120,1765,0)
(1218,2326,0)
(6968,5034,0)
(3744,5061,0)
(428,1666,0)
(238,4528,0)
(3209,8403,0)
(8390,5252,0)
(1266,5726,0)
(6662,7027,0)
(2675,8566,0)
(3475,8566,0)
(2179,0,0)
(6696,7929,0)
(220,1020,0)
(2973,2028,0)
(3420,8062,0)
(2340,5061,0)
(3231,2496,0)
(4145,7711,0)
(6719,7102,0)
(8040,6631,0)
(4405,2632,0)
(5934,1788,0)
(1089,6418,0)
(7160,9006,0)
(1587,1876,0)
(5624,6479,0)
(8487,8180,0)
(909,5034,0)
(5231,5214,0)
(4656,6408,0)
(4705,258,0)
(4444,5061,0)
(3322,9021,0)
(5051,8498,0)
(3190,6307,0)
(8232,2538,0)
(6963,65,0)
(2194,4664,0)
(4587,1417,0)
(3150,1128,0)
(277,8476,0)
(6270,5061,0)
(6764,5505,0)
(2218,293,0)
(5143,1870,0)
(8401,1420,0)
(1969,1695,0)
(3055,8793,0)
(3277,978,0)
(6178,3905,0)
(7556,4607,0)
(8859,8566,0)
(6460,5940,0)
(298,5458,0)
(1321,8961,0)
(4321,8703,0)
(2173,2302,0)
(1627,3250,0)
(1204,7853,0)
(3715,5010,0)
(8423,8566,0)
(7672,3407,0)
(6090,1891,0)
(6220,8673,0)
(8480,527,0)
(8880,3854,0)
(5814,2803,0)
(399,7623,0)
(312,8566,0)
(4952,6257,0)
(3686,8251,0)
(8024,2158,0)
(6566,7326,0)
(1458,258,0)
(8407,8673,0)
(1998,1153,0)
(4817,6665,0)
(5824,713,0)
(6767,3319,0)
(1796,127,0)
(619,5061,0)
(642,3097,0)
(5268,8616,0)
(7394,8673,0)
(3487,6367,0)
(6138,2239,0)
(3081,9103,0)
(3794,2111,0)
(2413,3063,0)
(3783,8807,0)
(8075,5110,0)
(4078,5604,0)
(6620,5061,0)
(1352,2624,0)
(1984,103,0)
(1369,8822,0)
(3914,4994,0)
(5705,6301,0)
(157,7407,0)
(6294,8566,0)
(8436,4225,0)
(4111,4040,0)
(1273,7745,0)
(9087,5061,0)
(1710,885,0)
(6002,2188,0)
(362,3408,0)
(6134,6768,0)
(4421,1208,0)
(567,5061,0)
(5182,5410,0)
(2429,5061,0)
(1485,8566,0)
(8071,8424,0)
(4583,8232,0)
(5072,4689,0)
(5838,2528,0)
(7323,3840,0)
(3592,9027,0)
(1142,2600,0)
(4874,8520,0)
(8471,4642,0)
(7387,4153,0)
(4057,1469,0)
(6946,3259,0)
(3104,5061,0)
(2144,72,0)
(5953,3516,0)
(3279,2128,0)
(3810,7504,0)
(5397,3566,0)
(8083,980,0)
(565,6474,0)
(7255,8426,0)
(7463,4422,0)
(9006,2195,0)
(713,8658,0)
(6919,5061,0)
(2020,5806,0)
(1541,3050,0)
(3753,3738,0)
(8539,8566,0)
(836,5408,0)
(3865,4367,0)
(1757,3316,0)
(2169,719,0)
(7776,65,0)
(1006,5315,0)
(2512,8449,0)
(3714,4812,0)
(4296,1919,0)
(1811,1029,0)
(6504,7790,0)
(7646,1695,0)
(8775,4804,0)
(2711,2591,0)
(4205,296,0)
(7288,1055,0)
(6218,8566,0)
(624,9109,0)
(2331,6631,0)
(7388,2386,0)
(7385,5834,0)
(3985,5722,0)
(6285,2721,0)
(413,4941,0)
(8225,5061,0)
(8461,7544,0)
(5237,2015,0)
(2224,7896,0)
(8831,4468,0)
(7721,3231,0)
(7914,394,0)
(5853,5349,0)
(4010,8566,0)
(886,8713,0)
(5114,8673,0)
(8318,5074,0)
(2474,7160,0)
(969,1729,0)
(3441,8566,0)
(8061,6788,0)
(70,4250,0)
(7792,8244,0)
(5065,4814,0)
(8018,5802,0)
(648,594,0)
(4262,7449,0)
(1788,6768,0)
(3790,3454,0)
(2645,1200,0)
(7412,7259,0)
(3432,239,0)
(3148,770,0)
(8836,2823,0)
(1341,79,0)
(3545,607,0)
(2652,8566,0)
(8866,8886,0)
(5121,5061,0)
(3164,119,0)
(1774,1262,0)
(236,6082,0)
(6281,8566,0)
(5197,895,0)
(7964,7634,0)
(4393,6580,0)
(4350,8566,0)
(7058,5061,0)
(8265,1664,0)
(5279,6556,0)
(8658,65,0)
(1339,592,0)
(8605,6513,0)
(1747,2407,0)
(1756,1808,0)
(5016,3195,0)
(7676,4872,0)
(5962,7827,0)
(5996,8899,0)
(2365,5484,0)
(7557,5061,0)
(2535,1325,0)
(7328,2864,0)
(901,65,0)
(816,9087,0)
(2043,2591,0)
(2779,7902,0)
(4515,3610,0)
(7291,5061,0)
(2735,8566,0)
(1271,3846,0)
(760,6003,0)
(1183,4836,0)
(1296,7792,0)
(1607,6637,0)
(21,7744,0)
(49,6096,0)
(208,5401,0)
(8264,4965,0)
(5833,5949,0)
(6828,9036,0)
(5736,5771,0)
(1173,3604,0)
(3721,4983,0)
(4129,3054,0)
(7813,7150,0)
(4770,6673,0)
(3015,91,0)
(4402,8673,0)
(8802,5061,0)
(4380,6446,0)
(3955,5148,0)
(7225,5103,0)
(5642,258,0)
(2840,127,0)
(8324,632,0)
(1334,7469,0)
(3527,7724,0)
(2580,8321,0)
(5818,8566,0)
(4012,8299,0)
(2117,1205,0)
(3301,1309,0)
(4748,2020,0)
(8628,3418,0)
(2776,8273,0)
(7253,7949,0)
(5557,4304,0)
(478,7516,0)
(5690,8399,0)
(8580,5558,0)
(3955,523,0)
(6714,5821,0)
(6301,5705,0)
(2595,5954,0)
(758,6892,0)
(7027,6662,0)
(1895,4199,0)
(8433,3368,0)
(2850,4111,0)
(868,6388,0)
(3982,2524,0)
(9089,222,0)
(4567,5128,0)
(722,127,0)
(4758,2309,0)
(1020,8611,0)
(631,33,0)
(7766,5519,0)
(4149,6760,0)
(781,3095,0)
(1076,4297,0)
(2095,6760,0)
(3037,2515,0)
(8788,6121,0)
(8514,7281,0)
(3318,65,0)
(5816,3471,0)
(7950,1679,0)
(1323,8473,0)
(2645,6127,0)
(5073,868,0)
(3182,8673,0)
(4356,4774,0)
(6360,8514,0)
(3599,1470,0)
(2451,7252,0)
(561,1357,0)
(2062,5636,0)
(7598,6130,0)
(649,1401,0)
(5536,4213,0)
(692,4755,0)
(213,8141,0)
(4979,7472,0)
(3231,2485,0)
(2813,3104,0)
(5080,6561,0)
(2584,2870,0)
(8211,8762,0)
(7048,8566,0)
(3066,3638,0)
(1830,9060,0)
(2035,2847,0)
(7860,3080,0)
(1036,8197,0)
(8948,8566,0)
(7774,774,0)
(3260,8857,0)
(6622,9103,0)
(7678,5730,0)
(1013,367,0)
(6257,5346,0)
(4755,2515,0)
(4520,9027,0)
(8818,1580,0)
(1693,7284,0)
(5834,7916,0)
(556,1529,0)
(2758,8859,0)
(4177,8762,0)
(7477,337,0)
(5749,355,0)
(7652,3118,0)
(5105,5574,0)
(8295,1184,0)
(8772,6012,0)
(3156,312,0)
(1069,2088,0)
(471,582,0)
(4512,5061,0)
(7801,5272,0)
(3276,1270,0)
(6307,8554,0)
(8961,1321,0)
(4770,1492,0)
(524,1720,0)
(5884,792,0)
(688,4733,0)
(1507,3694,0)
(4917,1006,0)
(1623,8566,0)
(3874,1953,0)
(6328,8268,0)
(1794,5212,0)
(5328,8498,0)
(6515,5687,0)
(4780,7088,0)
(3953,8589,0)
(8213,5385,0)
(3124,6382,0)
(5097,9141,0)
(4859,3186,0)
(2349,7280,0)
(2768,2767,0)
(64,6215,0)
(8180,8487,0)
(7036,3365,0)
(5329,5937,0)
(7497,3939,0)
(6853,4869,0)
(6576,6582,0)
(3861,5287,0)
(8123,6423,0)
(8521,7782,0)
(69,1835,0)
(1923,8566,0)
(9136,4642,0)
(8128,8616,0)
(3347,2792,0)
(3046,2643,0)
(2842,5583,0)
(3616,2420,0)
(4751,7309,0)
(5204,6026,0)
(2533,4237,0)
(5194,7222,0)
(5406,6940,0)
(7670,821,0)
(3646,1370,0)
(8055,7141,0)
(868,5073,0)
(1459,6823,0)
(382,3098,0)
(3894,8936,0)
(5068,7689,0)
(3717,6677,0)
(3772,258,0)
(1534,8566,0)
(1862,127,0)
(1188,1829,0)
(6566,8966,0)
(1958,6963,0)
(5273,8673,0)
(389,6923,0)
(2543,1072,0)
(2224,5937,0)
(1306,6605,0)
(6039,4311,0)
(5404,2645,0)
(5550,8743,0)
(8260,6330,0)
(7691,406,0)
(1546,6225,0)
(5715,7705,0)
(1906,258,0)
(5747,7024,0)
(1995,2176,0)
(5802,7070,0)
(1200,6759,0)
(2618,552,0)
(7804,2006,0)
(7448,2898,0)
(9104,537,0)
(2110,4825,0)
(4134,7023,0)
(1701,6743,0)
(8743,8952,0)
(8054,2155,0)
(148,709,0)
(5499,8673,0)
(2380,4991,0)
(774,7774,0)
(8757,8989,0)
(4909,3043,0)
(4486,7821,0)
(98,3879,0)
(7028,2848,0)
(4688,8673,0)
(5105,5017,0)
(5665,4872,0)
(8681,5979,0)
(3955,9104,0)
(5626,3940,0)
(7017,7246,0)
(5956,1899,0)
(6743,7102,0)
(1505,8566,0)
(7495,1702,0)
(3016,3611,0)
(5065,2496,0)
(3361,5061,0)
(6633,8758,0)
(8886,7596,0)
(2512,6482,0)
(4190,8566,0)
(5527,5809,0)
(2650,5061,0)
(5431,1049,0)
(1466,6768,0)
(1449,5061,0)
(1728,4559,0)
(2235,7506,0)
(4705,182,0)
(1674,3303,0)
(9076,1308,0)
(2626,8181,0)
(8117,8566,0)
(2188,3148,0)
(875,5411,0)
(6252,8566,0)
(2561,8207,0)
(1726,75,0)
(3418,8628,0)
(5228,2672,0)
(8623,5061,0)
(4305,3959,0)
(6474,5262,0)
(658,8579,0)
(7349,5401,0)
(5148,6276,0)
(1874,4327,0)
(1167,2863,0)
(2484,6957,0)
(1259,3940,0)
(3316,8900,0)
(8485,8566,0)
(2248,586,0)
(3990,5061,0)
(6385,7450,0)
(1615,3551,0)
(7162,4422,0)
(2875,2938,0)
(4491,127,0)
(4247,1554,0)
(5656,5692,0)
(6957,2456,0)
(9102,1876,0)
(5191,7613,0)
(3841,5380,0)
(2696,7618,0)
(8043,4388,0)
(184,258,0)
(4846,7145,0)
(6462,258,0)
(1415,4550,0)
(6982,8779,0)
(8628,6759,0)
(1402,728,0)
(1192,8673,0)
(8652,1082,0)
(1772,683,0)
(5923,5061,0)
(9057,50,0)
(1646,2252,0)
(1503,3683,0)
(2864,488,0)
(527,6852,0)
(7319,6311,0)
(7174,7894,0)
(3900,1695,0)
(2705,7834,0)
(7559,5239,0)
(8747,5451,0)
(2243,65,0)
(7049,3934,0)
(8493,5061,0)
(4636,2703,0)
(7058,8566,0)
(8763,1259,0)
(1741,4291,0)
(2810,6221,0)
(4365,5061,0)
(3294,1420,0)
(4163,4969,0)
(6583,65,0)
(5037,8566,0)
(4402,8271,0)
(3320,167,0)
(1543,8286,0)
(9078,6935,0)
(1867,4303,0)
(7673,7685,0)
(5738,9087,0)
(706,6462,0)
(6790,328,0)
(2332,3274,0)
(28,8836,0)
(7260,5195,0)
(8936,3875,0)
(6353,8012,0)
(5965,33,0)
(7608,3432,0)
(384,1904,0)
(2248,258,0)
(1703,1106,0)
(8939,6047,0)
(7951,7477,0)
(465,8271,0)
(5750,5475,0)
(4331,3274,0)
(877,3466,0)
(5744,2165,0)
(2169,1151,0)
(138,5061,0)
(7152,6866,0)
(4681,4361,0)
(7615,1824,0)
(3981,8589,0)
(755,1192,0)
(1220,3936,0)
(2496,1876,0)
(3115,1813,0)
(8035,456,0)
(1702,6452,0)
(1097,3343,0)
(8653,3116,0)
(7370,5802,0)
(7759,536,0)
(7570,5418,0)
(8600,3920,0)
(2308,4079,0)
(7070,1317,0)
(1944,843,0)
(6949,338,0)
(6679,5061,0)
(8697,604,0)
(5778,1135,0)
(2541,4985,0)
(3170,1695,0)
(2243,9036,0)
(5105,154,0)
(4610,6388,0)
(3293,127,0)
(8582,65,0)
(3551,1615,0)
(1935,3615,0)
(1539,1767,0)
(7873,5061,0)
(2514,5950,0)
(4171,8459,0)
(3748,8441,0)
(6011,3376,0)
(8833,80,0)
(1070,1954,0)
(577,4557,0)
(3036,1321,0)
(143,1501,0)
(5297,4184,0)
(6358,5117,0)
(801,144,0)
(1467,7509,0)
(4950,8566,0)
(7002,7895,0)
(3268,2611,0)
(2376,1301,0)
(7974,65,0)
(2103,3390,0)
(4741,8673,0)
(2088,5046,0)
(7299,3110,0)
(7793,6459,0)
(4098,1766,0)
(5667,1880,0)
(6482,9107,0)
(1602,5927,0)
(6437,2431,0)
(8200,2540,0)
(5227,633,0)
(3655,2260,0)
(6885,2471,0)
(7884,8566,0)
(1614,6121,0)
(6103,7331,0)
(8921,5621,0)
(4606,5090,0)
(5037,2787,0)
(5449,4275,0)
(193,3502,0)
(7837,258,0)
(2929,992,0)
(4628,5791,0)
(2220,5061,0)
(1225,978,0)
(7460,1584,0)
(1057,5061,0)
(511,8630,0)
(1458,65,0)
(8206,6852,0)
(1945,3333,0)
(7231,6593,0)
(467,1057,0)
(7320,7999,0)
(4043,459,0)
(8377,3259,0)
(3183,2649,0)
(401,6768,0)
(7810,5735,0)
(8571,7688,0)
(2668,4785,0)
(4640,8225,0)
(9130,1726,0)
(2182,4473,0)
(4621,4235,0)
(1738,998,0)
(1470,1412,0)
(9104,9105,0)
(8597,9022,0)
(1893,7824,0)
(7441,6490,0)
(1820,11,0)
(5134,7476,0)
(671,3443,0)
(8331,6869,0)
(95,1529,0)
(38,8831,0)
(767,788,0)
(3303,1714,0)
(7425,8664,0)
(6293,8722,0)
(3454,8566,0)
(7015,5061,0)
(4918,1304,0)
(5895,1254,0)
(1097,3245,0)
(1847,1949,0)
(7315,2289,0)
(763,1695,0)
(2304,8208,0)
(3929,8542,0)
(1308,5047,0)
(4382,8833,0)
(6004,9134,0)
(8759,3139,0)
(5465,5800,0)
(1019,8251,0)
(4861,2311,0)
(6698,926,0)
(3124,2763,0)
(8839,6026,0)
(5290,1413,0)
(5105,5599,0)
(2424,2021,0)
(8364,5885,0)
(2741,6407,0)
(1581,8232,0)
(5957,835,0)
(9093,3104,0)
(7741,351,0)
(2943,8496,0)
(1728,335,0)
(3820,2107,0)
(1420,7063,0)
(1013,8566,0)
(7012,4450,0)
(9064,8123,0)
(6627,941,0)
(9040,1324,0)
(8651,49,0)
(1420,2812,0)
(5859,2538,0)
(2675,8711,0)
(6569,3141,0)
(6538,2922,0)
(3354,7499,0)
(161,1641,0)
(7106,7733,0)
(2260,8918,0)
(7206,4993,0)
(2117,4399,0)
(1172,3234,0)
(2574,4444,0)
(8727,6662,0)
(655,2831,0)
(178,3877,0)
(2062,8566,0)
(4746,5224,0)
(7301,5061,0)
(6050,7666,0)
(1786,6869,0)
(1020,220,0)
(2913,8787,0)
(9104,4812,0)
(9029,4198,0)
(7085,2007,0)
(3603,2524,0)
(843,297,0)
(7611,1618,0)
(8470,3874,0)
(829,8237,0)
(415,6524,0)
(6742,8566,0)
(3712,2515,0)
(1090,3830,0)
(9073,6363,0)
(2824,8673,0)
(7020,2015,0)
(7159,6768,0)
(4751,3861,0)
(9048,8566,0)
(9104,2870,0)
(2837,9056,0)
(788,877,0)
(7437,331,0)
(2790,6987,0)
(6268,6653,0)
(2978,1571,0)
(1252,966,0)
(802,7314,0)
(2516,5172,0)
(6597,5954,0)
(1184,5061,0)
(605,3683,0)
(6799,5061,0)
(2891,619,0)
(719,2169,0)
(3351,2048,0)
(448,3924,0)
(7731,2081,0)
(7863,2823,0)
(4242,8787,0)
(5947,5682,0)
(3073,3907,0)
(5321,7735,0)
(4081,1458,0)
(3179,3109,0)
(5270,3336,0)
(670,3502,0)
(800,236,0)
(3548,5061,0)
(1281,3457,0)
(9104,6374,0)
(5086,1070,0)
(82,4562,0)
(206,6592,0)
(7141,5937,0)
(164,5061,0)
(5399,6621,0)
(2645,4400,0)
(1629,3054,0)
(6180,6311,0)
(5724,7550,0)
(2645,6940,0)
(8630,127,0)
(3673,1547,0)
(7415,8673,0)
(6984,2016,0)
(1269,6051,0)
(5411,2447,0)
(3772,65,0)
(6889,3707,0)
(925,6893,0)
(4272,1097,0)
(2788,50,0)
(3377,5333,0)
(3329,8566,0)
(3457,1768,0)
(3043,7425,0)
(7897,1010,0)
(5075,2354,0)
(3231,8966,0)
(152,339,0)
(3799,6824,0)
(7782,8521,0)
(6043,3090,0)
(8590,5937,0)
(7094,3201,0)
(3375,227,0)
(7703,4361,0)
(6333,8611,0)
(5202,3351,0)
(2737,5061,0)
(8494,8133,0)
(752,5061,0)
(2843,367,0)
(3252,3310,0)
(7991,1894,0)
(2584,7326,0)
(9012,5944,0)
(2575,5061,0)
(936,118,0)
(852,1873,0)
(7440,8566,0)
(4870,7516,0)
(6852,6121,0)
(852,8566,0)
(8335,1623,0)
(7918,4459,0)
(6266,7882,0)
(3186,6689,0)
(7139,5832,0)
(5009,7781,0)
(7256,7451,0)
(4027,9036,0)
(7231,5061,0)
(7855,4851,0)
(4675,7964,0)
(6977,254,0)
(738,5239,0)
(8363,4225,0)
(6452,1039,0)
(6134,9149,0)
(2474,3153,0)
(2631,7849,0)
(4824,4213,0)
(4610,4144,0)
(6395,8353,0)
(702,5588,0)
(3095,456,0)
(1707,6771,0)
(9104,5511,0)
(7425,8566,0)
(2830,2180,0)
(2294,7740,0)
(6899,5740,0)
(8070,6048,0)
(2083,2332,0)
(4729,5061,0)
(6279,5839,0)
(3912,1702,0)
(5047,1308,0)
(6883,1956,0)
(1040,6892,0)
(4537,3095,0)
(7407,6173,0)
(3580,7406,0)
(7954,2191,0)
(3042,5842,0)
(5355,715,0)
(1259,5061,0)
(62,5048,0)
(8371,8121,0)
(264,5061,0)
(1885,4109,0)
(7930,7836,0)
(868,8566,0)
(5148,876,0)
(3086,5583,0)
(669,8673,0)
(3501,7451,0)
(8675,8889,0)
(1896,7331,0)
(5696,885,0)
(3201,6482,0)
(5416,5752,0)
(6380,5263,0)
(9104,7594,0)
(2573,5937,0)
(9104,2380,0)
(3351,2076,0)
(3654,1866,0)
(4871,8673,0)
(2336,8386,0)
(4996,2965,0)
(1520,2267,0)
(3826,5061,0)
(8735,2134,0)
(6901,9121,0)
(3437,6340,0)
(5225,1139,0)
(8960,5061,0)
(6958,599,0)
(5175,8459,0)
(3204,5807,0)
(4874,8935,0)
(6575,3711,0)
(249,6946,0)
(8680,6918,0)
(3196,5133,0)
(8495,7778,0)
(7132,4528,0)
(857,3191,0)
(7978,448,0)
(5477,7328,0)
(8276,2588,0)
(169,8566,0)
(8278,3259,0)
(983,36,0)
(7533,6699,0)
(980,8083,0)
(5139,9027,0)
(3665,6846,0)
(7695,2864,0)
(7303,4610,0)
(937,4785,0)
(7351,3090,0)
(4840,1744,0)
(443,6207,0)
(5045,4678,0)
(7756,5939,0)
(1284,8558,0)
(1246,5385,0)
(7492,5263,0)
(9149,6134,0)
(4235,108,0)
(7644,6127,0)
(4464,5075,0)
(3437,4642,0)
(6879,6521,0)
(8585,4746,0)
(184,65,0)
(8210,5048,0)
(6159,3768,0)
(5133,4963,0)
(7807,6564,0)
(956,7539,0)
(372,6253,0)
(5872,1847,0)
(3370,7594,0)
(5759,8924,0)
(439,7338,0)
(7785,3109,0)
(730,2652,0)
(7112,4847,0)
(1083,764,0)
(3494,3471,0)
(7077,6503,0)
(743,4439,0)
(1941,1690,0)
(2705,4322,0)
(1575,5061,0)
(8997,851,0)
(5799,5061,0)
(6173,7407,0)
(9036,4027,0)
(7326,8566,0)
(601,5329,0)
(632,8858,0)
(5229,335,0)
(6418,5061,0)
(9104,7733,0)
(62,1131,0)
(8632,5818,0)
(1618,6311,0)
(2499,8159,0)
(7473,1067,0)
(8506,6565,0)
(8111,5097,0)
(1899,4459,0)
(3490,5413,0)
(7,4396,0)
(3246,6636,0)
(7544,3312,0)
(3921,4061,0)
(4104,4636,0)
(2006,4263,0)
(8179,2418,0)
(6541,8302,0)
(5559,7191,0)
(409,7888,0)
(7805,5656,0)
(861,24,0)
(147,5825,0)
(6783,1695,0)
(7487,3245,0)
(4731,8566,0)
(6785,507,0)
(261,8673,0)
(7155,3696,0)
(8941,4883,0)
(2383,8566,0)
(2858,1205,0)
(3000,5965,0)
(7379,253,0)
(485,803,0)
(5916,243,0)
(4216,4965,0)
(8379,6255,0)
(8453,6460,0)
(5738,3611,0)
(1548,6572,0)
(1990,8534,0)
(7543,6183,0)
(8733,6001,0)
(5164,6388,0)
(8025,7171,0)
(3925,7779,0)
(9015,2022,0)
(5384,5061,0)
(8653,3113,0)
(5433,9086,0)
(4393,4612,0)
(337,1683,0)
(3286,181,0)
(3068,1774,0)
(6902,1646,0)
(702,6768,0)
(5927,1602,0)
(3391,3841,0)
(2608,3725,0)
(5608,5061,0)
(2645,5574,0)
(2263,4616,0)
(7760,8564,0)
(6967,8566,0)
(788,8127,0)
(5786,299,0)
(6928,1695,0)
(992,2929,0)
(3017,3140,0)
(8666,3846,0)
(2424,3241,0)
(8257,2687,0)
(5676,5687,0)
(5065,7425,0)
(2074,6558,0)
(1775,2388,0)
(8925,8676,0)
(8442,565,0)
(7644,2165,0)
(6163,4089,0)
(4570,5061,0)
(8991,3867,0)
(7644,8703,0)
(4687,5061,0)
(1555,5852,0)
(8665,3054,0)
(8972,5061,0)
(4387,7786,0)
(1774,8566,0)
(7894,6139,0)
(3477,4245,0)
(7450,8601,0)
(8638,5937,0)
(5832,3244,0)
(3834,197,0)
(2808,658,0)
(7746,30,0)
(3037,1636,0)
(7662,2690,0)
(5719,4487,0)
(6959,6880,0)
(6500,7024,0)
(6722,2850,0)
(7669,597,0)
(3446,8673,0)
(6918,8680,0)
(2658,7685,0)
(7697,9148,0)
(1596,1055,0)
(9104,2165,0)
(3053,8566,0)
(5545,1881,0)
(8947,4010,0)
(6249,6228,0)
(1130,8244,0)
(4560,7222,0)
(8837,8729,0)
(8262,3505,0)
(6685,6370,0)
(3381,3336,0)
(3908,8566,0)
(3129,8309,0)
(1046,6491,0)
(8485,5005,0)
(674,2820,0)
(8306,994,0)
(5870,8566,0)
(2197,4695,0)
(2900,8905,0)
(4362,4250,0)
(8143,1193,0)
(5039,1850,0)
(9078,8673,0)
(6730,7846,0)
(7644,5599,0)
(8320,8294,0)
(4918,5279,0)
(2351,4420,0)
(3814,6676,0)
(4550,1415,0)
(4872,8566,0)
(412,6413,0)
(8848,3092,0)
(2388,6670,0)
(7265,5960,0)
(5244,5847,0)
(3178,5048,0)
(8216,8566,0)
(334,4176,0)
(3090,1492,0)
(7041,1064,0)
(9097,724,0)
(5865,344,0)
(8275,8022,0)
(5009,3806,0)
(1641,161,0)
(4641,8993,0)
(8545,8874,0)
(3899,560,0)
(6547,2948,0)
(4629,1566,0)
(4889,6359,0)
(8319,2836,0)
(6063,1217,0)
(2563,150,0)
(3434,1695,0)
(7604,7754,0)
(4771,968,0)
(6377,1225,0)
(771,161,0)
(5495,2217,0)
(2500,9084,0)
(4827,6486,0)
(124,3413,0)
(7745,4206,0)
(2863,5061,0)
(4198,2803,0)
(3149,8825,0)
(5317,6847,0)
(7853,3894,0)
(4012,8417,0)
(8275,4533,0)
(677,3787,0)
(7646,5503,0)
(1101,939,0)
(5661,8566,0)
(7358,717,0)
(4201,7541,0)
(1706,1006,0)
(1955,927,0)
(7816,862,0)
(1546,2475,0)
(6506,2231,0)
(2210,5061,0)
(3958,1479,0)
(3274,3221,0)
(5888,3420,0)
(6826,5189,0)
(7582,5450,0)
(1705,7587,0)
(8773,4953,0)
(2311,4861,0)
(8032,8566,0)
(1388,1919,0)
(7023,8662,0)
(9104,5599,0)
(5839,6279,0)
(6986,6968,0)
(5357,3630,0)
(8522,4875,0)
(8410,5546,0)
(9151,120,0)
(3758,5209,0)
(989,6832,0)
(5272,8773,0)
(2611,447,0)
(7259,7412,0)
(7095,6201,0)
(660,3896,0)
(7127,153,0)
(3548,254,0)
(2138,8911,0)
(1373,5061,0)
(5262,6474,0)
(6727,8157,0)
(401,8248,0)
(7378,4864,0)
(1026,2048,0)
(3859,4285,0)
(1412,95,0)
(5373,6754,0)
(3769,1766,0)
(2527,5705,0)
(220,5073,0)
(2660,8673,0)
(3397,8234,0)
(987,7805,0)
(8477,5384,0)
(7046,9027,0)
(6119,8126,0)
(6781,891,0)
(2592,5061,0)
(6970,641,0)
(4565,1854,0)
(3970,5165,0)
(2398,8003,0)
(5866,5683,0)
(7831,8025,0)
(1130,2304,0)
(9090,1954,0)
(727,7235,0)
(1337,342,0)
(3250,3806,0)
(3240,8566,0)
(2453,4650,0)
(5153,1443,0)
(1920,2220,0)
(2709,1656,0)
(5710,5115,0)
(6207,3822,0)
(5835,3156,0)
(3704,1892,0)
(2820,5061,0)
(3881,4840,0)
(4586,3055,0)
(5402,5197,0)
(5458,3687,0)
(691,8566,0)
(6008,8566,0)
(4664,8566,0)
(2223,1917,0)
(42,8729,0)
(2888,7383,0)
(2976,2398,0)
(5559,4134,0)
(1736,2152,0)
(5062,674,0)
(747,8911,0)
(8060,1702,0)
(2645,6382,0)
(450,3787,0)
(8851,7443,0)
(6619,75,0)
(5104,8673,0)
(8354,2649,0)
(7001,4369,0)
(320,5348,0)
(4097,7727,0)
(7877,221,0)
(6044,4930,0)
(4625,5037,0)
(3570,6982,0)
(3043,2485,0)
(8578,6468,0)
(1446,5905,0)
(5346,5899,0)
(5205,5599,0)
(5127,1270,0)
(818,2124,0)
(6276,2777,0)
(5378,3139,0)
(4976,6520,0)
(3955,5105,0)
(3701,8566,0)
(5691,7291,0)
(3365,6443,0)
(1577,7168,0)
(8136,5799,0)
(4470,244,0)
(3256,4952,0)
(2945,7510,0)
(1673,8566,0)
(8793,3055,0)
(2738,8566,0)
(3426,5121,0)
(4850,4370,0)
(5647,4182,0)
(8313,8700,0)
(2137,1441,0)
(6570,5937,0)
(4754,3291,0)
(5690,4062,0)
(5246,2173,0)
(344,8399,0)
(3826,7158,0)
(7926,5899,0)
(8970,1108,0)
(5628,7112,0)
(3620,4663,0)
(3955,1735,0)
(5148,5544,0)
(3103,6581,0)
(1458,8013,0)
(6816,2293,0)
(4662,4901,0)
(8443,7496,0)
(2447,297,0)
(4926,4309,0)
(6635,5061,0)
(2942,1791,0)
(6756,6528,0)
(1704,819,0)
(3619,3683,0)
(1624,8138,0)
(3670,3169,0)
(4245,3477,0)
(1544,6743,0)
(1887,2624,0)
(3608,7293,0)
(8109,5662,0)
(8181,7476,0)
(2788,185,0)
(7119,8566,0)
(7341,6512,0)
(5359,1641,0)
(5305,3520,0)
(653,1659,0)
(1158,3997,0)
(5718,9148,0)
(3625,4615,0)
(7835,721,0)
(1520,5079,0)
(1250,2883,0)
(1500,6474,0)
(8308,8930,0)
(3089,6312,0)
(5871,7759,0)
(6416,7464,0)
(6463,1870,0)
(5667,5061,0)
(3043,2165,0)
(8121,6714,0)
(6505,5470,0)
(6812,5032,0)
(8010,3646,0)
(5307,7308,0)
(7032,7603,0)
(2974,2033,0)
(4972,8142,0)
(4369,8566,0)
(823,6760,0)
(4452,5316,0)
(5148,1870,0)
(5891,2179,0)
(5744,7425,0)
(1902,646,0)
(5506,1645,0)
(657,1963,0)
(3893,5774,0)
(2394,593,0)
(2806,3551,0)
(3198,2069,0)
(1942,2184,0)
(5157,8566,0)
(16,8252,0)
(4072,793,0)
(92,8566,0)
(6853,2649,0)
(80,8833,0)
(3917,3675,0)
(6321,2068,0)
(8168,6705,0)
(5464,8769,0)
(5163,2663,0)
(7748,2309,0)
(5148,5599,0)
(8127,788,0)
(5039,8566,0)
(3454,7308,0)
(637,3598,0)
(878,4208,0)
(3778,6780,0)
(3471,3494,0)
(122,7683,0)
(2014,5572,0)
(6964,1349,0)
(5807,3204,0)
(2584,2496,0)
(3581,3744,0)
(7218,5212,0)
(8582,5899,0)
(4927,9134,0)
(6382,2837,0)
(2199,3106,0)
(5636,2062,0)
(7365,4745,0)
(5172,5061,0)
(8075,2187,0)
(2354,8500,0)
(7544,8461,0)
(5105,2511,0)
(6675,5937,0)
(2661,744,0)
(5401,5937,0)
(3394,3546,0)
(6605,1306,0)
(6351,9126,0)
(4035,7884,0)
(7397,4854,0)
(3842,5579,0)
(8141,213,0)
(7025,5061,0)
(4871,6847,0)
(2120,4990,0)
(7645,1078,0)
(4219,5419,0)
(8778,8764,0)
(47,8523,0)
(3096,1053,0)
(1239,2374,0)
(2584,7358,0)
(5148,2165,0)
(2107,604,0)
(4474,11,0)
(1757,4429,0)
(8283,111,0)
(2957,3241,0)
(7034,8923,0)
(3861,4751,0)
(4004,6139,0)
(2994,6887,0)
(6401,8866,0)
(7531,2322,0)
(3934,7049,0)
(8398,1695,0)
(6763,4499,0)
(2291,7571,0)
(8978,4001,0)
(7787,6050,0)
(3407,8566,0)
(2222,9021,0)
(3516,8520,0)
(8360,5449,0)
(516,3617,0)
(5916,3808,0)
(1772,7684,0)
(1486,2690,0)
(3006,6296,0)
(8004,3335,0)
(7774,578,0)
(6192,8913,0)
(616,4192,0)
(1354,2381,0)
(404,1370,0)
(341,3420,0)
(3312,8850,0)
(7706,2865,0)
(3939,1633,0)
(895,5061,0)
(7656,7116,0)
(629,8455,0)
(2288,9122,0)
(2962,704,0)
(2523,6893,0)
(7088,885,0)
(0,8227,0)
(1410,2888,0)
(9104,8966,0)
(4822,5228,0)
(8805,7396,0)
(4397,851,0)
(8132,260,0)
(7854,5544,0)
(1556,1960,0)
(265,2575,0)
(8640,6486,0)
(982,4233,0)
(393,7452,0)
(1234,7430,0)
(9104,4342,0)
(4512,8566,0)
(1075,2984,0)
(5255,5423,0)
(3455,1275,0)
(827,2429,0)
(3633,3693,0)
(2645,1071,0)
(4913,6570,0)
(3720,4798,0)
(4619,6047,0)
(52,7355,0)
(3840,1924,0)
(7539,3139,0)
(6871,2965,0)
(5151,1025,0)
(7343,2039,0)
(162,8985,0)
(430,7171,0)
(111,2532,0)
(2645,3647,0)
(4970,5118,0)
(7601,8673,0)
(926,755,0)
(3099,3359,0)
(3251,3185,0)
(2917,6547,0)
(5787,4446,0)
(3691,6129,0)
(4331,8566,0)
(7015,2277,0)
(8309,6141,0)
(4942,889,0)
(2504,7307,0)
(8175,6726,0)
(6920,6162,0)
(1702,7724,0)
(3045,8023,0)
(6430,3712,0)
(3203,613,0)
(7222,5194,0)
(3557,5431,0)
(3665,8790,0)
(8012,7110,0)
(6042,4369,0)
(4323,4923,0)
(6434,6253,0)
(1384,2447,0)
(3231,4304,0)
(1024,6920,0)
(7145,8520,0)
(8877,1189,0)
(829,258,0)
(2953,6817,0)
(2622,6382,0)
(5480,663,0)
(8171,2421,0)
(5642,2605,0)
(7406,3202,0)
(8167,7580,0)
(3279,5106,0)
(3677,8225,0)
(5676,1184,0)
(5950,2514,0)
(1753,5076,0)
(8242,8566,0)
(3552,5427,0)
(5894,7425,0)
(8787,3518,0)
(5253,137,0)
(8451,4755,0)
(5424,2090,0)
(5992,6408,0)
(4478,7700,0)
(1346,4713,0)
(3124,7962,0)
(1588,5897,0)
(2973,3078,0)
(2392,371,0)
(686,371,0)
(4490,1615,0)
(2650,2688,0)
(6319,1982,0)
(97,3356,0)
(2601,8566,0)
(541,1078,0)
(5950,5716,0)
(8564,4517,0)
(4858,6218,0)
(4702,817,0)
(5025,2878,0)
(5858,7915,0)
(4957,1982,0)
(3680,2806,0)
(8598,7024,0)
(4277,604,0)
(8616,8128,0)
(6966,4512,0)
(3867,3148,0)
(6452,8558,0)
(188,5619,0)
(759,3315,0)
(8827,7657,0)
(5945,6774,0)
(4246,2089,0)
(1461,7455,0)
(1072,4660,0)
(3101,1139,0)
(8094,4349,0)
(2701,8673,0)
(4669,7708,0)
(5222,7825,0)
(3955,9136,0)
(3054,1629,0)
(2490,206,0)
(6336,4427,0)
(2106,5061,0)
(7907,857,0)
(6566,4642,0)
(6118,5376,0)
(3185,8265,0)
(8413,9027,0)
(8692,6510,0)
(585,5937,0)
(5636,7619,0)
(9137,4402,0)
(7000,3482,0)
(5670,8268,0)
(1875,4173,0)
(6177,4916,0)
(2830,2069,0)
(5755,2276,0)
(1735,2165,0)
(801,606,0)
(4297,3871,0)
(5181,6715,0)
(6623,1039,0)
(3757,8824,0)
(7694,7611,0)
(1509,3827,0)
(7192,582,0)
(7439,8862,0)
(2720,4450,0)
(474,2028,0)
(1613,2485,0)
(1128,7332,0)
(6959,3116,0)
(7490,2242,0)
(6013,8240,0)
(1064,7041,0)
(4303,7779,0)
(8344,1198,0)
(7856,1274,0)
(7982,4392,0)
(792,5061,0)
(5094,2965,0)
(8071,5061,0)
(4515,3148,0)
(2745,2494,0)
(3029,8733,0)
(266,3533,0)
(381,6477,0)
(1894,7991,0)
(1653,5119,0)
(6243,4713,0)
(5527,8566,0)
(5148,8483,0)
(2328,9150,0)
(4357,6919,0)
(8611,8566,0)
(518,3420,0)
(1070,5086,0)
(5514,4306,0)
(8375,8566,0)
(6248,7196,0)
(7448,8939,0)
(1993,4629,0)
(4966,3559,0)
(354,2841,0)
(3692,2033,0)
(6863,5061,0)
(5951,2803,0)
(3130,4219,0)
(928,8673,0)
(2956,792,0)
(4252,5868,0)
(5701,3303,0)
(39,2128,0)
(5249,2025,0)
(5809,5527,0)
(5427,1939,0)
(3400,1517,0)
(5164,8244,0)
(3202,1695,0)
(1466,4897,0)
(3155,6758,0)
(2584,6382,0)
(4678,4521,0)
(2457,8703,0)
(2016,1939,0)
(8402,6720,0)
(9104,5380,0)
(3380,4551,0)
(7121,4761,0)
(8803,8673,0)
(1972,3840,0)
(8087,6570,0)
(7063,8466,0)
(1225,5803,0)
(5688,6589,0)
(4652,3588,0)
(1665,5428,0)
(6926,1254,0)
(2131,7896,0)
(8352,2326,0)
(4830,6900,0)
(1649,8673,0)
(2256,704,0)
(361,4623,0)
(7507,3982,0)
(5172,8566,0)
(3693,4057,0)
(7836,8566,0)
(4874,1954,0)
(2008,1280,0)
(9104,4558,0)
(1087,8216,0)
(9102,2777,0)
(911,588,0)
(5148,2870,0)
(3528,8769,0)
(7718,5334,0)
(5194,3202,0)
(3955,8175,0)
(3231,2165,0)
(5041,8334,0)
(7444,1057,0)
(4454,4613,0)
(8622,7723,0)
(4291,1192,0)
(2720,351,0)
(6583,1365,0)
(6315,8923,0)
(7347,2810,0)
(2280,4361,0)
(3013,597,0)
(8330,456,0)
(2916,2155,0)
(552,5061,0)
(4326,1596,0)
(3928,8031,0)
(4784,7119,0)
(2653,5580,0)
(2092,2332,0)
(7901,4195,0)
(3355,468,0)
(2558,8200,0)
(4550,1359,0)
(7759,8566,0)
(4869,65,0)
(2682,65,0)
(2923,3405,0)
(7522,1115,0)
(4445,3578,0)
(1821,6567,0)
(8719,6302,0)
(8781,4848,0)
(8085,2312,0)
(329,4247,0)
(8403,8887,0)
(1653,5061,0)
(8086,1320,0)
(7093,33,0)
(8771,112,0)
(6642,1819,0)
(9046,8566,0)
(9096,6597,0)
(5744,4400,0)
(7696,3614,0)
(8037,1362,0)
(8826,5417,0)
(7458,1596,0)
(8752,3973,0)
(1361,3148,0)
(9083,8502,0)
(9136,6340,0)
(4199,3009,0)
(4673,1474,0)
(8261,2396,0)
(7041,276,0)
(8508,3035,0)
(2409,7138,0)
(5115,5061,0)
(6820,6665,0)
(918,5061,0)
(4213,3461,0)
(1613,952,0)
(3902,795,0)
(7457,4354,0)
(581,6051,0)
(9067,6960,0)
(4541,5061,0)
(5353,6679,0)
(6817,2953,0)
(1207,8802,0)
(3670,5061,0)
(315,7324,0)
(6099,3099,0)
(8268,5670,0)
(1839,3821,0)
(8073,8673,0)
(6501,2485,0)
(1262,5532,0)
(6287,800,0)
(181,824,0)
(448,8566,0)
(410,3826,0)
(4122,4030,0)
(3600,1291,0)
(2778,5670,0)
(2289,2855,0)
(8162,4347,0)
(4188,8464,0)
(3140,8566,0)
(3648,8333,0)
(933,891,0)
(2845,3198,0)
(4786,6673,0)
(3442,8355,0)
(431,1892,0)
(7390,5809,0)
(2267,1520,0)
(3392,7603,0)
(336,8473,0)
(621,6553,0)
(369,4210,0)
(4460,7705,0)
(7968,1670,0)
(5057,5119,0)
(306,8826,0)
(3476,595,0)
(1312,7855,0)
(4711,4906,0)
(8384,7540,0)
(7498,4745,0)
(826,3701,0)
(2676,1562,0)
(1416,6281,0)
(7054,3535,0)
(3549,4198,0)
(2855,2289,0)
(3110,1009,0)
(5323,4837,0)
(2126,8566,0)
(4670,2152,0)
(6444,4620,0)
(7692,8566,0)
(8387,3832,0)
(9131,3216,0)
(2458,8673,0)
(1464,4459,0)
(351,5937,0)
(1853,7804,0)
(5105,7425,0)
(5386,385,0)
(8312,764,0)
(4291,7223,0)
(1404,7063,0)
(5137,1663,0)
(4984,585,0)
(3364,8077,0)
(7422,8904,0)
(1483,2104,0)
(4743,2727,0)
(5432,9119,0)
(3445,6489,0)
(3531,665,0)
(918,3725,0)
(2565,8673,0)
(1484,4331,0)
(1228,6426,0)
(6963,6710,0)
(3409,9012,0)
(8008,6011,0)
(4474,592,0)
(3515,8364,0)
(1993,7583,0)
(1062,403,0)
(9000,5132,0)
(5421,4040,0)
(1659,653,0)
(5645,2841,0)
(2061,7734,0)
(6073,7025,0)
(5628,1070,0)
(1160,1695,0)
(7977,1307,0)
(8232,1802,0)
(8153,8386,0)
(2602,7881,0)
(6731,716,0)
(5453,3924,0)
(6439,7083,0)
(4298,3148,0)
(7998,5148,0)
(4121,2022,0)
(3836,768,0)
(8706,5020,0)
(8220,3461,0)
(8676,9138,0)
(6383,8208,0)
(2528,5838,0)
(6286,890,0)
(3051,4848,0)
(7644,2870,0)
(558,6868,0)
(7734,5061,0)
(8031,3928,0)
(1633,2267,0)
(8670,2028,0)
(7658,6780,0)
(4789,5061,0)
(3124,7425,0)
(5943,1598,0)
(875,8566,0)
(3955,1613,0)
(5105,8703,0)
(7286,5164,0)
(1658,5663,0)
(7049,3583,0)
(2584,7962,0)
(212,2326,0)
(8214,5430,0)
(5047,4349,0)
(4400,8962,0)
(584,1230,0)
(5287,3861,0)
(7122,3719,0)
(4372,5061,0)
(4418,895,0)
(6157,8566,0)
(6114,3502,0)
(6878,6920,0)
(1217,9113,0)
(2903,4515,0)
(7191,6279,0)
(5250,6074,0)
(3773,7692,0)
(1552,8566,0)
(3501,5484,0)
(7918,6481,0)
(4085,2884,0)
(6054,5639,0)
(7481,496,0)
(9146,8887,0)
(8347,1950,0)
(1702,4778,0)
(17,4836,0)
(6836,5312,0)
(7291,8093,0)
(998,5061,0)
(571,267,0)
(6257,4952,0)
(7142,7986,0)
(3095,5014,0)
(654,5106,0)
(7524,3129,0)
(8192,6470,0)
(4689,5072,0)
(6374,5103,0)
(4359,942,0)
(8611,1020,0)
(152,5061,0)
(8616,8566,0)
(2479,4581,0)
(8406,6510,0)
(5787,5979,0)
(7285,3018,0)
(442,3022,0)
(3033,6086,0)
(1324,1782,0)
(1797,9126,0)
(8563,7389,0)
(7160,2474,0)
(7442,4962,0)
(2782,6162,0)
(2671,1051,0)
(4806,6605,0)
(3546,2760,0)
(5611,4601,0)
(3971,5315,0)
(65,139,0)
(8011,1527,0)
(640,7406,0)
(2304,1130,0)
(639,6680,0)
(5532,1262,0)
(7234,521,0)
(8683,2657,0)
(7631,7536,0)
(2058,206,0)
(7580,5061,0)
(762,8255,0)
(6206,1641,0)
(6912,4187,0)
(5067,2599,0)
(3707,5698,0)
(1366,92,0)
(8105,2887,0)
(7534,5250,0)
(817,4424,0)
(1676,5182,0)
(1578,4947,0)
(1310,3928,0)
(6524,3825,0)
(8481,1554,0)
(5734,5877,0)
(2089,4246,0)
(3536,5061,0)
(8913,8293,0)
(1004,3101,0)
(2847,2170,0)
(622,5061,0)
(5343,5061,0)
(2175,1695,0)
(5347,2383,0)
(5818,2142,0)
(2497,3305,0)
(5105,2485,0)
(2432,883,0)
(3662,122,0)
(3235,6919,0)
(5026,5295,0)
(6677,1192,0)
(1563,5061,0)
(9008,5874,0)
(5287,829,0)
(1431,2028,0)
(8920,8427,0)
(981,8673,0)
(3334,2969,0)
(7740,2294,0)
(8010,7534,0)
(5622,1728,0)
(2645,6826,0)
(6347,2574,0)
(7309,4751,0)
(8834,3875,0)
(978,1225,0)
(2723,7326,0)
(3508,7431,0)
(1613,7962,0)
(4977,6023,0)
(2786,6751,0)
(6910,5132,0)
(2360,3731,0)
(5534,7557,0)
(4550,7357,0)
(7710,3911,0)
(8325,6809,0)
(7905,1454,0)
(201,61,0)
(3841,5752,0)
(7794,6768,0)
(1974,737,0)
(4631,524,0)
(434,8566,0)
(7193,5184,0)
(641,2187,0)
(4845,550,0)
(2645,8703,0)
(3282,8746,0)
(889,2998,0)
(1977,6887,0)
(4610,3231,0)
(6662,8566,0)
(8424,8071,0)
(678,806,0)
(5279,4918,0)
(5164,6759,0)
(2234,3332,0)
(533,819,0)
(6716,3825,0)
(1919,4296,0)
(3681,5731,0)
(4627,6678,0)
(2053,3368,0)
(5566,4370,0)
(803,6510,0)
(782,8764,0)
(980,8566,0)
(1505,5061,0)
(838,1529,0)
(5375,5415,0)
(7517,3085,0)
(6701,5986,0)
(5653,3436,0)
(2220,8566,0)
(1322,2278,0)
(2540,8889,0)
(5452,2303,0)
(3610,643,0)
(3237,8566,0)
(3787,5061,0)
(5508,6774,0)
(8959,8779,0)
(8618,9022,0)
(5019,7623,0)
(3337,2302,0)
(4462,5716,0)
(2784,8966,0)
(3113,7027,0)
(5821,6714,0)
(2273,6237,0)
(3787,8566,0)
(4,4144,0)
(1181,193,0)
(256,2485,0)
(1569,2713,0)
(5472,276,0)
(6941,3412,0)
(3422,4503,0)
(1897,3474,0)
(5841,127,0)
(7296,821,0)
(6153,7418,0)
(3563,8417,0)
(2465,8904,0)
(5899,5346,0)
(5920,2692,0)
(4224,8947,0)
(5842,3042,0)
(6164,2763,0)
(3813,6270,0)
(7126,6031,0)
(5408,5066,0)
(8670,7250,0)
(5642,65,0)
(4816,7294,0)
(6118,8566,0)
(7234,2974,0)
(7330,3865,0)
(8422,700,0)
(2457,4400,0)
(1580,8818,0)
(902,3717,0)
(4296,3466,0)
(5014,7412,0)
(832,5114,0)
(4633,4114,0)
(7070,5802,0)
(4981,5061,0)
(7837,7823,0)
(8628,3153,0)
(8351,2675,0)
(6521,9126,0)
(1626,1815,0)
(7156,1315,0)
(3876,8735,0)
(7927,2919,0)
(4928,1663,0)
(819,533,0)
(3658,2269,0)
(8264,5061,0)
(4013,1796,0)
(5244,8566,0)
(4796,5714,0)
(4417,2649,0)
(4635,3477,0)
(1448,4040,0)
(6565,4501,0)
(2610,8939,0)
(5708,1270,0)
(3159,3781,0)
(540,8782,0)
(4492,5840,0)
(1934,7613,0)
(5296,8287,0)
(6987,2345,0)
(110,1774,0)
(2140,6067,0)
(6254,764,0)
(4372,5949,0)
(1521,6309,0)
(8383,5519,0)
(7750,5061,0)
(164,8566,0)
(5192,9109,0)
(5679,3469,0)
(523,1379,0)
(3109,5061,0)
(5004,8188,0)
(3329,5937,0)
(2259,7517,0)
(845,1839,0)
(5687,5676,0)
(130,243,0)
(7359,95,0)
(6459,7793,0)
(7435,4143,0)
(1284,8520,0)
(3124,4642,0)
(4546,1876,0)
(5082,3366,0)
(6584,6055,0)
(371,1876,0)
(8566,5244,0)
(1688,8673,0)
(8725,5028,0)
(6870,7488,0)
(8495,1753,0)
(1581,2028,0)
(3180,7810,0)
(1067,3153,0)
(8424,6805,0)
(2882,2775,0)
(2385,7364,0)
(5540,5381,0)
(3119,4319,0)
(5694,576,0)
(2597,6294,0)
(2691,4701,0)
(1364,8117,0)
(4431,5217,0)
(7937,8566,0)
(5132,5061,0)
(264,8765,0)
(8785,5649,0)
(3708,2479,0)
(5900,127,0)
(1458,7309,0)
(7128,8566,0)
(1014,3481,0)
(7185,8566,0)
(5870,5061,0)
(7960,868,0)
(4573,8566,0)
(2155,8054,0)
(6733,3593,0)
(8601,7450,0)
(8602,4486,0)
(6124,4078,0)
(4641,3485,0)
(8113,2060,0)
(6228,4319,0)
(6996,1203,0)
(5214,5231,0)
(7830,7271,0)
(3864,1262,0)
(6694,5061,0)
(1395,2805,0)
(7523,7388,0)
(7726,5061,0)
(3242,2398,0)
(4773,2534,0)
(13,793,0)
(2449,2600,0)
(8725,3875,0)
(3150,1390,0)
(6589,5672,0)
(6406,401,0)
(1604,8754,0)
(7701,8673,0)
(4199,8566,0)
(6634,8651,0)
(8802,3253,0)
(6677,3717,0)
(5778,4347,0)
(552,7068,0)
(3142,4248,0)
(3019,8818,0)
(3930,8566,0)
(3867,2777,0)
(6673,2386,0)
(1785,3236,0)
(3227,8885,0)
(1802,7470,0)
(1420,8401,0)
(3985,8607,0)
(8815,3552,0)
(2331,8566,0)
(7079,155,0)
(5105,6940,0)
(700,8422,0)
(4981,8566,0)
(5509,6121,0)
(1371,8649,0)
(2057,8566,0)
(8866,3944,0)
(6003,1335,0)
(7841,3831,0)
(1590,7373,0)
(963,6276,0)
(1831,9120,0)
(6892,4612,0)
(2756,2939,0)
(6866,455,0)
(2737,544,0)
(3085,1673,0)
(6220,5063,0)
(4697,5286,0)
(3944,5061,0)
(2924,1589,0)
(8538,4931,0)
(9014,155,0)
(7297,1679,0)
(1954,1070,0)
(2167,7378,0)
(1687,2601,0)
(2877,1373,0)
(315,3202,0)
(3690,6963,0)
(7416,8035,0)
(1056,8335,0)
(6246,7685,0)
(6489,1192,0)
(4145,3540,0)
(8199,8316,0)
(8255,762,0)
(3957,5957,0)
(2614,5318,0)
(7539,2033,0)
(6951,7685,0)
(6479,8421,0)
(7458,2366,0)
(4160,6873,0)
(3589,2600,0)
(2645,154,0)
(2613,8627,0)
(6247,778,0)
(7106,5343,0)
(1468,6808,0)
(7304,5509,0)
(1789,6215,0)
(5012,6939,0)
(5170,631,0)
(2792,6689,0)
(2336,3148,0)
(4606,8566,0)
(569,2274,0)
(8082,5427,0)
(3222,8162,0)
(7280,5922,0)
(6014,6086,0)
(4423,4712,0)
(7776,258,0)
(954,7885,0)
(6918,355,0)
(2799,3685,0)
(4765,6440,0)
(5662,8109,0)
(6930,6826,0)
(6316,8855,0)
(6926,1035,0)
(5454,8980,0)
(3030,4989,0)
(1739,6670,0)
(4668,5937,0)
(3907,3707,0)
(5309,3767,0)
(8567,2882,0)
(5320,4798,0)
(3974,7338,0)
(8417,1152,0)
(2471,3231,0)
(495,8688,0)
(6769,8309,0)
(5079,1520,0)
(346,1695,0)
(5580,2653,0)
(319,2469,0)
(3939,7497,0)
(7357,4550,0)
(8106,2271,0)
(2142,7051,0)
(3543,8083,0)
(9104,3007,0)
(8431,8311,0)
(4733,4030,0)
(8243,5607,0)
(5257,1403,0)
(2393,5569,0)
(8411,7685,0)
(4768,6218,0)
(1277,4109,0)
(4237,3231,0)
(2421,6320,0)
(1937,2202,0)
(7845,3259,0)
(4281,7733,0)
(3110,7299,0)
(3040,1306,0)
(4026,8596,0)
(7396,8805,0)
(7402,331,0)
(6059,9060,0)
(6096,2566,0)
(1225,8579,0)
(7058,5718,0)
(2826,484,0)
(4319,6228,0)
(5392,7877,0)
(5512,8673,0)
(8488,560,0)
(5513,6452,0)
(4070,184,0)
(5887,1851,0)
(6374,7596,0)
(4304,8330,0)
(2787,403,0)
(401,1080,0)
(2106,8566,0)
(8160,6022,0)
(7990,494,0)
(7517,6125,0)
(993,276,0)
(1327,3911,0)
(49,8651,0)
(4104,7459,0)
(6993,6543,0)
(7721,8244,0)
(851,4397,0)
(3540,4145,0)
(4546,7727,0)
(7377,1504,0)
(1283,2214,0)
(7110,1191,0)
(2699,438,0)
(345,1695,0)
(3816,1702,0)
(8654,1176,0)
(3996,8566,0)
(959,8244,0)
(3080,3413,0)
(5138,2864,0)
(5910,4428,0)
(8225,5937,0)
(723,992,0)
(848,1781,0)
(7912,8519,0)
(8790,3665,0)
(2060,1641,0)
(6053,4958,0)
(2459,4801,0)
(7754,1651,0)
(3235,2344,0)
(1308,5989,0)
(1735,6211,0)
(3792,2805,0)
(3979,65,0)
(4638,3990,0)
(6305,2612,0)
(537,8995,0)
(3897,340,0)
(4577,1457,0)
(4521,4678,0)
(857,8566,0)
(470,8673,0)
(4273,8566,0)
(1454,6791,0)
(2692,5726,0)
(6952,567,0)
(4237,4402,0)
(3393,8901,0)
(5260,5570,0)
(6003,760,0)
(9034,3217,0)
(1499,325,0)
(1438,8066,0)
(2201,5250,0)
(2314,2724,0)
(3147,2039,0)
(3437,2870,0)
(2295,861,0)
(1829,8806,0)
(3012,3310,0)
(927,1658,0)
(618,5766,0)
(3074,867,0)
(1173,8241,0)
(301,1181,0)
(8244,6110,0)
(6045,6967,0)
(2559,711,0)
(4424,5402,0)
(3564,7467,0)
(5661,5061,0)
(9117,1839,0)
(4735,166,0)
(8706,7358,0)
(899,8566,0)
(3369,8251,0)
(5237,8930,0)
(269,249,0)
(8846,355,0)
(3868,5532,0)
(3961,8355,0)
(2024,4367,0)
(5649,8785,0)
(516,9092,0)
(1726,5111,0)
(2915,3940,0)
(8431,2210,0)
(6900,127,0)
(6379,3187,0)
(9020,3899,0)
(8215,8138,0)
(1068,7756,0)
(6154,5628,0)
(1278,1876,0)
(3283,216,0)
(4181,2751,0)
(2689,1692,0)
(5248,6699,0)
(8685,3825,0)
(6495,6137,0)
(8063,2717,0)
(7267,7195,0)
(5337,5954,0)
(3137,8123,0)
(2184,8177,0)
(8765,456,0)
(876,539,0)
(3132,8673,0)
(7116,1507,0)
(6186,1814,0)
(2371,20,0)
(4176,334,0)
(7565,7272,0)
(4236,9077,0)
(4206,7745,0)
(3043,8703,0)
(8910,3362,0)
(4611,4729,0)
(6525,5627,0)
(2694,8355,0)
(7849,4400,0)
(2502,2812,0)
(7380,9098,0)
(6636,1876,0)
(5482,5940,0)
(931,4606,0)
(7206,8534,0)
(657,5346,0)
(2268,3725,0)
(5063,8566,0)
(1916,6777,0)
(8223,619,0)
(1990,6768,0)
(1564,8713,0)
(4639,7747,0)
(3576,2808,0)
(5750,715,0)
(8068,1608,0)
(7869,3688,0)
(7440,4345,0)
(824,8566,0)
(8356,6768,0)
(8561,3376,0)
(8498,6556,0)
(5398,7735,0)
(3571,3205,0)
(7034,3202,0)
(1879,6817,0)
(6567,258,0)
(6847,4871,0)
(7157,1413,0)
(8005,6314,0)
(2481,8499,0)
(2080,1906,0)
(1174,5927,0)
(4383,6442,0)
(4701,2691,0)
(6737,5614,0)
(1985,1224,0)
(4859,8566,0)
(5106,3092,0)
(959,8566,0)
(8052,7355,0)
(351,2720,0)
(7500,2592,0)
(8529,7159,0)
(3361,8566,0)
(4700,7110,0)
(1463,7468,0)
(7209,20,0)
(2411,867,0)
(4015,6926,0)
(118,3772,0)
(8111,3692,0)
(6596,4958,0)
(5966,3932,0)
(5379,5841,0)
(1504,7377,0)
(3474,8197,0)
(5612,2687,0)
(2942,5378,0)
(2087,5731,0)
(7035,1204,0)
(9100,6182,0)
(614,1309,0)
(4522,1180,0)
(5743,6204,0)
(768,3598,0)
(4745,3148,0)
(7625,6481,0)
(260,8132,0)
(3846,1271,0)
(2852,5405,0)
(7893,8312,0)
(2476,613,0)
(7787,6759,0)
(2372,1653,0)
(831,3219,0)
(4195,9061,0)
(3303,5701,0)
(4750,8473,0)
(5940,6460,0)
(8177,2184,0)
(2486,122,0)
(1164,1639,0)
(4538,940,0)
(1397,2157,0)
(6420,3930,0)
(2052,4060,0)
(6441,5428,0)
(4144,1138,0)
(7048,5245,0)
(6950,7089,0)
(7080,3135,0)
(5782,7962,0)
(7541,7005,0)
(8894,1552,0)
(7549,4978,0)
(4233,7398,0)
(4187,6620,0)
(8816,2137,0)
(6419,7649,0)
(8884,4618,0)
(1679,5061,0)
(2107,3820,0)
(2998,6334,0)
(1495,1307,0)
(3311,2260,0)
(9027,6960,0)
(5270,5061,0)
(3809,6572,0)
(8232,4079,0)
(6092,1692,0)
(7987,7994,0)
(2586,5212,0)
(621,5748,0)
(516,6047,0)
(8807,3783,0)
(7557,4562,0)
(4778,4718,0)
(3791,3146,0)
(3561,5937,0)
(3781,8566,0)
(2629,8347,0)
(1086,5418,0)
(7342,4379,0)
(2764,7929,0)
(1576,1230,0)
(8368,8144,0)
(3728,3204,0)
(8591,1823,0)
(7560,7696,0)
(5431,4118,0)
(8441,3748,0)
(716,2952,0)
(7293,3608,0)
(8292,3137,0)
(2271,5682,0)
(2846,4459,0)
(1559,4515,0)
(2020,2447,0)
(9093,4585,0)
(1868,15,0)
(6555,8566,0)
(3092,5106,0)
(1523,3165,0)
(4050,4128,0)
(3429,2411,0)
(6452,1690,0)
(2261,6720,0)
(144,5626,0)
(8271,8147,0)
(7430,8566,0)
(535,7465,0)
(6259,8161,0)
(7937,1434,0)
(3812,7141,0)
(5800,5465,0)
(6297,8408,0)
(7679,3005,0)
(8479,7394,0)
(2451,4767,0)
(6170,8673,0)
(3593,1279,0)
(7445,4447,0)
(4554,8634,0)
(6876,5800,0)
(6079,8421,0)
(1648,3108,0)
(5955,1505,0)
(5312,6836,0)
(72,9126,0)
(539,876,0)
(8077,3203,0)
(514,8254,0)
(7587,1705,0)
(7983,3403,0)
(5590,8028,0)
(2811,3148,0)
(3459,897,0)
(8628,8566,0)
(4078,2397,0)
(5398,2893,0)
(1494,7137,0)
(7357,5757,0)
(7817,2853,0)
(5762,343,0)
(4154,6777,0)
(4179,8814,0)
(8317,6403,0)
(4818,7726,0)
(4709,6751,0)
(2307,5937,0)
(5720,1486,0)
(4948,3148,0)
(5161,6623,0)
(5563,7081,0)
(4449,4994,0)
(3011,975,0)
(4256,3026,0)
(4930,8566,0)
(5290,752,0)
(7477,982,0)
(4649,4062,0)
(4089,2375,0)
(1023,3196,0)
(8706,2496,0)
(7096,8673,0)
(902,5061,0)
(3787,5414,0)
(2939,7684,0)
(1566,4629,0)
(3164,5061,0)
(5220,7869,0)
(8957,4653,0)
(6796,2656,0)
(8350,4555,0)
(7962,5782,0)
(3768,4043,0)
(2434,3074,0)
(8857,107,0)
(991,1241,0)
(5847,5244,0)
(552,8566,0)
(1088,6462,0)
(2801,902,0)
(8700,8039,0)
(7280,4668,0)
(61,4646,0)
(5345,9048,0)
(5105,876,0)
(3038,5088,0)
(3696,2869,0)
(3797,1327,0)
(3230,2587,0)
(1858,8960,0)
(5654,8225,0)
(3009,1097,0)
(1565,8566,0)
(2834,5061,0)
(3640,6107,0)
(5081,4599,0)
(7432,8327,0)
(5528,728,0)
(9098,7380,0)
(2015,3660,0)
(5607,808,0)
(4955,4175,0)
(1282,4983,0)
(6566,7358,0)
(2659,3336,0)
(5577,8962,0)
(4117,3010,0)
(2867,1665,0)
(1226,1695,0)
(1481,6928,0)
(5261,364,0)
(7501,1046,0)
(5979,5061,0)
(267,1152,0)
(5313,2338,0)
(2176,1995,0)
(258,8180,0)
(5668,6064,0)
(1193,5061,0)
(4161,3135,0)
(5748,708,0)
(2340,5068,0)
(2475,1546,0)
(7658,5462,0)
(7793,8566,0)
(8743,5061,0)
(2403,4214,0)
(1268,4422,0)
(3967,3822,0)
(5155,3418,0)
(8885,6261,0)
(1511,8824,0)
(8248,401,0)
(8667,6265,0)
(5465,4499,0)
(7661,7683,0)
(8080,6065,0)
(1317,8566,0)
(2408,8352,0)
(8785,4079,0)
(3205,5061,0)
(5894,8703,0)
(4062,5690,0)
(5129,8963,0)
(3541,6030,0)
(339,2462,0)
(4899,1922,0)
(5878,7550,0)
(6371,5664,0)
(632,6497,0)
(4642,4993,0)
(8854,3687,0)
(4685,8837,0)
(1676,5999,0)
(8266,3330,0)
(7153,6067,0)
(504,4065,0)
(2971,5279,0)
(7491,9059,0)
(6456,7425,0)
(2646,5475,0)
(5560,1934,0)
(6907,5417,0)
(8150,2126,0)
(8227,3318,0)
(6660,2635,0)
(5243,234,0)
(9009,5061,0)
(8907,1232,0)
(3560,3712,0)
(5204,3783,0)
(7788,2383,0)
(6564,955,0)
(6327,5383,0)
(3052,8387,0)
(576,4729,0)
(256,8966,0)
(3941,127,0)
(8309,6769,0)
(9104,3216,0)
(7202,5713,0)
(7916,5834,0)
(3454,5061,0)
(1417,4440,0)
(5977,7479,0)
(6822,5286,0)
(1904,1242,0)
(71,5228,0)
(5333,4407,0)
(3675,5061,0)
(618,5061,0)
(3328,8753,0)
(6666,3746,0)
(3254,3202,0)
(5156,681,0)
(8359,710,0)
(5195,835,0)
(6579,5383,0)
(6070,8286,0)
(5316,8606,0)
(1077,5766,0)
(7394,94,0)
(5124,1415,0)
(6638,371,0)
(481,2514,0)
(8097,2015,0)
(4663,7917,0)
(6413,658,0)
(5604,2025,0)
(8820,671,0)
(2089,7845,0)
(95,1412,0)
(5270,8566,0)
(2932,960,0)
(864,7803,0)
(958,5061,0)
(8275,258,0)
(2352,9086,0)
(6078,4857,0)
(5980,1982,0)
(290,1696,0)
(9,6001,0)
(2655,1135,0)
(8094,5061,0)
(275,6309,0)
(7745,5061,0)
(1327,8579,0)
(1845,8793,0)
(122,6536,0)
(6279,258,0)
(1666,8566,0)
(6664,8025,0)
(8774,1584,0)
(7061,3498,0)
(5830,2142,0)
(7348,5262,0)
(2645,952,0)
(1737,783,0)
(9052,6776,0)
(3571,725,0)
(711,3806,0)
(3405,2923,0)
(7944,1822,0)
(4844,909,0)
(84,7723,0)
(6457,1449,0)
(8638,1314,0)
(2547,6739,0)
(8519,5061,0)
(700,3254,0)
(4193,3291,0)
(4292,5128,0)
(929,9120,0)
(3087,456,0)
(1756,5061,0)
(872,1788,0)
(8117,897,0)
(6396,8244,0)
(6418,3024,0)
(6228,6677,0)
(416,8566,0)
(5300,4973,0)
(5766,618,0)
(5316,2642,0)
(5040,8003,0)
(3948,2138,0)
(4903,1549,0)
(280,8423,0)
(4753,8196,0)
(837,224,0)
(2407,7652,0)
(6058,8209,0)
(5993,4781,0)
(1983,5061,0)
(613,5639,0)
(2780,3792,0)
(2893,5398,0)
(2276,6509,0)
(1115,5706,0)
(4293,8454,0)
(5090,188,0)
(868,3231,0)
(7233,5326,0)
(4930,5937,0)
(7873,4231,0)
(4959,8566,0)
(3035,8444,0)
(1827,5870,0)
(8025,7831,0)
(8923,6315,0)
(2584,4304,0)
(7890,6125,0)
(7815,3022,0)
(3540,36,0)
(7471,6459,0)
(453,5017,0)
(5613,238,0)
(6311,1618,0)
(2566,6096,0)
(123,1615,0)
(8769,3528,0)
(5200,6113,0)
(901,258,0)
(1485,5061,0)
(1449,8566,0)
(5128,4567,0)
(3506,1608,0)
(8590,3874,0)
(944,4275,0)
(1956,7119,0)
(2309,5061,0)
(6098,1558,0)
(5250,4602,0)
(1122,1443,0)
(1971,5451,0)
(4774,8566,0)
(8672,993,0)
(2512,7439,0)
(3771,8813,0)
(3158,4148,0)
(2284,6184,0)
(2066,7734,0)
(3213,1341,0)
(8225,8566,0)
(5395,6622,0)
(3374,1437,0)
(5439,5061,0)
(3872,4471,0)
(4610,6759,0)
(9028,830,0)
(8193,1349,0)
(8930,455,0)
(3248,5314,0)
(7845,2089,0)
(2309,4758,0)
(4137,876,0)
(6310,3492,0)
(4189,3754,0)
(5056,6956,0)
(3231,7358,0)
(1764,9037,0)
(5746,8549,0)
(3451,6265,0)
(1735,4400,0)
(3420,518,0)
(2593,2468,0)
(8197,5061,0)
(1791,7213,0)
(1589,3312,0)
(5514,8035,0)
(2940,1886,0)
(1413,3483,0)
(8164,4016,0)
(4454,7675,0)
(5519,7766,0)
(9046,5061,0)
(9104,8703,0)
(1199,7426,0)
(1413,5290,0)
(2293,6816,0)
(3754,4697,0)
(560,127,0)
(4192,616,0)
(7480,7916,0)
(8812,4057,0)
(1146,4374,0)
(5003,5892,0)
(6198,6255,0)
(2573,2953,0)
(4807,2847,0)
(1284,1039,0)
(3772,3526,0)
(5773,604,0)
(2566,3979,0)
(5771,1277,0)
(6571,8519,0)
(3694,1507,0)
(1747,5061,0)
(2048,7041,0)
(7223,4291,0)
(3761,8673,0)
(5002,4615,0)
(7483,1426,0)
(1818,47,0)
(8383,4851,0)
(99,1469,0)
(8506,4114,0)
(5940,6869,0)
(4847,8566,0)
(6072,4296,0)
(4774,715,0)
(745,2097,0)
(1581,6580,0)
(2483,5956,0)
(2160,1513,0)
(2847,4209,0)
(7786,5061,0)
(5855,6320,0)
(1007,4796,0)
(8152,5892,0)
(2709,1651,0)
(6842,3330,0)
(164,1950,0)
(6609,5061,0)
(6823,7278,0)
(433,672,0)
(9104,2042,0)
(8154,4679,0)
(7137,1494,0)
(2114,3224,0)
(299,7174,0)
(8732,1417,0)
(4437,3253,0)
(7451,6869,0)
(3488,5061,0)
(5631,8287,0)
(5542,5880,0)
(5017,8566,0)
(4050,5061,0)
(366,2544,0)
(5481,294,0)
(7843,169,0)
(3124,3647,0)
(7506,2235,0)
(1315,3858,0)
(6444,8798,0)
(8956,5714,0)
(6864,8673,0)
(5795,2504,0)
(26,1925,0)
(4347,4422,0)
(6291,6816,0)
(8487,6768,0)
(2908,6257,0)
(2605,5642,0)
(177,7137,0)
(7848,1013,0)
(4758,780,0)
(4951,2178,0)
(4095,8566,0)
(7644,7962,0)
(2600,4232,0)
(8938,1086,0)
(9136,6127,0)
(1232,6086,0)
(5992,5061,0)
(679,1782,0)
(6312,3089,0)
(566,8309,0)
(7248,4771,0)
(5793,1327,0)
(5898,875,0)
(6455,5834,0)
(3054,4129,0)
(2999,3343,0)
(5231,200,0)
(320,5437,0)
(6532,604,0)
(7279,1361,0)
(1702,4662,0)
(1600,1139,0)
(7738,8616,0)
(1690,1084,0)
(4090,6486,0)
(7735,1152,0)
(3240,5061,0)
(4218,3643,0)
(4372,8566,0)
(3335,8566,0)
(8706,4642,0)
(2377,2012,0)
(8659,5852,0)
(3850,8135,0)
(4066,901,0)
(3507,4572,0)
(7245,6811,0)
(4278,3185,0)
(4017,7835,0)
(8288,1146,0)
(8366,3822,0)
(6322,875,0)
(6213,5423,0)
(8129,6474,0)
(393,3953,0)
(150,8566,0)
(3396,1695,0)
(715,4774,0)
(7486,3514,0)
(6543,674,0)
(4614,2842,0)
(4570,2431,0)
(707,8566,0)
(2505,5820,0)
(3646,8010,0)
(1098,6557,0)
(5280,880,0)
(6281,5937,0)
(8417,4012,0)
(9113,7792,0)
(5547,1528,0)
(5070,3058,0)
(2831,655,0)
(7198,1650,0)
(4618,8566,0)
(6115,3148,0)
(2653,1947,0)
(5661,8575,0)
(6610,6866,0)
(2754,2220,0)
(6888,786,0)
(3651,1291,0)
(5896,8409,0)
(3998,6927,0)
(4914,974,0)
(4215,1546,0)
(1812,5414,0)
(4349,8094,0)
(1502,6368,0)
(7059,8720,0)
(3724,8566,0)
(2383,812,0)
(6785,2991,0)
(4398,9054,0)
(5331,890,0)
(5410,5182,0)
(5658,8257,0)
(384,2293,0)
(587,2139,0)
(7448,4378,0)
(325,65,0)
(1714,5397,0)
(2832,7248,0)
(7094,6580,0)
(9061,4195,0)
(8948,5937,0)
(7943,7054,0)
(6976,2445,0)
(7891,8582,0)
(6646,2703,0)
(6502,2523,0)
(5372,5109,0)
(4250,5061,0)
(2304,6071,0)
(3945,2301,0)
(162,3922,0)
(1921,2224,0)
(144,801,0)
(6275,6442,0)
(197,352,0)
(9147,9025,0)
(2063,3728,0)
(7561,5985,0)
(1809,3583,0)
(8294,1244,0)
(9037,4979,0)
(4549,1989,0)
(5894,2485,0)
(517,4827,0)
(1983,2984,0)
(4479,2340,0)
(1571,3464,0)
(3682,5166,0)
(8259,955,0)
(5397,1714,0)
(5794,7426,0)
(716,8566,0)
(2948,6547,0)
(2231,8566,0)
(6424,595,0)
(5207,5905,0)
(2300,7447,0)
(3738,6922,0)
(3111,812,0)
(6723,6113,0)
(8415,5579,0)
(8505,7235,0)
(4955,8673,0)
(3970,8047,0)
(5240,5476,0)
(4994,7643,0)
(3340,5621,0)
(2230,2206,0)
(6312,8566,0)
(6299,4992,0)
(8987,484,0)
(8771,5937,0)
(5671,6176,0)
(3814,7272,0)
(3595,5519,0)
(6605,4806,0)
(6065,8566,0)
(1069,6520,0)
(304,5290,0)
(3346,8673,0)
(8612,2336,0)
(9074,2969,0)
(30,7746,0)
(6130,5401,0)
(7692,6022,0)
(7723,2841,0)
(1362,5218,0)
(3121,1513,0)
(1380,6736,0)
(3764,5508,0)
(6547,8566,0)
(4047,8168,0)
(3332,9123,0)
(3867,1965,0)
(8861,6735,0)
(6102,2689,0)
(1568,6578,0)
(6741,9078,0)
(7376,4399,0)
(4777,4789,0)
(994,8566,0)
(6953,5010,0)
(8159,2499,0)
(1546,108,0)
(6203,2376,0)
(7572,5132,0)
(4687,6578,0)
(2261,8566,0)
(2439,3055,0)
(8883,6754,0)
(5171,4169,0)
(2792,7458,0)
(6566,2485,0)
(3153,1620,0)
(5821,1387,0)
(2346,1492,0)
(3009,4199,0)
(7150,39,0)
(5672,3875,0)
(7396,5007,0)
(702,1117,0)
(5391,2359,0)
(3043,4304,0)
(5350,3320,0)
(8674,8566,0)
(1324,4370,0)
(1501,6748,0)
(658,6413,0)
(1127,8013,0)
(4043,3768,0)
(3855,2448,0)
(4861,5260,0)
(385,7239,0)
(6877,6758,0)
(2794,2908,0)
(5801,4062,0)
(2545,4422,0)
(2583,4524,0)
(6759,7787,0)
(5886,6157,0)
(7139,4182,0)
(829,5287,0)
(8112,3319,0)
(3342,343,0)
(3247,2336,0)
(1294,5908,0)
(7759,5061,0)
(2955,2606,0)
(3432,8566,0)
(6510,8566,0)
(6836,5569,0)
(3754,3231,0)
(5363,7120,0)
(8628,6388,0)
(6597,9096,0)
(7534,4074,0)
(9062,4822,0)
(8741,3303,0)
(4618,3510,0)
(5616,5005,0)
(6025,1466,0)
(7411,3118,0)
(2524,4419,0)
(6161,7878,0)
(4173,1356,0)
(6494,8035,0)
(7555,2057,0)
(5064,6127,0)
(5140,671,0)
(4345,6428,0)
(1071,8566,0)
(6274,5696,0)
(6688,8423,0)
(2527,6923,0)
(4229,5536,0)
(3466,4296,0)
(3692,8111,0)
(7274,3078,1)
(1036,6007,1)
(2171,1845,1)
(5332,1991,1)
(1237,3217,1)
(2594,3157,1)
(8942,5602,1)
(4834,7472,1)
(5916,525,1)
(3341,2432,1)
(7644,2165,1)
(1712,8132,1)
(9104,2704,1)
(1813,3115,1)
(1307,5061,1)
(5105,6940,1)
(182,151,1)
(3337,4384,1)
(1839,1835,1)
(5103,7225,1)
(2636,3689,1)
(8042,5699,1)
(1145,5741,1)
(7439,8862,1)
(5074,3148,1)
(2796,5725,1)
(5148,7358,1)
(6647,8128,1)
(6749,1661,1)
(7385,6455,1)
(8761,2324,1)
(4604,8566,1)
(1735,952,1)
(4608,8731,1)
(7460,3126,1)
(8979,4834,1)
(4822,6111,1)
(876,4137,1)
(1386,959,1)
(3172,5061,1)
(7194,8599,1)
(2761,1647,1)
(6482,5236,1)
(8469,6813,1)
(1812,1051,1)
(7490,7805,1)
(379,1974,1)
(2638,282,1)
(1536,2872,1)
(6715,8566,1)
(2210,5061,1)
(1520,1498,1)
(4451,4330,1)
(4058,1376,1)
(6352,361,1)
(3383,2188,1)
(1208,4421,1)
(780,4758,1)
(1532,2265,1)
(3376,8561,1)
(4943,294,1)
(5668,2529,1)
(6254,8312,1)
(7547,473,1)
(3437,4642,1)
(6100,8999,1)
(5038,6890,1)
(1200,6038,1)
(1854,8566,1)
(2691,6405,1)
(7179,4082,1)
(3164,5788,1)
(6314,5061,1)
(7063,8466,1)
(7793,3735,1)
(4442,5673,1)
(8926,4788,1)
(1413,5290,1)
(2081,5870,1)
(1840,4793,1)
(5105,8966,1)
(4689,5072,1)
(1759,2191,1)
(3659,7904,1)
(8361,3184,1)
(1780,7997,1)
(6334,7767,1)
(7294,2374,1)
(2460,6023,1)
(5153,856,1)
(1735,4400,1)
(1230,1576,1)
(725,3571,1)
(9114,6746,1)
(7410,563,1)
(2125,955,1)
(1364,1129,1)
(5340,4855,1)
(4133,111,1)
(6731,5998,1)
(3026,5061,1)
(843,8858,1)
(7170,258,1)
(5693,1000,1)
(5698,8708,1)
(7735,5321,1)
(1044,1081,1)
(7469,1334,1)
(6543,6993,1)
(7093,9051,1)
(4405,2747,1)
(1572,8691,1)
(1744,271,1)
(7154,9088,1)
(6272,8023,1)
(8138,5061,1)
(1130,8244,1)
(262,8473,1)
(1723,1624,1)
(8850,3759,1)
(6679,5061,1)
(8021,994,1)
(1535,2461,1)
(103,5117,1)
(4463,5924,1)
(7769,3198,1)
(6380,5263,1)
(1624,5671,1)
(4594,484,1)
(5603,3679,1)
(8332,7917,1)
(4166,8670,1)
(3248,8566,1)
(8726,5103,1)
(2350,6608,1)
(7056,822,1)
(3775,8579,1)
(1482,5467,1)
(1057,8566,1)
(2584,1866,1)
(3457,439,1)
(2111,434,1)
(5449,8360,1)
(2942,5378,1)
(957,8066,1)
(6751,4350,1)
(3924,448,1)
(6099,4955,1)
(3570,5838,1)
(5458,3687,1)
(6760,2095,1)
(5866,3348,1)
(4065,504,1)
(4,8244,1)
(4282,3693,1)
(5880,127,1)
(4534,1794,1)
(5627,6861,1)
(2055,3634,1)
(1777,1433,1)
(5610,709,1)
(7450,6805,1)
(9024,5371,1)
(1949,1319,1)
(1697,8555,1)
(4107,5131,1)
(264,5061,1)
(792,8566,1)
(5614,6548,1)
(2174,5730,1)
(2836,8566,1)
(4541,5061,1)
(3516,8520,1)
(4813,2325,1)
(8238,6860,1)
(3043,4909,1)
(5998,5001,1)
(9122,5061,1)
(7289,3439,1)
(2449,3589,1)
(2471,8244,1)
(4433,2169,1)
(7326,2723,1)
(3905,8566,1)
(4890,948,1)
(4045,7355,1)
(357,7895,1)
(4199,8566,1)
(5899,7926,1)
(8204,4492,1)
(8204,7371,1)
(4198,1059,1)
(3955,8175,1)
(6782,4401,1)
(8662,6625,1)
(6265,8504,1)
(3712,1636,1)
(5621,5061,1)
(4707,466,1)
(366,6406,1)
(4636,4104,1)
(3147,8566,1)
(1317,5937,1)
(7904,3745,1)
(6157,8566,1)
(223,8962,1)
(7358,6644,1)
(493,8866,1)
(4273,8976,1)
(3773,2330,1)
(4372,4415,1)
(2946,396,1)
(7908,6585,1)
(4973,2769,1)
(6893,2523,1)
(3664,7654,1)
(7355,8244,1)
(1038,7798,1)
(251,1807,1)
(5369,79,1)
(1444,5231,1)
(7414,7374,1)
(1726,75,1)
(1218,4962,1)
(8118,7024,1)
(7509,1467,1)
(3999,6249,1)
(7888,6503,1)
(6963,258,1)
(595,3476,1)
(5487,5386,1)
(4735,166,1)
(3318,258,1)
(5060,4804,1)
(8161,830,1)
(2822,5061,1)
(88,8274,1)
(4550,1415,1)
(5172,5061,1)
(5791,4628,1)
(4041,8002,1)
(1590,7373,1)
(8287,5631,1)
(7683,4155,1)
(3123,7947,1)
(8589,8566,1)
(2341,8419,1)
(3375,3897,1)
(8919,5806,1)
(585,5937,1)
(49,8651,1)
(798,7099,1)
(6173,596,1)
(5427,65,1)
(4249,8236,1)
(8610,5517,1)
(9104,6382,1)
(5418,8440,1)
(8611,5061,1)
(791,4686,1)
(8089,5061,1)
(4972,5061,1)
(5410,8566,1)
(600,1514,1)
(5778,4347,1)
(2561,1085,1)
(658,6413,1)
(229,8574,1)
(3921,6116,1)
(4095,247,1)
(3778,6029,1)
(3444,2143,1)
(4628,3510,1)
(7841,3800,1)
(2340,4479,1)
(7603,7032,1)
(7433,7742,1)
(6285,2721,1)
(4720,7044,1)
(5705,2527,1)
(4720,1876,1)
(8584,713,1)
(8521,7782,1)
(1378,8566,1)
(644,951,1)
(1050,3120,1)
(354,4880,1)
(785,7826,1)
(8706,4304,1)
(6917,2165,1)
(5514,8035,1)
(1981,1915,1)
(7420,9090,1)
(6924,1131,1)
(6145,7797,1)
(4326,8017,1)
(5880,5526,1)
(707,5061,1)
(6247,5061,1)
(668,7593,1)
(6566,7962,1)
(5148,6940,1)
(9034,2281,1)
(4629,1566,1)
(6500,2074,1)
(3951,6712,1)
(8947,4010,1)
(6613,1815,1)
(967,9063,1)
(7312,5062,1)
(6312,5061,1)
(3414,811,1)
(4201,1628,1)
(8424,8071,1)
(3340,8921,1)
(1623,5937,1)
(8117,5937,1)
(719,5061,1)
(592,4474,1)
(6345,1442,1)
(5783,3582,1)
(8343,205,1)
(4302,9048,1)
(255,4922,1)
(189,237,1)
(5148,4400,1)
(1852,9103,1)
(7362,4707,1)
(7360,8102,1)
(8498,8566,1)
(7473,8124,1)
(1538,5854,1)
(1449,696,1)
(8352,2326,1)
(5286,4347,1)
(1328,3093,1)
(6257,5346,1)
(3359,3099,1)
(8240,8566,1)
(3240,5061,1)
(6691,5520,1)
(2964,2198,1)
(3161,9020,1)
(1613,8548,1)
(8216,1087,1)
(5426,7286,1)
(5097,3692,1)
(7638,1010,1)
(5404,233,1)
(781,3987,1)
(2862,775,1)
(4352,3482,1)
(3497,3949,1)
(1006,5315,1)
(5258,6883,1)
(4407,5061,1)
(7868,8566,1)
(8427,8486,1)
(4077,8302,1)
(7098,6749,1)
(3262,8865,1)
(5562,5135,1)
(7031,988,1)
(9042,787,1)
(3053,5061,1)
(1673,4945,1)
(8268,6205,1)
(7789,3165,1)
(3421,4360,1)
(2152,6869,1)
(4337,5522,1)
(2139,8703,1)
(3092,8848,1)
(3577,4468,1)
(1013,8244,1)
(3689,8520,1)
(4109,1885,1)
(3982,7507,1)
(248,4409,1)
(4574,181,1)
(7137,1494,1)
(7342,4379,1)
(2169,719,1)
(3429,675,1)
(5162,9007,1)
(2747,8960,1)
(5310,805,1)
(8760,6346,1)
(3792,2780,1)
(6936,3376,1)
(7102,6719,1)
(5012,1191,1)
(5491,2370,1)
(6745,5061,1)
(7095,687,1)
(6057,4748,1)
(2877,6683,1)
(6162,3436,1)
(3777,6768,1)
(446,2499,1)
(7517,2259,1)
(6784,3900,1)
(6620,5937,1)
(3694,1507,1)
(859,4682,1)
(1858,2920,1)
(773,5848,1)
(4552,6999,1)
(1757,2478,1)
(9006,2195,1)
(5570,2273,1)
(1135,7355,1)
(448,7681,1)
(1361,1876,1)
(955,452,1)
(7830,8500,1)
(6576,5282,1)
(4705,65,1)
(6459,7793,1)
(3475,5061,1)
(6371,5664,1)
(1336,2033,1)
(5240,8198,1)
(2799,5704,1)
(7237,5352,1)
(1458,258,1)
(3164,8566,1)
(958,997,1)
(3471,5816,1)
(6926,1254,1)
(6722,3802,1)
(5799,8136,1)
(1764,5291,1)
(3886,7316,1)
(7851,6370,1)
(2374,8566,1)
(952,9080,1)
(7523,1876,1)
(5344,511,1)
(3184,6673,1)
(2878,5061,1)
(7823,2552,1)
(7879,6635,1)
(7708,4669,1)
(633,8566,1)
(4595,8345,1)
(8658,258,1)
(3894,7189,1)
(3714,7434,1)
(1479,3941,1)
(2377,1221,1)
(5446,580,1)
(6008,5338,1)
(5605,3740,1)
(9104,4520,1)
(8633,6375,1)
(3704,35,1)
(5974,690,1)
(7187,3680,1)
(3134,3847,1)
(148,7476,1)
(401,2544,1)
(5191,3217,1)
(7345,7034,1)
(6522,4351,1)
(3979,258,1)
(7184,3899,1)
(6516,1144,1)
(3680,2685,1)
(6660,8830,1)
(4071,1400,1)
(2811,3148,1)
(2832,7219,1)
(1774,3068,1)
(3196,8566,1)
(3231,7326,1)
(3758,5209,1)
(899,3644,1)
(4162,1089,1)
(8428,1567,1)
(2337,5185,1)
(5929,2044,1)
(6046,1412,1)
(6636,5889,1)
(6407,6461,1)
(886,1564,1)
(3221,209,1)
(1205,5061,1)
(5848,3398,1)
(8638,8566,1)
(6740,4823,1)
(6193,5061,1)
(3040,6605,1)
(8972,2895,1)
(3676,5223,1)
(1741,3231,1)
(7815,3022,1)
(7836,7930,1)
(6805,8424,1)
(5239,8566,1)
(3380,5403,1)
(4048,4677,1)
(1437,1600,1)
(4004,7400,1)
(1753,5076,1)
(429,3108,1)
(5955,3355,1)
(3439,3347,1)
(3651,5978,1)
(1336,7674,1)
(41,6768,1)
(3786,8292,1)
(9122,7173,1)
(1749,8150,1)
(687,6201,1)
(590,5145,1)
(947,3788,1)
(1629,8566,1)
(8313,8287,1)
(1077,4794,1)
(1571,3464,1)
(3813,1421,1)
(7950,7297,1)
(2589,2924,1)
(2659,2074,1)
(3361,5061,1)
(3955,2584,1)
(3835,6373,1)
(3401,6554,1)
(211,5135,1)
(2652,8566,1)
(5495,6052,1)
(6793,8446,1)
(2344,8875,1)
(8216,8566,1)
(3668,8626,1)
(4572,5061,1)
(1517,7814,1)
(1022,8915,1)
(8262,7437,1)
(7445,6618,1)
(293,2218,1)
(155,4080,1)
(8996,6784,1)
(8866,3944,1)
(8204,6208,1)
(622,5061,1)
(3231,4400,1)
(8729,8837,1)
(3823,910,1)
(3452,1085,1)
(5800,6876,1)
(9104,3216,1)
(2260,3311,1)
(8408,6297,1)
(5023,962,1)
(3362,8566,1)
(1449,5061,1)
(2026,315,1)
(2005,1284,1)
(8765,264,1)
(2034,8160,1)
(8738,567,1)
(7024,5747,1)
(2231,8566,1)
(558,795,1)
(9093,3104,1)
(5996,1106,1)
(7887,7464,1)
(7486,3973,1)
(4801,8566,1)
(7924,3804,1)
(6566,7358,1)
(4469,4270,1)
(4194,7629,1)
(3903,2208,1)
(1796,4013,1)
(3203,1790,1)
(980,8566,1)
(7530,5080,1)
(6564,2125,1)
(5315,3971,1)
(4644,6082,1)
(5933,4505,1)
(4599,5081,1)
(3517,7871,1)
(3607,6041,1)
(6529,6511,1)
(3486,3648,1)
(3165,258,1)
(6457,6904,1)
(7761,1900,1)
(6069,3257,1)
(6375,4342,1)
(1902,4607,1)
(8275,258,1)
(959,6815,1)
(3204,5807,1)
(8204,9124,1)
(7664,5018,1)
(2530,8566,1)
(7795,8000,1)
(7139,4182,1)
(609,5259,1)
(8466,8566,1)
(4652,1958,1)
(227,8897,1)
(325,2922,1)
(350,3202,1)
(979,6132,1)
(5157,8566,1)
(8590,5061,1)
(6620,6761,1)
(982,4159,1)
(1381,2947,1)
(1470,1529,1)
(4154,2046,1)
(3329,3131,1)
(4946,5911,1)
(1950,164,1)
(7292,2429,1)
(8638,5937,1)
(9104,2768,1)
(169,5061,1)
(4,4144,1)
(5112,5212,1)
(7849,2631,1)
(2295,24,1)
(8351,882,1)
(1030,8244,1)
(7651,8102,1)
(2770,5937,1)
(8352,7791,1)
(153,7127,1)
(4877,731,1)
(4668,8566,1)
(5715,6191,1)
(5799,5061,1)
(7896,2224,1)
(5847,1215,1)
(1491,6630,1)
(860,6555,1)
(4550,1359,1)
(2920,7020,1)
(125,4621,1)
(8557,9119,1)
(245,7999,1)
(1894,5061,1)
(5587,4390,1)
(6245,4785,1)
(2639,441,1)
(8334,5041,1)
(4034,68,1)
(7763,3119,1)
(3818,780,1)
(4454,4613,1)
(1380,529,1)
(2073,1186,1)
(5311,2964,1)
(7078,1291,1)
(8788,8316,1)
(3175,5895,1)
(9104,6055,1)
(4827,6486,1)
(3289,7730,1)
(1055,7288,1)
(4541,8566,1)
(8481,600,1)
(5734,1255,1)
(6341,2811,1)
(161,771,1)
(7252,2683,1)
(14,5525,1)
(4733,688,1)
(4965,3140,1)
(289,5913,1)
(659,3571,1)
(6116,3151,1)
(3610,2,1)
(6739,8566,1)
(5674,8294,1)
(7844,7989,1)
(8772,1116,1)
(6918,8680,1)
(2474,1180,1)
(5105,8121,1)
(104,4304,1)
(8706,4798,1)
(6133,69,1)
(7678,5937,1)
(2139,2165,1)
(8396,8742,1)
(1919,1388,1)
(2008,2122,1)
(6232,1765,1)
(5164,8244,1)
(7937,5061,1)
(5148,1633,1)
(4860,1049,1)
(4092,7083,1)
(1097,3343,1)
(618,8566,1)
(5822,7199,1)
(5117,8641,1)
(1321,3036,1)
(315,3202,1)
(5904,555,1)
(8256,1104,1)
(8658,8584,1)
(531,6757,1)
(256,7326,1)
(5322,5851,1)
(306,6907,1)
(4725,7874,1)
(7470,3077,1)
(5658,2786,1)
(2743,537,1)
(7797,8847,1)
(2584,6340,1)
(4732,8566,1)
(1064,7041,1)
(1670,6331,1)
(1918,5553,1)
(3626,168,1)
(7439,1427,1)
(4174,1759,1)
(3219,3964,1)
(7094,3201,1)
(8331,6988,1)
(9104,838,1)
(6834,5035,1)
(9006,8187,1)
(1500,8575,1)
(585,8566,1)
(4965,8264,1)
(8192,7823,1)
(4004,5727,1)
(1974,737,1)
(5892,5003,1)
(7810,3180,1)
(4031,2070,1)
(1373,4819,1)
(3053,4033,1)
(3728,3204,1)
(1830,9060,1)
(240,2415,1)
(7142,2504,1)
(2342,7198,1)
(8091,1758,1)
(4363,2345,1)
(595,5937,1)
(9104,4230,1)
(7499,5157,1)
(6025,1177,1)
(6896,4267,1)
(1437,7043,1)
(5197,895,1)
(1103,1486,1)
(5959,7293,1)
(7933,5620,1)
(7008,3598,1)
(8311,2292,1)
(6205,6328,1)
(7523,3148,1)
(5252,5061,1)
(3043,2485,1)
(3570,6982,1)
(9156,2063,1)
(5138,6435,1)
(4515,1876,1)
(2731,5857,1)
(3465,7171,1)
(1891,6090,1)
(1506,8961,1)
(6065,6925,1)
(3185,8566,1)
(256,6340,1)
(2528,693,1)
(3137,6512,1)
(6678,1838,1)
(59,2527,1)
(1599,230,1)
(7956,5061,1)
(7181,1712,1)
(5064,8386,1)
(1484,3221,1)
(6119,2365,1)
(5153,5061,1)
(8166,3767,1)
(4174,2191,1)
(8151,3101,1)
(5855,6320,1)
(2243,258,1)
(7321,1479,1)
(2715,8694,1)
(6583,258,1)
(7039,6503,1)
(3534,6664,1)
(8519,8566,1)
(7777,3163,1)
(2584,2496,1)
(5039,6962,1)
(7595,8603,1)
(2457,8703,1)
(2607,8322,1)
(550,4845,1)
(9090,3375,1)
(5621,3340,1)
(8215,7588,1)
(2468,2593,1)
(165,8244,1)
(4719,4238,1)
(8213,1179,1)
(7711,2795,1)
(8481,8464,1)
(4367,2024,1)
(1434,7937,1)
(4274,8200,1)
(2576,5184,1)
(4565,5819,1)
(1954,1070,1)
(5437,6349,1)
(4774,8566,1)
(1981,5061,1)
(8113,8911,1)
(2855,2289,1)
(8878,8665,1)
(5198,4000,1)
(6884,7896,1)
(4092,213,1)
(3065,6513,1)
(7628,8460,1)
(7841,3831,1)
(4812,3714,1)
(8717,8053,1)
(560,127,1)
(3233,5376,1)
(7644,5599,1)
(2110,3593,1)
(6255,6198,1)
(2365,5484,1)
(7750,5061,1)
(5106,3279,1)
(1193,8566,1)
(1440,8817,1)
(5554,3940,1)
(6152,1459,1)
(5890,1118,1)
(2325,8566,1)
(2064,3715,1)
(1010,6922,1)
(5068,2340,1)
(8689,1820,1)
(6238,4045,1)
(3548,5061,1)
(3455,7351,1)
(2756,8432,1)
(8031,3928,1)
(6288,4194,1)
(1819,8566,1)
(3916,7962,1)
(8567,7957,1)
(8426,4302,1)
(2996,7813,1)
(739,989,1)
(5245,7048,1)
(6537,8177,1)
(1194,4445,1)
(6373,3363,1)
(9115,576,1)
(7316,1246,1)
(5406,1298,1)
(3774,5565,1)
(137,7598,1)
(8465,8913,1)
(8065,6580,1)
(28,4019,1)
(349,8035,1)
(7539,2033,1)
(5396,724,1)
(4234,963,1)
(4505,5652,1)
(6294,4347,1)
(2956,6058,1)
(5731,5061,1)
(1666,8566,1)
(6056,3231,1)
(352,197,1)
(6534,3575,1)
(4874,729,1)
(2801,186,1)
(5498,5429,1)
(60,2368,1)
(5372,7170,1)
(8740,3150,1)
(2349,3142,1)
(6396,8244,1)
(421,2615,1)
(5852,1555,1)
(488,5462,1)
(110,3864,1)
(6873,7832,1)
(5997,957,1)
(3124,7962,1)
(8112,6992,1)
(8204,1707,1)
(4983,1282,1)
(6903,2750,1)
(4731,6928,1)
(6055,6584,1)
(3896,660,1)
(5548,1113,1)
(7564,65,1)
(7518,526,1)
(1016,5061,1)
(3511,7816,1)
(5560,4752,1)
(474,8245,1)
(1617,7484,1)
(5645,2054,1)
(9048,8566,1)
(3247,8153,1)
(7000,8741,1)
(684,3092,1)
(4821,9019,1)
(4451,3202,1)
(4683,1151,1)
(403,1403,1)
(6859,2705,1)
(8859,2758,1)
(1515,8143,1)
(8660,2725,1)
(6171,8358,1)
(3365,8566,1)
(6846,3665,1)
(9053,2735,1)
(6379,1415,1)
(5148,2462,1)
(3621,8874,1)
(1633,549,1)
(6436,7841,1)
(7644,1071,1)
(6260,1266,1)
(9024,8701,1)
(4572,3507,1)
(9098,8566,1)
(5158,4948,1)
(6170,1959,1)
(1795,8009,1)
(8499,1155,1)
(2340,5061,1)
(1836,4437,1)
(6301,3566,1)
(2054,7723,1)
(7596,8886,1)
(3835,5061,1)
(3614,8984,1)
(3035,3263,1)
(9136,8966,1)
(7240,3711,1)
(1469,8473,1)
(7256,8864,1)
(2933,8347,1)
(8092,8644,1)
(3808,1150,1)
(2786,6751,1)
(1618,7611,1)
(6938,7830,1)
(1504,7377,1)
(4401,3376,1)
(7153,4257,1)
(5274,5181,1)
(70,4250,1)
(6944,793,1)
(1581,2028,1)
(8494,6185,1)
(6733,7060,1)
(4304,6019,1)
(7366,1621,1)
(5105,6826,1)
(8663,3179,1)
(7203,5756,1)
(5907,4200,1)
(8233,6408,1)
(8291,2567,1)
(7026,7704,1)
(6890,8334,1)
(8393,2443,1)
(556,6046,1)
(8432,330,1)
(4393,4612,1)
(4309,4926,1)
(2611,8566,1)
(3287,8395,1)
(8019,6768,1)
(7355,8566,1)
(3678,2619,1)
(7418,8977,1)
(6647,8145,1)
(5442,5985,1)
(1415,5124,1)
(3140,7963,1)
(5148,5017,1)
(7033,9001,1)
(6965,7429,1)
(1390,3150,1)
(1383,3427,1)
(8240,5061,1)
(4556,6936,1)
(5743,5061,1)
(6484,7092,1)
(1946,5755,1)
(4151,127,1)
(7265,499,1)
(1357,561,1)
(7672,2130,1)
(2645,8966,1)
(5063,8655,1)
(1816,7212,1)
(2584,8966,1)
(9151,1451,1)
(5820,259,1)
(3292,6,1)
(5256,2616,1)
(6289,6184,1)
(2535,1079,1)
(7298,4216,1)
(1666,5937,1)
(7239,385,1)
(4967,8471,1)
(2096,1252,1)
(6926,1035,1)
(4293,2020,1)
(4089,3819,1)
(3553,8114,1)
(8788,5811,1)
(268,5106,1)
(6261,8885,1)
(6157,4800,1)
(296,4205,1)
(6281,8566,1)
(3272,7030,1)
(7048,5937,1)
(3983,8376,1)
(843,297,1)
(1026,3351,1)
(8826,8566,1)
(2391,7107,1)
(4444,636,1)
(7750,8566,1)
(4710,6438,1)
(9104,2165,1)
(9104,5853,1)
(5891,322,1)
(3846,1544,1)
(5574,8874,1)
(7475,5994,1)
(8060,3912,1)
(1106,5061,1)
(410,4605,1)
(5844,258,1)
(6758,3155,1)
(466,2445,1)
(4291,7223,1)
(5477,6983,1)
(8628,6388,1)
(5688,540,1)
(2605,3863,1)
(4789,5061,1)
(3700,5787,1)
(4698,3505,1)
(9104,7358,1)
(3662,5059,1)
(1644,2113,1)
(711,3806,1)
(5148,6927,1)
(6548,6466,1)
(4457,8566,1)
(7656,305,1)
(8960,5937,1)
(1217,6063,1)
(3561,2911,1)
(8261,4996,1)
(23,4630,1)
(5683,2504,1)
(4237,8244,1)
(4,6388,1)
(2689,8566,1)
(6919,8566,1)
(7320,2471,1)
(2972,6046,1)
(5363,7951,1)
(5748,621,1)
(7034,8923,1)
(6879,9018,1)
(6270,5335,1)
(3815,2468,1)
(2822,5937,1)
(5572,2014,1)
(9102,3148,1)
(8771,5061,1)
(2893,6755,1)
(1289,2948,1)
(8362,848,1)
(5889,3246,1)
(2867,5289,1)
(8600,3734,1)
(3683,5468,1)
(3231,7425,1)
(8460,6776,1)
(1181,5533,1)
(383,1327,1)
(2020,2447,1)
(5860,4724,1)
(3872,8364,1)
(6182,5061,1)
(1630,4258,1)
(6259,6022,1)
(4543,4527,1)
(979,8566,1)
(1635,4166,1)
(4449,7643,1)
(7712,6237,1)
(8508,3035,1)
(7732,2768,1)
(8265,3185,1)
(45,5576,1)
(5601,900,1)
(960,2932,1)
(4581,6810,1)
(6837,4170,1)
(2205,7277,1)
(1833,8627,1)
(8023,3045,1)
(5536,5061,1)
(4296,1919,1)
(5053,4436,1)
(3222,8162,1)
(4886,1839,1)
(4975,1913,1)
(1072,6819,1)
(3028,9027,1)
(8877,6437,1)
(2952,716,1)
(7974,65,1)
(837,2232,1)
(7419,964,1)
(721,7835,1)
(8420,6844,1)
(9051,2285,1)
(904,4247,1)
(1470,3599,1)
(6252,2441,1)
(1711,3234,1)
(3826,5061,1)
(3595,7766,1)
(1525,2007,1)
(4641,3485,1)
(6788,3202,1)
(6999,3535,1)
(5733,8465,1)
(1663,9152,1)
(5132,5061,1)
(2864,488,1)
(3118,7411,1)
(8410,5546,1)
(3873,1434,1)
(412,1775,1)
(2575,5061,1)
(8666,1271,1)
(5292,4529,1)
(922,5149,1)
(1047,5388,1)
(3616,7125,1)
(6086,3033,1)
(5756,6183,1)
(871,8152,1)
(5260,4861,1)
(2335,1886,1)
(1615,8566,1)
(3750,5715,1)
(9061,5627,1)
(50,9057,1)
(9105,1220,1)
(2929,8858,1)
(5376,6118,1)
(7433,7211,1)
(7571,8566,1)
(267,2155,1)
(1936,5361,1)
(3278,4603,1)
(7413,3467,1)
(7751,127,1)
(2634,8566,1)
(8686,6645,1)
(6984,2016,1)
(753,4842,1)
(3682,1402,1)
(447,2611,1)
(8232,5311,1)
(6541,8942,1)
(7255,8768,1)
(6746,65,1)
(6324,8729,1)
(5010,286,1)
(7700,4478,1)
(7441,6490,1)
(1629,7266,1)
(1613,8703,1)
(4682,8042,1)
(5825,5378,1)
(6951,3067,1)
(5379,6766,1)
(6007,1897,1)
(6369,8496,1)
(6748,1501,1)
(3900,7281,1)
(5010,8566,1)
(5255,1948,1)
(8983,3923,1)
(4905,4894,1)
(5421,1448,1)
(8556,7312,1)
(336,2019,1)
(6096,2566,1)
(8191,6682,1)
(986,5339,1)
(5367,8951,1)
(1314,8638,1)
(6946,249,1)
(511,125,1)
(7840,1240,1)
(2173,5246,1)
(2062,8566,1)
(2394,1933,1)
(2769,4661,1)
(5613,5191,1)
(537,3924,1)
(6856,6454,1)
(7141,5061,1)
(2682,258,1)
(6334,2998,1)
(2068,6321,1)
(3638,3066,1)
(5294,6741,1)
(5253,6989,1)
(1680,3445,1)
(7849,4642,1)
(3240,8566,1)
(6403,4164,1)
(133,115,1)
(145,2572,1)
(4919,5813,1)
(6451,1578,1)
(3955,3043,1)
(5622,4602,1)
(1461,7455,1)
(6488,7630,1)
(3431,2822,1)
(4095,8566,1)
(327,6479,1)
(3832,6422,1)
(8611,8566,1)
(9125,6268,1)
(1853,536,1)
(8102,2948,1)
(1582,8401,1)
(6339,7444,1)
(7219,8189,1)
(8922,4571,1)
(6994,5378,1)
(7180,8482,1)
(8620,4012,1)
(8698,4759,1)
(1343,219,1)
(9036,2243,1)
(8597,3379,1)
(7450,5605,1)
(2457,4642,1)
(7378,2033,1)
(4712,5061,1)
(8836,28,1)
(7700,7370,1)
(3246,3110,1)
(5550,8298,1)
(5877,2360,1)
(3264,3405,1)
(1774,5061,1)
(3403,127,1)
(3881,3701,1)
(9025,611,1)
(2152,4670,1)
(8706,7425,1)
(6963,3690,1)
(6634,3148,1)
(5220,7365,1)
(8960,8566,1)
(4070,7883,1)
(4861,2311,1)
(6072,1919,1)
(4276,3376,1)
(8486,8920,1)
(7768,6540,1)
(658,6955,1)
(5642,4178,1)
(3803,5824,1)
(5358,8873,1)
(8674,8566,1)
(1770,3385,1)
(382,597,1)
(9123,2530,1)
(5217,4431,1)
(1178,8588,1)
(6225,127,1)
(6908,614,1)
(8704,124,1)
(97,6875,1)
(1888,936,1)
(1191,8986,1)
(5319,8162,1)
(8009,1834,1)
(2815,7031,1)
(5105,7962,1)
(5236,2512,1)
(6218,5061,1)
(7451,7256,1)
(6190,2828,1)
(6863,8566,1)
(706,1088,1)
(8678,5300,1)
(6050,699,1)
(2782,3436,1)
(2645,5951,1)
(8746,3282,1)
(5823,2516,1)
(7303,7614,1)
(7562,3307,1)
(3030,6711,1)
(3187,8532,1)
(5774,3594,1)
(1958,6963,1)
(9025,9147,1)
(7624,6024,1)
(8088,3870,1)
(3578,1194,1)
(4609,6207,1)
(6088,4255,1)
(2051,6977,1)
(9078,6741,1)
(4835,8606,1)
(4715,3991,1)
(5617,6432,1)
(6887,2994,1)
(5607,8243,1)
(830,8566,1)
(6534,8193,1)
(2506,3711,1)
(5151,6571,1)
(2651,8566,1)
(5123,3879,1)
(4997,1626,1)
(1011,8682,1)
(4128,4050,1)
(6620,5061,1)
(5417,8311,1)
(5546,6990,1)
(7918,6481,1)
(3227,8144,1)
(6553,8737,1)
(3567,8562,1)
(5147,5962,1)
(5729,3820,1)
(6741,5061,1)
(6742,8566,1)
(1148,7467,1)
(8711,2675,1)
(4870,1775,1)
(5065,4400,1)
(6748,8955,1)
(7966,8566,1)
(7785,8249,1)
(7928,5991,1)
(5518,8542,1)
(1243,2225,1)
(6323,3376,1)
(3548,705,1)
(8964,4124,1)
(7854,8714,1)
(2155,5749,1)
(8683,2657,1)
(9107,8219,1)
(852,5937,1)
(3521,0,1)
(6891,211,1)
(1829,1188,1)
(8338,2317,1)
(6486,8566,1)
(918,8566,1)
(8148,7358,1)
(8225,4640,1)
(1682,8998,1)
(5723,2256,1)
(9104,4151,1)
(4053,8805,1)
(1829,8806,1)
(1655,1378,1)
(5368,5672,1)
(8258,5692,1)
(7527,1474,1)
(8462,7388,1)
(8498,5061,1)
(601,5102,1)
(5065,6340,1)
(7902,2779,1)
(7488,7726,1)
(7710,1788,1)
(8451,6409,1)
(7016,5358,1)
(6199,4701,1)
(7424,2644,1)
(3851,7698,1)
(7888,4437,1)
(4263,2006,1)
(8350,6240,1)
(8781,2181,1)
(2472,4863,1)
(672,433,1)
(6819,4660,1)
(4755,1636,1)
(4871,5333,1)
(6173,7407,1)
(8560,1258,1)
(6474,5262,1)
(6546,5031,1)
(5948,5397,1)
(7724,3527,1)
(5540,4290,1)
(939,550,1)
(2468,6994,1)
(3369,3366,1)
(256,1866,1)
(2398,3195,1)
(6478,2294,1)
(7168,1876,1)
(437,5770,1)
(4446,3700,1)
(4881,2537,1)
(7443,996,1)
(565,8442,1)
(8953,4263,1)
(784,3752,1)
(3491,6768,1)
(8150,2126,1)
(4490,4366,1)
(8625,7651,1)
(1380,6736,1)
(179,8333,1)
(7901,8596,1)
(2878,5937,1)
(5148,8483,1)
(390,2113,1)
(8330,8353,1)
(7802,4101,1)
(8795,6526,1)
(7068,552,1)
(3296,4303,1)
(5121,8566,1)
(3366,5082,1)
(7122,391,1)
(4313,3381,1)
(1436,6666,1)
(3335,324,1)
(5509,7304,1)
(89,7587,1)
(4525,1178,1)
(3521,5109,1)
(5430,8608,1)
(2619,8096,1)
(257,2032,1)
(1665,5061,1)
(6609,8566,1)
(4240,7473,1)
(3846,8666,1)
(4745,3148,1)
(4324,2227,1)
(165,3231,1)
(7750,2695,1)
(5231,200,1)
(3310,3252,1)
(7451,6869,1)
(5913,860,1)
(2584,2851,1)
(7857,1531,1)
(6787,5430,1)
(1841,7621,1)
(1879,2953,1)
(1505,8566,1)
(1596,4326,1)
(7782,4315,1)
(6452,7845,1)
(5627,6525,1)
(5381,5540,1)
(3240,3032,1)
(5792,2102,1)
(7441,6376,1)
(4265,4204,1)
(3619,602,1)
(5033,1364,1)
(227,3466,1)
(8512,9150,1)
(1485,8566,1)
(2477,3258,1)
(1680,525,1)
(5739,1541,1)
(7572,5132,1)
(9102,8146,1)
(8221,8237,1)
(1616,3584,1)
(4663,1053,1)
(6719,5641,1)
(2526,1302,1)
(7689,2556,1)
(5544,7854,1)
(3298,2845,1)
(8204,6789,1)
(8218,543,1)
(4086,3664,1)
(1361,3148,1)
(1940,4112,1)
(4083,7419,1)
(5811,6729,1)
(6182,8566,1)
(3357,7529,1)
(732,8566,1)
(2906,3366,1)
(8467,4057,1)
(5849,4356,1)
(7827,3605,1)
(5006,4282,1)
(6389,1094,1)
(8334,4135,1)
(4050,5061,1)
(5793,3491,1)
(3981,8269,1)
(6477,8566,1)
(1249,4689,1)
(5354,7306,1)
(4111,4040,1)
(8359,5152,1)
(6463,4878,1)
(599,6958,1)
(8773,5272,1)
(4085,2884,1)
(6547,8566,1)
(7046,3028,1)
(4696,6039,1)
(1284,6939,1)
(1136,7603,1)
(2112,6420,1)
(9104,5750,1)
(7751,373,1)
(5660,5451,1)
(7399,2601,1)
(9096,6306,1)
(5037,8566,1)
(5873,8409,1)
(6533,6465,1)
(7418,8566,1)
(6203,3319,1)
(3528,258,1)
(5683,5866,1)
(2251,42,1)
(8174,7566,1)
(1184,5061,1)
(2645,7358,1)
(7684,5586,1)
(2085,290,1)
(9104,3007,1)
(4185,4496,1)
(6971,7768,1)
(4399,2117,1)
(6374,7596,1)
(1773,8506,1)
(635,8566,1)
(8733,3029,1)
(238,8566,1)
(5735,2869,1)
(1602,5927,1)
(2790,6831,1)
(7529,6264,1)
(6776,9052,1)
(1344,3435,1)
(5803,6194,1)
(3072,3148,1)
(1002,372,1)
(4117,287,1)
(8376,972,1)
(7837,7535,1)
(2812,8244,1)
(7083,803,1)
(5272,8242,1)
(7875,7326,1)
(8757,8765,1)
(1187,8566,1)
(5105,7425,1)
(1278,3148,1)
(2814,7242,1)
(1649,8877,1)
(1411,7214,1)
(5161,4912,1)
(7107,3623,1)
(5324,5907,1)
(2303,5206,1)
(6313,1265,1)
(8054,7995,1)
(3104,1685,1)
(607,3545,1)
(5709,2316,1)
(5855,2734,1)
(7629,2244,1)
(2141,970,1)
(325,65,1)
(6542,4220,1)
(7617,2608,1)
(1675,5912,1)
(3035,8444,1)
(2513,6367,1)
(4387,6911,1)
(7126,1654,1)
(632,297,1)
(1182,5087,1)
(1756,1905,1)
(1930,197,1)
(9104,2042,1)
(8777,5753,1)
(7583,3191,1)
(352,8473,1)
(1921,5970,1)
(9108,9082,1)
(8611,6333,1)
(9048,5345,1)
(2714,8544,1)
(797,3323,1)
(3199,1105,1)
(2336,8612,1)
(6748,3625,1)
(1326,1484,1)
(7098,7887,1)
(612,3116,1)
(283,795,1)
(8075,2187,1)
(697,2336,1)
(4040,2803,1)
(1327,4951,1)
(536,7759,1)
(2792,6689,1)
(7552,4400,1)
(868,8244,1)
(3788,8508,1)
(1559,2903,1)
(5786,1228,1)
(2252,1846,1)
(5351,6631,1)
(4611,1247,1)
(4384,2173,1)
(6855,3956,1)
(8853,1393,1)
(7364,6051,1)
(3066,1278,1)
(2104,3031,1)
(6297,3716,1)
(3658,7188,1)
(7444,1057,1)
(598,4552,1)
(3171,6114,1)
(8204,1649,1)
(7775,7589,1)
(7716,801,1)
(453,6061,1)
(3031,2997,1)
(200,255,1)
(9136,4304,1)
(2540,8200,1)
(7156,3873,1)
(6566,6127,1)
(98,180,1)
(8845,5805,1)
(6892,2028,1)
(394,7914,1)
(6623,8520,1)
(7089,7143,1)
(8289,2443,1)
(4493,8596,1)
(8812,8473,1)
(9021,3322,1)
(8263,6278,1)
(6040,9105,1)
(3964,831,1)
(4727,512,1)
(4768,9155,1)
(1611,7435,1)
(7991,1894,1)
(1412,95,1)
(2126,8566,1)
(5882,806,1)
(2219,1246,1)
(7586,5891,1)
(9118,5779,1)
(1407,2145,1)
(7897,6922,1)
(431,1892,1)
(6437,1399,1)
(8769,5464,1)
(3037,1636,1)
(6853,4869,1)
(8815,4221,1)
(3655,3311,1)
(2352,9086,1)
(2199,3278,1)
(1563,8566,1)
(1266,8684,1)
(4027,9036,1)
(441,4816,1)
(6390,7776,1)
(5656,1828,1)
(4332,3883,1)
(3977,3014,1)
(7801,5402,1)
(2527,6923,1)
(7118,5609,1)
(7217,7438,1)
(1207,3479,1)
(5767,6829,1)
(1862,6282,1)
(2086,308,1)
(805,5023,1)
(236,6889,1)
(3303,5701,1)
(7694,3424,1)
(2383,5061,1)
(4343,2435,1)
(9104,7425,1)
(8572,4827,1)
(4897,1466,1)
(6230,6989,1)
(2773,3028,1)
(8706,2165,1)
(2404,4077,1)
(9104,1558,1)
(7389,8563,1)
(5906,5163,1)
(1354,8577,1)
(1646,2252,1)
(105,281,1)
(303,6080,1)
(4416,4808,1)
(499,3117,1)
(1768,3596,1)
(9104,7594,1)
(8737,5623,1)
(5249,5332,1)
(3867,2777,1)
(954,5196,1)
(7224,3072,1)
(6689,3186,1)
(5916,3445,1)
(5585,8345,1)
(3407,7672,1)
(1741,8244,1)
(8165,8566,1)
(2879,7543,1)
(416,8566,1)
(696,6457,1)
(4297,5008,1)
(1996,4997,1)
(794,4612,1)
(5028,2789,1)
(4224,4292,1)
(3936,8566,1)
(3146,3791,1)
(1278,8621,1)
(2515,3037,1)
(421,9121,1)
(7241,4695,1)
(4361,7703,1)
(6659,5765,1)
(7184,5905,1)
(6642,6493,1)
(7868,5061,1)
(2294,7740,1)
(1708,5287,1)
(1737,7210,1)
(3124,8310,1)
(9096,5937,1)
(980,5937,1)
(1450,1329,1)
(8869,2456,1)
(3647,4740,1)
(8426,3481,1)
(6682,7528,1)
(5450,3232,1)
(597,3013,1)
(1804,6123,1)
(3785,8604,1)
(1138,3559,1)
(8026,1829,1)
(5423,1948,1)
(2440,8077,1)
(1613,6340,1)
(24,3240,1)
(1098,8217,1)
(4723,3702,1)
(4954,2614,1)
(3139,7539,1)
(4945,8625,1)
(8228,681,1)
(1378,3980,1)
(8097,2355,1)
(4801,5061,1)
(1187,3933,1)
(2742,405,1)
(7773,7063,1)
(4590,3466,1)
(3899,7172,1)
(1581,7250,1)
(7135,2811,1)
(2869,3494,1)
(2291,7177,1)
(205,4536,1)
(4497,8926,1)
(5511,127,1)
(2367,3024,1)
(8450,5875,1)
(8613,1972,1)
(6452,8520,1)
(4527,3561,1)
(2656,6567,1)
(6146,5850,1)
(8583,2344,1)
(3710,5846,1)
(3172,5125,1)
(5071,8417,1)
(4012,8299,1)
(1844,8934,1)
(7771,4294,1)
(6361,8711,1)
(2235,8566,1)
(7708,1411,1)
(7315,3493,1)
(2279,3163,1)
(5835,3156,1)
(2424,3241,1)
(3333,3538,1)
(5148,6127,1)
(4952,6257,1)
(5951,7237,1)
(6829,7056,1)
(303,7488,1)
(2399,6497,1)
(3362,5061,1)
(1346,1968,1)
(5863,2361,1)
(6435,2596,1)
(3237,5061,1)
(6677,1192,1)
(4347,8971,1)
(4770,4993,1)
(5429,8186,1)
(2094,2929,1)
(6098,1432,1)
(9075,5460,1)
(1224,5061,1)
(3037,2515,1)
(1987,1181,1)
(3274,2332,1)
(7664,7292,1)
(5148,7326,1)
(8245,5654,1)
(6301,6295,1)
(5557,2141,1)
(5431,6768,1)
(4593,6105,1)
(8949,1078,1)
(8222,295,1)
(1321,1650,1)
(4157,838,1)
(6019,5557,1)
(5894,7358,1)
(6566,1071,1)
(3687,1724,1)
(7943,3027,1)
(1394,141,1)
(3403,2993,1)
(6414,4263,1)
(6250,6881,1)
(8889,5841,1)
(1240,3984,1)
(4298,1876,1)
(1742,2423,1)
(4478,4580,1)
(6252,5061,1)
(6201,7786,1)
(1458,8013,1)
(250,7442,1)
(1132,490,1)
(7168,3148,1)
(597,65,1)
(1894,8092,1)
(8859,8566,1)
(8905,4720,1)
(4768,1823,1)
(6348,401,1)
(1167,2863,1)
(9057,2788,1)
(8352,4962,1)
(6456,7081,1)
(1377,7749,1)
(6675,5937,1)
(6812,6709,1)
(5439,8566,1)
(7231,5146,1)
(5696,6274,1)
(3604,6313,1)
(6531,6261,1)
(5566,1229,1)
(9132,6918,1)
(3864,4854,1)
(3528,65,1)
(7178,3566,1)
(6048,8070,1)
(3027,1779,1)
(3835,8566,1)
(1877,952,1)
(4,8566,1)
(7782,2495,1)
(3374,8599,1)
(4786,102,1)
(8515,7054,1)
(3908,8388,1)
(8874,8545,1)
(8232,8546,1)
(7689,5068,1)
(4868,8848,1)
(7343,86,1)
(5187,1111,1)
(7644,4400,1)
(6523,4745,1)
(6452,6939,1)
(1967,5549,1)
(6992,8996,1)
(7703,8358,1)
(7477,982,1)
(7349,4726,1)
(1925,2648,1)
(639,1464,1)
(2210,8566,1)
(806,6366,1)
(8520,788,1)
(1782,679,1)
(4448,4049,1)
(3033,8566,1)
(7849,7425,1)
(2457,2870,1)
(7030,3239,1)
(8493,8566,1)
(5073,8462,1)
(7927,3544,1)
(1294,2398,1)
(3944,784,1)
(1643,2733,1)
(1906,65,1)
(7823,7837,1)
(5333,4407,1)
(454,1377,1)
(3488,8780,1)
(5453,9022,1)
(8898,3521,1)
(5230,2090,1)
(7067,3237,1)
(599,6115,1)
(5842,77,1)
(3487,8288,1)
(8537,1251,1)
(5417,8826,1)
(5105,5574,1)
(3361,1303,1)
(6852,2127,1)
(9104,5398,1)
(7937,2101,1)
(309,5061,1)
(8366,6126,1)
(6688,6088,1)
(8430,6370,1)
(7731,3514,1)
(1284,7845,1)
(8526,8336,1)
(2457,7358,1)
(1550,3005,1)
(8631,2192,1)
(1698,2026,1)
(7853,1204,1)
(1156,6593,1)
(2184,1942,1)
(2737,8566,1)
(4272,3271,1)
(2584,7326,1)
(7127,595,1)
(3231,4411,1)
(7279,3430,1)
(2712,4831,1)
(3597,4284,1)
(1080,8566,1)
(2248,586,1)
(1714,5397,1)
(9104,1114,1)
(1835,6133,1)
(5584,2753,1)
(5896,6199,1)
(1271,519,1)
(6239,2399,1)
(6990,1957,1)
(3018,1483,1)
(7172,127,1)
(6194,7069,1)
(3491,3056,1)
(8777,156,1)
(2024,7330,1)
(3303,1674,1)
(6773,2254,1)
(2457,2496,1)
(1498,5079,1)
(2457,2485,1)
(3614,7067,1)
(1769,9112,1)
(1307,8566,1)
(3047,1146,1)
(7185,5061,1)
(7416,5704,1)
(9134,4927,1)
(5401,5061,1)
(3159,5594,1)
(800,6287,1)
(1615,123,1)
(2465,8455,1)
(2512,8449,1)
(6428,4345,1)
(6,2419,1)
(3588,4652,1)
(130,124,1)
(6010,8945,1)
(2806,3146,1)
(8826,4347,1)
(4739,127,1)
(3892,8529,1)
(1654,8946,1)
(1874,4476,1)
(1812,6712,1)
(6723,4157,1)
(3231,7962,1)
(5632,551,1)
(5144,3566,1)
(3859,2182,1)
(299,5786,1)
(6932,6387,1)
(8491,8653,1)
(5452,2303,1)
(8794,2774,1)
(6108,3411,1)
(234,6846,1)
(6066,2742,1)
(5746,2440,1)
(4649,5801,1)
(1487,33,1)
(3819,6163,1)
(5737,227,1)
(8128,8616,1)
(3316,8900,1)
(1745,6195,1)
(882,7285,1)
(1563,8868,1)
(4067,1936,1)
(1107,2861,1)
(8509,1038,1)
(7227,1434,1)
(4891,8427,1)
(530,623,1)
(2388,6670,1)
(3472,3638,1)
(256,8703,1)
(8603,93,1)
(8299,5061,1)
(6115,1876,1)
(1455,7514,1)
(3987,5014,1)
(7461,3852,1)
(8802,1207,1)
(773,5061,1)
(375,5966,1)
(4668,5061,1)
(2413,700,1)
(3010,4117,1)
(8433,3368,1)
(7976,8566,1)
(1571,4108,1)
(5192,8785,1)
(3798,2245,1)
(1483,3907,1)
(9079,6869,1)
(7818,65,1)
(4866,89,1)
(3488,8566,1)
(2637,6314,1)
(6487,2238,1)
(8892,8093,1)
(8135,1684,1)
(3274,7609,1)
(7048,8566,1)
(8652,1082,1)
(8628,6759,1)
(2097,5937,1)
(8949,3453,1)
(62,5048,1)
(776,7560,1)
(4772,4810,1)
(6237,718,1)
(3411,3202,1)
(8477,1248,1)
(1724,3777,1)
(3939,7497,1)
(1067,6388,1)
(8356,2296,1)
(5813,4314,1)
(5105,5544,1)
(2850,4111,1)
(516,9092,1)
(4589,1140,1)
(3073,2104,1)
(7671,73,1)
(4849,3721,1)
(4692,7350,1)
(2658,3255,1)
(2863,5937,1)
(2118,2973,1)
(5346,657,1)
(1071,8566,1)
(8857,8566,1)
(5846,3475,1)
(4028,501,1)
(4521,3755,1)
(5834,7385,1)
(7558,2096,1)
(7764,3362,1)
(4668,8965,1)
(6794,6893,1)
(3441,8566,1)
(3594,6101,1)
(2836,8319,1)
(127,364,1)
(8032,1190,1)
(169,8702,1)
(7686,889,1)
(6806,1744,1)
(2847,4209,1)
(6021,85,1)
(7792,8969,1)
(3893,5774,1)
(27,331,1)
(276,5472,1)
(1920,2220,1)
(3675,5061,1)
(7523,1640,1)
(856,6142,1)
(9065,1125,1)
(5935,4766,1)
(8138,1723,1)
(271,680,1)
(7615,5981,1)
(2141,4511,1)
(5662,6449,1)
(5105,1071,1)
(5503,8566,1)
(7893,717,1)
(2994,1977,1)
(1903,6517,1)
(2562,8715,1)
(9104,952,1)
(103,722,1)
(6333,4031,1)
(3464,6768,1)
(3939,1414,1)
(1081,5702,1)
(3693,3633,1)
(1839,3821,1)
(2097,5061,1)
(8204,5499,1)
(1533,7928,1)
(2813,7864,1)
(2191,1245,1)
(8280,8359,1)
(6470,1752,1)
(8359,65,1)
(7329,8289,1)
(4386,2311,1)
(8628,3153,1)
(8396,2132,1)
(2596,8036,1)
(7260,3666,1)
(2645,4400,1)
(7,3645,1)
(1147,3854,1)
(4319,127,1)
(4874,8520,1)
(2056,447,1)
(8713,5937,1)
(1353,5265,1)
(2610,1284,1)
(2682,65,1)
(5397,8439,1)
(1560,7657,1)
(2611,5061,1)
(7191,6279,1)
(8162,6242,1)
(6914,4817,1)
(2845,7976,1)
(2130,4493,1)
(8774,7460,1)
(3634,1263,1)
(2308,946,1)
(3231,952,1)
(6203,6372,1)
(4882,1272,1)
(3697,6028,1)
(7228,8566,1)
(4942,3723,1)
(5359,2060,1)
(1331,5693,1)
(2412,5935,1)
(3055,6056,1)
(1311,5197,1)
(5135,6900,1)
(3712,6430,1)
(980,7251,1)
(5478,5955,1)
(5731,2087,1)
(1070,5628,1)
(2645,2768,1)
(1308,9076,1)
(6326,3990,1)
(8005,4276,1)
(4523,3187,1)
(4803,6122,1)
(4584,1641,1)
(4137,539,1)
(2462,339,1)
(1235,1192,1)
(2653,1947,1)
(4822,5061,1)
(1514,2028,1)
(3344,1854,1)
(6793,4582,1)
(8006,4058,1)
(765,5429,1)
(242,3913,1)
(1321,8961,1)
(5424,9010,1)
(2497,3305,1)
(5316,4452,1)
(6329,631,1)
(6631,2331,1)
(5824,2534,1)
(5142,2035,1)
(6566,7326,1)
(244,9046,1)
(8895,449,1)
(5148,3647,1)
(449,3007,1)
(6770,6082,1)
(9001,5958,1)
(8899,5996,1)
(4618,545,1)
(492,2121,1)
(5318,7809,1)
(946,7733,1)
(3228,7696,1)
(5275,3462,1)
(4504,8047,1)
(7625,1280,1)
(181,3286,1)
(7653,7656,1)
(7019,3815,1)
(328,6790,1)
(130,8704,1)
(2000,8566,1)
(5243,6846,1)
(2353,5084,1)
(6258,8566,1)
(3718,3377,1)
(8417,5997,1)
(2959,3878,1)
(958,5061,1)
(5181,8531,1)
(2156,2234,1)
(2005,7145,1)
(6207,3822,1)
(5981,1468,1)
(312,3352,1)
(4917,5315,1)
(2126,5632,1)
(1948,7025,1)
(8316,8199,1)
(8830,1742,1)
(3998,189,1)
(6886,1726,1)
(688,4450,1)
(8700,6883,1)
(4303,2015,1)
(143,5892,1)
(2947,977,1)
(1664,8265,1)
(8700,1952,1)
(6102,7401,1)
(9104,6836,1)
(1793,5582,1)
(8752,8566,1)
(1935,5614,1)
(8997,974,1)
(533,573,1)
(234,5243,1)
(8232,1581,1)
(6635,5061,1)
(2520,8566,1)
(532,7109,1)
(5244,5847,1)
(5427,3552,1)
(2429,5061,1)
(3693,4057,1)
(7297,1764,1)
(4089,5061,1)
(6540,9107,1)
(4382,8918,1)
(1822,7944,1)
(5472,993,1)
(1675,1785,1)
(131,6399,1)
(3546,8566,1)
(5105,2496,1)
(5642,1989,1)
(4748,1805,1)
(5994,1518,1)
(8160,1737,1)
(4590,340,1)
(6462,706,1)
(7511,7720,1)
(4060,5617,1)
(5946,1809,1)
(5519,7766,1)
(5361,6084,1)
(5759,231,1)
(8822,1369,1)
(8574,3376,1)
(2261,5061,1)
(2011,8397,1)
(8495,3520,1)
(8440,4730,1)
(6799,2951,1)
(1220,3936,1)
(1222,5862,1)
(3042,258,1)
(3339,8898,1)
(2692,8566,1)
(7860,4151,1)
(1316,8832,1)
(821,4763,1)
(9070,4558,1)
(122,3662,1)
(8966,4076,1)
(4576,3522,1)
(3092,4868,1)
(1281,3457,1)
(7228,5061,1)
(8455,629,1)
(2000,5301,1)
(1306,3040,1)
(4671,507,1)
(3687,3202,1)
(4338,5674,1)
(9120,8566,1)
(685,4825,1)
(5829,7444,1)
(5355,3219,1)
(477,8042,1)
(2530,5061,1)
(5706,3918,1)
(951,5239,1)
(2178,6768,1)
(1106,8566,1)
(629,849,1)
(4264,6030,1)
(6107,1016,1)
(8025,7831,1)
(3795,7860,1)
(1673,5061,1)
(2892,4643,1)
(2513,7979,1)
(7272,7565,1)
(4298,2150,1)
(4558,4608,1)
(7069,6166,1)
(2288,9122,1)
(1281,4786,1)
(2882,8567,1)
(4712,8566,1)
(3463,8837,1)
(3520,6840,1)
(2854,5061,1)
(8739,8748,1)
(8596,2967,1)
(7094,4248,1)
(2273,6237,1)
(318,8035,1)
(7347,7366,1)
(5167,4310,1)
(2868,6159,1)
(1555,8659,1)
(8541,5882,1)
(5451,7686,1)
(6444,3152,1)
(3559,4966,1)
(938,8840,1)
(4579,2147,1)
(8030,4858,1)
(122,6536,1)
(6511,398,1)
(1427,8862,1)
(3124,2485,1)
(5139,5599,1)
(7403,3541,1)
(6235,3333,1)
(6892,7250,1)
(5105,838,1)
(4424,5732,1)
(3329,5937,1)
(1564,8530,1)
(7720,6669,1)
(5925,6005,1)
(2736,5504,1)
(4667,4209,1)
(4097,4546,1)
(8116,812,1)
(6729,8316,1)
(7086,1395,1)
(4131,6291,1)
(4977,6768,1)
(259,2505,1)
(2565,7049,1)
(5334,8433,1)
(8022,8275,1)
(3145,8992,1)
(5114,1524,1)
(4575,4006,1)
(2634,5061,1)
(1093,3376,1)
(8277,4833,1)
(416,2108,1)
(4063,8149,1)
(618,7356,1)
(9104,3666,1)
(2059,5952,1)
(414,5622,1)
(3561,5937,1)
(6408,5992,1)
(8599,3751,1)
(7637,9014,1)
(2546,1892,1)
(3211,1751,1)
(8250,6434,1)
(5164,4144,1)
(3602,2701,1)
(4899,1575,1)
(5072,2598,1)
(1406,836,1)
(8628,3231,1)
(913,6120,1)
(6306,6744,1)
(8782,5937,1)
(9104,35,1)
(3,6733,1)
(9116,9070,1)
(6566,7425,1)
(6458,6040,1)
(3151,6641,1)
(2919,2310,1)
(7855,1312,1)
(4750,8906,1)
(5755,8614,1)
(4134,5559,1)
(7855,2318,1)
(6989,4648,1)
(2176,8566,1)
(4889,4842,1)
(7956,8566,1)
(1130,7799,1)
(6132,1041,1)
(6602,4168,1)
(1052,7425,1)
(6824,3799,1)
(616,4192,1)
(6125,7517,1)
(193,1987,1)
(8950,1174,1)
(1466,6768,1)
(2281,5061,1)
(8608,8214,1)
(2015,2632,1)
(1872,6089,1)
(548,302,1)
(953,6380,1)
(3217,4243,1)
(2089,4246,1)
(2967,4026,1)
(5013,2491,1)
(6711,5373,1)
(2645,2496,1)
(8232,7413,1)
(4817,2840,1)
(2221,8723,1)
(4606,5937,1)
(2662,6869,1)
(5510,8566,1)
(5422,5646,1)
(7646,5503,1)
(3793,800,1)
(9037,1679,1)
(5675,5368,1)
(4693,6728,1)
(5010,5061,1)
(1805,2335,1)
(9066,5846,1)
(6315,5378,1)
(7703,6171,1)
(6566,4642,1)
(6388,8115,1)
(1587,1876,1)
(4146,8814,1)
(9104,1552,1)
(5196,4491,1)
(2645,7326,1)
(7756,1068,1)
(8637,8182,1)
(5402,5197,1)
(2243,56,1)
(3336,5270,1)
(2567,7094,1)
(5380,3841,1)
(4271,3567,1)
(5110,8075,1)
(1979,1099,1)
(5868,2579,1)
(741,310,1)
(1534,5061,1)
(2650,5061,1)
(8890,6002,1)
(7501,7956,1)
(4273,5061,1)
(3740,1490,1)
(6675,5061,1)
(4219,5419,1)
(7325,3718,1)
(5935,3418,1)
(1942,2635,1)
(500,5054,1)
(6910,9000,1)
(542,6892,1)
(2275,8718,1)
(418,350,1)
(1351,7004,1)
(709,7476,1)
(403,6706,1)
(3250,4306,1)
(5747,5061,1)
(3996,8566,1)
(3312,7544,1)
(5298,1001,1)
(5894,4642,1)
(7347,8217,1)
(745,3034,1)
(7227,3858,1)
(7252,861,1)
(3544,5936,1)
(994,8566,1)
(6185,6737,1)
(998,8566,1)
(3234,1172,1)
(3402,178,1)
(6979,3703,1)
(3029,1078,1)
(1062,1403,1)
(1057,6948,1)
(281,6507,1)
(921,1043,1)
(3701,8566,1)
(1395,3238,1)
(2733,9076,1)
(4456,8675,1)
(6236,2067,1)
(4854,7397,1)
(6031,173,1)
(2834,5061,1)
(4528,238,1)
(1757,3316,1)
(321,131,1)
(4733,8177,1)
(7214,7269,1)
(5704,3806,1)
(7209,2371,1)
(5168,2569,1)
(6515,5676,1)
(1116,906,1)
(7835,6697,1)
(6203,2376,1)
(1279,5061,1)
(7396,5007,1)
(1458,65,1)
(703,2814,1)
(6493,3422,1)
(6447,5164,1)
(2106,5061,1)
(7918,3208,1)
(1219,2623,1)
(8482,6095,1)
(142,1767,1)
(356,7696,1)
(4143,8705,1)
(6717,2003,1)
(2618,8671,1)
(190,6037,1)
(4658,7390,1)
(7584,7801,1)
(5844,3539,1)
(5149,2748,1)
(5725,2231,1)
(5781,353,1)
(1410,7383,1)
(7282,5571,1)
(2891,8223,1)
(6265,8579,1)
(7556,5785,1)
(34,8476,1)
(2540,1192,1)
(4172,9115,1)
(1693,2242,1)
(4200,7624,1)
(7775,5061,1)
(8232,6894,1)
(2499,8159,1)
(4570,5061,1)
(5468,4347,1)
(908,7202,1)
(6170,4279,1)
(6947,8430,1)
(8204,426,1)
(7461,7909,1)
(8998,4060,1)
(8232,5470,1)
(6517,3856,1)
(4549,1937,1)
(2081,4843,1)
(537,603,1)
(3098,597,1)
(8581,6024,1)
(1861,3722,1)
(282,5836,1)
(6737,4654,1)
(1998,352,1)
(6887,5937,1)
(1855,5011,1)
(3303,8741,1)
(343,8566,1)
(4190,8566,1)
(9028,5327,1)
(5641,4500,1)
(4342,3177,1)
(7005,388,1)
(6637,5483,1)
(4585,9093,1)
(526,1,1)
(6718,4595,1)
(8700,8313,1)
(5289,3468,1)
(7974,5166,1)
(8204,5461,1)
(1403,8566,1)
(5080,6561,1)
(5656,5692,1)
(8992,880,1)
(3371,4349,1)
(7945,7218,1)
(8706,4642,1)
(5982,1924,1)
(1246,5385,1)
(42,8729,1)
(2090,5424,1)
(4082,8205,1)
(5387,4061,1)
(6544,3682,1)
(9105,858,1)
(8514,6360,1)
(803,6510,1)
(1144,3376,1)
(5474,5986,1)
(8745,1067,1)
(5640,3652,1)
(4892,6855,1)
(1593,4319,1)
(4789,8566,1)
(6033,1402,1)
(2486,7508,1)
(7889,1141,1)
(3277,6854,1)
(4521,4678,1)
(3232,8195,1)
(1459,6388,1)
(4259,3376,1)
(5626,3940,1)
(7374,8934,1)
(8706,2870,1)
(4331,1326,1)
(1550,2803,1)
(6237,3728,1)
(5563,3591,1)
(6725,5378,1)
(2864,6983,1)
(1037,384,1)
(3051,4848,1)
(2030,7691,1)
(5087,1762,1)
(7193,5937,1)
(9104,537,1)
(4948,1342,1)
(5544,8566,1)
(6187,901,1)
(3955,1613,1)
(7037,9008,1)
(7301,5061,1)
(1666,428,1)
(5954,2595,1)
(360,7224,1)
(6986,1156,1)
(5995,6492,1)
(733,1185,1)
(8285,3440,1)
(5607,3474,1)
(1565,5061,1)
(8461,7839,1)
(2007,6869,1)
(4976,4064,1)
(7373,2384,1)
(1358,1898,1)
(6767,8112,1)
(165,5551,1)
(8448,7154,1)
(4732,5061,1)
(901,258,1)
(2166,1551,1)
(4342,7619,1)
(7755,9043,1)
(5,5481,1)
(700,1645,1)
(1534,8566,1)
(8741,4544,1)
(1692,2689,1)
(635,7217,1)
(1675,3270,1)
(117,1389,1)
(8542,3929,1)
(6966,4512,1)
(3274,8579,1)
(4555,1316,1)
(8281,1106,1)
(406,5061,1)
(2614,5318,1)
(724,9097,1)
(1163,8129,1)
(3062,4051,1)
(4512,5061,1)
(4845,8566,1)
(1730,6997,1)
(4138,8009,1)
(5215,2151,1)
(6170,8720,1)
(6566,3647,1)
(2146,6653,1)
(8943,1789,1)
(7406,3202,1)
(9136,952,1)
(4780,885,1)
(4548,6421,1)
(8094,7337,1)
(8099,1055,1)
(2487,5324,1)
(344,5865,1)
(201,116,1)
(9023,8171,1)
(564,2262,1)
(8630,5344,1)
(2722,2501,1)
(9062,71,1)
(1058,9111,1)
(134,4119,1)
(269,7845,1)
(3409,3525,1)
(8387,3052,1)
(3552,8815,1)
(2650,8566,1)
(8598,7024,1)
(4412,9114,1)
(8816,1889,1)
(8240,2620,1)
(4846,8278,1)
(1155,703,1)
(5522,5883,1)
(2069,3198,1)
(821,8566,1)
(4457,720,1)
(819,533,1)
(507,8091,1)
(4330,7794,1)
(7721,4657,1)
(3191,857,1)
(5141,525,1)
(8582,7891,1)
(6892,758,1)
(829,8221,1)
(5235,3492,1)
(4173,8566,1)
(5165,7764,1)
(5609,3732,1)
(1265,1670,1)
(7516,8566,1)
(4214,5061,1)
(5419,8929,1)
(7267,4184,1)
(2958,6200,1)
(3899,560,1)
(900,7736,1)
(484,5061,1)
(18,8081,1)
(674,2820,1)
(6361,49,1)
(5055,644,1)
(1842,2777,1)
(3437,6276,1)
(184,7904,1)
(7196,8218,1)
(8204,8975,1)
(8570,1430,1)
(1288,6939,1)
(6654,7344,1)
(4925,2290,1)
(3821,1373,1)
(2388,6150,1)
(3314,8279,1)
(1702,4778,1)
(9019,6037,1)
(4379,7149,1)
(154,5486,1)
(3882,7061,1)
(6394,6094,1)
(3753,5438,1)
(6839,5017,1)
(65,3916,1)
(1187,5061,1)
(2600,1142,1)
(5536,8001,1)
(3716,5687,1)
(8650,3269,1)
(2467,4169,1)
(206,6592,1)
(2850,6722,1)
(325,258,1)
(5280,4187,1)
(7756,4530,1)
(2913,2800,1)
(8676,5061,1)
(8273,2776,1)
(8165,6974,1)
(6168,6830,1)
(8274,2256,1)
(7727,4546,1)
(5039,8566,1)
(7783,4073,1)
(2271,8106,1)
(2245,4935,1)
(4569,2476,1)
(3157,3249,1)
(5413,3490,1)
(7663,4539,1)
(3620,7345,1)
(2107,3310,1)
(7776,65,1)
(8204,6170,1)
(4145,5083,1)
(5491,3729,1)
(401,6768,1)
(4590,4662,1)
(7083,6439,1)
(2836,5061,1)
(7951,7477,1)
(588,911,1)
(975,2288,1)
(2830,4727,1)
(4114,4633,1)
(4702,5450,1)
(4680,5118,1)
(3204,3285,1)
(6562,63,1)
(2602,4875,1)
(1539,1471,1)
(6426,5061,1)
(4610,6388,1)
(6449,8513,1)
(3855,2803,1)
(152,5061,1)
(7611,5061,1)
(3068,110,1)
(2916,8054,1)
(1290,7443,1)
(4220,5750,1)
(8079,7321,1)
(8248,3202,1)
(1205,8566,1)
(1561,5428,1)
(636,7013,1)
(8799,2011,1)
(8493,5061,1)
(3618,3617,1)
(2771,5768,1)
(6782,3840,1)
(8090,4269,1)
(6103,1896,1)
(3878,127,1)
(4573,1456,1)
(4836,5061,1)
(5115,5710,1)
(7676,881,1)
(3974,8482,1)
(5105,4400,1)
(4743,5061,1)
(2985,8865,1)
(2163,2946,1)
(6637,1607,1)
(6709,5109,1)
(7006,8321,1)
(1504,1781,1)
(9010,2267,1)
(4182,1512,1)
(7666,5697,1)
(7087,1926,1)
(5638,698,1)
(6338,250,1)
(2243,65,1)
(2274,1059,1)
(3692,2033,1)
(187,440,1)
(2,4515,1)
(1976,3522,1)
(3958,127,1)
(4370,1324,1)
(8826,7290,1)
(2491,2033,1)
(8566,5244,1)
(547,3550,1)
(2598,4454,1)
(7814,8038,1)
(5624,5061,1)
(8204,3602,1)
(8690,6897,1)
(7328,4389,1)
(1276,982,1)
(6743,7102,1)
(7183,5359,1)
(4318,1404,1)
(4875,8522,1)
(4893,8040,1)
(1578,7668,1)
(7532,2992,1)
(4054,7866,1)
(3216,6354,1)
(761,3339,1)
(4474,11,1)
(6426,1166,1)
(8745,8124,1)
(1569,7014,1)
(5832,45,1)
(1281,8307,1)
(1937,2202,1)
(3345,3751,1)
(8970,5921,1)
(6067,2140,1)
(424,6609,1)
(6652,4402,1)
(8094,8566,1)
(5124,5407,1)
(371,3148,1)
(3427,2796,1)
(2290,8893,1)
(507,6785,1)
(8204,1328,1)
(3560,4755,1)
(8985,162,1)
(8734,4253,1)
(6996,1203,1)
(2715,1902,1)
(6863,5568,1)
(1259,8566,1)
(2092,2083,1)
(3772,258,1)
(816,4355,1)
(3024,6418,1)
(8505,5854,1)
(7759,8566,1)
(960,8566,1)
(2751,8566,1)
(4095,5061,1)
(1499,8490,1)
(8792,1937,1)
(5279,2971,1)
(7243,4475,1)
(826,4361,1)
(3143,7034,1)
(7111,7230,1)
(7575,2562,1)
(1575,8566,1)
(7471,6225,1)
(6857,4230,1)
(6364,7842,1)
(527,1257,1)
(4746,8585,1)
(2450,6944,1)
(4001,7974,1)
(3207,7752,1)
(3992,153,1)
(8058,109,1)
(3604,6768,1)
(4874,6939,1)
(2834,6773,1)
(4486,9095,1)
(6470,7818,1)
(7037,6730,1)
(180,107,1)
(1818,6809,1)
(1074,5685,1)
(317,773,1)
(5565,3963,1)
(8248,5810,1)
(2643,3046,1)
(3428,300,1)
(8587,3018,1)
(7231,8566,1)
(92,7591,1)
(1641,2060,1)
(5976,4753,1)
(6024,2630,1)
(7670,3020,1)
(3125,5061,1)
(7644,4811,1)
(8204,8051,1)
(4015,1035,1)
(2340,8566,1)
(2653,5580,1)
(3072,3756,1)
(4679,8154,1)
(3367,8190,1)
(8865,4024,1)
(6625,22,1)
(4831,5036,1)
(5558,9149,1)
(880,5280,1)
(2635,5621,1)
(9000,2154,1)
(5941,229,1)
(5039,5061,1)
(2581,8926,1)
(1679,5061,1)
(6416,6308,1)
(431,1059,1)
(219,6973,1)
(9124,6092,1)
(5276,9005,1)
(7797,5789,1)
(7947,1497,1)
(3082,1306,1)
(7335,538,1)
(2228,5052,1)
(923,6119,1)
(1282,5061,1)
(5152,710,1)
(6511,844,1)
(4705,182,1)
(4349,8094,1)
(5513,5215,1)
(8952,8743,1)
(3635,7215,1)
(4610,3231,1)
(2302,2173,1)
(3666,5521,1)
(6690,8566,1)
(4019,7863,1)
(7655,1675,1)
(2869,3696,1)
(81,4197,1)
(1458,4081,1)
(4104,7459,1)
(7845,2089,1)
(1459,3153,1)
(990,239,1)
(2998,6334,1)
(5617,6473,1)
(6968,5034,1)
(7949,8566,1)
(4854,8566,1)
(8962,1619,1)
(7528,7516,1)
(8353,6395,1)
(6084,656,1)
(5270,5061,1)
(17,4836,1)
(1702,8060,1)
(3260,5479,1)
(3412,3107,1)
(5347,3111,1)
(5156,1639,1)
(6741,1570,1)
(100,1657,1)
(1361,7279,1)
(6402,736,1)
(3147,5061,1)
(4393,3078,1)
(6036,5092,1)
(5747,8566,1)
(3056,1573,1)
(6345,5061,1)
(6507,5061,1)
(587,2373,1)
(2454,5299,1)
(6566,2205,1)
(2844,2975,1)
(2944,1814,1)
(4596,6694,1)
(6521,6879,1)
(2735,5937,1)
(7165,3575,1)
(9121,6901,1)
(4547,1218,1)
(8208,1299,1)
(468,1505,1)
(5726,2692,1)
(7426,5061,1)
(7178,2221,1)
(5673,8889,1)
(2073,3376,1)
(7152,6610,1)
(6427,5691,1)
(8159,8566,1)
(9043,7627,1)
(1524,8566,1)
(4336,5888,1)
(438,2699,1)
(8282,2577,1)
(5655,8566,1)
(5329,8566,1)
(6424,5648,1)
(588,7744,1)
(478,4870,1)
(927,8566,1)
(4519,7521,1)
(768,3836,1)
(367,4987,1)
(8364,127,1)
(6594,6543,1)
(6441,5428,1)
(3679,3156,1)
(9134,8566,1)
(2525,7261,1)
(1587,2892,1)
(95,7359,1)
(1575,5061,1)
(6599,6277,1)
(4864,6788,1)
(837,224,1)
(6843,2868,1)
(3239,7988,1)
(8444,3148,1)
(2754,422,1)
(944,5449,1)
(5870,8566,1)
(3422,4246,1)
(9135,5781,1)
(4754,6823,1)
(6221,7803,1)
(9143,697,1)
(3342,5762,1)
(6129,3691,1)
(6051,1269,1)
(718,7019,1)
(4638,7175,1)
(1173,8414,1)
(7509,4542,1)
(3230,6204,1)
(2274,2803,1)
(96,4333,1)
(8956,496,1)
(2219,9140,1)
(7394,4783,1)
(8930,5237,1)
(4112,6657,1)
(1941,8520,1)
(2645,6826,1)
(6258,4347,1)
(2323,8566,1)
(1652,1029,1)
(778,6247,1)
(1350,5922,1)
(1158,8543,1)
(5075,4464,1)
(1758,1515,1)
(3483,2248,1)
(79,8724,1)
(7793,5061,1)
(5148,681,1)
(5667,2402,1)
(6566,8966,1)
(1511,1386,1)
(5398,2893,1)
(1846,5184,1)
(8677,797,1)
(2811,1876,1)
(7905,6791,1)
(1716,8566,1)
(7037,926,1)
(8400,3772,1)
(8461,17,1)
(3963,461,1)
(5066,5983,1)
(8403,5061,1)
(2139,2496,1)
(7052,2005,1)
(8782,3977,1)
(3137,8123,1)
(5988,2297,1)
(8903,8227,1)
(2133,6793,1)
(2726,5505,1)
(5206,424,1)
(5916,5434,1)
(7999,3431,1)
(8138,8566,1)
(113,5852,1)
(4303,6041,1)
(6214,4039,1)
(3017,8264,1)
(5878,6145,1)
(8606,1398,1)
(8152,6748,1)
(7834,8769,1)
(8539,4347,1)
(8980,5454,1)
(5044,5555,1)
(49,6096,1)
(5320,3720,1)
(6804,1872,1)
(6872,4547,1)
(8224,6016,1)
(9096,8566,1)
(9142,4549,1)
(3265,7805,1)
(6636,1876,1)
(4755,692,1)
(4676,6599,1)
(5341,8357,1)
(1638,3203,1)
(6270,8566,1)
(2434,8892,1)
(8767,177,1)
(1204,5061,1)
(5803,7069,1)
(1939,5427,1)
(1035,487,1)
(3856,12,1)
(1741,8566,1)
(2532,8566,1)
(4907,7679,1)
(6885,4339,1)
(4671,5250,1)
(3840,7323,1)
(9003,4429,1)
(8586,6284,1)
(9130,75,1)
(3515,6109,1)
(5814,4699,1)
(7589,1617,1)
(4684,5999,1)
(2070,868,1)
(1702,8697,1)
(1733,4899,1)
(3370,9017,1)
(7518,2803,1)
(2837,9056,1)
(6489,1655,1)
(8706,7962,1)
(352,488,1)
(879,3673,1)
(8868,9031,1)
(3555,7841,1)
(5615,6155,1)
(1308,5989,1)
(7658,6780,1)
(7782,258,1)
(6715,5274,1)
(1247,5694,1)
(6383,242,1)
(6117,5269,1)
(8979,6421,1)
(4660,5960,1)
(6644,2518,1)
(7526,1802,1)
(4661,1261,1)
(2481,105,1)
(7448,2898,1)
(5450,7582,1)
(6634,1876,1)
(851,4397,1)
(3382,7395,1)
(5918,4992,1)
(4559,414,1)
(1121,2426,1)
(4365,5061,1)
(7889,113,1)
(2187,641,1)
(6139,4004,1)
(6650,8460,1)
(2246,7571,1)
(7779,3925,1)
(1399,2431,1)
(9137,5089,1)
(7462,7164,1)
(394,8566,1)
(4178,1989,1)
(3685,4306,1)
(1254,8566,1)
(6357,6490,1)
(273,6435,1)
(7771,5417,1)
(5605,1490,1)
(4396,7,1)
(8436,4225,1)
(4597,682,1)
(2471,6885,1)
(7383,1176,1)
(6109,765,1)
(3959,4305,1)
(5592,6180,1)
(1794,5212,1)
(2002,1198,1)
(5651,6471,1)
(6551,5023,1)
(8547,3797,1)
(2864,8176,1)
(5163,725,1)
(3690,6710,1)
(5577,3061,1)
(1323,4593,1)
(1827,7981,1)
(949,1286,1)
(3490,2275,1)
(11,3141,1)
(1516,6853,1)
(4014,6180,1)
(1157,2237,1)
(929,1831,1)
(3536,8045,1)
(4037,972,1)
(4184,3500,1)
(7754,1651,1)
(6058,1704,1)
(7163,5843,1)
(3871,5937,1)
(2504,2805,1)
(1867,1034,1)
(533,8209,1)
(7807,4057,1)
(5832,766,1)
(7452,393,1)
(8193,2515,1)
(2283,7699,1)
(8080,4697,1)
(3283,1843,1)
(8242,8566,1)
(6567,1821,1)
(98,6803,1)
(2943,1984,1)
(5075,7271,1)
(3747,1160,1)
(2764,7128,1)
(7898,5365,1)
(4,3153,1)
(5701,4352,1)
(8571,4268,1)
(7273,7652,1)
(9155,4958,1)
(5304,2048,1)
(5270,8566,1)
(919,5769,1)
(522,191,1)
(5105,1866,1)
(8425,1307,1)
(7,8566,1)
(2768,7671,1)
(5431,7984,1)
(9009,8566,1)
(4463,20,1)
(4909,8907,1)
(5687,5676,1)
(4952,3256,1)
(3937,7572,1)
(5375,1906,1)
(5105,2768,1)
(9074,3334,1)
(5973,7410,1)
(904,3540,1)
(4080,5061,1)
(1181,655,1)
(5602,4526,1)
(8960,5061,1)
(5826,6501,1)
(2577,975,1)
(2447,297,1)
(5820,2505,1)
(6158,1163,1)
(795,8338,1)
(3263,8444,1)
(5507,3638,1)
(1437,7194,1)
(5130,8566,1)
(4960,4501,1)
(1248,6848,1)
(8773,1124,1)
(8771,8566,1)
(5484,3501,1)
(6299,8634,1)
(3932,5966,1)
(7746,5061,1)
(3908,5937,1)
(1430,4856,1)
(2923,4035,1)
(1236,9156,1)
(2243,1960,1)
(8272,8566,1)
(7066,350,1)
(5979,5061,1)
(9076,4048,1)
(868,3231,1)
(2713,8566,1)
(4424,4953,1)
(3627,4568,1)
(4621,4307,1)
(3319,6767,1)
(1133,4676,1)
(866,6624,1)
(4730,7570,1)
(6167,349,1)
(1483,2104,1)
(98,107,1)
(6370,2952,1)
(2820,8566,1)
(3042,65,1)
(3241,2957,1)
(3060,4488,1)
(6581,479,1)
(8612,3247,1)
(8107,8244,1)
(890,5331,1)
(5841,127,1)
(8519,5061,1)
(5088,3038,1)
(7174,6909,1)
(5090,4606,1)
(3814,7272,1)
(1142,6873,1)
(5105,6276,1)
(1056,3542,1)
(2820,8556,1)
(4067,5361,1)
(906,1187,1)
(2584,6127,1)
(8204,8329,1)
(2198,4583,1)
(3865,4367,1)
(6601,1663,1)
(7301,8566,1)
(7691,3376,1)
(756,1949,1)
(8338,1439,1)
(6279,4809,1)
(766,45,1)
(5318,1902,1)
(1850,5039,1)
(6571,8519,1)
(576,4729,1)
(6754,8883,1)
(7688,4208,1)
(3562,7421,1)
(6877,6281,1)
(7398,1450,1)
(5680,8499,1)
(320,3835,1)
(279,3915,1)
(6289,310,1)
(340,3189,1)
(5788,3889,1)
(2645,3647,1)
(5894,6340,1)
(6507,4944,1)
(4005,2843,1)
(1922,4899,1)
(61,201,1)
(7564,4348,1)
(1753,2941,1)
(1185,5061,1)
(4064,4683,1)
(5147,7201,1)
(7610,8586,1)
(2241,7124,1)
(2769,8566,1)
(5148,8735,1)
(5685,3880,1)
(2430,1276,1)
(35,2793,1)
(8049,960,1)
(6011,8008,1)
(7389,3532,1)
(5217,568,1)
(7015,5061,1)
(1153,8473,1)
(2007,5264,1)
(3222,425,1)
(3437,7425,1)
(1849,112,1)
(7885,5061,1)
(3970,8047,1)
(64,127,1)
(99,5857,1)
(7695,5138,1)
(1386,6269,1)
(6701,8566,1)
(1577,2698,1)
(4940,5861,1)
(1115,5706,1)
(3688,258,1)
(6032,8476,1)
(8708,6148,1)
(2261,6364,1)
(2481,8499,1)
(4648,5937,1)
(507,1244,1)
(4738,8566,1)
(1045,8566,1)
(3226,3575,1)
(4383,31,1)
(3343,2999,1)
(8795,7296,1)
(2356,4251,1)
(2433,8681,1)
(8706,2485,1)
(1010,7897,1)
(4475,527,1)
(4393,794,1)
(9136,2485,1)
(3893,2116,1)
(8204,6478,1)
(5409,3318,1)
(817,4424,1)
(5785,3590,1)
(5512,1914,1)
(5443,3731,1)
(1756,5061,1)
(2645,7425,1)
(1316,5457,1)
(3153,2474,1)
(5413,12,1)
(1776,1602,1)
(993,3827,1)
(5492,2011,1)
(7869,3688,1)
(6755,7715,1)
(1751,8,1)
(260,5340,1)
(2551,273,1)
(2219,7727,1)
(5531,5920,1)
(8015,6678,1)
(6864,3963,1)
(7044,2860,1)
(1232,6086,1)
(1024,2338,1)
(6046,1529,1)
(352,1930,1)
(5535,7548,1)
(25,6505,1)
(2573,8566,1)
(7542,5029,1)
(3957,6577,1)
(5870,5061,1)
(1731,2847,1)
(1284,8558,1)
(1463,6091,1)
(3091,3776,1)
(8763,2915,1)
(2398,2976,1)
(2710,53,1)
(1992,7088,1)
(9060,6059,1)
(8040,2906,1)
(6586,6829,1)
(6265,3530,1)
(678,8564,1)
(619,5937,1)
(2571,3021,1)
(3430,8657,1)
(7168,1577,1)
(5608,5061,1)
(5388,7506,1)
(5815,6659,1)
(3642,6494,1)
(2586,5177,1)
(8818,8566,1)
(8025,7171,1)
(5839,7579,1)
(5703,3790,1)
(2267,1520,1)
(2990,120,1)
(2197,5507,1)
(6510,8692,1)
(7034,3202,1)
(101,6593,1)
(2422,2767,1)
(2418,8179,1)
(4610,3904,1)
(3929,914,1)
(3378,8024,1)
(8383,5519,1)
(3767,3304,1)
(7440,5061,1)
(8654,3122,1)
(6269,8250,1)
(6626,6458,1)
(4747,5384,1)
(7116,8566,1)
(7423,1862,1)
(7334,1791,1)
(5049,4918,1)
(4906,4792,1)
(5192,7521,1)
(8427,5061,1)
(2177,8224,1)
(4089,8566,1)
(2937,4353,1)
(2425,7000,1)
(6587,7375,1)
(1150,2249,1)
(3437,2496,1)
(5265,8726,1)
(7281,645,1)
(1995,2176,1)
(26,8678,1)
(6257,2908,1)
(7838,8686,1)
(9146,8887,1)
(4744,5719,1)
(381,5284,1)
(2955,4673,1)
(2583,9009,1)
(5105,8256,1)
(439,7234,1)
(4350,2950,1)
(4592,5790,1)
(6620,8566,1)
(3531,665,1)
(3701,6588,1)
(2202,65,1)
(8453,5775,1)
(1683,901,1)
(3006,6296,1)
(6692,1044,1)
(3376,6011,1)
(518,8566,1)
(199,476,1)
(1984,103,1)
(4869,9041,1)
(2810,6221,1)
(7455,5061,1)
(4472,916,1)
(7744,2829,1)
(6757,1891,1)
(5252,8390,1)
(451,4779,1)
(8645,6217,1)
(2924,7605,1)
(1609,4477,1)
(8204,6527,1)
(9104,2485,1)
(4365,8566,1)
(2003,2787,1)
(3419,7246,1)
(8012,6353,1)
(3026,4256,1)
(2685,3146,1)
(1552,8566,1)
(1614,921,1)
(4040,1059,1)
(221,1231,1)
(2609,2064,1)
(7172,4158,1)
(5267,1009,1)
(1786,6869,1)
(1397,4469,1)
(4275,5449,1)
(7776,489,1)
(2808,4897,1)
(2760,3546,1)
(6570,5061,1)
(2751,5061,1)
(2532,5061,1)
(7377,3927,1)
(4382,7435,1)
(6706,2391,1)
(4930,5061,1)
(8517,6049,1)
(4969,5880,1)
(6566,2870,1)
(1591,7389,1)
(5850,3152,1)
(6210,7838,1)
(1819,5061,1)
(4857,6078,1)
(4603,6672,1)
(5009,8813,1)
(5919,5567,1)
(8589,5061,1)
(4838,5578,1)
(298,4451,1)
(7250,4092,1)
(7867,4487,1)
(4195,7901,1)
(4762,5901,1)
(6931,8450,1)
(2713,1725,1)
(3726,7246,1)
(6605,4806,1)
(7564,4916,1)
(8204,6864,1)
(50,2788,1)
(557,4129,1)
(7518,1059,1)
(2863,5061,1)
(3124,4864,1)
(1367,2659,1)
(6083,6158,1)
(7023,8914,1)
(6892,3201,1)
(3041,5200,1)
(3759,5635,1)
(2523,7868,1)
(7477,337,1)
(8897,2451,1)
(3688,2012,1)
(178,253,1)
(2997,5731,1)
(5927,8566,1)
(4512,2099,1)
(8606,4003,1)
(218,3431,1)
(593,1933,1)
(4062,6768,1)
(9031,4497,1)
(5102,3220,1)
(7381,8887,1)
(6536,4147,1)
(1224,1985,1)
(1581,3201,1)
(7727,4097,1)
(8046,6621,1)
(3045,2609,1)
(5602,4803,1)
(712,1714,1)
(2231,5061,1)
(773,8566,1)
(8207,2561,1)
(5164,8566,1)
(2584,3647,1)
(6900,1256,1)
(7829,5061,1)
(3891,1757,1)
(7402,3289,1)
(3354,7499,1)
(3126,217,1)
(2048,1026,1)
(71,2448,1)
(6454,6753,1)
(3720,1904,1)
(4870,1765,1)
(2834,8566,1)
(5410,3273,1)
(5706,8566,1)
(2980,1871,1)
(3454,8566,1)
(4574,7533,1)
(5237,6041,1)
(8931,3451,1)
(4437,3253,1)
(1806,9071,1)
(4206,7745,1)
(1628,7541,1)
(3520,5305,1)
(2522,1243,1)
(2974,7953,1)
(1765,4120,1)
(1924,8244,1)
(1741,2937,1)
(9104,9042,1)
(3787,5061,1)
(9150,2056,1)
(7424,3169,1)
(8204,4710,1)
(1661,7424,1)
(8841,7458,1)
(2990,4995,1)
(7160,9006,1)
(5719,3967,1)
(4328,8270,1)
(8918,5552,1)
(3016,5738,1)
(1316,2736,1)
(4786,1843,1)
(6746,1240,1)
(2168,2792,1)
(8470,6049,1)
(6124,5604,1)
(8593,6077,1)
(9071,3425,1)
(4792,4711,1)
(5014,7412,1)
(3069,4594,1)
(3351,5202,1)
(351,5937,1)
(5750,5179,1)
(8455,8566,1)
(420,6043,1)
(4858,6218,1)
(4662,5190,1)
(185,5107,1)
(3054,1629,1)
(384,2293,1)
(3508,7431,1)
(4325,1633,1)
(8204,6172,1)
(8923,6315,1)
(2416,5211,1)
(5744,4400,1)
(1407,4503,1)
(4753,7340,1)
(4958,6053,1)
(6568,755,1)
(9138,8676,1)
(7088,885,1)
(4227,6643,1)
(5186,7819,1)
(8720,7059,1)
(4267,7283,1)
(802,7314,1)
(6263,5650,1)
(2476,5231,1)
(5749,2674,1)
(2716,121,1)
(6570,8087,1)
(2153,4823,1)
(2063,6869,1)
(4455,2880,1)
(4412,6746,1)
(3826,8566,1)
(95,1412,1)
(6807,4770,1)
(2954,2477,1)
(6111,9062,1)
(3368,8566,1)
(3109,8566,1)
(3116,6959,1)
(5852,5061,1)
(7228,8876,1)
(2528,7068,1)
(9132,3505,1)
(1689,5937,1)
(5897,8566,1)
(1896,8481,1)
(5086,3356,1)
(7648,5111,1)
(6755,8566,1)
(523,7076,1)
(2889,1203,1)
(594,7729,1)
(2445,9102,1)
(988,6835,1)
(3125,8566,1)
(3359,226,1)
(632,8324,1)
(6954,70,1)
(4002,571,1)
(2485,6501,1)
(2224,8566,1)
(5749,1830,1)
(9086,5433,1)
(3077,2442,1)
(8397,2216,1)
(8034,2271,1)
(1198,3531,1)
(5655,4223,1)
(4351,5193,1)
(2814,5061,1)
(4885,933,1)
(7696,3614,1)
(2645,1866,1)
(5237,8801,1)
(3500,5297,1)
(6598,4641,1)
(3424,7505,1)
(1701,7102,1)
(4836,6391,1)
(6381,8610,1)
(5579,3842,1)
(1067,3231,1)
(4359,974,1)
(6472,4069,1)
(4051,4896,1)
(5130,5061,1)
(4205,8553,1)
(217,8273,1)
(2469,309,1)
(868,3153,1)
(3843,8026,1)
(6165,7030,1)
(6756,6045,1)
(4770,6673,1)
(5497,3501,1)
(7544,8461,1)
(824,8810,1)
(8502,9083,1)
(3512,4709,1)
(5416,2444,1)
(3800,3831,1)
(5148,13,1)
(5467,314,1)
(5248,7583,1)
(6438,5128,1)
(8336,8930,1)
(8706,2496,1)
(2058,206,1)
(2172,487,1)
(6421,2420,1)
(3930,2112,1)
(7800,4179,1)
(7644,7358,1)
(7474,6558,1)
(297,2594,1)
(969,3801,1)
(2209,6765,1)
(5062,4367,1)
(4994,4449,1)
(3224,2114,1)
(691,8566,1)
(198,4548,1)
(3437,2485,1)
(6980,3942,1)
(3824,3671,1)
(6406,1080,1)
(3979,65,1)
(3712,2515,1)
(1811,8566,1)
(1203,6509,1)
(3272,6165,1)
(2847,2164,1)
(5148,8703,1)
(6823,7278,1)
(2584,4400,1)
(6851,2873,1)
(22,8863,1)
(6822,311,1)
(1512,5057,1)
(347,5570,1)
(6386,6545,1)
(4775,2525,1)
(2123,8533,1)
(6831,3744,1)
(8089,8677,1)
(4848,8781,1)
(3914,4994,1)
(4985,2541,1)
(3012,3252,1)
(1984,2607,1)
(8762,4177,1)
(1528,6446,1)
(6274,9047,1)
(5307,8479,1)
(897,8117,1)
(1991,5544,1)
(2263,4293,1)
(2419,1840,1)
(9033,6175,1)
(5035,5415,1)
(2239,6138,1)
(3447,7172,1)
(3085,1673,1)
(6978,480,1)
(1513,6528,1)
(7333,1669,1)
(5148,952,1)
(7973,3983,1)
(7692,5061,1)
(7913,284,1)
(6707,3064,1)
(2459,1460,1)
(6307,3190,1)
(2902,161,1)
(8360,2033,1)
(8496,2969,1)
(680,3881,1)
(2973,904,1)
(2006,7804,1)
(8127,7522,1)
(3135,4161,1)
(431,8707,1)
(2717,8063,1)
(7760,4517,1)
(7311,3563,1)
(4027,8650,1)
(5916,243,1)
(8657,7033,1)
(4168,8231,1)
(5343,2781,1)
(3112,6275,1)
(5547,8566,1)
(4069,6825,1)
(4395,6464,1)
(5701,3482,1)
(2645,7878,1)
(2075,8762,1)
(5041,4135,1)
(8204,5273,1)
(3448,1938,1)
(3437,2870,1)
(1568,6578,1)
(454,8566,1)
(5105,4798,1)
(6566,2768,1)
(4740,1631,1)
(8977,6153,1)
(7170,1672,1)
(4126,7120,1)
(446,5808,1)
(6430,905,1)
(8124,5052,1)
(473,7636,1)
(2286,7066,1)
(4429,1757,1)
(3702,6840,1)
(4605,6656,1)
(6946,2454,1)
(1659,5061,1)
(6422,6874,1)
(2611,5937,1)
(4169,7159,1)
(5488,3574,1)
(2226,3806,1)
(6705,3477,1)
(5131,8404,1)
(1006,1706,1)
(7644,8980,1)
(2176,5937,1)
(3255,1153,1)
(6614,575,1)
(5635,6300,1)
(2739,4039,1)
(6639,7879,1)
(5916,127,1)
(7113,5724,1)
(824,8566,1)
(8227,5409,1)
(740,8557,1)
(2050,1875,1)
(839,6269,1)
(1489,379,1)
(5388,7414,1)
(3505,4620,1)
(3186,4859,1)
(729,8169,1)
(163,9040,1)
(1467,4542,1)
(1729,969,1)
(1295,3743,1)
(2184,2635,1)
(3654,6856,1)
(4073,1056,1)
(2865,7706,1)
(3252,4410,1)
(7485,6794,1)
(322,8778,1)
(4601,5777,1)
(82,4562,1)
(8220,4213,1)
(3624,1365,1)
(5987,7425,1)
(7287,8229,1)
(5999,1676,1)
(5543,2209,1)
(6180,6311,1)
(8902,8156,1)
(6048,3050,1)
(7015,8566,1)
(7440,8566,1)
(4937,5489,1)
(8924,231,1)
(8447,4622,1)
(5073,2990,1)
(3794,2376,1)
(495,3292,1)
(8833,7554,1)
(1385,1873,1)
(3617,5760,1)
(7368,5561,1)
(1224,8566,1)
(5894,8703,1)
(55,4098,1)
(1256,4830,1)
(7100,4478,1)
(545,8884,1)
(8272,96,1)
(6471,5242,1)
(6520,5061,1)
(7323,7018,1)
(8105,5303,1)
(8383,217,1)
(5105,6382,1)
(5126,7148,1)
(7647,1022,1)
(2483,6680,1)
(4930,5937,1)
(719,3199,1)
(4874,8558,1)
(3799,3300,1)
(2701,7603,1)
(2884,5330,1)
(4733,4030,1)
(4445,721,1)
(6197,1663,1)
(3908,5061,1)
(2164,574,1)
(3801,2072,1)
(4148,4527,1)
(82,6325,1)
(3632,6740,1)
(6370,6685,1)
(4397,4085,1)
(632,8858,1)
(1101,939,1)
(1696,7872,1)
(7094,4923,1)
(1588,7502,1)
(7464,6308,1)
(9104,5511,1)
(1709,3834,1)
(3518,7050,1)
(3523,3717,1)
(413,6016,1)
(5599,5205,1)
(8311,8431,1)
(7458,1596,1)
(4335,2349,1)
(8042,8829,1)
(3991,8573,1)
(2154,2658,1)
(4785,5061,1)
(205,5937,1)
(8758,6633,1)
(5287,4241,1)
(6270,5061,1)
(2423,688,1)
(6859,3110,1)
(8379,2671,1)
(6431,9072,1)
(5894,7425,1)
(8702,7843,1)
(7687,4222,1)
(2623,4059,1)
(4163,7859,1)
(997,6516,1)
(3638,1278,1)
(6015,7707,1)
(1395,5508,1)
(8595,2315,1)
(6268,6805,1)
(7337,3367,1)
(8344,1380,1)
(2744,8467,1)
(5271,8247,1)
(5399,1830,1)
(6029,1686,1)
(4395,2477,1)
(3195,5016,1)
(8688,647,1)
(8204,5192,1)
(3408,4347,1)
(889,4111,1)
(7644,6382,1)
(367,1013,1)
(4537,241,1)
(1422,7662,1)
(7160,1126,1)
(5661,8566,1)
(834,4001,1)
(4209,3231,1)
(5952,8664,1)
(5571,1461,1)
(3629,2625,1)
(3996,5061,1)
(6623,1954,1)
(251,1587,1)
(2179,4773,1)
(6749,7424,1)
(4993,7206,1)
(2368,7682,1)
(1444,1528,1)
(2884,5061,1)
(2021,2424,1)
(5356,4009,1)
(7070,1317,1)
(6889,8566,1)
(146,3685,1)
(4136,3168,1)
(9104,2462,1)
(8804,6735,1)
(2929,5475,1)
(630,6912,1)
(20,7209,1)
(2408,7553,1)
(8725,5028,1)
(658,7461,1)
(7919,4238,1)
(2626,2554,1)
(7966,5445,1)
(5330,8739,1)
(3335,8566,1)
(8435,9150,1)
(5752,5061,1)
(7964,4675,1)
(3830,5937,1)
(862,4950,1)
(1438,2510,1)
(6177,2605,1)
(6608,4693,1)
(1033,30,1)
(3443,1012,1)
(2217,8566,1)
(1348,1413,1)
(2929,992,1)
(236,800,1)
(138,7857,1)
(9039,6915,1)
(8503,4215,1)
(4823,4933,1)
(4304,3806,1)
(6443,3365,1)
(6064,4311,1)
(8855,6316,1)
(186,1593,1)
(7372,7398,1)
(1693,65,1)
(1596,1055,1)
(6880,5532,1)
(4783,843,1)
(7721,8244,1)
(8386,6462,1)
(5963,2045,1)
(9104,4812,1)
(2248,6251,1)
(7634,7418,1)
(1762,4343,1)
(2915,2301,1)
(3261,500,1)
(1284,1954,1)
(7609,6903,1)
(2505,3496,1)
(6419,4588,1)
(2452,5474,1)
(8051,6064,1)
(8292,3137,1)
(4872,8566,1)
(6112,6550,1)
(789,2390,1)
(8071,8566,1)
(3356,494,1)
(3437,1866,1)
(8475,5061,1)
(3466,4296,1)
(1442,1964,1)
(475,7410,1)
(2402,3123,1)
(2989,4597,1)
(1460,7628,1)
(309,8566,1)
(7701,3376,1)
(2979,6870,1)
(5868,4252,1)
(61,5061,1)
(5992,5929,1)
(3541,8541,1)
(8949,2850,1)
(3663,3317,1)
(8008,3094,1)
(6669,2464,1)
(808,5607,1)
(7432,9135,1)
(2138,3948,1)
(6597,9096,1)
(4845,2935,1)
(1141,113,1)
(986,5061,1)
(472,7394,1)
(5667,5061,1)
(8164,3480,1)
(1049,7850,1)
(764,8312,1)
(2370,3729,1)
(825,877,1)
(1606,2146,1)
(1241,5061,1)
(7131,6933,1)
(2126,5061,1)
(3561,5061,1)
(312,8566,1)
(6400,1082,1)
(7231,5061,1)
(3696,7155,1)
(1113,7416,1)
(3576,4897,1)
(4515,3148,1)
(6791,88,1)
(1076,4999,1)
(1477,4922,1)
(6376,5218,1)
(6786,1837,1)
(6129,33,1)
(5148,4304,1)
(4496,2736,1)
(9016,1995,1)
(6017,8648,1)
(802,1668,1)
(8180,8487,1)
(2809,3835,1)
(6555,6786,1)
(4270,7770,1)
(2629,1950,1)
(6921,9053,1)
(5686,2738,1)
(2084,3186,1)
(3052,3832,1)
(8975,8456,1)
(5465,5800,1)
(5771,5736,1)
(6919,5061,1)
(9026,404,1)
(401,8248,1)
(7754,5695,1)
(5888,8062,1)
(2522,1697,1)
(4843,7731,1)
(7069,6768,1)
(3479,7039,1)
(829,65,1)
(7749,5645,1)
(5597,3095,1)
(7611,7694,1)
(8742,2043,1)
(4915,4226,1)
(2043,2278,1)
(6810,1143,1)
(815,4609,1)
(742,2460,1)
(9022,8597,1)
(8407,6065,1)
(436,1908,1)
(2393,6836,1)
(7619,5636,1)
(2894,709,1)
(3994,815,1)
(2439,2367,1)
(160,3080,1)
(2866,5354,1)
(9144,8085,1)
(9054,8566,1)
(1299,6383,1)
(6645,5939,1)
(1034,2015,1)
(2617,2657,1)
(4214,8566,1)
(6170,5965,1)
(8785,5649,1)
(4887,7913,1)
(1414,7497,1)
(2758,7405,1)
(694,8188,1)
(4742,142,1)
(1580,8818,1)
(1013,8566,1)
(1531,4879,1)
(6290,3243,1)
(5805,6857,1)
(1597,661,1)
(8149,5167,1)
(3770,437,1)
(4199,5061,1)
(7047,5061,1)
(1702,3914,1)
(2999,7010,1)
(3459,897,1)
(404,2190,1)
(7213,7334,1)
(7767,313,1)
(4784,1795,1)
(4466,2359,1)
(5496,4760,1)
(8278,6445,1)
(7745,5061,1)
(6565,8506,1)
(4788,1361,1)
(5105,2511,1)
(1288,8558,1)
(1173,3604,1)
(1402,728,1)
(7654,8413,1)
(4626,6782,1)
(9040,7964,1)
(7736,2866,1)
(5743,4949,1)
(5481,294,1)
(8976,248,1)
(8077,3364,1)
(9104,2765,1)
(3097,5061,1)
(162,3922,1)
(4033,1360,1)
(1550,7029,1)
(5602,293,1)
(8079,5709,1)
(5164,6388,1)
(7746,8566,1)
(4368,6563,1)
(2540,4274,1)
(5610,2894,1)
(8204,577,1)
(3653,1713,1)
(4859,5061,1)
(3254,3202,1)
(1279,2040,1)
(243,130,1)
(2457,685,1)
(8079,127,1)
(2260,3655,1)
(2240,5061,1)
(8165,5061,1)
(1924,8566,1)
(445,7725,1)
(8382,8084,1)
(260,8579,1)
(7644,7326,1)
(350,1336,1)
(5148,7810,1)
(1716,4579,1)
(4844,4297,1)
(4727,41,1)
(5157,8570,1)
(3231,2496,1)
(5851,415,1)
(8968,5813,1)
(4492,9145,1)
(7442,3333,1)
(2105,4893,1)
(256,952,1)
(652,4391,1)
(4020,4510,1)
(2539,4534,1)
(4871,967,1)
(844,398,1)
(7284,2930,1)
(7120,8940,1)
(7520,7724,1)
(8130,4796,1)
(1179,7536,1)
(4845,5061,1)
(9087,5061,1)
(1310,3146,1)
(3418,8628,1)
(8439,1492,1)
(2308,2028,1)
(8068,2482,1)
(4544,5948,1)
(60,7682,1)
(4406,46,1)
(3754,8244,1)
(3725,918,1)
(2106,5707,1)
(1287,3518,1)
(7221,3305,1)
(3927,463,1)
(6789,7051,1)
(3797,3911,1)
(834,8905,1)
(2822,8566,1)
(3358,4790,1)
(4320,8695,1)
(5115,8566,1)
(8204,8266,1)
(3102,5872,1)
(1887,2624,1)
(3691,1833,1)
(644,2320,1)
(1513,2160,1)
(3003,6942,1)
(7232,8139,1)
(4354,6966,1)
(3440,6131,1)
(5909,2424,1)
(8578,8079,1)
(5329,601,1)
(4918,5279,1)
(1288,1039,1)
(5034,909,1)
(1177,6413,1)
(442,7783,1)
(1151,4433,1)
(291,4354,1)
(5204,3783,1)
(4331,8566,1)
(6681,8157,1)
(6538,4126,1)
(3334,2943,1)
(3363,930,1)
(4350,5061,1)
(7955,2082,1)
(5364,3376,1)
(9068,2057,1)
(8936,3894,1)
(801,4918,1)
(7787,1457,1)
(7705,5715,1)
(5105,2462,1)
(5402,1311,1)
(849,5918,1)
(2345,6987,1)
(4147,949,1)
(3833,2069,1)
(8402,3397,1)
(5924,3770,1)
(4862,613,1)
(2984,1983,1)
(4346,3516,1)
(4540,8452,1)
(6380,8373,1)
(3731,3326,1)
(8671,7384,1)
(7621,7954,1)
(7091,7493,1)
(1161,8291,1)
(2179,5891,1)
(1019,8822,1)
(7599,5711,1)
(3347,3709,1)
(4919,258,1)
(184,3659,1)
(4315,2925,1)
(8095,1721,1)
(898,2375,1)
(2183,3288,1)
(5939,8053,1)
(1492,2346,1)
(821,5061,1)
(8837,4685,1)
(5185,3746,1)
(1626,1097,1)
(8523,5630,1)
(4972,5925,1)
(9104,6374,1)
(902,2801,1)
(8963,8392,1)
(396,6909,1)
(7633,8212,1)
(4400,223,1)
(6558,807,1)
(1553,6600,1)
(6418,4162,1)
(3295,1064,1)
(5270,5937,1)
(1470,1412,1)
(622,761,1)
(2234,3332,1)
(2584,2485,1)
(4684,869,1)
(5468,5393,1)
(2080,240,1)
(256,2485,1)
(7740,6066,1)
(2392,371,1)
(4415,7352,1)
(843,5475,1)
(1183,5493,1)
(7837,7865,1)
(5009,3806,1)
(5760,3456,1)
(563,5074,1)
(1206,2519,1)
(256,7425,1)
(6632,401,1)
(3418,4664,1)
(3192,5367,1)
(5877,802,1)
(4852,87,1)
(959,3231,1)
(7718,8433,1)
(6153,6508,1)
(7291,6427,1)
(2471,3231,1)
(1346,3207,1)
(9104,6616,1)
(5654,8225,1)
(6774,5945,1)
(2471,8566,1)
(3861,5287,1)
(2328,2056,1)
(2470,8944,1)
(2839,9092,1)
(2675,5061,1)
(7493,8330,1)
(8083,980,1)
(0,8227,1)
(4938,6934,1)
(714,2486,1)
(7058,5061,1)
(2870,7186,1)
(5551,5053,1)
(8516,3926,1)
(4355,5267,1)
(7081,3202,1)
(7719,4383,1)
(2200,5238,1)
(6735,8861,1)
(4426,3083,1)
(7748,6802,1)
(8231,6649,1)
(4175,7851,1)
(1041,8037,1)
(2652,5061,1)
(6486,5061,1)
(7944,5266,1)
(4679,873,1)
(3975,4302,1)
(3043,6340,1)
(1505,5061,1)
(905,4755,1)
(2400,4066,1)
(4623,1729,1)
(503,600,1)
(8171,234,1)
(2673,182,1)
(3354,1887,1)
(5873,4701,1)
(5681,159,1)
(2359,5391,1)
(3970,4504,1)
(6714,5821,1)
(2452,5986,1)
(7459,8216,1)
(2709,1656,1)
(755,1192,1)
(2711,5831,1)
(6759,7787,1)
(333,6235,1)
(6781,712,1)
(6889,3707,1)
(8525,6323,1)
(7747,5061,1)
(8475,8566,1)
(708,5974,1)
(8780,4028,1)
(494,7990,1)
(6923,6869,1)
(5634,6869,1)
(2804,7717,1)
(3008,4691,1)
(260,2588,1)
(4044,6687,1)
(2793,2353,1)
(5696,5061,1)
(8641,6358,1)
(7147,1287,1)
(5375,5415,1)
(5222,8973,1)
(256,7358,1)
(9136,7425,1)
(4365,547,1)
(3231,1866,1)
(2338,862,1)
(682,2749,1)
(3262,3767,1)
(855,1030,1)
(6468,8578,1)
(4510,266,1)
(7286,1922,1)
(1665,8566,1)
(5527,8416,1)
(5921,634,1)
(2613,6811,1)
(1016,8566,1)
(3445,6489,1)
(4528,7132,1)
(8204,7184,1)
(7759,5061,1)
(255,1477,1)
(2117,1205,1)
(7322,4902,1)
(2448,3855,1)
(4637,2193,1)
(1214,8809,1)
(2695,3417,1)
(786,4589,1)
(1454,6791,1)
(4077,5602,1)
(8374,4540,1)
(1102,5869,1)
(7846,505,1)
(7946,4666,1)
(8230,5021,1)
(6967,8853,1)
(1504,8746,1)
(5643,1842,1)
(7129,64,1)
(5007,4457,1)
(4001,8978,1)
(2572,2378,1)
(6056,4021,1)
(7269,2462,1)
(8551,8854,1)
(518,4347,1)
(5458,1165,1)
(1639,50,1)
(5757,5061,1)
(7644,4520,1)
(3825,4993,1)
(3647,2491,1)
(1090,3487,1)
(8710,3299,1)
(1735,7425,1)
(9107,2027,1)
(2496,8964,1)
(2309,7748,1)
(343,5061,1)
(8511,5656,1)
(6315,6574,1)
(232,7765,1)
(5231,4094,1)
(9122,8566,1)
(6377,5803,1)
(3772,6318,1)
(5148,6276,1)
(6378,4181,1)
(265,5392,1)
(7169,7156,1)
(3525,8841,1)
(3086,2664,1)
(4800,5886,1)
(4759,7080,1)
(8262,8192,1)
(2788,185,1)
(6076,1066,1)
(6669,4412,1)
(4931,8753,1)
(8423,8566,1)
(1468,6808,1)
(2331,5061,1)
(616,7828,1)
(597,7669,1)
(256,2496,1)
(288,245,1)
(1114,2931,1)
(5148,5544,1)
(2538,5859,1)
(3095,781,1)
(1852,2805,1)
(874,403,1)
(7050,8787,1)
(1783,4681,1)
(1689,5804,1)
(427,1461,1)
(5162,5931,1)
(4656,6408,1)
(649,5069,1)
(8972,5061,1)
(440,5161,1)
(7794,4020,1)
(3400,1517,1)
(7553,3597,1)
(6106,7167,1)
(3139,8759,1)
(4604,5792,1)
(9059,7047,1)
(5164,3231,1)
(4928,4771,1)
(5148,5951,1)
(8204,5026,1)
(3064,6083,1)
(8038,7642,1)
(6878,1024,1)
(5809,5527,1)
(6677,3523,1)
(8249,5443,1)
(6151,2212,1)
(5345,3076,1)
(8417,2510,1)
(1001,4642,1)
(7144,6821,1)
(1679,8566,1)
(9107,1146,1)
(6053,6596,1)
(3535,3089,1)
(2795,7485,1)
(5841,5379,1)
(3651,3338,1)
(5546,6768,1)
(1025,5151,1)
(2532,2282,1)
(3166,8566,1)
(1933,2307,1)
(1104,7577,1)
(7931,2883,1)
(2278,6799,1)
(2757,8332,1)
(8743,5550,1)
(8798,7664,1)
(7915,6768,1)
(8607,5634,1)
(1941,6939,1)
(4791,3095,1)
(5031,7183,1)
(8216,5061,1)
(3379,1441,1)
(5489,4286,1)
(4786,1492,1)
(7592,5061,1)
(4292,3789,1)
(2711,317,1)
(6690,5061,1)
(8158,2957,1)
(484,8987,1)
(4175,1101,1)
(3476,6424,1)
(5510,23,1)
(2712,7654,1)
(637,768,1)
(8758,65,1)
(8111,5097,1)
(7778,7082,1)
(5190,5919,1)
(3437,610,1)
(5105,3592,1)
(2149,3226,1)
(2389,7480,1)
(4640,3677,1)
(6581,3103,1)
(4052,8030,1)
(8163,7031,1)
(556,1412,1)
(2631,2855,1)
(7468,1463,1)
(873,1652,1)
(7878,1880,1)
(818,3224,1)
(5423,5255,1)
(4963,2414,1)
(8813,3771,1)
(3484,1545,1)
(7524,5579,1)
(168,4556,1)
(5194,7222,1)
(1160,15,1)
(3134,4298,1)
(5025,4744,1)
(3930,5061,1)
(1191,7110,1)
(5752,8566,1)
(7717,3134,1)
(1728,335,1)
(6876,8165,1)
(2755,5767,1)
(5237,2015,1)
(6220,2574,1)
(5744,7425,1)
(3505,8262,1)
(7597,2547,1)
(7958,3728,1)
(4635,4245,1)
(5109,5372,1)
(6526,7296,1)
(6633,6317,1)
(5760,5061,1)
(3043,7358,1)
(5457,2736,1)
(3644,7773,1)
(5228,4822,1)
(3841,5752,1)
(2630,4714,1)
(9046,8566,1)
(1030,3231,1)
(8652,1031,1)
(1809,3934,1)
(731,2375,1)
(4127,204,1)
(1185,4022,1)
(774,5061,1)
(2131,6884,1)
(4981,8006,1)
(8108,8771,1)
(1820,1339,1)
(4757,2011,1)
(5806,8454,1)
(2202,2255,1)
(4436,3577,1)
(943,1882,1)
(918,5061,1)
(4039,7610,1)
(8818,5061,1)
(6384,4526,1)
(1541,1870,1)
(4546,947,1)
(4455,258,1)
(3955,1735,1)
(1340,8276,1)
(2062,9033,1)
(9120,929,1)
(7355,3231,1)
(1681,3148,1)
(6565,1773,1)
(1904,1242,1)
(1363,644,1)
(722,127,1)
(6739,5061,1)
(7667,3646,1)
(4879,1834,1)
(7336,4559,1)
(2645,6340,1)
(5263,7492,1)
(6081,60,1)
(2192,3754,1)
(9104,8703,1)
(6452,1690,1)
(7520,4778,1)
(485,44,1)
(1486,5720,1)
(2139,4400,1)
(3887,6182,1)
(5802,8018,1)
(5216,9127,1)
(7164,4959,1)
(2240,2436,1)
(5400,1090,1)
(2634,2364,1)
(3938,285,1)
(871,4011,1)
(1347,7584,1)
(4202,8449,1)
(4370,4850,1)
(1736,5458,1)
(5165,3970,1)
(5427,8082,1)
(5169,8424,1)
(7902,5061,1)
(2135,3313,1)
(4414,1786,1)
(7454,4004,1)
(2704,2717,1)
(6382,2837,1)
(7047,8420,1)
(2444,3391,1)
(4247,8896,1)
(3979,7062,1)
(5461,4550,1)
(6743,1701,1)
(1965,3867,1)
(257,8566,1)
(3930,8566,1)
(7988,6868,1)
(1607,4801,1)
(5634,4775,1)
(6265,8667,1)
(3223,5277,1)
(5305,6840,1)
(4837,5323,1)
(1315,8566,1)
(5517,8337,1)
(3435,1516,1)
(551,5114,1)
(1968,4980,1)
(6797,7272,1)
(3108,1648,1)
(7521,6613,1)
(4399,7376,1)
(8841,2973,1)
(5476,8844,1)
(7135,6341,1)
(7582,221,1)
(3301,1309,1)
(2922,6538,1)
(8156,3381,1)
(1087,3382,1)
(8590,8566,1)
(3692,5322,1)
(1174,5496,1)
(9104,8364,1)
(7890,8102,1)
(6498,9023,1)
(7504,5378,1)
(8017,1167,1)
(7686,4634,1)
(8197,8566,1)
(4612,6267,1)
(889,4942,1)
(8670,7250,1)
(616,258,1)
(8426,4184,1)
(8272,5061,1)
(458,2782,1)
(7758,5867,1)
(3335,5061,1)
(8737,8566,1)
(6740,2153,1)
(2987,641,1)
(7323,4347,1)
(8226,20,1)
(861,24,1)
(254,3548,1)
(3111,941,1)
(4801,5937,1)
(3299,2240,1)
(669,1321,1)
(4143,8408,1)
(556,1529,1)
(7046,9027,1)
(5381,5061,1)
(9136,7358,1)
(8305,4259,1)
(1298,4902,1)
(3934,5061,1)
(1031,3932,1)
(7987,4463,1)
(7357,5757,1)
(1842,1876,1)
(6623,1690,1)
(6429,8483,1)
(5316,8606,1)
(5499,6272,1)
(3569,1003,1)
(5047,4349,1)
(1225,5862,1)
(9104,1071,1)
(5945,6622,1)
(6720,2261,1)
(7085,2397,1)
(4319,7763,1)
(8987,2826,1)
(6512,4837,1)
(3124,4642,1)
(8915,6396,1)
(2057,8566,1)
(2337,3746,1)
(4207,357,1)
(2281,8566,1)
(6557,4712,1)
(3836,8957,1)
(658,2808,1)
(8142,4972,1)
(8638,1533,1)
(6683,4395,1)
(2779,7933,1)
(1923,5061,1)
(270,4032,1)
(8294,8320,1)
(7564,258,1)
(5057,7852,1)
(7899,1669,1)
(4697,3754,1)
(1595,7939,1)
(1451,8462,1)
(6068,3354,1)
(2645,4864,1)
(1042,3880,1)
(8462,2333,1)
(994,2568,1)
(1994,1253,1)
(8857,3260,1)
(8365,172,1)
(8752,5061,1)
(1123,6518,1)
(2447,1384,1)
(7054,7943,1)
(3061,3989,1)
(7692,3773,1)
(2685,3551,1)
(9012,2982,1)
(5385,8213,1)
(1202,1857,1)
(339,152,1)
(1176,8566,1)
(2372,8374,1)
(3078,7779,1)
(1475,4766,1)
(3124,8966,1)
(5659,9138,1)
(1584,8774,1)
(6746,258,1)
(4798,5320,1)
(1192,4291,1)
(4252,1953,1)
(6485,1109,1)
(8345,691,1)
(2037,1426,1)
(6399,8121,1)
(7251,2334,1)
(2751,199,1)
(1135,5778,1)
(5757,8566,1)
(9030,4466,1)
(2180,6023,1)
(9104,1413,1)
(6567,2919,1)
(5939,8717,1)
(6596,222,1)
(6919,3373,1)
(5567,4601,1)
(3955,2645,1)
(1668,5387,1)
(1947,5219,1)
(6344,6969,1)
(4339,5463,1)
(8688,495,1)
(1360,74,1)
(2688,2650,1)
(2988,2511,1)
(9104,6441,1)
(3318,65,1)
(4778,5933,1)
(2467,7236,1)
(1030,8566,1)
(4101,8904,1)
(4818,2979,1)
(3596,8542,1)
(3398,1610,1)
(3220,7946,1)
(4705,2673,1)
(6937,3376,1)
(9098,6263,1)
(4016,2928,1)
(4192,196,1)
(3808,5916,1)
(8079,5070,1)
(2696,4921,1)
(405,1970,1)
(1310,5797,1)
(6281,6708,1)
(3473,1004,1)
(9104,725,1)
(7723,8566,1)
(8381,4520,1)
(1793,4537,1)
(2464,1842,1)
(7074,8350,1)
(4929,1010,1)
(5936,1681,1)
(8281,8899,1)
(1070,5086,1)
(2000,5937,1)
(6880,4854,1)
(4739,4041,1)
(4235,8630,1)
(8970,1108,1)
(7608,7138,1)
(2533,7880,1)
(6320,4093,1)
(1715,4705,1)
(2860,4001,1)
(1130,8566,1)
(7989,711,1)
(2307,5937,1)
(722,2438,1)
(5912,90,1)
(4610,6759,1)
(5867,3903,1)
(6353,8566,1)
(3826,410,1)
(2590,4762,1)
(3109,7785,1)
(4431,2000,1)
(6719,5061,1)
(5331,6286,1)
(3019,1472,1)
(3875,8936,1)
(7235,727,1)
(8960,950,1)
(4180,8091,1)
(7925,6524,1)
(1719,3065,1)
(6750,842,1)
(8834,1429,1)
(3875,8725,1)
(3735,3796,1)
(6082,1341,1)
(7150,8566,1)
(6870,4378,1)
(3899,1789,1)
(462,760,1)
(8309,6141,1)
(1476,8489,1)
(2645,2462,1)
(8907,1232,1)
(3484,8566,1)
(5254,952,1)
(8507,7480,1)
(6930,5189,1)
(407,3688,1)
(9104,4342,1)
(4284,2156,1)
(9011,468,1)
(3011,2288,1)
(5616,8485,1)
(5993,4322,1)
(1254,5061,1)
(1898,3003,1)
(1985,5751,1)
(8514,7646,1)
(2969,9074,1)
(7049,3583,1)
(1895,1175,1)
(4049,7585,1)
(5065,2496,1)
(4657,3628,1)
(4935,5144,1)
(6056,8244,1)
(7309,3188,1)
(5779,8912,1)
(2482,7364,1)
(2907,43,1)
(233,1776,1)
(1205,5984,1)
(1955,7576,1)
(2504,9103,1)
(8604,4702,1)
(1725,1569,1)
(5901,7008,1)
(6953,9065,1)
(2607,6651,1)
(3391,1297,1)
(8971,6768,1)
(4936,4522,1)
(6249,6730,1)
(8097,2015,1)
(6301,5705,1)
(1828,6581,1)
(4297,1076,1)
(2274,569,1)
(4340,2302,1)
(3137,1185,1)
(4919,8968,1)
(8063,6720,1)
(2077,8629,1)
(4623,6352,1)
(8828,5333,1)
(1225,8579,1)
(4389,5477,1)
(5931,3301,1)
(6453,3394,1)
(1282,8566,1)
(4709,6833,1)
(7058,1799,1)
(7077,3684,1)
(6755,5061,1)
(7523,7388,1)
(1221,7365,1)
(323,558,1)
(6730,7846,1)
(7826,8022,1)
(3555,5597,1)
(5600,1611,1)
(8204,7273,1)
(3633,2009,1)
(7941,214,1)
(5950,5609,1)
(1034,2538,1)
(1193,5061,1)
(4959,8566,1)
(8974,593,1)
(5250,823,1)
(2969,5061,1)
(2041,6847,1)
(4847,5764,1)
(4878,2599,1)
(64,6215,1)
(6701,174,1)
(2202,5326,1)
(6213,5423,1)
(2369,7108,1)
(7704,7351,1)
(6543,674,1)
(3637,4545,1)
(9118,5749,1)
(7449,4262,1)
(7593,9079,1)
(5057,5119,1)
(3469,3097,1)
(7508,8272,1)
(1449,5937,1)
(5617,1192,1)
(6393,7910,1)
(7150,2996,1)
(5556,1115,1)
(7942,4111,1)
(8509,2418,1)
(6030,7403,1)
(661,1504,1)
(2031,7065,1)
(8694,2899,1)
(6073,8699,1)
(3955,5148,1)
(3397,3287,1)
(8309,3129,1)
(63,1386,1)
(3967,3613,1)
(1965,7680,1)
(4948,3148,1)
(5894,8716,1)
(6916,4146,1)
(2176,2001,1)
(6679,5353,1)
(6462,258,1)
(1159,6979,1)
(4980,3207,1)
(97,4056,1)
(3711,655,1)
(5022,1962,1)
(6343,4956,1)
(9145,991,1)
(8724,2479,1)
(6122,6384,1)
(5343,5937,1)
(5449,3211,1)
(8367,8376,1)
(6640,2639,1)
(1775,2388,1)
(723,8698,1)
(7368,6674,1)
(8605,6602,1)
(2825,684,1)
(669,6173,1)
(5141,243,1)
(6247,5721,1)
(9112,2526,1)
(3768,4043,1)
(2738,8566,1)
(7132,238,1)
(2346,1866,1)
(6926,4015,1)
(174,785,1)
(6993,674,1)
(1209,3874,1)
(1634,6882,1)
(7884,896,1)
(6582,3353,1)
(4452,82,1)
(7148,395,1)
(6435,488,1)
(5740,6899,1)
(2139,2485,1)
(5343,8566,1)
(2220,3004,1)
(4373,216,1)
(5148,2165,1)
(5741,5360,1)
(603,3924,1)
(8782,5061,1)
(2203,5899,1)
(5218,2904,1)
(8811,7146,1)
(5231,7874,1)
(7953,1223,1)
(155,7637,1)
(998,5061,1)
(3955,7849,1)
(4306,5514,1)
(2307,8566,1)
(5778,8566,1)
(3863,5642,1)
(9017,7123,1)
(1788,872,1)
(3944,5061,1)
(5823,5817,1)
(877,340,1)
(7825,5222,1)
(6745,8566,1)
(5965,3000,1)
(852,4249,1)
(3242,2976,1)
(8945,7073,1)
(4924,1369,1)
(5207,1446,1)
(2289,7315,1)
(1941,8458,1)
(4874,1954,1)
(7185,270,1)
(3546,6453,1)
(5884,2956,1)
(7812,4489,1)
(7550,5061,1)
(6414,4679,1)
(7170,65,1)
(5692,8619,1)
(973,7810,1)
(3789,2823,1)
(7516,5061,1)
(8204,3079,1)
(7498,4703,1)
(8375,8566,1)
(1485,1358,1)
(681,1639,1)
(3141,8566,1)
(7986,6774,1)
(1690,2354,1)
(6358,722,1)
(2645,838,1)
(6198,8379,1)
(368,3179,1)
(515,3253,1)
(8423,5061,1)
(6365,3146,1)
(386,7080,1)
(2622,2837,1)
(1702,2848,1)
(5905,5207,1)
(6353,5061,1)
(1332,1638,1)
(5106,654,1)
(6798,2188,1)
(1392,5490,1)
(3745,4813,1)
(128,7464,1)
(5475,2646,1)
(2594,3127,1)
(8887,8403,1)
(1934,5560,1)
(9079,18,1)
(1075,2984,1)
(631,5170,1)
(2702,6006,1)
(5796,5993,1)
(7356,8642,1)
(8490,325,1)
(2951,1557,1)
(8575,5661,1)
(6958,6115,1)
(1069,6520,1)
(728,1743,1)
(1388,252,1)
(5480,81,1)
(1558,6098,1)
(852,8566,1)
(8273,5061,1)
(6272,1125,1)
(6690,2680,1)
(3540,4145,1)
(4314,8340,1)
(2277,7015,1)
(362,3706,1)
(5105,7358,1)
(2582,8928,1)
(3374,1437,1)
(5148,7629,1)
(1743,9081,1)
(6170,8738,1)
(8886,8866,1)
(875,8566,1)
(6528,6756,1)
(4207,2605,1)
(5738,9087,1)
(6322,6057,1)
(7038,5090,1)
(2668,2308,1)
(5401,5937,1)
(6477,381,1)
(2586,5061,1)
(3526,3772,1)
(8055,8902,1)
(898,9045,1)
(8706,1866,1)
(3237,8566,1)
(7954,4432,1)
(8264,1510,1)
(8821,5422,1)
(2645,5544,1)
(828,2624,1)
(8232,1802,1)
(3456,4265,1)
(6624,4954,1)
(1282,6280,1)
(7230,7742,1)
(2040,3,1)
(51,2914,1)
(958,8566,1)
(403,2787,1)
(425,6639,1)
(7949,6539,1)
(4297,3871,1)
(4473,4285,1)
(2595,6597,1)
(1008,1302,1)
(9002,1768,1)
(3944,8566,1)
(1702,6452,1)
(6547,5061,1)
(5220,7869,1)
(4724,6104,1)
(2820,5061,1)
(1067,3153,1)
(7106,5343,1)
(2625,2785,1)
(8050,6616,1)
(3135,5061,1)
(7858,2052,1)
(8591,6441,1)
(3099,8375,1)
(8590,1770,1)
(5499,4529,1)
(8317,6403,1)
(6258,1667,1)
(3816,6452,1)
(398,1219,1)
(6566,2496,1)
(7104,8826,1)
(1704,122,1)
(3688,4308,1)
(1823,8591,1)
(5819,3215,1)
(7580,6762,1)
(5940,6460,1)
(3407,5061,1)
(8446,7659,1)
(5118,4970,1)
(8498,5051,1)
(6483,7104,1)
(6417,8569,1)
(4896,2906,1)
(2931,7889,1)
(2102,2002,1)
(7141,3812,1)
(6861,6525,1)
(2210,4591,1)
(4507,1078,1)
(5547,2047,1)
(6622,9103,1)
(6465,321,1)
(6846,8064,1)
(6041,2842,1)
(2719,3223,1)
(3417,8789,1)
(6675,8566,1)
(162,5101,1)
(3124,6340,1)
(5448,3048,1)
(7985,4373,1)
(1045,961,1)
(5661,3994,1)
(7225,6374,1)
(914,876,1)
(4292,2823,1)
(2474,7160,1)
(1640,6226,1)
(5435,694,1)
(6621,1830,1)
(3279,2128,1)
(1151,2169,1)
(8924,400,1)
(1510,2363,1)
(4619,5901,1)
(2078,409,1)
(1576,584,1)
(2939,6573,1)
(2498,1632,1)
(1044,2504,1)
(711,2559,1)
(7914,7454,1)
(893,5591,1)
(8089,8566,1)
(5985,8566,1)
(5505,8372,1)
(2740,5838,1)
(3166,4344,1)
(7164,7906,1)
(6157,5061,1)
(256,2165,1)
(5323,1940,1)
(2827,2399,1)
(3256,7168,1)
(138,5061,1)
(2420,7472,1)
(8802,5061,1)
(2713,5061,1)
(6963,65,1)
(1259,3857,1)
(2218,3376,1)
(6836,7563,1)
(2493,6717,1)
(6912,4524,1)
(796,5900,1)
(2475,6459,1)
(1686,4057,1)
(1468,7472,1)
(9147,6725,1)
(9102,1876,1)
(1241,598,1)
(5133,3196,1)
(3368,5061,1)
(5923,5061,1)
(7733,7106,1)
(4,6759,1)
(6075,1986,1)
(3391,63,1)
(7986,7142,1)
(5979,8566,1)
(5251,4534,1)
(3364,3162,1)
(320,5437,1)
(2258,1800,1)
(4974,2962,1)
(5564,127,1)
(7999,2471,1)
(1426,7483,1)
(8990,8660,1)
(6241,3516,1)
(3432,8566,1)
(4317,5113,1)
(5148,6826,1)
(1154,3360,1)
(8948,5937,1)
(7060,4990,1)
(3603,3982,1)
(8771,3851,1)
(122,7508,1)
(6374,2921,1)
(9007,3937,1)
(6948,467,1)
(8802,8566,1)
(2534,531,1)
(1497,7934,1)
(3124,4400,1)
(6593,7231,1)
(6118,5061,1)
(2397,6009,1)
(6490,3359,1)
(5105,4304,1)
(3250,3498,1)
(5576,592,1)
(4591,6483,1)
(2911,8418,1)
(583,2133,1)
(1488,637,1)
(3203,8077,1)
(6226,3090,1)
(5927,8950,1)
(9067,1210,1)
(6173,6326,1)
(5303,2745,1)
(2667,6627,1)
(3307,1224,1)
(6105,4057,1)
(2553,7140,1)
(2847,8609,1)
(129,8617,1)
(4729,8566,1)
(6604,6231,1)
(8378,2230,1)
(1164,50,1)
(1204,8566,1)
(7894,6139,1)
(5148,1200,1)
(686,5363,1)
(691,791,1)
(8463,7158,1)
(118,1888,1)
(5180,127,1)
(6396,6484,1)
(1095,4786,1)
(1003,2428,1)
(8706,952,1)
(1665,2867,1)
(7514,2345,1)
(4536,7969,1)
(6092,1692,1)
(56,1960,1)
(2950,3512,1)
(3536,5061,1)
(6112,65,1)
(852,5061,1)
(2608,5078,1)
(6762,8167,1)
(4522,2727,1)
(1310,3551,1)
(7916,5834,1)
(2276,1946,1)
(1018,7782,1)
(9041,4906,1)
(7512,7212,1)
(4962,8207,1)
(7517,3085,1)
(111,2532,1)
(6739,7597,1)
(3437,7962,1)
(3949,2124,1)
(7902,8566,1)
(1945,6921,1)
(1939,7009,1)
(9058,9129,1)
(1317,5061,1)
(5431,1049,1)
(7581,6050,1)
(4042,3626,1)
(2365,1590,1)
(3805,3470,1)
(5640,8566,1)
(8844,5240,1)
(2794,8827,1)
(2566,3979,1)
(4009,94,1)
(7252,528,1)
(1463,5061,1)
(73,1468,1)
(6849,370,1)
(3124,8703,1)
(2856,7379,1)
(6942,5814,1)
(8791,328,1)
(4746,5224,1)
(5314,3248,1)
(4333,3713,1)
(4675,7634,1)
(6670,1876,1)
(4393,4248,1)
(5082,1961,1)
(3955,5065,1)
(4068,2356,1)
(3168,3376,1)
(7787,6050,1)
(6114,3133,1)
(6570,5937,1)
(6564,955,1)
(5391,6623,1)
(3736,5649,1)
(2679,40,1)
(5117,127,1)
(8297,5061,1)
(2792,7289,1)
(1549,3536,1)
(2645,7810,1)
(4369,7001,1)
(8363,3059,1)
(2194,7363,1)
(7716,5877,1)
(5922,4211,1)
(8204,898,1)
(3282,6262,1)
(7047,8566,1)
(8076,6612,1)
(6183,1664,1)
(4183,1927,1)
(1279,8566,1)
(9102,7388,1)
(302,2082,1)
(2343,8393,1)
(8779,8959,1)
(2285,6404,1)
(6460,2033,1)
(8667,7318,1)
(3583,8566,1)
(6271,1037,1)
(2248,65,1)
(337,3098,1)
(3730,70,1)
(5250,4602,1)
(1527,8011,1)
(671,65,1)
(8818,2684,1)
(1718,6326,1)
(4047,4881,1)
(8204,8581,1)
(3362,8910,1)
(5676,1184,1)
(249,269,1)
(2672,5228,1)
(2986,3537,1)
(7848,3344,1)
(6247,8566,1)
(8236,3423,1)
(1544,6743,1)
(5126,6869,1)
(2906,1019,1)
(8601,7450,1)
(1494,8566,1)
(4751,4027,1)
(9127,6141,1)
(3147,866,1)
(3457,4341,1)
(7153,65,1)
(3829,5842,1)
(3923,2369,1)
(1598,5923,1)
(4643,5484,1)
(4535,514,1)
(7605,1622,1)
(4641,7677,1)
(1941,8558,1)
(1318,3887,1)
(2815,8163,1)
(5837,4791,1)
(2692,5531,1)
(4908,1025,1)
(3772,65,1)
(74,1409,1)
(588,258,1)
(2729,6869,1)
(7359,3573,1)
(5000,8295,1)
(5401,208,1)
(5418,1086,1)
(2689,4564,1)
(7186,7775,1)
(8364,3515,1)
(7500,8645,1)
(2693,3725,1)
(8133,5334,1)
(6144,6214,1)
(8405,34,1)
(5966,3905,1)
(8369,642,1)
(7380,9098,1)
(1808,1756,1)
(3117,8166,1)
(3043,4304,1)
(5751,4141,1)
(7234,521,1)
(752,5061,1)
(7313,8334,1)
(2376,2797,1)
(220,9091,1)
(543,2708,1)
(3148,770,1)
(538,5700,1)
(4807,8609,1)
(3459,1017,1)
(6920,1024,1)
(7890,7360,1)
(858,1220,1)
(1050,8566,1)
(4801,2459,1)
(8078,1738,1)
(4138,8700,1)
(6340,8649,1)
(8101,1216,1)
(5887,8261,1)
(2968,1923,1)
(4225,8363,1)
(4407,7325,1)
(7145,7845,1)
(2597,3935,1)
(5371,7751,1)
(2843,1854,1)
(5281,4359,1)
(4883,8941,1)
(1479,3958,1)
(5211,7320,1)
(6248,5772,1)
(33,7093,1)
(4094,4096,1)
(42,6324,1)
(6223,3586,1)
(8329,3055,1)
(3390,5061,1)
(1491,66,1)
(4294,6294,1)
(1585,4656,1)
(3807,7526,1)
(7410,5074,1)
(5970,5733,1)
(5858,8931,1)
(2363,7298,1)
(379,1860,1)
(2676,55,1)
(1495,9078,1)
(6255,5061,1)
(2699,3885,1)
(5827,7354,1)
(638,2069,1)
(5454,4288,1)
(4531,302,1)
(2781,4368,1)
(3748,8441,1)
(4123,2805,1)
(5105,154,1)
(4613,8014,1)
(3128,8344,1)
(6284,8107,1)
(380,4123,1)
(870,7078,1)
(325,2298,1)
(1625,6206,1)
(836,3284,1)
(1767,1539,1)
(1934,7613,1)
(3535,7054,1)
(4424,5402,1)
(3918,7538,1)
(4193,3291,1)
(8840,2564,1)
(5178,4844,1)
(8683,2617,1)
(3098,382,1)
(6002,3148,1)
(5784,4939,1)
(8019,4435,1)
(3231,4304,1)
(1485,5061,1)
(1539,8566,1)
(7082,1553,1)
(4251,672,1)
(749,2049,1)
(5775,8849,1)
(5799,8566,1)
(8384,3001,1)
(7995,8566,1)
(8771,5937,1)
(3518,8787,1)
(4847,5061,1)
(8204,3828,1)
(9054,4398,1)
(1373,5061,1)
(2748,8246,1)
(2592,5061,1)
(3320,167,1)
(7816,458,1)
(4923,4323,1)
(3436,5653,1)
(4402,8271,1)
(1219,5061,1)
(5731,8566,1)
(2686,8605,1)
(4470,244,1)
(9104,3313,1)
(2329,3839,1)
(2526,1008,1)
(3852,2662,1)
(5642,65,1)
(5074,8318,1)
(7546,494,1)
(9046,4152,1)
(6956,5056,1)
(310,2258,1)
(3269,4919,1)
(2969,8566,1)
(7408,1235,1)
(400,6179,1)
(3231,8703,1)
(2530,5937,1)
(3144,5782,1)
(5440,5510,1)
(1983,3805,1)
(1882,5006,1)
(4450,7012,1)
(4618,8566,1)
(7540,7426,1)
(4,3231,1)
(8629,2791,1)
(7155,973,1)
(4445,4952,1)
(9104,4816,1)
(5672,2023,1)
(5612,5829,1)
(1216,1597,1)
(6926,4447,1)
(8845,6213,1)
(7397,5302,1)
(2136,8383,1)
(1664,2455,1)
(4573,8566,1)
(9088,9042,1)
(8705,8408,1)
(149,8736,1)
(1303,2936,1)
(3501,7451,1)
(5148,1275,1)
(4802,6055,1)
(1180,4522,1)
(3020,8601,1)
(4099,6393,1)
(5018,7292,1)
(4074,5904,1)
(4665,1993,1)
(1831,6305,1)
(8449,2174,1)
(6005,6394,1)
(4239,7046,1)
(5106,3092,1)
(4463,4921,1)
(5988,2277,1)
(6765,3620,1)
(8204,5,1)
(7832,4160,1)
(2514,481,1)
(6196,2404,1)
(1457,147,1)
(256,4304,1)
(6697,2634,1)
(8247,5222,1)
(8707,3325,1)
(7990,119,1)
(150,5061,1)
(2137,8816,1)
(8832,3497,1)
(7776,2437,1)
(3059,7026,1)
(1788,6768,1)
(9136,2768,1)
(2831,5595,1)
(4390,3409,1)
(1518,978,1)
(3212,8788,1)
(6162,6920,1)
(6311,7319,1)
(8753,3328,1)
(842,8566,1)
(3536,8566,1)
(6034,2149,1)
(8182,4185,1)
(1284,8520,1)
(8772,906,1)
(85,4499,1)
(8681,1363,1)
(6251,586,1)
(4246,3299,1)
(9133,2464,1)
(1845,6056,1)
(1976,5492,1)
(7747,8566,1)
(2765,5881,1)
(1259,5061,1)
(3858,1315,1)
(3588,1365,1)
(2038,566,1)
(1707,2019,1)
(7223,8254,1)
(109,6289,1)
(4873,1352,1)
(1944,4732,1)
(5105,7810,1)
(3244,5832,1)
(930,7453,1)
(115,4952,1)
(9136,4400,1)
(2633,8566,1)
(5065,7425,1)
(4195,9061,1)
(8882,7309,1)
(7109,7201,1)
(2253,6553,1)
(6321,7708,1)
(1567,9069,1)
(3437,7358,1)
(4471,1401,1)
(2826,2073,1)
(490,8151,1)
(252,7665,1)
(1648,4903,1)
(9084,5485,1)
(2762,802,1)
(8778,8764,1)
(3179,3109,1)
(4179,8795,1)
(520,5007,1)
(7198,894,1)
(1659,8566,1)
(6175,1599,1)
(452,8259,1)
(8417,4012,1)
(256,3264,1)
(4096,9059,1)
(3867,7388,1)
(6359,4889,1)
(5898,6322,1)
(3670,5061,1)
(8559,11,1)
(1013,7848,1)
(2921,7596,1)
(4024,2543,1)
(300,4042,1)
(4144,1138,1)
(4717,2949,1)
(6432,3125,1)
(45,592,1)
(8658,65,1)
(1579,4292,1)
(683,1772,1)
(152,8566,1)
(5233,1947,1)
(425,7879,1)
(3351,65,1)
(2966,7885,1)
(8011,5509,1)
(4310,3534,1)
(6649,3376,1)
(8801,8308,1)
(8073,7399,1)
(6867,5150,1)
(4457,5061,1)
(8064,3665,1)
(5065,4642,1)
(8358,635,1)
(6906,4867,1)
(941,7239,1)
(7353,7433,1)
(698,8670,1)
(423,4337,1)
(4761,940,1)
(7534,8010,1)
(3672,8309,1)
(335,5229,1)
(7119,8566,1)
(5865,3261,1)
(6310,6443,1)
(2308,6580,1)
(5574,3621,1)
(5530,5110,1)
(7212,9108,1)
(2035,4807,1)
(4929,7638,1)
(8548,7342,1)
(6883,1956,1)
(6539,7253,1)
(8159,3386,1)
(373,3387,1)
(959,8566,1)
(1400,6869,1)
(1359,4523,1)
(1880,5667,1)
(8341,3886,1)
(1923,6147,1)
(6838,7617,1)
(7885,7275,1)
(2706,7931,1)
(6963,6710,1)
(6616,127,1)
(2645,2485,1)
(4533,451,1)
(4246,8710,1)
(1672,2722,1)
(7766,1584,1)
(673,7519,1)
(4745,1876,1)
(8120,2679,1)
(8896,329,1)
(671,5140,1)
(700,6768,1)
(5690,4062,1)
(5077,3869,1)
(7163,4921,1)
(2082,7569,1)
(895,5061,1)
(734,6963,1)
(8415,6769,1)
(7138,2409,1)
(6602,5061,1)
(8253,1598,1)
(5790,6747,1)
(7236,4169,1)
(7290,306,1)
(2420,3616,1)
(6701,5061,1)
(2211,5278,1)
(7249,3420,1)
(2645,6940,1)
(2321,3283,1)
(3104,8566,1)
(7245,6329,1)
(2564,6803,1)
(902,8566,1)
(5983,1406,1)
(8908,4551,1)
(2645,4304,1)
(875,5898,1)
(6464,2954,1)
(6583,65,1)
(726,7784,1)
(4291,1741,1)
(4230,3307,1)
(5500,3319,1)
(4652,6984,1)
(7149,6775,1)
(3150,6671,1)
(4439,8566,1)
(8919,3354,1)
(2480,6941,1)
(7246,3361,1)
(8920,7244,1)
(2292,8431,1)
(4581,5061,1)
(2929,6519,1)
(4853,3653,1)
(6269,6434,1)
(3124,3647,1)
(1865,6245,1)
(8803,7964,1)
(4948,1876,1)
(5441,2245,1)
(8764,782,1)
(3014,7900,1)
(8599,3345,1)
(7551,7546,1)
(2953,2573,1)
(6610,117,1)
(7248,5137,1)
(987,2569,1)
(4003,2633,1)
(5461,8281,1)
(5366,8219,1)
(1613,1866,1)
(6233,5820,1)
(8275,6219,1)
(6204,5743,1)
(331,4841,1)
(5814,1059,1)
(2189,7764,1)
(7590,4084,1)
(3103,3484,1)
(1308,5047,1)
(8327,5781,1)
(992,7301,1)
(6078,1719,1)
(5447,303,1)
(8594,1655,1)
(6955,7461,1)
(7436,6459,1)
(5625,3274,1)
(6184,5686,1)
(8307,1095,1)
(7811,2643,1)
(6328,5670,1)
(365,893,1)
(1046,7501,1)
(337,1683,1)
(5695,1651,1)
(2601,1687,1)
(6118,2115,1)
(2888,7383,1)
(3377,5375,1)
(3754,8566,1)
(5744,952,1)
(3105,5061,1)
(2442,7633,1)
(2257,6723,1)
(3766,1978,1)
(1689,8566,1)
(1401,127,1)
(2244,1603,1)
(2680,7844,1)
(531,1891,1)
(7411,2407,1)
(4580,1873,1)
(6533,321,1)
(5880,6215,1)
(3312,8850,1)
(4566,5615,1)
(3990,4638,1)
(6503,7077,1)
(5282,4442,1)
(8806,202,1)
(924,5742,1)
(1420,7040,1)
(2873,5962,1)
(6113,5061,1)
(3889,7313,1)
(2025,5061,1)
(2584,4642,1)
(212,7509,1)
(1528,5547,1)
(7394,94,1)
(385,5487,1)
(6489,1192,1)
(7833,1974,1)
(4947,8566,1)
(5179,715,1)
(6209,9024,1)
(1791,2942,1)
(2983,6917,1)
(5277,6986,1)
(3194,531,1)
(750,6797,1)
(2584,2165,1)
(7193,5061,1)
(4080,8566,1)
(6892,3078,1)
(1739,8391,1)
(3661,6678,1)
(8393,6977,1)
(7644,4642,1)
(5760,8566,1)
(5711,8056,1)
(4703,8126,1)
(1989,9142,1)
(899,8566,1)
(2973,2028,1)
(3724,1476,1)
(1417,5061,1)
(5329,5061,1)
(6777,5061,1)
(3834,2473,1)
(1457,4577,1)
(2027,5366,1)
(2036,8858,1)
(5943,8253,1)
(1150,127,1)
(8185,1861,1)
(5346,5899,1)
(58,7137,1)
(7849,2165,1)
(1570,874,1)
(5148,8121,1)
(2374,5061,1)
(8925,3265,1)
(2264,1584,1)
(2543,1072,1)
(3055,4586,1)
(1244,6371,1)
(3437,4400,1)
(2645,4520,1)
(7171,2652,1)
(5608,7870,1)
(3504,5248,1)
(1390,4324,1)
(868,4144,1)
(7652,2407,1)
(1286,714,1)
(4998,6896,1)
(3349,7924,1)
(2588,1340,1)
(3611,3016,1)
(8862,6570,1)
(6284,3231,1)
(7141,8566,1)
(1842,7388,1)
(6231,2269,1)
(8318,7098,1)
(1786,5518,1)
(6875,4056,1)
(8259,7807,1)
(6566,1866,1)
(8483,2450,1)
(6012,8772,1)
(3592,3358,1)
(399,7113,1)
(6672,5061,1)
(3114,1107,1)
(4607,2077,1)
(7352,5833,1)
(4248,5241,1)
(7981,3227,1)
(8926,8657,1)
(3528,4680,1)
(4241,829,1)
(4356,5355,1)
(2021,5909,1)
(5397,3566,1)
(2428,6385,1)
(5105,5951,1)
(2009,7071,1)
(779,6636,1)
(9136,7962,1)
(6413,412,1)
(7301,5077,1)
(9119,6346,1)
(2333,4964,1)
(7979,6367,1)
(998,8078,1)
(6279,5839,1)
(3686,3369,1)
(5135,7129,1)
(5337,607,1)
(2694,1634,1)
(3457,5735,1)
(1669,5329,1)
(5073,220,1)
(8493,1313,1)
(8951,7110,1)
(6588,826,1)
(2807,3914,1)
(8179,498,1)
(4215,1682,1)
(6814,8113,1)
(7869,407,1)
(1665,5937,1)
(567,8566,1)
(8153,6768,1)
(7285,8587,1)
(3685,421,1)
(4602,5651,1)
(1106,1703,1)
(369,365,1)
(9108,5937,1)
(7791,2408,1)
(4806,8615,1)
(8697,4034,1)
(1801,6663,1)
(6362,4005,1)
(6874,8952,1)
(6095,439,1)
(61,8566,1)
(8752,5758,1)
(8721,7361,1)
(391,6031,1)
(3394,879,1)
(3158,5922,1)
(114,786,1)
(3880,3630,1)
(5504,7510,1)
(2712,4086,1)
(1391,7894,1)
(1959,5902,1)
(2725,1074,1)
(1636,4198,1)
(2044,3002,1)
(1782,8566,1)
(2584,8703,1)
(4195,8596,1)
(2256,704,1)
(5037,4625,1)
(1293,6359,1)
(5380,6273,1)
(2645,154,1)
(415,548,1)
(390,4746,1)
(7487,7663,1)
(8193,6034,1)
(4371,3082,1)
(5,8993,1)
(353,1346,1)
(7318,2815,1)
(3713,5612,1)
(1284,1039,1)
(2235,5061,1)
(4190,5061,1)
(5076,8572,1)
(4403,5439,1)
(4811,7607,1)
(4218,3472,1)
(1686,1208,1)
(4861,4386,1)
(5979,2433,1)
(2940,2487,1)
(7644,2768,1)
(5614,6737,1)
(6191,6381,1)
(3181,870,1)
(3675,8566,1)
(7557,5534,1)
(7964,7634,1)
(5927,5061,1)
(2718,3121,1)
(6899,1006,1)
(1378,5061,1)
(1327,3911,1)
(6554,9003,1)
(4914,2713,1)
(5180,5276,1)
(3441,6290,1)
(5136,3008,1)
(2139,6340,1)
(7363,5155,1)
(5484,5497,1)
(8302,6541,1)
(2811,2804,1)
(966,7592,1)
(4941,2177,1)
(9108,5061,1)
(6060,6238,1)
(3013,7669,1)
(4444,5061,1)
(8257,5658,1)
(4752,7613,1)
(3167,8511,1)
(9136,2165,1)
(8227,3318,1)
(8513,3130,1)
(2645,1071,1)
(2646,6542,1)
(692,8451,1)
(7956,7970,1)
(4221,3443,1)
(8809,5903,1)
(4932,7922,1)
(4930,6044,1)
(4529,5855,1)
(1201,1595,1)
(567,2395,1)
(7921,265,1)
(6623,7845,1)
(5121,5061,1)
(2645,2165,1)
(465,3376,1)
(1448,1103,1)
(3009,4199,1)
(1335,5061,1)
(4969,4163,1)
(2364,5256,1)
(7367,2551,1)
(6950,7143,1)
(8413,9027,1)
(3516,7845,1)
(3249,8566,1)
(1490,6193,1)
(5596,5203,1)
(8309,5579,1)
(7458,2792,1)
(1199,5794,1)
(2651,3192,1)
(1862,127,1)
(2137,5061,1)
(7081,3728,1)
(5074,1876,1)
(6195,1711,1)
(1128,2268,1)
(9095,8602,1)
(3787,677,1)
(5384,5061,1)
(3950,1552,1)
(6456,7425,1)
(7042,341,1)
(3684,2078,1)
(5747,2086,1)
(1825,8067,1)
(2573,609,1)
(5085,931,1)
(2772,639,1)
(3489,429,1)
(8685,8111,1)
(6148,6127,1)
(166,4057,1)
(1507,7116,1)
(8864,6832,1)
(7370,5802,1)
(8824,3757,1)
(112,8108,1)
(7909,3852,1)
(7277,4106,1)
(8053,3675,1)
(6864,29,1)
(1004,2326,1)
(1481,7045,1)
(2331,2105,1)
(9104,2786,1)
(3932,375,1)
(1339,7890,1)
(6967,5061,1)
(6815,839,1)
(2708,1168,1)
(4716,726,1)
(6128,3216,1)
(4507,8838,1)
(2850,2998,1)
(5510,5061,1)
(8052,52,1)
(3140,8566,1)
(1680,243,1)
(4575,4524,1)
(3652,9125,1)
(4749,5431,1)
(3955,5254,1)
(5817,2516,1)
(6320,2421,1)
(6444,8798,1)
(6223,6768,1)
(2128,6704,1)
(641,6467,1)
(1237,1934,1)
(9111,8104,1)
(214,7029,1)
(8831,4468,1)
(521,2974,1)
(7644,8703,1)
(4476,8254,1)
(2155,2916,1)
(6566,2485,1)
(2010,8057,1)
(885,5696,1)
(573,8209,1)
(3010,5908,1)
(3050,707,1)
(9083,2760,1)
(7159,6768,1)
(8175,7425,1)
(2308,4612,1)
(5008,7903,1)
(4520,3327,1)
(4113,4306,1)
(4841,7402,1)
(5182,5410,1)
(8419,216,1)
(7276,589,1)
(7906,4959,1)
(1590,251,1)
(7661,6536,1)
(93,3458,1)
(8422,8761,1)
(2575,8566,1)
(3503,6731,1)
(8204,6579,1)
(5384,8477,1)
(1462,7197,1)
(695,1785,1)
(4059,564,1)
(4507,2850,1)
(3257,4071,1)
(5661,5937,1)
(3113,7027,1)
(1327,8579,1)
(4273,8566,1)
(5652,4736,1)
(5137,1663,1)
(5278,1571,1)
(4691,8760,1)
(3381,3336,1)
(3268,7382,1)
(5765,3972,1)
(508,6332,1)
(1160,1855,1)
(7416,2681,1)
(2875,2612,1)
(8564,4517,1)
(2028,474,1)
(6127,8566,1)
(2311,7958,1)
(6662,5061,1)
(3124,1866,1)
(2427,2808,1)
(3419,3726,1)
(7756,7838,1)
(335,3606,1)
(506,249,1)
(7291,8566,1)
(8204,6652,1)
(7056,5061,1)
(5417,4521,1)
(1329,1499,1)
(8322,6651,1)
(4311,7430,1)
(1600,8352,1)
(8454,4616,1)
(8335,1623,1)
(141,8204,1)
(2593,6994,1)
(6410,3143,1)
(5595,9116,1)
(4950,8693,1)
(6985,3376,1)
(3477,4245,1)
(9104,7962,1)
(956,2926,1)
(7885,8566,1)
(2962,1716,1)
(6929,8407,1)
(7098,6012,1)
(4447,7445,1)
(5429,3293,1)
(5628,6154,1)
(7644,4304,1)
(804,7878,1)
(1702,2411,1)
(5869,7282,1)
(3094,4419,1)
(6901,3806,1)
(6440,8885,1)
(6672,8566,1)
(3973,8752,1)
(4060,1862,1)
(5767,6586,1)
(6836,5312,1)
(5965,5391,1)
(6090,7586,1)
(3862,7918,1)
(5349,7902,1)
(829,8237,1)
(8506,4114,1)
(1551,4113,1)
(5894,952,1)
(8388,5537,1)
(6063,6804,1)
(7094,3078,1)
(2936,7017,1)
(2580,4403,1)
(5965,33,1)
(1962,2497,1)
(7644,838,1)
(2331,8566,1)
(6473,6432,1)
(6566,2165,1)
(5797,777,1)
(406,8566,1)
(4354,7457,1)
(237,6429,1)
(5953,4501,1)
(176,5129,1)
(4819,2877,1)
(224,4789,1)
(3566,5558,1)
(6396,3231,1)
(8375,51,1)
(5712,4588,1)
(1842,3148,1)
(5677,5737,1)
(8386,2336,1)
(2698,6257,1)
(6775,1064,1)
(6446,4380,1)
(4714,8566,1)
(3226,8193,1)
(2541,6591,1)
(8735,78,1)
(5520,4002,1)
(2812,2502,1)
(6278,8290,1)
(3140,3231,1)
(9027,6960,1)
(6941,3412,1)
(5250,7534,1)
(7505,2107,1)
(4826,8991,1)
(6028,2043,1)
(4279,9030,1)
(2692,5937,1)
(1746,7542,1)
(7377,7972,1)
(9104,2870,1)
(2351,1722,1)
(7222,2387,1)
(9136,4864,1)
(3860,1283,1)
(3124,7326,1)
(8466,8784,1)
(5636,2062,1)
(2387,4798,1)
(6418,8566,1)
(3104,5061,1)
(4759,386,1)
(2657,4541,1)
(2457,4304,1)
(1016,136,1)
(2052,7369,1)
(4824,2058,1)
(6217,2718,1)
(3093,1881,1)
(8833,5687,1)
(7079,4080,1)
(9113,7792,1)
(2770,8285,1)
(6008,5061,1)
(6126,443,1)
(8204,4140,1)
(5401,8566,1)
(3124,2165,1)
(2383,7788,1)
(7326,8566,1)
(7630,4891,1)
(7317,6876,1)
(7937,8566,1)
(2485,5826,1)
(3630,5357,1)
(8718,1903,1)
(1990,6768,1)
(7431,583,1)
(5757,5601,1)
(1079,5949,1)
(6264,8828,1)
(2265,769,1)
(7820,1944,1)
(4829,3906,1)
(7161,1374,1)
(484,8566,1)
(8546,2498,1)
(2558,5841,1)
(253,2856,1)
(8296,4453,1)
(7837,65,1)
(2441,6814,1)
(4532,8251,1)
(4990,2120,1)
(3110,7299,1)
(569,8282,1)
(9084,5061,1)
(3169,3670,1)
(2992,6346,1)
(7580,5937,1)
(6163,8919,1)
(2554,5134,1)
(3590,6136,1)
(8204,871,1)
(3688,65,1)
(5420,7847,1)
(3781,3159,1)
(8301,4971,1)
(5195,7260,1)
(2066,268,1)
(3955,2457,1)
(1563,5061,1)
(4214,2403,1)
(3090,1492,1)
(2584,952,1)
(2682,2819,1)
(8946,3376,1)
(5836,3280,1)
(2885,1589,1)
(2592,8566,1)
(352,4057,1)
(2324,1645,1)
(5945,1852,1)
(657,1963,1)
(3611,5738,1)
(7449,5204,1)
(7966,5061,1)
(2851,4636,1)
(368,8663,1)
(7743,5610,1)
(7588,8138,1)
(3208,3661,1)
(8126,923,1)
(5960,8566,1)
(7995,5061,1)
(2134,2865,1)
(4816,5776,1)
(560,5096,1)
(7159,3892,1)
(8843,8863,1)
(8067,2702,1)
(5160,1361,1)
(5223,9110,1)
(1589,2589,1)
(7429,8566,1)
(6222,3764,1)
(8914,8662,1)
(3962,336,1)
(8204,6929,1)
(2434,8093,1)
(12,3930,1)
(5847,7144,1)
(5748,708,1)
(3329,5061,1)
(1847,1949,1)
(9018,2270,1)
(1646,6902,1)
(6519,992,1)
(8538,8753,1)
(8466,5061,1)
(3375,227,1)
(6943,8888,1)
(1906,240,1)
(5203,4719,1)
(5164,6759,1)
(6147,4940,1)
(5508,6774,1)
(1035,2172,1)
(184,258,1)
(4198,2803,1)
(6607,7639,1)
(7835,4017,1)
(3996,7229,1)
(7263,8652,1)
(4949,8437,1)
(1814,4365,1)
(2624,3172,1)
(4286,8643,1)
(6687,8206,1)
(6612,8852,1)
(5730,7678,1)
(6741,8566,1)
(8242,1347,1)
(9108,8566,1)
(2072,4057,1)
(370,2273,1)
(5141,3445,1)
(6296,4566,1)
(9036,6828,1)
(7759,5871,1)
(8295,2051,1)
(1754,4455,1)
(8529,7705,1)
(4010,8566,1)
(2592,7500,1)
(2605,5642,1)
(196,5369,1)
(8192,6470,1)
(8276,5340,1)
(4198,9029,1)
(2417,6167,1)
(5515,1537,1)
(7114,3600,1)
(361,1729,1)
(3162,4569,1)
(7125,7097,1)
(5120,7475,1)
(7627,6972,1)
(7919,1308,1)
(2235,7761,1)
(1970,3376,1)
(6463,2599,1)
(5814,2803,1)
(7644,8966,1)
(8919,7624,1)
(2436,7795,1)
(7422,2465,1)
(6609,2350,1)
(2753,2579,1)
(7365,6523,1)
(2036,297,1)
(8070,3050,1)
(4197,4812,1)
(5171,7159,1)
(5521,8783,1)
(4947,5061,1)
(5891,8778,1)
(6882,7046,1)
(1960,1556,1)
(6769,6603,1)
(7825,4275,1)
(7400,5727,1)
(1085,1689,1)
(591,5032,1)
(4164,4749,1)
(7563,5312,1)
(4006,8992,1)
(6043,3896,1)
(3420,1030,1)
(927,5061,1)
(8279,7855,1)
(2737,5061,1)
(8204,5535,1)
(4973,9118,1)
(5014,2417,1)
(5110,253,1)
(2139,7425,1)
(971,3957,1)
(2307,1609,1)
(2822,1214,1)
(4738,8983,1)
(1160,8999,1)
(378,6361,1)
(4080,8103,1)
(5838,2528,1)
(2930,1693,1)
(9140,6481,1)
(5591,7829,1)
(6592,5061,1)
(2262,4488,1)
(5105,7326,1)
(1794,5112,1)
(5533,301,1)
(4402,4237,1)
(7910,4644,1)
(6945,5072,1)
(8462,3148,1)
(6281,5937,1)
(5335,3813,1)
(774,8566,1)
(2157,1397,1)
(1837,4138,1)
(5209,7408,1)
(3410,708,1)
(6959,3222,1)
(3737,1532,1)
(434,5061,1)
(8628,8566,1)
(8204,6151,1)
(769,3148,1)
(1217,8566,1)
(6332,7016,1)
(2561,3452,1)
(5707,915,1)
(4233,258,1)
(308,6500,1)
(4461,4620,1)
(9098,5061,1)
(3007,655,1)
(8347,1950,1)
(5486,2667,1)
(6275,3884,1)
(3581,892,1)
(6361,8831,1)
(3294,899,1)
(3457,5230,1)
(3408,362,1)
(8955,1501,1)
(6561,5061,1)
(3583,5946,1)
(7850,3557,1)
(124,3413,1)
(5714,8956,1)
(2164,8566,1)
(3042,3829,1)
(7877,2575,1)
(6986,6968,1)
(8205,3160,1)
(2326,212,1)
(690,6654,1)
(6178,6400,1)
(1647,318,1)
(8736,2879,1)
(8404,5399,1)
(1067,4240,1)
(8157,4214,1)
(2232,224,1)
(3025,2123,1)
(3545,6537,1)
(7915,5858,1)
(1262,1774,1)
(1370,9026,1)
(8214,2938,1)
(6372,737,1)
(556,1470,1)
(2383,8566,1)
(1802,7470,1)
(8619,4183,1)
(1623,8566,1)
(6960,9067,1)
(8814,4179,1)
(7895,7564,1)
(2938,2612,1)
(8957,348,1)
(4647,65,1)
(6974,1182,1)
(8251,3686,1)
(2392,1408,1)
(5405,5897,1)
(3058,1212,1)
(2142,5818,1)
(6710,920,1)
(6452,1039,1)
(8132,1195,1)
(1403,8244,1)
(4773,2534,1)
(9056,5061,1)
(3510,4618,1)
(640,154,1)
(8476,2520,1)
(6940,8566,1)
(3578,3148,1)
(4804,7308,1)
(8372,7919,1)
(3934,5827,1)
(3034,8435,1)
(8266,7462,1)
(952,8566,1)
(702,5815,1)
(8630,127,1)
(5852,8566,1)
(4581,8566,1)
(6139,394,1)
(5096,8488,1)
(8175,7103,1)
(3356,97,1)
(260,8132,1)
(2517,6724,1)
(2266,8651,1)
(5061,6301,1)
(8331,6869,1)
(5184,7193,1)
(1345,8883,1)
(4419,2524,1)
(2490,762,1)
(3922,4361,1)
(2121,3244,1)
(795,3902,1)
(1176,5061,1)
(710,5529,1)
(7776,258,1)
(7766,2264,1)
(2119,7362,1)
(6419,8514,1)
(4123,9103,1)
(1419,7949,1)
(4973,5844,1)
(3291,6823,1)
(3416,5061,1)
(7031,6768,1)
(7032,841,1)
(1369,1832,1)
(2409,7386,1)
(8851,1290,1)
(8480,2127,1)
(1291,3651,1)
(8204,6686,1)
(1870,5143,1)
(3022,442,1)
(615,7700,1)
(2803,3075,1)
(4269,8683,1)
(3318,591,1)
(6716,8685,1)
(6276,4234,1)
(7679,837,1)
(2656,6796,1)
(7828,4192,1)
(1884,8469,1)
(8299,8566,1)
(8991,1050,1)
(631,33,1)
(9047,1710,1)
(4275,944,1)
(4882,6214,1)
(3329,8566,1)
(151,2266,1)
(7963,3017,1)
(4610,3153,1)
(840,2427,1)
(4779,3035,1)
(3404,3025,1)
(2319,7544,1)
(8204,8120,1)
(8650,4919,1)
(7258,6229,1)
(7053,1110,1)
(3457,6454,1)
(5787,5979,1)
(7340,5869,1)
(1800,2075,1)
(2705,7834,1)
(227,5567,1)
(5704,7091,1)
(6832,739,1)
(6911,283,1)
(7726,5061,1)
(4726,5253,1)
(1097,3009,1)
(1689,5061,1)
(3849,909,1)
(7642,1496,1)
(3070,1493,1)
(1480,4983,1)
(6106,8566,1)
(892,1702,1)
(3790,5307,1)
(8395,5245,1)
(5790,5451,1)
(1403,5257,1)
(2186,8107,1)
(4256,2772,1)
(7962,3144,1)
(8225,5937,1)
(459,343,1)
(801,144,1)
(1020,8611,1)
(3365,5937,1)
(1868,1855,1)
(6725,3138,1)
(4035,7884,1)
(4828,1108,1)
(2675,8351,1)
(1435,7487,1)
(5957,971,1)
(2097,745,1)
(7120,616,1)
(4331,5061,1)
(3475,457,1)
(5065,6980,1)
(230,6513,1)
(2039,3147,1)
(4090,517,1)
(8375,5061,1)
(8110,956,1)
(4546,3148,1)
(5273,778,1)
(3884,6442,1)
(2437,489,1)
(1668,4061,1)
(8784,4318,1)
(5411,875,1)
(4129,3054,1)
(7932,2160,1)
(5490,7580,1)
(1653,5061,1)
(7358,2518,1)
(713,3803,1)
(1165,5523,1)
(7254,6472,1)
(8441,4747,1)
(9120,5937,1)
(5050,6405,1)
(5064,8928,1)
(2786,2555,1)
(5034,3849,1)
(2866,5425,1)
(426,6926,1)
(5900,127,1)
(5081,8658,1)
(2268,3725,1)
(3468,4929,1)
(6367,3830,1)
(2650,2989,1)
(6032,8405,1)
(3781,8566,1)
(1338,392,1)
(717,8148,1)
(4944,6337,1)
(7348,6707,1)
(2584,7962,1)
(1847,756,1)
(5263,438,1)
(8196,7881,1)
(762,8255,1)
(63,1343,1)
(9104,446,1)
(5908,1294,1)
(5111,6705,1)
(2057,5061,1)
(4217,8079,1)
(2139,952,1)
(1277,4109,1)
(5148,4642,1)
(5262,7348,1)
(6566,4400,1)
(7025,5061,1)
(8796,6365,1)
(3539,1925,1)
(8806,3148,1)
(5818,5061,1)
(1797,8381,1)
(1213,7663,1)
(1131,7227,1)
(3215,2186,1)
(8197,1036,1)
(8714,9002,1)
(832,5569,1)
(1641,6206,1)
(3420,518,1)
(5806,2020,1)
(6892,4248,1)
(653,1659,1)
(3839,6867,1)
(5441,5061,1)
(8189,8495,1)
(7351,3090,1)
(6314,8566,1)
(5427,258,1)
(5494,3268,1)
(5009,2542,1)
(7416,3685,1)
(6082,236,1)
(5365,5061,1)
(8785,3736,1)
(2241,7540,1)
(6833,8881,1)
(5137,6197,1)
(5534,5455,1)
(6561,140,1)
(8755,1778,1)
(3312,1589,1)
(2056,3585,1)
(3196,1023,1)
(2818,7608,1)
(3124,2768,1)
(7023,8662,1)
(2245,3566,1)
(909,4572,1)
(7739,3343,1)
(3105,6991,1)
(2421,2214,1)
(5032,6812,1)
(5581,8050,1)
(3888,2672,1)
(1691,2312,1)
(2863,2503,1)
(5378,3139,1)
(8232,6233,1)
(5902,4604,1)
(272,2712,1)
(1375,2358,1)
(3165,4781,1)
(3955,256,1)
(6589,540,1)
(6343,1830,1)
(1146,2513,1)
(1613,952,1)
(8264,8566,1)
(3586,678,1)
(4212,4917,1)
(7304,3297,1)
(3248,6190,1)
(3844,4264,1)
(9104,3592,1)
(5377,7490,1)
(3072,1876,1)
(1983,5061,1)
(7539,8110,1)
(84,354,1)
(300,8267,1)
(991,1241,1)
(1088,9143,1)
(7829,8566,1)
(9104,7326,1)
(5812,5988,1)
(6901,4722,1)
(619,2891,1)
(4773,4599,1)
(3115,6826,1)
(8456,8385,1)
(7772,3795,1)
(7242,5603,1)
(3373,4357,1)
(7872,7264,1)
(6334,4111,1)
(8152,5892,1)
(6897,3165,1)
(150,8566,1)
(1244,8294,1)
(5664,2836,1)
(4423,4289,1)
(6952,2359,1)
(2981,4129,1)
(2380,4991,1)
(4700,8012,1)
(8758,2229,1)
(4290,7758,1)
(2129,8422,1)
(7482,6392,1)
(8281,4136,1)
(1193,6160,1)
(3351,258,1)
(13,4320,1)
(316,8174,1)
(8524,5447,1)
(6094,1562,1)
(7733,4281,1)
(494,119,1)
(7021,5637,1)
(6905,6081,1)
(5524,1418,1)
(7247,200,1)
(6589,5688,1)
(2918,4694,1)
(7035,5201,1)
(6909,8539,1)
(702,6768,1)
(4497,1917,1)
(8893,6946,1)
(7051,2142,1)
(7745,8566,1)
(3579,2280,1)
(159,4623,1)
(3831,5837,1)
(8730,4440,1)
(8691,5973,1)
(4114,8566,1)
(8084,990,1)
(5105,8703,1)
(7728,2709,1)
(6997,8936,1)
(4871,6847,1)
(6218,5937,1)
(3236,7224,1)
(3190,2042,1)
(5016,3242,1)
(72,3779,1)
(2227,60,1)
(6475,2283,1)
(1565,7936,1)
(8454,8712,1)
(3248,5061,1)
(8531,1093,1)
(7929,2764,1)
(2167,418,1)
(3907,8566,1)
(90,1550,1)
(2604,1836,1)
(2032,8074,1)
(1562,2676,1)
(8827,65,1)
(8137,4439,1)
(7616,6770,1)
(1447,3146,1)
(950,1858,1)
(891,5061,1)
(431,2803,1)
(6003,1335,1)
(1581,6580,1)
(2770,5061,1)
(2302,3337,1)
(6863,5061,1)
(2737,6590,1)
(8204,3262,1)
(5045,8311,1)
(619,8566,1)
(6977,254,1)
(3871,288,1)
(8643,5592,1)
(3781,5061,1)
(5953,1690,1)
(3760,9154,1)
(7218,289,1)
(5875,4083,1)
(2573,5937,1)
(1459,5835,1)
(3001,683,1)
(5978,4931,1)
(4816,7294,1)
(2841,5414,1)
(1239,5199,1)
(7798,7821,1)
(1716,5061,1)
(4299,6718,1)
(2339,5061,1)
(5148,2199,1)
(6477,5061,1)
(5438,615,1)
(6527,817,1)
(8129,1500,1)
(1581,4612,1)
(7579,999,1)
(3178,8210,1)
(4481,4770,1)
(136,3587,1)
(4648,8566,1)
(7839,17,1)
(7259,460,1)
(2229,6633,1)
(4105,1367,1)
(9128,7101,1)
(6981,8939,1)
(800,8635,1)
(5810,2544,1)
(764,1083,1)
(4697,5286,1)
(7871,5561,1)
(4681,4361,1)
(3097,8369,1)
(6469,1958,1)
(5132,8566,1)
(1126,9006,1)
(3488,5061,1)
(307,6222,1)
(6996,7153,1)
(3324,4904,1)
(6115,3148,1)
(7204,8894,1)
(2141,711,1)
(8032,5061,1)
(5619,188,1)
(5505,3091,1)
(4991,3051,1)
(6304,7090,1)
(8778,258,1)
(5254,7425,1)
(2303,424,1)
(6584,3650,1)
(3543,6474,1)
(5105,7878,1)
(8442,5262,1)
(9152,4928,1)
(2941,5076,1)
(31,2318,1)
(8399,344,1)
(3729,138,1)
(5192,4219,1)
(1843,7406,1)
(7880,9137,1)
(1851,7612,1)
(1917,2223,1)
(7025,6073,1)
(6792,2323,1)
(4515,1559,1)
(5326,7233,1)
(8373,5263,1)
(6574,1909,1)
(3355,8945,1)
(6467,6970,1)
(2504,5795,1)
(7040,4708,1)
(3216,127,1)
(514,446,1)
(585,5061,1)
(3243,9055,1)
(9032,5633,1)
(5818,8566,1)
(5141,4839,1)
(1834,3233,1)
(3608,732,1)
(7088,4780,1)
(6893,925,1)
(5119,1653,1)
(5832,7139,1)
(7566,4811,1)
(6474,565,1)
(5782,183,1)
(8097,6041,1)
(8164,3667,1)
(2870,8749,1)
(3432,5061,1)
(6366,6223,1)
(7390,7482,1)
(7818,2206,1)
(3121,570,1)
(7386,5610,1)
(4712,4423,1)
(1613,2485,1)
(4830,4337,1)
(7434,1230,1)
(7644,3647,1)
(3696,2033,1)
(6420,1616,1)
(5503,2119,1)
(1613,2165,1)
(8391,3861,1)
(8296,8758,1)
(9155,222,1)
(7140,8101,1)
(2217,5061,1)
(4620,6444,1)
(8204,6010,1)
(788,8127,1)
(2204,6178,1)
(7177,4070,1)
(8545,7777,1)
(4043,459,1)
(894,8721,1)
(5200,6113,1)
(2805,3792,1)
(1428,5595,1)
(483,8632,1)
(3090,4993,1)
(8880,315,1)
(6662,8727,1)
(4522,5283,1)
(3141,6569,1)
(7133,8327,1)
(6706,4347,1)
(3616,8566,1)
(8510,1644,1)
(2045,3400,1)
(901,65,1)
(7014,8142,1)
(8808,3038,1)
(8602,6303,1)
(8542,2033,1)
(4250,3837,1)
(1309,8566,1)
(2574,4444,1)
(2464,5643,1)
(4758,2309,1)
(2960,5976,1)
(5961,8935,1)
(3508,8566,1)
(1111,5873,1)
(4056,4573,1)
(7907,1594,1)
(4392,7982,1)
(20,8566,1)
(4440,1417,1)
(5671,2748,1)
(8919,135,1)
(1530,1825,1)
(8081,4698,1)
(7226,5712,1)
(6602,8566,1)
(3897,5677,1)
(4606,5085,1)
(1464,976,1)
(647,1912,1)
(474,5217,1)
(1429,7053,1)
(316,546,1)
(4393,3201,1)
(8183,2995,1)
(4348,4916,1)
(4704,7623,1)
(3777,8551,1)
(3590,1491,1)
(2217,5495,1)
(4674,6129,1)
(3231,8966,1)
(1803,8301,1)
(2841,454,1)
(8653,3113,1)
(8360,5271,1)
(7804,536,1)
(7173,7511,1)
(2612,9120,1)
(6206,6085,1)
(5268,4203,1)
(2878,8566,1)
(6293,5436,1)
(4372,5061,1)
(137,5253,1)
(3196,5061,1)
(1312,6275,1)
(2016,1939,1)
(794,6866,1)
(730,430,1)
(2536,3061,1)
(5147,6440,1)
(5558,8580,1)
(2861,7289,1)
(6668,5963,1)
(5789,4172,1)
(9112,3459,1)
(7105,854,1)
(9081,4473,1)
(1327,8547,1)
(7128,4838,1)
(8,8360,1)
(5253,6230,1)
(8616,7738,1)
(8204,4871,1)
(426,4429,1)
(6547,2917,1)
(7836,8566,1)
(8153,1787,1)
(8206,3329,1)
(2840,127,1)
(7997,5981,1)
(3081,72,1)
(2895,4535,1)
(2677,5516,1)
(5476,8198,1)
(3007,2017,1)
(8823,5638,1)
(6713,5123,1)
(5070,3058,1)
(207,4047,1)
(5143,6463,1)
(3665,8790,1)
(1263,6069,1)
(1201,8566,1)
(6825,8725,1)
(7942,2998,1)
(7519,1230,1)
(2736,7510,1)
(1288,4772,1)
(8807,7689,1)
(7920,2515,1)
(5507,8652,1)
(7222,4560,1)
(7174,299,1)
(1371,7925,1)
(1726,9130,1)
(8037,6357,1)
(5371,5180,1)
(2993,7983,1)
(8417,8066,1)
(6476,7469,1)
(157,4427,1)
(920,3624,1)
(2219,2241,1)
(6492,8515,1)
(7115,5608,1)
(5897,5061,1)
(1333,5258,1)
(4799,945,1)
(1143,3708,1)
(5764,5038,1)
(7048,83,1)
(2601,5061,1)
(1463,8566,1)
(2109,5435,1)
(6845,304,1)
(6706,8566,1)
(7818,3943,1)
(1335,8566,1)
(7874,6270,1)
(7892,5490,1)
(2089,1407,1)
(2663,8244,1)
(861,2295,1)
(4894,9013,1)
(1027,1995,1)
(4720,3148,1)
(4061,3921,1)
(7495,3816,1)
(107,8857,1)
(1998,6564,1)
(3767,5309,1)
(138,8566,1)
(5395,8592,1)
(942,5281,1)
(6777,8566,1)
(6808,1748,1)
(5067,8304,1)
(6590,5022,1)
(5718,3513,1)
(7962,5782,1)
(1320,8086,1)
(622,8566,1)
(5750,715,1)
(3386,8305,1)
(8204,445,1)
(6673,5194,1)
(7775,8566,1)
(7677,3485,1)
(675,3074,1)
(4512,8566,1)
(3546,5061,1)
(3348,4123,1)
(1433,2655,1)
(5877,6289,1)
(6976,9102,1)
(8014,7824,1)
(2896,347,1)
(6758,6877,1)
(655,2831,1)
(854,6632,1)
(5806,1886,1)
(5058,2614,1)
(8741,3148,1)
(3079,5110,1)
(5468,8566,1)
(7819,2212,1)
(7190,2085,1)
(6016,1162,1)
(5089,8271,1)
(2431,4570,1)
(7029,556,1)
(2683,861,1)
(38,1717,1)
(5148,2511,1)
(2491,2286,1)
(1061,348,1)
(1030,2918,1)
(3022,5061,1)
(5650,6648,1)
(2978,8241,1)
(3116,8653,1)
(5063,4347,1)
(6510,5937,1)
(6864,2497,1)
(4869,4906,1)
(2065,267,1)
(7821,4486,1)
(1097,8797,1)
(5649,585,1)
(8544,5663,1)
(2645,8703,1)
(3055,8793,1)
(8290,8568,1)
(4648,6668,1)
(873,1029,1)
(1614,1527,1)
(975,3011,1)
(875,5061,1)
(1389,8065,1)
(1899,5956,1)
(4233,7398,1)
(177,7137,1)
(1613,4400,1)
(2445,6976,1)
(4410,5729,1)
(6813,2420,1)
(2224,1921,1)
(9055,873,1)
(2935,6947,1)
(377,8947,1)
(6346,3560,1)
(4869,65,1)
(3703,2610,1)
(3138,3309,1)
(4793,819,1)
(2077,2791,1)
(5054,2536,1)
(8865,2543,1)
(3559,7213,1)
(8232,2538,1)
(4514,1783,1)
(7112,4847,1)
(5794,8384,1)
(704,2962,1)
(2501,8027,1)
(6617,1899,1)
(3626,5061,1)
(8495,1753,1)
(7153,258,1)
(6747,2850,1)
(2752,7087,1)
(4537,3095,1)
(5553,1323,1)
(1319,7743,1)
(963,1263,1)
(4102,4715,1)
(6056,8566,1)
(1368,9032,1)
(8484,3072,1)
(6474,3064,1)
(7824,1893,1)
(8416,4658,1)
(6933,5465,1)
(6311,1618,1)
(1396,7180,1)
(5148,2768,1)
(2852,3376,1)
(5637,7825,1)
(8651,4884,1)
(4776,1277,1)
(4460,8851,1)
(1621,6557,1)
(1684,3850,1)
(7098,1374,1)
(8464,4188,1)
(8609,4095,1)
(258,8180,1)
(3036,1506,1)
(4708,1582,1)
(3960,254,1)
(5694,8989,1)
(1097,4272,1)
(2903,3588,1)
(6423,6488,1)
(5844,65,1)
(1943,5418,1)
(1957,5815,1)
(621,2253,1)
(181,824,1)
(7005,5061,1)
(8489,176,1)
(857,7907,1)
(219,2682,1)
(933,891,1)
(6742,5061,1)
(2585,3747,1)
(1693,7136,1)
(4656,8233,1)
(3333,1945,1)
(5224,4930,1)
(4670,1736,1)
(2087,3681,1)
(9015,6087,1)
(9014,7079,1)
(5027,1808,1)
(8961,1883,1)
(435,4134,1)
(8684,5726,1)
(4260,5306,1)
(2446,27,1)
(3551,1615,1)
(4622,5088,1)
(428,6872,1)
(8941,9085,1)
(406,2030,1)
(2001,6514,1)
(1552,7204,1)
(8760,2909,1)
(4951,2178,1)
(1660,5356,1)
(1997,175,1)
(6371,8870,1)
(6202,7695,1)
(6091,1060,1)
(8831,165,1)
(2518,6485,1)
(3780,632,1)
(1321,4396,1)
(7344,1145,1)
(3548,8566,1)
(2492,5420,1)
(595,8566,1)
(559,496,1)
(6854,3946,1)
(8664,1052,1)
(4846,4014,1)
(2036,5475,1)
(5911,3958,1)
(5644,5084,1)
(6228,4319,1)
(7093,2285,1)
(1225,978,1)
(1941,1039,1)
(5744,383,1)
(1710,4346,1)
(4630,8130,1)
(359,8395,1)
(2261,8566,1)
(6530,6945,1)
(7920,1636,1)
(7725,5809,1)
(6244,6816,1)
(3318,5032,1)
(1015,8835,1)
(2689,5061,1)
(5231,5214,1)
(5604,2025,1)
(2548,8566,1)
(3089,6312,1)
(3547,8173,1)
(8475,1979,1)
(4937,4286,1)
(4000,776,1)
(8836,8566,1)
(8535,181,1)
(2220,5061,1)
(5469,5058,1)
(3667,3480,1)
(7780,7135,1)
(6486,8640,1)
(993,8672,1)
(156,2446,1)
(1067,8566,1)
(8136,323,1)
(771,6546,1)
(2016,3443,1)
(8096,379,1)
(3213,5363,1)
(2808,3576,1)
(6775,1225,1)
(9002,4341,1)
(6715,5061,1)
(4299,4595,1)
(712,1671,1)
(1499,325,1)
(5306,4044,1)
(5111,1726,1)
(7707,3758,1)
(1464,5204,1)
(2848,7028,1)
(8619,1927,1)
(7001,6042,1)
(4088,230,1)
(2489,4853,1)
(4650,2453,1)
(5105,8980,1)
(6648,3376,1)
(7939,1818,1)
(4223,6938,1)
(1439,2317,1)
(3544,1681,1)
(6212,1140,1)
(6961,2765,1)
(6401,2985,1)
(4872,5917,1)
(5732,5402,1)
(2766,5154,1)
(987,5168,1)
(5612,5029,1)
(4585,7992,1)
(4564,6102,1)
(6524,8111,1)
(489,2329,1)
(5956,2483,1)
(8204,5512,1)
(1971,5451,1)
(8418,1350,1)
(2835,2663,1)
(4353,7223,1)
(6437,2431,1)
(6567,258,1)
(1857,1068,1)
(4874,1690,1)
(1185,8566,1)
(3457,1813,1)
(2104,2997,1)
(1245,8566,1)
(4213,5536,1)
(4289,1098,1)
(3055,8734,1)
(257,5061,1)
(77,2203,1)
(3437,6340,1)
(6763,7131,1)
(2575,7921,1)
(1343,953,1)
(172,4664,1)
(4409,7174,1)
(7176,5853,1)
(3018,4036,1)
(7343,2039,1)
(3919,4761,1)
(2833,5771,1)
(8852,7867,1)
(4014,4937,1)
(285,4297,1)
(7846,1192,1)
(2304,8208,1)
(6426,8566,1)
(7108,2848,1)
(1071,6362,1)
(86,2039,1)
(5992,5061,1)
(1203,887,1)
(6342,3554,1)
(4714,6433,1)
(4257,6067,1)
(1043,1527,1)
(3946,3295,1)
(7809,7235,1)
(7124,7540,1)
(3437,8703,1)
(5105,6340,1)
(7525,3915,1)
(2261,5937,1)
(4578,5349,1)
(8204,2565,1)
(2908,8827,1)
(6051,5061,1)
(6513,8605,1)
(8004,3335,1)
(8696,6348,1)
(3457,1768,1)
(2373,890,1)
(4321,1320,1)
(2273,7712,1)
(2728,5061,1)
(6555,8566,1)
(2645,4642,1)
(6097,2006,1)
(1557,1322,1)
(5109,7170,1)
(4263,6097,1)
(7369,926,1)
(889,2998,1)
(1494,129,1)
(1039,4465,1)
(7426,1199,1)
(3921,5061,1)
(8590,5937,1)
(3877,3402,1)
(3942,2509,1)
(1342,3495,1)
(8359,710,1)
(1922,1733,1)
(6653,5640,1)
(7560,4555,1)
(1909,3815,1)
(6411,3063,1)
(2586,8566,1)
(1763,2033,1)
(4607,1480,1)
(4809,5839,1)
(6951,8473,1)
(8706,8703,1)
(5589,8387,1)
(2308,3201,1)
(5568,1032,1)
(5672,6589,1)
(3293,6215,1)
(830,9028,1)
(2645,1200,1)
(4995,120,1)
(1042,8990,1)
(188,5090,1)
(2982,5587,1)
(4018,3981,1)
(6391,1183,1)
(8147,5061,1)
(7193,8750,1)
(8647,8137,1)
(1156,101,1)
(1401,649,1)
(8325,2094,1)
(1374,7776,1)
(3274,3221,1)
(3323,7203,1)
(807,5937,1)
(588,65,1)
(5981,1011,1)
(209,7284,1)
(3044,2638,1)
(3874,8590,1)
(6524,415,1)
(5398,8550,1)
(7430,5061,1)
(1231,7877,1)
(2503,620,1)
(48,6140,1)
(6766,4456,1)
(8750,4186,1)
(3226,7532,1)
(4803,8566,1)
(3815,9025,1)
(8270,7051,1)
(2230,7823,1)
(5949,4372,1)
(6255,8566,1)
(3043,4400,1)
(4699,6703,1)
(648,2199,1)
(5914,4910,1)
(7092,8927,1)
(3538,1945,1)
(9019,155,1)
(6409,7920,1)
(464,7100,1)
(5924,2821,1)
(7375,6221,1)
(664,356,1)
(3746,416,1)
(7807,7367,1)
(5134,2777,1)
(5334,7718,1)
(94,5060,1)
(5883,8709,1)
(7774,774,1)
(2160,4016,1)
(2542,5784,1)
(525,8869,1)
(8337,3383,1)
(3854,3202,1)
(2886,4723,1)
(2455,8265,1)
(2095,4149,1)
(931,8517,1)
(2074,6558,1)
(4971,7846,1)
(1714,3303,1)
(1211,7472,1)
(6044,8510,1)
(8319,4338,1)
(7876,4538,1)
(7507,1344,1)
(3830,5400,1)
(5148,3059,1)
(1080,5061,1)
(4606,8566,1)
(3855,2412,1)
(6398,3321,1)
(6698,127,1)
(3600,2251,1)
(3310,3012,1)
(6680,3026,1)
(5036,3657,1)
(2304,1130,1)
(3165,1523,1)
(2653,4716,1)
(8297,8566,1)
(5629,3136,1)
(5894,1866,1)
(67,1348,1)
(4539,3893,1)
(7305,6551,1)
(6345,8566,1)
(693,7068,1)
(5859,3607,1)
(1125,300,1)
(2995,6562,1)
(6734,1353,1)
(6396,8566,1)
(7189,7853,1)
(2502,6795,1)
(2248,258,1)
(2438,6841,1)
(4919,65,1)
(6181,7161,1)
(712,4776,1)
(8141,2770,1)
(8284,2841,1)
(8900,6801,1)
(3471,5378,1)
(5129,8963,1)
(8709,6215,1)
(4695,2197,1)
(7881,4875,1)
(7535,7865,1)
(7873,8566,1)
(638,7113,1)
(388,9039,1)
(4701,2691,1)
(7094,7250,1)
(4375,1449,1)
(6450,8966,1)
(5343,5061,1)
(725,659,1)
(3492,6310,1)
(2675,8566,1)
(105,8412,1)
(6745,3181,1)
(2330,2034,1)
(3705,5142,1)
(2047,4862,1)
(5800,7317,1)
(2901,5574,1)
(3528,5118,1)
(8669,3785,1)
(8790,5027,1)
(2293,6244,1)
(3871,5061,1)
(2991,6335,1)
(5084,7920,1)
(6996,4948,1)
(3915,7353,1)
(2149,2992,1)
(6682,7516,1)
(1105,8046,1)
(5208,3782,1)
(2116,7568,1)
(622,5937,1)
(6841,2607,1)
(4407,8566,1)
(8797,5412,1)
(6623,6939,1)
(4366,1011,1)
(4483,8436,1)
(1997,8004,1)
(2584,7358,1)
(5148,1071,1)
(6461,1293,1)
(8293,3908,1)
(389,1877,1)
(4427,7622,1)
(7888,4963,1)
(4664,2194,1)
(1266,5726,1)
(7561,2771,1)
(1972,5982,1)
(4745,7498,1)
(4204,4619,1)
(8927,5864,1)
(1747,8566,1)
(8145,8128,1)
(613,3203,1)
(4863,6601,1)
(7923,5442,1)
(6708,1416,1)
(8999,3775,1)
(4148,4543,1)
(6479,5624,1)
(8348,3632,1)
(3867,3148,1)
(3443,671,1)
(2632,4405,1)
(7984,4118,1)
(8472,1630,1)
(7248,4771,1)
(2270,3592,1)
(80,6248,1)
(5412,4272,1)
(614,5863,1)
(6039,7821,1)
(78,3876,1)
(1140,5115,1)
(6671,7130,1)
(5958,6768,1)
(4634,4111,1)
(4453,8758,1)
(2195,5126,1)
(7266,8878,1)
(2133,3959,1)
(5578,2798,1)
(9100,3683,1)
(5056,6386,1)
(9129,6511,1)
(6667,6130,1)
(3467,3047,1)
(968,7421,1)
(3901,6780,1)
(8825,3149,1)
(8573,7649,1)
(1887,828,1)
(5879,2413,1)
(1366,143,1)
(7484,1151,1)
(4357,3848,1)
(9118,8912,1)
(1387,6533,1)
(7379,780,1)
(1657,319,1)
(878,8571,1)
(8875,3235,1)
(3043,8703,1)
(801,5502,1)
(7557,8566,1)
(1941,1630,1)
(736,4882,1)
(8706,6340,1)
(8628,8244,1)
(3600,42,1)
(3433,6093,1)
(8333,3486,1)
(9113,486,1)
(3952,2093,1)
(4732,1660,1)
(6928,1481,1)
(3870,1753,1)
(868,6388,1)
(3990,8566,1)
(8181,8566,1)
(3120,6738,1)
(8732,4587,1)
(4577,147,1)
(3875,5672,1)
(4116,6162,1)
(2457,952,1)
(2114,5061,1)
(264,8566,1)
(1673,8566,1)
(3869,723,1)
(358,4377,1)
(3922,735,1)
(1633,3939,1)
(2315,8049,1)
(220,1020,1)
(372,590,1)
(6915,3279,1)
(4857,8566,1)
(3391,4965,1)
(4327,1874,1)
(3984,9133,1)
(4479,1750,1)
(5132,6910,1)
(6049,8457,1)
(1747,3966,1)
(8204,5659,1)
(4648,5061,1)
(2180,2978,1)
(9056,1806,1)
(5829,6339,1)
(790,3441,1)
(7284,1693,1)
(1398,4003,1)
(1958,734,1)
(5754,1869,1)
(3643,4218,1)
(7278,5061,1)
(6267,9004,1)
(8211,5734,1)
(5943,1598,1)
(5431,4118,1)
(8304,2352,1)
(4671,4346,1)
(3972,1489,1)
(7058,8566,1)
(8668,5564,1)
(7129,8202,1)
(2308,3078,1)
(4076,2784,1)
(5148,3592,1)
(3381,1112,1)
(1999,2496,1)
(3458,5440,1)
(228,8916,1)
(5162,4750,1)
(4526,8867,1)
(8204,5147,1)
(5140,7961,1)
(2549,9054,1)
(6440,655,1)
(755,6369,1)
(4743,8566,1)
(8768,3975,1)
(4484,3496,1)
(5701,258,1)
(1169,4309,1)
(3075,5951,1)
(4491,5905,1)
(6575,1691,1)
(164,8566,1)
(7489,1954,1)
(2682,8824,1)
(1956,7119,1)
(5778,192,1)
(633,5061,1)
(349,2761,1)
(3955,5744,1)
(8266,137,1)
(3670,8566,1)
(8905,2900,1)
(2579,2986,1)
(5214,7247,1)
(8204,1444,1)
(3905,2204,1)
(6641,7314,1)
(3125,5575,1)
(8204,7701,1)
(2312,9144,1)
(1750,8020,1)
(4825,2110,1)
(7136,2242,1)
(2842,5583,1)
(7741,8230,1)
(3427,5725,1)
(4397,1810,1)
(8573,8745,1)
(8909,5165,1)
(3755,4678,1)
(6106,5061,1)
(8855,7523,1)
(5270,4105,1)
(2122,3053,1)
(2584,6382,1)
(299,1228,1)
(1815,6675,1)
(2048,3351,1)
(6161,1880,1)
(7150,5061,1)
(8969,1296,1)
(6922,3738,1)
(4237,8566,1)
(4510,5570,1)
(4774,5849,1)
(831,5791,1)
(2728,6168,1)
(1341,3213,1)
(6246,1604,1)
(5747,5937,1)
(4013,7037,1)
(4400,8962,1)
(8452,45,1)
(5105,1200,1)
(9104,6811,1)
(5741,7115,1)
(5509,5638,1)
(309,100,1)
(3899,5141,1)
(7536,6283,1)
(2429,827,1)
(205,8566,1)
(752,8566,1)
(7206,8534,1)
(5766,618,1)
(9104,1181,1)
(7598,6130,1)
(3321,3106,1)
(5756,5452,1)
(4562,7557,1)
(6600,3520,1)
(7366,6557,1)
(6694,6015,1)
(1889,9106,1)
(1313,1918,1)
(872,5934,1)
(972,2888,1)
(8713,886,1)
(7484,2088,1)
(5021,1331,1)
(1195,3478,1)
(9056,8566,1)
(7837,258,1)
(2463,1965,1)
(1645,5506,1)
(3325,1394,1)
(5853,5349,1)
(6830,9089,1)
(2227,6428,1)
(4836,8566,1)
(5473,2696,1)
(1176,8654,1)
(7930,2470,1)
(6134,2912,1)
(1040,1161,1)
(7934,3041,1)
(123,4490,1)
(1007,5714,1)
(6059,7593,1)
(5886,6419,1)
(5776,7294,1)
(6957,2484,1)
(1736,4451,1)
(7926,8582,1)
(5872,1847,1)
(8870,5664,1)
(5342,3581,1)
(2447,5475,1)
(1,546,1)
(732,4406,1)
(3738,3753,1)
(8656,8860,1)
(5164,5426,1)
(1284,1288,1)
(3532,8563,1)
(3585,447,1)
(6134,6768,1)
(6229,3005,1)
(9038,4193,1)
(5869,5571,1)
(1370,5061,1)
(4714,5061,1)
(4785,8566,1)
(5312,3414,1)
(6670,3148,1)
(7275,954,1)
(2798,4554,1)
(267,3615,1)
(8087,4913,1)
(5905,1446,1)
(2692,5061,1)
(2164,4347,1)
(3902,8338,1)
(5481,4943,1)
(1388,8566,1)
(7660,5741,1)
(7327,2469,1)
(7645,541,1)
(5791,3510,1)
(8423,417,1)
(7015,3349,1)
(676,4393,1)
(8687,8368,1)
(8431,2210,1)
(1537,1683,1)
(6704,39,1)
(5808,2499,1)
(2220,8566,1)
(7153,6067,1)
(8693,3511,1)
(8144,5440,1)
(2334,3543,1)
(1134,8916,1)
(5857,8812,1)
(4006,3145,1)
(2358,376,1)
(7121,3919,1)
(519,5314,1)
(7406,3580,1)
(5485,2500,1)
(4477,3473,1)
(1755,7547,1)
(47,1201,1)
(4733,5337,1)
(2225,3647,1)
(4959,5061,1)
(8267,4042,1)
(4329,2715,1)
(3730,6954,1)
(6728,4960,1)
(8413,8537,1)
(4140,8730,1)
(8841,4733,1)
(7674,7021,1)
(9134,5061,1)
(6635,6250,1)
(3985,8607,1)
(3905,5061,1)
(989,933,1)
(8986,2236,1)
(8188,5004,1)
(3917,1202,1)
(3867,1876,1)
(7868,5937,1)
(2361,1686,1)
(6549,5636,1)
(3249,5061,1)
(5325,7960,1)
(6847,5317,1)
(7895,7002,1)
(343,3342,1)
(4455,2467,1)
(5392,3376,1)
(116,6937,1)
(1272,7151,1)
(2846,7449,1)
(5648,5350,1)
(1990,5298,1)
(5922,7280,1)
(5525,2688,1)
(3160,378,1)
(5772,7196,1)
(1019,8251,1)
(5516,806,1)
(3446,1169,1)
(4765,2546,1)
(5005,5616,1)
(7721,3231,1)
(6803,7176,1)
(976,8367,1)
(1748,8796,1)
(1315,7169,1)
(5984,2858,1)
(2310,7927,1)
(448,8566,1)
(2529,4311,1)
(14,2688,1)
(5284,5545,1)
(6240,3879,1)
(7293,3608,1)
(1171,6279,1)
(1542,5681,1)
(7644,4125,1)
(1285,2202,1)
(6623,1039,1)
(1824,7472,1)
(1740,1061,1)
(8984,7067,1)
(1119,4067,1)
(8297,2980,1)
(8618,8597,1)
(5327,6259,1)
(2272,2812,1)
(1735,435,1)
(8929,7815,1)
(4091,7311,1)
(8861,2106,1)
(959,8244,1)
(8403,8566,1)
(1469,1028,1)
(6778,5652,1)
(7429,5061,1)
(3573,3214,1)
(2082,3148,1)
(62,1131,1)
(9104,8980,1)
(7351,8855,1)
(8082,3552,1)
(901,4066,1)
(2178,3044,1)
(3338,6048,1)
(2738,5061,1)
(6509,2276,1)
(1246,2356,1)
(5047,3371,1)
(6085,2902,1)
(1952,4174,1)
(4669,1411,1)
(264,5548,1)
(2500,938,1)
(0,2179,1)
(3641,8492,1)
(348,7716,1)
(7025,8566,1)
(2284,5686,1)
(3904,7303,1)
(7555,54,1)
(1447,4266,1)
(8121,8371,1)
(4903,3210,1)
(8867,293,1)
(8115,2397,1)
(8106,5682,1)
(4996,406,1)
(585,4984,1)
(1735,2165,1)
(1234,4696,1)
(1599,7248,1)
(2206,8378,1)
(4927,76,1)
(6727,6681,1)
(838,1529,1)
(3110,1009,1)
(6435,4057,1)
(1721,4107,1)
(2269,3658,1)
(144,2301,1)
(8822,4924,1)
(8204,2706,1)
(1120,1931,1)
(8098,8382,1)
(8487,6298,1)
(1639,1164,1)
(5621,8566,1)
(6739,5937,1)
(8275,4533,1)
(7437,331,1)
(7618,5473,1)
(8519,7912,1)
(3015,8593,1)
(3817,6285,1)
(6623,2834,1)
(357,2158,1)
(3457,8777,1)
(3955,5894,1)
(5843,2766,1)
(6008,8566,1)
(690,8566,1)
(3288,7518,1)
(5052,7228,1)
(2139,1866,1)
(7116,5061,1)
(1416,1848,1)
(4081,8013,1)
(6564,7807,1)
(8462,2777,1)
(7688,4268,1)
(1696,8715,1)
(5834,127,1)
(1025,6571,1)
(5598,8521,1)
(1923,8566,1)
(3149,673,1)
(2591,4,1)
(6510,8566,1)
(7881,7335,1)
(8217,6587,1)
(8628,8365,1)
(5744,2165,1)
(1610,2278,1)
(2643,7380,1)
(7041,2048,1)
(3645,2553,1)
(3286,824,1)
(8190,5989,1)
(6227,4721,1)
(6591,1096,1)
(974,4914,1)
(2390,7725,1)
(3516,1690,1)
(274,6177,1)
(4124,8564,1)
(7792,8244,1)
(3575,532,1)
(635,5061,1)
(8670,3078,1)
(1229,5666,1)
(1906,2080,1)
(4970,8690,1)
(7076,4663,1)
(7388,2988,1)
(1581,3078,1)
(6935,5294,1)
(7036,4553,1)
(7525,5938,1)
(5455,4835,1)
(4561,339,1)
(4135,4905,1)
(5193,6531,1)
(1363,3694,1)
(2115,1859,1)
(5370,1941,1)
(8519,5937,1)
(6159,1249,1)
(5897,1588,1)
(2307,5061,1)
(3894,7853,1)
(3550,4892,1)
(1459,2304,1)
(5092,3794,1)
(2728,8566,1)
(8825,8566,1)
(2917,1801,1)
(7458,3709,1)
(4149,4055,1)
(8881,1114,1)
(1587,3148,1)
(7849,952,1)
(843,7820,1)
(6488,4891,1)
(8912,2217,1)
(8444,7655,1)
(8505,1538,1)
(3648,1835,1)
(6334,1497,1)
(4411,1071,1)
(2601,8566,1)
(6811,7245,1)
(3136,5873,1)
(3936,5061,1)
(5254,2714,1)
(3584,6075,1)
(7890,6125,1)
(4966,7213,1)
(1480,4441,1)
(3850,6859,1)
(8585,5224,1)
(2770,8566,1)
(7995,6691,1)
(7849,4400,1)
(3416,6344,1)
(8018,7070,1)
(2139,7358,1)
(5433,2577,1)
(501,2832,1)
(830,5061,1)
(2645,8980,1)
(2609,3715,1)
(2478,3316,1)
(7094,6188,1)
(7779,4303,1)
(7592,8566,1)
(3280,5793,1)
(4728,6886,1)
(6658,4993,1)
(4189,5275,1)
(5900,2213,1)
(8239,244,1)
(8497,1381,1)
(4950,8566,1)
(3046,4518,1)
(2841,7723,1)
(8632,5830,1)
(5937,3950,1)
(3474,8197,1)
(2550,4923,1)
(6183,8736,1)
(3048,1951,1)
(8409,5896,1)
(8827,1560,1)
(4984,6895,1)
(2166,4306,1)
(9104,7733,1)
(1051,6255,1)
(3043,2165,1)
(8308,8097,1)
(5048,3231,1)
(3955,8706,1)
(3388,2033,1)
(5296,7836,1)
(5026,6613,1)
(2237,6900,1)
(4281,7106,1)
(6811,33,1)
(4619,2590,1)
(5666,7757,1)
(3390,2103,1)
(6618,5823,1)
(2557,2452,1)
(9104,356,1)
(1520,5079,1)
(868,5325,1)
(52,1777,1)
(1556,8882,1)
(3460,291,1)
(2645,6127,1)
(3516,5953,1)
(1067,4144,1)
(3493,2600,1)
(3074,2434,1)
(4153,7387,1)
(4647,8263,1)
(5218,1362,1)
(1915,789,1)
(2780,7086,1)
(6218,8566,1)
(6518,8426,1)
(7922,6071,1)
(6514,359,1)
(4418,8669,1)
(4606,5061,1)
(1651,7728,1)
(8204,8448,1)
(7644,2496,1)
(192,6060,1)
(8268,5670,1)
(5065,7962,1)
(8085,655,1)
(613,7604,1)
(5237,5235,1)
(7793,8566,1)
(3698,8325,1)
(3131,5116,1)
(1761,3584,1)
(4211,7280,1)
(1524,5061,1)
(1034,5235,1)
(5956,6680,1)
(643,3588,1)
(4546,1876,1)
(9139,3498,1)
(2127,662,1)
(5003,8347,1)
(3675,3917,1)
(417,6688,1)
(6972,3618,1)
(788,877,1)
(7723,3231,1)
(8655,7647,1)
(7081,5563,1)
(8910,1137,1)
(5536,8566,1)
(1904,384,1)
(3477,4635,1)
(6852,8206,1)
(5148,8966,1)
(7622,6336,1)
(2072,262,1)
(6651,127,1)
(4633,5159,1)
(7229,7249,1)
(6160,1530,1)
(5219,3838,1)
(3535,5995,1)
(3955,6456,1)
(277,3376,1)
(6799,8566,1)
(3213,2392,1)
(1478,1650,1)
(6674,3517,1)
(7669,5515,1)
(5432,8193,1)
(1472,1762,1)
(7392,6377,1)
(961,1305,1)
(3387,8701,1)
(8448,5403,1)
(8204,4317,1)
(1785,3236,1)
(3625,62,1)
(3990,5061,1)
(5623,3308,1)
(3004,2754,1)
(7121,4761,1)
(2042,7134,1)
(2658,4057,1)
(1009,7771,1)
(216,2321,1)
(3105,8566,1)
(6754,3547,1)
(8514,7281,1)
(5229,8859,1)
(7205,605,1)
(2971,6556,1)
(9131,765,1)
(75,6619,1)
(6883,203,1)
(700,8422,1)
(4774,5061,1)
(4673,6611,1)
(5323,8566,1)
(4618,5061,1)
(7223,4327,1)
(6265,2815,1)
(3388,8326,1)
(877,7057,1)
(7983,3413,1)
(8956,559,1)
(5116,3212,1)
(6983,4057,1)
(8831,3408,1)
(7834,6897,1)
(5317,3357,1)
(6140,4684,1)
(9082,4655,1)
(911,7744,1)
(8748,8997,1)
(5661,5061,1)
(6520,8566,1)
(566,5216,1)
(5384,8566,1)
(5121,3426,1)
(671,258,1)
(6732,6793,1)
(8020,2755,1)
(5227,6181,1)
(871,1420,1)
(5108,1396,1)
(4233,7372,1)
(7072,7036,1)
(8648,4133,1)
(822,4332,1)
(9089,4929,1)
(8199,1614,1)
(1674,5701,1)
(619,5061,1)
(2645,5574,1)
(6252,8566,1)
(6663,6713,1)
(1154,4385,1)
(4695,3148,1)
(5464,3528,1)
(8234,622,1)
(3980,5581,1)
(6027,5654,1)
(2411,3429,1)
(7657,7616,1)
(4888,8283,1)
(699,7666,1)
(2640,4053,1)
(2094,8698,1)
(4553,6650,1)
(9011,1526,1)
(3127,3157,1)
(8695,6288,1)
(4572,5937,1)
(5663,1658,1)
(4372,8566,1)
(716,3503,1)
(669,5413,1)
(4994,7643,1)
(876,539,1)
(41,397,1)
(4805,7283,1)
(3061,145,1)
(6941,291,1)
(7644,2485,1)
(6796,6567,1)
(6646,9075,1)
(2519,8089,1)
(7606,7609,1)
(80,4067,1)
(2025,8566,1)
(5189,2341,1)
(1913,3672,1)
(8692,8406,1)
(4017,6697,1)
(2516,5172,1)
(8561,6011,1)
(7506,2235,1)
(3107,3460,1)
(6253,1002,1)
(8223,8526,1)
(8706,7358,1)
(5337,5954,1)
(8269,6164,1)
(7668,5009,1)
(256,4400,1)
(3584,661,1)
(960,5061,1)
(788,767,1)
(572,4626,1)
(3796,7471,1)
(4695,1876,1)
(9104,5951,1)
(4729,4611,1)
(147,5825,1)
(1603,7702,1)
(7507,5061,1)
(1464,6481,1)
(1971,2710,1)
(6939,5012,1)
(5706,5061,1)
(2663,5906,1)
(5940,5482,1)
(6897,7789,1)
(2473,3817,1)
(4583,1581,1)
(7354,7578,1)
(8782,8566,1)
(2537,6227,1)
(7196,543,1)
(7804,1853,1)
(5011,7690,1)
(188,7038,1)
(8729,3463,1)
(4855,7181,1)
(6064,5285,1)
(752,8029,1)
(2557,8022,1)
(8888,967,1)
(5549,9024,1)
(2684,3019,1)
(5463,218,1)
(7644,6340,1)
(5582,8428,1)
(3867,4826,1)
(6569,8689,1)
(3571,3205,1)
(5493,5071,1)
(3270,846,1)
(3865,6594,1)
(1546,2475,1)
(3791,8979,1)
(2293,6816,1)
(1509,5304,1)
(413,4941,1)
(5647,1512,1)
(8032,8566,1)
(5147,6735,1)
(5148,7998,1)
(2888,1410,1)
(2645,2870,1)
(8552,8746,1)
(2644,3169,1)
(1372,6824,1)
(5101,3922,1)
(7103,3844,1)
(6672,2185,1)
(3738,5061,1)
(6662,8566,1)
(5410,5061,1)
(1170,7808,1)
(3237,5198,1)
(1526,468,1)
(3610,4515,1)
(5528,2522,1)
(1068,3401,1)
(4857,5061,1)
(6273,3841,1)
(6700,968,1)
(469,8396,1)
(8640,4090,1)
(8783,5957,1)
(5257,2493,1)
(6754,4989,1)
(2219,2846,1)
(5687,6515,1)
(8147,8566,1)
(6130,5401,1)
(1045,5061,1)
(9104,1796,1)
(4305,1275,1)
(1702,4662,1)
(5570,5260,1)
(895,4418,1)
(7073,3461,1)
(841,2517,1)
(2344,3235,1)
(6795,3294,1)
(1469,99,1)
(6062,572,1)
(2908,2794,1)
(1082,5223,1)
(4803,5061,1)
(4870,658,1)
(5989,4645,1)
(1272,3134,1)
(3670,3324,1)
(8010,7667,1)
(3437,952,1)
(9104,6129,1)
(8025,8149,1)
(5624,8566,1)
(857,8566,1)
(7866,146,1)
(7998,3888,1)
(5241,3158,1)
(2563,2406,1)
(3589,6524,1)
(6080,7488,1)
(4503,1819,1)
(6988,4416,1)
(8813,7991,1)
(3830,5061,1)
(29,1568,1)
(6676,750,1)
(1914,8032,1)
(8376,4037,1)
(2139,587,1)
(8186,3293,1)
(5414,3787,1)
(2949,8566,1)
(783,958,1)
(720,1572,1)
(7010,772,1)
(3166,3707,1)
(5148,4798,1)
(5702,6774,1)
(6312,2627,1)
(2223,2581,1)
(8320,4180,1)
(3198,3298,1)
(8675,7967,1)
(769,4915,1)
(7948,423,1)
(7264,7190,1)
(8204,3193,1)
(8210,6961,1)
(4165,6241,1)
(1975,4313,1)
(1892,3704,1)
(4571,4887,1)
(5895,9003,1)
(4114,5061,1)
(4121,9015,1)
(6327,7898,1)
(2060,6252,1)
(8100,8755,1)
(8181,5061,1)
(1775,3861,1)
(1700,6068,1)
(3561,8566,1)
(1734,7166,1)
(4567,377,1)
(2298,2922,1)
(2435,8697,1)
(3907,3695,1)
(9104,4400,1)
(2769,5061,1)
(7534,4074,1)
(4182,5647,1)
(2616,643,1)
(3122,3862,1)
(3407,8566,1)
(3699,8583,1)
(1875,530,1)
(3211,3202,1)
(466,1965,1)
(4999,3871,1)
(5586,2939,1)
(92,5061,1)
(786,6888,1)
(5894,2485,1)
(7806,7168,1)
(7094,6580,1)
(5352,1148,1)
(3274,4331,1)
(1953,1209,1)
(6566,4304,1)
(2187,2987,1)
(3695,3073,1)
(1137,6355,1)
(868,6759,1)
(4524,8030,1)
(3513,913,1)
(824,5061,1)
(2645,4798,1)
(2457,4400,1)
(8450,8566,1)
(2301,3945,1)
(7734,5061,1)
(8154,1338,1)
(1099,4325,1)
(1317,8566,1)
(4455,8399,1)
(6154,7112,1)
(3165,65,1)
(516,6956,1)
(945,8953,1)
(7591,1366,1)
(8507,5070,1)
(4788,5160,1)
(7430,1234,1)
(7283,5754,1)
(3177,7619,1)
(2385,5441,1)
(7457,6966,1)
(2484,5446,1)
(8244,6110,1)
(2268,2693,1)
(2729,2585,1)
(7644,1866,1)
(3514,3973,1)
(1799,5055,1)
(964,7147,1)
(9042,1443,1)
(5527,8566,1)
(95,1529,1)
(5542,5522,1)
(3751,1314,1)
(9022,8618,1)
(3250,3806,1)
(3313,2200,1)
(4903,1549,1)
(7467,3564,1)
(8940,616,1)
(4446,5787,1)
(1280,2122,1)
(5885,4471,1)
(7678,6971,1)
(457,9058,1)
(2042,127,1)
(8155,2157,1)
(4587,4886,1)
(9136,6382,1)
(4550,3187,1)
(5231,1357,1)
(7197,2825,1)
(9104,2380,1)
(8103,190,1)
(4742,1767,1)
(666,6108,1)
(794,4248,1)
(2185,3314,1)
(3475,8566,1)
(1225,5994,1)
(5669,2490,1)
(4282,8473,1)
(5724,7550,1)
(3955,9136,1)
(2685,6431,1)
(4551,1073,1)
(6439,803,1)
(5141,127,1)
(6934,5500,1)
(916,664,1)
(4910,8742,1)
(3284,8281,1)
(7873,4371,1)
(2005,7931,1)
(5177,7945,1)
(5769,4667,1)
(8699,8284,1)
(7476,8181,1)
(6545,2839,1)
(7643,4738,1)
(4237,2533,1)
(719,8566,1)
(3453,7123,1)
(4199,6496,1)
(286,6953,1)
(6616,6891,1)
(1894,8566,1)
(1651,2709,1)
(305,5718,1)
(7968,6331,1)
(8326,2059,1)
(4392,33,1)
(5700,4875,1)
(3936,4007,1)
(7013,6347,1)
(7846,1419,1)
(7598,6667,1)
(1012,671,1)
(4647,6278,1)
(8841,4393,1)
(1253,4481,1)
(1722,2908,1)
(8255,5061,1)
(2828,7074,1)
(3941,4946,1)
(1210,2817,1)
(8007,7062,1)
(7324,2729,1)
(2863,8566,1)
(3498,3882,1)
(6826,6930,1)
(5353,5914,1)
(3754,4189,1)
(3842,8415,1)
(3673,1547,1)
(3042,5842,1)
(3985,5722,1)
(3556,5562,1)
(9106,6272,1)
(6228,6677,1)
(807,8566,1)
(4604,5061,1)
(9054,5061,1)
(4955,4175,1)
(7041,276,1)
(7864,7522,1)
(7715,5042,1)
(4610,8566,1)
(775,1992,1)
(1870,6463,1)
(4145,7711,1)
(4908,8852,1)
(1454,7905,1)
(3992,7043,1)
(8936,6472,1)
(4188,503,1)
(3724,8566,1)
(8939,7448,1)
(3840,1924,1)
(2046,5749,1)
(6744,3969,1)
(2520,6978,1)
(6170,2005,1)
(2000,5061,1)
(3979,8007,1)
(5770,8226,1)
(7949,5061,1)
(3094,3483,1)
(7829,1884,1)
(6764,8372,1)
(6991,513,1)
(4016,8164,1)
(2214,1283,1)
(3683,602,1)
(2378,3383,1)
(6630,66,1)
(8852,4487,1)
(6666,5651,1)
(5222,3578,1)
(3043,4642,1)
(5894,4400,1)
(1566,5061,1)
(1251,2694,1)
(7497,5689,1)
(3057,2380,1)
(528,861,1)
(5247,1332,1)
(1269,581,1)
(5192,8841,1)
(6753,6340,1)
(268,6932,1)
(8582,65,1)
(3674,4473,1)
(3708,236,1)
(5386,3102,1)
(3124,4304,1)
(1280,2008,1)
(927,1955,1)
(3549,3171,1)
(6004,9134,1)
(9104,7878,1)
(8754,8493,1)
(7059,4381,1)
(3868,1262,1)
(3253,8802,1)
(6303,3376,1)
(6686,8425,1)
(6592,8303,1)
(2511,2055,1)
(5828,6260,1)
(3130,4519,1)
(238,5061,1)
(1650,2342,1)
(7128,8566,1)
(6135,1314,1)
(2555,6751,1)
(7620,3570,1)
(3527,6778,1)
(3420,8062,1)
(4740,3202,1)
(6331,6768,1)
(1671,2109,1)
(2723,6292,1)
(7578,5890,1)
(5407,7938,1)
(3449,1480,1)
(5854,7966,1)
(6142,1122,1)
(5630,47,1)
(8426,7195,1)
(1774,8566,1)
(463,8552,1)
(4298,3148,1)
(887,6509,1)
(3101,8974,1)
(6051,8566,1)
(205,5061,1)
(4176,1920,1)
(8414,3604,1)
(1717,165,1)
(8985,4514,1)
(4977,2707,1)
(3413,160,1)
(2057,7555,1)
(9136,6340,1)
(3706,38,1)
(8921,6660,1)
(4066,2430,1)
(2652,5926,1)
(5593,4645,1)
(4350,8566,1)
(4981,5061,1)
(6582,127,1)
(3752,6401,1)
(1204,5937,1)
(8580,9149,1)
(6982,8779,1)
(5009,4306,1)
(3076,5310,1)
(1851,8566,1)
(9119,5432,1)
(3155,6877,1)
(7017,3376,1)
(643,3610,1)
(8636,6254,1)
(3236,599,1)
(7611,8566,1)
(7982,1372,1)
(3481,1014,1)
(3650,2246,1)
(8074,2871,1)
(7722,3455,1)
(1912,1822,1)
(4337,4969,1)
(3827,1509,1)
(121,2492,1)
(7003,8649,1)
(4439,743,1)
(7665,4046,1)
(3038,7750,1)
(1028,8473,1)
(5150,588,1)
(7421,3488,1)
(570,5129,1)
(5862,8019,1)
(7128,5061,1)
(8348,2267,1)
(3150,1128,1)
(3875,390,1)
(7602,1680,1)
(1418,352,1)
(8790,1808,1)
(7752,8970,1)
(3844,4883,1)
(7099,1058,1)
(4506,9037,1)
(5328,5971,1)
(5758,4525,1)
(7,5061,1)
(787,1443,1)
(6622,2805,1)
(2231,6506,1)
(9136,6127,1)
(8523,47,1)
(8658,713,1)
(5148,5599,1)
(3055,3024,1)
(2611,5494,1)
(312,5061,1)
(1184,8566,1)
(3921,8566,1)
(7847,1558,1)
(5459,5974,1)
(8094,5061,1)
(1789,374,1)
(2357,7267,1)
(3217,9034,1)
(2507,5166,1)
(5789,8989,1)
(2353,6534,1)
(5720,1422,1)
(8117,8566,1)
(9104,4864,1)
(4161,1700,1)
(8229,4210,1)
(8162,8566,1)
(7976,5061,1)
(3758,8566,1)
(7738,5268,1)
(3043,1866,1)
(1641,161,1)
(7119,814,1)
(5652,6004,1)
(5583,8948,1)
(3629,2785,1)
(3032,4998,1)
(5212,2586,1)
(5608,8566,1)
(7065,7636,1)
(1656,5061,1)
(319,3376,1)
(401,1080,1)
(7213,1791,1)
(2663,3231,1)
(1878,4143,1)
(7435,1878,1)
(7709,9066,1)
(448,5061,1)
(5428,1665,1)
(7644,3592,1)
(4517,2152,1)
(2735,5061,1)
(7934,5200,1)
(979,5061,1)
(7747,4639,1)
(8530,3397,1)
(351,8566,1)
(7482,3996,1)
(4250,5061,1)
(6280,4849,1)
(2559,2226,1)
(7863,5629,1)
(3955,3437,1)
(1787,6417,1)
(4309,966,1)
(7480,7916,1)
(301,8895,1)
(5763,3833,1)
(571,3615,1)
(5060,6779,1)
(6848,260,1)
(704,4974,1)
(6385,1606,1)
(5073,868,1)
(3119,3999,1)
(5166,6544,1)
(6998,1734,1)
(2097,8566,1)
(7167,6271,1)
(4209,3705,1)
(2131,7896,1)
(7868,7687,1)
(91,3015,1)
(3461,4213,1)
(5985,7561,1)
(222,2728,1)
(3231,2165,1)
(918,6838,1)
(645,4438,1)
(4687,8238,1)
(7836,5061,1)
(2645,7962,1)
(6186,2944,1)
(4210,369,1)
(8310,7452,1)
(662,4260,1)
(3083,3760,1)
(7043,333,1)
(6529,7709,1)
(869,5999,1)
(6927,3998,1)
(8071,4426,1)
(4750,8473,1)
(5611,5777,1)
(3537,4252,1)
(1228,6426,1)
(6785,2991,1)
(8651,6634,1)
(1335,522,1)
(8938,4650,1)
(2948,6547,1)
(349,8932,1)
(8701,5564,1)
(6561,8566,1)
(7723,8244,1)
(3495,3166,1)
(561,2968,1)
(7977,1495,1)
(1658,927,1)
(7110,8012,1)
(8945,2058,1)
(1365,4103,1)
(409,5469,1)
(3993,2752,1)
(2817,5139,1)
(4729,5061,1)
(6428,5541,1)
(2524,3982,1)
(7448,4378,1)
(2426,3128,1)
(3599,2972,1)
(8859,5061,1)
(5137,2472,1)
(2645,952,1)
(473,2031,1)
(2814,8566,1)
(853,2456,1)
(2354,5075,1)
(6809,3865,1)
(6006,6785,1)
(5986,6701,1)
(6788,8061,1)
(5015,8918,1)
(6113,8566,1)
(1631,5013,1)
(3605,4594,1)
(6802,2037,1)
(4217,6468,1)
(3000,3622,1)
(2627,4156,1)
(3496,7141,1)
(6957,127,1)
(6548,8133,1)
(6482,2512,1)
(7141,5937,1)
(5761,7145,1)
(5526,5542,1)
(5297,7255,1)
(6892,8291,1)
(6037,1077,1)
(1851,5061,1)
(8680,6777,1)
(6200,3081,1)
(8402,1135,1)
(948,2262,1)
(3414,8566,1)
(2721,1542,1)
(8944,1952,1)
(6287,1563,1)
(7278,8566,1)
(2114,8637,1)
(2899,8315,1)
(7644,952,1)
(4690,2344,1)
(6960,1210,1)
(1998,4735,1)
(8972,8566,1)
(5148,6382,1)
(1184,5000,1)
(1592,4136,1)
(4874,7845,1)
(4450,2720,1)
(8438,2068,1)
(3124,2870,1)
(6101,2116,1)
(1613,4642,1)
(8057,4399,1)
(3677,1929,1)
(6904,6852,1)
(1765,5183,1)
(6452,8558,1)
(302,7955,1)
(7061,4947,1)
(7199,8095,1)
(3804,6033,1)
(3352,2233,1)
(80,1119,1)
(2262,3060,1)
(4402,91,1)
(7652,3118,1)
(7257,4821,1)
(7810,5374,1)
(3205,8183,1)
(631,1487,1)
(191,1136,1)
(7009,5427,1)
(1382,7618,1)
(2099,4295,1)
(221,7877,1)
(3205,5061,1)
(4125,4430,1)
(8569,2582,1)
(6994,1698,1)
(6817,1879,1)
(8778,65,1)
(9017,8949,1)
(575,1170,1)
(1924,3231,1)
(2379,6450,1)
(315,7324,1)
(925,2523,1)
(2316,5885,1)
(4959,5937,1)
(4393,2028,1)
(1929,1431,1)
(3461,8220,1)
(454,4347,1)
(1963,3042,1)
(4378,1159,1)
(8275,65,1)
(4238,8601,1)
(1201,5061,1)
(4874,8935,1)
(8884,7620,1)
(4462,2135,1)
(7450,1606,1)
(1409,5204,1)
(6987,2790,1)
(3719,7122,1)
(3837,4362,1)
(7143,2726,1)
(8096,702,1)
(5415,6559,1)
(6300,2885,1)
(4152,8524,1)
(8563,7734,1)
(3124,7358,1)
(69,1804,1)
(596,5932,1)
(8352,3101,1)
(2061,2066,1)
(7427,1793,1)
(4614,5583,1)
(1324,1782,1)
(5935,8573,1)
(9009,5061,1)
(3722,2934,1)
(4786,4993,1)
(3715,5010,1)
(371,6638,1)
(4808,8137,1)
(521,8540,1)
(6534,5644,1)
(4530,7468,1)
(7726,4818,1)
(1613,7358,1)
(5506,8909,1)
(3825,6716,1)
(7573,6014,1)
(6724,1375,1)
(5670,2778,1)
(4797,2339,1)
(6069,4071,1)
(4323,9012,1)
(1981,8566,1)
(6895,1865,1)
(3738,5937,1)
(5105,4642,1)
(5381,8566,1)
(4766,6447,1)
(6866,7152,1)
(8111,3692,1)
(419,8620,1)
(4840,3701,1)
(6325,4562,1)
(2797,7713,1)
(3945,5049,1)
(1496,7462,1)
(8688,819,1)
(7884,5061,1)
(2304,6071,1)
(2945,3846,1)
(2530,1132,1)
(5937,7613,1)
(6580,1769,1)
(3934,8566,1)
(1082,3676,1)
(4787,5572,1)
(8913,8293,1)
(531,258,1)
(4817,6665,1)
(4979,4506,1)
(7191,1171,1)
(356,3228,1)
(1705,9038,1)
(4916,274,1)
(6984,8521,1)
(4808,3640,1)
(7523,2777,1)
(6900,127,1)
(5950,2514,1)
(1938,4458,1)
(4989,1678,1)
(3258,2882,1)
(2147,7274,1)
(6355,8068,1)
(6761,630,1)
(5042,4472,1)
(6689,2084,1)
(5004,65,1)
(3743,3951,1)
(8766,464,1)
(2932,924,1)
(982,4233,1)
(6340,7003,1)
(5309,3304,1)
(7619,6549,1)
(3404,5061,1)
(5861,5214,1)
(705,6398,1)
(2884,8566,1)
(1261,5844,1)
(6775,6265,1)
(7491,1357,1)
(1066,1715,1)
(9104,4558,1)
(1656,8566,1)
(737,3469,1)
(915,4584,1)
(6014,4704,1)
(6578,4687,1)
(6712,4446,1)
(8534,1990,1)
(1059,4115,1)
(7516,478,1)
(6583,6393,1)
(7405,7336,1)
(7818,258,1)
(2761,6768,1)
(3792,2805,1)
(2858,638,1)
(8621,2219,1)
(6093,7599,1)
(7786,4387,1)
(8706,820,1)
(3563,419,1)
(2926,3728,1)
(4572,8566,1)
(8315,3590,1)
(3906,6248,1)
(6801,4646,1)
(3646,1370,1)
(1601,5080,1)
(1245,1841,1)
(4654,7368,1)
(2188,3148,1)
(2800,7263,1)
(4623,488,1)
(5626,5554,1)
(4911,8947,1)
(6218,2628,1)
(5538,98,1)
(3574,3009,1)
(4804,8775,1)
(8241,1670,1)
(1420,8401,1)
(4010,5061,1)
(1974,6203,1)
(9080,3798,1)
(6684,3859,1)
(7018,8613,1)
(5762,6843,1)
(173,7126,1)
(1083,8636,1)
(8371,6931,1)
(6283,7631,1)
(8444,1876,1)
(930,8161,1)
(7089,6415,1)
(2101,3524,1)
(546,3993,1)
(8117,5033,1)
(1431,8546,1)
(620,8099,1)
(6308,633,1)
(4777,132,1)
(3426,48,1)
(985,385,1)
(7929,6696,1)
(5624,3663,1)
(7425,8566,1)
(8328,4629,1)
(8346,4499,1)
(7453,8161,1)
(5079,8475,1)
(2414,5133,1)
(6892,6580,1)
(5105,952,1)
(5172,3448,1)
(7577,3986,1)
(7151,7648,1)
(7792,3231,1)
(5653,3814,1)
(7056,8566,1)
(4511,970,1)
(3848,3219,1)
(4781,5796,1)
(8162,4347,1)
(3598,768,1)
(4288,5683,1)
(8886,493,1)
(1459,4144,1)
(7980,6968,1)
(8849,6768,1)
(6670,1739,1)
(5408,836,1)
(7407,157,1)
(1619,5577,1)
(8184,2439,1)
(8769,3528,1)
(1977,542,1)
(3768,6159,1)
(1304,232,1)
(5373,1345,1)
(2633,5061,1)
(2457,2511,1)
(4904,5100,1)
(6353,1120,1)
(568,4431,1)
(6619,7780,1)
(7306,5425,1)
(3913,1130,1)
(3124,2496,1)
(7119,5061,1)
(552,8566,1)
(7938,1856,1)
(4285,5061,1)
(8550,2893,1)
(8499,703,1)
(4062,4649,1)
(1044,1562,1)
(4445,643,1)
(5821,1387,1)
(3925,7899,1)
(8786,3979,1)
(8427,8566,1)
(3971,7888,1)
(4574,1993,1)
(3840,111,1)
(2031,655,1)
(7291,5061,1)
(3940,1259,1)
(1953,3874,1)
(5105,2870,1)
(5621,5937,1)
(3507,5178,1)
(6524,3825,1)
(5582,1567,1)
(1785,2271,1)
(5801,344,1)
(3287,1027,1)
(8904,2465,1)
(5263,258,1)
(940,5061,1)
(2224,5937,1)
(7101,7649,1)
(7936,6850,1)
(2208,49,1)
(1803,127,1)
(2564,8995,1)
(891,6781,1)
(8264,5061,1)
(150,5937,1)
(5439,5061,1)
(313,3341,1)
(1832,4532,1)
(2113,5675,1)
(2910,1643,1)
(7438,3579,1)
(1102,8196,1)
(1252,3376,1)
(8368,7595,1)
(7210,783,1)
(8392,4206,1)
(3239,6868,1)
(4288,3348,1)
(3623,1062,1)
(5403,4228,1)
(1114,7494,1)
(2544,366,1)
(7371,6032,1)
(5780,8687,1)
(83,1699,1)
(1408,371,1)
(3437,4304,1)
(8456,1966,1)
(9029,3549,1)
(2620,6013,1)
(2162,6859,1)
(2396,1851,1)
(6844,7491,1)
(8204,7987,1)
(3733,1274,1)
(8517,5868,1)
(1645,5061,1)
(1683,6187,1)
(434,6036,1)
(1546,6225,1)
(8679,1796,1)
(2720,351,1)
(1653,2372,1)
(5148,8485,1)
(4840,1744,1)
(3526,8400,1)
(7045,156,1)
(1676,5182,1)
(5246,5408,1)
(8676,8925,1)
(4663,7917,1)
(1744,4361,1)
(8856,7632,1)
(6474,8575,1)
(8662,3148,1)
(2336,3148,1)
(431,4065,1)
(1924,1092,1)
(3124,6382,1)
(5665,4872,1)
(7967,6228,1)
(4208,878,1)
(3613,8366,1)
(6996,3166,1)
(2949,6750,1)
(623,3376,1)
(9004,8447,1)
(7788,5347,1)
(6821,1574,1)
(8626,1536,1)
(7253,6209,1)
(7374,1844,1)
(7428,2236,1)
(3727,5619,1)
(8848,4981,1)
(2645,5017,1)
(6387,544,1)
(2645,6276,1)
(3312,5635,1)
(7965,4054,1)
(3065,8633,1)
(5087,1042,1)
(8817,7727,1)
(3497,5893,1)
(7803,864,1)
(5881,1850,1)
(5828,7250,1)
(4545,1250,1)
(1420,2812,1)
(2148,3925,1)
(8800,3490,1)
(2584,4864,1)
(4326,1167,1)
(4664,5061,1)
(1641,4600,1)
(6506,6117,1)
(4007,3699,1)
(633,5227,1)
(6799,5061,1)
(6281,5061,1)
(4464,7271,1)
(2043,2591,1)
(5699,6742,1)
(4623,8473,1)
(2666,6817,1)
(8243,3474,1)
(7843,3421,1)
(807,4150,1)
(6071,3404,1)
(6779,4804,1)
(3788,1046,1)
(1338,790,1)
(4169,5171,1)
(5279,6556,1)
(8340,9036,1)
(8367,5316,1)
(4697,30,1)
(3454,5061,1)
(4872,5061,1)
(6462,65,1)
(5148,1922,1)
(2843,367,1)
(3437,2165,1)
(1186,1959,1)
(6816,4131,1)
(6155,3976,1)
(3744,8566,1)
(5232,5902,1)
(2548,134,1)
(8672,3827,1)
(6337,5680,1)
(4344,2889,1)
(4345,7440,1)
(5115,5061,1)
(1565,8566,1)
(1945,9053,1)
(262,943,1)
(6062,8566,1)
(227,340,1)
(4308,2012,1)
(1028,2731,1)
(2990,65,1)
(2193,2896,1)
(3622,4065,1)
(6698,235,1)
(1237,5937,1)
(7350,4483,1)
(92,8566,1)
(4913,4202,1)
(2632,2747,1)
(4859,8566,1)
(6643,1975,1)
(4087,1600,1)
(1747,5061,1)
(8001,4229,1)
(1060,6210,1)
(3457,717,1)
(7185,8566,1)
(393,3953,1)
(5445,4329,1)
(5148,1870,1)
(6742,4968,1)
(5698,6768,1)
(6282,7858,1)
(3578,1876,1)
(4120,8331,1)
(7455,8566,1)
(8737,5061,1)
(1839,9117,1)
(2531,7165,1)
(4380,5547,1)
(1687,7276,1)
(5153,8566,1)
(8024,8359,1)
(8978,7974,1)
(8450,5061,1)
(4173,5061,1)
(5065,1866,1)
(4226,2461,1)
(66,3724,1)
(8123,9064,1)
(2139,7962,1)
(767,8127,1)
(5076,4827,1)
(3097,8566,1)
(1355,3376,1)
(1296,3444,1)
(8314,7042,1)
(554,9011,1)
(5105,4520,1)
(6995,8834,1)
(4050,8566,1)
(6513,2686,1)
(4834,7971,1)
(8885,2081,1)
(2854,8566,1)
(7576,6411,1)
(4864,7378,1)
(8204,8803,1)
(5048,8566,1)
(5981,3551,1)
(4470,8239,1)
(9046,5061,1)
(7466,8767,1)
(1941,1954,1)
(3399,8277,1)
(9045,1047,1)
(1615,5061,1)
(3822,4908,1)
(6191,8610,1)
(7249,1093,1)
(6314,215,1)
(5833,2653,1)
(235,6568,1)
(3484,5061,1)
(5971,1304,1)
(1077,5766,1)
(8644,7600,1)
(1066,4705,1)
(9104,3719,1)
(7680,3867,1)
(6656,8833,1)
(6318,118,1)
(3231,2485,1)
(4219,1056,1)
(7002,7564,1)
(3361,8566,1)
(7859,5880,1)
(5502,3039,1)
(6497,4742,1)
(709,148,1)
(6262,8509,1)
(9104,2887,1)
(8299,2907,1)
(1670,7968,1)
(4103,6583,1)
(7631,4068,1)
(4622,8598,1)
(3189,7923,1)
(6664,3465,1)
(7170,2722,1)
(6253,5061,1)
(3955,5987,1)
(5148,1866,1)
(7145,4846,1)
(1604,8754,1)
(8246,570,1)
(1760,1440,1)
(21,6012,1)
(1096,2666,1)
(2069,2830,1)
(8805,7396,1)
(3277,6768,1)
(6055,3650,1)
(4160,2449,1)
(3457,2090,1)
(8911,2138,1)
(1779,5293,1)
(8208,8566,1)
(3043,2496,1)
(8412,281,1)
(4645,2854,1)
(2495,4315,1)
(2457,6340,1)
(1014,7195,1)
(2308,4248,1)
(4874,1039,1)
(806,3202,1)
(8592,380,1)
(8674,5061,1)
(8387,3832,1)
(2883,8623,1)
(3080,8674,1)
(9087,816,1)
(2738,3635,1)
(3971,5058,1)
(1153,1998,1)
(7004,7300,1)
(1653,8566,1)
(1568,1063,1)
(794,3201,1)
(7049,3934,1)
(8402,3521,1)
(5868,5584,1)
(2375,4089,1)
(2124,818,1)
(4057,1469,1)
(7893,8777,1)
(3701,5061,1)
(2447,8858,1)
(3441,5061,1)
(3787,8566,1)
(311,8631,1)
(2012,2377,1)
(7215,741,1)
(4156,7133,1)
(460,5763,1)
(239,3432,1)
(3683,7721,1)
(8348,6740,1)
(434,8566,1)
(8167,3807,1)
(4771,968,1)
(371,1876,1)
(4651,7581,1)
(2787,5037,1)
(7241,2161,1)
(4831,9027,1)
(9104,4642,1)
(2320,951,1)
(1092,6017,1)
(9136,3647,1)
(5569,2393,1)
(884,3780,1)
(7430,8566,1)
(8047,4369,1)
(476,6414,1)
(6172,3694,1)
(8948,6837,1)
(1443,5153,1)
(3360,2033,1)
(479,3103,1)
(8479,2036,1)
(1449,8566,1)
(1566,5860,1)
(552,5061,1)
(5148,3600,1)
(2382,550,1)
(5462,7658,1)
(20,5061,1)
(6564,488,1)
(7974,2507,1)
(6188,2550,1)
(6694,5061,1)
(3235,6919,1)
(8894,1934,1)
(7418,5061,1)
(8854,1165,1)
(1959,5232,1)
(7502,2852,1)
(3911,7710,1)
(5125,4873,1)
(8579,1763,1)
(3956,4805,1)
(1080,5099,1)
(6286,2587,1)
(7612,5887,1)
(169,8566,1)
(5390,8258,1)
(3341,1971,1)
(8204,3818,1)
(7027,6662,1)
(6603,2038,1)
(8930,8097,1)
(5743,8566,1)
(1459,6759,1)
(9052,3727,1)
(6868,5799,1)
(7721,8566,1)
(6627,1662,1)
(1129,2526,1)
(5529,4413,1)
(2938,2875,1)
(1067,6759,1)
(1702,6855,1)
(8458,8472,1)
(994,5061,1)
(891,8566,1)
(3293,127,1)
(6012,7241,1)
(3353,6576,1)
(2914,6099,1)
(7623,5019,1)
(4500,1264,1)
(9136,2496,1)
(294,2469,1)
(748,6152,1)
(4486,8602,1)
(3478,3742,1)
(1906,258,1)
(7464,6416,1)
(6556,8498,1)
(3651,4931,1)
(9005,7751,1)
(5606,7357,1)
(1713,5668,1)
(5876,8321,1)
(4789,4777,1)
(4842,9146,1)
(541,4279,1)
(910,7812,1)
(765,3808,1)
(6061,9002,1)
(5807,1236,1)
(9091,1020,1)
(4040,5421,1)
(3744,5342,1)
(4170,3086,1)
(829,258,1)
(4253,4586,1)
(8713,5061,1)
(1613,7425,1)
(746,7441,1)
(8193,1636,1)
(2140,5158,1)
(7891,4420,1)
(1362,979,1)
(184,65,1)
(8549,5746,1)
(5048,3178,1)
(7726,8566,1)
(4705,258,1)
(8858,8090,1)
(470,432,1)
(3053,8566,1)
(6173,4427,1)
(3332,9123,1)
(845,3821,1)
(658,8579,1)
(7037,1984,1)
(7435,4143,1)
(881,1200,1)
(4677,5596,1)
(395,1180,1)
(4078,5604,1)
(7541,7005,1)
(8393,5977,1)
(3969,607,1)
(4201,7541,1)
(5642,258,1)
(1180,4936,1)
(2566,8786,1)
(2338,5313,1)
(15,1868,1)
(1238,6905,1)
(2674,2870,1)
(4381,4392,1)
(3482,2425,1)
(4435,5120,1)
(6136,1491,1)
(3163,1994,1)
(9149,6134,1)
(4694,4336,1)
(5962,7827,1)
(7699,1718,1)
(4268,7052,1)
(6892,4612,1)
(6959,6880,1)
(509,2640,1)
(6818,6512,1)
(8857,5061,1)
(3229,4616,1)
(7842,8402,1)
(3033,5061,1)
(2037,3274,1)
(1545,5390,1)
(2645,5404,1)
(2707,650,1)
(1916,4154,1)
(8255,3774,1)
(1225,5803,1)
(8437,8191,1)
(7522,5556,1)
(531,65,1)
(2479,4581,1)
(3308,3410,1)
(3079,3748,1)
(7341,4837,1)
(7116,7653,1)
(2360,368,1)
(6462,1088,1)
(7130,1128,1)
(4046,8346,1)
(5752,5416,1)
(8558,1390,1)
(3462,1033,1)
(4964,4734,1)
(8025,4508,1)
(5894,2165,1)
(792,5884,1)
(5930,8109,1)
(4285,8566,1)
(4616,2263,1)
(5682,1876,1)
(7331,6103,1)
(2854,2910,1)
(2662,840,1)
(1927,1981,1)
(4518,7380,1)
(3414,5061,1)
(1790,8077,1)
(4255,5448,1)
(2727,4743,1)
(1705,4193,1)
(5458,6768,1)
(605,8059,1)
(5366,7413,1)
(213,4358,1)
(7649,6157,1)
(1278,1876,1)
(8906,5931,1)
(5527,5061,1)
(2598,4551,1)
(4968,6021,1)
(1573,8843,1)
(3164,5061,1)
(4468,5381,1)
(4393,6580,1)
(2339,8566,1)
(8401,2272,1)
(7831,8474,1)
(8403,3209,1)
(1702,2451,1)
(1897,612,1)
(1876,1999,1)
(3043,952,1)
(5194,3202,1)
(8588,5870,1)
(8460,5619,1)
(2520,5061,1)
(2990,258,1)
(1893,8908,1)
(2735,2719,1)
(5710,3627,1)
(4334,6128,1)
(1523,4781,1)
(618,5061,1)
(6705,8168,1)
(4687,5061,1)
(4489,1158,1)
(3920,8600,1)
(2606,2955,1)
(3912,7495,1)
(2355,6233,1)
(6719,8566,1)
(3591,4637,1)
(1649,1306,1)
(8743,5061,1)
(2255,5326,1)
(953,3526,1)
(7145,8520,1)
(3158,4148,1)
(6110,8356,1)
(3911,1788,1)
(8485,8566,1)
(3955,523,1)
(276,993,1)
(5742,3250,1)
(4931,8538,1)
(9136,8703,1)
(7770,2467,1)
(4303,5235,1)
(8891,7027,1)
(8703,4321,1)
(7900,2023,1)
(772,5488,1)
(5830,7482,1)
(1811,5061,1)
(4499,6763,1)
(5011,2033,1)
(426,7756,1)
(5545,2535,1)
(2749,4195,1)
(1937,1285,1)
(6481,7625,1)
(5105,3647,1)
(5043,3891,1)
(8298,2827,1)
(2573,5061,1)
(256,4642,1)
(4555,3846,1)
(2158,8296,1)
(4307,1546,1)
(4231,7873,1)
(3096,2757,1)
(2663,8566,1)
(2615,9121,1)
(2088,1069,1)
(4303,1867,1)
(3776,6764,1)
(9008,6582,1)
(7234,2974,1)
(8455,5061,1)
(4203,2945,1)
(44,6260,1)
(7974,258,1)
(204,4874,1)
(6512,7341,1)
(4050,6865,1)
(7543,5452,1)
(650,4727,1)
(2124,3224,1)
(5338,6498,1)
(2165,3266,1)
(6225,3197,1)
(6727,8157,1)
(3593,1279,1)
(6115,2287,1)
(8723,7191,1)
(1110,8083,1)
(1931,5466,1)
(2556,5068,1)
(5691,7466,1)
(8727,8528,1)
(2022,4121,1)
(7557,5061,1)
(9104,7126,1)
(3385,8470,1)
(917,5912,1)
(6392,5396,1)
(183,1100,1)
(9136,2870,1)
(747,19,1)
(1068,8566,1)
(5483,1607,1)
(8959,2159,1)
(7504,3810,1)
(8500,1206,1)
(8066,1980,1)
(2651,5061,1)
(8989,5252,1)
(4921,5044,1)
(3451,5220,1)
(5934,4951,1)
(2975,8297,1)
(7522,1115,1)
(6566,952,1)
(3738,8566,1)
(8124,2228,1)
(5960,7265,1)
(5466,7527,1)
(1637,5431,1)
(6494,7412,1)
(2819,8824,1)
(5248,4665,1)
(8146,2463,1)
(3124,6127,1)
(7644,7962,1)
(4751,7309,1)
(681,5156,1)
(8659,492,1)
(5460,3786,1)
(1302,619,1)
(4078,6124,1)
(820,8502,1)
(1702,7724,1)
(732,5061,1)
(3273,6851,1)
(2645,3592,1)
(8176,7328,1)
(8079,5885,1)
(3926,5748,1)
(7429,7802,1)
(701,6924,1)
(843,1944,1)
(6433,1123,1)
(3564,804,1)
(6120,7058,1)
(2271,5682,1)
(6104,5959,1)
(6622,5395,1)
(4770,1492,1)
(6193,3569,1)
(517,170,1)
(5962,4982,1)
(6452,1954,1)
(4810,3733,1)
(6277,2531,1)
(8114,6106,1)
(3928,1310,1)
(3794,5165,1)
(512,41,1)
(5188,7414,1)
(7903,1076,1)
(2025,5249,1)
(87,5790,1)
(1056,8335,1)
(5302,3222,1)
(2765,1850,1)
(6780,1565,1)
(8918,2260,1)
(5541,4345,1)
(691,5061,1)
(7005,8566,1)
(4,436,1)
(3757,1511,1)
(3671,5930,1)
(7684,2939,1)
(4425,5378,1)
(3661,8015,1)
(2176,5061,1)
(7314,8058,1)
(4896,3093,1)
(8173,3920,1)
(39,7150,1)
(7081,8566,1)
(8386,8153,1)
(8793,2171,1)
(6397,6003,1)
(5202,2076,1)
(6045,6967,1)
(1446,986,1)
(76,1300,1)
(4610,4144,1)
(2213,4217,1)
(3580,7504,1)
(5870,1827,1)
(3390,8566,1)
(758,1040,1)
(4258,7688,1)
(877,3466,1)
(2405,5245,1)
(341,855,1)
(1122,8025,1)
(811,8525,1)
(3124,952,1)
(4686,534,1)
(8829,5699,1)
(6566,8703,1)
(8086,4531,1)
(2447,5411,1)
(8127,4585,1)
(7658,3901,1)
(6907,1391,1)
(2882,5740,1)
(8095,8566,1)
(245,1237,1)
(8429,5182,1)
(3156,312,1)
(7361,4396,1)
(864,3995,1)
(3820,1997,1)
(4912,2834,1)
(6679,8566,1)
(5374,7985,1)
(4880,5414,1)
(231,1816,1)
(5148,6340,1)
(1100,1876,1)
(9136,4642,1)
(3206,2881,1)
(3958,332,1)
(54,5530,1)
(2014,2111,1)
(2584,4304,1)
(4295,5364,1)
(7285,3018,1)
(5239,5061,1)
(6817,2953,1)
(498,1038,1)
(7081,4637,1)
(7644,2462,1)
(40,1849,1)
(8473,6727,1)
(1017,897,1)
(7681,7978,1)
(4430,1075,1)
(5088,8808,1)
(8528,5812,1)
(4032,5045,1)
(6852,527,1)
(8682,2422,1)
(2548,5061,1)
(7401,320,1)
(7702,2343,1)
(5753,2485,1)
(8321,2580,1)
(3360,4938,1)
(5532,1262,1)
(4261,7774,1)
(4115,8980,1)
(3560,3712,1)
(4822,8566,1)
(3067,488,1)
(3650,7571,1)
(4588,7646,1)
(7201,5783,1)
(5365,8566,1)
(8501,8507,1)
(8810,4885,1)
(8932,6906,1)
(4902,5735,1)
(6220,5063,1)
(5223,3643,1)
(3180,5374,1)
(6983,6202,1)
(3876,8396,1)
(6923,389,1)
(1217,4347,1)
(7130,2411,1)
(8860,6839,1)
(7382,6754,1)
(6440,4765,1)
(5631,5296,1)
(3266,4787,1)
(430,3768,1)
(2705,4322,1)
(6020,114,1)
(814,4784,1)
(9072,1780,1)
(6969,746,1)
(9104,1745,1)
(1856,5606,1)
(6623,187,1)
(4602,2337,1)
(6925,8080,1)
(5210,3530,1)
(632,4797,1)
(8873,4011,1)
(4404,4925,1)
(4689,3649,1)
(3397,8234,1)
(7678,8566,1)
(1242,3553,1)
(2750,4331,1)
(3724,5061,1)
(1125,3428,1)
(2453,502,1)
(2957,2097,1)
(4278,149,1)
(7510,6647,1)
(1778,3992,1)
(135,3306,1)
(993,258,1)
(4228,3419,1)
(4639,4127,1)
(9146,7381,1)
(3955,7644,1)
(2201,7088,1)
(3908,8566,1)
(3524,7908,1)
(8219,2131,1)
(3626,8566,1)
(5926,730,1)
(1027,9016,1)
(5213,8234,1)
(8674,7772,1)
(1811,4799,1)
(6695,7732,1)
(37,5524,1)
(1807,1587,1)
(4755,2515,1)
(247,8811,1)
(5679,4808,1)
(3432,2818,1)
(4859,5937,1)
(3141,5061,1)
(716,5061,1)
(4668,5937,1)
(4022,1383,1)
(1413,7157,1)
(2247,8275,1)
(1656,5247,1)
(5537,8370,1)
(5954,6597,1)
(4760,2274,1)
(1503,3619,1)
(8820,5140,1)
(3188,1458,1)
(256,8966,1)
(8749,7186,1)
(7632,7986,1)
(194,3446,1)
(8312,7893,1)
(7533,3504,1)
(5655,5061,1)
(1053,3096,1)
(1441,2137,1)
(770,6768,1)
(7437,266,1)
(3416,8566,1)
(4956,5822,1)
(5893,3949,1)
(6508,3376,1)
(7570,1086,1)
(2746,2769,1)
(838,1412,1)
(2023,1730,1)
(6869,5940,1)
(3037,1497,1)
(3639,6232,1)
(7319,1618,1)
(4175,6370,1)
(5147,473,1)
(1373,8566,1)
(5508,307,1)
(8204,669,1)
(4094,9059,1)
(8027,5195,1)
(7028,3668,1)
(5697,5665,1)
(1162,4973,1)
(6736,7095,1)
(743,4574,1)
(8638,5061,1)
(8789,8598,1)
(589,1749,1)
(1417,8732,1)
(1135,2655,1)
(3124,1071,1)
(238,4598,1)
(1420,3294,1)
(7080,3135,1)
(8095,5061,1)
(2128,39,1)
(8209,792,1)
(6279,258,1)
(7692,8566,1)
(3871,8566,1)
(6176,922,1)
(9104,3647,1)
(8827,7657,1)
(8143,1193,1)
(1963,6256,1)
(8616,8566,1)
(4070,184,1)
(329,7331,1)
(7917,5543,1)
(1667,2416,1)
(4653,1740,1)
(2872,3272,1)
(8876,9128,1)
(3238,8856,1)
(3557,1714,1)
(7095,6201,1)
(7244,6818,1)
(3152,2010,1)
(7969,3296,1)
(2287,360,1)
(8399,5690,1)
(5865,500,1)
(4856,2549,1)
(2019,2396,1)
(7706,8735,1)
(5019,399,1)
(4122,1473,1)
(8543,1646,1)
(7020,6637,1)
(295,1368,1)
(4992,6299,1)
(8385,6739,1)
(3857,8763,1)
(6528,6045,1)
(2628,4768,1)
(5048,8244,1)
(793,4072,1)
(5001,194,1)
(8628,4144,1)
(4155,7661,1)
(5816,3696,1)
(7813,1462,1)
(7644,2870,1)
(8195,411,1)
(977,6894,1)
(7123,7942,1)
(1728,4559,1)
(53,4592,1)
(7426,8566,1)
(4647,258,1)
(6566,4864,1)
(1900,5188,1)
(8187,2195,1)
(9104,8966,1)
(5989,5593,1)
(3492,6443,1)
(8582,4420,1)
(3806,2166,1)
(2475,7436,1)
(6738,5005,1)
(5523,6304,1)
(4501,6565,1)
(6638,686,1)
(7884,8566,1)
(6349,2809,1)
(364,5261,1)
(5618,6996,1)
(7786,5061,1)
(5492,8799,1)
(9104,6340,1)
(2049,7241,1)
(9104,4641,1)
(2591,2711,1)
(5145,6112,1)
(8539,8566,1)
(6889,5226,1)
(774,798,1)
(1842,4866,1)
(2691,5050,1)
(3470,316,1)
(6563,8232,1)
(3744,5061,1)
(1693,258,1)
(6327,5365,1)
(505,1419,1)
(7805,5656,1)
(3520,2886,1)
(7554,80,1)
(3090,420,1)
(8232,5430,1)
(1255,4656,1)
(8649,1371,1)
(2067,7285,1)
(2568,8306,1)
(8627,2613,1)
(43,2065,1)
(8623,8566,1)
(6292,4347,1)
(8237,3639,1)
(2842,4614,1)
(1859,557,1)
(1108,4671,1)
(552,2618,1)
(8359,258,1)
(4301,8757,1)
(450,1812,1)
(2155,8054,1)
(4233,65,1)
(3605,3069,1)
(8560,5405,1)
(555,823,1)
(7211,7111,1)
(5091,4717,1)
(2017,2506,1)
(3606,5229,1)
(8075,3877,1)
(3995,6916,1)
(6987,6831,1)
(4237,3231,1)
(2671,1102,1)
(6220,6396,1)
(4358,8141,1)
(287,5908,1)
(2305,3457,1)
(7644,5951,1)
(7395,6646,1)
(7569,1535,1)
(2137,8566,1)
(5923,8566,1)
(2222,9119,1)
(6623,8558,1)
(6566,6340,1)
(539,2306,1)
(4625,7590,1)
(6505,6758,1)
(5286,6822,1)
(4118,4860,1)
(8061,7378,1)
(2457,7962,1)
(4607,7121,1)
(1871,327,1)
(4219,8109,1)
(7993,7973,1)
(3802,4507,1)
(2296,7875,1)
(7409,7468,1)
(1352,7499,1)
(6382,2622,1)
(4722,2799,1)
(9104,9105,1)
(1623,5061,1)
(2145,4503,1)
(6520,4976,1)
(9104,1866,1)
(6967,8566,1)
(2791,169,1)
(8169,5961,1)
(102,2305,1)
(4351,5061,1)
(8324,4797,1)
(5689,497,1)
(272,851,1)
(330,8438,1)
(3897,5567,1)
(3109,5061,1)
(4341,2901,1)
(1547,6604,1)
(4953,8773,1)
(7878,6161,1)
(8932,8035,1)
(880,4187,1)
(5597,6436,1)
(7202,942,1)
(672,1760,1)
(7594,3370,1)
(6489,8594,1)
(4487,2878,1)
(9092,7755,1)
(2497,7221,1)
(2236,2651,1)
(4902,1813,1)
(2374,1239,1)
(8617,4130,1)
(4586,7232,1)
(2505,4484,1)
(3300,631,1)
(6435,8036,1)
(6301,8579,1)
(4420,2351,1)
(3297,8823,1)
(5511,3556,1)
(334,4176,1)
(2974,2033,1)
(7157,5290,1)
(2701,462,1)
(411,7582,1)
(4646,61,1)
(1306,6605,1)
(6150,6670,1)
(6867,588,1)
(5413,3722,1)
(6038,7322,1)
(2645,2511,1)
(5148,154,1)
(2384,4647,1)
(208,7349,1)
(602,2548,1)
(3090,6673,1)
(1257,8480,1)
(3322,2222,1)
(1738,8740,1)
(3185,3251,1)
(4691,9021,1)
(7309,1458,1)
(7881,2602,1)
(3328,7114,1)
(8948,5061,1)
(7261,8880,1)
(3955,5105,1)
(6425,5220,1)
(1839,8333,1)
(2778,7525,1)
(2475,1192,1)
(8062,6715,1)
(8462,1876,1)
(3810,640,1)
(2336,1876,1)
(1662,8116,1)
(4598,5613,1)
(4634,2998,1)
(4369,5061,1)
(7705,4460,1)
(2332,2092,1)
(5105,876,1)
(4520,9027,1)
(4093,2421,1)
(7690,6100,1)
(2777,4706,1)
(7698,6986,1)
(7604,7754,1)
(6112,258,1)
(8495,7778,1)
(3140,8244,1)
(1873,852,1)
(1662,812,1)
(2584,2870,1)
(2783,8747,1)
(9120,5061,1)
(3782,9094,1)
(7794,6768,1)
(8712,8021,1)
(6559,413,1)
(7346,4802,1)
(6754,3920,1)
(7723,8622,1)
(9063,2041,1)
(2397,4078,1)
(1283,6008,1)
(3814,6676,1)
(3582,6261,1)
(7233,2410,1)
(617,7831,1)
(7487,8172,1)
(3133,193,1)
(1241,8566,1)
(2584,2768,1)
(3711,6575,1)
(1493,594,1)
(4190,1015,1)
(46,8535,1)
(3231,6340,1)
(8835,4725,1)
(4181,2751,1)
(3764,7986,1)
(7206,3202,1)
(6887,5061,1)
(2767,6695,1)
(1064,1829,1)
(166,37,1)
(3854,3985,1)
(4199,5937,1)
(1421,5450,1)
(6777,1916,1)
(5323,5061,1)
(209,4462,1)
(3636,8982,1)
(4833,14,1)
(3302,2505,1)
(504,7594,1)
(523,7425,1)
(1854,4565,1)
(1605,328,1)
(185,6898,1)
(2453,3749,1)
(4738,5061,1)
(2443,1281,1)
(6898,5107,1)
(3423,8100,1)
(3838,5351,1)
(9104,2496,1)
(7134,1318,1)
(3405,2923,1)
(124,3403,1)
(6298,7552,1)
(4245,4728,1)
(895,8566,1)
(1474,2606,1)
(5972,3737,1)
(3812,8055,1)
(3450,7980,1)
(6455,6914,1)
(4134,7023,1)
(6118,8566,1)
(4047,2537,1)
(3201,6482,1)
(1737,783,1)
(5105,5599,1)
(2306,2279,1)
(7592,7558,1)
(8488,5141,1)
(8553,509,1)
(3822,3967,1)
(4839,8943,1)
(4222,6502,1)
(8836,5061,1)
(1327,5836,1)
(396,808,1)
(5313,862,1)
(4158,1792,1)
(3408,8566,1)
(8232,6643,1)
(4360,7121,1)
(3309,2468,1)
(8508,2557,1)
(8009,5491,1)
(1068,5061,1)
(5148,2870,1)
(5172,8566,1)
(1388,5061,1)
(2276,5061,1)
(1752,7818,1)
(2181,6149,1)
(278,472,1)
(7012,2720,1)
(3150,3074,1)
(2216,4576,1)
(4172,576,1)
(7492,438,1)
(3241,8158,1)
(5499,3312,1)
(1869,3105,1)
(170,4088,1)
(5365,4328,1)
(6694,8566,1)
(8254,8972,1)
(2512,7439,1)
(6902,2252,1)
(7482,724,1)
(6507,8566,1)
(3203,8549,1)
(737,4617,1)
(7808,4623,1)
(5671,6176,1)
(8967,2958,1)
(6052,2746,1)
(4926,966,1)
(2020,4748,1)
(4956,7199,1)
(140,3167,1)
(4711,5380,1)
(8283,4401,1)
(3498,7061,1)
(6294,2597,1)
(150,2563,1)
(6657,733,1)
(9136,1071,1)
(4706,6276,1)
(6466,8133,1)
(7538,825,1)
(1042,2725,1)
(1846,2576,1)
(6065,8566,1)
(3779,2144,1)
(6360,4610,1)
(993,65,1)
(595,5061,1)
(6585,4070,1)
(64,1157,1)
(8703,1320,1)
(5099,7833,1)
(9085,1612,1)
(6510,5061,1)
(7887,128,1)
(1078,7645,1)
(6940,5406,1)
(8357,6622,1)
(8449,5730,1)
(6050,7666,1)
(5917,7676,1)
(228,1134,1)
(213,8141,1)
(1118,3376,1)
(2621,4932,1)
(1258,5405,1)
(4922,4190,1)
(3305,8560,1)
(7299,3611,1)
(2103,1731,1)
(8514,1917,1)
(1404,7346,1)
(1417,8566,1)
(5958,6402,1)
(5097,9141,1)
(707,8566,1)
(3830,8566,1)
(5130,6607,1)
(6621,6343,1)
(4229,4824,1)
(5285,2489,1)
(6826,5189,1)
(2774,465,1)
(1086,8938,1)
(4262,6617,1)
(2214,3860,1)
(3022,5937,1)
(9104,5380,1)
(7110,4700,1)
(1758,8143,1)
(3955,9104,1)
(4216,1297,1)
(5065,7358,1)
(6550,296,1)
(9009,5937,1)
(1706,4212,1)
(4243,9034,1)
(4869,258,1)
(7559,738,1)
(8904,7422,1)
(3925,7946,1)
(304,4419,1)
(642,5679,1)
(5318,8694,1)
(2081,3514,1)
(6131,7083,1)
(7792,8566,1)
(3966,2100,1)
(4854,4347,1)
(7729,648,1)
(6033,834,1)
(4429,2741,1)
(3464,742,1)
(5100,6867,1)
(8889,2540,1)
(2199,4603,1)
(9096,5061,1)
(7090,298,1)
(6087,7192,1)
(177,58,1)
(597,258,1)
(5321,5398,1)
(8197,5061,1)
(2812,8566,1)
(5439,5941,1)
(4634,6412,1)
(1309,6908,1)
(6192,8293,1)
(8204,8073,1)
(6738,2134,1)
(5594,2558,1)
(3006,6155,1)
(3023,6220,1)
(5853,4578,1)
(5835,2481,1)
(3540,6794,1)
(2106,8566,1)
(3640,6107,1)
(8688,1822,1)
(7865,6342,1)
(2831,1428,1)
(5286,8566,1)
(7970,2571,1)
(1703,1592,1)
(8916,6690,1)
(2840,7602,1)
(6077,4237,1)
(5105,5017,1)
(7384,3376,1)
(2655,8713,1)
(1307,7977,1)
(5226,3793,1)
(1225,7392,1)
(2734,6320,1)
(4382,5015,1)
(2429,8566,1)
(896,7179,1)
(3304,3416,1)
(1365,6583,1)
(7580,8566,1)
(2212,4375,1)
(8370,8924,1)
(6208,8215,1)
(5017,453,1)
(4655,4227,1)
(516,3617,1)
(3271,7739,1)
(324,2636,1)
(6009,4078,1)
(1852,5341,1)
(4021,8184,1)
(4981,8566,1)
(5559,7191,1)
(467,1746,1)
(7894,7174,1)
(1057,5061,1)
(8778,8744,1)
(8177,8830,1)
(1883,1478,1)
(3043,7425,1)
(8121,6931,1)
(516,6386,1)
(8000,7520,1)
(5017,8566,1)
(5723,1454,1)
(6404,3057,1)
(1190,8845,1)
(1219,8566,1)
(8597,1441,1)
(968,3562,1)
(5128,1579,1)
(6422,8952,1)
(610,334,1)
(3955,2139,1)
(1312,3112,1)
(5159,5761,1)
(4538,3449,1)
(7280,4668,1)
(6579,6327,1)
(8071,5061,1)
(1094,851,1)
(6112,296,1)
(4568,6940,1)
(3231,6127,1)
(2897,9132,1)
(8255,8566,1)
(1250,516,1)
(3514,7486,1)
(2240,8566,1)
(1866,3654,1)
(3732,7284,1)
(3262,1696,1)
(2053,652,1)
(7062,363,1)
(8595,8049,1)
(376,7006,1)
(5938,279,1)
(1400,2897,1)
(2224,5061,1)
(4322,6636,1)
(8406,485,1)
(2645,5599,1)
(3730,1192,1)
(5170,1487,1)
(8634,7929,1)
(8833,4382,1)
(4933,8228,1)
(8013,1127,1)
(7636,1354,1)
(57,7200,1)
(4119,796,1)
(6888,4589,1)
(8869,853,1)
(4242,2913,1)
(8934,5208,1)
(7494,2931,1)
(332,4334,1)
(7873,5061,1)
(2202,258,1)
(4498,1277,1)
(4573,5061,1)
(6179,5759,1)
(7175,1761,1)
(1254,3175,1)
(1505,5478,1)
(2325,2716,1)
(5183,4120,1)
(6335,2862,1)
(6696,2764,1)
(9132,6621,1)
(8147,8794,1)
(665,1121,1)
(2415,6834,1)
(8598,8118,1)
(5205,3433,1)
(3535,3206,1)
(715,4774,1)
(4187,6620,1)
(6113,2257,1)
(4108,3464,1)
(7580,5061,1)
(7373,4647,1)
(5148,2496,1)
(3425,5591,1)
(7207,9100,1)
(5148,7425,1)
(2812,3231,1)
(657,8792,1)
(782,8903,1)
(5239,7559,1)
(688,1331,1)
(98,8995,1)
(294,7327,1)
(5825,4651,1)
(8204,8804,1)
(6062,5061,1)
(226,3099,1)
(1138,786,1)
(4796,1007,1)
(7610,6768,1)
(5259,5186,1)
(5105,2165,1)
(4889,753,1)
(7756,5939,1)
(948,6529,1)
(654,4201,1)
(2584,1071,1)
(2297,2277,1)
(2233,475,1)
(1447,3551,1)
(5263,65,1)
(3231,2870,1)
(8838,5660,1)
(4285,6684,1)
(2645,6382,1)
(6149,8733,1)
(202,6425,1)
(7899,7333,1)
(5575,2029,1)
(4589,6212,1)
(5363,7120,1)
(926,6698,1)
(3327,4239,1)
(7323,8566,1)
(3037,5136,1)
(868,8566,1)
(5065,2165,1)
(5128,4292,1)
(1393,7932,1)
(1284,1690,1)
(394,4347,1)
(7416,8035,1)
(2942,6020,1)
(7870,4165,1)
(2157,4469,1)
(5580,6487,1)
(1594,8328,1)
(8131,459,1)
(5820,3302,1)
(4010,3766,1)
(8347,2629,1)
(5148,7878,1)
(6577,431,1)
(1993,4629,1)
(4530,7409,1)
(2132,6679,1)
(8532,6379,1)
(1323,8473,1)
(2522,7825,1)
(1763,666,1)
(5339,358,1)
(5329,5937,1)
(8747,7942,1)
(4796,5714,1)
(4377,4596,1)
(3365,7072,1)
(980,5061,1)
(6127,6169,1)
(2139,4642,1)
(2254,1455,1)
(4351,8566,1)
(5987,1147,1)
(3542,8335,1)
(5238,5950,1)
(502,6863,1)
(8439,764,1)
(8024,8280,1)
(939,2382,1)
(1581,8497,1)
(2645,8121,1)
(8922,6768,1)
(6496,1895,1)
(7644,6127,1)
(6636,3148,1)
(5250,1728,1)
(3953,8589,1)
(284,5210,1)
(8446,3629,1)
(5470,25,1)
(119,3164,1)
(3026,8566,1)
(1539,5061,1)
(8102,1289,1)
(4982,7827,1)
(5413,8185,1)
(8716,8317,1)
(3943,2206,1)
(8471,4134,1)
(7081,8579,1)
(2785,4692,1)
(5555,1356,1)
(5802,7070,1)
(1524,8821,1)
(7515,8021,1)
(3897,3466,1)
(2457,2165,1)
(1223,8703,1)
(1465,4840,1)
(5264,7085,1)
(2457,7425,1)
(4458,1254,1)
(8731,1133,1)
(2354,8500,1)
(1941,7845,1)
(1550,272,1)
(3383,6798,1)
(8204,5162,1)
(3681,5618,1)
(4787,5441,1)
(8814,7800,1)
(2410,1963,1)
(3135,8566,1)
(7614,7226,1)
(2829,21,1)
(5105,4864,1)
(2741,6359,1)
(4151,7948,1)
(7662,3641,1)
(735,1783,1)
(7757,1324,1)
(4972,8566,1)
(6023,4977,1)
(4595,5585,1)
(2432,4852,1)
(2898,303,1)
(4508,617,1)
(5105,2485,1)
(1000,4030,1)
(4362,8679,1)
(6166,1222,1)
(5628,7112,1)
(812,2383,1)
(7536,8566,1)
(4230,7562,1)
(3955,3124,1)
(3941,127,1)
(1529,2022,1)
(6214,2739,1)
(8676,8566,1)
(1073,3380,1)
(7742,676,1)
(2188,8890,1)
(6860,1465,1)
(8715,5943,1)
(2878,5025,1)
(1978,4224,1)
(5864,2574,1)
(634,4828,1)
(5148,4864,1)
(3680,7997,1)
(7355,8052,1)
(6441,1561,1)
(9081,3674,1)
(8204,2480,1)
(1473,1482,1)
(3063,5879,1)
(5640,5061,1)
(5844,1925,1)
(5829,5749,1)
(3828,3570,1)
(144,5626,1)
(8935,5370,1)
(3749,502,1)
(8027,1394,1)
(7784,5233,1)
(8670,5828,1)
(3193,1110,1)
(7571,2291,1)
(7782,65,1)
(2741,6407,1)
(3734,4989,1)
(3707,5698,1)
(7007,3089,1)
(6013,7481,1)
(3657,1059,1)
(5301,3952,1)
(7192,6389,1)
(5148,838,1)
(6286,6682,1)
(8093,7291,1)
(5078,177,1)
(2776,7329,1)
(8564,7760,1)
(3404,8566,1)
(5705,59,1)
(6395,104,1)
(2280,554,1)
(7999,6258,1)
(8168,8791,1)
(2339,4280,1)
(7639,859,1)
(1908,2711,1)
(1200,8566,1)
(9104,4304,1)
(8706,4400,1)
(3948,7089,1)
(6219,4533,1)
(7796,3962,1)
(6434,6253,1)
(4939,8813,1)
(7607,1351,1)
(7600,5789,1)
(8706,2511,1)
(6415,6950,1)
(3554,7437,1)
(4918,1304,1)
(3249,6640,1)
(1032,3947,1)
(4481,6807,1)
(5532,3868,1)
(1905,3399,1)
(8744,8764,1)
(728,5528,1)
(2898,4470,1)
(7587,1705,1)
(7057,4590,1)
(8172,1213,1)
(8670,2028,1)
(6768,1154,1)
(1574,4731,1)
(5147,1755,1)
(8623,3637,1)
(6835,8504,1)
(5947,2162,1)
(377,4911,1)
(1581,4248,1)
(827,6146,1)
(1532,769,1)
(3802,5660,1)
(8847,8595,1)
(1376,6932,1)
(5300,3376,1)
(9009,57,1)
(351,7741,1)
(4439,5061,1)
(5266,495,1)
(2830,2180,1)
(716,8566,1)
(1810,4085,1)
(30,7746,1)
(8271,8147,1)
(3005,4907,1)
(1124,5272,1)
(7644,4864,1)
(6347,930,1)
(2242,5377,1)
(290,7575,1)
(3846,1271,1)
(1699,5213,1)
(7585,3116,1)
(5932,6475,1)
(5128,4567,1)
(807,5061,1)
(848,7377,1)
(2259,3085,1)
(9110,3643,1)
(702,5588,1)
(1288,3926,1)
(5065,952,1)
(9066,3710,1)
(8635,6287,1)
(4580,1385,1)
(1300,7343,1)
(3986,1485,1)
(5588,8410,1)
(1277,5771,1)
(5991,7700,1)
(256,1071,1)
(3587,8647,1)
(7786,8566,1)
(1606,6653,1)
(8457,6787,1)
(5804,6338,1)
(2309,8566,1)
(3254,2129,1)
(241,5582,1)
(6138,4757,1)
(1964,9113,1)
(4617,3469,1)
(5336,5739,1)
(8390,4301,1)
(4465,8516,1)
(256,6127,1)
(7805,987,1)
(1632,6758,1)
(8743,8566,1)
(6592,8566,1)
(940,8566,1)
(6460,8453,1)
(6169,5064,1)
(6059,668,1)
(8056,851,1)
(4471,4739,1)
(1781,8362,1)
(8948,8566,1)
(432,1745,1)
(8181,2626,1)
(3351,2076,1)
(2120,4261,1)
(3291,4754,1)
(164,5061,1)
(5871,4890,1)
(7472,4979,1)
(3033,3100,1)
(4159,4233,1)
(3317,2241,1)
(8202,64,1)
(5736,1637,1)
(7443,6768,1)
(4785,937,1)
(7648,7135,1)
(5419,7815,1)
(5155,1475,1)
(9117,179,1)
(7644,7425,1)
(5129,4206,1)
(5148,8980,1)
(6746,7840,1)
(4497,4882,1)
(1792,3161,1)
(4141,6213,1)
(7097,1211,1)
(4524,2583,1)
(760,6397,1)
(6193,8566,1)
(3454,5703,1)
(8144,5780,1)
(4550,7357,1)
(7548,6345,1)
(6975,3875,1)
(5148,5574,1)
(1886,2940,1)
(8104,4299,1)
(5564,2959,1)
(7519,5480,1)
(1627,9139,1)
(1109,1532,1)
(8863,3544,1)
(8023,2609,1)
(5992,8566,1)
(1175,5476,1)
(8803,4370,1)
(8204,6998,1)
(314,6817,1)
(8309,6769,1)
(7713,700,1)
(7745,1273,1)
(8827,258,1)
(2789,6995,1)
(6096,1066,1)
(4681,6806,1)
(7992,9093,1)
(6609,5061,1)
(7961,5598,1)
(374,3447,1)
(1029,1811,1)
(3997,3823,1)
(6023,5122,1)
(3043,7962,1)
(6123,845,1)
(8208,4347,1)
(2887,127,1)
(8168,4047,1)
(7734,2061,1)
(4771,6700,1)
(7425,5091,1)
(7514,4363,1)
(1392,7892,1)
(7659,3629,1)
(4687,8566,1)
(433,1760,1)
(707,5336,1)
(8775,7308,1)
(8306,3229,1)
(5588,3202,1)
(8356,6768,1)
(8010,3646,1)
(6790,207,1)
(4130,1474,1)
(3630,1580,1)
(486,4857,1)
(1067,8244,1)
(1681,1754,1)
(3885,219,1)
(1980,1438,1)
(4685,8463,1)
(6703,7587,1)
(690,5061,1)
(1271,5314,1)
(805,7305,1)
(8971,2379,1)
(7987,7163,1)
(4391,8494,1)
(6042,2189,1)
(7271,5655,1)
(2569,1601,1)
(8913,6192,1)
(8474,4063,1)
(2909,740,1)
(256,7962,1)
(9104,8121,1)
(6973,2682,1)
(3723,4634,1)
(4600,1625,1)
(2810,7347,1)
(7912,8076,1)
(8225,8566,1)
(6312,8566,1)
(727,8505,1)
(3256,7806,1)
(6570,8566,1)
(5148,4520,1)
(6621,5399,1)
(7746,6196,1)
(1612,4264,1)
(5003,2933,1)
(2406,4087,1)
(1370,8566,1)
(8577,7240,1)
(5083,7711,1)
(5385,1179,1)
(4055,2201,1)
(6141,7747,1)
(7730,4425,1)
(7481,2810,1)
(8036,6614,1)
(5360,7115,1)
(2159,2740,1)
(4703,2365,1)
(8851,7443,1)
(4734,469,1)
(2784,3707,1)
(1679,7950,1)
(2158,8024,1)
(540,8782,1)
(3976,8257,1)
(8758,258,1)
(8957,4653,1)
(1601,7530,1)
(9136,1866,1)
(8657,9001,1)
(5146,3450,1)
(2308,7250,1)
(3485,8825,1)
(755,8496,1)
(996,3750,1)
(4529,234,1)
(8022,2247,1)
(9020,6307,1)
(7565,3006,1)
(2534,3194,1)
(2462,4561,1)
(8792,4207,1)
(2143,486,1)
(1838,4627,1)
(2276,8566,1)
(4840,8985,1)
(3955,6566,1)
(8985,1783,1)
(487,257,1)
(4934,6951,1)
(5547,5061,1)
(6317,3378,1)
(792,5061,1)
(6275,6442,1)
(7437,4461,1)
(6975,7053,1)
(999,7023,1)
(2005,9145,1)
(5113,3390,1)
(7716,6981,1)
(9136,7326,1)
(167,150,1)
(480,277,1)
(8965,4335,1)
(8109,5662,1)
(4831,851,1)
(9103,8967,1)
(1983,8566,1)
(660,6927,1)
(1494,5061,1)
(481,7118,1)
(5283,2727,1)
(3214,556,1)
(2249,8536,1)
(5682,3148,1)
(1666,5061,1)
(7958,6849,1)
(8973,3578,1)
(3142,8924,1)
(2925,6469,1)
(1420,7063,1)
(4322,779,1)
(280,8423,1)
(4666,8343,1)
(6573,2756,1)
(8245,6027,1)
(5899,8582,1)
(2912,2677,1)
(5727,4273,1)
(1390,2227,1)
(8713,8566,1)
(5795,6692,1)
(6305,3374,1)
(8204,2539,1)
(5393,7205,1)
(7976,3678,1)
(397,7769,1)
(902,5061,1)
(6442,7719,1)
(5718,7058,1)
(8395,2405,1)
(1063,6578,1)
(6730,1803,1)
(708,5459,1)
(3311,5600,1)
(5768,477,1)
(4950,5061,1)
(1816,7512,1)
(5434,5498,1)
(4250,8566,1)
(9060,2018,1)
(2976,6239,1)
(577,153,1)
(656,4829,1)
(1172,3719,1)
(4884,6634,1)
(5843,7618,1)
(518,8314,1)
(496,8240,1)
(677,450,1)
(2871,4447,1)
(497,3338,1)
(4743,8656,1)
(1756,8566,1)
(3876,5073,1)
(5522,127,1)
(4582,8446,1)
(8539,4448,1)
(2664,6637,1)
(2510,4091,1)
(6828,2243,1)
(364,2966,1)
(611,9147,1)
(6301,1368,1)
(79,2479,1)
(8993,6598,1)
(2395,6952,1)
(4992,8634,1)
(3494,3471,1)
(8198,1435,1)
(3218,6792,1)
(3231,4642,1)
(4084,3376,1)
(9087,8566,1)
(8159,5061,1)
(2735,8566,1)
(2461,7822,1)
(4642,4967,1)
(2806,3551,1)
(6354,9131,1)
(6291,4299,1)
(4554,7735,1)
(7288,2168,1)
(3129,7524,1)
(5431,8579,1)
(1297,2835,1)
(2108,1436,1)
(6840,8088,1)
(2599,5067,1)
(5977,8348,1)
(4871,6943,1)
(5425,4340,1)
(8242,5061,1)
(6677,3717,1)
(1819,6642,1)
(2823,8836,1)
(760,6003,1)
(1854,8244,1)
(9104,4309,1)
(2403,7796,1)
(3879,98,1)
(7308,3454,1)
(5293,7007,1)
(1926,2844,1)
(7412,7259,1)
(8439,3974,1)
(6583,4099,1)
(5059,7683,1)
(7654,1251,1)
(3616,4347,1)
(8246,1513,1)
(7094,2028,1)
(2107,3820,1)
(5514,7427,1)
(2083,7606,1)
(7779,2148,1)
(4930,8566,1)
(2133,4153,1)
(5682,5947,1)
(7071,6246,1)
(3365,5061,1)
(8562,1585,1)
(9154,1976,1)
(197,1709,1)
(363,6076,1)
(700,3254,1)
(3100,7573,1)
(256,2870,1)
(3326,2762,1)
(6105,4934,1)
(6215,3730,1)
(6692,5702,1)
(4186,8512,1)
(7750,5937,1)
(8035,3642,1)
(3022,8566,1)
(1772,7684,1)
(5065,8703,1)
(3185,5061,1)
(5721,3023,1)
(4280,278,1)
(3522,5121,1)
(1188,8806,1)
(6164,8135,1)
(3293,8501,1)
(586,67,1)
(8806,1876,1)
(1659,3636,1)
(7734,8566,1)
(2584,7425,1)
(3721,7556,1)
(7682,998,1)
(2552,7837,1)
(7771,6033,1)
(6452,5513,1)
(6065,5061,1)
(3250,1627,1)
(9102,2777,1)
(6089,7792,1)
(112,8771,1)
(4786,6673,1)
(6611,6186,1)
(6926,5823,1)
(4393,7250,1)
(7378,2167,1)
(5777,5130,1)
(3592,9027,1)
(5818,483,1)
(3709,4985,1)
(6295,8222,1)
(8097,5235,1)
(8487,6768,1)
(842,3218,1)
(1881,6477,1)
(8665,4231,1)
(8500,2519,1)
(4177,8211,1)
(4794,5766,1)
(3742,9068,1)
(5029,4116,1)
(4209,8244,1)
(5107,6745,1)
(4947,6451,1)
(574,919,1)
(3210,1549,1)
(584,5481,1)
(8642,5251,1)
(2161,4695,1)
(3989,145,1)
(2547,6975,1)
(1678,3030,1)
(9078,6935,1)
(3907,3707,1)
(4437,515,1)
(3879,5538,1)
(1465,554,1)
(8966,8566,1)
(5261,2966,1)
(5069,4739,1)
(8614,133,1)
(4987,1013,1)
(4011,3625,1)
(7550,8566,1)
(2645,876,1)
(8735,8566,1)
(1951,7105,1)
(5065,2485,1)
(7224,8484,1)
(6022,7692,1)
(2407,1747,1)
(3771,7991,1)
(1322,3508,1)
(8900,4646,1)
(8492,4674,1)
(5561,1943,1)
(3772,118,1)
(6555,5061,1)
(846,917,1)
(7455,1295,1)
(7603,3392,1)
(3754,3231,1)
(6651,1967,1)
(7765,5502,1)
(5157,5061,1)
(137,3400,1)
(2100,1355,1)
(8701,8668,1)
(3861,4751,1)
(4072,13,1)
(4441,4983,1)
(4444,8566,1)
(6418,5061,1)
(4721,3477,1)
(1309,5061,1)
(2282,4888,1)
(1534,4975,1)
(6962,701,1)
(8982,908,1)
(4905,5061,1)
(5620,9022,1)
(7235,8505,1)
(6242,8491,1)
(4770,8361,1)
(7146,5791,1)
(4763,7670,1)
(2929,297,1)
(3935,6382,1)
(6336,596,1)
(7971,198,1)
(9064,6423,1)
(6881,5319,1)
(1023,2604,1)
(632,5475,1)
(7978,5453,1)
(3172,8566,1)
(7396,520,1)
(5559,7178,1)
(1575,4102,1)
(5122,4977,1)
(5696,8566,1)
(2316,7321,1)
(621,6553,1)
(8029,6845,1)
(6970,3877,1)
(4859,3114,1)
(6331,2211,1)
(5492,2239,1)
(4266,6293,1)
(7440,1238,1)
(6850,3778,1)
(7278,748,1)
(2928,8164,1)
(2062,5061,1)
(1204,7035,1)
(2973,3078,1)
(8091,8067,1)
(5807,2033,1)
(5308,9140,1)
(4599,8658,1)
(1848,2938,1)
(1212,2887,1)
(962,3010,1)
(1215,7144,1)
(215,8005,1)
(7960,2990,1)
(7174,808,1)
(6865,7287,1)
(7231,5937,1)
(4785,5937,1)
(3933,749,1)
(1613,7962,1)
(9084,8566,1)
(1274,7856,1)
(8287,5296,1)
(986,8566,1)
(68,7343,1)
(4499,5465,1)
(2309,5061,1)
(7666,5665,1)
(8196,429,1)
(5147,6522,1)
(3583,4347,1)
(5479,5292,1)
(8139,8793,1)
(9094,4877,1)
(926,755,1)
(8241,1173,1)
(4043,8131,1)
(5923,6734,1)
(9104,6127,1)
(3855,1059,1)
(534,7388,1)
(1623,3824,1)
(392,790,1)
(7615,8031,1)
(3108,4903,1)
(4541,6626,1)
(1166,2163,1)
(3002,6981,1)
(9012,3409,1)
(3783,8807,1)
(2150,6144,1)
(3039,4271,1)
(6412,2783,1)
(8522,3489,1)
(1112,3336,1)
(4736,6004,1)
(1676,8429,1)
(3947,6965,1)
(3198,2845,1)
(5287,829,1)
(1305,2136,1)
(2721,4057,1)
(2238,4716,1)
(8623,5061,1)
(6256,3042,1)
(3106,3070,1)
(3751,6135,1)
(1273,5187,1)
(4963,5133,1)
(9104,7824,1)
(8288,8913,1)
(5148,7962,1)
(2151,2807,1)
(5646,832,1)
(8589,4018,1)
(8986,7428,1)
(4209,8566,1)
(19,2138,1)
(3711,1691,1)
(1986,8101,1)
(1374,6390,1)
(8507,4817,1)
(7946,8343,1)
(7094,4612,1)
(5051,5328,1)
(5552,2260,1)
(8555,4864,1)
(6820,2840,1)
(8117,5061,1)
(3368,2053,1)
(2934,8800,1)
(5357,1580,1)
(145,3148,1)
(1211,1824,1)
(2745,127,1)
(5403,3419,1)
(2806,7187,1)
(7951,1499,1)
(4421,2744,1)
(8101,661,1)
(1275,7722,1)
(4601,5611,1)
(416,5061,1)
(738,6985,1)
(3124,7425,1)
(8653,5988,1)
(8115,1525,1)
(1456,7551,1)
(1998,2864,1)
(4026,9084,1)
(593,2394,1)
(120,9151,1)
(8100,8566,1)
(8883,6887,1)
(7533,7583,1)
(4474,8559,1)
(6170,8730,1)
(5192,3997,1)
(7193,8566,1)
(6852,7243,1)
(937,2668,1)
(5148,1050,1)
(6502,5723,1)
(1466,6025,1)
(777,1447,1)
(6497,632,1)
(5105,6127,1)
(5299,506,1)
(4570,7257,1)
(3530,7915,1)
(6265,284,1)
(7536,5061,1)
(3883,2975,1)
(5499,8688,1)
(1671,8188,1)
(2633,7993,1)
(940,7876,1)
(7679,8292,1)
(1885,2833,1)
(2451,7252,1)
(2029,7423,1)
(6347,6092,1)
(351,5061,1)
(1716,5937,1)
(6182,7207,1)
(567,5061,1)
(1264,1271,1)
(2318,1045,1)
(2114,8566,1)
(8059,7721,1)
(7856,7489,1)
(2456,6957,1)
(3413,3080,1)
(7037,4235,1)
(9097,3996,1)
(7613,4528,1)
(6635,8566,1)
(2904,1362,1)
(132,695,1)
(5252,8566,1)
(422,8098,1)
(6685,2952,1)
(4398,5589,1)
(7568,3374,1)
(1242,8114,1)
(8596,4026,1)
(1327,5793,1)
(2614,7235,1)
(9048,5061,1)
(2281,3062,1)
(7188,4481,1)
(8536,5916,1)
(7376,2117,1)
(1089,7811,1)
(4979,9037,1)
(8568,251,1)
(3615,1935,1)
(1789,127,1)
(529,6736,1)
(5519,3595,1)
(3628,1503,1)
(4678,7185,1)
(6501,5972,1)
(1789,6215,1)
(4610,8244,1)
(1860,8696,1)
(164,508,1)
(7365,4745,1)
(5667,8566,1)
(5985,5061,1)
(3306,6378,1)
(936,6380,1)
(970,228,1)
(6248,7196,1)
(8204,2981,1)
(1686,8467,1)
(6294,8566,1)
(4098,7258,1)
(6665,6820,1)
(581,2385,1)
(4150,1635,1)
(2524,3603,1)
(544,2737,1)
(1566,8566,1)
(6894,1392,1)
(4806,2637,1)
(3756,8034,1)
(1501,92,1)
(203,1956,1)
(4106,4128,1)
(4570,8566,1)
(3974,5108,1)
(8863,2656,1)
(1834,5376,1)
(2457,1866,1)
(2880,8155,1)
(1403,3231,1)
(3209,5043,1)
(671,8820,1)
(4413,7895,1)
(8928,6069,1)
(5291,7894,1)
(513,7660,1)
(4685,7158,1)
(5164,3153,1)
(1334,653,1)
(3306,4181,1)
(4627,5308,1)
(3205,8566,1)
(8995,2743,1)
(838,7941,1)
(6170,4381,1)
(5633,5705,1)
(7507,8566,1)
(175,8004,1)
(6482,9107,1)
(7822,6658,1)
(857,5061,1)
(6525,3407,1)
(3021,8508,1)
(6253,8566,1)
(7957,5740,1)
(4959,3938,1)
(8273,8566,1)
(2728,5937,1)
(4369,8566,1)
(5037,5061,1)
(2881,5995,1)
(616,65,1)
(2219,5767,1)
(2978,1571,1)
(5154,1382,1)
(1685,2813,1)
(2190,4074,1)
(8212,2021,1)
(1821,2919,1)
(9069,3555,1)
(2587,3230,1)
(5507,6714,1)
(7387,6732,1)
(2648,26,1)
(6634,6236,1)
(5436,2806,1)
(7799,2621,1)
(8327,7432,1)
(7048,5061,1)
(8615,2637,1)
(2745,2389,1)
(4790,1797,1)
(5063,8566,1)
(8787,4242,1)
(3598,1488,1)
(7483,5625,1)
(2076,3843,1)
(8533,5835,1)
(8825,5061,1)
(1941,1690,1)
(580,5511,1)
(8791,1605,1)
(2681,7965,1)
(8911,747,1)
(1629,5061,1)
(1613,2496,1)
(4850,5566,1)
(4664,8566,1)
(877,5567,1)
(5499,14,1)
(8177,2184,1)
(2360,3731,1)
(8616,5061,1)
(3792,9103,1)
(6887,8566,1)
(7200,4052,1)
(3231,7358,1)
(4381,1372,1)
(7046,2773,1)
(2900,4720,1)
(8225,5061,1)
(8521,1018,1)
(7883,184,1)
(3189,5442,1)
(3113,8891,1)
(3197,8503,1)
(2093,8245,1)
(7166,5876,1)
(5290,752,1)
(6186,1814,1)
(8712,7515,1)
(5920,2118,1)
(3649,6530,1)
(6184,2284,1)
(8504,8922,1)
(4488,8523,1)
(1824,7615,1)
(9013,7420,1)
(3251,4278,1)
(5350,3320,1)
(8204,4575,1)
(1431,5470,1)
(3717,902,1)
(8303,5669,1)
(1603,6669,1)
(461,1591,1)
(1130,3231,1)
(9150,2328,1)
(8485,3697,1)
(7852,5119,1)
(2144,6521,1)
(978,3277,1)
(4867,2761,1)
(5571,427,1)
(3095,5014,1)
(590,4053,1)
(443,8268,1)
(7678,5061,1)
(901,2400,1)
(1782,5061,1)
(5831,317,1)
(3480,2592,1)
(5269,837,1)
(1471,884,1)
(679,163,1)
(2371,7163,1)
(2074,7474,1)
(7330,3698,1)
(5199,4690,1)
(165,8566,1)
(7195,2357,1)
(3090,1843,1)
(1127,1708,1)
(1993,7583,1)
(8582,258,1)
(9104,5599,1)
(3847,4298,1)
(2182,5528,1)
(6445,4404,1)
(1341,79,1)
(8622,84,1)
(770,2983,1)
(1357,2968,1)
(712,4498,1)
(1168,4382,1)
(4030,4122,1)
(4905,8566,1)
(8200,3781,1)
(6405,6062,1)
(4296,6072,1)
(5903,1237,1)
(7283,1869,1)
(4306,3095,1)
(289,860,1)
(1645,8566,1)
(4173,2050,1)
(5242,7534,1)
(2887,8105,1)
(6932,544,1)
(5683,1562,1)
(7239,985,1)
(4847,8566,1)
(5201,7254,1)
(2509,280,1)
(1317,8766,1)
(5148,2485,1)
(122,7683,1)
(8215,8138,1)
(8833,80,1)
(7300,2183,1)
(8123,6423,1)
(796,4217,1)
(2653,8579,1)
(6977,3960,1)
(3897,340,1)
(3596,4414,1)
(5877,2075,1)
(1070,8334,1)
(1072,4660,1)
(1796,127,1)
(4542,1666,1)
(2317,1534,1)
(7158,3826,1)
(1966,8385,1)
(1432,470,1)
(1622,2319,1)
(266,6410,1)
(1245,5061,1)
(6627,941,1)
(6675,1996,1)
(6920,6878,1)
(5408,5066,1)
(152,8341,1)
(8002,3872,1)
(5960,5061,1)
(1474,6611,1)
(3202,3388,1)
(1961,6941,1)
(7550,5878,1)
(794,8447,1)
(3413,1192,1)
(9113,1217,1)
(8045,2960,1)
(8841,7819,1)
(2864,7328,1)
(7644,7878,1)
(4432,1333,1)
(6316,7523,1)
(3244,7890,1)
(7296,821,1)
(5361,656,1)
(823,6760,1)
(9136,6476,1)
(1384,5411,1)
(549,3939,1)
(1356,4173,1)
(6805,5169,1)
(5148,876,1)
(6347,6092,2)
(7419,8652,2)
(7174,808,2)
(5508,6774,2)
(7472,7894,2)
(6977,2443,2)
(1949,5610,2)
(1013,8566,2)
(7141,5061,2)
(4671,3516,2)
(8439,6524,2)
(4457,8566,2)
(6892,8841,2)
(7139,4182,2)
(2477,2614,2)
(5435,8564,2)
(7229,3376,2)
(4622,2074,2)
(352,8473,2)
(8024,7895,2)
(1747,5061,2)
(891,5061,2)
(1439,2005,2)
(3943,7823,2)
(8191,6682,2)
(2361,1686,2)
(4956,7199,2)
(555,7088,2)
(944,5222,2)
(901,65,2)
(829,258,2)
(2672,5228,2)
(3563,3879,2)
(3229,7624,2)
(8757,2069,2)
(7227,3858,2)
(619,5937,2)
(2693,177,2)
(1327,3911,2)
(8379,6712,2)
(7855,2318,2)
(2433,644,2)
(8403,8566,2)
(3955,8706,2)
(1603,6669,2)
(8372,8601,2)
(821,8601,2)
(6874,2399,2)
(8758,8024,2)
(6409,7920,2)
(2636,7343,2)
(2864,488,2)
(5080,6561,2)
(4498,1277,2)
(2601,3376,2)
(388,6932,2)
(7027,6033,2)
(5270,2074,2)
(8786,1066,2)
(3130,7521,2)
(8833,80,2)
(3156,312,2)
(3333,6986,2)
(4842,1757,2)
(257,8566,2)
(7019,3815,2)
(7206,3202,2)
(6279,258,2)
(9000,1686,2)
(4521,4678,2)
(401,6768,2)
(2231,8566,2)
(6958,7224,2)
(6220,5063,2)
(4332,2975,2)
(143,4011,2)
(4899,1575,2)
(3453,7123,2)
(1329,1499,2)
(1459,4481,2)
(1979,2577,2)
(8997,974,2)
(2039,3147,2)
(4013,5905,2)
(2765,1850,2)
(6229,3005,2)
(6741,8566,2)
(6069,4071,2)
(2752,2975,2)
(7108,795,2)
(1883,8101,2)
(6432,926,2)
(8343,205,2)
(3253,5058,2)
(3791,2420,2)
(4849,3590,2)
(7429,5061,2)
(7207,5905,2)
(4606,2938,2)
(8228,6977,2)
(5151,4393,2)
(4707,2577,2)
(9038,7410,2)
(5721,930,2)
(6901,3806,2)
(2398,2976,2)
(3728,3204,2)
(4248,5241,2)
(3043,2165,2)
(3328,6977,2)
(6150,3861,2)
(702,379,2)
(6056,3231,2)
(3390,5791,2)
(8671,3376,2)
(4446,3694,2)
(1343,1386,2)
(5570,3815,2)
(2321,5610,2)
(4439,933,2)
(7895,7564,2)
(1879,7819,2)
(3054,1306,2)
(2445,9102,2)
(7217,554,2)
(7241,7727,2)
(5865,500,2)
(3560,4755,2)
(792,5061,2)
(3000,631,2)
(5248,1993,2)
(5663,1658,2)
(101,6968,2)
(636,6092,2)
(3015,3376,2)
(5645,3694,2)
(7827,3605,2)
(2224,5937,2)
(5548,2069,2)
(1406,8281,2)
(8487,6768,2)
(1795,8009,2)
(6031,3376,2)
(7432,3516,2)
(6999,3516,2)
(3078,2938,2)
(3821,1373,2)
(5553,1686,2)
(960,5061,2)
(248,7174,2)
(1683,901,2)
(8651,6634,2)
(7964,3376,2)
(2863,6817,2)
(5114,1524,2)
(297,2594,2)
(484,3376,2)
(399,7113,2)
(7433,7211,2)
(8352,3333,2)
(1128,2268,2)
(3148,5165,2)
(2155,8054,2)
(5819,8107,2)
(2499,8159,2)
(8737,8566,2)
(4578,9022,2)
(7773,4070,2)
(4873,7499,2)
(821,8566,2)
(926,1984,2)
(8875,3219,2)
(1562,3005,2)
(2814,3156,2)
(2960,5869,2)
(2220,5061,2)
(5475,3219,2)
(2318,1045,2)
(3043,4400,2)
(29,8945,2)
(7573,7113,2)
(6367,3830,2)
(3458,8601,2)
(6162,3879,2)
(2025,8566,2)
(6210,9003,2)
(7349,7462,2)
(1952,4174,2)
(1712,5110,2)
(232,4656,2)
(2645,2511,2)
(4365,5061,2)
(5653,3879,2)
(7170,7410,2)
(619,3381,2)
(9122,5061,2)
(521,8540,2)
(3454,5061,2)
(8345,1263,2)
(7717,3134,2)
(3670,8566,2)
(5860,181,2)
(7110,8012,2)
(8931,5220,2)
(8360,5222,2)
(7016,4011,2)
(9087,5591,2)
(8098,8382,2)
(7829,7894,2)
(1566,5061,2)
(9108,3381,2)
(6972,1284,2)
(454,3694,2)
(6222,7986,2)
(7296,821,2)
(2605,5642,2)
(3528,258,2)
(1148,7467,2)
(2845,1974,2)
(4158,5905,2)
(3437,2496,2)
(5164,8573,2)
(3231,7358,2)
(4497,6069,2)
(707,8566,2)
(954,5905,2)
(1071,8107,2)
(1954,7283,2)
(343,5061,2)
(3583,8566,2)
(3620,7034,2)
(7749,644,2)
(5155,4766,2)
(2634,643,2)
(6521,7046,2)
(6106,5061,2)
(4061,4656,2)
(5401,7462,2)
(6988,4808,2)
(7351,6669,2)
(702,5588,2)
(975,6669,2)
(5680,3156,2)
(585,8566,2)
(4700,1474,2)
(7560,3879,2)
(6692,4123,2)
(5096,5905,2)
(4334,765,2)
(7085,9002,2)
(4170,6637,2)
(5636,2062,2)
(2526,1302,2)
(4926,3376,2)
(6194,1064,2)
(1463,9003,2)
(6931,8450,2)
(8019,1064,2)
(6605,4806,2)
(814,8009,2)
(6202,6435,2)
(5458,1165,2)
(3670,6867,2)
(5614,6737,2)
(2414,5058,2)
(761,3521,2)
(8095,5061,2)
(8642,4534,2)
(7625,5767,2)
(5010,1125,2)
(7020,6637,2)
(6614,4623,2)
(8960,5061,2)
(6452,1039,2)
(2637,3376,2)
(4755,2515,2)
(2375,4089,2)
(2589,3879,2)
(4834,7472,2)
(8259,6435,2)
(5802,7070,2)
(8855,7523,2)
(6203,737,2)
(5191,3217,2)
(743,933,2)
(1266,2973,2)
(7253,9024,2)
(7779,3925,2)
(5318,7235,2)
(9085,806,2)
(7853,7053,2)
(4780,4346,2)
(5039,5061,2)
(5683,1562,2)
(2152,7034,2)
(6479,2241,2)
(6191,3383,2)
(3437,6276,2)
(4745,3148,2)
(7481,8601,2)
(671,258,2)
(2888,9140,2)
(7559,3376,2)
(1913,2005,2)
(434,700,2)
(2835,2663,2)
(4606,5937,2)
(255,5450,2)
(8652,1031,2)
(6511,398,2)
(5305,6840,2)
(7377,3927,2)
(4991,4279,2)
(8552,7821,2)
(8498,4656,2)
(5823,9003,2)
(4653,1284,2)
(6658,4134,2)
(1899,5956,2)
(1686,1208,2)
(8264,1297,2)
(6623,8520,2)
(3124,6382,2)
(8506,7145,2)
(8439,2461,2)
(3472,3638,2)
(7593,3505,2)
(3249,2344,2)
(5543,7034,2)
(4383,2443,2)
(4939,5789,2)
(4463,4921,2)
(138,1834,2)
(7532,2992,2)
(6155,3879,2)
(8255,8566,2)
(1613,4642,2)
(5135,6900,2)
(3432,5610,2)
(438,219,2)
(7833,1974,2)
(7437,266,2)
(2492,3376,2)
(8249,4656,2)
(1190,644,2)
(1705,4481,2)
(556,1412,2)
(1361,1876,2)
(2325,2716,2)
(4834,6421,2)
(2214,234,2)
(1976,5962,2)
(6440,3711,2)
(7754,5231,2)
(9113,3376,2)
(9078,6935,2)
(393,3953,2)
(6228,6677,2)
(7525,3915,2)
(3526,6380,2)
(8650,9036,2)
(8133,3879,2)
(7414,2375,2)
(2922,7120,2)
(2867,4929,2)
(2016,1939,2)
(917,5912,2)
(9096,6817,2)
(3844,4264,2)
(595,5061,2)
(2820,3354,2)
(5595,7201,2)
(6275,6442,2)
(1403,8244,2)
(73,1468,2)
(1636,4198,2)
(8102,3879,2)
(3201,8924,2)
(2088,1069,2)
(3893,2116,2)
(1293,6359,2)
(8245,2938,2)
(3772,118,2)
(1370,5061,2)
(1251,7046,2)
(5148,7326,2)
(2202,5326,2)
(8152,6748,2)
(7178,3566,2)
(6894,9150,2)
(1371,6524,2)
(4645,4238,2)
(6095,302,2)
(8232,6643,2)
(4389,6435,2)
(7700,153,2)
(8486,837,2)
(5640,8566,2)
(1296,3376,2)
(3339,3521,2)
(4805,7283,2)
(383,8863,2)
(4696,7821,2)
(7755,1284,2)
(9106,6272,2)
(1025,6571,2)
(4311,7430,2)
(6566,952,2)
(1053,3096,2)
(5201,7053,2)
(8358,554,2)
(351,6817,2)
(6852,8206,2)
(2255,1963,2)
(6271,4299,2)
(6888,4902,2)
(7949,5061,2)
(1874,3376,2)
(8265,4501,2)
(9047,4346,2)
(3806,2069,2)
(6646,8292,2)
(2990,65,2)
(7185,5061,2)
(7474,8670,2)
(3042,258,2)
(3937,1686,2)
(3410,5741,2)
(886,3397,2)
(3515,765,2)
(4444,930,2)
(3432,5061,2)
(7823,7437,2)
(8601,7450,2)
(1172,3376,2)
(6265,8504,2)
(4552,3516,2)
(2210,8566,2)
(5075,7271,2)
(3294,899,2)
(7708,1246,2)
(8424,8071,2)
(518,4347,2)
(7113,5724,2)
(7118,7284,2)
(1613,7358,2)
(453,9002,2)
(8956,496,2)
(6580,3381,2)
(6284,6069,2)
(3721,3590,2)
(4273,7174,2)
(3209,1757,2)
(6157,5061,2)
(8523,3354,2)
(2942,4902,2)
(3172,7499,2)
(1931,1474,2)
(6708,2938,2)
(1067,7649,2)
(8698,3354,2)
(4689,5072,2)
(2573,5937,2)
(3508,2577,2)
(9136,8966,2)
(6452,8558,2)
(4109,5771,2)
(4996,3376,2)
(3852,1775,2)
(2188,3148,2)
(5194,7222,2)
(7368,6674,2)
(6791,2938,2)
(286,1125,2)
(3730,1192,2)
(6584,4070,2)
(4681,554,2)
(1023,5058,2)
(8662,3148,2)
(1681,5441,2)
(3055,8793,2)
(4369,8566,2)
(8004,7343,2)
(737,4808,2)
(3037,2515,2)
(3335,8566,2)
(2457,2485,2)
(2491,2033,2)
(7206,4134,2)
(6684,4952,2)
(6738,2577,2)
(3166,3707,2)
(3944,5061,2)
(6262,7821,2)
(4097,974,2)
(3756,2271,2)
(4933,6977,2)
(7849,4642,2)
(268,2497,2)
(1086,3879,2)
(6087,851,2)
(3700,3694,2)
(4710,5873,2)
(6496,3374,2)
(167,3333,2)
(2805,4123,2)
(2212,4375,2)
(6596,4929,2)
(4412,6746,2)
(2908,8827,2)
(8874,3163,2)
(977,9150,2)
(3944,8865,2)
(6777,6621,2)
(905,7920,2)
(176,5129,2)
(6593,7231,2)
(8817,7727,2)
(3955,5065,2)
(8960,5937,2)
(60,7682,2)
(7488,1284,2)
(6255,6712,2)
(544,2737,2)
(7536,7727,2)
(6213,3694,2)
(1981,8566,2)
(7976,5061,2)
(5799,8566,2)
(4015,9003,2)
(6037,4534,2)
(8428,2069,2)
(7228,5061,2)
(6151,2212,2)
(9121,6901,2)
(1191,8986,2)
(1839,8333,2)
(31,2443,2)
(2253,5741,2)
(2090,2577,2)
(6856,6524,2)
(4076,6069,2)
(2929,297,2)
(4551,5403,2)
(4724,181,2)
(1105,6621,2)
(5419,7521,2)
(5354,8281,2)
(6348,401,2)
(2911,8924,2)
(2112,3584,2)
(7646,5503,2)
(1963,5899,2)
(3937,7572,2)
(5291,7894,2)
(2691,6405,2)
(5231,7874,2)
(3939,7497,2)
(2975,2241,2)
(8508,3035,2)
(9104,4304,2)
(8515,3516,2)
(2627,3516,2)
(5515,1683,2)
(5167,5403,2)
(2040,4299,2)
(6315,3815,2)
(4264,6030,2)
(170,230,2)
(6696,3879,2)
(3805,2975,2)
(8658,2534,2)
(3627,4902,2)
(6761,4524,2)
(8144,5440,2)
(5936,5165,2)
(3852,2662,2)
(2894,1263,2)
(2099,3376,2)
(4214,8566,2)
(6378,3354,2)
(766,45,2)
(714,3879,2)
(2485,6501,2)
(1324,1782,2)
(153,7127,2)
(2662,1775,2)
(852,5061,2)
(5057,5119,2)
(4172,576,2)
(1042,1762,2)
(2991,7088,2)
(3989,3383,2)
(3801,1686,2)
(3288,7518,2)
(1604,1686,2)
(1652,4263,2)
(3970,8047,2)
(9028,3376,2)
(1796,5905,2)
(4837,837,2)
(8592,4123,2)
(4664,8566,2)
(1665,5061,2)
(6543,3354,2)
(1981,5061,2)
(5625,3274,2)
(7065,7636,2)
(8689,3879,2)
(6573,1246,2)
(1116,7241,2)
(4176,5610,2)
(4097,3005,2)
(6175,6513,2)
(8330,8353,2)
(8683,2344,2)
(3570,3376,2)
(7258,3005,2)
(2251,6977,2)
(3899,5141,2)
(1524,8566,2)
(1497,7934,2)
(6952,2359,2)
(8409,3376,2)
(401,2544,2)
(7728,5231,2)
(2263,7624,2)
(7046,9027,2)
(3575,7201,2)
(5385,1179,2)
(3211,5222,2)
(3195,2399,2)
(5842,5899,2)
(2758,7088,2)
(2077,3590,2)
(2379,6069,2)
(8681,3694,2)
(1665,5937,2)
(5572,2014,2)
(2513,8913,2)
(1375,8321,2)
(2645,2496,2)
(5979,8566,2)
(3675,9003,2)
(6346,7920,2)
(2157,4469,2)
(3865,6594,2)
(496,8240,2)
(6807,4299,2)
(1454,6791,2)
(2376,700,2)
(857,8566,2)
(5832,3879,2)
(2457,1866,2)
(5720,631,2)
(5148,3600,2)
(4942,7942,2)
(5308,9140,2)
(8180,8487,2)
(4303,2015,2)
(122,7683,2)
(1735,4134,2)
(1641,6206,2)
(4246,3299,2)
(4114,5061,2)
(3239,6868,2)
(3191,857,2)
(1542,4623,2)
(5306,8670,2)
(6144,6214,2)
(477,8042,2)
(2281,2906,2)
(8509,1038,2)
(8089,4501,2)
(5738,9087,2)
(4973,2769,2)
(4284,3333,2)
(5605,1490,2)
(5547,5231,2)
(2254,795,2)
(5706,8566,2)
(924,5789,2)
(6746,258,2)
(6725,2468,2)
(7845,7343,2)
(3120,2577,2)
(7938,8281,2)
(1565,1686,2)
(5494,8841,2)
(2583,9009,2)
(3380,5403,2)
(6747,7942,2)
(6509,2276,2)
(3181,6977,2)
(2645,7878,2)
(3356,97,2)
(595,3333,2)
(105,281,2)
(4992,8634,2)
(1797,7046,2)
(6533,321,2)
(3260,4529,2)
(6410,7034,2)
(1495,3376,2)
(4048,4238,2)
(9134,5061,2)
(4702,5450,2)
(6892,4612,2)
(7849,2165,2)
(5817,9003,2)
(8330,2069,2)
(8433,3879,2)
(7183,8601,2)
(3118,3376,2)
(3665,14,2)
(6921,6986,2)
(4840,554,2)
(2110,3593,2)
(5729,7343,2)
(8488,5905,2)
(2584,7326,2)
(2326,212,2)
(3321,2443,2)
(843,5791,2)
(7649,6669,2)
(6947,6370,2)
(8834,7053,2)
(931,2938,2)
(8605,6602,2)
(7418,3376,2)
(6233,5820,2)
(2431,4534,2)
(7066,350,2)
(5766,4534,2)
(5698,6069,2)
(1592,3376,2)
(7822,4134,2)
(7439,8924,2)
(4720,4001,2)
(6452,7845,2)
(8631,3376,2)
(4386,2273,2)
(3955,1613,2)
(6090,5891,2)
(1374,7776,2)
(256,7962,2)
(8536,5429,2)
(1006,2614,2)
(2557,2452,2)
(7128,5061,2)
(7031,5220,2)
(4888,4401,2)
(5328,4656,2)
(7360,8102,2)
(8764,8227,2)
(4106,5591,2)
(5156,6977,2)
(4412,2464,2)
(5299,7343,2)
(4512,3376,2)
(437,7163,2)
(2609,3715,2)
(1619,3061,2)
(7241,4695,2)
(7254,7053,2)
(9001,5958,2)
(8089,8566,2)
(5148,5017,2)
(7613,3217,2)
(6289,4656,2)
(3588,6082,2)
(1534,5061,2)
(8181,1263,2)
(5467,6817,2)
(8460,2938,2)
(5211,1237,2)
(7813,6932,2)
(8282,2577,2)
(3224,2114,2)
(6442,2443,2)
(6940,4902,2)
(6891,5135,2)
(1327,8579,2)
(6756,570,2)
(5997,3879,2)
(2176,5937,2)
(5154,7618,2)
(2153,6977,2)
(3308,5741,2)
(70,5905,2)
(3979,1066,2)
(3400,7462,2)
(3633,1686,2)
(4475,8670,2)
(7710,8863,2)
(2266,8651,2)
(6270,8566,2)
(7292,2429,2)
(5927,5061,2)
(8162,8653,2)
(2663,8566,2)
(530,3376,2)
(2600,1142,2)
(1750,5767,2)
(9104,4342,2)
(1736,5570,2)
(1724,4451,2)
(1244,6371,2)
(2127,8670,2)
(2396,1851,2)
(5417,8311,2)
(4716,2906,2)
(2141,711,2)
(9155,4929,2)
(2293,4299,2)
(147,4902,2)
(2584,4864,2)
(4325,2577,2)
(280,8423,2)
(1194,6082,2)
(7136,7805,2)
(5250,4602,2)
(881,4902,2)
(3800,2069,2)
(2789,7053,2)
(7050,8652,2)
(1004,3333,2)
(4072,2577,2)
(6984,8521,2)
(1957,379,2)
(4330,7794,2)
(4663,1053,2)
(870,6977,2)
(4951,2178,2)
(6751,3879,2)
(2864,6435,2)
(7356,4534,2)
(8303,3963,2)
(3873,4070,2)
(9014,6037,2)
(658,2808,2)
(5189,216,2)
(264,2069,2)
(4652,1958,2)
(3235,3219,2)
(3024,3376,2)
(4706,1263,2)
(8216,8292,2)
(6680,3026,2)
(1214,1237,2)
(1044,5702,2)
(7506,2235,2)
(6529,2262,2)
(5602,4803,2)
(8393,2577,2)
(4561,1246,2)
(4413,7895,2)
(7585,3116,2)
(339,152,2)
(8519,4393,2)
(8481,8464,2)
(2553,8101,2)
(466,2445,2)
(602,5905,2)
(6923,6869,2)
(8480,8670,2)
(937,9150,2)
(8835,5450,2)
(6180,7343,2)
(3825,302,2)
(3001,683,2)
(488,5462,2)
(7227,4070,2)
(5187,5873,2)
(8968,9036,2)
(990,5610,2)
(62,1131,2)
(8586,6069,2)
(4429,3376,2)
(5059,3879,2)
(6112,65,2)
(658,1775,2)
(7450,1606,2)
(950,6637,2)
(3322,9119,2)
(9135,3516,2)
(561,5450,2)
(6592,8566,2)
(3361,8566,2)
(1366,4011,2)
(7458,1596,2)
(6463,2599,2)
(8497,9150,2)
(8474,5403,2)
(406,3376,2)
(4827,6486,2)
(2491,350,2)
(3105,5741,2)
(6182,8566,2)
(5664,7088,2)
(1762,7343,2)
(3140,8566,2)
(371,5363,2)
(3085,1673,2)
(2199,4603,2)
(7418,5061,2)
(2797,700,2)
(2747,8960,2)
(152,1246,2)
(1710,4346,2)
(1166,6033,2)
(1587,3148,2)
(5237,6041,2)
(1157,6900,2)
(7454,7174,2)
(502,3879,2)
(7174,299,2)
(6554,9003,2)
(7957,2614,2)
(5641,1271,2)
(4976,1151,2)
(4511,2069,2)
(3956,7283,2)
(8094,4238,2)
(3622,631,2)
(7751,127,2)
(4810,7283,2)
(896,4952,2)
(7437,4620,2)
(1419,7949,2)
(8049,960,2)
(9104,2887,2)
(9074,1984,2)
(119,8334,2)
(5433,2577,2)
(4209,3231,2)
(317,773,2)
(4862,5231,2)
(4973,5844,2)
(1224,8566,2)
(7159,3383,2)
(2984,1983,2)
(4755,1636,2)
(1051,6255,2)
(7976,1974,2)
(7080,3135,2)
(6463,2577,2)
(7639,8042,2)
(1773,7145,2)
(5121,5061,2)
(5564,5905,2)
(901,982,2)
(6520,8566,2)
(1947,2906,2)
(4101,3879,2)
(231,3381,2)
(6343,1830,2)
(5624,5061,2)
(5507,7727,2)
(398,2262,2)
(7121,4761,2)
(9136,2485,2)
(8166,3767,2)
(1466,6768,2)
(4019,5873,2)
(4446,5787,2)
(7369,926,2)
(986,3376,2)
(4217,8079,2)
(8589,6859,2)
(3092,8848,2)
(2231,837,2)
(7580,9150,2)
(5527,8566,2)
(8569,8928,2)
(1181,655,2)
(2025,9002,2)
(9104,7425,2)
(8359,65,2)
(424,4501,2)
(3196,5061,2)
(2978,1571,2)
(6170,8730,2)
(4946,765,2)
(5634,6869,2)
(2731,5857,2)
(3768,5403,2)
(6823,5610,2)
(5197,895,2)
(6719,8566,2)
(7410,7727,2)
(3367,4238,2)
(7915,5220,2)
(5984,2069,2)
(1606,6653,2)
(1306,6605,2)
(4638,3584,2)
(3291,7410,2)
(2247,3035,2)
(4393,7250,2)
(5774,3374,2)
(6215,5905,2)
(2262,3354,2)
(3921,5061,2)
(3759,3879,2)
(6916,8601,2)
(8655,930,2)
(1373,5061,2)
(2850,2998,2)
(184,65,2)
(7857,1834,2)
(1246,7727,2)
(3819,2399,2)
(8211,4656,2)
(1080,1974,2)
(3885,219,2)
(1880,7029,2)
(2612,3374,2)
(5696,5061,2)
(6440,655,2)
(5559,7191,2)
(3880,3630,2)
(618,4534,2)
(3143,7034,2)
(8177,6817,2)
(7203,4501,2)
(1321,4396,2)
(8456,1110,2)
(7098,7727,2)
(584,5481,2)
(2402,7029,2)
(1775,2388,2)
(6892,8291,2)
(3939,2577,2)
(1278,7727,2)
(6887,5061,2)
(6769,2005,2)
(3955,5744,2)
(3063,700,2)
(7966,8566,2)
(8220,2058,2)
(8206,3329,2)
(1244,8294,2)
(7390,7482,2)
(1235,3376,2)
(3684,5058,2)
(7443,6768,2)
(2811,3134,2)
(7122,3376,2)
(7105,401,2)
(479,5692,2)
(8002,765,2)
(1840,3879,2)
(657,8792,2)
(6597,6817,2)
(3113,7027,2)
(7409,9003,2)
(1507,7116,2)
(5747,2074,2)
(1674,5397,2)
(5523,4451,2)
(6566,2165,2)
(3748,8441,2)
(8430,6370,2)
(33,4279,2)
(6248,6977,2)
(9118,3376,2)
(5092,5165,2)
(5873,8409,2)
(4619,5901,2)
(2164,8566,2)
(5492,5962,2)
(2392,5363,2)
(2844,2975,2)
(3899,560,2)
(3106,2443,2)
(3944,8566,2)
(1240,2464,2)
(7523,2777,2)
(7508,8272,2)
(2591,4,2)
(1114,3879,2)
(1859,4129,2)
(7048,5061,2)
(4848,4279,2)
(3874,8590,2)
(2478,3376,2)
(2042,5905,2)
(6341,3134,2)
(3043,7962,2)
(4503,7343,2)
(2637,6314,2)
(1842,3148,2)
(7445,9003,2)
(1094,851,2)
(2017,3711,2)
(2929,992,2)
(7301,5061,2)
(7896,8913,2)
(6346,3560,2)
(5148,876,2)
(531,65,2)
(2622,5591,2)
(1332,5231,2)
(6225,926,2)
(5074,7727,2)
(5337,6817,2)
(9054,5061,2)
(2015,6637,2)
(2882,2614,2)
(4433,6621,2)
(165,8566,2)
(1989,1937,2)
(8676,7805,2)
(2795,2938,2)
(7418,8566,2)
(733,837,2)
(6172,3694,2)
(2514,7284,2)
(8616,3879,2)
(7070,1317,2)
(5464,6897,2)
(8185,3584,2)
(2764,3879,2)
(4907,837,2)
(5855,234,2)
(7331,2938,2)
(1437,1600,2)
(972,2888,2)
(3917,9003,2)
(6131,6260,2)
(3863,1937,2)
(5833,2906,2)
(1394,7410,2)
(7373,251,2)
(3822,3967,2)
(6447,5164,2)
(1225,978,2)
(6852,7243,2)
(3318,5032,2)
(1085,1689,2)
(7569,2461,2)
(8053,3675,2)
(374,5905,2)
(7141,5937,2)
(4856,2399,2)
(3471,5378,2)
(5558,9149,2)
(2237,6900,2)
(3950,1934,2)
(140,5656,2)
(8522,5869,2)
(6334,7942,2)
(4549,1937,2)
(2906,3366,2)
(2235,8566,2)
(3897,340,2)
(6468,5905,2)
(889,2998,2)
(1801,3879,2)
(8860,9002,2)
(8410,379,2)
(3341,7942,2)
(6061,9002,2)
(1951,401,2)
(6157,8566,2)
(2339,8566,2)
(6208,5129,2)
(7284,1693,2)
(5873,4701,2)
(6566,1071,2)
(6812,5109,2)
(2166,4306,2)
(7383,1176,2)
(619,8566,2)
(716,3376,2)
(525,5135,2)
(3110,5591,2)
(5877,2075,2)
(5019,7113,2)
(3518,8652,2)
(2005,1284,2)
(2889,4952,2)
(7931,1284,2)
(4292,2823,2)
(1262,1774,2)
(1782,7964,2)
(3806,2166,2)
(8460,5619,2)
(5582,2069,2)
(7334,4902,2)
(8514,6360,2)
(3942,2509,2)
(6920,3879,2)
(7063,4070,2)
(8688,1822,2)
(3822,4908,2)
(6223,8564,2)
(6857,6213,2)
(3767,3304,2)
(1350,8924,2)
(892,795,2)
(3626,8566,2)
(7792,3376,2)
(2593,315,2)
(4515,1876,2)
(6050,7666,2)
(1373,2614,2)
(6322,7624,2)
(6452,8520,2)
(6631,2906,2)
(6918,6621,2)
(8358,635,2)
(5972,1532,2)
(7326,8566,2)
(8375,5061,2)
(2539,4534,2)
(8152,4011,2)
(4602,7088,2)
(8848,4981,2)
(413,4941,2)
(8207,2561,2)
(8236,153,2)
(4,2278,2)
(5532,1262,2)
(1512,5057,2)
(4859,5061,2)
(6653,5640,2)
(7482,3996,2)
(3632,6977,2)
(6541,5602,2)
(8574,3376,2)
(6354,765,2)
(6261,8885,2)
(3625,62,2)
(8117,3381,2)
(4874,8558,2)
(2132,6679,2)
(6382,2837,2)
(256,4304,2)
(2967,6272,2)
(7846,9024,2)
(6321,7708,2)
(4181,2751,2)
(6881,8653,2)
(2019,2396,2)
(4951,8863,2)
(6681,2019,2)
(4689,3649,2)
(2261,5061,2)
(1919,1388,2)
(1243,350,2)
(514,3376,2)
(1909,3815,2)
(762,3963,2)
(1077,5766,2)
(5165,3970,2)
(3149,5481,2)
(5339,3376,2)
(1390,1474,2)
(7119,8566,2)
(7745,5873,2)
(3737,1532,2)
(2462,339,2)
(7708,1411,2)
(1402,728,2)
(4187,4524,2)
(2252,9150,2)
(3974,5108,2)
(1217,3376,2)
(2285,4279,2)
(3248,3879,2)
(7462,4297,2)
(2072,262,2)
(2340,8566,2)
(336,2019,2)
(9104,2165,2)
(8558,1390,2)
(4393,8670,2)
(6518,2399,2)
(6519,3354,2)
(1449,8670,2)
(8083,4393,2)
(3815,2468,2)
(1184,8566,2)
(9105,2344,2)
(3894,7853,2)
(5587,8841,2)
(3683,5468,2)
(5965,33,2)
(5801,3061,2)
(367,8107,2)
(1256,4337,2)
(728,5528,2)
(5472,2048,2)
(1112,2074,2)
(8163,5220,2)
(5690,3061,2)
(6141,2005,2)
(2467,4169,2)
(5538,4529,2)
(3133,3711,2)
(3398,2278,2)
(2997,5731,2)
(6237,3815,2)
(4280,5791,2)
(5235,8460,2)
(161,8601,2)
(5105,6127,2)
(6228,6730,2)
(7278,7410,2)
(4857,3376,2)
(3905,5061,2)
(122,6536,2)
(4401,3376,2)
(6115,7224,2)
(812,5610,2)
(7344,5741,2)
(2847,5791,2)
(416,7088,2)
(1458,5287,2)
(6193,5962,2)
(8752,8601,2)
(1317,5061,2)
(6906,2069,2)
(2137,8566,2)
(39,7150,2)
(4686,1263,2)
(3850,6859,2)
(61,3376,2)
(6865,5591,2)
(8790,1808,2)
(5891,8227,2)
(4786,1843,2)
(2608,177,2)
(3614,7067,2)
(8483,6669,2)
(3875,8936,2)
(8791,328,2)
(6832,933,2)
(4697,5286,2)
(824,933,2)
(2822,5061,2)
(6162,3436,2)
(1485,7587,2)
(4546,1785,2)
(6461,6359,2)
(2111,5165,2)
(572,3376,2)
(7770,2467,2)
(8635,6069,2)
(4530,7468,2)
(4463,20,2)
(1386,7410,2)
(6486,5061,2)
(3428,3376,2)
(1657,3376,2)
(476,3354,2)
(3110,6033,2)
(6782,3376,2)
(6383,5835,2)
(5737,7283,2)
(1967,9024,2)
(5902,4604,2)
(5507,2241,2)
(3169,3670,2)
(7809,7235,2)
(8335,7521,2)
(8341,1246,2)
(2850,7942,2)
(1278,3148,2)
(8972,5061,2)
(6785,7088,2)
(4601,8042,2)
(1447,5981,2)
(2278,2577,2)
(5981,2420,2)
(7170,258,2)
(2123,5835,2)
(7083,6260,2)
(6014,7113,2)
(2584,2768,2)
(4360,3590,2)
(2136,2443,2)
(4866,7587,2)
(3755,7894,2)
(4039,7610,2)
(4872,4902,2)
(7776,65,2)
(1440,7727,2)
(3940,4656,2)
(5278,1571,2)
(5239,8566,2)
(7165,7201,2)
(3712,1636,2)
(6524,8111,2)
(6206,8601,2)
(2988,1263,2)
(6333,8396,2)
(8218,6977,2)
(8885,8601,2)
(5863,1686,2)
(4587,2614,2)
(9065,1125,2)
(5224,4930,2)
(5113,5791,2)
(6269,6434,2)
(4427,3584,2)
(6485,1532,2)
(7514,2345,2)
(2460,6023,2)
(1794,4129,2)
(4353,3376,2)
(5396,3376,2)
(5786,6033,2)
(982,1499,2)
(325,2922,2)
(3459,897,2)
(6677,3717,2)
(4215,926,2)
(4947,8566,2)
(529,795,2)
(4006,4524,2)
(5065,2496,2)
(4395,2477,2)
(2130,8596,2)
(2502,4070,2)
(6281,5061,2)
(8690,6897,2)
(2301,4656,2)
(1284,3516,2)
(295,2245,2)
(2715,5129,2)
(3540,2938,2)
(4892,7283,2)
(5451,7942,2)
(5229,8859,2)
(7083,803,2)
(144,2301,2)
(6542,3219,2)
(352,4057,2)
(1916,6621,2)
(3820,7343,2)
(7816,3879,2)
(1455,795,2)
(7968,1571,2)
(6623,7845,2)
(8250,7410,2)
(1313,1686,2)
(4720,1876,2)
(4004,7174,2)
(4344,4952,2)
(3693,1686,2)
(7550,2069,2)
(736,4882,2)
(1244,7088,2)
(878,2005,2)
(3768,6159,2)
(8913,8293,2)
(4580,3333,2)
(5371,8701,2)
(5667,5061,2)
(4297,3093,2)
(6558,807,2)
(1200,4902,2)
(1383,837,2)
(959,7410,2)
(404,7088,2)
(5454,7046,2)
(8737,5061,2)
(6249,6730,2)
(1775,1765,2)
(862,4950,2)
(7504,5378,2)
(6255,5061,2)
(80,6248,2)
(6570,5061,2)
(1271,5314,2)
(5005,2043,2)
(873,4263,2)
(4291,3376,2)
(4725,5450,2)
(6186,1814,2)
(145,3383,2)
(9125,5962,2)
(7051,2142,2)
(7897,7700,2)
(7143,8601,2)
(3014,7053,2)
(2265,2461,2)
(8475,5061,2)
(7709,2262,2)
(5739,2577,2)
(652,3879,2)
(8374,45,2)
(5976,5869,2)
(224,4789,2)
(11,3141,2)
(25,6758,2)
(2245,806,2)
(243,130,2)
(6372,737,2)
(2467,3383,2)
(5593,4238,2)
(6440,8885,2)
(7792,3231,2)
(7458,6817,2)
(3911,8863,2)
(1659,5061,2)
(5484,3501,2)
(2580,4403,2)
(6808,2420,2)
(2741,1757,2)
(872,8863,2)
(8082,3443,2)
(4573,8334,2)
(7645,4279,2)
(1641,4600,2)
(1082,3638,2)
(732,8566,2)
(6367,8913,2)
(8297,5061,2)
(672,1760,2)
(2248,4419,2)
(752,8566,2)
(4466,2359,2)
(4248,8924,2)
(7041,276,2)
(8369,4808,2)
(4522,9002,2)
(8138,5129,2)
(2230,7823,2)
(4733,4030,2)
(7818,2206,2)
(3230,6682,2)
(3066,1246,2)
(732,181,2)
(93,8601,2)
(6621,1830,2)
(4281,9150,2)
(5946,3376,2)
(807,8566,2)
(6233,3381,2)
(5644,5084,2)
(2010,2069,2)
(5749,6621,2)
(5253,7462,2)
(5778,3397,2)
(47,1201,2)
(6582,127,2)
(6811,33,2)
(6920,1024,2)
(4908,8852,2)
(5936,700,2)
(712,8564,2)
(3446,3376,2)
(3252,7343,2)
(1093,3376,2)
(3165,4781,2)
(6338,3333,2)
(201,3376,2)
(834,8905,2)
(8878,1306,2)
(4011,4070,2)
(3257,2069,2)
(4199,8566,2)
(5107,6977,2)
(2786,3879,2)
(3792,2805,2)
(8651,7285,2)
(4035,7884,2)
(7649,6157,2)
(5955,8945,2)
(7280,4668,2)
(3402,253,2)
(4982,3376,2)
(5950,7284,2)
(6635,8566,2)
(2273,6237,2)
(4219,5419,2)
(4754,7410,2)
(548,302,2)
(2711,317,2)
(622,5937,2)
(2784,6069,2)
(1030,8566,2)
(8818,1762,2)
(8897,7283,2)
(727,5129,2)
(9122,6669,2)
(1814,4365,2)
(8382,5610,2)
(2092,7805,2)
(7163,3376,2)
(4282,1686,2)
(1902,4607,2)
(244,1284,2)
(186,6730,2)
(4108,6023,2)
(6122,3376,2)
(540,7053,2)
(3203,8549,2)
(764,2461,2)
(1666,8566,2)
(2057,8566,2)
(6510,6260,2)
(7425,8566,2)
(4151,4337,2)
(5979,5061,2)
(5481,294,2)
(7205,5905,2)
(6826,5189,2)
(3437,6340,2)
(5105,1071,2)
(297,2344,2)
(901,4066,2)
(4346,3516,2)
(2142,7482,2)
(9053,6986,2)
(1848,2938,2)
(6418,3376,2)
(3555,2069,2)
(9104,6441,2)
(4500,1271,2)
(2339,5061,2)
(5599,5205,2)
(7986,4123,2)
(8098,5610,2)
(6112,296,2)
(1318,5905,2)
(8383,5519,2)
(7951,1499,2)
(3128,795,2)
(1100,8564,2)
(5943,1598,2)
(2645,7810,2)
(1190,3694,2)
(5132,5061,2)
(9123,3333,2)
(413,6016,2)
(379,1974,2)
(4054,2069,2)
(8750,9150,2)
(5731,5061,2)
(9104,4641,2)
(9104,6129,2)
(2081,3514,2)
(3607,6637,2)
(7374,2375,2)
(8481,2938,2)
(8147,8566,2)
(6313,1670,2)
(7155,216,2)
(3018,4952,2)
(1067,4144,2)
(4243,2906,2)
(4483,8436,2)
(3375,3897,2)
(4984,9150,2)
(7443,3383,2)
(6270,5450,2)
(4687,5061,2)
(8768,2399,2)
(8102,2948,2)
(4150,8670,2)
(5003,4011,2)
(2506,3711,2)
(2086,2074,2)
(7357,5757,2)
(1702,2411,2)
(6847,3376,2)
(2069,3198,2)
(6597,9096,2)
(3420,518,2)
(4778,5652,2)
(6318,6380,2)
(1420,7063,2)
(4138,4129,2)
(2887,127,2)
(4367,3354,2)
(5611,8042,2)
(4680,6897,2)
(1791,4902,2)
(4972,5061,2)
(3068,3222,2)
(7756,9003,2)
(4051,3093,2)
(7329,2443,2)
(5799,5061,2)
(20,5061,2)
(5262,4393,2)
(4524,8030,2)
(3314,2443,2)
(4779,3035,2)
(5351,6631,2)
(2240,7343,2)
(7276,3376,2)
(2210,7894,2)
(4541,8566,2)
(4293,7624,2)
(6892,4248,2)
(8521,1958,2)
(2870,7186,2)
(2139,2496,2)
(7351,3090,2)
(3793,6069,2)
(2308,6580,2)
(2805,3792,2)
(5235,3492,2)
(2165,700,2)
(8136,795,2)
(2744,8467,2)
(2734,234,2)
(3995,8601,2)
(2158,8024,2)
(119,3164,2)
(6406,1974,2)
(2625,7351,2)
(5198,3879,2)
(3588,4652,2)
(4305,7351,2)
(5398,2893,2)
(4431,2938,2)
(890,4808,2)
(4527,3561,2)
(9104,6340,2)
(855,1093,2)
(6609,4501,2)
(4902,5610,2)
(2429,2069,2)
(1075,2984,2)
(6353,5061,2)
(8636,2461,2)
(7700,7370,2)
(2645,8980,2)
(7127,3333,2)
(8960,8566,2)
(5627,8596,2)
(4963,5058,2)
(6393,6082,2)
(4594,1959,2)
(5272,8242,2)
(5468,8566,2)
(8021,994,2)
(2509,401,2)
(697,8928,2)
(169,3590,2)
(1861,3584,2)
(6566,2496,2)
(495,3879,2)
(1255,4656,2)
(8400,6380,2)
(807,5061,2)
(9136,952,2)
(5815,379,2)
(6670,3148,2)
(6227,3477,2)
(8447,2074,2)
(2305,2577,2)
(3407,8566,2)
(5764,8334,2)
(6922,7700,2)
(1842,7388,2)
(2679,6986,2)
(7034,3815,2)
(1807,5484,2)
(6106,8566,2)
(7839,3879,2)
(4154,6621,2)
(3361,3376,2)
(1177,1775,2)
(3530,5220,2)
(5504,3879,2)
(2075,8762,2)
(8542,2033,2)
(1899,9140,2)
(6182,5061,2)
(3303,8741,2)
(3985,5722,2)
(9037,1679,2)
(2791,3590,2)
(6566,4642,2)
(6927,6669,2)
(1827,8601,2)
(8972,8566,2)
(3037,7920,2)
(1279,8566,2)
(4639,2005,2)
(8357,4123,2)
(3875,8725,2)
(5789,4172,2)
(3496,3381,2)
(6566,2870,2)
(3508,8566,2)
(6719,1271,2)
(7087,2975,2)
(7727,1785,2)
(4829,6977,2)
(7196,6977,2)
(772,3374,2)
(5405,5897,2)
(991,1241,2)
(8573,7649,2)
(6105,4057,2)
(7721,8244,2)
(1184,6977,2)
(3266,5165,2)
(5372,7410,2)
(5779,3376,2)
(2645,1071,2)
(7160,9006,2)
(7785,4656,2)
(2863,8566,2)
(2572,3383,2)
(3009,4199,2)
(3437,4642,2)
(6943,3376,2)
(2736,3879,2)
(737,3469,2)
(5439,5061,2)
(2958,7046,2)
(969,1686,2)
(4274,6730,2)
(6823,7410,2)
(332,765,2)
(1429,7053,2)
(8475,2577,2)
(1744,554,2)
(4874,1690,2)
(4640,2938,2)
(3457,6454,2)
(2005,9145,2)
(3390,5061,2)
(5502,3039,2)
(5384,8566,2)
(3457,1768,2)
(6388,8115,2)
(3501,933,2)
(1216,7821,2)
(1272,3134,2)
(7260,1394,2)
(2645,2870,2)
(6623,2834,2)
(5212,4129,2)
(7786,795,2)
(1266,5726,2)
(3274,7609,2)
(8906,5931,2)
(8929,7521,2)
(1457,4902,2)
(4905,5061,2)
(5143,2577,2)
(8985,554,2)
(8199,8670,2)
(5987,315,2)
(753,1757,2)
(5681,4623,2)
(115,4952,2)
(4977,4727,2)
(6911,795,2)
(2632,2747,2)
(6452,795,2)
(4418,5450,2)
(205,5937,2)
(8544,700,2)
(2598,5403,2)
(5687,5676,2)
(4026,6272,2)
(7399,2601,2)
(8549,8077,2)
(1072,3767,2)
(5294,3376,2)
(993,3827,2)
(5677,7283,2)
(4534,1794,2)
(1999,8564,2)
(5009,3806,2)
(7286,8573,2)
(6585,4070,2)
(6455,4817,2)
(8939,1284,2)
(2968,1923,2)
(7694,7343,2)
(7389,2497,2)
(3102,5872,2)
(3744,795,2)
(6062,3376,2)
(162,1783,2)
(7522,1115,2)
(7426,1246,2)
(786,4902,2)
(7311,3879,2)
(7010,3374,2)
(1437,7043,2)
(4010,4292,2)
(3437,2485,2)
(8560,5405,2)
(4930,7053,2)
(1544,6743,2)
(7829,8566,2)
(5664,2836,2)
(7644,5951,2)
(2262,4488,2)
(3544,1681,2)
(1924,8566,2)
(333,3333,2)
(8600,8841,2)
(3735,926,2)
(8514,1917,2)
(4573,5061,2)
(1975,3381,2)
(2273,3815,2)
(9063,3376,2)
(3177,6513,2)
(6062,8566,2)
(5705,2245,2)
(2915,4656,2)
(5122,4727,2)
(6786,4129,2)
(3925,7946,2)
(431,1892,2)
(7888,4963,2)
(3310,3252,2)
(5215,795,2)
(8626,795,2)
(1046,8508,2)
(8717,9003,2)
(2308,9150,2)
(3550,7283,2)
(5334,8433,2)
(5706,5061,2)
(2819,1386,2)
(2813,7343,2)
(1073,5403,2)
(29,1568,2)
(6046,851,2)
(4263,3354,2)
(3185,8566,2)
(8700,1952,2)
(4905,8566,2)
(5588,3202,2)
(5973,7410,2)
(4206,7745,2)
(3920,8841,2)
(6056,3376,2)
(8462,2777,2)
(9104,7733,2)
(7802,3879,2)
(4240,7649,2)
(4913,8924,2)
(273,6435,2)
(5102,2938,2)
(4080,6037,2)
(5410,5061,2)
(3635,4656,2)
(6423,837,2)
(588,65,2)
(8068,5441,2)
(4363,795,2)
(1596,6817,2)
(7,5061,2)
(8232,5430,2)
(7198,8101,2)
(7644,2165,2)
(2793,3711,2)
(518,1093,2)
(9104,1114,2)
(7958,3728,2)
(8658,65,2)
(5894,7358,2)
(3869,3354,2)
(314,6817,2)
(3953,6859,2)
(4103,6082,2)
(8721,8101,2)
(7114,6977,2)
(7684,1246,2)
(3611,5738,2)
(4817,6665,2)
(3972,379,2)
(3840,1924,2)
(247,5791,2)
(351,5061,2)
(3973,8601,2)
(5375,5415,2)
(2645,3592,2)
(8857,8566,2)
(1133,7201,2)
(3919,3590,2)
(901,258,2)
(7015,5061,2)
(3778,1686,2)
(5478,8945,2)
(3231,6127,2)
(2519,8089,2)
(124,3403,2)
(303,7488,2)
(7482,3376,2)
(6942,7587,2)
(7056,8566,2)
(8539,8566,2)
(8688,819,2)
(5013,350,2)
(4095,5791,2)
(1363,644,2)
(8329,3376,2)
(4241,1765,2)
(5141,3445,2)
(5632,3376,2)
(6974,7343,2)
(7768,8924,2)
(257,5061,2)
(8271,8147,2)
(5209,3376,2)
(1702,6855,2)
(7131,7343,2)
(6679,5061,2)
(7699,3584,2)
(8825,5481,2)
(4857,5061,2)
(446,2499,2)
(3990,3584,2)
(728,1743,2)
(3982,7507,2)
(4936,9002,2)
(3583,4347,2)
(1114,2931,2)
(4847,8334,2)
(5252,8566,2)
(3887,6182,2)
(8141,6260,2)
(7967,6730,2)
(3005,8292,2)
(6303,3376,2)
(8496,1984,2)
(3250,5789,2)
(1552,1934,2)
(8951,1474,2)
(3306,3354,2)
(7946,2938,2)
(7868,5061,2)
(3,4299,2)
(4007,2344,2)
(1629,8566,2)
(3844,4883,2)
(4337,5522,2)
(8308,3381,2)
(2036,5791,2)
(63,1343,2)
(2501,7410,2)
(1472,1762,2)
(4846,2614,2)
(5148,6276,2)
(6044,7053,2)
(4861,2273,2)
(7178,7191,2)
(4104,8292,2)
(190,6037,2)
(6647,3879,2)
(7172,5905,2)
(6352,1686,2)
(5110,780,2)
(6799,2577,2)
(4844,4297,2)
(135,3306,2)
(6429,6669,2)
(8621,1246,2)
(1341,3213,2)
(2302,8281,2)
(5744,7425,2)
(5018,7113,2)
(4629,1566,2)
(521,302,2)
(5311,9150,2)
(994,8566,2)
(4233,7398,2)
(6796,3544,2)
(8930,5237,2)
(4429,2741,2)
(7618,4921,2)
(3774,3963,2)
(4432,8009,2)
(797,4501,2)
(4937,4286,2)
(5213,8234,2)
(1852,2805,2)
(3671,7521,2)
(8802,8566,2)
(1681,3148,2)
(7139,45,2)
(5778,8566,2)
(6458,2344,2)
(6045,6967,2)
(2259,8102,2)
(5727,7174,2)
(4195,6272,2)
(2141,2069,2)
(7565,3879,2)
(5074,1246,2)
(4130,1474,2)
(4306,2069,2)
(2728,5061,2)
(3053,5767,2)
(573,3879,2)
(632,297,2)
(3454,8566,2)
(8965,8924,2)
(1944,5791,2)
(1314,8638,2)
(2594,2344,2)
(3461,4213,2)
(3768,4043,2)
(4233,65,2)
(3277,6768,2)
(986,8566,2)
(3427,5725,2)
(5329,5937,2)
(8109,7521,2)
(3383,2188,2)
(9133,2464,2)
(6620,4524,2)
(4128,4050,2)
(2097,5061,2)
(3921,8566,2)
(285,4297,2)
(1467,3333,2)
(318,2069,2)
(3754,8566,2)
(5953,7145,2)
(1920,5610,2)
(5214,5450,2)
(6223,6768,2)
(5132,1686,2)
(6627,941,2)
(3464,6768,2)
(1020,8611,2)
(1748,2420,2)
(1198,3531,2)
(1532,2461,2)
(1970,3376,2)
(7941,7029,2)
(8647,8137,2)
(7516,5061,2)
(6065,8566,2)
(3064,4393,2)
(5726,2692,2)
(5148,8121,2)
(1673,8566,2)
(558,795,2)
(6118,4129,2)
(550,6370,2)
(1098,8601,2)
(8477,5110,2)
(5750,3219,2)
(8253,8865,2)
(8807,7689,2)
(4594,484,2)
(4089,6024,2)
(6925,3376,2)
(2471,3231,2)
(7358,2518,2)
(8674,8566,2)
(603,9022,2)
(1307,3376,2)
(4837,5323,2)
(8175,7425,2)
(1917,8926,2)
(5231,5214,2)
(7354,3376,2)
(3907,4952,2)
(3687,3202,2)
(8885,2081,2)
(5384,5110,2)
(5960,3767,2)
(5694,8989,2)
(1802,7470,2)
(8055,3381,2)
(1741,8244,2)
(7448,4378,2)
(6624,2614,2)
(6936,3376,2)
(6566,1866,2)
(4077,3376,2)
(7851,6370,2)
(1941,2005,2)
(8399,5690,2)
(9136,7358,2)
(5636,6513,2)
(2614,5318,2)
(1110,8083,2)
(1469,8473,2)
(6805,8424,2)
(8444,3005,2)
(1076,2906,2)
(2144,7046,2)
(3854,315,2)
(8138,8566,2)
(4559,7088,2)
(6616,5135,2)
(446,3376,2)
(8441,5110,2)
(8035,2069,2)
(5546,6768,2)
(4882,6069,2)
(2118,2973,2)
(4039,6069,2)
(2291,4070,2)
(2132,8742,2)
(4919,9036,2)
(1781,7821,2)
(2969,8566,2)
(1067,6759,2)
(4623,1686,2)
(1811,5061,2)
(1066,4705,2)
(1579,4292,2)
(1948,3694,2)
(7239,5610,2)
(8011,8670,2)
(4791,2069,2)
(6902,9150,2)
(3217,9034,2)
(3443,8521,2)
(2518,1532,2)
(2975,8297,2)
(1078,4279,2)
(7840,2464,2)
(5343,5061,2)
(4234,1263,2)
(7043,3333,2)
(1239,2344,2)
(2764,7128,2)
(4164,5431,2)
(6065,3376,2)
(4314,9036,2)
(3867,2577,2)
(2918,1093,2)
(5411,875,2)
(1601,5656,2)
(1825,7088,2)
(5743,5061,2)
(3237,8566,2)
(2808,4897,2)
(2738,8566,2)
(2645,2768,2)
(1936,6977,2)
(8108,6986,2)
(1246,5385,2)
(5949,4372,2)
(2749,6272,2)
(3027,3516,2)
(3510,3570,2)
(5656,5692,2)
(7530,5656,2)
(7018,4401,2)
(5128,4567,2)
(5263,438,2)
(2983,5441,2)
(1153,8473,2)
(3475,2262,2)
(5597,7841,2)
(2574,4444,2)
(5085,2938,2)
(6397,8321,2)
(5999,1676,2)
(9059,5450,2)
(4891,8427,2)
(5882,806,2)
(7815,7521,2)
(8519,8566,2)
(7189,7053,2)
(1158,9150,2)
(1390,3150,2)
(1441,6272,2)
(7501,7956,2)
(7100,4478,2)
(434,5061,2)
(2986,6049,2)
(2645,7425,2)
(6339,3879,2)
(8397,5962,2)
(1185,837,2)
(6914,4817,2)
(4251,672,2)
(4991,3051,2)
(989,933,2)
(5113,3390,2)
(457,2262,2)
(4402,3376,2)
(802,7314,2)
(7379,780,2)
(7147,8652,2)
(3113,6033,2)
(1187,8566,2)
(4195,8596,2)
(7814,7462,2)
(5642,258,2)
(4650,3879,2)
(3953,8589,2)
(6706,3376,2)
(5459,5741,2)
(7678,5061,2)
(220,1020,2)
(8364,127,2)
(2481,8499,2)
(8232,5470,2)
(3523,6730,2)
(1924,3231,2)
(6539,9024,2)
(6687,8670,2)
(4239,7046,2)
(875,7624,2)
(6012,2241,2)
(96,3879,2)
(3152,2069,2)
(3433,6093,2)
(9009,5937,2)
(1248,5110,2)
(8508,974,2)
(4816,7294,2)
(4918,4656,2)
(3457,4341,2)
(1201,8566,2)
(2950,3879,2)
(3312,5635,2)
(9136,7962,2)
(1565,5061,2)
(3715,1125,2)
(8824,1386,2)
(8833,5687,2)
(4553,8460,2)
(1613,6340,2)
(4975,2005,2)
(1056,8335,2)
(4809,7023,2)
(5843,2766,2)
(3773,3376,2)
(59,2245,2)
(8895,3711,2)
(4414,3163,2)
(6950,8601,2)
(3524,4070,2)
(6810,236,2)
(4833,14,2)
(1993,181,2)
(7061,4947,2)
(5877,2360,2)
(8157,2019,2)
(6548,3879,2)
(2176,8234,2)
(7489,7283,2)
(1307,5061,2)
(7406,3202,2)
(4020,7034,2)
(6742,5061,2)
(1232,7113,2)
(7049,3934,2)
(2584,2870,2)
(6477,8566,2)
(7589,6621,2)
(779,3110,2)
(8658,713,2)
(8701,5905,2)
(5343,8566,2)
(580,5135,2)
(2447,297,2)
(7648,7135,2)
(4448,3116,2)
(4909,7113,2)
(2745,127,2)
(3043,4642,2)
(1170,4623,2)
(5821,8652,2)
(6427,177,2)
(906,7241,2)
(712,5431,2)
(685,4299,2)
(5385,7727,2)
(2812,4070,2)
(3754,3376,2)
(1254,9003,2)
(6082,236,2)
(4134,8863,2)
(1487,4279,2)
(516,1284,2)
(1550,974,2)
(6257,6082,2)
(5931,1686,2)
(7322,4902,2)
(3488,8566,2)
(2295,7283,2)
(3508,6669,2)
(5701,5397,2)
(3678,1974,2)
(8231,3376,2)
(2645,6340,2)
(556,1529,2)
(4066,982,2)
(7749,3694,2)
(6482,2512,2)
(5693,6817,2)
(5760,5061,2)
(2688,2650,2)
(5906,63,2)
(4303,6041,2)
(5037,8566,2)
(4260,8670,2)
(1282,5061,2)
(1083,2461,2)
(4739,127,2)
(2547,1110,2)
(3794,700,2)
(5318,1902,2)
(3955,9136,2)
(8612,8928,2)
(2973,3374,2)
(6183,8736,2)
(2841,3694,2)
(2946,6033,2)
(7170,2722,2)
(725,63,2)
(6515,6977,2)
(6746,2464,2)
(1097,3009,2)
(1681,700,2)
(7499,5157,2)
(6816,4299,2)
(3606,7088,2)
(4351,6261,2)
(2820,5061,2)
(1550,3005,2)
(5806,2020,2)
(1534,8566,2)
(9108,5937,2)
(6043,2577,2)
(3024,6418,2)
(1040,8841,2)
(3520,2886,2)
(1430,2399,2)
(1067,8244,2)
(7525,4393,2)
(5648,3333,2)
(7330,3354,2)
(9003,4429,2)
(1403,3376,2)
(887,4952,2)
(180,4529,2)
(5701,3482,2)
(1613,952,2)
(1042,3880,2)
(4569,5231,2)
(5710,4902,2)
(5844,65,2)
(6568,1984,2)
(703,3156,2)
(5959,7293,2)
(4695,7727,2)
(3958,765,2)
(3007,3711,2)
(1173,3604,2)
(9103,7046,2)
(2043,6669,2)
(3231,4642,2)
(14,2688,2)
(852,5937,2)
(1678,8841,2)
(2062,6513,2)
(3636,974,2)
(7234,2974,2)
(6706,8566,2)
(5844,258,2)
(9104,3592,2)
(519,3879,2)
(6198,6712,2)
(3032,7283,2)
(5267,7894,2)
(9008,6582,2)
(7662,631,2)
(4071,1400,2)
(3583,3376,2)
(3354,2399,2)
(7792,8244,2)
(4060,926,2)
(7925,6524,2)
(6638,5363,2)
(2102,795,2)
(8749,6621,2)
(2000,5061,2)
(6482,8924,2)
(3166,8566,2)
(7644,838,2)
(919,5791,2)
(3190,5905,2)
(3702,6840,2)
(3959,7351,2)
(7469,1334,2)
(6600,230,2)
(4602,5651,2)
(6408,5992,2)
(6392,3376,2)
(7997,5981,2)
(4014,4937,2)
(3868,3222,2)
(1038,7821,2)
(6506,837,2)
(920,1365,2)
(7625,1280,2)
(8995,9022,2)
(8778,8227,2)
(9023,234,2)
(3857,4656,2)
(7129,64,2)
(5468,5905,2)
(575,4623,2)
(4192,79,2)
(2852,3376,2)
(3711,655,2)
(2447,5411,2)
(7277,5591,2)
(2440,8077,2)
(6335,7088,2)
(5832,45,2)
(7191,7023,2)
(4775,315,2)
(748,5610,2)
(5480,1230,2)
(4667,5791,2)
(6288,6669,2)
(4526,3376,2)
(7880,3376,2)
(6207,4393,2)
(3045,1125,2)
(7052,2005,2)
(7107,3376,2)
(1490,6193,2)
(4398,2399,2)
(1892,3711,2)
(1752,7823,2)
(8781,4279,2)
(7157,4419,2)
(7098,1246,2)
(7004,546,2)
(3478,3742,2)
(4589,4902,2)
(2471,1237,2)
(2840,127,2)
(4965,1297,2)
(703,2814,2)
(2512,7439,2)
(1908,2278,2)
(6879,7046,2)
(3908,8924,2)
(3979,7062,2)
(4887,5220,2)
(970,228,2)
(1666,5937,2)
(3354,7499,2)
(6288,2577,2)
(223,3061,2)
(2106,8601,2)
(6785,2991,2)
(220,8396,2)
(6215,3730,2)
(9017,631,2)
(2,3588,2)
(4,6759,2)
(3105,5061,2)
(4445,4952,2)
(5105,4864,2)
(2898,1284,2)
(866,2614,2)
(4350,5061,2)
(9104,356,2)
(2155,3879,2)
(4591,7894,2)
(4821,4534,2)
(8328,4629,2)
(3201,6482,2)
(4021,3376,2)
(3022,8566,2)
(9042,1443,2)
(8533,5835,2)
(8294,7088,2)
(3466,4296,2)
(7482,724,2)
(563,7727,2)
(8363,7351,2)
(5307,5791,2)
(6285,4623,2)
(2274,1059,2)
(9060,6059,2)
(3489,5869,2)
(7954,8009,2)
(4785,9150,2)
(8688,3879,2)
(3621,3163,2)
(614,1686,2)
(9116,7201,2)
(6749,6867,2)
(8161,830,2)
(348,1284,2)
(8502,9083,2)
(3536,5869,2)
(3042,5842,2)
(998,5061,2)
(3650,4070,2)
(6040,2344,2)
(7602,5905,2)
(6901,2069,2)
(8700,8009,2)
(3293,5905,2)
(7678,5937,2)
(7277,4106,2)
(567,8566,2)
(8926,8657,2)
(91,3376,2)
(1263,6069,2)
(702,6768,2)
(8242,5402,2)
(1697,350,2)
(3407,8596,2)
(1334,653,2)
(636,930,2)
(1494,5061,2)
(7422,3879,2)
(5134,1263,2)
(6173,3584,2)
(5532,3222,2)
(8841,4393,2)
(3548,8566,2)
(1398,8376,2)
(694,8564,2)
(4983,3590,2)
(3018,4036,2)
(7661,3879,2)
(8079,5070,2)
(5273,6092,2)
(5825,5378,2)
(1164,6977,2)
(856,5403,2)
(541,4279,2)
(122,7508,2)
(6996,4952,2)
(5951,7029,2)
(5723,1454,2)
(8346,4499,2)
(254,2443,2)
(7223,4327,2)
(3459,3381,2)
(3733,7283,2)
(5185,7088,2)
(425,8653,2)
(3150,1474,2)
(4663,7917,2)
(400,3381,2)
(43,3879,2)
(4948,1876,2)
(4607,2077,2)
(7580,8566,2)
(8356,6768,2)
(4259,3376,2)
(2618,3376,2)
(8820,8521,2)
(8837,6977,2)
(3404,5835,2)
(3501,7451,2)
(5207,3376,2)
(967,3376,2)
(7655,974,2)
(3832,6422,2)
(9113,486,2)
(8021,7624,2)
(4874,8520,2)
(7133,3516,2)
(7527,1474,2)
(3985,8607,2)
(8496,2969,2)
(3561,8924,2)
(5105,5017,2)
(1204,5061,2)
(2897,2069,2)
(2073,3376,2)
(6513,3376,2)
(2243,1960,2)
(2210,5061,2)
(2584,2165,2)
(5978,6977,2)
(5033,3381,2)
(6282,926,2)
(4302,2399,2)
(2359,5391,2)
(6680,9140,2)
(6294,8566,2)
(2701,7603,2)
(1387,8652,2)
(6729,8670,2)
(4329,5129,2)
(5442,5985,2)
(8892,177,2)
(5132,8566,2)
(8806,5220,2)
(5939,8053,2)
(2445,1965,2)
(7700,3333,2)
(5455,8376,2)
(938,6272,2)
(6002,5441,2)
(4985,6817,2)
(7427,2069,2)
(4542,1666,2)
(2583,8030,2)
(6033,6082,2)
(3226,8193,2)
(691,5061,2)
(3846,3879,2)
(6038,4902,2)
(6388,9002,2)
(1948,644,2)
(5361,6977,2)
(1130,5835,2)
(1582,4070,2)
(4546,3005,2)
(6636,3110,2)
(1632,6758,2)
(6483,7894,2)
(251,1587,2)
(3264,4952,2)
(8653,3113,2)
(8706,2870,2)
(1613,2485,2)
(2722,7410,2)
(5441,5061,2)
(8206,8670,2)
(5838,2528,2)
(8427,5061,2)
(5594,6730,2)
(8998,926,2)
(6704,6932,2)
(6926,5823,2)
(168,3376,2)
(3091,8601,2)
(4595,1263,2)
(8261,3376,2)
(7705,5715,2)
(3188,5287,2)
(3197,926,2)
(7164,4297,2)
(1237,3093,2)
(288,3093,2)
(2586,5061,2)
(9104,5853,2)
(2685,3551,2)
(4020,5570,2)
(8659,3879,2)
(8467,2019,2)
(7102,6719,2)
(2252,1846,2)
(3899,1789,2)
(589,3376,2)
(7448,1284,2)
(410,6977,2)
(4620,6444,2)
(8307,2577,2)
(4382,8918,2)
(6459,926,2)
(1179,7536,2)
(6098,3376,2)
(6055,3650,2)
(795,2005,2)
(2592,8566,2)
(2893,6755,2)
(8810,933,2)
(8392,5873,2)
(5065,7425,2)
(1316,8832,2)
(3023,930,2)
(7761,7414,2)
(4317,5791,2)
(3498,7061,2)
(8258,5692,2)
(4574,933,2)
(5048,4070,2)
(1702,4778,2)
(8926,4882,2)
(2403,2019,2)
(7038,2938,2)
(618,8566,2)
(3151,4656,2)
(5621,5061,2)
(4361,7703,2)
(1476,5129,2)
(2850,4111,2)
(4666,2938,2)
(6181,1374,2)
(2395,2359,2)
(1101,939,2)
(1724,3777,2)
(3089,6312,2)
(435,4134,2)
(7396,7410,2)
(1352,7499,2)
(3301,1309,2)
(6257,5346,2)
(2393,3376,2)
(621,6553,2)
(3724,5061,2)
(7365,4745,2)
(3026,8566,2)
(5080,5656,2)
(7209,7163,2)
(4760,2577,2)
(5509,7304,2)
(9081,4952,2)
(4331,5061,2)
(1311,5450,2)
(5255,644,2)
(5420,3376,2)
(9136,7326,2)
(5397,2461,2)
(6646,9075,2)
(309,8566,2)
(3186,4859,2)
(2124,3224,2)
(3590,1491,2)
(344,5865,2)
(8420,5450,2)
(1839,9117,2)
(127,364,2)
(8091,8067,2)
(6754,4989,2)
(6883,1956,2)
(3553,4299,2)
(933,891,2)
(289,860,2)
(916,3879,2)
(8788,8316,2)
(8179,7821,2)
(1074,1762,2)
(5148,6927,2)
(4065,631,2)
(5608,8566,2)
(2180,4727,2)
(3257,7113,2)
(7468,1463,2)
(4919,65,2)
(7726,8566,2)
(1458,8013,2)
(8276,5110,2)
(2005,7145,2)
(6314,5061,2)
(518,8566,2)
(3043,7113,2)
(1942,6817,2)
(1007,8601,2)
(397,3198,2)
(2621,5835,2)
(130,4337,2)
(2124,2736,2)
(5627,6525,2)
(4541,5061,2)
(718,3815,2)
(5067,2577,2)
(1531,1834,2)
(7815,3022,2)
(6275,2443,2)
(6994,315,2)
(2949,8566,2)
(6092,1692,2)
(6029,1686,2)
(4921,3376,2)
(5208,2375,2)
(1362,979,2)
(7544,3879,2)
(4803,5061,2)
(3790,5791,2)
(3109,5061,2)
(2753,6049,2)
(5658,3879,2)
(4785,5061,2)
(2014,5165,2)
(4854,3222,2)
(1468,6808,2)
(3638,1246,2)
(8402,7410,2)
(2452,5986,2)
(3760,5962,2)
(5588,8410,2)
(6940,8566,2)
(3445,5135,2)
(5118,6897,2)
(8159,8566,2)
(7914,7174,2)
(6561,5656,2)
(7116,644,2)
(5536,2058,2)
(6778,5652,2)
(707,2577,2)
(8213,7727,2)
(6781,1714,2)
(8267,3376,2)
(3828,3570,2)
(6944,2577,2)
(822,2975,2)
(3351,65,2)
(4874,6939,2)
(4296,1919,2)
(838,1529,2)
(7620,3570,2)
(2421,2214,2)
(2334,4393,2)
(3516,7845,2)
(2338,862,2)
(4419,7410,2)
(5148,1633,2)
(4648,5061,2)
(8309,6141,2)
(3826,5061,2)
(8500,4501,2)
(4078,5604,2)
(3896,6669,2)
(1033,3376,2)
(7487,3374,2)
(6489,1655,2)
(7745,5061,2)
(1014,2399,2)
(8076,4393,2)
(2443,1281,2)
(9136,8703,2)
(8338,2005,2)
(5852,5061,2)
(6490,3376,2)
(7973,8376,2)
(5649,585,2)
(9070,7201,2)
(240,3376,2)
(3050,2577,2)
(4917,2614,2)
(2591,2711,2)
(81,1230,2)
(993,65,2)
(2796,837,2)
(284,5220,2)
(8251,3366,2)
(9104,7878,2)
(996,3383,2)
(3886,1246,2)
(2122,5767,2)
(5428,1665,2)
(5445,5129,2)
(5749,1830,2)
(6312,8566,2)
(4174,8009,2)
(1686,2019,2)
(9147,6725,2)
(5242,7088,2)
(7015,8566,2)
(2830,4727,2)
(4922,5450,2)
(6118,8566,2)
(1278,2241,2)
(6746,1240,2)
(8464,2938,2)
(7993,8376,2)
(3043,7358,2)
(598,3516,2)
(2046,6621,2)
(1572,7410,2)
(6082,6069,2)
(1560,6082,2)
(5351,2906,2)
(6981,1284,2)
(1587,5484,2)
(3426,5962,2)
(2704,7410,2)
(1754,5441,2)
(5220,933,2)
(7884,8566,2)
(6493,7343,2)
(4582,7351,2)
(5617,1192,2)
(2429,5061,2)
(9104,8980,2)
(2858,2069,2)
(2836,8566,2)
(1780,7997,2)
(8375,8566,2)
(3110,7299,2)
(5417,4521,2)
(1501,4011,2)
(3116,6959,2)
(8234,622,2)
(3353,6730,2)
(8128,3879,2)
(1142,6873,2)
(4968,4499,2)
(860,4129,2)
(3999,6730,2)
(2815,7031,2)
(1768,3163,2)
(6247,6092,2)
(6917,5441,2)
(4226,2461,2)
(5169,5962,2)
(6963,65,2)
(325,65,2)
(1363,3694,2)
(8419,216,2)
(2534,531,2)
(3921,4656,2)
(4915,2461,2)
(1096,6817,2)
(2457,2165,2)
(5770,7163,2)
(8463,6977,2)
(1413,4419,2)
(379,401,2)
(8634,3879,2)
(4606,5061,2)
(3250,3806,2)
(8243,3116,2)
(2067,7285,2)
(2110,4299,2)
(299,1228,2)
(3908,5937,2)
(362,49,2)
(2807,795,2)
(2897,7113,2)
(7314,4656,2)
(6103,2938,2)
(6845,4419,2)
(1921,8913,2)
(104,2069,2)
(4393,4248,2)
(7688,4208,2)
(5927,8566,2)
(2939,1246,2)
(755,8496,2)
(7051,7482,2)
(7116,5061,2)
(7103,806,2)
(6112,258,2)
(4647,258,2)
(5503,8566,2)
(8225,5937,2)
(3955,5987,2)
(1788,6768,2)
(341,1093,2)
(3475,5061,2)
(968,230,2)
(8677,4501,2)
(3164,8334,2)
(5511,127,2)
(2947,9150,2)
(4739,765,2)
(1291,6977,2)
(5888,1093,2)
(5148,8735,2)
(4773,4599,2)
(7595,8601,2)
(5725,2231,2)
(560,5905,2)
(2940,7624,2)
(5525,6272,2)
(2101,4070,2)
(4030,6817,2)
(3611,5591,2)
(1538,5129,2)
(1584,2443,2)
(4510,7034,2)
(3938,4297,2)
(3248,5061,2)
(4282,8473,2)
(474,2938,2)
(3043,6340,2)
(3457,439,2)
(1210,851,2)
(8855,3090,2)
(3332,3333,2)
(1030,1093,2)
(4871,3376,2)
(9008,6730,2)
(6301,3566,2)
(3819,6024,2)
(5105,2496,2)
(9094,2375,2)
(8877,4534,2)
(6846,3665,2)
(3858,1315,2)
(1016,8137,2)
(1388,4499,2)
(4871,6847,2)
(4507,5660,2)
(1786,3163,2)
(1138,4902,2)
(6760,7088,2)
(5756,6183,2)
(3772,258,2)
(6297,6977,2)
(4231,7873,2)
(3904,4588,2)
(824,5061,2)
(7691,3376,2)
(425,7879,2)
(895,5061,2)
(8433,3368,2)
(2429,7113,2)
(8948,5061,2)
(4742,1767,2)
(6957,5135,2)
(4723,6840,2)
(949,3879,2)
(4330,7034,2)
(8693,3879,2)
(8858,2344,2)
(746,3376,2)
(930,8161,2)
(95,1412,2)
(3464,6023,2)
(8706,7962,2)
(3237,5061,2)
(4225,7351,2)
(5823,2516,2)
(5031,8601,2)
(3385,6049,2)
(516,3617,2)
(7088,885,2)
(1873,153,2)
(3770,7163,2)
(4209,5791,2)
(8743,5061,2)
(2740,3376,2)
(5804,3333,2)
(5510,5061,2)
(1019,3366,2)
(1941,8520,2)
(945,4263,2)
(3717,6730,2)
(4518,3376,2)
(6008,5061,2)
(2283,3584,2)
(5962,7827,2)
(3231,2485,2)
(8232,6894,2)
(5867,49,2)
(5365,5061,2)
(2811,1876,2)
(8814,4179,2)
(4137,3163,2)
(3746,7088,2)
(8765,2069,2)
(242,5835,2)
(2125,6435,2)
(6829,2975,2)
(8923,6315,2)
(7435,6977,2)
(3437,7425,2)
(4806,3376,2)
(1616,3584,2)
(7868,5937,2)
(1451,8396,2)
(3830,8566,2)
(3592,9027,2)
(2391,3376,2)
(2735,5061,2)
(7408,3376,2)
(4016,570,2)
(7378,350,2)
(4354,3376,2)
(6799,5061,2)
(3745,3376,2)
(1291,3651,2)
(2866,5425,2)
(5802,4478,2)
(2976,2399,2)
(4035,4952,2)
(7783,7521,2)
(9100,5905,2)
(3006,6155,2)
(7726,5061,2)
(5397,3566,2)
(5314,3248,2)
(6996,3166,2)
(5640,5061,2)
(5821,1387,2)
(922,5129,2)
(6618,9003,2)
(4031,8396,2)
(1546,2475,2)
(5159,7145,2)
(4421,8467,2)
(3124,6340,2)
(1763,2033,2)
(2653,4716,2)
(6032,8405,2)
(7598,7462,2)
(5074,3148,2)
(165,49,2)
(8991,2577,2)
(715,3219,2)
(8509,7821,2)
(4235,8630,2)
(9139,5789,2)
(5606,8281,2)
(4057,2019,2)
(2516,5172,2)
(1862,127,2)
(1716,2938,2)
(8652,1082,2)
(2945,3879,2)
(62,4070,2)
(1238,1474,2)
(2515,3037,2)
(8840,6272,2)
(9137,3376,2)
(8079,127,2)
(7199,8095,2)
(1729,1686,2)
(3418,4766,2)
(807,5937,2)
(3710,2262,2)
(3299,7343,2)
(4080,8566,2)
(6627,1662,2)
(1077,4534,2)
(4911,4292,2)
(709,7476,2)
(7614,4588,2)
(5423,3694,2)
(5183,4808,2)
(2475,926,2)
(6230,7462,2)
(1906,258,2)
(152,5061,2)
(6444,7113,2)
(8367,9140,2)
(3107,3376,2)
(3951,6712,2)
(9104,1181,2)
(3150,3074,2)
(6449,7521,2)
(8598,2074,2)
(5065,7358,2)
(7523,3090,2)
(3148,5441,2)
(5905,1446,2)
(2398,3195,2)
(8652,3638,2)
(4049,3116,2)
(7775,6621,2)
(8831,165,2)
(4634,2998,2)
(8607,5634,2)
(7778,7082,2)
(2276,5061,2)
(700,5165,2)
(4619,1284,2)
(6003,1335,2)
(1468,2420,2)
(7827,1959,2)
(1277,5771,2)
(3846,1271,2)
(7468,9003,2)
(5280,4524,2)
(1955,700,2)
(9084,8566,2)
(6077,3376,2)
(806,6366,2)
(4750,5931,2)
(1870,2577,2)
(3016,6033,2)
(4050,5591,2)
(7680,2577,2)
(1298,4902,2)
(7577,7587,2)
(2510,3879,2)
(6331,1571,2)
(1887,2624,2)
(1811,8566,2)
(3955,5148,2)
(182,8651,2)
(5898,7624,2)
(7477,982,2)
(7190,8865,2)
(7692,8566,2)
(7025,5061,2)
(5458,3687,2)
(2457,4304,2)
(3447,5905,2)
(8180,3061,2)
(8971,6069,2)
(5107,6745,2)
(3935,5591,2)
(4468,49,2)
(2375,6024,2)
(3982,7410,2)
(8227,3318,2)
(6566,6127,2)
(3623,3376,2)
(3566,806,2)
(8159,3376,2)
(3057,4279,2)
(8628,6388,2)
(6377,1064,2)
(7094,7250,2)
(7702,2343,2)
(8889,6730,2)
(8291,8841,2)
(8920,837,2)
(1959,795,2)
(6345,5061,2)
(8674,5061,2)
(3196,5058,2)
(2465,8455,2)
(3986,1485,2)
(4519,7521,2)
(1327,5793,2)
(4787,700,2)
(9033,6513,2)
(7956,8508,2)
(8147,5061,2)
(5416,7410,2)
(1866,6524,2)
(7173,6669,2)
(7644,8980,2)
(8740,1474,2)
(7609,7805,2)
(8444,1876,2)
(5868,6049,2)
(6362,8107,2)
(7744,6012,2)
(7656,644,2)
(4477,3333,2)
(3080,8674,2)
(3135,5061,2)
(8932,8035,2)
(650,4727,2)
(7278,5610,2)
(6213,5423,2)
(3123,7029,2)
(2489,7821,2)
(8695,2577,2)
(6283,7727,2)
(1930,4623,2)
(7089,7143,2)
(1941,7845,2)
(8000,7343,2)
(6558,8670,2)
(7192,851,2)
(642,4808,2)
(376,8321,2)
(8957,4653,2)
(1611,6977,2)
(7644,2870,2)
(6700,230,2)
(8071,5962,2)
(2984,2975,2)
(1348,4419,2)
(4610,3153,2)
(8437,6682,2)
(413,3376,2)
(6567,258,2)
(838,1412,2)
(4512,5061,2)
(7488,7726,2)
(4588,6669,2)
(1860,401,2)
(7509,4542,2)
(8127,4585,2)
(8699,644,2)
(2167,350,2)
(993,258,2)
(5496,2577,2)
(8284,644,2)
(8137,4439,2)
(4354,6966,2)
(7086,4123,2)
(6408,6981,2)
(90,3005,2)
(4093,234,2)
(4094,5450,2)
(6831,3744,2)
(5376,4129,2)
(3782,2375,2)
(2268,177,2)
(8755,3333,2)
(7255,2399,2)
(2509,280,2)
(177,7137,2)
(3072,1876,2)
(1905,14,2)
(5423,1948,2)
(7918,6481,2)
(3207,3516,2)
(1026,1829,2)
(3041,7029,2)
(2772,9140,2)
(8284,3694,2)
(3270,5912,2)
(3449,3590,2)
(5752,8566,2)
(2705,3110,2)
(5105,2485,2)
(6520,1151,2)
(5145,4053,2)
(661,1504,2)
(8240,8566,2)
(7125,7894,2)
(1461,7455,2)
(5534,8376,2)
(7923,8042,2)
(5135,4337,2)
(8580,806,2)
(1547,4481,2)
(4859,6817,2)
(4033,5767,2)
(2447,5475,2)
(1412,95,2)
(55,3005,2)
(771,8601,2)
(1783,4681,2)
(6444,2069,2)
(7782,258,2)
(3596,8542,2)
(7283,1869,2)
(2264,2443,2)
(2372,45,2)
(4600,8601,2)
(4729,8566,2)
(2516,9003,2)
(637,1284,2)
(8555,350,2)
(6919,8566,2)
(6852,527,2)
(6465,8652,2)
(7048,5937,2)
(1934,5560,2)
(7890,8102,2)
(4319,6730,2)
(1204,7053,2)
(3678,401,2)
(6088,401,2)
(678,8564,2)
(3431,2822,2)
(6489,1192,2)
(2106,8566,2)
(6374,8865,2)
(3157,3249,2)
(6714,5821,2)
(7842,7410,2)
(5148,1275,2)
(6795,4070,2)
(6253,8566,2)
(7153,65,2)
(3198,1974,2)
(4370,7964,2)
(8823,8670,2)
(1208,8467,2)
(5903,1237,2)
(2512,8449,2)
(4213,5536,2)
(7342,933,2)
(5296,8009,2)
(1271,3879,2)
(6404,4279,2)
(5718,644,2)
(1927,7725,2)
(8386,8153,2)
(1658,927,2)
(702,5815,2)
(7779,4303,2)
(7129,6900,2)
(4350,8566,2)
(6864,3963,2)
(5986,6701,2)
(3124,7358,2)
(592,4474,2)
(8813,5789,2)
(3311,6977,2)
(2198,9150,2)
(1980,3879,2)
(538,4875,2)
(3124,8703,2)
(784,8865,2)
(3327,7046,2)
(808,5607,2)
(5218,3376,2)
(9104,725,2)
(3548,2443,2)
(181,933,2)
(8754,1686,2)
(3867,2777,2)
(7451,6869,2)
(3058,7480,2)
(8494,3879,2)
(9104,2042,2)
(8272,3879,2)
(583,6669,2)
(7727,974,2)
(8343,2938,2)
(22,8863,2)
(4168,3376,2)
(7259,2069,2)
(4193,3291,2)
(4583,9150,2)
(5072,5403,2)
(1309,5061,2)
(5148,7878,2)
(5109,7170,2)
(2308,7250,2)
(2181,4279,2)
(2941,230,2)
(2520,3376,2)
(3140,8244,2)
(4912,795,2)
(5760,1284,2)
(6894,1392,2)
(236,6889,2)
(5580,2906,2)
(633,8566,2)
(7583,4629,2)
(9104,3666,2)
(7389,8563,2)
(8186,5905,2)
(4781,4322,2)
(6025,1775,2)
(4759,7080,2)
(24,7283,2)
(2936,3376,2)
(2016,8521,2)
(8870,7088,2)
(6854,1064,2)
(4546,1876,2)
(7644,4304,2)
(2726,8601,2)
(371,1876,2)
(95,556,2)
(4440,2614,2)
(2832,230,2)
(8815,3443,2)
(1173,1670,2)
(5503,6669,2)
(2684,1762,2)
(2430,982,2)
(1551,2069,2)
(8913,8924,2)
(7998,2577,2)
(8158,9150,2)
(8844,3374,2)
(3355,8945,2)
(8523,47,2)
(6765,7034,2)
(3141,3879,2)
(6790,4047,2)
(2449,6524,2)
(5630,3354,2)
(8538,6977,2)
(7211,4393,2)
(7248,5137,2)
(5418,3879,2)
(2416,1237,2)
(4489,9150,2)
(7227,1434,2)
(8167,9150,2)
(2707,4727,2)
(6883,8009,2)
(4009,5791,2)
(3849,4297,2)
(3124,6127,2)
(124,3413,2)
(4276,3376,2)
(2354,4501,2)
(2309,7805,2)
(765,5905,2)
(4298,6214,2)
(3441,5061,2)
(2308,3078,2)
(1441,2137,2)
(8821,3376,2)
(6878,3879,2)
(4665,1993,2)
(1008,3381,2)
(2028,474,2)
(4339,1237,2)
(2227,60,2)
(3221,7805,2)
(8709,5905,2)
(1193,5061,2)
(3237,3879,2)
(7942,631,2)
(3090,6673,2)
(2645,5544,2)
(6938,4501,2)
(9009,8566,2)
(1641,8601,2)
(5249,9002,2)
(4599,8658,2)
(7805,5656,2)
(3233,4129,2)
(2356,4251,2)
(3261,3061,2)
(6265,3530,2)
(2014,2111,2)
(2503,6817,2)
(5822,5399,2)
(4042,3376,2)
(3888,6669,2)
(8547,8863,2)
(8716,5431,2)
(5959,181,2)
(4803,3376,2)
(8603,8601,2)
(8022,8275,2)
(6755,5061,2)
(1092,4401,2)
(7163,5843,2)
(1012,8521,2)
(7426,8566,2)
(7325,3376,2)
(4967,4134,2)
(4903,5869,2)
(3556,5135,2)
(5646,3376,2)
(3924,9022,2)
(7830,4501,2)
(8425,3376,2)
(8534,1990,2)
(4214,2019,2)
(5115,5061,2)
(4326,6817,2)
(7634,7418,2)
(46,181,2)
(7223,8254,2)
(801,4656,2)
(8621,2975,2)
(8670,2028,2)
(4153,7387,2)
(3646,7088,2)
(3231,1866,2)
(8436,7351,2)
(2340,5061,2)
(5105,5574,2)
(952,8566,2)
(8338,2317,2)
(2987,3877,2)
(3637,1284,2)
(2330,3376,2)
(4149,7088,2)
(6059,7593,2)
(6653,5962,2)
(3967,4393,2)
(8653,6033,2)
(549,2577,2)
(4337,4969,2)
(3476,3333,2)
(9027,6960,2)
(5138,6435,2)
(4944,3156,2)
(2635,6817,2)
(8064,14,2)
(8541,806,2)
(6343,4956,2)
(2561,1085,2)
(9104,5951,2)
(952,2245,2)
(4529,5855,2)
(6619,7135,2)
(7134,5905,2)
(5148,1866,2)
(2056,447,2)
(3595,2443,2)
(1097,4272,2)
(1442,3376,2)
(2982,8841,2)
(6385,5962,2)
(6328,4393,2)
(9091,8396,2)
(7101,7649,2)
(6046,556,2)
(4840,3701,2)
(4947,5061,2)
(1638,5231,2)
(2000,2938,2)
(7678,8924,2)
(7186,6621,2)
(7705,4460,2)
(1523,4322,2)
(5408,836,2)
(5438,7700,2)
(8277,14,2)
(2375,2399,2)
(3689,7343,2)
(3581,795,2)
(8395,5245,2)
(7982,1372,2)
(5883,5905,2)
(8036,4623,2)
(3802,7942,2)
(3016,7894,2)
(2244,2577,2)
(1898,7587,2)
(4355,5591,2)
(8944,8009,2)
(3913,5835,2)
(7963,1297,2)
(6737,3879,2)
(1501,92,2)
(3674,6082,2)
(2854,8566,2)
(7232,3376,2)
(5236,8924,2)
(2709,5231,2)
(6898,6977,2)
(5148,6826,2)
(8778,258,2)
(4571,5220,2)
(8754,8493,2)
(4348,2605,2)
(238,8566,2)
(4298,3148,2)
(7244,837,2)
(4590,7343,2)
(7759,5061,2)
(5965,631,2)
(8214,2938,2)
(3272,7030,2)
(818,2736,2)
(2184,2635,2)
(7580,5937,2)
(3231,4304,2)
(3146,2420,2)
(4264,806,2)
(1983,2975,2)
(4684,5999,2)
(2584,2496,2)
(1606,5962,2)
(7541,7005,2)
(4299,4595,2)
(525,8869,2)
(4771,230,2)
(3317,2241,2)
(7681,9022,2)
(2304,6071,2)
(1327,4951,2)
(1286,3879,2)
(5121,8566,2)
(2310,3544,2)
(6502,2938,2)
(9104,2870,2)
(1640,3090,2)
(1341,79,2)
(6226,3090,2)
(764,1083,2)
(1563,6069,2)
(4068,7727,2)
(9104,5750,2)
(2271,5682,2)
(4806,2637,2)
(4319,127,2)
(5253,6989,2)
(1028,5857,2)
(4550,1415,2)
(4175,1101,2)
(8706,8703,2)
(8891,6033,2)
(1400,7113,2)
(1846,9150,2)
(4097,1785,2)
(7678,8566,2)
(2384,251,2)
(6059,3505,2)
(8859,8566,2)
(8266,4297,2)
(4,3231,2)
(411,3376,2)
(200,5450,2)
(5373,8841,2)
(4709,3879,2)
(7475,1064,2)
(8312,2461,2)
(5052,7649,2)
(138,5061,2)
(2645,5017,2)
(5148,3592,2)
(8833,6977,2)
(2360,368,2)
(8165,8566,2)
(7024,5747,2)
(1373,8566,2)
(8262,7437,2)
(7410,1246,2)
(4153,6793,2)
(6221,8601,2)
(1130,8244,2)
(8731,7201,2)
(3030,8841,2)
(7592,3376,2)
(8012,6353,2)
(5857,2019,2)
(9104,7326,2)
(2652,5403,2)
(7807,6435,2)
(231,1816,2)
(6286,4808,2)
(459,343,2)
(1756,8566,2)
(1165,4451,2)
(8564,4517,2)
(135,3354,2)
(1064,1829,2)
(354,644,2)
(3268,8841,2)
(8127,7522,2)
(3312,8850,2)
(9104,7824,2)
(4973,3376,2)
(819,533,2)
(4983,1282,2)
(8534,4134,2)
(6777,5061,2)
(7977,3376,2)
(8738,567,2)
(4061,3921,2)
(4565,8107,2)
(7571,8566,2)
(7782,1958,2)
(4373,216,2)
(3884,2443,2)
(8093,177,2)
(5612,3879,2)
(8927,930,2)
(1317,4478,2)
(6117,837,2)
(6670,1876,2)
(4306,5514,2)
(4965,8264,2)
(7306,8281,2)
(1601,5080,2)
(8782,5937,2)
(830,5061,2)
(8787,8652,2)
(2431,4570,2)
(3675,8566,2)
(8296,8024,2)
(1249,5403,2)
(2277,7015,2)
(320,930,2)
(5933,5652,2)
(7471,926,2)
(4864,350,2)
(5570,5260,2)
(2202,1963,2)
(6723,7029,2)
(6426,8566,2)
(3488,230,2)
(7849,7425,2)
(1483,3907,2)
(7441,6376,2)
(2526,3381,2)
(6755,8566,2)
(6740,4823,2)
(3901,1686,2)
(4930,5937,2)
(2072,4057,2)
(1507,644,2)
(6935,3376,2)
(2962,1716,2)
(8422,5165,2)
(5473,4921,2)
(2058,206,2)
(6697,643,2)
(2097,8566,2)
(6492,3516,2)
(6968,5034,2)
(1491,66,2)
(8141,2770,2)
(8183,63,2)
(1812,644,2)
(6959,3222,2)
(8798,2069,2)
(2174,8924,2)
(1067,3153,2)
(4210,369,2)
(3124,2165,2)
(6589,540,2)
(8164,3480,2)
(5778,4347,2)
(3244,3879,2)
(7315,6524,2)
(7722,7351,2)
(6637,8460,2)
(1615,1011,2)
(6353,1474,2)
(7999,1237,2)
(1526,8945,2)
(1703,3376,2)
(2081,8601,2)
(2397,9002,2)
(7627,1284,2)
(5139,851,2)
(5105,4400,2)
(3445,6489,2)
(2619,401,2)
(6012,7241,2)
(6868,795,2)
(8318,1246,2)
(8272,5061,2)
(5643,7587,2)
(1144,3376,2)
(7805,987,2)
(8792,1937,2)
(2983,5165,2)
(6134,806,2)
(6110,6069,2)
(8706,2496,2)
(3955,2584,2)
(7470,9150,2)
(5429,5905,2)
(4697,3754,2)
(6507,5061,2)
(1201,5061,2)
(1076,3093,2)
(9151,8396,2)
(976,9140,2)
(5772,6977,2)
(236,6069,2)
(5367,1474,2)
(4327,3376,2)
(880,4187,2)
(3616,4347,2)
(8444,1785,2)
(8301,9024,2)
(8042,4499,2)
(4355,7894,2)
(2500,6272,2)
(2161,2975,2)
(2663,63,2)
(4331,7805,2)
(5153,5061,2)
(7587,7410,2)
(1646,9150,2)
(3255,1686,2)
(7937,5061,2)
(3401,9003,2)
(5741,7115,2)
(3454,5791,2)
(5126,9002,2)
(5414,3787,2)
(4050,5061,2)
(8581,6024,2)
(8202,6900,2)
(49,6096,2)
(3559,4902,2)
(801,5502,2)
(6965,3879,2)
(8309,6769,2)
(5048,8244,2)
(4652,6984,2)
(1447,3146,2)
(4729,8989,2)
(3124,4642,2)
(4397,4085,2)
(2505,3496,2)
(3124,2768,2)
(6635,8653,2)
(3522,5121,2)
(8744,8227,2)
(6196,3376,2)
(2971,4656,2)
(1362,3376,2)
(7386,5610,2)
(8499,703,2)
(5812,6033,2)
(2117,7113,2)
(1454,2938,2)
(6887,5937,2)
(7523,3148,2)
(6905,1474,2)
(4456,6730,2)
(563,1246,2)
(4169,7159,2)
(2645,6276,2)
(7644,6340,2)
(3605,4594,2)
(9025,9147,2)
(5180,127,2)
(8783,1394,2)
(5984,7113,2)
(1696,7872,2)
(9098,8566,2)
(3824,7521,2)
(1382,7618,2)
(3307,6213,2)
(4758,7805,2)
(7002,2605,2)
(4972,3005,2)
(2326,3333,2)
(6111,2577,2)
(416,5061,2)
(501,230,2)
(1705,5610,2)
(1209,6049,2)
(3814,6676,2)
(6364,7410,2)
(2048,3351,2)
(1279,4299,2)
(8352,3101,2)
(7881,4875,2)
(7472,4979,2)
(7323,8566,2)
(3854,3202,2)
(4199,5937,2)
(6889,3707,2)
(8706,2165,2)
(8665,1306,2)
(3373,3219,2)
(3945,4656,2)
(6301,8579,2)
(8117,5061,2)
(5051,4656,2)
(6267,8447,2)
(1539,5061,2)
(7179,4952,2)
(9083,4481,2)
(4070,3376,2)
(6255,8566,2)
(5886,6669,2)
(6344,3376,2)
(2006,7804,2)
(2643,3046,2)
(6411,700,2)
(367,1013,2)
(3966,3376,2)
(9087,7894,2)
(7677,5481,2)
(1475,4766,2)
(8973,4952,2)
(3573,556,2)
(6788,350,2)
(3977,7053,2)
(3059,7351,2)
(2169,719,2)
(6085,8601,2)
(7510,3879,2)
(2239,2011,2)
(5989,4238,2)
(8348,2267,2)
(8970,5921,2)
(4699,7587,2)
(8042,5699,2)
(1053,7034,2)
(8416,7482,2)
(3875,390,2)
(2214,1283,2)
(9120,8566,2)
(679,7964,2)
(4754,4481,2)
(1953,3874,2)
(5510,8601,2)
(8027,7410,2)
(8181,8566,2)
(8734,3376,2)
(4995,8396,2)
(4362,5905,2)
(4704,7623,2)
(6982,3376,2)
(1154,3360,2)
(2505,3381,2)
(980,4393,2)
(3120,6669,2)
(8946,3376,2)
(7723,8566,2)
(5206,4501,2)
(719,6621,2)
(2439,3376,2)
(8640,230,2)
(852,8566,2)
(6706,4347,2)
(3140,1297,2)
(3591,5570,2)
(7272,3879,2)
(1191,1474,2)
(3093,1881,2)
(3517,3879,2)
(1852,9103,2)
(112,6986,2)
(3365,5061,2)
(4634,4111,2)
(926,6698,2)
(1035,487,2)
(6212,4902,2)
(2803,7029,2)
(2955,7283,2)
(1341,236,2)
(5954,6597,2)
(5148,7810,2)
(9108,5061,2)
(5317,3376,2)
(7672,8596,2)
(6056,8566,2)
(2878,4393,2)
(773,2278,2)
(3258,2614,2)
(8859,7088,2)
(1336,2033,2)
(1359,8281,2)
(1605,4047,2)
(5312,3376,2)
(4999,3093,2)
(2748,5129,2)
(6996,7153,2)
(4471,1401,2)
(4306,3095,2)
(8264,8566,2)
(7586,5891,2)
(1743,4952,2)
(211,5135,2)
(200,255,2)
(6993,3354,2)
(6583,6082,2)
(5896,3376,2)
(2584,6340,2)
(3480,570,2)
(7860,4337,2)
(8841,2212,2)
(4470,1284,2)
(8333,2614,2)
(5039,8566,2)
(5418,8440,2)
(3277,1064,2)
(6012,7727,2)
(941,7239,2)
(4800,2577,2)
(7123,631,2)
(3303,5701,2)
(3463,6977,2)
(2373,4808,2)
(343,5403,2)
(4733,6817,2)
(7271,4501,2)
(740,9119,2)
(7942,7942,2)
(5661,5937,2)
(7786,8566,2)
(6689,6817,2)
(861,24,2)
(1097,3374,2)
(6334,2998,2)
(8630,926,2)
(1914,3694,2)
(9114,2464,2)
(9024,5905,2)
(2937,3376,2)
(1006,1706,2)
(6503,7077,2)
(2957,9150,2)
(2954,2614,2)
(6292,6069,2)
(1219,8566,2)
(445,7725,2)
(7003,6524,2)
(1108,3516,2)
(2906,1019,2)
(6648,3376,2)
(6764,8601,2)
(3147,8566,2)
(6043,6669,2)
(8930,8097,2)
(8563,2497,2)
(6817,7819,2)
(5105,4304,2)
(8800,3584,2)
(6432,3125,2)
(7459,8292,2)
(2373,890,2)
(1835,2614,2)
(3527,5652,2)
(6851,5962,2)
(2949,6750,2)
(1167,6817,2)
(884,5791,2)
(2836,7088,2)
(377,4292,2)
(522,8321,2)
(360,7224,2)
(829,65,2)
(6749,7424,2)
(3772,65,2)
(1050,8566,2)
(6669,7587,2)
(80,6977,2)
(4193,7410,2)
(7247,5450,2)
(1380,6736,2)
(3351,2076,2)
(5566,7964,2)
(1813,216,2)
(4059,2262,2)
(4091,3879,2)
(8318,2975,2)
(260,5110,2)
(3127,2344,2)
(1374,6867,2)
(243,4337,2)
(1525,2007,2)
(3639,1765,2)
(7644,4400,2)
(1027,8234,2)
(8195,3376,2)
(8805,7410,2)
(5552,6977,2)
(8773,5272,2)
(4326,1167,2)
(4166,8670,2)
(2713,5061,2)
(6701,8022,2)
(94,5060,2)
(6998,8321,2)
(3097,5061,2)
(5148,4304,2)
(160,4337,2)
(84,644,2)
(8630,127,2)
(796,5905,2)
(5199,2344,2)
(1225,1064,2)
(1880,5667,2)
(8135,6859,2)
(851,4397,2)
(5109,7410,2)
(3292,3879,2)
(34,3376,2)
(2873,5962,2)
(8454,8712,2)
(4812,1230,2)
(3706,49,2)
(1205,5061,2)
(5675,7053,2)
(4840,1744,2)
(6007,3116,2)
(8113,8601,2)
(3359,3099,2)
(5853,9022,2)
(3294,4070,2)
(5618,4952,2)
(3097,4808,2)
(448,9022,2)
(6780,1686,2)
(5970,8913,2)
(3243,4263,2)
(4646,3376,2)
(2248,65,2)
(1520,5079,2)
(1589,3879,2)
(5401,8566,2)
(6251,4419,2)
(229,3376,2)
(2683,861,2)
(1407,4503,2)
(5196,5905,2)
(2337,7088,2)
(2611,5937,2)
(6340,6524,2)
(1242,4299,2)
(2188,5441,2)
(3840,111,2)
(5807,2033,2)
(8423,8566,2)
(4060,5617,2)
(7760,7034,2)
(4679,8154,2)
(4343,7343,2)
(7947,7029,2)
(632,4797,2)
(6382,5591,2)
(9009,8030,2)
(6272,3376,2)
(8129,4393,2)
(1450,1499,2)
(1448,631,2)
(2114,8566,2)
(5205,3433,2)
(1225,5862,2)
(1357,5450,2)
(5222,4952,2)
(3457,5735,2)
(298,4451,2)
(8075,2187,2)
(5879,700,2)
(5460,8292,2)
(8887,8403,2)
(4340,8281,2)
(6130,5401,2)
(468,1505,2)
(3004,5610,2)
(2193,5570,2)
(8,5222,2)
(2080,3376,2)
(6307,5905,2)
(2831,5595,2)
(5443,4656,2)
(3111,5610,2)
(1045,2443,2)
(2094,2929,2)
(1664,4501,2)
(4231,1306,2)
(4935,806,2)
(1790,8077,2)
(5670,4393,2)
(3949,2736,2)
(8888,3376,2)
(4746,5224,2)
(3701,554,2)
(5297,2399,2)
(734,1365,2)
(710,7895,2)
(1906,3376,2)
(8847,5789,2)
(2573,5061,2)
(6536,3879,2)
(8192,7823,2)
(6301,2245,2)
(3871,8566,2)
(5522,5905,2)
(7145,8520,2)
(1388,8566,2)
(581,5441,2)
(3855,6669,2)
(5777,5130,2)
(8175,806,2)
(1546,926,2)
(6221,7803,2)
(3758,5209,2)
(5014,7412,2)
(8613,4401,2)
(6183,1664,2)
(7119,8009,2)
(8117,5937,2)
(1693,65,2)
(7888,6503,2)
(3435,7410,2)
(794,8670,2)
(1135,3397,2)
(5654,8225,2)
(5231,200,2)
(7831,5403,2)
(4411,8107,2)
(5381,49,2)
(6605,3376,2)
(1934,3217,2)
(1743,6082,2)
(6384,3376,2)
(4249,153,2)
(700,8422,2)
(8458,2005,2)
(7644,4811,2)
(6986,4297,2)
(6049,2938,2)
(8921,6817,2)
(1557,2577,2)
(8412,3156,2)
(9026,7088,2)
(19,8601,2)
(2476,5231,2)
(6899,2614,2)
(2015,2632,2)
(6129,33,2)
(3797,8863,2)
(7434,1230,2)
(7234,521,2)
(9104,8364,2)
(1996,3374,2)
(5805,6213,2)
(2119,2577,2)
(3955,8175,2)
(5148,2485,2)
(5212,2586,2)
(1036,3116,2)
(5148,2496,2)
(7249,3376,2)
(487,9003,2)
(9038,4481,2)
(3043,1866,2)
(8115,1525,2)
(2007,9002,2)
(2452,8022,2)
(260,5340,2)
(3469,3097,2)
(4611,8989,2)
(5286,4347,2)
(5148,6382,2)
(86,2614,2)
(8710,7343,2)
(2244,6669,2)
(2243,258,2)
(6859,3110,2)
(6507,8566,2)
(9093,7343,2)
(188,5090,2)
(7077,5058,2)
(6716,302,2)
(8601,5962,2)
(8948,8566,2)
(9103,8967,2)
(5846,2262,2)
(7634,3376,2)
(3284,8281,2)
(6279,7023,2)
(4908,1025,2)
(2325,8566,2)
(1629,5061,2)
(2718,570,2)
(8038,7462,2)
(1649,1306,2)
(8924,231,2)
(7126,3376,2)
(8831,49,2)
(1653,8566,2)
(3792,9103,2)
(862,3879,2)
(5767,2975,2)
(7188,4481,2)
(2399,5791,2)
(1365,6583,2)
(7798,7821,2)
(8449,8924,2)
(8976,7174,2)
(3124,3647,2)
(1335,5061,2)
(5588,379,2)
(2108,7088,2)
(7902,5061,2)
(4859,5937,2)
(5203,4238,2)
(5039,4070,2)
(7920,3711,2)
(8943,5905,2)
(90,974,2)
(7006,8321,2)
(241,5582,2)
(6556,8498,2)
(5603,3156,2)
(4429,1757,2)
(5392,3376,2)
(3375,7283,2)
(5757,8281,2)
(7733,7106,2)
(1716,5061,2)
(8598,7024,2)
(2456,6957,2)
(7651,8102,2)
(638,7113,2)
(5894,6340,2)
(1607,8460,2)
(5834,127,2)
(3432,8566,2)
(49,7285,2)
(533,8209,2)
(4630,8601,2)
(373,8701,2)
(4537,5582,2)
(7113,2069,2)
(9072,7997,2)
(4704,7113,2)
(6777,8566,2)
(2107,7343,2)
(3673,1547,2)
(4273,8566,2)
(1343,953,2)
(1250,1284,2)
(2848,7028,2)
(4580,1873,2)
(2043,2591,2)
(9104,5599,2)
(5452,4501,2)
(5426,8573,2)
(5111,1726,2)
(2997,4952,2)
(1207,5058,2)
(1714,2461,2)
(1875,3376,2)
(1335,8321,2)
(7459,8216,2)
(6168,4929,2)
(5332,9002,2)
(2898,303,2)
(5073,868,2)
(7068,3376,2)
(217,8273,2)
(2645,5951,2)
(1104,7577,2)
(7058,644,2)
(5110,253,2)
(2567,8841,2)
(1504,7377,2)
(2484,5135,2)
(2178,6768,2)
(5738,6033,2)
(1028,8473,2)
(838,7029,2)
(6966,4512,2)
(2202,65,2)
(3864,3222,2)
(9097,3376,2)
(7094,3201,2)
(5105,6340,2)
(3102,5610,2)
(7193,5061,2)
(4642,4134,2)
(3847,6214,2)
(3369,3366,2)
(8546,6758,2)
(4869,7410,2)
(1778,3333,2)
(354,3694,2)
(1130,3231,2)
(2155,5749,2)
(6740,6977,2)
(6056,8244,2)
(5313,3879,2)
(4530,9003,2)
(4918,1304,2)
(1549,3536,2)
(6195,3376,2)
(1839,3821,2)
(1539,5791,2)
(1747,8566,2)
(2082,2461,2)
(4322,3110,2)
(2846,7449,2)
(2448,2577,2)
(390,7053,2)
(5323,5061,2)
(9104,4309,2)
(7934,7029,2)
(4372,2906,2)
(5877,4656,2)
(7185,8566,2)
(209,7805,2)
(3546,5061,2)
(8316,8670,2)
(4512,8566,2)
(3358,7046,2)
(2904,3376,2)
(8970,1108,2)
(3216,765,2)
(4481,4299,2)
(992,3354,2)
(7743,5610,2)
(8192,6470,2)
(4804,7308,2)
(1241,3516,2)
(5269,837,2)
(4481,4770,2)
(3955,2457,2)
(2916,3879,2)
(2611,8841,2)
(8246,5129,2)
(7553,3333,2)
(7608,5610,2)
(8489,5129,2)
(5602,3376,2)
(7195,2399,2)
(7416,2681,2)
(4773,2534,2)
(3214,556,2)
(8707,1394,2)
(3352,7410,2)
(344,3061,2)
(4845,6370,2)
(9104,6616,2)
(3955,2139,2)
(1894,5061,2)
(4824,2058,2)
(4435,1064,2)
(8656,9002,2)
(7094,4248,2)
(5423,644,2)
(5870,5061,2)
(1956,8009,2)
(7048,8234,2)
(7629,2577,2)
(5148,5544,2)
(7154,5403,2)
(5408,8281,2)
(356,7696,2)
(6228,4319,2)
(3466,4499,2)
(2047,5231,2)
(622,8566,2)
(1221,7365,2)
(7658,1686,2)
(7936,1686,2)
(3928,1310,2)
(2177,3376,2)
(2204,3638,2)
(5935,2577,2)
(6152,4481,2)
(3856,3584,2)
(5431,8579,2)
(6285,2721,2)
(3043,4304,2)
(749,7241,2)
(3038,7750,2)
(1893,4551,2)
(1530,7088,2)
(4368,9150,2)
(4441,3590,2)
(8466,8566,2)
(3696,216,2)
(4567,4292,2)
(6739,8566,2)
(7901,8596,2)
(2072,1686,2)
(8001,2058,2)
(8854,4451,2)
(9102,3148,2)
(8212,9150,2)
(7548,3376,2)
(7377,7821,2)
(4488,8523,2)
(473,3711,2)
(2117,2069,2)
(997,3376,2)
(3122,9140,2)
(3875,5672,2)
(1649,4534,2)
(7269,1246,2)
(2421,234,2)
(8244,6110,2)
(7252,861,2)
(1279,5061,2)
(2370,1834,2)
(8915,930,2)
(7128,8566,2)
(6805,5962,2)
(1990,6768,2)
(8632,7482,2)
(2902,8601,2)
(8725,5028,2)
(13,2577,2)
(6525,8596,2)
(4877,2375,2)
(5292,4529,2)
(8857,4529,2)
(6566,2768,2)
(609,7819,2)
(4555,3879,2)
(1633,2577,2)
(9136,2165,2)
(5696,4346,2)
(6154,8334,2)
(2383,8566,2)
(7301,3354,2)
(5718,7058,2)
(1006,5315,2)
(7888,4437,2)
(4657,5905,2)
(7401,930,2)
(2400,982,2)
(3383,5441,2)
(5927,2577,2)
(8225,5061,2)
(6252,8601,2)
(271,554,2)
(6941,3376,2)
(2197,2975,2)
(765,5429,2)
(4301,2069,2)
(4822,8566,2)
(2933,4011,2)
(4444,5061,2)
(4542,3333,2)
(494,119,2)
(8077,5231,2)
(1361,8657,2)
(4463,5924,2)
(4960,4501,2)
(2089,7343,2)
(4297,5008,2)
(8923,3815,2)
(502,6863,2)
(2504,4123,2)
(164,5061,2)
(5218,1362,2)
(2645,838,2)
(6246,1686,2)
(2869,3494,2)
(2105,2906,2)
(5356,5791,2)
(1618,7611,2)
(2645,6382,2)
(3417,2074,2)
(103,5117,2)
(2806,5981,2)
(8292,3137,2)
(3560,3712,2)
(588,7744,2)
(335,5229,2)
(8706,4481,2)
(3751,7700,2)
(7644,7962,2)
(5337,607,2)
(9138,8676,2)
(5065,6340,2)
(4189,3376,2)
(6917,700,2)
(8423,401,2)
(1097,3343,2)
(4684,5962,2)
(1241,5061,2)
(8746,7821,2)
(2139,1866,2)
(5665,4902,2)
(8068,2482,2)
(8262,4620,2)
(2195,9002,2)
(5924,3770,2)
(6308,1374,2)
(5323,837,2)
(8729,8837,2)
(3680,5981,2)
(3055,8734,2)
(6182,5905,2)
(1180,9002,2)
(9007,1686,2)
(3437,5610,2)
(5371,5180,2)
(1044,2504,2)
(3251,4501,2)
(5048,3231,2)
(1336,7825,2)
(6954,5905,2)
(1106,8566,2)
(2530,3333,2)
(429,3108,2)
(8109,5662,2)
(9015,851,2)
(3433,851,2)
(7237,7029,2)
(5696,8566,2)
(6960,851,2)
(2374,5061,2)
(4224,4292,2)
(9104,2786,2)
(5591,7829,2)
(3368,8566,2)
(699,4902,2)
(6401,8865,2)
(3124,1071,2)
(8025,5403,2)
(7529,3376,2)
(3729,138,2)
(5885,765,2)
(5425,8281,2)
(3231,4400,2)
(14,6272,2)
(2535,2906,2)
(6529,6511,2)
(256,7358,2)
(5747,8566,2)
(1422,631,2)
(721,643,2)
(1590,251,2)
(7441,6490,2)
(6630,5129,2)
(6225,127,2)
(5129,4206,2)
(2457,4642,2)
(3316,3376,2)
(1159,1284,2)
(6735,8601,2)
(8590,5937,2)
(3345,7700,2)
(3103,5692,2)
(7617,177,2)
(3930,3584,2)
(2292,7894,2)
(5309,3376,2)
(3855,2577,2)
(5165,5441,2)
(3546,8566,2)
(9144,7201,2)
(2209,7034,2)
(2879,4501,2)
(4465,3926,2)
(7025,8566,2)
(6876,8165,2)
(5133,3196,2)
(1491,5129,2)
(6834,3376,2)
(4525,8601,2)
(7265,3767,2)
(3694,644,2)
(2699,219,2)
(7623,7113,2)
(5583,8948,2)
(420,6669,2)
(8415,2005,2)
(3820,1997,2)
(3457,8777,2)
(5065,401,2)
(4581,8566,2)
(6299,3879,2)
(1714,302,2)
(1047,2375,2)
(6520,5061,2)
(947,1785,2)
(2837,5591,2)
(7787,6050,2)
(7213,1791,2)
(7516,8566,2)
(5147,5962,2)
(8962,3061,2)
(2645,1866,2)
(638,2069,2)
(3584,661,2)
(2931,7889,2)
(8619,7725,2)
(7483,3274,2)
(4562,8376,2)
(3585,8841,2)
(2459,8460,2)
(7971,6421,2)
(4969,4163,2)
(5638,8670,2)
(5880,127,2)
(2229,8024,2)
(8240,8601,2)
(2698,6257,2)
(2607,6651,2)
(5360,3516,2)
(9130,7135,2)
(2131,7896,2)
(4774,5061,2)
(4298,1876,2)
(4940,5450,2)
(3963,2497,2)
(6612,4393,2)
(858,2344,2)
(8684,2973,2)
(5498,5429,2)
(8908,4551,2)
(1906,240,2)
(2645,4642,2)
(9011,8945,2)
(7547,473,2)
(6510,5061,2)
(8237,1765,2)
(2743,9022,2)
(5148,2462,2)
(155,6037,2)
(3757,1386,2)
(2866,8281,2)
(4430,2975,2)
(4356,3219,2)
(5148,5951,2)
(8469,7894,2)
(4633,7145,2)
(1682,926,2)
(7090,4451,2)
(2929,8858,2)
(6774,5945,2)
(5148,7425,2)
(6531,6261,2)
(169,5061,2)
(1656,8566,2)
(6582,6730,2)
(4747,5384,2)
(3566,5558,2)
(3124,2485,2)
(2172,9003,2)
(801,4918,2)
(7680,6669,2)
(6254,2461,2)
(2792,6817,2)
(403,2787,2)
(3860,234,2)
(7644,7425,2)
(4641,3485,2)
(552,3376,2)
(3136,5873,2)
(7793,5061,2)
(3922,1783,2)
(7605,3879,2)
(5065,1866,2)
(7054,3516,2)
(868,8566,2)
(3318,65,2)
(6146,2069,2)
(5202,1829,2)
(2083,7805,2)
(406,8566,2)
(7692,5061,2)
(3366,6941,2)
(3947,3879,2)
(8232,1581,2)
(2163,6033,2)
(2962,2938,2)
(8245,5654,2)
(5806,1886,2)
(8568,251,2)
(6132,3376,2)
(4701,3376,2)
(6953,1125,2)
(8945,3963,2)
(5617,926,2)
(2968,5450,2)
(973,216,2)
(1204,8566,2)
(3329,5061,2)
(337,1683,2)
(5562,5135,2)
(3673,4481,2)
(1623,8566,2)
(7094,4923,2)
(5237,2015,2)
(40,6986,2)
(1854,8244,2)
(2075,4656,2)
(8056,851,2)
(1675,1785,2)
(570,5129,2)
(103,2607,2)
(1895,3374,2)
(842,8566,2)
(8324,5791,2)
(3226,3575,2)
(4949,6682,2)
(4931,6977,2)
(4610,4588,2)
(8539,4347,2)
(5869,6712,2)
(6886,1726,2)
(635,5061,2)
(2668,9150,2)
(6566,4864,2)
(3069,3376,2)
(3077,9150,2)
(800,6287,2)
(4382,6977,2)
(5406,4902,2)
(8909,5165,2)
(5157,2399,2)
(2680,2069,2)
(7280,8924,2)
(5935,6669,2)
(1984,2607,2)
(7336,7088,2)
(9131,765,2)
(2882,5740,2)
(1245,8566,2)
(147,5825,2)
(1769,9112,2)
(7005,8566,2)
(1723,5129,2)
(7869,3688,2)
(507,8091,2)
(4732,8566,2)
(2836,5061,2)
(3817,4623,2)
(2085,8865,2)
(3788,1785,2)
(2842,6637,2)
(8893,7343,2)
(6034,7920,2)
(5624,8566,2)
(2777,1263,2)
(7687,2938,2)
(1872,3376,2)
(3777,6768,2)
(3795,4337,2)
(3287,1027,2)
(3124,6859,2)
(294,2469,2)
(2420,7894,2)
(2605,1937,2)
(6846,14,2)
(1631,350,2)
(6694,8566,2)
(778,6247,2)
(7373,4647,2)
(4871,6943,2)
(3816,795,2)
(364,2966,2)
(8005,3376,2)
(6005,3005,2)
(3320,167,2)
(2139,8703,2)
(9007,3937,2)
(8032,3694,2)
(17,3879,2)
(5486,5610,2)
(4712,5061,2)
(1390,2227,2)
(860,6555,2)
(4370,1324,2)
(3547,8841,2)
(6675,5937,2)
(3535,7054,2)
(4545,1284,2)
(2408,3333,2)
(716,5061,2)
(5032,5109,2)
(6545,1284,2)
(3228,3879,2)
(8788,8670,2)
(6623,1690,2)
(39,6932,2)
(1653,45,2)
(1839,1835,2)
(8075,253,2)
(2035,5791,2)
(8934,2375,2)
(4656,6408,2)
(259,2505,2)
(5412,3374,2)
(5756,5452,2)
(913,644,2)
(7351,8855,2)
(5642,65,2)
(6677,1192,2)
(3542,7521,2)
(448,8566,2)
(4174,2191,2)
(8705,6977,2)
(3948,8601,2)
(4531,302,2)
(7683,3879,2)
(4387,795,2)
(8889,5841,2)
(5349,9022,2)
(8638,8566,2)
(5177,4129,2)
(4889,4842,2)
(9025,2468,2)
(2187,641,2)
(1990,4134,2)
(3976,3879,2)
(5245,7048,2)
(1477,5450,2)
(53,5790,2)
(4576,5962,2)
(1581,6580,2)
(8802,5061,2)
(6611,7283,2)
(1978,4292,2)
(8670,3078,2)
(7825,5222,2)
(9155,222,2)
(2497,3376,2)
(1904,384,2)
(5370,2005,2)
(6813,7894,2)
(9087,5061,2)
(1938,9003,2)
(9104,9105,2)
(4588,2577,2)
(7999,3431,2)
(8760,6346,2)
(1571,6023,2)
(2990,8396,2)
(3382,8292,2)
(2549,9054,2)
(7484,6621,2)
(5263,65,2)
(7341,837,2)
(1199,1246,2)
(7716,1284,2)
(5469,5058,2)
(5083,2938,2)
(2003,3376,2)
(6863,5061,2)
(2781,9150,2)
(9123,2530,2)
(6880,4854,2)
(4950,5061,2)
(1312,6275,2)
(8032,8566,2)
(6139,4004,2)
(7610,6069,2)
(1283,234,2)
(5814,2803,2)
(2762,4656,2)
(4715,8573,2)
(5989,4645,2)
(1245,8009,2)
(3657,7046,2)
(4144,1138,2)
(351,5937,2)
(5814,7587,2)
(7497,2577,2)
(7930,8009,2)
(2316,5905,2)
(8564,7034,2)
(859,8042,2)
(3313,7284,2)
(4419,2524,2)
(7812,9150,2)
(1265,1670,2)
(8304,2577,2)
(7991,5789,2)
(7160,9002,2)
(2220,5610,2)
(6247,930,2)
(49,8651,2)
(5331,4808,2)
(1179,7727,2)
(2562,8865,2)
(1568,6578,2)
(7889,3879,2)
(4178,1937,2)
(390,2113,2)
(3293,6215,2)
(2614,5129,2)
(2194,4766,2)
(6745,8566,2)
(5105,2511,2)
(1435,3374,2)
(4572,4297,2)
(8737,5741,2)
(7215,4656,2)
(6733,4299,2)
(8427,8566,2)
(8614,4952,2)
(1662,812,2)
(3022,5937,2)
(5407,8281,2)
(3624,1365,2)
(5701,258,2)
(8836,8566,2)
(4143,6977,2)
(3955,2645,2)
(260,2588,2)
(4614,6637,2)
(7824,4551,2)
(5148,6669,2)
(4860,1714,2)
(6739,5937,2)
(5862,8019,2)
(4214,5061,2)
(5079,2577,2)
(6444,8798,2)
(8476,3376,2)
(7603,7032,2)
(7633,9150,2)
(7583,3191,2)
(9079,6869,2)
(2791,169,2)
(8150,2126,2)
(5619,188,2)
(7522,7343,2)
(4623,488,2)
(4708,4070,2)
(3914,795,2)
(1203,4952,2)
(3153,9002,2)
(1992,7088,2)
(5633,2245,2)
(4783,843,2)
(4275,5222,2)
(2224,8566,2)
(1838,9140,2)
(5387,4656,2)
(4585,9093,2)
(3250,3498,2)
(4714,8566,2)
(6148,6069,2)
(6165,795,2)
(5068,2340,2)
(2357,2399,2)
(2664,6637,2)
(7844,2069,2)
(8124,5052,2)
(6417,8928,2)
(6547,3879,2)
(6566,7425,2)
(6086,7113,2)
(8959,3376,2)
(4000,3879,2)
(7899,2938,2)
(7469,974,2)
(5192,6613,2)
(2895,3376,2)
(951,3376,2)
(595,5937,2)
(3616,2420,2)
(6012,1246,2)
(885,5696,2)
(4238,8601,2)
(8616,8566,2)
(7426,5061,2)
(2074,8670,2)
(4002,3879,2)
(3016,5591,2)
(3333,1945,2)
(7410,2975,2)
(5746,8077,2)
(8880,315,2)
(8292,837,2)
(1830,3505,2)
(5415,3376,2)
(7246,3376,2)
(6869,5940,2)
(4618,3570,2)
(4106,4128,2)
(431,1059,2)
(8009,1834,2)
(6633,8024,2)
(1656,5061,2)
(7081,3728,2)
(7682,998,2)
(3094,7410,2)
(5628,7112,2)
(7644,4520,2)
(5715,3383,2)
(3125,5061,2)
(137,7462,2)
(4162,3376,2)
(6345,3376,2)
(3329,8670,2)
(6190,3879,2)
(6444,3152,2)
(5820,2505,2)
(5771,5431,2)
(2297,6033,2)
(5730,7678,2)
(5065,2485,2)
(228,2069,2)
(1370,8566,2)
(5210,5220,2)
(2645,2577,2)
(3514,8601,2)
(7239,385,2)
(5027,14,2)
(5241,3158,2)
(817,5450,2)
(5233,2906,2)
(7241,2975,2)
(3028,851,2)
(6232,1765,2)
(5409,5109,2)
(4294,5591,2)
(8628,4766,2)
(1242,8114,2)
(8216,5061,2)
(1386,959,2)
(2575,3376,2)
(7741,6817,2)
(8133,5334,2)
(5824,2534,2)
(7724,5652,2)
(8097,3381,2)
(1194,4952,2)
(1735,952,2)
(8222,2245,2)
(5621,5937,2)
(9062,6669,2)
(5793,3491,2)
(7637,6037,2)
(163,7964,2)
(5068,5767,2)
(7511,6669,2)
(5526,5522,2)
(7825,6082,2)
(4403,3376,2)
(4213,2058,2)
(621,5741,2)
(8945,2058,2)
(1446,986,2)
(8046,6621,2)
(7439,8862,2)
(4089,5061,2)
(802,1668,2)
(1016,5061,2)
(3051,4848,2)
(2529,7821,2)
(7166,8321,2)
(8644,5789,2)
(3648,2614,2)
(8882,7309,2)
(175,7343,2)
(2584,2485,2)
(396,6033,2)
(6114,3711,2)
(5947,6859,2)
(5808,3376,2)
(8993,5481,2)
(4185,2736,2)
(9086,2577,2)
(2556,5767,2)
(2550,8841,2)
(4415,2906,2)
(6686,3376,2)
(6188,8841,2)
(2137,6272,2)
(2475,1192,2)
(5403,3419,2)
(6895,9150,2)
(1218,3333,2)
(8302,5602,2)
(3212,8670,2)
(2227,6428,2)
(6247,8566,2)
(3986,7587,2)
(8351,7285,2)
(8861,2106,2)
(21,6012,2)
(5575,926,2)
(5963,7462,2)
(1463,5061,2)
(3050,707,2)
(1505,5061,2)
(7159,6768,2)
(5353,8742,2)
(1639,50,2)
(3646,1370,2)
(5843,4921,2)
(1399,4534,2)
(2425,5397,2)
(2913,8652,2)
(1019,8822,2)
(7610,6768,2)
(3137,837,2)
(313,7942,2)
(8618,6272,2)
(7374,8934,2)
(146,2069,2)
(6602,8566,2)
(5988,2277,2)
(4446,644,2)
(3640,8137,2)
(7811,3376,2)
(494,8334,2)
(4393,4612,2)
(2405,8234,2)
(2543,3767,2)
(8493,1686,2)
(5170,1487,2)
(571,3879,2)
(2161,1246,2)
(6281,5937,2)
(2190,7088,2)
(877,340,2)
(1856,8281,2)
(3061,145,2)
(4205,4053,2)
(4546,974,2)
(3069,1959,2)
(2131,8913,2)
(5001,3376,2)
(7444,1057,2)
(4770,6673,2)
(6893,2523,2)
(7795,7343,2)
(6551,2399,2)
(4826,6669,2)
(6358,2607,2)
(4882,1272,2)
(8429,5962,2)
(8575,4393,2)
(9053,2735,2)
(1474,2606,2)
(2309,5061,2)
(8779,3376,2)
(566,2005,2)
(660,6669,2)
(5557,2069,2)
(5466,1474,2)
(5060,5791,2)
(8812,2019,2)
(6880,5532,2)
(1834,5376,2)
(7263,8652,2)
(5742,5789,2)
(3072,2271,2)
(238,3217,2)
(3738,8566,2)
(7834,6897,2)
(8799,2011,2)
(1812,3694,2)
(6069,2069,2)
(8853,570,2)
(3256,7168,2)
(9112,2526,2)
(145,3148,2)
(6454,6524,2)
(8596,6272,2)
(5795,4123,2)
(7577,3986,2)
(3309,2468,2)
(994,7624,2)
(6963,6710,2)
(7949,9024,2)
(5723,2938,2)
(4745,933,2)
(3263,974,2)
(4073,7521,2)
(8970,3516,2)
(5237,3381,2)
(4847,5061,2)
(4695,1246,2)
(4190,8566,2)
(3090,6669,2)
(8100,3333,2)
(7170,65,2)
(2957,2097,2)
(1987,3711,2)
(1934,7613,2)
(891,8564,2)
(3688,65,2)
(3160,4952,2)
(1246,2356,2)
(6402,4882,2)
(8863,700,2)
(2645,7962,2)
(7736,8281,2)
(9104,5398,2)
(834,1402,2)
(5434,5429,2)
(5007,7410,2)
(5261,5905,2)
(2841,7723,2)
(6907,7894,2)
(3172,8566,2)
(4843,8601,2)
(2048,1829,2)
(715,4774,2)
(2747,6637,2)
(7920,7920,2)
(5852,3879,2)
(5192,2212,2)
(2450,2577,2)
(2007,6869,2)
(4745,1876,2)
(5547,5061,2)
(7834,8769,2)
(5916,127,2)
(2312,7201,2)
(137,7598,2)
(8495,1753,2)
(8006,6932,2)
(7587,5610,2)
(1741,3231,2)
(1195,5110,2)
(526,546,2)
(3605,3376,2)
(5608,5061,2)
(4423,8601,2)
(4437,3253,2)
(3019,1762,2)
(4140,8730,2)
(5380,7410,2)
(3483,2248,2)
(222,2728,2)
(716,8566,2)
(4674,631,2)
(20,8566,2)
(8023,1125,2)
(5974,690,2)
(2021,2424,2)
(3990,8566,2)
(255,4922,2)
(8371,8652,2)
(3727,2938,2)
(3179,3109,2)
(4269,8683,2)
(5395,4123,2)
(3957,1394,2)
(7974,1402,2)
(5076,4827,2)
(6550,4053,2)
(5614,3879,2)
(5768,8042,2)
(2240,5061,2)
(1310,3551,2)
(6942,5814,2)
(5690,4062,2)
(2566,3979,2)
(3664,7654,2)
(2234,3333,2)
(454,4347,2)
(2139,4400,2)
(3788,974,2)
(2770,5937,2)
(4869,4906,2)
(5654,2938,2)
(2854,4238,2)
(837,1785,2)
(6876,7343,2)
(4822,6669,2)
(1977,8841,2)
(8935,2005,2)
(3351,1829,2)
(3431,1237,2)
(3535,3516,2)
(2658,4057,2)
(2596,4623,2)
(7907,4629,2)
(4698,3505,2)
(4647,251,2)
(8483,2577,2)
(654,6932,2)
(4623,8473,2)
(4173,5061,2)
(2049,7241,2)
(5029,3879,2)
(7279,8657,2)
(700,6768,2)
(2843,8107,2)
(1846,5184,2)
(2328,8841,2)
(7934,5200,2)
(8899,3376,2)
(4352,5397,2)
(8688,495,2)
(3092,6932,2)
(3066,7727,2)
(4881,3477,2)
(7915,6768,2)
(3079,780,2)
(6636,1876,2)
(5983,8281,2)
(653,1659,2)
(9089,4929,2)
(7068,552,2)
(2868,5403,2)
(8957,1284,2)
(5148,7358,2)
(8236,3333,2)
(3647,350,2)
(3478,5110,2)
(7879,6635,2)
(1824,2420,2)
(2350,4501,2)
(1024,2338,2)
(478,4808,2)
(4871,5333,2)
(7734,2497,2)
(8299,5061,2)
(3076,2399,2)
(3165,258,2)
(3093,2906,2)
(8271,3376,2)
(3814,7272,2)
(3586,8564,2)
(5429,3293,2)
(5529,7895,2)
(7355,8566,2)
(2974,302,2)
(5106,654,2)
(8309,5579,2)
(633,1374,2)
(544,2497,2)
(5850,2069,2)
(6937,3376,2)
(1300,7343,2)
(2338,3879,2)
(8869,5135,2)
(4252,6049,2)
(8563,7734,2)
(792,3879,2)
(5527,5061,2)
(1581,7250,2)
(6325,8376,2)
(7596,8886,2)
(4445,6082,2)
(6494,2069,2)
(8018,4478,2)
(5336,2577,2)
(7291,8566,2)
(8273,2443,2)
(4610,6759,2)
(8966,8566,2)
(891,5431,2)
(3877,253,2)
(5762,5403,2)
(9002,4481,2)
(7420,7283,2)
(3287,8395,2)
(1148,7029,2)
(7524,2005,2)
(5065,7962,2)
(7056,2975,2)
(3254,5165,2)
(2307,8566,2)
(8101,7821,2)
(2686,3376,2)
(7282,5571,2)
(6203,3319,2)
(5661,5061,2)
(3709,6817,2)
(8327,5781,2)
(3870,230,2)
(1042,2725,2)
(8063,7410,2)
(3962,2019,2)
(3970,7764,2)
(5924,2821,2)
(371,3148,2)
(3846,1544,2)
(6109,765,2)
(543,6977,2)
(5866,3348,2)
(5516,806,2)
(3551,1011,2)
(4719,4238,2)
(3599,6046,2)
(7913,5220,2)
(5244,5847,2)
(7294,2374,2)
(6745,6977,2)
(1655,5135,2)
(9136,4400,2)
(1340,5110,2)
(283,795,2)
(1717,49,2)
(8490,7120,2)
(1400,6869,2)
(5427,3552,2)
(7955,2461,2)
(8753,6977,2)
(8223,3381,2)
(111,4401,2)
(6317,8024,2)
(8345,691,2)
(5393,5905,2)
(4804,5791,2)
(7613,4528,2)
(8866,8865,2)
(2241,1246,2)
(2632,6637,2)
(7520,7343,2)
(2645,4864,2)
(7242,3156,2)
(7688,2005,2)
(4473,6082,2)
(3580,5610,2)
(1404,4070,2)
(8556,3354,2)
(2448,6669,2)
(5999,5962,2)
(41,3198,2)
(8826,7894,2)
(1654,3376,2)
(2565,3376,2)
(4740,350,2)
(4974,2938,2)
(7902,9022,2)
(237,2577,2)
(5800,7343,2)
(6199,3376,2)
(1403,8566,2)
(8219,8913,2)
(7304,8670,2)
(5217,4431,2)
(2120,4299,2)
(1464,9140,2)
(3035,1785,2)
(3244,5832,2)
(3925,7899,2)
(3471,216,2)
(1103,631,2)
(7836,8009,2)
(122,3879,2)
(6853,7410,2)
(5106,3092,2)
(1785,3236,2)
(6488,4891,2)
(5979,644,2)
(1051,6712,2)
(9104,4151,2)
(1145,5741,2)
(1344,7410,2)
(5090,4606,2)
(7712,3815,2)
(5672,2023,2)
(3343,3374,2)
(3503,3376,2)
(815,4393,2)
(829,1765,2)
(2555,3879,2)
(3600,6977,2)
(3348,7046,2)
(7355,3231,2)
(1915,7725,2)
(9104,2496,2)
(2436,7343,2)
(8789,2074,2)
(2490,3963,2)
(8462,7388,2)
(7257,4534,2)
(7174,6033,2)
(3052,2399,2)
(3871,5061,2)
(9104,5380,2)
(630,4524,2)
(5956,9140,2)
(4219,8109,2)
(2773,3028,2)
(1420,4070,2)
(8387,2399,2)
(5902,795,2)
(2554,1263,2)
(9042,5403,2)
(7804,536,2)
(2261,8566,2)
(3213,2392,2)
(2055,1263,2)
(8924,3381,2)
(2586,4129,2)
(8864,933,2)
(830,8566,2)
(5757,5061,2)
(7187,5981,2)
(378,4952,2)
(4529,234,2)
(569,2577,2)
(8281,4136,2)
(4220,3219,2)
(1687,3376,2)
(8792,4207,2)
(8765,264,2)
(2659,2074,2)
(1796,127,2)
(3124,7425,2)
(3780,5791,2)
(7787,4902,2)
(774,4299,2)
(979,5061,2)
(3582,6261,2)
(5986,8022,2)
(3418,8628,2)
(6824,631,2)
(2956,3879,2)
(5743,6682,2)
(2388,3861,2)
(1339,3879,2)
(7073,3461,2)
(5037,5061,2)
(131,8652,2)
(7657,6082,2)
(3035,3005,2)
(516,6956,2)
(1281,8307,2)
(5090,2938,2)
(8669,5450,2)
(1772,1246,2)
(5663,700,2)
(4794,4534,2)
(4252,1953,2)
(5250,7088,2)
(7441,3376,2)
(1391,7894,2)
(8617,1474,2)
(7828,79,2)
(1506,8101,2)
(1342,4952,2)
(605,5905,2)
(8706,2485,2)
(6272,1125,2)
(5507,2975,2)
(2078,5058,2)
(7433,7742,2)
(1974,4808,2)
(556,556,2)
(5440,8601,2)
(4979,7894,2)
(4670,5570,2)
(616,258,2)
(5977,6977,2)
(8706,4642,2)
(4136,3376,2)
(8268,4393,2)
(4487,2878,2)
(3158,5922,2)
(601,2938,2)
(599,6115,2)
(7451,933,2)
(8862,6570,2)
(3858,4070,2)
(2245,3566,2)
(2382,6370,2)
(5792,795,2)
(7644,2485,2)
(2020,2447,2)
(2741,6359,2)
(1360,5767,2)
(1744,4361,2)
(3776,8601,2)
(2081,5870,2)
(6622,2805,2)
(1316,3879,2)
(1443,5153,2)
(6977,254,2)
(1774,5061,2)
(1779,3516,2)
(3105,8566,2)
(5105,4798,2)
(4320,2577,2)
(5673,6730,2)
(5252,2069,2)
(8097,5235,2)
(9129,2262,2)
(6741,5061,2)
(6577,431,2)
(3055,3024,2)
(849,3879,2)
(6466,3879,2)
(1902,3590,2)
(3629,7351,2)
(4393,6580,2)
(7060,4990,2)
(6566,7326,2)
(5988,6033,2)
(4268,2005,2)
(8752,8566,2)
(6116,4656,2)
(2257,7029,2)
(641,3877,2)
(5589,2399,2)
(4216,1297,2)
(3766,4292,2)
(8473,2019,2)
(5957,1394,2)
(7444,3879,2)
(3477,4245,2)
(5105,154,2)
(1923,8566,2)
(545,3570,2)
(6497,632,2)
(2226,2069,2)
(7630,837,2)
(8418,8924,2)
(63,1386,2)
(4831,9027,2)
(2184,6817,2)
(2462,1246,2)
(2723,6069,2)
(1459,7410,2)
(3906,6977,2)
(831,5791,2)
(2733,4238,2)
(197,4623,2)
(567,5061,2)
(3167,5656,2)
(7236,3383,2)
(5256,643,2)
(1981,7725,2)
(6564,488,2)
(7644,4642,2)
(2166,2069,2)
(5816,216,2)
(1059,7046,2)
(7449,9140,2)
(2433,3694,2)
(7442,3333,2)
(4755,7920,2)
(7359,556,2)
(2406,3333,2)
(5182,5410,2)
(4182,45,2)
(7095,6201,2)
(3231,6340,2)
(7153,258,2)
(7515,7624,2)
(3048,401,2)
(1881,2906,2)
(7492,219,2)
(8423,5061,2)
(2826,1959,2)
(3074,177,2)
(6987,6831,2)
(552,5061,2)
(7034,3202,2)
(2823,8836,2)
(5117,127,2)
(620,6817,2)
(6153,3376,2)
(5148,4642,2)
(4893,2906,2)
(6142,5403,2)
(3662,3879,2)
(6022,3376,2)
(7081,8566,2)
(7494,3879,2)
(5157,8566,2)
(6855,7283,2)
(2191,8009,2)
(1183,3879,2)
(4507,2850,2)
(825,7343,2)
(1587,1876,2)
(6826,216,2)
(2966,7885,2)
(7343,2614,2)
(8387,3832,2)
(6472,7053,2)
(3189,8042,2)
(3185,5061,2)
(7679,837,2)
(1057,8566,2)
(7894,6139,2)
(205,8566,2)
(8591,4929,2)
(769,3148,2)
(2073,1959,2)
(929,3374,2)
(5897,3376,2)
(7151,7648,2)
(958,3376,2)
(3687,1724,2)
(1834,4129,2)
(7235,8505,2)
(3528,6897,2)
(6273,7410,2)
(5916,243,2)
(7250,6260,2)
(7449,5204,2)
(2981,4129,2)
(6984,2016,2)
(7168,6257,2)
(5748,708,2)
(1019,8251,2)
(1277,5431,2)
(6236,7285,2)
(5448,401,2)
(3505,4620,2)
(7047,5450,2)
(3830,5061,2)
(6127,8566,2)
(1490,5962,2)
(677,644,2)
(5517,3383,2)
(987,5656,2)
(6682,4808,2)
(7222,4299,2)
(3682,1402,2)
(6634,3148,2)
(7274,2938,2)
(4623,1729,2)
(9054,2399,2)
(5914,8742,2)
(3808,5916,2)
(2383,5061,2)
(3907,8566,2)
(4994,795,2)
(3905,8566,2)
(639,9140,2)
(4789,1785,2)
(2923,4035,2)
(1831,3374,2)
(4337,5905,2)
(5148,681,2)
(4062,6768,2)
(1180,4522,2)
(1219,5061,2)
(5607,3116,2)
(8851,7443,2)
(1754,700,2)
(2584,1071,2)
(5300,3376,2)
(933,8564,2)
(6420,3584,2)
(2185,2443,2)
(8090,2344,2)
(8649,6524,2)
(431,1394,2)
(5901,1284,2)
(6985,3376,2)
(7094,6580,2)
(1787,8928,2)
(4656,6981,2)
(8117,8566,2)
(2037,7805,2)
(7807,4057,2)
(6456,7425,2)
(3026,5061,2)
(5591,7894,2)
(2792,6689,2)
(942,974,2)
(7747,5061,2)
(3490,3584,2)
(1306,3376,2)
(6924,4070,2)
(1993,7583,2)
(5330,974,2)
(7248,230,2)
(7317,7343,2)
(1446,3376,2)
(3324,6867,2)
(5011,2033,2)
(1204,5937,2)
(7275,5905,2)
(1613,7425,2)
(8344,795,2)
(2438,2607,2)
(4634,7942,2)
(4250,8566,2)
(5055,644,2)
(4251,7727,2)
(4604,8566,2)
(2908,6082,2)
(7,8101,2)
(3813,5450,2)
(6651,9024,2)
(2499,3376,2)
(6162,6920,2)
(6477,2906,2)
(2645,2485,2)
(6976,1965,2)
(7431,2577,2)
(5829,5749,2)
(3674,4952,2)
(9104,7410,2)
(1346,3207,2)
(1151,2169,2)
(8029,4419,2)
(8912,2217,2)
(3626,3376,2)
(3375,227,2)
(3437,2870,2)
(5726,2973,2)
(7285,4952,2)
(4540,45,2)
(6418,8566,2)
(5222,3578,2)
(640,5610,2)
(8084,5610,2)
(3789,5873,2)
(7905,2938,2)
(218,1237,2)
(5567,8042,2)
(1941,1039,2)
(726,2906,2)
(1726,7135,2)
(5743,8566,2)
(4959,5061,2)
(3897,7283,2)
(8273,8566,2)
(6123,2614,2)
(1309,1686,2)
(8032,5061,2)
(8427,837,2)
(8313,8009,2)
(8071,5061,2)
(3337,8281,2)
(8174,546,2)
(7375,8601,2)
(5148,2577,2)
(5527,7482,2)
(6235,3333,2)
(6396,930,2)
(1414,2577,2)
(3738,5061,2)
(276,993,2)
(2648,3376,2)
(5877,6289,2)
(4608,8731,2)
(6514,8234,2)
(423,4337,2)
(6435,8036,2)
(7978,9022,2)
(8060,795,2)
(3462,3376,2)
(700,1645,2)
(2065,3879,2)
(1676,5182,2)
(6720,2261,2)
(5724,7550,2)
(7380,3376,2)
(4290,49,2)
(8417,4012,2)
(5119,45,2)
(3365,8566,2)
(841,8321,2)
(1061,1284,2)
(891,1714,2)
(8317,6403,2)
(5073,220,2)
(1613,8703,2)
(480,3376,2)
(5282,6730,2)
(6289,6184,2)
(8396,2043,2)
(911,6012,2)
(6841,2607,2)
(2530,5061,2)
(7161,1374,2)
(707,5061,2)
(5787,3694,2)
(9154,5962,2)
(7826,8022,2)
(9104,5511,2)
(554,8945,2)
(2482,7364,2)
(350,3202,2)
(2232,1785,2)
(1705,4193,2)
(6896,7283,2)
(6197,1663,2)
(2884,974,2)
(1471,5791,2)
(6516,3376,2)
(6152,5610,2)
(6033,834,2)
(8530,3397,2)
(2371,7163,2)
(1016,8566,2)
(4183,7725,2)
(4520,7046,2)
(3597,3333,2)
(3570,6982,2)
(8101,661,2)
(4302,9048,2)
(5767,6829,2)
(6910,1686,2)
(1310,3146,2)
(676,4393,2)
(7153,4952,2)
(3540,4145,2)
(3593,4299,2)
(8315,3590,2)
(7283,5741,2)
(2739,6069,2)
(1919,4499,2)
(282,8863,2)
(9087,8566,2)
(3551,1615,2)
(1307,8566,2)
(4069,7053,2)
(422,5610,2)
(6926,4447,2)
(7351,2577,2)
(790,4263,2)
(7473,7649,2)
(1397,2467,2)
(3867,7388,2)
(9102,2777,2)
(100,3376,2)
(5559,7023,2)
(3690,1365,2)
(1785,6859,2)
(9136,6340,2)
(4194,2577,2)
(1741,8566,2)
(9104,3216,2)
(7572,5132,2)
(8706,4798,2)
(2378,3383,2)
(7506,7414,2)
(1765,4808,2)
(1328,3093,2)
(6289,310,2)
(1669,2938,2)
(1308,5047,2)
(2584,4304,2)
(5897,8566,2)
(6892,3078,2)
(7450,5605,2)
(3717,902,2)
(8818,8566,2)
(5916,5429,2)
(7611,5061,2)
(401,1974,2)
(6107,8137,2)
(2288,9122,2)
(1739,3861,2)
(593,1933,2)
(8868,6069,2)
(6604,4481,2)
(5777,8042,2)
(5377,7805,2)
(6625,8863,2)
(8094,8566,2)
(8447,4622,2)
(2953,7819,2)
(953,6380,2)
(3695,4952,2)
(1544,1271,2)
(8388,8924,2)
(1842,2777,2)
(8643,7343,2)
(7713,700,2)
(1254,8566,2)
(3598,1284,2)
(9048,8566,2)
(1499,325,2)
(3536,5061,2)
(5509,8670,2)
(1504,8746,2)
(2979,1284,2)
(7596,8865,2)
(8012,1474,2)
(5941,3376,2)
(8524,1284,2)
(3005,837,2)
(9052,2938,2)
(351,8566,2)
(505,9024,2)
(3516,7145,2)
(8448,3376,2)
(7961,8521,2)
(2280,554,2)
(3293,127,2)
(4050,8566,2)
(6207,3822,2)
(5948,5397,2)
(2841,644,2)
(4173,3376,2)
(7638,7700,2)
(224,1785,2)
(4246,7343,2)
(1168,6977,2)
(7521,6613,2)
(8386,6462,2)
(4313,3381,2)
(5105,3592,2)
(9117,2614,2)
(7457,3376,2)
(4045,3397,2)
(4046,4499,2)
(1914,8032,2)
(3715,5010,2)
(3661,9140,2)
(3140,3231,2)
(3240,8566,2)
(2474,7160,2)
(4381,631,2)
(3926,5741,2)
(8360,2033,2)
(7787,1457,2)
(7201,6261,2)
(2111,700,2)
(1017,3381,2)
(1443,5403,2)
(2645,7326,2)
(7805,7725,2)
(3862,9140,2)
(6809,3354,2)
(8347,4011,2)
(843,8858,2)
(1926,2975,2)
(2655,8713,2)
(7932,570,2)
(704,2962,2)
(3697,2043,2)
(245,2906,2)
(9150,8841,2)
(6416,1374,2)
(6139,7174,2)
(1702,6452,2)
(4451,7034,2)
(1335,8566,2)
(3437,952,2)
(1964,3376,2)
(4749,5431,2)
(452,6435,2)
(149,4501,2)
(3687,4451,2)
(5634,315,2)
(1229,7964,2)
(6915,6932,2)
(5034,4297,2)
(8507,5905,2)
(6394,3005,2)
(5148,6127,2)
(5062,3354,2)
(7582,221,2)
(6859,2705,2)
(7751,8701,2)
(7659,7351,2)
(4538,3590,2)
(563,2975,2)
(1891,5891,2)
(3312,7544,2)
(6146,7113,2)
(4201,6932,2)
(5465,5800,2)
(7252,7283,2)
(3481,2399,2)
(172,4766,2)
(3922,4361,2)
(6932,2497,2)
(2969,5061,2)
(4977,6768,2)
(2639,2344,2)
(6093,851,2)
(3787,3694,2)
(4420,2908,2)
(4601,5777,2)
(2924,3879,2)
(1081,5702,2)
(6032,8476,2)
(1138,3559,2)
(5738,7894,2)
(6690,5061,2)
(7337,4238,2)
(5144,806,2)
(5740,2614,2)
(4584,8601,2)
(6703,7587,2)
(4105,2074,2)
(8622,644,2)
(6390,6867,2)
(4955,4175,2)
(1420,3294,2)
(462,8321,2)
(1665,4929,2)
(9079,3505,2)
(8232,2538,2)
(4572,8566,2)
(2116,3374,2)
(4311,7821,2)
(1950,164,2)
(1873,852,2)
(7756,5939,2)
(800,6069,2)
(6008,234,2)
(4190,5450,2)
(1842,1876,2)
(2268,3725,2)
(3374,7700,2)
(8804,6735,2)
(7776,258,2)
(2835,63,2)
(1119,6977,2)
(7243,8670,2)
(8188,8564,2)
(2096,3376,2)
(5010,5061,2)
(5623,5741,2)
(7964,7634,2)
(8504,8922,2)
(5048,8566,2)
(9056,5061,2)
(350,7825,2)
(8384,1246,2)
(3061,3383,2)
(3162,5231,2)
(9087,6033,2)
(7999,2471,2)
(6956,1284,2)
(4457,5061,2)
(2750,7805,2)
(1689,3333,2)
(8391,3861,2)
(1106,3376,2)
(1944,4732,2)
(2907,3879,2)
(8627,631,2)
(5153,8566,2)
(6258,8566,2)
(3908,8566,2)
(7291,177,2)
(7146,5791,2)
(3928,5981,2)
(1946,4952,2)
(7707,3376,2)
(7240,3711,2)
(6802,7805,2)
(415,302,2)
(4622,8598,2)
(1436,7088,2)
(7184,3376,2)
(5105,5951,2)
(8575,5661,2)
(7346,4070,2)
(9029,3711,2)
(1965,6669,2)
(228,8916,2)
(7987,3376,2)
(1828,5692,2)
(4838,3879,2)
(5166,1402,2)
(5829,7444,2)
(3361,5061,2)
(2653,5580,2)
(1176,8566,2)
(3164,8566,2)
(8516,3926,2)
(2855,6524,2)
(2413,700,2)
(5868,2579,2)
(7387,6793,2)
(644,3376,2)
(5848,2278,2)
(3781,6730,2)
(3724,5129,2)
(677,3694,2)
(192,3397,2)
(2645,2165,2)
(1370,7088,2)
(4567,377,2)
(5063,4347,2)
(5404,2577,2)
(5105,7425,2)
(6620,8566,2)
(7841,3831,2)
(198,6421,2)
(6890,8334,2)
(3525,8841,2)
(3867,3148,2)
(3831,2069,2)
(769,2461,2)
(597,258,2)
(468,8945,2)
(2218,3376,2)
(2107,3820,2)
(4180,7088,2)
(2651,5061,2)
(8887,1757,2)
(4608,7201,2)
(5119,1653,2)
(9034,3093,2)
(8114,4299,2)
(8030,4858,2)
(9142,1937,2)
(7644,2462,2)
(3042,65,2)
(5894,5431,2)
(1962,2497,2)
(4125,2975,2)
(117,3381,2)
(6177,2605,2)
(1525,9002,2)
(5864,930,2)
(35,3711,2)
(5838,3376,2)
(2909,9119,2)
(1976,3522,2)
(7158,3826,2)
(6459,7793,2)
(958,8566,2)
(1203,6509,2)
(2470,8009,2)
(3907,3707,2)
(7516,4808,2)
(4857,8566,2)
(4064,1151,2)
(1421,5450,2)
(5052,7228,2)
(5462,1686,2)
(2031,7636,2)
(4187,6620,2)
(7493,2069,2)
(4808,3640,2)
(2624,3172,2)
(5899,8582,2)
(3723,7942,2)
(7093,4279,2)
(2861,6817,2)
(6272,8023,2)
(4973,9118,2)
(98,8995,2)
(2471,8244,2)
(2989,6272,2)
(1468,7472,2)
(42,6977,2)
(260,8579,2)
(3421,3590,2)
(701,4070,2)
(5609,7284,2)
(8589,8566,2)
(509,4053,2)
(2189,7764,2)
(2282,4401,2)
(3990,5061,2)
(8818,5061,2)
(5757,8566,2)
(1287,3518,2)
(5086,8334,2)
(4599,2534,2)
(1018,1958,2)
(1432,3376,2)
(6134,6768,2)
(8009,5491,2)
(1469,1028,2)
(940,8566,2)
(2716,3376,2)
(7992,7343,2)
(5849,3219,2)
(5514,2069,2)
(2606,7283,2)
(9054,8566,2)
(7652,3376,2)
(1920,2220,2)
(6462,258,2)
(8873,4011,2)
(6023,4727,2)
(8320,7088,2)
(9104,7126,2)
(2581,8926,2)
(4457,7410,2)
(8145,3879,2)
(2249,5429,2)
(6709,5109,2)
(120,8396,2)
(2714,700,2)
(2650,6272,2)
(6608,4501,2)
(2260,3311,2)
(5250,1728,2)
(3531,795,2)
(3608,732,2)
(2434,177,2)
(5512,3694,2)
(3493,6524,2)
(8275,4533,2)
(2599,2577,2)
(3748,5110,2)
(7030,795,2)
(7804,3354,2)
(2760,3546,2)
(2307,5937,2)
(7437,331,2)
(1331,6817,2)
(681,1639,2)
(3781,5061,2)
(7646,2577,2)
(918,177,2)
(4919,258,2)
(843,5475,2)
(1922,4899,2)
(5704,3806,2)
(3535,5995,2)
(3552,3443,2)
(6547,8566,2)
(1689,5937,2)
(1191,7110,2)
(2854,5061,2)
(8461,17,2)
(256,6127,2)
(6265,8579,2)
(5254,7425,2)
(5251,4534,2)
(774,5061,2)
(3924,448,2)
(5148,2199,2)
(7526,9150,2)
(4675,3376,2)
(6062,5061,2)
(5612,5829,2)
(4129,1306,2)
(5945,6622,2)
(6694,3376,2)
(592,3879,2)
(5410,8566,2)
(843,1944,2)
(3204,5807,2)
(3955,7644,2)
(6967,8566,2)
(8200,3781,2)
(6649,3376,2)
(8928,6069,2)
(2435,7343,2)
(3279,2128,2)
(2487,7624,2)
(2000,8566,2)
(296,4053,2)
(3611,6033,2)
(3404,8566,2)
(1000,6817,2)
(9012,8841,2)
(9010,2577,2)
(4610,4144,2)
(8890,700,2)
(6080,1284,2)
(3420,1093,2)
(7562,6213,2)
(3736,9150,2)
(3234,3376,2)
(4040,631,2)
(1945,6986,2)
(6989,7462,2)
(3474,3116,2)
(3842,2005,2)
(1290,3383,2)
(3655,6977,2)
(13,6669,2)
(1804,2614,2)
(1800,4656,2)
(8457,2938,2)
(3178,4070,2)
(6613,3374,2)
(2925,1958,2)
(8936,7053,2)
(2788,6977,2)
(124,4337,2)
(6634,1876,2)
(3718,3376,2)
(7966,5129,2)
(1253,4481,2)
(2337,3746,2)
(8987,1959,2)
(2222,9119,2)
(8111,5097,2)
(8164,570,2)
(576,8989,2)
(8074,9003,2)
(3003,7587,2)
(2307,5061,2)
(3484,8566,2)
(3830,5937,2)
(6650,8460,2)
(4040,1059,2)
(7228,8566,2)
(9104,6374,2)
(4288,7046,2)
(8232,8546,2)
(6566,8966,2)
(4055,7088,2)
(8681,644,2)
(806,8564,2)
(3905,3638,2)
(5924,7163,2)
(9132,2069,2)
(2504,2805,2)
(4556,3376,2)
(1037,4299,2)
(1673,5061,2)
(8784,4070,2)
(6201,795,2)
(536,7759,2)
(6270,5061,2)
(8611,5061,2)
(6657,837,2)
(5310,2399,2)
(832,3376,2)
(3100,7113,2)
(1153,1686,2)
(3198,2845,2)
(8147,3376,2)
(6451,5789,2)
(2183,546,2)
(717,1532,2)
(8680,6621,2)
(5204,3783,2)
(4451,4330,2)
(1281,2577,2)
(7533,1993,2)
(2115,4129,2)
(7917,5543,2)
(5662,7521,2)
(8947,4010,2)
(4113,2069,2)
(8306,7624,2)
(1623,5937,2)
(2695,2074,2)
(5561,3879,2)
(7278,5061,2)
(4112,837,2)
(1085,3333,2)
(9136,1071,2)
(2217,5061,2)
(3698,3354,2)
(2450,6669,2)
(3628,5905,2)
(5164,6388,2)
(3532,2497,2)
(617,5403,2)
(8974,593,2)
(4813,3376,2)
(868,3153,2)
(5926,5403,2)
(6125,8102,2)
(4694,1093,2)
(8609,4095,2)
(5133,5058,2)
(6096,8651,2)
(3376,6011,2)
(1759,8009,2)
(2985,8865,2)
(5070,3058,2)
(6631,2331,2)
(3539,3376,2)
(899,8566,2)
(7696,3614,2)
(7142,4123,2)
(6957,127,2)
(2651,1474,2)
(5264,9002,2)
(6141,7747,2)
(5057,45,2)
(2014,700,2)
(6086,3033,2)
(5263,258,2)
(6555,4129,2)
(5665,4872,2)
(5226,6069,2)
(8898,3521,2)
(8275,65,2)
(4017,643,2)
(3996,3376,2)
(2559,2069,2)
(6939,5012,2)
(262,8473,2)
(7012,6817,2)
(9134,7343,2)
(4651,4902,2)
(1718,3584,2)
(4190,5061,2)
(3376,7410,2)
(7679,8292,2)
(5958,4882,2)
(6522,4351,2)
(590,7410,2)
(3888,2672,2)
(8557,9119,2)
(3688,7365,2)
(1011,1468,2)
(2212,8670,2)
(8743,2399,2)
(5017,9002,2)
(770,700,2)
(7649,2577,2)
(7873,5061,2)
(1049,1714,2)
(5148,6340,2)
(1869,5741,2)
(695,1785,2)
(2030,3376,2)
(1130,8566,2)
(202,5220,2)
(2219,2241,2)
(8227,5109,2)
(8629,3590,2)
(154,5610,2)
(7729,2443,2)
(8957,348,2)
(1282,8566,2)
(4712,8601,2)
(464,4478,2)
(4695,2241,2)
(8241,1173,2)
(1998,1686,2)
(7906,4297,2)
(3444,3376,2)
(6659,379,2)
(3955,5105,2)
(4027,9036,2)
(7644,7878,2)
(3881,554,2)
(8130,8601,2)
(5148,13,2)
(6160,7088,2)
(2475,6459,2)
(44,6260,2)
(3593,1279,2)
(3236,2271,2)
(1776,1602,2)
(4727,41,2)
(4184,2399,2)
(5064,6069,2)
(79,236,2)
(5550,2399,2)
(1135,7355,2)
(3838,5351,2)
(5150,6012,2)
(3147,5061,2)
(1918,1686,2)
(9146,1757,2)
(1039,3926,2)
(7005,5061,2)
(9102,1965,2)
(801,144,2)
(3240,7283,2)
(933,1714,2)
(2223,8926,2)
(7891,2908,2)
(6557,8601,2)
(459,5403,2)
(320,3835,2)
(8094,5061,2)
(8694,3590,2)
(3427,837,2)
(1661,6867,2)
(6006,7088,2)
(672,7727,2)
(3098,1683,2)
(5003,8347,2)
(3992,3333,2)
(1494,1474,2)
(3101,8974,2)
(6682,7516,2)
(4382,7435,2)
(8806,1876,2)
(1819,8566,2)
(6264,3376,2)
(8919,2399,2)
(205,5061,2)
(7705,3383,2)
(900,8281,2)
(861,7283,2)
(6089,3376,2)
(6793,7351,2)
(762,8255,2)
(8992,880,2)
(5904,7088,2)
(840,1775,2)
(7309,5287,2)
(1109,1532,2)
(8128,8616,2)
(1434,7937,2)
(5398,3879,2)
(7316,1246,2)
(8087,8924,2)
(8718,3584,2)
(4499,7343,2)
(1069,1151,2)
(3779,7046,2)
(6245,4785,2)
(4955,3376,2)
(2705,7834,2)
(8143,7088,2)
(506,7343,2)
(5164,8244,2)
(7837,258,2)
(2453,502,2)
(8966,6069,2)
(5178,4297,2)
(6674,3879,2)
(8350,3879,2)
(7292,7113,2)
(8425,1307,2)
(8588,8601,2)
(9104,2380,2)
(6259,3376,2)
(1411,1246,2)
(6355,5441,2)
(5688,7053,2)
(7,8566,2)
(8714,9002,2)
(3651,3338,2)
(6548,8133,2)
(3083,5962,2)
(7746,8566,2)
(6170,1959,2)
(3241,9150,2)
(2050,3376,2)
(7603,8321,2)
(4720,3148,2)
(8599,7700,2)
(6922,3738,2)
(507,7088,2)
(4952,3256,2)
(7568,3374,2)
(9098,5061,2)
(8073,3376,2)
(688,6817,2)
(6591,6817,2)
(7324,2729,2)
(2823,5873,2)
(7951,7477,2)
(8010,3646,2)
(6613,1815,2)
(565,4393,2)
(1726,75,2)
(7130,1474,2)
(783,3376,2)
(7507,5061,2)
(9037,7894,2)
(1897,3116,2)
(2360,3731,2)
(5766,618,2)
(6434,6253,2)
(2799,2069,2)
(7008,1284,2)
(4147,3879,2)
(8106,6859,2)
(2548,5905,2)
(3861,1765,2)
(2412,6669,2)
(1789,127,2)
(3746,416,2)
(1281,4786,2)
(972,9140,2)
(1769,3381,2)
(4508,5403,2)
(550,4845,2)
(3422,7343,2)
(5791,3510,2)
(6315,5378,2)
(1064,7041,2)
(1322,6669,2)
(3496,7141,2)
(6036,700,2)
(8545,3163,2)
(309,3376,2)
(1392,5490,2)
(4626,3376,2)
(2582,8928,2)
(1700,3354,2)
(8850,3879,2)
(1728,4559,2)
(4449,795,2)
(6429,2577,2)
(6021,4499,2)
(8281,1106,2)
(5293,3516,2)
(2054,644,2)
(828,7499,2)
(3827,2048,2)
(7099,4299,2)
(1131,4070,2)
(7400,7174,2)
(2564,6272,2)
(8081,3505,2)
(1924,4401,2)
(692,7920,2)
(1858,6637,2)
(4217,6468,2)
(1877,2245,2)
(6804,3376,2)
(4649,3061,2)
(6435,4623,2)
(2148,2938,2)
(9096,5937,2)
(7855,1312,2)
(3305,8560,2)
(6583,6393,2)
(3368,3879,2)
(3699,2344,2)
(8807,5767,2)
(3334,1984,2)
(7032,8321,2)
(4629,181,2)
(9056,8566,2)
(5940,6460,2)
(2220,8566,2)
(1789,5905,2)
(4855,5110,2)
(2447,8858,2)
(2577,6669,2)
(2242,7805,2)
(7823,7837,2)
(8407,3376,2)
(8904,2465,2)
(3480,2592,2)
(234,6846,2)
(8827,65,2)
(4883,806,2)
(5607,3474,2)
(2602,4875,2)
(7370,4478,2)
(5148,952,2)
(6562,63,2)
(871,3376,2)
(6565,8506,2)
(2356,7727,2)
(4292,5873,2)
(8877,6437,2)
(2845,401,2)
(3457,2090,2)
(2020,4748,2)
(3899,5905,2)
(4349,8094,2)
(4345,1474,2)
(897,8117,2)
(4930,8566,2)
(8230,6817,2)
(8296,8758,2)
(816,6033,2)
(7863,5873,2)
(4648,5937,2)
(4501,6565,2)
(4402,4237,2)
(5621,6817,2)
(213,8141,2)
(3497,3949,2)
(3124,4400,2)
(8364,765,2)
(5965,5391,2)
(4351,5061,2)
(891,8566,2)
(8706,2511,2)
(9104,3313,2)
(8983,795,2)
(4464,4501,2)
(2912,806,2)
(2139,952,2)
(5843,7618,2)
(8197,5061,2)
(2587,6682,2)
(7556,3590,2)
(4014,6180,2)
(634,3516,2)
(79,2479,2)
(3022,5061,2)
(2800,8652,2)
(6639,8653,2)
(2640,4053,2)
(460,2069,2)
(1009,7894,2)
(2657,2344,2)
(6178,3638,2)
(8093,7291,2)
(3792,4123,2)
(5361,656,2)
(1811,4263,2)
(7652,3118,2)
(1395,4123,2)
(3124,1866,2)
(780,4758,2)
(8288,8913,2)
(6730,7846,2)
(6422,2399,2)
(1146,8913,2)
(5413,3722,2)
(8803,3376,2)
(7414,7374,2)
(1950,4011,2)
(6870,1284,2)
(8466,5061,2)
(8096,1974,2)
(6617,9140,2)
(648,2443,2)
(3871,2906,2)
(4501,7145,2)
(8838,5660,2)
(4247,2938,2)
(5596,4238,2)
(8010,7088,2)
(4546,3148,2)
(5919,8042,2)
(7124,1246,2)
(5065,4400,2)
(4206,5873,2)
(3732,7284,2)
(9138,7805,2)
(7869,7365,2)
(1940,837,2)
(5427,3443,2)
(1295,6712,2)
(3053,5061,2)
(1088,8928,2)
(3830,8913,2)
(556,851,2)
(1651,5231,2)
(691,1263,2)
(4484,3381,2)
(1434,4070,2)
(8023,2609,2)
(1965,2577,2)
(5157,5061,2)
(613,7604,2)
(3043,2485,2)
(5231,5450,2)
(1224,5061,2)
(5509,5638,2)
(8221,1765,2)
(6184,4656,2)
(1668,4061,2)
(6036,5165,2)
(3397,8234,2)
(2694,7046,2)
(3109,8566,2)
(6413,1775,2)
(3598,768,2)
(3013,1683,2)
(4728,1726,2)
(7450,6805,2)
(5507,1246,2)
(7362,6669,2)
(5600,6977,2)
(5484,933,2)
(6217,570,2)
(7721,3231,2)
(531,258,2)
(492,3879,2)
(2221,7191,2)
(2134,2043,2)
(7684,2939,2)
(1939,5427,2)
(7563,3376,2)
(8726,8865,2)
(7873,1306,2)
(4014,7343,2)
(368,3179,2)
(5809,5527,2)
(9104,952,2)
(5270,8566,2)
(6066,3376,2)
(5345,2399,2)
(768,1284,2)
(5719,4393,2)
(5502,4656,2)
(5105,4520,2)
(5528,6082,2)
(2792,7289,2)
(2651,8566,2)
(2363,1297,2)
(2317,2005,2)
(311,3376,2)
(6715,1093,2)
(6632,401,2)
(8118,2074,2)
(8745,7649,2)
(9119,6346,2)
(5602,293,2)
(9012,2982,2)
(5682,1876,2)
(7246,3361,2)
(8283,4401,2)
(574,5791,2)
(1353,8865,2)
(9136,7425,2)
(8498,5061,2)
(1816,3381,2)
(6424,3333,2)
(3124,7326,2)
(7202,974,2)
(1599,6513,2)
(406,5061,2)
(7120,79,2)
(6024,2630,2)
(2672,6669,2)
(5521,1394,2)
(2685,7997,2)
(6712,4446,2)
(8911,2138,2)
(2688,6272,2)
(377,8947,2)
(3365,8460,2)
(2097,5937,2)
(3469,4808,2)
(2530,8566,2)
(597,1683,2)
(9001,4882,2)
(7202,942,2)
(3205,5061,2)
(8104,4299,2)
(4790,7046,2)
(1869,3105,2)
(4802,4070,2)
(6017,4401,2)
(7013,930,2)
(3044,8863,2)
(3152,7113,2)
(2520,5061,2)
(4291,7223,2)
(6051,5441,2)
(8991,6669,2)
(6797,3879,2)
(8032,644,2)
(1862,926,2)
(7115,5608,2)
(1020,8396,2)
(9145,991,2)
(6594,3354,2)
(5065,952,2)
(2877,2614,2)
(7368,3879,2)
(5547,8566,2)
(631,4279,2)
(4889,1757,2)
(7429,8566,2)
(5616,2043,2)
(5148,8703,2)
(2663,8244,2)
(6428,4345,2)
(7261,315,2)
(875,8566,2)
(8050,5135,2)
(7587,1705,2)
(1666,3333,2)
(6852,8670,2)
(2325,3376,2)
(2281,8566,2)
(6450,6069,2)
(6939,1474,2)
(2195,5126,2)
(2615,2069,2)
(3544,5441,2)
(7290,7894,2)
(5184,7193,2)
(6524,3825,2)
(8192,7437,2)
(2094,3354,2)
(3010,5908,2)
(5232,795,2)
(2652,8566,2)
(6580,1769,2)
(5894,2485,2)
(5966,3638,2)
(78,2043,2)
(5066,8281,2)
(7199,5399,2)
(511,926,2)
(4850,7964,2)
(2619,1974,2)
(1480,3590,2)
(2135,7284,2)
(6575,1691,2)
(6321,1246,2)
(5346,5899,2)
(3029,4279,2)
(8797,3374,2)
(4948,3148,2)
(8843,8863,2)
(2995,63,2)
(5862,1064,2)
(7061,5789,2)
(8862,8924,2)
(5488,3374,2)
(266,7034,2)
(4752,3217,2)
(4336,1093,2)
(8054,3879,2)
(8126,2365,2)
(1610,2278,2)
(5142,5791,2)
(8198,3374,2)
(1504,7821,2)
(1776,2577,2)
(454,8566,2)
(2614,7235,2)
(2294,7740,2)
(4929,1010,2)
(7949,8566,2)
(686,5363,2)
(2293,6816,2)
(3997,3823,2)
(6919,5061,2)
(1615,8566,2)
(5017,8566,2)
(3148,770,2)
(4628,3570,2)
(4705,258,2)
(3199,6621,2)
(6033,4952,2)
(5045,7894,2)
(3139,8759,2)
(729,2005,2)
(3812,3381,2)
(5535,3376,2)
(9104,8703,2)
(4732,5061,2)
(463,7821,2)
(516,9092,2)
(4028,230,2)
(4738,5061,2)
(7825,4275,2)
(6349,930,2)
(6538,7120,2)
(2188,700,2)
(7899,1669,2)
(3457,2577,2)
(2779,9022,2)
(6927,2577,2)
(719,8566,2)
(4496,2736,2)
(5105,6940,2)
(1493,594,2)
(7837,7437,2)
(8168,8791,2)
(4597,6272,2)
(181,824,2)
(3283,5610,2)
(4080,5061,2)
(2928,570,2)
(8686,9003,2)
(8712,8021,2)
(5492,2239,2)
(7776,6867,2)
(2843,1854,2)
(2261,5937,2)
(7871,3879,2)
(5436,2806,2)
(780,7805,2)
(5285,7821,2)
(3861,5287,2)
(8683,2657,2)
(7989,2069,2)
(4527,8924,2)
(4998,7283,2)
(1731,5791,2)
(3984,2464,2)
(3703,1284,2)
(2645,1200,2)
(586,4419,2)
(1212,7480,2)
(2126,5061,2)
(3278,2443,2)
(6831,795,2)
(2457,4299,2)
(1679,7894,2)
(3829,5899,2)
(8462,3148,2)
(6075,8101,2)
(260,8132,2)
(9104,7594,2)
(1735,2165,2)
(5841,127,2)
(5491,3729,2)
(3752,8865,2)
(2822,1237,2)
(8703,1320,2)
(7132,3217,2)
(287,2399,2)
(1068,9003,2)
(1575,8566,2)
(591,5109,2)
(5700,4875,2)
(204,2005,2)
(1516,7410,2)
(9121,2069,2)
(7727,4546,2)
(4230,6213,2)
(6400,3638,2)
(1670,1571,2)
(1596,1055,2)
(441,2344,2)
(2645,8966,2)
(1851,3376,2)
(1841,8009,2)
(183,8564,2)
(9075,8292,2)
(4404,7343,2)
(1456,8334,2)
(1309,8566,2)
(2674,6621,2)
(8454,4616,2)
(8232,6233,2)
(3835,930,2)
(673,5481,2)
(3952,2938,2)
(8352,2326,2)
(8368,8601,2)
(7674,7825,2)
(5854,7966,2)
(8602,3376,2)
(6050,4902,2)
(7343,2039,2)
(381,2906,2)
(5105,8980,2)
(6996,4948,2)
(5061,6301,2)
(2682,8824,2)
(7289,6817,2)
(4476,3376,2)
(8508,2557,2)
(2332,7805,2)
(8275,3035,2)
(4871,967,2)
(4199,3374,2)
(5892,4011,2)
(5610,709,2)
(1600,8352,2)
(5881,4070,2)
(7636,3711,2)
(728,6082,2)
(3055,6056,2)
(1671,8188,2)
(6961,4070,2)
(2645,154,2)
(8097,2015,2)
(5585,1263,2)
(7876,3590,2)
(1629,1306,2)
(4328,7051,2)
(8723,7191,2)
(7273,3376,2)
(6173,6326,2)
(1994,4481,2)
(8610,3383,2)
(542,8841,2)
(5650,3376,2)
(2952,3376,2)
(6220,6092,2)
(380,4123,2)
(2020,7624,2)
(1529,2022,2)
(2164,4347,2)
(5192,4393,2)
(8666,1271,2)
(4296,4499,2)
(8177,8830,2)
(3713,3879,2)
(6293,5981,2)
(5316,8606,2)
(1941,1954,2)
(4660,5960,2)
(6694,5061,2)
(4470,244,2)
(6274,4346,2)
(1485,5061,2)
(8340,9036,2)
(1621,8601,2)
(2617,2344,2)
(3474,8197,2)
(325,7120,2)
(6561,8566,2)
(5476,8198,2)
(5835,7410,2)
(3974,8482,2)
(1066,8651,2)
(12,3930,2)
(4399,2117,2)
(2817,851,2)
(4801,8460,2)
(1714,6524,2)
(8755,153,2)
(2736,7510,2)
(7121,3590,2)
(7119,5061,2)
(1545,5692,2)
(3683,5905,2)
(3180,216,2)
(1285,1963,2)
(7431,6669,2)
(5642,1989,2)
(4896,2906,2)
(315,3202,2)
(7321,765,2)
(4263,2006,2)
(4270,2467,2)
(7514,795,2)
(391,3376,2)
(4759,3354,2)
(8735,2043,2)
(8322,9024,2)
(1618,7343,2)
(349,8932,2)
(349,2069,2)
(3349,6033,2)
(4555,1316,2)
(6128,765,2)
(7551,8334,2)
(2745,7480,2)
(6644,1532,2)
(8017,6817,2)
(5022,2497,2)
(2541,6817,2)
(256,952,2)
(705,2443,2)
(3388,2033,2)
(1937,2202,2)
(1675,974,2)
(5148,1050,2)
(5346,2908,2)
(3974,302,2)
(6200,7046,2)
(2847,2164,2)
(5789,2069,2)
(4092,7083,2)
(7548,6345,2)
(2331,5061,2)
(2271,6859,2)
(94,5791,2)
(5655,4501,2)
(407,7365,2)
(3692,302,2)
(6592,3963,2)
(6068,3354,2)
(4727,3198,2)
(7889,113,2)
(7666,4902,2)
(807,8670,2)
(7501,8508,2)
(5115,8566,2)
(4,8566,2)
(2839,1284,2)
(7490,7805,2)
(7509,3333,2)
(5047,4349,2)
(9107,8924,2)
(4908,4393,2)
(7735,3879,2)
(6013,8601,2)
(2584,6382,2)
(2146,5962,2)
(3991,8573,2)
(8059,5905,2)
(4916,2605,2)
(409,5058,2)
(4322,6636,2)
(6675,5061,2)
(2662,6869,2)
(6984,1958,2)
(7250,4092,2)
(8100,153,2)
(3826,6977,2)
(4099,6082,2)
(3667,570,2)
(323,795,2)
(8831,4468,2)
(2689,930,2)
(2951,6669,2)
(4840,8985,2)
(7266,1306,2)
(5219,2906,2)
(4333,3879,2)
(3930,5061,2)
(4981,8566,2)
(2385,5441,2)
(6641,4656,2)
(8365,4766,2)
(2663,3231,2)
(5864,6092,2)
(6220,930,2)
(1444,5450,2)
(5069,765,2)
(3236,7224,2)
(4575,7700,2)
(2953,2573,2)
(2931,3879,2)
(7738,3879,2)
(1474,6611,2)
(2767,1468,2)
(7725,5809,2)
(7224,2271,2)
(2389,7480,2)
(2903,3588,2)
(7294,2344,2)
(8916,2069,2)
(8566,5244,2)
(334,5610,2)
(5105,5599,2)
(4687,8945,2)
(1200,8566,2)
(6980,401,2)
(3473,3333,2)
(2650,8566,2)
(7921,3376,2)
(5349,7902,2)
(6115,1876,2)
(5755,4952,2)
(7060,4299,2)
(7825,4952,2)
(134,5905,2)
(5604,2025,2)
(980,8566,2)
(3316,8900,2)
(791,1263,2)
(8772,906,2)
(8777,1532,2)
(868,6759,2)
(1971,5451,2)
(8660,1762,2)
(1135,5778,2)
(1768,3596,2)
(4807,5791,2)
(8949,2850,2)
(2650,5061,2)
(8742,2043,2)
(3153,2474,2)
(173,3376,2)
(6421,2420,2)
(4748,7624,2)
(8070,2577,2)
(7806,6257,2)
(3758,8566,2)
(4735,352,2)
(3042,5899,2)
(7076,7034,2)
(5738,5591,2)
(4817,2840,2)
(2600,6524,2)
(7508,3879,2)
(8924,400,2)
(461,2497,2)
(6889,8566,2)
(8337,3383,2)
(5449,3211,2)
(375,3638,2)
(6323,3376,2)
(7074,3879,2)
(3011,6669,2)
(5147,6735,2)
(8417,5997,2)
(5105,2870,2)
(3651,6977,2)
(4233,258,2)
(9048,5061,2)
(906,1187,2)
(2584,4400,2)
(6589,7053,2)
(7570,3879,2)
(3640,6107,2)
(7711,2938,2)
(2770,6260,2)
(9104,3719,2)
(2107,3310,2)
(5765,379,2)
(966,7592,2)
(1829,5220,2)
(7071,1686,2)
(3821,2614,2)
(2320,3376,2)
(2983,700,2)
(1223,302,2)
(2087,4952,2)
(6623,8558,2)
(669,7821,2)
(6578,4687,2)
(3202,3388,2)
(8670,7250,2)
(4992,3879,2)
(782,8227,2)
(3062,2906,2)
(1929,2938,2)
(6149,4279,2)
(5598,8521,2)
(8193,7920,2)
(3602,8321,2)
(3404,5061,2)
(9083,2760,2)
(1968,3516,2)
(7622,3584,2)
(3055,4586,2)
(8495,3520,2)
(8386,2336,2)
(7984,1714,2)
(6170,795,2)
(947,3005,2)
(6447,8573,2)
(8628,6759,2)
(698,8670,2)
(7440,1474,2)
(2788,185,2)
(5355,3219,2)
(412,1775,2)
(8287,5296,2)
(1556,7309,2)
(337,3098,2)
(3124,4864,2)
(3754,8244,2)
(3365,5937,2)
(1935,3879,2)
(3412,3376,2)
(1274,7283,2)
(8078,1474,2)
(9068,2057,2)
(4962,3333,2)
(5399,3505,2)
(5695,5231,2)
(3940,1259,2)
(1067,6388,2)
(7138,5610,2)
(3918,7343,2)
(8473,6727,2)
(300,3376,2)
(712,1714,2)
(964,7147,2)
(5105,7878,2)
(1888,6380,2)
(4219,7521,2)
(2532,8566,2)
(1997,7343,2)
(5105,7587,2)
(2635,5621,2)
(92,8566,2)
(3955,3437,2)
(1837,4129,2)
(750,3879,2)
(5599,851,2)
(9084,5061,2)
(2176,5061,2)
(5312,3414,2)
(5184,9150,2)
(2182,6082,2)
(7015,6033,2)
(7748,7805,2)
(6366,6223,2)
(4,8244,2)
(5036,7046,2)
(2507,1402,2)
(4923,8841,2)
(8435,9150,2)
(4181,3354,2)
(8822,1369,2)
(5477,6435,2)
(2798,3879,2)
(8318,2241,2)
(8560,3376,2)
(2296,6069,2)
(2324,5165,2)
(6376,3376,2)
(7868,8566,2)
(256,8703,2)
(1224,6213,2)
(6522,6261,2)
(4012,8299,2)
(1184,5061,2)
(7939,3354,2)
(7094,4612,2)
(349,2761,2)
(3571,3205,2)
(2179,4773,2)
(7036,8460,2)
(1055,6817,2)
(3880,1762,2)
(4735,166,2)
(1767,1539,2)
(167,150,2)
(7358,1532,2)
(6549,6513,2)
(4592,5790,2)
(6701,5061,2)
(7455,5061,2)
(215,3376,2)
(1469,2019,2)
(2820,8566,2)
(3161,5905,2)
(3104,5061,2)
(178,253,2)
(7582,3376,2)
(2057,5061,2)
(1128,177,2)
(9093,3104,2)
(5148,2511,2)
(1684,6859,2)
(7808,4623,2)
(2044,6981,2)
(6912,4524,2)
(6329,631,2)
(4690,2344,2)
(4474,11,2)
(443,4393,2)
(8517,2938,2)
(6768,1154,2)
(6823,4481,2)
(1961,6941,2)
(6811,631,2)
(8156,3381,2)
(4307,926,2)
(3310,7343,2)
(2139,7358,2)
(5326,1963,2)
(3867,6669,2)
(8620,3879,2)
(1127,5287,2)
(105,3156,2)
(6308,633,2)
(3043,8703,2)
(2520,8566,2)
(7546,8334,2)
(3491,6768,2)
(4681,4361,2)
(9104,2768,2)
(5141,127,2)
(7180,302,2)
(1354,3711,2)
(4751,7309,2)
(8595,8049,2)
(3668,795,2)
(4440,1417,2)
(4081,5287,2)
(203,8009,2)
(1361,3148,2)
(3500,2399,2)
(2883,8623,2)
(8470,6049,2)
(3764,7986,2)
(4753,5869,2)
(6825,7053,2)
(7643,795,2)
(4572,5937,2)
(1220,2344,2)
(879,4481,2)
(8495,230,2)
(6564,7807,2)
(8794,3376,2)
(8582,2908,2)
(3751,1314,2)
(2095,7088,2)
(6265,5220,2)
(2840,5905,2)
(4766,8573,2)
(2451,7283,2)
(5463,1237,2)
(2682,258,2)
(8080,3376,2)
(9030,2359,2)
(7734,8566,2)
(1524,5061,2)
(2294,3376,2)
(1230,5481,2)
(7894,6033,2)
(5763,2069,2)
(5667,7029,2)
(353,3516,2)
(7774,4299,2)
(6051,8566,2)
(7885,5905,2)
(3915,4393,2)
(1782,5061,2)
(6534,5084,2)
(5687,6977,2)
(2910,4238,2)
(1211,7894,2)
(8706,1866,2)
(1581,4248,2)
(5733,8913,2)
(7995,3879,2)
(3731,4656,2)
(5851,302,2)
(7550,5061,2)
(6173,4427,2)
(3175,9003,2)
(5414,644,2)
(2667,5610,2)
(6039,7821,2)
(1259,8566,2)
(8197,8566,2)
(8495,7778,2)
(8499,3156,2)
(4959,8566,2)
(3665,8790,2)
(8766,4478,2)
(306,7894,2)
(5009,5789,2)
(2052,926,2)
(92,4011,2)
(5038,8334,2)
(1853,3354,2)
(2217,8566,2)
(2517,8321,2)
(2810,7347,2)
(8031,3928,2)
(4604,5061,2)
(3158,8924,2)
(7518,1059,2)
(1829,8806,2)
(9128,7649,2)
(5148,4520,2)
(2653,1947,2)
(5337,5954,2)
(5754,5741,2)
(8570,2399,2)
(256,6340,2)
(6553,8737,2)
(4499,6763,2)
(8960,6637,2)
(851,974,2)
(1639,6977,2)
(5047,4238,2)
(4156,3516,2)
(7440,5061,2)
(2374,8566,2)
(5016,2399,2)
(3129,2005,2)
(3125,926,2)
(3912,795,2)
(3808,1150,2)
(3876,2043,2)
(789,7725,2)
(3507,4297,2)
(7792,8566,2)
(5147,8601,2)
(2595,6817,2)
(3979,65,2)
(6705,8168,2)
(2655,3397,2)
(6107,1016,2)
(5505,8601,2)
(4677,4238,2)
(597,7669,2)
(3848,3219,2)
(8582,4420,2)
(8865,3767,2)
(5148,8483,2)
(5105,7962,2)
(8196,5869,2)
(6555,8566,2)
(4859,8566,2)
(9104,8966,2)
(7171,2652,2)
(7097,7894,2)
(3549,3711,2)
(8406,6260,2)
(30,7746,2)
(2964,9150,2)
(8092,5789,2)
(1598,5923,2)
(1645,8566,2)
(8168,3477,2)
(5105,2768,2)
(2396,3376,2)
(4934,1686,2)
(2219,7727,2)
(5327,3376,2)
(3335,7343,2)
(6294,5591,2)
(3249,8566,2)
(2308,2028,2)
(8949,1078,2)
(3908,5061,2)
(6867,588,2)
(2746,3376,2)
(6966,3376,2)
(1457,147,2)
(7309,1458,2)
(5880,6215,2)
(6877,6281,2)
(5427,65,2)
(8706,952,2)
(6205,4393,2)
(4703,933,2)
(8034,2271,2)
(1211,2420,2)
(421,9121,2)
(3347,6817,2)
(5709,5905,2)
(372,7410,2)
(227,7283,2)
(7241,2241,2)
(2575,8566,2)
(1843,7406,2)
(107,8857,2)
(1465,8945,2)
(739,933,2)
(6773,795,2)
(2248,586,2)
(5806,8454,2)
(8025,4508,2)
(1716,5937,2)
(8922,5220,2)
(5450,7582,2)
(2077,2791,2)
(3521,0,2)
(6037,1077,2)
(440,795,2)
(4359,974,2)
(7898,7051,2)
(5592,7343,2)
(709,1263,2)
(3903,49,2)
(9016,8234,2)
(7029,851,2)
(8845,3694,2)
(5405,3376,2)
(1645,5165,2)
(1134,2069,2)
(852,153,2)
(1193,8566,2)
(4275,5449,2)
(7648,3134,2)
(6218,5061,2)
(4943,3376,2)
(5747,5061,2)
(6399,8652,2)
(7517,8102,2)
(4772,7283,2)
(3955,523,2)
(5101,1783,2)
(5578,3879,2)
(3224,2736,2)
(8831,3408,2)
(3342,5403,2)
(1659,8566,2)
(993,2048,2)
(3688,2012,2)
(486,3376,2)
(8413,9027,2)
(1664,8265,2)
(2769,5061,2)
(5112,4129,2)
(3872,765,2)
(8208,5835,2)
(1343,219,2)
(8826,4347,2)
(2114,5061,2)
(6553,5741,2)
(7498,933,2)
(1702,7724,2)
(4044,8670,2)
(2457,2870,2)
(2737,2497,2)
(5200,7029,2)
(3291,4481,2)
(1803,9024,2)
(5413,8185,2)
(8121,8652,2)
(2629,4011,2)
(3097,8566,2)
(6766,6730,2)
(5079,8475,2)
(8155,2467,2)
(5979,3694,2)
(5559,7178,2)
(2812,8566,2)
(8584,2534,2)
(844,2262,2)
(5960,5061,2)
(5620,9022,2)
(7885,8566,2)
(8542,3163,2)
(962,2399,2)
(5148,7962,2)
(1602,2577,2)
(3304,3376,2)
(449,3711,2)
(4870,4808,2)
(4854,4347,2)
(1624,5129,2)
(6909,3116,2)
(80,4067,2)
(4884,7285,2)
(7365,933,2)
(4896,3093,2)
(3455,7351,2)
(2594,3157,2)
(366,1974,2)
(2504,9103,2)
(4733,5337,2)
(8939,7448,2)
(4483,7351,2)
(8407,6065,2)
(758,8841,2)
(7416,8035,2)
(6244,4299,2)
(6336,3584,2)
(8205,4952,2)
(8747,7942,2)
(4963,5133,2)
(2778,4393,2)
(1283,6008,2)
(6787,2938,2)
(6793,8446,2)
(403,1403,2)
(7021,7825,2)
(7168,3148,2)
(4929,7700,2)
(6859,5591,2)
(1558,3376,2)
(75,7135,2)
(1803,127,2)
(7284,7805,2)
(321,8652,2)
(3099,8375,2)
(5610,1263,2)
(4981,5061,2)
(2634,5061,2)
(8972,3376,2)
(6437,2431,2)
(5847,7144,2)
(8255,5061,2)
(2524,3982,2)
(4399,7113,2)
(3288,546,2)
(5117,2607,2)
(2240,8566,2)
(8270,7051,2)
(4088,230,2)
(4487,4393,2)
(7998,6669,2)
(1377,644,2)
(2822,5937,2)
(6126,4393,2)
(8268,5670,2)
(9146,8887,2)
(369,5591,2)
(4273,5061,2)
(7364,6051,2)
(3712,7920,2)
(5962,1959,2)
(3987,2069,2)
(6579,7051,2)
(4605,6977,2)
(2880,2467,2)
(1673,8102,2)
(3114,6817,2)
(5676,1184,2)
(281,3156,2)
(1427,8924,2)
(3307,1224,2)
(2441,8601,2)
(4904,6867,2)
(9112,3381,2)
(9136,4864,2)
(7219,230,2)
(3171,3711,2)
(3520,6840,2)
(2865,2043,2)
(2147,2938,2)
(1671,2109,2)
(347,5570,2)
(752,5061,2)
(5692,8619,2)
(7564,2605,2)
(8229,5591,2)
(5100,6867,2)
(5128,4292,2)
(6546,8601,2)
(6736,795,2)
(8190,4238,2)
(6500,2074,2)
(7145,2614,2)
(9046,5061,2)
(1080,5061,2)
(3688,258,2)
(7504,5610,2)
(5846,3475,2)
(5960,8566,2)
(1104,7587,2)
(1228,6033,2)
(1060,9003,2)
(5078,177,2)
(2645,952,2)
(4817,5905,2)
(8529,3383,2)
(8352,4962,2)
(7881,7335,2)
(328,4047,2)
(1749,3376,2)
(2410,1963,2)
(1647,2069,2)
(6069,7113,2)
(4203,3879,2)
(6374,7596,2)
(4043,459,2)
(5626,3940,2)
(4705,8651,2)
(118,6380,2)
(5870,8566,2)
(8254,8972,2)
(6840,230,2)
(618,5061,2)
(2303,424,2)
(8431,2210,2)
(6443,3365,2)
(9104,6836,2)
(3142,8924,2)
(5402,5450,2)
(7206,8534,2)
(5747,5937,2)
(4610,3231,2)
(1645,5061,2)
(5689,2577,2)
(6672,5061,2)
(3859,6082,2)
(2233,7410,2)
(1284,6939,2)
(7299,6033,2)
(3929,3163,2)
(2051,6977,2)
(7477,1499,2)
(5431,6768,2)
(1187,7241,2)
(4603,2443,2)
(3351,258,2)
(6512,4837,2)
(5042,3879,2)
(5182,5962,2)
(843,297,2)
(8359,258,2)
(602,2548,2)
(7175,3584,2)
(9136,1866,2)
(3110,1009,2)
(908,974,2)
(8919,6024,2)
(7703,554,2)
(5797,5981,2)
(9020,5905,2)
(4471,765,2)
(5666,7964,2)
(3253,8802,2)
(5106,3279,2)
(9104,4816,2)
(17,4836,2)
(7578,3376,2)
(4179,8601,2)
(8492,631,2)
(8774,2443,2)
(83,8234,2)
(4664,5061,2)
(199,3354,2)
(2165,5165,2)
(2157,2467,2)
(6380,219,2)
(7517,3085,2)
(4679,4263,2)
(4043,5403,2)
(7228,7649,2)
(1192,4291,2)
(8678,3376,2)
(6603,2005,2)
(3223,6986,2)
(8193,1636,2)
(6127,6069,2)
(8890,5441,2)
(1334,974,2)
(3305,3376,2)
(4969,5522,2)
(1693,258,2)
(5468,4347,2)
(8668,5905,2)
(4430,1075,2)
(3099,3376,2)
(4872,8566,2)
(2538,6637,2)
(3537,6049,2)
(7887,1374,2)
(3301,1686,2)
(7644,952,2)
(3511,3879,2)
(8922,6768,2)
(7034,8923,2)
(8100,8755,2)
(5784,5789,2)
(3865,3354,2)
(8638,7700,2)
(8550,3879,2)
(4272,3374,2)
(8881,3879,2)
(4845,5061,2)
(852,3333,2)
(6754,8841,2)
(2274,2803,2)
(1685,7343,2)
(2354,5075,2)
(7888,5058,2)
(394,7174,2)
(5671,2748,2)
(528,861,2)
(3150,1128,2)
(7576,700,2)
(239,3432,2)
(3650,7571,2)
(6163,2399,2)
(925,2938,2)
(3075,7029,2)
(1607,4801,2)
(1304,4656,2)
(4358,6260,2)
(8791,4047,2)
(3854,3985,2)
(330,1246,2)
(7355,3397,2)
(3168,3376,2)
(4932,5835,2)
(2451,7252,2)
(8313,8287,2)
(9104,4400,2)
(8865,2543,2)
(5440,5510,2)
(1974,6203,2)
(6880,3222,2)
(5427,258,2)
(5148,838,2)
(8241,1670,2)
(6371,7088,2)
(5220,7365,2)
(386,3354,2)
(5572,700,2)
(4134,7023,2)
(4897,1775,2)
(7127,595,2)
(7852,45,2)
(6715,5061,2)
(816,5591,2)
(5148,7629,2)
(8508,1785,2)
(1132,3333,2)
(6164,8135,2)
(3543,4393,2)
(3823,9150,2)
(8738,2359,2)
(8606,4003,2)
(8232,9150,2)
(7296,8601,2)
(8054,7995,2)
(6979,1284,2)
(8657,4882,2)
(1380,795,2)
(1887,7499,2)
(5074,2975,2)
(5930,7521,2)
(5430,2938,2)
(6593,6968,2)
(7251,4393,2)
(1278,1246,2)
(4953,5402,2)
(2780,4123,2)
(5192,2973,2)
(337,982,2)
(4654,3879,2)
(8949,7123,2)
(4905,7283,2)
(6381,3383,2)
(1113,2069,2)
(563,2241,2)
(5087,7343,2)
(6084,6977,2)
(6184,5686,2)
(2333,8396,2)
(7916,5834,2)
(2710,5790,2)
(3203,5231,2)
(6926,1035,2)
(4063,5403,2)
(4295,3376,2)
(7464,1374,2)
(2139,6340,2)
(9078,3376,2)
(4882,6214,2)
(4256,9140,2)
(6457,8670,2)
(3810,5610,2)
(6823,7278,2)
(536,3354,2)
(5818,7482,2)
(8953,4263,2)
(7345,7034,2)
(4379,933,2)
(4237,3231,2)
(1741,3376,2)
(5671,6176,2)
(2549,2399,2)
(6250,8653,2)
(8095,8566,2)
(4396,8101,2)
(2841,5414,2)
(1234,7821,2)
(5613,3217,2)
(7450,5962,2)
(2352,9086,2)
(4743,9002,2)
(4517,2152,2)
(4641,5481,2)
(3738,5937,2)
(1552,8566,2)
(3638,2975,2)
(4486,8602,2)
(4198,2803,2)
(8314,1093,2)
(1885,5771,2)
(1,546,2)
(3494,3471,2)
(3387,8701,2)
(9102,7388,2)
(303,1284,2)
(5077,3354,2)
(5025,4393,2)
(6690,8566,2)
(4751,5287,2)
(8089,5061,2)
(1765,4120,2)
(6331,6768,2)
(3788,3005,2)
(6261,8601,2)
(2345,795,2)
(5859,6637,2)
(5555,3376,2)
(8769,3528,2)
(5647,45,2)
(1171,7023,2)
(7922,5835,2)
(4426,5962,2)
(340,3189,2)
(2689,8566,2)
(2411,177,2)
(113,3879,2)
(9055,4263,2)
(5721,6092,2)
(4981,6932,2)
(4712,8566,2)
(3360,2033,2)
(9081,6082,2)
(8623,1284,2)
(8067,7088,2)
(5850,7113,2)
(6586,2975,2)
(5277,6986,2)
(3165,65,2)
(3074,2434,2)
(4692,7351,2)
(5240,3374,2)
(4743,8566,2)
(770,5165,2)
(3488,5061,2)
(3078,7779,2)
(7644,6382,2)
(2029,926,2)
(4928,230,2)
(1032,3879,2)
(2139,7962,2)
(6959,6880,2)
(1756,14,2)
(8504,5220,2)
(6343,5399,2)
(8161,3376,2)
(2719,6986,2)
(657,5899,2)
(7892,9150,2)
(1323,1686,2)
(7742,4393,2)
(3231,8107,2)
(7855,2443,2)
(6620,5061,2)
(5825,4902,2)
(4554,3879,2)
(9134,8566,2)
(4195,9061,2)
(5060,4804,2)
(4646,61,2)
(1933,3333,2)
(2610,1284,2)
(2027,8924,2)
(5099,1974,2)
(3043,7425,2)
(3085,8102,2)
(3020,8601,2)
(368,4656,2)
(8466,4070,2)
(5995,3516,2)
(8641,2607,2)
(1281,3457,2)
(7062,1066,2)
(7512,3381,2)
(8758,6633,2)
(2302,2173,2)
(6819,3767,2)
(6008,8566,2)
(7534,4074,2)
(4581,236,2)
(1725,3005,2)
(9104,35,2)
(8771,8566,2)
(8441,4747,2)
(3018,1483,2)
(3394,4481,2)
(1808,1756,2)
(6712,644,2)
(3787,8566,2)
(1737,3376,2)
(9110,3638,2)
(4523,8281,2)
(9104,7358,2)
(6989,4648,2)
(1217,8566,2)
(741,4656,2)
(4714,5061,2)
(1590,5484,2)
(1169,3376,2)
(7376,2069,2)
(4157,7029,2)
(4650,2453,2)
(7406,5610,2)
(8811,5791,2)
(4159,1499,2)
(3271,3374,2)
(3231,2165,2)
(3312,1589,2)
(8583,2344,2)
(4676,7201,2)
(8091,7088,2)
(2162,6859,2)
(8071,8566,2)
(7347,8217,2)
(4,3153,2)
(256,2496,2)
(8238,8945,2)
(2810,8601,2)
(3338,2577,2)
(6048,3050,2)
(1075,2975,2)
(1428,7201,2)
(5359,8601,2)
(3514,3973,2)
(3973,8752,2)
(2276,4952,2)
(1225,5803,2)
(2482,5441,2)
(8808,2074,2)
(8451,7920,2)
(4237,8244,2)
(4852,5790,2)
(253,780,2)
(3403,127,2)
(3683,602,2)
(3211,3202,2)
(5505,8372,2)
(827,7113,2)
(1275,7351,2)
(82,4562,2)
(6379,8281,2)
(4994,7643,2)
(6214,6069,2)
(8519,5937,2)
(683,1772,2)
(2360,4656,2)
(6564,6435,2)
(8196,429,2)
(290,8865,2)
(4486,3376,2)
(5489,7343,2)
(4027,7309,2)
(8157,4214,2)
(5982,4401,2)
(1205,7113,2)
(5129,8963,2)
(0,5109,2)
(8241,1571,2)
(6543,674,2)
(1651,2709,2)
(7308,3454,2)
(5579,2005,2)
(4249,3333,2)
(927,8566,2)
(8510,7053,2)
(99,5857,2)
(7902,8566,2)
(8111,302,2)
(2202,258,2)
(393,6859,2)
(5008,3093,2)
(1939,3443,2)
(7803,8601,2)
(7014,3005,2)
(6640,2344,2)
(6662,8566,2)
(6213,644,2)
(2569,1601,2)
(2524,7410,2)
(4265,1284,2)
(8777,156,2)
(3498,5789,2)
(2626,1263,2)
(5092,700,2)
(7150,6932,2)
(8571,2005,2)
(7407,3584,2)
(9006,2195,2)
(1162,3376,2)
(5141,5905,2)
(4361,554,2)
(142,5791,2)
(6967,570,2)
(18,3505,2)
(4701,2691,2)
(9118,5749,2)
(6219,3035,2)
(3263,3005,2)
(9092,1284,2)
(4831,851,2)
(7664,2069,2)
(5619,2938,2)
(6724,8321,2)
(560,127,2)
(5544,8566,2)
(5714,8956,2)
(8942,5602,2)
(2846,9140,2)
(6758,6877,2)
(293,3376,2)
(2205,5591,2)
(6780,1565,2)
(2468,6994,2)
(7865,7437,2)
(5073,8396,2)
(2243,7309,2)
(1150,127,2)
(6748,1501,2)
(3124,2870,2)
(8782,5061,2)
(1327,5836,2)
(7702,2577,2)
(2448,3855,2)
(8019,6768,2)
(7167,4299,2)
(4102,8573,2)
(7212,3381,2)
(8008,7410,2)
(775,7088,2)
(3297,8670,2)
(1101,6370,2)
(6171,554,2)
(4875,5869,2)
(2074,6558,2)
(1659,974,2)
(4219,1056,2)
(5034,909,2)
(3758,3376,2)
(3701,8566,2)
(4663,7034,2)
(4304,3806,2)
(6214,4039,2)
(5487,5610,2)
(8386,8928,2)
(4193,5610,2)
(8628,3231,2)
(5661,8566,2)
(5869,5571,2)
(6567,3544,2)
(301,3711,2)
(868,8244,2)
(1821,3544,2)
(3205,63,2)
(8242,8566,2)
(3169,6867,2)
(2243,65,2)
(700,3254,2)
(5231,4094,2)
(959,8244,2)
(1563,8566,2)
(837,224,2)
(975,2288,2)
(1760,7727,2)
(2133,6669,2)
(1160,15,2)
(8503,926,2)
(3548,5061,2)
(2219,1246,2)
(7793,926,2)
(8918,6977,2)
(3641,631,2)
(7371,3376,2)
(3707,6069,2)
(3893,3374,2)
(5388,2375,2)
(4345,7440,2)
(1419,9024,2)
(1922,8573,2)
(1578,5789,2)
(6978,3376,2)
(5537,8924,2)
(3054,1629,2)
(6581,5692,2)
(227,340,2)
(5365,8566,2)
(7655,3005,2)
(1663,230,2)
(6396,6092,2)
(4558,4608,2)
(5402,5197,2)
(7528,4808,2)
(1613,4400,2)
(4880,644,2)
(5954,6817,2)
(2920,6637,2)
(2463,1965,2)
(8024,8359,2)
(6281,8566,2)
(3615,3879,2)
(7350,7351,2)
(8461,3879,2)
(1449,5061,2)
(7775,8566,2)
(7731,8601,2)
(4294,6294,2)
(2842,5583,2)
(6690,2069,2)
(6861,8596,2)
(3332,9123,2)
(2601,8566,2)
(6159,5403,2)
(567,2359,2)
(3362,5061,2)
(8257,3879,2)
(1126,9002,2)
(820,4481,2)
(1115,5706,2)
(2696,4921,2)
(5465,7343,2)
(656,6977,2)
(2768,1468,2)
(3090,1492,2)
(3086,6637,2)
(6481,5767,2)
(2422,1468,2)
(6312,5061,2)
(5363,7120,2)
(5106,6932,2)
(4111,631,2)
(5418,1086,2)
(62,5048,2)
(5672,7053,2)
(236,800,2)
(7248,4771,2)
(4262,9140,2)
(8902,3381,2)
(3414,3376,2)
(2068,1246,2)
(3249,5061,2)
(6418,5061,2)
(731,2375,2)
(4547,3333,2)
(4979,9037,2)
(7746,5061,2)
(3403,4337,2)
(8321,3376,2)
(3705,5791,2)
(1407,7343,2)
(8123,837,2)
(4403,5439,2)
(5164,6759,2)
(7382,8841,2)
(5287,829,2)
(2269,4481,2)
(4760,2274,2)
(963,1263,2)
(2613,631,2)
(4562,7557,2)
(5073,2990,2)
(6634,7285,2)
(6798,5441,2)
(6556,4656,2)
(5258,8009,2)
(4084,3376,2)
(4801,5061,2)
(8595,5789,2)
(4682,8042,2)
(8648,4401,2)
(1186,1959,2)
(7397,3222,2)
(1976,5492,2)
(2179,5891,2)
(4237,3376,2)
(6281,2938,2)
(4524,2583,2)
(688,1331,2)
(6863,3879,2)
(7025,644,2)
(4689,5403,2)
(941,5610,2)
(256,8966,2)
(1135,2655,2)
(6941,291,2)
(2407,3376,2)
(3475,8566,2)
(1125,300,2)
(2358,8321,2)
(1824,7472,2)
(26,3376,2)
(8543,9150,2)
(8142,4972,2)
(6656,6977,2)
(3570,5838,2)
(6004,9134,2)
(9136,4642,2)
(6822,3376,2)
(1778,153,2)
(6476,974,2)
(6875,8334,2)
(196,79,2)
(5920,2973,2)
(3936,5061,2)
(8654,9140,2)
(322,8227,2)
(2818,5610,2)
(8401,4070,2)
(2548,5061,2)
(8813,7991,2)
(439,302,2)
(7909,1775,2)
(5826,1532,2)
(1090,8913,2)
(3584,8101,2)
(3729,1834,2)
(7135,3134,2)
(7467,7029,2)
(2658,1686,2)
(4186,9150,2)
(7903,2906,2)
(5220,7869,2)
(2875,3374,2)
(2738,4656,2)
(4670,7034,2)
(5344,926,2)
(9118,8912,2)
(4762,1284,2)
(8079,7321,2)
(3291,5610,2)
(3240,5061,2)
(4053,7410,2)
(164,4011,2)
(4058,6932,2)
(3280,8863,2)
(189,6669,2)
(8863,5165,2)
(8172,3374,2)
(4550,8281,2)
(4732,5791,2)
(7611,8566,2)
(430,5403,2)
(4175,3376,2)
(2993,4337,2)
(4515,3588,2)
(3925,2938,2)
(8256,7587,2)
(1546,6225,2)
(6929,3376,2)
(7452,6859,2)
(3526,3772,2)
(7507,8566,2)
(6191,8610,2)
(1280,5767,2)
(401,8248,2)
(2224,5061,2)
(3326,4656,2)
(274,2605,2)
(4740,3202,2)
(3882,5789,2)
(4797,5791,2)
(2790,795,2)
(1830,9060,2)
(6559,3376,2)
(8945,7073,2)
(5044,3376,2)
(4089,8566,2)
(3416,8566,2)
(5449,8360,2)
(2765,4070,2)
(4598,3217,2)
(4115,7046,2)
(3192,1474,2)
(3638,1278,2)
(1581,2028,2)
(5922,7280,2)
(1706,2614,2)
(1284,8520,2)
(5009,4306,2)
(4303,5235,2)
(4596,3376,2)
(8455,8566,2)
(1417,5061,2)
(8778,8764,2)
(9066,2262,2)
(6173,596,2)
(7929,3879,2)
(3896,2577,2)
(9120,5937,2)
(1447,3551,2)
(7089,8601,2)
(1598,8865,2)
(4914,2713,2)
(7644,6127,2)
(1057,5061,2)
(5148,2165,2)
(5130,8566,2)
(4765,3711,2)
(3672,2005,2)
(4380,5231,2)
(3871,5937,2)
(6071,5835,2)
(4607,3590,2)
(474,5217,2)
(434,8566,2)
(3467,8913,2)
(3528,65,2)
(1701,1271,2)
(1413,5290,2)
(5136,7920,2)
(9140,5767,2)
(3269,9036,2)
(4222,2938,2)
(1754,5165,2)
(6775,933,2)
(7983,4337,2)
(3119,6730,2)
(2311,2273,2)
(340,8042,2)
(4602,2337,2)
(4143,8408,2)
(1368,2245,2)
(8022,3035,2)
(56,7309,2)
(5513,795,2)
(1702,3914,2)
(3081,7046,2)
(7895,2605,2)
(7756,1068,2)
(6260,1266,2)
(7533,7583,2)
(98,6803,2)
(6252,5061,2)
(1528,5231,2)
(3250,4306,2)
(3561,8566,2)
(9098,3376,2)
(4742,5791,2)
(6327,7051,2)
(3414,5061,2)
(8169,2005,2)
(4003,8376,2)
(7819,2212,2)
(6962,4070,2)
(7380,9098,2)
(1030,8244,2)
(2151,795,2)
(7944,3879,2)
(4607,7121,2)
(6892,2028,2)
(4620,7113,2)
(7267,2399,2)
(7421,3488,2)
(2276,8566,2)
(319,3376,2)
(5255,3694,2)
(5872,5610,2)
(4831,7046,2)
(3141,5061,2)
(4695,3148,2)
(7424,6867,2)
(1588,3376,2)
(1555,3879,2)
(774,8566,2)
(3374,8599,2)
(2186,8107,2)
(2511,1263,2)
(4297,1076,2)
(7557,8376,2)
(5437,930,2)
(6903,7805,2)
(3750,3383,2)
(4452,82,2)
(2864,7328,2)
(1943,3879,2)
(2061,2497,2)
(7858,926,2)
(7820,5791,2)
(5923,8566,2)
(7561,8042,2)
(1644,7053,2)
(6304,4451,2)
(7361,8101,2)
(1597,7821,2)
(2826,3376,2)
(5707,8601,2)
(6073,3694,2)
(4085,974,2)
(8950,2577,2)
(3985,315,2)
(5279,6556,2)
(7970,8508,2)
(5865,3061,2)
(8706,4304,2)
(8798,7113,2)
(7555,5110,2)
(4396,7,2)
(5375,3376,2)
(3587,8137,2)
(5260,2273,2)
(7663,3374,2)
(885,4346,2)
(5194,4299,2)
(9027,851,2)
(2675,5061,2)
(1046,7501,2)
(2457,2496,2)
(4255,401,2)
(2365,5484,2)
(507,1244,2)
(4828,3516,2)
(2278,6669,2)
(5699,4499,2)
(8390,2069,2)
(5411,7624,2)
(3248,8566,2)
(2735,6986,2)
(1498,2577,2)
(3441,4263,2)
(5640,5962,2)
(4897,1466,2)
(3295,1064,2)
(2558,6730,2)
(4543,8924,2)
(7424,3169,2)
(2261,7410,2)
(7883,3376,2)
(4372,8566,2)
(6524,415,2)
(4067,6977,2)
(1102,6712,2)
(2735,8566,2)
(6002,700,2)
(3644,4070,2)
(7186,7775,2)
(4176,1920,2)
(5686,2738,2)
(3560,7920,2)
(5381,5061,2)
(4683,1151,2)
(4117,2399,2)
(5137,2472,2)
(129,1474,2)
(632,8858,2)
(3642,2069,2)
(2701,8321,2)
(7990,8334,2)
(2374,2344,2)
(5073,8462,2)
(7204,1934,2)
(6996,1203,2)
(418,350,2)
(30,3376,2)
(4107,5399,2)
(6781,8564,2)
(7193,5937,2)
(4971,9024,2)
(1960,7309,2)
(826,554,2)
(5727,4273,2)
(915,8601,2)
(4199,5061,2)
(5637,7825,2)
(3932,5966,2)
(8615,3376,2)
(8802,5058,2)
(7081,4637,2)
(2150,6214,2)
(5481,3376,2)
(3658,4481,2)
(6931,8652,2)
(3647,2491,2)
(8793,3376,2)
(1878,6977,2)
(2227,1474,2)
(4229,2058,2)
(4350,3879,2)
(3783,5767,2)
(5400,8913,2)
(2532,5061,2)
(6163,6024,2)
(868,8396,2)
(1906,65,2)
(8596,4026,2)
(8025,7171,2)
(5514,8035,2)
(2646,3219,2)
(1679,8566,2)
(2404,3376,2)
(4959,5937,2)
(1278,1876,2)
(4257,4952,2)
(2070,8396,2)
(3231,8966,2)
(5567,4601,2)
(7245,631,2)
(2645,5599,2)
(5758,8601,2)
(3614,3879,2)
(3521,5109,2)
(8262,8192,2)
(4589,1140,2)
(8426,2399,2)
(8691,7410,2)
(7903,3093,2)
(8162,4347,2)
(222,4929,2)
(909,4297,2)
(3837,5905,2)
(3955,256,2)
(6247,5061,2)
(7667,7088,2)
(1324,7964,2)
(4627,9140,2)
(5365,7051,2)
(2158,7895,2)
(622,3521,2)
(1527,8670,2)
(7843,3590,2)
(5574,3163,2)
(649,765,2)
(1755,473,2)
(431,2803,2)
(4609,4393,2)
(7916,4817,2)
(304,4419,2)
(3538,6986,2)
(394,4347,2)
(1364,3381,2)
(6736,7095,2)
(3949,2124,2)
(3437,7358,2)
(4903,1549,2)
(1141,3879,2)
(6173,7407,2)
(7848,8107,2)
(2339,5791,2)
(6311,1618,2)
(3383,700,2)
(2551,6435,2)
(7877,2575,2)
(5855,6320,2)
(7079,6037,2)
(5343,5937,2)
(1738,1474,2)
(5172,9003,2)
(660,2577,2)
(7769,3198,2)
(4722,2069,2)
(8216,8566,2)
(3874,6049,2)
(6161,7029,2)
(6139,394,2)
(4407,5061,2)
(116,3376,2)
(1099,2577,2)
(2681,2069,2)
(1633,3939,2)
(3420,1030,2)
(7723,3231,2)
(5391,6623,2)
(7221,3376,2)
(3562,230,2)
(4145,7711,2)
(4579,2938,2)
(7413,8913,2)
(1463,8566,2)
(4786,2577,2)
(7552,3061,2)
(588,258,2)
(2054,3694,2)
(1643,4238,2)
(7168,1876,2)
(9104,3007,2)
(155,4080,2)
(690,5741,2)
(2630,4714,2)
(7412,7259,2)
(2160,4016,2)
(5655,8566,2)
(6799,8566,2)
(291,3376,2)
(4869,65,2)
(5540,49,2)
(2892,5484,2)
(2308,3201,2)
(5386,5610,2)
(7767,7942,2)
(6533,8652,2)
(4267,7283,2)
(6746,65,2)
(4172,8989,2)
(2464,1842,2)
(272,851,2)
(5329,5061,2)
(3709,4985,2)
(9068,5110,2)
(2682,1386,2)
(8688,647,2)
(6301,1368,2)
(633,5061,2)
(1782,8566,2)
(5996,3376,2)
(7291,5061,2)
(4152,1284,2)
(4309,966,2)
(6373,930,2)
(1505,8945,2)
(382,1683,2)
(3666,1394,2)
(2948,3879,2)
(7723,644,2)
(7703,8358,2)
(69,2614,2)
(2644,6867,2)
(6467,3877,2)
(5744,8863,2)
(1323,8473,2)
(1974,737,2)
(5542,5522,2)
(7591,4011,2)
(4770,1492,2)
(2675,8566,2)
(11,3879,2)
(4830,4337,2)
(1770,6049,2)
(6058,3879,2)
(7854,9002,2)
(1953,6049,2)
(8123,6423,2)
(5105,6826,2)
(5424,2577,2)
(2689,5061,2)
(3492,8460,2)
(4899,8573,2)
(1626,3374,2)
(5490,7580,2)
(7837,7865,2)
(5350,3320,2)
(256,2870,2)
(2317,1534,2)
(4042,3626,2)
(3377,3376,2)
(8274,2938,2)
(3043,2496,2)
(7653,644,2)
(2822,8566,2)
(1387,6533,2)
(2757,7034,2)
(1010,6922,2)
(8410,5546,2)
(6635,5061,2)
(4371,1306,2)
(3448,9003,2)
(4544,5397,2)
(2060,8601,2)
(7299,7894,2)
(4024,3767,2)
(3039,4656,2)
(902,6730,2)
(5793,8863,2)
(7125,2420,2)
(1013,8107,2)
(1400,2069,2)
(4450,6817,2)
(1470,1412,2)
(2270,7046,2)
(256,2485,2)
(6183,4501,2)
(875,5061,2)
(0,2179,2)
(238,5061,2)
(7881,5869,2)
(9115,8989,2)
(185,6977,2)
(7523,7388,2)
(8403,1757,2)
(3217,3093,2)
(6369,1984,2)
(7597,1110,2)
(7624,6024,2)
(3659,3376,2)
(5894,1866,2)
(7564,258,2)
(6180,6311,2)
(4175,6370,2)
(788,877,2)
(998,1474,2)
(1689,5061,2)
(8607,315,2)
(3600,42,2)
(7231,5061,2)
(7049,3583,2)
(1494,8566,2)
(902,5061,2)
(121,3376,2)
(5413,3584,2)
(8986,1474,2)
(8219,2131,2)
(5061,2245,2)
(4135,4905,2)
(4593,1686,2)
(7455,6712,2)
(8514,4588,2)
(1111,5873,2)
(8805,7396,2)
(5782,8564,2)
(3835,5061,2)
(8057,2069,2)
(4303,2938,2)
(2720,6817,2)
(4792,7410,2)
(3786,8292,2)
(5126,6869,2)
(7619,6513,2)
(2308,4248,2)
(4123,7046,2)
(3578,4952,2)
(978,1064,2)
(1031,3638,2)
(8762,4656,2)
(4603,6672,2)
(7859,5522,2)
(4193,4481,2)
(2139,4808,2)
(3955,3124,2)
(3134,4298,2)
(5432,7920,2)
(839,7410,2)
(5124,8281,2)
(7995,8566,2)
(5343,9150,2)
(4452,8376,2)
(7000,5397,2)
(2811,3148,2)
(8413,1251,2)
(9149,806,2)
(4643,5484,2)
(64,127,2)
(5794,1246,2)
(8396,2132,2)
(8432,1246,2)
(4266,5981,2)
(9104,838,2)
(3616,7894,2)
(1280,2122,2)
(5656,1828,2)
(2751,5061,2)
(315,7324,2)
(8148,1532,2)
(320,5437,2)
(3246,3110,2)
(8436,4225,2)
(4285,5061,2)
(2197,7727,2)
(4595,8345,2)
(5886,2577,2)
(8485,2043,2)
(2845,7976,2)
(6570,8924,2)
(51,3376,2)
(5341,4123,2)
(8438,1246,2)
(1504,1781,2)
(7696,3879,2)
(6167,2069,2)
(2969,1984,2)
(4135,7283,2)
(5153,5403,2)
(2673,8651,2)
(384,4299,2)
(5441,2245,2)
(3535,3089,2)
(568,2938,2)
(4400,8962,2)
(1641,161,2)
(5284,2906,2)
(9145,3516,2)
(7436,926,2)
(6623,1039,2)
(4424,5450,2)
(781,2069,2)
(3101,3333,2)
(4965,3140,2)
(436,2278,2)
(3930,8566,2)
(3771,5789,2)
(8239,1284,2)
(4067,5361,2)
(4451,5570,2)
(507,6785,2)
(6806,554,2)
(327,2241,2)
(4774,3219,2)
(6838,177,2)
(1844,2375,2)
(4207,357,2)
(6892,6580,2)
(8375,3376,2)
(2645,7358,2)
(5054,3061,2)
(1321,8101,2)
(1072,4660,2)
(2182,4952,2)
(1174,2577,2)
(1676,5962,2)
(1087,8292,2)
(6926,1254,2)
(4384,8281,2)
(1261,3376,2)
(9104,2765,2)
(3719,3376,2)
(359,8234,2)
(5065,4642,2)
(4738,8566,2)
(7918,3208,2)
(4707,6669,2)
(174,8022,2)
(490,3333,2)
(2139,2485,2)
(4803,8566,2)
(6434,7410,2)
(2645,6127,2)
(5872,1847,2)
(6616,127,2)
(2571,8508,2)
(2580,3376,2)
(484,8566,2)
(6324,6977,2)
(5925,3005,2)
(3932,3638,2)
(4788,1361,2)
(7106,9150,2)
(3516,1690,2)
(2307,3333,2)
(830,3376,2)
(5730,8924,2)
(2309,8566,2)
(8985,162,2)
(6643,3381,2)
(8151,3333,2)
(5259,7819,2)
(8334,4135,2)
(3408,8566,2)
(1995,2176,2)
(8100,8566,2)
(2806,3146,2)
(6743,7102,2)
(658,7461,2)
(623,3376,2)
(9019,4534,2)
(3975,2399,2)
(6268,5962,2)
(1282,3590,2)
(2992,7920,2)
(2248,258,2)
(9036,7309,2)
(5148,8966,2)
(1772,7684,2)
(8730,2614,2)
(6443,8460,2)
(6462,1088,2)
(9136,4304,2)
(2143,3376,2)
(7969,2938,2)
(2645,6940,2)
(5597,3095,2)
(827,2069,2)
(5837,2069,2)
(7797,2069,2)
(7631,7727,2)
(8619,1927,2)
(8417,3879,2)
(1785,2271,2)
(7827,3376,2)
(9046,8566,2)
(8137,933,2)
(3286,933,2)
(394,8566,2)
(551,3376,2)
(8573,6669,2)
(1927,1981,2)
(4808,8137,2)
(2412,2577,2)
(4958,4929,2)
(1702,795,2)
(1711,3376,2)
(1317,5937,2)
(2584,8966,2)
(3009,3374,2)
(7664,7292,2)
(4122,6817,2)
(619,5061,2)
(4365,7283,2)
(442,7521,2)
(5125,7499,2)
(5796,4322,2)
(5966,3905,2)
(4952,6082,2)
(5257,3376,2)
(6475,3584,2)
(610,5610,2)
(256,2165,2)
(513,5741,2)
(7689,5068,2)
(133,4952,2)
(5384,5061,2)
(4146,8601,2)
(3897,5567,2)
(1355,3376,2)
(7723,3694,2)
(7031,6768,2)
(1489,379,2)
(4082,4952,2)
(3923,795,2)
(5549,9024,2)
(6446,5231,2)
(3208,3661,2)
(2972,6046,2)
(7405,7088,2)
(8481,600,2)
(6665,5905,2)
(9136,2496,2)
(8905,4001,2)
(4874,7845,2)
(451,3035,2)
(6414,3354,2)
(6969,3376,2)
(8091,1758,2)
(7299,5591,2)
(4318,4070,2)
(7518,546,2)
(9132,7113,2)
(7410,2241,2)
(8049,5789,2)
(2692,8566,2)
(8984,3879,2)
(2479,236,2)
(1613,2165,2)
(416,8566,2)
(1461,6712,2)
(3725,918,2)
(5111,7135,2)
(5922,8924,2)
(6561,5061,2)
(5669,3963,2)
(7756,4530,2)
(8096,401,2)
(6669,2464,2)
(4738,795,2)
(7026,7351,2)
(6474,5262,2)
(7303,4588,2)
(1070,8334,2)
(2495,1958,2)
(1581,4612,2)
(4347,8971,2)
(7747,8566,2)
(5408,5066,2)
(5227,1374,2)
(1269,5441,2)
(653,974,2)
(2486,3879,2)
(6257,2908,2)
(1140,5115,2)
(357,7895,2)
(2180,6023,2)
(7750,5061,2)
(9061,5627,2)
(7593,9079,2)
(724,3376,2)
(1068,5061,2)
(708,5741,2)
(4230,3307,2)
(7093,2285,2)
(6436,7841,2)
(2929,5475,2)
(8597,1441,2)
(9127,2005,2)
(4535,3376,2)
(6698,1984,2)
(9104,7962,2)
(3022,7521,2)
(1656,5231,2)
(2525,315,2)
(6334,4111,2)
(7460,2443,2)
(269,7343,2)
(3242,2399,2)
(817,4424,2)
(3056,8863,2)
(1573,8863,2)
(6296,3879,2)
(5074,1876,2)
(421,2069,2)
(5254,952,2)
(6745,5061,2)
(6663,3879,2)
(8769,6897,2)
(267,3615,2)
(3634,1263,2)
(8795,8601,2)
(5268,3879,2)
(5912,974,2)
(265,3376,2)
(1532,769,2)
(5560,3217,2)
(212,7509,2)
(5267,6033,2)
(7945,4129,2)
(3691,631,2)
(6887,8841,2)
(4610,8566,2)
(7604,5231,2)
(1118,3376,2)
(1322,2577,2)
(4297,2906,2)
(6684,6082,2)
(7782,4315,2)
(6064,4311,2)
(1297,63,2)
(256,7326,2)
(1410,9140,2)
(8741,5397,2)
(2417,2069,2)
(8318,7727,2)
(6540,8924,2)
(6242,8653,2)
(974,3005,2)
(4116,3879,2)
(4625,3376,2)
(7917,7034,2)
(8281,3376,2)
(960,5789,2)
(3716,6977,2)
(6833,3879,2)
(5884,3879,2)
(4357,3219,2)
(1480,4983,2)
(68,7343,2)
(8573,8745,2)
(577,153,2)
(721,7835,2)
(2998,6334,2)
(8692,6260,2)
(1473,6817,2)
(5160,8657,2)
(137,3400,2)
(7985,216,2)
(6758,2938,2)
(1316,2736,2)
(2281,3093,2)
(6004,7343,2)
(2145,7343,2)
(2705,4322,2)
(4148,4527,2)
(2354,8500,2)
(4761,940,2)
(1192,3376,2)
(2173,8281,2)
(7580,5061,2)
(2437,6867,2)
(2721,4057,2)
(5230,2577,2)
(6360,4588,2)
(8911,8601,2)
(1914,644,2)
(6071,3404,2)
(816,7894,2)
(6739,5061,2)
(5164,3231,2)
(6253,5061,2)
(1735,7425,2)
(1819,7343,2)
(6010,8945,2)
(45,592,2)
(1761,3584,2)
(6239,2399,2)
(1662,5610,2)
(1160,8999,2)
(4705,182,2)
(352,488,2)
(107,4529,2)
(2804,3134,2)
(6396,8244,2)
(7394,94,2)
(2996,6932,2)
(3787,5061,2)
(3927,7821,2)
(1393,570,2)
(7766,2443,2)
(4959,4297,2)
(7041,2048,2)
(5570,2273,2)
(6677,6730,2)
(4964,8396,2)
(7416,5704,2)
(2709,1656,2)
(130,124,2)
(3098,597,2)
(735,1783,2)
(2708,6977,2)
(8139,3376,2)
(564,2262,2)
(8217,8601,2)
(3851,6986,2)
(4148,8924,2)
(8066,3879,2)
(7384,3376,2)
(4085,2884,2)
(5993,4322,2)
(5912,3005,2)
(7403,806,2)
(6571,4393,2)
(3244,7890,2)
(671,8521,2)
(1176,5061,2)
(5350,3333,2)
(8376,972,2)
(5018,2069,2)
(7378,2033,2)
(8992,4524,2)
(4648,8566,2)
(3413,1192,2)
(6527,5450,2)
(982,4233,2)
(719,5061,2)
(7163,4921,2)
(4269,2344,2)
(819,3879,2)
(778,930,2)
(8031,5981,2)
(7733,9150,2)
(5023,2399,2)
(2666,6817,2)
(5752,5061,2)
(6474,3064,2)
(2134,2865,2)
(1314,7700,2)
(4685,6977,2)
(8663,4656,2)
(7879,8653,2)
(8051,7821,2)
(882,7285,2)
(98,4529,2)
(7629,6669,2)
(8332,7034,2)
(2808,1775,2)
(9039,6932,2)
(7536,8566,2)
(8732,2614,2)
(2574,6092,2)
(109,4656,2)
(6571,8519,2)
(7383,9140,2)
(773,8566,2)
(8611,8566,2)
(2837,9056,2)
(6623,6939,2)
(5439,3376,2)
(1675,3005,2)
(805,5023,2)
(1757,3376,2)
(3196,8566,2)
(5376,6118,2)
(12,3584,2)
(5698,6768,2)
(1806,5591,2)
(6799,6669,2)
(767,7343,2)
(5447,1284,2)
(3226,2992,2)
(1786,6869,2)
(8493,5061,2)
(2465,3879,2)
(6599,7201,2)
(3116,6033,2)
(7628,8460,2)
(7067,3237,2)
(4282,3693,2)
(5000,6977,2)
(5205,851,2)
(7169,4070,2)
(2584,952,2)
(7878,1880,2)
(5841,6730,2)
(3033,7113,2)
(7461,3852,2)
(2479,4581,2)
(1843,5610,2)
(1563,5061,2)
(1416,2938,2)
(3344,8107,2)
(5043,1757,2)
(9071,5591,2)
(7666,5665,2)
(8165,7343,2)
(1984,103,2)
(2427,1775,2)
(7333,2938,2)
(5148,154,2)
(6994,5378,2)
(1728,7088,2)
(279,4393,2)
(8729,6977,2)
(7177,4070,2)
(8359,710,2)
(6376,5218,2)
(8298,2399,2)
(5148,4798,2)
(3460,3376,2)
(462,760,2)
(4891,837,2)
(2728,8566,2)
(3724,8566,2)
(3794,5165,2)
(8505,5129,2)
(267,2155,2)
(5683,2504,2)
(8682,1468,2)
(6023,4977,2)
(3325,1394,2)
(1576,5481,2)
(5844,3376,2)
(2612,9120,2)
(531,5891,2)
(7476,8181,2)
(6487,2906,2)
(4321,302,2)
(8826,8566,2)
(6660,6817,2)
(7966,5061,2)
(8197,3116,2)
(4550,7357,2)
(539,3163,2)
(7937,8566,2)
(3266,5441,2)
(4734,8396,2)
(5422,3376,2)
(2387,4299,2)
(2590,1284,2)
(7406,3580,2)
(2409,5610,2)
(1486,631,2)
(3580,7504,2)
(1156,6968,2)
(6675,8566,2)
(5652,7343,2)
(1050,2577,2)
(8863,5441,2)
(2043,2278,2)
(3437,4400,2)
(470,3376,2)
(5667,8566,2)
(2878,8566,2)
(2645,5574,2)
(8454,7624,2)
(3594,3374,2)
(5676,6977,2)
(465,3376,2)
(3993,2975,2)
(7919,8601,2)
(7193,9150,2)
(8605,3376,2)
(6968,4297,2)
(8500,2519,2)
(3855,2803,2)
(7037,5905,2)
(4410,7343,2)
(3282,7821,2)
(7024,2074,2)
(2287,7224,2)
(6623,1954,2)
(420,2577,2)
(2141,970,2)
(4606,8566,2)
(4442,6730,2)
(3955,6456,2)
(6347,930,2)
(1630,2005,2)
(1513,570,2)
(8548,933,2)
(177,1474,2)
(3108,5869,2)
(1182,7343,2)
(5752,7410,2)
(1734,8321,2)
(5028,7053,2)
(5260,4861,2)
(414,7088,2)
(2388,6670,2)
(3879,4529,2)
(5421,631,2)
(3561,5061,2)
(2645,6826,2)
(1417,2614,2)
(8952,8743,2)
(5128,5873,2)
(103,722,2)
(9080,2245,2)
(8621,7727,2)
(4774,8566,2)
(5744,952,2)
(6370,2952,2)
(3833,2069,2)
(2064,1125,2)
(8780,230,2)
(205,2938,2)
(6705,3477,2)
(2737,5061,2)
(6688,401,2)
(2344,3235,2)
(7298,1297,2)
(2869,3696,2)
(7293,181,2)
(2885,3879,2)
(7158,6977,2)
(3815,9025,2)
(7366,6557,2)
(3941,127,2)
(2026,315,2)
(5917,4902,2)
(940,5061,2)
(6065,5061,2)
(3934,8566,2)
(9104,4230,2)
(431,4065,2)
(7181,5110,2)
(671,5140,2)
(3139,7539,2)
(3089,3516,2)
(1658,700,2)
(4536,2938,2)
(3520,230,2)
(6113,5061,2)
(3312,3879,2)
(3483,4419,2)
(4308,7365,2)
(1079,5949,2)
(1753,5076,2)
(6683,2614,2)
(8521,7782,2)
(9104,6811,2)
(6601,1663,2)
(2457,2511,2)
(868,3231,2)
(6503,5058,2)
(7652,2407,2)
(357,2158,2)
(3958,127,2)
(8667,5220,2)
(5050,3376,2)
(5704,2069,2)
(481,7284,2)
(6730,1803,2)
(6474,565,2)
(2069,2830,2)
(5536,8566,2)
(2978,8241,2)
(5806,7624,2)
(8827,6082,2)
(8760,9119,2)
(7430,8566,2)
(1691,7201,2)
(3095,2069,2)
(4212,2614,2)
(6505,6758,2)
(1070,7283,2)
(4217,5905,2)
(364,5905,2)
(2645,4520,2)
(6566,4304,2)
(7058,5061,2)
(3960,2443,2)
(5168,5656,2)
(980,5937,2)
(4261,4299,2)
(8679,5905,2)
(6312,3516,2)
(540,8782,2)
(823,6760,2)
(5254,700,2)
(5063,930,2)
(5661,4393,2)
(1802,9150,2)
(390,4746,2)
(8628,4144,2)
(3485,8825,2)
(5105,7810,2)
(2178,8863,2)
(6908,1686,2)
(1613,1866,2)
(9136,3647,2)
(7385,4817,2)
(4827,230,2)
(9056,5591,2)
(4721,3477,2)
(3072,3148,2)
(7347,7366,2)
(8224,3376,2)
(92,5061,2)
(7759,8566,2)
(5734,4656,2)
(994,5061,2)
(5148,5599,2)
(806,3202,2)
(5012,1191,2)
(4197,1230,2)
(4078,9002,2)
(4539,3374,2)
(1925,3376,2)
(7818,7823,2)
(4285,6082,2)
(5844,1925,2)
(7523,1876,2)
(730,5403,2)
(2568,7624,2)
(3452,3333,2)
(7775,5061,2)
(2228,7649,2)
(8226,7163,2)
(4572,5061,2)
(6720,7410,2)
(8063,6720,2)
(5894,952,2)
(5190,8042,2)
(5894,4400,2)
(1737,783,2)
(5985,8042,2)
(6426,5061,2)
(3796,926,2)
(4679,873,2)
(1327,8863,2)
(3934,5061,2)
(2407,1747,2)
(4141,6213,2)
(1966,1110,2)
(2000,5937,2)
(9108,8566,2)
(2138,8601,2)
(3414,8566,2)
(5116,8670,2)
(6055,4070,2)
(2893,3879,2)
(3971,2614,2)
(5252,5061,2)
(3217,2906,2)
(8378,7823,2)
(3121,570,2)
(3804,6033,2)
(7835,643,2)
(3955,6566,2)
(898,6024,2)
(5449,5222,2)
(3296,2938,2)
(4868,6932,2)
(5357,1762,2)
(3484,5692,2)
(2569,5656,2)
(6041,2842,2)
(7412,2069,2)
(6607,8042,2)
(889,4111,2)
(7995,5061,2)
(7991,1894,2)
(7440,8566,2)
(6342,7437,2)
(3256,6257,2)
(8359,7895,2)
(5987,7425,2)
(4188,2938,2)
(3902,2005,2)
(4127,2005,2)
(6072,4499,2)
(8655,6092,2)
(1259,5061,2)
(6380,5263,2)
(6754,3547,2)
(3184,4299,2)
(2561,3333,2)
(1671,8564,2)
(7292,2069,2)
(2563,3333,2)
(6734,8865,2)
(1792,5905,2)
(1959,5902,2)
(5544,9002,2)
(805,2399,2)
(3090,4993,2)
(6301,5705,2)
(2675,7285,2)
(5333,4407,2)
(8822,8251,2)
(953,3526,2)
(9104,4558,2)
(5414,3694,2)
(8711,7285,2)
(5413,3490,2)
(6722,7942,2)
(7323,4347,2)
(2211,1571,2)
(1420,8401,2)
(4473,4285,2)
(4123,4123,2)
(2117,1205,2)
(7047,5061,2)
(4111,4040,2)
(4874,2005,2)
(8452,45,2)
(7845,2089,2)
(2815,5220,2)
(2493,3376,2)
(3124,8966,2)
(3193,1110,2)
(7340,5869,2)
(5626,4656,2)
(5410,5962,2)
(2126,8566,2)
(1777,3397,2)
(5105,1200,2)
(8083,980,2)
(2738,5061,2)
(9078,6741,2)
(6019,2069,2)
(2089,4246,2)
(3137,6512,2)
(8741,3148,2)
(3060,3354,2)
(5004,8564,2)
(2645,2462,2)
(857,4629,2)
(2814,5061,2)
(1793,2069,2)
(2365,1590,2)
(1815,3374,2)
(8331,6869,2)
(4128,5591,2)
(3738,7700,2)
(6781,5431,2)
(4664,4766,2)
(1575,8573,2)
(7890,3879,2)
(7194,8599,2)
(3996,5061,2)
(6135,7700,2)
(4770,4299,2)
(2005,7931,2)
(1870,6463,2)
(6478,3376,2)
(1537,1683,2)
(264,8566,2)
(5908,2399,2)
(4707,466,2)
(4711,7410,2)
(8085,7201,2)
(270,7894,2)
(1367,2074,2)
(4342,7619,2)
(2611,5061,2)
(4010,8566,2)
(6185,3879,2)
(8628,8566,2)
(82,8376,2)
(2258,4656,2)
(8830,6817,2)
(5601,8281,2)
(3787,644,2)
(2855,2289,2)
(3528,5118,2)
(7174,6909,2)
(3712,2515,2)
(3998,2577,2)
(5428,4929,2)
(6497,4742,2)
(2419,3879,2)
(5889,3110,2)
(8952,2399,2)
(7480,7916,2)
(5785,3590,2)
(2457,6340,2)
(7116,8566,2)
(8573,2577,2)
(8519,5061,2)
(5222,6082,2)
(1832,8251,2)
(125,926,2)
(1789,6215,2)
(5021,6817,2)
(58,1474,2)
(239,5610,2)
(4095,8566,2)
(1745,3376,2)
(184,7904,2)
(534,1263,2)
(3040,3376,2)
(5391,795,2)
(5916,3445,2)
(2349,8924,2)
(2457,8703,2)
(2199,2443,2)
(5759,3381,2)
(6711,8841,2)
(643,3588,2)
(2601,5061,2)
(6129,631,2)
(4179,8795,2)
(5671,5129,2)
(5105,2462,2)
(472,5791,2)
(6311,7343,2)
(4647,65,2)
(596,3584,2)
(9084,6272,2)
(226,3376,2)
(3329,5937,2)
(8075,3877,2)
(4894,7283,2)
(5223,3643,2)
(9040,7964,2)
(7946,8343,2)
(7720,6669,2)
(8319,7088,2)
(1867,2938,2)
(6193,8566,2)
(6437,4534,2)
(5026,6613,2)
(6850,1686,2)
(5120,1064,2)
(7097,2420,2)
(2891,3381,2)
(5105,8121,2)
(1031,3932,2)
(8701,5564,2)
(206,6592,2)
(795,8338,2)
(8165,5061,2)
(4616,7624,2)
(6115,3148,2)
(1154,4385,2)
(8114,6106,2)
(1641,2060,2)
(6365,2420,2)
(4570,4534,2)
(5180,8701,2)
(2303,4501,2)
(2364,643,2)
(5744,4400,2)
(1615,5061,2)
(6083,4393,2)
(5056,1284,2)
(4468,5381,2)
(4972,8566,2)
(3066,2241,2)
(6652,3376,2)
(5748,621,2)
(516,6386,2)
(6497,5791,2)
(3955,5894,2)
(3980,5135,2)
(6238,3397,2)
(4950,8566,2)
(7226,4588,2)
(8225,8566,2)
(1389,3381,2)
(725,3571,2)
(5181,1093,2)
(2901,3163,2)
(1580,1762,2)
(7539,2033,2)
(4221,3443,2)
(5873,3376,2)
(8539,3116,2)
(2094,8698,2)
(8248,1974,2)
(9006,9002,2)
(7686,889,2)
(979,8566,2)
(5602,4526,2)
(3767,3376,2)
(2485,1532,2)
(6866,3381,2)
(7044,4001,2)
(5286,8566,2)
(8399,3061,2)
(2260,6977,2)
(8146,1965,2)
(1963,3042,2)
(8144,5780,2)
(4092,6260,2)
(5105,2165,2)
(7951,7120,2)
(3494,216,2)
(5172,5061,2)
(2812,3231,2)
(3443,671,2)
(6622,9103,2)
(2584,8703,2)
(6739,1110,2)
(2420,2420,2)
(2834,8566,2)
(1321,3036,2)
(3371,4238,2)
(8727,6033,2)
(4885,933,2)
(8795,7296,2)
(7141,8566,2)
(7782,65,2)
(8086,302,2)
(1669,5329,2)
(2951,2577,2)
(493,8865,2)
(7502,3376,2)
(307,7986,2)
(358,3376,2)
(894,8101,2)
(664,3879,2)
(2833,5771,2)
(5581,5135,2)
(4492,9145,2)
(5909,9150,2)
(1903,3584,2)
(1147,315,2)
(6124,9002,2)
(2469,309,2)
(5814,1059,2)
(643,3610,2)
(7342,4379,2)
(5148,2768,2)
(5787,5979,2)
(631,33,2)
(3420,8062,2)
(2056,8841,2)
(4399,2069,2)
(7352,2906,2)
(6102,930,2)
(1067,8566,2)
(5790,7942,2)
(5813,9036,2)
(6565,7145,2)
(4444,6092,2)
(2523,7868,2)
(6583,258,2)
(3323,4501,2)
(918,5061,2)
(3405,2923,2)
(8439,302,2)
(7102,1271,2)
(587,4808,2)
(3604,1670,2)
(846,5912,2)
(6220,6396,2)
(1140,4902,2)
(8037,3376,2)
(5519,2443,2)
(8408,6977,2)
(6567,2919,2)
(7148,9002,2)
(6963,1365,2)
(1733,8573,2)
(5272,5402,2)
(3186,6817,2)
(3203,8077,2)
(6337,3156,2)
(5086,3356,2)
(786,4589,2)
(9081,4473,2)
(4541,2344,2)
(3034,9150,2)
(4568,4902,2)
(6278,251,2)
(4094,9059,2)
(7698,6986,2)
(1510,1297,2)
(280,401,2)
(7756,7838,2)
(9113,7792,2)
(8132,5110,2)
(3711,7201,2)
(5629,5873,2)
(6048,2577,2)
(5333,3376,2)
(2682,65,2)
(6320,2421,2)
(3754,3231,2)
(6997,7053,2)
(6371,5664,2)
(7482,6392,2)
(6713,3879,2)
(7264,8865,2)
(1138,786,2)
(7654,7046,2)
(5781,3516,2)
(1070,5086,2)
(2536,3061,2)
(4798,4299,2)
(4786,1492,2)
(3485,5481,2)
(4858,7700,2)
(7867,4393,2)
(5065,2165,2)
(6145,2069,2)
(8020,5767,2)
(3391,7410,2)
(6725,5378,2)
(1232,6086,2)
(6566,8703,2)
(5703,5791,2)
(8247,5222,2)
(3772,6380,2)
(5316,8376,2)
(1003,5962,2)
(5007,4457,2)
(6909,8539,2)
(8154,1338,2)
(4621,926,2)
(3397,3287,2)
(629,3879,2)
(7948,4337,2)
(8625,8102,2)
(7592,5061,2)
(8438,2068,2)
(8662,8863,2)
(3888,2577,2)
(8090,4269,2)
(6203,2376,2)
(5615,3879,2)
(978,3277,2)
(1483,4952,2)
(2420,7472,2)
(2770,8566,2)
(4993,7206,2)
(4001,1402,2)
(4253,3376,2)
(2351,2908,2)
(8932,2069,2)
(8446,3629,2)
(6748,4011,2)
(6405,3376,2)
(424,6609,2)
(1121,795,2)
(1623,7521,2)
(6673,4299,2)
(1983,8566,2)
(1617,6621,2)
(8004,3335,2)
(4377,3376,2)
(500,3061,2)
(4201,7541,2)
(3131,8670,2)
(1241,8566,2)
(1001,4134,2)
(3814,3879,2)
(3304,3416,2)
(4845,8566,2)
(1009,6033,2)
(3082,1306,2)
(3734,8841,2)
(5171,3383,2)
(3840,4401,2)
(1483,2104,2)
(3254,3202,2)
(2444,7410,2)
(5645,644,2)
(2579,6049,2)
(4320,6669,2)
(7953,302,2)
(5145,6112,2)
(7150,8566,2)
(2426,795,2)
(2896,5570,2)
(7908,4070,2)
(6252,8566,2)
(7543,4501,2)
(4890,3354,2)
(3544,5165,2)
(1557,6669,2)
(2418,7821,2)
(1822,3879,2)
(4982,1959,2)
(2483,9140,2)
(7111,4393,2)
(895,5450,2)
(4673,7283,2)
(2308,4612,2)
(1585,4656,2)
(3213,79,2)
(6627,5610,2)
(7878,7029,2)
(9136,974,2)
(1855,5011,2)
(254,3548,2)
(7395,8292,2)
(1125,3376,2)
(3265,7805,2)
(8404,5399,2)
(8311,8431,2)
(6030,806,2)
(1326,7805,2)
(187,795,2)
(3891,1757,2)
(4114,8566,2)
(2522,6082,2)
(5956,6680,2)
(8159,5061,2)
(1742,6817,2)
(7644,7358,2)
(4797,2339,2)
(1029,4263,2)
(8763,4656,2)
(5787,644,2)
(4463,7163,2)
(2028,2938,2)
(1069,6520,2)
(7810,5374,2)
(3838,2906,2)
(6120,644,2)
(1702,4662,2)
(5511,5135,2)
(8676,8566,2)
(2573,8566,2)
(5081,2534,2)
(474,8245,2)
(6470,7823,2)
(7372,1499,2)
(4202,8924,2)
(2801,6730,2)
(3933,7241,2)
(7377,7972,2)
(5194,3202,2)
(5897,5061,2)
(6045,570,2)
(1699,8234,2)
(138,8566,2)
(4825,2110,2)
(324,7343,2)
(5014,2069,2)
(8045,5869,2)
(3604,6768,2)
(8708,6069,2)
(9104,446,2)
(1634,7046,2)
(1993,4629,2)
(5378,3139,2)
(8713,5937,2)
(2942,5378,2)
(8623,5061,2)
(5141,243,2)
(3955,7849,2)
(7223,3376,2)
(6987,795,2)
(8279,2443,2)
(5558,806,2)
(904,3374,2)
(5195,1394,2)
(6003,8321,2)
(6959,8653,2)
(6375,6513,2)
(3841,7410,2)
(8955,4011,2)
(3651,4931,2)
(8053,9003,2)
(2216,5962,2)
(4534,4129,2)
(417,401,2)
(2584,7962,2)
(4378,1284,2)
(288,2906,2)
(4207,2605,2)
(5490,9150,2)
(4966,4902,2)
(7849,4400,2)
(6864,2497,2)
(7554,6977,2)
(8095,5399,2)
(2481,105,2)
(8155,2157,2)
(3887,5905,2)
(7988,795,2)
(2532,4401,2)
(2754,5610,2)
(6828,7309,2)
(5074,2241,2)
(9136,6382,2)
(2006,3354,2)
(2057,5110,2)
(7643,4738,2)
(655,2831,2)
(2100,3376,2)
(6698,127,2)
(8348,6977,2)
(3617,1284,2)
(8785,5649,2)
(6534,8193,2)
(8014,4551,2)
(150,5937,2)
(1438,3879,2)
(6113,7029,2)
(5164,8566,2)
(3894,7053,2)
(5622,7088,2)
(1524,3376,2)
(1660,5791,2)
(9034,2906,2)
(8650,4919,2)
(3955,1735,2)
(7073,2058,2)
(6848,5110,2)
(8299,8566,2)
(1690,4501,2)
(166,352,2)
(2286,350,2)
(8290,251,2)
(1833,631,2)
(454,644,2)
(258,8180,2)
(8628,3153,2)
(8264,5061,2)
(1775,3861,2)
(2729,6869,2)
(1709,4623,2)
(6258,1237,2)
(1277,4109,2)
(4950,3879,2)
(2751,3354,2)
(4469,2467,2)
(7594,631,2)
(6,3879,2)
(5397,302,2)
(600,2938,2)
(5528,4952,2)
(7564,65,2)
(6320,234,2)
(3540,6794,2)
(5148,3647,2)
(7172,127,2)
(1308,9076,2)
(8062,6715,2)
(2943,1984,2)
(7030,3239,2)
(6679,8742,2)
(7308,5791,2)
(8426,3481,2)
(1071,8566,2)
(7606,7805,2)
(3383,5165,2)
(5503,2577,2)
(1079,2906,2)
(3363,930,2)
(6276,1263,2)
(1276,982,2)
(4118,1714,2)
(1484,7805,2)
(5267,5591,2)
(8099,6817,2)
(23,8601,2)
(6157,2577,2)
(6265,284,2)
(9104,1866,2)
(5827,3376,2)
(2399,6497,2)
(4439,8566,2)
(4786,6673,2)
(7147,1287,2)
(6900,127,2)
(6830,4929,2)
(3879,98,2)
(3208,9140,2)
(3409,8841,2)
(4613,4551,2)
(5839,7023,2)
(8985,1783,2)
(6253,7410,2)
(971,1394,2)
(8487,3061,2)
(7664,7113,2)
(1351,546,2)
(8809,1237,2)
(3037,1636,2)
(3855,1059,2)
(483,7482,2)
(3437,1866,2)
(7885,5061,2)
(7835,6697,2)
(2537,3477,2)
(339,1246,2)
(3001,1246,2)
(5783,6261,2)
(6201,7786,2)
(1009,5591,2)
(6441,4929,2)
(6110,8356,2)
(2611,8566,2)
(7364,5441,2)
(2311,7958,2)
(2256,704,2)
(6889,6069,2)
(8713,3397,2)
(1385,153,2)
(4555,3846,2)
(128,1374,2)
(8057,7113,2)
(1015,5450,2)
(2643,3376,2)
(691,8566,2)
(8544,5663,2)
(6053,4929,2)
(8706,4400,2)
(6809,3865,2)
(234,14,2)
(392,4263,2)
(6101,3374,2)
(4355,6033,2)
(8735,8566,2)
(1110,4393,2)
(2794,6082,2)
(6020,4902,2)
(760,6003,2)
(1965,3867,2)
(556,1470,2)
(6621,6343,2)
(7156,4070,2)
(2272,4070,2)
(6668,7462,2)
(2121,3879,2)
(8597,6272,2)
(2872,795,2)
(1514,2938,2)
(308,2074,2)
(5753,1532,2)
(3996,8566,2)
(1030,3231,2)
(4660,3767,2)
(3889,8334,2)
(7764,3362,2)
(2691,3376,2)
(2717,7410,2)
(1757,3316,2)
(2586,8566,2)
(615,7700,2)
(3164,5061,2)
(2032,9003,2)
(7776,489,2)
(6366,8564,2)
(588,6012,2)
(5776,2344,2)
(1627,5789,2)
(2234,3332,2)
(4618,5061,2)
(4989,8841,2)
(9147,2468,2)
(7429,3879,2)
(6860,8945,2)
(8502,4481,2)
(194,3376,2)
(2923,4952,2)
(3545,6817,2)
(5621,8566,2)
(3047,8913,2)
(7864,7343,2)
(2990,120,2)
(853,5135,2)
(8200,6730,2)
(1025,4393,2)
(6076,1066,2)
(1625,8601,2)
(8405,3376,2)
(6265,2815,2)
(599,7224,2)
(3104,7343,2)
(5992,8566,2)
(2628,7700,2)
(7464,6308,2)
(647,3879,2)
(8281,8899,2)
(3302,2505,2)
(4863,1663,2)
(352,197,2)
(2012,7365,2)
(398,1219,2)
(6651,127,2)
(2645,8703,2)
(9009,5061,2)
(5546,379,2)
(3629,2785,2)
(953,219,2)
(8697,7343,2)
(8462,8396,2)
(4460,3383,2)
(3518,8787,2)
(4910,8742,2)
(5368,7053,2)
(1338,4263,2)
(7981,8601,2)
(6547,5061,2)
(1284,1954,2)
(6621,3505,2)
(8047,4369,2)
(8177,2184,2)
(2464,7587,2)
(3979,258,2)
(5943,8865,2)
(6152,7410,2)
(5417,8826,2)
(7009,3443,2)
(219,2682,2)
(6570,8566,2)
(6488,837,2)
(7928,7700,2)
(5105,8703,2)
(1045,8566,2)
(7893,2461,2)
(3531,665,2)
(2187,3877,2)
(8589,5061,2)
(6064,5285,2)
(3683,7721,2)
(252,4499,2)
(278,5791,2)
(6904,8670,2)
(7644,2496,2)
(6859,6033,2)
(4057,1469,2)
(2657,4541,2)
(1613,7962,2)
(7642,7462,2)
(8637,2736,2)
(5148,1200,2)
(4409,7174,2)
(4372,5061,2)
(4714,2399,2)
(3035,8444,2)
(644,951,2)
(2331,2906,2)
(5691,177,2)
(523,7034,2)
(2523,2938,2)
(5152,7895,2)
(2677,806,2)
(3413,3080,2)
(489,6867,2)
(7676,4902,2)
(7453,3376,2)
(5994,1064,2)
(6675,3374,2)
(4037,9140,2)
(8925,7805,2)
(419,3879,2)
(3783,8807,2)
(8173,8841,2)
(6750,842,2)
(84,3694,2)
(7541,6932,2)
(1851,5061,2)
(1823,4929,2)
(216,5610,2)
(2717,8063,2)
(2126,3376,2)
(3510,4618,2)
(8572,230,2)
(1013,8244,2)
(3038,2074,2)
(6946,7343,2)
(1693,7805,2)
(8209,3879,2)
(5631,8009,2)
(1485,8566,2)
(4693,4501,2)
(927,5061,2)
(5283,9002,2)
(4460,8851,2)
(54,5110,2)
(2001,8234,2)
(4439,5061,2)
(1692,2689,2)
(2685,3146,2)
(7752,3516,2)
(1284,1690,2)
(3390,8566,2)
(221,7877,2)
(4793,3879,2)
(8894,1934,2)
(4291,1741,2)
(256,1071,2)
(5497,933,2)
(8987,3376,2)
(258,3061,2)
(3400,1517,2)
(793,2577,2)
(5617,6432,2)
(4662,8042,2)
(5453,9022,2)
(1136,8321,2)
(6853,4869,2)
(2137,5061,2)
(7005,6932,2)
(8907,7113,2)
(2274,2577,2)
(7616,6082,2)
(8255,3963,2)
(6326,3990,2)
(6435,4057,2)
(2457,7425,2)
(8187,9002,2)
(1666,5061,2)
(7734,5061,2)
(7758,49,2)
(4493,8596,2)
(227,3466,2)
(2540,8200,2)
(3148,700,2)
(153,3333,2)
(585,5061,2)
(5491,1834,2)
(3742,9068,2)
(3554,7437,2)
(7887,7464,2)
(8097,6041,2)
(7818,65,2)
(2160,570,2)
(2887,7480,2)
(7686,4634,2)
(4255,5448,2)
(1580,8818,2)
(4235,926,2)
(7536,5061,2)
(4822,5061,2)
(898,2399,2)
(1217,4347,2)
(370,2273,2)
(7980,6968,2)
(4550,1359,2)
(5216,2005,2)
(9136,6127,2)
(674,2820,2)
(7140,8101,2)
(4461,4620,2)
(6662,5061,2)
(3611,7894,2)
(6748,3625,2)
(1986,8101,2)
(6588,554,2)
(4808,933,2)
(2531,7201,2)
(2236,2651,2)
(256,4952,2)
(7137,1474,2)
(4169,3383,2)
(2343,2577,2)
(7381,1757,2)
(7355,8244,2)
(8773,5402,2)
(3785,5450,2)
(5115,4902,2)
(289,4129,2)
(7370,5802,2)
(6815,7410,2)
(696,8670,2)
(8513,7521,2)
(4012,3879,2)
(2898,4470,2)
(3145,4524,2)
(6096,2566,2)
(6482,9107,2)
(3468,4929,2)
(788,7343,2)
(4200,7624,2)
(122,3662,2)
(6664,5403,2)
(3187,8281,2)
(8551,4451,2)
(150,8566,2)
(9031,6069,2)
(1622,3879,2)
(2315,5789,2)
(7621,8009,2)
(508,4011,2)
(986,5061,2)
(5097,302,2)
(4754,5610,2)
(3215,8107,2)
(4096,5450,2)
(4083,8652,2)
(3357,3376,2)
(4761,3590,2)
(8704,4337,2)
(2016,3443,2)
(7197,6932,2)
(6353,8566,2)
(8295,6977,2)
(4620,2069,2)
(7069,1064,2)
(8884,3570,2)
(4726,7462,2)
(1886,2940,2)
(3541,806,2)
(7535,7437,2)
(8715,5943,2)
(3725,177,2)
(3232,3376,2)
(4874,8935,2)
(1819,5061,2)
(8209,792,2)
(7611,7343,2)
(1541,2577,2)
(6742,4499,2)
(7104,7894,2)
(6192,8924,2)
(3124,4304,2)
(1529,851,2)
(7644,1071,2)
(1402,6082,2)
(5105,6276,2)
(7644,8966,2)
(1881,6477,2)
(2420,3616,2)
(8244,6069,2)
(8977,3376,2)
(1693,2242,2)
(783,958,2)
(7098,2975,2)
(4668,8566,2)
(6587,8601,2)
(4570,8566,2)
(4070,184,2)
(3300,631,2)
(732,5061,2)
(7849,952,2)
(2741,6407,2)
(662,8670,2)
(5044,5555,2)
(5940,5482,2)
(6269,7410,2)
(4006,8992,2)
(3298,1974,2)
(6566,3647,2)
(1746,3879,2)
(8725,7053,2)
(6290,4263,2)
(2149,7920,2)
(2728,4929,2)
(256,7425,2)
(9046,1284,2)
(6975,1110,2)
(7500,570,2)
(1315,8566,2)
(8886,8866,2)
(8851,3383,2)
(3638,2241,2)
(1315,4070,2)
(3457,717,2)
(2702,7088,2)
(2318,2443,2)
(1884,7894,2)
(5510,8566,2)
(4250,5061,2)
(5485,6272,2)
(2084,6817,2)
(720,7410,2)
(6626,2344,2)
(1482,6817,2)
(6569,3879,2)
(6306,6817,2)
(7392,1064,2)
(4145,2938,2)
(787,5403,2)
(2241,7540,2)
(3051,4279,2)
(6012,8772,2)
(7241,1246,2)
(5555,1356,2)
(3274,8579,2)
(5524,352,2)
(3227,8601,2)
(6897,3165,2)
(681,6977,2)
(5071,3879,2)
(6510,5937,2)
(5660,7942,2)
(250,3333,2)
(7695,6435,2)
(6138,2011,2)
(5918,3879,2)
(1805,7624,2)
(2624,7499,2)
(8715,8865,2)
(6193,5061,2)
(2653,8579,2)
(7135,2811,2)
(4098,3005,2)
(4661,3376,2)
(5108,302,2)
(8916,6690,2)
(5911,765,2)
(6919,3219,2)
(6428,1474,2)
(4783,5791,2)
(6073,644,2)
(8582,258,2)
(711,2069,2)
(1716,8566,2)
(1845,3376,2)
(7176,9022,2)
(5342,795,2)
(2152,6869,2)
(3012,7343,2)
(8848,6932,2)
(4864,6788,2)
(7846,1419,2)
(6009,9002,2)
(3807,9150,2)
(4397,974,2)
(6672,2443,2)
(7686,7942,2)
(980,5061,2)
(611,2468,2)
(2039,2614,2)
(824,8566,2)
(1024,3879,2)
(6941,3412,2)
(4160,6524,2)
(193,3711,2)
(2830,2180,2)
(6715,8566,2)
(1231,3376,2)
(661,7821,2)
(3749,3879,2)
(3117,3767,2)
(4279,2359,2)
(8511,5656,2)
(3336,5270,2)
(4770,4993,2)
(8713,8566,2)
(6762,9150,2)
(3504,1993,2)
(4198,3711,2)
(8587,4952,2)
(1305,2443,2)
(7772,4337,2)
(992,7301,2)
(6566,7358,2)
(7519,5481,2)
(4864,7378,2)
(1571,3464,2)
(6814,8601,2)
(5063,8566,2)
(4194,6669,2)
(876,3163,2)
(5121,5962,2)
(165,8244,2)
(1254,5061,2)
(5321,3879,2)
(3362,8566,2)
(4286,7343,2)
(7784,2906,2)
(8982,974,2)
(9149,6134,2)
(5172,8566,2)
(2930,7805,2)
(5302,3222,2)
(3544,700,2)
(7647,6092,2)
(1575,5061,2)
(3619,5905,2)
(5137,1663,2)
(5835,3156,2)
(7644,1866,2)
(7648,5111,2)
(7689,5767,2)
(4906,7410,2)
(5164,4144,2)
(300,4042,2)
(8869,2456,2)
(3006,6296,2)
(4816,2344,2)
(6887,8566,2)
(7025,3694,2)
(6837,6637,2)
(1751,5222,2)
(6407,6359,2)
(7718,3879,2)
(1595,3354,2)
(1365,6082,2)
(6112,4053,2)
(6326,3584,2)
(8265,3185,2)
(2353,3711,2)
(6662,6033,2)
(2848,795,2)
(1302,3381,2)
(2534,5891,2)
(5329,8566,2)
(4250,5905,2)
(7327,3376,2)
(1299,5835,2)
(2428,5962,2)
(1753,230,2)
(4826,2577,2)
(3191,4629,2)
(8426,7195,2)
(7477,337,2)
(7225,8865,2)
(7335,4875,2)
(5788,8334,2)
(2335,7624,2)
(7092,6092,2)
(8567,2614,2)
(4853,7821,2)
(3696,2033,2)
(2863,5937,2)
(2179,8227,2)
(2834,5061,2)
(8385,6739,2)
(583,2577,2)
(343,8566,2)
(3946,1064,2)
(7791,3333,2)
(8986,2236,2)
(8903,8227,2)
(7285,3018,2)
(217,2443,2)
(2597,5591,2)
(4402,91,2)
(7704,7351,2)
(5075,4501,2)
(1449,5937,2)
(2921,8865,2)
(5803,1064,2)
(3654,6524,2)
(235,1984,2)
(6391,3879,2)
(7956,8566,2)
(4026,9084,2)
(2217,3376,2)
(5148,3059,2)
(5148,6940,2)
(3379,6272,2)
(3231,7425,2)
(5324,7624,2)
(8685,302,2)
(6864,8945,2)
(1120,1474,2)
(5932,3584,2)
(8947,4292,2)
(4323,8841,2)
(9104,2462,2)
(67,4419,2)
(110,3222,2)
(1850,5039,2)
(2938,2612,2)
(4510,5570,2)
(585,9150,2)
(6300,3879,2)
(4811,546,2)
(6563,9150,2)
(5289,4929,2)
(5318,8694,2)
(6445,7343,2)
(157,3584,2)
(5325,8396,2)
(276,2048,2)
(4921,5044,2)
(4424,4953,2)
(738,3376,2)
(6525,3407,2)
(728,4952,2)
(4474,3879,2)
(5563,5570,2)
(8153,6768,2)
(5397,6524,2)
(6099,3376,2)
(8361,4299,2)
(6028,2043,2)
(9057,6977,2)
(5929,6981,2)
(998,8566,2)
(1464,6481,2)
(6484,6092,2)
(8450,5061,2)
(6718,1263,2)
(6280,3590,2)
(5628,8334,2)
(3744,5061,2)
(2306,3163,2)
(7866,2069,2)
(7581,4902,2)
(985,5610,2)
(3470,2975,2)
(1815,6675,2)
(8491,8653,2)
(9043,1284,2)
(7171,5403,2)
(5724,2069,2)
(2787,3376,2)
(6241,3516,2)
(6955,1775,2)
(5105,4642,2)
(3147,2614,2)
(1185,5061,2)
(5554,4656,2)
(3222,8653,2)
(95,1529,2)
(237,6669,2)
(5761,7145,2)
(8057,4399,2)
(6111,6669,2)
(1708,5287,2)
(3618,1284,2)
(8782,7053,2)
(3138,2468,2)
(2552,7437,2)
(1518,1064,2)
(2053,3879,2)
(8505,5854,2)
(748,4481,2)
(8424,5962,2)
(8305,3376,2)
(3066,2975,2)
(2871,9003,2)
(2786,6751,2)
(2656,6567,2)
(8948,5937,2)
(6104,181,2)
(4822,2577,2)
(7480,4817,2)
(4786,4993,2)
(6481,7625,2)
(5937,7613,2)
(4223,4501,2)
(7538,7343,2)
(2530,5937,2)
(8528,6033,2)
(7745,8566,2)
(3536,8566,2)
(1672,7410,2)
(2474,9002,2)
(4237,8566,2)
(5097,9141,2)
(2113,7053,2)
(4211,8924,2)
(6951,8473,2)
(5431,1714,2)
(6930,216,2)
(8366,4393,2)
(4777,1785,2)
(7452,393,2)
(350,1336,2)
(8383,2443,2)
(3994,4393,2)
(6594,6543,2)
(7318,5220,2)
(5239,5061,2)
(2104,2997,2)
(4532,8251,2)
(7067,3879,2)
(2359,795,2)
(8680,6777,2)
(8208,4347,2)
(6486,8566,2)
(3418,4664,2)
(6829,7056,2)
(1512,45,2)
(2058,3963,2)
(2154,1686,2)
(1095,2577,2)
(7727,3005,2)
(877,5567,2)
(7644,4864,2)
(7092,930,2)
(3588,1365,2)
(7965,2069,2)
(5363,7951,2)
(8233,6981,2)
(1783,554,2)
(6742,8566,2)
(5053,49,2)
(3730,5905,2)
(2634,8566,2)
(4071,7113,2)
(4056,4573,2)
(1146,2513,2)
(3135,8566,2)
(6412,7942,2)
(1847,5610,2)
(5656,7725,2)
(3165,4322,2)
(3625,4070,2)
(2749,4195,2)
(5744,2165,2)
(1058,4299,2)
(3964,5791,2)
(8890,5165,2)
(7164,4959,2)
(6868,5799,2)
(8514,7646,2)
(1247,8989,2)
(960,8566,2)
(3179,4656,2)
(1705,7410,2)
(616,65,2)
(3026,9140,2)
(2592,570,2)
(2574,930,2)
(4478,153,2)
(1614,8670,2)
(2192,3376,2)
(1245,5061,2)
(1690,2354,2)
(2468,315,2)
(5239,3376,2)
(6157,6669,2)
(6231,4481,2)
(5998,3376,2)
(1167,2863,2)
(7874,5450,2)
(966,3376,2)
(2304,1130,2)
(3610,4515,2)
(2766,7618,2)
(7007,3516,2)
(7700,4478,2)
(302,2461,2)
(803,6510,2)
(8079,5905,2)
(4369,5061,2)
(47,3354,2)
(8275,258,2)
(8182,2736,2)
(8633,6513,2)
(8558,1474,2)
(1637,5431,2)
(312,7410,2)
(4800,6669,2)
(3871,3093,2)
(3135,3354,2)
(5338,234,2)
(756,5610,2)
(5674,7088,2)
(1089,3376,2)
(66,5129,2)
(1082,5223,2)
(6042,7764,2)
(4548,6421,2)
(6360,4610,2)
(3062,3093,2)
(5890,3376,2)
(6566,5591,2)
(2060,6252,2)
(4930,5061,2)
(8814,8601,2)
(3997,9150,2)
(1740,1284,2)
(3497,2736,2)
(310,4656,2)
(6701,8566,2)
(458,3879,2)
(6666,7088,2)
(4182,1512,2)
(8152,5892,2)
(4450,2720,2)
(3407,5061,2)
(8484,2271,2)
(706,8928,2)
(6774,4123,2)
(5894,4642,2)
(233,1776,2)
(6462,65,2)
(4636,4104,2)
(9060,2018,2)
(2122,3053,2)
(515,5058,2)
(7765,4656,2)
(5248,7583,2)
(3356,8334,2)
(3878,5905,2)
(5358,4011,2)
(1220,3936,2)
(6096,1066,2)
(8616,5061,2)
(1581,9150,2)
(1202,9003,2)
(6166,1064,2)
(8193,2515,2)
(1067,3231,2)
(8485,8566,2)
(7682,1474,2)
(3605,1959,2)
(2841,454,2)
(6386,1284,2)
(5608,3516,2)
(2575,5061,2)
(1358,7587,2)
(1449,8566,2)
(9058,2262,2)
(943,1686,2)
(7213,4902,2)
(8594,5135,2)
(6884,8913,2)
(2043,2577,2)
(7632,7986,2)
(2045,7462,2)
(8493,8566,2)
(8918,2260,2)
(4522,2727,2)
(8310,6859,2)
(8827,7657,2)
(5006,1686,2)
(2457,7962,2)
(8052,3397,2)
(5900,127,2)
(4375,8670,2)
(1198,795,2)
(6900,4337,2)
(7572,1686,2)
(2345,6987,2)
(964,8652,2)
(4478,4580,2)
(2742,3376,2)
(4695,1876,2)
(8836,5061,2)
(6032,3376,2)
(8698,4759,2)
(4126,7120,2)
(2342,8101,2)
(3231,7326,2)
(5571,1461,2)
(6670,3861,2)
(8886,8865,2)
(3103,3484,2)
(3137,1185,2)
(3303,5397,2)
(7112,8334,2)
(1728,335,2)
(8383,217,2)
(5828,2973,2)
(8653,5988,2)
(7665,4499,2)
(3546,4481,2)
(8297,8566,2)
(9069,2069,2)
(877,3466,2)
(5193,6261,2)
(684,6932,2)
(5228,2577,2)
(9041,7410,2)
(1876,8564,2)
(50,2788,2)
(857,5061,2)
(4962,8207,2)
(533,3879,2)
(6316,3090,2)
(2392,371,2)
(9064,837,2)
(5105,3647,2)
(3590,5129,2)
(6209,9024,2)
(8706,6340,2)
(3479,5058,2)
(3423,3333,2)
(7152,3381,2)
(3386,3376,2)
(8745,8124,2)
(5820,3381,2)
(7800,8601,2)
(9107,1146,2)
(5250,7534,2)
(2455,4501,2)
(6637,1607,2)
(6728,4501,2)
(3613,4393,2)
(9005,8701,2)
(3010,2399,2)
(5076,230,2)
(7590,3376,2)
(7715,3879,2)
(8013,5287,2)
(4507,1078,2)
(7476,1263,2)
(5114,3376,2)
(5371,7751,2)
(5992,6981,2)
(5572,5165,2)
(7144,6821,2)
(1150,5429,2)
(5731,4952,2)
(6370,3376,2)
(7271,5655,2)
(2434,8093,2)
(7448,2898,2)
(395,9002,2)
(3362,5441,2)
(6757,5891,2)
(5130,8042,2)
(9022,6272,2)
(4129,3054,2)
(8590,5061,2)
(8061,350,2)
(2692,2973,2)
(7357,8281,2)
(7017,3376,2)
(7235,5129,2)
(4121,851,2)
(8778,65,2)
(1865,9150,2)
(5329,2938,2)
(1646,2252,2)
(1985,6213,2)
(7884,4952,2)
(7435,4143,2)
(968,7421,2)
(3247,8928,2)
(5290,752,2)
(3663,2241,2)
(613,5231,2)
(7929,2764,2)
(8736,4501,2)
(7328,6435,2)
(7047,8566,2)
(5241,8924,2)
(8889,2540,2)
(3156,7410,2)
(811,3376,2)
(6581,3103,2)
(191,8321,2)
(3055,3376,2)
(6735,8861,2)
(8866,3944,2)
(1131,7227,2)
(1345,8841,2)
(2197,2241,2)
(8232,1802,2)
(6557,4712,2)
(1539,8566,2)
(2528,7068,2)
(2883,1284,2)
(256,4642,2)
(8604,5450,2)
(4120,4808,2)
(4086,7654,2)
(9076,4238,2)
(2456,5135,2)
(9067,851,2)
(447,8841,2)
(6685,3376,2)
(788,8127,2)
(6577,1394,2)
(264,5061,2)
(9122,8566,2)
(5936,5441,2)
(8520,788,2)
(3491,8863,2)
(8472,2005,2)
(1756,5061,2)
(1896,2938,2)
(1050,6669,2)
(7411,3376,2)
(484,1959,2)
(5084,3711,2)
(635,554,2)
(2592,5061,2)
(3437,4304,2)
(2109,8564,2)
(8905,4720,2)
(4858,6218,2)
(6960,1210,2)
(576,4729,2)
(3320,3333,2)
(804,7029,2)
(2010,7113,2)
(7326,6069,2)
(7740,3376,2)
(6024,2399,2)
(1401,765,2)
(7974,5166,2)
(1259,4656,2)
(5885,4471,2)
(3185,4501,2)
(5519,7766,2)
(7534,8010,2)
(1857,9003,2)
(5316,4452,2)
(7376,7113,2)
(1736,7034,2)
(1528,5547,2)
(1810,974,2)
(6863,8566,2)
(2473,4623,2)
(3033,5061,2)
(665,795,2)
(8675,6730,2)
(895,8566,2)
(88,2938,2)
(8927,6092,2)
(1648,5869,2)
(5204,5767,2)
(6982,8779,2)
(4776,1277,2)
(2304,5835,2)
(2279,3163,2)
(8065,3381,2)
(7396,5007,2)
(5892,5003,2)
(654,4201,2)
(2952,716,2)
(5314,3879,2)
(3645,8101,2)
(8733,4279,2)
(7312,3354,2)
(52,3397,2)
(2672,2577,2)
(6844,5450,2)
(3981,6859,2)
(3340,6817,2)
(6647,8128,2)
(3897,3466,2)
(792,8566,2)
(4655,3381,2)
(7615,2420,2)
(5732,5402,2)
(8105,7480,2)
(8009,4129,2)
(2277,6033,2)
(3109,4656,2)
(8832,2736,2)
(7046,851,2)
(8676,5061,2)
(7764,5441,2)
(6105,1686,2)
(2727,9002,2)
(6452,1954,2)
(7701,3376,2)
(9048,2399,2)
(3374,1437,2)
(8376,9140,2)
(432,3376,2)
(5105,8966,2)
(5852,8566,2)
(267,3879,2)
(256,4400,2)
(4622,5088,2)
(5818,8566,2)
(7801,5402,2)
(20,7163,2)
(6057,7624,2)
(6751,4350,2)
(2878,5937,2)
(5441,806,2)
(3430,8657,2)
(6474,8575,2)
(3356,494,2)
(1188,5220,2)
(1010,7700,2)
(8772,7241,2)
(8103,6037,2)
(5403,3376,2)
(6689,3186,2)
(2082,3148,2)
(5058,2614,2)
(1680,5905,2)
(7293,3608,2)
(4617,4808,2)
(9152,230,2)
(4041,765,2)
(1517,7462,2)
(7301,8566,2)
(9105,1220,2)
(6501,1532,2)
(2481,3156,2)
(4444,8566,2)
(3578,3148,2)
(7200,8030,2)
(5458,6768,2)
(7918,9140,2)
(4437,5058,2)
(921,8670,2)
(7081,8579,2)
(2206,7823,2)
(6298,3061,2)
(7112,4847,2)
(2998,7942,2)
(2355,3381,2)
(1258,3376,2)
(1205,8566,2)
(7960,8396,2)
(2331,8566,2)
(5401,5061,2)
(5853,5349,2)
(5439,8566,2)
(5659,7805,2)
(5748,5741,2)
(742,6023,2)
(503,2938,2)
(5950,2514,2)
(3840,7323,2)
(9155,4958,2)
(9051,4279,2)
(5702,4123,2)
(7841,2069,2)
(2900,4001,2)
(2737,8566,2)
(8142,3005,2)
(6817,2953,2)
(294,3376,2)
(6092,930,2)
(8079,5885,2)
(5564,127,2)
(5266,3879,2)
(1376,6932,2)
(7218,4129,2)
(5419,7815,2)
(4997,3374,2)
(7575,8865,2)
(2828,3879,2)
(8623,8566,2)
(3477,1726,2)
(7927,3544,2)
(1702,2451,2)
(4564,930,2)
(7222,4560,2)
(1062,3376,2)
(6387,2497,2)
(2557,8022,2)
(622,5061,2)
(3090,1843,2)
(113,5852,2)
(3799,631,2)
(4406,181,2)
(385,5610,2)
(8724,236,2)
(6002,5165,2)
(3832,2399,2)
(5273,930,2)
(4005,8107,2)
(1044,1562,2)
(1941,8558,2)
(8107,6069,2)
(2533,3376,2)
(2881,3516,2)
(1175,3374,2)
(5135,7129,2)
(3205,8566,2)
(8189,230,2)
(3942,401,2)
(4758,2309,2)
(8785,9150,2)
(8975,1110,2)
(4393,3201,2)
(1839,2614,2)
(668,3505,2)
(4668,5937,2)
(7604,7754,2)
(5520,3879,2)
(4173,8566,2)
(7847,3376,2)
(7368,5561,2)
(9096,5061,2)
(933,5431,2)
(4330,5570,2)
(6022,7692,2)
(6106,4299,2)
(4242,8652,2)
(3677,2938,2)
(6293,5436,2)
(8896,2938,2)
(7081,5570,2)
(2128,39,2)
(6753,6524,2)
(97,8334,2)
(2471,8566,2)
(4596,6694,2)
(2727,4743,2)
(7063,8466,2)
(2158,8296,2)
(523,7425,2)
(5105,838,2)
(4771,968,2)
(4956,5399,2)
(4744,4393,2)
(8706,7425,2)
(212,3333,2)
(152,8566,2)
(808,3116,2)
(8462,1876,2)
(2522,4952,2)
(1613,933,2)
(6511,2262,2)
(4618,8566,2)
(1937,1963,2)
(3419,3376,2)
(42,8729,2)
(5238,7284,2)
(8325,3354,2)
(823,7088,2)
(2515,7920,2)
(3095,5014,2)
(1493,2443,2)
(2368,1474,2)
(4309,3376,2)
(2104,4952,2)
(7644,8703,2)
(1591,2497,2)
(1163,4393,2)
(6578,8945,2)
(5436,5981,2)
(8154,4263,2)
(7771,6033,2)
(2721,4623,2)
(6310,8460,2)
(5363,79,2)
(5961,2005,2)
(4499,5465,2)
(8926,4788,2)
(1035,9003,2)
(2812,8244,2)
(4490,1011,2)
(434,5165,2)
(7230,4393,2)
(3155,2938,2)
(329,2938,2)
(4799,4263,2)
(365,5591,2)
(4733,688,2)
(6986,6968,2)
(7564,4916,2)
(4839,5905,2)
(2770,5061,2)
(3405,4952,2)
(2919,3544,2)
(8456,8385,2)
(2447,7624,2)
(2512,8924,2)
(7874,6270,2)
(6435,488,2)
(1433,3397,2)
(4390,8841,2)
(7868,2938,2)
(4504,7764,2)
(3335,5061,2)
(4980,3516,2)
(1068,8566,2)
(7231,6968,2)
(5130,5061,2)
(1958,1365,2)
(8508,3005,2)
(7297,7894,2)
(6609,5061,2)
(3116,8653,2)
(552,8566,2)
(8941,806,2)
(7353,4393,2)
(299,6033,2)
(4922,4190,2)
(1294,2399,2)
(4880,3694,2)
(4047,3477,2)
(5008,2906,2)
(1952,8009,2)
(3354,1887,2)
(2548,8566,2)
(7579,7023,2)
(7794,6768,2)
(1284,8558,2)
(5105,5544,2)
(6529,7709,2)
(4990,4299,2)
(5962,3376,2)
(1106,5061,2)
(3707,5698,2)
(2336,3148,2)
(821,5061,2)
(527,8670,2)
(8980,7046,2)
(5949,2906,2)
(63,7410,2)
(4454,4551,2)
(4610,8244,2)
(594,2443,2)
(3204,3285,2)
(6717,3376,2)
(8373,219,2)
(4243,3093,2)
(6537,6817,2)
(554,9011,2)
(3859,4952,2)
(4566,3879,2)
(164,8566,2)
(748,7410,2)
(755,1192,2)
(8131,5403,2)
(683,1246,2)
(1142,6524,2)
(5736,5431,2)
(3557,1714,2)
(1041,3376,2)
(5105,7326,2)
(6256,5899,2)
(4937,7343,2)
(7438,554,2)
(4751,4027,2)
(9120,5061,2)
(8936,6472,2)
(693,3376,2)
(2540,1192,2)
(7950,7894,2)
(3708,236,2)
(4285,4952,2)
(8825,8566,2)
(5450,3232,2)
(7788,5610,2)
(3416,3376,2)
(5697,4902,2)
(948,3354,2)
(6425,5220,2)
(5950,5609,2)
(7721,5905,2)
(6803,9022,2)
(8904,3879,2)
(7041,1829,2)
(6240,3879,2)
(8460,6776,2)
(5390,5692,2)
(3576,1775,2)
(302,2082,2)
(66,3724,2)
(9104,9042,2)
(8699,3694,2)
(1288,3516,2)
(6839,9002,2)
(3157,2344,2)
(5811,8670,2)
(910,9150,2)
(5536,5061,2)
(2139,2165,2)
(2825,6932,2)
(1205,2069,2)
(1488,1284,2)
(102,2577,2)
(1437,8599,2)
(7592,8566,2)
(8837,4685,2)
(1820,3879,2)
(2864,6983,2)
(1923,5061,2)
(4207,1937,2)
(3108,4903,2)
(2528,3376,2)
(2847,4209,2)
(2720,351,2)
(1479,3958,2)
(6759,4902,2)
(1356,3376,2)
(5366,8924,2)
(4304,2069,2)
(1933,2307,2)
(2498,6758,2)
(1347,5402,2)
(1319,5610,2)
(8940,79,2)
(97,4056,2)
(8792,1963,2)
(1954,1070,2)
(8263,251,2)
(3006,3879,2)
(5290,4419,2)
(2336,8928,2)
(1257,8670,2)
(7233,1963,2)
(1064,5220,2)
(1714,3303,2)
(902,8566,2)
(8248,3202,2)
(4027,8650,2)
(5832,7139,2)
(765,3808,2)
(6060,3397,2)
(2225,350,2)
(3124,2496,2)
(2513,6367,2)
(7912,4393,2)
(3661,6678,2)
(4488,3354,2)
(1816,7212,2)
(5286,3376,2)
(1499,7120,2)
(8621,2241,2)
(3679,3156,2)
(559,8601,2)
(7739,3374,2)
(8535,181,2)
(834,4001,2)
(3652,5962,2)
(1412,556,2)
(3194,5891,2)
(2278,6799,2)
(5223,3638,2)
(747,8601,2)
(655,7201,2)
(8525,3376,2)
(5250,823,2)
(1392,9150,2)
(3647,4740,2)
(5868,4252,2)
(8385,1110,2)
(7410,5074,2)
(5082,6941,2)
(3740,5962,2)
(6340,8649,2)
(687,795,2)
(1219,2262,2)
(3839,6867,2)
(5110,8075,2)
(3726,3376,2)
(8449,5730,2)
(3456,1284,2)
(4089,2399,2)
(6986,1156,2)
(3439,6817,2)
(3781,8566,2)
(7033,4882,2)
(955,6435,2)
(7313,8334,2)
(1696,8715,2)
(2584,4642,2)
(1873,3333,2)
(8531,1093,2)
(873,1029,2)
(4462,7284,2)
(6576,6730,2)
(5228,4822,2)
(6923,2245,2)
(4491,5905,2)
(7106,5343,2)
(2161,2241,2)
(7818,258,2)
(3753,7700,2)
(927,700,2)
(6439,6260,2)
(7466,177,2)
(8334,7283,2)
(5105,6382,2)
(3043,952,2)
(6389,851,2)
(4580,153,2)
(3381,3336,2)
(4879,1834,2)
(8115,2397,2)
(5714,8601,2)
(0,8227,2)
(8476,2520,2)
(5197,5450,2)
(9104,4864,2)
(3803,2534,2)
(4074,7088,2)
(8417,2510,2)
(1333,8009,2)
(4003,2633,2)
(2397,4078,2)
(6277,7201,2)
(999,7023,2)
(3508,7431,2)
(4060,1862,2)
(6926,9003,2)
(6357,3376,2)
(2424,9150,2)
(2577,975,2)
(6893,2938,2)
(8144,8601,2)
(2769,8566,2)
(5829,3879,2)
(3262,3376,2)
(5612,5029,2)
(3033,8566,2)
(5531,2973,2)
(5304,2048,2)
(616,4192,2)
(1155,3156,2)
(2607,9024,2)
(6314,3376,2)
(9104,8121,2)
(5891,8778,2)
(1704,3879,2)
(6498,234,2)
(8907,1232,2)
(8674,4337,2)
(4607,1480,2)
(7771,7894,2)
(401,1080,2)
(499,3767,2)
(4669,1246,2)
(3955,3043,2)
(5188,7414,2)
(7943,3516,2)
(4227,3381,2)
(7120,616,2)
(2623,2262,2)
(5401,5937,2)
(9136,2870,2)
(7348,4393,2)
(5800,6876,2)
(2236,1474,2)
(2128,6932,2)
(798,4299,2)
(8979,2420,2)
(6469,1958,2)
(4952,6257,2)
(5451,7686,2)
(1418,352,2)
(2474,1180,2)
(8711,2675,2)
(2643,7380,2)
(8910,5441,2)
(6091,9003,2)
(2139,4642,2)
(6671,1474,2)
(6452,1690,2)
(1854,8566,2)
(7399,3376,2)
(9104,6055,2)
(3002,6981,2)
(2974,2033,2)
(8417,8066,2)
(3378,8024,2)
(9119,7920,2)
(5605,5962,2)
(1080,8566,2)
(7259,460,2)
(1372,631,2)
(4577,4902,2)
(2235,5061,2)
(5298,4134,2)
(5012,1474,2)
(6287,1563,2)
(8973,6082,2)
(1567,2069,2)
(6051,5061,2)
(2676,3005,2)
(7416,3685,2)
(7224,3072,2)
(141,7410,2)
(2576,9150,2)
(4528,238,2)
(778,6092,2)
(4919,5813,2)
(5518,3163,2)
(1774,8566,2)
(1176,9140,2)
(6724,1375,2)
(8561,7410,2)
(2888,7383,2)
(5551,49,2)
(4131,4299,2)
(9107,8219,2)
(6770,6082,2)
(3742,5110,2)
(3487,8913,2)
(8309,3129,2)
(5231,1357,2)
(3836,1284,2)
(1369,8251,2)
(3730,70,2)
(2394,3333,2)
(7856,7283,2)
(7001,7764,2)
(3231,2496,2)
(4228,3376,2)
(1818,3354,2)
(3274,3221,2)
(3861,4751,2)
(2390,7725,2)
(8210,4070,2)
(2367,3376,2)
(4347,6069,2)
(4,4144,2)
(4874,1954,2)
(8687,8601,2)
(8234,3521,2)
(1417,8566,2)
(6470,7818,2)
(6697,2634,2)
(6990,379,2)
(2706,7931,2)
(4338,7088,2)
(5571,6712,2)
(7367,6435,2)
(7750,2074,2)
(6867,6012,2)
(8444,974,2)
(8782,8566,2)
(5346,657,2)
(7670,8601,2)
(1070,5628,2)
(8599,3751,2)
(1904,1242,2)
(277,3376,2)
(5315,2614,2)
(4730,3879,2)
(3823,910,2)
(4515,3148,2)
(8638,5061,2)
(3521,7410,2)
(8585,7053,2)
(658,6413,2)
(6258,4347,2)
(8989,2069,2)
(3883,2975,2)
(690,8566,2)
(688,4450,2)
(4747,5110,2)
(8399,344,2)
(8961,8101,2)
(1284,1039,2)
(3505,2069,2)
(9036,2243,2)
(3416,5061,2)
(8269,6859,2)
(4447,9003,2)
(7870,3516,2)
(3892,3383,2)
(6170,2005,2)
(4528,3217,2)
(7347,8601,2)
(1561,4929,2)
(2938,3374,2)
(1945,9053,2)
(3368,5061,2)
(2200,7284,2)
(3023,6092,2)
(4004,5727,2)
(1650,8101,2)
(2432,5790,2)
(3676,3638,2)
(8579,1763,2)
(9024,5371,2)
(7894,7174,2)
(4119,5905,2)
(682,6272,2)
(7398,1499,2)
(1683,982,2)
(2088,1151,2)
(1320,302,2)
(8841,2973,2)
(2973,3078,2)
(2267,1520,2)
(7875,6069,2)
(1124,5402,2)
(9143,8928,2)
(1107,6817,2)
(72,7046,2)
(4454,4613,2)
(2281,5061,2)
(3213,5363,2)
(3465,5403,2)
(7877,3376,2)
(405,3376,2)
(487,257,2)
(1206,4501,2)
(5457,2736,2)
(7607,546,2)
(9024,8701,2)
(6951,1686,2)
(4610,6388,2)
(9104,3647,2)
(1431,2938,2)
(3424,7343,2)
(8816,6272,2)
(5887,3376,2)
(2041,3376,2)
(6082,1341,2)
(8743,8566,2)
(7485,2938,2)
(8335,1623,2)
(657,1963,2)
(244,9046,2)
(8381,7046,2)
(8562,4656,2)
(2735,5937,2)
(3916,8564,2)
(2856,780,2)
(33,7093,2)
(8847,8595,2)
(3070,2443,2)
(6245,9150,2)
(4697,3376,2)
(2959,5905,2)
(3616,8566,2)
(7231,8566,2)
(8455,3879,2)
(6484,930,2)
(4836,5061,2)
(151,8651,2)
(3617,5760,2)
(939,6370,2)
(6530,5403,2)
(8730,4440,2)
(4585,7343,2)
(1636,3711,2)
(1346,3516,2)
(1767,5791,2)
(6433,2399,2)
(5907,7624,2)
(1043,8670,2)
(5458,4451,2)
(8974,3333,2)
(1735,4400,2)
(1474,7283,2)
(6477,5061,2)
(6158,4393,2)
(3210,5869,2)
(868,4144,2)
(2906,6941,2)
(6419,2577,2)
(4789,5061,2)
(8852,4487,2)
(1689,8566,2)
(2453,3879,2)
(7896,2224,2)
(3046,3376,2)
(184,3376,2)
(4209,8244,2)
(7821,3376,2)
(1185,8566,2)
(6510,8566,2)
(8700,8313,2)
(2329,6867,2)
(546,2975,2)
(1385,3333,2)
(3700,644,2)
(8948,6637,2)
(2806,3551,2)
(7706,2043,2)
(4451,3202,2)
(2880,8155,2)
(2068,6321,2)
(1536,795,2)
(136,8137,2)
(9032,2245,2)
(8703,302,2)
(4506,7894,2)
(403,6706,2)
(8702,3590,2)
(777,5981,2)
(1590,7373,2)
(3983,8376,2)
(1513,2160,2)
(9104,6382,2)
(5875,8652,2)
(6507,3156,2)
(2692,5937,2)
(4144,4902,2)
(854,401,2)
(3492,6443,2)
(2834,795,2)
(325,258,2)
(3124,7962,2)
(5938,4393,2)
(1459,5610,2)
(1511,1386,2)
(76,7343,2)
(5431,1049,2)
(7059,4381,2)
(4414,1786,2)
(4453,8024,2)
(5010,8566,2)
(4763,8601,2)
(8606,8376,2)
(926,755,2)
(6041,6637,2)
(3512,3879,2)
(7750,8566,2)
(5089,3376,2)
(7072,8460,2)
(7669,1683,2)
(3206,3516,2)
(2935,6370,2)
(221,3376,2)
(8798,7664,2)
(7603,3392,2)
(1533,7700,2)
(1851,8566,2)
(7109,7201,2)
(3104,8566,2)
(3429,177,2)
(2978,6023,2)
(6885,1237,2)
(7732,1468,2)
(3163,4481,2)
(2023,7053,2)
(2999,3374,2)
(3370,631,2)
(1698,315,2)
(3423,153,2)
(6067,4952,2)
(4678,7894,2)
(6744,6817,2)
(5586,1246,2)
(4924,8251,2)
(4537,3095,2)
(1123,2399,2)
(4032,7894,2)
(760,8321,2)
(2863,5061,2)
(1972,4401,2)
(8025,7831,2)
(8938,3879,2)
(7688,4268,2)
(7212,9108,2)
(1388,5061,2)
(5146,6968,2)
(5923,8865,2)
(6118,5061,2)
(4455,5165,2)
(2288,6669,2)
(1886,7624,2)
(5442,8042,2)
(5642,1937,2)
(2782,3879,2)
(3025,5835,2)
(4948,4952,2)
(305,644,2)
(1237,2906,2)
(4018,6859,2)
(7394,4783,2)
(4051,2906,2)
(5735,216,2)
(2009,1686,2)
(8758,258,2)
(5470,6758,2)
(7495,795,2)
(9104,1071,2)
(5493,3879,2)
(3603,7410,2)
(616,79,2)
(8900,3376,2)
(1719,3376,2)
(4324,1474,2)
(6033,1402,2)
(4635,1726,2)
(3685,421,2)
(2469,3376,2)
(6130,7462,2)
(6395,2069,2)
(2884,5061,2)
(8634,7929,2)
(4801,8566,2)
(4750,8473,2)
(2609,1125,2)
(1401,127,2)
(2584,7358,2)
(7098,2241,2)
(3408,4347,2)
(914,3163,2)
(5569,3376,2)
(3815,315,2)
(8771,5937,2)
(1971,5790,2)
(770,6768,2)
(4746,7053,2)
(1097,8797,2)
(520,7410,2)
(9059,7047,2)
(1842,7587,2)
(4177,4656,2)
(3021,8508,2)
(6140,5962,2)
(2769,3376,2)
(5545,2906,2)
(8240,5061,2)
(2365,933,2)
(6583,65,2)
(1570,3376,2)
(6218,5937,2)
(2948,6547,2)
(1799,644,2)
(2256,2938,2)
(4907,8292,2)
(4691,7920,2)
(671,65,2)
(3574,3374,2)
(8120,6986,2)
(4365,8566,2)
(309,5061,2)
(5375,1906,2)
(2344,3219,2)
(658,8579,2)
(4392,33,2)
(4071,2069,2)
(71,2577,2)
(7088,4346,2)
(2231,5061,2)
(3608,181,2)
(24,3240,2)
(1045,5061,2)
(8790,14,2)
(4788,8657,2)
(8883,8841,2)
(7185,7894,2)
(3457,1813,2)
(7069,6768,2)
(2284,4656,2)
(2631,6524,2)
(690,5061,2)
(484,5061,2)
(9124,6092,2)
(1505,8566,2)
(2557,3035,2)
(597,65,2)
(3822,4393,2)
(5158,4952,2)
(8852,4393,2)
(7234,302,2)
(7750,5937,2)
(6431,7997,2)
(4472,3879,2)
(4258,2005,2)
(7319,7343,2)
(148,1263,2)
(7668,5789,2)
(2728,5937,2)
(9104,1796,2)
(8171,234,2)
(3436,3879,2)
(8450,8652,2)
(5685,1762,2)
(8582,65,2)
(3513,644,2)
(8867,3376,2)
(61,8566,2)
(5319,8653,2)
(6248,7196,2)
(162,3922,2)
(1702,2848,2)
(4104,7459,2)
(2246,4070,2)
(8825,5061,2)
(958,5061,2)
(7150,5061,2)
(1593,6730,2)
(8806,3148,2)
(4289,8601,2)
(2238,2906,2)
(3686,3366,2)
(5281,974,2)
(5582,1567,2)
(7956,5061,2)
(803,6260,2)
(8745,1067,2)
(4835,8376,2)
(2201,7088,2)
(8827,258,2)
(111,2532,2)
(450,644,2)
(1496,7462,2)
(6078,3376,2)
(5506,5165,2)
(7849,6524,2)
(3274,7805,2)
(5105,7358,2)
(3364,5231,2)
(1941,1690,2)
(5129,5873,2)
(1958,6963,2)
(632,5475,2)
(6509,4952,2)
(5652,6004,2)
(8700,6883,2)
(3630,1580,2)
(4637,5570,2)
(2025,5061,2)
(8559,3879,2)
(8832,3497,2)
(5369,79,2)
(5512,644,2)
(498,7821,2)
(7794,7034,2)
(1581,3078,2)
(3441,8566,2)
(6667,7462,2)
(3198,401,2)
(2298,7120,2)
(4369,7764,2)
(7746,3376,2)
(3484,5061,2)
(3722,3584,2)
(8775,5791,2)
(3235,6919,2)
(9094,4877,2)
(8471,4134,2)
(3777,4451,2)
(7430,7821,2)
(7557,5061,2)
(7081,3202,2)
(8978,1402,2)
(3992,153,2)
(1225,5994,2)
(3610,3588,2)
(8431,7894,2)
(352,4623,2)
(8859,5061,2)
(3231,7962,2)
(755,1984,2)
(1758,7088,2)
(2604,5058,2)
(504,631,2)
(6897,4322,2)
(5015,6977,2)
(7080,3354,2)
(2990,258,2)
(8526,3381,2)
(4787,5441,2)
(7231,5937,2)
(5741,3516,2)
(1378,5135,2)
(4375,1449,2)
(2133,2577,2)
(5945,4123,2)
(1378,5061,2)
(8900,4646,2)
(1002,7410,2)
(213,6260,2)
(60,1474,2)
(6719,5061,2)
(4022,837,2)
(1854,8107,2)
(3530,7915,2)
(8285,6260,2)
(974,4914,2)
(5229,7088,2)
(7053,1110,2)
(2761,6768,2)
(5604,9002,2)
(8771,5061,2)
(4090,230,2)
(2377,7365,2)
(4120,8331,2)
(6892,3201,2)
(9096,8566,2)
(6176,5129,2)
(3236,599,2)
(7644,3592,2)
(7507,7410,2)
(979,3376,2)
(150,5061,2)
(6789,7051,2)
(8196,7881,2)
(6714,8652,2)
(7058,8566,2)
(2161,7727,2)
(2429,8566,2)
(2208,49,2)
(4801,5937,2)
(4996,406,2)
(349,8035,2)
(5131,5399,2)
(214,7029,2)
(8062,1093,2)
(1479,3941,2)
(2847,8609,2)
(7799,5835,2)
(5668,7821,2)
(2340,5767,2)
(1187,5061,2)
(2031,655,2)
(3701,5061,2)
(9018,7046,2)
(8116,5610,2)
(8514,7281,2)
(8370,8924,2)
(7771,5591,2)
(7584,5402,2)
(3649,5403,2)
(6843,5403,2)
(8482,302,2)
(2544,1974,2)
(3263,1785,2)
(7458,2792,2)
(5462,7658,2)
(3578,6082,2)
(5165,7764,2)
(6676,3879,2)
(7587,4481,2)
(8863,2656,2)
(8695,6669,2)
(6456,5570,2)
(2776,2443,2)
(7853,1204,2)
(1137,5441,2)
(6462,8928,2)
(959,8566,2)
(5279,4656,2)
(5522,127,2)
(5683,3348,2)
(427,6712,2)
(7726,1284,2)
(7078,6977,2)
(4878,2577,2)
(2751,8566,2)
(2809,930,2)
(6610,3381,2)
(3329,8566,2)
(4016,8164,2)
(6759,7787,2)
(3567,4656,2)
(2008,5767,2)
(4785,8566,2)
(2785,7351,2)
(7588,5129,2)
(6983,4057,2)
(6246,1604,2)
(1995,8234,2)
(3067,1686,2)
(5905,3376,2)
(6361,4952,2)
(532,7201,2)
(2843,367,2)
(8883,6887,2)
(3381,2074,2)
(8273,5061,2)
(1464,5204,2)
(877,7343,2)
(6513,8605,2)
(4133,4401,2)
(1302,619,2)
(41,6768,2)
(7763,6730,2)
(8088,230,2)
(2870,6621,2)
(4155,3879,2)
(6422,8952,2)
(6849,2273,2)
(5105,952,2)
(7599,851,2)
(5682,6859,2)
(6622,4123,2)
(1894,5789,2)
(2830,3198,2)
(4165,3516,2)
(1225,8579,2)
(4134,5559,2)
(7544,8461,2)
(3714,1230,2)
(3222,8162,2)
(1156,6593,2)
(6490,3359,2)
(3450,6968,2)
(5831,2278,2)
(6523,933,2)
(5655,5061,2)
(1497,7029,2)
(5858,5220,2)
(8242,5061,2)
(1603,2577,2)
(2180,2978,2)
(5780,8601,2)
(7721,8566,2)
(8272,8566,2)
(6396,3231,2)
(1596,4326,2)
(4558,7201,2)
(1900,7414,2)
(70,4250,2)
(4040,2803,2)
(9095,3376,2)
(2633,8376,2)
(7363,4766,2)
(6441,5428,2)
(6932,544,2)
(5243,14,2)
(8015,9140,2)
(4785,5937,2)
(8181,5061,2)
(8115,9002,2)
(4204,1284,2)
(4883,8941,2)
(2584,6127,2)
(7023,8863,2)
(4030,4122,2)
(3589,6524,2)
(6743,1271,2)
(4392,1372,2)
(8670,2973,2)
(6566,2485,2)
(8215,5129,2)
(5265,8865,2)
(5105,876,2)
(4787,5165,2)
(3318,5109,2)
(1264,1271,2)
(8964,8564,2)
(7394,5791,2)
(4315,1958,2)
(1984,9024,2)
(8509,2418,2)
(1381,9150,2)
(7789,4322,2)
(9022,8597,2)
(5148,1922,2)
(2831,7201,2)
(4349,4238,2)
(7900,7053,2)
(7658,6780,2)
(450,3694,2)
(4400,3061,2)
(7153,6067,2)
(1923,5450,2)
(5245,8234,2)
(5103,8865,2)
(4733,8177,2)
(4505,5652,2)
(923,2365,2)
(5934,8863,2)
(2540,6730,2)
(4647,6278,2)
(7534,7088,2)
(7042,1093,2)
(2543,1072,2)
(9104,1558,2)
(2692,5061,2)
(5263,219,2)
(9104,1413,2)
(3835,8566,2)
(4861,2311,2)
(3638,7727,2)
(1409,5767,2)
(812,2383,2)
(6973,1386,2)
(2771,8042,2)
(5164,3153,2)
(8914,8863,2)
(7644,7326,2)
(1581,3201,2)
(2878,5061,2)
(8956,8601,2)
(1303,3376,2)
(1396,302,2)
(7518,2803,2)
(389,2245,2)
(8479,5791,2)
(4458,9003,2)
(6852,2127,2)
(37,352,2)
(9013,7283,2)
(5148,5574,2)
(1460,8460,2)
(764,8312,2)
(6836,3376,2)
(957,3879,2)
(2653,2906,2)
(7366,8601,2)
(7976,8566,2)
(6611,6186,2)
(5431,4118,2)
(3158,4148,2)
(2424,3241,2)
(144,5626,2)
(1515,7088,2)
(4366,1011,2)
(1882,1686,2)
(233,2577,2)
(4954,2614,2)
(1941,1630,2)
(7926,2908,2)
(5985,8566,2)
(2139,7425,2)
(4918,5279,2)
(1201,3354,2)
(4335,8924,2)
(2630,2399,2)
(1707,2019,2)
(7023,8662,2)
(893,5591,2)
(6754,8883,2)
(8590,8566,2)
(6566,4400,2)
(3825,4993,2)
(3670,5061,2)
(8299,3879,2)
(4586,3376,2)
(959,3231,2)
(2645,8121,2)
(4947,5789,2)
(3955,5254,2)
(9076,4048,2)
(1278,2975,2)
(3287,8234,2)
(7458,3709,2)
(2671,6712,2)
(2034,3376,2)
(6944,6669,2)
(5751,6213,2)
(7759,3354,2)
(3955,9104,2)
(8047,7764,2)
(675,177,2)
(1420,2812,2)
(1534,2005,2)
(8969,3376,2)
(5474,8022,2)
(3017,1297,2)
(8058,4656,2)
(5830,7482,2)
(5894,2165,2)
(8446,7351,2)
(5533,3711,2)
(2713,8566,2)
(2290,7343,2)
(9136,2768,2)
(6836,5312,2)
(2994,8841,2)
(144,4656,2)
(5374,216,2)
(4872,5061,2)
(9021,9119,2)
(5340,5110,2)
(5672,6589,2)
(1478,8101,2)
(5971,4656,2)
(4705,65,2)
(3222,425,2)
(8712,7624,2)
(6669,4412,2)
(659,63,2)
(4405,6637,2)
(2633,8566,2)
(4687,8566,2)
(6081,1474,2)
(8971,6768,2)
(28,5873,2)
(8160,3376,2)
(2914,3376,2)
(7287,5591,2)
(3694,1507,2)
(8537,1251,2)
(4773,5891,2)
(9104,1745,2)
(4736,7343,2)
(635,8566,2)
(7423,926,2)
(5530,5110,2)
(793,6669,2)
(2159,3376,2)
(2219,2975,2)
(1653,5061,2)
(2304,8208,2)
(5088,2074,2)
(722,2607,2)
(2002,795,2)
(6574,3815,2)
(6602,3376,2)
(680,554,2)
(1721,5399,2)
(4999,2906,2)
(4062,3061,2)
(2725,1762,2)
(6474,4393,2)
(5505,3091,2)
(8861,8601,2)
(7976,401,2)
(3685,2069,2)
(8876,7649,2)
(8856,7986,2)
(38,49,2)
(5937,1934,2)
(4825,4299,2)
(4789,8566,2)
(3693,4057,2)
(7094,8841,2)
(4310,5403,2)
(8030,7700,2)
(1458,258,2)
(5992,5061,2)
(3274,2332,2)
(5974,5741,2)
(5499,3376,2)
(3189,5442,2)
(5877,802,2)
(1983,5061,2)
(723,3354,2)
(3743,6712,2)
(5162,2019,2)
(3720,4299,2)
(9088,5403,2)
(869,5962,2)
(5791,3570,2)
(8356,6069,2)
(5063,6092,2)
(8403,5061,2)
(3893,5774,2)
(7557,8566,2)
(3096,7034,2)
(2038,2005,2)
(8608,2938,2)
(4847,8566,2)
(74,5767,2)
(3106,3070,2)
(5070,7480,2)
(3505,8262,2)
(7766,1584,2)
(6187,982,2)
(1577,6257,2)
(4768,7700,2)
(7931,2883,2)
(488,1686,2)
(5287,1765,2)
(8658,258,2)
(7974,258,2)
(947,974,2)
(7619,5636,2)
(773,5061,2)
(5123,3879,2)
(5878,2069,2)
(1284,7845,2)
(8348,6740,2)
(5270,5937,2)
(257,9003,2)
(3926,5748,2)
(5446,5135,2)
(428,3333,2)
(6691,3879,2)
(2380,4991,2)
(5756,4501,2)
(1655,1378,2)
(2380,4279,2)
(3172,5061,2)
(1357,2968,2)
(4210,5591,2)
(6430,7920,2)
(3875,7053,2)
(5148,4400,2)
(2497,3305,2)
(5735,2869,2)
(6730,9024,2)
(4393,3078,2)
(6453,4481,2)
(6872,3333,2)
(6590,2497,2)
(3231,952,2)
(8205,3160,2)
(9038,5610,2)
(3451,5220,2)
(557,4129,2)
(6623,795,2)
(961,2443,2)
(8915,6092,2)
(2191,1245,2)
(2346,6524,2)
(1252,3376,2)
(3231,2870,2)
(8696,401,2)
(4648,7462,2)
(2869,216,2)
(1564,3397,2)
(4658,7482,2)
(3482,5397,2)
(3216,127,2)
(7779,2938,2)
(8208,8566,2)
(4341,3163,2)
(7057,7343,2)
(2701,462,2)
(2022,851,2)
(1312,2443,2)
(6945,5403,2)
(3137,8123,2)
(5715,6191,2)
(1668,4656,2)
(7013,6092,2)
(3596,3163,2)
(1272,7151,2)
(9062,2577,2)
(9104,4812,2)
(6788,3202,2)
(1743,9081,2)
(829,8237,2)
(6695,1468,2)
(7794,5570,2)
(708,5974,2)
(87,5790,2)
(1635,8670,2)
(7655,1785,2)
(184,258,2)
(6179,3381,2)
(6933,7343,2)
(1213,3374,2)
(251,5484,2)
(4925,7343,2)
(466,6669,2)
(6566,7962,2)
(936,6380,2)
(497,2577,2)
(2587,3230,2)
(1730,7053,2)
(4479,5767,2)
(6489,5135,2)
(1904,4299,2)
(5760,8566,2)
(485,6260,2)
(7612,3376,2)
(6027,2938,2)
(930,3376,2)
(5246,8281,2)
(1228,6426,2)
(6707,4393,2)
(3141,8566,2)
(5958,6768,2)
(951,5239,2)
(3841,5752,2)
(6524,302,2)
(2203,5899,2)
(8215,8138,2)
(1836,5058,2)
(4612,8447,2)
(6564,955,2)
(1941,6939,2)
(5871,3354,2)
(5712,4588,2)
(5483,8460,2)
(6334,1497,2)
(4351,8566,2)
(384,2293,2)
(4520,9027,2)
(5461,3376,2)
(4668,8924,2)
(3559,7213,2)
(2114,2736,2)
(6295,2245,2)
(6798,5165,2)
(4652,1365,2)
(1714,5397,2)
(5568,3879,2)
(1847,1949,2)
(281,6507,2)
(150,3333,2)
(8331,4808,2)
(8321,2580,2)
(4010,5061,2)
(6873,6524,2)
(5049,4656,2)
(6794,6893,2)
(2319,3879,2)
(439,7234,2)
(1828,6581,2)
(3115,216,2)
(3914,4994,2)
(2289,6524,2)
(6598,5481,2)
(8317,5431,2)
(1308,4238,2)
(2383,5610,2)
(848,7821,2)
(5991,7700,2)
(2934,3584,2)
(9034,2281,2)
(8498,8566,2)
(7110,1474,2)
(2069,1974,2)
(8622,3694,2)
(4521,7894,2)
(9104,6127,2)
(7962,8564,2)
(7647,930,2)
(4818,1284,2)
(836,8281,2)
(537,9022,2)
(7362,2577,2)
(5894,8703,2)
(1056,7521,2)
(7128,3879,2)
(1889,6272,2)
(7491,5450,2)
(7757,7964,2)
(8026,1829,2)
(5475,2646,2)
(5296,7836,2)
(7937,4070,2)
(2584,3647,2)
(4570,5061,2)
(1791,2942,2)
(137,5253,2)
(2457,4400,2)
(3561,5937,2)
(4993,4134,2)
(7774,774,2)
(7149,933,2)
(9104,4520,2)
(3899,7172,2)
(8347,1950,2)
(8963,5873,2)
(6820,5905,2)
(1520,2577,2)
(6779,5791,2)
(4455,700,2)
(7660,5741,2)
(9090,7283,2)
(5274,1093,2)
(2899,3590,2)
(7210,3376,2)
(4823,6977,2)
(448,5061,2)
(3413,4337,2)
(7095,795,2)
(2103,5791,2)
(7196,543,2)
(3230,6204,2)
(50,6977,2)
(4836,3879,2)
(5916,525,2)
(1034,2938,2)
(7550,8566,2)
(1747,3376,2)
(7786,5061,2)
(3630,1762,2)
(3110,7894,2)
(1317,8566,2)
(4969,5880,2)
(2755,5767,2)
(9045,1047,2)
(9102,1876,2)
(4342,6513,2)
(7505,7343,2)
(4424,5402,2)
(4092,213,2)
(5413,12,2)
(1713,7821,2)
(2093,2938,2)
(5923,5061,2)
(2398,2399,2)
(8289,2443,2)
(1535,2461,2)
(6678,9140,2)
(7671,1468,2)
(612,3116,2)
(3461,2058,2)
(8720,4381,2)
(3578,1876,2)
(4271,4656,2)
(7193,8566,2)
(991,3516,2)
(593,3333,2)
(845,2614,2)
(889,7942,2)
(6712,3694,2)
(2140,4952,2)
(4056,8334,2)
(5479,4529,2)
(2638,8863,2)
(3437,8703,2)
(8590,6049,2)
(3112,2443,2)
(5379,6730,2)
(1764,7894,2)
(2415,3376,2)
(3239,795,2)
(469,8396,2)
(85,4499,2)
(8858,8090,2)
(1670,6331,2)
(8989,5252,2)
(1912,3879,2)
(2760,4481,2)
(8149,5403,2)
(8553,4053,2)
(5705,2527,2)
(7288,6817,2)
(6314,8566,2)
(7796,2019,2)
(595,8566,2)
(6460,2033,2)
(2235,7414,2)
(3826,8566,2)
(6679,8566,2)
(5900,4217,2)
(3505,7113,2)
(876,539,2)
(8184,3376,2)
(4514,1783,2)
(1609,3333,2)
(5790,5451,2)
(8204,7410,2)
(3522,5962,2)
(4945,8102,2)
(447,2611,2)
(3577,49,2)
(2129,5165,2)
(7256,933,2)
(6508,3376,2)
(6528,6045,2)
(3596,4414,2)
(8162,8566,2)
(6125,7517,2)
(3031,4952,2)
(48,5962,2)
(4114,7145,2)
(1553,230,2)
(3036,8101,2)
(2457,952,2)
(6396,8566,2)
(5682,3148,2)
(7027,6662,2)
(6592,5061,2)
(2917,3879,2)
(1686,4057,2)
(7884,5061,2)
(45,3879,2)
(3516,8520,2)
(6452,6939,2)
(946,9150,2)
(7986,6774,2)
(613,3203,2)
(7566,546,2)
(3166,4952,2)
(4695,2975,2)
(1894,8566,2)
(8506,4114,2)
(7829,5061,2)
(6892,7250,2)
(1849,6986,2)
(7035,7053,2)
(2932,5789,2)
(5894,7425,2)
(4436,49,2)
(3681,4952,2)
(6602,5061,2)
(8280,7895,2)
(1415,8281,2)
(3219,5791,2)
(1029,1811,2)
(335,7088,2)
(4245,1726,2)
(219,1386,2)
(2480,6941,2)
(1628,6932,2)
(230,6513,2)
(2457,7358,2)
(1384,7624,2)
(159,4623,2)
(4517,7034,2)
(4198,1059,2)
(632,5791,2)
(3408,49,2)
(2966,5905,2)
(2886,6840,2)
(1503,5905,2)
(3685,4306,2)
(6218,8566,2)
(6727,2019,2)
(5913,4129,2)
(7910,6082,2)
(5237,5235,2)
(8739,974,2)
(1600,3333,2)
(3569,5962,2)
(6164,6859,2)
(2713,3005,2)
(2774,3376,2)
(2645,4400,2)
(7486,8601,2)
(7137,1494,2)
(169,8566,2)
(3865,4367,2)
(4034,7343,2)
(3397,3521,2)
(2645,876,2)
(3564,7029,2)
(4402,8271,2)
(9120,3374,2)
(6965,7429,2)
(6438,5873,2)
(8007,1066,2)
(7644,3647,2)
(7461,1775,2)
(2111,434,2)
(4331,8566,2)
(7709,9066,2)
(3007,655,2)
(4796,5714,2)
(8442,4393,2)
(2472,1663,2)
(2188,5165,2)
(1377,3694,2)
(2069,401,2)
(8520,7343,2)
(4953,8773,2)
(1287,8652,2)
(4431,2000,2)
(5725,837,2)
(2164,5791,2)
(189,2577,2)
(7962,5782,2)
(5492,2011,2)
(7821,4486,2)
(2616,643,2)
(6528,570,2)
(5541,1474,2)
(8127,7343,2)
(5163,63,2)
(3070,1493,2)
(7725,7482,2)
(3065,3376,2)
(6877,2938,2)
(5009,8813,2)
(5148,8485,2)
(5450,3376,2)
(6405,6062,2)
(8353,2069,2)
(3318,258,2)
(4052,8030,2)
(64,6215,2)
(3998,6669,2)
(7323,4401,2)
(1528,6446,2)
(7933,9022,2)
(8967,7046,2)
(1308,5989,2)
(5228,6669,2)
(2275,3584,2)
(745,9150,2)
(6517,3584,2)
(7388,1263,2)
(6526,8601,2)
(8578,5905,2)
(2097,9150,2)
(6220,2574,2)
(1871,2241,2)
(1356,4173,2)
(1715,8651,2)
(880,4524,2)
(6398,2443,2)
(5809,7482,2)
(7872,8865,2)
(2019,3376,2)
(8761,5165,2)
(537,3924,2)
(1273,5873,2)
(7115,3516,2)
(5037,3376,2)
(61,5061,2)
(8311,7894,2)
(7151,3134,2)
(4581,5061,2)
(2062,8566,2)
(785,8022,2)
(3073,4952,2)
(429,5869,2)
(4550,3187,2)
(5711,851,2)
(2546,3711,2)
(8150,3376,2)
(1568,8945,2)
(5556,7343,2)
(4931,8753,2)
(1262,3222,2)
(6946,2454,2)
(3579,554,2)
(8912,3376,2)
(7873,8566,2)
(988,5220,2)
(6287,6069,2)
(1604,8754,2)
(2652,5061,2)
(7558,3376,2)
(1758,8143,2)
(1115,7343,2)
(2756,1246,2)
(4678,7185,2)
(2024,3354,2)
(6327,5365,2)
(5679,4808,2)
(643,6082,2)
(6673,5194,2)
(2884,8566,2)
(356,3879,2)
(3844,806,2)
(7542,3879,2)
(6645,9003,2)
(2591,2278,2)
(312,5061,2)
(1623,5061,2)
(4645,2854,2)
(8168,4047,2)
(5111,6705,2)
(1692,930,2)
(5149,5129,2)
(6963,258,2)
(2620,8601,2)
(3495,4952,2)
(8748,974,2)
(6534,3575,2)
(704,2938,2)
(7428,1474,2)
(1129,3381,2)
(9112,3459,2)
(7540,1246,2)
(7904,3376,2)
(1788,8863,2)
(496,8601,2)
(5323,8566,2)
(5921,3516,2)
(112,8771,2)
(2711,2278,2)
(4867,2069,2)
(8465,8913,2)
(2369,795,2)
(8771,6986,2)
(6237,3728,2)
(3336,2074,2)
(4218,3638,2)
(1426,3274,2)
(6710,1365,2)
(5769,5791,2)
(2152,5570,2)
(7421,230,2)
(8628,8244,2)
(4594,3376,2)
(2656,3544,2)
(3266,700,2)
(2851,8292,2)
(4,6388,2)
(4087,3333,2)
(8936,3894,2)
(6705,1726,2)
(1321,1650,2)
(2224,8913,2)
(3238,7986,2)
(3936,8566,2)
(3440,6260,2)
(363,1066,2)
(334,4176,2)
(4842,9146,2)
(1151,6621,2)
(2980,2241,2)
(2062,5061,2)
(7760,5570,2)
(6486,230,2)
(2584,1866,2)
(6801,3376,2)
(2168,6817,2)
(9012,3409,2)
(5686,4656,2)
(8207,3333,2)
(5789,8989,2)
(5836,8863,2)
(6119,2365,2)
(7598,6130,2)
(1027,1995,2)
(4573,8566,2)
(3704,3711,2)
(4209,8566,2)
(8232,7413,2)
(8833,4382,2)
(4914,3005,2)
(4927,7343,2)
(2944,7283,2)
(1462,6932,2)
(1181,3711,2)
(7999,6258,2)
(7890,6125,2)
(1991,9002,2)
(3291,6823,2)
(1321,8961,2)
(8645,570,2)
(5861,5450,2)
(6642,7343,2)
(7777,3163,2)
(3090,2577,2)
(7810,216,2)
(403,3376,2)
(1549,5869,2)
(8609,5791,2)
(7056,5061,2)
(6012,2975,2)
(4644,6082,2)
(77,5899,2)
(8297,2241,2)
(9104,537,2)
(5140,8521,2)
(1402,4952,2)
(8475,8566,2)
(5508,7986,2)
(207,4047,2)
(486,4857,2)
(6983,6435,2)
(3969,6817,2)
(6204,5743,2)
(5723,2256,2)
(5614,6548,2)
(2454,7343,2)
(8593,3376,2)
(3338,6048,2)
(8176,6435,2)
(8836,5873,2)
(3675,5061,2)
(6473,926,2)
(512,3198,2)
(8845,644,2)
(3080,4337,2)
(7644,2975,2)
(2761,2069,2)
(3643,3638,2)
(5939,9003,2)
(8796,2420,2)
(7832,6524,2)
(3359,3376,2)
(5137,230,2)
(7040,4070,2)
(4297,3871,2)
(1565,8566,2)
(7499,2399,2)
(9082,3381,2)
(2645,3647,2)
(4072,6669,2)
(3744,8566,2)
(6052,3376,2)
(6011,7410,2)
(2089,1407,2)
(1403,3231,2)
(245,3093,2)
(6423,6488,2)
(3231,8703,2)
(6672,8566,2)
(7070,4478,2)
(3299,2240,2)
(5583,6637,2)
(5179,3219,2)
(9113,1217,2)
(7191,6279,2)
(5148,2870,2)
(4047,2537,2)
(5270,5061,2)
(5065,8703,2)
(8395,8234,2)
(3818,780,2)
(6754,3920,2)
(7455,8566,2)
(4124,8564,2)
(8512,9150,2)
(127,5905,2)
(7433,4393,2)
(1193,7088,2)
(5635,3879,2)
(1566,181,2)
(4151,127,2)
(1289,3879,2)
(7145,7845,2)
(6147,5450,2)
(7958,2273,2)
(4524,7700,2)
(3437,2165,2)
(4163,5522,2)
(5577,3061,2)
(8025,8149,2)
(4757,2011,2)
(4941,3376,2)
(4784,8009,2)
(3241,2957,2)
(2011,5962,2)
(123,1011,2)
(752,4419,2)
(6133,2614,2)
(7719,2443,2)
(6798,700,2)
(3653,7821,2)
(2787,5037,2)
(1774,3222,2)
(7600,5789,2)
(4503,1819,2)
(9045,2375,2)
(2443,2577,2)
(4407,8566,2)
(8564,5570,2)
(4668,5061,2)
(1569,3005,2)
(5893,2736,2)
(3124,952,2)
(64,6900,2)
(5417,7894,2)
(3941,765,2)
(6263,3376,2)
(7305,2399,2)
(7846,1192,2)
(3134,6214,2)
(2929,3354,2)
(7834,4322,2)
(987,2569,2)
(6570,5937,2)
(4233,1499,2)
(8143,1193,2)
(7028,795,2)
(1702,8697,2)
(5476,3374,2)
(71,6669,2)
(1594,4629,2)
(3273,5962,2)
(6464,2614,2)
(1808,14,2)
(1613,2496,2)
(7540,7426,2)
(5480,81,2)
(3692,2033,2)
(8577,3711,2)
(1924,8244,2)
(5303,7480,2)
(166,4057,2)
(4869,258,2)
(2633,5061,2)
(6948,3879,2)
(8532,8281,2)
(89,7587,2)
(6859,7894,2)
(98,107,2)
(1500,4393,2)
(8713,5061,2)
(585,5937,2)
(426,3376,2)
(2783,7942,2)
(7510,6647,2)
(5186,7819,2)
(2858,7113,2)
(2461,4134,2)
(6359,4889,2)
(6654,5741,2)
(711,3806,2)
(5649,9150,2)
(1850,4070,2)
(6218,7700,2)
(864,8601,2)
(7780,7135,2)
(4697,30,2)
(2336,1876,2)
(6967,5061,2)
(8930,3381,2)
(3053,8566,2)
(1057,3879,2)
(5347,5610,2)
(1458,65,2)
(4743,5061,2)
(6755,3879,2)
(2829,6012,2)
(5977,8348,2)
(2496,8564,2)
(713,2534,2)
(4161,3354,2)
(7416,2069,2)
(3437,7962,2)
(1310,5981,2)
(4819,2614,2)
(2862,7088,2)
(5322,302,2)
(2156,3333,2)
(6169,6069,2)
(4685,7158,2)
(466,2577,2)
(5276,8701,2)
(6113,8566,2)
(6426,6033,2)
(547,7283,2)
(433,7727,2)
(3571,63,2)
(6995,7053,2)
(7300,546,2)
(208,7462,2)
(7850,1714,2)
(939,550,2)
(5,3376,2)
(5803,7069,2)
(5584,6049,2)
(1470,1529,2)
(317,2278,2)
(2021,9150,2)
(8828,3376,2)
(7644,5599,2)
(5876,8321,2)
(4471,4739,2)
(1956,7119,2)
(5381,8566,2)
(8293,3908,2)
(2076,1829,2)
(5945,1852,2)
(8706,7358,2)
(3144,8564,2)
(6332,4011,2)
(3486,2614,2)
(3298,401,2)
(4095,5061,2)
(7091,2069,2)
(3934,3376,2)
(909,4572,2)
(316,2975,2)
(3035,974,2)
(2106,5061,2)
(2584,8292,2)
(6403,5431,2)
(2566,1066,2)
(7214,1246,2)
(6776,2938,2)
(4533,3035,2)
(5576,3879,2)
(6305,3374,2)
(6732,6793,2)
(8287,8009,2)
(1566,8566,2)
(1386,6269,2)
(1997,8004,2)
(3126,2443,2)
(9011,468,2)
(4836,8566,2)
(1794,5212,2)
(2527,2245,2)
(2119,6669,2)
(2042,127,2)
(8758,65,2)
(531,1891,2)
(8657,9001,2)
(5200,6113,2)
(5750,715,2)
(7299,3611,2)
(6555,5061,2)
(206,3963,2)
(5271,5222,2)
(65,8564,2)
(1852,4123,2)
(6512,837,2)
(9061,8596,2)
(185,5107,2)
(1513,6528,2)
(3220,2938,2)
(776,3879,2)
(8444,3148,2)
(6620,5937,2)
(6918,8680,2)
(5364,3376,2)
(8309,2005,2)
(4285,8566,2)
(8426,4302,2)
(7141,3381,2)
(8327,3516,2)
(3911,1788,2)
(2423,6817,2)
(6136,5129,2)
(5692,7725,2)
(8611,8396,2)
(467,3879,2)
(1408,5363,2)
(1222,1064,2)
(4299,1263,2)
(7487,7663,2)
(7278,4481,2)
(8767,177,2)
(4473,4952,2)
(4636,8292,2)
(6991,5741,2)
(4796,8601,2)
(1492,6524,2)
(6970,3877,2)
(6204,6682,2)
(357,2605,2)
(897,3381,2)
(1338,790,2)
(132,1785,2)
(361,1686,2)
(7094,2028,2)
(8293,8924,2)
(8414,1670,2)
(6741,3376,2)
(5217,2938,2)
(2767,6695,2)
(3798,2245,2)
(970,2069,2)
(7048,8566,2)
(4604,795,2)
(2442,9150,2)
(5224,7053,2)
(8040,2906,2)
(4874,1039,2)
(6835,5220,2)
(1022,6092,2)
(6636,3148,2)
(7094,3078,2)
(8278,7343,2)
(3834,4623,2)
(5899,2908,2)
(6794,2938,2)
(1722,2908,2)
(3843,1829,2)
(9111,4299,2)
(5148,8980,2)
(114,4902,2)
(4854,8566,2)
(5301,2938,2)
(5275,3376,2)
(5565,3963,2)
(7979,8913,2)
(2973,2028,2)
(1681,5165,2)
(2519,4501,2)
(6063,3376,2)
(262,1686,2)
(1679,5061,2)
(2165,5441,2)
(3159,6730,2)
(249,7343,2)
(2860,4001,2)
(2169,6621,2)
(3626,5061,2)
(9150,2056,2)
(2645,4798,2)
(1509,2048,2)
(607,6817,2)
(7321,1479,2)
(9104,1552,2)
(8731,1133,2)
(7754,1651,2)
(2588,5110,2)
(2535,1079,2)
(6419,6669,2)
(5731,8566,2)
(1470,6046,2)
(8990,1762,2)
(7692,3376,2)
(2341,216,2)
(6731,3376,2)
(7793,8566,2)
(5624,2241,2)
(3535,3206,2)
(2584,7425,2)
(6609,8566,2)
(2645,4304,2)
(5452,2303,2)
(6260,2973,2)
(1602,5927,2)
(8426,4184,2)
(5380,3841,2)
(8801,3381,2)
(3037,1497,2)
(5495,3376,2)
(5352,7029,2)
(8124,7649,2)
(57,8030,2)
(5574,8874,2)
(1665,8566,2)
(9004,8447,2)
(3808,5429,2)
(1378,8566,2)
(5148,1870,2)
(1063,8945,2)
(868,6388,2)
(7778,230,2)
(5799,795,2)
(3125,8566,2)
(7320,1237,2)
(6016,3376,2)
(5880,5522,2)
(4886,2614,2)
(5334,3879,2)
(2810,6221,2)
(2352,2577,2)
(2542,5789,2)
(4407,3376,2)
(2267,2577,2)
(5320,4299,2)
(4278,4501,2)
(1161,8841,2)
(7924,6033,2)
(1667,1237,2)
(1696,8865,2)
(6882,7046,2)
(1178,8601,2)
(3419,7246,2)
(4517,5570,2)
(722,127,2)
(6345,8566,2)
(1614,1527,2)
(7837,65,2)
(7747,2005,2)
(8857,5061,2)
(4529,14,2)
(5247,5231,2)
(2066,2497,2)
(188,2938,2)
(4208,2005,2)
(7571,4070,2)
(5041,7283,2)
(3008,7920,2)
(8829,4499,2)
(4395,2614,2)
(5718,3513,2)
(674,3354,2)
(3936,2344,2)
(2197,1246,2)
(8752,5061,2)
(256,1866,2)
(8336,3381,2)
(8121,6931,2)
(6738,6669,2)
(6064,7821,2)
(7974,65,2)
(6971,8924,2)
(5810,1974,2)
(6294,4347,2)
(2176,8566,2)
(8362,7821,2)
(1143,236,2)
(8111,3692,2)
(5035,3376,2)
(1809,3376,2)
(940,3590,2)
(5706,7343,2)
(475,7410,2)
(7049,3376,2)
(3279,6932,2)
(8450,8566,2)
(2171,3376,2)
(7644,2768,2)
(5854,5129,2)
(8440,3879,2)
(227,5567,2)
(874,3376,2)
(6279,5839,2)
(8225,2938,2)
(1559,3588,2)
(802,4656,2)
(5161,795,2)
(165,3231,2)
(7836,5061,2)
(312,8566,2)
(5335,5450,2)
(179,2614,2)
(6291,4299,2)
(6818,837,2)
(9104,2485,2)
(517,230,2)
(1948,7025,2)
(6763,7343,2)
(6479,5624,2)
(2142,5818,2)
(3399,14,2)
(4478,3333,2)
(1160,1855,2)
(9066,5846,2)
(8138,5061,2)
(6566,6340,2)
(7646,6669,2)
(2527,6923,2)
(4987,8107,2)
(6917,5165,2)
(2213,4217,2)
(1814,7283,2)
(790,3441,2)
(6015,3376,2)
(1122,5403,2)
(3534,5403,2)
(6727,8157,2)
(8638,5937,2)
(1022,930,2)
(4729,5061,2)
(6097,3354,2)
(5105,1866,2)
(5699,6742,2)
(6415,8601,2)
(3306,4181,2)
(7838,9003,2)
(8672,2048,2)
(7723,8244,2)
(9060,3505,2)
(4455,5441,2)
(2573,7819,2)
(1479,765,2)
(7836,8566,2)
(3274,4331,2)
(6186,7283,2)
(9104,4642,2)
(5141,525,2)
(8254,3376,2)
(3272,795,2)
(4416,4808,2)
(7082,230,2)
(7039,5058,2)
(899,4070,2)
(5985,5061,2)
(4001,7974,2)
(8153,8928,2)
(8863,3544,2)
(6094,3005,2)
(5651,7088,2)
(5835,2481,2)
(291,4354,2)
(5895,9003,2)
(7278,8566,2)
(3592,7046,2)
(770,5441,2)
(466,1965,2)
(3867,1876,2)
(2827,2399,2)
(2712,851,2)
(1272,6214,2)
(4970,6897,2)
(6438,5128,2)
(5818,5061,2)
(5834,4817,2)
(2814,8566,2)
(1612,806,2)
(6544,1402,2)
(6471,7088,2)
(4393,2028,2)
(8501,5905,2)
(6946,249,2)
(4391,3879,2)
(918,8566,2)
(5148,4864,2)
(5870,8601,2)
(5148,1071,2)
(5088,3038,2)
(6359,1757,2)
(7430,5061,2)
(8455,5061,2)
(3425,5591,2)
(1466,1775,2)
-----------------------------------
(0,(f.subclass.integer != IAX_COMMAND_TXCNT)
(1,ies)
(2,AST_FRAME_IAX)
(3,fr)
(4,fr->ts)
(5,break;)
(6,ied1)
(7,fr->callno)
(8,res)
(9,if (variablestore && varlist)
(10,)
(11,iaxs[fr->callno])
(12,iaxs[fr->callno])
(13,f.mallocd)
(14,iaxs[fr->callno]->bridgecallno)
(15,sizeof(sin)
(16,tmp3)
(17,iaxs[fr->callno])
(18,callno)
(19,IAX_IE_CAUSECODE)
(20,fr->callno)
(21,f)
(22,f)
(23,callno)
(24,iaxs[fr->callno])
(25,"reqonly")
(26,f)
(27,empty)
(28,callno)
(29,ast_channel_unlock(iaxs[fr->callno]->owner)
(30,iaxs[fr->callno])
(31,cid_name)
(32,cid_num)
(33,variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
(34,ies)
(35,ies.vars)
(36,)
(37,bridged_chan)
(38,0)
(39,iaxs[fr->callno])
(40,"Rejected connect attempt.  No secret present while force encrypt enabled.\\n")
(41,fh->type)
(42,ast_channel_caller(iaxs[fr->callno]->owner)
(43,fr)
(44,format)
(45,iaxs[iaxs[fr->callno]->bridgecallno]->owner)
(46,fr)
(47,iaxs[fr->callno])
(48,fr)
(49,(f.frametype != AST_FRAME_IAX)
(50,ast_channel_caller(iaxs[fr->callno]->owner)
(51,callno)
(52,fr)
(53,newvar)
(54,fr)
(55,prev)
(56,integer)
(57,callno)
(58,IAX_CODEC_USER_FIRST)
(59,~IAX_FLAG_FULL)
(60,iaxs[fr->callno]->peercapability)
(61,fr->callno)
(62,ts - fr->ts)
(63,iaxs[fr->callno]->last < fr->ts &&\n\\n                            f.subclass.integer != IAX_COMMAND_ACK &&\n\\n                            f.subclass.integer != IAX_COMMAND_PONG &&\n\\n                            f.subclass.integer != IAX_COMMAND_LAGRP)
(64,peer->lastms)
(65,f.subclass.integer = 0)
(66,iaxs[fr->callno])
(67,subclass)
(68,using_prefs)
(69,ied0)
(70,iaxs[fr->callno])
(71,iaxsl)
(72,ast_debug(1, "I can haz IAX vars?\\n")
(73,cur)
(74,iaxs)
(75,f.subclass)
(76,fr)
(77,subclass)
(78,outoforder)
(79,iaxs[fr->callno]->iseqno)
(80,S_COR(connected.id.name.valid, connected.id.name.str, "")
(81,-1)
(82,iaxs[fr->callno]->owner)
(83,callno)
(84,fr)
(85,iaxs)
(86,IAX_CODEC_NOPREFS)
(87,LOG_ERROR)
(88,caller_pref_buf)
(89,f)
(90,vars)
(91,-1)
(92,fr->callno)
(93,AST_CONTROL_PROGRESS)
(94,ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
(95,var->next)
(96,callno)
(97,iaxs[fr->callno]->capability)
(98,iaxs[fr->callno]->transferring)
(99,NULL)
(100,callno)
(101,IAX_FORCE_ENCRYPT)
(102,datalen)
(103,peer->historicms <= peer->maxms)
(104,ies)
(105,iaxs[fr->callno]->iseqno)
(106,if (ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
(107,iaxs[fr->callno])
(108,)
(109,tmp2)
(110,fr)
(111,iaxs[fr->callno])
(112,auth_fail(fr->callno, IAX_COMMAND_REJECT)
(113,iaxs[fr->callno])
(114,vh)
(115,1)
(116,fr)
(117,strcpy(caller_pref_buf,"disabled")
(118,f.subclass)
(119,iaxs[fr->callno])
(120,f.subclass)
(121,f)
(122,send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied0.buf, ied0.pos, -1)
(123,callno)
(124,iaxs[fr->callno]->pingtime + peer->historicms)
(125,"IAX2/%s")
(126,)
(127,peer = iaxs[fr->callno]->peerpoke)
(128,AST_CAUSE_CONGESTION)
(129,callno)
(130,(iaxs[fr->callno]->pingtime + peer->historicms)
(131,subclass)
(132,fr)
(133,"Packet arrived out of order (expecting %d, got %d)
(134,callno)
(135,ast_channel_unlock(iaxs[fr->callno]->owner)
(136,callno)
(137,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, who was trying to reach \'%s@%s\'\\n", ast_inet_ntoa(sin.sin_addr)
(138,fr->callno)
(139,)
(140,callno)
(141,vars)
(142,capability)
(143,iaxs)
(144,iax2_getformatname_multiple(tmp2, sizeof(tmp2)
(145,f.frametype)
(146,"IAX2 %s(%d)
(147,ntohs(vh->ts)
(148,videoformat)
(149,iaxs)
(150,fr->callno)
(151,subclass)
(152,fr->callno)
(153,!iaxs[fr->callno])
(154,f.datalen)
(155,iax2_queue_control_data(fr->callno, AST_CONTROL_UNHOLD, NULL, 0)
(156,empty[32]="")
(157,1)
(158,if (iaxs[fr->callno]->bridgecallno)
(159,1)
(160,pingtime)
(161,ied0.buf)
(162,strlen(moh_suggest)
(163,fr)
(164,fr->callno)
(165,fr->ts)
(166,ast_channel_name(bridged_chan)
(167,iaxsl[fr->callno])
(168,callno)
(169,fr->callno)
(170,"Registration of \'%s\' rejected: \'%s\' from: \'%s\'\\n")
(171,empty)
(172,fr)
(173,"LAGRQ")
(174,callno)
(175,rprefs)
(176,iaxs)
(177,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
(178,ies)
(179,1)
(180,transferring)
(181,fr->callno > 0)
(182,f.subclass)
(183,subclass)
(184,f.subclass.integer)
(185,iaxs[fr->callno]->owner)
(186,fr)
(187,1)
(188,iaxs[fr->callno]->rprefs)
(189,f)
(190,fr)
(191,fr)
(192,iseqno)
(193,variablestore->inheritance = DATASTORE_INHERIT_FOREVER)
(194,3)
(195,)
(196,subclass)
(197,ies.called_number)
(198,"Cancelling transmission of packet %d\\n")
(199,callno)
(200,&iaxs[fr->callno]->addr)
(201,callno)
(202,frametype)
(203,owner)
(204,iaxs)
(205,fr->callno)
(206,iaxs[fr->callno])
(207,f)
(208,callno)
(209,sin)
(210,if (ies.codec_prefs)
(211,peer)
(212,ast_strdupa(iaxs[fr->callno]->exten)
(213,iaxs[fr->callno]->capability)
(214,var)
(215,callno)
(216,f.datalen)
(217,iaxs[fr->callno])
(218,AST_FRAME_IAX)
(219,f.subclass.integer != IAX_COMMAND_ACK)
(220,iaxs[fr->callno]->last)
(221,iaxs[fr->callno]->state)
(222,iaxs[fr->callno])
(223,integer)
(224,iaxs[fr->callno])
(225,case IAX_COMMAND_TXREL:)
(226,transfer)
(227,&pref)
(228,iaxs[fr->callno]->owner)
(229,fr)
(230,authdebug)
(231,&iaxs[fr->callno]->rprefs)
(232,tmp1)
(233,ast_mutex_unlock(&iaxsl[fr->callno])
(234,iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY)
(235,maxms)
(236,iaxs[fr->callno]->iseqno != fr->oseqno)
(237,f.offset = 0)
(238,fr->callno)
(239,iax2_vnak(fr->callno)
(240,f.subclass)
(241,data_size)
(242,0)
(243,peer->historicms = (iaxs[fr->callno]->pingtime + peer->historicms)
(244,iaxs[fr->callno])
(245,fr)
(246,if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
(247,callno)
(248,fr)
(249,&pref)
(250,iaxs)
(251,f.frametype == AST_FRAME_IAX)
(252,callno)
(253,ies.provverpres)
(254,iaxs[fr->callno])
(255,iaxs[fr->callno]->addr)
(256,return 1;)
(257,fr->callno)
(258,f.subclass.integer = uncompress_subclass(fh->csub)
(259,"disabled")
(260,check_provisioning(&sin, fd, ies.serviceident, ies.provver)
(261,case IAX_COMMAND_LAGRQ:)
(262,ast_channel_name(owner)
(263,)
(264,fr->callno)
(265,fr)
(266,minivid = 1)
(267,iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno)
(268,iaxs)
(269,pref)
(270,callno)
(271,NULL)
(272,ast_channel_unlock(c)
(273,LOG_WARNING)
(274,subclass)
(275,if (f.datalen)
(276,f.subclass.integer == IAX_COMMAND_REGREL)
(277,iaxs)
(278,fr)
(279,IAX_IE_CAUSE)
(280,iaxsl[fr->callno])
(281,iaxs[fr->callno])
(282,IAX_COMMAND_PONG)
(283,iaxs)
(284,&sin)
(285,fr)
(286,callno)
(287,IAX_IE_CAUSE)
(288,callno)
(289,ast_clear_flag64(iaxs[fr->callno], IAX_QUELCH)
(290,0)
(291,&iaxs[fr->callno]->state)
(292,if (authdebug)
(293,&ies)
(294,iaxs[fr->callno]->transferring)
(295,NEW_PREVENT)
(296,f.subclass)
(297,iaxs[fr->callno]->peerformat = iaxs[fr->callno]->capability)
(298,NULL)
(299,iaxs[fr->callno]->oseqno)
(300,iaxs[fr->callno]->transferring)
(301,variablestore)
(302,f.frametype == AST_FRAME_IAX)
(303,iaxs[fr->callno]->peercapability)
(304,iaxs)
(305,iaxs)
(306,fr)
(307,entries)
(308,fr)
(309,fr->callno)
(310,sizeof(tmp1)
(311,fr)
(312,fr->callno)
(313,var)
(314,LOG_NOTICE)
(315,res < sizeof(*mh)
(316,iaxsl)
(317,iaxs[fr->callno])
(318,fh)
(319,iaxs)
(320,set_hangup_source_and_cause(fr->callno, ies.causecode)
(321,f.subclass)
(322,IAX_COMMAND_TXACC)
(323,fr)
(324,callno)
(325,f.subclass.integer)
(326,case IAX_COMMAND_TRANSFER:)
(327,iaxs)
(328,f.subclass)
(329,host_pref_buf)
(330,1)
(331,minivid = 0)
(332,pokefreqok)
(333,0)
(334,ast_mutex_unlock(&iaxsl[fr->callno])
(335,iaxs[fr->callno]->capability)
(336,owner)
(337,(f.subclass.integer != IAX_COMMAND_UNQUELCH )
(338,)
(339,iaxs[fr->callno])
(340,pref = iaxs[fr->callno]->prefs)
(341,0)
(342,)
(343,fr->callno)
(344,&f.subclass.format)
(345,if (!fr->callno)
(346,sin)
(347,res)
(348,&ied0)
(349,iax_frame_subclass2str(fh->csub, subclass, sizeof(subclass)
(350,res < thread->buf_size)
(351,fr->callno)
(352,iax_park(bridged_chan, owner, ies.called_number, context)
(353,ied0)
(354,IAX_COMMAND_ACK)
(355,)
(356,iaxs[iaxs[fr->callno]->bridgecallno]->transferring)
(357,(f.subclass.integer != IAX_COMMAND_UNQUELCH )
(358,fr)
(359,iaxs)
(360,f)
(361,owner)
(362,iseqno)
(363,subclass)
(364,iaxs[fr->callno]->peerpoke)
(365,vars)
(366,f)
(367,fr->ts + test_resync)
(368,iaxs[fr->callno]->capability)
(369,ies.vars)
(370,meta)
(371,f.frametype)
(372,fr)
(373,historicms)
(374,lastms)
(375,videoformat)
(376,ies)
(377,iaxs[fr->callno]->owner)
(378,vars)
(379,decrypted)
(380,newvar)
(381,callno)
(382,IAX_COMMAND_TXACC)
(383,1)
(384,&f.subclass.format)
(385,f.subclass)
(386,owner)
(387,if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr)
(388,callno)
(389,callno)
(390,iax2_getformatname_multiple(tmp3, sizeof(tmp3)
(391,f)
(392,owner)
(393,&iaxsl[fr->callno])
(394,fr->iseqno)
(395,mh)
(396,x)
(397,type)
(398,iaxs[fr->callno])
(399,ies)
(400,&tmpfmt)
(401,decrypt_frame(fr->callno, fh, &f, &res)
(402,if (ies.causecode > 99)
(403,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(404,fr)
(405,"Peer did not understand our iax command \'%d\'\\n")
(406,fr->callno)
(407,IAX_COMMAND_NEW)
(408,if (fr->callno > 0)
(409,"Rejected connect attempt from %s, request \'%s@%s\' does not exist\\n")
(410,callno)
(411,IAX_STATE_STARTED)
(412,sin)
(413,memset(&ied0, 0, sizeof(ied0)
(414,tmp3)
(415,&ies)
(416,fr->callno)
(417,callno)
(418,thread)
(419,IAX_COMMAND_TXREL)
(420,datalen)
(421,sizeof(*cause_code)
(422,iaxsl)
(423,peer)
(424,iaxs[fr->callno])
(425,iaxs[fr->callno]->rseqno)
(426,break;)
(427,owner)
(428,callno)
(429,ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
(430,iaxs)
(431,ies.vars)
(432,0)
(433,format)
(434,fr->callno)
(435,1)
(436,ts)
(437,calltokendata)
(438,f.subclass)
(439,f.data.ptr = thread->buf + sizeof(struct ast_iax2_full_hdr)
(440,NULL)
(441,iaxs)
(442,callno)
(443,LOG_ERROR)
(444,if (authdebug)
(445,break;)
(446,iaxs[fr->callno]->pingtime)
(447,iaxs[fr->callno])
(448,fr->callno)
(449,varlist)
(450,fr)
(451,subclass)
(452,called_number)
(453,ts)
(454,fr->iseqno)
(455,)
(456,)
(457,callno)
(458,iaxs)
(459,iaxs[fr->callno])
(460,*cause_code)
(461,musiconhold)
(462,&iaxs[fr->callno]->dcx)
(463,devicetype)
(464,fr)
(465,iaxs)
(466,(f.frametype == AST_FRAME_VOICE)
(467,fr)
(468,iaxs[fr->callno])
(469,1)
(470,f.offset = 0)
(471,if (var)
(472,iaxs)
(473,varlist)
(474,iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(475,iaxs)
(476,fr)
(477,pref)
(478,callno)
(479,inkeys)
(480,fr)
(481,sin)
(482,if (strcasecmp(iaxs[fr->callno]->exten, "TBD")
(483,callno)
(484,fr->callno)
(485,iaxs)
(486,iaxs[fr->callno])
(487,iaxs[fr->callno])
(488,context = ast_strdupa(iaxs[fr->callno]->context)
(489,f.subclass)
(490,fr)
(491,if (!format)
(492,iaxs)
(493,bridgecallno)
(494,iaxs[fr->callno]->peercapability)
(495,ied1.buf)
(496,iaxs[fr->callno])
(497,connected)
(498,0)
(499,fr)
(500,f.subclass)
(501,iaxs)
(502,iaxs[fr->callno])
(503,0)
(504,NULL)
(505,pingtime)
(506,0)
(507,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested \'%s\' incompatible with our capability \'%s\'.\\n", ast_inet_ntoa(sin.sin_addr)
(508,callno)
(509,"IAX subclass %d received\\n")
(510,if (ies.vars)
(511,peer)
(512,AST_FRAME_IAX)
(513,fr)
(514,iaxs)
(515,exten)
(516,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(517,iaxs)
(518,fr->iseqno)
(519,owner)
(520,initid)
(521,sizeof(struct ast_iax2_full_hdr)
(522,callno)
(523,return 1;)
(524,)
(525,peer->historicms = (0 + peer->historicms)
(526,vars)
(527,ied0.pos)
(528,"disabled")
(529,IAX_STATE_TBD)
(530,frame_queue)
(531,f.subclass.integer)
(532,NULL)
(533,iaxs[fr->callno]->bridgecallno)
(534,iaxs)
(535,if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW)
(536,iaxs[fr->callno])
(537,iaxs[fr->callno]->transferring)
(538,cause)
(539,f.data)
(540,iaxs[fr->callno])
(541,prev)
(542,iaxs)
(543,connected.id)
(544,iaxs[fr->callno])
(545,callno)
(546,ies.vars)
(547,callno)
(548,ies)
(549,presentation)
(550,iaxs[fr->callno])
(551,fr)
(552,fr->callno)
(553,if (!iaxs[fr->callno] || !iaxs[fr->callno]->owner)
(554,ast_bridged_channel(iaxs[fr->callno]->owner)
(555,tmp1)
(556,var && var->next)
(557,iaxs)
(558,iaxs)
(559,state)
(560,peer->maxms)
(561,secret)
(562,if (iaxs[fr->callno] && iaxs[fr->callno]->last < fr->ts)
(563,AST_FRAME_IAX)
(564,iaxs)
(565,-1)
(566,0)
(567,fr->callno)
(568,capability)
(569,vars)
(570,authdebug)
(571,IAX_IE_CALLNO)
(572,callno)
(573,bridgecallno)
(574,iseqno)
(575,ies)
(576,iaxs[fr->callno])
(577,break;)
(578,)
(579,if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
(580,0)
(581,fr)
(582,)
(583,f)
(584,cur)
(585,fr->callno)
(586,f.subclass)
(587,1)
(588,f.subclass.integer)
(589,"Destroying call %d\\n")
(590,iaxs)
(591,integer)
(592,iaxs[iaxs[fr->callno]->bridgecallno])
(593,iaxs[fr->callno]->cid_num)
(594,connected.id)
(595,fr->callno)
(596,ied0.buf)
(597,f.subclass.integer)
(598,callno)
(599,f.frametype == AST_FRAME_IAX)
(600,&pref)
(601,callno)
(602,iaxs[fr->callno])
(603,transferring)
(604,)
(605,0)
(606,)
(607,sizeof(tmp3)
(608,if (iaxcompat)
(609,callno)
(610,1)
(611,0x8000)
(612,x)
(613,ast_log(LOG_WARNING, \n\\n\\t\\t\\t\\t\\t\\t"I don\'t know how to authenticate %s to %s\\n", \n\\n\\t\\t\\t\\t\\t\\ties.username ? ies.username : "<unknown>", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
(614,fr)
(615,iaxs)
(616,f.subclass.integer)
(617,1)
(618,fr->callno)
(619,fr->callno)
(620,fr)
(621,iaxs[fr->callno]->capability)
(622,fr->callno)
(623,cur)
(624,if (strcmp(iaxs[fr->callno]->exten, "TBD")
(625,case IAX_COMMAND_TXACC:)
(626,)
(627,if (cur->transfer)
(628,cause_code)
(629,callno)
(630,fr)
(631,variablestore && varlist)
(632,iaxs[fr->callno]->peerformat)
(633,fr->callno)
(634,ied0)
(635,fr->callno)
(636,callno)
(637,IAX_IE_CAUSE)
(638,iaxs)
(639,iaxs)
(640,res)
(641,sin.sin_addr)
(642,fr)
(643,((f.subclass.integer != IAX_COMMAND_ACK)
(644,iaxs[fr->callno]->owner)
(645,1)
(646,)
(647,-1)
(648,connected)
(649,peer)
(650,fh)
(651,tmp1)
(652,fr)
(653,iaxsl[fr->callno])
(654,ast_channel_uniqueid(iaxs[fr->callno]->owner)
(655,variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
(656,connected.id)
(657,(f.subclass.integer != IAX_COMMAND_TXCNT)
(658,raw_hangup(&sin, ntohs(fh->dcallno)
(659,last)
(660,0)
(661,res = iax_firmware_append(&ied0, (unsigned char *)
(662,buf)
(663,)
(664,TRANSFER_RELEASED)
(665,sin.sin_addr)
(666,iofd)
(667,)
(668,~IAX_FLAG_FULL)
(669,break;)
(670,for (var = ies.vars; var; var = var->next)
(671,f.subclass.integer)
(672,f.subclass.format)
(673,fr)
(674,iaxs[fr->callno])
(675,using_prefs)
(676,ied0)
(677,callno)
(678,res)
(679,callno)
(680,moh_suggest)
(681,ast_channel_caller(iaxs[fr->callno]->owner)
(682,iaxs)
(683,ast_getformatname(&f.subclass.format)
(684,EVENT_FLAG_CALL)
(685,1)
(686,f)
(687,state)
(688,iax2_getformatname_multiple(tmp, sizeof(tmp)
(689,case IAX_COMMAND_INVAL:)
(690,fr->callno)
(691,fr->callno)
(692,name)
(693,state)
(694,0)
(695,iaxs)
(696,callno)
(697,f)
(698,ied0)
(699,0xFFFF8000L)
(700,decrypt_frame(fr->callno, fh, &f, &res)
(701,fr)
(702,iax_outputframe(NULL, fh, 3, &sin, res - sizeof(*fh)
(703,iaxs[fr->callno])
(704,iaxs[fr->callno]->rprefs)
(705,callno)
(706,integer)
(707,fr->callno)
(708,iaxs[fr->callno]->peerformat)
(709,iaxs[fr->callno]->videoformat)
(710,f.subclass)
(711,cause_code->chan_name)
(712,fr)
(713,f.subclass)
(714,IAX_COMMAND_TXMEDIA)
(715,iaxs[fr->callno])
(716,fr->callno)
(717,f.data.ptr = NULL)
(718,zeros)
(719,fr->callno)
(720,callno)
(721,iaxs[fr->callno]->iseqno++)
(722,peer->historicms)
(723,iaxs)
(724,&sin)
(725,iaxs[fr->callno]->last)
(726,serviceident)
(727,"TBD")
(728,inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(729,format)
(730,fr)
(731,dpcache)
(732,fr->callno)
(733,AST_STATE_RING)
(734,IAX_COMMAND_INVAL)
(735,moh_suggest)
(736,fh)
(737,ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)
(738,fr)
(739,0)
(740,newvar)
(741,iaxs)
(742,csub)
(743,callno)
(744,)
(745,callno)
(746,iaxs)
(747,AST_CAUSE_NO_ROUTE_DESTINATION)
(748,callno)
(749,fr)
(750,ied1)
(751,if (ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)
(752,fr->callno)
(753,IAX_STATE_STARTED)
(754,if (res < thread->buf_size)
(755,iaxs[fr->callno]->pingtime)
(756,format)
(757,res)
(758,format)
(759,if ((x != iaxs[fr->callno]->oseqno)
(760,iaxs[fr->callno]->dcx)
(761,callno)
(762,iax2_lock_owner(fr->callno)
(763,using_prefs)
(764,memset(&ies, 0, sizeof(ies)
(765,(peer->lastms < 0)
(766,"<Unknown>")
(767,0)
(768,&ied0)
(769,f.frametype)
(770,fh->type)
(771,buf)
(772,0)
(773,fr->callno)
(774,fr->callno)
(775,"Rejected connect attempt from %s, requested \'%s\' incompatible with our capability \'%s\'.\\n")
(776,iaxs)
(777,iaxsl)
(778,iax2_destroy(fr->callno)
(779,AST_FRAME_IAX)
(780,!iaxs[fr->callno])
(781,3)
(782,subclass)
(783,iaxs[fr->callno])
(784,callno)
(785,fr)
(786,iaxs[fr->callno]->last & 0xFFFF8000L)
(787,transferring)
(788,iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0)
(789,fr)
(790,iaxs[fr->callno])
(791,callno)
(792,fr->callno)
(793,f.mallocd = 0)
(794,format)
(795,strcmp(iaxs[fr->callno]->exten, "TBD")
(796,iaxs)
(797,fr)
(798,callno)
(799,if ((ntohs(mh->callno)
(800,iaxs[fr->callno]->iseqno)
(801,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested \'%s\' incompatible with our capability \'%s\'.\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(802,iax2_getformatname_multiple(tmp2, sizeof(tmp2)
(803,iaxs[fr->callno])
(804,ies)
(805,iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(806,res < sizeof(*fh)
(807,fr->callno)
(808,x = iaxs[fr->callno]->oseqno)
(809,)
(810,if (!iaxs[fr->callno])
(811,callno)
(812,iaxs[fr->callno])
(813,case IAX_COMMAND_REGACK:)
(814,callno)
(815,fr)
(816,callno)
(817,ast_log(LOG_WARNING, "Call on %s is already up, can\'t start on it\\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(818,bridgecallno)
(819,iaxs[iaxs[fr->callno]->bridgecallno])
(820,1)
(821,fr->callno)
(822,callno)
(823,ast_inet_ntoa(sin.sin_addr)
(824,fr->callno)
(825,iaxs)
(826,fr)
(827,callno)
(828,owner)
(829,f.subclass.integer)
(830,fr->callno)
(831,ies)
(832,1)
(833,case IAX_COMMAND_REGREQ:)
(834,(f.subclass.integer != IAX_COMMAND_INVAL)
(835,)
(836,&ied0)
(837,ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)
(838,var->next)
(839,fr)
(840,callno)
(841,challenge)
(842,*fr)
(843,iaxs[fr->callno]->peerformat)
(844,owner)
(845,AST_FRAME_IAX)
(846,"I have IAX variables, but they were not processed\\n")
(847,)
(848,ies)
(849,fr)
(850,)
(851,c = iaxs[fr->callno]->owner)
(852,fr->callno)
(853,2)
(854,"Packet Decrypt Failed!\\n")
(855,NULL)
(856,callno)
(857,fr->callno)
(858,peerformat)
(859,iaxs)
(860,iaxs[fr->callno])
(861,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(862,iaxs[fr->callno])
(863,tmp3)
(864,sin_addr)
(865,)
(866,callno)
(867,)
(868,fr->ts)
(869,IAX_STATE_TBD)
(870,fr)
(871,break;)
(872,iseqno)
(873,iaxs[fr->callno]->owner)
(874,fr)
(875,fr->callno)
(876,f.data.ptr)
(877,&pref)
(878,ied1)
(879,iaxsl)
(880,iaxs[fr->callno]->state)
(881,iaxs)
(882,fr)
(883,)
(884,fr)
(885,iaxs[fr->callno])
(886,callno)
(887,iseqno)
(888,case IAX_COMMAND_TXREQ:)
(889,var->value)
(890,ies.vars)
(891,fr->callno)
(892,iaxs)
(893,ies)
(894,0)
(895,fr->callno)
(896,callno)
(897,iaxs[fr->callno])
(898,break;)
(899,fr->af)
(900,fr)
(901,f.subclass.integer)
(902,fr->callno)
(903,if (iaxs[fr->callno]->transferring == TRANSFER_MREADY)
(904,format)
(905,var)
(906,iaxs[fr->callno])
(907,if (!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)
(908,iaxsl)
(909,iaxs[fr->callno])
(910,sin.sin_addr)
(911,integer)
(912,if ( (ntohs(fh->dcallno)
(913,causecode)
(914,thread)
(915,fr)
(916,iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_RELEASED)
(917,1)
(918,fr->callno)
(919,fr)
(920,subclass)
(921,"Unable to negotiate codec")
(922,ied0)
(923,1)
(924,fr)
(925,prefs)
(926,iaxs[fr->callno]->pingtime > peer->maxms)
(927,fr->callno)
(928,if (delayreject)
(929,callno)
(930,iaxs[fr->callno]->owner)
(931,fr)
(932,)
(933,!fr->callno)
(934,)
(935,if (ast_test_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)
(936,f)
(937,callno)
(938,iaxs)
(939,iaxs[fr->callno]->owner)
(940,fr->callno)
(941,&f.subclass.format)
(942,ies.vars)
(943,owner)
(944,\'\\0\')
(945,fr)
(946,format)
(947,frametype)
(948,iaxs)
(949,ied0)
(950,callno)
(951,iaxs[fr->callno])
(952,fr->callno)
(953,f.subclass.integer != IAX_COMMAND_PONG &&\n\\n                            f.subclass.integer != IAX_COMMAND_LAGRP)
(954,fr)
(955,ies.called_number)
(956,thread)
(957,1)
(958,fr->callno)
(959,fr->ts)
(960,fr->callno)
(961,callno)
(962,ied0)
(963,f)
(964,ast_debug(1, "Ooh, video format changed to %s\\n", ast_getformatname(&f.subclass.format)
(965,)
(966,iaxs[fr->callno])
(967,ied0.pos)
(968,iaxs[fr->callno]->reg)
(969,called_number)
(970,ast_channel_name(iaxs[fr->callno]->owner)
(971,"I can haz IAX vars, but they is no good :-(\\n")
(972,ast_channel_readformat(iaxs[fr->callno]->owner)
(973,thread)
(974,!iaxs[fr->callno])
(975,ast_test_flag64(iaxs[fr->callno], IAX_RECVCONNECTEDLINE)
(976,orignative)
(977,VERBOSE_PREFIX_4)
(978,ntohs(fh->scallno)
(979,fr->callno)
(980,fr->callno)
(981,case IAX_COMMAND_FWDOWNL:)
(982,f.subclass.integer != IAX_COMMAND_TXREL)
(983,tmpfmt)
(984,)
(985,format)
(986,fr->callno)
(987,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
(988,iseqno)
(989,check_dcallno)
(990,ies)
(991,iaxs[fr->callno])
(992,iaxs[fr->callno])
(993,f.subclass.integer)
(994,fr->callno)
(995,)
(996,csub)
(997,callno)
(998,fr->callno)
(999,f)
(1000,tmp)
(1001,res)
(1002,callno)
(1003,fr)
(1004,cid_num)
(1005,)
(1006,memset(&ied0, 0, sizeof(ied0)
(1007,IAX_STATE_STARTED)
(1008,peercapability)
(1009,&sin)
(1010,iaxs[fr->callno]->authmethods)
(1011,cur->final)
(1012,IAX_COMMAND_TXACC)
(1013,fr->ts)
(1014,1)
(1015,callno)
(1016,fr->callno)
(1017,capability)
(1018,IAX_COMMAND_TXCNT)
(1019,ies.serviceident && sin.sin_addr.s_addr)
(1020,iaxs[fr->callno])
(1021,)
(1022,0)
(1023,callno)
(1024,iaxs[iaxs[fr->callno]->bridgecallno])
(1025,iaxs[fr->callno]->capability)
(1026,IAX_COMMAND_REGREQ)
(1027,iaxs[fr->callno]->iseqno)
(1028,ast_bridged_channel(owner)
(1029,iaxs[fr->callno])
(1030,fr->ts)
(1031,ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)
(1032,fr)
(1033,AST_FRAME_IAX)
(1034,format)
(1035,iaxs[fr->callno]->cid_num)
(1036,callno)
(1037,iaxs)
(1038,&ied0)
(1039,format = 0)
(1040,0)
(1041,fr)
(1042,ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0)
(1043,IAX_IE_CAUSE)
(1044,ast_free(prev)
(1045,fr->callno)
(1046,send_signaling(iaxs[fr->callno])
(1047,&dpcache)
(1048,if (iaxs[fr->callno]->voiceformat > 0)
(1049,&ies)
(1050,fr->cacheable)
(1051,ast_debug(1, "Immediately destroying %d, having received reject\\n",\n\\n\\t\\t\\t\\t\\t\\tfr->callno)
(1052,4096)
(1053,ntohs(sin.sin_port)
(1054,if (ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)
(1055,sizeof(tmp2)
(1056,iaxs[fr->callno]->exten)
(1057,fr->callno)
(1058,ast_debug(1, "Received mini frame before first full voice frame\\n")
(1059,ies.vars = NULL)
(1060,fr)
(1061,0)
(1062,NULL)
(1063,owner)
(1064,f.frametype == AST_FRAME_IAX && (f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)
(1065,if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(1066,f.subclass.integer != IAX_COMMAND_ACK)
(1067,fr->ts)
(1068,fr->callno)
(1069,iaxs[fr->callno])
(1070,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(1071,fr->ts)
(1072,iaxs[fr->callno]->bridgecallno)
(1073,transfer)
(1074,codec_prefs)
(1075,&iaxsl[fr->callno])
(1076,&sin)
(1077,iaxs[fr->callno]->owner)
(1078,*prev = NULL)
(1079,&iaxsl[fr->callno])
(1080,fr->callno)
(1081,prev)
(1082,f.subclass.format.id)
(1083,sizeof(ies)
(1084,)
(1085,iaxs[fr->callno])
(1086,&ied0)
(1087,callno)
(1088,f.subclass)
(1089,fr)
(1090,fr)
(1091,)
(1092,ts)
(1093,delayreject)
(1094,1)
(1095,connected)
(1096,"Rejected connect attempt from %s, requested \'%s\' incompatible with our capability \'%s\'.\\n")
(1097,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(1098,iaxs)
(1099,fr)
(1100,f)
(1101,ast_channel_name(iaxs[fr->callno]->owner)
(1102,1)
(1103,var)
(1104,ast_mutex_unlock(&iaxsl[fr->callno])
(1105,fr)
(1106,fr->callno)
(1107,fr)
(1108,&ied0)
(1109,f)
(1110,!iaxs[fr->callno])
(1111,iaxs)
(1112,IAX_CODEC_NOPREFS)
(1113,fr)
(1114,iaxs[iaxs[fr->callno]->bridgecallno]->transferring)
(1115,iaxs[fr->callno])
(1116,owner)
(1117,)
(1118,1)
(1119,"")
(1120,callno)
(1121,sin_addr)
(1122,iaxs)
(1123,fr)
(1124,owner)
(1125,iaxs[fr->callno]->transferring == TRANSFER_BEGIN)
(1126,0xffff)
(1127,subclass)
(1128,pref = iaxs[fr->callno]->prefs)
(1129,iaxs)
(1130,fr->ts)
(1131,ts = calc_timestamp(iaxs[fr->callno], 0, &fr->af)
(1132,callno)
(1133,*varlist)
(1134,owner)
(1135,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(1136,iaxs)
(1137,fr)
(1138,(iaxs[fr->callno]->last & 0xFFFF8000L)
(1139,)
(1140,iaxs[fr->callno])
(1141,bridgecallno)
(1142,ast_inet_ntoa(sin.sin_addr)
(1143,fr)
(1144,iaxs)
(1145,iaxs)
(1146,pref = iaxs[fr->callno]->rprefs)
(1147,1)
(1148,iaxs[fr->callno]->iaxvars = ies.vars)
(1149,if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)
(1150,peer->maxms)
(1151,iaxs[fr->callno]->peercallno)
(1152,)
(1153,ast_channel_unref(owner)
(1154,(struct ast_iax2_full_hdr *)
(1155,aseqno)
(1156,ast_test_flag64(iaxs[fr->callno], IAX_FORCE_ENCRYPT)
(1157,lastms)
(1158,"Accepted unauthenticated TBD call from %s\\n")
(1159,tmp1)
(1160,memcpy(&sin, &thread->iosin, sizeof(sin)
(1161,IAX_IE_FORMAT2)
(1162,ied0)
(1163,0)
(1164,name)
(1165,&sin)
(1166,callno)
(1167,iaxs[fr->callno])
(1168,connected)
(1169,0)
(1170,context)
(1171,IAX_COMMAND_ACK)
(1172,0)
(1173,fh->csub == IAX_COMMAND_TXREJ)
(1174,fr)
(1175,iaxs)
(1176,fr->callno)
(1177,fh)
(1178,iaxs)
(1179,iaxs[fr->callno])
(1180,iaxs[fr->callno]->last & 0xFFFF0000L)
(1181,variablestore->inheritance)
(1182,fr)
(1183,fr)
(1184,fr->callno)
(1185,fr->callno)
(1186,goto immediatedial;)
(1187,fr->callno)
(1188,AST_FRAME_IAX)
(1189,)
(1190,callno)
(1191,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(1192,iaxs[fr->callno]->pingtime =  calc_timestamp(iaxs[fr->callno], 0, &f)
(1193,fr->callno)
(1194,frametype)
(1195,sin)
(1196,for (x=iaxs[fr->callno]->rseqno; x != fr->iseqno; x++)
(1197,if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
(1198,ast_verb(3, "Accepted AUTHENTICATED TBD call from %s\\n", ast_inet_ntoa(sin.sin_addr)
(1199,callno)
(1200,fr->ts)
(1201,fr->callno)
(1202,fr)
(1203,iaxs[fr->callno]->iseqno)
(1204,fr->callno)
(1205,fr->callno)
(1206,peercapability)
(1207,callno)
(1208,ies.called_number)
(1209,rprefs)
(1210,&iax2_variable_datastore_info)
(1211,x)
(1212,1)
(1213,IAX_IE_CAUSE)
(1214,callno)
(1215,4096)
(1216,0)
(1217,fr->iseqno)
(1218,exten)
(1219,fr->callno)
(1220,iaxs[fr->callno])
(1221,f)
(1222,fh)
(1223,thread)
(1224,fr->callno)
(1225,send_apathetic_reply(1, ntohs(fh->scallno)
(1226,c)
(1227,)
(1228,iaxs[fr->callno])
(1229,0)
(1230,cur->transfer)
(1231,state)
(1232,&iaxsl[fr->callno])
(1233,)
(1234,callno)
(1235,fr)
(1236,buf)
(1237,delayreject)
(1238,callno)
(1239,callno)
(1240,f.subclass)
(1241,fr->callno)
(1242,iaxs[fr->callno]->voiceformat)
(1243,thread->buf[res - 1] = \'\\0\')
(1244,iax2_getformatname_multiple(tmp2, sizeof(tmp2)
(1245,fr->callno)
(1246,ast_format_to_old_bitfield(&f.subclass.format)
(1247,fr)
(1248,fr)
(1249,ied1)
(1250,iaxs)
(1251,variablestore)
(1252,iaxs)
(1253,f)
(1254,fr->callno)
(1255,LOG_NOTICE)
(1256,smoothing)
(1257,pos)
(1258,state)
(1259,fr->callno)
(1260,if (f.frametype == AST_FRAME_CONTROL && f.subclass.integer == AST_CONTROL_CONNECTED_LINE)
(1261,fr)
(1262,iaxs[fr->callno])
(1263,minivid)
(1264,iaxs)
(1265,fh)
(1266,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(1267,new_peercallno)
(1268,if ((f.frametype == AST_FRAME_IAX)
(1269,callno)
(1270,)
(1271,iaxs[fr->callno]->owner)
(1272,(f.frametype != AST_FRAME_VOICE)
(1273,callno)
(1274,strcpy(caller_pref_buf,"disabled")
(1275,f.samples)
(1276,f)
(1277,ies.calltoken && ies.calltokendata)
(1278,f.frametype)
(1279,fr->callno)
(1280,iaxs[fr->callno]->owner)
(1281,ast_connected_line_parse_data(f.data.ptr, f.datalen, &connected)
(1282,fr->callno)
(1283,iaxs[fr->callno])
(1284,!format)
(1285,IAX_COMMAND_TXREADY)
(1286,0)
(1287,&f.subclass.format)
(1288,format)
(1289,owner)
(1290,~0x40)
(1291,ast_channel_caller(iaxs[fr->callno]->owner)
(1292,)
(1293,ies)
(1294,ied0)
(1295,callno)
(1296,fr)
(1297,iaxdebug)
(1298,fr)
(1299,iseqno)
(1300,iaxs)
(1301,)
(1302,iaxs[fr->callno])
(1303,callno)
(1304,sizeof(tmp1)
(1305,fr)
(1306,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(1307,fr->callno)
(1308,ast_log(LOG_NOTICE, "Rejected dial attempt from %s, request \'%s@%s\' does not exist\\n", ast_inet_ntoa(sin.sin_addr)
(1309,fr->callno)
(1310,iaxsl[call_to_destroy])
(1311,owner)
(1312,connected.id.name.str)
(1313,callno)
(1314,iaxs[fr->callno])
(1315,fr->af)
(1316,iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner)
(1317,fr->callno)
(1318,peer)
(1319,subclass)
(1320,f.data)
(1321,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(1322,iaxs)
(1323,ast_channel_unlock(owner)
(1324,iaxs[fr->callno])
(1325,)
(1326,callno)
(1327,send_apathetic_reply(1, ntohs(fh->scallno)
(1328,break;)
(1329,f)
(1330,)
(1331,sizeof(tmp)
(1332,fr)
(1333,"Hold")
(1334,&iaxsl[fr->callno])
(1335,fr->callno)
(1336,thread->buf_size)
(1337,)
(1338,iaxs[fr->callno]->owner)
(1339,iaxs)
(1340,provver)
(1341,iaxs[fr->callno]->iseqno ||\n\\n\\t\\t\\t\\t((f.subclass.integer != IAX_COMMAND_TXCNT)
(1342,frametype)
(1343,f.subclass.integer != IAX_COMMAND_ACK &&\n\\n                            f.subclass.integer != IAX_COMMAND_PONG &&\n\\n                            f.subclass.integer != IAX_COMMAND_LAGRP)
(1344,callno)
(1345,AST_FRAME_IAX)
(1346,iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
(1347,callno)
(1348,f)
(1349,)
(1350,iaxs)
(1351,ies)
(1352,iaxs)
(1353,fr)
(1354,ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\\n")
(1355,iaxs)
(1356,frame_queue[fr->callno])
(1357,iaxs[fr->callno]->secret)
(1358,callno)
(1359,-1)
(1360,fr)
(1361,f.frametype)
(1362,iaxs[fr->callno])
(1363,iaxs)
(1364,fr)
(1365,f.subclass.integer != IAX_COMMAND_ACK)
(1366,fr)
(1367,fr)
(1368,&sin)
(1369,sin.sin_addr)
(1370,fr->callno)
(1371,data)
(1372,variablestore)
(1373,fr->callno)
(1374,f.subclass.integer == AST_CONTROL_CONGESTION)
(1375,ies.challenge)
(1376,iaxs)
(1377,iseqno)
(1378,fr->callno)
(1379,)
(1380,ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
(1381,VERBOSE_PREFIX_4)
(1382,ies)
(1383,fr)
(1384,peerformat)
(1385,secret)
(1386,iaxs[fr->callno]->last < fr->ts)
(1387,&f.subclass.format)
(1388,fr->callno)
(1389,"disabled")
(1390,iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1)
(1391,1)
(1392,iaxs[fr->callno]->peerformat)
(1393,fr)
(1394,ies.vars)
(1395,var)
(1396,ies)
(1397,format)
(1398,owner)
(1399,owner)
(1400,mh->callno)
(1401,peer_ref(peer)
(1402,!inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(1403,fr->ts)
(1404,iaxs)
(1405,)
(1406,0)
(1407,iaxs[fr->callno]->capability)
(1408,AST_FRAME_IAX)
(1409,native)
(1410,owner)
(1411,f.subclass)
(1412,var = var->next)
(1413,iaxs[fr->callno]->first_iax_message)
(1414,name)
(1415,ied0.buf)
(1416,fr)
(1417,fr->callno)
(1418,LOG_WARNING)
(1419,iaxs[fr->callno])
(1420,iax2_send(iaxs[fr->callno], &fr->af, fr->ts, -1, 0, 0, 0)
(1421,iaxs)
(1422,1)
(1423,)
(1424,case IAX_COMMAND_AUTHREQ:)
(1425,)
(1426,ast_log(LOG_WARNING, "Registry error\\n")
(1427,capability)
(1428,NULL)
(1429,LOG_NOTICE)
(1430,fr)
(1431,format)
(1432,f)
(1433,AST_FRAME_IAX)
(1434,iaxs[fr->callno])
(1435,ied0)
(1436,fr)
(1437,!exists)
(1438,ied0)
(1439,exten)
(1440,subclass)
(1441,iaxs[fr->callno])
(1442,callno)
(1443,iaxs[fr->callno])
(1444,break;)
(1445,if (iaxs[fr->callno]->peerpoke)
(1446,iaxs[fr->callno])
(1447,iax2_destroy(call_to_destroy)
(1448,ies)
(1449,fr->callno)
(1450,subclass)
(1451,f)
(1452,if (authdebug)
(1453,case IAX_COMMAND_UNQUELCH:)
(1454,sizeof(caller_pref_buf)
(1455,c)
(1456,callno)
(1457,ntohs(vh->ts)
(1458,f.subclass.integer)
(1459,iaxs)
(1460,fr)
(1461,iaxs[fr->callno])
(1462,iaxs)
(1463,fr->callno)
(1464,ast_format_cap_copy(native, orignative)
(1465,iaxs)
(1466,fh->dcallno)
(1467,exten)
(1468,x == cur->oseqno)
(1469,owner ? ast_bridged_channel(owner)
(1470,var->next)
(1471,callno)
(1472,iaxs)
(1473,sin_addr)
(1474,ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
(1475,1)
(1476,callno)
(1477,addr)
(1478,ied0)
(1479,iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer)
(1480,iaxs[fr->callno]->context)
(1481,"mine")
(1482,sin)
(1483,iaxs[fr->callno]->iseqno - fr->oseqno)
(1484,fr)
(1485,fr->callno)
(1486,ast_debug(1, "I can haz IAX vars? w00t\\n")
(1487,variablestore)
(1488,"Unable to negotiate codec")
(1489,NULL)
(1490,iaxs[fr->callno])
(1491,iaxs[fr->callno]->exten)
(1492,f.datalen = 0)
(1493,&connected.id)
(1494,fr->callno)
(1495,fr)
(1496,LOG_NOTICE)
(1497,var->next = iaxs[fr->callno]->iaxvars)
(1498,calling_pres)
(1499,f.subclass.integer != IAX_COMMAND_TXREADY)
(1500,AST_FRAME_IAX)
(1501,iaxs[fr->callno])
(1502,tmpfmt)
(1503,IAX_COMMAND_ACK)
(1504,iax_firmware_append(&ied0, (unsigned char *)
(1505,fr->callno)
(1506,1)
(1507,iaxs[fr->callno])
(1508,if (ies.format)
(1509,subclass)
(1510,callno)
(1511,f)
(1512,iaxs[iaxs[fr->callno]->bridgecallno])
(1513,ast_log(LOG_NOTICE, "Host %s failed to authenticate as %s\\n", ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
(1514,pref)
(1515,peerformat)
(1516,iaxs)
(1517,sin.sin_addr)
(1518,sin)
(1519,if (iaxs[fr->callno]->owner && fh->type == AST_FRAME_IAX &&\n\\n\\t\\t\\t(fh->csub == IAX_COMMAND_HANGUP\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_REJECT\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_REGREJ\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_TXREJ)
(1520,iaxs[fr->callno]->calling_pres)
(1521,if (iaxs[fr->callno]->videoformat > 0)
(1522,tmp)
(1523,integer)
(1524,fr->callno)
(1525,ntohs(mh->ts)
(1526,owner)
(1527,&ied0)
(1528,iax2_queue_frame(fr->callno, &hangup_fr)
(1529,var = ies.vars)
(1530,fr)
(1531,fr)
(1532,f.frametype == AST_FRAME_IAX)
(1533,callno)
(1534,fr->callno)
(1535,f)
(1536,"Accepting AUTHENTICATED call from %s:\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%srequested format = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%srequested prefs = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%sactual format = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%shost prefs = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%spriority = %s\\n")
(1537,f)
(1538,exten)
(1539,fr->callno)
(1540,if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
(1541,iaxs)
(1542,bridged_chan)
(1543,if (variablestore && varlist)
(1544,ast_channel_name(iaxs[fr->callno]->owner)
(1545,callno)
(1546,manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Lagged\\r\\nTime: %d\\r\\n", peer->name, iaxs[fr->callno]->pingtime)
(1547,ies.vars)
(1548,if ((new_callno = make_trunk(fr->callno, 1)
(1549,iaxs[fr->callno])
(1550,ies)
(1551,data_size)
(1552,fr->callno)
(1553,sin_addr)
(1554,)
(1555,callno)
(1556,subclass)
(1557,fr)
(1558,f.samples)
(1559,frametype)
(1560,integer)
(1561,encmethods)
(1562,*prev = NULL)
(1563,fr->callno)
(1564,fr)
(1565,fr->callno)
(1566,fr->callno)
(1567,ies.causecode)
(1568,iaxs[fr->callno]->owner)
(1569,fr)
(1570,callno)
(1571,fh->csub == IAX_COMMAND_REJECT)
(1572,fr)
(1573,fh)
(1574,fr)
(1575,fr->callno)
(1576,transfer)
(1577,frametype)
(1578,fr)
(1579,"<Unknown>")
(1580,iaxs[fr->callno])
(1581,iax2_getformatname(format)
(1582,0)
(1583,case IAX_COMMAND_TXREADY:)
(1584,connected.id)
(1585,LOG_NOTICE)
(1586,if (iax_park(bridged_chan, owner, ies.called_number, context)
(1587,f.frametype)
(1588,callno)
(1589,ied1.buf)
(1590,(f.frametype == AST_FRAME_IAX)
(1591,ies)
(1592,fr)
(1593,iaxs)
(1594,fr)
(1595,callno)
(1596,iax2_getformatname_multiple(tmp2, sizeof(tmp2)
(1597,res)
(1598,iaxs[fr->callno])
(1599,iaxs)
(1600,exists = ast_exists_extension(NULL, context, exten, 1, cid_num)
(1601,iaxs[fr->callno]->state)
(1602,iaxsl[fr->callno])
(1603,f)
(1604,&iaxsl[fr->callno])
(1605,IAX_COMMAND_REJECT)
(1606,iaxs[fr->callno]->exten)
(1607,iaxs[fr->callno])
(1608,)
(1609,callno)
(1610,iaxs)
(1611,connected)
(1612,sin)
(1613,return 1;)
(1614,iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
(1615,fr->callno)
(1616,iaxs)
(1617,fr)
(1618,iaxs[fr->callno])
(1619,subclass)
(1620,)
(1621,peerformat)
(1622,IAX_COMMAND_TXREL)
(1623,fr->callno)
(1624,fr)
(1625,1)
(1626,iaxs)
(1627,data_size)
(1628,owner)
(1629,fr->callno)
(1630,&ied1)
(1631,1)
(1632,using_prefs)
(1633,connected.id.name.presentation)
(1634,"Memory allocation error while processing IAX2 variables\\n")
(1635,fr)
(1636,var = ies.vars)
(1637,ies)
(1638,iaxs)
(1639,ast_channel_caller(iaxs[fr->callno]->owner)
(1640,frametype)
(1641,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(1642,)
(1643,fr)
(1644,iaxs)
(1645,fr->callno)
(1646,ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
(1647,csub)
(1648,sin_addr)
(1649,break;)
(1650,ied0.buf)
(1651,iaxs[fr->callno]->addr)
(1652,owner)
(1653,fr->callno)
(1654,src)
(1655,iaxs[fr->callno])
(1656,fr->callno)
(1657,fr)
(1658,iaxsl[fr->callno])
(1659,fr->callno)
(1660,callno)
(1661,AST_CAUSE_BUSY)
(1662,iaxs[fr->callno]->videoformat)
(1663,ies.cause)
(1664,iaxs[fr->callno]->peercapability)
(1665,fr->callno)
(1666,fr->callno)
(1667,iseqno)
(1668,iaxs[fr->callno]->peercapability)
(1669,iaxs[fr->callno])
(1670,fh->csub == IAX_COMMAND_REGREJ)
(1671,memset(&ies, 0, sizeof(ies)
(1672,integer)
(1673,fr->callno)
(1674,1)
(1675,f)
(1676,iaxs[fr->callno]->state)
(1677,if (ies.musiconhold)
(1678,buf)
(1679,fr->callno)
(1680,peer)
(1681,f.frametype)
(1682,"PeerStatus")
(1683,f.subclass.integer != IAX_COMMAND_UNQUELCH)
(1684,vars)
(1685,callno)
(1686,bridged_chan && ies.called_number)
(1687,callno)
(1688,if (!authenticate_request(fr->callno)
(1689,fr->callno)
(1690,format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(1691,variablestore)
(1692,iaxs[fr->callno])
(1693,f.subclass.integer)
(1694,)
(1695,)
(1696,send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREJ, 0, NULL, 0, -1)
(1697,thread->buf[res++] = \'\\0\')
(1698,zeros)
(1699,fr)
(1700,fr)
(1701,owner)
(1702,ast_verb(3, "Accepting AUTHENTICATED call from %s:\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%srequested format = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%srequested prefs = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%sactual format = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%shost prefs = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%spriority = %s\\n", \n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(1703,callno)
(1704,iaxs)
(1705,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(1706,sizeof(ied0)
(1707,break;)
(1708,f)
(1709,called_number)
(1710,iaxs)
(1711,f)
(1712,fd)
(1713,0)
(1714,!dcallno && iax2_allow_new(f.frametype, f.subclass.integer, 1)
(1715,IAX_COMMAND_ACK)
(1716,fr->callno)
(1717,NULL)
(1718,AST_FRAME_IAX)
(1719,fr)
(1720,)
(1721,callno)
(1722,f)
(1723,callno)
(1724,sizeof(*fh)
(1725,callno)
(1726,f.subclass == IAX_COMMAND_NEW)
(1727,if (decrypt_frame(fr->callno, fh, &f, &res)
(1728,iax2_getformatname_multiple(tmp3, sizeof(tmp3)
(1729,ies.called_number)
(1730,tmp2)
(1731,fr)
(1732,)
(1733,last)
(1734,ast_log(LOG_WARNING, \n\\n\\t\\t\\t\\t\\t\\t"we\'ve been told to rotate our encryption key, "\n\\n\\t\\t\\t\\t\\t\\t"but this isn\'t an encrypted call. bad things will happen.\\n"\n\\n\\t\\t\\t\\t\\t)
(1735,return 1;)
(1736,mh)
(1737,ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE)
(1738,fr)
(1739,frametype)
(1740,ied0)
(1741,fr->ts)
(1742,tmp2)
(1743,&iaxs[fr->callno]->addr)
(1744,S_OR(moh_suggest, NULL)
(1745,f.offset)
(1746,iaxs)
(1747,fr->callno)
(1748,oseqno)
(1749,1)
(1750,fr)
(1751,1)
(1752,IAX_COMMAND_TXACC)
(1753,iaxs[fr->callno]->reg->username)
(1754,frametype)
(1755,ast_free(varlist)
(1756,fr->callno)
(1757,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
(1758,iaxs[fr->callno]->peerformat)
(1759,owner)
(1760,f.subclass)
(1761,iaxs)
(1762,ies.codec_prefs)
(1763,thread->iofd)
(1764,iaxs)
(1765,ntohs(mh->callno)
(1766,)
(1767,iaxs[fr->callno])
(1768,f.data.ptr = thread->buf + sizeof(*mh)
(1769,iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(1770,callno)
(1771,)
(1772,&f.subclass.format)
(1773,IAX_CODEC_NOCAP)
(1774,fr->callno)
(1775,((f.subclass.integer != IAX_COMMAND_INVAL)
(1776,&iaxsl[fr->callno])
(1777,IAX_COMMAND_ACK)
(1778,ies)
(1779,0)
(1780,1)
(1781,ies.fwdesc)
(1782,fr->callno)
(1783,!ast_strlen_zero(moh_suggest)
(1784,)
(1785,(f.frametype == AST_FRAME_VOICE)
(1786,*mh)
(1787,oseqno)
(1788,fh->iseqno)
(1789,peer->lastms)
(1790,"<unknown>")
(1791,ntohs(vh->ts)
(1792,peer)
(1793,data_size)
(1794,iaxs[fr->callno]->owner)
(1795,iaxs)
(1796,peer->lastms)
(1797,variablestore->data = varlist)
(1798,if (iaxs[fr->callno]->last < fr->ts &&\n\\n                            f.subclass.integer != IAX_COMMAND_ACK &&\n\\n                            f.subclass.integer != IAX_COMMAND_PONG &&\n\\n                            f.subclass.integer != IAX_COMMAND_LAGRP)
(1799,callno)
(1800,tmp1)
(1801,fr)
(1802,ast_inet_ntoa(sin.sin_addr)
(1803,peer->maxms)
(1804,0)
(1805,tmp1)
(1806,callno)
(1807,AST_FRAME_IAX)
(1808,iaxs[fr->callno])
(1809,fr)
(1810,owner)
(1811,fr->callno)
(1812,iaxs)
(1813,f.data.ptr = NULL)
(1814,iaxs[fr->callno])
(1815,iaxs[fr->callno])
(1816,iaxs[fr->callno]->rprefs)
(1817,if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(1818,iaxs)
(1819,fr->callno)
(1820,iaxs)
(1821,integer)
(1822,ied1.pos)
(1823,iaxs[fr->callno]->encmethods = 0)
(1824,x++)
(1825,iaxs)
(1826,if (authenticate_verify(iaxs[fr->callno], &ies)
(1827,callno)
(1828,ast_strlen_zero(iaxs[fr->callno]->inkeys)
(1829,f.frametype == AST_FRAME_IAX)
(1830,new_peercallno = (unsigned short)
(1831,fr)
(1832,sin_addr)
(1833,variablestore)
(1834,iaxs[fr->callno]->owner)
(1835,ied0.buf)
(1836,iaxs)
(1837,fr)
(1838,subclass)
(1839,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(1840,IAX_COMMAND_TXMEDIA)
(1841,callno)
(1842,f.frametype)
(1843,f.datalen = res - sizeof(*vh)
(1844,CACHE_FLAG_TRANSMITTED)
(1845,pingied)
(1846,iaxs[fr->callno]->state)
(1847,f.subclass.format)
(1848,iaxs)
(1849,LOG_WARNING)
(1850,iaxs[fr->callno])
(1851,fr->callno)
(1852,var->value)
(1853,owner)
(1854,fr->ts)
(1855,&thread->iosin)
(1856,IAX_COMMAND_REJECT)
(1857,iaxs)
(1858,fr)
(1859,fr)
(1860,decrypted = 1)
(1861,1)
(1862,peer->name)
(1863,if (!iaxs[fr->callno])
(1864,if (!iaxs[fr->callno])
(1865,iaxs)
(1866,f.datalen)
(1867,pref)
(1868,sin)
(1869,iaxs[fr->callno])
(1870,connected.id.number.presentation)
(1871,fr)
(1872,0)
(1873,iaxs[fr->callno])
(1874,f)
(1875,fr)
(1876,f.frametype = AST_FRAME_NULL)
(1877,mh)
(1878,valid)
(1879,IAX_CODEC_NOCAP)
(1880,iaxs[fr->callno])
(1881,iaxs[fr->callno])
(1882,"BLINDTRANSFER")
(1883,pos)
(1884,callno)
(1885,calltokendata)
(1886,ast_inet_ntoa(sin.sin_addr)
(1887,iaxs[fr->callno]->owner)
(1888,subclass)
(1889,fr)
(1890,)
(1891,f.subclass)
(1892,ies.vars = NULL)
(1893,retries)
(1894,fr->callno)
(1895,fr)
(1896,caller_pref_buf)
(1897,iaxs)
(1898,fr)
(1899,ast_channel_unlock(iaxs[fr->callno]->owner)
(1900,fr)
(1901,)
(1902,exists = ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)
(1903,0)
(1904,ast_format_from_old_bitfield(&f.subclass.format, iaxs[fr->callno]->voiceformat)
(1905,callno)
(1906,f.subclass.integer)
(1907,duped_fr)
(1908,fr)
(1909,res)
(1910,variablestore)
(1911,)
(1912,1)
(1913,fr)
(1914,iax2_destroy(fr->callno)
(1915,callno)
(1916,callno)
(1917,updatehistory = 0)
(1918,fr)
(1919,iaxs[fr->callno])
(1920,iaxsl[fr->callno])
(1921,callno)
(1922,iaxs[fr->callno]->last)
(1923,fr->callno)
(1924,fr->ts)
(1925,f.subclass)
(1926,"Neat, somebody took away the channel at a magical time but i found it!\\n")
(1927,iaxs[fr->callno])
(1928,)
(1929,iaxs)
(1930,context)
(1931,fr)
(1932,newvar)
(1933,iaxs[fr->callno])
(1934,(new_callno = make_trunk(fr->callno, 1)
(1935,ied1)
(1936,str)
(1937,f.subclass.integer != IAX_COMMAND_TXREADY)
(1938,fr)
(1939,f.subclass.integer != IAX_COMMAND_VNAK)
(1940,callno)
(1941,iax_ie_append_int(&ied1, IAX_IE_FORMAT, format)
(1942,peercapability)
(1943,ied1)
(1944,iaxs[fr->callno])
(1945,iaxs[fr->callno]->exten)
(1946,callno)
(1947,&sin)
(1948,iaxs[fr->callno])
(1949,f.subclass)
(1950,iaxs[fr->callno])
(1951,ies)
(1952,ast_channel_name(iaxs[fr->callno]->owner)
(1953,iaxs[fr->callno]->rprefs)
(1954,format = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(1955,callno)
(1956,iaxs[fr->callno])
(1957,res)
(1958,f.subclass.integer != IAX_COMMAND_INVAL)
(1959,ast_test_flag64(iaxs[fr->callno], IAX_IMMEDIATE)
(1960,f.subclass)
(1961,ies)
(1962,iaxs)
(1963,f.subclass.integer != IAX_COMMAND_TXCNT)
(1964,fr)
(1965,f.frametype == AST_FRAME_VOICE)
(1966,IAX_ALREADYGONE)
(1967,historicms)
(1968,"Unable to negotiate codec")
(1969,decrypted)
(1970,LOG_NOTICE)
(1971,AST_LIST_INSERT_TAIL(varlist, newvar, entries)
(1972,0)
(1973,if ((unsigned char)
(1974,ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)
(1975,"mine")
(1976,ast_string_field_set(iaxs[fr->callno], exten, ies.called_number ? ies.called_number : "s")
(1977,fr)
(1978,fr)
(1979,callno)
(1980,pos)
(1981,fr->callno)
(1982,)
(1983,fr->callno)
(1984,(peer->historicms > 0)
(1985,callno)
(1986,res)
(1987,DATASTORE_INHERIT_FOREVER)
(1988,if (!format)
(1989,f.subclass)
(1990,*fh)
(1991,iaxs)
(1992,LOG_NOTICE)
(1993,iaxs[fr->callno] && ((mount_callid = iax_pvt_callid_get(fr->callno)
(1994,datalen)
(1995,iaxs[fr->callno])
(1996,callno)
(1997,iaxs[fr->callno]->rprefs)
(1998,owner)
(1999,AST_FRAME_NULL)
(2000,fr->callno)
(2001,callno)
(2002,iaxs)
(2003,AST_FRAME_IAX)
(2004,if (variablestore)
(2005,format)
(2006,ast_channel_readformat(iaxs[fr->callno]->owner)
(2007,mh->ts)
(2008,owner)
(2009,"BLINDTRANSFER")
(2010,sin)
(2011,ies.called_number)
(2012,f.subclass)
(2013,)
(2014,&iaxsl[fr->callno])
(2015,pref = iaxs[fr->callno]->prefs)
(2016,(f.subclass.integer != IAX_COMMAND_TXACC)
(2017,data)
(2018,unsigned short)
(2019,!iaxs[fr->callno])
(2020,iax2_getformatname_multiple(tmp1, sizeof(tmp1)
(2021,ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(2022,ies.vars)
(2023,sizeof(tmp2)
(2024,tmp)
(2025,fr->callno)
(2026,vh)
(2027,pref)
(2028,format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(2029,fr)
(2030,callno)
(2031,ast_datastore_free(variablestore)
(2032,callno)
(2033,struct iax2_thread *thread)
(2034,"Immediately destroying %d, having received hangup\\n")
(2035,IAX_COMMAND_ACK)
(2036,3)
(2037,iaxs)
(2038,ied1)
(2039,iaxs[fr->callno])
(2040,callno)
(2041,ied0)
(2042,peer->callno)
(2043,iaxs[fr->callno] && iaxs[fr->callno]->last < fr->ts)
(2044,fr)
(2045,iaxs)
(2046,iaxs)
(2047,callno)
(2048,f.subclass.integer == IAX_COMMAND_REGREQ)
(2049,iaxs)
(2050,callno)
(2051,iaxs)
(2052,"Peer \'%s\' is now TOO LAGGED (%d ms)
(2053,callno)
(2054,NULL)
(2055,frametype)
(2056,iaxs[fr->callno]->exten)
(2057,fr->callno)
(2058,!iaxs[fr->callno])
(2059,thread)
(2060,iaxs[fr->callno])
(2061,callno)
(2062,fr->callno)
(2063,meta)
(2064,transferring)
(2065,iaxs)
(2066,fr)
(2067,f)
(2068,ast_format_to_old_bitfield(&f.subclass.format)
(2069,iaxs[fr->callno]->owner && fh->type == AST_FRAME_IAX &&\n\\n\\t\\t\\t(fh->csub == IAX_COMMAND_HANGUP\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_REJECT\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_REGREJ\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_TXREJ)
(2070,iaxs)
(2071,if (!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)
(2072,pbx_builtin_setvar_helper(bridged_chan, "BLINDTRANSFER", ast_channel_name(owner)
(2073,iaxs)
(2074,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(2075,ast_inet_ntoa(sin.sin_addr)
(2076,f.subclass)
(2077,iaxs[fr->callno]->cid_num)
(2078,sin)
(2079,if (ies.vars)
(2080,integer)
(2081,ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)
(2082,f.frametype)
(2083,ies)
(2084,peerformat)
(2085,NULL)
(2086,callno)
(2087,callno)
(2088,remove_by_peercallno(iaxs[fr->callno])
(2089,iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(2090,f.data)
(2091,)
(2092,refresh)
(2093,iaxs)
(2094,ast_format_cap_from_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner)
(2095,sin_addr)
(2096,fr)
(2097,fr->callno)
(2098,if (authdebug)
(2099,callno)
(2100,fr)
(2101,callno)
(2102,fr)
(2103,callno)
(2104,iaxs[fr->callno]->iseqno)
(2105,callno)
(2106,fr->callno)
(2107,ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf)
(2108,callno)
(2109,sizeof(ies)
(2110,&iaxsl[fr->callno])
(2111,iaxsl[fr->callno])
(2112,callno)
(2113,sizeof(tmp3)
(2114,fr->callno)
(2115,callno)
(2116,&ied0)
(2117,iaxs[fr->callno])
(2118,iaxs)
(2119,fr)
(2120,vars)
(2121,iaxs)
(2122,iaxs[fr->callno])
(2123,fr)
(2124,iaxs[fr->callno]->bridgecallno)
(2125,context)
(2126,fr->callno)
(2127,ied0.buf)
(2128,iaxs[fr->callno]->owner)
(2129,res)
(2130,fr)
(2131,iaxs[fr->callno]->prefs)
(2132,iaxs[fr->callno])
(2133,fr)
(2134,fr->outoforder = -1)
(2135,AF_INET)
(2136,iaxs)
(2137,fr->callno)
(2138,&ied0)
(2139,return 1;)
(2140,subclass)
(2141,ast_copy_string(cause_code->chan_name, ast_channel_name(iaxs[fr->callno]->owner)
(2142,iaxs[fr->callno])
(2143,AST_FRAME_IAX)
(2144,1)
(2145,capability)
(2146,exten)
(2147,fr)
(2148,0)
(2149,prev)
(2150,frametype)
(2151,caller_pref_buf)
(2152,mh->callno)
(2153,name)
(2154,iaxsl)
(2155,iaxs[fr->callno]->peercallno)
(2156,exists)
(2157,f.subclass.format)
(2158,(f.subclass.integer != IAX_COMMAND_TXACC)
(2159,IAX_STATE_TBD)
(2160,ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
(2161,AST_FRAME_CONTROL)
(2162,f)
(2163,fr)
(2164,fr->iseqno)
(2165,f.frametype)
(2166,ast_alloca(data_size)
(2167,buf)
(2168,tmp2)
(2169,iaxs[fr->callno])
(2170,)
(2171,buf)
(2172,cid_num)
(2173,&ied0)
(2174,peercapability)
(2175,if (ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)
(2176,fr->callno)
(2177,ied0)
(2178,fh->ts)
(2179,(f.subclass.integer != IAX_COMMAND_TXACC)
(2180,fh->csub == IAX_COMMAND_HANGUP\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_REJECT\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_REGREJ\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_TXREJ)
(2181,1)
(2182,iaxs)
(2183,1)
(2184,iaxs[fr->callno]->peercapability)
(2185,callno)
(2186,1)
(2187,sin.sin_addr.s_addr)
(2188,f.frametype)
(2189,iaxs)
(2190,iaxs)
(2191,iaxs[fr->callno])
(2192,NULL)
(2193,sin)
(2194,callno)
(2195,ntohs(mh->ts)
(2196,)
(2197,frametype)
(2198,host_pref_buf)
(2199,iaxs[fr->callno]->calling_pres)
(2200,sin_family)
(2201,LOG_NOTICE)
(2202,f.subclass.integer)
(2203,f)
(2204,callno)
(2205,1)
(2206,f.subclass)
(2207,)
(2208,1)
(2209,sin_addr)
(2210,fr->callno)
(2211,csub)
(2212,!iaxs[fr->callno])
(2213,peer)
(2214,iaxs[fr->callno]->bridgecallno)
(2215,case IAX_COMMAND_TXREJ:)
(2216,ies)
(2217,fr->callno)
(2218,ies)
(2219,f)
(2220,fr->callno)
(2221,1)
(2222,LOG_ERROR)
(2223,0)
(2224,fr->callno)
(2225,\'\\0\')
(2226,cause_code)
(2227,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(2228,last)
(2229,integer)
(2230,f)
(2231,fr->callno)
(2232,IAX_DELAYPBXSTART)
(2233,fr)
(2234,ast_mutex_unlock(&iaxsl[fr->callno])
(2235,fr->callno)
(2236,iaxs[fr->callno])
(2237,peer)
(2238,ies)
(2239,ies.called_number)
(2240,fr->callno)
(2241,iaxs[fr->callno]->owner)
(2242,f.subclass)
(2243,f.subclass.integer)
(2244,src)
(2245,dcallno != 1)
(2246,subclass)
(2247,IAX_COMMAND_CALLTOKEN)
(2248,f.subclass.integer)
(2249,maxms)
(2250,fr)
(2251,presentation)
(2252,&iaxs[fr->callno]->state)
(2253,capability)
(2254,fr)
(2255,integer)
(2256,&iaxs[fr->callno]->rprefs)
(2257,callno)
(2258,tmp1)
(2259,owner)
(2260,connected.id.number)
(2261,fr->callno)
(2262,ast_channel_writeformat(iaxs[fr->callno]->owner)
(2263,tmp2)
(2264,number)
(2265,AST_FRAME_IAX)
(2266,f)
(2267,connected.id.name.presentation = iaxs[fr->callno]->calling_pres)
(2268,iaxs[fr->callno]->prefs)
(2269,ast_log(LOG_WARNING, "Datalen < 0?\\n")
(2270,DATASTORE_INHERIT_FOREVER)
(2271,f.frametype == AST_FRAME_VOICE)
(2272,1)
(2273,meta->zeros == 0)
(2274,ies.vars)
(2275,buf)
(2276,fr->callno)
(2277,iaxs[fr->callno])
(2278,iaxs[fr->callno])
(2279,f)
(2280,moh_suggest)
(2281,fr->callno)
(2282,callno)
(2283,0)
(2284,peerformat)
(2285,&iax2_variable_datastore_info)
(2286,buf)
(2287,frametype)
(2288,iaxs[fr->callno])
(2289,ies.vars)
(2290,"disabled")
(2291,af)
(2292,rseqno)
(2293,f.subclass.format)
(2294,ast_log(LOG_NOTICE, "Peer did not understand our iax command \'%d\'\\n", ies.iax_unknown)
(2295,IAX_CODEC_NOCAP)
(2296,ts)
(2297,rseqno)
(2298,integer)
(2299,if (prev)
(2300,if (ies.calltoken && ies.calltokendata)
(2301,sizeof(tmp2)
(2302,iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No authority found")
(2303,iaxs[fr->callno]->peerformat)
(2304,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(2305,f)
(2306,data)
(2307,fr->callno)
(2308,iaxs[fr->callno]->chosenformat = format)
(2309,fr->callno)
(2310,subclass)
(2311,ntohs(meta->metacmd)
(2312,ast_debug(1, "I can haz IAX vars? w00t\\n")
(2313,)
(2314,newvar)
(2315,owner)
(2316,peer)
(2317,iaxs[fr->callno])
(2318,iaxs[fr->callno])
(2319,AST_FRAME_IAX)
(2320,owner)
(2321,datalen)
(2322,)
(2323,fr)
(2324,fh)
(2325,iax_frame_wrap(fr, &f)
(2326,exten = ast_strdupa(iaxs[fr->callno]->exten)
(2327,prev)
(2328,"TBD")
(2329,subclass)
(2330,fr)
(2331,fr->callno)
(2332,ies.refresh)
(2333,frametype)
(2334,fr)
(2335,tmp1)
(2336,f.frametype)
(2337,iaxs[fr->callno]->peercapability)
(2338,iaxs[fr->callno]->bridgecallno)
(2339,fr->callno)
(2340,fr->callno)
(2341,data)
(2342,buf)
(2343,&connected)
(2344,iaxs[fr->callno]->owner)
(2345,&iaxs[fr->callno]->state)
(2346,0)
(2347,)
(2348,if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(2349,iaxs)
(2350,callno)
(2351,subclass)
(2352,ast_party_connected_line_init(&connected)
(2353,ies)
(2354,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(2355,pref)
(2356,ast_format_to_old_bitfield(&f.subclass.format)
(2357,pos)
(2358,challenge)
(2359,!(c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)
(2360,iax2_getformatname_multiple(tmp3, sizeof(tmp3)
(2361,1)
(2362,if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)
(2363,fr)
(2364,callno)
(2365,(ntohs(mh->callno)
(2366,)
(2367,AST_FRAME_IAX)
(2368,peercapability)
(2369,iaxs)
(2370,IAX_QUELCH)
(2371,fr)
(2372,callno)
(2373,ast_variables_destroy(ies.vars)
(2374,fr->callno)
(2375,iaxs[fr->callno])
(2376,decrypted = 1)
(2377,subclass)
(2378,f)
(2379,iseqno)
(2380,varlist = ast_calloc(1, sizeof(*varlist)
(2381,)
(2382,owner)
(2383,fr->callno)
(2384,IAX_COMMAND_ACK)
(2385,iaxsl)
(2386,)
(2387,res)
(2388,f.frametype != AST_FRAME_IAX)
(2389,peer)
(2390,iaxs)
(2391,iseqno)
(2392,f.frametype != AST_FRAME_IAX)
(2393,ENOTCONN)
(2394,cid_num)
(2395,callno)
(2396,iaxs[fr->callno])
(2397,iaxs[fr->callno]->last & 0xFFFF0000L)
(2398,memset(&ied0, 0, sizeof(ied0)
(2399,!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(2400,integer)
(2401,case IAX_COMMAND_ACCEPT:)
(2402,callno)
(2403,callno)
(2404,fr)
(2405,aseqno)
(2406,fr)
(2407,iaxs[fr->callno])
(2408,1)
(2409,"Received mini frame before first full video frame\\n")
(2410,f)
(2411,using_prefs = "caller")
(2412,vars)
(2413,LOG_NOTICE)
(2414,context)
(2415,subclass)
(2416,fr)
(2417,5)
(2418,sizeof(ied0)
(2419,0)
(2420,x != fr->iseqno)
(2421,iaxs[iaxs[fr->callno]->bridgecallno])
(2422,cur)
(2423,tmp2)
(2424,&iaxs[fr->callno]->state)
(2425,subclass)
(2426,sin)
(2427,mh)
(2428,iaxs)
(2429,fr->callno)
(2430,subclass)
(2431,iaxs[fr->callno])
(2432,ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\\n")
(2433,callno)
(2434,iaxs[fr->callno]->rprefs)
(2435,ies)
(2436,callno)
(2437,integer)
(2438,historicms)
(2439,IAX_COMMAND_PONG)
(2440,ies)
(2441,callno)
(2442,sin)
(2443,!ast_connected_line_parse_data(f.data.ptr, f.datalen, &connected)
(2444,fr)
(2445,f.frametype == AST_FRAME_VIDEO)
(2446,"")
(2447,iaxs[fr->callno]->peerformat)
(2448,ast_variables_destroy(ies.vars)
(2449,"Undecodable frame received from \'%s\'\\n")
(2450,offset)
(2451,using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(2452,iaxs[fr->callno]->hold_signaling)
(2453,iaxs[fr->callno]->bridgecallno)
(2454,sizeof(pref)
(2455,peercapability)
(2456,0 + peer->historicms)
(2457,return 1;)
(2458,case IAX_COMMAND_AUTHREP:)
(2459,callno)
(2460,fh)
(2461,f.datalen)
(2462,iaxs[fr->callno]->voiceformat)
(2463,f)
(2464,f.frametype == AST_FRAME_CONTROL)
(2465,iaxs[fr->callno])
(2466,)
(2467,(fh->csub >> 6)
(2468,vh->zeros == 0)
(2469,iaxs[fr->callno])
(2470,fr)
(2471,fr->ts)
(2472,ies.cause)
(2473,owner)
(2474,(iaxs[fr->callno]->last & 0xFFFF0000L)
(2475,iaxs[fr->callno]->pingtime)
(2476,LOG_WARNING)
(2477,&ied0)
(2478,IAX_STATE_TBD)
(2479,iaxs[fr->callno])
(2480,break;)
(2481,iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)
(2482,&iaxsl[fr->callno])
(2483,owner)
(2484,historicms)
(2485,f.data.ptr)
(2486,AST_FRAME_IAX)
(2487,sin_addr)
(2488,)
(2489,1)
(2490,iaxs)
(2491,thread->buf)
(2492,fr)
(2493,fr)
(2494,)
(2495,integer)
(2496,f.frametype)
(2497,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(2498,"disabled")
(2499,iaxs[fr->callno])
(2500,fr)
(2501,subclass)
(2502,ts)
(2503,callno)
(2504,prev = var)
(2505,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(2506,variablestore)
(2507,integer)
(2508,if (ies.vars)
(2509,&iaxsl[fr->callno])
(2510,ied0.buf)
(2511,f.frametype)
(2512,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(2513,iaxs[fr->callno]->rprefs)
(2514,sizeof(sin)
(2515,var = var->next)
(2516,iaxs[fr->callno])
(2517,ies)
(2518,f.data)
(2519,iaxs[fr->callno])
(2520,fr->callno)
(2521,if (peer->pokeexpire > -1)
(2522,sin)
(2523,iaxs[fr->callno])
(2524,iaxs[fr->callno]->first_iax_message)
(2525,res)
(2526,iaxs[fr->callno]->peercapability)
(2527,ntohs(mh->callno)
(2528,iaxs[fr->callno]->state)
(2529,AST_FRAME_IAX)
(2530,fr->callno)
(2531,*varlist)
(2532,fr->callno)
(2533,ts)
(2534,f.subclass.integer != IAX_COMMAND_INVAL)
(2535,ast_mutex_lock(&iaxsl[fr->callno])
(2536,f)
(2537,f.subclass)
(2538,using_prefs = "caller")
(2539,break;)
(2540,iaxs[fr->callno]->pingtime)
(2541,sin_addr)
(2542,data_size)
(2543,iaxs[iaxs[fr->callno]->bridgecallno])
(2544,&f)
(2545,if ((f.frametype == AST_FRAME_VOICE)
(2546,c)
(2547,fr)
(2548,fr->callno)
(2549,iax2_lock_owner(fr->callno)
(2550,IAX_IE_FORMAT)
(2551,"Async goto of \'%s\' to \'%s@%s\' failed\\n")
(2552,IAX_COMMAND_TXCNT)
(2553,fr)
(2554,fr)
(2555,transferring)
(2556,owner)
(2557,(f.subclass.integer != IAX_COMMAND_CALLTOKEN)
(2558,iaxs)
(2559,chan_name)
(2560,)
(2561,iaxs[fr->callno]->context)
(2562,AST_FRAME_IAX)
(2563,callno)
(2564,3)
(2565,break;)
(2566,f.subclass.integer != IAX_COMMAND_INVAL)
(2567,ied1)
(2568,callno)
(2569,&iaxs[fr->callno]->state)
(2570,)
(2571,fr)
(2572,frametype)
(2573,fr->callno)
(2574,iaxs[fr->callno])
(2575,fr->callno)
(2576,state)
(2577,!ast_test_flag64(iaxs[fr->callno], IAX_RECVCONNECTEDLINE)
(2578,)
(2579,ies.codec_prefs)
(2580,IAX_CALLENCRYPTED(iaxs[fr->callno])
(2581,updatehistory)
(2582,1)
(2583,iaxs[fr->callno])
(2584,return 1;)
(2585,mh)
(2586,fr->callno)
(2587,ast_mutex_unlock(&iaxsl[fr->callno])
(2588,ies.provver)
(2589,buf)
(2590,AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(2591,iaxs[fr->callno]->last < fr->ts)
(2592,fr->callno)
(2593,0)
(2594,iaxs[fr->callno]->capability)
(2595,capability)
(2596,1)
(2597,iseqno)
(2598,ied1)
(2599,connected.id)
(2600,ast_log(LOG_WARNING, "Undecodable frame received from \'%s\'\\n", ast_inet_ntoa(sin.sin_addr)
(2601,fr->callno)
(2602,"<Unknown>")
(2603,variablestore)
(2604,fr)
(2605,f.subclass.integer != IAX_COMMAND_TXREL)
(2606,&tmpfmt)
(2607,peer->historicms > 0)
(2608,iaxs)
(2609,iaxs[fr->callno]->transferring)
(2610,LOG_ERROR)
(2611,fr->callno)
(2612,iaxs[fr->callno])
(2613,varlist)
(2614,strcmp(iaxs[fr->callno]->exten, "TBD")
(2615,1)
(2616,iaxs)
(2617,owner)
(2618,callno)
(2619,fr)
(2620,callno)
(2621,fr)
(2622,rseqno)
(2623,callno)
(2624,iaxs[fr->callno])
(2625,format)
(2626,callno)
(2627,callno)
(2628,callno)
(2629,addr)
(2630,iaxs[fr->callno])
(2631,1)
(2632,iaxs[fr->callno]->prefs)
(2633,fr->callno)
(2634,fr->callno)
(2635,iaxs[fr->callno])
(2636,fr)
(2637,iaxs[fr->callno])
(2638,fh)
(2639,fr)
(2640,1)
(2641,if (!newvar)
(2642,)
(2643,construct_rr(iaxs[fr->callno], &pingied)
(2644,owner)
(2645,return 1;)
(2646,ies.format)
(2647,tmp2)
(2648,subclass)
(2649,)
(2650,fr->callno)
(2651,fr->callno)
(2652,fr->callno)
(2653,check_provisioning(&sin, fd, ies.serviceident, ies.provver)
(2654,if (iaxs[fr->callno]->owner)
(2655,iaxs[fr->callno])
(2656,f.subclass.integer == IAX_COMMAND_POKE)
(2657,iaxs[fr->callno])
(2658,ast_channel_unref(bridged_chan)
(2659,iaxs)
(2660,if (!IAX_CALLENCRYPTED(iaxs[fr->callno])
(2661,if (f.subclass.integer == AST_CONTROL_BUSY)
(2662,mh->callno)
(2663,fr->ts)
(2664,pref)
(2665,for (var = ies.vars; var; var = var->next)
(2666,LOG_NOTICE)
(2667,f)
(2668,fr)
(2669,if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
(2670,if (ast_strlen_zero(iaxs[fr->callno]->secret)
(2671,"Immediately destroying %d, having received reject\\n")
(2672,&iaxsl[fr->callno])
(2673,integer)
(2674,new_peercallno)
(2675,fr->callno)
(2676,NULL)
(2677,fh)
(2678,fd)
(2679,ast_log(LOG_WARNING, "Rejected connect attempt.  No secret present while force encrypt enabled.\\n")
(2680,callno)
(2681,ies.causecode)
(2682,f.subclass.integer)
(2683,"reqonly")
(2684,callno)
(2685,ast_debug(1, "Really destroying %d, having been acked on final message\\n", call_to_destroy)
(2686,reg)
(2687,)
(2688,iaxs[fr->callno])
(2689,fr->callno)
(2690,)
(2691,iaxs[fr->callno]->state)
(2692,fr->callno)
(2693,prefs)
(2694,ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\\n")
(2695,callno)
(2696,ies)
(2697,)
(2698,f)
(2699,subclass)
(2700,if (registry_rerequest(&ies, fr->callno, &sin)
(2701,ast_aes_set_decrypt_key((unsigned char *)
(2702,tmp1)
(2703,)
(2704,1)
(2705,(f.frametype != AST_FRAME_IAX)
(2706,break;)
(2707,csub)
(2708,id)
(2709,iaxs[fr->callno])
(2710,entries)
(2711,iaxs[fr->callno]->last)
(2712,c)
(2713,fr->callno)
(2714,1)
(2715,iaxs)
(2716,&f)
(2717,ast_mutex_unlock(&iaxsl[fr->callno])
(2718,"Host %s failed to authenticate as %s\\n")
(2719,callno)
(2720,iaxs[fr->callno])
(2721,ast_channel_name(bridged_chan)
(2722,f.subclass)
(2723,ts)
(2724,)
(2725,ies.codec_prefs)
(2726,ied0)
(2727,iaxs[fr->callno])
(2728,fr->callno)
(2729,*mh)
(2730,if (ies.provverpres && ies.serviceident && sin.sin_addr.s_addr)
(2731,owner)
(2732,if (iaxs[fr->callno]->transferring)
(2733,iaxs)
(2734,TRANSFER_MREADY)
(2735,fr->callno)
(2736,iaxs[iaxs[fr->callno]->bridgecallno]->owner)
(2737,fr->callno)
(2738,fr->callno)
(2739,IAX_FLAG_RETRANS)
(2740,IAX_STATE_STARTED)
(2741,!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(2742,ies)
(2743,TRANSFER_READY)
(2744,ies)
(2745,peer_unref(peer)
(2746,iaxs)
(2747,iaxs[fr->callno])
(2748,&ied0)
(2749,ast_verb(3, "Channel \'%s\' ready to transfer\\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(2750,ies)
(2751,fr->callno)
(2752,ies)
(2753,32)
(2754,fr)
(2755,orignative)
(2756,f)
(2757,sin_port)
(2758,callno)
(2759,if (format)
(2760,iaxsl[fr->callno])
(2761,fh->csub)
(2762,tmp3)
(2763,)
(2764,iaxs[fr->callno])
(2765,iaxs[fr->callno]->lag)
(2766,ies.calltokendata)
(2767,cur->retries = -1)
(2768,cur->retries)
(2769,fr->callno)
(2770,fr->callno)
(2771,fr)
(2772,fr)
(2773,varlist)
(2774,fr)
(2775,)
(2776,callno)
(2777,f.frametype = AST_FRAME_VIDEO)
(2778,ied0)
(2779,callno)
(2780,next)
(2781,callno)
(2782,IAX_IE_CALLNO)
(2783,var)
(2784,fr)
(2785,f.subclass)
(2786,iaxs[fr->callno]->transferring)
(2787,iaxs[fr->callno])
(2788,ast_channel_caller(iaxs[fr->callno]->owner)
(2789,sin_addr)
(2790,state)
(2791,iaxs[fr->callno])
(2792,iax2_getformatname_multiple(tmp, sizeof(tmp)
(2793,vars)
(2794,IAX_COMMAND_ACK)
(2795,host_pref_buf)
(2796,IAX_DELAYPBXSTART)
(2797,1)
(2798,iaxs)
(2799,data_size)
(2800,"Ooh, video format changed to %s\\n")
(2801,callno)
(2802,tmp1)
(2803,ies.vars = NULL)
(2804,frametype)
(2805,var = var->next)
(2806,iaxsl[call_to_destroy])
(2807,VERBOSE_PREFIX_4)
(2808,ntohs(fh->dcallno)
(2809,ies)
(2810,ast_verb(3, "Accepting DIAL from %s, formats = %s\\n",\n\\n\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(2811,f.frametype)
(2812,fr->ts)
(2813,fr)
(2814,fr->callno)
(2815,fh->iseqno + 1)
(2816,)
(2817,iax2_variable_datastore_info)
(2818,callno)
(2819,integer)
(2820,fr->callno)
(2821,char *)
(2822,fr->callno)
(2823,iaxs[fr->callno])
(2824,if (strcasecmp(iaxs[fr->callno]->exten, "TBD")
(2825,"Hold")
(2826,fr)
(2827,iaxs)
(2828,fr)
(2829,subclass)
(2830,fh->type == AST_FRAME_IAX &&\n\\n\\t\\t\\t(fh->csub == IAX_COMMAND_HANGUP\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_REJECT\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_REGREJ\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_TXREJ)
(2831,ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
(2832,"ChannelType: IAX2\\r\\nUsername: %s\\r\\nStatus: Rejected\\r\\nCause: %s\\r\\n")
(2833,ies)
(2834,fr->callno)
(2835,iaxs[fr->callno]->last = fr->ts)
(2836,fr->callno)
(2837,iaxs[fr->callno])
(2838,if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
(2839,ied0)
(2840,peer->pokeexpire)
(2841,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK,\n\\n\\t\\t\\t\\t\\t\\t       fr->ts, NULL, 0, fr->iseqno)
(2842,iaxs[fr->callno]->rprefs)
(2843,ast_debug(1, "Simulating frame ts resync, was %u now %u\\n", fr->ts, fr->ts + test_resync)
(2844,1)
(2845,iaxs[fr->callno])
(2846,orignative = ast_format_cap_destroy(orignative)
(2847,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(2848,ast_inet_ntoa(sin.sin_addr)
(2849,case IAX_COMMAND_ACK:)
(2850,prev = var)
(2851,1)
(2852,iaxs)
(2853,)
(2854,fr->callno)
(2855,ast_variables_destroy(ies.vars)
(2856,provverpres)
(2857,if (iaxdebug)
(2858,fr)
(2859,if (((f.subclass.integer != IAX_COMMAND_INVAL)
(2860,f)
(2861,iaxs)
(2862,sin)
(2863,fr->callno)
(2864,ast_debug(1, "Async goto of \'%s\' to \'%s@%s\' started\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\tast_channel_name(bridged_chan)
(2865,-1)
(2866,iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_FACILITY_NOT_SUBSCRIBED)
(2867,callno)
(2868,IAX_IE_CALLNO)
(2869,thread->buf + sizeof(*vh)
(2870,iaxs[fr->callno]->peercallno)
(2871,iaxs)
(2872,3)
(2873,iaxs)
(2874,)
(2875,IAX_CODEC_NOPREFS)
(2876,)
(2877,fr)
(2878,fr->callno)
(2879,tmp1)
(2880,ast_format_set_video_mark(&f.subclass.format)
(2881,1)
(2882,iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension")
(2883,iaxs[fr->callno])
(2884,fr->callno)
(2885,ied1)
(2886,ies.cause)
(2887,peer->pokeexpire)
(2888,iaxs[fr->callno]->owner)
(2889,fr)
(2890,)
(2891,callno)
(2892,frametype)
(2893,iaxs[fr->callno])
(2894,0)
(2895,callno)
(2896,meta)
(2897,callno)
(2898,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(2899,0)
(2900,AST_FRAME_IAX)
(2901,NULL)
(2902,ied0)
(2903,f)
(2904,transfer)
(2905,)
(2906,ies.provverpres && ies.serviceident && sin.sin_addr.s_addr)
(2907,callno)
(2908,f.subclass.integer != IAX_COMMAND_ACK)
(2909,entries)
(2910,callno)
(2911,callno)
(2912,dcallno)
(2913,f)
(2914,fr)
(2915,iaxs)
(2916,peercallno)
(2917,callno)
(2918,ts)
(2919,f.subclass)
(2920,iaxs)
(2921,transferring)
(2922,f.subclass)
(2923,&iaxsl[fr->callno])
(2924,ied1)
(2925,subclass)
(2926,vh)
(2927,if (ast_bridged_channel(iaxs[fr->callno]->owner)
(2928,sin_addr)
(2929,iaxs[fr->callno]->peerformat)
(2930,IAX_COMMAND_REGREL)
(2931,iaxs[iaxs[fr->callno]->bridgecallno])
(2932,callno)
(2933,sin_addr)
(2934,pos)
(2935,callno)
(2936,fr)
(2937,ts)
(2938,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
(2939,f.subclass)
(2940,sin.sin_addr)
(2941,username)
(2942,vh->ts)
(2943,iaxs)
(2944,rprefs)
(2945,iaxs)
(2946,iaxs)
(2947,caller_pref_buf)
(2948,iaxs[fr->callno])
(2949,memset(fr, 0, sizeof(*fr)
(2950,callno)
(2951,callno)
(2952,iaxs[fr->callno])
(2953,iaxs[fr->callno])
(2954,IAX_IE_CAUSECODE)
(2955,tmpfmt)
(2956,fr)
(2957,iaxs[fr->callno])
(2958,vars)
(2959,lastms)
(2960,fr)
(2961,if (res < sizeof(*mh)
(2962,iaxs[fr->callno])
(2963,if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
(2964,VERBOSE_PREFIX_4)
(2965,)
(2966,iaxs[fr->callno])
(2967,owner)
(2968,iaxs[fr->callno])
(2969,fr->callno)
(2970,)
(2971,peerformat)
(2972,var)
(2973,!format)
(2974,thread->buf)
(2975,iaxs[fr->callno])
(2976,&ied0)
(2977,)
(2978,fh->csub == IAX_COMMAND_REJECT\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_REGREJ\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_TXREJ)
(2979,fr)
(2980,callno)
(2981,break;)
(2982,sizeof(ied1)
(2983,type)
(2984,iaxsl[fr->callno])
(2985,iaxs)
(2986,codec_prefs)
(2987,s_addr)
(2988,AST_FRAME_VOICE)
(2989,callno)
(2990,f.subclass.integer)
(2991,sin.sin_addr)
(2992,prev)
(2993,historicms)
(2994,callno)
(2995,fr)
(2996,callno)
(2997,iaxs[fr->callno])
(2998,var = var->next)
(2999,buf)
(3000,variablestore)
(3001,ast_debug(1, "Ooh, voice format changed to \'%s\'\\n", ast_getformatname(&f.subclass.format)
(3002,iaxs)
(3003,iaxsl)
(3004,callno)
(3005,ies.vars)
(3006,memset(&ied0, 0, sizeof(ied0)
(3007,variablestore->data)
(3008,var)
(3009,iaxs[fr->callno])
(3010,iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
(3011,IAX_RECVCONNECTEDLINE)
(3012,1)
(3013,integer)
(3014,fr)
(3015,1)
(3016,addr)
(3017,fr)
(3018,(unsigned char)
(3019,fr)
(3020,iaxs)
(3021,iaxs)
(3022,fr->callno)
(3023,fr)
(3024,iaxs[fr->callno])
(3025,callno)
(3026,fr->callno)
(3027,ied0)
(3028,variablestore)
(3029,varlist)
(3030,ied1)
(3031,iseqno)
(3032,callno)
(3033,fr->callno)
(3034,fr)
(3035,f.frametype == AST_FRAME_IAX)
(3036,-1)
(3037,var->next)
(3038,iaxs[fr->callno])
(3039,sin.sin_addr)
(3040,IAX_STATE_STARTED)
(3041,iaxvars)
(3042,f.subclass.integer)
(3043,return 1;)
(3044,ts)
(3045,TRANSFER_MBEGIN)
(3046,&pingied)
(3047,using_prefs)
(3048,vars)
(3049,)
(3050,iaxs[fr->callno])
(3051,sizeof(*varlist)
(3052,IAX_STATE_STARTED)
(3053,fr->callno)
(3054,iaxs[fr->callno])
(3055,send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, pingied.buf, pingied.pos, -1)
(3056,scallno)
(3057,variablestore)
(3058,-1)
(3059,f.samples)
(3060,id)
(3061,f.frametype == AST_FRAME_VOICE)
(3062,callno)
(3063,ast_log(LOG_NOTICE, "Packet Decrypt Failed!\\n")
(3064,ied0.buf)
(3065,iaxs)
(3066,AST_FRAME_VIDEO)
(3067,owner)
(3068,callno)
(3069,state)
(3070,ast_party_id_presentation(&connected.id)
(3071,if (iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)
(3072,f.frametype)
(3073,fr)
(3074,pref = iaxs[fr->callno]->rprefs)
(3075,NULL)
(3076,fr)
(3077,sin_addr)
(3078,format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0)
(3079,break;)
(3080,iaxs[fr->callno])
(3081,var)
(3082,fr)
(3083,fr)
(3084,)
(3085,iaxs[fr->callno])
(3086,iaxs)
(3087,if (ies.causecode > 9)
(3088,if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(3089,iaxs[fr->callno])
(3090,f.datalen)
(3091,sizeof(ied0)
(3092,iaxs[fr->callno]->owner)
(3093,!iaxs[fr->callno])
(3094,f)
(3095,data_size += 3)
(3096,sin.sin_port)
(3097,fr->callno)
(3098,f.subclass.integer != IAX_COMMAND_TXACC)
(3099,iaxs[fr->callno])
(3100,callno)
(3101,cid_num = ast_strdupa(iaxs[fr->callno]->cid_num)
(3102,ast_format_set_video_mark(&f.subclass.format)
(3103,iaxs[fr->callno])
(3104,fr->callno)
(3105,fr->callno)
(3106,iaxs[fr->callno]->calling_pres = ast_party_id_presentation(&connected.id)
(3107,IAX_STATE_TBD)
(3108,iaxs[fr->callno]->addr.sin_addr)
(3109,fr->callno)
(3110,inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(3111,iaxs)
(3112,str)
(3113,iaxs[fr->callno]->oseqno)
(3114,callno)
(3115,NULL)
(3116,iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno)
(3117,iaxs)
(3118,&ies)
(3119,peer)
(3120,cacheable)
(3121,LOG_NOTICE)
(3122,fr)
(3123,fr)
(3124,return 1;)
(3125,fr->callno)
(3126,cid_num)
(3127,capability)
(3128,"Accepted AUTHENTICATED TBD call from %s\\n")
(3129,-1)
(3130,"Rejected connect attempt from %s, request \'%s@%s\' does not exist\\n")
(3131,callno)
(3132,case IAX_COMMAND_DPREQ:)
(3133,varlist)
(3134,f.frametype != AST_FRAME_VOICE)
(3135,fr->callno)
(3136,LOG_WARNING)
(3137,ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,\n\\n\\t\\t\\t\\t\\t\\t  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
(3138,callno)
(3139,(struct ast_iax2_video_hdr *)
(3140,fr->ts)
(3141,fr->callno)
(3142,format)
(3143,minivid)
(3144,integer)
(3145,IAX_STATE_AUTHENTICATED)
(3146,call_to_destroy = 0)
(3147,fr->callno)
(3148,f.frametype = fh->type)
(3149,callno)
(3150,&pref)
(3151,fr)
(3152,&sin)
(3153,fr->ts = (iaxs[fr->callno]->last & 0xFFFF0000L)
(3154,)
(3155,IAX_CODEC_NOCAP)
(3156,iaxs[fr->callno])
(3157,iaxs[fr->callno])
(3158,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(3159,callno)
(3160,ies.vars)
(3161,"Peer %s: got pong, lastms %d, historicms %d, maxms %d\\n")
(3162,ies)
(3163,f.datalen)
(3164,fr->callno)
(3165,f.subclass.integer)
(3166,fr->oseqno)
(3167,fr)
(3168,ies)
(3169,iaxs[fr->callno])
(3170,if (ntohs(mh->callno)
(3171,var)
(3172,fr->callno)
(3173,if (iaxs[fr->callno]->owner)
(3174,if (iaxdebug)
(3175,callno)
(3176,)
(3177,regstate)
(3178,ts)
(3179,iaxs[fr->callno])
(3180,ptr)
(3181,callno)
(3182,if (authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)
(3183,if (iaxdebug)
(3184,f)
(3185,fr->callno)
(3186,iaxs[fr->callno])
(3187,ied0.pos)
(3188,IAX_COMMAND_TXCNT)
(3189,iaxs[fr->callno]->prefs)
(3190,0)
(3191,iax_pvt_callid_get(fr->callno)
(3192,callno)
(3193,break;)
(3194,IAX_COMMAND_INVAL)
(3195,sizeof(ied0)
(3196,fr->callno)
(3197,name)
(3198,iaxs[fr->callno]->owner)
(3199,callno)
(3200,if (f.frametype == AST_FRAME_IAX)
(3201,format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1)
(3202,res = thread->buf_len)
(3203,ies.username ? ies.username : "<unknown>")
(3204,(struct ast_iax2_meta_hdr *)
(3205,fr->callno)
(3206,-1)
(3207,&ied0)
(3208,&f.subclass.format)
(3209,callno)
(3210,addr)
(3211,res - 1)
(3212,iaxs)
(3213,((f.subclass.integer != IAX_COMMAND_TXCNT)
(3214,var)
(3215,"Simulating frame ts resync, was %u now %u\\n")
(3216,peer->pokeexpire)
(3217,ast_test_flag64(iaxs[fr->callno], IAX_TRUNK)
(3218,fr)
(3219,ies.format)
(3220,iaxs)
(3221,&sin)
(3222,fr->iseqno >= iaxs[fr->callno]->rseqno)
(3223,fr)
(3224,iaxs[fr->callno])
(3225,owner)
(3226,ast_free(prev)
(3227,c)
(3228,transferring)
(3229,iaxs)
(3230,&iaxsl[fr->callno])
(3231,fr->ts += test_resync)
(3232,IAX_STATE_STARTED | IAX_STATE_TBD)
(3233,owner)
(3234,f.mallocd = 0)
(3235,iaxs[fr->callno])
(3236,(f.frametype == AST_FRAME_VIDEO)
(3237,fr->callno)
(3238,ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\\n")
(3239,iaxs[fr->callno]->state)
(3240,fr->callno)
(3241,iaxs[fr->callno]->state)
(3242,0)
(3243,fr)
(3244,ast_verb(3, "Attempting media bridge of %s and %s\\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(3245,)
(3246,f)
(3247,f)
(3248,fr->callno)
(3249,fr->callno)
(3250,ast_channel_hangupcause_hash_set(iaxs[fr->callno]->owner, cause_code, data_size)
(3251,callno)
(3252,sizeof(caller_pref_buf)
(3253,iaxs[fr->callno])
(3254,&res)
(3255,bridged_chan)
(3256,f.frametype != AST_FRAME_IAX)
(3257,IAX_FLAG_FULL)
(3258,ied0)
(3259,)
(3260,callno)
(3261,format)
(3262,break;)
(3263,AST_FRAME_IAX)
(3264,1)
(3265,fr)
(3266,frametype)
(3267,)
(3268,fr)
(3269,IAX_COMMAND_FWDOWNL)
(3270,ast_debug(1, "I have IAX variables, but they were not processed\\n")
(3271,pos)
(3272,ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(3273,callno)
(3274,update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)
(3275,if (ast_channel_readformat(iaxs[fr->callno]->owner)
(3276,if (!iaxs[fr->callno])
(3277,fh->scallno)
(3278,calling_pres)
(3279,ast_channel_name(iaxs[fr->callno]->owner)
(3280,sin)
(3281,if (!iaxs[fr->callno])
(3282,ied0)
(3283,f)
(3284,ied0)
(3285,struct ast_iax2_meta_hdr *)
(3286,0)
(3287,iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)
(3288,ast_variables_destroy(ies.vars)
(3289,*c = NULL)
(3290,if (decrypted)
(3291,iaxs[fr->callno]->state)
(3292,buf)
(3293,peer->lastms)
(3294,&fr->af)
(3295,1)
(3296,iaxs)
(3297,ied0)
(3298,owner)
(3299,iaxs[fr->callno])
(3300,LOG_ERROR)
(3301,ast_debug(1, "Async goto not applicable on call %d\\n", fr->callno)
(3302,"reqonly")
(3303,iax2_allow_new(f.frametype, f.subclass.integer, 1)
(3304,iaxs[fr->callno])
(3305,&iaxs[fr->callno]->state)
(3306,iaxs[fr->callno]->owner)
(3307,iaxs[fr->callno])
(3308,fr)
(3309,vh)
(3310,sizeof(caller_pref_buf)
(3311,connected.id)
(3312,send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied1.buf, ied1.pos, -1)
(3313,sin.sin_family)
(3314,fr)
(3315,)
(3316,&iaxs[fr->callno]->state)
(3317,fr)
(3318,f.subclass.integer)
(3319,decrypted = 0)
(3320,&iaxsl[fr->callno])
(3321,iaxs)
(3322,"Memory allocation error while processing IAX2 variables\\n")
(3323,iaxs)
(3324,callno)
(3325,ies)
(3326,tmp3)
(3327,data)
(3328,id)
(3329,fr->callno)
(3330,)
(3331,case IAX_COMMAND_NEW:)
(3332,&iaxsl[fr->callno])
(3333,strcasecmp(iaxs[fr->callno]->exten, "TBD")
(3334,fr)
(3335,fr->callno)
(3336,iaxs[fr->callno])
(3337,"No authority found")
(3338,connected.id.number.presentation = iaxs[fr->callno]->calling_pres)
(3339,fr)
(3340,callno)
(3341,var)
(3342,callno)
(3343,ied0.buf)
(3344,fr)
(3345,"TBD")
(3346,if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)
(3347,tmp)
(3348,prev)
(3349,callno)
(3350,tmpfmt)
(3351,f.subclass.integer)
(3352,callno)
(3353,name)
(3354,iaxs[fr->callno] && iaxs[fr->callno]->owner)
(3355,iaxs)
(3356,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(3357,ied0)
(3358,inheritance)
(3359,iaxs[fr->callno]->transfer)
(3360,thread->buf)
(3361,fr->callno)
(3362,fr->callno)
(3363,fr)
(3364,username)
(3365,fr->callno)
(3366,ies.provverpres)
(3367,fr)
(3368,fr->callno)
(3369,ies)
(3370,vars)
(3371,context)
(3372,if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
(3373,callno)
(3374,strcmp(iaxs[fr->callno]->exten, "TBD")
(3375,memset(&pref, 0, sizeof(pref)
(3376,f.subclass.integer)
(3377,iaxs)
(3378,f)
(3379,transferring)
(3380,cur)
(3381,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
(3382,fr)
(3383,f.frametype == AST_FRAME_VIDEO)
(3384,if (new_peercallno && new_peercallno != iaxs[fr->callno]->peercallno)
(3385,fr)
(3386,callno)
(3387,peer)
(3388,thread->buf_len)
(3389,)
(3390,fr->callno)
(3391,iaxs)
(3392,unsigned char *)
(3393,if (iaxdebug)
(3394,fr)
(3395,data_size)
(3396,if ((vh->zeros == 0)
(3397,iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)
(3398,fr)
(3399,fr)
(3400,ast_inet_ntoa(sin.sin_addr)
(3401,callno)
(3402,serviceident)
(3403,peer->historicms)
(3404,fr->callno)
(3405,ast_mutex_unlock(&iaxsl[fr->callno])
(3406,ied0)
(3407,fr->callno)
(3408,fr->iseqno)
(3409,&ied1)
(3410,iaxs)
(3411,fd)
(3412,IAX_STATE_STARTED | IAX_STATE_TBD)
(3413,iaxs[fr->callno]->pingtime)
(3414,fr->callno)
(3415,)
(3416,fr->callno)
(3417,fr)
(3418,ast_debug(1, "For call=%d, set last=%d\\n", fr->callno, fr->ts)
(3419,iaxs[fr->callno]->transferring)
(3420,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(3421,iaxs)
(3422,iaxs)
(3423,iaxs)
(3424,fr)
(3425,iaxs)
(3426,callno)
(3427,ast_clear_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)
(3428,TRANSFER_BEGIN)
(3429,"caller")
(3430,f)
(3431,iaxs[fr->callno])
(3432,fr->callno)
(3433,sizeof(*varlist)
(3434,dp)
(3435,fr)
(3436,&ied0)
(3437,return 1;)
(3438,)
(3439,tmp)
(3440,fr)
(3441,fr->callno)
(3442,if (variablestore)
(3443,f.subclass.integer != IAX_COMMAND_TXACC)
(3444,IAX_COMMAND_ACK)
(3445,peer->historicms = iaxs[fr->callno]->pingtime)
(3446,iaxs[fr->callno]->transferring = 0)
(3447,peer)
(3448,callno)
(3449,iaxs)
(3450,fr)
(3451,1)
(3452,context)
(3453,prev)
(3454,fr->callno)
(3455,f)
(3456,callno)
(3457,f.data.ptr)
(3458,AST_FRAME_CONTROL)
(3459,iaxs[fr->callno]->capability)
(3460,IAX_STATE_STARTED)
(3461,iaxs[fr->callno]->owner)
(3462,IAX_COMMAND_ACK)
(3463,id)
(3464,fh->csub)
(3465,AST_FRAME_IAX)
(3466,pref = iaxs[fr->callno]->prefs)
(3467,"caller")
(3468,iaxs)
(3469,iaxs[fr->callno])
(3470,fr)
(3471,*vh)
(3472,f)
(3473,iaxs)
(3474,iaxs[fr->callno])
(3475,fr->callno)
(3476,callno)
(3477,f.subclass == IAX_COMMAND_AUTHREQ)
(3478,ast_mutex_unlock(&iaxsl[fr->callno])
(3479,fr)
(3480,iaxs[fr->callno])
(3481,-1)
(3482,f.subclass)
(3483,iaxs[fr->callno]->first_iax_message = f.subclass.integer)
(3484,fr->callno)
(3485,iaxs[fr->callno])
(3486,pos)
(3487,iaxs)
(3488,fr->callno)
(3489,ies)
(3490,ied0.buf)
(3491,fh->scallno)
(3492,iaxs[fr->callno]->prefs)
(3493,ies)
(3494,sizeof(*vh)
(3495,f)
(3496,iaxs[fr->callno])
(3497,iaxs[iaxs[fr->callno]->bridgecallno]->owner)
(3498,iaxs[fr->callno]->owner)
(3499,)
(3500,buf)
(3501,ntohs(mh->callno)
(3502,)
(3503,callno)
(3504,mount_callid)
(3505,!inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(3506,if (iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)
(3507,callno)
(3508,iax_frame_wrap(fr, &f)
(3509,)
(3510,iaxs[fr->callno])
(3511,fr)
(3512,fr)
(3513,ies.causecode)
(3514,iaxs[fr->callno]->peerformat)
(3515,pokeexpire)
(3516,!format)
(3517,ied1)
(3518,f.subclass.format)
(3519,)
(3520,ies.cause ? ies.cause : "<unknown>")
(3521,(f.subclass.integer != IAX_COMMAND_ACK)
(3522,iaxs[fr->callno])
(3523,pingtime)
(3524,fr)
(3525,ied1)
(3526,f.subclass.integer != IAX_COMMAND_LAGRP)
(3527,"disabled")
(3528,f.subclass.integer)
(3529,if (iaxs[fr->callno]->transferring == TRANSFER_READY)
(3530,ntohs(fh->scallno)
(3531,ast_inet_ntoa(sin.sin_addr)
(3532,IAX_QUELCH)
(3533,)
(3534,0)
(3535,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(3536,fr->callno)
(3537,ies)
(3538,"TBD")
(3539,integer)
(3540,ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf)
(3541,sin)
(3542,exten)
(3543,iaxs)
(3544,f.frametype == AST_FRAME_IAX)
(3545,tmp3)
(3546,fr->callno)
(3547,-1)
(3548,fr->callno)
(3549,ies)
(3550,fr)
(3551,call_to_destroy = fr->callno)
(3552,f.subclass)
(3553,voiceformat)
(3554,f)
(3555,ies)
(3556,historicms)
(3557,fh)
(3558,if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(3559,(ntohs(vh->ts)
(3560,ast_var_assign(var->name, var->value)
(3561,fr->callno)
(3562,reg)
(3563,0)
(3564,vars)
(3565,tmp1)
(3566,dcallno = ntohs(fh->dcallno)
(3567,sin)
(3568,)
(3569,callno)
(3570,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED)
(3571,iaxs[fr->callno])
(3572,)
(3573,var)
(3574,AST_FRAME_IAX)
(3575,*prev = NULL)
(3576,~IAX_FLAG_RETRANS)
(3577,AST_FRAME_IAX)
(3578,f.frametype)
(3579,iaxs)
(3580,sizeof(*vh)
(3581,fr)
(3582,ies)
(3583,fr->iseqno)
(3584,res > 0)
(3585,exten)
(3586,fh)
(3587,fr)
(3588,(f.subclass.integer != IAX_COMMAND_ACK)
(3589,LOG_WARNING)
(3590,strcasecmp(iaxs[fr->callno]->exten, "TBD")
(3591,fd)
(3592,variablestore->inheritance)
(3593,iaxsl[fr->callno])
(3594,ied0)
(3595,str)
(3596,thread->buf + sizeof(*mh)
(3597,context)
(3598,iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
(3599,next)
(3600,ast_channel_caller(iaxs[fr->callno]->owner)
(3601,if (f.frametype == AST_FRAME_VIDEO)
(3602,break;)
(3603,first_iax_message)
(3604,fh->csub)
(3605,iaxs[fr->callno]->state)
(3606,capability)
(3607,using_prefs)
(3608,iaxsl[fr->callno])
(3609,)
(3610,f.frametype != AST_FRAME_IAX)
(3611,iaxs[fr->callno]->addr)
(3612,)
(3613,tmp)
(3614,iaxs[fr->callno]->bridgecallno)
(3615,&ied1)
(3616,fr->iseqno)
(3617,iaxs[fr->callno])
(3618,AST_FRAME_IAX)
(3619,AST_FRAME_IAX)
(3620,"Rejecting packet from \'%s.%d\' that is flagged as a video frame but is too short\\n")
(3621,ptr)
(3622,c)
(3623,0)
(3624,f)
(3625,iaxs[fr->callno]->lag = ts - fr->ts)
(3626,fr->callno)
(3627,fr)
(3628,fr)
(3629,f.subclass.format)
(3630,iaxs[fr->callno]->rprefs)
(3631,if (iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr)
(3632,presentation)
(3633,bridged_chan)
(3634,f)
(3635,callno)
(3636,callno)
(3637,callno)
(3638,f.frametype == AST_FRAME_VIDEO)
(3639,subclass)
(3640,!iaxs[fr->callno])
(3641,varlist)
(3642,"")
(3643,f.subclass)
(3644,af)
(3645,callno)
(3646,iaxs[fr->callno])
(3647,thread->buf[res - 1])
(3648,ied0)
(3649,sizeof(ied1)
(3650,fr->af.subclass)
(3651,connected.id.number.presentation)
(3652,callno)
(3653,NULL)
(3654,datalen)
(3655,number)
(3656,connected)
(3657,c)
(3658,"Datalen < 0?\\n")
(3659,integer)
(3660,)
(3661,f.subclass.format)
(3662,-1)
(3663,callno)
(3664,varlist)
(3665,iaxs[iaxs[fr->callno]->bridgecallno])
(3666,ies.vars)
(3667,addr)
(3668,sin_addr)
(3669,if (iaxs[fr->callno]->owner)
(3670,fr->callno)
(3671,fr)
(3672,iaxs)
(3673,ast_variables_destroy(ies.vars)
(3674,addr)
(3675,fr->callno)
(3676,id)
(3677,fr)
(3678,callno)
(3679,iaxs)
(3680,iaxsl)
(3681,fr)
(3682,f)
(3683,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(3684,sin_addr)
(3685,data_size - sizeof(*cause_code)
(3686,serviceident)
(3687,res - sizeof(*fh)
(3688,f.subclass.integer)
(3689,iaxs)
(3690,integer)
(3691,inheritance)
(3692,thread->buf)
(3693,ast_channel_name(bridged_chan)
(3694,!iaxs[fr->callno])
(3695,oseqno)
(3696,thread->buf)
(3697,outoforder)
(3698,"Format for call is %s\\n")
(3699,fr)
(3700,IAX_PROVISION)
(3701,fr->callno)
(3702,ies)
(3703,"No best format in %s???\\n")
(3704,NULL)
(3705,ts)
(3706,fr)
(3707,fr->oseqno = fh->oseqno)
(3708,iaxs)
(3709,ast_inet_ntoa(sin.sin_addr)
(3710,owner)
(3711,variablestore && varlist)
(3712,var->value)
(3713,iaxs)
(3714,retries)
(3715,iaxs[fr->callno])
(3716,connected)
(3717,iaxs[fr->callno])
(3718,fr)
(3719,f.mallocd)
(3720,f)
(3721,iaxs)
(3722,ied0.pos)
(3723,var)
(3724,fr->callno)
(3725,iaxs[fr->callno])
(3726,transferring)
(3727,0)
(3728,*meta = (struct ast_iax2_meta_hdr *)
(3729,iaxs[fr->callno])
(3730,iaxs[fr->callno]->pingtime)
(3731,sizeof(tmp3)
(3732,sin)
(3733,host_pref_buf)
(3734,ied1)
(3735,callno)
(3736,IAX_DELAYPBXSTART)
(3737,f)
(3738,fr->callno)
(3739,if (iaxs[fr->callno])
(3740,cid_num)
(3741,if ((cur = AST_LIST_LAST(&frame_queue[fr->callno])
(3742,&iaxsl[fr->callno])
(3743,fr)
(3744,fr->callno)
(3745,subclass)
(3746,iaxs[fr->callno])
(3747,res)
(3748,ast_mutex_lock(&iaxsl[fr->callno])
(3749,bridgecallno)
(3750,fh)
(3751,iaxs[fr->callno]->exten)
(3752,fr)
(3753,callno)
(3754,fr->ts)
(3755,oseqno)
(3756,frametype)
(3757,subclass)
(3758,save_rr(fr, &ies)
(3759,1)
(3760,iaxs)
(3761,if (iaxs[fr->callno]->bridgecallno)
(3762,if (f.datalen < 0)
(3763,)
(3764,varlist)
(3765,var)
(3766,callno)
(3767,iaxs[fr->callno]->bridgecallno)
(3768,iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->callno)
(3769,if ((c = iaxs[fr->callno]->owner)
(3770,ies.calltokendata)
(3771,owner)
(3772,f.subclass.integer)
(3773,callno)
(3774,callno)
(3775,sin)
(3776,ied0)
(3777,*fh)
(3778,iaxs)
(3779,"I can haz IAX vars?\\n")
(3780,iaxs)
(3781,fr->callno)
(3782,dp)
(3783,ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner)
(3784,)
(3785,iaxs)
(3786,ies)
(3787,fr->callno)
(3788,f)
(3789,owner)
(3790,fr)
(3791,0)
(3792,var->next)
(3793,fr)
(3794,iaxsl)
(3795,fr)
(3796,fr)
(3797,fd)
(3798,fr)
(3799,"Memory allocation error while processing IAX2 variables\\n")
(3800,9)
(3801,ies)
(3802,prev)
(3803,subclass)
(3804,iaxs)
(3805,callno)
(3806,cause_code = ast_alloca(data_size)
(3807,iaxs)
(3808,peer->historicms > peer->maxms)
(3809,new_callno)
(3810,vh)
(3811,if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(3812,callno)
(3813,fr)
(3814,memset(&ied1, 0, sizeof(ied1)
(3815,(vh->zeros == 0)
(3816,VERBOSE_PREFIX_4)
(3817,bridged_chan)
(3818,break;)
(3819,callno)
(3820,&iaxs[fr->callno]->rprefs)
(3821,iaxs[fr->callno])
(3822,iax2_getformatname_multiple(tmp, sizeof(tmp)
(3823,ast_inet_ntoa(sin.sin_addr)
(3824,callno)
(3825,f.datalen)
(3826,fr->callno)
(3827,f.subclass)
(3828,break;)
(3829,integer)
(3830,fr->callno)
(3831,ies.causecode)
(3832,&iaxs[fr->callno]->state)
(3833,data_size)
(3834,ies)
(3835,fr->callno)
(3836,ied0)
(3837,callno)
(3838,ast_mutex_unlock(&iaxsl[fr->callno])
(3839,f)
(3840,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(3841,iaxs[fr->callno])
(3842,pos)
(3843,subclass)
(3844,ast_log(LOG_WARNING, "Rejecting packet from \'%s.%d\' that is flagged as a full frame but is too short\\n", ast_inet_ntoa(sin.sin_addr)
(3845,if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(3846,iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(3847,AST_FRAME_VOICE)
(3848,iaxs)
(3849,secret)
(3850,ies)
(3851,callno)
(3852,ntohs(mh->callno)
(3853,)
(3854,ast_log(LOG_WARNING, "midget packet received (%d of %d min)
(3855,ies.vars)
(3856,AST_FRAME_IAX)
(3857,callno)
(3858,&fr->af)
(3859,fr)
(3860,bridgecallno)
(3861,(f.subclass.integer != IAX_COMMAND_INVAL)
(3862,iaxs)
(3863,IAX_COMMAND_TXREL)
(3864,iaxs)
(3865,ast_getformatname_multiple(tmp, sizeof(tmp)
(3866,)
(3867,f.frametype)
(3868,oseqno)
(3869,fr)
(3870,ies)
(3871,fr->callno)
(3872,sched)
(3873,0)
(3874,iaxs[fr->callno])
(3875,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability \'%s\'/\'%s\' incompatible with our capability \'%s\'.\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(3876,fr)
(3877,ies.serviceident)
(3878,peer)
(3879,iaxs[fr->callno]->transferring == TRANSFER_MREADY)
(3880,&iaxs[fr->callno]->rprefs)
(3881,AST_CONTROL_HOLD)
(3882,owner)
(3883,iaxs)
(3884,name)
(3885,f)
(3886,fr)
(3887,iax2_destroy(fr->callno)
(3888,ast_mutex_unlock(&iaxsl[fr->callno])
(3889,fr)
(3890,if (!(dp->flags & CACHE_FLAG_TRANSMITTED)
(3891,iaxs)
(3892,csub)
(3893,memset(&ied0, 0, sizeof(ied0)
(3894,iaxs[fr->callno]->peerformat)
(3895,if (!iaxs[fr->callno])
(3896,f.len = 0)
(3897,sizeof(pref)
(3898,dcallno)
(3899,ast_debug(1, "Peer %s: got pong, lastms %d, historicms %d, maxms %d\\n", peer->name, peer->lastms, peer->historicms, peer->maxms)
(3900,NEW_PREVENT)
(3901,context)
(3902,"TBD")
(3903,"Acking anyway\\n")
(3904,ts)
(3905,fr->callno)
(3906,connected)
(3907,fr->oseqno)
(3908,fr->callno)
(3909,)
(3910,pref)
(3911,fh->iseqno + 1)
(3912,VERBOSE_PREFIX_4)
(3913,NULL)
(3914,iax2_getformatname(iaxs[fr->callno]->peerformat)
(3915,&ied0)
(3916,0)
(3917,callno)
(3918,callno)
(3919,exten)
(3920,ied1.pos)
(3921,fr->callno)
(3922,strlen(moh_suggest)
(3923,fr)
(3924,iaxs[fr->callno])
(3925,iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability)
(3926,!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(3927,ies.devicetype)
(3928,&iaxsl[call_to_destroy])
(3929,buf)
(3930,fr->callno)
(3931,if (iaxdebug)
(3932,iaxs[fr->callno]->videoformat)
(3933,callno)
(3934,fr->callno)
(3935,fr)
(3936,fr->callno)
(3937,&iaxsl[fr->callno])
(3938,callno)
(3939,connected.id.name)
(3940,iaxs[fr->callno])
(3941,peer_ref(peer)
(3942,ast_mutex_unlock(&iaxsl[fr->callno])
(3943,integer)
(3944,fr->callno)
(3945,tmp2)
(3946,fh)
(3947,iaxs)
(3948,ied0)
(3949,iaxs[iaxs[fr->callno]->bridgecallno])
(3950,new_callno)
(3951,iaxs)
(3952,fr)
(3953,iaxsl[fr->callno])
(3954,case IAX_COMMAND_QUELCH:)
(3955,RET)
(3956,"mine")
(3957,1)
(3958,peer->pokefreqok)
(3959,f.samples = 0)
(3960,owner)
(3961,if (varlist)
(3962,iaxs)
(3963,ies.musiconhold)
(3964,format)
(3965,case IAX_COMMAND_RTKEY:)
(3966,callno)
(3967,sizeof(tmp)
(3968,if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
(3969,iaxs)
(3970,ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)
(3971,ied0)
(3972,fh)
(3973,iaxs[fr->callno])
(3974,memset(&ies, 0, sizeof(ies)
(3975,AST_FRAME_IAX)
(3976,ied0)
(3977,callno)
(3978,exten)
(3979,f.subclass.integer)
(3980,callno)
(3981,fr)
(3982,iaxs[fr->callno])
(3983,iaxs)
(3984,subclass)
(3985,(int)
(3986,iaxsl[fr->callno])
(3987,data_size)
(3988,if (ast_format_to_old_bitfield(&f.subclass.format)
(3989,AST_FRAME_VOICE)
(3990,fr->callno)
(3991,iaxs)
(3992,fr)
(3993,vars)
(3994,callno)
(3995,sin)
(3996,fr->callno)
(3997,ast_verb(3, "Accepted unauthenticated TBD call from %s\\n", ast_inet_ntoa(sin.sin_addr)
(3998,len)
(3999,"Peer \'%s\' is now REACHABLE! Time: %d\\n")
(4000,fr)
(4001,f.subclass.integer != IAX_COMMAND_INVAL)
(4002,iaxs)
(4003,iaxs[fr->callno])
(4004,iaxs[fr->callno]->oseqno)
(4005,fr)
(4006,ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
(4007,callno)
(4008,if (decrypt_frame(fr->callno, fh, &f, &res)
(4009,iaxs)
(4010,fr->callno)
(4011,iaxdebug)
(4012,iaxs[fr->callno])
(4013,lastms)
(4014,ast_codec_pref_string(&iaxs[fr->callno]->prefs, host_pref_buf, sizeof(host_pref_buf)
(4015,1)
(4016,iaxs[fr->callno]->addr.sin_addr)
(4017,iseqno)
(4018,callno)
(4019,fr)
(4020,fh)
(4021,ts)
(4022,callno)
(4023,if (f.datalen)
(4024,transferring)
(4025,if (f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != \'\\0\')
(4026,iaxs[fr->callno])
(4027,(f.subclass.integer != IAX_COMMAND_TXACC)
(4028,fr)
(4029,case IAX_COMMAND_VNAK:)
(4030,ast_inet_ntoa(sin.sin_addr)
(4031,fr)
(4032,fr)
(4033,callno)
(4034,"mine")
(4035,iaxsl[fr->callno])
(4036,unsigned char)
(4037,id)
(4038,)
(4039,ntohs(fh->dcallno)
(4040,ies.vars)
(4041,pokefreqnotok)
(4042,iaxs[fr->callno])
(4043,iaxs[fr->callno]->callno)
(4044,IAX_COMMAND_REJECT)
(4045,NULL)
(4046,iaxs)
(4047,f.subclass == IAX_COMMAND_ACCEPT)
(4048,sin.sin_addr)
(4049,fr)
(4050,fr->callno)
(4051,fr)
(4052,iaxs)
(4053,iaxdebug)
(4054,ies)
(4055,"Rejected connect attempt from %s, requested/capability \'%s\'/\'%s\' incompatible with our capability \'%s\'.\\n")
(4056,iaxs[fr->callno])
(4057,bridged_chan = owner ? ast_bridged_channel(owner)
(4058,fr)
(4059,fr)
(4060,ast_log(LOG_NOTICE, "Peer \'%s\' is now TOO LAGGED (%d ms)
(4061,iaxs[fr->callno])
(4062,fh->csub)
(4063,ied1)
(4064,fr)
(4065,ies.vars = NULL)
(4066,f.subclass)
(4067,connected.id.name.str)
(4068,iaxs)
(4069,tmp)
(4070,f.subclass.integer == IAX_COMMAND_LAGRQ)
(4071,ntohs(mh->callno)
(4072,0)
(4073,iaxs)
(4074,sizeof(tmp1)
(4075,)
(4076,iseqno)
(4077,iaxs)
(4078,iaxs[fr->callno]->last)
(4079,)
(4080,fr->callno)
(4081,integer)
(4082,iaxsl)
(4083,fr)
(4084,iaxs)
(4085,iaxs[fr->callno])
(4086,ast_free(varlist)
(4087,iaxsl)
(4088,LOG_NOTICE)
(4089,fr->callno)
(4090,fr)
(4091,buf)
(4092,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(4093,transferring)
(4094,iaxs[fr->callno]->outkey)
(4095,fr->callno)
(4096,outkey)
(4097,AST_FRAME_VOICE)
(4098,*variablestore = NULL)
(4099,integer)
(4100,if (!iaxs[fr->callno])
(4101,fr)
(4102,callno)
(4103,IAX_COMMAND_ACK)
(4104,&iaxsl[fr->callno])
(4105,callno)
(4106,&iaxsl[fr->callno])
(4107,fr)
(4108,IAX_COMMAND_REJECT)
(4109,ies.calltokendata)
(4110,case IAX_COMMAND_UNSUPPORT:)
(4111,var = ies.vars)
(4112,fr)
(4113,cause_code)
(4114,fr->callno)
(4115,NULL)
(4116,ied1)
(4117,"Unable to negotiate codec")
(4118,&sin)
(4119,fr)
(4120,ntohs(mh->callno)
(4121,vars)
(4122,sin.sin_addr)
(4123,var)
(4124,f)
(4125,1)
(4126,f)
(4127,fr)
(4128,iaxsl[fr->callno])
(4129,!iaxs[fr->callno])
(4130,iaxs)
(4131,subclass)
(4132,if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
(4133,AST_FRAME_IAX)
(4134,f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1)
(4135,iaxs[fr->callno])
(4136,&ies)
(4137,ptr)
(4138,iaxs)
(4139,if(!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(4140,break;)
(4141,iaxs)
(4142,caller_pref_buf)
(4143,connected.id.number)
(4144,fr->ts = (iaxs[fr->callno]->last & 0xFFFF8000L)
(4145,sizeof(host_pref_buf)
(4146,3)
(4147,buf)
(4148,iaxs[fr->callno]->capability)
(4149,sin)
(4150,callno)
(4151,peer->historicms)
(4152,callno)
(4153,ast_frame_byteswap_be(&f)
(4154,fr)
(4155,pos)
(4156,fr)
(4157,iaxs)
(4158,name)
(4159,IAX_COMMAND_TXREL)
(4160,sin)
(4161,callno)
(4162,callno)
(4163,-1)
(4164,vars)
(4165,fr)
(4166,iaxs)
(4167,if (fr->callno > 0)
(4168,callno)
(4169,fh->csub >> 6)
(4170,fr)
(4171,tmp)
(4172,iaxs[fr->callno]->owner)
(4173,fr->callno)
(4174,iaxs[fr->callno]->owner)
(4175,iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(4176,&iaxsl[fr->callno])
(4177,sin_addr)
(4178,integer)
(4179,&iaxs[fr->callno]->state)
(4180,tmp2)
(4181,iaxs[fr->callno])
(4182,iaxs[iaxs[fr->callno]->bridgecallno]->owner)
(4183,secret)
(4184,ied0.buf)
(4185,iaxs)
(4186,fr)
(4187,iaxs[fr->callno])
(4188,pref)
(4189,ts)
(4190,fr->callno)
(4191,if (iaxs[fr->callno]->owner)
(4192,f.subclass)
(4193,&iaxs[fr->callno]->state)
(4194,"IAX2")
(4195,iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(4196,)
(4197,1)
(4198,ies.vars)
(4199,fr->callno)
(4200,LOG_NOTICE)
(4201,iaxs[fr->callno]->owner)
(4202,iaxs)
(4203,iaxs)
(4204,iaxs)
(4205,subclass)
(4206,iaxs[fr->callno])
(4207,(f.subclass.integer != IAX_COMMAND_TXREL)
(4208,sizeof(ied1)
(4209,fr->ts)
(4210,ast_variables_destroy(ies.vars)
(4211,peercapability)
(4212,ied0)
(4213,iaxs[fr->callno])
(4214,fr->callno)
(4215,"ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Lagged\\r\\nTime: %d\\r\\n")
(4216,1)
(4217,peer->pokeexpire == -1)
(4218,subclass)
(4219,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request \'%s@%s\' does not exist\\n", ast_inet_ntoa(sin.sin_addr)
(4220,ies)
(4221,f)
(4222,fr)
(4223,callno)
(4224,iaxs)
(4225,&f)
(4226,f)
(4227,iaxs)
(4228,TRANSFER_BEGIN)
(4229,fr)
(4230,iaxs[fr->callno]->error)
(4231,iax2_lock_owner(fr->callno)
(4232,)
(4233,f.subclass.integer)
(4234,frametype)
(4235,ast_devstate_changed(AST_DEVICE_UNAVAILABLE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name)
(4236,if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
(4237,fr->ts)
(4238,authdebug)
(4239,variablestore)
(4240,ts)
(4241,IAX_COMMAND_INVAL)
(4242,subclass)
(4243,IAX_TRUNK)
(4244,if (authdebug)
(4245,f.subclass)
(4246,iaxs[fr->callno]->peerformat)
(4247,strcpy(host_pref_buf, "disabled")
(4248,format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(4249,callno)
(4250,fr->callno)
(4251,&f.subclass.format)
(4252,&iaxs[fr->callno]->rprefs)
(4253,1)
(4254,if (test_resync)
(4255,ast_variables_destroy(ies.vars)
(4256,callno)
(4257,integer)
(4258,ied1)
(4259,iaxs)
(4260,ied0)
(4261,ies)
(4262,orignative)
(4263,ast_channel_readformat(iaxs[fr->callno]->owner)
(4264,ast_inet_ntoa(sin.sin_addr)
(4265,fr)
(4266,call_to_destroy)
(4267,using_prefs)
(4268,&ied1)
(4269,ast_channel_nativeformats(iaxs[fr->callno]->owner)
(4270,subclass)
(4271,sin_addr)
(4272,ied0.pos)
(4273,fr->callno)
(4274,pingtime)
(4275,thread->buf[res - 1] != \'\\0\')
(4276,iaxs)
(4277,if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
(4278,fr)
(4279,ies.vars)
(4280,callno)
(4281,chosenformat)
(4282,pbx_builtin_setvar_helper(owner, "BLINDTRANSFER", ast_channel_name(bridged_chan)
(4283,format)
(4284,NULL)
(4285,fr->callno)
(4286,sizeof(host_pref_buf)
(4287,if (f.frametype == AST_FRAME_VOICE)
(4288,ies)
(4289,fr)
(4290,fr)
(4291,calc_timestamp(iaxs[fr->callno], 0, &f)
(4292,iaxs[fr->callno]->owner)
(4293,tmp2)
(4294,iaxs[fr->callno]->rseqno = fr->iseqno)
(4295,fr)
(4296,iaxs[fr->callno]->prefs)
(4297,check_access(fr->callno, &sin, &ies)
(4298,f.frametype)
(4299,iaxs[fr->callno]->voiceformat > 0)
(4300,if (iaxs[fr->callno] && iaxs[fr->callno]->owner)
(4301,fr)
(4302,iaxs[fr->callno])
(4303,&pref)
(4304,cause_code->ast_cause)
(4305,0)
(4306,data_size += strlen(subclass)
(4307,AST_DEVICE_UNAVAILABLE)
(4308,integer)
(4309,iaxs[fr->callno]->transferring)
(4310,ied1)
(4311,iaxs[fr->callno])
(4312,if (iaxs[fr->callno] && ((mount_callid = iax_pvt_callid_get(fr->callno)
(4313,using_prefs)
(4314,subclass)
(4315,f.subclass)
(4316,)
(4317,break;)
(4318,fr)
(4319,peer->name)
(4320,mallocd)
(4321,ptr)
(4322,f.frametype != AST_FRAME_IAX)
(4323,ied1)
(4324,1)
(4325,iaxs)
(4326,iaxs[fr->callno]->capability)
(4327,&f)
(4328,callno)
(4329,fr)
(4330,sizeof(*fh)
(4331,fr->callno)
(4332,fr)
(4333,fr)
(4334,peer)
(4335,fr)
(4336,IAX_COMMAND_ACK)
(4337,peer->smoothing && (peer->lastms > -1)
(4338,fr)
(4339,fr)
(4340,ied0)
(4341,f.data.ptr = NULL)
(4342,iaxs[fr->callno]->reg->regstate)
(4343,codec_prefs)
(4344,oseqno)
(4345,iaxs[fr->callno])
(4346,authdebug)
(4347,fr->iseqno = fh->iseqno)
(4348,integer)
(4349,iaxs[fr->callno])
(4350,fr->callno)
(4351,fr->callno)
(4352,integer)
(4353,fr)
(4354,iaxs[fr->callno]->state)
(4355,fr)
(4356,fr)
(4357,fr)
(4358,capability)
(4359,ies)
(4360,1)
(4361,*moh_suggest = iaxs[fr->callno]->mohsuggest)
(4362,fr)
(4363,IAX_STATE_STARTED)
(4364,peer)
(4365,fr->callno)
(4366,call_to_destroy)
(4367,sizeof(tmp)
(4368,fr)
(4369,fr->callno)
(4370,send_command_transfer(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXACC, 0, NULL, 0)
(4371,callno)
(4372,fr->callno)
(4373,f)
(4374,)
(4375,iaxs[fr->callno])
(4376,if (ntohs(mh->callno)
(4377,iaxs)
(4378,sizeof(tmp1)
(4379,ies.vars)
(4380,hangup_fr)
(4381,varlist)
(4382,S_COR(connected.id.number.valid, connected.id.number.str, "")
(4383,connected)
(4384,IAX_IE_CAUSE)
(4385,struct ast_iax2_full_hdr *)
(4386,0x8000)
(4387,callno)
(4388,)
(4389,called_number)
(4390,0)
(4391,iaxs)
(4392,ast_datastore_free(variablestore)
(4393,!format)
(4394,if (prev)
(4395,iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION)
(4396,iaxs[fr->callno])
(4397,iaxs[fr->callno]->owner)
(4398,callno)
(4399,iaxs[fr->callno]->frames_received)
(4400,f.subclass.integer)
(4401,delayreject)
(4402,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_PONG, fr->ts, NULL, 0, -1)
(4403,iaxs[fr->callno])
(4404,host_pref_buf)
(4405,prefs)
(4406,callno)
(4407,fr->callno)
(4408,)
(4409,iaxs)
(4410,caller_pref_buf)
(4411,test_resync)
(4412,f.subclass.integer == AST_CONTROL_CONNECTED_LINE)
(4413,f)
(4414,sizeof(*mh)
(4415,callno)
(4416,mh)
(4417,switch(f.subclass.integer)
(4418,callno)
(4419,!iaxs[fr->callno]->first_iax_message)
(4420,f.subclass)
(4421,called_number)
(4422,)
(4423,callno)
(4424,iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(4425,c)
(4426,callno)
(4427,ied0.pos)
(4428,)
(4429,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
(4430,ast_mutex_unlock(&iaxsl[fr->callno])
(4431,iaxs[fr->callno])
(4432,"Status: Off\\r\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n")
(4433,peercallno)
(4434,)
(4435,ts)
(4436,IAX_COMMAND_ACK)
(4437,iaxs[fr->callno]->exten)
(4438,updatehistory)
(4439,fr->callno)
(4440,iaxs[fr->callno])
(4441,context)
(4442,AST_DEVSTATE_CACHABLE)
(4443,ts)
(4444,fr->callno)
(4445,f)
(4446,ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
(4447,ies.called_number)
(4448,iseqno)
(4449,peerformat)
(4450,iaxs[fr->callno]->peerformat)
(4451,res >= sizeof(*fh)
(4452,ast_channel_readformat(iaxs[fr->callno]->owner)
(4453,IAX_COMMAND_VNAK)
(4454,cur->retries = -1)
(4455,f)
(4456,"ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Reachable\\r\\nTime: %d\\r\\n")
(4457,fr->callno)
(4458,iaxs)
(4459,)
(4460,uncompress_subclass(fh->csub & ~0x40)
(4461,minivid)
(4462,sin.sin_family = AF_INET)
(4463,resend_with_token(fr->callno, cur, (char *)
(4464,capability)
(4465,0)
(4466,ies)
(4467,mount_callid)
(4468,iaxs[fr->callno])
(4469,f.subclass)
(4470,iaxs[fr->callno]->capability)
(4471,iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer)
(4472,iaxs)
(4473,iaxs[fr->callno])
(4474,iaxs[fr->callno]->bridgecallno)
(4475,1)
(4476,0)
(4477,fr)
(4478,ast_strlen_zero(iaxs[fr->callno]->secret)
(4479,callno)
(4480,if (!iaxs[fr->callno])
(4481,f.datalen < 0)
(4482,if ((ast_strlen_zero(iaxs[fr->callno]->secret)
(4483,f.samples = ast_codec_get_samples(&f)
(4484,IAX_CODEC_NOCAP)
(4485,tmp2)
(4486,ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)
(4487,iaxs[fr->callno])
(4488,ast_channel_writeformat(iaxs[fr->callno]->owner)
(4489,sin)
(4490,fr)
(4491,peer)
(4492,break;)
(4493,iaxs)
(4494,if (ntohs(mh->callno)
(4495,if (f.subclass.format.id == AST_FORMAT_SLINEAR)
(4496,iaxs)
(4497,iaxs)
(4498,NEW_ALLOW)
(4499,ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
(4500,fr)
(4501,!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(4502,if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
(4503,iaxs[fr->callno])
(4504,IAX_ENCRYPTED)
(4505,using_prefs)
(4506,rseqno)
(4507,ast_free(prev)
(4508,-1)
(4509,if (authdebug)
(4510,res)
(4511,AST_CHANNEL_NAME)
(4512,fr->callno)
(4513,if (((f.subclass.integer != IAX_COMMAND_ACK)
(4514,0)
(4515,f.frametype)
(4516,meta)
(4517,ntohs(mh->callno)
(4518,pingied)
(4519,LOG_NOTICE)
(4520,variablestore->data)
(4521,iaxs[fr->callno]->oseqno)
(4522,iaxs[fr->callno]->last)
(4523,1)
(4524,!authenticate_request(fr->callno)
(4525,fr)
(4526,&sin)
(4527,iaxs[fr->callno])
(4528,make_trunk(fr->callno, 1)
(4529,(iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY)
(4530,iaxs[fr->callno]->cid_num)
(4531,f)
(4532,sin)
(4533,f.subclass)
(4534,!iaxs[fr->callno]->owner)
(4535,fr)
(4536,callno)
(4537,data_size++)
(4538,fr)
(4539,ied0)
(4540,iaxs)
(4541,fr->callno)
(4542,iaxs[fr->callno])
(4543,capability)
(4544,frametype)
(4545,fr)
(4546,f.frametype)
(4547,iaxs)
(4548,1)
(4549,f)
(4550,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(4551,cur->transfer)
(4552,fr)
(4553,iaxs)
(4554,iaxs)
(4555,ast_verb(3, "Releasing %s and %s\\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(4556,fr)
(4557,)
(4558,varlist = ast_calloc(1, sizeof(*varlist)
(4559,sizeof(tmp3)
(4560,struct ast_iax2_mini_hdr)
(4561,voiceformat)
(4562,iaxs[fr->callno])
(4563,if (authdebug)
(4564,callno)
(4565,ts)
(4566,ied0)
(4567,ast_channel_name(iaxs[fr->callno]->owner)
(4568,iaxs)
(4569,"I don\'t know how to authenticate %s to %s\\n")
(4570,fr->callno)
(4571,ts)
(4572,fr->callno)
(4573,fr->callno)
(4574,fr)
(4575,break;)
(4576,exten)
(4577,0x7fff)
(4578,transferring)
(4579,callno)
(4580,iaxs[fr->callno]->secret)
(4581,fr->callno)
(4582,AST_FORMAT_SLINEAR)
(4583,VERBOSE_PREFIX_4)
(4584,iaxs)
(4585,iaxs[fr->callno]->peercapability)
(4586,pingied.pos)
(4587,fr)
(4588,duped_fr)
(4589,iaxs[fr->callno]->last)
(4590,format)
(4591,callno)
(4592,varlist)
(4593,owner)
(4594,iaxs[fr->callno])
(4595,iaxs[fr->callno]->voiceformat)
(4596,log_jitterstats(fr->callno)
(4597,fr)
(4598,callno)
(4599,f.subclass.integer != IAX_COMMAND_VNAK)
(4600,-1)
(4601,iaxs[fr->callno]->rprefs)
(4602,iax2_getformatname_multiple(tmp2, sizeof(tmp2)
(4603,iaxs[fr->callno])
(4604,fr->callno)
(4605,fr)
(4606,fr->callno)
(4607,ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)
(4608,ast_calloc(1, sizeof(*varlist)
(4609,iaxs)
(4610,fr->ts)
(4611,callno)
(4612,format = 0)
(4613,-1)
(4614,rprefs)
(4615,)
(4616,sizeof(tmp2)
(4617,IAX_ENCRYPTED)
(4618,fr->callno)
(4619,iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(4620,!inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(4621,AST_DEVSTATE_CACHABLE)
(4622,iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(4623,ast_parking_ext_valid(ies.called_number, owner, context)
(4624,)
(4625,callno)
(4626,fr)
(4627,f)
(4628,IAX_PROVISION)
(4629,iaxs[fr->callno])
(4630,fr)
(4631,if (cur->transfer)
(4632,if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(4633,callno)
(4634,var->name)
(4635,IAX_COMMAND_AUTHREQ)
(4636,ast_mutex_unlock(&iaxsl[fr->callno])
(4637,&sin)
(4638,callno)
(4639,callno)
(4640,callno)
(4641,iaxs[fr->callno]->transferring)
(4642,f.datalen)
(4643,f)
(4644,f)
(4645,iaxs[fr->callno])
(4646,iaxs[fr->callno])
(4647,f.subclass.integer)
(4648,fr->callno)
(4649,csub)
(4650,stop_stuff(iaxs[fr->callno]->bridgecallno)
(4651,ts)
(4652,(f.subclass.integer != IAX_COMMAND_INVAL)
(4653,sizeof(ied0)
(4654,ied0)
(4655,fr)
(4656,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(4657,ts)
(4658,fr)
(4659,if ((dcallno != 1)
(4660,iaxs[fr->callno])
(4661,callno)
(4662,using_prefs = "caller")
(4663,ast_log(LOG_WARNING, "Rejecting packet from \'%s.%d\' that is flagged as a video frame but is too short\\n", ast_inet_ntoa(sin.sin_addr)
(4664,fr->callno)
(4665,mount_callid)
(4666,capability)
(4667,NULL)
(4668,fr->callno)
(4669,format)
(4670,callno)
(4671,ied0)
(4672,)
(4673,0)
(4674,DATASTORE_INHERIT_FOREVER)
(4675,transferring)
(4676,varlist)
(4677,sin_addr)
(4678,iaxs[fr->callno])
(4679,ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner)
(4680,integer)
(4681,ast_strlen_zero(moh_suggest)
(4682,pref)
(4683,iaxs)
(4684,ast_clear_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
(4685,iaxs[fr->callno]->owner)
(4686,fr)
(4687,fr->callno)
(4688,if (!iaxs[fr->callno])
(4689,memset(&ied1, 0, sizeof(ied1)
(4690,iaxs)
(4691,var)
(4692,subclass)
(4693,iaxs)
(4694,fr)
(4695,f.frametype)
(4696,fr)
(4697,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(4698,new_peercallno)
(4699,vars)
(4700,peercapability)
(4701,&iaxs[fr->callno]->state)
(4702,LOG_WARNING)
(4703,f)
(4704,ast_variables_destroy(ies.vars)
(4705,f.subclass.integer)
(4706,AST_FRAME_VIDEO)
(4707,fr->cacheable = ((f.frametype == AST_FRAME_VOICE)
(4708,0)
(4709,iaxs)
(4710,break;)
(4711,f)
(4712,fr->callno)
(4713,)
(4714,fr->callno)
(4715,fr)
(4716,ies.serviceident)
(4717,fr)
(4718,)
(4719,LOG_NOTICE)
(4720,f.frametype)
(4721,f)
(4722,cause_code)
(4723,cause)
(4724,fr)
(4725,iaxs)
(4726,iaxs)
(4727,fh->type == AST_FRAME_IAX)
(4728,subclass)
(4729,fr->callno)
(4730,ied0)
(4731,fr)
(4732,fr->callno)
(4733,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability \'%s\'/\'%s\' incompatible with our capability \'%s\'.\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(4734,"Received out of order packet... (type=%d, subclass %d, ts = %d, last = %d)
(4735,ast_log(LOG_WARNING, "Failed to park call \'%s\'\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\tast_channel_name(bridged_chan)
(4736,IAX_CODEC_NOCAP)
(4737,)
(4738,fr->callno)
(4739,peer->pokefreqnotok)
(4740,res - 1)
(4741,if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)
(4742,iaxs[fr->callno]->capability)
(4743,fr->callno)
(4744,fr)
(4745,f.frametype)
(4746,iaxs[fr->callno]->capability)
(4747,iaxsl[fr->callno])
(4748,sizeof(tmp1)
(4749,ies)
(4750,ast_channel_unlock(owner)
(4751,(f.subclass.integer != IAX_COMMAND_TXCNT)
(4752,1)
(4753,"Call rejected by %s: %s\\n")
(4754,state)
(4755,var->name)
(4756,ies)
(4757,ies)
(4758,iaxs[fr->callno])
(4759,iaxs[fr->callno]->owner)
(4760,ast_variables_destroy(ies.vars)
(4761,iaxs[fr->callno])
(4762,IAX_IE_CAUSECODE)
(4763,callno)
(4764,call_to_destroy)
(4765,variablestore)
(4766,iaxdebug)
(4767,)
(4768,fr)
(4769,if (iaxdebug)
(4770,f.datalen)
(4771,iaxs[fr->callno]->reg->username)
(4772,strcpy(host_pref_buf,"disabled")
(4773,(f.subclass.integer != IAX_COMMAND_INVAL)
(4774,fr->callno)
(4775,mh)
(4776,NEW_ALLOW_CALLTOKEN_VALIDATED)
(4777,callno)
(4778,using_prefs = "reqonly")
(4779,f)
(4780,IAX_CODEC_NOCAP)
(4781,f.subclass)
(4782,tmp)
(4783,iax2_getformatname(iaxs[fr->callno]->peerformat)
(4784,fr)
(4785,fr->callno)
(4786,f.datalen)
(4787,f)
(4788,f.frametype != AST_FRAME_VOICE)
(4789,fr->callno)
(4790,variablestore)
(4791,ies)
(4792,subclass)
(4793,AST_FRAME_IAX)
(4794,owner)
(4795,)
(4796,ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(4797,iaxs[fr->callno])
(4798,f.datalen)
(4799,callno)
(4800,callno)
(4801,fr->callno)
(4802,IAX_COMMAND_LAGRP)
(4803,fr->callno)
(4804,iaxs[fr->callno]->addr)
(4805,using_prefs)
(4806,iaxs[fr->callno]->state)
(4807,AST_FRAME_IAX)
(4808,!fr->callno || !iaxs[fr->callno])
(4809,integer)
(4810,"disabled")
(4811,ies.vars)
(4812,cur->retries)
(4813,f)
(4814,)
(4815,)
(4816,iaxs[fr->callno]->peerformat)
(4817,peer->pokeexpire > -1)
(4818,callno)
(4819,callno)
(4820,if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(4821,fr)
(4822,fr->callno)
(4823,connected.id)
(4824,iaxs)
(4825,ast_mutex_unlock(&iaxsl[fr->callno])
(4826,frametype)
(4827,iaxs[fr->callno])
(4828,0)
(4829,id)
(4830,peer)
(4831,ast_channel_datastore_add(c, variablestore)
(4832,if (varlist)
(4833,iaxs)
(4834,ast_debug(1, "Cancelling transmission of packet %d\\n", x)
(4835,iaxs)
(4836,fr->callno)
(4837,iaxs[fr->callno])
(4838,callno)
(4839,historicms)
(4840,iax2_queue_control_data(fr->callno, AST_CONTROL_HOLD, \n\\n\\t\\t\\t\\t\\t\\t\\t\\tS_OR(moh_suggest, NULL)
(4841,0)
(4842,&iaxs[fr->callno]->state)
(4843,1)
(4844,iaxs)
(4845,fr->callno)
(4846,format)
(4847,fr->callno)
(4848,*varlist)
(4849,fr)
(4850,0)
(4851,)
(4852,"Memory allocation error while processing IAX2 variables\\n")
(4853,0)
(4854,fr->iseqno)
(4855,serviceident)
(4856,iaxs)
(4857,fr->callno)
(4858,authenticate_request(fr->callno)
(4859,fr->callno)
(4860,sin)
(4861,ntohs(meta->metacmd)
(4862,fr)
(4863,cause)
(4864,thread->buf[res++])
(4865,ied1)
(4866,frametype)
(4867,subclass)
(4868,owner)
(4869,f.subclass.integer)
(4870,fr)
(4871,send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, ied0.buf, ied0.pos, -1)
(4872,fr->callno)
(4873,fr)
(4874,iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format)
(4875,ies.cause)
(4876,if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
(4877,&dpcache)
(4878,number)
(4879,iaxs)
(4880,AST_FRAME_IAX)
(4881,IAX_COMMAND_ACCEPT)
(4882,(ntohs(fh->dcallno)
(4883,ntohs(sin.sin_port)
(4884,AST_FRAME_IAX)
(4885,fr)
(4886,iaxs)
(4887,fh)
(4888,fr)
(4889,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(4890,fr)
(4891,iaxs[fr->callno])
(4892,iaxs)
(4893,fr)
(4894,callno)
(4895,cur)
(4896,iaxs)
(4897,ntohs(fh->dcallno)
(4898,if (res < 0)
(4899,iaxs[fr->callno])
(4900,)
(4901,)
(4902,test_resync)
(4903,iaxs[fr->callno]->addr)
(4904,fr)
(4905,fr->callno)
(4906,f.subclass)
(4907,vars)
(4908,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(4909,1)
(4910,iaxs)
(4911,owner)
(4912,AST_STATE_RING)
(4913,fr)
(4914,iaxs[fr->callno])
(4915,frametype)
(4916,f.subclass)
(4917,0)
(4918,iax2_getformatname_multiple(tmp1, sizeof(tmp1)
(4919,f.subclass.integer)
(4920,)
(4921,cur = AST_LIST_LAST(&frame_queue[fr->callno])
(4922,iaxs[fr->callno])
(4923,&ied1)
(4924,s_addr)
(4925,strcpy(caller_pref_buf, "disabled")
(4926,transferring)
(4927,callno)
(4928,ies)
(4929,iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)
(4930,fr->callno)
(4931,connected.id.number)
(4932,IAX_COMMAND_ACK)
(4933,id)
(4934,bridged_chan)
(4935,1)
(4936,0xFFFF0000L)
(4937,sizeof(host_pref_buf)
(4938,buf)
(4939,AST_CONTROL_PVT_CAUSE_CODE)
(4940,fr)
(4941,sizeof(ied0)
(4942,value)
(4943,TRANSFER_READY)
(4944,callno)
(4945,callno)
(4946,peer)
(4947,fr->callno)
(4948,f.frametype)
(4949,callno)
(4950,fr->callno)
(4951,ntohl(fh->ts)
(4952,((f.subclass.integer != IAX_COMMAND_ACK)
(4953,ast_channel_name(iaxs[fr->callno]->owner)
(4954,iaxs)
(4955,ast_verb(3, "Channel \'%s\' unable to transfer\\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(4956,iaxs[fr->callno]->peercallno)
(4957,tmp2)
(4958,ies.encmethods)
(4959,fr->callno)
(4960,1)
(4961,immediatedial:)
(4962,context = ast_strdupa(iaxs[fr->callno]->context)
(4963,iaxs[fr->callno]->context)
(4964,f)
(4965,ast_debug(1, "For call=%d, set last=%d\\n", fr->callno, fr->ts)
(4966,0x7fff)
(4967,datalen)
(4968,callno)
(4969,peer->lastms > -1)
(4970,subclass)
(4971,peer)
(4972,fr->callno)
(4973,ast_debug(1, "Unknown IAX command %d on %d/%d\\n", f.subclass.integer, fr->callno, iaxs[fr->callno]->peercallno)
(4974,rprefs)
(4975,callno)
(4976,callno)
(4977,fh->csub)
(4978,)
(4979,iaxs[fr->callno]->rseqno)
(4980,IAX_IE_CAUSE)
(4981,fr->callno)
(4982,IAX_STATE_TBD)
(4983,iaxs[fr->callno])
(4984,callno)
(4985,sin.sin_addr)
(4986,if (iaxs[fr->callno]->transferring == TRANSFER_BEGIN)
(4987,test_resync)
(4988,)
(4989,ied1.buf)
(4990,ies.vars)
(4991,ast_calloc(1, sizeof(*varlist)
(4992,ast_set_flag64(iaxs[iaxs[fr->callno]->bridgecallno], IAX_ALREADYGONE)
(4993,f.datalen = res - sizeof(*fh)
(4994,iaxs[fr->callno]->peerformat)
(4995,integer)
(4996,iax2_lock_owner(fr->callno)
(4997,fr)
(4998,fr)
(4999,sin)
(5000,callno)
(5001,"Channel \'%s\' unable to transfer\\n")
(5002,if (iaxdebug)
(5003,iaxs[fr->callno]->addr.sin_addr)
(5004,ies)
(5005,fr->outoforder = 0)
(5006,bridged_chan)
(5007,iaxs[fr->callno])
(5008,&ies)
(5009,ast_queue_control_data(iaxs[fr->callno]->owner, AST_CONTROL_PVT_CAUSE_CODE, cause_code, data_size)
(5010,fr->callno)
(5011,thread->iosin)
(5012,iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(5013,res)
(5014,data_size += 5)
(5015,"")
(5016,ied0)
(5017,fr->ts)
(5018,addr)
(5019,vars)
(5020,)
(5021,iaxs)
(5022,fr)
(5023,&ied0)
(5024,)
(5025,callno)
(5026,break;)
(5027,bridgecallno)
(5028,sin.sin_addr)
(5029,&ied1)
(5030,case IAX_COMMAND_REGREJ:)
(5031,0)
(5032,f.subclass)
(5033,callno)
(5034,iaxs[fr->callno]->secret)
(5035,IAX_IE_IAX_UNKNOWN)
(5036,variablestore)
(5037,fr->callno)
(5038,fr)
(5039,fr->callno)
(5040,if (authdebug)
(5041,IAX_CODEC_NOCAP)
(5042,fr)
(5043,fr)
(5044,AST_LIST_LAST(&frame_queue[fr->callno])
(5045,iaxs)
(5046,)
(5047,iaxs[fr->callno]->context)
(5048,fr->ts)
(5049,tmp2)
(5050,state)
(5051,callno)
(5052,iaxs[fr->callno])
(5053,fr)
(5054,subclass)
(5055,fr)
(5056,1)
(5057,iaxs[fr->callno]->bridgecallno)
(5058,authdebug)
(5059,1)
(5060,iaxs[fr->callno]->addr.sin_addr)
(5061,fr->callno = find_callno(ntohs(mh->callno)
(5062,iaxs)
(5063,fr->iseqno)
(5064,fr)
(5065,return 1;)
(5066,sizeof(ied0)
(5067,id)
(5068,iaxs[fr->callno])
(5069,iax2_poke_peer_s)
(5070,peer->pokeexpire = -1)
(5071,iaxs)
(5072,&ied1)
(5073,ast_debug(1, "Received out of order packet... (type=%d, subclass %d, ts = %d, last = %d)
(5074,f.frametype)
(5075,iaxs[fr->callno]->capability)
(5076,iaxs[fr->callno]->reg)
(5077,callno)
(5078,pref)
(5079,iaxs[fr->callno])
(5080,iaxs[fr->callno])
(5081,IAX_COMMAND_VNAK)
(5082,provverpres)
(5083,1)
(5084,prev)
(5085,callno)
(5086,iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(5087,iaxs)
(5088,iaxs[fr->callno]->capability)
(5089,AST_FRAME_IAX)
(5090,iaxs[fr->callno])
(5091,afdatalen)
(5092,fr)
(5093,)
(5094,if (bridged_chan && ies.called_number)
(5095,)
(5096,maxms)
(5097,sizeof(struct ast_iax2_full_hdr)
(5098,)
(5099,callno)
(5100,iaxs)
(5101,1)
(5102,fr)
(5103,iaxs[iaxs[fr->callno]->bridgecallno]->transferring = 0)
(5104,if (iaxs[fr->callno]->reg)
(5105,return 1;)
(5106,ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",\n\\n\\t\\t\\t\\t\\t\\t\\t"Status: On\\r\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n",\n\\n\\t\\t\\t\\t\\t\\t\\tast_channel_name(iaxs[fr->callno]->owner)
(5107,iaxs[fr->callno])
(5108,sizeof(ies)
(5109,f.subclass.integer != IAX_COMMAND_ACK)
(5110,ies.provverpres && ies.serviceident && sin.sin_addr.s_addr)
(5111,f.subclass == IAX_COMMAND_NEW ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_AUTHREQ ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_ACCEPT ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_REJECT)
(5112,owner)
(5113,iax2_destroy(fr->callno)
(5114,ast_debug(1, "Immediately destroying %d, having received INVAL\\n", fr->callno)
(5115,fr->callno)
(5116,fr)
(5117,peer->maxms)
(5118,f.subclass)
(5119,iaxs[fr->callno])
(5120,fh)
(5121,fr->callno)
(5122,IAX_COMMAND_HANGUP)
(5123,3)
(5124,buf)
(5125,callno)
(5126,mh->ts)
(5127,if (update_registry(&sin, fr->callno, ies.devicetype, fd, ies.refresh)
(5128,iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(5129,authenticate_verify(iaxs[fr->callno], &ies)
(5130,fr->callno)
(5131,iaxs)
(5132,fr->callno)
(5133,iaxs[fr->callno])
(5134,iaxs)
(5135,peer->smoothing && peer->lastms < 0)
(5136,next)
(5137,ies.cause ? ies.cause : "<unknown>")
(5138,1)
(5139,variablestore)
(5140,f.subclass)
(5141,peer->historicms)
(5142,fr)
(5143,presentation)
(5144,dcallno)
(5145,ast_debug(1, "IAX subclass %d received\\n", f.subclass.integer)
(5146,callno)
(5147,break;)
(5148,return 1;)
(5149,0)
(5150,AST_CONTROL_BUSY)
(5151,capability)
(5152,integer)
(5153,fr->callno)
(5154,calltokendata)
(5155,"For call=%d, set last=%d\\n")
(5156,presentation)
(5157,fr->callno)
(5158,f)
(5159,fr)
(5160,AST_FRAME_VOICE)
(5161,format)
(5162,break;)
(5163,fr)
(5164,fr->ts)
(5165,iaxs[fr->callno] && ast_test_flag64(iaxs[fr->callno], IAX_ENCRYPTED)
(5166,f.subclass)
(5167,buf)
(5168,IAX_STATE_AUTHENTICATED)
(5169,context)
(5170,varlist)
(5171,6)
(5172,fr->callno)
(5173,if ((peer->lastms < 0)
(5174,if (!iaxs[fr->callno])
(5175,if (ast_channel_writeformat(iaxs[fr->callno]->owner)
(5176,if (f.frametype == AST_FRAME_VIDEO)
(5177,callno)
(5178,fr)
(5179,peerformat)
(5180,peer->maxms)
(5181,fr)
(5182,iaxs[fr->callno])
(5183,IAX_FLAG_FULL)
(5184,iaxs[fr->callno])
(5185,peercapability)
(5186,iaxs)
(5187,fr)
(5188,dp)
(5189,f.data)
(5190,"caller")
(5191,new_callno)
(5192,break;)
(5193,callno)
(5194,res - sizeof(struct ast_iax2_mini_hdr)
(5195,ies.vars = NULL)
(5196,iaxs)
(5197,iaxs[fr->callno])
(5198,callno)
(5199,fr)
(5200,iaxs[fr->callno])
(5201,fr)
(5202,integer)
(5203,"Rejected dial attempt from %s, request \'%s@%s\' does not exist\\n")
(5204,*orignative = ast_format_cap_dup(ast_channel_nativeformats(iaxs[fr->callno]->owner)
(5205,ast_calloc(1, sizeof(*varlist)
(5206,peerformat)
(5207,peerpoke)
(5208,flags)
(5209,&ies)
(5210,sin)
(5211,0)
(5212,iaxs[fr->callno])
(5213,iaxs)
(5214,&ies)
(5215,VERBOSE_PREFIX_4)
(5216,IAX_COMMAND_ACCEPT)
(5217,iaxs[fr->callno]->capability)
(5218,iaxs[fr->callno]->transfer)
(5219,sin)
(5220,f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_NEW)
(5221,)
(5222,f.frametype == AST_FRAME_TEXT)
(5223,f.subclass.format)
(5224,iaxs[fr->callno])
(5225,if (!iaxs[fr->callno])
(5226,oseqno)
(5227,callno)
(5228,iaxsl[fr->callno])
(5229,iaxs[fr->callno])
(5230,ptr)
(5231,authenticate_reply(iaxs[fr->callno], &iaxs[fr->callno]->addr, &ies, iaxs[fr->callno]->secret, iaxs[fr->callno]->outkey)
(5232,IAX_IMMEDIATE)
(5233,fd)
(5234,if (!newvar)
(5235,pref = iaxs[fr->callno]->prefs)
(5236,1)
(5237,sizeof(pref)
(5238,sin)
(5239,fr->callno)
(5240,IAX_IE_CAUSECODE)
(5241,iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(5242,tmp2)
(5243,TRANSFER_READY)
(5244,ast_alloca(sizeof(*fr)
(5245,iaxs[fr->callno])
(5246,ied0)
(5247,callno)
(5248,ast_callid_threadassoc_add(mount_callid)
(5249,callno)
(5250,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability \'%s\'/\'%s\' incompatible with our capability \'%s\'.\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(5251,iaxs)
(5252,fr->callno)
(5253,iaxs[fr->callno]->exten)
(5254,return 1;)
(5255,IAX_PROVISION)
(5256,fr)
(5257,ts)
(5258,EVENT_FLAG_CALL)
(5259,fr)
(5260,!(ntohs(meta->metacmd)
(5261,peerpoke)
(5262,ied0.pos)
(5263,f.subclass.integer)
(5264,ts)
(5265,iaxs)
(5266,ied1)
(5267,iaxs)
(5268,fr)
(5269,iaxs)
(5270,fr->callno)
(5271,buf)
(5272,iaxs[fr->callno])
(5273,break;)
(5274,callno)
(5275,fr)
(5276,maxms)
(5277,iaxs)
(5278,fh)
(5279,iaxs[fr->callno]->peerformat)
(5280,state)
(5281,vars)
(5282,"IAX2/%s")
(5283,last)
(5284,fr)
(5285,-1)
(5286,fr->iseqno)
(5287,f.subclass.integer != IAX_COMMAND_INVAL)
(5288,if (authdebug)
(5289,fr)
(5290,iaxs[fr->callno])
(5291,x)
(5292,iaxs)
(5293,IAX_COMMAND_REJECT)
(5294,ies)
(5295,)
(5296,iaxs[fr->callno])
(5297,ied0)
(5298,fh)
(5299,pref)
(5300,1)
(5301,callno)
(5302,fr)
(5303,peer)
(5304,f)
(5305,"<unknown>")
(5306,0)
(5307,iaxs)
(5308,native)
(5309,bridgecallno)
(5310,iaxs)
(5311,using_prefs)
(5312,iaxs[fr->callno])
(5313,bridgecallno)
(5314,iaxs[fr->callno])
(5315,&ied0)
(5316,ast_set_read_format(iaxs[fr->callno]->owner, ast_channel_readformat(iaxs[fr->callno]->owner)
(5317,buf)
(5318,!exists)
(5319,iaxs)
(5320,datalen)
(5321,TRANSFER_RELEASED)
(5322,buf)
(5323,fr->callno)
(5324,sin)
(5325,ts)
(5326,f.subclass)
(5327,fr)
(5328,fr)
(5329,fr->callno)
(5330,callno)
(5331,vars)
(5332,fr)
(5333,iaxs[fr->callno])
(5334,iaxs[fr->callno]->bridgecallno)
(5335,callno)
(5336,callno)
(5337,iax2_getformatname_multiple(tmp3, sizeof(tmp3)
(5338,callno)
(5339,callno)
(5340,ies.serviceident)
(5341,value)
(5342,callno)
(5343,fr->callno)
(5344,name)
(5345,callno)
(5346,(f.subclass.integer != IAX_COMMAND_INVAL)
(5347,fr)
(5348,)
(5349,iaxs[fr->callno])
(5350,ast_mutex_lock(&iaxsl[fr->callno])
(5351,&iaxsl[fr->callno])
(5352,ies)
(5353,callno)
(5354,AST_CAUSE_FACILITY_NOT_SUBSCRIBED)
(5355,iaxs)
(5356,fr)
(5357,rprefs)
(5358,"Peer %s lag measured as %dms\\n")
(5359,AST_FRAME_IAX)
(5360,IAX_CODEC_NOCAP)
(5361,connected.id.name)
(5362,)
(5363,(f.subclass.integer != IAX_COMMAND_TXCNT)
(5364,iaxs)
(5365,fr->callno)
(5366,format)
(5367,fr)
(5368,tmp3)
(5369,f)
(5370,ied1)
(5371,peer->historicms > peer->maxms)
(5372,IAX_COMMAND_ACK)
(5373,IAX_COMMAND_ACCEPT)
(5374,f.data)
(5375,iax_ie_append_byte(&ied0, IAX_IE_IAX_UNKNOWN, f.subclass.integer)
(5376,iaxs[fr->callno])
(5377,subclass)
(5378,*vh = (struct ast_iax2_video_hdr *)
(5379,name)
(5380,iaxs[fr->callno]->last_iax_message)
(5381,fr->callno)
(5382,if (ast_strlen_zero(iaxs[fr->callno]->secret)
(5383,)
(5384,fr->callno)
(5385,iaxs[fr->callno]->voiceformat)
(5386,f)
(5387,peercapability)
(5388,dpcache)
(5389,prev)
(5390,fr)
(5391,c = ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)
(5392,iaxs)
(5393,iseqno)
(5394,if (register_verify(fr->callno, &sin, &ies)
(5395,name)
(5396,ies)
(5397,!dcallno)
(5398,iaxs[fr->callno]->transferring)
(5399,new_peercallno)
(5400,callno)
(5401,fr->callno)
(5402,iaxs[fr->callno]->owner)
(5403,iaxs[fr->callno]->transferring == TRANSFER_BEGIN)
(5404,1)
(5405,iaxs[fr->callno])
(5406,ts)
(5407,ied0)
(5408,memset(&ied0, 0, sizeof(ied0)
(5409,IAX_COMMAND_TXCNT)
(5410,fr->callno)
(5411,iaxs[fr->callno])
(5412,1)
(5413,send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1)
(5414,iaxs[fr->callno])
(5415,&ied0)
(5416,callno)
(5417,ast_debug(1, "Received iseqno %d not within window %d->%d\\n", fr->iseqno, iaxs[fr->callno]->rseqno, iaxs[fr->callno]->oseqno)
(5418,memset(&ied0, 0, sizeof(ied0)
(5419,iaxs[fr->callno]->context)
(5420,f.samples = 0)
(5421,vars)
(5422,fr)
(5423,ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
(5424,data)
(5425,&ied0)
(5426,ts)
(5427,f.subclass.integer)
(5428,iaxs[fr->callno])
(5429,peer->lastms < 0)
(5430,using_prefs = "mine")
(5431,handle_call_token(fh, &ies, &sin, fd)
(5432,newvar)
(5433,connected)
(5434,historicms)
(5435,ies)
(5436,&iaxsl[call_to_destroy])
(5437,ies.causecode)
(5438,fr)
(5439,fr->callno)
(5440,iaxs[fr->callno])
(5441,(dcallno != 1)
(5442,iaxs[fr->callno])
(5443,iaxs)
(5444,)
(5445,callno)
(5446,peer)
(5447,iaxs)
(5448,ies.vars)
(5449,thread->buf[res - 1])
(5450,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)
(5451,*newvar = ast_var_assign(var->name, var->value)
(5452,iax2_getformatname(iaxs[fr->callno]->peerformat)
(5453,iaxs)
(5454,vars)
(5455,fr)
(5456,)
(5457,"<Unknown>")
(5458,iax_outputframe(NULL, fh, 1, &sin, res - sizeof(*fh)
(5459,peerformat)
(5460,vars)
(5461,break;)
(5462,ast_strdupa(iaxs[fr->callno]->context)
(5463,IAX_COMMAND_ACK)
(5464,IAX_COMMAND_TXCNT)
(5465,&iaxs[fr->callno]->rprefs)
(5466,iaxs)
(5467,"Rejected connect attempt from %s, requested/capability \'%s\'/\'%s\' incompatible with our capability \'%s\'.\\n")
(5468,fr->iseqno)
(5469,LOG_NOTICE)
(5470,using_prefs = "reqonly")
(5471,if (!newvar)
(5472,IAX_COMMAND_REGREL)
(5473,calltoken)
(5474,hold_signaling)
(5475,iaxs[fr->callno]->peerformat = ies.format)
(5476,iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION)
(5477,ies)
(5478,callno)
(5479,fr)
(5480,cur->retries = -1)
(5481,iaxs[fr->callno]->transferring == TRANSFER_READY)
(5482,struct ast_iax2_mini_hdr *)
(5483,IAX_CODEC_USER_FIRST)
(5484,ntohs(mh->callno)
(5485,callno)
(5486,datalen)
(5487,subclass)
(5488,IAX_COMMAND_REJECT)
(5489,1)
(5490,iaxs[fr->callno])
(5491,ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)
(5492,ies.called_number ? ies.called_number : "s")
(5493,iaxs)
(5494,callno)
(5495,callno)
(5496,iaxsl)
(5497,IAX_FLAG_FULL)
(5498,peer)
(5499,break;)
(5500,fh)
(5501,if (inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(5502,ast_inet_ntoa(sin.sin_addr)
(5503,iaxfrdup2(fr)
(5504,owner)
(5505,memset(&ied0, 0, sizeof(ied0)
(5506,callno)
(5507,f)
(5508,AST_LIST_INSERT_TAIL(varlist, newvar, entries)
(5509,memset(&ied0, 0, sizeof(ied0)
(5510,fr->callno)
(5511,peer->historicms)
(5512,break;)
(5513,format)
(5514,strlen(subclass)
(5515,subclass)
(5516,dcallno)
(5517,subclass)
(5518,mh)
(5519,connected.id.number.str)
(5520,fr)
(5521,vars)
(5522,peer->smoothing)
(5523,sin)
(5524,"Failed to park call \'%s\'\\n")
(5525,bridgecallno)
(5526,lastms)
(5527,fr->callno)
(5528,&sin)
(5529,subclass)
(5530,iaxsl)
(5531,callno)
(5532,iaxs[fr->callno]->oseqno)
(5533,inheritance)
(5534,callno)
(5535,break;)
(5536,fr->callno)
(5537,fr)
(5538,TRANSFER_MREADY)
(5539,if (f.subclass.integer == IAX_COMMAND_LAGRQ)
(5540,callno)
(5541,capability)
(5542,peer)
(5543,sin.sin_addr)
(5544,fr->ts)
(5545,iaxs)
(5546,*fh)
(5547,fr->callno)
(5548,callno)
(5549,peer)
(5550,callno)
(5551,ts)
(5552,str)
(5553,iaxsl)
(5554,capability)
(5555,&frame_queue[fr->callno])
(5556,capability)
(5557,cause_code)
(5558,ntohs(fh->dcallno)
(5559,f.subclass.integer == IAX_COMMAND_ACK && dcallno == 1)
(5560,-1)
(5561,&ied1)
(5562,peer)
(5563,fr)
(5564,peer->lastms)
(5565,fr)
(5566,NULL)
(5567,pref = iaxs[fr->callno]->rprefs)
(5568,callno)
(5569,iaxs[fr->callno]->error = ENOTCONN)
(5570,(meta->zeros == 0)
(5571,iaxs[fr->callno]->owner)
(5572,ast_mutex_unlock(&iaxsl[fr->callno])
(5573,if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)
(5574,f.data.ptr)
(5575,callno)
(5576,owner)
(5577,f)
(5578,fr)
(5579,ied1.pos)
(5580,ies.provver)
(5581,fr)
(5582,ies.causecode > 99)
(5583,iaxs[fr->callno])
(5584,0)
(5585,voiceformat)
(5586,format)
(5587,ied1)
(5588,res - sizeof(*fh)
(5589,fr)
(5590,if (iaxdebug && iaxs[fr->callno])
(5591,iaxs[fr->callno])
(5592,host_pref_buf)
(5593,exten)
(5594,fr)
(5595,&iax2_variable_datastore_info)
(5596,sin)
(5597,data_size++)
(5598,f)
(5599,varlist = ast_calloc(1, sizeof(*varlist)
(5600,id)
(5601,callno)
(5602,iax2_ack_registry(&ies, &sin, fr->callno)
(5603,fr)
(5604,iaxs[fr->callno])
(5605,iaxs[fr->callno]->cid_num)
(5606,AST_FRAME_IAX)
(5607,iaxs[fr->callno]->oseqno)
(5608,fr->callno)
(5609,&sin)
(5610,iaxs[fr->callno]->videoformat > 0)
(5611,rprefs)
(5612,iax_ie_append_short(&ied1, IAX_IE_CALLNO, iaxs[fr->callno]->peercallno)
(5613,fr)
(5614,iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno)
(5615,0)
(5616,0)
(5617,iaxs[fr->callno]->pingtime)
(5618,iaxs)
(5619,&iaxs[fr->callno]->rprefs)
(5620,iaxs)
(5621,fr->callno)
(5622,tmp3)
(5623,callno)
(5624,fr->callno)
(5625,LOG_WARNING)
(5626,iaxs[fr->callno]->capability)
(5627,iaxs[fr->callno]->owner)
(5628,iaxs[fr->callno]->peerformat)
(5629,"Call on %s is already up, can\'t start on it\\n")
(5630,owner)
(5631,owner)
(5632,callno)
(5633,dcallno)
(5634,*mh)
(5635,ied1.pos)
(5636,iaxs[fr->callno])
(5637,res)
(5638,&ied0)
(5639,)
(5640,fr->callno)
(5641,callno)
(5642,f.subclass.integer)
(5643,AST_FRAME_CONTROL)
(5644,prev)
(5645,0)
(5646,"Immediately destroying %d, having received INVAL\\n")
(5647,owner)
(5648,iaxs)
(5649,iaxs[fr->callno])
(5650,fr)
(5651,sizeof(tmp2)
(5652,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(5653,ied0)
(5654,iaxs[fr->callno])
(5655,fr->callno)
(5656,ast_strlen_zero(iaxs[fr->callno]->secret)
(5657,if (!ast_connected_line_parse_data(f.data.ptr, f.datalen, &connected)
(5658,TRANSFER_MEDIA)
(5659,break;)
(5660,prev)
(5661,fr->callno)
(5662,sin.sin_addr)
(5663,&iaxsl[fr->callno])
(5664,iaxs[fr->callno])
(5665,iaxs[fr->callno])
(5666,IAX_COMMAND_TXACC)
(5667,fr->callno)
(5668,IAX_COMMAND_UNSUPPORT)
(5669,fr)
(5670,&ied0)
(5671,memset(&ied0, 0, sizeof(ied0)
(5672,iax2_getformatname_multiple(tmp2, sizeof(tmp2)
(5673,AST_DEVICE_NOT_INUSE)
(5674,iaxs)
(5675,tmp3)
(5676,iaxs[fr->callno])
(5677,pref)
(5678,pingied)
(5679,iaxs)
(5680,iaxs)
(5681,"Parking call \'%s\'\\n")
(5682,f.frametype)
(5683,ast_free(prev)
(5684,)
(5685,ies)
(5686,iaxs[fr->callno])
(5687,iaxs[fr->callno]->owner)
(5688,peercapability)
(5689,id)
(5690,uncompress_subclass(fh->csub)
(5691,fr)
(5692,ast_strlen_zero(iaxs[fr->callno]->secret)
(5693,tmp)
(5694,iaxs)
(5695,sin_addr)
(5696,fr->callno)
(5697,last)
(5698,fh->oseqno)
(5699,iaxs[fr->callno])
(5700,ies)
(5701,f.subclass.integer)
(5702,prev)
(5703,callno)
(5704,cause_code->code)
(5705,ntohs(mh->callno)
(5706,fr->callno)
(5707,callno)
(5708,if (f.subclass.integer == IAX_COMMAND_REGREL)
(5709,pokeexpire)
(5710,callno)
(5711,1)
(5712,duped_fr)
(5713,)
(5714,&iaxs[fr->callno]->state)
(5715,&f.subclass.format)
(5716,)
(5717,)
(5718,set_hangup_source_and_cause(fr->callno, ies.causecode)
(5719,iaxs)
(5720,"I can haz IAX vars? w00t\\n")
(5721,callno)
(5722,int)
(5723,ast_codec_pref_string(&iaxs[fr->callno]->rprefs, caller_pref_buf, sizeof(caller_pref_buf)
(5724,iaxs[fr->callno])
(5725,iaxs[fr->callno])
(5726,iaxs[fr->callno])
(5727,iaxs[fr->callno])
(5728,)
(5729,caller_pref_buf)
(5730,iaxs[fr->callno])
(5731,fr->callno)
(5732,"<Unknown>")
(5733,iaxs)
(5734,"Rejected connect attempt from %s, requested/capability \'%s\'/\'%s\' incompatible with our capability \'%s\'.\\n")
(5735,f.data.ptr = thread->buf + sizeof(*vh)
(5736,calltoken)
(5737,0)
(5738,iaxs[fr->callno])
(5739,fr)
(5740,&ied0)
(5741,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(5742,iaxs)
(5743,fr->callno)
(5744,return 1;)
(5745,if ((f.frametype != AST_FRAME_IAX)
(5746,username)
(5747,fr->callno)
(5748,iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(5749,iaxs[fr->callno]->peercallno = new_peercallno)
(5750,iaxs[fr->callno]->peerformat)
(5751,fr)
(5752,fr->callno)
(5753,empty)
(5754,IAX_CODEC_NOPREFS)
(5755,fr)
(5756,ast_debug(1, "We don\'t do requested format %s, falling back to peer capability \'%s\'\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\tiax2_getformatname(iaxs[fr->callno]->peerformat)
(5757,fr->callno)
(5758,callno)
(5759,0)
(5760,fr->callno)
(5761,iaxs)
(5762,fr)
(5763,cause_code)
(5764,callno)
(5765,3)
(5766,iaxs[fr->callno])
(5767,iaxs[fr->callno]->owner)
(5768,iaxs)
(5769,0)
(5770,ies)
(5771,ies.calltoken)
(5772,valid)
(5773,if (ies.codec_prefs)
(5774,sizeof(ied0)
(5775,thread)
(5776,peerformat)
(5777,iaxs[fr->callno])
(5778,fr->iseqno)
(5779,peercallno)
(5780,-1)
(5781,&ied0)
(5782,f.subclass)
(5783,vars)
(5784,cause_code)
(5785,exists)
(5786,oseqno)
(5787,iaxs[fr->callno])
(5788,callno)
(5789,iaxs[fr->callno] && iaxs[fr->callno]->owner)
(5790,!newvar)
(5791,ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
(5792,callno)
(5793,ntohs(fh->scallno)
(5794,fr)
(5795,var)
(5796,subclass)
(5797,call_to_destroy)
(5798,)
(5799,fr->callno)
(5800,iaxs[fr->callno]->rprefs)
(5801,fh)
(5802,iaxs[fr->callno]->inkeys)
(5803,fh->iseqno + 1)
(5804,callno)
(5805,iaxs[fr->callno]->error = EPERM)
(5806,ast_log(LOG_NOTICE, "Rejected call to %s, format %s incompatible with our capability %s.\\n",\n\\n\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(5807,thread->buf)
(5808,pingtime)
(5809,iaxs[fr->callno])
(5810,res)
(5811,AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(5812,iaxs)
(5813,f.subclass)
(5814,ies.vars)
(5815,&sin)
(5816,vh)
(5817,context)
(5818,fr->callno)
(5819,fr)
(5820,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(5821,ast_format_to_old_bitfield(&f.subclass.format)
(5822,peercallno)
(5823,iaxs[fr->callno]->context)
(5824,f)
(5825,vh->ts)
(5826,ptr)
(5827,callno)
(5828,format)
(5829,iaxs[fr->callno]->peercallno)
(5830,iaxs)
(5831,last)
(5832,iaxs[iaxs[fr->callno]->bridgecallno]->owner ? ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner)
(5833,iaxsl)
(5834,peer->pokeexpire)
(5835,iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)
(5836,&sin)
(5837,causecode)
(5838,&iaxs[fr->callno]->state)
(5839,f.subclass)
(5840,)
(5841,peer->name)
(5842,f.subclass)
(5843,ies.calltoken && ies.calltokendata)
(5844,f.subclass.integer)
(5845,if (iaxs[fr->callno]->authmethods & IAX_AUTH_MD5)
(5846,iaxs[fr->callno])
(5847,sizeof(*fr)
(5848,callno)
(5849,callno)
(5850,iaxs)
(5851,thread)
(5852,fr->callno)
(5853,iaxs[fr->callno]->transferring)
(5854,iaxs[fr->callno])
(5855,iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_MREADY)
(5856,host_pref_buf)
(5857,owner)
(5858,scallno)
(5859,"caller")
(5860,callno)
(5861,iaxs)
(5862,ntohl(fh->ts)
(5863,"Async goto not applicable on call %d\\n")
(5864,AST_FRAME_IAX)
(5865,f.subclass.format)
(5866,prev)
(5867,ast_debug(1, "Acking anyway\\n")
(5868,ast_codec_pref_convert(&iaxs[fr->callno]->rprefs, ies.codec_prefs, 32, 0)
(5869,iaxs[fr->callno]->owner && authdebug)
(5870,fr->callno)
(5871,callno)
(5872,&f.subclass.format)
(5873,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)
(5874,)
(5875,callno)
(5876,LOG_WARNING)
(5877,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested/capability \'%s\'/\'%s\' incompatible with our capability \'%s\'.\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(5878,callno)
(5879,"Packet Decrypt Failed!\\n")
(5880,peer->lastms)
(5881,lag)
(5882,LOG_WARNING)
(5883,smoothing)
(5884,callno)
(5885,peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqnotok, iax2_poke_peer_s, peer_ref(peer)
(5886,fr)
(5887,fr)
(5888,AST_FRAME_IAX)
(5889,frametype)
(5890,"Received VNAK: resending outstanding frames\\n")
(5891,f.subclass.integer != IAX_COMMAND_TXACC)
(5892,ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
(5893,owner)
(5894,return 1;)
(5895,fr)
(5896,IAX_STATE_TBD)
(5897,fr->callno)
(5898,callno)
(5899,f.subclass.integer != IAX_COMMAND_INVAL)
(5900,peer_unref(peer)
(5901,&ied0)
(5902,iaxs[fr->callno])
(5903,iaxs)
(5904,tmp1)
(5905,iaxs[fr->callno]->peerpoke)
(5906,ts)
(5907,"Rejected call to %s, format %s incompatible with our capability %s.\\n")
(5908,&ied0)
(5909,IAX_STATE_STARTED)
(5910,if (iaxs[fr->callno] && iaxs[fr->callno]->aseqno != iaxs[fr->callno]->iseqno)
(5911,iax2_poke_peer_s)
(5912,ies.vars)
(5913,IAX_QUELCH)
(5914,fr)
(5915,)
(5916,peer->historicms)
(5917,callno)
(5918,iaxs)
(5919,using_prefs)
(5920,fr)
(5921,sizeof(ied0)
(5922,iaxs[fr->callno]->peercapability)
(5923,fr->callno)
(5924,(char *)
(5925,callno)
(5926,callno)
(5927,fr->callno)
(5928,if ((peer->lastms < 0)
(5929,callno)
(5930,iaxs)
(5931,owner)
(5932,buf)
(5933,"reqonly")
(5934,fh)
(5935,ies)
(5936,AST_FRAME_IAX)
(5937,fr->callno = new_callno)
(5938,"Unable to negotiate codec")
(5939,iaxs[fr->callno]->context)
(5940,(struct ast_iax2_mini_hdr *)
(5941,callno)
(5942,)
(5943,iaxs[fr->callno]->bridgecallno)
(5944,)
(5945,ast_var_assign(var->name, var->value)
(5946,iseqno)
(5947,frametype)
(5948,f)
(5949,iaxsl[fr->callno])
(5950,memset(&sin, 0, sizeof(sin)
(5951,ies.vars)
(5952,res)
(5953,format)
(5954,iaxs[fr->callno]->capability)
(5955,fr)
(5956,iaxs[fr->callno]->owner)
(5957,ast_debug(1, "I can haz IAX vars, but they is no good :-(\\n")
(5958,fh->dcallno)
(5959,ast_mutex_lock(&iaxsl[fr->callno])
(5960,fr->callno)
(5961,IAX_IE_FORMAT2)
(5962,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_TBD)
(5963,fr)
(5964,if (prev)
(5965,ast_channel_datastore_add(c, variablestore)
(5966,iaxs[fr->callno])
(5967,)
(5968,)
(5969,case IAX_COMMAND_POKE:)
(5970,fr)
(5971,iaxs)
(5972,data)
(5973,sched)
(5974,iaxs[fr->callno])
(5975,case IAX_COMMAND_LAGRP:)
(5976,iaxs)
(5977,ast_channel_caller(iaxs[fr->callno]->owner)
(5978,presentation)
(5979,fr->callno)
(5980,if (!iaxs[fr->callno])
(5981,call_to_destroy)
(5982,NULL)
(5983,ied0)
(5984,callno)
(5985,fr->callno)
(5986,iaxs[fr->callno])
(5987,return 1;)
(5988,iaxs[fr->callno]->rseqno)
(5989,iaxs[fr->callno]->exten)
(5990,)
(5991,iaxs)
(5992,fr->callno)
(5993,f)
(5994,&sin)
(5995,ied0.pos)
(5996,sin)
(5997,-1)
(5998,iaxs)
(5999,&iaxs[fr->callno]->state)
(6000,vh)
(6001,)
(6002,f)
(6003,iaxs[fr->callno])
(6004,iaxs[fr->callno])
(6005,fr)
(6006,tmp1)
(6007,fr)
(6008,fr->callno)
(6009,0xFFFF0000L)
(6010,break;)
(6011,f.subclass)
(6012,f.frametype == AST_FRAME_CONTROL && iaxs[fr->callno]->owner)
(6013,fr)
(6014,iaxsl)
(6015,callno)
(6016,&ied0)
(6017,fr)
(6018,if (!iaxs[fr->callno])
(6019,ast_cause)
(6020,ts)
(6021,fr)
(6022,ast_debug(1, "Immediately destroying %d, having received hangup\\n", fr->callno)
(6023,fh->csub == IAX_COMMAND_HANGUP)
(6024,!iaxs[fr->callno])
(6025,dcallno)
(6026,)
(6027,peerformat)
(6028,fr)
(6029,context)
(6030,sin.sin_addr)
(6031,f.src = "LAGRQ")
(6032,try_transfer(iaxs[fr->callno], &ies)
(6033,!inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(6034,var)
(6035,fh)
(6036,callno)
(6037,ast_bridged_channel(iaxs[fr->callno]->owner)
(6038,ts)
(6039,iaxs)
(6040,iaxs)
(6041,pref = iaxs[fr->callno]->rprefs)
(6042,fr)
(6043,f)
(6044,callno)
(6045,iaxs[fr->callno])
(6046,var)
(6047,)
(6048,iaxs[fr->callno]->calling_pres)
(6049,ies.codec_prefs)
(6050,iaxs[fr->callno]->last & 0xFFFF8000L)
(6051,fr->callno)
(6052,fr)
(6053,encmethods)
(6054,)
(6055,fr->af.subclass.integer)
(6056,fr->ts)
(6057,iaxs)
(6058,iaxs)
(6059,ntohs(mh->callno)
(6060,fr)
(6061,fr)
(6062,fr->callno)
(6063,iseqno)
(6064,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_UNSUPPORT, 0, NULL, 0, -1)
(6065,fr->callno)
(6066,iax_unknown)
(6067,f.subclass)
(6068,iaxs)
(6069,ntohs(mh->callno)
(6070,var)
(6071,iaxs[fr->callno])
(6072,prefs)
(6073,callno)
(6074,)
(6075,0)
(6076,f)
(6077,NULL)
(6078,callno)
(6079,if (iaxs[fr->callno])
(6080,peercapability)
(6081,iaxs)
(6082,(iaxs[fr->callno]->iseqno != fr->oseqno)
(6083,buf)
(6084,name)
(6085,pos)
(6086,iaxsl[fr->callno])
(6087,var)
(6088,iaxsl)
(6089,NULL)
(6090,subclass)
(6091,callno)
(6092,!iaxs[fr->callno])
(6093,*varlist)
(6094,varlist)
(6095,ies)
(6096,(f.subclass.integer != IAX_COMMAND_ACK)
(6097,id)
(6098,samples)
(6099,iaxs)
(6100,thread)
(6101,0)
(6102,fr)
(6103,"disabled")
(6104,iaxs)
(6105,ast_channel_ref(bridged_chan)
(6106,fr->callno)
(6107,iaxs[fr->callno])
(6108,thread)
(6109,peer)
(6110,ntohl(fh->ts)
(6111,callno)
(6112,f.subclass.integer)
(6113,fr->callno)
(6114,AST_LIST_HEAD_INIT(varlist)
(6115,f.frametype)
(6116,callno)
(6117,fr)
(6118,fr->callno)
(6119,check_dcallno)
(6120,ies)
(6121,)
(6122,callno)
(6123,IAX_COMMAND_REJECT)
(6124,last)
(6125,ast_channel_name(iaxs[fr->callno]->owner)
(6126,"No best format in \'%s\'???\\n")
(6127,fr->oseqno)
(6128,sched)
(6129,variablestore->inheritance)
(6130,iaxs[fr->callno])
(6131,iaxs)
(6132,callno)
(6133,buf)
(6134,fh->dcallno)
(6135,exten)
(6136,"TBD")
(6137,)
(6138,called_number)
(6139,iaxs[fr->callno]->oseqno == fr->iseqno)
(6140,iaxs)
(6141,iaxs[fr->callno])
(6142,fr)
(6143,mh)
(6144,f)
(6145,fr)
(6146,fr)
(6147,callno)
(6148,fh)
(6149,varlist)
(6150,AST_FRAME_IAX)
(6151,break;)
(6152,fr)
(6153,fr)
(6154,peerformat)
(6155,&ied0)
(6156,if (!iaxs[fr->callno])
(6157,fr->callno)
(6158,ied0)
(6159,&ied1)
(6160,callno)
(6161,iaxvars)
(6162,iax_ie_append_short(&ied0, IAX_IE_CALLNO, iaxs[iaxs[fr->callno]->bridgecallno]->peercallno)
(6163,fr)
(6164,ast_variables_destroy(ies.vars)
(6165,IAX_STATE_STARTED)
(6166,iseqno)
(6167,data_size)
(6168,callno)
(6169,oseqno)
(6170,break;)
(6171,mohsuggest)
(6172,break;)
(6173,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_FWDATA, 0, ied0.buf, ied0.pos, -1)
(6174,if (!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)
(6175,fr)
(6176,sizeof(ied0)
(6177,f)
(6178,fr)
(6179,tmpfmt)
(6180,&iaxs[fr->callno]->prefs)
(6181,fr)
(6182,fr->callno)
(6183,iax2_getformatname_multiple(tmp1, sizeof(tmp1)
(6184,iaxs[fr->callno]->peerformat)
(6185,IAX_IE_CALLNO)
(6186,iaxs[fr->callno]->rprefs)
(6187,IAX_COMMAND_UNQUELCH)
(6188,format)
(6189,if (peer->smoothing && (peer->lastms > -1)
(6190,callno)
(6191,f.subclass.format)
(6192,IAX_CODEC_USER_FIRST)
(6193,fr->callno)
(6194,1)
(6195,offset)
(6196,callno)
(6197,"<unknown>")
(6198,callno)
(6199,IAX_STATE_STARTED)
(6200,ies)
(6201,iaxs[fr->callno])
(6202,bridged_chan)
(6203,!decrypted)
(6204,iaxsl[fr->callno])
(6205,AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(6206,ied0.pos)
(6207,ast_log(LOG_ERROR, "No best format in \'%s\'???\\n", iax2_getformatname_multiple(tmp, sizeof(tmp)
(6208,break;)
(6209,iaxs)
(6210,iaxs)
(6211,)
(6212,last)
(6213,!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
(6214,ntohs(fh->dcallno)
(6215,peer->lastms = iaxs[fr->callno]->pingtime)
(6216,if (iaxs[fr->callno]->owner)
(6217,iaxs)
(6218,fr->callno)
(6219,integer)
(6220,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(6221,ast_inet_ntoa(sin.sin_addr)
(6222,newvar)
(6223,*fh)
(6224,if (!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(6225,peer->name)
(6226,f)
(6227,subclass)
(6228,ast_log(LOG_NOTICE, "Peer \'%s\' is now REACHABLE! Time: %d\\n", peer->name, iaxs[fr->callno]->pingtime)
(6229,variablestore)
(6230,exten)
(6231,ies)
(6232,f)
(6233,using_prefs = ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(6234,)
(6235,exists)
(6236,frametype)
(6237,meta->zeros)
(6238,0)
(6239,ied0)
(6240,3)
(6241,iaxs)
(6242,iseqno)
(6243,if (authdebug)
(6244,format)
(6245,iax_pvt_callid_new(fr->callno)
(6246,ast_mutex_unlock(&iaxsl[fr->callno])
(6247,fr->callno)
(6248,connected.id.name.valid)
(6249,LOG_NOTICE)
(6250,callno)
(6251,integer)
(6252,fr->callno)
(6253,fr->callno)
(6254,0)
(6255,fr->callno)
(6256,IAX_COMMAND_TXCNT)
(6257,(f.subclass.integer != IAX_COMMAND_ACK)
(6258,fr->iseqno)
(6259,iaxs)
(6260,!ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(6261,!(c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)
(6262,res)
(6263,callno)
(6264,IAX_COMMAND_UNSUPPORT)
(6265,send_apathetic_reply(1, ntohs(fh->scallno)
(6266,if (!dcallno && iax2_allow_new(f.frametype, f.subclass.integer, 1)
(6267,0)
(6268,iaxs)
(6269,iaxs[fr->callno]->last)
(6270,fr->callno)
(6271,fr)
(6272,(iaxs[fr->callno]->transferring == TRANSFER_BEGIN)
(6273,last_iax_message)
(6274,callno)
(6275,connected.id.name)
(6276,f.frametype)
(6277,varlist)
(6278,f.subclass)
(6279,f.subclass.integer)
(6280,callno)
(6281,fr->callno)
(6282,name)
(6283,callno)
(6284,fh)
(6285,ast_debug(1, "Parking call \'%s\'\\n", ast_channel_name(bridged_chan)
(6286,ies)
(6287,iaxs[fr->callno])
(6288,f.src = "IAX2")
(6289,iax2_getformatname_multiple(tmp1, sizeof(tmp1)
(6290,callno)
(6291,f)
(6292,fr)
(6293,ast_mutex_lock(&iaxsl[call_to_destroy])
(6294,fr->iseqno)
(6295,1)
(6296,sizeof(ied0)
(6297,id)
(6298,csub)
(6299,IAX_ALREADYGONE)
(6300,pos)
(6301,find_callno(ntohs(mh->callno)
(6302,)
(6303,globalflags)
(6304,1)
(6305,iaxs)
(6306,callno)
(6307,peer->callno = 0)
(6308,iaxs[fr->callno])
(6309,)
(6310,prefs)
(6311,iaxs[fr->callno]->prefs)
(6312,fr->callno)
(6313,csub)
(6314,fr->callno)
(6315,*vh)
(6316,AST_FRAME_VOICE)
(6317,subclass)
(6318,integer)
(6319,tmp3)
(6320,iaxs[iaxs[fr->callno]->bridgecallno]->transferring)
(6321,&f.subclass.format)
(6322,fr)
(6323,iaxs)
(6324,number)
(6325,owner)
(6326,iaxs[fr->callno])
(6327,auth_fail(fr->callno, IAX_COMMAND_REGREJ)
(6328,IAX_IE_CAUSECODE)
(6329,variablestore)
(6330,)
(6331,fh->csub)
(6332,fr)
(6333,callno)
(6334,var->next)
(6335,sin_addr)
(6336,ied0)
(6337,fr)
(6338,fr)
(6339,peercallno)
(6340,f.data.ptr)
(6341,AST_FRAME_IAX)
(6342,subclass)
(6343,new_peercallno != iaxs[fr->callno]->peercallno)
(6344,callno)
(6345,fr->callno)
(6346,*newvar = ast_var_assign(var->name, var->value)
(6347,iaxs)
(6348,decrypted)
(6349,causecode)
(6350,tmp2)
(6351,for (var = ies.vars; var; var = var->next)
(6352,context)
(6353,fr->callno)
(6354,pokeexpire)
(6355,iaxs)
(6356,)
(6357,0)
(6358,peer)
(6359,!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(6360,&fr->ts)
(6361,ies)
(6362,ts)
(6363,)
(6364,callno)
(6365,x)
(6366,sizeof(*fh)
(6367,iaxs[fr->callno])
(6368,)
(6369,pingtime)
(6370,iaxs[fr->callno]->owner)
(6371,iaxs[fr->callno]->capability)
(6372,decrypted)
(6373,callno)
(6374,iaxs[iaxs[fr->callno]->bridgecallno]->transferring)
(6375,REG_STATE_REJECTED)
(6376,sizeof(iaxs[fr->callno]->transfer)
(6377,fd)
(6378,owner)
(6379,ied0)
(6380,f.subclass.integer != IAX_COMMAND_PONG)
(6381,format)
(6382,iaxs[fr->callno]->rseqno)
(6383,fr)
(6384,fr)
(6385,1)
(6386,ied0.pos)
(6387,owner)
(6388,fr->ts = (iaxs[fr->callno]->last & 0xFFFF0000L)
(6389,"No channel, so populating IAXVARs to the pvt, as an intermediate step.\\n")
(6390,AST_CONTROL_CONGESTION)
(6391,callno)
(6392,&ies)
(6393,f.subclass)
(6394,*varlist)
(6395,causecode)
(6396,fr->ts)
(6397,dcx)
(6398,fr)
(6399,f)
(6400,iaxs)
(6401,iaxs)
(6402,dcallno)
(6403,ies.vars)
(6404,iax2_variable_datastore_info)
(6405,iaxs[fr->callno])
(6406,fh)
(6407,ies.called_number)
(6408,iaxs[fr->callno])
(6409,newvar)
(6410,1)
(6411,iaxsl)
(6412,name)
(6413,&sin)
(6414,iaxs)
(6415,"No such context/extension")
(6416,owner)
(6417,fh)
(6418,fr->callno)
(6419,iaxs)
(6420,fr)
(6421,iaxdebug)
(6422,iaxs[fr->callno]->state)
(6423,&iaxs[fr->callno]->state)
(6424,fr)
(6425,f)
(6426,fr->callno)
(6427,callno)
(6428,iaxs[fr->callno]->capability)
(6429,0)
(6430,value)
(6431,call_to_destroy)
(6432,iaxs[fr->callno])
(6433,callno)
(6434,iaxs[fr->callno])
(6435,ast_async_goto(bridged_chan, context, ies.called_number, 1)
(6436,data_size)
(6437,iaxs[fr->callno]->owner)
(6438,ast_log(LOG_WARNING, "Call on %s is already up, can\'t start on it\\n", iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(6439,peercapability)
(6440,ast_channel_datastore_add(c, variablestore)
(6441,iaxs[fr->callno]->encmethods)
(6442,connected.id)
(6443,iaxs[fr->callno])
(6444,inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(6445,"disabled")
(6446,&hangup_fr)
(6447,iaxs[fr->callno]->last = fr->ts)
(6448,if (!format)
(6449,sin_addr)
(6450,fh)
(6451,callno)
(6452,iax2_getformatname(format)
(6453,callno)
(6454,f.data.ptr = NULL)
(6455,peer)
(6456,return socket_process_meta(res, meta, &sin, fd, fr)
(6457,fr)
(6458,fr)
(6459,iaxs[fr->callno])
(6460,thread->buf)
(6461,called_number)
(6462,f.subclass.integer)
(6463,connected.id.number)
(6464,AST_CAUSE_NO_ROUTE_DESTINATION)
(6465,format)
(6466,peercallno)
(6467,sin_addr)
(6468,-1)
(6469,f)
(6470,f.subclass.integer != IAX_COMMAND_TXACC)
(6471,tmp2)
(6472,sizeof(tmp)
(6473,pingtime)
(6474,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(6475,ied0)
(6476,1)
(6477,fr->callno)
(6478,break;)
(6479,iax2_lock_owner(fr->callno)
(6480,if (delayreject)
(6481,*native = ast_channel_nativeformats(iaxs[fr->callno]->owner)
(6482,iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1)
(6483,fr)
(6484,ts)
(6485,data)
(6486,fr->callno)
(6487,provver)
(6488,iaxs[fr->callno]->state)
(6489,iaxs[fr->callno]->pingtime)
(6490,&iaxs[fr->callno]->transfer)
(6491,)
(6492,pos)
(6493,fr)
(6494,subclass)
(6495,if (f.frametype == AST_FRAME_IAX)
(6496,callno)
(6497,iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(6498,fr)
(6499,if (iaxs[fr->callno]->owner)
(6500,iaxs)
(6501,f.data)
(6502,iaxs)
(6503,ast_inet_ntoa(sin.sin_addr)
(6504,if (iaxs[fr->callno]->pingtime > peer->maxms)
(6505,using_prefs)
(6506,callno)
(6507,fr->callno)
(6508,iaxs)
(6509,iaxs[fr->callno])
(6510,fr->callno)
(6511,iaxs[fr->callno]->owner)
(6512,iaxs[fr->callno]->chosenformat)
(6513,iaxs[fr->callno]->reg)
(6514,fr)
(6515,owner)
(6516,fr)
(6517,IAX_COMMAND_FWDATA)
(6518,iaxs)
(6519,peerformat)
(6520,fr->callno)
(6521,AST_LIST_HEAD_INIT(varlist)
(6522,iax2_destroy(fr->callno)
(6523,AST_FRAME_IAX)
(6524,iax_parse_ies(&ies, thread->buf + sizeof(struct ast_iax2_full_hdr)
(6525,iaxs[fr->callno])
(6526,state)
(6527,break;)
(6528,iaxs[fr->callno]->username)
(6529,ast_set_write_format(iaxs[fr->callno]->owner, ast_channel_writeformat(iaxs[fr->callno]->owner)
(6530,ied1)
(6531,fr)
(6532,tmpfmt)
(6533,f.subclass.format)
(6534,ast_free(prev)
(6535,)
(6536,ied0.buf)
(6537,tmp3)
(6538,subclass)
(6539,callno)
(6540,iaxs)
(6541,"Registration failure\\n")
(6542,format)
(6543,iaxs[fr->callno]->owner)
(6544,subclass)
(6545,pos)
(6546,ied0)
(6547,fr->callno)
(6548,iaxs[iaxs[fr->callno]->bridgecallno]->peercallno)
(6549,reg)
(6550,integer)
(6551,IAX_IE_CAUSECODE)
(6552,if (strcmp(iaxs[fr->callno]->exten, "TBD")
(6553,iaxs[fr->callno])
(6554,fr)
(6555,fr->callno)
(6556,iaxs[fr->callno])
(6557,iaxs[fr->callno])
(6558,iaxs[fr->callno])
(6559,ied0)
(6560,case IAX_COMMAND_REGAUTH:)
(6561,fr->callno)
(6562,iaxs)
(6563,iaxs)
(6564,ast_log(LOG_WARNING,\n\\n\\t\\t\\t\\t\\t\\t\\t\\t"Async goto of \'%s\' to \'%s@%s\' failed\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\tast_channel_name(bridged_chan)
(6565,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(6566,return 1;)
(6567,f.subclass.integer)
(6568,peer)
(6569,callno)
(6570,fr->callno)
(6571,iaxs[fr->callno])
(6572,)
(6573,subclass)
(6574,vh)
(6575,varlist)
(6576,peer)
(6577,ast_variables_destroy(ies.vars)
(6578,iaxs[fr->callno])
(6579,break;)
(6580,format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(6581,iaxs[fr->callno]->inkeys)
(6582,peer->name)
(6583,f.subclass.integer)
(6584,integer)
(6585,ts)
(6586,owner)
(6587,tmp)
(6588,callno)
(6589,iaxs[fr->callno]->peercapability)
(6590,callno)
(6591,sin)
(6592,fr->callno)
(6593,iaxs[fr->callno])
(6594,ast_channel_nativeformats(iaxs[fr->callno]->owner)
(6595,)
(6596,ies)
(6597,iaxs[fr->callno])
(6598,TRANSFER_MEDIAPASS)
(6599,1)
(6600,sin)
(6601,ies)
(6602,fr->callno)
(6603,buf)
(6604,vars)
(6605,&iaxs[fr->callno]->state)
(6606,if (res < sizeof(*vh)
(6607,callno)
(6608,fr)
(6609,fr->callno)
(6610,host_pref_buf)
(6611,&iaxs[fr->callno]->rprefs)
(6612,iaxs)
(6613,!iaxs[fr->callno])
(6614,called_number)
(6615,case IAX_COMMAND_REGREL:)
(6616,peer->historicms)
(6617,orignative)
(6618,ies)
(6619,subclass)
(6620,fr->callno)
(6621,new_peercallno && new_peercallno != iaxs[fr->callno]->peercallno)
(6622,var->name)
(6623,ast_iax2_new(fr->callno, AST_STATE_RING, format, NULL, 1)
(6624,fr)
(6625,frametype)
(6626,callno)
(6627,ast_format_from_old_bitfield(&f.subclass.format, iaxs[fr->callno]->videoformat)
(6628,if ((iaxs[fr->callno]->iseqno != fr->oseqno)
(6629,if (!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,\n\\n\\t\\t\\t\\t\\t\\t  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
(6630,exten)
(6631,iaxsl[fr->callno])
(6632,LOG_NOTICE)
(6633,f.subclass)
(6634,f.frametype)
(6635,fr->callno)
(6636,f.frametype)
(6637,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
(6638,frametype)
(6639,rseqno)
(6640,callno)
(6641,iaxs)
(6642,callno)
(6643,using_prefs = "mine")
(6644,ptr)
(6645,ies)
(6646,ast_variables_destroy(ies.vars)
(6647,iaxs[fr->callno]->bridgecallno)
(6648,iaxs)
(6649,iaxs)
(6650,pref)
(6651,peer->historicms)
(6652,break;)
(6653,iaxs[fr->callno])
(6654,callno)
(6655,)
(6656,iaxs)
(6657,iaxs)
(6658,f)
(6659,sin)
(6660,iaxs)
(6661,if (!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
(6662,fr->callno)
(6663,iaxs)
(6664,IAX_COMMAND_TXREADY)
(6665,-1)
(6666,iaxs)
(6667,context)
(6668,callno)
(6669,f.frametype == AST_FRAME_CONTROL && f.subclass.integer == AST_CONTROL_CONNECTED_LINE)
(6670,f.frametype)
(6671,pref)
(6672,fr->callno)
(6673,f.datalen = res - sizeof(struct ast_iax2_mini_hdr)
(6674,sizeof(ied1)
(6675,fr->callno)
(6676,sizeof(ied1)
(6677,iaxs[fr->callno]->pingtime)
(6678,f.subclass)
(6679,fr->callno)
(6680,iaxs[fr->callno])
(6681,owner)
(6682,fr->callno > 0)
(6683,iaxs)
(6684,callno)
(6685,owner)
(6686,break;)
(6687,AST_FRAME_IAX)
(6688,fr)
(6689,iaxs[fr->callno]->peerformat)
(6690,fr->callno)
(6691,callno)
(6692,prev)
(6693,)
(6694,fr->callno)
(6695,-1)
(6696,bridgecallno)
(6697,iaxs[fr->callno])
(6698,peer->maxms)
(6699,)
(6700,username)
(6701,fr->callno)
(6702,if (delayreject)
(6703,ies)
(6704,owner)
(6705,f.subclass == IAX_COMMAND_AUTHREQ ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_ACCEPT ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_REJECT)
(6706,fr->iseqno)
(6707,ied0)
(6708,callno)
(6709,f)
(6710,f.subclass)
(6711,0)
(6712,!ast_test_flag64(iaxs[fr->callno], IAX_PROVISION)
(6713,"Attempting media bridge of %s and %s\\n")
(6714,iaxs[fr->callno]->videoformat = ast_format_to_old_bitfield(&f.subclass.format)
(6715,fr->callno)
(6716,datalen)
(6717,IAX_COMMAND_ACK)
(6718,0)
(6719,fr->callno)
(6720,iaxsl[fr->callno])
(6721,variablestore)
(6722,var)
(6723,fr)
(6724,IAX_DEBUGDIGEST("Receiving", ies.challenge)
(6725,vh->callno)
(6726,)
(6727,iaxs[fr->callno]->owner)
(6728,"We don\'t do requested format %s, falling back to peer capability \'%s\'\\n")
(6729,IAX_IE_CAUSECODE)
(6730,iaxs[fr->callno]->pingtime <= peer->maxms)
(6731,fr)
(6732,f)
(6733,iaxsl)
(6734,callno)
(6735,!iaxs[fr->callno])
(6736,&iaxs[fr->callno]->state)
(6737,&ied0)
(6738,fr)
(6739,fr->callno)
(6740,connected.id.name)
(6741,fr->callno)
(6742,fr->callno)
(6743,iaxs[fr->callno]->owner)
(6744,fr)
(6745,fr->callno)
(6746,f.subclass.integer)
(6747,newvar)
(6748,iaxs[fr->callno]->lag)
(6749,ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_BUSY)
(6750,sizeof(*fr)
(6751,iaxs[fr->callno])
(6752,)
(6753,NULL)
(6754,send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1)
(6755,fr->callno)
(6756,username)
(6757,integer)
(6758,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(6759,fr->ts = (iaxs[fr->callno]->last & 0xFFFF8000L)
(6760,sin.sin_addr)
(6761,callno)
(6762,callno)
(6763,&tmpfmt)
(6764,0)
(6765,sin)
(6766,peer)
(6767,0)
(6768,*fh = (struct ast_iax2_full_hdr *)
(6769,ied1.buf)
(6770,f)
(6771,)
(6772,if (iaxs[fr->callno])
(6773,callno)
(6774,*newvar = ast_var_assign(var->name, var->value)
(6775,ies)
(6776,&tmpfmt)
(6777,fr->callno)
(6778,using_prefs)
(6779,sin_addr)
(6780,iaxs[fr->callno])
(6781,callno)
(6782,iaxs)
(6783,if (iaxs[fr->callno] && iaxs[fr->callno]->last < fr->ts)
(6784,dcallno)
(6785,ast_inet_ntoa(sin.sin_addr)
(6786,callno)
(6787,ies)
(6788,res++)
(6789,break;)
(6790,subclass)
(6791,sizeof(caller_pref_buf)
(6792,0)
(6793,f.subclass.format.id == AST_FORMAT_SLINEAR)
(6794,&iaxs[fr->callno]->prefs)
(6795,fr)
(6796,IAX_COMMAND_POKE)
(6797,0)
(6798,AST_FRAME_VIDEO)
(6799,fr->callno)
(6800,if (iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)
(6801,state)
(6802,fr)
(6803,iaxs[fr->callno]->transferring = TRANSFER_MREADY)
(6804,fr)
(6805,iaxs[fr->callno]->context)
(6806,moh_suggest)
(6807,0)
(6808,cur->oseqno)
(6809,ast_verb(3, "Format for call is %s\\n", ast_getformatname_multiple(tmp, sizeof(tmp)
(6810,callno)
(6811,variablestore->data)
(6812,subclass)
(6813,iaxs)
(6814,fr)
(6815,ts)
(6816,f.subclass)
(6817,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(6818,NULL)
(6819,bridgecallno)
(6820,1)
(6821,*fr)
(6822,iseqno)
(6823,iaxs[fr->callno])
(6824,ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\\n")
(6825,tmp)
(6826,f.data.ptr)
(6827,case IAX_COMMAND_PONG:)
(6828,IAX_COMMAND_TXACC)
(6829,iaxs[fr->callno])
(6830,fr)
(6831,iaxs[fr->callno])
(6832,check_dcallno = 0)
(6833,iaxs[iaxs[fr->callno]->bridgecallno]->transferring = TRANSFER_MEDIA)
(6834,f)
(6835,fh)
(6836,iaxs[fr->callno]->error)
(6837,callno)
(6838,callno)
(6839,iaxs)
(6840,ies.cause)
(6841,peer)
(6842,if (authdebug)
(6843,iaxs)
(6844,fr)
(6845,fr)
(6846,iaxs[iaxs[fr->callno]->bridgecallno]->transferring)
(6847,ied0.buf)
(6848,iaxsl)
(6849,metacmd)
(6850,fr)
(6851,fr)
(6852,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(6853,iaxs[fr->callno]->last_iax_message = f.subclass.integer)
(6854,scallno)
(6855,using_prefs = "mine")
(6856,f)
(6857,EPERM)
(6858,)
(6859,inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(6860,fr)
(6861,owner)
(6862,for (var = ies.vars; var && var->next; var = var->next)
(6863,fr->callno)
(6864,break;)
(6865,callno)
(6866,strcpy(host_pref_buf,"disabled")
(6867,f.subclass.integer == AST_CONTROL_BUSY)
(6868,iaxs[fr->callno])
(6869,*mh = (struct ast_iax2_mini_hdr *)
(6870,iaxs)
(6871,bridged_chan)
(6872,fr)
(6873,sin.sin_addr)
(6874,state)
(6875,capability)
(6876,iaxs[fr->callno])
(6877,iaxs[fr->callno])
(6878,peercallno)
(6879,varlist)
(6880,fr->iseqno < iaxs[fr->callno]->oseqno)
(6881,fr)
(6882,LOG_ERROR)
(6883,iaxs[fr->callno]->owner)
(6884,prefs)
(6885,ts)
(6886,f)
(6887,fr->callno)
(6888,0xFFFF8000L)
(6889,fr->oseqno)
(6890,iaxs)
(6891,historicms)
(6892,iax_ie_append_versioned_uint64(&ied1, IAX_IE_FORMAT2, 0, format)
(6893,iaxs[fr->callno]->prefs)
(6894,iax2_getformatname(iaxs[fr->callno]->peerformat)
(6895,fr)
(6896,iaxs)
(6897,f.subclass.integer != IAX_COMMAND_TXACC)
(6898,owner)
(6899,ied0)
(6900,peer->smoothing)
(6901,*cause_code)
(6902,IAX_STATE_TBD)
(6903,devicetype)
(6904,iaxs)
(6905,fr)
(6906,subclass)
(6907,"Received iseqno %d not within window %d->%d\\n")
(6908,callno)
(6909,x = fr->iseqno)
(6910,callno)
(6911,fr)
(6912,iaxs)
(6913,if (!format)
(6914,sched)
(6915,iaxs)
(6916,"Accepting DIAL from %s, formats = %s\\n")
(6917,fh)
(6918,store_by_peercallno(iaxs[fr->callno])
(6919,fr->callno)
(6920,iaxs[iaxs[fr->callno]->bridgecallno]->peercallno)
(6921,exten)
(6922,iaxs[fr->callno])
(6923,mh->callno)
(6924,iaxs)
(6925,callno)
(6926,dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num, 1)
(6927,f.len)
(6928,*using_prefs = "mine")
(6929,break;)
(6930,ptr)
(6931,iaxs[fr->callno])
(6932,iaxs[fr->callno]->owner)
(6933,0)
(6934,thread)
(6935,&ies)
(6936,iaxs)
(6937,iaxs)
(6938,fr)
(6939,format = iax2_best_codec(iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(6940,fr->ts)
(6941,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD)
(6942,ast_variables_destroy(ies.vars)
(6943,-1)
(6944,f)
(6945,0)
(6946,memset(&pref, 0, sizeof(pref)
(6947,fr)
(6948,callno)
(6949,if (cur->final)
(6950,IAX_IE_CAUSE)
(6951,ast_channel_ref(owner)
(6952,fr)
(6953,fr)
(6954,pingtime)
(6955,fd)
(6956,-1)
(6957,peer->historicms)
(6958,AST_FRAME_IAX)
(6959,fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno)
(6960,ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
(6961,ts)
(6962,callno)
(6963,f.subclass.integer)
(6964,if (prev)
(6965,stop_stuff(fr->callno)
(6966,iaxs[fr->callno])
(6967,fr->callno)
(6968,ast_strlen_zero(iaxs[fr->callno]->secret)
(6969,fr)
(6970,sin)
(6971,callno)
(6972,IAX_COMMAND_REJECT)
(6973,IAX_COMMAND_ACK)
(6974,callno)
(6975,iaxs)
(6976,AST_FRAME_VIDEO)
(6977,iaxs[fr->callno]->owner)
(6978,callno)
(6979,tmp1)
(6980,1)
(6981,authdebug)
(6982,IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED)
(6983,ast_channel_name(bridged_chan)
(6984,(f.subclass.integer != IAX_COMMAND_TXCNT)
(6985,iaxs)
(6986,ast_strlen_zero(iaxs[fr->callno]->secret)
(6987,iaxs[fr->callno]->state)
(6988,callno)
(6989,iaxs[fr->callno])
(6990,fh)
(6991,callno)
(6992,dcallno = 0)
(6993,owner)
(6994,vh->zeros)
(6995,sin)
(6996,ast_debug(1, "Packet arrived out of order (expecting %d, got %d)
(6997,tmp2)
(6998,break;)
(6999,iaxs)
(7000,f)
(7001,callno)
(7002,IAX_COMMAND_UNQUELCH)
(7003,ptr)
(7004,ast_debug(1, "I can haz iaxvars, but they is no good.  :-(\\n")
(7005,fr->callno)
(7006,"Receiving")
(7007,AST_FRAME_IAX)
(7008,ied0)
(7009,IAX_COMMAND_VNAK)
(7010,ied0)
(7011,newvar)
(7012,peerformat)
(7013,fr)
(7014,iaxs)
(7015,fr->callno)
(7016,iaxs)
(7017,iaxs)
(7018,iseqno)
(7019,meta)
(7020,pref)
(7021,thread)
(7022,)
(7023,f.frametype == AST_FRAME_IAX)
(7024,iaxs[fr->callno])
(7025,fr->callno)
(7026,samples)
(7027,iaxs[fr->callno])
(7028,sin.sin_addr)
(7029,var)
(7030,&iaxs[fr->callno]->state)
(7031,fh->iseqno)
(7032,ies.challenge)
(7033,IAX_FLAG_RETRANS)
(7034,res < sizeof(*vh)
(7035,callno)
(7036,fr)
(7037,peer)
(7038,rprefs)
(7039,iaxs)
(7040,0)
(7041,f.subclass.integer == IAX_COMMAND_REGREQ || f.subclass.integer == IAX_COMMAND_REGREL)
(7042,fr)
(7043,exists = 0)
(7044,frametype)
(7045,using_prefs)
(7046,variablestore && varlist)
(7047,fr->callno)
(7048,fr->callno)
(7049,vnak_retransmit(fr->callno, fr->iseqno)
(7050,format)
(7051,!iaxs[fr->callno])
(7052,ied1)
(7053,authdebug)
(7054,ied0.buf)
(7055,if (iaxs[fr->callno]->pingtime <= peer->maxms)
(7056,fr->callno)
(7057,pref)
(7058,fr->callno)
(7059,varlist)
(7060,ast_variables_destroy(ies.vars)
(7061,iaxs[fr->callno])
(7062,f.subclass)
(7063,iaxs[fr->callno])
(7064,if (f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_POKE)
(7065,variablestore)
(7066,thread)
(7067,iaxs[fr->callno])
(7068,iaxs[fr->callno])
(7069,fh->iseqno)
(7070,iaxs[fr->callno])
(7071,owner)
(7072,callno)
(7073,!iaxs[fr->callno]->owner)
(7074,iaxs)
(7075,)
(7076,1)
(7077,sin.sin_addr)
(7078,iaxs)
(7079,AST_CONTROL_UNHOLD)
(7080,iaxs[fr->callno])
(7081,socket_process_meta(res, meta, &sin, fd, fr)
(7082,sin.sin_addr)
(7083,iaxs[fr->callno]->peercapability)
(7084,)
(7085,mh)
(7086,var)
(7087,ast_debug(1, "Neat, somebody took away the channel at a magical time but i found it!\\n")
(7088,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(7089,iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension")
(7090,fh)
(7091,code)
(7092,fr)
(7093,ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
(7094,iax_ie_append_int(&ied1, IAX_IE_FORMAT, format)
(7095,iaxs[fr->callno]->state)
(7096,default:)
(7097,fr)
(7098,f)
(7099,fr)
(7100,iaxs)
(7101,iaxs)
(7102,iaxs[fr->callno])
(7103,1)
(7104,iaxs)
(7105,ast_log(LOG_NOTICE, "Packet Decrypt Failed!\\n")
(7106,iaxs[fr->callno])
(7107,fr)
(7108,VERBOSE_PREFIX_4)
(7109,prev)
(7110,iaxs[fr->callno]->peercapability)
(7111,ied0)
(7112,iaxs[fr->callno])
(7113,!iaxs[fr->callno])
(7114,connected)
(7115,iaxs[fr->callno])
(7116,fr->callno)
(7117,if (!inaddrcmp(&sin, &iaxs[fr->callno]->addr)
(7118,0)
(7119,fr->callno)
(7120,f.subclass.integer != IAX_COMMAND_TXCNT)
(7121,iaxs[fr->callno]->exten)
(7122,mallocd)
(7123,prev)
(7124,owner)
(7125,iseqno)
(7126,f.src)
(7127,iaxs[fr->callno])
(7128,fr->callno)
(7129,peer->lastms < 0)
(7130,format)
(7131,tmpfmt)
(7132,1)
(7133,iaxs)
(7134,callno)
(7135,f.frametype == AST_FRAME_IAX)
(7136,integer)
(7137,iaxs[fr->callno])
(7138,ast_log(LOG_WARNING, "Received mini frame before first full video frame\\n")
(7139,ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner)
(7140,iaxs)
(7141,fr->callno)
(7142,newvar)
(7143,&ied0)
(7144,sizeof(*fr)
(7145,!format)
(7146,iaxs)
(7147,ast_getformatname(&f.subclass.format)
(7148,ts)
(7149,vars)
(7150,fr->callno)
(7151,! (f.frametype == AST_FRAME_IAX &&\n\\n\\t\\t\\t\\t\\t\\t\\t\\t(f.subclass == IAX_COMMAND_NEW ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_AUTHREQ ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_ACCEPT ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_REJECT)
(7152,"disabled")
(7153,f.subclass.integer)
(7154,iaxs[fr->callno]->transferring = TRANSFER_READY)
(7155,buf)
(7156,fr)
(7157,first_iax_message)
(7158,iaxs[fr->callno])
(7159,fh->csub)
(7160,(ntohs(mh->ts)
(7161,iaxs)
(7162,if (test_resync)
(7163,(cur = AST_LIST_LAST(&frame_queue[fr->callno])
(7164,auth_fail(fr->callno, IAX_COMMAND_REJECT)
(7165,varlist)
(7166,"we\'ve been told to rotate our encryption key, "\n\\n\\t\\t\\t\\t\\t\\t"but this isn\'t an encrypted call. bad things will happen.\\n")
(7167,callno)
(7168,f.frametype)
(7169,af)
(7170,f.subclass.integer)
(7171,iaxs[fr->callno])
(7172,peer->name)
(7173,callno)
(7174,x != iaxs[fr->callno]->oseqno)
(7175,fr)
(7176,TRANSFER_MREADY)
(7177,fr)
(7178,dcallno == 1)
(7179,fr)
(7180,0)
(7181,ies)
(7182,)
(7183,IAX_COMMAND_REJECT)
(7184,break;)
(7185,fr->callno)
(7186,iaxs[fr->callno])
(7187,call_to_destroy)
(7188,LOG_WARNING)
(7189,peerformat)
(7190,0)
(7191,f.subclass.integer == IAX_COMMAND_ACK)
(7192,ast_debug(1, "No channel, so populating IAXVARs to the pvt, as an intermediate step.\\n")
(7193,fr->callno)
(7194,exists)
(7195,ied0.pos)
(7196,connected.id.name)
(7197,"Status: On\\r\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n")
(7198,ied0)
(7199,iaxs[fr->callno])
(7200,fr)
(7201,ies.vars)
(7202,ast_variables_destroy(ies.vars)
(7203,format)
(7204,callno)
(7205,fr)
(7206,res - sizeof(*fh)
(7207,callno)
(7208,if (res >= sizeof(*fh)
(7209,callno)
(7210,IAX_ALREADYGONE)
(7211,sizeof(ied0)
(7212,iaxs[fr->callno])
(7213,ntohs(vh->ts)
(7214,subclass)
(7215,fr)
(7216,case IAX_COMMAND_DIAL:)
(7217,callno)
(7218,iaxs)
(7219,"Registry")
(7220,if (handle_call_token(fh, &ies, &sin, fd)
(7221,IAX_STATE_STARTED)
(7222,sizeof(struct ast_iax2_mini_hdr)
(7223,calc_timestamp(iaxs[fr->callno], 0, &f)
(7224,f.frametype == AST_FRAME_VIDEO)
(7225,0)
(7226,updatehistory)
(7227,calc_timestamp(iaxs[fr->callno], 0, &fr->af)
(7228,fr->callno)
(7229,callno)
(7230,0)
(7231,fr->callno)
(7232,pos)
(7233,subclass)
(7234,thread->buf + sizeof(struct ast_iax2_full_hdr)
(7235,strcmp(iaxs[fr->callno]->exten, "TBD")
(7236,0x1)
(7237,vars)
(7238,if (varlist)
(7239,f.subclass.format)
(7240,LOG_ERROR)
(7241,f.frametype == AST_FRAME_CONTROL)
(7242,callno)
(7243,-1)
(7244,iaxs)
(7245,data)
(7246,iaxs[fr->callno])
(7247,ies)
(7248,manager_event(EVENT_FLAG_SYSTEM, "Registry", "ChannelType: IAX2\\r\\nUsername: %s\\r\\nStatus: Rejected\\r\\nCause: %s\\r\\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>")
(7249,fr)
(7250,format = iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(7251,callno)
(7252,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(7253,fr)
(7254,iaxs)
(7255,0)
(7256,callno)
(7257,callno)
(7258,NULL)
(7259,sizeof(*cause_code)
(7260,NULL)
(7261,"midget packet received (%d of %d min)
(7262,if ((iaxs[iaxs[fr->callno]->bridgecallno]->transferring == TRANSFER_READY)
(7263,1)
(7264,1)
(7265,callno)
(7266,callno)
(7267,ied0)
(7268,if (ast_channel_readformat(iaxs[fr->callno]->owner)
(7269,f)
(7270,case IAX_COMMAND_TXCNT:)
(7271,iaxs[fr->callno])
(7272,&ied1)
(7273,break;)
(7274,iaxs)
(7275,callno)
(7276,fr)
(7277,ast_mutex_unlock(&iaxsl[fr->callno])
(7278,fr->callno)
(7279,frametype)
(7280,iaxs[fr->callno])
(7281,updatehistory=1)
(7282,authdebug)
(7283,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
(7284,f.subclass.integer == IAX_COMMAND_REGREL)
(7285,(unsigned char)
(7286,fr)
(7287,fr)
(7288,tmp2)
(7289,sizeof(tmp)
(7290,iseqno)
(7291,fr->callno)
(7292,iaxs[fr->callno])
(7293,&iaxsl[fr->callno])
(7294,iaxs[fr->callno])
(7295,)
(7296,iaxs[fr->callno])
(7297,fr)
(7298,"For call=%d, set last=%d\\n")
(7299,&iaxs[fr->callno]->addr)
(7300,"I can haz iaxvars, but they is no good.  :-(\\n")
(7301,fr->callno)
(7302,cur)
(7303,fr)
(7304,sizeof(ied0)
(7305,AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(7306,IAX_IE_CAUSECODE)
(7307,)
(7308,iaxs[fr->callno])
(7309,f.subclass.integer != IAX_COMMAND_TXCNT)
(7310,if (strcmp(iaxs[fr->callno]->exten, "TBD")
(7311,ied0)
(7312,fr)
(7313,iaxs)
(7314,sizeof(tmp2)
(7315,vars)
(7316,iaxs)
(7317,rprefs)
(7318,fd)
(7319,prefs)
(7320,NULL)
(7321,peer->pokeexpire = iax2_sched_add(sched, peer->pokefreqok, iax2_poke_peer_s, peer_ref(peer)
(7322,fr)
(7323,fr->iseqno)
(7324,sizeof(*mh)
(7325,callno)
(7326,fr->ts)
(7327,transferring)
(7328,ies.called_number)
(7329,fr)
(7330,tmp)
(7331,strcpy(caller_pref_buf, "disabled")
(7332,)
(7333,peercapability)
(7334,test_resync)
(7335,ies.cause)
(7336,iaxs)
(7337,callno)
(7338,)
(7339,if(!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(7340,LOG_WARNING)
(7341,chosenformat)
(7342,ast_variables_destroy(ies.vars)
(7343,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOPREFS)
(7344,fr)
(7345,LOG_WARNING)
(7346,fr->af.subclass.integer = IAX_COMMAND_LAGRP)
(7347,iax2_getformatname_multiple(tmp, sizeof(tmp)
(7348,pos)
(7349,fr)
(7350,f)
(7351,f.datalen && (f.frametype == AST_FRAME_VOICE)
(7352,fr)
(7353,ied0)
(7354,fr)
(7355,fr->ts)
(7356,callno)
(7357,iaxs[fr->callno])
(7358,f.data.ptr)
(7359,next)
(7360,"<Unknown>")
(7361,AST_FRAME_IAX)
(7362,duped_fr)
(7363,fr)
(7364,iaxsl[fr->callno])
(7365,f.frametype == AST_FRAME_IAX)
(7366,iaxs[fr->callno]->peerformat)
(7367,bridged_chan)
(7368,memset(&ied1, 0, sizeof(ied1)
(7369,LOG_NOTICE)
(7370,ast_strlen_zero(iaxs[fr->callno]->inkeys)
(7371,break;)
(7372,integer)
(7373,f.subclass.integer == IAX_COMMAND_ACK)
(7374,dp->flags & CACHE_FLAG_TRANSMITTED)
(7375,tmp)
(7376,frames_received)
(7377,(unsigned char *)
(7378,thread->buf)
(7379,ies)
(7380,iaxs[fr->callno])
(7381,state)
(7382,iaxs)
(7383,iaxs[fr->callno])
(7384,iaxs)
(7385,pokeexpire)
(7386,LOG_WARNING)
(7387,&f)
(7388,f.frametype = AST_FRAME_VOICE)
(7389,ast_set_flag64(iaxs[fr->callno], IAX_QUELCH)
(7390,iaxs)
(7391,)
(7392,NULL)
(7393,if (!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(7394,ast_verb(3, "Call accepted by %s (format %s)
(7395,iaxsl)
(7396,iaxs[fr->callno]->initid)
(7397,iseqno)
(7398,f.subclass)
(7399,ast_debug(1, "Destroying call %d\\n", fr->callno)
(7400,oseqno)
(7401,iaxs)
(7402,minivid)
(7403,sin_addr)
(7404,if (iaxs[fr->callno]->owner && authdebug)
(7405,fr)
(7406,res - sizeof(*vh)
(7407,-1)
(7408,ies)
(7409,cid_num)
(7410,f.frametype == AST_FRAME_IAX)
(7411,ies)
(7412,data_size = sizeof(*cause_code)
(7413,using_prefs = "caller")
(7414,!(dp->flags & CACHE_FLAG_TRANSMITTED)
(7415,case IAX_COMMAND_HANGUP:)
(7416,snprintf(cause_code->code, data_size - sizeof(*cause_code)
(7417,)
(7418,fr->callno)
(7419,iaxs)
(7420,iaxs)
(7421,iaxs[fr->callno])
(7422,IAX_ALREADYGONE)
(7423,iaxs)
(7424,iaxs[fr->callno]->owner)
(7425,fr->afdatalen)
(7426,fr->callno)
(7427,subclass)
(7428,capability)
(7429,fr->callno)
(7430,fr->callno)
(7431,&f)
(7432,AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(7433,memset(&ied0, 0, sizeof(ied0)
(7434,cur)
(7435,connected.id.number.valid)
(7436,pingtime)
(7437,!minivid)
(7438,fr)
(7439,iaxs[fr->callno]->capability)
(7440,fr->callno)
(7441,memset(&iaxs[fr->callno]->transfer, 0, sizeof(iaxs[fr->callno]->transfer)
(7442,context)
(7443,fh->csub)
(7444,iaxs[fr->callno])
(7445,called_number)
(7446,if (\n\\n\\t\\t\\t ((f.subclass.integer != IAX_COMMAND_ACK)
(7447,)
(7448,iax2_getformatname_multiple(tmp1, sizeof(tmp1)
(7449,ast_format_cap_destroy(orignative)
(7450,ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)
(7451,mh->callno)
(7452,ast_mutex_unlock(&iaxsl[fr->callno])
(7453,owner)
(7454,fr)
(7455,fr->callno)
(7456,context)
(7457,state)
(7458,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, requested \'%s\' incompatible with our capability \'%s\'.\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(7459,iaxsl[fr->callno])
(7460,connected)
(7461,ntohs(mh->callno)
(7462,authdebug)
(7463,if (f.frametype == AST_FRAME_CONTROL && iaxs[fr->callno]->owner)
(7464,iaxs[fr->callno]->owner)
(7465,)
(7466,iaxs)
(7467,ies.vars)
(7468,iaxs[fr->callno])
(7469,ast_mutex_unlock(&iaxsl[fr->callno])
(7470,sin.sin_addr)
(7471,iaxs)
(7472,x=iaxs[fr->callno]->rseqno)
(7473,fr)
(7474,IAX_CODEC_NOCAP)
(7475,IAX_COMMAND_REGREJ)
(7476,iaxs[fr->callno])
(7477,(f.subclass.integer != IAX_COMMAND_TXREL)
(7478,)
(7479,)
(7480,!AST_SCHED_DEL(sched, peer->pokeexpire)
(7481,iaxs)
(7482,register_verify(fr->callno, &sin, &ies)
(7483,"Registry error\\n")
(7484,iaxs)
(7485,host_pref_buf)
(7486,peerformat)
(7487,iax_ie_append_str(&ied0, IAX_IE_CAUSE, "No such context/extension")
(7488,iaxs[fr->callno])
(7489,caller_pref_buf)
(7490,f)
(7491,iaxs)
(7492,integer)
(7493,cause_code)
(7494,transferring)
(7495,host_pref_buf)
(7496,)
(7497,connected.id)
(7498,frametype)
(7499,iaxs[fr->callno])
(7500,callno)
(7501,iaxs[fr->callno])
(7502,fr)
(7503,if (!iaxs[fr->callno])
(7504,*vh)
(7505,iaxs)
(7506,iax2_dprequest(dp, fr->callno)
(7507,fr->callno)
(7508,iaxs[fr->callno])
(7509,iaxs[fr->callno]->exten)
(7510,iaxs[iaxs[fr->callno]->bridgecallno])
(7511,fr)
(7512,rprefs)
(7513,if (!iaxs[fr->callno])
(7514,ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(7515,capability)
(7516,fr->callno)
(7517,iaxs[fr->callno]->owner)
(7518,ies.vars)
(7519,iaxs)
(7520,format)
(7521,authdebug)
(7522,iaxs[fr->callno]->capability)
(7523,f.frametype)
(7524,1)
(7525,iax_ie_append_str(&ied0, IAX_IE_CAUSE, "Unable to negotiate codec")
(7526,VERBOSE_PREFIX_4)
(7527,format)
(7528,0)
(7529,0)
(7530,state)
(7531,if (x == cur->oseqno)
(7532,prev)
(7533,ast_callid_unref(mount_callid)
(7534,iax2_getformatname_multiple(tmp1, sizeof(tmp1)
(7535,integer)
(7536,fr->callno)
(7537,)
(7538,fr)
(7539,thread->buf)
(7540,iaxs[fr->callno])
(7541,iaxs[fr->callno])
(7542,IAX_IE_CALLNO)
(7543,tmp1)
(7544,iaxs[iaxs[fr->callno]->bridgecallno])
(7545,)
(7546,iaxs)
(7547,varlist)
(7548,iax2_destroy(fr->callno)
(7549,if ((fh->csub >> 6)
(7550,fr->callno)
(7551,fr)
(7552,fh)
(7553,exten)
(7554,NULL)
(7555,callno)
(7556,NULL)
(7557,fr->callno)
(7558,callno)
(7559,callno)
(7560,iaxs)
(7561,callno)
(7562,error)
(7563,error)
(7564,f.subclass.integer)
(7565,ied1)
(7566,NULL)
(7567,)
(7568,ied0)
(7569,frametype)
(7570,0)
(7571,fr->af)
(7572,iaxsl[fr->callno])
(7573,fr)
(7574,)
(7575,IAX_COMMAND_TXREJ)
(7576,fr)
(7577,&iaxsl[fr->callno])
(7578,ast_debug(1, "Received VNAK: resending outstanding frames\\n")
(7579,subclass)
(7580,fr->callno)
(7581,vh)
(7582,&iaxs[fr->callno]->state)
(7583,mount_callid = iax_pvt_callid_get(fr->callno)
(7584,fr)
(7585,x)
(7586,f)
(7587,!ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(7588,IAX_COMMAND_REJECT)
(7589,callno)
(7590,fr)
(7591,callno)
(7592,fr->callno)
(7593,ntohs(mh->callno)
(7594,ies.vars)
(7595,NULL)
(7596,iaxs[iaxs[fr->callno]->bridgecallno])
(7597,callno)
(7598,iaxs[fr->callno]->context)
(7599,varlist)
(7600,iaxs)
(7601,if (ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED | IAX_STATE_TBD | IAX_STATE_AUTHENTICATED)
(7602,pokeexpire)
(7603,(unsigned char *)
(7604,ast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
(7605,0)
(7606,fd)
(7607,vars)
(7608,fr)
(7609,ies.devicetype)
(7610,fh->dcallno)
(7611,fr->callno)
(7612,callno)
(7613,new_callno = make_trunk(fr->callno, 1)
(7614,0)
(7615,x)
(7616,subclass)
(7617,fr)
(7618,ies.calltoken)
(7619,iaxs[fr->callno]->reg)
(7620,iaxs)
(7621,fr)
(7622,pos)
(7623,ies.vars)
(7624,authdebug)
(7625,ast_channel_nativeformats(iaxs[fr->callno]->owner)
(7626,tmp2)
(7627,0)
(7628,iaxs)
(7629,f.src)
(7630,state)
(7631,fr)
(7632,LOG_ERROR)
(7633,"Accepting UNAUTHENTICATED call from %s:\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%srequested format = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%srequested prefs = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%sactual format = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%shost prefs = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%spriority = %s\\n")
(7634,iaxs[fr->callno])
(7635,)
(7636,variablestore)
(7637,0)
(7638,IAX_AUTH_MD5)
(7639,fr)
(7640,if (prev)
(7641,case IAX_COMMAND_CALLTOKEN:)
(7642,"Rejected connect attempt from %s, who was trying to reach \'%s@%s\'\\n")
(7643,iaxs[fr->callno])
(7644,return 1;)
(7645,NULL)
(7646,duped_fr = iaxfrdup2(fr)
(7647,fr)
(7648,f.frametype == AST_FRAME_IAX &&\n\\n\\t\\t\\t\\t\\t\\t\\t\\t(f.subclass == IAX_COMMAND_NEW ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_AUTHREQ ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_ACCEPT ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_REJECT)
(7649,iaxs[fr->callno])
(7650,if (!format)
(7651,iaxs)
(7652,complete_dpreply(iaxs[fr->callno], &ies)
(7653,callno)
(7654,varlist)
(7655,frametype)
(7656,fr)
(7657,f.subclass)
(7658,iaxs[fr->callno]->context)
(7659,id)
(7660,iaxs)
(7661,ied0)
(7662,AST_LIST_HEAD_INIT(varlist)
(7663,&ied0)
(7664,iaxs[fr->callno]->addr)
(7665,fr)
(7666,iaxs[fr->callno]->last)
(7667,peerformat)
(7668,iaxs)
(7669,f.subclass)
(7670,fr)
(7671,retries)
(7672,callno)
(7673,context)
(7674,buf_size)
(7675,)
(7676,fr)
(7677,transferring)
(7678,fr->callno)
(7679,ies)
(7680,AST_FRAME_VOICE)
(7681,callno)
(7682,iaxs[fr->callno])
(7683,ied0.pos)
(7684,f.subclass.format)
(7685,)
(7686,ast_var_assign(var->name, var->value)
(7687,callno)
(7688,memset(&ied1, 0, sizeof(ied1)
(7689,iaxs[fr->callno]->owner)
(7690,iosin)
(7691,fr)
(7692,fr->callno)
(7693,)
(7694,callno)
(7695,"Async goto of \'%s\' to \'%s@%s\' started\\n")
(7696,iaxs[iaxs[fr->callno]->bridgecallno])
(7697,if (!iaxs[fr->callno])
(7698,fr)
(7699,IAX_COMMAND_FWDATA)
(7700,ast_strlen_zero(iaxs[fr->callno]->secret)
(7701,break;)
(7702,ast_party_connected_line_free(&connected)
(7703,iaxs[fr->callno]->mohsuggest)
(7704,f)
(7705,ast_format_from_old_bitfield(&f.subclass.format, (uncompress_subclass(fh->csub & ~0x40)
(7706,1)
(7707,fr)
(7708,f.subclass.format)
(7709,ast_channel_writeformat(iaxs[fr->callno]->owner)
(7710,1)
(7711,sizeof(host_pref_buf)
(7712,0)
(7713,decrypted)
(7714,)
(7715,callno)
(7716,ied0)
(7717,f)
(7718,bridgecallno)
(7719,id)
(7720,iaxs)
(7721,fr->ts)
(7722,samples)
(7723,fr->ts)
(7724,using_prefs = "disabled")
(7725,!iaxs[fr->callno])
(7726,fr->callno)
(7727,f.frametype == AST_FRAME_VOICE)
(7728,addr)
(7729,id)
(7730,NULL)
(7731,NULL)
(7732,1)
(7733,iaxs[fr->callno]->chosenformat)
(7734,fr->callno)
(7735,iaxs[fr->callno]->transferring = TRANSFER_RELEASED)
(7736,iaxs)
(7737,orignative)
(7738,callno)
(7739,ied0)
(7740,ies.iax_unknown)
(7741,callno)
(7742,&ied0)
(7743,f)
(7744,f.subclass)
(7745,fr->callno)
(7746,fr->callno)
(7747,fr->callno)
(7748,callno)
(7749,fr)
(7750,fr->callno)
(7751,peer->historicms)
(7752,ied0)
(7753,)
(7754,iaxs[fr->callno]->addr.sin_addr)
(7755,buf)
(7756,spawn_dp_lookup(fr->callno, iaxs[fr->callno]->context, ies.called_number, iaxs[fr->callno]->cid_num)
(7757,AST_FRAME_IAX)
(7758,iaxs)
(7759,fr->callno)
(7760,IAX_FLAG_FULL)
(7761,callno)
(7762,)
(7763,name)
(7764,iaxs[fr->callno])
(7765,tmp1)
(7766,connected.id.number)
(7767,next)
(7768,fr)
(7769,fh)
(7770,f)
(7771,sin)
(7772,callno)
(7773,fr)
(7774,iax2_vnak(fr->callno)
(7775,fr->callno)
(7776,f.subclass.integer)
(7777,f)
(7778,ast_inet_ntoa(sin.sin_addr)
(7779,iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0)
(7780,f)
(7781,)
(7782,f.subclass.integer)
(7783,fr)
(7784,ies)
(7785,callno)
(7786,fr->callno)
(7787,(iaxs[fr->callno]->last & 0xFFFF8000L)
(7788,callno)
(7789,IAX_COMMAND_TXACC)
(7790,)
(7791,cid_num)
(7792,fr->ts)
(7793,fr->callno)
(7794,*fh)
(7795,fr)
(7796,fr)
(7797,iaxs)
(7798,ied0)
(7799,ts)
(7800,IAX_STATE_STARTED)
(7801,iaxs)
(7802,callno)
(7803,sin.sin_addr)
(7804,iaxs[fr->callno]->owner)
(7805,(ast_strlen_zero(iaxs[fr->callno]->secret)
(7806,AST_FRAME_IAX)
(7807,ast_channel_name(bridged_chan)
(7808,bridged_chan)
(7809,exists)
(7810,f.data.ptr)
(7811,iaxs)
(7812,sin_addr)
(7813,fr)
(7814,sin_addr)
(7815,iaxs[fr->callno])
(7816,iaxs)
(7817,if (owner)
(7818,f.subclass.integer)
(7819,authdebug)
(7820,peerformat)
(7821,!ast_test_flag64(&globalflags, IAX_ALLOWFWDOWNLOAD)
(7822,datalen)
(7823,f.subclass.integer != IAX_COMMAND_TXCNT)
(7824,cur->retries)
(7825,f.frametype == AST_FRAME_TEXT && thread->buf[res - 1] != \'\\0\')
(7826,iaxs)
(7827,&iaxs[fr->callno]->state)
(7828,integer)
(7829,fr->callno)
(7830,iaxs)
(7831,ied1.pos)
(7832,sin_addr)
(7833,fr)
(7834,(f.subclass.integer != IAX_COMMAND_TXACC)
(7835,iaxs[fr->callno]->iseqno)
(7836,fr->callno)
(7837,f.subclass.integer)
(7838,ies.called_number)
(7839,bridgecallno)
(7840,integer)
(7841,ies.causecode > 9)
(7842,fr)
(7843,fr)
(7844,fr)
(7845,format = iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(7846,iaxs[fr->callno]->pingtime)
(7847,0)
(7848,ts)
(7849,return 1;)
(7850,ies)
(7851,"<Unknown>")
(7852,bridgecallno)
(7853,iaxs[fr->callno])
(7854,ts)
(7855,ast_string_field_set(iaxs[fr->callno], cid_name, connected.id.name.str)
(7856,"disabled")
(7857,callno)
(7858,peer)
(7859,1)
(7860,iaxs)
(7861,)
(7862,)
(7863,iaxs)
(7864,iaxs)
(7865,f.subclass)
(7866,subclass)
(7867,peercapability)
(7868,fr->callno)
(7869,f.subclass.integer == IAX_COMMAND_NEW)
(7870,callno)
(7871,0)
(7872,-1)
(7873,fr->callno)
(7874,iaxs[fr->callno])
(7875,fh)
(7876,callno)
(7877,iaxs[fr->callno])
(7878,iaxs[fr->callno]->iaxvars)
(7879,iaxs[fr->callno])
(7880,fr)
(7881,ies.cause ? ies.cause : "<Unknown>")
(7882,)
(7883,IAX_COMMAND_LAGRQ)
(7884,fr->callno)
(7885,fr->callno)
(7886,if ((f.subclass.integer != IAX_COMMAND_ACK)
(7887,ast_channel_hangupcause_set(iaxs[fr->callno]->owner, AST_CAUSE_CONGESTION)
(7888,ast_log(LOG_NOTICE, "Rejected connect attempt from %s, request \'%s@%s\' does not exist\\n", ast_inet_ntoa(sin.sin_addr)
(7889,iaxs[fr->callno]->bridgecallno)
(7890,iaxs[fr->callno]->owner ? ast_channel_name(iaxs[fr->callno]->owner)
(7891,integer)
(7892,peerformat)
(7893,ies)
(7894,(x != iaxs[fr->callno]->oseqno)
(7895,f.subclass.integer != IAX_COMMAND_UNQUELCH)
(7896,iaxs[fr->callno])
(7897,authmethods)
(7898,IAX_COMMAND_REGREJ)
(7899,iaxs[fr->callno]->peercapability)
(7900,iaxs)
(7901,"<Unknown>")
(7902,fr->callno)
(7903,ies)
(7904,f.subclass)
(7905,1)
(7906,IAX_COMMAND_REJECT)
(7907,callno)
(7908,iaxs)
(7909,~IAX_FLAG_FULL)
(7910,subclass)
(7911,)
(7912,callno)
(7913,IAX_COMMAND_REJECT)
(7914,iseqno)
(7915,fh->scallno)
(7916,AST_SCHED_DEL(sched, peer->pokeexpire)
(7917,ast_inet_ntoa(sin.sin_addr)
(7918,ast_format_cap_set(native, &f.subclass.format)
(7919,ied0)
(7920,var)
(7921,callno)
(7922,AST_FRAME_IAX)
(7923,prefs)
(7924,fr)
(7925,f)
(7926,IAX_COMMAND_INVAL)
(7927,f)
(7928,fr)
(7929,iaxs[fr->callno]->bridgecallno)
(7930,callno)
(7931,!iaxs[fr->callno])
(7932,iaxs)
(7933,fr)
(7934,iaxs[fr->callno]->iaxvars)
(7935,)
(7936,callno)
(7937,fr->callno)
(7938,0)
(7939,fr)
(7940,)
(7941,next)
(7942,var)
(7943,buf)
(7944,pos)
(7945,fr)
(7946,iaxs[fr->callno]->capability)
(7947,iaxs)
(7948,historicms)
(7949,fr->callno)
(7950,callno)
(7951,(f.subclass.integer != IAX_COMMAND_TXREADY)
(7952,if (variablestore)
(7953,buf)
(7954,iaxs)
(7955,AST_FRAME_IAX)
(7956,fr->callno)
(7957,IAX_IE_CAUSE)
(7958,meta->metacmd)
(7959,if (peer->pokeexpire == -1)
(7960,fr)
(7961,subclass)
(7962,f.subclass.integer)
(7963,ts)
(7964,iaxs[fr->callno]->transferring)
(7965,causecode)
(7966,fr->callno)
(7967,EVENT_FLAG_SYSTEM)
(7968,IAX_COMMAND_REGREJ)
(7969,fr)
(7970,callno)
(7971,x)
(7972,unsigned char *)
(7973,fr)
(7974,f.subclass.integer)
(7975,)
(7976,fr->callno)
(7977,callno)
(7978,fr)
(7979,rprefs)
(7980,iaxs)
(7981,fr)
(7982,variablestore)
(7983,peer)
(7984,fd)
(7985,data)
(7986,!newvar)
(7987,break;)
(7988,state)
(7989,iaxs)
(7990,peercapability)
(7991,iaxs[fr->callno])
(7992,peercapability)
(7993,callno)
(7994,)
(7995,fr->callno)
(7996,updatehistory)
(7997,iaxdebug)
(7998,1)
(7999,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(8000,iaxs)
(8001,callno)
(8002,peer)
(8003,)
(8004,iaxs[fr->callno])
(8005,fr)
(8006,callno)
(8007,integer)
(8008,subclass)
(8009,iaxs[fr->callno]->owner && ast_test_flag64(iaxs[fr->callno], IAX_QUELCH)
(8010,iaxs[fr->callno]->peerformat)
(8011,ied0)
(8012,iaxs[fr->callno])
(8013,f.subclass)
(8014,1)
(8015,format)
(8016,)
(8017,capability)
(8018,inkeys)
(8019,fh->ts)
(8020,iaxs)
(8021,iaxs[fr->callno])
(8022,f.subclass.integer != IAX_COMMAND_CALLTOKEN)
(8023,iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)
(8024,f.subclass.integer != IAX_COMMAND_TXACC)
(8025,send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREADY, 0, ied1.buf, ied1.pos, -1)
(8026,f)
(8027,f)
(8028,)
(8029,callno)
(8030,!authenticate_request(fr->callno)
(8031,ast_mutex_unlock(&iaxsl[call_to_destroy])
(8032,fr->callno)
(8033,if (call_to_destroy)
(8034,f)
(8035,subclass[40] = "")
(8036,ies.called_number)
(8037,iaxs)
(8038,sin)
(8039,)
(8040,iaxsl)
(8041,)
(8042,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
(8043,if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(8044,if (iax2_ack_registry(&ies, &sin, fr->callno)
(8045,callno)
(8046,iaxs)
(8047,iaxs[fr->callno])
(8048,)
(8049,iaxs[fr->callno])
(8050,iaxs)
(8051,break;)
(8052,ts)
(8053,iaxs[fr->callno])
(8054,iaxs[fr->callno])
(8055,fr)
(8056,varlist)
(8057,iaxs[fr->callno]->frames_received++)
(8058,tmp2)
(8059,NULL)
(8060,using_prefs)
(8061,res)
(8062,iaxs[fr->callno])
(8063,&iaxsl[fr->callno])
(8064,transferring)
(8065,caller_pref_buf)
(8066,ied0.pos)
(8067,sizeof(tmp1)
(8068,ast_mutex_lock(&iaxsl[fr->callno])
(8069,)
(8070,calling_pres)
(8071,fr->callno)
(8072,if (orignative)
(8073,break;)
(8074,fr)
(8075,ies.serviceident && sin.sin_addr.s_addr)
(8076,fr)
(8077,ies.username)
(8078,callno)
(8079,peer->pokeexpire)
(8080,fr)
(8081,mh)
(8082,integer)
(8083,iaxs[fr->callno])
(8084,vars)
(8085,1)
(8086,data)
(8087,callno)
(8088,cause)
(8089,fr->callno)
(8090,ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner)
(8091,iax2_getformatname_multiple(tmp1, sizeof(tmp1)
(8092,callno)
(8093,iaxs[fr->callno])
(8094,fr->callno)
(8095,fr->callno)
(8096,iaxs)
(8097,&pref)
(8098,ast_variables_destroy(ies.vars)
(8099,iaxs)
(8100,save_osptoken(fr, &ies)
(8101,res < 0)
(8102,iaxs[fr->callno]->owner)
(8103,callno)
(8104,1)
(8105,pokeexpire)
(8106,AST_FRAME_VOICE)
(8107,test_resync)
(8108,IAX_COMMAND_REJECT)
(8109,ast_inet_ntoa(sin.sin_addr)
(8110,buf)
(8111,thread->buf + sizeof(struct ast_iax2_full_hdr)
(8112,decrypted)
(8113,iaxs)
(8114,iaxs[fr->callno])
(8115,(iaxs[fr->callno]->last & 0xFFFF0000L)
(8116,videoformat)
(8117,fr->callno)
(8118,peerformat)
(8119,if (ast_async_goto(bridged_chan, context, ies.called_number, 1)
(8120,break;)
(8121,iaxs[fr->callno]->videoformat)
(8122,case IAX_COMMAND_DPREP:)
(8123,ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
(8124,iaxs[fr->callno]->last)
(8125,moh_suggest)
(8126,check_dcallno = 1)
(8127,iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability)
(8128,iaxs[fr->callno])
(8129,IAX_COMMAND_REJECT)
(8130,iaxs)
(8131,callno)
(8132,&sin)
(8133,iaxs[iaxs[fr->callno]->bridgecallno])
(8134,minivid)
(8135,ies.vars)
(8136,callno)
(8137,!fr->callno)
(8138,fr->callno)
(8139,pingied)
(8140,)
(8141,iaxs[fr->callno])
(8142,iax2_lock_owner(fr->callno)
(8143,iaxs[fr->callno])
(8144,send_command(iaxs[fr->callno], AST_FRAME_CONTROL, AST_CONTROL_PROGRESS, 0, NULL, 0, -1)
(8145,bridgecallno)
(8146,frametype)
(8147,fr->callno)
(8148,NULL)
(8149,ied1.buf)
(8150,iax2_destroy(fr->callno)
(8151,iaxsl)
(8152,ast_debug(1, "Peer %s lag measured as %dms\\n",\n\\n\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
(8153,fh->oseqno)
(8154,ast_channel_readformat(iaxs[fr->callno]->owner)
(8155,&f.subclass.format)
(8156,using_prefs)
(8157,iaxs[fr->callno])
(8158,state)
(8159,fr->callno)
(8160,1)
(8161,iaxs[fr->callno])
(8162,fr->iseqno)
(8163,1)
(8164,iaxs[fr->callno]->addr)
(8165,fr->callno)
(8166,iaxs)
(8167,fr)
(8168,f.subclass == IAX_COMMAND_ACCEPT ||\n\\n\\t\\t\\t\\t\\t\\t\\t\\t f.subclass == IAX_COMMAND_REJECT)
(8169,0)
(8170,tmp)
(8171,iaxs)
(8172,"No such context/extension")
(8173,1)
(8174,ies.vars = NULL)
(8175,return 1;)
(8176,context)
(8177,iax2_getformatname_multiple(tmp2, sizeof(tmp2)
(8178,if (!iaxs[fr->callno]->owner)
(8179,ied0)
(8180,uncompress_subclass(fh->csub)
(8181,fr->callno)
(8182,fr)
(8183,callno)
(8184,fr)
(8185,-1)
(8186,0)
(8187,test_resync)
(8188,&ies)
(8189,EVENT_FLAG_SYSTEM)
(8190,iaxs)
(8191,iaxsl)
(8192,f.subclass.integer != IAX_COMMAND_TXCNT &&\\t\\t/* for attended transfer */\n\\n\\t\\tf.subclass.integer != IAX_COMMAND_TXACC)
(8193,prev = var)
(8194,if (test_resync)
(8195,IAX_STATE_TBD)
(8196,ast_log(LOG_WARNING, "Call rejected by %s: %s\\n",\n\\n\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(iaxs[fr->callno]->addr.sin_addr)
(8197,fr->callno)
(8198,&ied0)
(8199,ied0)
(8200,iaxs[fr->callno])
(8201,)
(8202,0)
(8203,if (!format)
(8204,ies)
(8205,ast_variables_destroy(ies.vars)
(8206,iaxs[fr->callno])
(8207,ast_strdupa(iaxs[fr->callno]->context)
(8208,fr->iseqno)
(8209,iaxs[fr->callno])
(8210,fr)
(8211,sin)
(8212,3)
(8213,voiceformat)
(8214,using_prefs)
(8215,auth_fail(fr->callno, IAX_COMMAND_REJECT)
(8216,fr->callno)
(8217,sizeof(tmp)
(8218,name)
(8219,pref = iaxs[fr->callno]->prefs)
(8220,owner)
(8221,integer)
(8222,fd)
(8223,fr)
(8224,0)
(8225,fr->callno)
(8226,cur)
(8227,f.subclass.integer != IAX_COMMAND_TXCNT)
(8228,connected)
(8229,iaxsl)
(8230,fr)
(8231,fr)
(8232,ast_verb(3, "Accepting UNAUTHENTICATED call from %s:\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%srequested format = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%srequested prefs = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%sactual format = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%shost prefs = %s,\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t"%spriority = %s\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\t\\tast_inet_ntoa(sin.sin_addr)
(8233,IAX_CODEC_NOCAP)
(8234,iaxs[fr->callno])
(8235,)
(8236,fr)
(8237,f.subclass)
(8238,callno)
(8239,capability)
(8240,fr->callno)
(8241,fh->csub == IAX_COMMAND_REGREJ\n\\n\\t\\t\\t|| fh->csub == IAX_COMMAND_TXREJ)
(8242,fr->callno)
(8243,oseqno)
(8244,fr->ts = ntohl(fh->ts)
(8245,iaxs[fr->callno]->peerformat)
(8246,ied0)
(8247,thread)
(8248,&res)
(8249,fr)
(8250,last)
(8251,ies.serviceident)
(8252,)
(8253,bridgecallno)
(8254,iaxs[fr->callno])
(8255,fr->callno)
(8256,1)
(8257,iaxs[fr->callno]->transferring = TRANSFER_MEDIA)
(8258,iaxs)
(8259,ies)
(8260,if (format)
(8261,iaxs)
(8262,!minivid &&\n\\n\\t\\tf.subclass.integer != IAX_COMMAND_TXCNT &&\\t\\t/* for attended transfer */\n\\n\\t\\tf.subclass.integer != IAX_COMMAND_TXACC)
(8263,integer)
(8264,fr->callno)
(8265,iaxs[fr->callno])
(8266,break;)
(8267,transferring)
(8268,iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(8269,iaxsl)
(8270,fr)
(8271,iaxs[fr->callno])
(8272,fr->callno)
(8273,fr->callno)
(8274,caller_pref_buf)
(8275,f.subclass.integer)
(8276,ies)
(8277,iaxs)
(8278,strcpy(host_pref_buf, "disabled")
(8279,iaxs)
(8280,IAX_COMMAND_TXACC)
(8281,registry_rerequest(&ies, fr->callno, &sin)
(8282,ies)
(8283,iaxs)
(8284,iaxs)
(8285,callno)
(8286,)
(8287,iaxs[fr->callno]->owner)
(8288,pref)
(8289,iaxs)
(8290,subclass)
(8291,&ied1)
(8292,!ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->chosenformat, NULL,\n\\n\\t\\t\\t\\t\\t\\t  ast_test_flag(&iaxs[fr->callno]->state, IAX_STATE_AUTHENTICATED)
(8293,iaxs[fr->callno])
(8294,sizeof(tmp2)
(8295,fr)
(8296,f.subclass.integer != IAX_COMMAND_VNAK)
(8297,fr->callno)
(8298,fr)
(8299,fr->callno)
(8300,)
(8301,maxms)
(8302,ast_log(LOG_WARNING, "Registration failure\\n")
(8303,callno)
(8304,connected)
(8305,fr)
(8306,fr)
(8307,&connected)
(8308,0)
(8309,send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACCEPT, 0, ied1.buf, ied1.pos, -1)
(8310,1)
(8311,iaxs[fr->callno]->rseqno)
(8312,&ies)
(8313,ast_channel_uniqueid(iaxs[fr->callno]->owner)
(8314,iseqno)
(8315,exists)
(8316,&ied0)
(8317,ast_variables_destroy(ies.vars)
(8318,frametype)
(8319,callno)
(8320,tmp2)
(8321,!IAX_CALLENCRYPTED(iaxs[fr->callno])
(8322,0)
(8323,case IAX_COMMAND_PING:)
(8324,peerformat)
(8325,3)
(8326,buf_len)
(8327,iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(8328,mount_callid)
(8329,break;)
(8330,cause_code->ast_cause = ies.causecode)
(8331,mh->callno)
(8332,sin)
(8333,ied0.pos)
(8334,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(8335,iaxs[fr->callno])
(8336,format)
(8337,f)
(8338,iaxs[fr->callno]->exten)
(8339,if (f.frametype == AST_FRAME_IAX)
(8340,f)
(8341,callno)
(8342,if (ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
(8343,iaxs[fr->callno])
(8344,3)
(8345,iaxs[fr->callno])
(8346,pref)
(8347,iaxs[fr->callno]->addr)
(8348,connected.id.name.presentation)
(8349,)
(8350,"Releasing %s and %s\\n")
(8351,callno)
(8352,ast_exists_extension(NULL, context, exten, 1, cid_num)
(8353,ies.causecode)
(8354,if (!iaxs[fr->callno]->first_iax_message)
(8355,)
(8356,fh->ts)
(8357,var)
(8358,iaxs[fr->callno])
(8359,f.subclass.integer)
(8360,thread->buf)
(8361,datalen)
(8362,fwdesc)
(8363,f)
(8364,peer->pokeexpire)
(8365,ts)
(8366,tmp)
(8367,native)
(8368,0)
(8369,callno)
(8370,iaxs)
(8371,videoformat)
(8372,&ied0)
(8373,IAX_COMMAND_PONG)
(8374,fr)
(8375,fr->callno)
(8376,ast_channel_readformat(iaxs[fr->callno]->owner)
(8377,if(ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(8378,subclass)
(8379,fr)
(8380,if (!iaxs[fr->callno])
(8381,varlist)
(8382,ies.vars)
(8383,ast_string_field_set(iaxs[fr->callno], cid_num, connected.id.number.str)
(8384,iaxs)
(8385,iaxs[fr->callno])
(8386,ast_debug(1, "Received packet %d, (%d, %u)
(8387,ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(8388,callno)
(8389,if (ast_bridged_channel(iaxs[fr->callno]->owner)
(8390,callno)
(8391,f)
(8392,ies)
(8393,connected)
(8394,var)
(8395,iaxs[fr->callno]->aseqno)
(8396,iaxdebug && iaxs[fr->callno])
(8397,called_number)
(8398,if (f.datalen && (f.frametype == AST_FRAME_VOICE)
(8399,ast_format_from_old_bitfield(&f.subclass.format, uncompress_subclass(fh->csub)
(8400,IAX_COMMAND_LAGRP)
(8401,-1)
(8402,iaxsl)
(8403,fr->callno)
(8404,new_peercallno)
(8405,&ies)
(8406,fr)
(8407,iax2_destroy(fr->callno)
(8408,connected.id)
(8409,IAX_STATE_STARTED | IAX_STATE_TBD)
(8410,sizeof(*fh)
(8411,if (ast_parking_ext_valid(ies.called_number, owner, context)
(8412,iseqno)
(8413,ast_datastore_free(variablestore)
(8414,IAX_COMMAND_TXREJ)
(8415,ied1)
(8416,callno)
(8417,send_command(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_TXREL, 0, ied0.buf, ied0.pos, -1)
(8418,fr)
(8419,f)
(8420,callno)
(8421,)
(8422,&f)
(8423,fr->callno)
(8424,iaxs[fr->callno])
(8425,stop_stuff(fr->callno)
(8426,send_command_final(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_REJECT, 0, ied0.buf, ied0.pos, -1)
(8427,fr->callno)
(8428,99)
(8429,state)
(8430,iaxs)
(8431,iaxs[fr->callno])
(8432,"Ooh, voice format changed to \'%s\'\\n")
(8433,iaxs[fr->callno])
(8434,if ((iaxs[fr->callno]->transferring == TRANSFER_BEGIN)
(8435,iaxs)
(8436,ast_codec_get_samples(&f)
(8437,fr)
(8438,iaxs[fr->callno]->voiceformat = ast_format_to_old_bitfield(&f.subclass.format)
(8439,dcallno)
(8440,sizeof(ied0)
(8441,&iaxsl[fr->callno])
(8442,1)
(8443,if (f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)
(8444,f.frametype)
(8445,)
(8446,f.subclass.format.id)
(8447,!(iaxs[fr->callno]->peerformat & iaxs[fr->callno]->capability)
(8448,break;)
(8449,iaxs[fr->callno]->peercapability)
(8450,fr->callno)
(8451,var)
(8452,iaxs)
(8453,buf)
(8454,iax2_getformatname_multiple(tmp2, sizeof(tmp2)
(8455,fr->callno)
(8456,ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE)
(8457,codec_prefs)
(8458,format)
(8459,)
(8460,ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
(8461,iaxs[fr->callno]->bridgecallno)
(8462,f.frametype)
(8463,owner)
(8464,sizeof(pref)
(8465,pref)
(8466,fr->callno)
(8467,bridged_chan)
(8468,if (iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno || (fr->iseqno >= iaxs[fr->callno]->rseqno && fr->iseqno < iaxs[fr->callno]->oseqno)
(8469,fr)
(8470,iaxs)
(8471,f)
(8472,IAX_IE_FORMAT)
(8473,owner = iaxs[fr->callno]->owner)
(8474,pos)
(8475,fr->callno)
(8476,iaxs[fr->callno])
(8477,callno)
(8478,)
(8479,"Call accepted by %s (format %s)
(8480,ied0)
(8481,memset(&pref, 0, sizeof(pref)
(8482,&ies)
(8483,f.offset)
(8484,AST_FRAME_VIDEO)
(8485,fr->outoforder)
(8486,callno)
(8487,fh->csub)
(8488,peer)
(8489,fr)
(8490,IAX_COMMAND_TXREADY)
(8491,fr)
(8492,variablestore->inheritance = DATASTORE_INHERIT_FOREVER)
(8493,fr->callno)
(8494,iaxs)
(8495,ast_log(LOG_NOTICE, "Registration of \'%s\' rejected: \'%s\' from: \'%s\'\\n", iaxs[fr->callno]->reg->username, ies.cause ? ies.cause : "<unknown>", ast_inet_ntoa(sin.sin_addr)
(8496,iaxs[fr->callno])
(8497,format)
(8498,fr->callno)
(8499,iaxs[fr->callno]->aseqno)
(8500,iaxs[fr->callno]->peercapability)
(8501,lastms)
(8502,ast_mutex_unlock(&iaxsl[fr->callno])
(8503,peer)
(8504,ntohl(fh->ts)
(8505,iaxs[fr->callno]->exten)
(8506,iaxs[fr->callno])
(8507,peer)
(8508,(f.frametype == AST_FRAME_IAX)
(8509,memset(&ied0, 0, sizeof(ied0)
(8510,fr)
(8511,iaxs)
(8512,iaxs)
(8513,sin)
(8514,schedule_delivery(duped_fr, updatehistory, 0, &fr->ts)
(8515,ied0)
(8516,format)
(8517,iaxs)
(8518,)
(8519,fr->callno)
(8520,format = iax2_codec_choose(&pref, iaxs[fr->callno]->capability & iaxs[fr->callno]->peercapability, 0)
(8521,f.subclass.integer != IAX_COMMAND_TXCNT)
(8522,cause)
(8523,iaxs[fr->callno]->owner)
(8524,fr)
(8525,fr)
(8526,iaxs)
(8527,tmp3)
(8528,fr)
(8529,fh)
(8530,iaxs)
(8531,iaxs)
(8532,pos)
(8533,iaxs)
(8534,sizeof(*fh)
(8535,iaxsl)
(8536,peer)
(8537,variablestore)
(8538,number)
(8539,fr->iseqno)
(8540,struct ast_iax2_full_hdr)
(8541,"Rejecting packet from \'%s.%d\' that is flagged as a full frame but is too short\\n")
(8542,thread->buf)
(8543,3)
(8544,ast_mutex_unlock(&iaxsl[fr->callno])
(8545,data)
(8546,using_prefs = "disabled")
(8547,NULL)
(8548,1)
(8549,ies.username)
(8550,transferring)
(8551,fh)
(8552,ies)
(8553,f)
(8554,)
(8555,\'\\0\')
(8556,callno)
(8557,varlist)
(8558,format = iax2_codec_choose(&pref, iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability, 1)
(8559,bridgecallno)
(8560,iaxs[fr->callno]->state)
(8561,integer)
(8562,"Rejected connect attempt from %s, requested \'%s\' incompatible with our capability \'%s\'.\\n")
(8563,iaxs[fr->callno])
(8564,ntohs(mh->callno)
(8565,if (prev)
(8566,fr = ast_alloca(sizeof(*fr)
(8567,"No such context/extension")
(8568,f)
(8569,"Received packet %d, (%d, %u)
(8570,callno)
(8571,0)
(8572,reg)
(8573,iaxs[fr->callno] && iaxs[fr->callno]->last < fr->ts)
(8574,iaxs)
(8575,iaxs[fr->callno])
(8576,if (res < sizeof(*fh)
(8577,"Memory allocation error while processing IAX2 variables\\n")
(8578,1)
(8579,fd = thread->iofd)
(8580,~IAX_FLAG_RETRANS)
(8581,break;)
(8582,f.subclass.integer)
(8583,iaxs)
(8584,integer)
(8585,capability)
(8586,dcallno)
(8587,128)
(8588,AST_STATE_RING)
(8589,fr->callno)
(8590,fr->callno)
(8591,0)
(8592,var)
(8593,0)
(8594,pingtime)
(8595,iaxs[fr->callno]->owner)
(8596,iaxs[fr->callno]->owner)
(8597,iaxs[fr->callno]->transferring)
(8598,iaxs[fr->callno]->peerformat)
(8599,strcmp(iaxs[fr->callno]->exten, "TBD")
(8600,pos)
(8601,!ast_exists_extension(NULL, iaxs[fr->callno]->context, iaxs[fr->callno]->exten, 1, iaxs[fr->callno]->cid_num)
(8602,&globalflags)
(8603,0)
(8604,"Call on %s is already up, can\'t start on it\\n")
(8605,iaxs[fr->callno])
(8606,iaxs[fr->callno]->owner)
(8607,sizeof(*mh)
(8608,"mine")
(8609,iaxs[fr->callno])
(8610,f.subclass)
(8611,fr->callno)
(8612,frametype)
(8613,fr)
(8614,iaxs)
(8615,state)
(8616,fr->callno)
(8617,fr)
(8618,TRANSFER_MBEGIN)
(8619,iaxs[fr->callno]->secret)
(8620,AST_FRAME_IAX)
(8621,frametype)
(8622,ts)
(8623,fr->callno)
(8624,)
(8625,fr)
(8626,sin)
(8627,variablestore->data = varlist)
(8628,fr->ts)
(8629,cid_num)
(8630,peer->name)
(8631,0)
(8632,fr)
(8633,iaxs[fr->callno]->reg->regstate = REG_STATE_REJECTED)
(8634,iaxs[iaxs[fr->callno]->bridgecallno])
(8635,iseqno)
(8636,ies)
(8637,callno)
(8638,fr->callno)
(8639,check_dcallno)
(8640,callno)
(8641,maxms)
(8642,fr)
(8643,host_pref_buf)
(8644,fr)
(8645,fr)
(8646,exists)
(8647,iaxs)
(8648,IAX_COMMAND_ACK)
(8649,f.data)
(8650,f.subclass.integer != IAX_COMMAND_FWDOWNL)
(8651,f.frametype != AST_FRAME_IAX)
(8652,f.subclass.format.id != ast_format_id_from_old_bitfield(iaxs[fr->callno]->videoformat)
(8653,iaxs[fr->callno]->rseqno >= iaxs[fr->callno]->oseqno)
(8654,callno)
(8655,iseqno)
(8656,callno)
(8657,ntohs(fh->dcallno)
(8658,f.subclass.integer)
(8659,fr)
(8660,32)
(8661,if (check_access(fr->callno, &sin, &ies)
(8662,f.frametype)
(8663,capability)
(8664,fr->afdatalen = 4096)
(8665,iaxs)
(8666,"<Unknown>")
(8667,NULL)
(8668,0)
(8669,fr)
(8670,!format)
(8671,fr)
(8672,integer)
(8673,)
(8674,fr->callno)
(8675,"PeerStatus")
(8676,fr->callno)
(8677,callno)
(8678,"Unknown IAX command %d on %d/%d\\n")
(8679,iaxs)
(8680,iaxs[fr->callno])
(8681,fr)
(8682,final)
(8683,iaxs[fr->callno]->owner)
(8684,IAX_CODEC_NOCAP)
(8685,f)
(8686,called_number)
(8687,1)
(8688,send_command(iaxs[iaxs[fr->callno]->bridgecallno], AST_FRAME_IAX, IAX_COMMAND_TXMEDIA, 0, ied1.buf, ied1.pos, -1)
(8689,fr)
(8690,f)
(8691,iaxs)
(8692,callno)
(8693,callno)
(8694,exists = 0)
(8695,f)
(8696,1)
(8697,using_prefs = "mine")
(8698,ast_channel_nativeformats(iaxs[fr->callno]->owner)
(8699,fr)
(8700,ast_manager_event(iaxs[fr->callno]->owner, EVENT_FLAG_CALL, "Hold",\n\\n\\t\\t\\t\\t\\t\\t\\t"Status: Off\\r\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t"Channel: %s\\r\\n"\n\\n\\t\\t\\t\\t\\t\\t\\t"Uniqueid: %s\\r\\n",\n\\n\\t\\t\\t\\t\\t\\t\\tast_channel_name(iaxs[fr->callno]->owner)
(8701,peer->lastms < 0)
(8702,callno)
(8703,f.data.ptr)
(8704,2)
(8705,number)
(8706,return 1;)
(8707,vars)
(8708,oseqno)
(8709,peer)
(8710,peerformat)
(8711,iax2_vnak(fr->callno)
(8712,iaxs[fr->callno]->capability)
(8713,fr->callno)
(8714,fr)
(8715,iaxs[iaxs[fr->callno]->bridgecallno])
(8716,1)
(8717,context)
(8718,ied0)
(8719,if (iaxs[iaxs[fr->callno]->bridgecallno]->transferring)
(8720,ast_free(varlist)
(8721,IAX_COMMAND_REJECT)
(8722,)
(8723,dcallno)
(8724,iseqno)
(8725,ast_inet_ntoa(sin.sin_addr)
(8726,iaxs)
(8727,callno)
(8728,prev)
(8729,ast_channel_caller(iaxs[fr->callno]->owner)
(8730,!iaxs[fr->callno])
(8731,sizeof(*varlist)
(8732,callno)
(8733,*varlist)
(8734,-1)
(8735,fr->outoforder)
(8736,sizeof(tmp1)
(8737,fr->callno)
(8738,iax2_destroy(fr->callno)
(8739,fr)
(8740,iaxs)
(8741,f.frametype)
(8742,iaxdebug)
(8743,fr->callno)
(8744,integer)
(8745,iaxs[fr->callno]->last < fr->ts)
(8746,&ied0)
(8747,newvar)
(8748,iaxs)
(8749,peercallno)
(8750,callno)
(8751,)
(8752,fr->callno)
(8753,connected.id)
(8754,iaxsl[fr->callno])
(8755,&ies)
(8756,subclass)
(8757,iaxs)
(8758,f.subclass.integer)
(8759,struct ast_iax2_video_hdr *)
(8760,AST_LIST_INSERT_TAIL(varlist, newvar, entries)
(8761,f)
(8762,sin.sin_addr)
(8763,fr)
(8764,f.subclass)
(8765,iax2_lock_owner(fr->callno)
(8766,callno)
(8767,pref)
(8768,IAX_COMMAND_REJECT)
(8769,f.subclass.integer != IAX_COMMAND_TXCNT)
(8770,if (!AST_SCHED_DEL(sched, peer->pokeexpire)
(8771,fr->callno)
(8772,iaxs[fr->callno]->owner)
(8773,iaxs[fr->callno]->owner)
(8774,id)
(8775,addr)
(8776,if (duped_fr)
(8777,f.data.ptr = empty)
(8778,f.subclass.integer)
(8779,IAX_STATE_TBD | IAX_STATE_AUTHENTICATED)
(8780,callno)
(8781,varlist)
(8782,fr->callno)
(8783,ies)
(8784,callno)
(8785,ast_set_flag64(iaxs[fr->callno], IAX_DELAYPBXSTART)
(8786,IAX_COMMAND_INVAL)
(8787,f.subclass)
(8788,iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_BEARERCAPABILITY_NOTAVAIL)
(8789,iaxs)
(8790,iaxs[fr->callno]->bridgecallno)
(8791,f.subclass == IAX_COMMAND_REJECT)
(8792,(f.subclass.integer != IAX_COMMAND_TXREADY)
(8793,pingied.buf)
(8794,callno)
(8795,iaxs[fr->callno]->state)
(8796,cur)
(8797,-1)
(8798,&iaxs[fr->callno]->addr)
(8799,"s")
(8800,ied0)
(8801,pref)
(8802,fr->callno)
(8803,break;)
(8804,break;)
(8805,AST_SCHED_DEL(sched, iaxs[fr->callno]->initid)
(8806,f.frametype)
(8807,ast_channel_nativeformats(iaxs[fr->callno]->owner)
(8808,capability)
(8809,fr)
(8810,callno)
(8811,fr)
(8812,bridged_chan)
(8813,iaxs[fr->callno]->owner)
(8814,ast_set_flag(&iaxs[fr->callno]->state, IAX_STATE_STARTED)
(8815,subclass)
(8816,callno)
(8817,f)
(8818,fr->callno)
(8819,if (!iaxs[fr->callno])
(8820,integer)
(8821,callno)
(8822,sin.sin_addr.s_addr)
(8823,0)
(8824,f.subclass)
(8825,fr->callno)
(8826,fr->iseqno)
(8827,f.subclass.integer)
(8828,AST_FRAME_IAX)
(8829,IAX_CODEC_USER_FIRST)
(8830,sizeof(tmp2)
(8831,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(8832,ast_channel_name(iaxs[iaxs[fr->callno]->bridgecallno]->owner)
(8833,ast_set_callerid(iaxs[fr->callno]->owner,\n\\n\\t\\t\\t\\t\\tS_COR(connected.id.number.valid, connected.id.number.str, "")
(8834,"Rejected connect attempt from %s, requested/capability \'%s\'/\'%s\' incompatible with our capability \'%s\'.\\n")
(8835,fr)
(8836,fr->callno)
(8837,ast_channel_caller(iaxs[fr->callno]->owner)
(8838,prev)
(8839,native)
(8840,"Channel \'%s\' ready to transfer\\n")
(8841,format)
(8842,case IAX_COMMAND_REJECT:)
(8843,1)
(8844,AST_CAUSE_NO_ROUTE_DESTINATION)
(8845,fr)
(8846,if (iaxs[fr->callno]->peercallno)
(8847,ast_channel_unlock(iaxs[fr->callno]->owner)
(8848,iaxs[fr->callno])
(8849,mh)
(8850,-1)
(8851,fh->csub & ~0x40)
(8852,iaxs[fr->callno]->peercapability)
(8853,callno)
(8854,res)
(8855,f.frametype == AST_FRAME_VOICE)
(8856,"Memory allocation error while processing IAX2 variables\\n")
(8857,fr->callno)
(8858,iaxs[fr->callno]->peerformat = ast_format_cap_to_old_bitfield(ast_channel_nativeformats(iaxs[fr->callno]->owner)
(8859,fr->callno)
(8860,fr)
(8861,iaxs[fr->callno])
(8862,iaxs[fr->callno])
(8863,f.frametype == AST_FRAME_IAX && f.subclass.integer == IAX_COMMAND_POKE)
(8864,mh)
(8865,iaxs[iaxs[fr->callno]->bridgecallno]->transferring)
(8866,iaxs[fr->callno])
(8867,sin)
(8868,callno)
(8869,(0 + peer->historicms)
(8870,capability)
(8871,if (iaxs[fr->callno]->owner)
(8872,if (variablestore && varlist)
(8873,1)
(8874,f.data)
(8875,owner)
(8876,callno)
(8877,ast_channel_unlock(iaxs[fr->callno]->owner)
(8878,fr)
(8879,)
(8880,LOG_WARNING)
(8881,TRANSFER_MEDIA)
(8882,f)
(8883,iaxs[fr->callno])
(8884,fr)
(8885,c = ast_iax2_new(fr->callno, AST_STATE_RING, iaxs[fr->callno]->peerformat, NULL, 1)
(8886,iaxs[fr->callno]->bridgecallno)
(8887,iaxs[fr->callno])
(8888,1)
(8889,manager_event(EVENT_FLAG_SYSTEM, "PeerStatus", "ChannelType: IAX2\\r\\nPeer: IAX2/%s\\r\\nPeerStatus: Reachable\\r\\nTime: %d\\r\\n", peer->name, iaxs[fr->callno]->pingtime)
(8890,frametype)
(8891,oseqno)
(8892,rprefs)
(8893,caller_pref_buf)
(8894,fr)
(8895,variablestore->data = varlist)
(8896,"disabled")
(8897,pref)
(8898,iaxs)
(8899,&sin)
(8900,iaxs[fr->callno]->state)
(8901,)
(8902,iaxs)
(8903,f)
(8904,ast_set_flag64(iaxs[fr->callno], IAX_ALREADYGONE)
(8905,f.frametype != AST_FRAME_IAX)
(8906,owner)
(8907,ast_mutex_unlock(&iaxsl[fr->callno])
(8908,cur)
(8909,fr)
(8910,callno)
(8911,iax_ie_append_byte(&ied0, IAX_IE_CAUSECODE, AST_CAUSE_NO_ROUTE_DESTINATION)
(8912,iaxs[fr->callno])
(8913,ast_test_flag64(iaxs[fr->callno], IAX_CODEC_USER_FIRST)
(8914,AST_FRAME_IAX)
(8915,NULL)
(8916,iaxs[fr->callno])
(8917,if (f.datalen)
(8918,connected.id.number.str)
(8919,iaxs)
(8920,fr)
(8921,fr)
(8922,fh->ts)
(8923,sizeof(*vh)
(8924,ast_codec_pref_index(&iaxs[fr->callno]->rprefs, 0, &tmpfmt)
(8925,callno)
(8926,(ntohs(fh->dcallno)
(8927,IAX_COMMAND_ACK)
(8928,iaxdebug)
(8929,context)
(8930,memset(&pref, 0, sizeof(pref)
(8931,fh)
(8932,sizeof(subclass)
(8933,if (iaxs[fr->callno] && iaxs[fr->callno]->owner)
(8934,dp->flags)
(8935,&ied1)
(8936,iax2_getformatname_multiple(tmp, sizeof(tmp)
(8937,)
(8938,ied0)
(8939,ast_log(LOG_ERROR, "No best format in %s???\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\t\\tiax2_getformatname_multiple(tmp1, sizeof(tmp1)
(8940,IAX_COMMAND_TXCNT)
(8941,sin.sin_port)
(8942,LOG_WARNING)
(8943,peer)
(8944,iaxs)
(8945,!iaxs[fr->callno] || !iaxs[fr->callno]->owner)
(8946,f)
(8947,iaxs[fr->callno])
(8948,fr->callno)
(8949,ast_free(prev)
(8950,callno)
(8951,iaxs)
(8952,iaxs[fr->callno])
(8953,iaxs)
(8954,if (ast_test_flag64(iaxs[fr->callno], IAX_CODEC_NOCAP)
(8955,lag)
(8956,iaxs[fr->callno]->state)
(8957,memset(&ied0, 0, sizeof(ied0)
(8958,)
(8959,IAX_STATE_AUTHENTICATED)
(8960,fr->callno)
(8961,ied0.pos)
(8962,f.subclass)
(8963,&ies)
(8964,frametype)
(8965,callno)
(8966,fr->iseqno)
(8967,ies.vars)
(8968,integer)
(8969,ts)
(8970,memset(&ied0, 0, sizeof(ied0)
(8971,fh->iseqno)
(8972,fr->callno)
(8973,AST_FRAME_TEXT)
(8974,ast_strdupa(iaxs[fr->callno]->cid_num)
(8975,break;)
(8976,callno)
(8977,callno)
(8978,IAX_COMMAND_INVAL)
(8979,call_to_destroy)
(8980,ies.vars)
(8981,if (!ast_test_flag64(iaxs[fr->callno], IAX_RECVCONNECTEDLINE)
(8982,fr)
(8983,callno)
(8984,bridgecallno)
(8985,!ast_strlen_zero(moh_suggest)
(8986,iaxs[fr->callno]->capability)
(8987,callno)
(8988,)
(8989,iaxs[fr->callno])
(8990,0)
(8991,f)
(8992,&iaxs[fr->callno]->state)
(8993,iaxs[fr->callno]->transferring = TRANSFER_MEDIAPASS)
(8994,)
(8995,iaxs[fr->callno]->transferring = TRANSFER_READY)
(8996,0)
(8997,c)
(8998,EVENT_FLAG_SYSTEM)
(8999,&sin)
(9000,fr)
(9001,ntohs(fh->dcallno)
(9002,test_resync)
(9003,iaxcompat)
(9004,format)
(9005,peer)
(9006,ntohs(mh->ts)
(9007,ast_mutex_lock(&iaxsl[fr->callno])
(9008,ast_devstate_changed(AST_DEVICE_NOT_INUSE, AST_DEVSTATE_CACHABLE, "IAX2/%s", peer->name)
(9009,fr->callno)
(9010,f)
(9011,iaxs[fr->callno]->owner)
(9012,memset(&ied1, 0, sizeof(ied1)
(9013,fr)
(9014,NULL)
(9015,ies)
(9016,iseqno)
(9017,ies)
(9018,variablestore->inheritance = DATASTORE_INHERIT_FOREVER)
(9019,iaxs)
(9020,1)
(9021,ast_log(LOG_ERROR, "Memory allocation error while processing IAX2 variables\\n")
(9022,iaxs[fr->callno]->transferring == TRANSFER_MBEGIN)
(9023,iaxs)
(9024,(peer->lastms < 0)
(9025,ntohs(vh->callno)
(9026,callno)
(9027,variablestore = ast_datastore_alloc(&iax2_variable_datastore_info, NULL)
(9028,callno)
(9029,vars)
(9030,vars)
(9031,fr)
(9032,sin)
(9033,callno)
(9034,iaxs[fr->callno])
(9035,x)
(9036,f.subclass.integer != IAX_COMMAND_TXACC)
(9037,iaxs[fr->callno])
(9038,IAX_STATE_STARTED)
(9039,fr)
(9040,iaxs)
(9041,integer)
(9042,iaxs[fr->callno]->transferring)
(9043,ied0)
(9044,)
(9045,AST_LIST_UNLOCK(&dpcache)
(9046,fr->callno)
(9047,fr)
(9048,fr->callno)
(9049,)
(9050,)
(9051,NULL)
(9052,tmpfmt)
(9053,iaxs[fr->callno])
(9054,fr->callno)
(9055,iaxs)
(9056,fr->callno)
(9057,id)
(9058,fr)
(9059,iaxs[fr->callno])
(9060,(unsigned short)
(9061,ast_channel_name(iaxs[fr->callno]->owner)
(9062,fr)
(9063,pos)
(9064,IAX_STATE_AUTHENTICATED)
(9065,iaxs)
(9066,iaxs[fr->callno]->owner)
(9067,NULL)
(9068,iaxsl[fr->callno])
(9069,causecode)
(9070,variablestore)
(9071,fr)
(9072,"Really destroying %d, having been acked on final message\\n")
(9073,if (ies.vars)
(9074,callno)
(9075,ies.vars)
(9076,ast_inet_ntoa(sin.sin_addr)
(9077,)
(9078,complete_transfer(fr->callno, &ies)
(9079,mh->callno)
(9080,callno)
(9081,iaxs[fr->callno]->addr)
(9082,callno)
(9083,&iaxsl[fr->callno])
(9084,fr->callno)
(9085,sin_port)
(9086,&connected)
(9087,fr->callno)
(9088,TRANSFER_READY)
(9089,iaxs)
(9090,format)
(9091,last)
(9092,ied0.buf)
(9093,iaxs[fr->callno])
(9094,AST_LIST_LOCK(&dpcache)
(9095,IAX_ALLOWFWDOWNLOAD)
(9096,fr->callno)
(9097,sin)
(9098,fr->callno)
(9099,if (strcmp(iaxs[fr->callno]->exten, "TBD")
(9100,fr)
(9101,if (!fr->callno || !iaxs[fr->callno])
(9102,f.frametype)
(9103,var = ies.vars)
(9104,return 1;)
(9105,iaxs[fr->callno]->peerformat)
(9106,iaxs)
(9107,&pref)
(9108,fr->callno)
(9109,)
(9110,format)
(9111,"Received mini frame before first full voice frame\\n")
(9112,iaxs[fr->callno]->peercapability & iaxs[fr->callno]->capability)
(9113,send_command_immediate(iaxs[fr->callno], AST_FRAME_IAX, IAX_COMMAND_ACK, fr->ts, NULL, 0,fr->iseqno)
(9114,AST_CONTROL_CONNECTED_LINE)
(9115,owner)
(9116,iax2_variable_datastore_info)
(9117,-1)
(9118,iaxs[fr->callno]->peercallno)
(9119,!newvar)
(9120,fr->callno)
(9121,sizeof(*cause_code)
(9122,fr->callno)
(9123,iaxsl[fr->callno])
(9124,break;)
(9125,fr)
(9126,)
(9127,AST_FRAME_IAX)
(9128,fr)
(9129,iaxs)
(9130,IAX_COMMAND_NEW)
(9131,peer)
(9132,mh)
(9133,f)
(9134,fr->callno)
(9135,IAX_IE_CAUSECODE)
(9136,return 1;)
(9137,IAX_COMMAND_PONG)
(9138,registry_authrequest(fr->callno)
(9139,cause_code)
(9140,orignative)
(9141,struct ast_iax2_full_hdr)
(9142,subclass)
(9143,subclass)
(9144,"I can haz IAX vars? w00t\\n")
(9145,!iaxs[fr->callno])
(9146,iaxs[fr->callno]->state)
(9147,ntohs(vh->callno)
(9148,)
(9149,ntohs(fh->dcallno)
(9150,strcmp(iaxs[fr->callno]->exten, "TBD")
(9151,subclass)
(9152,cause)
(9153,case IAX_COMMAND_TXMEDIA:)
(9154,NULL)
(9155,merge_encryption(iaxs[fr->callno],ies.encmethods)
(9156,thread)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^