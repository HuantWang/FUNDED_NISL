-----label-----
1
-----code-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_02_bad()
{
    twoIntsStruct * data;
    data = NULL;
    if(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine(&data[0]);
    }
    if(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
32,35
33,34
36,37
37,38
37,39
38,39
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
72,73
73,74
73,75
74,75
76,77
77,78
77,79
78,79
81,82
81,83
83,84
-----nextToken-----
2,4,9,11,12,16,18,20,25,29,31,34,35,39,40,44,46,51,53,59,60,61,62,68,69,70,71,75,79,80,82,84
-----computeFrom-----
14,15
14,16
23,24
23,25
42,43
42,44
55,56
55,57
64,65
64,66
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__twoIntsStruct_calloc_02_bad(){    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__twoIntsStruct_calloc_02_bad()
CWE401_Memory_Leak__twoIntsStruct_calloc_02_bad
{    twoIntsStruct * data;    data = NULL;    if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }    if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
twoIntsStruct * data;
twoIntsStruct * data;
twoIntsStruct
twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine(&data[0]);    }
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct));
data = (twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
data
data
(twoIntsStruct *)calloc(100, sizeof(twoIntsStruct))
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
calloc(100, sizeof(twoIntsStruct))
calloc
calloc
100
sizeof(twoIntsStruct)
twoIntsStruct
twoIntsStruct
twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine(&data[0]);
printStructLine(&data[0])
printStructLine
printStructLine
&data[0]
data[0]
data
data
0
if(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(12,2,0)
(17,38,0)
(44,15,0)
(5,18,0)
(15,17,0)
(45,9,0)
(15,24,0)
(36,32,0)
(15,44,0)
(3,20,0)
(30,46,0)
(32,46,0)
(42,20,0)
(24,15,0)
(16,24,0)
(37,29,0)
(18,9,0)
(27,19,0)
(1,16,0)
(19,24,0)
(25,0,0)
(19,36,0)
(2,12,0)
(29,24,0)
(36,19,0)
(0,25,0)
(6,9,0)
(33,30,0)
(31,46,0)
(38,17,0)
(17,15,0)
(29,12,0)
(10,32,0)
(11,36,0)
(35,25,0)
(2,46,0)
(0,40,0)
(23,20,0)
(14,29,0)
(26,38,0)
(9,18,0)
(12,29,0)
(43,20,0)
(28,17,0)
(21,16,0)
(8,23,0)
(34,24,0)
(7,23,0)
(24,46,0)
(18,30,0)
(9,24,0)
(22,19,0)
(0,25,1)
(5,9,1)
(8,7,1)
(18,5,1)
(29,14,1)
(25,35,1)
(12,29,1)
(18,9,1)
(35,16,1)
(28,34,1)
(34,39,1)
(32,10,1)
(15,44,1)
(41,2,1)
(16,1,1)
(26,28,1)
(15,17,1)
(11,19,1)
(29,24,1)
(17,38,1)
(38,26,1)
(36,11,1)
(24,15,1)
(1,21,1)
(27,0,1)
(14,37,1)
(41,39,1)
(37,30,1)
(45,32,1)
(33,18,1)
(19,22,1)
(2,12,1)
(9,6,1)
(22,27,1)
(6,45,1)
(9,24,1)
(19,24,1)
(27,16,1)
(36,19,1)
(21,24,1)
(39,23,1)
(30,33,1)
(23,8,1)
(4,41,1)
(10,36,1)
(16,24,1)
(29,24,2)
(15,44,2)
(1,39,2)
(2,12,2)
(6,39,2)
(28,39,2)
(15,17,2)
(36,39,2)
(30,39,2)
(38,39,2)
(11,39,2)
(29,39,2)
(33,39,2)
(14,39,2)
(21,39,2)
(15,39,2)
(16,24,2)
(22,39,2)
(19,24,2)
(17,38,2)
(9,24,2)
(18,39,2)
(45,39,2)
(34,39,2)
(16,39,2)
(2,39,2)
(35,16,2)
(0,25,2)
(25,16,2)
(32,39,2)
(17,39,2)
(37,39,2)
(27,39,2)
(12,39,2)
(5,39,2)
(12,29,2)
(19,39,2)
(18,9,2)
(24,15,2)
(10,39,2)
(24,39,2)
(36,19,2)
(26,39,2)
(0,16,2)
(9,39,2)
-----------------------------------
(0,exit(-1)
(1,NULL)
(2,printStructLine(&data[0])
(3,if(1)
(4,RET)
(5,intTwo)
(6,0)
(7,data)
(8,NULL)
(9,data[0])
(10,0)
(11,intOne)
(12,&data[0])
(13, sizeof(twoIntsStruct)
(14,0)
(15,(twoIntsStruct *)
(16,data == NULL)
(17,calloc(100, sizeof(twoIntsStruct)
(18,data[0].intTwo)
(19,data[0])
(20,)
(21,data)
(22,0)
(23,data = NULL)
(24,data = (twoIntsStruct *)
(25,-1)
(26,twoIntsStruct)
(27,data)
(28,100)
(29,data[0])
(30,data[0].intTwo = 0)
(31,if (data == NULL)
(32,data[0].intOne = 0)
(33,0)
(34,data)
(35,1)
(36,data[0].intOne)
(37,data)
(38,sizeof(twoIntsStruct)
(39,1)
(40,)
(41,1)
(42,data)
(43,if(1)
(44,twoIntsStruct *)
(45,data)
(46,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^