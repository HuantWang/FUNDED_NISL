-----label-----
0
-----code-----
static void goodB2G2()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: Read data from the console using fscanf() */
        fscanf(stdin, "%zu", &data);
    }
    if(staticFive==5)
    {
        {
            char * myString;
            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING) && data < 100)
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string or too large");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
18,19
18,20
19,20
22,23
23,24
24,25
24,26
24,27
24,28
25,26
27,28
30,31
31,32
33,34
33,35
34,35
34,36
35,36
38,39
39,40
39,41
40,41
41,42
41,43
43,44
43,45
46,47
46,48
46,49
47,48
47,49
48,49
48,50
49,50
51,52
51,53
52,53
54,55
56,57
56,58
57,58
60,61
60,62
60,63
60,64
60,65
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
68,69
70,71
70,72
71,72
73,74
73,75
74,75
76,77
77,78
77,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
94,97
95,96
97,98
99,100
101,102
102,103
102,104
103,104
105,106
107,108
108,109
108,110
109,110
111,112
113,114
114,115
115,116
115,117
116,117
-----nextToken-----
2,4,9,11,15,16,20,21,26,28,29,32,36,37,42,44,45,50,53,55,58,59,64,67,69,72,75,78,79,83,85,90,92,96,98,100,104,106,110,112,117,118
-----computeFrom-----
13,14
13,15
18,19
18,20
34,35
34,36
47,48
47,49
48,49
48,50
56,57
56,58
62,63
62,64
73,74
73,75
81,82
81,83
-----guardedBy-----
55,100
58,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodB2G2(){    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticFive==5)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
static void
goodB2G2()
goodB2G2
{    size_t data;    /* Initialize data */    data = 0;    if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }    if(staticFive==5)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: Read data from the console using fscanf() */        fscanf(stdin, "%zu", &data);    }
fscanf(stdin, "%zu", &data);
fscanf(stdin, "%zu", &data)
fscanf
fscanf
stdin
stdin
"%zu"
&data
data
data
if(staticFive==5)    {        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
staticFive==5
staticFive
staticFive
5
{        {            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }    }
{            char * myString;            /* FIX: Include a MAXIMUM limitation for memory allocation and a check to ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING) && data < 100)            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string or too large");            }
data > strlen(HELLO_STRING) && data < 100
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
data < 100
data
data
100
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string or too large");            }
printLine("Input is less than the length of the source string or too large");
printLine("Input is less than the length of the source string or too large")
printLine
printLine
"Input is less than the length of the source string or too large"
-----joern-----
(28,45,0)
(9,51,0)
(47,54,0)
(52,2,0)
(15,16,0)
(51,33,0)
(26,54,0)
(12,38,0)
(2,52,0)
(31,27,0)
(28,53,0)
(34,36,0)
(55,45,0)
(30,0,0)
(3,36,0)
(36,34,0)
(55,53,0)
(7,11,0)
(31,30,0)
(18,59,0)
(16,15,0)
(1,51,0)
(26,56,0)
(15,45,0)
(45,53,0)
(42,33,0)
(27,31,0)
(59,5,0)
(43,17,0)
(36,51,0)
(17,45,0)
(22,36,0)
(25,11,0)
(2,51,0)
(17,53,0)
(11,45,0)
(32,55,0)
(29,0,0)
(40,53,0)
(4,0,0)
(52,21,0)
(39,52,0)
(19,52,0)
(6,10,0)
(58,55,0)
(48,49,0)
(36,3,0)
(8,45,0)
(37,33,0)
(54,26,0)
(30,31,0)
(57,10,0)
(20,33,0)
(24,59,0)
(23,3,0)
(14,49,0)
(15,34,0)
(44,31,0)
(13,27,0)
(50,28,0)
(46,2,0)
(45,15,0)
(0,51,0)
(38,41,0)
(31,51,0)
(34,15,0)
(0,30,0)
(26,54,1)
(19,49,1)
(11,45,1)
(52,2,1)
(15,16,1)
(34,36,1)
(43,55,1)
(54,47,1)
(48,51,1)
(30,0,1)
(25,7,1)
(17,45,1)
(55,32,1)
(22,8,1)
(45,15,1)
(15,34,1)
(4,29,1)
(35,10,1)
(29,31,1)
(51,1,1)
(58,11,1)
(36,51,1)
(2,46,1)
(58,26,1)
(55,45,1)
(2,51,1)
(27,13,1)
(49,14,1)
(8,30,1)
(1,9,1)
(31,51,1)
(6,57,1)
(17,43,1)
(35,28,1)
(7,45,1)
(44,10,1)
(32,58,1)
(50,17,1)
(36,3,1)
(38,12,1)
(47,11,1)
(35,38,1)
(12,30,1)
(46,39,1)
(28,45,1)
(23,22,1)
(0,4,1)
(14,48,1)
(0,51,1)
(57,52,1)
(10,6,1)
(39,19,1)
(30,31,1)
(13,44,1)
(28,50,1)
(3,23,1)
(11,25,1)
(31,27,1)
(57,49,1)
(31,10,2)
(23,30,2)
(15,34,2)
(45,15,2)
(31,27,2)
(52,49,2)
(25,30,2)
(32,30,2)
(30,10,2)
(3,30,2)
(12,30,2)
(38,30,2)
(8,30,2)
(46,49,2)
(31,51,2)
(17,30,2)
(36,51,2)
(22,30,2)
(28,45,2)
(26,54,2)
(0,31,2)
(2,51,2)
(44,10,2)
(52,2,2)
(30,0,2)
(54,11,2)
(47,11,2)
(11,30,2)
(34,30,2)
(19,49,2)
(17,45,2)
(13,10,2)
(30,31,2)
(27,10,2)
(45,30,2)
(2,49,2)
(15,30,2)
(11,45,2)
(36,3,2)
(7,30,2)
(58,30,2)
(34,36,2)
(29,31,2)
(26,11,2)
(0,51,2)
(43,30,2)
(15,16,2)
(50,30,2)
(4,31,2)
(36,30,2)
(55,45,2)
(39,49,2)
(28,30,2)
(55,30,2)
-----------------------------------
(0,data < 100)
(1,0)
(2,&data)
(3,sizeof(char)
(4,100)
(5,)
(6,5)
(7,myString)
(8,myString)
(9,data)
(10,staticFive==5)
(11,myString == NULL)
(12,"Input is less than the length of the source string or too large")
(13,HELLO_STRING)
(14,5)
(15,(char *)
(16,char *)
(17,printLine(myString)
(18,if (data > strlen(HELLO_STRING)
(19,stdin)
(20,data)
(21,)
(22,data)
(23,char)
(24,myString)
(25,NULL)
(26,exit(-1)
(27,strlen(HELLO_STRING)
(28,free(myString)
(29,data)
(30,data > strlen(HELLO_STRING)
(31,data > strlen(HELLO_STRING)
(32,HELLO_STRING)
(33,)
(34,malloc(data*sizeof(char)
(35,RET)
(36,data*sizeof(char)
(37,if(staticFive==5)
(38,printLine("Input is less than the length of the source string or too large")
(39,"%zu")
(40,if (myString == NULL)
(41,)
(42,if(staticFive==5)
(43,myString)
(44,data)
(45,myString = (char *)
(46,data)
(47,1)
(48,staticFive)
(49,staticFive==5)
(50,myString)
(51,data = 0)
(52,fscanf(stdin, "%zu", &data)
(53,)
(54,-1)
(55,strcpy(myString, HELLO_STRING)
(56,)
(57,staticFive)
(58,myString)
(59,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^