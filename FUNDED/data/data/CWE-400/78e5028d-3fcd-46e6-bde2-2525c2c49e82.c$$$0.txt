-----label-----
1
-----code-----
static int handle_at_packet(struct context *context,
			    struct descriptor *d,
			    struct descriptor *last)
{
	struct driver_data *driver_data;
	struct fw_packet *packet;
	struct fw_ohci *ohci = context->ohci;
	int evt;

	if (last->transfer_status == 0)
		/* This descriptor isn't done yet, stop iteration. */
		return 0;

	driver_data = (struct driver_data *) &d[3];
	packet = driver_data->packet;
	if (packet == NULL)
		/* This packet was cancelled, just continue. */
		return 1;

	if (packet->payload_bus)
		dma_unmap_single(ohci->card.device, packet->payload_bus,
				 packet->payload_length, DMA_TO_DEVICE);

	evt = le16_to_cpu(last->transfer_status) & 0x1f;
	packet->timestamp = le16_to_cpu(last->res_count);

	log_ar_at_event('T', packet->speed, packet->header, evt);

	switch (evt) {
	case OHCI1394_evt_timeout:
		/* Async response transmit timed out. */
		packet->ack = RCODE_CANCELLED;
		break;

	case OHCI1394_evt_flushed:
		/*
		 * The packet was flushed should give same error as
		 * when we try to use a stale generation count.
		 */
		packet->ack = RCODE_GENERATION;
		break;

	case OHCI1394_evt_missing_ack:
		/*
		 * Using a valid (current) generation count, but the
		 * node is not on the bus or not sending acks.
		 */
		packet->ack = RCODE_NO_ACK;
		break;

	case ACK_COMPLETE + 0x10:
	case ACK_PENDING + 0x10:
	case ACK_BUSY_X + 0x10:
	case ACK_BUSY_A + 0x10:
	case ACK_BUSY_B + 0x10:
	case ACK_DATA_ERROR + 0x10:
	case ACK_TYPE_ERROR + 0x10:
		packet->ack = evt - 0x10;
		break;

	default:
		packet->ack = RCODE_SEND_ERROR;
		break;
	}

	packet->callback(packet, &ohci->card, packet->ack);

	return 1;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
23,35
23,36
23,37
23,38
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
33,34
35,36
35,37
38,39
39,40
39,41
40,41
42,43
42,44
42,45
45,46
46,47
46,48
47,48
50,51
51,52
51,53
53,54
55,56
55,57
56,57
56,58
57,58
57,59
58,59
62,63
64,65
65,66
65,67
66,67
68,69
68,70
69,70
69,71
70,71
72,73
74,75
75,76
75,77
76,77
79,80
80,81
80,82
81,82
83,84
83,85
84,85
87,88
87,89
88,89
88,90
89,90
91,92
93,94
95,96
95,97
96,97
96,98
97,98
100,101
101,102
101,103
101,104
101,105
101,106
102,103
104,105
104,106
105,106
105,107
106,107
110,111
110,112
111,112
114,115
114,116
115,116
118,119
120,121
121,122
121,123
122,123
124,125
124,126
125,126
125,127
126,127
128,129
128,130
129,130
133,134
134,135
134,136
135,136
135,137
136,137
139,140
139,141
140,141
142,143
142,144
143,144
146,147
147,148
147,149
147,150
147,151
147,152
148,149
151,152
151,153
152,153
155,156
155,157
156,157
159,160
161,162
161,163
162,163
164,165
164,166
164,167
164,168
164,169
164,170
164,171
164,172
164,173
164,174
164,175
164,176
164,177
164,178
164,179
164,180
164,181
164,182
164,183
164,184
164,185
165,166
166,167
168,169
169,170
169,171
170,171
170,172
171,172
174,175
177,178
178,179
180,181
181,182
181,183
182,183
182,184
183,184
186,187
189,190
190,191
192,193
193,194
193,195
194,195
194,196
195,196
198,199
201,202
202,203
202,204
203,204
206,207
207,208
207,209
208,209
211,212
212,213
212,214
213,214
216,217
217,218
217,219
218,219
221,222
222,223
222,224
223,224
226,227
227,228
227,229
228,229
231,232
232,233
232,234
233,234
236,237
237,238
237,239
238,239
238,240
239,240
242,243
242,244
243,244
248,249
249,250
249,251
250,251
250,252
251,252
254,255
257,258
258,259
258,260
258,261
258,262
259,260
259,261
260,261
263,264
265,266
266,267
266,268
267,268
270,271
270,272
271,272
274,275
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,27,29,30,34,36,37,41,43,44,48,49,52,54,59,60,61,63,67,71,73,77,78,82,85,86,90,92,94,98,99,103,107,108,109,112,113,116,117,119,123,127,130,131,132,137,138,141,144,145,149,150,153,154,157,158,160,163,167,172,173,175,176,179,184,185,187,188,191,196,197,199,200,204,205,209,210,214,215,219,220,224,225,229,230,234,235,240,241,244,245,246,247,252,253,255,256,261,262,264,268,269,272,273,275
-----computeFrom-----
56,57
56,58
65,66
65,67
80,81
80,82
88,89
88,90
121,122
121,123
124,125
124,126
134,135
134,136
169,170
169,171
181,182
181,183
193,194
193,195
202,203
202,204
207,208
207,209
212,213
212,214
217,218
217,219
222,223
222,224
227,228
227,229
232,233
232,234
237,238
237,239
242,243
242,244
249,250
249,251
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CaseStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CaseStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CaseStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CaseStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CaseStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CaseStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int handle_at_packet(struct context *context,			    struct descriptor *d,			    struct descriptor *last){	struct driver_data *driver_data;	struct fw_packet *packet;	struct fw_ohci *ohci = context->ohci;	int evt;	if (last->transfer_status == 0)		/* This descriptor isn't done yet, stop iteration. */		return 0;	driver_data = (struct driver_data *) &d[3];	packet = driver_data->packet;	if (packet == NULL)		/* This packet was cancelled, just continue. */		return 1;	if (packet->payload_bus)		dma_unmap_single(ohci->card.device, packet->payload_bus,				 packet->payload_length, DMA_TO_DEVICE);	evt = le16_to_cpu(last->transfer_status) & 0x1f;	packet->timestamp = le16_to_cpu(last->res_count);	log_ar_at_event('T', packet->speed, packet->header, evt);	switch (evt) {	case OHCI1394_evt_timeout:		/* Async response transmit timed out. */		packet->ack = RCODE_CANCELLED;		break;	case OHCI1394_evt_flushed:		/*		 * The packet was flushed should give same error as		 * when we try to use a stale generation count.		 */		packet->ack = RCODE_GENERATION;		break;	case OHCI1394_evt_missing_ack:		/*		 * Using a valid (current) generation count, but the		 * node is not on the bus or not sending acks.		 */		packet->ack = RCODE_NO_ACK;		break;	case ACK_COMPLETE + 0x10:	case ACK_PENDING + 0x10:	case ACK_BUSY_X + 0x10:	case ACK_BUSY_A + 0x10:	case ACK_BUSY_B + 0x10:	case ACK_DATA_ERROR + 0x10:	case ACK_TYPE_ERROR + 0x10:		packet->ack = evt - 0x10;		break;	default:		packet->ack = RCODE_SEND_ERROR;		break;	}	packet->callback(packet, &ohci->card, packet->ack);	return 1;}
static int
handle_at_packet(struct context *context,			    struct descriptor *d,			    struct descriptor *last)
handle_at_packet
struct context *context
struct context
context
*context
*
context
struct descriptor *d
struct descriptor
descriptor
*d
*
d
struct descriptor *last
struct descriptor
descriptor
*last
*
last
{	struct driver_data *driver_data;	struct fw_packet *packet;	struct fw_ohci *ohci = context->ohci;	int evt;	if (last->transfer_status == 0)		/* This descriptor isn't done yet, stop iteration. */		return 0;	driver_data = (struct driver_data *) &d[3];	packet = driver_data->packet;	if (packet == NULL)		/* This packet was cancelled, just continue. */		return 1;	if (packet->payload_bus)		dma_unmap_single(ohci->card.device, packet->payload_bus,				 packet->payload_length, DMA_TO_DEVICE);	evt = le16_to_cpu(last->transfer_status) & 0x1f;	packet->timestamp = le16_to_cpu(last->res_count);	log_ar_at_event('T', packet->speed, packet->header, evt);	switch (evt) {	case OHCI1394_evt_timeout:		/* Async response transmit timed out. */		packet->ack = RCODE_CANCELLED;		break;	case OHCI1394_evt_flushed:		/*		 * The packet was flushed should give same error as		 * when we try to use a stale generation count.		 */		packet->ack = RCODE_GENERATION;		break;	case OHCI1394_evt_missing_ack:		/*		 * Using a valid (current) generation count, but the		 * node is not on the bus or not sending acks.		 */		packet->ack = RCODE_NO_ACK;		break;	case ACK_COMPLETE + 0x10:	case ACK_PENDING + 0x10:	case ACK_BUSY_X + 0x10:	case ACK_BUSY_A + 0x10:	case ACK_BUSY_B + 0x10:	case ACK_DATA_ERROR + 0x10:	case ACK_TYPE_ERROR + 0x10:		packet->ack = evt - 0x10;		break;	default:		packet->ack = RCODE_SEND_ERROR;		break;	}	packet->callback(packet, &ohci->card, packet->ack);	return 1;}
struct driver_data *driver_data;
struct driver_data *driver_data;
struct driver_data
driver_data
*driver_data
*
driver_data
struct fw_packet *packet;
struct fw_packet *packet;
struct fw_packet
fw_packet
*packet
*
packet
struct fw_ohci *ohci = context->ohci;
struct fw_ohci *ohci = context->ohci;
struct fw_ohci
fw_ohci
*ohci = context->ohci
*
ohci
= context->ohci
context->ohci
context
context
ohci
int evt;
int evt;
int
evt
evt
if (last->transfer_status == 0)		/* This descriptor isn't done yet, stop iteration. */		return 0;
last->transfer_status == 0
last->transfer_status
last
last
transfer_status
0
return 0;
0
driver_data = (struct driver_data *) &d[3];
driver_data = (struct driver_data *) &d[3]
driver_data
driver_data
(struct driver_data *) &d[3]
struct driver_data *
struct driver_data
driver_data
*
*
&d[3]
d[3]
d
d
3
packet = driver_data->packet;
packet = driver_data->packet
packet
packet
driver_data->packet
driver_data
driver_data
packet
if (packet == NULL)		/* This packet was cancelled, just continue. */		return 1;
packet == NULL
packet
packet
NULL
NULL
return 1;
1
if (packet->payload_bus)		dma_unmap_single(ohci->card.device, packet->payload_bus,				 packet->payload_length, DMA_TO_DEVICE);
packet->payload_bus
packet
packet
payload_bus
dma_unmap_single(ohci->card.device, packet->payload_bus,				 packet->payload_length, DMA_TO_DEVICE);
dma_unmap_single(ohci->card.device, packet->payload_bus,				 packet->payload_length, DMA_TO_DEVICE)
dma_unmap_single
dma_unmap_single
ohci->card.device
ohci->card
ohci
ohci
card
device
packet->payload_bus
packet
packet
payload_bus
packet->payload_length
packet
packet
payload_length
DMA_TO_DEVICE
DMA_TO_DEVICE
evt = le16_to_cpu(last->transfer_status) & 0x1f;
evt = le16_to_cpu(last->transfer_status) & 0x1f
evt
evt
le16_to_cpu(last->transfer_status) & 0x1f
le16_to_cpu(last->transfer_status)
le16_to_cpu
le16_to_cpu
last->transfer_status
last
last
transfer_status
0x1f
packet->timestamp = le16_to_cpu(last->res_count);
packet->timestamp = le16_to_cpu(last->res_count)
packet->timestamp
packet
packet
timestamp
le16_to_cpu(last->res_count)
le16_to_cpu
le16_to_cpu
last->res_count
last
last
res_count
log_ar_at_event('T', packet->speed, packet->header, evt);
log_ar_at_event('T', packet->speed, packet->header, evt)
log_ar_at_event
log_ar_at_event
'T'
packet->speed
packet
packet
speed
packet->header
packet
packet
header
evt
evt
switch (evt) {	case OHCI1394_evt_timeout:		/* Async response transmit timed out. */		packet->ack = RCODE_CANCELLED;		break;	case OHCI1394_evt_flushed:		/*		 * The packet was flushed should give same error as		 * when we try to use a stale generation count.		 */		packet->ack = RCODE_GENERATION;		break;	case OHCI1394_evt_missing_ack:		/*		 * Using a valid (current) generation count, but the		 * node is not on the bus or not sending acks.		 */		packet->ack = RCODE_NO_ACK;		break;	case ACK_COMPLETE + 0x10:	case ACK_PENDING + 0x10:	case ACK_BUSY_X + 0x10:	case ACK_BUSY_A + 0x10:	case ACK_BUSY_B + 0x10:	case ACK_DATA_ERROR + 0x10:	case ACK_TYPE_ERROR + 0x10:		packet->ack = evt - 0x10;		break;	default:		packet->ack = RCODE_SEND_ERROR;		break;	}
evt
evt
{	case OHCI1394_evt_timeout:		/* Async response transmit timed out. */		packet->ack = RCODE_CANCELLED;		break;	case OHCI1394_evt_flushed:		/*		 * The packet was flushed should give same error as		 * when we try to use a stale generation count.		 */		packet->ack = RCODE_GENERATION;		break;	case OHCI1394_evt_missing_ack:		/*		 * Using a valid (current) generation count, but the		 * node is not on the bus or not sending acks.		 */		packet->ack = RCODE_NO_ACK;		break;	case ACK_COMPLETE + 0x10:	case ACK_PENDING + 0x10:	case ACK_BUSY_X + 0x10:	case ACK_BUSY_A + 0x10:	case ACK_BUSY_B + 0x10:	case ACK_DATA_ERROR + 0x10:	case ACK_TYPE_ERROR + 0x10:		packet->ack = evt - 0x10;		break;	default:		packet->ack = RCODE_SEND_ERROR;		break;	}
case OHCI1394_evt_timeout:
OHCI1394_evt_timeout
OHCI1394_evt_timeout
packet->ack = RCODE_CANCELLED;
packet->ack = RCODE_CANCELLED
packet->ack
packet
packet
ack
RCODE_CANCELLED
RCODE_CANCELLED
break;
case OHCI1394_evt_flushed:
OHCI1394_evt_flushed
OHCI1394_evt_flushed
packet->ack = RCODE_GENERATION;
packet->ack = RCODE_GENERATION
packet->ack
packet
packet
ack
RCODE_GENERATION
RCODE_GENERATION
break;
case OHCI1394_evt_missing_ack:
OHCI1394_evt_missing_ack
OHCI1394_evt_missing_ack
packet->ack = RCODE_NO_ACK;
packet->ack = RCODE_NO_ACK
packet->ack
packet
packet
ack
RCODE_NO_ACK
RCODE_NO_ACK
break;
case ACK_COMPLETE + 0x10:
ACK_COMPLETE + 0x10
ACK_COMPLETE
ACK_COMPLETE
0x10
case ACK_PENDING + 0x10:
ACK_PENDING + 0x10
ACK_PENDING
ACK_PENDING
0x10
case ACK_BUSY_X + 0x10:
ACK_BUSY_X + 0x10
ACK_BUSY_X
ACK_BUSY_X
0x10
case ACK_BUSY_A + 0x10:
ACK_BUSY_A + 0x10
ACK_BUSY_A
ACK_BUSY_A
0x10
case ACK_BUSY_B + 0x10:
ACK_BUSY_B + 0x10
ACK_BUSY_B
ACK_BUSY_B
0x10
case ACK_DATA_ERROR + 0x10:
ACK_DATA_ERROR + 0x10
ACK_DATA_ERROR
ACK_DATA_ERROR
0x10
case ACK_TYPE_ERROR + 0x10:
ACK_TYPE_ERROR + 0x10
ACK_TYPE_ERROR
ACK_TYPE_ERROR
0x10
packet->ack = evt - 0x10;
packet->ack = evt - 0x10
packet->ack
packet
packet
ack
evt - 0x10
evt
evt
0x10
break;
default:
packet->ack = RCODE_SEND_ERROR;
packet->ack = RCODE_SEND_ERROR
packet->ack
packet
packet
ack
RCODE_SEND_ERROR
RCODE_SEND_ERROR
break;
packet->callback(packet, &ohci->card, packet->ack);
packet->callback(packet, &ohci->card, packet->ack)
packet->callback
packet
packet
callback
packet
packet
&ohci->card
ohci->card
ohci
ohci
card
packet->ack
packet
packet
ack
return 1;
1
-----joern-----
(45,91,0)
(14,110,0)
(0,50,0)
(75,62,0)
(89,114,0)
(5,74,0)
(88,30,0)
(15,28,0)
(58,82,0)
(2,11,0)
(48,62,0)
(50,77,0)
(136,22,0)
(133,90,0)
(70,49,0)
(112,62,0)
(45,34,0)
(122,86,0)
(118,12,0)
(138,80,0)
(1,3,0)
(36,22,0)
(70,91,0)
(51,87,0)
(39,40,0)
(41,45,0)
(46,26,0)
(3,1,0)
(131,40,0)
(8,94,0)
(4,79,0)
(55,49,0)
(45,67,0)
(134,86,0)
(74,62,0)
(23,67,0)
(132,94,0)
(87,51,0)
(34,31,0)
(91,76,0)
(9,124,0)
(13,26,0)
(136,82,0)
(127,22,0)
(66,70,0)
(67,94,0)
(74,91,0)
(17,94,0)
(122,70,0)
(76,91,0)
(82,91,0)
(7,94,0)
(49,94,0)
(122,111,0)
(54,139,0)
(124,10,0)
(80,34,0)
(136,79,0)
(113,61,0)
(43,110,0)
(69,94,0)
(122,62,0)
(128,94,0)
(86,91,0)
(130,86,0)
(11,124,0)
(10,62,0)
(63,50,0)
(31,34,0)
(57,94,0)
(22,127,0)
(26,100,0)
(122,26,0)
(56,62,0)
(45,104,0)
(124,11,0)
(91,62,0)
(22,136,0)
(30,91,0)
(117,11,0)
(51,74,0)
(84,12,0)
(60,100,0)
(124,62,0)
(139,33,0)
(99,85,0)
(71,1,0)
(25,62,0)
(45,100,0)
(34,94,0)
(115,94,0)
(85,104,0)
(106,111,0)
(40,3,0)
(112,114,0)
(119,110,0)
(9,91,0)
(52,87,0)
(81,90,0)
(74,45,0)
(10,1,0)
(90,81,0)
(86,67,0)
(27,62,0)
(18,94,0)
(85,91,0)
(100,94,0)
(135,10,0)
(90,133,0)
(21,31,0)
(114,89,0)
(102,122,0)
(16,94,0)
(114,121,0)
(79,91,0)
(96,124,0)
(74,51,0)
(104,94,0)
(6,61,0)
(64,80,0)
(110,98,0)
(37,82,0)
(45,49,0)
(127,63,0)
(103,124,0)
(109,63,0)
(93,94,0)
(110,14,0)
(68,9,0)
(81,62,0)
(92,94,0)
(133,98,0)
(19,30,0)
(122,85,0)
(105,112,0)
(114,112,0)
(61,91,0)
(73,127,0)
(111,81,0)
(26,91,0)
(139,121,0)
(44,45,0)
(121,114,0)
(95,87,0)
(40,98,0)
(107,104,0)
(65,127,0)
(35,139,0)
(45,74,0)
(53,94,0)
(20,94,0)
(108,9,0)
(101,50,0)
(124,9,0)
(38,62,0)
(3,40,0)
(122,80,0)
(118,28,0)
(116,94,0)
(126,91,0)
(76,112,0)
(125,133,0)
(118,122,0)
(129,136,0)
(47,133,0)
(50,63,0)
(59,79,0)
(120,76,0)
(29,31,0)
(42,62,0)
(83,85,0)
(79,136,0)
(11,91,0)
(32,70,0)
(24,94,0)
(87,63,0)
(63,62,0)
(82,136,0)
(1,10,0)
(121,139,0)
(123,14,0)
(97,62,0)
(111,91,0)
(78,111,0)
(137,76,0)
(7,49,1)
(9,68,1)
(123,110,1)
(2,103,1)
(73,65,1)
(5,24,1)
(24,34,1)
(5,8,1)
(111,78,1)
(79,4,1)
(95,52,1)
(36,127,1)
(80,138,1)
(106,10,1)
(40,98,1)
(31,29,1)
(61,6,1)
(74,51,1)
(70,66,1)
(110,43,1)
(26,91,1)
(135,61,1)
(3,40,1)
(6,113,1)
(111,91,1)
(49,55,1)
(135,136,1)
(118,12,1)
(103,81,1)
(5,93,1)
(118,28,1)
(32,72,1)
(4,59,1)
(45,49,1)
(107,85,1)
(137,126,1)
(112,114,1)
(63,50,1)
(45,104,1)
(35,54,1)
(47,125,1)
(124,11,1)
(50,101,1)
(23,86,1)
(100,60,1)
(11,117,1)
(15,30,1)
(124,10,1)
(124,9,1)
(122,70,1)
(28,15,1)
(93,100,1)
(82,91,1)
(139,33,1)
(45,34,1)
(84,14,1)
(138,64,1)
(76,120,1)
(68,108,1)
(127,73,1)
(114,121,1)
(11,91,1)
(65,61,1)
(45,100,1)
(87,95,1)
(52,5,1)
(5,7,1)
(136,129,1)
(122,85,1)
(136,82,1)
(41,51,1)
(44,41,1)
(45,91,1)
(30,91,1)
(50,77,1)
(10,1,1)
(117,2,1)
(22,127,1)
(70,91,1)
(14,123,1)
(43,119,1)
(85,99,1)
(114,89,1)
(58,37,1)
(90,133,1)
(54,105,1)
(119,63,1)
(136,22,1)
(82,58,1)
(133,47,1)
(91,76,1)
(1,3,1)
(96,9,1)
(105,14,1)
(108,11,1)
(124,96,1)
(85,91,1)
(122,102,1)
(120,137,1)
(21,80,1)
(72,124,1)
(139,35,1)
(113,30,1)
(40,39,1)
(133,98,1)
(59,22,1)
(76,112,1)
(122,80,1)
(74,91,1)
(5,128,1)
(125,111,1)
(86,130,1)
(128,67,1)
(99,83,1)
(8,104,1)
(66,32,1)
(29,21,1)
(45,67,1)
(9,91,1)
(12,84,1)
(46,13,1)
(131,135,1)
(67,23,1)
(74,45,1)
(0,109,1)
(134,72,1)
(60,26,1)
(1,71,1)
(126,112,1)
(30,19,1)
(122,86,1)
(14,110,1)
(102,74,1)
(87,63,1)
(86,91,1)
(37,79,1)
(104,107,1)
(39,131,1)
(19,88,1)
(78,106,1)
(122,111,1)
(83,72,1)
(34,31,1)
(13,72,1)
(61,91,1)
(122,26,1)
(45,44,1)
(51,87,1)
(110,98,1)
(55,70,1)
(26,46,1)
(81,90,1)
(127,63,1)
(121,139,1)
(22,36,1)
(71,3,1)
(101,0,1)
(129,82,1)
(118,122,1)
(88,91,1)
(130,134,1)
(136,79,1)
(79,91,1)
(100,72,2)
(122,26,2)
(45,100,2)
(114,89,2)
(110,98,2)
(28,30,2)
(87,30,2)
(122,80,2)
(139,33,2)
(61,91,2)
(74,91,2)
(122,86,2)
(121,139,2)
(70,72,2)
(134,72,2)
(45,91,2)
(124,30,2)
(54,14,2)
(26,72,2)
(112,114,2)
(70,91,2)
(78,30,2)
(91,14,2)
(105,14,2)
(76,14,2)
(139,14,2)
(106,30,2)
(79,91,2)
(136,22,2)
(131,30,2)
(3,30,2)
(90,133,2)
(8,72,2)
(41,30,2)
(3,40,2)
(111,91,2)
(45,104,2)
(71,30,2)
(124,11,2)
(61,30,2)
(90,30,2)
(108,30,2)
(95,30,2)
(114,121,2)
(107,72,2)
(113,30,2)
(91,76,2)
(117,30,2)
(136,79,2)
(73,61,2)
(87,63,2)
(86,91,2)
(23,72,2)
(22,61,2)
(34,31,2)
(2,30,2)
(82,61,2)
(9,91,2)
(76,112,2)
(103,30,2)
(124,10,2)
(79,61,2)
(4,61,2)
(11,91,2)
(36,61,2)
(93,72,2)
(58,61,2)
(127,61,2)
(83,72,2)
(52,30,2)
(74,30,2)
(6,30,2)
(74,45,2)
(40,30,2)
(15,30,2)
(51,30,2)
(125,30,2)
(96,30,2)
(50,77,2)
(102,30,2)
(12,14,2)
(60,72,2)
(85,91,2)
(7,72,2)
(122,111,2)
(63,50,2)
(133,30,2)
(37,61,2)
(136,61,2)
(47,30,2)
(86,72,2)
(44,30,2)
(122,30,2)
(118,12,2)
(72,30,2)
(81,30,2)
(127,63,2)
(118,28,2)
(55,72,2)
(10,30,2)
(30,14,2)
(5,30,2)
(51,87,2)
(35,14,2)
(49,72,2)
(46,72,2)
(13,72,2)
(81,90,2)
(45,30,2)
(74,51,2)
(67,72,2)
(1,3,2)
(59,61,2)
(121,14,2)
(14,110,2)
(45,34,2)
(68,30,2)
(122,85,2)
(112,14,2)
(1,30,2)
(137,14,2)
(104,72,2)
(32,72,2)
(133,98,2)
(45,67,2)
(30,91,2)
(114,14,2)
(129,61,2)
(128,72,2)
(124,9,2)
(126,14,2)
(10,1,2)
(65,61,2)
(19,14,2)
(82,91,2)
(9,30,2)
(136,82,2)
(11,30,2)
(130,72,2)
(118,122,2)
(39,30,2)
(26,91,2)
(122,70,2)
(40,98,2)
(120,14,2)
(88,14,2)
(66,72,2)
(22,127,2)
(85,72,2)
(84,14,2)
(111,30,2)
(99,72,2)
(135,30,2)
(45,49,2)
-----------------------------------
(0,context)
(1,le16_to_cpu(last->transfer_status)
(2,packet)
(3,le16_to_cpu(last->transfer_status)
(4,payload_bus)
(5,packet)
(6,payload_bus)
(7,break;)
(8,break;)
(9,packet->header)
(10,evt = le16_to_cpu(last->transfer_status)
(11,packet->speed)
(12,return 0;)
(13,packet)
(14,last->transfer_status == 0)
(15,1)
(16,case OHCI1394_evt_missing_ack:)
(17,0x10:)
(18,0x10:)
(19,NULL)
(20,default:)
(21,evt)
(22,ohci->card.device)
(23,RCODE_CANCELLED)
(24,break;)
(25,ohci)
(26,packet->ack)
(27,if (packet == NULL)
(28,return 1;)
(29,0x10)
(30,packet == NULL)
(31,evt - 0x10)
(32,packet)
(33,struct descriptor *d)
(34,packet->ack = evt - 0x10)
(35,3)
(36,device)
(37,packet)
(38,packet)
(39,transfer_status)
(40,last->transfer_status)
(41,packet)
(42,evt)
(43,transfer_status)
(44,ack)
(45,packet->ack)
(46,ack)
(47,res_count)
(48,switch (evt)
(49,packet->ack = RCODE_SEND_ERROR)
(50,context->ohci)
(51,&ohci->card)
(52,ohci)
(53,0x10:)
(54,d)
(55,RCODE_SEND_ERROR)
(56,if (packet->payload_bus)
(57,0x10:)
(58,payload_length)
(59,packet)
(60,RCODE_NO_ACK)
(61,packet->payload_bus)
(62,)
(63,*ohci = context->ohci)
(64,packet)
(65,ohci)
(66,ack)
(67,packet->ack = RCODE_CANCELLED)
(68,header)
(69,0x10:)
(70,packet->ack)
(71,0x1f)
(72,evt)
(73,card)
(74,packet->callback(packet, &ohci->card, packet->ack)
(75,driver_data)
(76,driver_data->packet)
(77,struct context *context)
(78,timestamp)
(79,packet->payload_bus)
(80,packet->ack)
(81,packet->timestamp = le16_to_cpu(last->res_count)
(82,packet->payload_length)
(83,packet)
(84,0)
(85,packet->ack)
(86,packet->ack)
(87,ohci->card)
(88,packet)
(89,struct driver_data *)
(90,le16_to_cpu(last->res_count)
(91,packet = driver_data->packet)
(92,case OHCI1394_evt_flushed:)
(93,break;)
(94,)
(95,card)
(96,evt)
(97,if (last->transfer_status == 0)
(98,struct descriptor *last)
(99,ack)
(100,packet->ack = RCODE_NO_ACK)
(101,ohci)
(102,1)
(103,'T')
(104,packet->ack = RCODE_GENERATION)
(105,driver_data)
(106,packet)
(107,RCODE_GENERATION)
(108,packet)
(109,ohci)
(110,last->transfer_status)
(111,packet->timestamp)
(112,driver_data = (struct driver_data *)
(113,packet)
(114,(struct driver_data *)
(115,0x10:)
(116,case OHCI1394_evt_timeout:)
(117,speed)
(118,RET)
(119,last)
(120,packet)
(121,&d[3])
(122,return 1;)
(123,0)
(124,log_ar_at_event('T', packet->speed, packet->header, evt)
(125,last)
(126,packet)
(127,ohci->card)
(128,break;)
(129,DMA_TO_DEVICE)
(130,ack)
(131,last)
(132,0x10:)
(133,last->res_count)
(134,packet)
(135,evt)
(136,dma_unmap_single(ohci->card.device, packet->payload_bus,\n\\n\\t\\t\\t\\t packet->payload_length, DMA_TO_DEVICE)
(137,driver_data)
(138,ack)
(139,d[3])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^