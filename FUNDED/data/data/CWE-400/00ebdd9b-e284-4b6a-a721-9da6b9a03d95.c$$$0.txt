-----label-----
0
-----code-----
static void goodG2B()
{
    int h,j;
    char * data;
    data = NULL;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (char *)ALLOCA(100*sizeof(char));
        /* Initialize and make use of data */
        strcpy(data, "A String");
        printLine(data);
    }
    for(j = 0; j < 1; j++)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
7,10
9,10
11,12
13,14
14,15
14,16
16,17
16,18
19,20
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
26,27
27,28
27,29
28,29
31,32
31,33
32,33
35,36
36,37
38,39
38,40
38,41
39,40
40,41
40,42
41,42
43,44
43,45
44,45
44,46
46,47
48,49
48,50
49,50
51,52
51,53
53,54
54,55
54,56
57,58
58,59
58,60
58,61
59,60
61,62
64,65
65,66
65,67
66,67
68,69
70,71
70,72
70,73
70,74
71,72
72,73
72,74
73,74
76,77
76,78
77,78
80,81
81,82
83,84
-----nextToken-----
2,4,8,10,12,15,17,18,22,24,29,30,33,34,37,42,45,47,50,52,55,56,60,62,63,67,69,74,75,78,79,82,84
-----computeFrom-----
20,21
20,22
27,28
27,29
31,32
31,33
40,41
40,42
51,52
51,53
72,73
72,74
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B(){    int h,j;    char * data;    data = NULL;    for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B()
goodG2B
{    int h,j;    char * data;    data = NULL;    for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }    for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
int h,j;
int h,j;
int
h
h
j
j
char * data;
char * data;
char
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
for(h = 0; h < 1; h++)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (char *)ALLOCA(100*sizeof(char));        /* Initialize and make use of data */        strcpy(data, "A String");        printLine(data);    }
data = (char *)ALLOCA(100*sizeof(char));
data = (char *)ALLOCA(100*sizeof(char))
data
data
(char *)ALLOCA(100*sizeof(char))
char *
char
*
*
ALLOCA(100*sizeof(char))
ALLOCA
ALLOCA
100*sizeof(char)
100
sizeof(char)
char
char

strcpy(data, "A String");
strcpy(data, "A String")
strcpy
strcpy
data
data
"A String"
printLine(data);
printLine(data)
printLine
printLine
data
data
for(j = 0; j < 1; j++)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
j = 0;
j = 0
j
j
0
j < 1
j
j
1
j++
j
j
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(5,37,0)
(22,38,0)
(31,32,0)
(17,19,0)
(36,1,0)
(14,1,0)
(23,19,0)
(35,19,0)
(9,14,0)
(21,14,0)
(10,8,0)
(18,0,0)
(16,11,0)
(18,33,0)
(34,38,0)
(6,11,0)
(1,27,0)
(14,27,0)
(39,19,0)
(24,1,0)
(32,31,0)
(15,17,0)
(29,38,0)
(1,18,0)
(13,17,0)
(2,36,0)
(33,18,0)
(4,11,0)
(12,37,0)
(26,35,0)
(7,31,0)
(25,11,0)
(36,27,0)
(40,22,0)
(8,38,0)
(30,8,0)
(18,1,0)
(37,11,0)
(0,18,0)
(20,11,0)
(31,33,0)
(28,32,0)
(33,31,0)
(38,29,1)
(19,39,1)
(24,17,1)
(23,37,1)
(18,0,1)
(33,31,1)
(7,24,1)
(30,38,1)
(17,19,1)
(14,9,1)
(18,33,1)
(29,34,1)
(14,1,1)
(26,36,1)
(36,1,1)
(15,13,1)
(39,23,1)
(32,28,1)
(3,8,1)
(17,15,1)
(8,38,1)
(22,40,1)
(31,32,1)
(8,10,1)
(30,22,1)
(35,19,1)
(21,1,1)
(9,21,1)
(28,7,1)
(37,5,1)
(1,18,1)
(2,14,1)
(5,12,1)
(35,26,1)
(13,19,1)
(13,35,1)
(36,2,1)
(10,30,1)
(34,17,1)
(22,38,1)
(40,8,1)
(21,17,2)
(31,32,2)
(8,38,2)
(14,1,2)
(9,17,2)
(1,17,2)
(36,17,2)
(35,17,2)
(2,17,2)
(15,17,2)
(18,17,2)
(13,17,2)
(30,8,2)
(8,8,2)
(24,17,2)
(14,17,2)
(18,0,2)
(36,1,2)
(26,17,2)
(32,17,2)
(31,17,2)
(22,8,2)
(33,31,2)
(10,8,2)
(40,8,2)
(18,33,2)
(35,19,2)
(22,38,2)
(7,17,2)
(1,18,2)
(28,17,2)
(17,19,2)
(17,17,2)
(33,17,2)
-----------------------------------
(0,char *)
(1,data = (char *)
(2,data)
(3,RET)
(4,for(j = 0; j < 1; j++)
(5,NULL)
(6,h)
(7,100)
(8,j < 1)
(9,"A String")
(10,1)
(11,)
(12,data)
(13,h)
(14,strcpy(data, "A String")
(15,1)
(16,j)
(17,h < 1)
(18,(char *)
(19,h = 0)
(20,for(h = 0; h < 1; h++)
(21,data)
(22,j++)
(23,h)
(24,data)
(25,data)
(26,h)
(27,)
(28,char)
(29,0)
(30,j)
(31,100*sizeof(char)
(32,sizeof(char)
(33,ALLOCA(100*sizeof(char)
(34,j)
(35,h++)
(36,printLine(data)
(37,data = NULL)
(38,j = 0)
(39,0)
(40,j)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^