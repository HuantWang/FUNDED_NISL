-----label-----
0
-----code-----
static int driver_monitor(Bus *bus, Peer *sender, Message *message) {
        _c_cleanup_(c_list_flush) CList destinations = C_LIST_INIT(destinations);
        MatchOwner *match_owner;
        int r;

        if (!bus->n_monitors)
                return 0;

        r = message_parse_metadata(message);
        if (r)
                return error_fold(r);

        bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata);

        while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {
                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);

                c_list_unlink(&match_owner->destinations_link);

                r = connection_queue(&receiver->connection, NULL, message);
                if (r) {
                        if (r == CONNECTION_E_QUOTA) {
                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);

                                connection_shutdown(&receiver->connection);

                                log_append_here(bus->log, LOG_WARNING, 0);
                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,
                                                           &sender_names, NULL,
                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,
                                                           message);
                                r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);
                                if (r)
                                        return error_fold(r);
                        } else {
                                return error_fold(r);
                        }
                }
        }

        return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
23,28
23,29
23,30
23,31
23,32
23,33
23,34
24,25
25,26
25,27
26,27
28,29
29,30
31,32
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
52,53
52,54
54,55
56,57
56,58
57,58
58,59
58,60
59,60
62,63
64,65
65,66
65,67
66,67
68,69
68,70
69,70
71,72
73,74
73,75
74,75
76,77
77,78
77,79
78,79
80,81
82,83
83,84
83,85
83,86
83,87
83,88
84,85
86,87
88,89
89,90
91,92
93,94
94,95
94,96
95,96
98,99
98,100
99,100
100,101
100,102
101,102
103,104
103,105
103,106
103,107
104,105
106,107
107,108
109,110
111,112
113,114
113,115
113,116
113,117
114,115
115,116
115,117
116,117
118,119
118,120
118,121
121,122
122,123
122,124
122,125
122,126
123,124
125,126
127,128
129,130
131,132
132,133
132,134
133,134
135,136
136,137
136,138
137,138
140,141
141,142
141,143
142,143
144,145
144,146
144,147
144,148
145,146
147,148
148,149
148,150
149,150
152,153
154,155
156,157
156,158
157,158
159,160
160,161
160,162
160,163
161,162
161,163
162,163
164,165
166,167
166,168
166,169
166,170
166,171
166,172
167,168
168,169
168,170
169,170
171,172
171,173
173,174
174,175
174,176
175,176
177,178
177,179
177,180
178,179
180,181
181,182
181,183
182,183
185,186
187,188
188,189
188,190
189,190
191,192
192,193
192,194
193,194
196,197
197,198
197,199
197,200
197,201
198,199
200,201
200,202
201,202
204,205
207,208
208,209
208,210
208,211
208,212
208,213
208,214
208,215
208,216
208,217
209,210
211,212
213,214
213,215
213,216
214,215
216,217
216,218
217,218
220,221
222,223
222,224
223,224
226,227
227,228
229,230
231,232
231,233
231,234
232,233
234,235
234,236
235,236
235,237
236,237
240,241
240,242
241,242
244,245
244,246
245,246
245,247
246,247
250,251
252,253
253,254
253,255
254,255
256,257
256,258
256,259
256,260
257,258
259,260
259,261
260,261
264,265
264,266
265,266
268,269
268,270
269,270
271,272
272,273
272,274
273,274
275,276
277,278
278,279
279,280
279,281
280,281
282,283
284,285
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,27,30,35,37,41,43,47,49,50,53,55,60,61,63,67,70,72,75,79,81,85,87,90,92,96,97,102,105,108,110,112,117,119,120,124,126,128,130,134,138,139,143,146,150,151,153,155,158,163,165,170,172,176,179,183,184,186,190,194,195,199,202,203,205,206,210,212,215,218,219,221,224,225,228,230,233,237,238,239,242,243,247,248,249,251,255,258,261,262,263,266,267,270,274,276,281,283,285
-----computeFrom-----
65,66
65,67
100,101
100,102
141,142
141,143
161,162
161,163
253,254
253,255
-----guardedBy-----
163,276
-----guardedByNegation-----
163,283
-----lastLexicalUse-----
163,283
-----jump-----
163,283
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;WhileStatement;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ConditionalExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int driver_monitor(Bus *bus, Peer *sender, Message *message) {        _c_cleanup_(c_list_flush) CList destinations = C_LIST_INIT(destinations);        MatchOwner *match_owner;        int r;        if (!bus->n_monitors)                return 0;        r = message_parse_metadata(message);        if (r)                return error_fold(r);        bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata);        while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                c_list_unlink(&match_owner->destinations_link);                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }        return 0;}
static int
driver_monitor(Bus *bus, Peer *sender, Message *message)
driver_monitor
Bus *bus
Bus
Bus
*bus
*
bus
Peer *sender
Peer
Peer
*sender
*
sender
Message *message
Message
Message
*message
*
message
{        _c_cleanup_(c_list_flush) CList destinations = C_LIST_INIT(destinations);        MatchOwner *match_owner;        int r;        if (!bus->n_monitors)                return 0;        r = message_parse_metadata(message);        if (r)                return error_fold(r);        bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata);        while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                c_list_unlink(&match_owner->destinations_link);                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }        return 0;}
_c_cleanup_(c_list_flush)
_c_cleanup_(c_list_flush)
_c_cleanup_
_c_cleanup_
(c_list_flush)
c_list_flush
c_list_flush
)
CList destinations = C_LIST_INIT(destinations);
CList destinations = C_LIST_INIT(destinations);
CList
CList
destinations = C_LIST_INIT(destinations)
destinations
= C_LIST_INIT(destinations)
C_LIST_INIT(destinations)
C_LIST_INIT
C_LIST_INIT
destinations
destinations
MatchOwner *match_owner;
MatchOwner *match_owner;
MatchOwner
MatchOwner
*match_owner
*
match_owner
int r;
int r;
int
r
r
if (!bus->n_monitors)                return 0;
!bus->n_monitors
bus->n_monitors
bus
bus
n_monitors
return 0;
0
r = message_parse_metadata(message);
r = message_parse_metadata(message)
r
r
message_parse_metadata(message)
message_parse_metadata
message_parse_metadata
message
message
if (r)                return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata);
bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata)
bus_get_monitor_destinations
bus_get_monitor_destinations
bus
bus
&destinations
destinations
destinations
sender
sender
&message->metadata
message->metadata
message
message
metadata
while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))) {                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                c_list_unlink(&match_owner->destinations_link);                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }
(match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link))
match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link)
match_owner
match_owner
c_list_first_entry(&destinations, MatchOwner, destinations_link)
c_list_first_entry
c_list_first_entry
&destinations
destinations
destinations
MatchOwner
MatchOwner
destinations_link
destinations_link
{                Peer *receiver = c_container_of(match_owner, Peer, owned_matches);                c_list_unlink(&match_owner->destinations_link);                r = connection_queue(&receiver->connection, NULL, message);                if (r) {                        if (r == CONNECTION_E_QUOTA) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }        }
Peer *receiver = c_container_of(match_owner, Peer, owned_matches);
Peer *receiver = c_container_of(match_owner, Peer, owned_matches);
Peer
Peer
*receiver = c_container_of(match_owner, Peer, owned_matches)
*
receiver
= c_container_of(match_owner, Peer, owned_matches)
c_container_of(match_owner, Peer, owned_matches)
c_container_of
c_container_of
match_owner
match_owner
Peer
Peer
owned_matches
owned_matches
c_list_unlink(&match_owner->destinations_link);
c_list_unlink(&match_owner->destinations_link)
c_list_unlink
c_list_unlink
&match_owner->destinations_link
match_owner->destinations_link
match_owner
match_owner
destinations_link
r = connection_queue(&receiver->connection, NULL, message);
r = connection_queue(&receiver->connection, NULL, message)
r
r
connection_queue(&receiver->connection, NULL, message)
connection_queue
connection_queue
&receiver->connection
receiver->connection
receiver
receiver
connection
NULL
NULL
message
message
if (r) {                        if (r == CONNECTION_E_QUOTA) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }
r
r
{                        if (r == CONNECTION_E_QUOTA) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }                }
if (r == CONNECTION_E_QUOTA) {                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        } else {                                return error_fold(r);                        }
r == CONNECTION_E_QUOTA
r
r
CONNECTION_E_QUOTA
CONNECTION_E_QUOTA
{                                NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);                                connection_shutdown(&receiver->connection);                                log_append_here(bus->log, LOG_WARNING, 0);                                bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);                                r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);                                if (r)                                        return error_fold(r);                        }
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);
NameSet sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL);
NameSet
NameSet
sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
sender_names
= NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
NAME_SET_INIT_FROM_OWNER
NAME_SET_INIT_FROM_OWNER
sender ? &sender->owned_names : NULL
sender
sender
&sender->owned_names
sender->owned_names
sender
sender
owned_names
NULL
NULL
connection_shutdown(&receiver->connection);
connection_shutdown(&receiver->connection)
connection_shutdown
connection_shutdown
&receiver->connection
receiver->connection
receiver
receiver
connection
log_append_here(bus->log, LOG_WARNING, 0);
log_append_here(bus->log, LOG_WARNING, 0)
log_append_here
log_append_here
bus->log
bus
bus
log
LOG_WARNING
LOG_WARNING
0
bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message);
bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,                                                           &sender_names, NULL,                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,                                                           message)
bus_log_append_transaction
bus_log_append_transaction
bus
bus
sender ? sender->id : ADDRESS_ID_INVALID
sender
sender
sender->id
sender
sender
id
ADDRESS_ID_INVALID
ADDRESS_ID_INVALID
receiver->id
receiver
receiver
id
&sender_names
sender_names
sender_names
NULL
NULL
sender ? sender->policy->seclabel : bus->seclabel
sender
sender
sender->policy->seclabel
sender->policy
sender
sender
policy
seclabel
bus->seclabel
bus
bus
seclabel
receiver->policy->seclabel
receiver->policy
receiver
receiver
policy
seclabel
message
message
r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id);
r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id)
r
r
log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id)
log_commitf
log_commitf
bus->log
bus
bus
log
"Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to."
receiver->id
receiver
receiver
id
if (r)                                        return error_fold(r);
r
r
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
{                                return error_fold(r);                        }
return error_fold(r);
error_fold(r)
error_fold
error_fold
r
r
return 0;
0
-----joern-----
(53,31,0)
(84,6,0)
(41,131,0)
(25,69,0)
(26,125,0)
(40,28,0)
(65,30,0)
(99,130,0)
(110,10,0)
(110,118,0)
(66,67,0)
(127,9,0)
(107,19,0)
(77,75,0)
(14,137,0)
(62,38,0)
(129,111,0)
(88,119,0)
(33,59,0)
(138,54,0)
(114,92,0)
(53,135,0)
(62,53,0)
(7,91,0)
(147,121,0)
(69,75,0)
(101,17,0)
(24,57,0)
(117,95,0)
(35,129,0)
(105,137,0)
(123,91,0)
(131,41,0)
(9,118,0)
(3,137,0)
(123,55,0)
(52,40,0)
(106,21,0)
(19,27,0)
(92,17,0)
(53,73,0)
(70,40,0)
(74,77,0)
(27,54,0)
(95,6,0)
(59,95,0)
(143,126,0)
(76,119,0)
(44,49,0)
(62,120,0)
(136,107,0)
(13,111,0)
(83,36,0)
(1,119,0)
(129,125,0)
(0,30,0)
(133,21,0)
(107,38,0)
(121,16,0)
(111,95,0)
(89,135,0)
(81,142,0)
(60,53,0)
(51,53,0)
(110,88,0)
(28,17,0)
(63,19,0)
(116,93,0)
(49,83,0)
(53,27,0)
(142,16,0)
(69,135,0)
(49,25,0)
(21,42,0)
(51,30,0)
(82,125,0)
(96,41,0)
(145,69,0)
(27,53,0)
(12,53,0)
(97,28,0)
(37,51,0)
(89,87,0)
(126,31,0)
(142,31,0)
(142,92,0)
(20,11,0)
(80,111,0)
(72,119,0)
(57,73,0)
(55,123,0)
(23,12,0)
(113,27,0)
(120,62,0)
(45,53,0)
(102,62,0)
(126,129,0)
(2,87,0)
(17,11,0)
(79,69,0)
(77,95,0)
(116,73,0)
(92,142,0)
(19,107,0)
(50,55,0)
(46,120,0)
(14,106,0)
(59,93,0)
(129,126,0)
(28,40,0)
(15,55,0)
(128,42,0)
(75,69,0)
(104,121,0)
(82,10,0)
(125,129,0)
(87,119,0)
(21,106,0)
(11,17,0)
(55,38,0)
(69,25,0)
(41,31,0)
(94,55,0)
(27,19,0)
(111,129,0)
(122,91,0)
(48,6,0)
(139,119,0)
(106,14,0)
(125,73,0)
(71,8,0)
(4,82,0)
(55,15,0)
(30,51,0)
(54,31,0)
(120,38,0)
(110,43,0)
(57,67,0)
(112,89,0)
(142,38,0)
(93,116,0)
(86,73,0)
(5,88,0)
(8,73,0)
(29,21,0)
(32,119,0)
(64,119,0)
(103,59,0)
(16,121,0)
(22,41,0)
(40,42,0)
(9,87,0)
(53,12,0)
(78,95,0)
(110,83,0)
(134,77,0)
(87,89,0)
(58,54,0)
(124,130,0)
(12,8,0)
(141,53,0)
(25,137,0)
(115,107,0)
(67,57,0)
(56,126,0)
(6,95,0)
(146,142,0)
(68,78,0)
(30,95,0)
(53,51,0)
(142,119,0)
(109,73,0)
(27,38,0)
(85,6,0)
(16,142,0)
(42,40,0)
(67,31,0)
(132,67,0)
(140,25,0)
(108,43,0)
(121,135,0)
(39,100,0)
(6,42,0)
(15,8,0)
(78,53,0)
(144,78,0)
(17,119,0)
(53,78,0)
(90,57,0)
(53,62,0)
(34,120,0)
(8,15,0)
(130,25,0)
(18,62,0)
(93,59,0)
(91,123,0)
(95,137,0)
(75,77,0)
(91,38,0)
(54,27,0)
(12,23,1)
(49,44,1)
(84,117,1)
(0,65,1)
(60,51,1)
(85,48,1)
(29,133,1)
(128,142,1)
(55,38,1)
(57,67,1)
(83,49,1)
(26,53,1)
(17,11,1)
(19,63,1)
(136,115,1)
(50,94,1)
(111,13,1)
(28,17,1)
(91,38,1)
(18,141,1)
(121,135,1)
(41,31,1)
(62,38,1)
(132,116,1)
(108,131,1)
(89,112,1)
(107,38,1)
(2,131,1)
(21,42,1)
(48,84,1)
(130,99,1)
(40,28,1)
(77,95,1)
(129,111,1)
(27,54,1)
(53,62,1)
(140,14,1)
(53,31,1)
(59,33,1)
(62,120,1)
(78,95,1)
(110,83,1)
(27,38,1)
(81,98,1)
(53,51,1)
(21,29,1)
(142,16,1)
(129,126,1)
(55,50,1)
(91,7,1)
(57,24,1)
(142,92,1)
(51,37,1)
(79,145,1)
(96,22,1)
(145,75,1)
(47,25,1)
(107,136,1)
(43,108,1)
(82,125,1)
(54,138,1)
(111,95,1)
(67,31,1)
(70,52,1)
(69,135,1)
(125,129,1)
(128,47,1)
(102,18,1)
(126,56,1)
(117,42,1)
(144,68,1)
(134,74,1)
(42,40,1)
(45,12,1)
(99,124,1)
(30,0,1)
(113,45,1)
(4,61,1)
(93,59,1)
(69,75,1)
(24,90,1)
(23,78,1)
(112,2,1)
(56,143,1)
(53,135,1)
(61,125,1)
(53,60,1)
(8,15,1)
(147,146,1)
(74,140,1)
(41,96,1)
(55,123,1)
(25,69,1)
(67,66,1)
(141,57,1)
(128,61,1)
(49,25,1)
(53,12,1)
(118,9,1)
(92,17,1)
(78,144,1)
(116,93,1)
(63,107,1)
(7,122,1)
(68,62,1)
(95,6,1)
(104,147,1)
(131,41,1)
(122,94,1)
(90,67,1)
(20,101,1)
(82,4,1)
(35,126,1)
(9,127,1)
(114,81,1)
(106,21,1)
(28,97,1)
(12,8,1)
(80,35,1)
(110,10,1)
(65,27,1)
(27,19,1)
(10,82,1)
(75,77,1)
(22,17,1)
(62,102,1)
(123,91,1)
(9,87,1)
(71,130,1)
(6,85,1)
(16,121,1)
(46,34,1)
(127,98,1)
(88,5,1)
(53,78,1)
(34,18,1)
(54,31,1)
(19,107,1)
(77,134,1)
(142,38,1)
(58,113,1)
(142,31,1)
(138,58,1)
(40,70,1)
(124,47,1)
(51,30,1)
(115,113,1)
(120,46,1)
(6,42,1)
(13,80,1)
(30,95,1)
(33,103,1)
(121,104,1)
(87,89,1)
(69,79,1)
(130,25,1)
(110,88,1)
(37,30,1)
(120,38,1)
(5,42,1)
(126,31,1)
(89,135,1)
(92,114,1)
(59,95,1)
(146,92,1)
(103,8,1)
(97,128,1)
(110,118,1)
(14,106,1)
(66,132,1)
(52,28,1)
(11,20,1)
(98,87,1)
(44,130,1)
(53,27,1)
(133,95,1)
(15,55,1)
(110,43,1)
(143,26,1)
(94,71,1)
(35,130,2)
(103,130,2)
(138,113,2)
(40,47,2)
(7,94,2)
(131,41,2)
(25,42,2)
(93,130,2)
(95,6,2)
(142,98,2)
(53,135,2)
(28,61,2)
(121,98,2)
(82,125,2)
(0,130,2)
(128,47,2)
(28,17,2)
(40,61,2)
(59,130,2)
(88,42,2)
(8,15,2)
(67,31,2)
(111,95,2)
(55,130,2)
(25,69,2)
(145,42,2)
(13,130,2)
(70,61,2)
(27,54,2)
(63,113,2)
(19,113,2)
(10,61,2)
(53,62,2)
(116,130,2)
(136,113,2)
(143,130,2)
(134,42,2)
(40,98,2)
(28,47,2)
(110,118,2)
(97,47,2)
(42,98,2)
(77,95,2)
(133,42,2)
(46,18,2)
(94,130,2)
(108,131,2)
(43,131,2)
(110,10,2)
(4,61,2)
(42,61,2)
(89,131,2)
(57,67,2)
(34,18,2)
(121,135,2)
(30,130,2)
(66,130,2)
(69,75,2)
(78,95,2)
(68,130,2)
(56,130,2)
(9,87,2)
(21,42,2)
(8,130,2)
(67,130,2)
(45,130,2)
(129,126,2)
(53,51,2)
(98,131,2)
(87,89,2)
(49,130,2)
(55,123,2)
(54,113,2)
(33,130,2)
(118,98,2)
(127,98,2)
(81,98,2)
(61,130,2)
(53,31,2)
(60,130,2)
(37,130,2)
(23,130,2)
(62,130,2)
(79,42,2)
(49,25,2)
(57,130,2)
(58,113,2)
(107,38,2)
(42,47,2)
(62,120,2)
(111,130,2)
(123,91,2)
(128,61,2)
(70,47,2)
(83,130,2)
(52,98,2)
(126,130,2)
(47,42,2)
(48,42,2)
(129,111,2)
(99,47,2)
(141,130,2)
(27,19,2)
(104,98,2)
(106,42,2)
(110,88,2)
(14,42,2)
(78,130,2)
(114,98,2)
(130,25,2)
(82,61,2)
(90,130,2)
(147,98,2)
(110,83,2)
(93,59,2)
(12,130,2)
(80,130,2)
(77,42,2)
(14,106,2)
(71,130,2)
(130,47,2)
(65,130,2)
(12,8,2)
(27,130,2)
(16,98,2)
(75,42,2)
(9,98,2)
(142,92,2)
(144,130,2)
(52,47,2)
(120,38,2)
(126,31,2)
(30,95,2)
(18,130,2)
(120,18,2)
(51,130,2)
(115,113,2)
(95,42,2)
(85,42,2)
(107,113,2)
(2,131,2)
(19,107,2)
(28,98,2)
(87,131,2)
(92,98,2)
(125,130,2)
(52,61,2)
(74,42,2)
(16,121,2)
(69,135,2)
(91,38,2)
(124,47,2)
(106,21,2)
(54,31,2)
(129,130,2)
(75,77,2)
(140,42,2)
(53,12,2)
(15,130,2)
(5,42,2)
(27,38,2)
(142,31,2)
(97,98,2)
(125,129,2)
(128,98,2)
(24,130,2)
(132,130,2)
(29,42,2)
(53,27,2)
(117,42,2)
(123,94,2)
(40,28,2)
(92,17,2)
(26,130,2)
(142,16,2)
(55,38,2)
(70,98,2)
(116,93,2)
(42,40,2)
(112,131,2)
(44,130,2)
(15,55,2)
(89,135,2)
(102,18,2)
(41,31,2)
(113,130,2)
(51,30,2)
(91,94,2)
(69,42,2)
(53,78,2)
(110,43,2)
(122,94,2)
(146,98,2)
(53,130,2)
(50,94,2)
(97,61,2)
(142,38,2)
(59,95,2)
(17,11,2)
(84,42,2)
(62,38,2)
(6,42,2)
-----------------------------------
(0,policy)
(1,match_owner)
(2,r)
(3,receiver)
(4,r)
(5,0)
(6,c_container_of(match_owner, Peer, owned_matches)
(7,owned_names)
(8,sender_names = NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
(9,error_fold(r)
(10,return error_fold(r)
(11,C_LIST_INIT(destinations)
(12,&sender_names)
(13,id)
(14,c_list_unlink(&match_owner->destinations_link)
(15,NAME_SET_INIT_FROM_OWNER(sender ? &sender->owned_names : NULL)
(16,&message->metadata)
(17,destinations = C_LIST_INIT(destinations)
(18,sender)
(19,sender->policy->seclabel)
(20,destinations)
(21,match_owner->destinations_link)
(22,bus)
(23,sender_names)
(24,0)
(25,r = connection_queue(&receiver->connection, NULL, message)
(26,r)
(27,sender ? sender->policy->seclabel : bus->seclabel)
(28,&destinations)
(29,destinations_link)
(30,receiver->policy)
(31,Bus *bus)
(32,destinations)
(33,connection)
(34,sender)
(35,"Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.")
(36,)
(37,seclabel)
(38,Peer *sender)
(39,if (r == CONNECTION_E_QUOTA)
(40,c_list_first_entry(&destinations, MatchOwner, destinations_link)
(41,bus->n_monitors)
(42,match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link)
(43,return 0;)
(44,r)
(45,NULL)
(46,id)
(47,r)
(48,Peer)
(49,error_fold(r)
(50,NULL)
(51,receiver->policy->seclabel)
(52,MatchOwner)
(53,bus_log_append_transaction(bus, sender ? sender->id : ADDRESS_ID_INVALID, receiver->id,\n\\n                                                           &sender_names, NULL,\n\\n                                                           sender ? sender->policy->seclabel : bus->seclabel, receiver->policy->seclabel,\n\\n                                                           message)
(54,bus->seclabel)
(55,sender ? &sender->owned_names : NULL)
(56,log)
(57,log_append_here(bus->log, LOG_WARNING, 0)
(58,bus)
(59,receiver->connection)
(60,message)
(61,r)
(62,sender ? sender->id : ADDRESS_ID_INVALID)
(63,seclabel)
(64,if (!bus->n_monitors)
(65,receiver)
(66,log)
(67,bus->log)
(68,receiver)
(69,connection_queue(&receiver->connection, NULL, message)
(70,destinations_link)
(71,sender_names)
(72,while ((match_owner = c_list_first_entry(&destinations, MatchOwner, destinations_link)
(73,)
(74,receiver)
(75,&receiver->connection)
(76,if (r)
(77,receiver->connection)
(78,receiver->id)
(79,message)
(80,receiver)
(81,bus)
(82,error_fold(r)
(83,return error_fold(r)
(84,match_owner)
(85,owned_matches)
(86,if (r)
(87,r = message_parse_metadata(message)
(88,return 0;)
(89,message_parse_metadata(message)
(90,LOG_WARNING)
(91,sender->owned_names)
(92,&destinations)
(93,&receiver->connection)
(94,sender)
(95,*receiver = c_container_of(match_owner, Peer, owned_matches)
(96,n_monitors)
(97,destinations)
(98,r)
(99,CONNECTION_E_QUOTA)
(100,)
(101,destinations)
(102,ADDRESS_ID_INVALID)
(103,receiver)
(104,metadata)
(105,if (r)
(106,&match_owner->destinations_link)
(107,sender->policy)
(108,0)
(109,sender_names)
(110,RET)
(111,receiver->id)
(112,message)
(113,sender)
(114,destinations)
(115,sender)
(116,connection_shutdown(&receiver->connection)
(117,receiver)
(118,return error_fold(r)
(119,)
(120,sender->id)
(121,message->metadata)
(122,sender)
(123,&sender->owned_names)
(124,r)
(125,r = log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id)
(126,bus->log)
(127,r)
(128,match_owner)
(129,log_commitf(bus->log, "Monitor :1.%llu is being disconnected as it does not have the resources to receive a message it subscribed to.", receiver->id)
(130,r == CONNECTION_E_QUOTA)
(131,!bus->n_monitors)
(132,bus)
(133,match_owner)
(134,connection)
(135,Message *message)
(136,policy)
(137,)
(138,seclabel)
(139,r)
(140,r)
(141,bus)
(142,bus_get_monitor_destinations(bus, &destinations, sender, &message->metadata)
(143,bus)
(144,id)
(145,NULL)
(146,sender)
(147,message)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^