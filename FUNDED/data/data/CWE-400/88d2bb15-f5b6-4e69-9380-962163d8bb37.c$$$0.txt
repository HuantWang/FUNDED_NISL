-----label-----
1
-----code-----
void CWE401_Memory_Leak__malloc_realloc_int_18_bad()
{
    goto sink;
sink:
    {
        int * data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        /* FLAW: If realloc() fails, the initial memory block will not be freed() */
        data = (int *)realloc(data, (130000)*sizeof(int));
        if (data != NULL)
        {
            /* Reinitialize and make use of data */
            data[0] = 10;
            printIntLine(data[0]);
            free(data);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
10,15
10,16
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
47,49
48,49
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
62,63
64,65
64,66
65,66
65,67
67,68
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
77,78
78,79
78,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
87,90
88,89
89,90
89,91
90,91
90,92
91,92
95,96
96,97
96,98
97,98
99,100
99,101
100,101
103,104
104,105
104,106
105,106
107,108
-----nextToken-----
2,4,7,9,13,15,16,20,22,25,27,30,31,35,37,42,44,49,50,51,55,58,59,63,66,68,71,73,76,79,80,84,86,92,93,94,98,101,102,106,108
-----computeFrom-----
26,27
26,28
33,34
33,35
46,47
46,48
61,62
61,63
74,75
74,76
82,83
82,84
89,90
89,91
-----guardedBy-----
84,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE401_Memory_Leak__malloc_realloc_int_18_bad(){    goto sink;sink:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }}
void
CWE401_Memory_Leak__malloc_realloc_int_18_bad()
CWE401_Memory_Leak__malloc_realloc_int_18_bad
{    goto sink;sink:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }}
goto sink;
sink
sink:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }
sink
{        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        /* FLAW: If realloc() fails, the initial memory block will not be freed() */        data = (int *)realloc(data, (130000)*sizeof(int));        if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }    }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
data = (int *)realloc(data, (130000)*sizeof(int));
data = (int *)realloc(data, (130000)*sizeof(int))
data
data
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (data != NULL)        {            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data != NULL
data
data
NULL
NULL
{            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);            free(data);        }
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(18,56,0)
(57,0,0)
(15,8,0)
(11,56,0)
(50,11,0)
(0,28,0)
(56,38,0)
(6,23,0)
(49,52,0)
(25,4,0)
(29,43,0)
(8,14,0)
(35,4,0)
(16,26,0)
(22,33,0)
(9,11,0)
(26,14,0)
(23,6,0)
(26,43,0)
(29,54,0)
(20,29,0)
(27,6,0)
(7,23,0)
(43,28,0)
(54,29,0)
(1,15,0)
(17,38,0)
(28,21,0)
(10,0,0)
(26,16,0)
(29,56,0)
(14,52,0)
(14,26,0)
(46,53,0)
(47,43,0)
(31,14,0)
(14,8,0)
(57,52,0)
(2,49,0)
(52,7,0)
(51,40,0)
(7,41,0)
(48,27,0)
(7,52,0)
(19,21,0)
(24,17,0)
(29,0,0)
(6,27,0)
(11,43,0)
(54,38,0)
(42,52,0)
(39,49,0)
(3,57,0)
(13,33,0)
(49,0,0)
(44,57,0)
(30,57,0)
(37,28,0)
(41,7,0)
(4,52,0)
(3,28,0)
(55,8,0)
(12,28,0)
(36,6,0)
(45,29,0)
(40,46,0)
(34,28,0)
(33,43,0)
(46,40,0)
(17,43,0)
(8,15,0)
(52,28,0)
(43,26,0)
(32,21,0)
(57,3,0)
(23,7,0)
(17,43,1)
(5,17,1)
(49,39,1)
(14,52,1)
(50,33,1)
(11,9,1)
(57,52,1)
(24,54,1)
(23,6,1)
(45,56,1)
(14,8,1)
(29,20,1)
(2,46,1)
(29,0,1)
(27,48,1)
(30,0,1)
(6,27,1)
(33,13,1)
(2,4,1)
(22,43,1)
(5,33,1)
(10,49,1)
(43,26,1)
(0,10,1)
(47,3,1)
(20,45,1)
(8,15,1)
(29,56,1)
(54,29,1)
(26,14,1)
(29,43,1)
(31,47,1)
(9,50,1)
(40,51,1)
(57,44,1)
(52,7,1)
(42,19,1)
(49,52,1)
(44,30,1)
(7,41,1)
(55,31,1)
(13,22,1)
(25,35,1)
(3,57,1)
(4,25,1)
(51,4,1)
(48,36,1)
(11,43,1)
(18,11,1)
(39,2,1)
(56,18,1)
(15,1,1)
(33,43,1)
(17,24,1)
(36,42,1)
(4,52,1)
(35,52,1)
(7,23,1)
(46,40,1)
(26,16,1)
(57,0,1)
(1,55,1)
(29,33,2)
(56,33,2)
(24,33,2)
(14,52,2)
(57,0,2)
(40,4,2)
(17,43,2)
(29,43,2)
(23,6,2)
(29,0,2)
(26,14,2)
(6,27,2)
(29,56,2)
(4,52,2)
(20,33,2)
(18,33,2)
(46,40,2)
(7,23,2)
(3,57,2)
(45,33,2)
(8,15,2)
(17,33,2)
(26,16,2)
(51,4,2)
(11,43,2)
(49,52,2)
(33,43,2)
(52,7,2)
(54,29,2)
(46,4,2)
(7,41,2)
(54,33,2)
(57,52,2)
(50,33,2)
(43,26,2)
(14,8,2)
(11,33,2)
(9,33,2)
-----------------------------------
(0,data[0] = 5)
(1,int)
(2,data)
(3,printIntLine(data[0])
(4,data == NULL)
(5,RET)
(6,100*sizeof(int)
(7,(int *)
(8,(130000)
(9,0)
(10,5)
(11,data[0])
(12,data)
(13,NULL)
(14,realloc(data, (130000)
(15,sizeof(int)
(16,int *)
(17,free(data)
(18,10)
(19,goto sink;)
(20,0)
(21,)
(22,data)
(23,malloc(100*sizeof(int)
(24,data)
(25,NULL)
(26,(int *)
(27,sizeof(int)
(28,)
(29,data[0])
(30,data)
(31,data)
(32,sink:)
(33,data != NULL)
(34,if (data != NULL)
(35,data)
(36,100)
(37,if (data == NULL)
(38,)
(39,0)
(40,-1)
(41,int *)
(42,data)
(43,data = (int *)
(44,0)
(45,data)
(46,exit(-1)
(47,data)
(48,int)
(49,data[0])
(50,data)
(51,1)
(52,* data = (int *)
(53,)
(54,printIntLine(data[0])
(55,130000)
(56,data[0] = 10)
(57,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^