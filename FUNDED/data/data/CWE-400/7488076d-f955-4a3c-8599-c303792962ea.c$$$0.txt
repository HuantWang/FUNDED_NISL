-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_05_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticTrue)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticTrue)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
22,23
22,24
22,25
22,26
22,27
23,24
24,25
24,26
25,26
27,28
27,29
28,29
28,30
29,30
31,32
33,34
33,35
33,36
34,35
37,38
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
46,47
48,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
57,59
58,59
58,60
59,60
64,65
65,66
65,67
66,67
66,68
67,68
67,69
68,69
73,74
74,75
74,76
75,76
77,78
77,79
78,79
78,80
79,80
81,82
83,84
84,85
84,86
85,86
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,9,11,12,16,18,21,26,30,32,35,36,40,41,45,47,52,54,60,61,62,63,69,70,71,72,76,80,82,86,87,90,92
-----computeFrom-----
14,15
14,16
24,25
24,26
43,44
43,45
56,57
56,58
65,66
65,67
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_calloc_05_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_05_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_calloc_05_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticTrue)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)calloc(100, sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
calloc(100, sizeof(struct _twoIntsStruct))
calloc
calloc
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticTrue)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticTrue
staticTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(4,2,0)
(19,5,0)
(1,42,0)
(21,32,0)
(43,2,0)
(36,19,0)
(29,34,0)
(46,48,0)
(23,19,0)
(44,20,0)
(15,33,0)
(22,46,0)
(47,28,0)
(48,3,0)
(5,19,0)
(20,46,0)
(17,40,0)
(6,12,0)
(33,13,0)
(24,2,0)
(11,8,0)
(39,48,0)
(45,21,0)
(14,30,0)
(39,14,0)
(30,14,0)
(18,34,0)
(38,13,0)
(42,1,0)
(34,46,0)
(20,40,0)
(9,13,0)
(1,5,0)
(40,20,0)
(26,1,0)
(14,39,0)
(12,2,0)
(13,33,0)
(35,28,0)
(3,48,0)
(19,46,0)
(7,32,0)
(26,32,0)
(31,20,0)
(1,26,0)
(40,21,0)
(8,32,0)
(25,12,0)
(33,8,0)
(46,32,0)
(48,46,0)
(5,1,0)
(28,47,0)
(48,39,0)
(41,39,0)
(13,46,0)
(47,16,0)
(38,21,1)
(0,26,1)
(5,19,1)
(40,17,1)
(45,40,1)
(18,46,1)
(41,22,1)
(19,36,1)
(22,27,1)
(40,20,1)
(13,46,1)
(34,29,1)
(36,23,1)
(48,3,1)
(34,46,1)
(8,11,1)
(10,0,1)
(21,45,1)
(15,13,1)
(20,46,1)
(29,18,1)
(0,27,1)
(17,20,1)
(27,12,1)
(13,9,1)
(14,30,1)
(11,33,1)
(14,41,1)
(9,38,1)
(31,34,1)
(28,35,1)
(23,8,1)
(35,34,1)
(20,44,1)
(39,14,1)
(12,6,1)
(6,25,1)
(26,1,1)
(33,13,1)
(19,46,1)
(46,48,1)
(1,42,1)
(1,5,1)
(48,39,1)
(44,31,1)
(33,15,1)
(47,28,1)
(31,47,1)
(39,27,2)
(20,27,2)
(1,27,2)
(18,27,2)
(34,46,2)
(31,27,2)
(19,46,2)
(28,34,2)
(15,27,2)
(14,30,2)
(13,27,2)
(40,27,2)
(34,27,2)
(8,27,2)
(46,27,2)
(35,34,2)
(5,19,2)
(36,27,2)
(47,28,2)
(17,27,2)
(21,27,2)
(5,27,2)
(13,46,2)
(19,27,2)
(39,14,2)
(46,48,2)
(9,27,2)
(1,5,2)
(40,20,2)
(11,27,2)
(26,1,2)
(47,34,2)
(1,42,2)
(48,39,2)
(45,27,2)
(29,27,2)
(41,27,2)
(14,27,2)
(48,3,2)
(38,27,2)
(22,27,2)
(44,27,2)
(33,13,2)
(26,27,2)
(20,46,2)
(48,27,2)
(33,27,2)
(23,27,2)
-----------------------------------
(0,staticTrue)
(1,(twoIntsStruct *)
(2,)
(3,struct _twoIntsStruct *)
(4,if(staticTrue)
(5,&data[0])
(6,NULL)
(7,if (data == NULL)
(8,data[0].intTwo = 0)
(9,0)
(10,RET)
(11,0)
(12,data = NULL)
(13,data[0])
(14,sizeof(struct _twoIntsStruct)
(15,intTwo)
(16,)
(17,intOne)
(18,data)
(19,data[0])
(20,data[0])
(21,data[0].intOne = 0)
(22,data)
(23,data)
(24,if(staticTrue)
(25,data)
(26,printStructLine((twoIntsStruct *)
(27,staticTrue)
(28,-1)
(29,NULL)
(30,struct _twoIntsStruct)
(31,data)
(32,)
(33,data[0].intTwo)
(34,data == NULL)
(35,1)
(36,0)
(37, sizeof(struct _twoIntsStruct)
(38,data)
(39,calloc(100, sizeof(struct _twoIntsStruct)
(40,data[0].intOne)
(41,100)
(42,twoIntsStruct *)
(43,data)
(44,0)
(45,0)
(46,data = (struct _twoIntsStruct *)
(47,exit(-1)
(48,(struct _twoIntsStruct *)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^