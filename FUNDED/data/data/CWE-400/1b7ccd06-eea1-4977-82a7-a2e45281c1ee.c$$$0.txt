-----label-----
1
-----code-----
static int
riemann_send(struct riemann_host *host, Msg const *msg)
{
	u_char *buffer;
	size_t  buffer_len;
	int status;

	pthread_mutex_lock (&host->lock);

	status = riemann_connect (host);
	if (status != 0)
	{
		pthread_mutex_unlock (&host->lock);
		return status;
	}

	buffer_len = msg__get_packed_size(msg);
	if (host->use_tcp)
		buffer_len += 4;

	buffer = malloc (buffer_len);
	if (buffer == NULL) {
		pthread_mutex_unlock (&host->lock);
		ERROR ("write_riemann plugin: malloc failed.");
		return ENOMEM;
	}
	memset (buffer, 0, buffer_len);

	if (host->use_tcp)
	{
		uint32_t length = htonl ((uint32_t) (buffer_len - 4));
		memcpy (buffer, &length, 4);
		msg__pack(msg, buffer + 4);
	}
	else
	{
		msg__pack(msg, buffer);
	}

	status = (int) swrite (host->s, buffer, buffer_len);
	if (status != 0)
	{
		char errbuf[1024];

		riemann_disconnect (host);
		pthread_mutex_unlock (&host->lock);

		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",
				(host->node != NULL) ? host->node : RIEMANN_HOST,
				(host->service != NULL) ? host->service : RIEMANN_PORT,
				sstrerror (errno, errbuf, sizeof (errbuf)));
		sfree (buffer);
		return -1;
	}

	pthread_mutex_unlock (&host->lock);
	sfree (buffer);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
34,35
36,37
37,38
37,39
38,39
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
49,50
49,51
50,51
52,53
54,55
54,56
55,56
55,57
56,57
59,60
59,61
60,61
61,62
61,63
62,63
64,65
65,66
65,67
66,67
69,70
70,71
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
81,83
82,83
82,84
83,84
86,87
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
95,97
96,97
98,99
100,101
100,102
101,102
101,103
102,103
104,105
106,107
106,108
106,109
107,108
108,109
108,110
109,110
111,112
112,113
112,114
113,114
116,117
117,118
117,119
118,119
121,122
122,123
124,125
125,126
125,127
125,128
125,129
126,127
128,129
131,132
133,134
133,135
133,136
134,135
134,136
135,136
138,139
138,140
138,141
139,140
140,141
140,142
141,142
143,144
143,145
145,146
146,147
146,148
147,148
149,150
149,151
150,151
151,152
153,154
153,155
154,155
157,158
158,159
158,160
158,161
158,162
159,160
161,162
163,164
164,165
167,168
168,169
168,170
168,171
169,170
171,172
173,174
173,175
174,175
177,178
178,179
179,180
179,181
179,182
180,181
182,183
184,185
186,187
187,188
187,189
188,189
190,191
190,192
191,192
191,193
194,195
194,196
194,197
194,198
195,196
197,198
197,199
198,199
201,202
203,204
205,206
205,207
206,207
206,208
207,208
210,211
210,212
210,213
210,214
210,215
210,216
211,212
212,213
212,214
214,215
214,216
216,217
218,219
219,220
219,221
220,221
222,223
224,225
225,226
225,227
226,227
228,229
229,230
229,231
230,231
233,234
234,235
234,236
234,237
234,238
234,239
235,236
238,239
238,240
238,241
239,240
240,241
240,242
241,242
241,243
242,243
245,246
247,248
247,249
248,249
251,252
253,254
253,255
253,256
254,255
255,256
255,257
256,257
256,258
257,258
260,261
262,263
262,264
263,264
266,267
268,269
268,270
268,271
268,272
269,270
271,272
273,274
275,276
276,277
277,278
279,280
280,281
280,282
281,282
283,284
285,286
286,287
288,289
289,290
289,291
290,291
292,293
293,294
293,295
294,295
297,298
298,299
298,300
299,300
301,302
303,304
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,30,33,35,39,43,44,48,51,53,57,58,63,67,68,71,75,78,80,84,85,89,90,94,97,99,103,105,110,114,115,119,120,123,127,129,130,132,136,137,142,144,148,152,155,156,160,162,165,166,170,172,175,176,181,183,185,189,192,193,196,199,200,202,204,208,209,213,215,217,221,223,227,231,232,236,237,243,244,246,249,250,252,258,259,261,264,265,267,270,272,274,278,282,284,287,291,295,296,300,302,304
-----computeFrom-----
46,47
46,48
55,56
55,57
73,74
73,75
87,88
87,89
92,93
92,94
101,102
101,103
153,154
153,155
173,174
173,175
187,188
187,189
206,207
206,208
240,241
240,242
255,256
255,257
-----guardedBy-----
57,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intriemann_send(struct riemann_host *host, Msg const *msg){	u_char *buffer;	size_t  buffer_len;	int status;	pthread_mutex_lock (&host->lock);	status = riemann_connect (host);	if (status != 0)	{		pthread_mutex_unlock (&host->lock);		return status;	}	buffer_len = msg__get_packed_size(msg);	if (host->use_tcp)		buffer_len += 4;	buffer = malloc (buffer_len);	if (buffer == NULL) {		pthread_mutex_unlock (&host->lock);		ERROR ("write_riemann plugin: malloc failed.");		return ENOMEM;	}	memset (buffer, 0, buffer_len);	if (host->use_tcp)	{		uint32_t length = htonl ((uint32_t) (buffer_len - 4));		memcpy (buffer, &length, 4);		msg__pack(msg, buffer + 4);	}	else	{		msg__pack(msg, buffer);	}	status = (int) swrite (host->s, buffer, buffer_len);	if (status != 0)	{		char errbuf[1024];		riemann_disconnect (host);		pthread_mutex_unlock (&host->lock);		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));		sfree (buffer);		return -1;	}	pthread_mutex_unlock (&host->lock);	sfree (buffer);	return 0;}
static int
riemann_send(struct riemann_host *host, Msg const *msg)
riemann_send
struct riemann_host *host
struct riemann_host
riemann_host
*host
*
host
Msg const *msg
Msg const
Msg
*msg
*
msg
{	u_char *buffer;	size_t  buffer_len;	int status;	pthread_mutex_lock (&host->lock);	status = riemann_connect (host);	if (status != 0)	{		pthread_mutex_unlock (&host->lock);		return status;	}	buffer_len = msg__get_packed_size(msg);	if (host->use_tcp)		buffer_len += 4;	buffer = malloc (buffer_len);	if (buffer == NULL) {		pthread_mutex_unlock (&host->lock);		ERROR ("write_riemann plugin: malloc failed.");		return ENOMEM;	}	memset (buffer, 0, buffer_len);	if (host->use_tcp)	{		uint32_t length = htonl ((uint32_t) (buffer_len - 4));		memcpy (buffer, &length, 4);		msg__pack(msg, buffer + 4);	}	else	{		msg__pack(msg, buffer);	}	status = (int) swrite (host->s, buffer, buffer_len);	if (status != 0)	{		char errbuf[1024];		riemann_disconnect (host);		pthread_mutex_unlock (&host->lock);		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));		sfree (buffer);		return -1;	}	pthread_mutex_unlock (&host->lock);	sfree (buffer);	return 0;}
u_char *buffer;
u_char *buffer;
u_char
u_char
*buffer
*
buffer
size_t  buffer_len;
size_t  buffer_len;
size_t
size_t
buffer_len
buffer_len
int status;
int status;
int
status
status
pthread_mutex_lock (&host->lock);
pthread_mutex_lock (&host->lock)
pthread_mutex_lock
pthread_mutex_lock
&host->lock
host->lock
host
host
lock
status = riemann_connect (host);
status = riemann_connect (host)
status
status
riemann_connect (host)
riemann_connect
riemann_connect
host
host
if (status != 0)	{		pthread_mutex_unlock (&host->lock);		return status;	}
status != 0
status
status
0
{		pthread_mutex_unlock (&host->lock);		return status;	}
pthread_mutex_unlock (&host->lock);
pthread_mutex_unlock (&host->lock)
pthread_mutex_unlock
pthread_mutex_unlock
&host->lock
host->lock
host
host
lock
return status;
status
status
buffer_len = msg__get_packed_size(msg);
buffer_len = msg__get_packed_size(msg)
buffer_len
buffer_len
msg__get_packed_size(msg)
msg__get_packed_size
msg__get_packed_size
msg
msg
if (host->use_tcp)		buffer_len += 4;
host->use_tcp
host
host
use_tcp
buffer_len += 4;
buffer_len += 4
buffer_len
buffer_len
4
buffer = malloc (buffer_len);
buffer = malloc (buffer_len)
buffer
buffer
malloc (buffer_len)
malloc
malloc
buffer_len
buffer_len
if (buffer == NULL) {		pthread_mutex_unlock (&host->lock);		ERROR ("write_riemann plugin: malloc failed.");		return ENOMEM;	}
buffer == NULL
buffer
buffer
NULL
NULL
{		pthread_mutex_unlock (&host->lock);		ERROR ("write_riemann plugin: malloc failed.");		return ENOMEM;	}
pthread_mutex_unlock (&host->lock);
pthread_mutex_unlock (&host->lock)
pthread_mutex_unlock
pthread_mutex_unlock
&host->lock
host->lock
host
host
lock
ERROR ("write_riemann plugin: malloc failed.");
ERROR ("write_riemann plugin: malloc failed.")
ERROR
ERROR
"write_riemann plugin: malloc failed."
return ENOMEM;
ENOMEM
ENOMEM
memset (buffer, 0, buffer_len);
memset (buffer, 0, buffer_len)
memset
memset
buffer
buffer
0
buffer_len
buffer_len
if (host->use_tcp)	{		uint32_t length = htonl ((uint32_t) (buffer_len - 4));		memcpy (buffer, &length, 4);		msg__pack(msg, buffer + 4);	}	else	{		msg__pack(msg, buffer);	}
host->use_tcp
host
host
use_tcp
{		uint32_t length = htonl ((uint32_t) (buffer_len - 4));		memcpy (buffer, &length, 4);		msg__pack(msg, buffer + 4);	}
uint32_t length = htonl ((uint32_t) (buffer_len - 4));
uint32_t length = htonl ((uint32_t) (buffer_len - 4));
uint32_t
uint32_t
length = htonl ((uint32_t) (buffer_len - 4))
length
= htonl ((uint32_t) (buffer_len - 4))
htonl ((uint32_t) (buffer_len - 4))
htonl
htonl
(uint32_t) (buffer_len - 4)
(uint32_t)
uint32_t
uint32_t
buffer_len - 4
buffer_len
buffer_len
4
memcpy (buffer, &length, 4);
memcpy (buffer, &length, 4)
memcpy
memcpy
buffer
buffer
&length
length
length
4
msg__pack(msg, buffer + 4);
msg__pack(msg, buffer + 4)
msg__pack
msg__pack
msg
msg
buffer + 4
buffer
buffer
4
{		msg__pack(msg, buffer);	}
msg__pack(msg, buffer);
msg__pack(msg, buffer)
msg__pack
msg__pack
msg
msg
buffer
buffer
status = (int) swrite (host->s, buffer, buffer_len);
status = (int) swrite (host->s, buffer, buffer_len)
status
status
(int) swrite (host->s, buffer, buffer_len)
int
int

swrite (host->s, buffer, buffer_len)
swrite
swrite
host->s
host
host
s
buffer
buffer
buffer_len
buffer_len
if (status != 0)	{		char errbuf[1024];		riemann_disconnect (host);		pthread_mutex_unlock (&host->lock);		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));		sfree (buffer);		return -1;	}
status != 0
status
status
0
{		char errbuf[1024];		riemann_disconnect (host);		pthread_mutex_unlock (&host->lock);		ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));		sfree (buffer);		return -1;	}
char errbuf[1024];
char errbuf[1024];
char
errbuf[1024]
errbuf
[1024]
1024
riemann_disconnect (host);
riemann_disconnect (host)
riemann_disconnect
riemann_disconnect
host
host
pthread_mutex_unlock (&host->lock);
pthread_mutex_unlock (&host->lock)
pthread_mutex_unlock
pthread_mutex_unlock
&host->lock
host->lock
host
host
lock
ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)));
ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",				(host->node != NULL) ? host->node : RIEMANN_HOST,				(host->service != NULL) ? host->service : RIEMANN_PORT,				sstrerror (errno, errbuf, sizeof (errbuf)))
ERROR
ERROR
"write_riemann plugin: Sending to Riemann at %s:%s failed: %s"
(host->node != NULL) ? host->node : RIEMANN_HOST
(host->node != NULL)
host->node != NULL
host->node
host
host
node
NULL
NULL
host->node
host
host
node
RIEMANN_HOST
RIEMANN_HOST
(host->service != NULL) ? host->service : RIEMANN_PORT
(host->service != NULL)
host->service != NULL
host->service
host
host
service
NULL
NULL
host->service
host
host
service
RIEMANN_PORT
RIEMANN_PORT
sstrerror (errno, errbuf, sizeof (errbuf))
sstrerror
sstrerror
errno
errno
errbuf
errbuf
sizeof (errbuf)
(errbuf)
errbuf
errbuf
sfree (buffer);
sfree (buffer)
sfree
sfree
buffer
buffer
return -1;
-1
1
pthread_mutex_unlock (&host->lock);
pthread_mutex_unlock (&host->lock)
pthread_mutex_unlock
pthread_mutex_unlock
&host->lock
host->lock
host
host
lock
sfree (buffer);
sfree (buffer)
sfree
sfree
buffer
buffer
return 0;
0
-----joern-----
(139,147,0)
(71,19,0)
(104,22,0)
(123,117,0)
(88,19,0)
(151,150,0)
(109,49,0)
(72,70,0)
(125,22,0)
(41,12,0)
(15,61,0)
(138,141,0)
(38,72,0)
(128,44,0)
(9,70,0)
(15,146,0)
(64,101,0)
(108,119,0)
(87,27,0)
(95,101,0)
(107,114,0)
(49,97,0)
(132,9,0)
(57,136,0)
(1,21,0)
(111,27,0)
(8,44,0)
(121,61,0)
(151,135,0)
(21,27,0)
(122,27,0)
(136,104,0)
(46,101,0)
(25,131,0)
(130,20,0)
(102,149,0)
(116,152,0)
(0,90,0)
(23,27,0)
(148,19,0)
(50,141,0)
(12,101,0)
(55,117,0)
(17,21,0)
(37,121,0)
(69,27,0)
(146,27,0)
(131,25,0)
(49,27,0)
(43,114,0)
(151,45,0)
(31,68,0)
(96,101,0)
(59,95,0)
(9,141,0)
(135,151,0)
(107,28,0)
(13,97,0)
(97,13,0)
(90,133,0)
(124,12,0)
(65,11,0)
(69,25,0)
(30,28,0)
(83,125,0)
(142,119,0)
(68,22,0)
(110,22,0)
(100,146,0)
(59,107,0)
(97,49,0)
(127,95,0)
(15,54,0)
(21,1,0)
(44,54,0)
(145,150,0)
(150,145,0)
(82,26,0)
(141,22,0)
(82,87,0)
(39,23,0)
(81,145,0)
(68,45,0)
(94,91,0)
(62,122,0)
(6,135,0)
(114,101,0)
(35,147,0)
(54,72,0)
(79,125,0)
(9,152,0)
(148,135,0)
(14,146,0)
(104,152,0)
(3,150,0)
(131,45,0)
(6,27,0)
(80,54,0)
(55,116,0)
(47,21,0)
(22,8,0)
(60,147,0)
(114,23,0)
(141,9,0)
(111,26,0)
(26,82,0)
(146,15,0)
(59,58,0)
(137,12,0)
(53,148,0)
(23,114,0)
(24,45,0)
(19,148,0)
(105,49,0)
(135,6,0)
(61,15,0)
(51,101,0)
(99,62,0)
(26,111,0)
(15,22,0)
(61,121,0)
(120,101,0)
(52,85,0)
(66,22,0)
(110,101,0)
(117,55,0)
(2,111,0)
(77,45,0)
(12,54,0)
(147,35,0)
(84,122,0)
(12,44,0)
(122,62,0)
(134,152,0)
(113,15,0)
(89,87,0)
(85,121,0)
(103,111,0)
(143,43,0)
(32,110,0)
(150,151,0)
(36,108,0)
(20,44,0)
(24,27,0)
(126,85,0)
(67,20,0)
(5,26,0)
(1,142,0)
(112,101,0)
(117,20,0)
(78,11,0)
(22,101,0)
(75,82,0)
(149,119,0)
(56,116,0)
(106,101,0)
(90,22,0)
(19,27,0)
(30,35,0)
(48,6,0)
(16,129,0)
(61,86,0)
(76,15,0)
(26,151,0)
(136,116,0)
(11,27,0)
(104,136,0)
(91,58,0)
(90,70,0)
(33,104,0)
(121,101,0)
(12,22,0)
(8,22,0)
(10,104,0)
(115,6,0)
(42,114,0)
(8,54,0)
(54,101,0)
(29,122,0)
(144,101,0)
(4,107,0)
(116,55,0)
(40,8,0)
(18,69,0)
(34,69,0)
(20,54,0)
(98,135,0)
(7,150,0)
(58,45,0)
(62,99,0)
(15,44,0)
(59,149,0)
(93,151,0)
(13,101,0)
(72,54,0)
(20,117,0)
(147,27,0)
(87,82,0)
(129,27,0)
(135,148,0)
(35,30,0)
(117,123,0)
(86,61,0)
(142,1,0)
(99,101,0)
(73,24,0)
(140,129,0)
(63,43,0)
(151,26,0)
(74,44,0)
(118,90,0)
(92,87,0)
(25,69,0)
(127,110,1)
(37,9,1)
(41,137,1)
(9,70,1)
(15,113,1)
(122,29,1)
(35,147,1)
(84,85,1)
(75,87,1)
(74,11,1)
(15,22,1)
(111,2,1)
(118,129,1)
(13,97,1)
(136,116,1)
(87,27,1)
(141,22,1)
(146,14,1)
(3,7,1)
(117,123,1)
(29,84,1)
(66,44,1)
(116,55,1)
(151,26,1)
(71,93,1)
(20,54,1)
(150,145,1)
(37,90,1)
(44,54,1)
(97,49,1)
(94,68,1)
(82,87,1)
(145,81,1)
(146,27,1)
(62,122,1)
(125,22,1)
(102,108,1)
(21,47,1)
(11,78,1)
(140,12,1)
(151,135,1)
(66,11,1)
(147,27,1)
(90,70,1)
(12,54,1)
(135,6,1)
(16,140,1)
(43,143,1)
(82,75,1)
(65,54,1)
(72,38,1)
(5,82,1)
(138,50,1)
(59,95,1)
(42,13,1)
(87,92,1)
(129,27,1)
(149,102,1)
(8,40,1)
(121,61,1)
(54,72,1)
(56,129,1)
(6,48,1)
(128,74,1)
(107,4,1)
(26,82,1)
(113,76,1)
(4,30,1)
(130,67,1)
(15,54,1)
(80,43,1)
(31,151,1)
(43,114,1)
(72,70,1)
(142,1,1)
(115,148,1)
(141,138,1)
(8,44,1)
(6,27,1)
(22,8,1)
(68,22,1)
(63,114,1)
(108,36,1)
(24,27,1)
(48,115,1)
(148,19,1)
(147,139,1)
(9,141,1)
(122,27,1)
(104,136,1)
(104,10,1)
(67,56,1)
(135,148,1)
(52,121,1)
(59,107,1)
(79,22,1)
(39,42,1)
(19,27,1)
(15,146,1)
(14,100,1)
(105,109,1)
(110,22,1)
(33,116,1)
(114,23,1)
(90,22,1)
(49,27,1)
(44,128,1)
(40,66,1)
(73,85,1)
(68,31,1)
(111,27,1)
(26,111,1)
(139,60,1)
(59,149,1)
(36,142,1)
(81,3,1)
(17,125,1)
(32,99,1)
(98,148,1)
(2,103,1)
(10,136,1)
(90,0,1)
(47,17,1)
(76,146,1)
(30,35,1)
(58,91,1)
(11,27,1)
(91,94,1)
(103,82,1)
(137,125,1)
(21,27,1)
(100,37,1)
(20,44,1)
(8,54,1)
(135,98,1)
(12,22,1)
(19,88,1)
(83,79,1)
(0,118,1)
(104,22,1)
(38,80,1)
(110,32,1)
(69,27,1)
(85,126,1)
(26,5,1)
(24,73,1)
(148,53,1)
(53,19,1)
(34,18,1)
(49,105,1)
(78,65,1)
(93,131,1)
(143,63,1)
(23,27,1)
(129,16,1)
(89,135,1)
(124,41,1)
(59,58,1)
(95,127,1)
(126,52,1)
(99,62,1)
(12,44,1)
(18,24,1)
(61,15,1)
(61,86,1)
(20,130,1)
(85,121,1)
(131,25,1)
(107,114,1)
(55,117,1)
(92,89,1)
(50,132,1)
(25,69,1)
(117,20,1)
(15,44,1)
(7,26,1)
(1,21,1)
(151,150,1)
(136,57,1)
(57,33,1)
(23,39,1)
(12,124,1)
(88,71,1)
(69,34,1)
(125,83,1)
(132,104,1)
(60,43,1)
(138,129,2)
(16,125,2)
(81,85,2)
(12,22,2)
(107,43,2)
(99,85,2)
(25,69,2)
(94,85,2)
(9,141,2)
(11,27,2)
(59,149,2)
(54,72,2)
(72,43,2)
(149,125,2)
(0,129,2)
(139,43,2)
(85,125,2)
(110,85,2)
(113,125,2)
(4,43,2)
(131,25,2)
(54,43,2)
(150,85,2)
(61,125,2)
(40,43,2)
(6,148,2)
(68,85,2)
(87,27,2)
(148,19,2)
(18,85,2)
(19,85,2)
(59,95,2)
(107,114,2)
(141,129,2)
(2,82,2)
(21,27,2)
(33,129,2)
(7,85,2)
(117,123,2)
(26,111,2)
(145,85,2)
(30,35,2)
(118,129,2)
(50,129,2)
(20,54,2)
(17,125,2)
(104,22,2)
(15,54,2)
(15,22,2)
(121,125,2)
(53,85,2)
(111,27,2)
(73,85,2)
(151,150,2)
(69,85,2)
(132,129,2)
(98,148,2)
(31,85,2)
(13,97,2)
(1,125,2)
(125,43,2)
(76,125,2)
(6,27,2)
(69,27,2)
(48,148,2)
(61,15,2)
(26,85,2)
(100,125,2)
(82,85,2)
(84,85,2)
(103,82,2)
(12,54,2)
(11,43,2)
(62,85,2)
(59,107,2)
(23,27,2)
(43,114,2)
(122,85,2)
(99,62,2)
(25,85,2)
(122,27,2)
(34,85,2)
(24,27,2)
(71,85,2)
(136,116,2)
(89,85,2)
(12,125,2)
(104,129,2)
(59,58,2)
(104,136,2)
(140,125,2)
(55,117,2)
(128,11,2)
(114,23,2)
(58,85,2)
(102,125,2)
(56,129,2)
(87,85,2)
(125,22,2)
(146,27,2)
(129,125,2)
(32,85,2)
(121,61,2)
(129,27,2)
(60,43,2)
(91,85,2)
(95,85,2)
(80,43,2)
(22,8,2)
(21,125,2)
(127,85,2)
(35,147,2)
(47,125,2)
(150,145,2)
(151,135,2)
(1,21,2)
(151,26,2)
(148,85,2)
(24,85,2)
(37,125,2)
(85,121,2)
(136,129,2)
(141,22,2)
(55,129,2)
(57,129,2)
(3,85,2)
(67,129,2)
(90,22,2)
(44,54,2)
(135,6,2)
(151,85,2)
(35,43,2)
(90,129,2)
(142,1,2)
(146,125,2)
(68,22,2)
(20,129,2)
(30,43,2)
(9,129,2)
(142,125,2)
(15,146,2)
(108,125,2)
(9,70,2)
(117,20,2)
(8,44,2)
(19,27,2)
(10,129,2)
(66,43,2)
(15,44,2)
(5,82,2)
(110,22,2)
(26,82,2)
(130,129,2)
(36,125,2)
(147,43,2)
(52,125,2)
(49,27,2)
(97,49,2)
(93,85,2)
(12,44,2)
(147,27,2)
(90,70,2)
(38,43,2)
(88,85,2)
(20,44,2)
(15,125,2)
(62,122,2)
(22,43,2)
(111,82,2)
(83,43,2)
(65,43,2)
(92,85,2)
(131,85,2)
(126,125,2)
(75,85,2)
(78,43,2)
(79,43,2)
(115,148,2)
(8,43,2)
(116,55,2)
(117,129,2)
(137,125,2)
(44,11,2)
(29,85,2)
(72,70,2)
(82,87,2)
(124,125,2)
(116,129,2)
(135,85,2)
(135,148,2)
(74,11,2)
(8,54,2)
(14,125,2)
(61,86,2)
(41,125,2)
-----------------------------------
(0,buffer)
(1,&host->lock)
(2,service)
(3,errbuf)
(4,status)
(5,RIEMANN_PORT)
(6,host->node)
(7,errno)
(8,malloc (buffer_len)
(9,msg__pack(msg, buffer + 4)
(10,4)
(11,host->use_tcp)
(12,memset (buffer, 0, buffer_len)
(13,pthread_mutex_lock (&host->lock)
(14,s)
(15,swrite (host->s, buffer, buffer_len)
(16,use_tcp)
(17,host)
(18,host)
(19,host->node)
(20,buffer_len - 4)
(21,host->lock)
(22,buffer = malloc (buffer_len)
(23,riemann_connect (host)
(24,riemann_disconnect (host)
(25,&host->lock)
(26,(host->service != NULL)
(27,struct riemann_host *host)
(28,)
(29,lock)
(30,pthread_mutex_unlock (&host->lock)
(31,buffer)
(32,buffer)
(33,buffer)
(34,lock)
(35,&host->lock)
(36,"write_riemann plugin: malloc failed.")
(37,status)
(38,msg)
(39,host)
(40,buffer_len)
(41,0)
(42,status)
(43,status != 0)
(44,buffer_len += 4)
(45,)
(46,if (host->use_tcp)
(47,lock)
(48,node)
(49,host->lock)
(50,buffer)
(51,buffer)
(52,status)
(53,NULL)
(54,buffer_len = msg__get_packed_size(msg)
(55,htonl ((uint32_t)
(56,length)
(57,length)
(58,return -1;)
(59,RET)
(60,host)
(61,(int)
(62,&host->lock)
(63,status)
(64,buffer_len)
(65,host)
(66,buffer)
(67,buffer_len)
(68,sfree (buffer)
(69,host->lock)
(70,Msg const *msg)
(71,host)
(72,msg__get_packed_size(msg)
(73,host)
(74,buffer_len)
(75,NULL)
(76,buffer)
(77,errbuf)
(78,use_tcp)
(79,buffer)
(80,buffer_len)
(81,errbuf)
(82,host->service != NULL)
(83,NULL)
(84,host)
(85,status != 0)
(86,int)
(87,host->service)
(88,node)
(89,host)
(90,msg__pack(msg, buffer)
(91,-1)
(92,service)
(93,"write_riemann plugin: Sending to Riemann at %s:%s failed: %s")
(94,1)
(95,return 0;)
(96,status)
(97,&host->lock)
(98,RIEMANN_HOST)
(99,pthread_mutex_unlock (&host->lock)
(100,host)
(101,)
(102,ENOMEM)
(103,host)
(104,memcpy (buffer, &length, 4)
(105,lock)
(106,if (host->use_tcp)
(107,return status;)
(108,ERROR ("write_riemann plugin: malloc failed.")
(109,host)
(110,sfree (buffer)
(111,host->service)
(112,if (status != 0)
(113,buffer_len)
(114,status = riemann_connect (host)
(115,host)
(116,length = htonl ((uint32_t)
(117,(uint32_t)
(118,msg)
(119,)
(120,if (status != 0)
(121,status = (int)
(122,host->lock)
(123,uint32_t)
(124,buffer_len)
(125,buffer == NULL)
(126,0)
(127,0)
(128,4)
(129,host->use_tcp)
(130,4)
(131,pthread_mutex_unlock (&host->lock)
(132,msg)
(133,)
(134,length)
(135,(host->node != NULL)
(136,&length)
(137,buffer)
(138,4)
(139,lock)
(140,host)
(141,buffer + 4)
(142,pthread_mutex_unlock (&host->lock)
(143,0)
(144,if (buffer == NULL)
(145,sizeof (errbuf)
(146,host->s)
(147,host->lock)
(148,host->node != NULL)
(149,return ENOMEM;)
(150,sstrerror (errno, errbuf, sizeof (errbuf)
(151,ERROR ("write_riemann plugin: Sending to Riemann at %s:%s failed: %s",\n\\n\\t\\t\\t\\t(host->node != NULL)
(152,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^