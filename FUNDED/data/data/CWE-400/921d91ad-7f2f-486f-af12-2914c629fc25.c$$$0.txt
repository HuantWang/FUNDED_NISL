-----label-----
1
-----code-----
void CWE401_Memory_Leak__wchar_t_malloc_16_bad()
{
    wchar_t * data;
    data = NULL;
    while(1)
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (wchar_t *)malloc(100*sizeof(wchar_t));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
        break;
    }
    while(1)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
        break;
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
20,21
20,22
20,23
20,24
20,25
21,22
22,23
22,24
23,24
25,26
25,27
26,27
26,28
28,29
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
39,40
39,41
40,41
40,42
41,42
43,44
45,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
54,55
56,57
59,60
60,61
60,62
61,62
63,64
66,67
66,68
68,69
68,70
-----nextToken-----
2,4,8,10,11,15,17,19,24,27,29,32,34,37,38,42,44,49,51,55,57,58,62,64,65,67,69,70
-----computeFrom-----
13,14
13,15
22,23
22,24
33,34
33,35
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;WhileStatement;LiteralExpression;CompoundStatement;NullStatement;BreakStatement;
-----ast_node-----
void CWE401_Memory_Leak__wchar_t_malloc_16_bad(){    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
void
CWE401_Memory_Leak__wchar_t_malloc_16_bad()
CWE401_Memory_Leak__wchar_t_malloc_16_bad
{    wchar_t * data;    data = NULL;    while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }    while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
while(1)    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
1
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (wchar_t *)malloc(100*sizeof(wchar_t));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);        break;    }
data = (wchar_t *)malloc(100*sizeof(wchar_t));
data = (wchar_t *)malloc(100*sizeof(wchar_t))
data
data
(wchar_t *)malloc(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
malloc(100*sizeof(wchar_t))
malloc
malloc
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
break;
while(1)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
1
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */        break;    }
;
break;
-----joern-----
(13,29,0)
(16,28,0)
(18,8,0)
(10,16,0)
(32,9,0)
(17,26,0)
(22,8,0)
(4,12,0)
(12,21,0)
(28,17,0)
(17,28,0)
(27,23,0)
(29,16,0)
(14,23,0)
(5,23,0)
(26,17,0)
(28,16,0)
(31,14,0)
(8,26,0)
(26,15,0)
(21,12,0)
(30,23,0)
(19,14,0)
(21,11,0)
(2,15,0)
(16,29,0)
(20,26,0)
(1,15,0)
(0,17,0)
(24,1,0)
(3,15,0)
(1,26,0)
(17,0,0)
(14,19,1)
(25,3,1)
(17,0,1)
(19,31,1)
(13,10,1)
(7,14,1)
(1,26,1)
(24,8,1)
(22,26,1)
(18,22,1)
(32,25,1)
(3,1,1)
(26,17,1)
(8,26,1)
(4,8,1)
(28,16,1)
(12,4,1)
(8,18,1)
(29,13,1)
(25,7,1)
(1,24,1)
(6,32,1)
(21,12,1)
(10,20,1)
(16,29,1)
(24,21,1)
(17,28,1)
(20,7,1)
(6,25,1)
(18,7,2)
(8,7,2)
(3,7,2)
(26,17,2)
(20,7,2)
(10,7,2)
(22,7,2)
(26,7,2)
(1,26,2)
(1,7,2)
(29,7,2)
(13,7,2)
(28,16,2)
(12,8,2)
(17,7,2)
(4,8,2)
(16,29,2)
(8,26,2)
(21,12,2)
(21,8,2)
(28,7,2)
(17,28,2)
(16,7,2)
(17,0,2)
(24,7,2)
(32,25,2)
-----------------------------------
(0,wchar_t *)
(1,printWLine(data)
(2,if (data == NULL)
(3,break;)
(4,1)
(5,data)
(6,RET)
(7,1)
(8,data == NULL)
(9,)
(10,100)
(11,)
(12,-1)
(13,wchar_t)
(14,data = NULL)
(15,)
(16,100*sizeof(wchar_t)
(17,(wchar_t *)
(18,NULL)
(19,NULL)
(20,data)
(21,exit(-1)
(22,data)
(23,)
(24,data)
(25,1)
(26,data = (wchar_t *)
(27,while(1)
(28,malloc(100*sizeof(wchar_t)
(29,sizeof(wchar_t)
(30,while(1)
(31,data)
(32,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^