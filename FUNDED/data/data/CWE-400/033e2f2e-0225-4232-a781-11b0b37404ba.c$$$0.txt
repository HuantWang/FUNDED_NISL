-----label-----
0
-----code-----
static void goodG2B()
{
    int count;
    int *countPtr1 = &count;
    int *countPtr2 = &count;
    /* Initialize count */
    count = -1;
    {
        int count = *countPtr1;
        /* FIX: Use a relatively small number */
        count = 20;
        *countPtr1 = count;
    }
    {
        int count = *countPtr2;
        {
            size_t i = 0;
            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */
            for (i = 0; i < (size_t)count; i++)
            {
                printLine("Hello");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
19,20
21,22
22,23
22,24
24,25
24,26
24,27
27,28
28,29
29,30
31,32
32,33
32,34
33,34
35,36
37,38
37,39
37,40
38,39
39,40
39,41
41,42
41,43
43,44
44,45
45,46
47,48
48,49
48,50
49,50
52,53
53,54
53,55
54,55
55,56
57,58
59,60
59,61
60,61
61,62
61,63
63,64
63,65
65,66
66,67
67,68
69,70
69,71
70,71
71,72
71,73
72,73
74,75
74,76
76,77
78,79
78,80
78,81
78,82
79,80
80,81
80,82
81,82
84,85
84,86
85,86
87,88
87,89
88,89
88,90
89,90
92,93
94,95
95,96
97,98
98,99
99,100
99,101
100,101
-----nextToken-----
2,4,8,10,13,15,16,20,23,25,26,30,34,36,40,42,46,50,51,56,58,62,64,68,73,75,77,82,83,86,90,91,93,96,101,102
-----computeFrom-----
32,33
32,34
48,49
48,50
53,54
53,55
80,81
80,82
84,85
84,86
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* FIX: Use a relatively small number */        count = 20;        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
static void
goodG2B()
goodG2B
{    int count;    int *countPtr1 = &count;    int *countPtr2 = &count;    /* Initialize count */    count = -1;    {        int count = *countPtr1;        /* FIX: Use a relatively small number */        count = 20;        *countPtr1 = count;    }    {        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }}
int count;
int count;
int
count
count
int *countPtr1 = &count;
int *countPtr1 = &count;
int
*countPtr1 = &count
*
countPtr1
= &count
&count
count
count
int *countPtr2 = &count;
int *countPtr2 = &count;
int
*countPtr2 = &count
*
countPtr2
= &count
&count
count
count
count = -1;
count = -1
count
count
-1
1
{        int count = *countPtr1;        /* FIX: Use a relatively small number */        count = 20;        *countPtr1 = count;    }
int count = *countPtr1;
int count = *countPtr1;
int
count = *countPtr1
count
= *countPtr1
*countPtr1
countPtr1
countPtr1
count = 20;
count = 20
count
count
20
*countPtr1 = count;
*countPtr1 = count
*countPtr1
countPtr1
countPtr1
count
count
{        int count = *countPtr2;        {            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }    }
int count = *countPtr2;
int count = *countPtr2;
int
count = *countPtr2
count
= *countPtr2
*countPtr2
countPtr2
countPtr2
{            size_t i = 0;            /* POTENTIAL FLAW: For loop using count as the loop variant and no validation */            for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }        }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
for (i = 0; i < (size_t)count; i++)            {                printLine("Hello");            }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{                printLine("Hello");            }
printLine("Hello");
printLine("Hello")
printLine
printLine
"Hello"
-----joern-----
(14,42,0)
(45,26,0)
(13,19,0)
(40,26,0)
(48,52,0)
(43,41,0)
(50,25,0)
(39,34,0)
(11,22,0)
(20,1,0)
(1,19,0)
(24,50,0)
(42,14,0)
(15,36,0)
(2,36,0)
(18,41,0)
(5,22,0)
(49,19,0)
(9,46,0)
(16,13,0)
(26,23,0)
(7,30,0)
(51,11,0)
(13,33,0)
(23,19,0)
(17,33,0)
(25,50,0)
(14,23,0)
(10,23,0)
(22,11,0)
(3,42,0)
(8,19,0)
(53,4,0)
(52,13,0)
(27,26,0)
(29,41,0)
(52,27,0)
(27,23,0)
(12,30,0)
(4,19,0)
(33,13,0)
(31,4,0)
(38,53,0)
(18,30,0)
(42,13,0)
(30,18,0)
(32,18,0)
(28,41,0)
(46,1,0)
(4,53,0)
(22,19,0)
(36,46,0)
(37,25,0)
(54,46,0)
(30,12,0)
(0,14,0)
(47,19,0)
(50,1,0)
(35,28,0)
(21,27,0)
(30,50,0)
(34,6,0)
(25,22,0)
(0,4,1)
(29,43,1)
(2,15,1)
(28,41,1)
(21,52,1)
(26,45,1)
(24,27,1)
(44,18,1)
(4,53,1)
(18,41,1)
(30,7,1)
(41,29,1)
(22,11,1)
(40,14,1)
(13,33,1)
(53,38,1)
(30,12,1)
(17,16,1)
(42,13,1)
(27,21,1)
(30,50,1)
(52,48,1)
(14,42,1)
(28,35,1)
(18,30,1)
(25,37,1)
(34,39,1)
(32,41,1)
(52,13,1)
(3,0,1)
(31,22,1)
(36,2,1)
(27,26,1)
(43,36,1)
(39,18,1)
(35,34,1)
(33,17,1)
(48,26,1)
(50,25,1)
(45,40,1)
(25,22,1)
(32,28,1)
(42,3,1)
(51,5,1)
(37,24,1)
(7,32,1)
(11,51,1)
(38,31,1)
(5,13,1)
(15,50,1)
(28,41,2)
(7,18,2)
(30,18,2)
(30,12,2)
(34,18,2)
(18,41,2)
(14,42,2)
(27,26,2)
(42,13,2)
(4,53,2)
(13,33,2)
(52,13,2)
(30,50,2)
(18,30,2)
(28,18,2)
(32,18,2)
(25,22,2)
(39,18,2)
(35,18,2)
(22,11,2)
(18,18,2)
(50,25,2)
-----------------------------------
(0,count)
(1,)
(2,0)
(3,countPtr1)
(4,count = -1)
(5,countPtr2)
(6,)
(7,count)
(8,countPtr1)
(9,for (i = 0; i < (size_t)
(10,count)
(11,&count)
(12,size_t)
(13,*countPtr1 = &count)
(14,count = *countPtr1)
(15,i)
(16,countPtr1)
(17,count)
(18,i < (size_t)
(19,)
(20,count)
(21,count)
(22,*countPtr2 = &count)
(23,)
(24,count)
(25,*countPtr2)
(26,count = 20)
(27,*countPtr1 = count)
(28,i++)
(29,0)
(30,(size_t)
(31,count)
(32,i)
(33,&count)
(34,printLine("Hello")
(35,i)
(36,i = 0)
(37,countPtr2)
(38,1)
(39,"Hello")
(40,count)
(41,i = 0)
(42,*countPtr1)
(43,i)
(44,RET)
(45,20)
(46,)
(47,countPtr2)
(48,countPtr1)
(49,count)
(50,count = *countPtr2)
(51,count)
(52,*countPtr1)
(53,-1)
(54,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^