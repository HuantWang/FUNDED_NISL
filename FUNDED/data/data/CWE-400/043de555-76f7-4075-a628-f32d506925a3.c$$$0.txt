-----label-----
0
-----code-----
static void goodG2B2()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticFive==5)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticFive==5)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
20,22
21,22
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
29,30
29,31
30,31
30,32
31,32
33,34
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
45,46
46,47
46,48
47,48
47,49
48,49
48,50
49,50
54,55
55,56
55,57
56,57
56,58
57,58
57,59
58,59
63,64
64,65
64,66
65,66
67,68
67,69
68,69
68,70
69,70
71,72
73,74
74,75
74,76
75,76
78,79
78,80
79,80
79,81
80,81
83,84
-----nextToken-----
2,4,9,11,12,16,18,22,23,28,32,34,37,39,43,44,50,51,52,53,59,60,61,62,66,70,72,76,77,81,82,84
-----computeFrom-----
14,15
14,16
20,21
20,22
26,27
26,28
38,39
38,40
46,47
46,48
55,56
55,57
79,80
79,81
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    struct _twoIntsStruct * data;    data = NULL;    if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticFive==5)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticFive==5
staticFive
staticFive
5
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)ALLOCA(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
ALLOCA(100*sizeof(struct _twoIntsStruct))
ALLOCA
ALLOCA
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticFive==5)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticFive==5
staticFive
staticFive
5
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(10,35,0)
(44,11,0)
(16,15,0)
(8,19,0)
(9,37,0)
(43,13,0)
(7,41,0)
(5,32,0)
(22,20,0)
(42,24,0)
(7,2,0)
(3,2,0)
(25,24,0)
(0,25,0)
(33,37,0)
(19,8,0)
(36,12,0)
(38,20,0)
(10,42,0)
(37,35,0)
(23,7,0)
(17,10,0)
(15,8,0)
(39,13,0)
(13,26,0)
(15,26,0)
(6,19,0)
(40,19,0)
(19,6,0)
(26,24,0)
(15,16,0)
(35,37,0)
(13,43,0)
(6,34,0)
(11,20,0)
(1,11,0)
(2,26,0)
(42,10,0)
(34,6,0)
(18,20,0)
(2,7,0)
(8,15,0)
(29,13,0)
(28,12,0)
(41,24,0)
(37,26,0)
(26,15,0)
(35,10,0)
(4,32,0)
(21,41,0)
(10,17,0)
(14,2,0)
(43,25,0)
(31,26,0)
(27,43,0)
(11,1,1)
(6,34,1)
(6,40,1)
(33,25,1)
(10,35,1)
(2,26,1)
(2,3,1)
(9,33,1)
(42,10,1)
(43,13,1)
(1,44,1)
(12,28,1)
(25,0,1)
(40,31,1)
(37,26,1)
(15,16,1)
(21,7,1)
(23,2,1)
(5,4,1)
(26,15,1)
(19,6,1)
(37,9,1)
(29,41,1)
(35,37,1)
(0,43,1)
(30,12,1)
(43,27,1)
(32,5,1)
(10,17,1)
(13,39,1)
(15,8,1)
(7,2,1)
(4,11,1)
(41,21,1)
(8,19,1)
(7,23,1)
(31,32,1)
(36,32,1)
(27,13,1)
(28,36,1)
(39,29,1)
(3,14,1)
(13,26,1)
(14,26,1)
(36,42,1)
(41,32,2)
(15,8,2)
(19,32,2)
(15,32,2)
(42,32,2)
(6,32,2)
(31,32,2)
(7,2,2)
(43,32,2)
(37,26,2)
(0,32,2)
(7,32,2)
(10,32,2)
(35,32,2)
(2,26,2)
(42,10,2)
(26,32,2)
(37,32,2)
(2,32,2)
(40,32,2)
(13,32,2)
(27,32,2)
(29,32,2)
(13,26,2)
(33,32,2)
(39,32,2)
(21,32,2)
(43,13,2)
(10,35,2)
(6,34,2)
(8,19,2)
(8,32,2)
(9,32,2)
(10,17,2)
(26,15,2)
(14,32,2)
(15,16,2)
(35,37,2)
(25,32,2)
(23,32,2)
(3,32,2)
(19,6,2)
-----------------------------------
(0,0)
(1,NULL)
(2,data[0])
(3,0)
(4,staticFive)
(5,5)
(6,sizeof(struct _twoIntsStruct)
(7,data[0].intOne)
(8,ALLOCA(100*sizeof(struct _twoIntsStruct)
(9,0)
(10,(twoIntsStruct *)
(11,data = NULL)
(12,staticFive==5)
(13,data[0])
(14,data)
(15,(struct _twoIntsStruct *)
(16,struct _twoIntsStruct *)
(17,twoIntsStruct *)
(18,data)
(19,100*sizeof(struct _twoIntsStruct)
(20,)
(21,0)
(22,if(staticFive==5)
(23,intOne)
(24,)
(25,data[0].intTwo = 0)
(26,data = (struct _twoIntsStruct *)
(27,intTwo)
(28,5)
(29,data)
(30,RET)
(31,data)
(32,staticFive==5)
(33,data)
(34,struct _twoIntsStruct)
(35,&data[0])
(36,staticFive)
(37,data[0])
(38,if(staticFive==5)
(39,0)
(40,100)
(41,data[0].intOne = 0)
(42,printStructLine((twoIntsStruct *)
(43,data[0].intTwo)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^