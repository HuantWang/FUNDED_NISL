-----label-----
1
-----code-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_64b_badSink(void * countVoidPtr)
{
    /* cast void pointer to a pointer of the appropriate type */
    int * countPtr = (int *)countVoidPtr;
    /* dereference countPtr into count */
    int count = (*countPtr);
    {
        size_t i = 0;
        FILE *pFile = NULL;
        const char *filename = "output_bad.txt";
        pFile = fopen(filename, "w+");
        if (pFile == NULL)
        {
            exit(1);
        }
        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation
         * This can cause a file to become very large */
        for (i = 0; i < (size_t)count; i++)
        {
            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))
            {
                exit(1);
            }
        }
        if (pFile)
        {
            fclose(pFile);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
25,26
26,27
26,28
28,29
28,30
30,31
31,32
32,33
33,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
36,37
37,38
37,39
38,39
40,41
40,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
48,51
51,52
52,53
54,55
55,56
55,57
57,58
57,59
57,60
60,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
84,85
84,86
84,87
84,88
85,86
86,87
86,88
87,88
90,91
90,92
91,92
93,94
93,95
94,95
94,96
95,96
98,99
100,101
101,102
103,104
104,105
104,106
105,106
105,107
106,107
106,108
107,108
109,110
111,112
111,113
111,114
111,115
111,116
112,113
114,115
116,117
117,118
117,119
120,121
120,122
121,122
123,124
125,126
127,128
128,129
129,130
129,131
130,131
133,134
133,135
134,135
136,137
137,138
138,139
138,140
139,140
141,142
-----nextToken-----
2,4,6,8,9,13,15,16,20,22,24,27,29,34,39,41,43,47,49,50,53,56,58,59,61,65,68,70,71,75,77,82,83,88,89,92,96,97,99,102,108,110,113,115,118,119,122,124,126,131,132,135,140,142
-----computeFrom-----
63,64
63,65
73,74
73,75
86,87
86,88
90,91
90,92
105,106
105,107
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE400_Resource_Exhaustion__fscanf_fwrite_64b_badSink(void * countVoidPtr){    /* cast void pointer to a pointer of the appropriate type */    int * countPtr = (int *)countVoidPtr;    /* dereference countPtr into count */    int count = (*countPtr);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
void
CWE400_Resource_Exhaustion__fscanf_fwrite_64b_badSink(void * countVoidPtr)
CWE400_Resource_Exhaustion__fscanf_fwrite_64b_badSink
void * countVoidPtr
void
* countVoidPtr
*
countVoidPtr
{    /* cast void pointer to a pointer of the appropriate type */    int * countPtr = (int *)countVoidPtr;    /* dereference countPtr into count */    int count = (*countPtr);    {        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }}
int * countPtr = (int *)countVoidPtr;
int * countPtr = (int *)countVoidPtr;
int
* countPtr = (int *)countVoidPtr
*
countPtr
= (int *)countVoidPtr
(int *)countVoidPtr
int *
int
*
*
countVoidPtr
countVoidPtr
int count = (*countPtr);
int count = (*countPtr);
int
count = (*countPtr)
count
= (*countPtr)
(*countPtr)
*countPtr
countPtr
countPtr
{        size_t i = 0;        FILE *pFile = NULL;        const char *filename = "output_bad.txt";        pFile = fopen(filename, "w+");        if (pFile == NULL)        {            exit(1);        }        /* POTENTIAL FLAW: For loop using count as the loop variant and no validation         * This can cause a file to become very large */        for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }        if (pFile)        {            fclose(pFile);        }    }
size_t i = 0;
size_t i = 0;
size_t
size_t
i = 0
i
= 0
0
FILE *pFile = NULL;
FILE *pFile = NULL;
FILE
FILE
*pFile = NULL
*
pFile
= NULL
NULL
NULL
const char *filename = "output_bad.txt";
const char *filename = "output_bad.txt";
const char
*filename = "output_bad.txt"
*
filename
= "output_bad.txt"
"output_bad.txt"
pFile = fopen(filename, "w+");
pFile = fopen(filename, "w+")
pFile
pFile
fopen(filename, "w+")
fopen
fopen
filename
filename
"w+"
if (pFile == NULL)        {            exit(1);        }
pFile == NULL
pFile
pFile
NULL
NULL
{            exit(1);        }
exit(1);
exit(1)
exit
exit
1
for (i = 0; i < (size_t)count; i++)        {            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
i = 0;
i = 0
i
i
0
i < (size_t)count
i
i
(size_t)count
size_t
size_t
size_t

count
count
i++
i
i
{            if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }        }
if (strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile))            {                exit(1);            }
strlen(SENTENCE) != fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
fwrite(SENTENCE, sizeof(char), strlen(SENTENCE), pFile)
fwrite
fwrite
SENTENCE
SENTENCE
sizeof(char)
char
char

strlen(SENTENCE)
strlen
strlen
SENTENCE
SENTENCE
pFile
pFile
{                exit(1);            }
exit(1);
exit(1)
exit
exit
1
if (pFile)        {            fclose(pFile);        }
pFile
pFile
{            fclose(pFile);        }
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
-----joern-----
(52,37,0)
(34,15,0)
(37,35,0)
(14,44,0)
(12,58,0)
(57,59,0)
(25,35,0)
(54,1,0)
(29,56,0)
(24,26,0)
(40,30,0)
(28,35,0)
(57,30,0)
(62,57,0)
(69,22,0)
(15,22,0)
(46,58,0)
(64,35,0)
(42,26,0)
(21,26,0)
(67,8,0)
(15,44,0)
(67,59,0)
(39,59,0)
(58,35,0)
(31,24,0)
(47,35,0)
(59,67,0)
(20,37,0)
(50,6,0)
(61,18,0)
(49,30,0)
(13,54,0)
(32,6,0)
(44,15,0)
(49,18,0)
(56,55,0)
(17,24,0)
(18,4,0)
(48,67,0)
(41,55,0)
(26,35,0)
(7,41,0)
(3,68,0)
(51,67,0)
(19,15,0)
(5,11,0)
(43,35,0)
(15,55,0)
(55,35,0)
(35,6,0)
(22,69,0)
(16,55,0)
(65,49,0)
(27,35,0)
(49,65,0)
(30,57,0)
(66,23,0)
(45,4,0)
(10,49,0)
(9,34,0)
(67,48,0)
(59,6,0)
(15,34,0)
(33,4,0)
(38,56,0)
(55,24,0)
(36,15,0)
(22,15,0)
(24,55,0)
(11,4,0)
(0,69,0)
(18,49,0)
(41,53,0)
(23,2,0)
(30,6,0)
(49,10,1)
(20,52,1)
(49,65,1)
(67,8,1)
(40,59,1)
(9,19,1)
(60,41,1)
(41,7,1)
(34,9,1)
(18,4,1)
(67,48,1)
(22,69,1)
(0,18,1)
(24,26,1)
(21,42,1)
(5,23,1)
(38,55,1)
(22,15,1)
(24,31,1)
(30,57,1)
(4,33,1)
(5,22,1)
(57,59,1)
(17,16,1)
(59,67,1)
(10,61,1)
(15,44,1)
(11,4,1)
(41,55,1)
(44,14,1)
(14,34,1)
(12,46,1)
(36,44,1)
(15,55,1)
(42,37,1)
(56,29,1)
(61,4,1)
(58,12,1)
(19,69,1)
(13,56,1)
(61,11,1)
(31,17,1)
(45,56,1)
(49,30,1)
(52,58,1)
(57,62,1)
(26,21,1)
(69,0,1)
(54,13,1)
(7,63,1)
(67,51,1)
(18,49,1)
(23,66,1)
(16,26,1)
(45,54,1)
(63,18,1)
(51,39,1)
(60,63,1)
(29,38,1)
(46,30,1)
(56,55,1)
(66,22,1)
(15,34,1)
(15,36,1)
(55,24,1)
(37,20,1)
(33,45,1)
(62,40,1)
(11,5,1)
(34,18,2)
(11,4,2)
(10,18,2)
(41,63,2)
(0,18,2)
(49,65,2)
(11,18,2)
(22,18,2)
(30,57,2)
(14,18,2)
(24,26,2)
(67,8,2)
(13,56,2)
(15,34,2)
(55,24,2)
(41,55,2)
(9,18,2)
(22,69,2)
(18,18,2)
(49,18,2)
(66,22,2)
(69,18,2)
(44,18,2)
(18,4,2)
(67,48,2)
(61,18,2)
(59,67,2)
(15,44,2)
(5,18,2)
(54,56,2)
(23,22,2)
(49,30,2)
(56,55,2)
(36,18,2)
(57,59,2)
(15,18,2)
(15,55,2)
(22,15,2)
(7,63,2)
(18,49,2)
(19,18,2)
-----------------------------------
(0,SENTENCE)
(1,)
(2,)
(3,if (strlen(SENTENCE)
(4,i = 0)
(5,i)
(6,)
(7,pFile)
(8,void * countVoidPtr)
(9,char)
(10,count)
(11,i++)
(12,0)
(13,1)
(14,SENTENCE)
(15,fwrite(SENTENCE, sizeof(char)
(16,pFile)
(17,filename)
(18,i < (size_t)
(19,SENTENCE)
(20,NULL)
(21,"output_bad.txt")
(22,strlen(SENTENCE)
(23,exit(1)
(24,fopen(filename, "w+")
(25,for (i = 0; i < (size_t)
(26,*filename = "output_bad.txt")
(27,if (pFile == NULL)
(28,pFile)
(29,NULL)
(30,count = (*countPtr)
(31,"w+")
(32,countPtr)
(33,0)
(34,sizeof(char)
(35,)
(36,pFile)
(37,*pFile = NULL)
(38,pFile)
(39,countPtr)
(40,count)
(41,fclose(pFile)
(42,filename)
(43,i)
(44,strlen(SENTENCE)
(45,i)
(46,i)
(47,if (pFile)
(48,int *)
(49,(size_t)
(50,count)
(51,countVoidPtr)
(52,pFile)
(53,)
(54,exit(1)
(55,pFile = fopen(filename, "w+")
(56,pFile == NULL)
(57,*countPtr)
(58,i = 0)
(59,* countPtr = (int *)
(60,RET)
(61,i)
(62,countPtr)
(63,pFile)
(64,filename)
(65,size_t)
(66,1)
(67,(int *)
(68,)
(69,strlen(SENTENCE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^