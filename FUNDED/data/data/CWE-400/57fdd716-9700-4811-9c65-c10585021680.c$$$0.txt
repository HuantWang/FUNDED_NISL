-----label-----
1
-----code-----
void mainloop(int sockfd, int epfd)
{
	int i, n;
	struct epoll_event events[IRIS_EPOLL_MAXFD];

	for (;;) {
		vdebug("going into epoll_wait loop");
		n = epoll_wait(epfd, events, sizeof(events), -1);
		vdebug("epoll gave us %d fds to work with", n);

		for (i = 0; i < n; i++) {
#ifdef DEBUG
			vdebug("activity on %d: %04x =%s%s%s%s",
					events[i].data.fd, events[i].events,
					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),
					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),
					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),
					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));
#endif

			// CONNECT event
			if (events[i].data.fd == sockfd) {
				vdebug("processing inbound connections", sockfd);
				while (net_accept(sockfd, epfd) >= 0)
					;
				continue;
			}

			// DATA event
			if (events[i].events & EPOLLIN) {
				vdebug("processing readable filehandle");
				if (iris_call_recv_data(events[i].data.fd) != 0) {
					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");
					return;
				}
				continue;
			}

			syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",
					events[i].data.fd, events[i].events,
					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),
					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),
					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),
					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));
			client_close(events[i].data.fd);
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
13,14
13,15
13,16
14,15
15,16
15,17
15,18
17,18
19,20
21,22
22,23
22,24
23,24
25,26
25,27
27,28
28,29
30,31
30,32
32,33
32,34
32,35
32,36
33,34
34,35
34,36
35,36
38,39
39,40
39,41
40,41
42,43
42,44
42,45
42,46
42,47
43,44
45,46
47,48
49,50
50,51
51,52
53,54
55,56
56,57
56,58
56,59
57,58
60,61
62,63
62,64
62,65
62,66
63,64
64,65
64,66
65,66
68,69
68,70
69,70
71,72
73,74
74,75
76,77
76,78
76,79
76,80
77,78
77,79
78,79
78,80
79,80
79,81
80,81
80,82
81,82
81,83
82,83
84,85
88,89
90,91
90,92
90,93
91,92
92,93
92,94
92,95
93,94
96,97
98,99
98,100
99,100
99,101
100,101
100,102
100,103
101,102
103,104
105,106
110,111
110,112
111,112
111,113
112,113
112,114
113,114
113,115
114,115
116,117
119,120
121,122
121,123
121,124
122,123
123,124
123,125
124,125
127,128
127,129
128,129
128,130
129,130
129,131
130,131
132,133
132,134
133,134
133,135
134,135
134,136
135,136
137,138
142,143
142,144
143,144
144,145
144,146
144,147
145,146
147,148
152,153
153,154
153,155
153,156
153,157
153,158
153,159
153,160
153,161
153,162
154,155
156,157
159,160
159,161
160,161
160,162
161,162
161,163
162,163
164,165
168,169
168,170
169,170
169,171
170,171
172,173
175,176
176,177
176,178
176,179
177,178
177,179
178,179
178,180
179,180
179,181
180,181
182,183
185,186
189,190
190,191
190,192
190,193
191,192
191,193
192,193
192,194
193,194
193,195
194,195
196,197
199,200
203,204
204,205
204,206
204,207
205,206
205,207
206,207
206,208
207,208
207,209
208,209
210,211
213,214
217,218
218,219
218,220
218,221
219,220
219,221
220,221
220,222
221,222
221,223
222,223
224,225
227,228
231,232
232,233
232,234
233,234
235,236
235,237
236,237
236,238
237,238
237,239
238,239
240,241
-----nextToken-----
2,4,6,8,10,12,16,18,20,24,26,29,31,36,37,41,44,46,48,52,54,58,59,61,66,67,70,72,75,83,85,86,87,89,94,95,97,102,104,106,107,108,109,115,117,118,120,125,126,131,136,138,139,140,141,146,148,149,150,151,155,157,158,163,165,166,167,171,173,174,181,183,184,186,187,188,195,197,198,200,201,202,209,211,212,214,215,216,223,225,226,228,229,230,234,239,241,242,243
-----computeFrom-----
39,40
39,41
64,65
64,66
68,69
68,70
78,79
78,80
99,100
99,101
111,112
111,113
128,129
128,130
177,178
177,179
191,192
191,193
205,206
205,207
219,220
219,221
-----guardedBy-----
89,104
117,138
118,136
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;ForStatement;NullStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;WhileStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;NullStatement;ContinueStatement;IfStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;UnaryExpression;ConditionalExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;ConditionalExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;
-----ast_node-----
void mainloop(int sockfd, int epfd){	int i, n;	struct epoll_event events[IRIS_EPOLL_MAXFD];	for (;;) {		vdebug("going into epoll_wait loop");		n = epoll_wait(epfd, events, sizeof(events), -1);		vdebug("epoll gave us %d fds to work with", n);		for (i = 0; i < n; i++) {#ifdef DEBUG			vdebug("activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));#endif			// CONNECT event			if (events[i].data.fd == sockfd) {				vdebug("processing inbound connections", sockfd);				while (net_accept(sockfd, epfd) >= 0)					;				continue;			}			// DATA event			if (events[i].events & EPOLLIN) {				vdebug("processing readable filehandle");				if (iris_call_recv_data(events[i].data.fd) != 0) {					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}				continue;			}			syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));			client_close(events[i].data.fd);		}	}}
void
mainloop(int sockfd, int epfd)
mainloop
int sockfd
int
sockfd
sockfd
int epfd
int
epfd
epfd
{	int i, n;	struct epoll_event events[IRIS_EPOLL_MAXFD];	for (;;) {		vdebug("going into epoll_wait loop");		n = epoll_wait(epfd, events, sizeof(events), -1);		vdebug("epoll gave us %d fds to work with", n);		for (i = 0; i < n; i++) {#ifdef DEBUG			vdebug("activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));#endif			// CONNECT event			if (events[i].data.fd == sockfd) {				vdebug("processing inbound connections", sockfd);				while (net_accept(sockfd, epfd) >= 0)					;				continue;			}			// DATA event			if (events[i].events & EPOLLIN) {				vdebug("processing readable filehandle");				if (iris_call_recv_data(events[i].data.fd) != 0) {					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}				continue;			}			syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));			client_close(events[i].data.fd);		}	}}
int i, n;
int i, n;
int
i
i
n
n
struct epoll_event events[IRIS_EPOLL_MAXFD];
struct epoll_event events[IRIS_EPOLL_MAXFD];
struct epoll_event
epoll_event
events[IRIS_EPOLL_MAXFD]
events
[IRIS_EPOLL_MAXFD]
IRIS_EPOLL_MAXFD
IRIS_EPOLL_MAXFD
for (;;) {		vdebug("going into epoll_wait loop");		n = epoll_wait(epfd, events, sizeof(events), -1);		vdebug("epoll gave us %d fds to work with", n);		for (i = 0; i < n; i++) {#ifdef DEBUG			vdebug("activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));#endif			// CONNECT event			if (events[i].data.fd == sockfd) {				vdebug("processing inbound connections", sockfd);				while (net_accept(sockfd, epfd) >= 0)					;				continue;			}			// DATA event			if (events[i].events & EPOLLIN) {				vdebug("processing readable filehandle");				if (iris_call_recv_data(events[i].data.fd) != 0) {					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}				continue;			}			syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));			client_close(events[i].data.fd);		}	}
;
{		vdebug("going into epoll_wait loop");		n = epoll_wait(epfd, events, sizeof(events), -1);		vdebug("epoll gave us %d fds to work with", n);		for (i = 0; i < n; i++) {#ifdef DEBUG			vdebug("activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));#endif			// CONNECT event			if (events[i].data.fd == sockfd) {				vdebug("processing inbound connections", sockfd);				while (net_accept(sockfd, epfd) >= 0)					;				continue;			}			// DATA event			if (events[i].events & EPOLLIN) {				vdebug("processing readable filehandle");				if (iris_call_recv_data(events[i].data.fd) != 0) {					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}				continue;			}			syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));			client_close(events[i].data.fd);		}	}
vdebug("going into epoll_wait loop");
vdebug("going into epoll_wait loop")
vdebug
vdebug
"going into epoll_wait loop"
n = epoll_wait(epfd, events, sizeof(events), -1);
n = epoll_wait(epfd, events, sizeof(events), -1)
n
n
epoll_wait(epfd, events, sizeof(events), -1)
epoll_wait
epoll_wait
epfd
epfd
events
events
sizeof(events)
(events)
events
events
-1
1
vdebug("epoll gave us %d fds to work with", n);
vdebug("epoll gave us %d fds to work with", n)
vdebug
vdebug
"epoll gave us %d fds to work with"
n
n
for (i = 0; i < n; i++) {#ifdef DEBUG			vdebug("activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));#endif			// CONNECT event			if (events[i].data.fd == sockfd) {				vdebug("processing inbound connections", sockfd);				while (net_accept(sockfd, epfd) >= 0)					;				continue;			}			// DATA event			if (events[i].events & EPOLLIN) {				vdebug("processing readable filehandle");				if (iris_call_recv_data(events[i].data.fd) != 0) {					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}				continue;			}			syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));			client_close(events[i].data.fd);		}
i = 0;
i = 0
i
i
0
i < n
i
i
n
n
i++
i
i
{#ifdef DEBUG			vdebug("activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));#endif			// CONNECT event			if (events[i].data.fd == sockfd) {				vdebug("processing inbound connections", sockfd);				while (net_accept(sockfd, epfd) >= 0)					;				continue;			}			// DATA event			if (events[i].events & EPOLLIN) {				vdebug("processing readable filehandle");				if (iris_call_recv_data(events[i].data.fd) != 0) {					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}				continue;			}			syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));			client_close(events[i].data.fd);		}
if (events[i].data.fd == sockfd) {				vdebug("processing inbound connections", sockfd);				while (net_accept(sockfd, epfd) >= 0)					;				continue;			}
events[i].data.fd == sockfd
events[i].data.fd
events[i].data
events[i]
events
events
i
i
data
fd
sockfd
sockfd
{				vdebug("processing inbound connections", sockfd);				while (net_accept(sockfd, epfd) >= 0)					;				continue;			}
vdebug("processing inbound connections", sockfd);
vdebug("processing inbound connections", sockfd)
vdebug
vdebug
"processing inbound connections"
sockfd
sockfd
while (net_accept(sockfd, epfd) >= 0)					;
net_accept(sockfd, epfd) >= 0
net_accept(sockfd, epfd)
net_accept
net_accept
sockfd
sockfd
epfd
epfd
0
;
continue;
if (events[i].events & EPOLLIN) {				vdebug("processing readable filehandle");				if (iris_call_recv_data(events[i].data.fd) != 0) {					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}				continue;			}
events[i].events & EPOLLIN
events[i].events
events[i]
events
events
i
i
events
EPOLLIN
EPOLLIN
{				vdebug("processing readable filehandle");				if (iris_call_recv_data(events[i].data.fd) != 0) {					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}				continue;			}
vdebug("processing readable filehandle");
vdebug("processing readable filehandle")
vdebug
vdebug
"processing readable filehandle"
if (iris_call_recv_data(events[i].data.fd) != 0) {					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}
iris_call_recv_data(events[i].data.fd) != 0
iris_call_recv_data(events[i].data.fd)
iris_call_recv_data
iris_call_recv_data
events[i].data.fd
events[i].data
events[i]
events
events
i
i
data
fd
0
{					syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");					return;				}
syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)");
syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)")
syslog
syslog
LOG_PROC
LOG_PROC
"event loop terminating (recv_data signalled an error)"
return;
continue;
syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""));
syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",					events[i].data.fd, events[i].events,					(events[i].events & EPOLLERR   ? " EPOLLERR"   : ""),					(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""),					(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""),					(events[i].events & EPOLLIN    ? " EPOLLIN"    : ""))
syslog
syslog
LOG_INFO
LOG_INFO
"unhandled activity on %d: %04x =%s%s%s%s"
events[i].data.fd
events[i].data
events[i]
events
events
i
i
data
fd
events[i].events
events[i]
events
events
i
i
events
(events[i].events & EPOLLERR   ? " EPOLLERR"   : "")
events[i].events & EPOLLERR   ? " EPOLLERR"   : ""
events[i].events & EPOLLERR
events[i].events
events[i]
events
events
i
i
events
EPOLLERR
EPOLLERR
" EPOLLERR"
""
(events[i].events & EPOLLHUP   ? " EPOLLHUP"   : "")
events[i].events & EPOLLHUP   ? " EPOLLHUP"   : ""
events[i].events & EPOLLHUP
events[i].events
events[i]
events
events
i
i
events
EPOLLHUP
EPOLLHUP
" EPOLLHUP"
""
(events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : "")
events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : ""
events[i].events & EPOLLRDHUP
events[i].events
events[i]
events
events
i
i
events
EPOLLRDHUP
EPOLLRDHUP
" EPOLLRDHUP"
""
(events[i].events & EPOLLIN    ? " EPOLLIN"    : "")
events[i].events & EPOLLIN    ? " EPOLLIN"    : ""
events[i].events & EPOLLIN
events[i].events
events[i]
events
events
i
i
events
EPOLLIN
EPOLLIN
" EPOLLIN"
""
client_close(events[i].data.fd);
client_close(events[i].data.fd)
client_close
client_close
events[i].data.fd
events[i].data
events[i]
events
events
i
i
data
fd
-----joern-----
(121,21,0)
(43,88,0)
(70,167,0)
(50,63,0)
(62,70,0)
(135,45,0)
(168,186,0)
(62,81,0)
(97,172,0)
(17,45,0)
(108,142,0)
(21,13,0)
(176,157,0)
(71,106,0)
(125,45,0)
(18,45,0)
(186,166,0)
(165,79,0)
(92,45,0)
(191,85,0)
(66,92,0)
(13,45,0)
(4,26,0)
(170,64,0)
(93,125,0)
(183,129,0)
(167,142,0)
(71,120,0)
(67,20,0)
(178,131,0)
(175,183,0)
(25,39,0)
(128,101,0)
(129,123,0)
(179,142,0)
(87,7,0)
(144,179,0)
(194,43,0)
(195,102,0)
(181,124,0)
(30,87,0)
(47,31,0)
(182,4,0)
(151,20,0)
(195,45,0)
(91,167,0)
(99,172,0)
(176,120,0)
(101,144,0)
(137,135,0)
(3,81,0)
(129,183,0)
(142,167,0)
(122,39,0)
(132,63,0)
(39,122,0)
(174,85,0)
(142,24,0)
(112,38,0)
(75,87,0)
(72,170,0)
(166,186,0)
(51,167,0)
(25,170,0)
(142,4,0)
(92,148,0)
(40,0,0)
(142,42,0)
(80,124,0)
(197,103,0)
(32,98,0)
(126,62,0)
(138,39,0)
(26,4,0)
(20,181,0)
(104,27,0)
(147,98,0)
(68,49,0)
(88,170,0)
(169,187,0)
(42,142,0)
(8,49,0)
(166,185,0)
(143,19,0)
(59,21,0)
(136,13,0)
(160,88,0)
(129,164,0)
(83,97,0)
(124,80,0)
(120,71,0)
(140,176,0)
(158,31,0)
(82,166,0)
(5,132,0)
(174,24,0)
(2,45,0)
(180,42,0)
(196,0,0)
(150,35,0)
(79,26,0)
(87,164,0)
(107,157,0)
(106,71,0)
(119,85,0)
(94,187,0)
(156,198,0)
(103,99,0)
(35,31,0)
(38,170,0)
(0,45,0)
(69,172,0)
(129,68,0)
(184,115,0)
(114,97,0)
(0,169,0)
(76,124,0)
(85,174,0)
(181,20,0)
(170,103,0)
(98,32,0)
(85,119,0)
(89,19,0)
(170,38,0)
(39,25,0)
(68,129,0)
(162,101,0)
(18,68,0)
(170,24,0)
(133,18,0)
(73,135,0)
(110,42,0)
(93,173,0)
(146,32,0)
(135,79,0)
(14,44,0)
(103,170,0)
(117,92,0)
(179,144,0)
(80,142,0)
(131,45,0)
(170,88,0)
(31,45,0)
(23,99,0)
(109,143,0)
(37,25,0)
(56,17,0)
(127,81,0)
(116,144,0)
(169,0,0)
(130,120,0)
(26,79,0)
(6,45,0)
(21,121,0)
(144,101,0)
(198,185,0)
(142,179,0)
(170,25,0)
(102,43,0)
(36,173,0)
(152,181,0)
(112,45,0)
(139,115,0)
(16,8,0)
(95,63,0)
(173,93,0)
(43,102,0)
(198,55,0)
(177,70,0)
(186,35,0)
(64,32,0)
(32,64,0)
(118,26,0)
(81,45,0)
(97,45,0)
(4,142,0)
(84,123,0)
(124,181,0)
(87,185,0)
(58,55,0)
(35,186,0)
(42,173,0)
(54,27,0)
(193,169,0)
(31,35,0)
(34,103,0)
(153,122,0)
(46,179,0)
(105,198,0)
(29,45,0)
(170,44,0)
(100,44,0)
(187,169,0)
(123,129,0)
(79,135,0)
(119,131,0)
(99,103,0)
(134,148,0)
(61,125,0)
(190,98,0)
(7,87,0)
(86,119,0)
(60,112,0)
(173,42,0)
(122,6,0)
(44,170,0)
(149,106,0)
(142,148,0)
(172,99,0)
(113,195,0)
(121,44,0)
(6,122,0)
(141,93,0)
(142,80,0)
(115,49,0)
(77,64,0)
(145,102,0)
(98,45,0)
(111,125,0)
(10,89,0)
(53,6,0)
(22,49,0)
(13,21,0)
(65,6,0)
(12,170,0)
(155,7,0)
(101,45,0)
(52,13,0)
(44,121,0)
(102,195,0)
(57,38,0)
(28,88,0)
(131,119,0)
(9,4,0)
(125,93,0)
(48,89,0)
(172,97,0)
(96,80,0)
(167,70,0)
(78,121,0)
(171,112,0)
(120,176,0)
(64,170,0)
(192,157,0)
(115,68,0)
(41,131,0)
(157,45,0)
(74,129,0)
(33,24,0)
(1,68,0)
(90,18,0)
(148,142,0)
(11,25,0)
(38,112,0)
(70,62,0)
(81,62,0)
(188,80,0)
(159,195,0)
(154,24,0)
(20,45,0)
(163,55,0)
(88,43,0)
(189,27,0)
(161,129,0)
(148,92,0)
(15,27,0)
(157,176,0)
(198,105,1)
(46,144,1)
(103,99,1)
(142,148,1)
(81,127,1)
(14,121,1)
(129,123,1)
(136,52,1)
(92,45,1)
(150,31,1)
(114,25,1)
(39,122,1)
(64,77,1)
(172,97,1)
(18,90,1)
(160,43,1)
(96,124,1)
(88,28,1)
(37,39,1)
(120,176,1)
(87,164,1)
(90,133,1)
(32,98,1)
(25,37,1)
(38,112,1)
(131,178,1)
(6,45,1)
(25,11,1)
(97,45,1)
(82,186,1)
(130,176,1)
(170,103,1)
(21,13,1)
(134,92,1)
(70,177,1)
(4,9,1)
(84,161,1)
(157,107,1)
(6,65,1)
(169,193,1)
(179,46,1)
(148,92,1)
(152,20,1)
(81,45,1)
(170,44,1)
(20,45,1)
(86,131,1)
(42,173,1)
(112,45,1)
(142,179,1)
(135,45,1)
(35,150,1)
(48,10,1)
(108,18,1)
(28,43,1)
(119,86,1)
(166,82,1)
(158,47,1)
(65,53,1)
(157,45,1)
(26,118,1)
(183,175,1)
(110,173,1)
(101,45,1)
(42,110,1)
(44,121,1)
(12,72,1)
(56,95,1)
(52,38,1)
(133,45,1)
(173,93,1)
(135,73,1)
(178,41,1)
(123,84,1)
(18,68,1)
(42,180,1)
(113,159,1)
(170,38,1)
(172,69,1)
(140,157,1)
(59,13,1)
(100,121,1)
(192,132,1)
(80,96,1)
(106,149,1)
(79,165,1)
(7,87,1)
(195,45,1)
(122,6,1)
(43,102,1)
(102,145,1)
(10,106,1)
(177,62,1)
(190,12,1)
(142,80,1)
(191,119,1)
(117,66,1)
(147,190,1)
(45,29,1)
(87,185,1)
(128,162,1)
(198,185,1)
(73,137,1)
(141,125,1)
(186,168,1)
(161,74,1)
(18,45,1)
(67,151,1)
(143,89,1)
(80,124,1)
(23,172,1)
(69,97,1)
(97,83,1)
(17,45,1)
(99,172,1)
(132,5,1)
(146,98,1)
(129,164,1)
(9,26,1)
(186,35,1)
(173,36,1)
(174,85,1)
(193,0,1)
(4,182,1)
(153,6,1)
(85,119,1)
(109,143,1)
(68,129,1)
(138,122,1)
(5,187,1)
(125,111,1)
(36,93,1)
(56,163,1)
(170,25,1)
(179,144,1)
(126,81,1)
(144,116,1)
(35,31,1)
(88,43,1)
(40,196,1)
(129,183,1)
(83,114,1)
(78,21,1)
(180,173,1)
(196,166,1)
(116,101,1)
(133,17,1)
(148,134,1)
(122,153,1)
(93,141,1)
(17,56,1)
(151,167,1)
(168,35,1)
(125,45,1)
(184,139,1)
(0,45,1)
(7,155,1)
(162,108,1)
(80,188,1)
(176,157,1)
(94,169,1)
(142,42,1)
(182,26,1)
(155,87,1)
(99,23,1)
(62,81,1)
(92,117,1)
(181,20,1)
(75,7,1)
(2,115,1)
(124,181,1)
(149,71,1)
(156,166,1)
(118,79,1)
(53,88,1)
(170,64,1)
(4,26,1)
(34,99,1)
(93,125,1)
(98,45,1)
(159,44,1)
(175,123,1)
(21,59,1)
(107,192,1)
(20,67,1)
(197,99,1)
(1,8,1)
(38,57,1)
(144,101,1)
(13,136,1)
(76,181,1)
(71,120,1)
(166,186,1)
(181,152,1)
(43,194,1)
(112,60,1)
(145,195,1)
(120,130,1)
(62,126,1)
(195,113,1)
(75,198,1)
(167,51,1)
(31,45,1)
(31,158,1)
(101,128,1)
(0,40,1)
(26,79,1)
(121,21,1)
(89,48,1)
(171,64,1)
(119,131,1)
(115,184,1)
(16,18,1)
(102,195,1)
(137,42,1)
(72,187,1)
(51,70,1)
(187,94,1)
(56,174,1)
(103,197,1)
(188,124,1)
(77,32,1)
(25,39,1)
(88,160,1)
(121,78,1)
(39,138,1)
(41,170,1)
(57,112,1)
(11,39,1)
(163,7,1)
(111,61,1)
(103,34,1)
(79,135,1)
(167,70,1)
(124,76,1)
(8,16,1)
(64,32,1)
(47,142,1)
(29,2,1)
(139,68,1)
(70,62,1)
(165,135,1)
(3,148,1)
(85,191,1)
(44,14,1)
(115,68,1)
(167,91,1)
(127,3,1)
(13,45,1)
(170,88,1)
(61,80,1)
(142,4,1)
(66,179,1)
(44,100,1)
(176,140,1)
(95,106,1)
(194,102,1)
(106,71,1)
(187,169,1)
(142,167,1)
(32,146,1)
(105,156,1)
(166,185,1)
(98,147,1)
(169,0,1)
(60,171,1)
(91,70,1)
(30,75,1)
(74,1,1)
(131,45,1)
(87,30,1)
(173,187,2)
(70,166,2)
(177,106,2)
(193,106,2)
(193,187,2)
(87,164,2)
(13,187,2)
(142,166,2)
(70,106,2)
(93,125,2)
(3,166,2)
(132,106,2)
(107,106,2)
(98,45,2)
(116,166,2)
(82,166,2)
(7,166,2)
(129,18,2)
(92,45,2)
(157,106,2)
(92,166,2)
(77,187,2)
(126,187,2)
(180,173,2)
(150,166,2)
(162,187,2)
(155,166,2)
(114,187,2)
(111,187,2)
(80,124,2)
(17,166,2)
(68,18,2)
(38,187,2)
(137,166,2)
(105,166,2)
(42,173,2)
(83,187,2)
(67,166,2)
(171,187,2)
(135,166,2)
(20,187,2)
(106,106,2)
(170,187,2)
(157,45,2)
(152,166,2)
(128,166,2)
(81,45,2)
(116,106,2)
(31,166,2)
(26,187,2)
(168,187,2)
(120,106,2)
(133,18,2)
(156,166,2)
(102,187,2)
(198,166,2)
(20,166,2)
(98,187,2)
(0,45,2)
(93,187,2)
(131,187,2)
(196,187,2)
(195,187,2)
(103,99,2)
(173,166,2)
(102,195,2)
(120,176,2)
(166,106,2)
(90,187,2)
(81,166,2)
(3,106,2)
(80,166,2)
(186,106,2)
(82,106,2)
(117,187,2)
(135,106,2)
(65,187,2)
(165,106,2)
(43,187,2)
(163,166,2)
(148,166,2)
(142,187,2)
(97,187,2)
(147,187,2)
(133,166,2)
(169,106,2)
(42,106,2)
(32,98,2)
(133,106,2)
(39,122,2)
(148,106,2)
(188,124,2)
(78,187,2)
(149,106,2)
(152,106,2)
(16,18,2)
(70,187,2)
(92,106,2)
(56,187,2)
(192,106,2)
(123,18,2)
(46,106,2)
(165,187,2)
(167,106,2)
(125,106,2)
(8,18,2)
(142,4,2)
(113,187,2)
(179,187,2)
(198,185,2)
(169,187,2)
(101,106,2)
(148,187,2)
(130,106,2)
(25,39,2)
(119,131,2)
(109,143,2)
(94,106,2)
(47,106,2)
(117,166,2)
(4,187,2)
(31,106,2)
(168,106,2)
(170,44,2)
(124,181,2)
(121,187,2)
(26,106,2)
(170,25,2)
(134,187,2)
(18,166,2)
(13,45,2)
(36,187,2)
(73,187,2)
(110,173,2)
(35,187,2)
(142,80,2)
(170,88,2)
(142,106,2)
(129,123,2)
(150,187,2)
(4,166,2)
(166,186,2)
(40,187,2)
(195,45,2)
(71,120,2)
(0,187,2)
(170,103,2)
(79,135,2)
(18,187,2)
(118,166,2)
(96,124,2)
(72,187,2)
(148,92,2)
(90,106,2)
(29,18,2)
(38,112,2)
(101,166,2)
(21,187,2)
(101,187,2)
(128,106,2)
(2,18,2)
(88,43,2)
(169,0,2)
(62,166,2)
(144,106,2)
(111,106,2)
(172,187,2)
(141,166,2)
(190,187,2)
(30,7,2)
(145,187,2)
(40,106,2)
(73,166,2)
(100,121,2)
(135,187,2)
(151,187,2)
(172,97,2)
(79,106,2)
(151,106,2)
(166,185,2)
(84,18,2)
(122,187,2)
(144,101,2)
(85,119,2)
(135,45,2)
(36,106,2)
(44,121,2)
(136,187,2)
(68,129,2)
(118,106,2)
(87,166,2)
(75,7,2)
(18,18,2)
(61,187,2)
(59,187,2)
(28,43,2)
(26,79,2)
(146,187,2)
(62,81,2)
(69,187,2)
(6,187,2)
(179,144,2)
(173,93,2)
(73,106,2)
(74,18,2)
(9,26,2)
(18,106,2)
(124,166,2)
(137,187,2)
(81,106,2)
(91,70,2)
(170,64,2)
(71,106,2)
(117,106,2)
(53,187,2)
(177,187,2)
(152,187,2)
(14,121,2)
(76,166,2)
(168,166,2)
(0,106,2)
(90,166,2)
(46,166,2)
(80,106,2)
(70,62,2)
(99,172,2)
(137,106,2)
(47,166,2)
(44,187,2)
(75,166,2)
(197,99,2)
(181,187,2)
(166,187,2)
(39,187,2)
(187,106,2)
(11,39,2)
(36,166,2)
(67,106,2)
(64,187,2)
(179,106,2)
(79,187,2)
(108,166,2)
(119,187,2)
(178,187,2)
(93,106,2)
(122,6,2)
(1,18,2)
(62,106,2)
(66,166,2)
(97,45,2)
(166,166,2)
(45,18,2)
(79,166,2)
(174,187,2)
(125,187,2)
(46,187,2)
(17,106,2)
(128,187,2)
(90,18,2)
(162,106,2)
(191,187,2)
(138,187,2)
(142,148,2)
(6,45,2)
(194,187,2)
(179,166,2)
(153,187,2)
(20,106,2)
(3,187,2)
(42,187,2)
(139,18,2)
(158,106,2)
(158,166,2)
(99,187,2)
(60,187,2)
(181,166,2)
(111,166,2)
(18,45,2)
(115,18,2)
(127,187,2)
(47,187,2)
(118,187,2)
(125,166,2)
(23,187,2)
(32,187,2)
(141,106,2)
(66,106,2)
(4,106,2)
(124,106,2)
(103,187,2)
(142,167,2)
(56,166,2)
(76,187,2)
(87,7,2)
(101,45,2)
(85,187,2)
(82,187,2)
(129,183,2)
(125,45,2)
(158,187,2)
(37,39,2)
(95,106,2)
(182,26,2)
(167,70,2)
(144,166,2)
(18,68,2)
(177,166,2)
(176,157,2)
(92,187,2)
(134,106,2)
(160,43,2)
(162,166,2)
(87,185,2)
(150,106,2)
(170,38,2)
(51,70,2)
(129,164,2)
(61,166,2)
(174,85,2)
(165,166,2)
(115,68,2)
(80,187,2)
(176,106,2)
(25,187,2)
(173,106,2)
(183,18,2)
(186,166,2)
(66,187,2)
(196,106,2)
(127,106,2)
(142,42,2)
(141,187,2)
(31,187,2)
(127,166,2)
(26,166,2)
(124,187,2)
(43,102,2)
(167,187,2)
(144,187,2)
(131,45,2)
(187,169,2)
(88,187,2)
(52,187,2)
(20,45,2)
(126,166,2)
(21,13,2)
(31,45,2)
(81,187,2)
(142,179,2)
(12,187,2)
(121,21,2)
(108,106,2)
(17,187,2)
(155,7,2)
(106,71,2)
(94,187,2)
(67,187,2)
(76,106,2)
(151,166,2)
(41,187,2)
(186,35,2)
(175,18,2)
(186,187,2)
(7,87,2)
(159,187,2)
(35,106,2)
(34,99,2)
(140,106,2)
(126,106,2)
(4,26,2)
(161,18,2)
(61,106,2)
(184,18,2)
(30,166,2)
(17,45,2)
(56,106,2)
(86,187,2)
(62,187,2)
(112,187,2)
(116,187,2)
(7,7,2)
(181,106,2)
(5,106,2)
(112,45,2)
(42,166,2)
(133,187,2)
(108,187,2)
(57,187,2)
(134,166,2)
(35,166,2)
(93,166,2)
(35,31,2)
(181,20,2)
(187,187,2)
(64,32,2)
(167,166,2)
-----------------------------------
(0,events[i])
(1,n)
(2,i)
(3,events)
(4,events[i].events & EPOLLIN    ? " EPOLLIN"    : "")
(5,"processing readable filehandle")
(6,events[i])
(7,net_accept(sockfd, epfd)
(8,vdebug("going into epoll_wait loop")
(9,"")
(10,LOG_PROC)
(11," EPOLLRDHUP")
(12,"unhandled activity on %d: %04x =%s%s%s%s")
(13,events[i])
(14," EPOLLERR")
(15,events)
(16,"going into epoll_wait loop")
(17,i++)
(18,i < n)
(19,)
(20,events[i])
(21,events[i].events)
(22,for (i = 0; i < n; i++)
(23,EPOLLIN)
(24,)
(25,events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : "")
(26,events[i].events & EPOLLIN)
(27,)
(28,"")
(29,0)
(30,epfd)
(31,events[i])
(32,events[i].data)
(33,if (events[i].events & EPOLLIN)
(34," EPOLLIN")
(35,events[i].data)
(36,EPOLLRDHUP)
(37,"")
(38,events[i].events)
(39,events[i].events & EPOLLRDHUP)
(40,i)
(41,events)
(42,events[i].events & EPOLLRDHUP ? " EPOLLRDHUP" : "")
(43,events[i].events & EPOLLHUP)
(44,events[i].events & EPOLLERR   ? " EPOLLERR"   : "")
(45,i = 0)
(46,fd)
(47,events)
(48,"event loop terminating (recv_data signalled an error)
(49,)
(50,if (iris_call_recv_data(events[i].data.fd)
(51,"")
(52,events)
(53,events)
(54,i)
(55,)
(56,i)
(57,events)
(58,while (net_accept(sockfd, epfd)
(59,events)
(60,i)
(61,events)
(62,events[i].events)
(63,)
(64,events[i].data.fd)
(65,i)
(66,events)
(67,i)
(68,n = epoll_wait(epfd, events, sizeof(events)
(69,events)
(70,events[i].events & EPOLLERR)
(71,iris_call_recv_data(events[i].data.fd)
(72,LOG_INFO)
(73,i)
(74,epfd)
(75,sockfd)
(76,EPOLLHUP)
(77,fd)
(78,EPOLLERR)
(79,events[i].events)
(80,events[i].events & EPOLLHUP   ? " EPOLLHUP"   : "")
(81,events[i])
(82,sockfd)
(83,i)
(84,events)
(85,events[i].data.fd)
(86,data)
(87,net_accept(sockfd, epfd)
(88,events[i].events & EPOLLHUP   ? " EPOLLHUP"   : "")
(89,syslog(LOG_PROC, "event loop terminating (recv_data signalled an error)
(90,n)
(91," EPOLLERR")
(92,events[i])
(93,events[i].events)
(94,EPOLLIN)
(95,continue;)
(96,"")
(97,events[i])
(98,events[i])
(99,events[i].events & EPOLLIN)
(100,"")
(101,events[i])
(102,events[i].events)
(103,events[i].events & EPOLLIN    ? " EPOLLIN"    : "")
(104,n)
(105,sockfd)
(106,iris_call_recv_data(events[i].data.fd)
(107,i)
(108,"activity on %d: %04x =%s%s%s%s")
(109,RET)
(110,"")
(111,i)
(112,events[i])
(113,i)
(114,events)
(115,vdebug("epoll gave us %d fds to work with", n)
(116,data)
(117,i)
(118,EPOLLIN)
(119,events[i].data)
(120,events[i].data.fd)
(121,events[i].events & EPOLLERR)
(122,events[i].events)
(123,sizeof(events)
(124,events[i].events & EPOLLHUP)
(125,events[i])
(126,events)
(127,i)
(128,i)
(129,epoll_wait(epfd, events, sizeof(events)
(130,fd)
(131,events[i])
(132,vdebug("processing readable filehandle")
(133,i)
(134,events)
(135,events[i])
(136,i)
(137,events)
(138,EPOLLRDHUP)
(139,"epoll gave us %d fds to work with")
(140,data)
(141,events)
(142,vdebug("activity on %d: %04x =%s%s%s%s",\n\\n\\t\\t\\t\\t\\tevents[i].data.fd, events[i].events,\n\\n\\t\\t\\t\\t\\t(events[i].events & EPOLLERR   ? " EPOLLERR"   : "")
(143,return;)
(144,events[i].data)
(145,events)
(146,data)
(147,i)
(148,events[i].events)
(149,0)
(150,data)
(151,events)
(152,events)
(153,events)
(154,if (events[i].data.fd == sockfd)
(155,0)
(156,"processing inbound connections")
(157,events[i])
(158,i)
(159,events)
(160," EPOLLHUP")
(161,events)
(162,events)
(163,continue;)
(164,int epfd)
(165,events)
(166,events[i].data.fd == sockfd)
(167,events[i].events & EPOLLERR   ? " EPOLLERR"   : "")
(168,fd)
(169,events[i].events)
(170,syslog(LOG_INFO, "unhandled activity on %d: %04x =%s%s%s%s",\n\\n\\t\\t\\t\\t\\tevents[i].data.fd, events[i].events,\n\\n\\t\\t\\t\\t\\t(events[i].events & EPOLLERR   ? " EPOLLERR"   : "")
(171,events)
(172,events[i].events)
(173,events[i].events & EPOLLRDHUP)
(174,client_close(events[i].data.fd)
(175,1)
(176,events[i].data)
(177,EPOLLERR)
(178,i)
(179,events[i].data.fd)
(180," EPOLLRDHUP")
(181,events[i].events)
(182," EPOLLIN")
(183,-1)
(184,n)
(185,int sockfd)
(186,events[i].data.fd)
(187,events[i].events & EPOLLIN)
(188," EPOLLHUP")
(189,for (;;)
(190,events)
(191,fd)
(192,events)
(193,events)
(194,EPOLLHUP)
(195,events[i])
(196,events)
(197,"")
(198,vdebug("processing inbound connections", sockfd)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^