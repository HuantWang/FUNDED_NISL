-----label-----
1
-----code-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad()
{
    size_t data;
    /* Initialize data */
    data = 0;
    if(1)
    {
        /* POTENTIAL FLAW: Set data to a random value */
        data = rand();
    }
    if(1)
    {
        {
            char * myString;
            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough
             * for the strcpy() function to not cause a buffer overflow */
            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */
            if (data > strlen(HELLO_STRING))
            {
                myString = (char *)malloc(data*sizeof(char));
                if (myString == NULL) {exit(-1);}
                /* Copy a small string into myString */
                strcpy(myString, HELLO_STRING);
                printLine(myString);
                free(myString);
            }
            else
            {
                printLine("Input is less than the length of the source string");
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
12,13
13,14
13,15
14,15
17,18
17,19
19,20
20,21
21,22
21,23
22,23
24,25
25,26
27,28
27,29
29,30
30,31
30,32
31,32
32,33
32,34
34,35
34,36
37,38
37,39
37,40
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
46,49
46,50
46,51
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
54,55
56,57
56,58
57,58
59,60
59,61
60,61
62,63
63,64
63,65
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
79,80
80,81
80,82
80,83
81,82
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,9,11,15,16,18,23,26,28,33,35,36,40,43,45,50,53,55,58,61,64,65,69,71,76,78,82,84,86,90,92,96,98,103,104
-----computeFrom-----
13,14
13,15
21,22
21,23
38,39
38,40
48,49
48,50
59,60
59,61
67,68
67,69
-----guardedBy-----
45,86
40,61
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad(){    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
void
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad()
CWE789_Uncontrolled_Mem_Alloc__malloc_char_rand_02_bad
{    size_t data;    /* Initialize data */    data = 0;    if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }    if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }}
size_t data;
size_t data;
size_t
size_t
data
data
data = 0;
data = 0
data
data
0
if(1)    {        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
1
{        /* POTENTIAL FLAW: Set data to a random value */        data = rand();    }
data = rand();
data = rand()
data
data
rand()
rand
rand
if(1)    {        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
1
{        {            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }    }
{            char * myString;            /* POTENTIAL FLAW: No MAXIMUM limitation for memory allocation, but ensure data is large enough             * for the strcpy() function to not cause a buffer overflow */            /* INCIDENTAL FLAW: The source could cause a type overrun in data or in the memory allocation */            if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }        }
char * myString;
char * myString;
char
* myString
*
myString
if (data > strlen(HELLO_STRING))            {                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }            else            {                printLine("Input is less than the length of the source string");            }
data > strlen(HELLO_STRING)
data
data
strlen(HELLO_STRING)
strlen
strlen
HELLO_STRING
HELLO_STRING
{                myString = (char *)malloc(data*sizeof(char));                if (myString == NULL) {exit(-1);}                /* Copy a small string into myString */                strcpy(myString, HELLO_STRING);                printLine(myString);                free(myString);            }
myString = (char *)malloc(data*sizeof(char));
myString = (char *)malloc(data*sizeof(char))
myString
myString
(char *)malloc(data*sizeof(char))
char *
char
*
*
malloc(data*sizeof(char))
malloc
malloc
data*sizeof(char)
data
data
sizeof(char)
char
char

if (myString == NULL) {exit(-1);}
myString == NULL
myString
myString
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
strcpy(myString, HELLO_STRING);
strcpy(myString, HELLO_STRING)
strcpy
strcpy
myString
myString
HELLO_STRING
HELLO_STRING
printLine(myString);
printLine(myString)
printLine
printLine
myString
myString
free(myString);
free(myString)
free
free
myString
myString
{                printLine("Input is less than the length of the source string");            }
printLine("Input is less than the length of the source string");
printLine("Input is less than the length of the source string")
printLine
printLine
"Input is less than the length of the source string"
-----joern-----
(30,9,0)
(3,25,0)
(25,3,0)
(12,25,0)
(43,15,0)
(33,40,0)
(21,48,0)
(42,33,0)
(16,28,0)
(43,28,0)
(1,39,0)
(15,3,0)
(35,33,0)
(20,19,0)
(8,47,0)
(17,6,0)
(2,25,0)
(2,9,0)
(14,26,0)
(43,48,0)
(18,43,0)
(6,31,0)
(15,43,0)
(33,42,0)
(48,47,0)
(3,27,0)
(28,43,0)
(37,9,0)
(36,20,0)
(5,30,0)
(10,31,0)
(31,33,0)
(31,6,0)
(7,46,0)
(29,26,0)
(22,37,0)
(0,46,0)
(13,47,0)
(46,23,0)
(24,39,0)
(49,9,0)
(11,2,0)
(3,15,0)
(39,24,0)
(32,30,0)
(24,34,0)
(37,25,0)
(38,47,0)
(30,25,0)
(31,48,0)
(43,33,0)
(25,9,0)
(4,48,0)
(27,3,0)
(26,25,0)
(41,33,1)
(22,2,1)
(25,3,1)
(16,18,1)
(32,24,1)
(32,26,1)
(36,31,1)
(1,26,1)
(5,32,1)
(17,10,1)
(45,37,1)
(43,48,1)
(30,5,1)
(2,11,1)
(48,21,1)
(33,42,1)
(3,27,1)
(6,17,1)
(26,29,1)
(31,48,1)
(15,43,1)
(44,48,1)
(42,35,1)
(30,25,1)
(11,30,1)
(18,12,1)
(21,4,1)
(28,16,1)
(26,25,1)
(31,6,1)
(20,36,1)
(39,1,1)
(2,25,1)
(43,33,1)
(3,15,1)
(29,14,1)
(12,31,1)
(41,44,1)
(35,44,1)
(37,22,1)
(45,20,1)
(43,28,1)
(31,33,1)
(14,25,1)
(45,41,1)
(37,25,1)
(24,39,1)
(10,41,1)
(42,44,2)
(43,48,2)
(36,31,2)
(15,31,2)
(33,44,2)
(32,31,2)
(3,31,2)
(22,31,2)
(37,25,2)
(1,26,2)
(16,31,2)
(29,31,2)
(37,31,2)
(14,31,2)
(31,48,2)
(5,31,2)
(12,31,2)
(35,44,2)
(3,15,2)
(10,41,2)
(43,31,2)
(30,25,2)
(39,26,2)
(33,42,2)
(17,41,2)
(2,25,2)
(2,31,2)
(26,31,2)
(31,6,2)
(30,31,2)
(43,33,2)
(25,31,2)
(31,33,2)
(28,31,2)
(6,41,2)
(3,27,2)
(20,31,2)
(43,28,2)
(24,39,2)
(11,31,2)
(24,26,2)
(26,25,2)
(25,3,2)
(18,31,2)
(31,41,2)
(15,43,2)
-----------------------------------
(0,if (data > strlen(HELLO_STRING)
(1,1)
(2,printLine(myString)
(3,(char *)
(4,data)
(5,HELLO_STRING)
(6,strlen(HELLO_STRING)
(7,myString)
(8,data)
(9,)
(10,data)
(11,myString)
(12,myString)
(13,if(1)
(14,myString)
(15,malloc(data*sizeof(char)
(16,char)
(17,HELLO_STRING)
(18,data)
(19,)
(20,printLine("Input is less than the length of the source string")
(21,0)
(22,myString)
(23,)
(24,exit(-1)
(25,myString = (char *)
(26,myString == NULL)
(27,char *)
(28,sizeof(char)
(29,NULL)
(30,strcpy(myString, HELLO_STRING)
(31,data > strlen(HELLO_STRING)
(32,myString)
(33,data = rand()
(34,)
(35,data)
(36,"Input is less than the length of the source string")
(37,free(myString)
(38,if(1)
(39,-1)
(40,)
(41,1)
(42,rand()
(43,data*sizeof(char)
(44,1)
(45,RET)
(46,)
(47,)
(48,data = 0)
(49,if (myString == NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^