-----label-----
1
-----code-----
int
main (int argc, char **argv)
{
  const char *file_name;
  const char *section_name;
  char *target;
  int c;

#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)
  setlocale (LC_MESSAGES, "");
#endif
#if defined (HAVE_SETLOCALE)
  setlocale (LC_CTYPE, "");
#endif
  bindtextdomain (PACKAGE, LOCALEDIR);
  textdomain (PACKAGE);

  program_name = *argv;
  xmalloc_set_program_name (program_name);
  bfd_set_error_program_name (program_name);

  expandargv (&argc, &argv);

  if (bfd_init () != BFD_INIT_MAGIC)
    fatal (_("fatal error: libbfd ABI mismatch"));
  set_default_bfd_target ();

  file_name = NULL;
  section_name = NULL;
  target = NULL;
  while ((c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *) 0))
	 != EOF)
    {
      switch (c)
	{
	case 0:
	  break;		/* We've been given a long option.  */
	case 'a':
	  with_addresses = TRUE;
	  break;
	case 'b':
	  target = optarg;
	  break;
	case 'C':
	  do_demangle = TRUE;
	  if (optarg != NULL)
	    {
	      enum demangling_styles style;

	      style = cplus_demangle_name_to_style (optarg);
	      if (style == unknown_demangling)
		fatal (_("unknown demangling style `%s'"),
		       optarg);

	      cplus_demangle_set_style (style);
	    }
	  break;
	case 'r':
	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;
	  break;
	case 'R':
	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;
	  break;
	case 'e':
	  file_name = optarg;
	  break;
	case 's':
	  base_names = TRUE;
	  break;
	case 'f':
	  with_functions = TRUE;
	  break;
        case 'p':
          pretty_print = TRUE;
          break;
	case 'v':
	case 'V':
	  print_version ("addr2line");
	  break;
	case 'h':
	case 'H':
	  usage (stdout, 0);
	  break;
	case 'i':
	  unwind_inlines = TRUE;
	  break;
	case 'j':
	  section_name = optarg;
	  break;
	default:
	  usage (stderr, 1);
	  break;
	}
    }

  if (file_name == NULL)
    file_name = "a.out";

  addr = argv + optind;
  naddr = argc - optind;

  return process_file (file_name, section_name, target);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
11,13
11,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
16,17
17,18
17,19
19,20
19,21
22,23
23,24
23,25
25,26
25,27
28,29
29,30
29,31
31,32
31,33
34,35
35,36
35,37
37,38
39,40
40,41
40,42
40,43
41,42
43,44
45,46
47,48
48,49
48,50
49,50
51,52
52,53
54,55
55,56
55,57
56,57
58,59
59,60
61,62
62,63
62,64
63,64
65,66
66,67
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
75,78
76,77
78,79
79,80
81,82
82,83
84,85
84,86
85,86
85,87
86,87
87,88
89,90
91,92
92,93
92,94
93,94
95,96
95,97
96,97
99,100
100,101
101,102
103,104
104,105
104,106
105,106
107,108
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
121,122
121,123
122,123
122,124
123,124
124,125
124,126
125,126
127,128
127,129
127,130
127,131
127,132
127,133
128,129
130,131
132,133
135,136
137,138
137,139
138,139
138,140
140,141
143,144
145,146
146,147
146,148
147,148
149,150
149,151
149,152
149,153
149,154
149,155
149,156
149,157
149,158
149,159
149,160
149,161
149,162
149,163
149,164
149,165
149,166
149,167
149,168
149,169
149,170
149,171
149,172
149,173
149,174
149,175
149,176
149,177
149,178
149,179
149,180
149,181
149,182
149,183
149,184
149,185
149,186
149,187
149,188
149,189
149,190
149,191
149,192
149,193
149,194
149,195
149,196
150,151
153,154
155,156
156,157
156,158
157,158
159,160
162,163
164,165
165,166
165,167
166,167
168,169
171,172
173,174
174,175
174,176
175,176
177,178
179,180
179,181
180,181
180,182
181,182
183,184
185,186
185,187
185,188
185,189
186,187
187,188
187,189
188,189
190,191
192,193
193,194
193,195
194,195
196,197
196,198
197,198
199,200
201,202
201,203
202,203
202,204
203,204
205,206
207,208
208,209
208,210
208,211
209,210
211,212
211,213
212,213
215,216
217,218
218,219
218,220
219,220
221,222
224,225
226,227
227,228
227,229
228,229
230,231
233,234
235,236
236,237
236,238
237,238
239,240
240,241
243,244
245,246
246,247
246,248
247,248
249,250
252,253
254,255
255,256
255,257
256,257
258,259
261,262
263,264
264,265
264,266
265,266
267,268
270,271
272,273
273,274
273,275
274,275
276,277
279,280
281,282
283,284
284,285
284,286
285,286
289,290
291,292
293,294
294,295
294,296
294,297
295,296
297,298
301,302
303,304
304,305
304,306
305,306
307,308
310,311
312,313
313,314
313,315
314,315
316,317
320,321
321,322
321,323
321,324
322,323
324,325
328,329
328,330
329,330
329,331
330,331
332,333
334,335
335,336
335,337
336,337
339,340
340,341
340,342
341,342
343,344
343,345
344,345
346,347
348,349
349,350
349,351
350,351
352,353
352,354
353,354
355,356
357,358
358,359
358,360
358,361
358,362
359,360
361,362
363,364
365,366
-----nextToken-----
2,4,6,8,10,12,13,14,18,20,21,24,26,27,30,32,33,36,38,42,44,46,50,53,57,60,64,67,71,73,77,80,83,88,90,94,97,98,102,106,108,112,114,118,120,126,129,131,133,134,136,139,141,142,144,148,151,152,154,158,160,161,163,167,169,170,172,176,178,182,184,189,191,195,198,200,204,206,210,213,214,216,220,222,223,225,229,231,232,234,238,241,242,244,248,250,251,253,257,259,260,262,266,268,269,271,275,277,278,280,282,286,287,288,290,292,296,298,299,300,302,306,308,309,311,315,317,318,319,323,325,326,327,331,333,337,338,342,345,347,351,354,356,360,362,364,366
-----computeFrom-----
55,56
55,57
85,86
85,87
104,105
104,106
110,111
110,112
116,117
116,118
122,123
122,124
124,125
124,126
156,157
156,158
165,166
165,167
174,175
174,176
180,181
180,182
193,194
193,195
202,203
202,204
227,228
227,229
236,237
236,238
246,247
246,248
255,256
255,257
264,265
264,266
273,274
273,275
304,305
304,306
313,314
313,315
329,330
329,331
335,336
335,337
340,341
340,342
343,344
343,345
349,350
349,351
352,353
352,354
-----guardedBy-----
182,216
331,337
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;LiteralExpression;IdExpression;Name;CompoundStatement;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
intmain (int argc, char **argv){  const char *file_name;  const char *section_name;  char *target;  int c;#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)  setlocale (LC_MESSAGES, "");#endif#if defined (HAVE_SETLOCALE)  setlocale (LC_CTYPE, "");#endif  bindtextdomain (PACKAGE, LOCALEDIR);  textdomain (PACKAGE);  program_name = *argv;  xmalloc_set_program_name (program_name);  bfd_set_error_program_name (program_name);  expandargv (&argc, &argv);  if (bfd_init () != BFD_INIT_MAGIC)    fatal (_("fatal error: libbfd ABI mismatch"));  set_default_bfd_target ();  file_name = NULL;  section_name = NULL;  target = NULL;  while ((c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *) 0))	 != EOF)    {      switch (c)	{	case 0:	  break;		/* We've been given a long option.  */	case 'a':	  with_addresses = TRUE;	  break;	case 'b':	  target = optarg;	  break;	case 'C':	  do_demangle = TRUE;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case 'r':	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'R':	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case 'e':	  file_name = optarg;	  break;	case 's':	  base_names = TRUE;	  break;	case 'f':	  with_functions = TRUE;	  break;        case 'p':          pretty_print = TRUE;          break;	case 'v':	case 'V':	  print_version ("addr2line");	  break;	case 'h':	case 'H':	  usage (stdout, 0);	  break;	case 'i':	  unwind_inlines = TRUE;	  break;	case 'j':	  section_name = optarg;	  break;	default:	  usage (stderr, 1);	  break;	}    }  if (file_name == NULL)    file_name = "a.out";  addr = argv + optind;  naddr = argc - optind;  return process_file (file_name, section_name, target);}
int
main (int argc, char **argv)
main
int argc
int
argc
argc
char **argv
char
**argv
*
*
argv
{  const char *file_name;  const char *section_name;  char *target;  int c;#if defined (HAVE_SETLOCALE) && defined (HAVE_LC_MESSAGES)  setlocale (LC_MESSAGES, "");#endif#if defined (HAVE_SETLOCALE)  setlocale (LC_CTYPE, "");#endif  bindtextdomain (PACKAGE, LOCALEDIR);  textdomain (PACKAGE);  program_name = *argv;  xmalloc_set_program_name (program_name);  bfd_set_error_program_name (program_name);  expandargv (&argc, &argv);  if (bfd_init () != BFD_INIT_MAGIC)    fatal (_("fatal error: libbfd ABI mismatch"));  set_default_bfd_target ();  file_name = NULL;  section_name = NULL;  target = NULL;  while ((c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *) 0))	 != EOF)    {      switch (c)	{	case 0:	  break;		/* We've been given a long option.  */	case 'a':	  with_addresses = TRUE;	  break;	case 'b':	  target = optarg;	  break;	case 'C':	  do_demangle = TRUE;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case 'r':	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'R':	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case 'e':	  file_name = optarg;	  break;	case 's':	  base_names = TRUE;	  break;	case 'f':	  with_functions = TRUE;	  break;        case 'p':          pretty_print = TRUE;          break;	case 'v':	case 'V':	  print_version ("addr2line");	  break;	case 'h':	case 'H':	  usage (stdout, 0);	  break;	case 'i':	  unwind_inlines = TRUE;	  break;	case 'j':	  section_name = optarg;	  break;	default:	  usage (stderr, 1);	  break;	}    }  if (file_name == NULL)    file_name = "a.out";  addr = argv + optind;  naddr = argc - optind;  return process_file (file_name, section_name, target);}
const char *file_name;
const char *file_name;
const char
*file_name
*
file_name
const char *section_name;
const char *section_name;
const char
*section_name
*
section_name
char *target;
char *target;
char
*target
*
target
int c;
int c;
int
c
c
bindtextdomain (PACKAGE, LOCALEDIR);
bindtextdomain (PACKAGE, LOCALEDIR)
bindtextdomain
bindtextdomain
PACKAGE
PACKAGE
LOCALEDIR
LOCALEDIR
textdomain (PACKAGE);
textdomain (PACKAGE);
textdomain
textdomain
(PACKAGE)
PACKAGE
PACKAGE
program_name = *argv;
program_name = *argv
program_name
program_name
*argv
argv
argv
xmalloc_set_program_name (program_name);
xmalloc_set_program_name (program_name);
xmalloc_set_program_name
xmalloc_set_program_name
(program_name)
program_name
program_name
bfd_set_error_program_name (program_name);
bfd_set_error_program_name (program_name)
bfd_set_error_program_name
bfd_set_error_program_name
program_name
program_name
expandargv (&argc, &argv);
expandargv (&argc, &argv)
expandargv
expandargv
&argc
argc
argc
&argv
argv
argv
if (bfd_init () != BFD_INIT_MAGIC)    fatal (_("fatal error: libbfd ABI mismatch"));
bfd_init () != BFD_INIT_MAGIC
bfd_init ()
bfd_init
bfd_init
BFD_INIT_MAGIC
BFD_INIT_MAGIC
fatal (_("fatal error: libbfd ABI mismatch"));
fatal (_("fatal error: libbfd ABI mismatch"))
fatal
fatal
_("fatal error: libbfd ABI mismatch")
_
_
"fatal error: libbfd ABI mismatch"
set_default_bfd_target ();
set_default_bfd_target ()
set_default_bfd_target
set_default_bfd_target
file_name = NULL;
file_name = NULL
file_name
file_name
NULL
NULL
section_name = NULL;
section_name = NULL
section_name
section_name
NULL
NULL
target = NULL;
target = NULL
target
target
NULL
NULL
while ((c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *) 0))	 != EOF)    {      switch (c)	{	case 0:	  break;		/* We've been given a long option.  */	case 'a':	  with_addresses = TRUE;	  break;	case 'b':	  target = optarg;	  break;	case 'C':	  do_demangle = TRUE;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case 'r':	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'R':	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case 'e':	  file_name = optarg;	  break;	case 's':	  base_names = TRUE;	  break;	case 'f':	  with_functions = TRUE;	  break;        case 'p':          pretty_print = TRUE;          break;	case 'v':	case 'V':	  print_version ("addr2line");	  break;	case 'h':	case 'H':	  usage (stdout, 0);	  break;	case 'i':	  unwind_inlines = TRUE;	  break;	case 'j':	  section_name = optarg;	  break;	default:	  usage (stderr, 1);	  break;	}    }
(c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *) 0))	 != EOF
(c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *) 0))
c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *) 0)
c
c
getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *) 0)
getopt_long
getopt_long
argc
argc
argv
argv
"ab:Ce:rRsfHhij:pVv"
long_options
long_options
(int *) 0
int *
int
*
*
0
EOF
EOF
{      switch (c)	{	case 0:	  break;		/* We've been given a long option.  */	case 'a':	  with_addresses = TRUE;	  break;	case 'b':	  target = optarg;	  break;	case 'C':	  do_demangle = TRUE;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case 'r':	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'R':	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case 'e':	  file_name = optarg;	  break;	case 's':	  base_names = TRUE;	  break;	case 'f':	  with_functions = TRUE;	  break;        case 'p':          pretty_print = TRUE;          break;	case 'v':	case 'V':	  print_version ("addr2line");	  break;	case 'h':	case 'H':	  usage (stdout, 0);	  break;	case 'i':	  unwind_inlines = TRUE;	  break;	case 'j':	  section_name = optarg;	  break;	default:	  usage (stderr, 1);	  break;	}    }
switch (c)	{	case 0:	  break;		/* We've been given a long option.  */	case 'a':	  with_addresses = TRUE;	  break;	case 'b':	  target = optarg;	  break;	case 'C':	  do_demangle = TRUE;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case 'r':	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'R':	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case 'e':	  file_name = optarg;	  break;	case 's':	  base_names = TRUE;	  break;	case 'f':	  with_functions = TRUE;	  break;        case 'p':          pretty_print = TRUE;          break;	case 'v':	case 'V':	  print_version ("addr2line");	  break;	case 'h':	case 'H':	  usage (stdout, 0);	  break;	case 'i':	  unwind_inlines = TRUE;	  break;	case 'j':	  section_name = optarg;	  break;	default:	  usage (stderr, 1);	  break;	}
c
c
{	case 0:	  break;		/* We've been given a long option.  */	case 'a':	  with_addresses = TRUE;	  break;	case 'b':	  target = optarg;	  break;	case 'C':	  do_demangle = TRUE;	  if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }	  break;	case 'r':	  demangle_flags |= DMGL_NO_RECURSE_LIMIT;	  break;	case 'R':	  demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;	  break;	case 'e':	  file_name = optarg;	  break;	case 's':	  base_names = TRUE;	  break;	case 'f':	  with_functions = TRUE;	  break;        case 'p':          pretty_print = TRUE;          break;	case 'v':	case 'V':	  print_version ("addr2line");	  break;	case 'h':	case 'H':	  usage (stdout, 0);	  break;	case 'i':	  unwind_inlines = TRUE;	  break;	case 'j':	  section_name = optarg;	  break;	default:	  usage (stderr, 1);	  break;	}
case 0:
0
break;
case 'a':
'a'
with_addresses = TRUE;
with_addresses = TRUE
with_addresses
with_addresses
TRUE
TRUE
break;
case 'b':
'b'
target = optarg;
target = optarg
target
target
optarg
optarg
break;
case 'C':
'C'
do_demangle = TRUE;
do_demangle = TRUE
do_demangle
do_demangle
TRUE
TRUE
if (optarg != NULL)	    {	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }
optarg != NULL
optarg
optarg
NULL
NULL
{	      enum demangling_styles style;	      style = cplus_demangle_name_to_style (optarg);	      if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);	      cplus_demangle_set_style (style);	    }
enum demangling_styles style;
enum demangling_styles style;
enum demangling_styles
demangling_styles
style
style
style = cplus_demangle_name_to_style (optarg);
style = cplus_demangle_name_to_style (optarg)
style
style
cplus_demangle_name_to_style (optarg)
cplus_demangle_name_to_style
cplus_demangle_name_to_style
optarg
optarg
if (style == unknown_demangling)		fatal (_("unknown demangling style `%s'"),		       optarg);
style == unknown_demangling
style
style
unknown_demangling
unknown_demangling
fatal (_("unknown demangling style `%s'"),		       optarg);
fatal (_("unknown demangling style `%s'"),		       optarg)
fatal
fatal
_("unknown demangling style `%s'")
_
_
"unknown demangling style `%s'"
optarg
optarg
cplus_demangle_set_style (style);
cplus_demangle_set_style (style)
cplus_demangle_set_style
cplus_demangle_set_style
style
style
break;
case 'r':
'r'
demangle_flags |= DMGL_NO_RECURSE_LIMIT;
demangle_flags |= DMGL_NO_RECURSE_LIMIT
demangle_flags
demangle_flags
DMGL_NO_RECURSE_LIMIT
DMGL_NO_RECURSE_LIMIT
break;
case 'R':
'R'
demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT;
demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT
demangle_flags
demangle_flags
~ DMGL_NO_RECURSE_LIMIT
DMGL_NO_RECURSE_LIMIT
DMGL_NO_RECURSE_LIMIT
break;
case 'e':
'e'
file_name = optarg;
file_name = optarg
file_name
file_name
optarg
optarg
break;
case 's':
's'
base_names = TRUE;
base_names = TRUE
base_names
base_names
TRUE
TRUE
break;
case 'f':
'f'
with_functions = TRUE;
with_functions = TRUE
with_functions
with_functions
TRUE
TRUE
break;
case 'p':
'p'
pretty_print = TRUE;
pretty_print = TRUE
pretty_print
pretty_print
TRUE
TRUE
break;
case 'v':
'v'
case 'V':
'V'
print_version ("addr2line");
print_version ("addr2line")
print_version
print_version
"addr2line"
break;
case 'h':
'h'
case 'H':
'H'
usage (stdout, 0);
usage (stdout, 0)
usage
usage
stdout
stdout
0
break;
case 'i':
'i'
unwind_inlines = TRUE;
unwind_inlines = TRUE
unwind_inlines
unwind_inlines
TRUE
TRUE
break;
case 'j':
'j'
section_name = optarg;
section_name = optarg
section_name
section_name
optarg
optarg
break;
default:
usage (stderr, 1);
usage (stderr, 1)
usage
usage
stderr
stderr
1
break;
if (file_name == NULL)    file_name = "a.out";
file_name == NULL
file_name
file_name
NULL
NULL
file_name = "a.out";
file_name = "a.out"
file_name
file_name
"a.out"
addr = argv + optind;
addr = argv + optind
addr
addr
argv + optind
argv
argv
optind
optind
naddr = argc - optind;
naddr = argc - optind
naddr
naddr
argc - optind
argc
argc
optind
optind
return process_file (file_name, section_name, target);
process_file (file_name, section_name, target)
process_file
process_file
file_name
file_name
section_name
section_name
target
target
-----joern-----
(132,117,0)
(97,129,0)
(92,40,0)
(122,32,0)
(159,39,0)
(90,114,0)
(38,38,0)
(124,148,0)
(113,40,0)
(24,73,0)
(168,40,0)
(12,124,0)
(103,77,0)
(178,163,0)
(127,38,0)
(152,181,0)
(109,84,0)
(94,89,0)
(120,155,0)
(158,40,0)
(38,21,0)
(66,148,0)
(166,40,0)
(145,146,0)
(49,36,0)
(67,40,0)
(76,176,0)
(48,64,0)
(31,40,0)
(38,67,0)
(106,40,0)
(110,46,0)
(172,39,0)
(13,40,0)
(118,95,0)
(26,40,0)
(104,13,0)
(11,132,0)
(124,168,0)
(25,3,0)
(5,173,0)
(14,163,0)
(132,11,0)
(86,6,0)
(8,84,0)
(62,92,0)
(28,43,0)
(156,117,0)
(124,181,0)
(4,89,0)
(38,11,0)
(19,118,0)
(14,36,0)
(64,48,0)
(18,36,0)
(64,36,0)
(93,156,0)
(124,92,0)
(72,180,0)
(73,40,0)
(9,40,0)
(94,146,0)
(36,64,0)
(2,64,0)
(172,105,0)
(133,89,0)
(110,93,0)
(128,92,0)
(24,38,0)
(6,39,0)
(105,172,0)
(136,13,0)
(154,40,0)
(68,43,0)
(24,7,0)
(107,40,0)
(70,40,0)
(149,16,0)
(112,40,0)
(56,40,0)
(146,94,0)
(147,40,0)
(30,32,0)
(61,138,0)
(125,65,0)
(93,110,0)
(38,166,0)
(95,118,0)
(139,40,0)
(119,0,0)
(32,89,0)
(181,89,0)
(150,24,0)
(165,73,0)
(24,180,0)
(11,89,0)
(24,89,0)
(157,110,0)
(124,24,0)
(82,113,0)
(0,117,0)
(100,75,0)
(167,166,0)
(36,14,0)
(124,3,0)
(20,89,0)
(54,155,0)
(111,40,0)
(51,129,0)
(84,40,0)
(137,181,0)
(180,0,0)
(23,149,0)
(33,89,0)
(88,67,0)
(78,146,0)
(156,93,0)
(29,36,0)
(162,148,0)
(161,89,0)
(85,40,0)
(6,172,0)
(15,40,0)
(99,40,0)
(121,40,0)
(123,21,0)
(114,138,0)
(124,43,0)
(101,89,0)
(53,40,0)
(58,33,0)
(179,172,0)
(17,124,0)
(126,33,0)
(160,91,0)
(143,166,0)
(115,40,0)
(63,69,0)
(155,89,0)
(44,40,0)
(180,89,0)
(21,40,0)
(36,46,0)
(41,40,0)
(24,94,0)
(24,166,0)
(87,39,0)
(164,124,0)
(129,3,0)
(55,40,0)
(124,33,0)
(50,40,0)
(171,16,0)
(38,40,0)
(74,21,0)
(22,94,0)
(59,40,0)
(151,40,0)
(102,91,0)
(134,40,0)
(153,105,0)
(7,40,0)
(60,89,0)
(170,3,0)
(38,73,0)
(24,11,0)
(81,36,0)
(75,177,0)
(0,180,0)
(91,89,0)
(69,89,0)
(37,121,0)
(34,7,0)
(10,11,0)
(129,33,0)
(163,14,0)
(57,7,0)
(36,117,0)
(93,89,0)
(24,67,0)
(24,121,0)
(79,14,0)
(116,40,0)
(3,40,0)
(83,73,0)
(174,168,0)
(175,168,0)
(146,46,0)
(38,7,0)
(45,89,0)
(47,156,0)
(52,173,0)
(1,40,0)
(176,89,0)
(141,42,0)
(80,38,0)
(131,40,0)
(138,114,0)
(142,40,0)
(71,89,0)
(16,149,0)
(35,121,0)
(98,40,0)
(173,172,0)
(148,89,0)
(177,75,0)
(130,0,0)
(169,132,0)
(42,89,0)
(27,40,0)
(38,121,0)
(24,21,0)
(140,77,0)
(108,40,0)
(16,40,0)
(144,67,0)
(135,40,0)
(152,148,1)
(35,96,1)
(37,35,1)
(79,1,1)
(1,38,1)
(38,11,1)
(11,132,1)
(178,14,1)
(124,164,1)
(36,46,1)
(14,36,1)
(129,33,1)
(114,90,1)
(177,93,1)
(23,171,1)
(24,73,1)
(71,95,1)
(97,163,1)
(163,14,1)
(119,72,1)
(80,127,1)
(146,46,1)
(173,172,1)
(73,165,1)
(38,21,1)
(38,67,1)
(24,38,1)
(173,5,1)
(38,38,1)
(21,123,1)
(61,114,1)
(36,64,1)
(76,91,1)
(138,114,1)
(31,21,1)
(77,140,1)
(79,53,1)
(68,28,1)
(176,76,1)
(79,181,1)
(145,22,1)
(24,180,1)
(106,166,1)
(124,43,1)
(149,23,1)
(131,113,1)
(38,166,1)
(116,121,1)
(38,73,1)
(96,163,1)
(2,81,1)
(163,178,1)
(79,116,1)
(162,66,1)
(79,99,1)
(93,110,1)
(71,75,1)
(157,69,1)
(103,7,1)
(42,141,1)
(79,31,1)
(165,83,1)
(110,46,1)
(175,96,1)
(79,112,1)
(150,24,1)
(74,96,1)
(30,122,1)
(135,96,1)
(64,48,1)
(124,33,1)
(34,96,1)
(126,58,1)
(144,96,1)
(82,96,1)
(17,94,1)
(28,129,1)
(179,77,1)
(141,11,1)
(105,153,1)
(79,135,1)
(129,3,1)
(58,71,1)
(94,146,1)
(83,96,1)
(36,117,1)
(100,177,1)
(81,49,1)
(69,63,1)
(155,54,1)
(143,96,1)
(41,168,1)
(66,33,1)
(156,47,1)
(170,96,1)
(113,82,1)
(121,37,1)
(124,168,1)
(148,162,1)
(171,96,1)
(79,85,1)
(86,138,1)
(38,80,1)
(124,3,1)
(22,180,1)
(38,7,1)
(44,6,1)
(8,109,1)
(79,115,1)
(52,172,1)
(57,34,1)
(180,0,1)
(95,118,1)
(132,169,1)
(6,172,1)
(32,30,1)
(51,97,1)
(156,117,1)
(0,130,1)
(19,75,1)
(53,16,1)
(79,106,1)
(112,92,1)
(88,144,1)
(160,32,1)
(168,174,1)
(146,78,1)
(3,25,1)
(62,96,1)
(54,120,1)
(110,157,1)
(38,121,1)
(63,42,1)
(24,94,1)
(123,74,1)
(109,96,1)
(67,88,1)
(72,129,1)
(181,137,1)
(86,173,1)
(43,68,1)
(24,7,1)
(118,19,1)
(5,52,1)
(93,156,1)
(24,11,1)
(25,170,1)
(166,167,1)
(115,73,1)
(47,110,1)
(79,41,1)
(85,3,1)
(137,152,1)
(64,2,1)
(24,121,1)
(6,86,1)
(24,21,1)
(153,179,1)
(92,128,1)
(124,148,1)
(172,105,1)
(79,27,1)
(164,12,1)
(174,175,1)
(104,136,1)
(79,44,1)
(167,143,1)
(154,84,1)
(78,145,1)
(18,29,1)
(79,131,1)
(79,154,1)
(0,117,1)
(127,96,1)
(7,57,1)
(12,17,1)
(138,61,1)
(90,173,1)
(75,100,1)
(122,155,1)
(33,126,1)
(169,10,1)
(10,176,1)
(27,67,1)
(75,177,1)
(24,124,1)
(24,67,1)
(102,160,1)
(132,117,1)
(16,149,1)
(99,13,1)
(44,77,1)
(49,18,1)
(129,51,1)
(124,181,1)
(24,166,1)
(84,8,1)
(29,79,1)
(140,103,1)
(128,62,1)
(91,102,1)
(13,104,1)
(136,96,1)
(72,43,1)
(124,92,1)
(130,119,1)
(7,96,2)
(82,96,2)
(124,148,2)
(81,163,2)
(67,96,2)
(99,96,2)
(61,173,2)
(85,96,2)
(36,46,2)
(31,96,2)
(95,75,2)
(115,96,2)
(6,77,2)
(171,96,2)
(36,64,2)
(64,163,2)
(44,96,2)
(143,96,2)
(24,7,2)
(163,163,2)
(144,96,2)
(138,114,2)
(21,96,2)
(24,166,2)
(93,156,2)
(41,96,2)
(38,96,2)
(24,21,2)
(29,163,2)
(112,96,2)
(38,11,2)
(38,21,2)
(24,121,2)
(79,163,2)
(166,96,2)
(172,77,2)
(38,73,2)
(6,172,2)
(109,96,2)
(96,163,2)
(62,96,2)
(74,96,2)
(16,149,2)
(1,96,2)
(127,96,2)
(8,96,2)
(28,129,2)
(49,163,2)
(124,92,2)
(124,3,2)
(156,117,2)
(95,118,2)
(168,96,2)
(43,129,2)
(24,38,2)
(129,33,2)
(14,163,2)
(103,96,2)
(104,96,2)
(24,11,2)
(19,75,2)
(25,96,2)
(36,117,2)
(68,129,2)
(172,105,2)
(113,96,2)
(90,173,2)
(38,7,2)
(167,96,2)
(11,132,2)
(52,77,2)
(149,96,2)
(36,163,2)
(24,73,2)
(114,173,2)
(37,96,2)
(165,96,2)
(2,163,2)
(124,181,2)
(173,77,2)
(124,43,2)
(86,77,2)
(84,96,2)
(13,96,2)
(24,67,2)
(178,163,2)
(75,177,2)
(38,121,2)
(110,46,2)
(57,96,2)
(24,94,2)
(0,117,2)
(132,117,2)
(116,96,2)
(38,166,2)
(83,96,2)
(5,77,2)
(175,96,2)
(121,96,2)
(38,67,2)
(27,96,2)
(92,96,2)
(124,168,2)
(94,146,2)
(88,96,2)
(106,96,2)
(138,173,2)
(38,38,2)
(105,77,2)
(150,24,2)
(118,75,2)
(173,172,2)
(23,96,2)
(24,180,2)
(170,96,2)
(80,96,2)
(128,96,2)
(123,96,2)
(153,77,2)
(93,110,2)
(14,36,2)
(64,48,2)
(124,33,2)
(34,96,2)
(35,96,2)
(73,96,2)
(154,96,2)
(53,96,2)
(179,77,2)
(146,46,2)
(180,0,2)
(135,96,2)
(163,14,2)
(140,96,2)
(18,163,2)
(131,96,2)
(129,3,2)
(136,96,2)
(77,96,2)
(174,96,2)
(3,96,2)
(16,96,2)
-----------------------------------
(0,argv + optind)
(1,break;)
(2,0)
(3,file_name = optarg)
(4,section_name)
(5,unknown_demangling)
(6,cplus_demangle_set_style (style)
(7,do_demangle = TRUE)
(8,1)
(9,case \'e\':)
(10,program_name)
(11,program_name = *argv)
(12,section_name)
(13,usage (stdout, 0)
(14,c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *)
(15,case \'r\':)
(16,demangle_flags &= ~ DMGL_NO_RECURSE_LIMIT)
(17,file_name)
(18,argv)
(19,"fatal error: libbfd ABI mismatch")
(20,if (file_name == NULL)
(21,base_names = TRUE)
(22,naddr)
(23,DMGL_NO_RECURSE_LIMIT)
(24,return process_file (file_name, section_name, target)
(25,optarg)
(26,case \'f\':)
(27,break;)
(28,file_name)
(29,argc)
(30,"")
(31,break;)
(32,setlocale (LC_CTYPE, "")
(33,file_name = NULL)
(34,do_demangle)
(35,with_functions)
(36,getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *)
(37,TRUE)
(38,demangle_flags |= DMGL_NO_RECURSE_LIMIT)
(39,)
(40,)
(41,break;)
(42,xmalloc_set_program_name (program_name)
(43,file_name = "a.out")
(44,break;)
(45,file_name)
(46,int argc)
(47,argv)
(48,int *)
(49,"ab:Ce:rRsfHhij:pVv")
(50,case \'a\':)
(51,NULL)
(52,style)
(53,break;)
(54,"")
(55,case \'v\':)
(56,case \'p\':)
(57,TRUE)
(58,file_name)
(59,case \'s\':)
(60,c)
(61,optarg)
(62,section_name)
(63,program_name)
(64,(int *)
(65,)
(66,section_name)
(67,pretty_print = TRUE)
(68,"a.out")
(69,bfd_set_error_program_name (program_name)
(70,case \'R\':)
(71,set_default_bfd_target ()
(72,addr)
(73,with_addresses = TRUE)
(74,base_names)
(75,bfd_init ()
(76,PACKAGE)
(77,optarg != NULL)
(78,optind)
(79,c)
(80,DMGL_NO_RECURSE_LIMIT)
(81,long_options)
(82,"addr2line")
(83,with_addresses)
(84,usage (stderr, 1)
(85,break;)
(86,style)
(87,style)
(88,TRUE)
(89,)
(90,"unknown demangling style `%s\'")
(91,bindtextdomain (PACKAGE, LOCALEDIR)
(92,section_name = optarg)
(93,expandargv (&argc, &argv)
(94,naddr = argc - optind)
(95,fatal (_("fatal error: libbfd ABI mismatch")
(96,c)
(97,file_name)
(98,case \'h\':)
(99,break;)
(100,BFD_INIT_MAGIC)
(101,target)
(102,LOCALEDIR)
(103,optarg)
(104,0)
(105,cplus_demangle_name_to_style (optarg)
(106,break;)
(107,case \'b\':)
(108,case 0:)
(109,stderr)
(110,&argc)
(111,default:)
(112,break;)
(113,print_version ("addr2line")
(114,_("unknown demangling style `%s\'")
(115,break;)
(116,break;)
(117,char **argv)
(118,_("fatal error: libbfd ABI mismatch")
(119,argv)
(120,LC_MESSAGES)
(121,with_functions = TRUE)
(122,LC_CTYPE)
(123,TRUE)
(124,process_file (file_name, section_name, target)
(125,switch (c)
(126,NULL)
(127,demangle_flags)
(128,optarg)
(129,file_name == NULL)
(130,optind)
(131,break;)
(132,*argv)
(133,while ((c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *)
(134,case \'V\':)
(135,break;)
(136,stdout)
(137,NULL)
(138,fatal (_("unknown demangling style `%s\'")
(139,case \'H\':)
(140,NULL)
(141,program_name)
(142,if (optarg != NULL)
(143,unwind_inlines)
(144,pretty_print)
(145,argc)
(146,argc - optind)
(147,case \'i\':)
(148,section_name = NULL)
(149,~ DMGL_NO_RECURSE_LIMIT)
(150,RET)
(151,case \'j\':)
(152,target)
(153,optarg)
(154,break;)
(155,setlocale (LC_MESSAGES, "")
(156,&argv)
(157,argc)
(158,case \'C\':)
(159,if (style == unknown_demangling)
(160,PACKAGE)
(161,if (bfd_init ()
(162,NULL)
(163,(c = getopt_long (argc, argv, "ab:Ce:rRsfHhij:pVv", long_options, (int *)
(164,target)
(165,TRUE)
(166,unwind_inlines = TRUE)
(167,TRUE)
(168,target = optarg)
(169,argv)
(170,file_name)
(171,demangle_flags)
(172,style = cplus_demangle_name_to_style (optarg)
(173,style == unknown_demangling)
(174,optarg)
(175,target)
(176,textdomain (PACKAGE)
(177,bfd_init ()
(178,EOF)
(179,style)
(180,addr = argv + optind)
(181,target = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^