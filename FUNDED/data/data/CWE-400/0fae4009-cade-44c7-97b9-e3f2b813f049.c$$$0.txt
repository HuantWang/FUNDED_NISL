-----label-----
0
-----code-----
static void good1()
{
    goto sink;
sink:
    {
        int * data = (int *)malloc(100*sizeof(int));
        if (data == NULL) {exit(-1);}
        int * tmpData;
        /* Initialize and make use of data */
        data[0] = 5;
        printIntLine(data[0]);
        tmpData = (int *)realloc(data, (130000)*sizeof(int));
        /* FIX: Ensure realloc() was successful before assigning data to the memory block
        * allocated with realloc() */
        if (tmpData != NULL)
        {
            data = tmpData;
            /* Reinitialize and make use of data */
            data[0] = 10;
            printIntLine(data[0]);
        }
        free(data);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
6,7
8,9
8,10
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
11,12
12,13
12,14
14,15
14,16
14,17
17,18
18,19
18,20
19,20
19,21
21,22
23,24
23,25
24,25
26,27
26,28
28,29
29,30
29,31
32,33
32,34
33,34
33,35
34,35
36,37
38,39
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
48,49
48,50
51,52
52,53
52,54
53,54
53,55
54,55
58,59
59,60
59,61
60,61
62,63
62,64
63,64
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
73,74
75,76
75,77
75,78
76,77
78,79
80,81
80,82
81,82
83,84
84,85
84,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
93,95
93,96
94,95
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
102,104
103,104
107,108
108,109
108,110
109,110
111,112
111,113
112,113
115,116
116,117
116,118
117,118
119,120
-----nextToken-----
2,4,7,9,13,15,16,20,22,25,27,30,31,35,37,42,44,47,49,50,55,56,57,61,64,65,69,72,74,77,79,82,85,86,90,92,97,99,104,105,106,110,113,114,118,120
-----computeFrom-----
26,27
26,28
33,34
33,35
52,53
52,54
67,68
67,69
80,81
80,82
88,89
88,90
95,96
95,97
101,102
101,103
-----guardedBy-----
90,99
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;GotoStatement;Name;LabelStatement;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;UnaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void good1(){    goto sink;sink:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        int * tmpData;        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        tmpData = (int *)realloc(data, (130000)*sizeof(int));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);        }        free(data);    }}
static void
good1()
good1
{    goto sink;sink:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        int * tmpData;        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        tmpData = (int *)realloc(data, (130000)*sizeof(int));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);        }        free(data);    }}
goto sink;
sink
sink:    {        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        int * tmpData;        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        tmpData = (int *)realloc(data, (130000)*sizeof(int));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);        }        free(data);    }
sink
{        int * data = (int *)malloc(100*sizeof(int));        if (data == NULL) {exit(-1);}        int * tmpData;        /* Initialize and make use of data */        data[0] = 5;        printIntLine(data[0]);        tmpData = (int *)realloc(data, (130000)*sizeof(int));        /* FIX: Ensure realloc() was successful before assigning data to the memory block        * allocated with realloc() */        if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);        }        free(data);    }
int * data = (int *)malloc(100*sizeof(int));
int * data = (int *)malloc(100*sizeof(int));
int
* data = (int *)malloc(100*sizeof(int))
*
data
= (int *)malloc(100*sizeof(int))
(int *)malloc(100*sizeof(int))
int *
int
*
*
malloc(100*sizeof(int))
malloc
malloc
100*sizeof(int)
100
sizeof(int)
int
int

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
int * tmpData;
int * tmpData;
int
* tmpData
*
tmpData
data[0] = 5;
data[0] = 5
data[0]
data
data
0
5
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
tmpData = (int *)realloc(data, (130000)*sizeof(int));
tmpData = (int *)realloc(data, (130000)*sizeof(int))
tmpData
tmpData
(int *)realloc(data, (130000)*sizeof(int))
int *
int
*
*
realloc(data, (130000)*sizeof(int))
realloc
realloc
data
data
(130000)*sizeof(int)
(130000)
130000
sizeof(int)
int
int

if (tmpData != NULL)        {            data = tmpData;            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);        }
tmpData != NULL
tmpData
tmpData
NULL
NULL
{            data = tmpData;            /* Reinitialize and make use of data */            data[0] = 10;            printIntLine(data[0]);        }
data = tmpData;
data = tmpData
data
data
tmpData
tmpData
data[0] = 10;
data[0] = 10
data[0]
data
data
0
10
printIntLine(data[0]);
printIntLine(data[0])
printIntLine
printIntLine
data[0]
data
data
0
free(data);
free(data)
free
free
data
data
-----joern-----
(59,44,0)
(56,44,0)
(52,41,0)
(27,15,0)
(61,17,0)
(16,17,0)
(57,49,0)
(40,15,0)
(12,8,0)
(4,5,0)
(60,39,0)
(1,30,0)
(24,39,0)
(44,56,0)
(5,38,0)
(23,24,0)
(5,4,0)
(40,42,0)
(0,39,0)
(2,19,0)
(10,26,0)
(21,30,0)
(51,6,0)
(24,23,0)
(6,51,0)
(39,24,0)
(24,40,0)
(39,26,0)
(49,42,0)
(1,41,0)
(53,40,0)
(54,3,0)
(29,45,0)
(11,26,0)
(30,45,0)
(51,42,0)
(13,52,0)
(19,15,0)
(58,49,0)
(42,26,0)
(41,26,0)
(1,29,0)
(29,1,0)
(43,16,0)
(22,42,0)
(36,4,0)
(61,30,0)
(42,51,0)
(51,56,0)
(1,17,0)
(16,26,0)
(25,61,0)
(44,47,0)
(37,52,0)
(31,3,0)
(12,42,0)
(34,26,0)
(15,40,0)
(17,45,0)
(35,17,0)
(48,26,0)
(50,12,0)
(18,47,0)
(32,60,0)
(26,3,0)
(47,44,0)
(28,60,0)
(33,61,0)
(8,12,0)
(20,41,0)
(8,26,0)
(14,17,0)
(7,1,0)
(17,39,0)
(16,42,0)
(55,1,0)
(15,19,0)
(56,51,0)
(12,41,0)
(52,42,0)
(9,12,0)
(40,24,0)
(12,41,1)
(16,17,1)
(27,53,1)
(52,42,1)
(7,30,1)
(53,0,1)
(60,39,1)
(41,20,1)
(25,17,1)
(30,21,1)
(43,29,1)
(46,16,1)
(19,2,1)
(61,33,1)
(17,35,1)
(12,50,1)
(15,19,1)
(9,41,1)
(16,42,1)
(61,17,1)
(49,42,1)
(22,54,1)
(32,39,1)
(49,58,1)
(29,1,1)
(35,14,1)
(8,12,1)
(1,17,1)
(43,60,1)
(18,59,1)
(44,47,1)
(36,49,1)
(40,15,1)
(4,36,1)
(37,13,1)
(28,32,1)
(57,42,1)
(5,4,1)
(33,25,1)
(14,60,1)
(2,27,1)
(56,44,1)
(50,9,1)
(1,30,1)
(24,40,1)
(39,24,1)
(51,6,1)
(1,41,1)
(17,39,1)
(13,5,1)
(60,28,1)
(1,55,1)
(0,8,1)
(42,51,1)
(55,7,1)
(47,18,1)
(20,52,1)
(13,49,1)
(52,37,1)
(12,42,1)
(59,22,1)
(58,57,1)
(24,23,1)
(40,42,1)
(51,56,1)
(21,61,1)
(16,43,1)
(55,60,2)
(49,42,2)
(16,42,2)
(52,42,2)
(12,41,2)
(40,42,2)
(24,40,2)
(14,60,2)
(30,60,2)
(16,17,2)
(5,49,2)
(61,17,2)
(29,1,2)
(42,51,2)
(51,56,2)
(8,12,2)
(12,42,2)
(60,39,2)
(1,17,2)
(1,41,2)
(4,49,2)
(1,30,2)
(17,39,2)
(7,60,2)
(36,49,2)
(33,60,2)
(21,60,2)
(5,4,2)
(61,60,2)
(15,19,2)
(40,15,2)
(25,60,2)
(56,44,2)
(1,60,2)
(29,60,2)
(35,60,2)
(44,47,2)
(51,6,2)
(17,60,2)
(24,23,2)
(39,24,2)
-----------------------------------
(0,tmpData)
(1,data[0])
(2,int)
(3,)
(4,-1)
(5,exit(-1)
(6,int *)
(7,data)
(8,printIntLine(data[0])
(9,data)
(10,tmpData)
(11,data)
(12,data[0])
(13,data)
(14,data)
(15,(130000)
(16,free(data)
(17,data = tmpData)
(18,int)
(19,sizeof(int)
(20,5)
(21,10)
(22,data)
(23,int *)
(24,(int *)
(25,data)
(26,)
(27,130000)
(28,NULL)
(29,printIntLine(data[0])
(30,data[0] = 10)
(31,sink:)
(32,tmpData)
(33,0)
(34,if (tmpData != NULL)
(35,tmpData)
(36,1)
(37,0)
(38,)
(39,tmpData = (int *)
(40,realloc(data, (130000)
(41,data[0] = 5)
(42,* data = (int *)
(43,data)
(44,100*sizeof(int)
(45,)
(46,RET)
(47,sizeof(int)
(48,if (data == NULL)
(49,data == NULL)
(50,0)
(51,(int *)
(52,data[0])
(53,data)
(54,goto sink;)
(55,0)
(56,malloc(100*sizeof(int)
(57,data)
(58,NULL)
(59,100)
(60,tmpData != NULL)
(61,data[0])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^