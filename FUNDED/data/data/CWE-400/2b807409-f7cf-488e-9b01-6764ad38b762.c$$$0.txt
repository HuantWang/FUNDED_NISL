-----label-----
1
-----code-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_08_bad()
{
    struct _twoIntsStruct * data;
    data = NULL;
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: Allocate memory on the heap */
        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
        if (data == NULL) {exit(-1);}
        /* Initialize and make use of data */
        data[0].intOne = 0;
        data[0].intTwo = 0;
        printStructLine((twoIntsStruct *)&data[0]);
    }
    if(staticReturnsTrue())
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
8,9
10,11
10,12
13,14
14,15
14,16
15,16
17,18
19,20
19,21
20,21
21,22
23,24
23,25
23,26
23,27
23,28
24,25
25,26
25,27
26,27
28,29
28,30
29,30
29,31
30,31
32,33
34,35
34,36
35,36
37,38
37,39
39,40
40,41
40,42
41,42
44,45
44,46
45,46
45,47
46,47
48,49
50,51
51,52
52,53
52,54
53,54
55,56
57,58
58,59
58,60
59,60
59,61
60,61
60,62
61,62
66,67
67,68
67,69
68,69
68,70
69,70
69,71
70,71
75,76
76,77
76,78
77,78
79,80
79,81
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
91,92
92,93
94,95
-----nextToken-----
2,4,9,11,12,16,18,22,27,31,33,36,38,42,43,47,49,54,56,62,63,64,65,71,72,73,74,78,82,84,88,89,93,95
-----computeFrom-----
14,15
14,16
25,26
25,27
37,38
37,39
45,46
45,47
58,59
58,60
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
void CWE401_Memory_Leak__struct_twoIntsStruct_malloc_08_bad(){    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
void
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_08_bad()
CWE401_Memory_Leak__struct_twoIntsStruct_malloc_08_bad
{    struct _twoIntsStruct * data;    data = NULL;    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }    if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
struct _twoIntsStruct * data;
struct _twoIntsStruct * data;
struct _twoIntsStruct
_twoIntsStruct
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: Allocate memory on the heap */        data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));        if (data == NULL) {exit(-1);}        /* Initialize and make use of data */        data[0].intOne = 0;        data[0].intTwo = 0;        printStructLine((twoIntsStruct *)&data[0]);    }
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct));
data = (struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
data
data
(struct _twoIntsStruct *)malloc(100*sizeof(struct _twoIntsStruct))
struct _twoIntsStruct *
struct _twoIntsStruct
_twoIntsStruct
*
*
malloc(100*sizeof(struct _twoIntsStruct))
malloc
malloc
100*sizeof(struct _twoIntsStruct)
100
sizeof(struct _twoIntsStruct)
struct _twoIntsStruct
struct _twoIntsStruct
_twoIntsStruct

if (data == NULL) {exit(-1);}
data == NULL
data
data
NULL
NULL
{exit(-1);}
exit(-1);
exit(-1)
exit
exit
-1
1
data[0].intOne = 0;
data[0].intOne = 0
data[0].intOne
data[0]
data
data
0
intOne
0
data[0].intTwo = 0;
data[0].intTwo = 0
data[0].intTwo
data[0]
data
data
0
intTwo
0
printStructLine((twoIntsStruct *)&data[0]);
printStructLine((twoIntsStruct *)&data[0])
printStructLine
printStructLine
(twoIntsStruct *)&data[0]
twoIntsStruct *
twoIntsStruct
twoIntsStruct
*
*
&data[0]
data[0]
data
data
0
if(staticReturnsTrue())    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
staticReturnsTrue()
staticReturnsTrue
staticReturnsTrue
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(35,44,0)
(13,22,0)
(17,28,0)
(24,37,0)
(9,37,0)
(38,2,0)
(25,46,0)
(20,10,0)
(27,36,0)
(3,1,0)
(39,8,0)
(18,9,0)
(37,28,0)
(36,16,0)
(2,40,0)
(37,9,0)
(44,28,0)
(2,38,0)
(26,29,0)
(22,45,0)
(27,20,0)
(21,47,0)
(7,27,0)
(21,8,0)
(38,17,0)
(6,1,0)
(29,28,0)
(17,38,0)
(12,1,0)
(5,31,0)
(2,33,0)
(10,28,0)
(36,27,0)
(33,2,0)
(33,45,0)
(31,1,0)
(15,28,0)
(9,46,0)
(44,14,0)
(19,10,0)
(0,14,0)
(10,20,0)
(40,2,0)
(48,37,0)
(14,22,0)
(10,19,0)
(4,45,0)
(28,10,0)
(28,45,0)
(11,17,0)
(32,44,0)
(30,31,0)
(20,27,0)
(8,21,0)
(46,45,0)
(14,44,0)
(43,29,0)
(34,17,0)
(16,36,0)
(23,41,1)
(43,28,1)
(39,29,1)
(7,15,1)
(26,43,1)
(41,42,1)
(33,2,1)
(17,28,1)
(48,22,1)
(2,38,1)
(44,28,1)
(18,37,1)
(32,35,1)
(8,39,1)
(35,29,1)
(0,44,1)
(44,32,1)
(46,25,1)
(14,44,1)
(36,16,1)
(31,5,1)
(25,9,1)
(11,34,1)
(36,7,1)
(41,33,1)
(29,26,1)
(17,11,1)
(14,0,1)
(35,21,1)
(13,14,1)
(9,18,1)
(22,13,1)
(27,36,1)
(10,20,1)
(28,10,1)
(38,17,1)
(21,8,1)
(20,27,1)
(34,46,1)
(37,24,1)
(15,42,1)
(10,19,1)
(29,28,1)
(24,48,1)
(2,40,1)
(42,31,1)
(5,30,1)
(9,37,1)
(37,28,1)
(33,42,2)
(9,42,2)
(7,42,2)
(14,44,2)
(10,20,2)
(37,42,2)
(38,42,2)
(21,29,2)
(20,42,2)
(35,42,2)
(46,42,2)
(44,28,2)
(27,42,2)
(24,42,2)
(22,42,2)
(11,42,2)
(8,29,2)
(36,16,2)
(9,37,2)
(27,36,2)
(38,17,2)
(39,29,2)
(2,42,2)
(21,8,2)
(2,38,2)
(17,42,2)
(26,42,2)
(43,42,2)
(36,42,2)
(29,28,2)
(32,42,2)
(18,42,2)
(48,42,2)
(17,28,2)
(28,10,2)
(13,42,2)
(25,42,2)
(20,27,2)
(10,19,2)
(2,40,2)
(10,42,2)
(15,42,2)
(34,42,2)
(0,42,2)
(37,28,2)
(28,42,2)
(14,42,2)
(29,42,2)
(44,42,2)
(33,2,2)
-----------------------------------
(0,intOne)
(1,)
(2,(twoIntsStruct *)
(3,if(staticReturnsTrue()
(4,if (data == NULL)
(5,NULL)
(6,if(staticReturnsTrue()
(7,100)
(8,-1)
(9,data[0].intTwo)
(10,(struct _twoIntsStruct *)
(11,0)
(12,data)
(13,0)
(14,data[0].intOne)
(15,data)
(16,struct _twoIntsStruct)
(17,data[0])
(18,intTwo)
(19,struct _twoIntsStruct *)
(20,malloc(100*sizeof(struct _twoIntsStruct)
(21,exit(-1)
(22,data[0].intOne = 0)
(23,RET)
(24,0)
(25,0)
(26,NULL)
(27,100*sizeof(struct _twoIntsStruct)
(28,data = (struct _twoIntsStruct *)
(29,data == NULL)
(30,data)
(31,data = NULL)
(32,0)
(33,printStructLine((twoIntsStruct *)
(34,data)
(35,data)
(36,sizeof(struct _twoIntsStruct)
(37,data[0])
(38,&data[0])
(39,1)
(40,twoIntsStruct *)
(41,staticReturnsTrue()
(42,staticReturnsTrue()
(43,data)
(44,data[0])
(45,)
(46,data[0].intTwo = 0)
(47,)
(48,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^