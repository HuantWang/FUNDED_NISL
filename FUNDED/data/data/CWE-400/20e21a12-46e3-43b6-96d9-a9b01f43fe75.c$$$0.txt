-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    data = NULL;
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Use memory allocated on the stack with ALLOCA */
        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
        /* Initialize and make use of data */
        wcscpy(data, L"A String");
        printWLine(data);
    }
    if(GLOBAL_CONST_TRUE)
    {
        /* POTENTIAL FLAW: No deallocation */
        ; /* empty statement needed for some flow variants */
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
21,24
22,23
23,24
23,25
24,25
26,27
26,28
27,28
27,29
29,30
31,32
31,33
32,33
34,35
34,36
36,37
37,38
37,39
40,41
41,42
41,43
41,44
42,43
44,45
47,48
48,49
48,50
49,50
51,52
53,54
53,55
54,55
56,57
-----nextToken-----
2,4,8,10,11,15,17,20,25,28,30,33,35,38,39,43,45,46,50,52,55,57
-----computeFrom-----
13,14
13,15
23,24
23,25
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;TypeIdExpression;TypeId;SimpleDeclSpecifier;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;NullStatement;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    data = NULL;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }    if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
data = NULL;
data = NULL
data
data
NULL
NULL
if(GLOBAL_CONST_TRUE)    {        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Use memory allocated on the stack with ALLOCA */        data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));        /* Initialize and make use of data */        wcscpy(data, L"A String");        printWLine(data);    }
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t));
data = (wchar_t *)ALLOCA(100*sizeof(wchar_t))
data
data
(wchar_t *)ALLOCA(100*sizeof(wchar_t))
wchar_t *
wchar_t
*
*
ALLOCA(100*sizeof(wchar_t))
ALLOCA
ALLOCA
100*sizeof(wchar_t)
100
sizeof(wchar_t)
wchar_t
wchar_t

wcscpy(data, L"A String");
wcscpy(data, L"A String")
wcscpy
wcscpy
data
data
L"A String"
printWLine(data);
printWLine(data)
printWLine
printWLine
data
data
if(GLOBAL_CONST_TRUE)    {        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* POTENTIAL FLAW: No deallocation */        ; /* empty statement needed for some flow variants */    }
;
-----joern-----
(17,2,0)
(7,21,0)
(1,15,0)
(0,17,0)
(5,2,0)
(15,20,0)
(20,3,0)
(19,9,0)
(12,10,0)
(19,15,0)
(3,20,0)
(6,2,0)
(4,10,0)
(20,15,0)
(2,17,0)
(20,6,0)
(2,6,0)
(16,21,0)
(11,10,0)
(15,9,0)
(21,10,0)
(6,20,0)
(14,19,0)
(8,19,1)
(19,15,1)
(2,17,1)
(16,7,1)
(5,1,1)
(19,14,1)
(21,16,1)
(6,2,1)
(20,3,1)
(15,20,1)
(0,5,1)
(17,0,1)
(18,21,1)
(1,18,1)
(14,15,1)
(20,6,1)
(8,18,1)
(13,8,1)
(14,18,2)
(17,18,2)
(1,18,2)
(19,18,2)
(2,17,2)
(15,20,2)
(20,3,2)
(20,6,2)
(6,2,2)
(2,18,2)
(15,18,2)
(6,18,2)
(20,18,2)
(0,18,2)
(5,18,2)
(19,15,2)
-----------------------------------
(0,wchar_t)
(1,data)
(2,100*sizeof(wchar_t)
(3,wchar_t *)
(4,if(GLOBAL_CONST_TRUE)
(5,100)
(6,ALLOCA(100*sizeof(wchar_t)
(7,data)
(8,GLOBAL_CONST_TRUE)
(9,)
(10,)
(11,if(GLOBAL_CONST_TRUE)
(12,data)
(13,RET)
(14,data)
(15,data = (wchar_t *)
(16,NULL)
(17,sizeof(wchar_t)
(18,GLOBAL_CONST_TRUE)
(19,printWLine(data)
(20,(wchar_t *)
(21,data = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^