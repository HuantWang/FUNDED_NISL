-----label-----
0
-----code-----
static inline void cpu_leave_lowpower(void)
{
	unsigned int v;

	asm volatile(
	"mrc	p15, 0, %0, c1, c0, 0\n"
	"	orr	%0, %0, %1\n"
	"	mcr	p15, 0, %0, c1, c0, 0\n"
	"	mrc	p15, 0, %0, c1, c0, 1\n"
	"	orr	%0, %0, %2\n"
	"	mcr	p15, 0, %0, c1, c0, 1\n"
	  : "=&r" (v)
	  : "Ir" (CR_C), "Ir" (0x40)
	  : "cc");
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
10,11
11,12
11,13
13,14
15,16
-----nextToken-----
2,4,6,8,12,14,16
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;ASMDeclaration;
-----ast_node-----
static inline void cpu_leave_lowpower(void){	unsigned int v;	asm volatile(	"mrc	p15, 0, %0, c1, c0, 0\n"	"	orr	%0, %0, %1\n"	"	mcr	p15, 0, %0, c1, c0, 0\n"	"	mrc	p15, 0, %0, c1, c0, 1\n"	"	orr	%0, %0, %2\n"	"	mcr	p15, 0, %0, c1, c0, 1\n"	  : "=&r" (v)	  : "Ir" (CR_C), "Ir" (0x40)	  : "cc");}
static inline void
cpu_leave_lowpower(void)
cpu_leave_lowpower
void
void


{	unsigned int v;	asm volatile(	"mrc	p15, 0, %0, c1, c0, 0\n"	"	orr	%0, %0, %1\n"	"	mcr	p15, 0, %0, c1, c0, 0\n"	"	mrc	p15, 0, %0, c1, c0, 1\n"	"	orr	%0, %0, %2\n"	"	mcr	p15, 0, %0, c1, c0, 1\n"	  : "=&r" (v)	  : "Ir" (CR_C), "Ir" (0x40)	  : "cc");}
unsigned int v;
unsigned int v;
unsigned int
v
v
asm volatile(	"mrc	p15, 0, %0, c1, c0, 0\n"	"	orr	%0, %0, %1\n"	"	mcr	p15, 0, %0, c1, c0, 0\n"	"	mrc	p15, 0, %0, c1, c0, 1\n"	"	orr	%0, %0, %2\n"	"	mcr	p15, 0, %0, c1, c0, 1\n"	  : "=&r" (v)	  : "Ir" (CR_C), "Ir" (0x40)	  : "cc");
asm volatile(	"mrc	p15, 0, %0, c1, c0, 0\n"	"	orr	%0, %0, %1\n"	"	mcr	p15, 0, %0, c1, c0, 0\n"	"	mrc	p15, 0, %0, c1, c0, 1\n"	"	orr	%0, %0, %2\n"	"	mcr	p15, 0, %0, c1, c0, 1\n"	  : "=&r" (v)	  : "Ir" (CR_C), "Ir" (0x40)	  : "cc");
-----joern-----
(0,1,0)
-----------------------------------
(0,v)
(1,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^