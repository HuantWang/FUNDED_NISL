-----label-----
0
-----code-----
int acpi_video_register(void)
{
	int ret;

	if (register_count) {
		/*
		 * if the function of acpi_video_register is already called,
		 * don't register the acpi_vide_bus again and return no error.
		 */
		return 0;
	}

	mutex_init(&video_list_lock);
	INIT_LIST_HEAD(&video_bus_head);

	ret = acpi_bus_register_driver(&acpi_video_bus);
	if (ret)
		return ret;

	/*
	 * When the acpi_video_bus is loaded successfully, increase
	 * the counter reference.
	 */
	register_count = 1;

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
10,11
11,12
11,13
13,14
15,16
15,17
16,17
18,19
19,20
21,22
22,23
22,24
23,24
25,26
26,27
26,28
29,30
30,31
30,32
31,32
33,34
34,35
34,36
37,38
38,39
38,40
39,40
41,42
41,43
42,43
44,45
45,46
47,48
47,49
48,49
50,51
51,52
53,54
54,55
54,56
55,56
58,59
-----nextToken-----
2,4,6,8,12,14,17,20,24,27,28,32,35,36,40,43,46,49,52,56,57,59
-----computeFrom-----
38,39
38,40
54,55
54,56
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int acpi_video_register(void){	int ret;	if (register_count) {		/*		 * if the function of acpi_video_register is already called,		 * don't register the acpi_vide_bus again and return no error.		 */		return 0;	}	mutex_init(&video_list_lock);	INIT_LIST_HEAD(&video_bus_head);	ret = acpi_bus_register_driver(&acpi_video_bus);	if (ret)		return ret;	/*	 * When the acpi_video_bus is loaded successfully, increase	 * the counter reference.	 */	register_count = 1;	return 0;}
int
acpi_video_register(void)
acpi_video_register
void
void


{	int ret;	if (register_count) {		/*		 * if the function of acpi_video_register is already called,		 * don't register the acpi_vide_bus again and return no error.		 */		return 0;	}	mutex_init(&video_list_lock);	INIT_LIST_HEAD(&video_bus_head);	ret = acpi_bus_register_driver(&acpi_video_bus);	if (ret)		return ret;	/*	 * When the acpi_video_bus is loaded successfully, increase	 * the counter reference.	 */	register_count = 1;	return 0;}
int ret;
int ret;
int
ret
ret
if (register_count) {		/*		 * if the function of acpi_video_register is already called,		 * don't register the acpi_vide_bus again and return no error.		 */		return 0;	}
register_count
register_count
{		/*		 * if the function of acpi_video_register is already called,		 * don't register the acpi_vide_bus again and return no error.		 */		return 0;	}
return 0;
0
mutex_init(&video_list_lock);
mutex_init(&video_list_lock);
mutex_init
mutex_init
(&video_list_lock)
&video_list_lock
&
video_list_lock
INIT_LIST_HEAD(&video_bus_head);
INIT_LIST_HEAD(&video_bus_head);
INIT_LIST_HEAD
INIT_LIST_HEAD
(&video_bus_head)
&video_bus_head
&
video_bus_head
ret = acpi_bus_register_driver(&acpi_video_bus);
ret = acpi_bus_register_driver(&acpi_video_bus)
ret
ret
acpi_bus_register_driver(&acpi_video_bus)
acpi_bus_register_driver
acpi_bus_register_driver
&acpi_video_bus
acpi_video_bus
acpi_video_bus
if (ret)		return ret;
ret
ret
return ret;
ret
ret
register_count = 1;
register_count = 1
register_count
register_count
1
return 0;
0
-----joern-----
(20,0,0)
(15,7,0)
(23,13,0)
(17,10,0)
(19,7,0)
(13,12,0)
(9,10,0)
(7,15,0)
(16,8,0)
(4,8,0)
(1,20,0)
(15,10,0)
(0,27,0)
(5,10,0)
(21,10,0)
(2,27,0)
(0,20,0)
(9,8,0)
(8,10,0)
(6,17,0)
(11,9,0)
(24,13,0)
(25,20,0)
(27,0,0)
(20,10,0)
(24,1,0)
(17,6,0)
(22,10,0)
(18,1,0)
(14,6,0)
(24,9,0)
(15,7,1)
(24,9,1)
(9,11,1)
(0,27,1)
(24,13,1)
(11,8,1)
(13,23,1)
(16,3,1)
(24,1,1)
(3,20,1)
(1,20,1)
(27,2,1)
(4,16,1)
(9,8,1)
(18,3,1)
(2,25,1)
(1,18,1)
(20,0,1)
(17,6,1)
(25,15,1)
(7,19,1)
(6,14,1)
(14,26,1)
(8,4,1)
(23,26,1)
(19,17,1)
(14,26,2)
(17,6,2)
(15,7,2)
(2,26,2)
(1,3,2)
(24,9,2)
(27,26,2)
(11,3,2)
(9,8,2)
(4,3,2)
(15,26,2)
(24,13,2)
(9,3,2)
(6,26,2)
(20,26,2)
(1,20,2)
(23,26,2)
(3,26,2)
(13,26,2)
(7,26,2)
(18,3,2)
(17,26,2)
(25,26,2)
(19,26,2)
(20,0,2)
(0,26,2)
(8,3,2)
(24,1,2)
(16,3,2)
(0,27,2)
-----------------------------------
(0,acpi_bus_register_driver(&acpi_video_bus)
(1,return ret;)
(2,acpi_video_bus)
(3,ret)
(4,1)
(5,ret)
(6,&video_list_lock)
(7,&video_bus_head)
(8,register_count = 1)
(9,return 0;)
(10,)
(11,0)
(12,)
(13,return 0;)
(14,video_list_lock)
(15,INIT_LIST_HEAD(&video_bus_head)
(16,register_count)
(17,mutex_init(&video_list_lock)
(18,ret)
(19,video_bus_head)
(20,ret = acpi_bus_register_driver(&acpi_video_bus)
(21,if (register_count)
(22,if (ret)
(23,0)
(24,RET)
(25,ret)
(26,register_count)
(27,&acpi_video_bus)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^