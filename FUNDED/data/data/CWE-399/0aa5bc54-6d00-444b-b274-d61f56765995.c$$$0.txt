-----label-----
1
-----code-----
void
mace_pcibrattach(struct device *parent, struct device *self, void *aux)
{
	struct mace_pcibr_softc *sc = (struct mace_pcibr_softc *)self;
	struct pcibus_attach_args pba;
	struct confargs *ca = aux;
	pcireg_t pcireg;

	/* Create extents for PCI mappings */
	mace_pcibbus_io_tag.bus_extent = extent_create("pci_io",
	    MACE_PCI_IO_BASE, MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1,
	    M_DEVBUF, (caddr_t)pci_io_ext_storage,
	    sizeof(pci_io_ext_storage), EX_NOCOALESCE|EX_NOWAIT);

	mace_pcibbus_mem_tag.bus_extent = extent_create("pci_mem",
	    MACE_PCI_MEM_BASE, MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1,
	    M_DEVBUF, (caddr_t)pci_mem_ext_storage,
	    sizeof(pci_mem_ext_storage), EX_NOCOALESCE|EX_NOWAIT);

	/* local -> PCI MEM mapping offset */
	sc->sc_mem_bus_space = &mace_pcibbus_mem_tag;

	/* local -> PCI IO mapping offset */
	sc->sc_io_bus_space = &mace_pcibbus_io_tag;

	/* Map in PCI control registers */
	sc->sc_memt = ca->ca_memt;
	if (bus_space_map(sc->sc_memt, MACE_PCI_OFFS, 4096, 0, &sc->sc_memh)) {
		printf(": can't map PCI control registers\n");
		return;
	}
	pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_REVISION);

	printf(": mace rev %d, host system O2\n", pcireg);

	/* Register the PCI ERROR interrupt handler */
	macebus_intr_establish(NULL, 8, IST_LEVEL, IPL_HIGH,
	    mace_pcibr_errintr, (void *)sc, sc->sc_dev.dv_xname);

	sc->sc_pc.pc_conf_v = sc;
	sc->sc_pc.pc_attach_hook = mace_pcibr_attach_hook;
	sc->sc_pc.pc_make_tag = mace_pcibr_make_tag;
	sc->sc_pc.pc_decompose_tag = mace_pcibr_decompose_tag;
	sc->sc_pc.pc_bus_maxdevs = mace_pcibr_bus_maxdevs;
	sc->sc_pc.pc_conf_read = mace_pcibr_conf_read;
	sc->sc_pc.pc_conf_write = mace_pcibr_conf_write;
	sc->sc_pc.pc_intr_v = NULL;
	sc->sc_pc.pc_intr_map = mace_pcibr_intr_map;
	sc->sc_pc.pc_intr_string = mace_pcibr_intr_string;
	sc->sc_pc.pc_intr_establish = mace_pcibr_intr_establish;
	sc->sc_pc.pc_intr_disestablish = mace_pcibr_intr_disestablish;
	sc->sc_pc.pc_intr_line = mace_pcibr_intr_line;
	sc->sc_pc.pc_ppb_setup = mace_pcibr_ppb_setup;
#if NCARDBUS > 0
	sc->sc_pc.pc_rbus_parent_io = mace_pcibr_rbus_parent_io;
	sc->sc_pc.pc_rbus_parent_mem = mace_pcibr_rbus_parent_mem;
#endif

	/*
	 * The O2 firmware sucks.  It makes a mess off I/O BARs and
	 * an even bigger mess for PCI-PCI bridges.
	 */
	mace_pcibr_configure(sc);

	/*
	 *  Configure our PCI devices.
	 */
	bzero(&pba, sizeof(pba));
	pba.pba_busname = "pci";
	pba.pba_iot = sc->sc_io_bus_space;
	pba.pba_memt = sc->sc_mem_bus_space;
	pba.pba_dmat = malloc(sizeof(pci_bus_dma_tag), M_DEVBUF, M_NOWAIT);
	*pba.pba_dmat = pci_bus_dma_tag;
	pba.pba_pc = &sc->sc_pc;
	pba.pba_domain = pci_ndomains++;
	pba.pba_bus = 0;
	config_found(self, &pba, mace_pcibrprint);

	/* Clear PCI errors and set up error interrupt */
	bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_ERROR_FLAGS, 0);
	pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL);
	pcireg |= MACE_PCI_INTCTRL;
	bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL, pcireg);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
19,21
22,23
22,24
22,25
22,26
22,27
22,28
22,29
22,30
22,31
22,32
22,33
22,34
22,35
22,36
22,37
22,38
22,39
22,40
22,41
22,42
22,43
22,44
22,45
22,46
22,47
22,48
22,49
22,50
22,51
22,52
22,53
22,54
22,55
22,56
22,57
22,58
22,59
22,60
22,61
22,62
22,63
22,64
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
31,33
32,33
32,34
33,34
35,36
37,38
39,40
40,41
40,42
41,42
43,44
45,46
46,47
46,48
47,48
49,50
49,51
49,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
61,62
62,63
62,64
63,64
63,65
64,65
67,68
67,69
67,70
67,71
67,72
67,73
67,74
67,75
68,69
71,72
73,74
73,75
74,75
74,76
75,76
77,78
80,81
82,83
82,84
83,84
83,85
84,85
87,88
89,90
90,91
90,92
91,92
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
101,103
102,103
105,106
105,107
105,108
105,109
105,110
105,111
105,112
105,113
106,107
109,110
111,112
111,113
112,113
112,114
113,114
115,116
118,119
120,121
120,122
121,122
121,123
122,123
125,126
127,128
128,129
128,130
129,130
132,133
132,134
133,134
135,136
137,138
138,139
138,140
139,140
139,141
140,141
143,144
144,145
146,147
147,148
147,149
148,149
148,150
149,150
152,153
153,154
155,156
156,157
156,158
157,158
157,159
158,159
161,162
161,163
162,163
165,166
165,167
166,167
166,168
166,169
166,170
166,171
166,172
167,168
169,170
169,171
170,171
173,174
177,178
178,179
178,180
179,180
182,183
182,184
183,184
184,185
184,186
185,186
189,190
190,191
190,192
191,192
193,194
193,195
193,196
193,197
194,195
196,197
196,198
197,198
200,201
200,202
201,202
204,205
206,207
207,208
207,209
207,210
208,209
211,212
213,214
214,215
214,216
214,217
214,218
214,219
214,220
214,221
214,222
215,216
217,218
220,221
222,223
224,225
226,227
226,228
227,228
227,229
229,230
231,232
233,234
233,235
234,235
234,236
235,236
239,240
240,241
240,242
241,242
241,243
242,243
242,244
243,244
247,248
249,250
250,251
250,252
251,252
251,253
252,253
252,254
253,254
257,258
259,260
260,261
260,262
261,262
261,263
262,263
262,264
263,264
267,268
269,270
270,271
270,272
271,272
271,273
272,273
272,274
273,274
277,278
279,280
280,281
280,282
281,282
281,283
282,283
282,284
283,284
287,288
289,290
290,291
290,292
291,292
291,293
292,293
292,294
293,294
297,298
299,300
300,301
300,302
301,302
301,303
302,303
302,304
303,304
307,308
309,310
310,311
310,312
311,312
311,313
312,313
312,314
313,314
317,318
319,320
320,321
320,322
321,322
321,323
322,323
322,324
323,324
327,328
329,330
330,331
330,332
331,332
331,333
332,333
332,334
333,334
337,338
339,340
340,341
340,342
341,342
341,343
342,343
342,344
343,344
347,348
349,350
350,351
350,352
351,352
351,353
352,353
352,354
353,354
357,358
359,360
360,361
360,362
361,362
361,363
362,363
362,364
363,364
367,368
369,370
370,371
370,372
371,372
371,373
372,373
372,374
373,374
377,378
379,380
380,381
380,382
381,382
383,384
385,386
386,387
386,388
386,389
387,388
389,390
390,391
392,393
393,394
394,395
396,397
397,398
397,399
398,399
398,400
399,400
403,404
404,405
404,406
405,406
405,407
406,407
409,410
409,411
410,411
413,414
414,415
414,416
415,416
415,417
416,417
419,420
419,421
420,421
423,424
424,425
424,426
425,426
425,427
426,427
429,430
429,431
429,432
429,433
430,431
432,433
433,434
433,435
434,435
437,438
439,440
441,442
442,443
442,444
443,444
444,445
444,446
445,446
448,449
450,451
451,452
451,453
452,453
452,454
453,454
456,457
457,458
457,459
458,459
461,462
462,463
462,464
463,464
463,465
464,465
467,468
468,469
470,471
471,472
471,473
472,473
472,474
473,474
477,478
478,479
478,480
478,481
478,482
479,480
481,482
483,484
484,485
486,487
488,489
489,490
489,491
489,492
489,493
489,494
490,491
492,493
492,494
493,494
496,497
496,498
497,498
500,501
503,504
504,505
504,506
505,506
507,508
507,509
507,510
507,511
508,509
510,511
510,512
511,512
514,515
514,516
515,516
518,519
520,521
521,522
521,523
522,523
524,525
526,527
527,528
527,529
527,530
527,531
527,532
528,529
530,531
530,532
531,532
534,535
534,536
535,536
538,539
540,541
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,21,26,28,29,34,36,38,42,44,48,50,51,54,58,60,65,66,69,70,72,76,78,79,81,85,86,88,92,93,96,98,103,104,107,108,110,114,116,117,119,123,124,126,130,131,134,136,141,142,145,150,151,154,159,160,163,164,168,171,172,174,175,176,180,181,186,187,188,192,195,198,199,202,203,205,209,210,212,216,218,219,221,223,225,228,230,232,236,237,238,244,245,246,248,254,255,256,258,264,265,266,268,274,275,276,278,284,285,286,288,294,295,296,298,304,305,306,308,314,315,316,318,324,325,326,328,334,335,336,338,344,345,346,348,354,355,356,358,364,365,366,368,374,375,376,378,382,384,388,391,395,400,401,402,407,408,411,412,417,418,421,422,427,428,431,435,436,438,440,446,447,449,454,455,459,460,465,466,469,474,475,476,480,482,485,487,491,494,495,498,499,501,502,506,509,512,513,516,517,519,523,525,529,532,533,536,537,539,541
-----computeFrom-----
62,63
62,64
73,74
73,75
74,75
74,76
94,95
94,96
100,101
100,102
111,112
111,113
112,113
112,114
132,133
132,134
138,139
138,140
147,148
147,149
156,157
156,158
190,191
190,192
240,241
240,242
250,251
250,252
260,261
260,262
270,271
270,272
280,281
280,282
290,291
290,292
300,301
300,302
310,311
310,312
320,321
320,322
330,331
330,332
340,341
340,342
350,351
350,352
360,361
360,362
370,371
370,372
397,398
397,399
404,405
404,406
414,415
414,416
424,425
424,426
442,443
442,444
451,452
451,453
462,463
462,464
471,472
471,473
504,505
504,506
521,522
521,523
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
voidmace_pcibrattach(struct device *parent, struct device *self, void *aux){	struct mace_pcibr_softc *sc = (struct mace_pcibr_softc *)self;	struct pcibus_attach_args pba;	struct confargs *ca = aux;	pcireg_t pcireg;	/* Create extents for PCI mappings */	mace_pcibbus_io_tag.bus_extent = extent_create("pci_io",	    MACE_PCI_IO_BASE, MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_io_ext_storage,	    sizeof(pci_io_ext_storage), EX_NOCOALESCE|EX_NOWAIT);	mace_pcibbus_mem_tag.bus_extent = extent_create("pci_mem",	    MACE_PCI_MEM_BASE, MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_mem_ext_storage,	    sizeof(pci_mem_ext_storage), EX_NOCOALESCE|EX_NOWAIT);	/* local -> PCI MEM mapping offset */	sc->sc_mem_bus_space = &mace_pcibbus_mem_tag;	/* local -> PCI IO mapping offset */	sc->sc_io_bus_space = &mace_pcibbus_io_tag;	/* Map in PCI control registers */	sc->sc_memt = ca->ca_memt;	if (bus_space_map(sc->sc_memt, MACE_PCI_OFFS, 4096, 0, &sc->sc_memh)) {		printf(": can't map PCI control registers\n");		return;	}	pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_REVISION);	printf(": mace rev %d, host system O2\n", pcireg);	/* Register the PCI ERROR interrupt handler */	macebus_intr_establish(NULL, 8, IST_LEVEL, IPL_HIGH,	    mace_pcibr_errintr, (void *)sc, sc->sc_dev.dv_xname);	sc->sc_pc.pc_conf_v = sc;	sc->sc_pc.pc_attach_hook = mace_pcibr_attach_hook;	sc->sc_pc.pc_make_tag = mace_pcibr_make_tag;	sc->sc_pc.pc_decompose_tag = mace_pcibr_decompose_tag;	sc->sc_pc.pc_bus_maxdevs = mace_pcibr_bus_maxdevs;	sc->sc_pc.pc_conf_read = mace_pcibr_conf_read;	sc->sc_pc.pc_conf_write = mace_pcibr_conf_write;	sc->sc_pc.pc_intr_v = NULL;	sc->sc_pc.pc_intr_map = mace_pcibr_intr_map;	sc->sc_pc.pc_intr_string = mace_pcibr_intr_string;	sc->sc_pc.pc_intr_establish = mace_pcibr_intr_establish;	sc->sc_pc.pc_intr_disestablish = mace_pcibr_intr_disestablish;	sc->sc_pc.pc_intr_line = mace_pcibr_intr_line;	sc->sc_pc.pc_ppb_setup = mace_pcibr_ppb_setup;#if NCARDBUS > 0	sc->sc_pc.pc_rbus_parent_io = mace_pcibr_rbus_parent_io;	sc->sc_pc.pc_rbus_parent_mem = mace_pcibr_rbus_parent_mem;#endif	/*	 * The O2 firmware sucks.  It makes a mess off I/O BARs and	 * an even bigger mess for PCI-PCI bridges.	 */	mace_pcibr_configure(sc);	/*	 *  Configure our PCI devices.	 */	bzero(&pba, sizeof(pba));	pba.pba_busname = "pci";	pba.pba_iot = sc->sc_io_bus_space;	pba.pba_memt = sc->sc_mem_bus_space;	pba.pba_dmat = malloc(sizeof(pci_bus_dma_tag), M_DEVBUF, M_NOWAIT);	*pba.pba_dmat = pci_bus_dma_tag;	pba.pba_pc = &sc->sc_pc;	pba.pba_domain = pci_ndomains++;	pba.pba_bus = 0;	config_found(self, &pba, mace_pcibrprint);	/* Clear PCI errors and set up error interrupt */	bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_ERROR_FLAGS, 0);	pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL);	pcireg |= MACE_PCI_INTCTRL;	bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL, pcireg);}
void
mace_pcibrattach(struct device *parent, struct device *self, void *aux)
mace_pcibrattach
struct device *parent
struct device
device
*parent
*
parent
struct device *self
struct device
device
*self
*
self
void *aux
void
*aux
*
aux
{	struct mace_pcibr_softc *sc = (struct mace_pcibr_softc *)self;	struct pcibus_attach_args pba;	struct confargs *ca = aux;	pcireg_t pcireg;	/* Create extents for PCI mappings */	mace_pcibbus_io_tag.bus_extent = extent_create("pci_io",	    MACE_PCI_IO_BASE, MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_io_ext_storage,	    sizeof(pci_io_ext_storage), EX_NOCOALESCE|EX_NOWAIT);	mace_pcibbus_mem_tag.bus_extent = extent_create("pci_mem",	    MACE_PCI_MEM_BASE, MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_mem_ext_storage,	    sizeof(pci_mem_ext_storage), EX_NOCOALESCE|EX_NOWAIT);	/* local -> PCI MEM mapping offset */	sc->sc_mem_bus_space = &mace_pcibbus_mem_tag;	/* local -> PCI IO mapping offset */	sc->sc_io_bus_space = &mace_pcibbus_io_tag;	/* Map in PCI control registers */	sc->sc_memt = ca->ca_memt;	if (bus_space_map(sc->sc_memt, MACE_PCI_OFFS, 4096, 0, &sc->sc_memh)) {		printf(": can't map PCI control registers\n");		return;	}	pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_REVISION);	printf(": mace rev %d, host system O2\n", pcireg);	/* Register the PCI ERROR interrupt handler */	macebus_intr_establish(NULL, 8, IST_LEVEL, IPL_HIGH,	    mace_pcibr_errintr, (void *)sc, sc->sc_dev.dv_xname);	sc->sc_pc.pc_conf_v = sc;	sc->sc_pc.pc_attach_hook = mace_pcibr_attach_hook;	sc->sc_pc.pc_make_tag = mace_pcibr_make_tag;	sc->sc_pc.pc_decompose_tag = mace_pcibr_decompose_tag;	sc->sc_pc.pc_bus_maxdevs = mace_pcibr_bus_maxdevs;	sc->sc_pc.pc_conf_read = mace_pcibr_conf_read;	sc->sc_pc.pc_conf_write = mace_pcibr_conf_write;	sc->sc_pc.pc_intr_v = NULL;	sc->sc_pc.pc_intr_map = mace_pcibr_intr_map;	sc->sc_pc.pc_intr_string = mace_pcibr_intr_string;	sc->sc_pc.pc_intr_establish = mace_pcibr_intr_establish;	sc->sc_pc.pc_intr_disestablish = mace_pcibr_intr_disestablish;	sc->sc_pc.pc_intr_line = mace_pcibr_intr_line;	sc->sc_pc.pc_ppb_setup = mace_pcibr_ppb_setup;#if NCARDBUS > 0	sc->sc_pc.pc_rbus_parent_io = mace_pcibr_rbus_parent_io;	sc->sc_pc.pc_rbus_parent_mem = mace_pcibr_rbus_parent_mem;#endif	/*	 * The O2 firmware sucks.  It makes a mess off I/O BARs and	 * an even bigger mess for PCI-PCI bridges.	 */	mace_pcibr_configure(sc);	/*	 *  Configure our PCI devices.	 */	bzero(&pba, sizeof(pba));	pba.pba_busname = "pci";	pba.pba_iot = sc->sc_io_bus_space;	pba.pba_memt = sc->sc_mem_bus_space;	pba.pba_dmat = malloc(sizeof(pci_bus_dma_tag), M_DEVBUF, M_NOWAIT);	*pba.pba_dmat = pci_bus_dma_tag;	pba.pba_pc = &sc->sc_pc;	pba.pba_domain = pci_ndomains++;	pba.pba_bus = 0;	config_found(self, &pba, mace_pcibrprint);	/* Clear PCI errors and set up error interrupt */	bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_ERROR_FLAGS, 0);	pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL);	pcireg |= MACE_PCI_INTCTRL;	bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL, pcireg);}
struct mace_pcibr_softc *sc = (struct mace_pcibr_softc *)self;
struct mace_pcibr_softc *sc = (struct mace_pcibr_softc *)self;
struct mace_pcibr_softc
mace_pcibr_softc
*sc = (struct mace_pcibr_softc *)self
*
sc
= (struct mace_pcibr_softc *)self
(struct mace_pcibr_softc *)self
struct mace_pcibr_softc *
struct mace_pcibr_softc
mace_pcibr_softc
*
*
self
self
struct pcibus_attach_args pba;
struct pcibus_attach_args pba;
struct pcibus_attach_args
pcibus_attach_args
pba
pba
struct confargs *ca = aux;
struct confargs *ca = aux;
struct confargs
confargs
*ca = aux
*
ca
= aux
aux
aux
pcireg_t pcireg;
pcireg_t pcireg;
pcireg_t
pcireg_t
pcireg
pcireg
mace_pcibbus_io_tag.bus_extent = extent_create("pci_io",	    MACE_PCI_IO_BASE, MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_io_ext_storage,	    sizeof(pci_io_ext_storage), EX_NOCOALESCE|EX_NOWAIT);
mace_pcibbus_io_tag.bus_extent = extent_create("pci_io",	    MACE_PCI_IO_BASE, MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_io_ext_storage,	    sizeof(pci_io_ext_storage), EX_NOCOALESCE|EX_NOWAIT)
mace_pcibbus_io_tag.bus_extent
mace_pcibbus_io_tag
mace_pcibbus_io_tag
bus_extent
extent_create("pci_io",	    MACE_PCI_IO_BASE, MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_io_ext_storage,	    sizeof(pci_io_ext_storage), EX_NOCOALESCE|EX_NOWAIT)
extent_create
extent_create
"pci_io"
MACE_PCI_IO_BASE
MACE_PCI_IO_BASE
MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1
MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE
MACE_PCI_IO_BASE
MACE_PCI_IO_BASE
MACE_PCI_IO_SIZE
MACE_PCI_IO_SIZE
1
M_DEVBUF
M_DEVBUF
(caddr_t)pci_io_ext_storage
caddr_t
caddr_t
caddr_t

pci_io_ext_storage
pci_io_ext_storage
sizeof(pci_io_ext_storage)
pci_io_ext_storage
pci_io_ext_storage
pci_io_ext_storage

EX_NOCOALESCE|EX_NOWAIT
EX_NOCOALESCE
EX_NOCOALESCE
EX_NOWAIT
EX_NOWAIT
mace_pcibbus_mem_tag.bus_extent = extent_create("pci_mem",	    MACE_PCI_MEM_BASE, MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_mem_ext_storage,	    sizeof(pci_mem_ext_storage), EX_NOCOALESCE|EX_NOWAIT);
mace_pcibbus_mem_tag.bus_extent = extent_create("pci_mem",	    MACE_PCI_MEM_BASE, MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_mem_ext_storage,	    sizeof(pci_mem_ext_storage), EX_NOCOALESCE|EX_NOWAIT)
mace_pcibbus_mem_tag.bus_extent
mace_pcibbus_mem_tag
mace_pcibbus_mem_tag
bus_extent
extent_create("pci_mem",	    MACE_PCI_MEM_BASE, MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1,	    M_DEVBUF, (caddr_t)pci_mem_ext_storage,	    sizeof(pci_mem_ext_storage), EX_NOCOALESCE|EX_NOWAIT)
extent_create
extent_create
"pci_mem"
MACE_PCI_MEM_BASE
MACE_PCI_MEM_BASE
MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1
MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE
MACE_PCI_MEM_BASE
MACE_PCI_MEM_BASE
MACE_PCI_MEM_SIZE
MACE_PCI_MEM_SIZE
1
M_DEVBUF
M_DEVBUF
(caddr_t)pci_mem_ext_storage
caddr_t
caddr_t
caddr_t

pci_mem_ext_storage
pci_mem_ext_storage
sizeof(pci_mem_ext_storage)
pci_mem_ext_storage
pci_mem_ext_storage
pci_mem_ext_storage

EX_NOCOALESCE|EX_NOWAIT
EX_NOCOALESCE
EX_NOCOALESCE
EX_NOWAIT
EX_NOWAIT
sc->sc_mem_bus_space = &mace_pcibbus_mem_tag;
sc->sc_mem_bus_space = &mace_pcibbus_mem_tag
sc->sc_mem_bus_space
sc
sc
sc_mem_bus_space
&mace_pcibbus_mem_tag
mace_pcibbus_mem_tag
mace_pcibbus_mem_tag
sc->sc_io_bus_space = &mace_pcibbus_io_tag;
sc->sc_io_bus_space = &mace_pcibbus_io_tag
sc->sc_io_bus_space
sc
sc
sc_io_bus_space
&mace_pcibbus_io_tag
mace_pcibbus_io_tag
mace_pcibbus_io_tag
sc->sc_memt = ca->ca_memt;
sc->sc_memt = ca->ca_memt
sc->sc_memt
sc
sc
sc_memt
ca->ca_memt
ca
ca
ca_memt
if (bus_space_map(sc->sc_memt, MACE_PCI_OFFS, 4096, 0, &sc->sc_memh)) {		printf(": can't map PCI control registers\n");		return;	}
bus_space_map(sc->sc_memt, MACE_PCI_OFFS, 4096, 0, &sc->sc_memh)
bus_space_map
bus_space_map
sc->sc_memt
sc
sc
sc_memt
MACE_PCI_OFFS
MACE_PCI_OFFS
4096
0
&sc->sc_memh
sc->sc_memh
sc
sc
sc_memh
{		printf(": can't map PCI control registers\n");		return;	}
printf(": can't map PCI control registers\n");
printf(": can't map PCI control registers\n")
printf
printf
": can't map PCI control registers\n"
return;
pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_REVISION);
pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_REVISION)
pcireg
pcireg
bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_REVISION)
bus_space_read_4
bus_space_read_4
sc->sc_memt
sc
sc
sc_memt
sc->sc_memh
sc
sc
sc_memh
MACE_PCI_REVISION
MACE_PCI_REVISION
printf(": mace rev %d, host system O2\n", pcireg);
printf(": mace rev %d, host system O2\n", pcireg)
printf
printf
": mace rev %d, host system O2\n"
pcireg
pcireg
macebus_intr_establish(NULL, 8, IST_LEVEL, IPL_HIGH,	    mace_pcibr_errintr, (void *)sc, sc->sc_dev.dv_xname);
macebus_intr_establish(NULL, 8, IST_LEVEL, IPL_HIGH,	    mace_pcibr_errintr, (void *)sc, sc->sc_dev.dv_xname)
macebus_intr_establish
macebus_intr_establish
NULL
NULL
8
IST_LEVEL
IST_LEVEL
IPL_HIGH
IPL_HIGH
mace_pcibr_errintr
mace_pcibr_errintr
(void *)sc
void *
void
*
*
sc
sc
sc->sc_dev.dv_xname
sc->sc_dev
sc
sc
sc_dev
dv_xname
sc->sc_pc.pc_conf_v = sc;
sc->sc_pc.pc_conf_v = sc
sc->sc_pc.pc_conf_v
sc->sc_pc
sc
sc
sc_pc
pc_conf_v
sc
sc
sc->sc_pc.pc_attach_hook = mace_pcibr_attach_hook;
sc->sc_pc.pc_attach_hook = mace_pcibr_attach_hook
sc->sc_pc.pc_attach_hook
sc->sc_pc
sc
sc
sc_pc
pc_attach_hook
mace_pcibr_attach_hook
mace_pcibr_attach_hook
sc->sc_pc.pc_make_tag = mace_pcibr_make_tag;
sc->sc_pc.pc_make_tag = mace_pcibr_make_tag
sc->sc_pc.pc_make_tag
sc->sc_pc
sc
sc
sc_pc
pc_make_tag
mace_pcibr_make_tag
mace_pcibr_make_tag
sc->sc_pc.pc_decompose_tag = mace_pcibr_decompose_tag;
sc->sc_pc.pc_decompose_tag = mace_pcibr_decompose_tag
sc->sc_pc.pc_decompose_tag
sc->sc_pc
sc
sc
sc_pc
pc_decompose_tag
mace_pcibr_decompose_tag
mace_pcibr_decompose_tag
sc->sc_pc.pc_bus_maxdevs = mace_pcibr_bus_maxdevs;
sc->sc_pc.pc_bus_maxdevs = mace_pcibr_bus_maxdevs
sc->sc_pc.pc_bus_maxdevs
sc->sc_pc
sc
sc
sc_pc
pc_bus_maxdevs
mace_pcibr_bus_maxdevs
mace_pcibr_bus_maxdevs
sc->sc_pc.pc_conf_read = mace_pcibr_conf_read;
sc->sc_pc.pc_conf_read = mace_pcibr_conf_read
sc->sc_pc.pc_conf_read
sc->sc_pc
sc
sc
sc_pc
pc_conf_read
mace_pcibr_conf_read
mace_pcibr_conf_read
sc->sc_pc.pc_conf_write = mace_pcibr_conf_write;
sc->sc_pc.pc_conf_write = mace_pcibr_conf_write
sc->sc_pc.pc_conf_write
sc->sc_pc
sc
sc
sc_pc
pc_conf_write
mace_pcibr_conf_write
mace_pcibr_conf_write
sc->sc_pc.pc_intr_v = NULL;
sc->sc_pc.pc_intr_v = NULL
sc->sc_pc.pc_intr_v
sc->sc_pc
sc
sc
sc_pc
pc_intr_v
NULL
NULL
sc->sc_pc.pc_intr_map = mace_pcibr_intr_map;
sc->sc_pc.pc_intr_map = mace_pcibr_intr_map
sc->sc_pc.pc_intr_map
sc->sc_pc
sc
sc
sc_pc
pc_intr_map
mace_pcibr_intr_map
mace_pcibr_intr_map
sc->sc_pc.pc_intr_string = mace_pcibr_intr_string;
sc->sc_pc.pc_intr_string = mace_pcibr_intr_string
sc->sc_pc.pc_intr_string
sc->sc_pc
sc
sc
sc_pc
pc_intr_string
mace_pcibr_intr_string
mace_pcibr_intr_string
sc->sc_pc.pc_intr_establish = mace_pcibr_intr_establish;
sc->sc_pc.pc_intr_establish = mace_pcibr_intr_establish
sc->sc_pc.pc_intr_establish
sc->sc_pc
sc
sc
sc_pc
pc_intr_establish
mace_pcibr_intr_establish
mace_pcibr_intr_establish
sc->sc_pc.pc_intr_disestablish = mace_pcibr_intr_disestablish;
sc->sc_pc.pc_intr_disestablish = mace_pcibr_intr_disestablish
sc->sc_pc.pc_intr_disestablish
sc->sc_pc
sc
sc
sc_pc
pc_intr_disestablish
mace_pcibr_intr_disestablish
mace_pcibr_intr_disestablish
sc->sc_pc.pc_intr_line = mace_pcibr_intr_line;
sc->sc_pc.pc_intr_line = mace_pcibr_intr_line
sc->sc_pc.pc_intr_line
sc->sc_pc
sc
sc
sc_pc
pc_intr_line
mace_pcibr_intr_line
mace_pcibr_intr_line
sc->sc_pc.pc_ppb_setup = mace_pcibr_ppb_setup;
sc->sc_pc.pc_ppb_setup = mace_pcibr_ppb_setup
sc->sc_pc.pc_ppb_setup
sc->sc_pc
sc
sc
sc_pc
pc_ppb_setup
mace_pcibr_ppb_setup
mace_pcibr_ppb_setup
mace_pcibr_configure(sc);
mace_pcibr_configure(sc)
mace_pcibr_configure
mace_pcibr_configure
sc
sc
bzero(&pba, sizeof(pba));
bzero(&pba, sizeof(pba))
bzero
bzero
&pba
pba
pba
sizeof(pba)
(pba)
pba
pba
pba.pba_busname = "pci";
pba.pba_busname = "pci"
pba.pba_busname
pba
pba
pba_busname
"pci"
pba.pba_iot = sc->sc_io_bus_space;
pba.pba_iot = sc->sc_io_bus_space
pba.pba_iot
pba
pba
pba_iot
sc->sc_io_bus_space
sc
sc
sc_io_bus_space
pba.pba_memt = sc->sc_mem_bus_space;
pba.pba_memt = sc->sc_mem_bus_space
pba.pba_memt
pba
pba
pba_memt
sc->sc_mem_bus_space
sc
sc
sc_mem_bus_space
pba.pba_dmat = malloc(sizeof(pci_bus_dma_tag), M_DEVBUF, M_NOWAIT);
pba.pba_dmat = malloc(sizeof(pci_bus_dma_tag), M_DEVBUF, M_NOWAIT)
pba.pba_dmat
pba
pba
pba_dmat
malloc(sizeof(pci_bus_dma_tag), M_DEVBUF, M_NOWAIT)
malloc
malloc
sizeof(pci_bus_dma_tag)
pci_bus_dma_tag
pci_bus_dma_tag
pci_bus_dma_tag

M_DEVBUF
M_DEVBUF
M_NOWAIT
M_NOWAIT
*pba.pba_dmat = pci_bus_dma_tag;
*pba.pba_dmat = pci_bus_dma_tag
*pba.pba_dmat
pba.pba_dmat
pba
pba
pba_dmat
pci_bus_dma_tag
pci_bus_dma_tag
pba.pba_pc = &sc->sc_pc;
pba.pba_pc = &sc->sc_pc
pba.pba_pc
pba
pba
pba_pc
&sc->sc_pc
sc->sc_pc
sc
sc
sc_pc
pba.pba_domain = pci_ndomains++;
pba.pba_domain = pci_ndomains++
pba.pba_domain
pba
pba
pba_domain
pci_ndomains++
pci_ndomains
pci_ndomains
pba.pba_bus = 0;
pba.pba_bus = 0
pba.pba_bus
pba
pba
pba_bus
0
config_found(self, &pba, mace_pcibrprint);
config_found(self, &pba, mace_pcibrprint)
config_found
config_found
self
self
&pba
pba
pba
mace_pcibrprint
mace_pcibrprint
bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_ERROR_FLAGS, 0);
bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_ERROR_FLAGS, 0)
bus_space_write_4
bus_space_write_4
sc->sc_memt
sc
sc
sc_memt
sc->sc_memh
sc
sc
sc_memh
MACE_PCI_ERROR_FLAGS
MACE_PCI_ERROR_FLAGS
0
pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL);
pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL)
pcireg
pcireg
bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL)
bus_space_read_4
bus_space_read_4
sc->sc_memt
sc
sc
sc_memt
sc->sc_memh
sc
sc
sc_memh
MACE_PCI_CONTROL
MACE_PCI_CONTROL
pcireg |= MACE_PCI_INTCTRL;
pcireg |= MACE_PCI_INTCTRL
pcireg
pcireg
MACE_PCI_INTCTRL
MACE_PCI_INTCTRL
bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL, pcireg);
bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL, pcireg)
bus_space_write_4
bus_space_write_4
sc->sc_memt
sc
sc
sc_memt
sc->sc_memh
sc
sc
sc_memh
MACE_PCI_CONTROL
MACE_PCI_CONTROL
pcireg
pcireg
-----joern-----
(137,314,0)
(298,12,0)
(54,306,0)
(246,201,0)
(308,127,0)
(187,12,0)
(42,80,0)
(92,215,0)
(132,270,0)
(254,123,0)
(315,298,0)
(276,12,0)
(112,62,0)
(242,110,0)
(249,221,0)
(62,12,0)
(155,298,0)
(76,12,0)
(167,249,0)
(107,273,0)
(19,25,0)
(6,295,0)
(35,87,0)
(63,12,0)
(30,201,0)
(75,87,0)
(217,212,0)
(155,146,0)
(74,226,0)
(197,201,0)
(264,48,0)
(261,197,0)
(174,201,0)
(216,126,0)
(28,199,0)
(96,65,0)
(316,34,0)
(220,201,0)
(80,273,0)
(91,126,0)
(173,141,0)
(284,251,0)
(249,12,0)
(207,50,0)
(322,242,0)
(319,107,0)
(147,251,0)
(124,70,0)
(186,301,0)
(2,89,0)
(143,12,0)
(104,60,0)
(202,220,0)
(279,212,0)
(21,81,0)
(198,256,0)
(81,248,0)
(79,80,0)
(97,291,0)
(309,189,0)
(239,258,0)
(37,219,0)
(252,245,0)
(281,231,0)
(108,120,0)
(202,12,0)
(159,296,0)
(298,155,0)
(306,54,0)
(68,38,0)
(192,194,0)
(143,203,0)
(136,181,0)
(149,183,0)
(300,123,0)
(226,201,0)
(129,157,0)
(235,184,0)
(187,304,0)
(24,201,0)
(312,240,0)
(254,105,0)
(36,201,0)
(275,237,0)
(327,237,0)
(294,63,0)
(170,12,0)
(90,138,0)
(34,259,0)
(219,295,0)
(274,12,0)
(18,133,0)
(178,219,0)
(118,181,0)
(196,7,0)
(183,149,0)
(22,201,0)
(287,126,0)
(56,65,0)
(304,187,0)
(313,69,0)
(326,12,0)
(188,201,0)
(149,34,0)
(48,145,0)
(109,12,0)
(65,12,0)
(234,181,0)
(310,58,0)
(285,24,0)
(76,113,0)
(245,133,0)
(181,49,0)
(212,279,0)
(153,177,0)
(85,170,0)
(38,12,0)
(238,291,0)
(206,190,0)
(292,314,0)
(295,219,0)
(49,181,0)
(177,201,0)
(32,298,0)
(17,5,0)
(290,82,0)
(95,201,0)
(194,12,0)
(116,164,0)
(25,19,0)
(158,138,0)
(34,152,0)
(88,82,0)
(162,296,0)
(280,174,0)
(210,40,0)
(218,63,0)
(181,60,0)
(95,189,0)
(135,34,0)
(126,216,0)
(244,151,0)
(31,254,0)
(81,12,0)
(306,12,0)
(196,272,0)
(241,113,0)
(198,204,0)
(154,201,0)
(60,181,0)
(247,81,0)
(26,60,0)
(176,127,0)
(129,251,0)
(69,174,0)
(87,205,0)
(70,12,0)
(274,77,0)
(38,95,0)
(164,10,0)
(200,183,0)
(314,25,0)
(14,157,0)
(305,128,0)
(127,201,0)
(212,12,0)
(82,146,0)
(133,201,0)
(314,201,0)
(71,38,0)
(53,201,0)
(245,138,0)
(219,18,0)
(70,133,0)
(54,283,0)
(113,76,0)
(276,201,0)
(103,204,0)
(231,184,0)
(120,12,0)
(245,12,0)
(114,245,0)
(295,12,0)
(52,192,0)
(192,226,0)
(172,262,0)
(41,100,0)
(304,70,0)
(120,138,0)
(78,233,0)
(142,181,0)
(113,177,0)
(9,49,0)
(146,201,0)
(47,76,0)
(57,155,0)
(288,262,0)
(170,5,0)
(131,299,0)
(299,201,0)
(225,326,0)
(84,304,0)
(233,155,0)
(59,107,0)
(3,306,0)
(115,313,0)
(69,313,0)
(222,274,0)
(240,201,0)
(257,151,0)
(248,24,0)
(101,36,0)
(53,202,0)
(311,314,0)
(262,30,0)
(321,12,0)
(190,151,0)
(51,87,0)
(189,95,0)
(283,201,0)
(67,83,0)
(1,35,0)
(62,112,0)
(211,301,0)
(314,143,0)
(148,326,0)
(163,201,0)
(279,193,0)
(150,55,0)
(173,181,0)
(196,201,0)
(33,201,0)
(72,193,0)
(307,152,0)
(255,100,0)
(126,133,0)
(302,231,0)
(324,262,0)
(107,12,0)
(272,196,0)
(180,283,0)
(296,127,0)
(25,314,0)
(89,205,0)
(12,201,0)
(282,313,0)
(230,34,0)
(105,12,0)
(171,105,0)
(304,55,0)
(5,170,0)
(243,299,0)
(18,12,0)
(233,12,0)
(181,142,0)
(10,181,0)
(224,194,0)
(4,19,0)
(181,173,0)
(161,18,0)
(193,201,0)
(138,201,0)
(89,2,0)
(34,316,0)
(253,145,0)
(73,7,0)
(248,81,0)
(140,142,0)
(236,238,0)
(151,12,0)
(141,173,0)
(130,25,0)
(259,201,0)
(175,183,0)
(145,320,0)
(231,30,0)
(117,213,0)
(89,12,0)
(297,204,0)
(55,201,0)
(110,228,0)
(87,35,0)
(323,146,0)
(168,312,0)
(199,220,0)
(152,34,0)
(204,198,0)
(286,69,0)
(273,107,0)
(112,216,0)
(251,129,0)
(145,48,0)
(291,33,0)
(23,12,0)
(121,48,0)
(30,231,0)
(110,201,0)
(61,152,0)
(190,36,0)
(288,58,0)
(270,34,0)
(181,10,0)
(8,295,0)
(317,321,0)
(202,53,0)
(204,12,0)
(119,170,0)
(109,201,0)
(50,53,0)
(216,112,0)
(318,306,0)
(182,149,0)
(63,133,0)
(166,128,0)
(265,213,0)
(289,314,0)
(155,233,0)
(320,201,0)
(238,12,0)
(225,215,0)
(267,194,0)
(160,202,0)
(44,143,0)
(46,40,0)
(87,201,0)
(106,279,0)
(266,65,0)
(291,238,0)
(237,49,0)
(293,77,0)
(29,316,0)
(107,95,0)
(220,199,0)
(66,76,0)
(278,54,0)
(64,256,0)
(49,237,0)
(258,201,0)
(209,62,0)
(102,34,0)
(40,30,0)
(259,34,0)
(65,56,0)
(138,82,0)
(296,133,0)
(138,120,0)
(83,201,0)
(105,254,0)
(146,155,0)
(299,55,0)
(223,56,0)
(34,149,0)
(301,259,0)
(7,196,0)
(195,216,0)
(82,201,0)
(156,201,0)
(251,12,0)
(233,133,0)
(151,190,0)
(93,274,0)
(143,314,0)
(98,202,0)
(56,258,0)
(321,220,0)
(229,62,0)
(0,242,0)
(11,233,0)
(303,50,0)
(203,143,0)
(139,228,0)
(123,201,0)
(263,216,0)
(99,164,0)
(169,166,0)
(157,201,0)
(228,110,0)
(191,249,0)
(213,246,0)
(138,245,0)
(250,187,0)
(48,12,0)
(325,18,0)
(86,70,0)
(227,326,0)
(100,197,0)
(260,19,0)
(208,105,0)
(134,120,0)
(13,321,0)
(70,304,0)
(18,219,0)
(144,305,0)
(273,201,0)
(16,225,0)
(268,33,0)
(20,198,0)
(77,83,0)
(125,89,0)
(34,270,0)
(277,312,0)
(122,238,0)
(214,246,0)
(94,187,0)
(19,12,0)
(240,221,0)
(221,240,0)
(326,225,0)
(313,12,0)
(27,212,0)
(45,248,0)
(194,192,0)
(269,129,0)
(270,39,0)
(219,201,0)
(262,288,0)
(215,201,0)
(5,276,0)
(39,270,0)
(127,15,0)
(232,109,0)
(271,216,0)
(43,320,0)
(184,231,0)
(58,201,0)
(77,274,0)
(179,314,0)
(10,201,0)
(111,276,0)
(12,89,0)
(55,304,0)
(256,201,0)
(133,296,0)
(221,249,0)
(126,12,0)
(165,173,0)
(185,272,0)
(85,119,1)
(42,246,1)
(301,211,1)
(70,86,1)
(302,184,1)
(219,37,1)
(92,225,1)
(126,91,1)
(54,306,1)
(145,48,1)
(30,231,1)
(123,300,1)
(82,88,1)
(107,95,1)
(236,122,1)
(43,145,1)
(65,12,1)
(18,133,1)
(95,189,1)
(238,236,1)
(263,195,1)
(162,63,1)
(121,83,1)
(181,60,1)
(277,58,1)
(46,210,1)
(168,277,1)
(195,126,1)
(56,223,1)
(232,36,1)
(219,18,1)
(125,23,1)
(279,212,1)
(226,74,1)
(77,274,1)
(38,12,1)
(233,12,1)
(278,306,1)
(295,12,1)
(225,16,1)
(134,245,1)
(216,126,1)
(131,243,1)
(194,267,1)
(196,272,1)
(148,227,1)
(179,311,1)
(198,204,1)
(45,81,1)
(170,85,1)
(186,127,1)
(229,271,1)
(100,41,1)
(314,25,1)
(303,207,1)
(165,118,1)
(318,320,1)
(242,0,1)
(249,191,1)
(118,49,1)
(4,260,1)
(70,12,1)
(175,200,1)
(251,12,1)
(237,275,1)
(238,12,1)
(37,178,1)
(181,173,1)
(305,166,1)
(290,146,1)
(44,137,1)
(214,213,1)
(126,133,1)
(36,101,1)
(138,120,1)
(313,282,1)
(257,244,1)
(216,112,1)
(144,305,1)
(316,29,1)
(114,82,1)
(210,53,1)
(21,157,1)
(299,131,1)
(189,309,1)
(252,114,1)
(88,290,1)
(144,138,1)
(82,146,1)
(8,18,1)
(326,12,1)
(299,55,1)
(72,279,1)
(310,288,1)
(230,149,1)
(58,310,1)
(63,218,1)
(34,152,1)
(81,247,1)
(76,12,1)
(185,7,1)
(151,12,1)
(254,31,1)
(14,129,1)
(191,167,1)
(198,20,1)
(153,113,1)
(147,284,1)
(169,216,1)
(107,319,1)
(7,73,1)
(289,292,1)
(59,80,1)
(256,64,1)
(99,116,1)
(115,215,1)
(304,187,1)
(239,56,1)
(197,261,1)
(50,303,1)
(132,230,1)
(0,322,1)
(231,184,1)
(12,89,1)
(155,233,1)
(320,43,1)
(173,141,1)
(138,90,1)
(160,98,1)
(296,159,1)
(297,103,1)
(304,84,1)
(66,283,1)
(80,79,1)
(106,212,1)
(295,6,1)
(212,12,1)
(192,52,1)
(52,194,1)
(275,327,1)
(262,30,1)
(223,65,1)
(245,252,1)
(187,12,1)
(40,46,1)
(19,12,1)
(180,54,1)
(248,81,1)
(89,125,1)
(321,12,1)
(110,228,1)
(317,13,1)
(63,12,1)
(117,196,1)
(127,15,1)
(196,7,1)
(276,111,1)
(251,147,1)
(282,115,1)
(56,65,1)
(194,12,1)
(164,99,1)
(193,72,1)
(217,123,1)
(145,253,1)
(206,151,1)
(10,181,1)
(48,264,1)
(84,187,1)
(240,221,1)
(159,162,1)
(86,124,1)
(5,170,1)
(248,45,1)
(47,66,1)
(71,220,1)
(167,312,1)
(325,161,1)
(233,133,1)
(322,240,1)
(111,5,1)
(34,316,1)
(219,295,1)
(129,251,1)
(200,182,1)
(249,12,1)
(212,27,1)
(76,47,1)
(35,1,1)
(142,140,1)
(124,150,1)
(323,219,1)
(311,289,1)
(107,12,1)
(137,179,1)
(28,321,1)
(211,186,1)
(313,12,1)
(183,175,1)
(262,324,1)
(174,280,1)
(103,226,1)
(181,142,1)
(287,133,1)
(161,87,1)
(276,12,1)
(298,32,1)
(279,106,1)
(172,30,1)
(155,57,1)
(298,12,1)
(64,198,1)
(288,262,1)
(91,287,1)
(17,170,1)
(260,143,1)
(202,160,1)
(136,164,1)
(146,155,1)
(68,71,1)
(204,297,1)
(309,38,1)
(268,291,1)
(102,301,1)
(171,258,1)
(215,92,1)
(266,96,1)
(187,94,1)
(139,242,1)
(312,168,1)
(286,313,1)
(218,294,1)
(254,105,1)
(113,76,1)
(75,197,1)
(324,172,1)
(222,24,1)
(20,204,1)
(49,237,1)
(55,304,1)
(293,274,1)
(273,107,1)
(208,171,1)
(321,317,1)
(247,21,1)
(89,2,1)
(116,259,1)
(57,298,1)
(271,263,1)
(190,206,1)
(54,278,1)
(207,273,1)
(225,326,1)
(181,49,1)
(259,34,1)
(253,48,1)
(77,293,1)
(9,234,1)
(261,100,1)
(300,254,1)
(306,12,1)
(143,203,1)
(126,12,1)
(308,12,1)
(16,326,1)
(60,104,1)
(199,28,1)
(291,238,1)
(294,95,1)
(307,61,1)
(281,302,1)
(155,298,1)
(135,102,1)
(265,117,1)
(70,133,1)
(234,136,1)
(190,151,1)
(149,183,1)
(177,153,1)
(53,202,1)
(5,17,1)
(127,176,1)
(119,314,1)
(258,239,1)
(246,214,1)
(245,12,1)
(93,222,1)
(280,69,1)
(220,199,1)
(202,220,1)
(97,238,1)
(284,33,1)
(166,169,1)
(122,193,1)
(69,286,1)
(264,121,1)
(105,208,1)
(138,245,1)
(73,109,1)
(250,70,1)
(94,250,1)
(176,308,1)
(292,299,1)
(327,9,1)
(48,12,1)
(202,12,1)
(29,270,1)
(74,192,1)
(112,62,1)
(34,270,1)
(304,70,1)
(41,255,1)
(209,229,1)
(18,12,1)
(38,68,1)
(184,235,1)
(120,108,1)
(3,318,1)
(89,205,1)
(61,316,1)
(109,232,1)
(78,11,1)
(24,285,1)
(269,251,1)
(224,276,1)
(291,97,1)
(151,257,1)
(274,93,1)
(33,268,1)
(241,76,1)
(32,315,1)
(326,148,1)
(1,75,1)
(138,82,1)
(270,39,1)
(79,42,1)
(65,266,1)
(108,134,1)
(157,14,1)
(25,19,1)
(245,133,1)
(98,50,1)
(233,78,1)
(170,12,1)
(306,3,1)
(213,265,1)
(158,120,1)
(81,12,1)
(228,139,1)
(227,177,1)
(90,158,1)
(34,149,1)
(152,307,1)
(51,35,1)
(231,281,1)
(315,233,1)
(101,190,1)
(11,323,1)
(105,12,1)
(96,256,1)
(182,135,1)
(221,249,1)
(87,205,1)
(25,130,1)
(243,55,1)
(27,217,1)
(13,10,1)
(143,12,1)
(255,110,1)
(109,12,1)
(19,4,1)
(296,127,1)
(173,165,1)
(283,180,1)
(140,173,1)
(6,8,1)
(204,12,1)
(83,67,1)
(62,12,1)
(69,313,1)
(62,209,1)
(192,194,1)
(274,12,1)
(113,241,1)
(178,295,1)
(26,142,1)
(270,132,1)
(18,325,1)
(129,269,1)
(130,19,1)
(314,143,1)
(285,248,1)
(272,185,1)
(31,105,1)
(67,77,1)
(87,51,1)
(143,44,1)
(120,12,1)
(150,216,1)
(319,59,1)
(133,296,1)
(244,174,1)
(235,40,1)
(267,224,1)
(104,26,1)
(87,35,1)
(173,141,2)
(222,216,2)
(215,216,2)
(181,173,2)
(297,216,2)
(196,7,2)
(285,216,2)
(235,216,2)
(95,189,2)
(81,12,2)
(277,216,2)
(181,60,2)
(83,216,2)
(106,216,2)
(242,216,2)
(3,216,2)
(303,216,2)
(241,216,2)
(251,216,2)
(37,216,2)
(193,216,2)
(321,12,2)
(210,216,2)
(100,216,2)
(41,216,2)
(245,216,2)
(58,216,2)
(123,216,2)
(236,216,2)
(18,216,2)
(67,216,2)
(192,216,2)
(254,216,2)
(153,216,2)
(268,216,2)
(304,216,2)
(225,216,2)
(6,216,2)
(113,76,2)
(143,216,2)
(187,216,2)
(62,12,2)
(219,216,2)
(70,133,2)
(326,216,2)
(238,12,2)
(78,216,2)
(276,12,2)
(35,216,2)
(73,216,2)
(51,216,2)
(158,216,2)
(19,12,2)
(56,65,2)
(69,216,2)
(36,216,2)
(54,216,2)
(278,216,2)
(190,216,2)
(284,216,2)
(5,216,2)
(85,216,2)
(11,216,2)
(240,216,2)
(168,216,2)
(274,216,2)
(86,216,2)
(238,216,2)
(298,216,2)
(172,216,2)
(107,216,2)
(25,19,2)
(261,216,2)
(289,216,2)
(157,216,2)
(127,15,2)
(69,313,2)
(288,262,2)
(114,216,2)
(323,216,2)
(248,216,2)
(82,216,2)
(90,216,2)
(94,216,2)
(180,216,2)
(87,216,2)
(126,12,2)
(112,62,2)
(134,216,2)
(260,216,2)
(217,216,2)
(262,30,2)
(214,216,2)
(305,216,2)
(279,216,2)
(191,216,2)
(4,216,2)
(207,216,2)
(54,306,2)
(226,216,2)
(113,216,2)
(81,216,2)
(93,216,2)
(34,149,2)
(233,216,2)
(30,216,2)
(291,238,2)
(24,216,2)
(258,216,2)
(312,216,2)
(103,216,2)
(25,216,2)
(14,216,2)
(7,216,2)
(145,48,2)
(34,316,2)
(121,216,2)
(77,274,2)
(249,216,2)
(42,216,2)
(319,216,2)
(89,205,2)
(110,228,2)
(202,220,2)
(322,216,2)
(221,249,2)
(72,216,2)
(43,216,2)
(149,183,2)
(89,2,2)
(213,216,2)
(248,81,2)
(44,216,2)
(98,216,2)
(194,12,2)
(274,12,2)
(8,216,2)
(75,216,2)
(245,12,2)
(233,12,2)
(151,12,2)
(231,184,2)
(310,216,2)
(197,216,2)
(224,216,2)
(313,216,2)
(314,143,2)
(295,12,2)
(150,216,2)
(10,181,2)
(133,296,2)
(45,216,2)
(190,151,2)
(314,25,2)
(129,251,2)
(64,216,2)
(208,216,2)
(227,216,2)
(280,216,2)
(296,127,2)
(177,216,2)
(38,12,2)
(66,216,2)
(108,216,2)
(65,12,2)
(219,295,2)
(219,18,2)
(96,216,2)
(254,105,2)
(101,216,2)
(33,216,2)
(202,12,2)
(257,216,2)
(115,216,2)
(216,112,2)
(166,216,2)
(228,216,2)
(49,237,2)
(80,216,2)
(52,216,2)
(178,216,2)
(138,120,2)
(170,216,2)
(204,12,2)
(1,216,2)
(266,216,2)
(223,216,2)
(120,12,2)
(119,216,2)
(30,231,2)
(292,216,2)
(65,216,2)
(143,12,2)
(202,216,2)
(240,221,2)
(20,216,2)
(251,12,2)
(131,216,2)
(53,216,2)
(325,216,2)
(126,133,2)
(220,199,2)
(160,216,2)
(244,216,2)
(105,216,2)
(264,216,2)
(87,205,2)
(88,216,2)
(311,216,2)
(155,216,2)
(138,216,2)
(273,107,2)
(300,216,2)
(124,216,2)
(276,216,2)
(293,216,2)
(326,12,2)
(137,216,2)
(171,216,2)
(324,216,2)
(198,204,2)
(304,187,2)
(50,216,2)
(184,216,2)
(79,216,2)
(130,216,2)
(117,216,2)
(55,216,2)
(48,12,2)
(291,216,2)
(253,216,2)
(181,142,2)
(314,216,2)
(147,216,2)
(143,203,2)
(272,216,2)
(18,133,2)
(82,146,2)
(139,216,2)
(247,216,2)
(281,216,2)
(59,216,2)
(18,12,2)
(76,12,2)
(269,216,2)
(225,326,2)
(27,216,2)
(192,194,2)
(295,216,2)
(34,152,2)
(138,245,2)
(198,216,2)
(16,216,2)
(57,216,2)
(110,216,2)
(146,216,2)
(56,216,2)
(245,133,2)
(298,12,2)
(46,216,2)
(252,216,2)
(318,216,2)
(250,216,2)
(76,216,2)
(174,216,2)
(290,216,2)
(74,216,2)
(107,95,2)
(155,233,2)
(299,216,2)
(249,12,2)
(288,216,2)
(21,216,2)
(265,216,2)
(70,12,2)
(105,12,2)
(109,216,2)
(231,216,2)
(304,70,2)
(306,12,2)
(232,216,2)
(283,216,2)
(315,216,2)
(187,12,2)
(34,270,2)
(282,216,2)
(313,12,2)
(169,216,2)
(53,202,2)
(77,216,2)
(255,216,2)
(155,298,2)
(259,34,2)
(270,39,2)
(206,216,2)
(107,12,2)
(212,12,2)
(17,216,2)
(196,216,2)
(148,216,2)
(320,216,2)
(55,304,2)
(194,216,2)
(138,82,2)
(273,216,2)
(12,89,2)
(31,216,2)
(161,216,2)
(144,305,2)
(111,216,2)
(84,216,2)
(216,126,2)
(5,170,2)
(70,216,2)
(233,133,2)
(299,55,2)
(92,216,2)
(262,216,2)
(120,216,2)
(47,216,2)
(212,216,2)
(19,216,2)
(122,216,2)
(279,212,2)
(129,216,2)
(246,216,2)
(179,216,2)
(146,155,2)
(63,12,2)
(267,216,2)
(167,216,2)
(302,216,2)
(256,216,2)
(151,216,2)
(170,12,2)
(40,216,2)
(48,216,2)
(286,216,2)
(306,216,2)
(0,216,2)
(32,216,2)
(196,272,2)
(239,216,2)
(185,216,2)
(109,12,2)
(145,216,2)
(204,216,2)
(97,216,2)
(243,216,2)
(221,216,2)
(87,35,2)
(181,49,2)
-----------------------------------
(0,pba_domain)
(1,pba)
(2,struct mace_pcibr_softc *)
(3,sc_pc)
(4,sc_dev)
(5,sc->sc_pc.pc_conf_v)
(6,sc_memh)
(7,&pba)
(8,sc)
(9,MACE_PCI_MEM_BASE)
(10,mace_pcibbus_mem_tag.bus_extent = extent_create("pci_mem",\n\\n\\t    MACE_PCI_MEM_BASE, MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1,\n\\n\\t    M_DEVBUF, (caddr_t)
(11,sc)
(12,*sc = (struct mace_pcibr_softc *)
(13,sc)
(14,NULL)
(15,void *aux)
(16,pc_ppb_setup)
(17,pc_conf_v)
(18,sc->sc_memt)
(19,sc->sc_dev)
(20,pc_make_tag)
(21,sc)
(22,sc)
(23,sc)
(24,sc->sc_pc.pc_intr_map = mace_pcibr_intr_map)
(25,sc->sc_dev.dv_xname)
(26,EX_NOCOALESCE)
(27,sc_pc)
(28,mace_pcibbus_mem_tag)
(29,pci_io_ext_storage)
(30,pba.pba_dmat = malloc(sizeof(pci_bus_dma_tag)
(31,pc_bus_maxdevs)
(32,sc_memh)
(33,sc->sc_pc.pc_conf_write = mace_pcibr_conf_write)
(34,extent_create("pci_io",\n\\n\\t    MACE_PCI_IO_BASE, MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1,\n\\n\\t    M_DEVBUF, (caddr_t)
(35,&pba)
(36,sc->sc_pc.pc_rbus_parent_mem = mace_pcibr_rbus_parent_mem)
(37,0)
(38,sc->sc_io_bus_space)
(39,caddr_t)
(40,pba.pba_dmat)
(41,pba_bus)
(42,pba)
(43,mace_pcibr_intr_establish)
(44,sc)
(45,pc_intr_map)
(46,pba_dmat)
(47,sc_pc)
(48,sc->sc_pc)
(49,MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1)
(50,pba.pba_memt)
(51,mace_pcibrprint)
(52,pc_attach_hook)
(53,pba.pba_memt = sc->sc_mem_bus_space)
(54,sc->sc_pc.pc_intr_disestablish)
(55,pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_REVISION)
(56,sc->sc_pc.pc_decompose_tag)
(57,MACE_PCI_CONTROL)
(58,*pba.pba_dmat = pci_bus_dma_tag)
(59,sc)
(60,EX_NOCOALESCE|EX_NOWAIT)
(61,EX_NOCOALESCE)
(62,sc->sc_memh)
(63,sc->sc_memt)
(64,mace_pcibr_make_tag)
(65,sc->sc_pc)
(66,sc)
(67,mace_pcibr_intr_string)
(68,sc_io_bus_space)
(69,sc->sc_pc.pc_rbus_parent_io)
(70,sc->sc_memt)
(71,sc)
(72,mace_pcibr_conf_read)
(73,pba)
(74,mace_pcibr_attach_hook)
(75,self)
(76,sc->sc_pc)
(77,sc->sc_pc.pc_intr_string)
(78,sc_memt)
(79,pba_iot)
(80,pba.pba_iot)
(81,sc->sc_pc)
(82,pcireg |= MACE_PCI_INTCTRL)
(83,sc->sc_pc.pc_intr_string = mace_pcibr_intr_string)
(84,MACE_PCI_REVISION)
(85,sc_pc)
(86,sc_memt)
(87,config_found(self, &pba, mace_pcibrprint)
(88,MACE_PCI_INTCTRL)
(89,(struct mace_pcibr_softc *)
(90,pcireg)
(91,sc_memt)
(92,mace_pcibr_ppb_setup)
(93,sc_pc)
(94,sc_memh)
(95,sc->sc_io_bus_space = &mace_pcibbus_io_tag)
(96,sc)
(97,pc_conf_write)
(98,sc)
(99,bus_extent)
(100,pba.pba_bus)
(101,mace_pcibr_rbus_parent_mem)
(102,"pci_io")
(103,sc)
(104,EX_NOWAIT)
(105,sc->sc_pc)
(106,pc_conf_read)
(107,sc->sc_io_bus_space)
(108,sc_memh)
(109,mace_pcibr_configure(sc)
(110,pba.pba_domain = pci_ndomains++)
(111,sc)
(112,&sc->sc_memh)
(113,sc->sc_pc.pc_intr_line)
(114,sc)
(115,sc)
(116,mace_pcibbus_mem_tag)
(117,pba)
(118,M_DEVBUF)
(119,sc)
(120,sc->sc_memh)
(121,sc)
(122,sc)
(123,sc->sc_pc.pc_bus_maxdevs = mace_pcibr_bus_maxdevs)
(124,sc)
(125,self)
(126,sc->sc_memt)
(127,*ca = aux)
(128,)
(129,sc->sc_pc.pc_intr_v)
(130,dv_xname)
(131,pcireg)
(132,pci_io_ext_storage)
(133,sc->sc_memt = ca->ca_memt)
(134,sc)
(135,MACE_PCI_IO_BASE)
(136,"pci_mem")
(137,mace_pcibr_errintr)
(138,bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL, pcireg)
(139,pci_ndomains)
(140,pci_mem_ext_storage)
(141,caddr_t)
(142,sizeof(pci_mem_ext_storage)
(143,(void *)
(144,RET)
(145,sc->sc_pc.pc_intr_establish)
(146,pcireg = bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL)
(147,sc_pc)
(148,sc_pc)
(149,MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1)
(150,pcireg)
(151,sc->sc_pc)
(152,EX_NOCOALESCE|EX_NOWAIT)
(153,mace_pcibr_intr_line)
(154,pcireg)
(155,bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_CONTROL)
(156,ca)
(157,sc->sc_pc.pc_intr_v = NULL)
(158,MACE_PCI_CONTROL)
(159,ca_memt)
(160,sc_mem_bus_space)
(161,sc)
(162,ca)
(163,if (bus_space_map(sc->sc_memt, MACE_PCI_OFFS, 4096, 0, &sc->sc_memh)
(164,mace_pcibbus_mem_tag.bus_extent)
(165,pci_mem_ext_storage)
(166,printf(": can\'t map PCI control registers\\n")
(167,sc)
(168,pba_pc)
(169,": can\'t map PCI control registers\\n")
(170,sc->sc_pc)
(171,sc)
(172,pba)
(173,(caddr_t)
(174,sc->sc_pc.pc_rbus_parent_io = mace_pcibr_rbus_parent_io)
(175,1)
(176,aux)
(177,sc->sc_pc.pc_intr_line = mace_pcibr_intr_line)
(178,MACE_PCI_ERROR_FLAGS)
(179,IPL_HIGH)
(180,mace_pcibr_intr_disestablish)
(181,extent_create("pci_mem",\n\\n\\t    MACE_PCI_MEM_BASE, MACE_PCI_MEM_BASE + MACE_PCI_MEM_SIZE - 1,\n\\n\\t    M_DEVBUF, (caddr_t)
(182,MACE_PCI_IO_BASE)
(183,MACE_PCI_IO_SIZE - 1)
(184,sizeof(pci_bus_dma_tag)
(185,pba)
(186,mace_pcibbus_io_tag)
(187,sc->sc_memh)
(188,pba)
(189,&mace_pcibbus_io_tag)
(190,sc->sc_pc.pc_rbus_parent_mem)
(191,sc_pc)
(192,sc->sc_pc.pc_attach_hook)
(193,sc->sc_pc.pc_conf_read = mace_pcibr_conf_read)
(194,sc->sc_pc)
(195,MACE_PCI_OFFS)
(196,bzero(&pba, sizeof(pba)
(197,pba.pba_bus = 0)
(198,sc->sc_pc.pc_make_tag)
(199,&mace_pcibbus_mem_tag)
(200,MACE_PCI_IO_SIZE)
(201,)
(202,sc->sc_mem_bus_space)
(203,void *)
(204,sc->sc_pc)
(205,struct device *self)
(206,pc_rbus_parent_mem)
(207,pba)
(208,sc_pc)
(209,sc_memh)
(210,pba)
(211,bus_extent)
(212,sc->sc_pc)
(213,pba.pba_busname)
(214,"pci")
(215,sc->sc_pc.pc_ppb_setup = mace_pcibr_ppb_setup)
(216,bus_space_map(sc->sc_memt, MACE_PCI_OFFS, 4096, 0, &sc->sc_memh)
(217,sc)
(218,sc_memt)
(219,bus_space_write_4(sc->sc_memt, sc->sc_memh, MACE_PCI_ERROR_FLAGS, 0)
(220,sc->sc_mem_bus_space = &mace_pcibbus_mem_tag)
(221,&sc->sc_pc)
(222,sc)
(223,pc_decompose_tag)
(224,sc)
(225,sc->sc_pc.pc_ppb_setup)
(226,sc->sc_pc.pc_attach_hook = mace_pcibr_attach_hook)
(227,sc)
(228,pci_ndomains++)
(229,sc)
(230,M_DEVBUF)
(231,malloc(sizeof(pci_bus_dma_tag)
(232,sc)
(233,sc->sc_memt)
(234,MACE_PCI_MEM_BASE)
(235,pci_bus_dma_tag)
(236,sc_pc)
(237,MACE_PCI_MEM_SIZE - 1)
(238,sc->sc_pc)
(239,mace_pcibr_decompose_tag)
(240,pba.pba_pc = &sc->sc_pc)
(241,pc_intr_line)
(242,pba.pba_domain)
(243,": mace rev %d, host system O2\\n")
(244,sc)
(245,sc->sc_memt)
(246,pba.pba_busname = "pci")
(247,sc_pc)
(248,sc->sc_pc.pc_intr_map)
(249,sc->sc_pc)
(250,sc)
(251,sc->sc_pc)
(252,sc_memt)
(253,pc_intr_establish)
(254,sc->sc_pc.pc_bus_maxdevs)
(255,pba)
(256,sc->sc_pc.pc_make_tag = mace_pcibr_make_tag)
(257,sc_pc)
(258,sc->sc_pc.pc_decompose_tag = mace_pcibr_decompose_tag)
(259,mace_pcibbus_io_tag.bus_extent = extent_create("pci_io",\n\\n\\t    MACE_PCI_IO_BASE, MACE_PCI_IO_BASE + MACE_PCI_IO_SIZE - 1,\n\\n\\t    M_DEVBUF, (caddr_t)
(260,sc)
(261,0)
(262,pba.pba_dmat)
(263,4096)
(264,sc_pc)
(265,pba_busname)
(266,sc_pc)
(267,sc_pc)
(268,mace_pcibr_conf_write)
(269,pc_intr_v)
(270,(caddr_t)
(271,0)
(272,sizeof(pba)
(273,pba.pba_iot = sc->sc_io_bus_space)
(274,sc->sc_pc)
(275,1)
(276,sc->sc_pc.pc_conf_v = sc)
(277,pba)
(278,pc_intr_disestablish)
(279,sc->sc_pc.pc_conf_read)
(280,mace_pcibr_rbus_parent_io)
(281,M_NOWAIT)
(282,sc_pc)
(283,sc->sc_pc.pc_intr_disestablish = mace_pcibr_intr_disestablish)
(284,sc)
(285,mace_pcibr_intr_map)
(286,pc_rbus_parent_io)
(287,sc)
(288,*pba.pba_dmat)
(289,8)
(290,pcireg)
(291,sc->sc_pc.pc_conf_write)
(292,NULL)
(293,pc_intr_string)
(294,sc)
(295,sc->sc_memh)
(296,ca->ca_memt)
(297,sc_pc)
(298,sc->sc_memh)
(299,printf(": mace rev %d, host system O2\\n", pcireg)
(300,mace_pcibr_bus_maxdevs)
(301,mace_pcibbus_io_tag.bus_extent)
(302,M_DEVBUF)
(303,pba_memt)
(304,bus_space_read_4(sc->sc_memt, sc->sc_memh, MACE_PCI_REVISION)
(305,return;)
(306,sc->sc_pc)
(307,EX_NOWAIT)
(308,ca)
(309,mace_pcibbus_io_tag)
(310,pci_bus_dma_tag)
(311,IST_LEVEL)
(312,pba.pba_pc)
(313,sc->sc_pc)
(314,macebus_intr_establish(NULL, 8, IST_LEVEL, IPL_HIGH,\n\\n\\t    mace_pcibr_errintr, (void *)
(315,sc)
(316,sizeof(pci_io_ext_storage)
(317,sc_mem_bus_space)
(318,sc)
(319,sc_io_bus_space)
(320,sc->sc_pc.pc_intr_establish = mace_pcibr_intr_establish)
(321,sc->sc_mem_bus_space)
(322,pba)
(323,pcireg)
(324,pba_dmat)
(325,sc_memt)
(326,sc->sc_pc)
(327,MACE_PCI_MEM_SIZE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^