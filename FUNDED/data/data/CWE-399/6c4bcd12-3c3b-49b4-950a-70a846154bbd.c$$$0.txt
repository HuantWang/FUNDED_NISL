-----label-----
0
-----code-----
static int cx25821_start_audio_dma_upstream(struct cx25821_dev *dev,
					    struct sram_channel *sram_ch)
{
	u32 tmp = 0;
	int err = 0;

	/* Set the physical start address of the RISC program in the initial
	 * program counter(IPC) member of the CMDS. */
	cx_write(sram_ch->cmds_start + 0, dev->_risc_phys_addr);
	/* Risc IPC High 64 bits 63-32 */
	cx_write(sram_ch->cmds_start + 4, 0);

	/* reset counter */
	cx_write(sram_ch->gpcnt_ctl, 3);

	/* Set the line length       (It looks like we do not need to set the
	 * line length) */
	cx_write(sram_ch->aud_length, AUDIO_LINE_SIZE & FLD_AUD_DST_LN_LNGTH);

	/* Set the input mode to 16-bit */
	tmp = cx_read(sram_ch->aud_cfg);
	tmp |= FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |
		FLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |
		FLD_AUD_SONY_MODE;
	cx_write(sram_ch->aud_cfg, tmp);

	/* Read and write back the interrupt status register to clear it */
	tmp = cx_read(sram_ch->int_stat);
	cx_write(sram_ch->int_stat, tmp);

	/* Clear our bits from the interrupt status register. */
	cx_write(sram_ch->int_stat, _intr_msk);

	/* Set the interrupt mask register, enable irq. */
	cx_set(PCI_INT_MSK, cx_read(PCI_INT_MSK) | (1 << sram_ch->irq_bit));
	tmp = cx_read(sram_ch->int_msk);
	cx_write(sram_ch->int_msk, tmp |= _intr_msk);

	err = request_irq(dev->pci->irq, cx25821_upstream_irq_audio,
			IRQF_SHARED, dev->name, dev);
	if (err < 0) {
		pr_err("%s: can't get upstream IRQ %d\n", dev->name,
				dev->pci->irq);
		goto fail_irq;
	}

	/* Start the DMA  engine */
	tmp = cx_read(sram_ch->dma_ctl);
	cx_set(sram_ch->dma_ctl, tmp | sram_ch->fld_aud_risc_en);

	dev->_audio_is_running = 1;
	dev->_is_first_audio_frame = 1;

	/* The fifo_en bit turns on by the first Risc program */
	cx25821_wait_fifo_enable(dev, sram_ch);

	return 0;

fail_irq:
	cx25821_dev_unregister(dev);
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
18,19
19,20
19,21
20,21
22,23
22,24
24,25
26,27
27,28
27,29
29,30
29,31
31,32
33,34
34,35
34,36
34,37
35,36
37,38
37,39
38,39
38,40
39,40
43,44
43,45
44,45
47,48
48,49
48,50
48,51
49,50
51,52
51,53
52,53
52,54
53,54
58,59
59,60
59,61
59,62
60,61
62,63
62,64
63,64
67,68
68,69
68,70
68,71
69,70
71,72
71,73
72,73
75,76
75,77
76,77
78,79
80,81
81,82
81,83
82,83
84,85
84,86
85,86
87,88
87,89
88,89
91,92
92,93
92,94
93,94
95,96
95,97
96,97
96,98
97,98
97,99
98,99
98,100
99,100
99,101
100,101
102,103
104,105
106,107
108,109
110,111
112,113
113,114
113,115
113,116
114,115
116,117
116,118
117,118
120,121
122,123
123,124
123,125
124,125
126,127
126,128
127,128
129,130
129,131
130,131
133,134
134,135
134,136
134,137
135,136
137,138
137,139
138,139
141,142
143,144
144,145
144,146
144,147
145,146
147,148
147,149
148,149
151,152
153,154
154,155
154,156
154,157
155,156
157,158
159,160
159,161
160,161
160,162
161,162
163,164
165,166
166,167
166,168
168,169
168,170
169,170
172,173
173,174
173,175
174,175
176,177
176,178
177,178
179,180
179,181
180,181
183,184
184,185
184,186
184,187
185,186
187,188
187,189
188,189
191,192
191,193
192,193
194,195
196,197
197,198
197,199
198,199
200,201
200,202
200,203
200,204
200,205
200,206
201,202
203,204
203,205
204,205
204,206
205,206
209,210
211,212
213,214
213,215
214,215
217,218
219,220
219,221
220,221
220,222
221,222
224,225
224,226
225,226
226,227
226,228
226,229
226,230
227,228
230,231
230,232
231,232
234,235
234,236
235,236
235,237
236,237
240,241
242,243
243,244
243,245
244,245
246,247
246,248
247,248
249,250
249,251
250,251
253,254
254,255
254,256
254,257
255,256
257,258
257,259
258,259
261,262
261,263
262,263
264,265
264,266
265,266
268,269
269,270
269,271
270,271
270,272
271,272
275,276
276,277
276,278
277,278
277,279
278,279
282,283
283,284
283,285
283,286
284,285
286,287
288,289
290,291
292,293
292,294
294,295
295,296
295,297
296,297
298,299
300,301
301,302
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,25,28,30,32,36,40,41,42,45,46,50,54,55,56,57,61,64,65,66,70,73,74,77,79,83,86,89,90,94,101,103,105,107,109,111,115,118,119,121,125,128,131,132,136,139,140,142,146,149,150,152,156,158,162,164,167,170,171,175,178,181,182,186,189,190,193,195,199,202,206,207,208,210,212,215,216,218,222,223,228,229,232,233,237,238,239,241,245,248,251,252,256,259,260,263,266,267,272,273,274,279,280,281,285,287,289,291,293,297,299,302
-----computeFrom-----
37,38
37,39
51,52
51,53
75,76
75,77
81,82
81,83
92,93
92,94
95,96
95,97
96,97
96,98
97,98
97,99
98,99
98,100
99,100
99,101
123,124
123,125
159,160
159,161
166,167
166,168
173,174
173,175
191,192
191,193
197,198
197,199
220,221
220,222
243,244
243,245
261,262
261,263
269,270
269,271
276,277
276,278
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int cx25821_start_audio_dma_upstream(struct cx25821_dev *dev,					    struct sram_channel *sram_ch){	u32 tmp = 0;	int err = 0;	/* Set the physical start address of the RISC program in the initial	 * program counter(IPC) member of the CMDS. */	cx_write(sram_ch->cmds_start + 0, dev->_risc_phys_addr);	/* Risc IPC High 64 bits 63-32 */	cx_write(sram_ch->cmds_start + 4, 0);	/* reset counter */	cx_write(sram_ch->gpcnt_ctl, 3);	/* Set the line length       (It looks like we do not need to set the	 * line length) */	cx_write(sram_ch->aud_length, AUDIO_LINE_SIZE & FLD_AUD_DST_LN_LNGTH);	/* Set the input mode to 16-bit */	tmp = cx_read(sram_ch->aud_cfg);	tmp |= FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |		FLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |		FLD_AUD_SONY_MODE;	cx_write(sram_ch->aud_cfg, tmp);	/* Read and write back the interrupt status register to clear it */	tmp = cx_read(sram_ch->int_stat);	cx_write(sram_ch->int_stat, tmp);	/* Clear our bits from the interrupt status register. */	cx_write(sram_ch->int_stat, _intr_msk);	/* Set the interrupt mask register, enable irq. */	cx_set(PCI_INT_MSK, cx_read(PCI_INT_MSK) | (1 << sram_ch->irq_bit));	tmp = cx_read(sram_ch->int_msk);	cx_write(sram_ch->int_msk, tmp |= _intr_msk);	err = request_irq(dev->pci->irq, cx25821_upstream_irq_audio,			IRQF_SHARED, dev->name, dev);	if (err < 0) {		pr_err("%s: can't get upstream IRQ %d\n", dev->name,				dev->pci->irq);		goto fail_irq;	}	/* Start the DMA  engine */	tmp = cx_read(sram_ch->dma_ctl);	cx_set(sram_ch->dma_ctl, tmp | sram_ch->fld_aud_risc_en);	dev->_audio_is_running = 1;	dev->_is_first_audio_frame = 1;	/* The fifo_en bit turns on by the first Risc program */	cx25821_wait_fifo_enable(dev, sram_ch);	return 0;fail_irq:	cx25821_dev_unregister(dev);	return err;}
static int
cx25821_start_audio_dma_upstream(struct cx25821_dev *dev,					    struct sram_channel *sram_ch)
cx25821_start_audio_dma_upstream
struct cx25821_dev *dev
struct cx25821_dev
cx25821_dev
*dev
*
dev
struct sram_channel *sram_ch
struct sram_channel
sram_channel
*sram_ch
*
sram_ch
{	u32 tmp = 0;	int err = 0;	/* Set the physical start address of the RISC program in the initial	 * program counter(IPC) member of the CMDS. */	cx_write(sram_ch->cmds_start + 0, dev->_risc_phys_addr);	/* Risc IPC High 64 bits 63-32 */	cx_write(sram_ch->cmds_start + 4, 0);	/* reset counter */	cx_write(sram_ch->gpcnt_ctl, 3);	/* Set the line length       (It looks like we do not need to set the	 * line length) */	cx_write(sram_ch->aud_length, AUDIO_LINE_SIZE & FLD_AUD_DST_LN_LNGTH);	/* Set the input mode to 16-bit */	tmp = cx_read(sram_ch->aud_cfg);	tmp |= FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |		FLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |		FLD_AUD_SONY_MODE;	cx_write(sram_ch->aud_cfg, tmp);	/* Read and write back the interrupt status register to clear it */	tmp = cx_read(sram_ch->int_stat);	cx_write(sram_ch->int_stat, tmp);	/* Clear our bits from the interrupt status register. */	cx_write(sram_ch->int_stat, _intr_msk);	/* Set the interrupt mask register, enable irq. */	cx_set(PCI_INT_MSK, cx_read(PCI_INT_MSK) | (1 << sram_ch->irq_bit));	tmp = cx_read(sram_ch->int_msk);	cx_write(sram_ch->int_msk, tmp |= _intr_msk);	err = request_irq(dev->pci->irq, cx25821_upstream_irq_audio,			IRQF_SHARED, dev->name, dev);	if (err < 0) {		pr_err("%s: can't get upstream IRQ %d\n", dev->name,				dev->pci->irq);		goto fail_irq;	}	/* Start the DMA  engine */	tmp = cx_read(sram_ch->dma_ctl);	cx_set(sram_ch->dma_ctl, tmp | sram_ch->fld_aud_risc_en);	dev->_audio_is_running = 1;	dev->_is_first_audio_frame = 1;	/* The fifo_en bit turns on by the first Risc program */	cx25821_wait_fifo_enable(dev, sram_ch);	return 0;fail_irq:	cx25821_dev_unregister(dev);	return err;}
u32 tmp = 0;
u32 tmp = 0;
u32
u32
tmp = 0
tmp
= 0
0
int err = 0;
int err = 0;
int
err = 0
err
= 0
0
cx_write(sram_ch->cmds_start + 0, dev->_risc_phys_addr);
cx_write(sram_ch->cmds_start + 0, dev->_risc_phys_addr)
cx_write
cx_write
sram_ch->cmds_start + 0
sram_ch->cmds_start
sram_ch
sram_ch
cmds_start
0
dev->_risc_phys_addr
dev
dev
_risc_phys_addr
cx_write(sram_ch->cmds_start + 4, 0);
cx_write(sram_ch->cmds_start + 4, 0)
cx_write
cx_write
sram_ch->cmds_start + 4
sram_ch->cmds_start
sram_ch
sram_ch
cmds_start
4
0
cx_write(sram_ch->gpcnt_ctl, 3);
cx_write(sram_ch->gpcnt_ctl, 3)
cx_write
cx_write
sram_ch->gpcnt_ctl
sram_ch
sram_ch
gpcnt_ctl
3
cx_write(sram_ch->aud_length, AUDIO_LINE_SIZE & FLD_AUD_DST_LN_LNGTH);
cx_write(sram_ch->aud_length, AUDIO_LINE_SIZE & FLD_AUD_DST_LN_LNGTH)
cx_write
cx_write
sram_ch->aud_length
sram_ch
sram_ch
aud_length
AUDIO_LINE_SIZE & FLD_AUD_DST_LN_LNGTH
AUDIO_LINE_SIZE
AUDIO_LINE_SIZE
FLD_AUD_DST_LN_LNGTH
FLD_AUD_DST_LN_LNGTH
tmp = cx_read(sram_ch->aud_cfg);
tmp = cx_read(sram_ch->aud_cfg)
tmp
tmp
cx_read(sram_ch->aud_cfg)
cx_read
cx_read
sram_ch->aud_cfg
sram_ch
sram_ch
aud_cfg
tmp |= FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |		FLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |		FLD_AUD_SONY_MODE;
tmp |= FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |		FLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |		FLD_AUD_SONY_MODE
tmp
tmp
FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |		FLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |		FLD_AUD_SONY_MODE
FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |		FLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D
FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |		FLD_AUD_MASTER_MODE
FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE
FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE
FLD_AUD_SRC_ENABLE
FLD_AUD_SRC_ENABLE
FLD_AUD_DST_PK_MODE
FLD_AUD_DST_PK_MODE
FLD_AUD_CLK_ENABLE
FLD_AUD_CLK_ENABLE
FLD_AUD_MASTER_MODE
FLD_AUD_MASTER_MODE
FLD_AUD_CLK_SELECT_PLL_D
FLD_AUD_CLK_SELECT_PLL_D
FLD_AUD_SONY_MODE
FLD_AUD_SONY_MODE
cx_write(sram_ch->aud_cfg, tmp);
cx_write(sram_ch->aud_cfg, tmp)
cx_write
cx_write
sram_ch->aud_cfg
sram_ch
sram_ch
aud_cfg
tmp
tmp
tmp = cx_read(sram_ch->int_stat);
tmp = cx_read(sram_ch->int_stat)
tmp
tmp
cx_read(sram_ch->int_stat)
cx_read
cx_read
sram_ch->int_stat
sram_ch
sram_ch
int_stat
cx_write(sram_ch->int_stat, tmp);
cx_write(sram_ch->int_stat, tmp)
cx_write
cx_write
sram_ch->int_stat
sram_ch
sram_ch
int_stat
tmp
tmp
cx_write(sram_ch->int_stat, _intr_msk);
cx_write(sram_ch->int_stat, _intr_msk)
cx_write
cx_write
sram_ch->int_stat
sram_ch
sram_ch
int_stat
_intr_msk
_intr_msk
cx_set(PCI_INT_MSK, cx_read(PCI_INT_MSK) | (1 << sram_ch->irq_bit));
cx_set(PCI_INT_MSK, cx_read(PCI_INT_MSK) | (1 << sram_ch->irq_bit))
cx_set
cx_set
PCI_INT_MSK
PCI_INT_MSK
cx_read(PCI_INT_MSK) | (1 << sram_ch->irq_bit)
cx_read(PCI_INT_MSK)
cx_read
cx_read
PCI_INT_MSK
PCI_INT_MSK
(1 << sram_ch->irq_bit)
1 << sram_ch->irq_bit
1
sram_ch->irq_bit
sram_ch
sram_ch
irq_bit
tmp = cx_read(sram_ch->int_msk);
tmp = cx_read(sram_ch->int_msk)
tmp
tmp
cx_read(sram_ch->int_msk)
cx_read
cx_read
sram_ch->int_msk
sram_ch
sram_ch
int_msk
cx_write(sram_ch->int_msk, tmp |= _intr_msk);
cx_write(sram_ch->int_msk, tmp |= _intr_msk)
cx_write
cx_write
sram_ch->int_msk
sram_ch
sram_ch
int_msk
tmp |= _intr_msk
tmp
tmp
_intr_msk
_intr_msk
err = request_irq(dev->pci->irq, cx25821_upstream_irq_audio,			IRQF_SHARED, dev->name, dev);
err = request_irq(dev->pci->irq, cx25821_upstream_irq_audio,			IRQF_SHARED, dev->name, dev)
err
err
request_irq(dev->pci->irq, cx25821_upstream_irq_audio,			IRQF_SHARED, dev->name, dev)
request_irq
request_irq
dev->pci->irq
dev->pci
dev
dev
pci
irq
cx25821_upstream_irq_audio
cx25821_upstream_irq_audio
IRQF_SHARED
IRQF_SHARED
dev->name
dev
dev
name
dev
dev
if (err < 0) {		pr_err("%s: can't get upstream IRQ %d\n", dev->name,				dev->pci->irq);		goto fail_irq;	}
err < 0
err
err
0
{		pr_err("%s: can't get upstream IRQ %d\n", dev->name,				dev->pci->irq);		goto fail_irq;	}
pr_err("%s: can't get upstream IRQ %d\n", dev->name,				dev->pci->irq);
pr_err("%s: can't get upstream IRQ %d\n", dev->name,				dev->pci->irq)
pr_err
pr_err
"%s: can't get upstream IRQ %d\n"
dev->name
dev
dev
name
dev->pci->irq
dev->pci
dev
dev
pci
irq
goto fail_irq;
fail_irq
tmp = cx_read(sram_ch->dma_ctl);
tmp = cx_read(sram_ch->dma_ctl)
tmp
tmp
cx_read(sram_ch->dma_ctl)
cx_read
cx_read
sram_ch->dma_ctl
sram_ch
sram_ch
dma_ctl
cx_set(sram_ch->dma_ctl, tmp | sram_ch->fld_aud_risc_en);
cx_set(sram_ch->dma_ctl, tmp | sram_ch->fld_aud_risc_en)
cx_set
cx_set
sram_ch->dma_ctl
sram_ch
sram_ch
dma_ctl
tmp | sram_ch->fld_aud_risc_en
tmp
tmp
sram_ch->fld_aud_risc_en
sram_ch
sram_ch
fld_aud_risc_en
dev->_audio_is_running = 1;
dev->_audio_is_running = 1
dev->_audio_is_running
dev
dev
_audio_is_running
1
dev->_is_first_audio_frame = 1;
dev->_is_first_audio_frame = 1
dev->_is_first_audio_frame
dev
dev
_is_first_audio_frame
1
cx25821_wait_fifo_enable(dev, sram_ch);
cx25821_wait_fifo_enable(dev, sram_ch)
cx25821_wait_fifo_enable
cx25821_wait_fifo_enable
dev
dev
sram_ch
sram_ch
return 0;
0
fail_irq:	cx25821_dev_unregister(dev);
fail_irq
cx25821_dev_unregister(dev);
cx25821_dev_unregister(dev)
cx25821_dev_unregister
cx25821_dev_unregister
dev
dev
return err;
err
err
-----joern-----
(45,166,0)
(113,1,0)
(59,69,0)
(137,31,0)
(36,96,0)
(26,42,0)
(107,27,0)
(112,48,0)
(159,72,0)
(158,76,0)
(67,166,0)
(121,139,0)
(18,50,0)
(125,150,0)
(69,59,0)
(115,118,0)
(66,139,0)
(115,24,0)
(98,131,0)
(5,50,0)
(144,99,0)
(14,50,0)
(141,107,0)
(83,58,0)
(15,24,0)
(13,164,0)
(18,65,0)
(16,115,0)
(103,115,0)
(48,166,0)
(157,49,0)
(148,166,0)
(104,154,0)
(100,167,0)
(147,91,0)
(111,62,0)
(14,91,0)
(53,24,0)
(42,131,0)
(11,167,0)
(28,94,0)
(91,166,0)
(42,166,0)
(3,166,0)
(91,14,0)
(167,50,0)
(22,60,0)
(59,29,0)
(78,39,0)
(106,132,0)
(123,3,0)
(7,112,0)
(29,59,0)
(73,132,0)
(43,166,0)
(118,166,0)
(51,21,0)
(70,62,0)
(31,165,0)
(132,166,0)
(164,135,0)
(84,130,0)
(94,165,0)
(165,97,0)
(89,76,0)
(25,14,0)
(139,27,0)
(119,118,0)
(62,50,0)
(72,29,0)
(136,14,0)
(4,43,0)
(2,65,0)
(22,50,0)
(27,132,0)
(40,66,0)
(87,165,0)
(27,107,0)
(75,73,0)
(107,24,0)
(142,13,0)
(131,50,0)
(67,49,0)
(11,19,0)
(158,166,0)
(82,21,0)
(34,99,0)
(138,133,0)
(49,0,0)
(92,43,0)
(139,66,0)
(131,42,0)
(53,30,0)
(63,52,0)
(150,166,0)
(61,135,0)
(68,93,0)
(146,133,0)
(96,50,0)
(58,83,0)
(164,13,0)
(120,27,0)
(43,92,0)
(165,94,0)
(94,24,0)
(76,50,0)
(90,69,0)
(85,5,0)
(99,60,0)
(133,146,0)
(56,162,0)
(76,158,0)
(112,24,0)
(88,22,0)
(19,11,0)
(93,50,0)
(145,13,0)
(67,19,0)
(148,154,0)
(163,69,0)
(17,59,0)
(60,166,0)
(80,130,0)
(114,166,0)
(65,18,0)
(161,53,0)
(48,112,0)
(102,96,0)
(152,130,0)
(69,50,0)
(92,96,0)
(52,50,0)
(91,147,0)
(147,43,0)
(160,24,0)
(60,22,0)
(154,104,0)
(1,29,0)
(134,15,0)
(77,15,0)
(19,166,0)
(27,24,0)
(45,67,0)
(9,107,0)
(132,27,0)
(57,84,0)
(37,158,0)
(48,84,0)
(29,1,0)
(46,22,0)
(146,21,0)
(33,131,0)
(8,67,0)
(110,166,0)
(16,53,0)
(35,167,0)
(143,112,0)
(5,153,0)
(15,31,0)
(39,166,0)
(95,45,0)
(74,16,0)
(124,66,0)
(162,132,0)
(31,15,0)
(64,97,0)
(156,18,0)
(29,72,0)
(155,104,0)
(105,5,0)
(54,160,0)
(10,166,0)
(108,47,0)
(133,0,0)
(23,160,0)
(32,27,0)
(162,166,0)
(56,16,0)
(55,166,0)
(60,99,0)
(13,50,0)
(117,94,0)
(101,0,0)
(135,166,0)
(122,115,0)
(62,58,0)
(58,166,0)
(130,84,0)
(44,73,0)
(167,11,0)
(65,39,0)
(41,27,0)
(66,24,0)
(135,164,0)
(153,5,0)
(71,148,0)
(49,67,0)
(149,147,0)
(81,147,0)
(109,162,0)
(128,76,0)
(47,166,0)
(93,83,0)
(126,18,0)
(0,49,0)
(86,104,0)
(38,153,0)
(84,48,0)
(158,135,0)
(153,166,0)
(104,50,0)
(39,65,0)
(79,146,0)
(52,45,0)
(150,24,0)
(129,83,0)
(96,92,0)
(58,62,0)
(20,53,0)
(130,50,0)
(30,166,0)
(160,50,0)
(83,148,0)
(45,52,0)
(21,146,0)
(140,3,0)
(151,52,0)
(116,19,0)
(16,166,0)
(127,47,0)
(160,166,0)
(72,166,0)
(83,93,0)
(165,31,0)
(27,139,0)
(12,30,0)
(6,93,0)
(154,148,0)
(0,133,0)
(27,139,1)
(1,113,1)
(31,137,1)
(7,143,1)
(51,79,1)
(9,120,1)
(52,50,1)
(36,102,1)
(71,73,1)
(102,4,1)
(5,85,1)
(117,87,1)
(73,132,1)
(162,109,1)
(3,140,1)
(35,100,1)
(4,72,1)
(153,38,1)
(159,42,1)
(32,139,1)
(45,95,1)
(16,53,1)
(53,24,1)
(61,45,1)
(140,123,1)
(112,7,1)
(41,107,1)
(78,65,1)
(30,12,1)
(150,125,1)
(99,144,1)
(72,29,1)
(13,142,1)
(79,138,1)
(0,133,1)
(120,32,1)
(69,90,1)
(84,57,1)
(14,50,1)
(107,141,1)
(89,135,1)
(40,124,1)
(13,50,1)
(142,145,1)
(53,161,1)
(42,131,1)
(115,103,1)
(62,50,1)
(76,128,1)
(60,22,1)
(15,24,1)
(107,24,1)
(27,24,1)
(163,17,1)
(131,33,1)
(81,149,1)
(119,115,1)
(113,159,1)
(156,126,1)
(42,26,1)
(125,64,1)
(16,115,1)
(34,22,1)
(152,80,1)
(108,127,1)
(86,71,1)
(29,1,1)
(151,63,1)
(139,66,1)
(49,0,1)
(165,31,1)
(130,50,1)
(45,67,1)
(126,48,1)
(88,153,1)
(82,51,1)
(122,30,1)
(109,150,1)
(17,1,1)
(16,74,1)
(14,25,1)
(91,14,1)
(146,21,1)
(95,52,1)
(92,96,1)
(98,158,1)
(69,50,1)
(67,49,1)
(59,69,1)
(111,148,1)
(83,148,1)
(131,50,1)
(153,5,1)
(84,130,1)
(105,39,1)
(147,81,1)
(39,65,1)
(139,121,1)
(143,84,1)
(64,165,1)
(66,24,1)
(134,94,1)
(11,167,1)
(46,88,1)
(144,34,1)
(121,66,1)
(33,98,1)
(48,84,1)
(112,24,1)
(87,73,1)
(56,16,1)
(124,106,1)
(101,157,1)
(129,62,1)
(70,111,1)
(106,91,1)
(104,155,1)
(28,117,1)
(45,52,1)
(44,132,1)
(76,50,1)
(165,94,1)
(90,163,1)
(100,116,1)
(62,70,1)
(147,43,1)
(160,50,1)
(65,18,1)
(54,118,1)
(67,19,1)
(93,50,1)
(150,24,1)
(15,77,1)
(94,28,1)
(52,151,1)
(155,86,1)
(6,129,1)
(80,47,1)
(157,8,1)
(160,24,1)
(58,62,1)
(18,50,1)
(58,83,1)
(149,14,1)
(23,54,1)
(5,50,1)
(91,147,1)
(135,164,1)
(141,9,1)
(158,135,1)
(96,50,1)
(29,59,1)
(94,24,1)
(96,36,1)
(167,50,1)
(104,50,1)
(133,146,1)
(31,15,1)
(145,61,1)
(116,60,1)
(38,5,1)
(136,43,1)
(83,93,1)
(127,3,1)
(57,130,1)
(2,18,1)
(167,35,1)
(22,50,1)
(22,46,1)
(56,162,1)
(158,37,1)
(63,67,1)
(75,44,1)
(66,40,1)
(74,160,1)
(154,104,1)
(12,53,1)
(164,13,1)
(27,107,1)
(132,27,1)
(137,15,1)
(60,99,1)
(43,92,1)
(148,154,1)
(26,131,1)
(37,76,1)
(128,89,1)
(93,68,1)
(68,6,1)
(103,122,1)
(47,108,1)
(65,2,1)
(162,132,1)
(21,82,1)
(73,75,1)
(161,20,1)
(19,11,1)
(158,76,1)
(20,58,1)
(138,101,1)
(118,119,1)
(115,24,1)
(130,152,1)
(8,19,1)
(48,112,1)
(25,136,1)
(77,134,1)
(160,23,1)
(27,41,1)
(18,156,1)
(85,105,1)
(39,78,1)
(48,84,2)
(70,73,2)
(58,73,2)
(13,50,2)
(107,24,2)
(67,19,2)
(73,132,2)
(148,73,2)
(154,73,2)
(148,154,2)
(161,73,2)
(20,73,2)
(58,83,2)
(74,73,2)
(43,92,2)
(84,130,2)
(5,50,2)
(122,73,2)
(129,73,2)
(162,73,2)
(62,73,2)
(69,50,2)
(27,139,2)
(150,24,2)
(119,73,2)
(167,50,2)
(164,13,2)
(54,73,2)
(16,115,2)
(133,146,2)
(18,50,2)
(165,94,2)
(118,73,2)
(53,73,2)
(56,16,2)
(155,73,2)
(83,73,2)
(132,27,2)
(147,43,2)
(111,73,2)
(130,50,2)
(91,14,2)
(53,24,2)
(160,50,2)
(153,5,2)
(158,76,2)
(94,73,2)
(93,50,2)
(96,50,2)
(92,96,2)
(83,148,2)
(28,73,2)
(62,50,2)
(19,11,2)
(104,50,2)
(67,49,2)
(66,24,2)
(112,24,2)
(60,22,2)
(58,62,2)
(91,147,2)
(14,50,2)
(11,167,2)
(45,67,2)
(31,73,2)
(117,73,2)
(72,29,2)
(131,50,2)
(30,73,2)
(39,65,2)
(103,73,2)
(87,73,2)
(109,73,2)
(104,73,2)
(158,135,2)
(48,112,2)
(12,73,2)
(115,73,2)
(27,107,2)
(93,73,2)
(115,24,2)
(22,50,2)
(49,0,2)
(64,73,2)
(16,73,2)
(52,50,2)
(15,73,2)
(165,73,2)
(45,52,2)
(23,73,2)
(42,131,2)
(76,50,2)
(137,73,2)
(27,24,2)
(29,59,2)
(71,73,2)
(135,164,2)
(160,73,2)
(94,24,2)
(56,162,2)
(139,66,2)
(83,93,2)
(165,31,2)
(162,132,2)
(16,53,2)
(6,73,2)
(31,15,2)
(68,73,2)
(154,104,2)
(29,1,2)
(150,73,2)
(125,73,2)
(146,21,2)
(60,99,2)
(77,73,2)
(134,73,2)
(86,73,2)
(0,133,2)
(15,24,2)
(59,69,2)
(160,24,2)
(65,18,2)
-----------------------------------
(0,FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |\n\\n\\t\\tFLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |\n\\n\\t\\tFLD_AUD_SONY_MODE)
(1,cx_read(PCI_INT_MSK)
(2,4)
(3,tmp = 0)
(4,tmp)
(5,sram_ch->gpcnt_ctl)
(6,sram_ch)
(7,_risc_phys_addr)
(8,tmp)
(9,dev)
(10,fail_irq:)
(11,cx_read(sram_ch->aud_cfg)
(12,1)
(13,sram_ch->int_stat)
(14,sram_ch->int_msk)
(15,dev->pci)
(16,return 0;)
(17,1)
(18,sram_ch->cmds_start)
(19,tmp = cx_read(sram_ch->aud_cfg)
(20,dev)
(21,FLD_AUD_CLK_SELECT_PLL_D |\n\\n\\t\\tFLD_AUD_SONY_MODE)
(22,sram_ch->aud_length)
(23,sram_ch)
(24,struct cx25821_dev *dev)
(25,int_msk)
(26,_intr_msk)
(27,request_irq(dev->pci->irq, cx25821_upstream_irq_audio,\n\\n\\t\\t\\tIRQF_SHARED, dev->name, dev)
(28,name)
(29,cx_read(PCI_INT_MSK)
(30,dev->_audio_is_running = 1)
(31,dev->pci->irq)
(32,cx25821_upstream_irq_audio)
(33,int_stat)
(34,AUDIO_LINE_SIZE)
(35,aud_cfg)
(36,int_msk)
(37,tmp)
(38,3)
(39,cx_write(sram_ch->cmds_start + 4, 0)
(40,pci)
(41,dev)
(42,cx_write(sram_ch->int_stat, _intr_msk)
(43,tmp = cx_read(sram_ch->int_msk)
(44,err)
(45,cx_write(sram_ch->aud_cfg, tmp)
(46,aud_length)
(47,err = 0)
(48,cx_write(sram_ch->cmds_start + 0, dev->_risc_phys_addr)
(49,FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |\n\\n\\t\\tFLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |\n\\n\\t\\tFLD_AUD_SONY_MODE)
(50,struct sram_channel *sram_ch)
(51,FLD_AUD_CLK_SELECT_PLL_D)
(52,sram_ch->aud_cfg)
(53,dev->_audio_is_running)
(54,dev)
(55,if (err < 0)
(56,RET)
(57,0)
(58,cx_set(sram_ch->dma_ctl, tmp | sram_ch->fld_aud_risc_en)
(59,1 << sram_ch->irq_bit)
(60,cx_write(sram_ch->aud_length, AUDIO_LINE_SIZE & FLD_AUD_DST_LN_LNGTH)
(61,tmp)
(62,sram_ch->dma_ctl)
(63,sram_ch)
(64,goto fail_irq;)
(65,sram_ch->cmds_start + 4)
(66,dev->pci)
(67,tmp |= FLD_AUD_SRC_ENABLE | FLD_AUD_DST_PK_MODE | FLD_AUD_CLK_ENABLE |\n\\n\\t\\tFLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |\n\\n\\t\\tFLD_AUD_SONY_MODE)
(68,fld_aud_risc_en)
(69,sram_ch->irq_bit)
(70,dma_ctl)
(71,tmp)
(72,cx_set(PCI_INT_MSK, cx_read(PCI_INT_MSK)
(73,err < 0)
(74,0)
(75,0)
(76,sram_ch->int_stat)
(77,pci)
(78,0)
(79,FLD_AUD_MASTER_MODE)
(80,sram_ch)
(81,_intr_msk)
(82,FLD_AUD_SONY_MODE)
(83,tmp | sram_ch->fld_aud_risc_en)
(84,sram_ch->cmds_start + 0)
(85,gpcnt_ctl)
(86,sram_ch)
(87,"%s: can\'t get upstream IRQ %d\\n")
(88,sram_ch)
(89,sram_ch)
(90,irq_bit)
(91,cx_write(sram_ch->int_msk, tmp |= _intr_msk)
(92,cx_read(sram_ch->int_msk)
(93,sram_ch->fld_aud_risc_en)
(94,dev->name)
(95,tmp)
(96,sram_ch->int_msk)
(97,)
(98,sram_ch)
(99,AUDIO_LINE_SIZE & FLD_AUD_DST_LN_LNGTH)
(100,sram_ch)
(101,FLD_AUD_DST_PK_MODE)
(102,sram_ch)
(103,_is_first_audio_frame)
(104,sram_ch->dma_ctl)
(105,sram_ch)
(106,err)
(107,dev->name)
(108,0)
(109,err)
(110,err)
(111,sram_ch)
(112,dev->_risc_phys_addr)
(113,PCI_INT_MSK)
(114,tmp)
(115,dev->_is_first_audio_frame)
(116,tmp)
(117,dev)
(118,dev->_is_first_audio_frame = 1)
(119,1)
(120,IRQF_SHARED)
(121,irq)
(122,dev)
(123,tmp)
(124,dev)
(125,dev)
(126,sram_ch)
(127,err)
(128,int_stat)
(129,tmp)
(130,sram_ch->cmds_start)
(131,sram_ch->int_stat)
(132,err = request_irq(dev->pci->irq, cx25821_upstream_irq_audio,\n\\n\\t\\t\\tIRQF_SHARED, dev->name, dev)
(133,FLD_AUD_CLK_ENABLE |\n\\n\\t\\tFLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |\n\\n\\t\\tFLD_AUD_SONY_MODE)
(134,dev)
(135,tmp = cx_read(sram_ch->int_stat)
(136,sram_ch)
(137,irq)
(138,FLD_AUD_CLK_ENABLE)
(139,dev->pci->irq)
(140,0)
(141,name)
(142,int_stat)
(143,dev)
(144,FLD_AUD_DST_LN_LNGTH)
(145,sram_ch)
(146,FLD_AUD_MASTER_MODE | FLD_AUD_CLK_SELECT_PLL_D |\n\\n\\t\\tFLD_AUD_SONY_MODE)
(147,tmp |= _intr_msk)
(148,tmp = cx_read(sram_ch->dma_ctl)
(149,tmp)
(150,cx25821_dev_unregister(dev)
(151,aud_cfg)
(152,cmds_start)
(153,cx_write(sram_ch->gpcnt_ctl, 3)
(154,cx_read(sram_ch->dma_ctl)
(155,dma_ctl)
(156,cmds_start)
(157,FLD_AUD_SRC_ENABLE)
(158,cx_write(sram_ch->int_stat, tmp)
(159,PCI_INT_MSK)
(160,cx25821_wait_fifo_enable(dev, sram_ch)
(161,_audio_is_running)
(162,return err;)
(163,sram_ch)
(164,cx_read(sram_ch->int_stat)
(165,pr_err("%s: can\'t get upstream IRQ %d\\n", dev->name,\n\\n\\t\\t\\t\\tdev->pci->irq)
(166,)
(167,sram_ch->aud_cfg)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^