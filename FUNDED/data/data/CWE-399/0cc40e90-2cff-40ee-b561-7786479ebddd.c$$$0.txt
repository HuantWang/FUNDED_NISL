-----label-----
1
-----code-----
static int unix_attach_fds(struct scm_cookie *scm, struct sk_buff *skb)
{
	int i;
	unsigned char max_level = 0;
	int unix_sock_count = 0;

	if (too_many_unix_fds(current))
		return -ETOOMANYREFS;

	for (i = scm->fp->count - 1; i >= 0; i--) {
		struct sock *sk = unix_get_socket(scm->fp->fp[i]);

		if (sk) {
			unix_sock_count++;
			max_level = max(max_level,
					unix_sk(sk)->recursion_level);
		}
	}
	if (unlikely(max_level > MAX_RECURSION_LEVEL))
		return -ETOOMANYREFS;

	/*
	 * Need to duplicate file references for the sake of garbage
	 * collection.  Otherwise a socket in the fps might become a
	 * candidate for GC while the skb is not yet queued.
	 */
	UNIXCB(skb).fp = scm_fp_dup(scm->fp);
	if (!UNIXCB(skb).fp)
		return -ENOMEM;

	for (i = scm->fp->count - 1; i >= 0; i--)
		unix_inflight(scm->fp->fp[i]);
	return max_level;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
18,19
19,20
19,21
21,22
23,24
24,25
24,26
26,27
26,28
28,29
30,31
31,32
31,33
33,34
33,35
35,36
37,38
37,39
38,39
38,40
39,40
41,42
42,43
44,45
45,46
46,47
48,49
48,50
48,51
48,52
49,50
50,51
50,52
51,52
53,54
53,55
54,55
54,56
55,56
55,57
56,57
61,62
61,63
62,63
65,66
66,67
68,69
68,70
69,70
70,71
70,72
71,72
73,74
73,75
73,76
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
82,84
83,84
87,88
89,90
89,91
90,91
92,93
92,94
93,94
94,95
95,96
97,98
98,99
98,100
99,100
101,102
101,103
101,104
102,103
104,105
106,107
106,108
107,108
107,109
108,109
110,111
113,114
113,115
114,115
114,116
115,116
117,118
117,119
118,119
120,121
122,123
123,124
124,125
126,127
127,128
127,129
128,129
128,130
129,130
129,131
130,131
132,133
135,136
135,137
136,137
138,139
138,140
139,140
142,143
142,144
143,144
144,145
144,146
145,146
145,147
146,147
148,149
151,152
152,153
153,154
155,156
155,157
155,158
155,159
156,157
157,158
157,159
158,159
160,161
160,162
161,162
161,163
162,163
162,164
163,164
168,169
168,170
169,170
172,173
173,174
175,176
176,177
176,178
177,178
179,180
179,181
180,181
180,182
181,182
181,183
182,183
186,187
188,189
189,190
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,25,27,29,32,34,36,40,43,47,52,57,58,59,60,63,64,67,72,74,75,79,84,85,86,88,91,96,100,103,105,109,111,112,116,119,121,125,131,133,134,137,140,141,147,149,150,154,159,164,165,166,167,170,171,174,178,183,184,185,187,190
-----computeFrom-----
50,51
50,52
53,54
53,55
61,62
61,63
98,99
98,100
117,118
117,119
127,128
127,129
157,158
157,159
160,161
160,162
168,169
168,170
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;FunctionCallExpression;IdExpression;Name;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int unix_attach_fds(struct scm_cookie *scm, struct sk_buff *skb){	int i;	unsigned char max_level = 0;	int unix_sock_count = 0;	if (too_many_unix_fds(current))		return -ETOOMANYREFS;	for (i = scm->fp->count - 1; i >= 0; i--) {		struct sock *sk = unix_get_socket(scm->fp->fp[i]);		if (sk) {			unix_sock_count++;			max_level = max(max_level,					unix_sk(sk)->recursion_level);		}	}	if (unlikely(max_level > MAX_RECURSION_LEVEL))		return -ETOOMANYREFS;	/*	 * Need to duplicate file references for the sake of garbage	 * collection.  Otherwise a socket in the fps might become a	 * candidate for GC while the skb is not yet queued.	 */	UNIXCB(skb).fp = scm_fp_dup(scm->fp);	if (!UNIXCB(skb).fp)		return -ENOMEM;	for (i = scm->fp->count - 1; i >= 0; i--)		unix_inflight(scm->fp->fp[i]);	return max_level;}
static int
unix_attach_fds(struct scm_cookie *scm, struct sk_buff *skb)
unix_attach_fds
struct scm_cookie *scm
struct scm_cookie
scm_cookie
*scm
*
scm
struct sk_buff *skb
struct sk_buff
sk_buff
*skb
*
skb
{	int i;	unsigned char max_level = 0;	int unix_sock_count = 0;	if (too_many_unix_fds(current))		return -ETOOMANYREFS;	for (i = scm->fp->count - 1; i >= 0; i--) {		struct sock *sk = unix_get_socket(scm->fp->fp[i]);		if (sk) {			unix_sock_count++;			max_level = max(max_level,					unix_sk(sk)->recursion_level);		}	}	if (unlikely(max_level > MAX_RECURSION_LEVEL))		return -ETOOMANYREFS;	/*	 * Need to duplicate file references for the sake of garbage	 * collection.  Otherwise a socket in the fps might become a	 * candidate for GC while the skb is not yet queued.	 */	UNIXCB(skb).fp = scm_fp_dup(scm->fp);	if (!UNIXCB(skb).fp)		return -ENOMEM;	for (i = scm->fp->count - 1; i >= 0; i--)		unix_inflight(scm->fp->fp[i]);	return max_level;}
int i;
int i;
int
i
i
unsigned char max_level = 0;
unsigned char max_level = 0;
unsigned char
max_level = 0
max_level
= 0
0
int unix_sock_count = 0;
int unix_sock_count = 0;
int
unix_sock_count = 0
unix_sock_count
= 0
0
if (too_many_unix_fds(current))		return -ETOOMANYREFS;
too_many_unix_fds(current)
too_many_unix_fds
too_many_unix_fds
(current)
current
current
return -ETOOMANYREFS;
-ETOOMANYREFS
ETOOMANYREFS
ETOOMANYREFS
for (i = scm->fp->count - 1; i >= 0; i--) {		struct sock *sk = unix_get_socket(scm->fp->fp[i]);		if (sk) {			unix_sock_count++;			max_level = max(max_level,					unix_sk(sk)->recursion_level);		}	}
i = scm->fp->count - 1;
i = scm->fp->count - 1
i
i
scm->fp->count - 1
scm->fp->count
scm->fp
scm
scm
fp
count
1
i >= 0
i
i
0
i--
i
i
{		struct sock *sk = unix_get_socket(scm->fp->fp[i]);		if (sk) {			unix_sock_count++;			max_level = max(max_level,					unix_sk(sk)->recursion_level);		}	}
struct sock *sk = unix_get_socket(scm->fp->fp[i]);
struct sock *sk = unix_get_socket(scm->fp->fp[i]);
struct sock
sock
*sk = unix_get_socket(scm->fp->fp[i])
*
sk
= unix_get_socket(scm->fp->fp[i])
unix_get_socket(scm->fp->fp[i])
unix_get_socket
unix_get_socket
scm->fp->fp[i]
scm->fp->fp
scm->fp
scm
scm
fp
fp
i
i
if (sk) {			unix_sock_count++;			max_level = max(max_level,					unix_sk(sk)->recursion_level);		}
sk
sk
{			unix_sock_count++;			max_level = max(max_level,					unix_sk(sk)->recursion_level);		}
unix_sock_count++;
unix_sock_count++
unix_sock_count
unix_sock_count
max_level = max(max_level,					unix_sk(sk)->recursion_level);
max_level = max(max_level,					unix_sk(sk)->recursion_level)
max_level
max_level
max(max_level,					unix_sk(sk)->recursion_level)
max
max
max_level
max_level
unix_sk(sk)->recursion_level
unix_sk(sk)
unix_sk
unix_sk
sk
sk
recursion_level
if (unlikely(max_level > MAX_RECURSION_LEVEL))		return -ETOOMANYREFS;
unlikely(max_level > MAX_RECURSION_LEVEL)
unlikely
unlikely
max_level > MAX_RECURSION_LEVEL
max_level
max_level
MAX_RECURSION_LEVEL
MAX_RECURSION_LEVEL
return -ETOOMANYREFS;
-ETOOMANYREFS
ETOOMANYREFS
ETOOMANYREFS
UNIXCB(skb).fp = scm_fp_dup(scm->fp);
UNIXCB(skb).fp = scm_fp_dup(scm->fp)
UNIXCB(skb).fp
UNIXCB(skb)
UNIXCB
UNIXCB
skb
skb
fp
scm_fp_dup(scm->fp)
scm_fp_dup
scm_fp_dup
scm->fp
scm
scm
fp
if (!UNIXCB(skb).fp)		return -ENOMEM;
!UNIXCB(skb).fp
UNIXCB(skb).fp
UNIXCB(skb)
UNIXCB
UNIXCB
skb
skb
fp
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
for (i = scm->fp->count - 1; i >= 0; i--)		unix_inflight(scm->fp->fp[i]);
i = scm->fp->count - 1;
i = scm->fp->count - 1
i
i
scm->fp->count - 1
scm->fp->count
scm->fp
scm
scm
fp
count
1
i >= 0
i
i
0
i--
i
i
unix_inflight(scm->fp->fp[i]);
unix_inflight(scm->fp->fp[i])
unix_inflight
unix_inflight
scm->fp->fp[i]
scm->fp->fp
scm->fp
scm
scm
fp
fp
i
i
return max_level;
max_level
max_level
-----joern-----
(22,17,0)
(76,39,0)
(0,59,0)
(13,91,0)
(14,40,0)
(44,34,0)
(40,22,0)
(41,82,0)
(109,39,0)
(55,9,0)
(103,57,0)
(15,53,0)
(98,22,0)
(30,1,0)
(32,103,0)
(46,25,0)
(29,37,0)
(91,82,0)
(9,83,0)
(60,33,0)
(25,31,0)
(75,109,0)
(83,17,0)
(101,6,0)
(97,55,0)
(93,17,0)
(77,49,0)
(47,89,0)
(1,41,0)
(78,45,0)
(50,17,0)
(101,78,0)
(103,49,0)
(28,59,0)
(9,35,0)
(44,49,0)
(91,85,0)
(8,33,0)
(82,17,0)
(100,105,0)
(79,26,0)
(68,77,0)
(57,103,0)
(108,97,0)
(6,101,0)
(21,75,0)
(10,79,0)
(59,11,0)
(72,17,0)
(95,1,0)
(73,17,0)
(57,102,0)
(34,44,0)
(39,64,0)
(65,83,0)
(61,0,0)
(81,109,0)
(70,82,0)
(89,31,0)
(38,26,0)
(5,89,0)
(26,79,0)
(43,57,0)
(37,86,0)
(18,35,0)
(102,31,0)
(19,95,0)
(84,56,0)
(102,57,0)
(91,1,0)
(62,17,0)
(106,25,0)
(104,41,0)
(75,31,0)
(95,17,0)
(51,49,0)
(88,9,0)
(36,44,0)
(0,58,0)
(7,100,0)
(44,46,0)
(49,103,0)
(11,59,0)
(63,51,0)
(94,51,0)
(100,31,0)
(92,26,0)
(80,100,0)
(6,41,0)
(64,39,0)
(99,22,0)
(41,1,0)
(83,65,0)
(48,91,0)
(35,9,0)
(96,86,0)
(3,101,0)
(27,105,0)
(59,0,0)
(2,17,0)
(96,67,0)
(59,83,0)
(96,55,0)
(95,82,0)
(39,26,0)
(1,23,0)
(74,17,0)
(52,49,0)
(12,45,0)
(107,102,0)
(35,58,0)
(105,100,0)
(79,105,0)
(71,78,0)
(40,23,0)
(39,109,0)
(90,46,0)
(78,64,0)
(16,6,0)
(25,46,0)
(24,38,0)
(41,6,0)
(96,95,0)
(54,45,0)
(85,91,0)
(64,78,0)
(89,65,0)
(33,26,0)
(109,75,0)
(65,89,0)
(105,79,0)
(4,102,0)
(56,67,0)
(20,75,0)
(42,82,0)
(46,44,0)
(66,25,0)
(87,17,0)
(18,85,1)
(91,1,1)
(39,76,1)
(5,9,1)
(89,47,1)
(76,109,1)
(68,34,1)
(25,31,1)
(96,67,1)
(99,98,1)
(51,94,1)
(57,43,1)
(38,24,1)
(48,13,1)
(14,69,1)
(41,6,1)
(33,26,1)
(59,0,1)
(75,31,1)
(4,52,1)
(106,66,1)
(44,46,1)
(103,32,1)
(9,88,1)
(39,26,1)
(98,82,1)
(22,99,1)
(43,102,1)
(81,75,1)
(0,61,1)
(38,26,1)
(105,27,1)
(63,77,1)
(107,4,1)
(96,55,1)
(109,75,1)
(95,1,1)
(0,58,1)
(53,15,1)
(39,109,1)
(104,30,1)
(33,8,1)
(84,53,1)
(77,49,1)
(27,100,1)
(64,39,1)
(85,91,1)
(11,59,1)
(56,84,1)
(15,22,1)
(57,102,1)
(66,51,1)
(36,46,1)
(51,49,1)
(95,19,1)
(37,29,1)
(77,68,1)
(20,71,1)
(35,18,1)
(6,16,1)
(70,42,1)
(13,33,1)
(103,57,1)
(34,44,1)
(92,53,1)
(60,26,1)
(59,28,1)
(69,78,1)
(16,101,1)
(101,3,1)
(108,11,1)
(79,10,1)
(89,31,1)
(24,69,1)
(86,37,1)
(52,11,1)
(78,64,1)
(49,103,1)
(79,105,1)
(41,82,1)
(29,85,1)
(60,38,1)
(80,92,1)
(41,1,1)
(40,14,1)
(61,83,1)
(97,108,1)
(102,31,1)
(101,78,1)
(65,89,1)
(88,35,1)
(46,90,1)
(83,65,1)
(96,86,1)
(3,104,1)
(30,40,1)
(24,1,1)
(109,81,1)
(95,82,1)
(26,79,1)
(91,82,1)
(6,101,1)
(91,48,1)
(94,63,1)
(44,36,1)
(28,0,1)
(96,95,1)
(47,5,1)
(59,83,1)
(7,80,1)
(71,33,1)
(1,41,1)
(8,60,1)
(44,49,1)
(90,25,1)
(35,58,1)
(9,35,1)
(55,9,1)
(21,20,1)
(25,106,1)
(100,31,1)
(82,70,1)
(46,25,1)
(19,51,1)
(100,7,1)
(32,57,1)
(67,56,1)
(40,22,1)
(10,105,1)
(105,100,1)
(63,49,1)
(55,97,1)
(75,21,1)
(102,107,1)
(10,53,2)
(103,11,2)
(60,33,2)
(25,31,2)
(68,51,2)
(89,31,2)
(0,85,2)
(92,53,2)
(105,100,2)
(37,85,2)
(96,86,2)
(88,85,2)
(39,109,2)
(3,69,2)
(9,85,2)
(89,85,2)
(41,6,2)
(26,53,2)
(20,33,2)
(41,1,2)
(83,85,2)
(19,11,2)
(9,35,2)
(35,85,2)
(38,33,2)
(39,33,2)
(43,11,2)
(48,53,2)
(57,102,2)
(107,11,2)
(86,85,2)
(44,49,2)
(100,53,2)
(49,11,2)
(63,11,2)
(102,31,2)
(47,85,2)
(104,69,2)
(94,51,2)
(51,11,2)
(95,11,2)
(41,82,2)
(30,69,2)
(101,78,2)
(79,53,2)
(46,51,2)
(49,103,2)
(21,33,2)
(6,69,2)
(1,41,2)
(56,53,2)
(106,51,2)
(91,1,2)
(51,49,2)
(33,53,2)
(1,69,2)
(24,33,2)
(96,67,2)
(64,39,2)
(28,85,2)
(75,31,2)
(77,51,2)
(0,58,2)
(77,49,2)
(7,53,2)
(103,57,2)
(25,51,2)
(64,33,2)
(8,53,2)
(59,85,2)
(90,51,2)
(59,0,2)
(39,26,2)
(51,51,2)
(33,26,2)
(65,89,2)
(33,33,2)
(109,75,2)
(55,9,2)
(108,11,2)
(59,83,2)
(95,82,2)
(34,51,2)
(11,85,2)
(66,51,2)
(46,25,2)
(60,53,2)
(44,51,2)
(65,85,2)
(101,69,2)
(100,31,2)
(78,64,2)
(102,11,2)
(91,82,2)
(96,95,2)
(35,58,2)
(91,53,2)
(63,51,2)
(13,53,2)
(29,85,2)
(4,11,2)
(96,55,2)
(57,11,2)
(5,85,2)
(83,65,2)
(78,33,2)
(8,33,2)
(109,33,2)
(11,59,2)
(38,26,2)
(26,79,2)
(41,69,2)
(14,69,2)
(97,11,2)
(69,33,2)
(40,22,2)
(16,69,2)
(84,53,2)
(94,11,2)
(36,51,2)
(55,11,2)
(79,105,2)
(85,53,2)
(81,33,2)
(44,46,2)
(76,33,2)
(67,53,2)
(85,91,2)
(61,85,2)
(6,101,2)
(105,53,2)
(80,53,2)
(71,33,2)
(27,53,2)
(75,33,2)
(40,69,2)
(18,85,2)
(95,1,2)
(52,11,2)
(32,11,2)
(34,44,2)
-----------------------------------
(0,UNIXCB(skb)
(1,max_level = max(max_level,\n\\n\\t\\t\\t\\t\\tunix_sk(sk)
(2,if (unlikely(max_level > MAX_RECURSION_LEVEL)
(3,sk)
(4,scm)
(5,scm)
(6,unix_sk(sk)
(7,fp)
(8,0)
(9,UNIXCB(skb)
(10,1)
(11,!UNIXCB(skb)
(12,if (sk)
(13,max_level)
(14,unix_sock_count)
(15,current)
(16,recursion_level)
(17,)
(18,skb)
(19,max_level)
(20,scm)
(21,fp)
(22,unix_sock_count = 0)
(23,)
(24,i)
(25,scm->fp)
(26,i = scm->fp->count - 1)
(27,count)
(28,fp)
(29,ETOOMANYREFS)
(30,max_level)
(31,struct scm_cookie *scm)
(32,1)
(33,i >= 0)
(34,unix_inflight(scm->fp->fp[i])
(35,UNIXCB(skb)
(36,i)
(37,-ETOOMANYREFS)
(38,i--)
(39,scm->fp->fp[i])
(40,unix_sock_count++)
(41,max(max_level,\n\\n\\t\\t\\t\\t\\tunix_sk(sk)
(42,max_level)
(43,count)
(44,scm->fp->fp[i])
(45,)
(46,scm->fp->fp)
(47,fp)
(48,MAX_RECURSION_LEVEL)
(49,i = scm->fp->count - 1)
(50,for (i = scm->fp->count - 1; i >= 0; i--)
(51,i >= 0)
(52,i)
(53,too_many_unix_fds(current)
(54,sk)
(55,return -ENOMEM;)
(56,-ETOOMANYREFS)
(57,scm->fp->count)
(58,struct sk_buff *skb)
(59,UNIXCB(skb)
(60,i)
(61,skb)
(62,i)
(63,i)
(64,unix_get_socket(scm->fp->fp[i])
(65,scm_fp_dup(scm->fp)
(66,scm)
(67,return -ETOOMANYREFS;)
(68,i)
(69,sk)
(70,0)
(71,sk)
(72,if (!UNIXCB(skb)
(73,max_level)
(74,for (i = scm->fp->count - 1; i >= 0; i--)
(75,scm->fp)
(76,i)
(77,i--)
(78,*sk = unix_get_socket(scm->fp->fp[i])
(79,scm->fp->count - 1)
(80,scm)
(81,fp)
(82,max_level = 0)
(83,UNIXCB(skb)
(84,ETOOMANYREFS)
(85,unlikely(max_level > MAX_RECURSION_LEVEL)
(86,return -ETOOMANYREFS;)
(87,if (too_many_unix_fds(current)
(88,fp)
(89,scm->fp)
(90,fp)
(91,max_level > MAX_RECURSION_LEVEL)
(92,i)
(93,unix_sock_count)
(94,0)
(95,return max_level;)
(96,RET)
(97,-ENOMEM)
(98,unix_sock_count)
(99,0)
(100,scm->fp)
(101,unix_sk(sk)
(102,scm->fp)
(103,scm->fp->count - 1)
(104,max_level)
(105,scm->fp->count)
(106,fp)
(107,fp)
(108,ENOMEM)
(109,scm->fp->fp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^