-----label-----
1
-----code-----
static int cx25821_sram_channel_setup_upstream_audio(struct cx25821_dev *dev,
					      struct sram_channel *ch,
					      unsigned int bpl, u32 risc)
{
	unsigned int i, lines;
	u32 cdt;

	if (ch->cmds_start == 0) {
		cx_write(ch->ptr1_reg, 0);
		cx_write(ch->ptr2_reg, 0);
		cx_write(ch->cnt2_reg, 0);
		cx_write(ch->cnt1_reg, 0);
		return 0;
	}

	bpl = (bpl + 7) & ~7;	/* alignment */
	cdt = ch->cdt;
	lines = ch->fifo_size / bpl;

	if (lines > 3)
		lines = 3;

	BUG_ON(lines < 2);

	/* write CDT */
	for (i = 0; i < lines; i++) {
		cx_write(cdt + 16 * i, ch->fifo_start + bpl * i);
		cx_write(cdt + 16 * i + 4, 0);
		cx_write(cdt + 16 * i + 8, 0);
		cx_write(cdt + 16 * i + 12, 0);
	}

	/* write CMDS */
	cx_write(ch->cmds_start + 0, risc);

	cx_write(ch->cmds_start + 4, 0);
	cx_write(ch->cmds_start + 8, cdt);
	cx_write(ch->cmds_start + 12, AUDIO_CDT_SIZE_QW);
	cx_write(ch->cmds_start + 16, ch->ctrl_start);

	/* IQ size */
	cx_write(ch->cmds_start + 20, AUDIO_IQ_SIZE_DW);

	for (i = 24; i < 80; i += 4)
		cx_write(ch->cmds_start + i, 0);

	/* fill registers */
	cx_write(ch->ptr1_reg, ch->fifo_start);
	cx_write(ch->ptr2_reg, cdt);
	cx_write(ch->cnt2_reg, AUDIO_CDT_SIZE_QW);
	cx_write(ch->cnt1_reg, AUDIO_CLUSTER_SIZE_QW - 1);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
22,23
24,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
26,34
26,35
26,36
26,37
26,38
26,39
26,40
26,41
26,42
26,43
26,44
26,45
26,46
26,47
27,28
28,29
28,30
28,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
40,41
40,42
41,42
41,43
42,43
42,44
43,44
47,48
47,49
47,50
47,51
47,52
48,49
49,50
49,51
49,52
50,51
52,53
52,54
53,54
57,58
58,59
58,60
58,61
59,60
61,62
61,63
62,63
66,67
67,68
67,69
67,70
68,69
70,71
70,72
71,72
75,76
76,77
76,78
76,79
77,78
79,80
79,81
80,81
84,85
86,87
87,88
87,89
88,89
90,91
90,92
91,92
92,93
92,94
93,94
96,97
98,99
99,100
99,101
100,101
102,103
102,104
103,104
106,107
107,108
107,109
108,109
110,111
110,112
111,112
111,113
112,113
115,116
117,118
117,119
118,119
118,120
119,120
122,123
123,124
123,125
124,125
127,128
128,129
128,130
129,130
131,132
131,133
132,133
135,136
135,137
135,138
135,139
136,137
137,138
137,139
138,139
141,142
141,143
142,143
144,145
146,147
147,148
149,150
149,151
149,152
149,153
150,151
151,152
151,153
151,154
152,153
154,155
154,156
155,156
157,158
157,159
159,160
161,162
161,163
162,163
162,164
163,164
166,167
166,168
167,168
169,170
171,172
172,173
172,174
172,175
173,174
175,176
175,177
176,177
176,178
177,178
179,180
179,181
181,182
185,186
186,187
186,188
186,189
187,188
189,190
189,191
190,191
190,192
191,192
193,194
193,195
195,196
199,200
200,201
200,202
200,203
201,202
203,204
203,205
204,205
204,206
205,206
207,208
207,209
209,210
213,214
214,215
214,216
214,217
215,216
217,218
217,219
218,219
218,220
219,220
223,224
225,226
226,227
226,228
226,229
227,228
229,230
229,231
230,231
230,232
231,232
236,237
237,238
237,239
237,240
238,239
240,241
240,242
241,242
241,243
242,243
246,247
248,249
249,250
249,251
249,252
250,251
252,253
252,254
253,254
253,255
254,255
258,259
260,261
261,262
261,263
261,264
262,263
264,265
264,266
265,266
265,267
266,267
270,271
270,272
271,272
274,275
275,276
275,277
275,278
276,277
278,279
278,280
279,280
279,281
280,281
284,285
286,287
286,288
286,289
286,290
287,288
288,289
288,290
289,290
292,293
292,294
293,294
296,297
296,298
297,298
300,301
301,302
301,303
301,304
302,303
304,305
304,306
305,306
305,307
306,307
309,310
312,313
313,314
313,315
313,316
314,315
316,317
316,318
317,318
320,321
320,322
321,322
324,325
325,326
325,327
325,328
326,327
328,329
328,330
329,330
332,333
334,335
335,336
335,337
335,338
336,337
338,339
338,340
339,340
342,343
344,345
345,346
345,347
345,348
346,347
348,349
348,350
349,350
352,353
352,354
353,354
356,357
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,23,25,29,31,33,37,39,44,45,46,51,54,55,56,60,63,64,65,69,72,73,74,78,81,82,83,85,89,94,95,97,101,104,105,109,113,114,116,120,121,125,126,130,133,134,139,140,143,145,148,153,156,158,160,164,165,168,170,174,178,180,182,183,184,188,192,194,196,197,198,202,206,208,210,211,212,216,220,221,222,224,228,232,233,234,235,239,243,244,245,247,251,255,256,257,259,263,267,268,269,272,273,277,281,282,283,285,290,291,294,295,298,299,303,307,308,310,311,315,318,319,322,323,327,330,331,333,337,340,341,343,347,350,351,354,355,357
-----computeFrom-----
41,42
41,43
87,88
87,89
90,91
90,92
92,93
92,94
99,100
99,101
107,108
107,109
110,111
110,112
118,119
118,120
123,124
123,125
131,132
131,133
137,138
137,139
141,142
141,143
154,155
154,156
157,158
157,159
161,162
161,163
166,167
166,168
175,176
175,177
176,177
176,178
179,180
179,181
189,190
189,191
190,191
190,192
193,194
193,195
203,204
203,205
204,205
204,206
207,208
207,209
217,218
217,219
229,230
229,231
240,241
240,242
252,253
252,254
264,265
264,266
278,279
278,280
288,289
288,290
292,293
292,294
296,297
296,298
304,305
304,306
352,353
352,354
-----guardedBy-----
44,81
120,125
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static int cx25821_sram_channel_setup_upstream_audio(struct cx25821_dev *dev,					      struct sram_channel *ch,					      unsigned int bpl, u32 risc){	unsigned int i, lines;	u32 cdt;	if (ch->cmds_start == 0) {		cx_write(ch->ptr1_reg, 0);		cx_write(ch->ptr2_reg, 0);		cx_write(ch->cnt2_reg, 0);		cx_write(ch->cnt1_reg, 0);		return 0;	}	bpl = (bpl + 7) & ~7;	/* alignment */	cdt = ch->cdt;	lines = ch->fifo_size / bpl;	if (lines > 3)		lines = 3;	BUG_ON(lines < 2);	/* write CDT */	for (i = 0; i < lines; i++) {		cx_write(cdt + 16 * i, ch->fifo_start + bpl * i);		cx_write(cdt + 16 * i + 4, 0);		cx_write(cdt + 16 * i + 8, 0);		cx_write(cdt + 16 * i + 12, 0);	}	/* write CMDS */	cx_write(ch->cmds_start + 0, risc);	cx_write(ch->cmds_start + 4, 0);	cx_write(ch->cmds_start + 8, cdt);	cx_write(ch->cmds_start + 12, AUDIO_CDT_SIZE_QW);	cx_write(ch->cmds_start + 16, ch->ctrl_start);	/* IQ size */	cx_write(ch->cmds_start + 20, AUDIO_IQ_SIZE_DW);	for (i = 24; i < 80; i += 4)		cx_write(ch->cmds_start + i, 0);	/* fill registers */	cx_write(ch->ptr1_reg, ch->fifo_start);	cx_write(ch->ptr2_reg, cdt);	cx_write(ch->cnt2_reg, AUDIO_CDT_SIZE_QW);	cx_write(ch->cnt1_reg, AUDIO_CLUSTER_SIZE_QW - 1);	return 0;}
static int
cx25821_sram_channel_setup_upstream_audio(struct cx25821_dev *dev,					      struct sram_channel *ch,					      unsigned int bpl, u32 risc)
cx25821_sram_channel_setup_upstream_audio
struct cx25821_dev *dev
struct cx25821_dev
cx25821_dev
*dev
*
dev
struct sram_channel *ch
struct sram_channel
sram_channel
*ch
*
ch
unsigned int bpl
unsigned int
bpl
bpl
u32 risc
u32
u32
risc
risc
{	unsigned int i, lines;	u32 cdt;	if (ch->cmds_start == 0) {		cx_write(ch->ptr1_reg, 0);		cx_write(ch->ptr2_reg, 0);		cx_write(ch->cnt2_reg, 0);		cx_write(ch->cnt1_reg, 0);		return 0;	}	bpl = (bpl + 7) & ~7;	/* alignment */	cdt = ch->cdt;	lines = ch->fifo_size / bpl;	if (lines > 3)		lines = 3;	BUG_ON(lines < 2);	/* write CDT */	for (i = 0; i < lines; i++) {		cx_write(cdt + 16 * i, ch->fifo_start + bpl * i);		cx_write(cdt + 16 * i + 4, 0);		cx_write(cdt + 16 * i + 8, 0);		cx_write(cdt + 16 * i + 12, 0);	}	/* write CMDS */	cx_write(ch->cmds_start + 0, risc);	cx_write(ch->cmds_start + 4, 0);	cx_write(ch->cmds_start + 8, cdt);	cx_write(ch->cmds_start + 12, AUDIO_CDT_SIZE_QW);	cx_write(ch->cmds_start + 16, ch->ctrl_start);	/* IQ size */	cx_write(ch->cmds_start + 20, AUDIO_IQ_SIZE_DW);	for (i = 24; i < 80; i += 4)		cx_write(ch->cmds_start + i, 0);	/* fill registers */	cx_write(ch->ptr1_reg, ch->fifo_start);	cx_write(ch->ptr2_reg, cdt);	cx_write(ch->cnt2_reg, AUDIO_CDT_SIZE_QW);	cx_write(ch->cnt1_reg, AUDIO_CLUSTER_SIZE_QW - 1);	return 0;}
unsigned int i, lines;
unsigned int i, lines;
unsigned int
i
i
lines
lines
u32 cdt;
u32 cdt;
u32
u32
cdt
cdt
if (ch->cmds_start == 0) {		cx_write(ch->ptr1_reg, 0);		cx_write(ch->ptr2_reg, 0);		cx_write(ch->cnt2_reg, 0);		cx_write(ch->cnt1_reg, 0);		return 0;	}
ch->cmds_start == 0
ch->cmds_start
ch
ch
cmds_start
0
{		cx_write(ch->ptr1_reg, 0);		cx_write(ch->ptr2_reg, 0);		cx_write(ch->cnt2_reg, 0);		cx_write(ch->cnt1_reg, 0);		return 0;	}
cx_write(ch->ptr1_reg, 0);
cx_write(ch->ptr1_reg, 0)
cx_write
cx_write
ch->ptr1_reg
ch
ch
ptr1_reg
0
cx_write(ch->ptr2_reg, 0);
cx_write(ch->ptr2_reg, 0)
cx_write
cx_write
ch->ptr2_reg
ch
ch
ptr2_reg
0
cx_write(ch->cnt2_reg, 0);
cx_write(ch->cnt2_reg, 0)
cx_write
cx_write
ch->cnt2_reg
ch
ch
cnt2_reg
0
cx_write(ch->cnt1_reg, 0);
cx_write(ch->cnt1_reg, 0)
cx_write
cx_write
ch->cnt1_reg
ch
ch
cnt1_reg
0
return 0;
0
bpl = (bpl + 7) & ~7;
bpl = (bpl + 7) & ~7
bpl
bpl
(bpl + 7) & ~7
(bpl + 7)
bpl + 7
bpl
bpl
7
~7
7
cdt = ch->cdt;
cdt = ch->cdt
cdt
cdt
ch->cdt
ch
ch
cdt
lines = ch->fifo_size / bpl;
lines = ch->fifo_size / bpl
lines
lines
ch->fifo_size / bpl
ch->fifo_size
ch
ch
fifo_size
bpl
bpl
if (lines > 3)		lines = 3;
lines > 3
lines
lines
3
lines = 3;
lines = 3
lines
lines
3
BUG_ON(lines < 2);
BUG_ON(lines < 2)
BUG_ON
BUG_ON
lines < 2
lines
lines
2
for (i = 0; i < lines; i++) {		cx_write(cdt + 16 * i, ch->fifo_start + bpl * i);		cx_write(cdt + 16 * i + 4, 0);		cx_write(cdt + 16 * i + 8, 0);		cx_write(cdt + 16 * i + 12, 0);	}
i = 0;
i = 0
i
i
0
i < lines
i
i
lines
lines
i++
i
i
{		cx_write(cdt + 16 * i, ch->fifo_start + bpl * i);		cx_write(cdt + 16 * i + 4, 0);		cx_write(cdt + 16 * i + 8, 0);		cx_write(cdt + 16 * i + 12, 0);	}
cx_write(cdt + 16 * i, ch->fifo_start + bpl * i);
cx_write(cdt + 16 * i, ch->fifo_start + bpl * i)
cx_write
cx_write
cdt + 16 * i
cdt
cdt
16 * i
16
i
i
ch->fifo_start + bpl * i
ch->fifo_start
ch
ch
fifo_start
bpl * i
bpl
bpl
i
i
cx_write(cdt + 16 * i + 4, 0);
cx_write(cdt + 16 * i + 4, 0)
cx_write
cx_write
cdt + 16 * i + 4
cdt + 16 * i
cdt
cdt
16 * i
16
i
i
4
0
cx_write(cdt + 16 * i + 8, 0);
cx_write(cdt + 16 * i + 8, 0)
cx_write
cx_write
cdt + 16 * i + 8
cdt + 16 * i
cdt
cdt
16 * i
16
i
i
8
0
cx_write(cdt + 16 * i + 12, 0);
cx_write(cdt + 16 * i + 12, 0)
cx_write
cx_write
cdt + 16 * i + 12
cdt + 16 * i
cdt
cdt
16 * i
16
i
i
12
0
cx_write(ch->cmds_start + 0, risc);
cx_write(ch->cmds_start + 0, risc)
cx_write
cx_write
ch->cmds_start + 0
ch->cmds_start
ch
ch
cmds_start
0
risc
risc
cx_write(ch->cmds_start + 4, 0);
cx_write(ch->cmds_start + 4, 0)
cx_write
cx_write
ch->cmds_start + 4
ch->cmds_start
ch
ch
cmds_start
4
0
cx_write(ch->cmds_start + 8, cdt);
cx_write(ch->cmds_start + 8, cdt)
cx_write
cx_write
ch->cmds_start + 8
ch->cmds_start
ch
ch
cmds_start
8
cdt
cdt
cx_write(ch->cmds_start + 12, AUDIO_CDT_SIZE_QW);
cx_write(ch->cmds_start + 12, AUDIO_CDT_SIZE_QW)
cx_write
cx_write
ch->cmds_start + 12
ch->cmds_start
ch
ch
cmds_start
12
AUDIO_CDT_SIZE_QW
AUDIO_CDT_SIZE_QW
cx_write(ch->cmds_start + 16, ch->ctrl_start);
cx_write(ch->cmds_start + 16, ch->ctrl_start)
cx_write
cx_write
ch->cmds_start + 16
ch->cmds_start
ch
ch
cmds_start
16
ch->ctrl_start
ch
ch
ctrl_start
cx_write(ch->cmds_start + 20, AUDIO_IQ_SIZE_DW);
cx_write(ch->cmds_start + 20, AUDIO_IQ_SIZE_DW)
cx_write
cx_write
ch->cmds_start + 20
ch->cmds_start
ch
ch
cmds_start
20
AUDIO_IQ_SIZE_DW
AUDIO_IQ_SIZE_DW
for (i = 24; i < 80; i += 4)		cx_write(ch->cmds_start + i, 0);
i = 24;
i = 24
i
i
24
i < 80
i
i
80
i += 4
i
i
4
cx_write(ch->cmds_start + i, 0);
cx_write(ch->cmds_start + i, 0)
cx_write
cx_write
ch->cmds_start + i
ch->cmds_start
ch
ch
cmds_start
i
i
0
cx_write(ch->ptr1_reg, ch->fifo_start);
cx_write(ch->ptr1_reg, ch->fifo_start)
cx_write
cx_write
ch->ptr1_reg
ch
ch
ptr1_reg
ch->fifo_start
ch
ch
fifo_start
cx_write(ch->ptr2_reg, cdt);
cx_write(ch->ptr2_reg, cdt)
cx_write
cx_write
ch->ptr2_reg
ch
ch
ptr2_reg
cdt
cdt
cx_write(ch->cnt2_reg, AUDIO_CDT_SIZE_QW);
cx_write(ch->cnt2_reg, AUDIO_CDT_SIZE_QW)
cx_write
cx_write
ch->cnt2_reg
ch
ch
cnt2_reg
AUDIO_CDT_SIZE_QW
AUDIO_CDT_SIZE_QW
cx_write(ch->cnt1_reg, AUDIO_CLUSTER_SIZE_QW - 1);
cx_write(ch->cnt1_reg, AUDIO_CLUSTER_SIZE_QW - 1)
cx_write
cx_write
ch->cnt1_reg
ch
ch
cnt1_reg
AUDIO_CLUSTER_SIZE_QW - 1
AUDIO_CLUSTER_SIZE_QW
AUDIO_CLUSTER_SIZE_QW
1
return 0;
0
-----joern-----
(182,9,0)
(188,119,0)
(153,140,0)
(132,121,0)
(97,96,0)
(184,73,0)
(16,11,0)
(30,140,0)
(147,87,0)
(88,97,0)
(83,163,0)
(106,96,0)
(75,2,0)
(146,38,0)
(64,96,0)
(53,140,0)
(71,148,0)
(48,2,0)
(75,173,0)
(124,137,0)
(67,101,0)
(78,10,0)
(75,42,0)
(120,41,0)
(55,140,0)
(105,183,0)
(33,60,0)
(136,177,0)
(147,148,0)
(32,42,0)
(183,180,0)
(10,128,0)
(49,38,0)
(45,98,0)
(37,96,0)
(102,168,0)
(36,72,0)
(9,6,0)
(157,14,0)
(30,143,0)
(13,96,0)
(7,143,0)
(167,72,0)
(108,7,0)
(157,7,0)
(127,140,0)
(34,137,0)
(117,137,0)
(79,123,0)
(151,62,0)
(11,178,0)
(44,128,0)
(123,2,0)
(3,130,0)
(184,60,0)
(73,22,0)
(41,127,0)
(146,69,0)
(42,32,0)
(177,162,0)
(39,96,0)
(93,106,0)
(143,72,0)
(110,62,0)
(17,194,0)
(168,96,0)
(133,123,0)
(124,140,0)
(99,2,0)
(189,37,0)
(138,54,0)
(125,96,0)
(87,140,0)
(176,189,0)
(37,189,0)
(166,87,0)
(142,96,0)
(185,32,0)
(72,96,0)
(112,92,0)
(155,96,0)
(21,73,0)
(35,140,0)
(127,41,0)
(45,140,0)
(177,197,0)
(118,89,0)
(31,96,0)
(29,184,0)
(199,197,0)
(163,13,0)
(32,185,0)
(80,128,0)
(75,162,0)
(123,69,0)
(77,64,0)
(138,64,0)
(180,55,0)
(181,31,0)
(38,146,0)
(179,89,0)
(32,22,0)
(72,143,0)
(187,140,0)
(153,143,0)
(174,26,0)
(149,153,0)
(89,55,0)
(110,140,0)
(168,25,0)
(51,125,0)
(144,64,0)
(61,149,0)
(41,39,0)
(51,178,0)
(5,26,0)
(109,37,0)
(38,22,0)
(181,178,0)
(202,185,0)
(18,121,0)
(84,31,0)
(197,177,0)
(42,106,0)
(114,153,0)
(7,108,0)
(186,55,0)
(103,140,0)
(14,2,0)
(153,149,0)
(158,140,0)
(68,101,0)
(81,147,0)
(107,186,0)
(56,34,0)
(73,184,0)
(0,142,0)
(59,62,0)
(184,143,0)
(191,9,0)
(104,54,0)
(86,80,0)
(60,184,0)
(12,6,0)
(165,80,0)
(3,96,0)
(69,123,0)
(150,177,0)
(66,140,0)
(98,101,0)
(160,14,0)
(146,143,0)
(173,140,0)
(156,3,0)
(194,96,0)
(116,39,0)
(192,53,0)
(13,163,0)
(149,96,0)
(9,96,0)
(20,140,0)
(194,11,0)
(126,48,0)
(164,149,0)
(115,37,0)
(196,170,0)
(108,22,0)
(101,96,0)
(185,48,0)
(95,69,0)
(42,75,0)
(189,53,0)
(180,183,0)
(94,7,0)
(39,41,0)
(193,13,0)
(125,51,0)
(180,162,0)
(161,194,0)
(40,2,0)
(57,140,0)
(131,34,0)
(137,124,0)
(152,142,0)
(53,189,0)
(197,173,0)
(34,96,0)
(28,155,0)
(98,45,0)
(124,97,0)
(82,146,0)
(26,130,0)
(121,55,0)
(25,168,0)
(139,140,0)
(183,96,0)
(142,0,0)
(30,6,0)
(138,128,0)
(180,173,0)
(69,146,0)
(203,30,0)
(60,40,0)
(143,140,0)
(7,157,0)
(101,98,0)
(91,180,0)
(185,143,0)
(155,110,0)
(6,30,0)
(6,9,0)
(190,125,0)
(27,31,0)
(141,186,0)
(23,97,0)
(10,10,0)
(62,110,0)
(85,138,0)
(80,10,0)
(148,147,0)
(87,147,0)
(24,45,0)
(89,92,0)
(175,48,0)
(47,92,0)
(138,10,0)
(171,2,0)
(53,15,0)
(172,143,0)
(113,40,0)
(89,66,0)
(121,2,0)
(90,39,0)
(74,14,0)
(63,55,0)
(52,25,0)
(55,180,0)
(121,92,0)
(201,13,0)
(48,185,0)
(119,178,0)
(97,124,0)
(11,194,0)
(135,51,0)
(170,140,0)
(159,171,0)
(8,75,0)
(137,34,0)
(148,96,0)
(26,96,0)
(58,170,0)
(14,157,0)
(25,178,0)
(196,119,0)
(173,197,0)
(40,60,0)
(145,0,0)
(129,157,0)
(169,40,0)
(4,3,0)
(54,138,0)
(154,10,0)
(31,181,0)
(134,127,0)
(130,26,0)
(106,42,0)
(70,75,0)
(46,125,0)
(66,89,0)
(163,140,0)
(110,155,0)
(122,148,0)
(173,162,0)
(76,142,0)
(65,98,0)
(111,173,0)
(64,138,0)
(19,2,0)
(50,128,0)
(43,155,0)
(100,183,0)
(198,108,0)
(200,106,0)
(195,181,0)
(130,140,0)
(130,3,0)
(1,168,0)
(79,82,1)
(60,40,1)
(145,142,1)
(150,136,1)
(69,95,1)
(49,146,1)
(133,79,1)
(80,86,1)
(75,162,1)
(147,81,1)
(64,96,1)
(41,39,1)
(113,169,1)
(189,176,1)
(164,130,1)
(114,149,1)
(2,19,1)
(67,68,1)
(10,10,1)
(111,0,1)
(102,0,1)
(11,194,1)
(7,143,1)
(48,126,1)
(130,3,1)
(183,96,1)
(131,87,1)
(92,112,1)
(196,119,1)
(82,73,1)
(191,182,1)
(66,89,1)
(132,18,1)
(153,143,1)
(112,47,1)
(202,121,1)
(13,96,1)
(87,166,1)
(171,2,1)
(89,92,1)
(201,153,1)
(1,102,1)
(28,43,1)
(42,75,1)
(17,161,1)
(141,55,1)
(151,59,1)
(170,58,1)
(169,29,1)
(76,152,1)
(199,177,1)
(70,8,1)
(118,179,1)
(147,148,1)
(38,49,1)
(192,189,1)
(51,135,1)
(11,16,1)
(75,2,1)
(116,90,1)
(37,109,1)
(142,96,1)
(126,175,1)
(39,96,1)
(34,56,1)
(98,65,1)
(153,114,1)
(119,188,1)
(165,128,1)
(95,123,1)
(189,37,1)
(73,21,1)
(121,2,1)
(163,13,1)
(124,137,1)
(179,92,1)
(72,96,1)
(10,128,1)
(142,76,1)
(198,7,1)
(177,162,1)
(130,26,1)
(26,96,1)
(117,34,1)
(125,96,1)
(10,78,1)
(165,10,1)
(6,12,1)
(181,31,1)
(106,93,1)
(148,122,1)
(50,44,1)
(127,41,1)
(194,17,1)
(30,6,1)
(154,54,1)
(89,55,1)
(123,133,1)
(175,202,1)
(23,137,1)
(121,92,1)
(9,191,1)
(110,155,1)
(38,146,1)
(43,163,1)
(56,131,1)
(193,201,1)
(80,128,1)
(14,2,1)
(75,70,1)
(190,181,1)
(24,98,1)
(5,174,1)
(18,171,1)
(157,14,1)
(127,134,1)
(138,10,1)
(85,64,1)
(179,186,1)
(41,120,1)
(186,107,1)
(71,30,1)
(31,96,1)
(136,111,1)
(176,37,1)
(27,25,1)
(146,69,1)
(58,110,1)
(97,88,1)
(148,96,1)
(180,173,1)
(4,80,1)
(81,148,1)
(143,72,1)
(197,177,1)
(171,159,1)
(47,186,1)
(107,141,1)
(55,180,1)
(8,106,1)
(124,97,1)
(98,101,1)
(144,77,1)
(46,190,1)
(30,203,1)
(121,55,1)
(121,132,1)
(149,96,1)
(25,168,1)
(39,116,1)
(194,96,1)
(12,9,1)
(157,129,1)
(34,96,1)
(37,96,1)
(138,85,1)
(183,105,1)
(156,4,1)
(91,183,1)
(9,96,1)
(168,96,1)
(153,149,1)
(3,96,1)
(160,74,1)
(32,42,1)
(74,94,1)
(185,143,1)
(172,173,1)
(115,121,1)
(90,53,1)
(73,184,1)
(26,5,1)
(134,41,1)
(135,125,1)
(163,83,1)
(18,2,1)
(89,118,1)
(0,145,1)
(63,143,1)
(109,115,1)
(52,168,1)
(83,13,1)
(40,113,1)
(42,106,1)
(72,36,1)
(173,162,1)
(149,61,1)
(181,195,1)
(182,127,1)
(14,160,1)
(184,60,1)
(155,28,1)
(69,123,1)
(61,164,1)
(167,172,1)
(137,34,1)
(64,144,1)
(180,183,1)
(87,147,1)
(203,6,1)
(16,194,1)
(101,96,1)
(146,143,1)
(108,198,1)
(123,2,1)
(177,150,1)
(21,184,1)
(200,185,1)
(7,157,1)
(110,62,1)
(6,9,1)
(84,27,1)
(120,39,1)
(180,162,1)
(40,2,1)
(128,50,1)
(19,99,1)
(125,46,1)
(53,192,1)
(94,38,1)
(25,52,1)
(106,96,1)
(100,63,1)
(3,156,1)
(195,31,1)
(137,117,1)
(184,143,1)
(188,11,1)
(138,128,1)
(33,40,1)
(30,143,1)
(166,147,1)
(31,84,1)
(32,185,1)
(51,125,1)
(180,91,1)
(68,124,1)
(59,155,1)
(36,167,1)
(186,55,1)
(185,48,1)
(159,108,1)
(99,66,1)
(155,96,1)
(108,7,1)
(54,138,1)
(65,101,1)
(45,24,1)
(45,98,1)
(173,197,1)
(53,15,1)
(53,189,1)
(197,199,1)
(101,67,1)
(86,165,1)
(29,32,1)
(88,23,1)
(105,100,1)
(0,142,1)
(168,1,1)
(161,51,1)
(122,71,1)
(48,2,1)
(129,14,1)
(54,104,1)
(75,173,1)
(97,96,1)
(77,80,1)
(80,10,1)
(196,170,1)
(104,138,1)
(60,33,1)
(13,193,1)
(174,3,1)
(62,151,1)
(138,64,1)
(78,154,1)
(93,200,1)
(44,45,1)
(80,128,2)
(73,184,2)
(123,2,2)
(111,0,2)
(31,0,2)
(16,0,2)
(146,143,2)
(11,194,2)
(83,0,2)
(51,0,2)
(66,89,2)
(84,0,2)
(64,80,2)
(25,168,2)
(121,55,2)
(3,96,2)
(23,0,2)
(56,0,2)
(146,121,2)
(180,183,2)
(9,0,2)
(185,121,2)
(173,0,2)
(164,0,2)
(198,121,2)
(184,121,2)
(165,80,2)
(143,0,2)
(184,143,2)
(148,96,2)
(149,96,2)
(80,0,2)
(81,0,2)
(166,0,2)
(34,96,2)
(80,80,2)
(108,121,2)
(184,60,2)
(97,96,2)
(47,186,2)
(155,0,2)
(138,64,2)
(125,96,2)
(18,0,2)
(102,0,2)
(32,42,2)
(45,98,2)
(170,0,2)
(53,15,2)
(92,186,2)
(82,121,2)
(63,0,2)
(68,0,2)
(175,121,2)
(157,14,2)
(41,39,2)
(87,0,2)
(105,0,2)
(107,0,2)
(88,0,2)
(173,162,2)
(192,0,2)
(26,0,2)
(42,75,2)
(54,80,2)
(196,170,2)
(1,0,2)
(195,0,2)
(39,0,2)
(157,121,2)
(126,121,2)
(121,2,2)
(124,0,2)
(40,2,2)
(122,0,2)
(69,123,2)
(89,92,2)
(181,0,2)
(132,121,2)
(138,10,2)
(137,0,2)
(138,80,2)
(7,121,2)
(117,0,2)
(10,128,2)
(77,80,2)
(182,0,2)
(156,0,2)
(133,121,2)
(6,0,2)
(19,0,2)
(186,55,2)
(106,121,2)
(161,0,2)
(53,189,2)
(121,121,2)
(73,121,2)
(64,96,2)
(173,197,2)
(29,121,2)
(70,121,2)
(7,143,2)
(120,0,2)
(194,0,2)
(130,3,2)
(177,0,2)
(115,0,2)
(125,0,2)
(80,10,2)
(45,0,2)
(197,177,2)
(36,0,2)
(191,0,2)
(163,13,2)
(147,0,2)
(25,0,2)
(98,101,2)
(113,121,2)
(183,96,2)
(17,0,2)
(55,0,2)
(98,0,2)
(185,48,2)
(11,0,2)
(99,0,2)
(72,96,2)
(62,0,2)
(43,0,2)
(153,149,2)
(127,0,2)
(129,121,2)
(123,121,2)
(41,0,2)
(24,0,2)
(87,147,2)
(137,34,2)
(183,0,2)
(110,155,2)
(71,0,2)
(10,10,2)
(53,0,2)
(202,121,2)
(60,40,2)
(180,162,2)
(110,0,2)
(118,0,2)
(154,80,2)
(135,0,2)
(30,0,2)
(75,173,2)
(131,0,2)
(146,69,2)
(12,0,2)
(49,121,2)
(54,138,2)
(203,0,2)
(168,0,2)
(179,0,2)
(134,0,2)
(75,2,2)
(93,121,2)
(27,0,2)
(5,0,2)
(101,0,2)
(124,137,2)
(42,106,2)
(97,0,2)
(165,0,2)
(59,0,2)
(31,96,2)
(109,0,2)
(143,72,2)
(13,96,2)
(189,0,2)
(78,80,2)
(3,0,2)
(174,0,2)
(121,0,2)
(48,2,2)
(37,96,2)
(155,96,2)
(86,80,2)
(21,121,2)
(153,0,2)
(180,173,2)
(141,0,2)
(151,0,2)
(0,142,2)
(193,0,2)
(8,121,2)
(130,0,2)
(13,0,2)
(89,55,2)
(7,157,2)
(180,0,2)
(144,80,2)
(86,0,2)
(75,162,2)
(55,180,2)
(38,121,2)
(75,121,2)
(4,0,2)
(190,0,2)
(176,0,2)
(108,7,2)
(138,128,2)
(38,146,2)
(188,0,2)
(114,0,2)
(10,80,2)
(130,26,2)
(168,96,2)
(167,0,2)
(124,97,2)
(32,121,2)
(14,121,2)
(100,0,2)
(171,2,2)
(177,162,2)
(171,121,2)
(46,0,2)
(85,80,2)
(67,0,2)
(201,0,2)
(197,0,2)
(169,121,2)
(42,121,2)
(91,0,2)
(74,121,2)
(48,121,2)
(37,0,2)
(136,0,2)
(51,125,2)
(101,96,2)
(44,0,2)
(112,186,2)
(199,0,2)
(186,0,2)
(26,96,2)
(2,0,2)
(40,121,2)
(194,96,2)
(172,0,2)
(72,0,2)
(61,0,2)
(142,96,2)
(79,121,2)
(200,121,2)
(39,96,2)
(52,0,2)
(34,0,2)
(121,92,2)
(196,119,2)
(106,96,2)
(119,0,2)
(6,9,2)
(104,80,2)
(189,37,2)
(110,62,2)
(159,121,2)
(185,143,2)
(18,121,2)
(128,0,2)
(148,0,2)
(147,148,2)
(127,41,2)
(14,2,2)
(116,0,2)
(60,121,2)
(153,143,2)
(95,121,2)
(89,0,2)
(132,0,2)
(32,185,2)
(58,0,2)
(30,143,2)
(50,0,2)
(149,0,2)
(69,121,2)
(94,121,2)
(160,121,2)
(28,0,2)
(33,121,2)
(30,6,2)
(65,0,2)
(163,0,2)
(150,0,2)
(66,0,2)
(90,0,2)
(9,96,2)
(181,31,2)
-----------------------------------
(0,ch->cmds_start == 0)
(1,ptr1_reg)
(2,i = 0)
(3,ch->ptr1_reg)
(4,ch)
(5,fifo_start)
(6,ch->cmds_start + 8)
(7,cdt + 16 * i + 12)
(8,bpl)
(9,ch->cmds_start)
(10,i += 4)
(11,cx_write(ch->cnt1_reg, 0)
(12,8)
(13,ch->cnt2_reg)
(14,16 * i)
(15,u32 risc)
(16,0)
(17,cnt1_reg)
(18,i)
(19,0)
(20,cdt)
(21,0)
(22,)
(23,ch)
(24,AUDIO_IQ_SIZE_DW)
(25,cx_write(ch->ptr1_reg, 0)
(26,ch->fifo_start)
(27,ch)
(28,cnt1_reg)
(29,cdt)
(30,cx_write(ch->cmds_start + 8, cdt)
(31,ch->ptr2_reg)
(32,cx_write(cdt + 16 * i, ch->fifo_start + bpl * i)
(33,4)
(34,ch->cmds_start)
(35,i)
(36,cdt)
(37,ch->cmds_start)
(38,cx_write(cdt + 16 * i + 8, 0)
(39,ch->cmds_start)
(40,16 * i)
(41,ch->cmds_start + 4)
(42,ch->fifo_start + bpl * i)
(43,ch)
(44,i)
(45,cx_write(ch->cmds_start + 20, AUDIO_IQ_SIZE_DW)
(46,cnt2_reg)
(47,lines)
(48,16 * i)
(49,0)
(50,24)
(51,cx_write(ch->cnt2_reg, 0)
(52,0)
(53,cx_write(ch->cmds_start + 0, risc)
(54,cx_write(ch->cmds_start + i, 0)
(55,lines = ch->fifo_size / bpl)
(56,cmds_start)
(57,lines)
(58,0)
(59,AUDIO_CLUSTER_SIZE_QW)
(60,16 * i + 4)
(61,ptr2_reg)
(62,AUDIO_CLUSTER_SIZE_QW - 1)
(63,lines)
(64,ch->cmds_start)
(65,20)
(66,BUG_ON(lines < 2)
(67,cmds_start)
(68,ch)
(69,16 * i + 8)
(70,i)
(71,ch)
(72,ch->cdt)
(73,cx_write(cdt + 16 * i + 4, 0)
(74,16)
(75,bpl * i)
(76,cmds_start)
(77,ch)
(78,4)
(79,16)
(80,i < 80)
(81,12)
(82,cdt)
(83,AUDIO_CDT_SIZE_QW)
(84,ptr2_reg)
(85,i)
(86,80)
(87,cx_write(ch->cmds_start + 12, AUDIO_CDT_SIZE_QW)
(88,ctrl_start)
(89,lines < 2)
(90,ch)
(91,bpl)
(92,lines = 3)
(93,fifo_start)
(94,cdt)
(95,8)
(96,struct sram_channel *ch)
(97,ch->ctrl_start)
(98,ch->cmds_start + 20)
(99,i)
(100,ch)
(101,ch->cmds_start)
(102,ch)
(103,for (i = 24; i < 80; i += 4)
(104,0)
(105,fifo_size)
(106,ch->fifo_start)
(107,3)
(108,cx_write(cdt + 16 * i + 12, 0)
(109,cmds_start)
(110,cx_write(ch->cnt1_reg, AUDIO_CLUSTER_SIZE_QW - 1)
(111,bpl)
(112,3)
(113,i)
(114,cdt)
(115,ch)
(116,cmds_start)
(117,16)
(118,2)
(119,return 0;)
(120,4)
(121,i < lines)
(122,cmds_start)
(123,16 * i)
(124,cx_write(ch->cmds_start + 16, ch->ctrl_start)
(125,ch->cnt2_reg)
(126,i)
(127,cx_write(ch->cmds_start + 4, 0)
(128,i = 24)
(129,12)
(130,cx_write(ch->ptr1_reg, ch->fifo_start)
(131,ch)
(132,lines)
(133,i)
(134,0)
(135,0)
(136,bpl)
(137,ch->cmds_start + 16)
(138,ch->cmds_start + i)
(139,if (lines > 3)
(140,)
(141,lines)
(142,ch->cmds_start)
(143,cdt = ch->cdt)
(144,cmds_start)
(145,0)
(146,cdt + 16 * i + 8)
(147,ch->cmds_start + 12)
(148,ch->cmds_start)
(149,ch->ptr2_reg)
(150,7)
(151,1)
(152,ch)
(153,cx_write(ch->ptr2_reg, cdt)
(154,i)
(155,ch->cnt1_reg)
(156,ptr1_reg)
(157,16 * i + 12)
(158,if (ch->cmds_start == 0)
(159,i)
(160,i)
(161,ch)
(162,unsigned int bpl)
(163,cx_write(ch->cnt2_reg, AUDIO_CDT_SIZE_QW)
(164,ch)
(165,i)
(166,AUDIO_CDT_SIZE_QW)
(167,ch)
(168,ch->ptr1_reg)
(169,16)
(170,return 0;)
(171,i++)
(172,cdt)
(173,bpl = (bpl + 7)
(174,ch)
(175,16)
(176,0)
(177,bpl + 7)
(178,)
(179,lines)
(180,ch->fifo_size / bpl)
(181,cx_write(ch->ptr2_reg, 0)
(182,ch)
(183,ch->fifo_size)
(184,cdt + 16 * i + 4)
(185,cdt + 16 * i)
(186,lines > 3)
(187,for (i = 0; i < lines; i++)
(188,0)
(189,ch->cmds_start + 0)
(190,ch)
(191,cmds_start)
(192,risc)
(193,cnt2_reg)
(194,ch->cnt1_reg)
(195,0)
(196,RET)
(197,(bpl + 7)
(198,0)
(199,~7)
(200,ch)
(201,ch)
(202,cdt)
(203,cdt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^