-----label-----
0
-----code-----
wpt_status WLANDXE_Stop
(
   void *pDXEContext
)
{
   wpt_status                 status = eWLAN_PAL_STATUS_SUCCESS;
   wpt_uint32                 idx;
   WLANDXE_CtrlBlkType       *dxeCtxt = NULL;

   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "%s Enter", __func__);

   /* Sanity */
   if(NULL == pDXEContext)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "WLANDXE_Stop Invalid DXE CB");
      return eWLAN_PAL_STATUS_E_INVAL;   
   }

   dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext;
   for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)
   {
      if(VOS_TIMER_STATE_RUNNING == wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer))
      {
         wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);
      }

      status = dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx]);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "WLANDXE_Stop Channel %d Stop Fail", idx);
         return status;
      }
   }

   /* During Stop unregister interrupt */
   wpalUnRegisterInterrupt(DXE_INTERRUPT_TX_COMPLE);
   wpalUnRegisterInterrupt(DXE_INTERRUPT_RX_READY);

   if(VOS_TIMER_STATE_STOPPED !=
      wpalTimerGetCurStatus(&dxeCtxt->rxResourceAvailableTimer))
   {
      wpalTimerStop(&dxeCtxt->rxResourceAvailableTimer);
   }

   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "%s Exit", __func__);
   return status;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
31,34
34,35
35,36
37,38
38,39
38,40
38,41
38,42
38,43
39,40
41,42
43,44
46,47
48,49
48,50
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
56,59
56,60
57,58
59,60
61,62
64,65
65,66
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
79,80
79,81
79,82
79,83
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
90,91
91,92
93,94
93,95
93,96
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
101,102
102,103
102,104
103,104
103,105
104,105
104,106
105,106
108,109
111,112
112,113
113,114
113,115
114,115
116,117
117,118
117,119
118,119
118,120
119,120
119,121
120,121
123,124
126,127
127,128
127,129
128,129
130,131
130,132
130,133
131,132
133,134
135,136
136,137
136,138
137,138
137,139
138,139
141,142
143,144
143,145
144,145
144,146
145,146
147,148
149,150
149,151
150,151
151,152
151,153
151,154
151,155
151,156
152,153
154,155
156,157
159,160
161,162
162,163
164,165
165,166
165,167
166,167
168,169
169,170
171,172
172,173
172,174
173,174
175,176
176,177
178,179
178,180
179,180
179,181
180,181
182,183
182,184
183,184
185,186
186,187
186,188
187,188
190,191
191,192
192,193
192,194
193,194
195,196
196,197
196,198
197,198
200,201
201,202
201,203
201,204
201,205
201,206
202,203
204,205
206,207
209,210
211,212
212,213
-----nextToken-----
3,5,7,9,10,15,17,20,24,26,30,32,33,36,40,42,44,45,47,51,53,58,60,62,63,66,70,74,76,78,83,84,87,89,92,97,100,106,107,109,110,115,121,122,124,125,129,132,134,139,140,142,146,148,153,155,157,158,160,163,167,170,174,177,181,184,188,189,194,198,199,203,205,207,208,210,213
-----computeFrom-----
49,50
49,51
68,69
68,70
81,82
81,83
85,86
85,87
95,96
95,97
127,128
127,129
144,145
144,146
179,180
179,181
-----guardedBy-----
110,125
106,121
109,124
107,122
148,163
189,199
188,198
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
wpt_status WLANDXE_Stop(   void *pDXEContext){   wpt_status                 status = eWLAN_PAL_STATUS_SUCCESS;   wpt_uint32                 idx;   WLANDXE_CtrlBlkType       *dxeCtxt = NULL;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);   /* Sanity */   if(NULL == pDXEContext)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");      return eWLAN_PAL_STATUS_E_INVAL;      }   dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext;   for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)   {      if(VOS_TIMER_STATE_RUNNING == wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer))      {         wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      }      status = dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx]);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "WLANDXE_Stop Channel %d Stop Fail", idx);         return status;      }   }   /* During Stop unregister interrupt */   wpalUnRegisterInterrupt(DXE_INTERRUPT_TX_COMPLE);   wpalUnRegisterInterrupt(DXE_INTERRUPT_RX_READY);   if(VOS_TIMER_STATE_STOPPED !=      wpalTimerGetCurStatus(&dxeCtxt->rxResourceAvailableTimer))   {      wpalTimerStop(&dxeCtxt->rxResourceAvailableTimer);   }   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return status;}
wpt_status
wpt_status
WLANDXE_Stop(   void *pDXEContext)
WLANDXE_Stop
void *pDXEContext
void
*pDXEContext
*
pDXEContext
{   wpt_status                 status = eWLAN_PAL_STATUS_SUCCESS;   wpt_uint32                 idx;   WLANDXE_CtrlBlkType       *dxeCtxt = NULL;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);   /* Sanity */   if(NULL == pDXEContext)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");      return eWLAN_PAL_STATUS_E_INVAL;      }   dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext;   for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)   {      if(VOS_TIMER_STATE_RUNNING == wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer))      {         wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      }      status = dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx]);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "WLANDXE_Stop Channel %d Stop Fail", idx);         return status;      }   }   /* During Stop unregister interrupt */   wpalUnRegisterInterrupt(DXE_INTERRUPT_TX_COMPLE);   wpalUnRegisterInterrupt(DXE_INTERRUPT_RX_READY);   if(VOS_TIMER_STATE_STOPPED !=      wpalTimerGetCurStatus(&dxeCtxt->rxResourceAvailableTimer))   {      wpalTimerStop(&dxeCtxt->rxResourceAvailableTimer);   }   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return status;}
wpt_status                 status = eWLAN_PAL_STATUS_SUCCESS;
wpt_status                 status = eWLAN_PAL_STATUS_SUCCESS;
wpt_status
wpt_status
status = eWLAN_PAL_STATUS_SUCCESS
status
= eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
wpt_uint32                 idx;
wpt_uint32                 idx;
wpt_uint32
wpt_uint32
idx
idx
WLANDXE_CtrlBlkType       *dxeCtxt = NULL;
WLANDXE_CtrlBlkType       *dxeCtxt = NULL;
WLANDXE_CtrlBlkType
WLANDXE_CtrlBlkType
*dxeCtxt = NULL
*
dxeCtxt
= NULL
NULL
NULL
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Enter"
__func__
__func__
if(NULL == pDXEContext)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");      return eWLAN_PAL_STATUS_E_INVAL;      }
NULL == pDXEContext
NULL
NULL
pDXEContext
pDXEContext
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");      return eWLAN_PAL_STATUS_E_INVAL;      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"WLANDXE_Stop Invalid DXE CB"
return eWLAN_PAL_STATUS_E_INVAL;
eWLAN_PAL_STATUS_E_INVAL
eWLAN_PAL_STATUS_E_INVAL
dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext;
dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext
dxeCtxt
dxeCtxt
(WLANDXE_CtrlBlkType *)pDXEContext
WLANDXE_CtrlBlkType *
WLANDXE_CtrlBlkType
WLANDXE_CtrlBlkType
*
*
pDXEContext
pDXEContext
for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)   {      if(VOS_TIMER_STATE_RUNNING == wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer))      {         wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      }      status = dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx]);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "WLANDXE_Stop Channel %d Stop Fail", idx);         return status;      }   }
idx = 0;
idx = 0
idx
idx
0
idx < WDTS_CHANNEL_MAX
idx
idx
WDTS_CHANNEL_MAX
WDTS_CHANNEL_MAX
idx++
idx
idx
{      if(VOS_TIMER_STATE_RUNNING == wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer))      {         wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      }      status = dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx]);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "WLANDXE_Stop Channel %d Stop Fail", idx);         return status;      }   }
if(VOS_TIMER_STATE_RUNNING == wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer))      {         wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      }
VOS_TIMER_STATE_RUNNING == wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
VOS_TIMER_STATE_RUNNING
VOS_TIMER_STATE_RUNNING
wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
wpalTimerGetCurStatus
wpalTimerGetCurStatus
&dxeCtxt->dxeChannel[idx].healthMonitorTimer
dxeCtxt->dxeChannel[idx].healthMonitorTimer
dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
idx
idx
healthMonitorTimer
{         wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      }
wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);
wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
wpalTimerStop
wpalTimerStop
&dxeCtxt->dxeChannel[idx].healthMonitorTimer
dxeCtxt->dxeChannel[idx].healthMonitorTimer
dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
idx
idx
healthMonitorTimer
status = dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx]);
status = dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx])
status
status
dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx])
dxeChannelStop
dxeChannelStop
dxeCtxt
dxeCtxt
&dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
idx
idx
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "WLANDXE_Stop Channel %d Stop Fail", idx);         return status;      }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "WLANDXE_Stop Channel %d Stop Fail", idx);         return status;      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "WLANDXE_Stop Channel %d Stop Fail", idx);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "WLANDXE_Stop Channel %d Stop Fail", idx)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"WLANDXE_Stop Channel %d Stop Fail"
idx
idx
return status;
status
status
wpalUnRegisterInterrupt(DXE_INTERRUPT_TX_COMPLE);
wpalUnRegisterInterrupt(DXE_INTERRUPT_TX_COMPLE);
wpalUnRegisterInterrupt
wpalUnRegisterInterrupt
(DXE_INTERRUPT_TX_COMPLE)
DXE_INTERRUPT_TX_COMPLE
DXE_INTERRUPT_TX_COMPLE
wpalUnRegisterInterrupt(DXE_INTERRUPT_RX_READY);
wpalUnRegisterInterrupt(DXE_INTERRUPT_RX_READY);
wpalUnRegisterInterrupt
wpalUnRegisterInterrupt
(DXE_INTERRUPT_RX_READY)
DXE_INTERRUPT_RX_READY
DXE_INTERRUPT_RX_READY
if(VOS_TIMER_STATE_STOPPED !=      wpalTimerGetCurStatus(&dxeCtxt->rxResourceAvailableTimer))   {      wpalTimerStop(&dxeCtxt->rxResourceAvailableTimer);   }
VOS_TIMER_STATE_STOPPED !=      wpalTimerGetCurStatus(&dxeCtxt->rxResourceAvailableTimer)
VOS_TIMER_STATE_STOPPED
VOS_TIMER_STATE_STOPPED
wpalTimerGetCurStatus(&dxeCtxt->rxResourceAvailableTimer)
wpalTimerGetCurStatus
wpalTimerGetCurStatus
&dxeCtxt->rxResourceAvailableTimer
dxeCtxt->rxResourceAvailableTimer
dxeCtxt
dxeCtxt
rxResourceAvailableTimer
{      wpalTimerStop(&dxeCtxt->rxResourceAvailableTimer);   }
wpalTimerStop(&dxeCtxt->rxResourceAvailableTimer);
wpalTimerStop(&dxeCtxt->rxResourceAvailableTimer)
wpalTimerStop
wpalTimerStop
&dxeCtxt->rxResourceAvailableTimer
dxeCtxt->rxResourceAvailableTimer
dxeCtxt
dxeCtxt
rxResourceAvailableTimer
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Exit"
__func__
__func__
return status;
status
status
-----joern-----
(86,51,0)
(65,93,0)
(58,34,0)
(56,52,0)
(8,3,0)
(41,0,0)
(97,111,0)
(33,3,0)
(64,92,0)
(2,89,0)
(92,80,0)
(76,99,0)
(31,33,0)
(96,40,0)
(17,3,0)
(29,3,0)
(79,3,0)
(51,86,0)
(43,34,0)
(104,66,0)
(81,64,0)
(98,92,0)
(69,44,0)
(102,31,0)
(40,96,0)
(72,45,0)
(34,33,0)
(13,42,0)
(52,3,0)
(93,65,0)
(69,31,0)
(66,39,0)
(25,90,0)
(71,68,0)
(85,33,0)
(68,33,0)
(38,30,0)
(45,24,0)
(19,38,0)
(16,73,0)
(33,86,0)
(105,8,0)
(109,85,0)
(7,9,0)
(89,80,0)
(1,52,0)
(0,80,0)
(107,66,0)
(54,52,0)
(70,68,0)
(86,39,0)
(47,64,0)
(60,0,0)
(90,3,0)
(34,43,0)
(31,69,0)
(0,53,0)
(50,3,0)
(103,71,0)
(24,9,0)
(73,40,0)
(57,26,0)
(99,33,0)
(96,23,0)
(40,73,0)
(101,42,0)
(92,99,0)
(91,50,0)
(93,47,0)
(47,93,0)
(55,37,0)
(28,80,0)
(34,24,0)
(71,80,0)
(24,34,0)
(88,57,0)
(90,48,0)
(89,85,0)
(84,99,0)
(87,28,0)
(73,33,0)
(82,31,0)
(45,53,0)
(5,0,0)
(6,9,0)
(106,65,0)
(37,80,0)
(86,33,0)
(32,50,0)
(20,36,0)
(63,17,0)
(57,88,0)
(92,64,0)
(111,44,0)
(67,36,0)
(108,48,0)
(77,38,0)
(95,17,0)
(103,88,0)
(89,43,0)
(68,71,0)
(22,3,0)
(35,48,0)
(83,3,0)
(49,24,0)
(101,90,0)
(71,103,0)
(101,45,0)
(18,37,0)
(46,22,0)
(74,38,0)
(44,69,0)
(61,3,0)
(10,33,0)
(85,89,0)
(90,24,0)
(88,103,0)
(48,3,0)
(11,86,0)
(100,0,0)
(14,80,0)
(59,52,0)
(94,17,0)
(42,30,0)
(62,3,0)
(44,111,0)
(27,17,0)
(99,92,0)
(43,89,0)
(64,47,0)
(110,3,0)
(75,71,0)
(4,73,0)
(21,103,0)
(15,68,0)
(78,85,0)
(36,24,0)
(12,80,0)
(96,40,1)
(2,85,1)
(100,60,1)
(75,68,1)
(18,55,1)
(8,105,1)
(40,73,1)
(41,36,1)
(55,80,1)
(64,81,1)
(38,74,1)
(99,76,1)
(81,92,1)
(94,50,1)
(111,44,1)
(48,35,1)
(32,48,1)
(14,33,1)
(71,68,1)
(59,111,1)
(52,56,1)
(90,25,1)
(71,75,1)
(104,107,1)
(107,17,1)
(33,86,1)
(36,20,1)
(97,8,1)
(5,100,1)
(22,46,1)
(25,52,1)
(87,36,1)
(31,33,1)
(60,41,1)
(92,80,1)
(44,69,1)
(68,33,1)
(49,57,1)
(86,11,1)
(67,24,1)
(77,19,1)
(28,87,1)
(70,65,1)
(86,39,1)
(50,91,1)
(85,33,1)
(36,24,1)
(92,98,1)
(73,16,1)
(55,28,1)
(15,70,1)
(42,13,1)
(1,59,1)
(21,71,1)
(80,12,1)
(27,94,1)
(99,33,1)
(0,80,1)
(89,85,1)
(82,97,1)
(57,88,1)
(90,24,1)
(34,43,1)
(95,63,1)
(86,51,1)
(90,48,1)
(35,108,1)
(63,27,1)
(66,39,1)
(103,21,1)
(45,24,1)
(71,80,1)
(109,78,1)
(56,54,1)
(12,14,1)
(76,84,1)
(103,71,1)
(74,77,1)
(45,72,1)
(47,64,1)
(16,4,1)
(92,99,1)
(101,45,1)
(46,37,1)
(85,109,1)
(31,102,1)
(84,106,1)
(69,31,1)
(88,103,1)
(101,42,1)
(89,2,1)
(43,89,1)
(11,10,1)
(54,1,1)
(65,93,1)
(101,90,1)
(49,65,1)
(66,104,1)
(13,38,1)
(24,34,1)
(106,37,1)
(91,32,1)
(34,33,1)
(19,66,1)
(4,111,1)
(68,15,1)
(59,96,1)
(93,47,1)
(58,49,1)
(78,58,1)
(0,5,1)
(102,82,1)
(73,33,1)
(105,22,1)
(37,18,1)
(64,92,1)
(17,95,1)
(98,99,1)
(10,66,1)
(28,80,1)
(20,67,1)
(72,0,1)
(37,80,1)
(89,80,1)
(74,66,2)
(99,33,2)
(4,111,2)
(24,34,2)
(109,37,2)
(21,65,2)
(44,37,2)
(93,37,2)
(68,65,2)
(2,37,2)
(71,65,2)
(58,37,2)
(80,66,2)
(87,36,2)
(65,37,2)
(111,37,2)
(81,37,2)
(25,37,2)
(67,37,2)
(88,65,2)
(28,36,2)
(40,111,2)
(89,85,2)
(45,36,2)
(111,44,2)
(0,80,2)
(5,36,2)
(103,71,2)
(101,45,2)
(45,24,2)
(43,37,2)
(86,39,2)
(40,73,2)
(85,33,2)
(1,37,2)
(44,69,2)
(10,66,2)
(33,86,2)
(89,37,2)
(49,37,2)
(24,37,2)
(37,66,2)
(92,37,2)
(103,65,2)
(47,37,2)
(66,39,2)
(65,93,2)
(38,66,2)
(18,36,2)
(69,31,2)
(64,92,2)
(59,37,2)
(57,88,2)
(75,65,2)
(13,66,2)
(16,111,2)
(106,37,2)
(19,66,2)
(98,37,2)
(93,47,2)
(12,66,2)
(18,66,2)
(86,51,2)
(60,36,2)
(20,37,2)
(47,64,2)
(82,37,2)
(54,37,2)
(100,36,2)
(84,37,2)
(73,111,2)
(71,80,2)
(90,24,2)
(68,33,2)
(70,65,2)
(96,40,2)
(52,37,2)
(28,80,2)
(36,24,2)
(11,66,2)
(78,37,2)
(76,37,2)
(56,37,2)
(33,66,2)
(85,37,2)
(73,33,2)
(14,66,2)
(55,36,2)
(34,37,2)
(42,66,2)
(72,36,2)
(86,66,2)
(92,80,2)
(96,111,2)
(15,65,2)
(22,37,2)
(46,37,2)
(97,37,2)
(69,37,2)
(89,80,2)
(71,68,2)
(105,37,2)
(37,36,2)
(31,37,2)
(102,37,2)
(34,43,2)
(0,36,2)
(99,37,2)
(37,80,2)
(77,66,2)
(31,33,2)
(57,65,2)
(64,37,2)
(101,42,2)
(43,89,2)
(36,37,2)
(88,103,2)
(90,37,2)
(90,48,2)
(101,90,2)
(92,99,2)
(34,33,2)
(8,37,2)
(41,36,2)
(55,66,2)
-----------------------------------
(0,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "WLANDXE_Stop Channel %d Stop Fail", idx)
(1,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(2,idx)
(3,)
(4,dxeCtxt)
(5,idx)
(6,if(VOS_TIMER_STATE_RUNNING == wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(7,if(eWLAN_PAL_STATUS_SUCCESS != status)
(8,wpalUnRegisterInterrupt(DXE_INTERRUPT_RX_READY)
(9,)
(10,dxeCtxt)
(11,pDXEContext)
(12,0)
(13,eWLAN_PAL_STATUS_E_INVAL)
(14,idx)
(15,dxeChannel)
(16,rxResourceAvailableTimer)
(17,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "%s Enter", __func__)
(18,WDTS_CHANNEL_MAX)
(19,eWLAN_MODULE_DAL_DATA)
(20,status)
(21,healthMonitorTimer)
(22,wpalUnRegisterInterrupt(DXE_INTERRUPT_TX_COMPLE)
(23,)
(24,status = dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx])
(25,status)
(26,)
(27,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(28,idx++)
(29,if(VOS_TIMER_STATE_STOPPED !=\n\\n      wpalTimerGetCurStatus(&dxeCtxt->rxResourceAvailableTimer)
(30,)
(31,dxeCtxt->rxResourceAvailableTimer)
(32,dxeCtxt)
(33,dxeCtxt = (WLANDXE_CtrlBlkType *)
(34,dxeChannelStop(dxeCtxt, &dxeCtxt->dxeChannel[idx])
(35,eWLAN_PAL_STATUS_SUCCESS)
(36,eWLAN_PAL_STATUS_SUCCESS != status)
(37,idx < WDTS_CHANNEL_MAX)
(38,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "WLANDXE_Stop Invalid DXE CB")
(39,void *pDXEContext)
(40,&dxeCtxt->rxResourceAvailableTimer)
(41,eWLAN_MODULE_DAL_DATA)
(42,return eWLAN_PAL_STATUS_E_INVAL;)
(43,&dxeCtxt->dxeChannel[idx])
(44,wpalTimerGetCurStatus(&dxeCtxt->rxResourceAvailableTimer)
(45,return status;)
(46,DXE_INTERRUPT_TX_COMPLE)
(47,&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(48,status = eWLAN_PAL_STATUS_SUCCESS)
(49,status)
(50,*dxeCtxt = NULL)
(51,WLANDXE_CtrlBlkType *)
(52,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "%s Exit", __func__)
(53,)
(54,"%s Exit")
(55,idx)
(56,__func__)
(57,wpalTimerStop(&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(58,dxeCtxt)
(59,eWLAN_MODULE_DAL_DATA)
(60,eWLAN_PAL_TRACE_LEVEL_ERROR)
(61,idx)
(62,if(NULL == pDXEContext)
(63,"%s Enter")
(64,dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(65,VOS_TIMER_STATE_RUNNING == wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(66,NULL == pDXEContext)
(67,eWLAN_PAL_STATUS_SUCCESS)
(68,dxeCtxt->dxeChannel)
(69,&dxeCtxt->rxResourceAvailableTimer)
(70,dxeCtxt)
(71,dxeCtxt->dxeChannel[idx])
(72,status)
(73,dxeCtxt->rxResourceAvailableTimer)
(74,"WLANDXE_Stop Invalid DXE CB")
(75,idx)
(76,dxeChannel)
(77,eWLAN_PAL_TRACE_LEVEL_ERROR)
(78,dxeCtxt)
(79,status)
(80,idx = 0)
(81,healthMonitorTimer)
(82,dxeCtxt)
(83,for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)
(84,dxeCtxt)
(85,dxeCtxt->dxeChannel)
(86,(WLANDXE_CtrlBlkType *)
(87,idx)
(88,&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(89,dxeCtxt->dxeChannel[idx])
(90,return status;)
(91,NULL)
(92,dxeCtxt->dxeChannel[idx])
(93,wpalTimerGetCurStatus(&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(94,eWLAN_MODULE_DAL_DATA)
(95,__func__)
(96,wpalTimerStop(&dxeCtxt->rxResourceAvailableTimer)
(97,VOS_TIMER_STATE_STOPPED)
(98,idx)
(99,dxeCtxt->dxeChannel)
(100,"WLANDXE_Stop Channel %d Stop Fail")
(101,RET)
(102,rxResourceAvailableTimer)
(103,dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(104,pDXEContext)
(105,DXE_INTERRUPT_RX_READY)
(106,VOS_TIMER_STATE_RUNNING)
(107,NULL)
(108,status)
(109,dxeChannel)
(110,dxeCtxt)
(111,VOS_TIMER_STATE_STOPPED !=\n\\n      wpalTimerGetCurStatus(&dxeCtxt->rxResourceAvailableTimer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^