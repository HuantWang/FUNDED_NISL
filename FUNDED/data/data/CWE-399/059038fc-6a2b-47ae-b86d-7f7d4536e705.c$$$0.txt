-----label-----
1
-----code-----
static void pnp_print_conflict(pnp_info_buffer_t *buffer, struct pnp_dev * dev, int idx, int type)
{
	struct pnp_dev * cdev, * wdev = NULL;
	int conflict;
	switch (type) {
	case IORESOURCE_IO:
		conflict = pnp_check_port(dev, idx);
		if (conflict == CONFLICT_TYPE_PNP_WARM)
			wdev = pnp_check_port_conflicts(dev, idx, SEARCH_WARM);
		cdev = pnp_check_port_conflicts(dev, idx, SEARCH_COLD);
		break;
	case IORESOURCE_MEM:
		conflict = pnp_check_mem(dev, idx);
		if (conflict == CONFLICT_TYPE_PNP_WARM)
			wdev = pnp_check_mem_conflicts(dev, idx, SEARCH_WARM);
		cdev = pnp_check_mem_conflicts(dev, idx, SEARCH_COLD);
		break;
	case IORESOURCE_IRQ:
		conflict = pnp_check_irq(dev, idx);
		if (conflict == CONFLICT_TYPE_PNP_WARM)
			wdev = pnp_check_irq_conflicts(dev, idx, SEARCH_WARM);
		cdev = pnp_check_irq_conflicts(dev, idx, SEARCH_COLD);
		break;
	case IORESOURCE_DMA:
		conflict = pnp_check_dma(dev, idx);
		if (conflict == CONFLICT_TYPE_PNP_WARM)
			wdev = pnp_check_dma_conflicts(dev, idx, SEARCH_WARM);
		cdev = pnp_check_dma_conflicts(dev, idx, SEARCH_COLD);
		break;
	default:
		return;
	}

	pnp_print_conflict_desc(buffer, conflict);

	if (wdev)
		pnp_print_conflict_node(buffer, wdev);

	if (cdev) {
		pnp_print_conflict_desc(buffer, CONFLICT_TYPE_PNP_COLD);
		pnp_print_conflict_node(buffer, cdev);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
23,24
25,26
25,27
25,28
25,29
25,30
25,31
26,27
27,28
27,29
27,30
28,29
30,31
30,32
33,34
33,35
33,36
36,37
37,38
39,40
40,41
40,42
42,43
44,45
44,46
45,46
47,48
47,49
47,50
47,51
47,52
47,53
47,54
47,55
47,56
47,57
47,58
47,59
47,60
47,61
47,62
47,63
47,64
47,65
47,66
47,67
47,68
47,69
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
55,58
56,57
58,59
60,61
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
69,71
70,71
72,73
72,74
72,75
72,76
73,74
75,76
77,78
79,80
81,82
82,83
82,84
83,84
85,86
85,87
85,88
85,89
86,87
88,89
90,91
92,93
95,96
96,97
98,99
99,100
99,101
100,101
102,103
102,104
102,105
103,104
105,106
107,108
109,110
109,111
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
119,121
119,122
119,123
120,121
122,123
124,125
126,127
128,129
129,130
129,131
130,131
132,133
132,134
132,135
132,136
133,134
135,136
137,138
139,140
142,143
143,144
145,146
146,147
146,148
147,148
149,150
149,151
149,152
150,151
152,153
154,155
156,157
156,158
157,158
157,159
158,159
160,161
162,163
163,164
163,165
164,165
166,167
166,168
166,169
166,170
167,168
169,170
171,172
173,174
175,176
176,177
176,178
177,178
179,180
179,181
179,182
179,183
180,181
182,183
184,185
186,187
189,190
190,191
192,193
193,194
193,195
194,195
196,197
196,198
196,199
197,198
199,200
201,202
203,204
203,205
204,205
204,206
205,206
207,208
209,210
210,211
210,212
211,212
213,214
213,215
213,216
213,217
214,215
216,217
218,219
220,221
222,223
223,224
223,225
224,225
226,227
226,228
226,229
226,230
227,228
229,230
231,232
233,234
238,239
239,240
239,241
239,242
240,241
242,243
244,245
246,247
246,248
247,248
249,250
250,251
250,252
250,253
251,252
253,254
255,256
257,258
257,259
258,259
260,261
260,262
261,262
262,263
262,264
262,265
263,264
265,266
267,268
269,270
270,271
270,272
270,273
271,272
273,274
275,276
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,22,24,29,31,32,34,35,38,41,43,46,50,54,57,59,61,65,67,71,74,76,78,80,84,87,89,91,93,94,97,101,104,106,108,112,114,118,121,123,125,127,131,134,136,138,140,141,144,148,151,153,155,159,161,165,168,170,172,174,178,181,183,185,187,188,191,195,198,200,202,206,208,212,215,217,219,221,225,228,230,232,234,235,236,237,241,243,245,248,252,254,256,259,264,266,268,272,274,276
-----computeFrom-----
52,53
52,54
63,64
63,65
69,70
69,71
82,83
82,84
99,100
99,101
110,111
110,112
116,117
116,118
129,130
129,131
146,147
146,148
157,158
157,159
163,164
163,165
176,177
176,178
193,194
193,195
204,205
204,206
210,211
210,212
223,224
223,225
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;DefaultStatement;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void pnp_print_conflict(pnp_info_buffer_t *buffer, struct pnp_dev * dev, int idx, int type){	struct pnp_dev * cdev, * wdev = NULL;	int conflict;	switch (type) {	case IORESOURCE_IO:		conflict = pnp_check_port(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_port_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_port_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_MEM:		conflict = pnp_check_mem(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_mem_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_mem_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_IRQ:		conflict = pnp_check_irq(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_irq_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_irq_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_DMA:		conflict = pnp_check_dma(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_dma_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_dma_conflicts(dev, idx, SEARCH_COLD);		break;	default:		return;	}	pnp_print_conflict_desc(buffer, conflict);	if (wdev)		pnp_print_conflict_node(buffer, wdev);	if (cdev) {		pnp_print_conflict_desc(buffer, CONFLICT_TYPE_PNP_COLD);		pnp_print_conflict_node(buffer, cdev);	}}
static void
pnp_print_conflict(pnp_info_buffer_t *buffer, struct pnp_dev * dev, int idx, int type)
pnp_print_conflict
pnp_info_buffer_t *buffer
pnp_info_buffer_t
pnp_info_buffer_t
*buffer
*
buffer
struct pnp_dev * dev
struct pnp_dev
pnp_dev
* dev
*
dev
int idx
int
idx
idx
int type
int
type
type
{	struct pnp_dev * cdev, * wdev = NULL;	int conflict;	switch (type) {	case IORESOURCE_IO:		conflict = pnp_check_port(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_port_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_port_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_MEM:		conflict = pnp_check_mem(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_mem_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_mem_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_IRQ:		conflict = pnp_check_irq(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_irq_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_irq_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_DMA:		conflict = pnp_check_dma(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_dma_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_dma_conflicts(dev, idx, SEARCH_COLD);		break;	default:		return;	}	pnp_print_conflict_desc(buffer, conflict);	if (wdev)		pnp_print_conflict_node(buffer, wdev);	if (cdev) {		pnp_print_conflict_desc(buffer, CONFLICT_TYPE_PNP_COLD);		pnp_print_conflict_node(buffer, cdev);	}}
struct pnp_dev * cdev, * wdev = NULL;
struct pnp_dev * cdev, * wdev = NULL;
struct pnp_dev
pnp_dev
* cdev
*
cdev
* wdev = NULL
*
wdev
= NULL
NULL
NULL
int conflict;
int conflict;
int
conflict
conflict
switch (type) {	case IORESOURCE_IO:		conflict = pnp_check_port(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_port_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_port_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_MEM:		conflict = pnp_check_mem(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_mem_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_mem_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_IRQ:		conflict = pnp_check_irq(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_irq_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_irq_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_DMA:		conflict = pnp_check_dma(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_dma_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_dma_conflicts(dev, idx, SEARCH_COLD);		break;	default:		return;	}
type
type
{	case IORESOURCE_IO:		conflict = pnp_check_port(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_port_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_port_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_MEM:		conflict = pnp_check_mem(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_mem_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_mem_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_IRQ:		conflict = pnp_check_irq(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_irq_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_irq_conflicts(dev, idx, SEARCH_COLD);		break;	case IORESOURCE_DMA:		conflict = pnp_check_dma(dev, idx);		if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_dma_conflicts(dev, idx, SEARCH_WARM);		cdev = pnp_check_dma_conflicts(dev, idx, SEARCH_COLD);		break;	default:		return;	}
case IORESOURCE_IO:
IORESOURCE_IO
IORESOURCE_IO
conflict = pnp_check_port(dev, idx);
conflict = pnp_check_port(dev, idx)
conflict
conflict
pnp_check_port(dev, idx)
pnp_check_port
pnp_check_port
dev
dev
idx
idx
if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_port_conflicts(dev, idx, SEARCH_WARM);
conflict == CONFLICT_TYPE_PNP_WARM
conflict
conflict
CONFLICT_TYPE_PNP_WARM
CONFLICT_TYPE_PNP_WARM
wdev = pnp_check_port_conflicts(dev, idx, SEARCH_WARM);
wdev = pnp_check_port_conflicts(dev, idx, SEARCH_WARM)
wdev
wdev
pnp_check_port_conflicts(dev, idx, SEARCH_WARM)
pnp_check_port_conflicts
pnp_check_port_conflicts
dev
dev
idx
idx
SEARCH_WARM
SEARCH_WARM
cdev = pnp_check_port_conflicts(dev, idx, SEARCH_COLD);
cdev = pnp_check_port_conflicts(dev, idx, SEARCH_COLD)
cdev
cdev
pnp_check_port_conflicts(dev, idx, SEARCH_COLD)
pnp_check_port_conflicts
pnp_check_port_conflicts
dev
dev
idx
idx
SEARCH_COLD
SEARCH_COLD
break;
case IORESOURCE_MEM:
IORESOURCE_MEM
IORESOURCE_MEM
conflict = pnp_check_mem(dev, idx);
conflict = pnp_check_mem(dev, idx)
conflict
conflict
pnp_check_mem(dev, idx)
pnp_check_mem
pnp_check_mem
dev
dev
idx
idx
if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_mem_conflicts(dev, idx, SEARCH_WARM);
conflict == CONFLICT_TYPE_PNP_WARM
conflict
conflict
CONFLICT_TYPE_PNP_WARM
CONFLICT_TYPE_PNP_WARM
wdev = pnp_check_mem_conflicts(dev, idx, SEARCH_WARM);
wdev = pnp_check_mem_conflicts(dev, idx, SEARCH_WARM)
wdev
wdev
pnp_check_mem_conflicts(dev, idx, SEARCH_WARM)
pnp_check_mem_conflicts
pnp_check_mem_conflicts
dev
dev
idx
idx
SEARCH_WARM
SEARCH_WARM
cdev = pnp_check_mem_conflicts(dev, idx, SEARCH_COLD);
cdev = pnp_check_mem_conflicts(dev, idx, SEARCH_COLD)
cdev
cdev
pnp_check_mem_conflicts(dev, idx, SEARCH_COLD)
pnp_check_mem_conflicts
pnp_check_mem_conflicts
dev
dev
idx
idx
SEARCH_COLD
SEARCH_COLD
break;
case IORESOURCE_IRQ:
IORESOURCE_IRQ
IORESOURCE_IRQ
conflict = pnp_check_irq(dev, idx);
conflict = pnp_check_irq(dev, idx)
conflict
conflict
pnp_check_irq(dev, idx)
pnp_check_irq
pnp_check_irq
dev
dev
idx
idx
if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_irq_conflicts(dev, idx, SEARCH_WARM);
conflict == CONFLICT_TYPE_PNP_WARM
conflict
conflict
CONFLICT_TYPE_PNP_WARM
CONFLICT_TYPE_PNP_WARM
wdev = pnp_check_irq_conflicts(dev, idx, SEARCH_WARM);
wdev = pnp_check_irq_conflicts(dev, idx, SEARCH_WARM)
wdev
wdev
pnp_check_irq_conflicts(dev, idx, SEARCH_WARM)
pnp_check_irq_conflicts
pnp_check_irq_conflicts
dev
dev
idx
idx
SEARCH_WARM
SEARCH_WARM
cdev = pnp_check_irq_conflicts(dev, idx, SEARCH_COLD);
cdev = pnp_check_irq_conflicts(dev, idx, SEARCH_COLD)
cdev
cdev
pnp_check_irq_conflicts(dev, idx, SEARCH_COLD)
pnp_check_irq_conflicts
pnp_check_irq_conflicts
dev
dev
idx
idx
SEARCH_COLD
SEARCH_COLD
break;
case IORESOURCE_DMA:
IORESOURCE_DMA
IORESOURCE_DMA
conflict = pnp_check_dma(dev, idx);
conflict = pnp_check_dma(dev, idx)
conflict
conflict
pnp_check_dma(dev, idx)
pnp_check_dma
pnp_check_dma
dev
dev
idx
idx
if (conflict == CONFLICT_TYPE_PNP_WARM)			wdev = pnp_check_dma_conflicts(dev, idx, SEARCH_WARM);
conflict == CONFLICT_TYPE_PNP_WARM
conflict
conflict
CONFLICT_TYPE_PNP_WARM
CONFLICT_TYPE_PNP_WARM
wdev = pnp_check_dma_conflicts(dev, idx, SEARCH_WARM);
wdev = pnp_check_dma_conflicts(dev, idx, SEARCH_WARM)
wdev
wdev
pnp_check_dma_conflicts(dev, idx, SEARCH_WARM)
pnp_check_dma_conflicts
pnp_check_dma_conflicts
dev
dev
idx
idx
SEARCH_WARM
SEARCH_WARM
cdev = pnp_check_dma_conflicts(dev, idx, SEARCH_COLD);
cdev = pnp_check_dma_conflicts(dev, idx, SEARCH_COLD)
cdev
cdev
pnp_check_dma_conflicts(dev, idx, SEARCH_COLD)
pnp_check_dma_conflicts
pnp_check_dma_conflicts
dev
dev
idx
idx
SEARCH_COLD
SEARCH_COLD
break;
default:
return;
pnp_print_conflict_desc(buffer, conflict);
pnp_print_conflict_desc(buffer, conflict)
pnp_print_conflict_desc
pnp_print_conflict_desc
buffer
buffer
conflict
conflict
if (wdev)		pnp_print_conflict_node(buffer, wdev);
wdev
wdev
pnp_print_conflict_node(buffer, wdev);
pnp_print_conflict_node(buffer, wdev)
pnp_print_conflict_node
pnp_print_conflict_node
buffer
buffer
wdev
wdev
if (cdev) {		pnp_print_conflict_desc(buffer, CONFLICT_TYPE_PNP_COLD);		pnp_print_conflict_node(buffer, cdev);	}
cdev
cdev
{		pnp_print_conflict_desc(buffer, CONFLICT_TYPE_PNP_COLD);		pnp_print_conflict_node(buffer, cdev);	}
pnp_print_conflict_desc(buffer, CONFLICT_TYPE_PNP_COLD);
pnp_print_conflict_desc(buffer, CONFLICT_TYPE_PNP_COLD)
pnp_print_conflict_desc
pnp_print_conflict_desc
buffer
buffer
CONFLICT_TYPE_PNP_COLD
CONFLICT_TYPE_PNP_COLD
pnp_print_conflict_node(buffer, cdev);
pnp_print_conflict_node(buffer, cdev)
pnp_print_conflict_node
pnp_print_conflict_node
buffer
buffer
cdev
cdev
-----joern-----
(32,92,0)
(22,35,0)
(113,56,0)
(23,38,0)
(91,13,0)
(75,123,0)
(86,71,0)
(37,11,0)
(101,92,0)
(108,71,0)
(74,47,0)
(71,19,0)
(28,113,0)
(32,56,0)
(2,91,0)
(59,37,0)
(55,84,0)
(86,98,0)
(64,3,0)
(85,120,0)
(120,87,0)
(73,23,0)
(111,5,0)
(115,63,0)
(104,35,0)
(81,97,0)
(3,84,0)
(80,54,0)
(100,5,0)
(58,11,0)
(74,69,0)
(91,111,0)
(19,71,0)
(19,11,0)
(32,11,0)
(45,37,0)
(1,84,0)
(102,32,0)
(72,97,0)
(90,24,0)
(53,54,0)
(89,19,0)
(68,106,0)
(124,106,0)
(107,111,0)
(52,84,0)
(12,51,0)
(23,3,0)
(57,5,0)
(39,32,0)
(48,86,0)
(43,120,0)
(109,106,0)
(75,84,0)
(50,84,0)
(24,56,0)
(70,104,0)
(98,24,0)
(51,3,0)
(61,123,0)
(123,75,0)
(83,84,0)
(7,113,0)
(67,117,0)
(15,113,0)
(3,51,0)
(117,87,0)
(99,13,0)
(76,28,0)
(58,17,0)
(19,56,0)
(35,11,0)
(63,75,0)
(0,63,0)
(96,111,0)
(38,54,0)
(10,84,0)
(13,37,0)
(44,84,0)
(117,56,0)
(35,56,0)
(114,5,0)
(38,84,0)
(37,56,0)
(18,23,0)
(58,56,0)
(82,51,0)
(24,98,0)
(79,19,0)
(25,74,0)
(113,11,0)
(91,17,0)
(113,28,0)
(23,109,0)
(29,74,0)
(109,84,0)
(54,38,0)
(121,75,0)
(20,5,0)
(87,117,0)
(42,98,0)
(35,104,0)
(23,69,0)
(112,109,0)
(110,38,0)
(8,24,0)
(98,84,0)
(91,28,0)
(103,35,0)
(119,6,0)
(17,58,0)
(37,13,0)
(86,5,0)
(49,51,0)
(46,84,0)
(123,11,0)
(93,84,0)
(122,17,0)
(78,58,0)
(33,117,0)
(94,113,0)
(86,69,0)
(118,35,0)
(27,5,0)
(88,77,0)
(87,84,0)
(4,84,0)
(24,11,0)
(95,91,0)
(97,71,0)
(92,32,0)
(6,98,0)
(16,37,0)
(14,84,0)
(123,56,0)
(92,84,0)
(40,84,0)
(106,56,0)
(86,87,0)
(51,11,0)
(106,11,0)
(41,5,0)
(91,69,0)
(36,84,0)
(91,104,0)
(60,58,0)
(86,75,0)
(106,109,0)
(34,6,0)
(9,86,0)
(51,56,0)
(23,92,0)
(23,47,0)
(26,87,0)
(116,58,0)
(62,123,0)
(65,54,0)
(117,11,0)
(71,84,0)
(30,106,0)
(21,32,0)
(54,56,0)
(77,84,0)
(54,11,0)
(64,63,1)
(42,31,1)
(124,30,1)
(86,87,1)
(32,11,1)
(3,51,1)
(0,115,1)
(54,53,1)
(121,31,1)
(88,23,1)
(34,119,1)
(74,29,1)
(89,108,1)
(71,19,1)
(86,9,1)
(99,97,1)
(8,90,1)
(108,31,1)
(6,34,1)
(123,11,1)
(40,109,1)
(73,74,1)
(64,17,1)
(63,0,1)
(105,86,1)
(88,77,1)
(6,98,1)
(31,111,1)
(16,45,1)
(96,107,1)
(112,28,1)
(62,61,1)
(78,60,1)
(2,95,1)
(7,94,1)
(86,75,1)
(35,11,1)
(58,116,1)
(35,22,1)
(54,56,1)
(51,82,1)
(91,69,1)
(85,87,1)
(58,56,1)
(97,71,1)
(33,26,1)
(51,56,1)
(116,78,1)
(75,123,1)
(19,11,1)
(9,48,1)
(120,87,1)
(91,2,1)
(112,6,1)
(122,63,1)
(24,11,1)
(23,69,1)
(123,62,1)
(102,39,1)
(28,113,1)
(118,70,1)
(48,93,1)
(110,120,1)
(19,79,1)
(113,15,1)
(91,104,1)
(86,98,1)
(86,69,1)
(48,55,1)
(104,35,1)
(111,96,1)
(23,3,1)
(35,56,1)
(76,6,1)
(45,59,1)
(39,21,1)
(32,56,1)
(15,7,1)
(23,109,1)
(21,101,1)
(120,43,1)
(93,38,1)
(103,118,1)
(117,56,1)
(91,111,1)
(19,56,1)
(70,120,1)
(48,40,1)
(81,71,1)
(60,122,1)
(113,56,1)
(117,11,1)
(68,124,1)
(119,98,1)
(24,56,1)
(109,106,1)
(106,11,1)
(12,49,1)
(113,11,1)
(38,54,1)
(66,91,1)
(95,105,1)
(49,64,1)
(13,37,1)
(91,13,1)
(55,3,1)
(63,75,1)
(97,72,1)
(74,69,1)
(88,66,1)
(37,11,1)
(23,92,1)
(82,12,1)
(101,97,1)
(101,13,1)
(87,117,1)
(23,38,1)
(110,104,1)
(61,121,1)
(123,56,1)
(37,56,1)
(58,11,1)
(80,65,1)
(17,58,1)
(67,33,1)
(72,81,1)
(79,89,1)
(117,67,1)
(26,31,1)
(83,92,1)
(115,75,1)
(23,18,1)
(59,99,1)
(24,8,1)
(94,76,1)
(54,11,1)
(29,25,1)
(22,103,1)
(77,31,1)
(51,11,1)
(53,80,1)
(98,24,1)
(91,28,1)
(30,112,1)
(43,85,1)
(48,83,1)
(66,105,1)
(91,17,1)
(37,16,1)
(32,102,1)
(65,110,1)
(106,68,1)
(25,66,1)
(106,56,1)
(90,42,1)
(86,71,1)
(92,32,1)
(18,73,1)
(65,31,2)
(92,32,2)
(28,113,2)
(67,31,2)
(110,31,2)
(23,92,2)
(105,31,2)
(26,31,2)
(39,31,2)
(72,31,2)
(106,31,2)
(88,77,2)
(0,31,2)
(77,31,2)
(51,31,2)
(17,58,2)
(17,63,2)
(3,51,2)
(79,31,2)
(45,97,2)
(35,120,2)
(66,31,2)
(101,31,2)
(32,56,2)
(54,11,2)
(123,56,2)
(121,31,2)
(118,120,2)
(91,111,2)
(38,31,2)
(13,97,2)
(94,6,2)
(24,31,2)
(86,75,2)
(23,109,2)
(24,11,2)
(104,35,2)
(75,31,2)
(112,31,2)
(8,31,2)
(87,117,2)
(21,31,2)
(58,63,2)
(42,31,2)
(15,6,2)
(28,6,2)
(91,105,2)
(24,56,2)
(123,11,2)
(23,66,2)
(35,56,2)
(23,38,2)
(98,31,2)
(51,11,2)
(61,31,2)
(54,56,2)
(123,31,2)
(34,31,2)
(37,97,2)
(19,31,2)
(64,31,2)
(16,97,2)
(75,123,2)
(22,120,2)
(91,104,2)
(97,31,2)
(91,69,2)
(122,63,2)
(78,63,2)
(89,31,2)
(32,31,2)
(71,31,2)
(74,66,2)
(30,31,2)
(116,63,2)
(51,56,2)
(12,31,2)
(48,31,2)
(86,71,2)
(86,98,2)
(104,120,2)
(113,11,2)
(71,19,2)
(37,56,2)
(40,31,2)
(80,31,2)
(86,87,2)
(7,6,2)
(29,66,2)
(124,31,2)
(38,54,2)
(59,97,2)
(6,98,2)
(81,31,2)
(87,31,2)
(35,11,2)
(83,31,2)
(113,56,2)
(70,120,2)
(85,31,2)
(53,31,2)
(120,87,2)
(91,13,2)
(9,31,2)
(6,31,2)
(23,69,2)
(92,31,2)
(63,31,2)
(97,71,2)
(76,6,2)
(106,56,2)
(19,11,2)
(103,120,2)
(2,105,2)
(58,56,2)
(49,31,2)
(60,63,2)
(68,31,2)
(109,31,2)
(86,69,2)
(73,66,2)
(3,31,2)
(115,31,2)
(43,31,2)
(25,66,2)
(54,31,2)
(119,31,2)
(117,56,2)
(120,31,2)
(90,31,2)
(23,3,2)
(37,11,2)
(106,11,2)
(33,31,2)
(117,11,2)
(86,31,2)
(91,17,2)
(55,31,2)
(109,106,2)
(95,105,2)
(63,75,2)
(74,69,2)
(13,37,2)
(108,31,2)
(58,11,2)
(102,31,2)
(18,66,2)
(91,28,2)
(62,31,2)
(98,24,2)
(82,31,2)
(19,56,2)
(93,31,2)
(32,11,2)
(117,31,2)
(113,6,2)
(99,97,2)
-----------------------------------
(0,CONFLICT_TYPE_PNP_WARM)
(1,case IORESOURCE_MEM:)
(2,wdev)
(3,cdev = pnp_check_dma_conflicts(dev, idx, SEARCH_COLD)
(4,if (conflict == CONFLICT_TYPE_PNP_WARM)
(5,)
(6,conflict == CONFLICT_TYPE_PNP_WARM)
(7,idx)
(8,idx)
(9,conflict)
(10,case IORESOURCE_IO:)
(11,int idx)
(12,idx)
(13,wdev = pnp_check_mem_conflicts(dev, idx, SEARCH_WARM)
(14,case IORESOURCE_DMA:)
(15,SEARCH_WARM)
(16,SEARCH_WARM)
(17,wdev = pnp_check_dma_conflicts(dev, idx, SEARCH_WARM)
(18,cdev)
(19,pnp_check_mem(dev, idx)
(20,if (wdev)
(21,dev)
(22,SEARCH_WARM)
(23,pnp_print_conflict_node(buffer, cdev)
(24,pnp_check_irq(dev, idx)
(25,buffer)
(26,conflict)
(27,if (cdev)
(28,wdev = pnp_check_irq_conflicts(dev, idx, SEARCH_WARM)
(29,CONFLICT_TYPE_PNP_COLD)
(30,dev)
(31,type)
(32,pnp_check_mem_conflicts(dev, idx, SEARCH_COLD)
(33,dev)
(34,CONFLICT_TYPE_PNP_WARM)
(35,pnp_check_port_conflicts(dev, idx, SEARCH_WARM)
(36,if (conflict == CONFLICT_TYPE_PNP_WARM)
(37,pnp_check_mem_conflicts(dev, idx, SEARCH_WARM)
(38,cdev = pnp_check_port_conflicts(dev, idx, SEARCH_COLD)
(39,idx)
(40,break;)
(41,conflict)
(42,conflict)
(43,CONFLICT_TYPE_PNP_WARM)
(44,default:)
(45,idx)
(46,if (conflict == CONFLICT_TYPE_PNP_WARM)
(47,)
(48,buffer)
(49,dev)
(50,if (conflict == CONFLICT_TYPE_PNP_WARM)
(51,pnp_check_dma_conflicts(dev, idx, SEARCH_COLD)
(52,case IORESOURCE_IRQ:)
(53,SEARCH_COLD)
(54,pnp_check_port_conflicts(dev, idx, SEARCH_COLD)
(55,break;)
(56,struct pnp_dev * dev)
(57,switch (type)
(58,pnp_check_dma_conflicts(dev, idx, SEARCH_WARM)
(59,dev)
(60,dev)
(61,dev)
(62,idx)
(63,conflict == CONFLICT_TYPE_PNP_WARM)
(64,cdev)
(65,dev)
(66,cdev)
(67,idx)
(68,SEARCH_COLD)
(69,pnp_info_buffer_t *buffer)
(70,wdev)
(71,conflict = pnp_check_mem(dev, idx)
(72,CONFLICT_TYPE_PNP_WARM)
(73,buffer)
(74,pnp_print_conflict_desc(buffer, CONFLICT_TYPE_PNP_COLD)
(75,conflict = pnp_check_dma(dev, idx)
(76,wdev)
(77,return;)
(78,idx)
(79,idx)
(80,idx)
(81,conflict)
(82,SEARCH_COLD)
(83,break;)
(84,)
(85,conflict)
(86,pnp_print_conflict_desc(buffer, conflict)
(87,conflict = pnp_check_port(dev, idx)
(88,RET)
(89,dev)
(90,dev)
(91,pnp_print_conflict_node(buffer, wdev)
(92,cdev = pnp_check_mem_conflicts(dev, idx, SEARCH_COLD)
(93,break;)
(94,dev)
(95,buffer)
(96,NULL)
(97,conflict == CONFLICT_TYPE_PNP_WARM)
(98,conflict = pnp_check_irq(dev, idx)
(99,wdev)
(100,wdev)
(101,cdev)
(102,SEARCH_COLD)
(103,idx)
(104,wdev = pnp_check_port_conflicts(dev, idx, SEARCH_WARM)
(105,wdev)
(106,pnp_check_irq_conflicts(dev, idx, SEARCH_COLD)
(107,wdev)
(108,conflict)
(109,cdev = pnp_check_irq_conflicts(dev, idx, SEARCH_COLD)
(110,cdev)
(111,* wdev = NULL)
(112,cdev)
(113,pnp_check_irq_conflicts(dev, idx, SEARCH_WARM)
(114,cdev)
(115,conflict)
(116,SEARCH_WARM)
(117,pnp_check_port(dev, idx)
(118,dev)
(119,conflict)
(120,conflict == CONFLICT_TYPE_PNP_WARM)
(121,conflict)
(122,wdev)
(123,pnp_check_dma(dev, idx)
(124,idx)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^