-----label-----
1
-----code-----
int _gnix_cm_nic_alloc(struct gnix_fid_domain *domain,
		       struct fi_info *info,
		       uint32_t cdm_id,
		       struct gnix_cm_nic **cm_nic_ptr)
{
	int ret = FI_SUCCESS;
	struct gnix_cm_nic *cm_nic = NULL;
	gnix_hashtable_attr_t gnix_ht_attr = {0};
	uint32_t name_type = GNIX_EPN_TYPE_UNBOUND;
	struct gnix_nic_attr nic_attr = {0};
	struct gnix_ep_name ep_name;

	GNIX_TRACE(FI_LOG_EP_CTRL, "\n");

	*cm_nic_ptr = NULL;

	/*
	 * if app has specified a src_addr in the info
	 * argument and length matches that for gnix_ep_name
	 * we must allocate a cm_nic, otherwise we first
	 * check to see if there is a cm_nic already for this domain
	 * and just use it.
	 */

	if (info->src_addr) {
		/*TODO (optimization): strchr to name_type and strtol */
		_gnix_get_ep_name(info->src_addr, 0, &ep_name, domain);
		name_type = ep_name.name_type;
	}

	GNIX_INFO(FI_LOG_EP_CTRL, "creating cm_nic for %u/0x%x/%u\n",
		      domain->ptag, domain->cookie, cdm_id);

	cm_nic = (struct gnix_cm_nic *)calloc(1, sizeof(*cm_nic));
	if (cm_nic == NULL) {
		ret = -FI_ENOMEM;
		goto err;
	}

	/*
	 * we have to force allocation of a new nic since we want
	 * an a particulard cdm id
	 */
	nic_attr.must_alloc = true;
	nic_attr.use_cdm_id = true;
	nic_attr.cdm_id = cdm_id;

	ret = gnix_nic_alloc(domain, &nic_attr, &cm_nic->nic);
	if (ret != FI_SUCCESS) {
		GNIX_WARN(FI_LOG_EP_CTRL,
			  "gnix_nic_alloc returned %s\n",
			  fi_strerror(-ret));
		goto err;
	}

	cm_nic->my_name.gnix_addr.cdm_id = cdm_id;
	cm_nic->ptag = domain->ptag;
	cm_nic->my_name.cookie = domain->cookie;
	cm_nic->my_name.gnix_addr.device_addr = cm_nic->nic->device_addr;
	cm_nic->domain = domain;
	cm_nic->ctrl_progress = domain->control_progress;
	cm_nic->my_name.name_type = name_type;
	cm_nic->poll_cnt = 0;
	fastlock_init(&cm_nic->wq_lock);
	dlist_init(&cm_nic->cm_nic_wq);

	/*
	 * prep the cm nic's dgram component
	 */
	ret = _gnix_dgram_hndl_alloc(domain->fabric,
				     cm_nic,
				     domain->control_progress,
				     &cm_nic->dgram_hndl);
	if (ret != FI_SUCCESS)
		goto err;

	/*
	 * allocate hash table for translating ep addresses
	 * to ep's.
	 * This table will not be large - how many FI_EP_RDM ep's
	 * will an app create using one domain?, nor in the critical path
	 * so just use defaults.
	 */
	cm_nic->addr_to_ep_ht = calloc(1, sizeof(struct gnix_hashtable));
	if (cm_nic->addr_to_ep_ht == NULL)
		goto err;

	gnix_ht_attr.ht_initial_size = 64;
	gnix_ht_attr.ht_maximum_size = 1024;
	gnix_ht_attr.ht_increase_step = 2;
	gnix_ht_attr.ht_increase_type = GNIX_HT_INCREASE_MULT;
	gnix_ht_attr.ht_collision_thresh = 500;
	gnix_ht_attr.ht_hash_seed = 0xdeadbeefbeefdead;
	gnix_ht_attr.ht_internal_locking = 1;
	gnix_ht_attr.destructor = NULL;

	ret = _gnix_ht_init(cm_nic->addr_to_ep_ht, &gnix_ht_attr);
	if (ret != FI_SUCCESS) {
		GNIX_WARN(FI_LOG_EP_CTRL,
			  "gnix_ht_init returned %s\n",
			  fi_strerror(-ret));
		goto err;
	}

	_gnix_ref_init(&cm_nic->ref_cnt, 1, __cm_nic_destruct);

	*cm_nic_ptr = cm_nic;

	pthread_mutex_lock(&gnix_cm_nic_list_lock);
	dlist_insert_tail(&cm_nic->cm_nic_list, &gnix_cm_nic_list);
	pthread_mutex_unlock(&gnix_cm_nic_list_lock);

	return ret;

err:
	if (cm_nic->dgram_hndl)
		_gnix_dgram_hndl_free(cm_nic->dgram_hndl);

	if (cm_nic->nic)
		_gnix_nic_free(cm_nic->nic);

	if (cm_nic->addr_to_ep_ht) {
		_gnix_ht_destroy(cm_nic->addr_to_ep_ht);
		free(cm_nic->addr_to_ep_ht);
	}

	if (cm_nic != NULL)
		free(cm_nic);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
25,27
25,28
29,30
29,31
29,32
29,33
29,34
29,35
29,36
29,37
29,38
29,39
29,40
29,41
29,42
29,43
29,44
29,45
29,46
29,47
29,48
29,49
29,50
29,51
29,52
29,53
29,54
29,55
29,56
29,57
29,58
29,59
29,60
29,61
29,62
29,63
29,64
29,65
29,66
29,67
29,68
29,69
29,70
29,71
29,72
29,73
29,74
29,75
29,76
29,77
29,78
29,79
29,80
29,81
30,31
31,32
31,33
33,34
33,35
35,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
42,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
57,58
58,59
58,60
59,60
61,62
61,63
63,64
64,65
66,67
67,68
67,69
68,69
70,71
70,72
72,73
73,74
75,76
76,77
76,78
77,78
79,80
81,82
82,83
82,84
82,85
83,84
85,86
88,89
89,90
89,91
90,91
91,92
93,94
95,96
95,97
96,97
96,98
97,98
100,101
100,102
101,102
102,103
102,104
102,105
102,106
102,107
103,104
105,106
105,107
106,107
110,111
111,112
113,114
115,116
116,117
116,118
117,118
119,120
119,121
120,121
123,124
124,125
124,126
124,127
124,128
124,129
124,130
125,126
127,128
130,131
130,132
131,132
134,135
134,136
135,136
138,139
140,141
141,142
141,143
142,143
144,145
144,146
145,146
145,147
146,147
148,149
150,151
150,152
150,153
151,152
154,155
155,156
156,157
157,158
159,160
159,161
160,161
160,162
161,162
163,164
165,166
165,167
166,167
167,168
167,169
168,169
170,171
171,172
173,174
175,176
176,177
176,178
177,178
177,179
178,179
182,183
183,184
183,185
184,185
184,186
185,186
189,190
190,191
190,192
191,192
191,193
192,193
195,196
197,198
198,199
198,200
199,200
201,202
201,203
201,204
201,205
202,203
204,205
206,207
207,208
209,210
210,211
210,212
211,212
214,215
214,216
215,216
215,217
216,217
218,219
220,221
220,222
221,222
222,223
222,224
222,225
222,226
223,224
225,226
228,229
228,230
229,230
231,232
232,233
234,235
236,237
237,238
237,239
238,239
238,240
239,240
239,241
240,241
240,242
241,242
246,247
248,249
249,250
249,251
250,251
250,252
251,252
254,255
254,256
255,256
258,259
259,260
259,261
260,261
260,262
261,262
261,263
262,263
266,267
266,268
267,268
270,271
271,272
271,273
272,273
272,274
273,274
273,275
274,275
274,276
275,276
280,281
280,282
281,282
281,283
282,283
286,287
287,288
287,289
288,289
288,290
289,290
292,293
294,295
295,296
295,297
296,297
296,298
297,298
300,301
300,302
301,302
304,305
305,306
305,307
306,307
306,308
307,308
307,309
308,309
312,313
314,315
315,316
315,317
316,317
316,318
317,318
321,322
322,323
322,324
323,324
325,326
326,327
326,328
327,328
330,331
331,332
331,333
332,333
334,335
335,336
335,337
336,337
339,340
340,341
340,342
341,342
343,344
343,345
343,346
343,347
343,348
344,345
346,347
346,348
347,348
350,351
352,353
352,354
353,354
356,357
357,358
357,359
358,359
361,362
361,363
362,363
362,364
363,364
365,366
367,368
369,370
370,371
370,372
371,372
371,373
372,373
375,376
375,377
375,378
376,377
379,380
380,381
380,382
381,382
384,385
384,386
385,386
385,387
386,387
386,388
387,388
390,391
392,393
394,395
395,396
395,397
396,397
396,398
397,398
401,402
402,403
402,404
403,404
403,405
404,405
408,409
409,410
409,411
410,411
410,412
411,412
415,416
416,417
416,418
417,418
417,419
418,419
421,422
423,424
424,425
424,426
425,426
425,427
426,427
430,431
431,432
431,433
432,433
432,434
433,434
437,438
438,439
438,440
439,440
439,441
440,441
444,445
445,446
445,447
446,447
446,448
447,448
450,451
452,453
453,454
453,455
454,455
456,457
456,458
456,459
457,458
459,460
459,461
460,461
463,464
464,465
466,467
466,468
467,468
467,469
468,469
470,471
472,473
472,474
473,474
474,475
474,476
474,477
474,478
475,476
477,478
480,481
480,482
481,482
483,484
484,485
486,487
488,489
489,490
489,491
489,492
489,493
490,491
492,493
493,494
493,495
494,495
498,499
500,501
501,502
501,503
502,503
503,504
505,506
507,508
508,509
508,510
509,510
511,512
512,513
512,514
515,516
516,517
516,518
516,519
517,518
519,520
520,521
520,522
521,522
524,525
525,526
527,528
528,529
528,530
529,530
531,532
532,533
534,535
535,536
537,538
537,539
539,540
539,541
540,541
540,542
541,542
544,545
545,546
545,547
546,547
548,549
548,550
549,550
552,553
552,554
553,554
553,555
554,555
557,558
558,559
558,560
559,560
561,562
561,563
562,563
565,566
565,567
566,567
566,568
567,568
570,571
570,572
571,572
572,573
572,574
573,574
575,576
575,577
576,577
579,580
580,581
580,582
581,582
583,584
583,585
584,585
587,588
587,589
588,589
588,590
589,590
591,592
593,594
594,595
594,596
595,596
597,598
599,600
600,601
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,27,28,32,34,37,41,43,44,47,51,53,56,60,62,65,69,71,74,78,80,84,86,87,92,94,98,99,104,107,108,109,112,114,118,121,122,126,128,129,132,133,136,137,139,143,147,149,152,153,158,162,164,169,172,174,179,180,181,186,187,188,193,194,196,200,203,205,208,212,213,217,219,224,226,227,230,233,235,242,243,244,245,247,252,253,256,257,263,264,265,268,269,276,277,278,279,283,284,285,290,291,293,298,299,302,303,309,310,311,313,318,319,320,324,328,329,333,337,338,342,345,348,349,351,354,355,359,360,364,366,368,373,374,377,378,382,383,388,389,391,393,398,399,400,405,406,407,412,413,414,419,420,422,427,428,429,434,435,436,441,442,443,448,449,451,455,458,461,462,465,469,471,476,478,479,482,485,487,491,495,496,497,499,504,506,510,513,514,518,522,523,526,530,533,536,538,542,543,547,550,551,555,556,560,563,564,568,569,574,577,578,582,585,586,590,592,596,598,601
-----computeFrom-----
89,90
89,91
116,117
116,118
141,142
141,143
160,161
160,162
167,168
167,169
176,177
176,178
183,184
183,185
190,191
190,192
198,199
198,200
215,216
215,217
237,238
237,239
249,250
249,251
259,260
259,261
271,272
271,273
287,288
287,289
295,296
295,297
305,306
305,307
315,316
315,317
340,341
340,342
362,363
362,364
370,371
370,372
385,386
385,387
395,396
395,397
402,403
402,404
409,410
409,411
416,417
416,418
424,425
424,426
431,432
431,433
438,439
438,440
445,446
445,447
453,454
453,455
467,468
467,469
501,502
501,503
588,589
588,590
-----guardedBy-----
217,233
469,485
590,598
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int _gnix_cm_nic_alloc(struct gnix_fid_domain *domain,		       struct fi_info *info,		       uint32_t cdm_id,		       struct gnix_cm_nic **cm_nic_ptr){	int ret = FI_SUCCESS;	struct gnix_cm_nic *cm_nic = NULL;	gnix_hashtable_attr_t gnix_ht_attr = {0};	uint32_t name_type = GNIX_EPN_TYPE_UNBOUND;	struct gnix_nic_attr nic_attr = {0};	struct gnix_ep_name ep_name;	GNIX_TRACE(FI_LOG_EP_CTRL, "\n");	*cm_nic_ptr = NULL;	/*	 * if app has specified a src_addr in the info	 * argument and length matches that for gnix_ep_name	 * we must allocate a cm_nic, otherwise we first	 * check to see if there is a cm_nic already for this domain	 * and just use it.	 */	if (info->src_addr) {		/*TODO (optimization): strchr to name_type and strtol */		_gnix_get_ep_name(info->src_addr, 0, &ep_name, domain);		name_type = ep_name.name_type;	}	GNIX_INFO(FI_LOG_EP_CTRL, "creating cm_nic for %u/0x%x/%u\n",		      domain->ptag, domain->cookie, cdm_id);	cm_nic = (struct gnix_cm_nic *)calloc(1, sizeof(*cm_nic));	if (cm_nic == NULL) {		ret = -FI_ENOMEM;		goto err;	}	/*	 * we have to force allocation of a new nic since we want	 * an a particulard cdm id	 */	nic_attr.must_alloc = true;	nic_attr.use_cdm_id = true;	nic_attr.cdm_id = cdm_id;	ret = gnix_nic_alloc(domain, &nic_attr, &cm_nic->nic);	if (ret != FI_SUCCESS) {		GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_nic_alloc returned %s\n",			  fi_strerror(-ret));		goto err;	}	cm_nic->my_name.gnix_addr.cdm_id = cdm_id;	cm_nic->ptag = domain->ptag;	cm_nic->my_name.cookie = domain->cookie;	cm_nic->my_name.gnix_addr.device_addr = cm_nic->nic->device_addr;	cm_nic->domain = domain;	cm_nic->ctrl_progress = domain->control_progress;	cm_nic->my_name.name_type = name_type;	cm_nic->poll_cnt = 0;	fastlock_init(&cm_nic->wq_lock);	dlist_init(&cm_nic->cm_nic_wq);	/*	 * prep the cm nic's dgram component	 */	ret = _gnix_dgram_hndl_alloc(domain->fabric,				     cm_nic,				     domain->control_progress,				     &cm_nic->dgram_hndl);	if (ret != FI_SUCCESS)		goto err;	/*	 * allocate hash table for translating ep addresses	 * to ep's.	 * This table will not be large - how many FI_EP_RDM ep's	 * will an app create using one domain?, nor in the critical path	 * so just use defaults.	 */	cm_nic->addr_to_ep_ht = calloc(1, sizeof(struct gnix_hashtable));	if (cm_nic->addr_to_ep_ht == NULL)		goto err;	gnix_ht_attr.ht_initial_size = 64;	gnix_ht_attr.ht_maximum_size = 1024;	gnix_ht_attr.ht_increase_step = 2;	gnix_ht_attr.ht_increase_type = GNIX_HT_INCREASE_MULT;	gnix_ht_attr.ht_collision_thresh = 500;	gnix_ht_attr.ht_hash_seed = 0xdeadbeefbeefdead;	gnix_ht_attr.ht_internal_locking = 1;	gnix_ht_attr.destructor = NULL;	ret = _gnix_ht_init(cm_nic->addr_to_ep_ht, &gnix_ht_attr);	if (ret != FI_SUCCESS) {		GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_ht_init returned %s\n",			  fi_strerror(-ret));		goto err;	}	_gnix_ref_init(&cm_nic->ref_cnt, 1, __cm_nic_destruct);	*cm_nic_ptr = cm_nic;	pthread_mutex_lock(&gnix_cm_nic_list_lock);	dlist_insert_tail(&cm_nic->cm_nic_list, &gnix_cm_nic_list);	pthread_mutex_unlock(&gnix_cm_nic_list_lock);	return ret;err:	if (cm_nic->dgram_hndl)		_gnix_dgram_hndl_free(cm_nic->dgram_hndl);	if (cm_nic->nic)		_gnix_nic_free(cm_nic->nic);	if (cm_nic->addr_to_ep_ht) {		_gnix_ht_destroy(cm_nic->addr_to_ep_ht);		free(cm_nic->addr_to_ep_ht);	}	if (cm_nic != NULL)		free(cm_nic);	return ret;}
int
_gnix_cm_nic_alloc(struct gnix_fid_domain *domain,		       struct fi_info *info,		       uint32_t cdm_id,		       struct gnix_cm_nic **cm_nic_ptr)
_gnix_cm_nic_alloc
struct gnix_fid_domain *domain
struct gnix_fid_domain
gnix_fid_domain
*domain
*
domain
struct fi_info *info
struct fi_info
fi_info
*info
*
info
uint32_t cdm_id
uint32_t
uint32_t
cdm_id
cdm_id
struct gnix_cm_nic **cm_nic_ptr
struct gnix_cm_nic
gnix_cm_nic
**cm_nic_ptr
*
*
cm_nic_ptr
{	int ret = FI_SUCCESS;	struct gnix_cm_nic *cm_nic = NULL;	gnix_hashtable_attr_t gnix_ht_attr = {0};	uint32_t name_type = GNIX_EPN_TYPE_UNBOUND;	struct gnix_nic_attr nic_attr = {0};	struct gnix_ep_name ep_name;	GNIX_TRACE(FI_LOG_EP_CTRL, "\n");	*cm_nic_ptr = NULL;	/*	 * if app has specified a src_addr in the info	 * argument and length matches that for gnix_ep_name	 * we must allocate a cm_nic, otherwise we first	 * check to see if there is a cm_nic already for this domain	 * and just use it.	 */	if (info->src_addr) {		/*TODO (optimization): strchr to name_type and strtol */		_gnix_get_ep_name(info->src_addr, 0, &ep_name, domain);		name_type = ep_name.name_type;	}	GNIX_INFO(FI_LOG_EP_CTRL, "creating cm_nic for %u/0x%x/%u\n",		      domain->ptag, domain->cookie, cdm_id);	cm_nic = (struct gnix_cm_nic *)calloc(1, sizeof(*cm_nic));	if (cm_nic == NULL) {		ret = -FI_ENOMEM;		goto err;	}	/*	 * we have to force allocation of a new nic since we want	 * an a particulard cdm id	 */	nic_attr.must_alloc = true;	nic_attr.use_cdm_id = true;	nic_attr.cdm_id = cdm_id;	ret = gnix_nic_alloc(domain, &nic_attr, &cm_nic->nic);	if (ret != FI_SUCCESS) {		GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_nic_alloc returned %s\n",			  fi_strerror(-ret));		goto err;	}	cm_nic->my_name.gnix_addr.cdm_id = cdm_id;	cm_nic->ptag = domain->ptag;	cm_nic->my_name.cookie = domain->cookie;	cm_nic->my_name.gnix_addr.device_addr = cm_nic->nic->device_addr;	cm_nic->domain = domain;	cm_nic->ctrl_progress = domain->control_progress;	cm_nic->my_name.name_type = name_type;	cm_nic->poll_cnt = 0;	fastlock_init(&cm_nic->wq_lock);	dlist_init(&cm_nic->cm_nic_wq);	/*	 * prep the cm nic's dgram component	 */	ret = _gnix_dgram_hndl_alloc(domain->fabric,				     cm_nic,				     domain->control_progress,				     &cm_nic->dgram_hndl);	if (ret != FI_SUCCESS)		goto err;	/*	 * allocate hash table for translating ep addresses	 * to ep's.	 * This table will not be large - how many FI_EP_RDM ep's	 * will an app create using one domain?, nor in the critical path	 * so just use defaults.	 */	cm_nic->addr_to_ep_ht = calloc(1, sizeof(struct gnix_hashtable));	if (cm_nic->addr_to_ep_ht == NULL)		goto err;	gnix_ht_attr.ht_initial_size = 64;	gnix_ht_attr.ht_maximum_size = 1024;	gnix_ht_attr.ht_increase_step = 2;	gnix_ht_attr.ht_increase_type = GNIX_HT_INCREASE_MULT;	gnix_ht_attr.ht_collision_thresh = 500;	gnix_ht_attr.ht_hash_seed = 0xdeadbeefbeefdead;	gnix_ht_attr.ht_internal_locking = 1;	gnix_ht_attr.destructor = NULL;	ret = _gnix_ht_init(cm_nic->addr_to_ep_ht, &gnix_ht_attr);	if (ret != FI_SUCCESS) {		GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_ht_init returned %s\n",			  fi_strerror(-ret));		goto err;	}	_gnix_ref_init(&cm_nic->ref_cnt, 1, __cm_nic_destruct);	*cm_nic_ptr = cm_nic;	pthread_mutex_lock(&gnix_cm_nic_list_lock);	dlist_insert_tail(&cm_nic->cm_nic_list, &gnix_cm_nic_list);	pthread_mutex_unlock(&gnix_cm_nic_list_lock);	return ret;err:	if (cm_nic->dgram_hndl)		_gnix_dgram_hndl_free(cm_nic->dgram_hndl);	if (cm_nic->nic)		_gnix_nic_free(cm_nic->nic);	if (cm_nic->addr_to_ep_ht) {		_gnix_ht_destroy(cm_nic->addr_to_ep_ht);		free(cm_nic->addr_to_ep_ht);	}	if (cm_nic != NULL)		free(cm_nic);	return ret;}
int ret = FI_SUCCESS;
int ret = FI_SUCCESS;
int
ret = FI_SUCCESS
ret
= FI_SUCCESS
FI_SUCCESS
FI_SUCCESS
struct gnix_cm_nic *cm_nic = NULL;
struct gnix_cm_nic *cm_nic = NULL;
struct gnix_cm_nic
gnix_cm_nic
*cm_nic = NULL
*
cm_nic
= NULL
NULL
NULL
gnix_hashtable_attr_t gnix_ht_attr = {0};
gnix_hashtable_attr_t gnix_ht_attr = {0};
gnix_hashtable_attr_t
gnix_hashtable_attr_t
gnix_ht_attr = {0}
gnix_ht_attr
= {0}
{0}
0
uint32_t name_type = GNIX_EPN_TYPE_UNBOUND;
uint32_t name_type = GNIX_EPN_TYPE_UNBOUND;
uint32_t
uint32_t
name_type = GNIX_EPN_TYPE_UNBOUND
name_type
= GNIX_EPN_TYPE_UNBOUND
GNIX_EPN_TYPE_UNBOUND
GNIX_EPN_TYPE_UNBOUND
struct gnix_nic_attr nic_attr = {0};
struct gnix_nic_attr nic_attr = {0};
struct gnix_nic_attr
gnix_nic_attr
nic_attr = {0}
nic_attr
= {0}
{0}
0
struct gnix_ep_name ep_name;
struct gnix_ep_name ep_name;
struct gnix_ep_name
gnix_ep_name
ep_name
ep_name
GNIX_TRACE(FI_LOG_EP_CTRL, "\n");
GNIX_TRACE(FI_LOG_EP_CTRL, "\n")
GNIX_TRACE
GNIX_TRACE
FI_LOG_EP_CTRL
FI_LOG_EP_CTRL
"\n"
*cm_nic_ptr = NULL;
*cm_nic_ptr = NULL
*cm_nic_ptr
cm_nic_ptr
cm_nic_ptr
NULL
NULL
if (info->src_addr) {		/*TODO (optimization): strchr to name_type and strtol */		_gnix_get_ep_name(info->src_addr, 0, &ep_name, domain);		name_type = ep_name.name_type;	}
info->src_addr
info
info
src_addr
{		/*TODO (optimization): strchr to name_type and strtol */		_gnix_get_ep_name(info->src_addr, 0, &ep_name, domain);		name_type = ep_name.name_type;	}
_gnix_get_ep_name(info->src_addr, 0, &ep_name, domain);
_gnix_get_ep_name(info->src_addr, 0, &ep_name, domain)
_gnix_get_ep_name
_gnix_get_ep_name
info->src_addr
info
info
src_addr
0
&ep_name
ep_name
ep_name
domain
domain
name_type = ep_name.name_type;
name_type = ep_name.name_type
name_type
name_type
ep_name.name_type
ep_name
ep_name
name_type
GNIX_INFO(FI_LOG_EP_CTRL, "creating cm_nic for %u/0x%x/%u\n",		      domain->ptag, domain->cookie, cdm_id);
GNIX_INFO(FI_LOG_EP_CTRL, "creating cm_nic for %u/0x%x/%u\n",		      domain->ptag, domain->cookie, cdm_id)
GNIX_INFO
GNIX_INFO
FI_LOG_EP_CTRL
FI_LOG_EP_CTRL
"creating cm_nic for %u/0x%x/%u\n"
domain->ptag
domain
domain
ptag
domain->cookie
domain
domain
cookie
cdm_id
cdm_id
cm_nic = (struct gnix_cm_nic *)calloc(1, sizeof(*cm_nic));
cm_nic = (struct gnix_cm_nic *)calloc(1, sizeof(*cm_nic))
cm_nic
cm_nic
(struct gnix_cm_nic *)calloc(1, sizeof(*cm_nic))
struct gnix_cm_nic *
struct gnix_cm_nic
gnix_cm_nic
*
*
calloc(1, sizeof(*cm_nic))
calloc
calloc
1
sizeof(*cm_nic)
(*cm_nic)
*cm_nic
cm_nic
cm_nic
if (cm_nic == NULL) {		ret = -FI_ENOMEM;		goto err;	}
cm_nic == NULL
cm_nic
cm_nic
NULL
NULL
{		ret = -FI_ENOMEM;		goto err;	}
ret = -FI_ENOMEM;
ret = -FI_ENOMEM
ret
ret
-FI_ENOMEM
FI_ENOMEM
FI_ENOMEM
goto err;
err
nic_attr.must_alloc = true;
nic_attr.must_alloc = true
nic_attr.must_alloc
nic_attr
nic_attr
must_alloc
true
nic_attr.use_cdm_id = true;
nic_attr.use_cdm_id = true
nic_attr.use_cdm_id
nic_attr
nic_attr
use_cdm_id
true
nic_attr.cdm_id = cdm_id;
nic_attr.cdm_id = cdm_id
nic_attr.cdm_id
nic_attr
nic_attr
cdm_id
cdm_id
cdm_id
ret = gnix_nic_alloc(domain, &nic_attr, &cm_nic->nic);
ret = gnix_nic_alloc(domain, &nic_attr, &cm_nic->nic)
ret
ret
gnix_nic_alloc(domain, &nic_attr, &cm_nic->nic)
gnix_nic_alloc
gnix_nic_alloc
domain
domain
&nic_attr
nic_attr
nic_attr
&cm_nic->nic
cm_nic->nic
cm_nic
cm_nic
nic
if (ret != FI_SUCCESS) {		GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_nic_alloc returned %s\n",			  fi_strerror(-ret));		goto err;	}
ret != FI_SUCCESS
ret
ret
FI_SUCCESS
FI_SUCCESS
{		GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_nic_alloc returned %s\n",			  fi_strerror(-ret));		goto err;	}
GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_nic_alloc returned %s\n",			  fi_strerror(-ret));
GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_nic_alloc returned %s\n",			  fi_strerror(-ret))
GNIX_WARN
GNIX_WARN
FI_LOG_EP_CTRL
FI_LOG_EP_CTRL
"gnix_nic_alloc returned %s\n"
fi_strerror(-ret)
fi_strerror
fi_strerror
-ret
ret
ret
goto err;
err
cm_nic->my_name.gnix_addr.cdm_id = cdm_id;
cm_nic->my_name.gnix_addr.cdm_id = cdm_id
cm_nic->my_name.gnix_addr.cdm_id
cm_nic->my_name.gnix_addr
cm_nic->my_name
cm_nic
cm_nic
my_name
gnix_addr
cdm_id
cdm_id
cdm_id
cm_nic->ptag = domain->ptag;
cm_nic->ptag = domain->ptag
cm_nic->ptag
cm_nic
cm_nic
ptag
domain->ptag
domain
domain
ptag
cm_nic->my_name.cookie = domain->cookie;
cm_nic->my_name.cookie = domain->cookie
cm_nic->my_name.cookie
cm_nic->my_name
cm_nic
cm_nic
my_name
cookie
domain->cookie
domain
domain
cookie
cm_nic->my_name.gnix_addr.device_addr = cm_nic->nic->device_addr;
cm_nic->my_name.gnix_addr.device_addr = cm_nic->nic->device_addr
cm_nic->my_name.gnix_addr.device_addr
cm_nic->my_name.gnix_addr
cm_nic->my_name
cm_nic
cm_nic
my_name
gnix_addr
device_addr
cm_nic->nic->device_addr
cm_nic->nic
cm_nic
cm_nic
nic
device_addr
cm_nic->domain = domain;
cm_nic->domain = domain
cm_nic->domain
cm_nic
cm_nic
domain
domain
domain
cm_nic->ctrl_progress = domain->control_progress;
cm_nic->ctrl_progress = domain->control_progress
cm_nic->ctrl_progress
cm_nic
cm_nic
ctrl_progress
domain->control_progress
domain
domain
control_progress
cm_nic->my_name.name_type = name_type;
cm_nic->my_name.name_type = name_type
cm_nic->my_name.name_type
cm_nic->my_name
cm_nic
cm_nic
my_name
name_type
name_type
name_type
cm_nic->poll_cnt = 0;
cm_nic->poll_cnt = 0
cm_nic->poll_cnt
cm_nic
cm_nic
poll_cnt
0
fastlock_init(&cm_nic->wq_lock);
fastlock_init(&cm_nic->wq_lock)
fastlock_init
fastlock_init
&cm_nic->wq_lock
cm_nic->wq_lock
cm_nic
cm_nic
wq_lock
dlist_init(&cm_nic->cm_nic_wq);
dlist_init(&cm_nic->cm_nic_wq)
dlist_init
dlist_init
&cm_nic->cm_nic_wq
cm_nic->cm_nic_wq
cm_nic
cm_nic
cm_nic_wq
ret = _gnix_dgram_hndl_alloc(domain->fabric,				     cm_nic,				     domain->control_progress,				     &cm_nic->dgram_hndl);
ret = _gnix_dgram_hndl_alloc(domain->fabric,				     cm_nic,				     domain->control_progress,				     &cm_nic->dgram_hndl)
ret
ret
_gnix_dgram_hndl_alloc(domain->fabric,				     cm_nic,				     domain->control_progress,				     &cm_nic->dgram_hndl)
_gnix_dgram_hndl_alloc
_gnix_dgram_hndl_alloc
domain->fabric
domain
domain
fabric
cm_nic
cm_nic
domain->control_progress
domain
domain
control_progress
&cm_nic->dgram_hndl
cm_nic->dgram_hndl
cm_nic
cm_nic
dgram_hndl
if (ret != FI_SUCCESS)		goto err;
ret != FI_SUCCESS
ret
ret
FI_SUCCESS
FI_SUCCESS
goto err;
err
cm_nic->addr_to_ep_ht = calloc(1, sizeof(struct gnix_hashtable));
cm_nic->addr_to_ep_ht = calloc(1, sizeof(struct gnix_hashtable))
cm_nic->addr_to_ep_ht
cm_nic
cm_nic
addr_to_ep_ht
calloc(1, sizeof(struct gnix_hashtable))
calloc
calloc
1
sizeof(struct gnix_hashtable)
struct gnix_hashtable
struct gnix_hashtable
gnix_hashtable

if (cm_nic->addr_to_ep_ht == NULL)		goto err;
cm_nic->addr_to_ep_ht == NULL
cm_nic->addr_to_ep_ht
cm_nic
cm_nic
addr_to_ep_ht
NULL
NULL
goto err;
err
gnix_ht_attr.ht_initial_size = 64;
gnix_ht_attr.ht_initial_size = 64
gnix_ht_attr.ht_initial_size
gnix_ht_attr
gnix_ht_attr
ht_initial_size
64
gnix_ht_attr.ht_maximum_size = 1024;
gnix_ht_attr.ht_maximum_size = 1024
gnix_ht_attr.ht_maximum_size
gnix_ht_attr
gnix_ht_attr
ht_maximum_size
1024
gnix_ht_attr.ht_increase_step = 2;
gnix_ht_attr.ht_increase_step = 2
gnix_ht_attr.ht_increase_step
gnix_ht_attr
gnix_ht_attr
ht_increase_step
2
gnix_ht_attr.ht_increase_type = GNIX_HT_INCREASE_MULT;
gnix_ht_attr.ht_increase_type = GNIX_HT_INCREASE_MULT
gnix_ht_attr.ht_increase_type
gnix_ht_attr
gnix_ht_attr
ht_increase_type
GNIX_HT_INCREASE_MULT
GNIX_HT_INCREASE_MULT
gnix_ht_attr.ht_collision_thresh = 500;
gnix_ht_attr.ht_collision_thresh = 500
gnix_ht_attr.ht_collision_thresh
gnix_ht_attr
gnix_ht_attr
ht_collision_thresh
500
gnix_ht_attr.ht_hash_seed = 0xdeadbeefbeefdead;
gnix_ht_attr.ht_hash_seed = 0xdeadbeefbeefdead
gnix_ht_attr.ht_hash_seed
gnix_ht_attr
gnix_ht_attr
ht_hash_seed
0xdeadbeefbeefdead
gnix_ht_attr.ht_internal_locking = 1;
gnix_ht_attr.ht_internal_locking = 1
gnix_ht_attr.ht_internal_locking
gnix_ht_attr
gnix_ht_attr
ht_internal_locking
1
gnix_ht_attr.destructor = NULL;
gnix_ht_attr.destructor = NULL
gnix_ht_attr.destructor
gnix_ht_attr
gnix_ht_attr
destructor
NULL
NULL
ret = _gnix_ht_init(cm_nic->addr_to_ep_ht, &gnix_ht_attr);
ret = _gnix_ht_init(cm_nic->addr_to_ep_ht, &gnix_ht_attr)
ret
ret
_gnix_ht_init(cm_nic->addr_to_ep_ht, &gnix_ht_attr)
_gnix_ht_init
_gnix_ht_init
cm_nic->addr_to_ep_ht
cm_nic
cm_nic
addr_to_ep_ht
&gnix_ht_attr
gnix_ht_attr
gnix_ht_attr
if (ret != FI_SUCCESS) {		GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_ht_init returned %s\n",			  fi_strerror(-ret));		goto err;	}
ret != FI_SUCCESS
ret
ret
FI_SUCCESS
FI_SUCCESS
{		GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_ht_init returned %s\n",			  fi_strerror(-ret));		goto err;	}
GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_ht_init returned %s\n",			  fi_strerror(-ret));
GNIX_WARN(FI_LOG_EP_CTRL,			  "gnix_ht_init returned %s\n",			  fi_strerror(-ret))
GNIX_WARN
GNIX_WARN
FI_LOG_EP_CTRL
FI_LOG_EP_CTRL
"gnix_ht_init returned %s\n"
fi_strerror(-ret)
fi_strerror
fi_strerror
-ret
ret
ret
goto err;
err
_gnix_ref_init(&cm_nic->ref_cnt, 1, __cm_nic_destruct);
_gnix_ref_init(&cm_nic->ref_cnt, 1, __cm_nic_destruct)
_gnix_ref_init
_gnix_ref_init
&cm_nic->ref_cnt
cm_nic->ref_cnt
cm_nic
cm_nic
ref_cnt
1
__cm_nic_destruct
__cm_nic_destruct
*cm_nic_ptr = cm_nic;
*cm_nic_ptr = cm_nic
*cm_nic_ptr
cm_nic_ptr
cm_nic_ptr
cm_nic
cm_nic
pthread_mutex_lock(&gnix_cm_nic_list_lock);
pthread_mutex_lock(&gnix_cm_nic_list_lock);
pthread_mutex_lock
pthread_mutex_lock
(&gnix_cm_nic_list_lock)
&gnix_cm_nic_list_lock
&
gnix_cm_nic_list_lock
dlist_insert_tail(&cm_nic->cm_nic_list, &gnix_cm_nic_list);
dlist_insert_tail(&cm_nic->cm_nic_list, &gnix_cm_nic_list)
dlist_insert_tail
dlist_insert_tail
&cm_nic->cm_nic_list
cm_nic->cm_nic_list
cm_nic
cm_nic
cm_nic_list
&gnix_cm_nic_list
gnix_cm_nic_list
gnix_cm_nic_list
pthread_mutex_unlock(&gnix_cm_nic_list_lock);
pthread_mutex_unlock(&gnix_cm_nic_list_lock)
pthread_mutex_unlock
pthread_mutex_unlock
&gnix_cm_nic_list_lock
gnix_cm_nic_list_lock
gnix_cm_nic_list_lock
return ret;
ret
ret
err:	if (cm_nic->dgram_hndl)		_gnix_dgram_hndl_free(cm_nic->dgram_hndl);
err
if (cm_nic->dgram_hndl)		_gnix_dgram_hndl_free(cm_nic->dgram_hndl);
cm_nic->dgram_hndl
cm_nic
cm_nic
dgram_hndl
_gnix_dgram_hndl_free(cm_nic->dgram_hndl);
_gnix_dgram_hndl_free(cm_nic->dgram_hndl)
_gnix_dgram_hndl_free
_gnix_dgram_hndl_free
cm_nic->dgram_hndl
cm_nic
cm_nic
dgram_hndl
if (cm_nic->nic)		_gnix_nic_free(cm_nic->nic);
cm_nic->nic
cm_nic
cm_nic
nic
_gnix_nic_free(cm_nic->nic);
_gnix_nic_free(cm_nic->nic)
_gnix_nic_free
_gnix_nic_free
cm_nic->nic
cm_nic
cm_nic
nic
if (cm_nic->addr_to_ep_ht) {		_gnix_ht_destroy(cm_nic->addr_to_ep_ht);		free(cm_nic->addr_to_ep_ht);	}
cm_nic->addr_to_ep_ht
cm_nic
cm_nic
addr_to_ep_ht
{		_gnix_ht_destroy(cm_nic->addr_to_ep_ht);		free(cm_nic->addr_to_ep_ht);	}
_gnix_ht_destroy(cm_nic->addr_to_ep_ht);
_gnix_ht_destroy(cm_nic->addr_to_ep_ht)
_gnix_ht_destroy
_gnix_ht_destroy
cm_nic->addr_to_ep_ht
cm_nic
cm_nic
addr_to_ep_ht
free(cm_nic->addr_to_ep_ht);
free(cm_nic->addr_to_ep_ht)
free
free
cm_nic->addr_to_ep_ht
cm_nic
cm_nic
addr_to_ep_ht
if (cm_nic != NULL)		free(cm_nic);
cm_nic != NULL
cm_nic
cm_nic
NULL
NULL
free(cm_nic);
free(cm_nic)
free
free
cm_nic
cm_nic
return ret;
ret
ret
-----joern-----
(120,259,0)
(217,259,0)
(69,296,0)
(243,181,0)
(296,69,0)
(182,287,0)
(133,88,0)
(254,259,0)
(25,95,0)
(122,53,0)
(15,230,0)
(132,259,0)
(147,287,0)
(265,250,0)
(263,173,0)
(71,148,0)
(225,36,0)
(84,287,0)
(62,260,0)
(17,246,0)
(309,255,0)
(6,16,0)
(207,330,0)
(288,32,0)
(101,259,0)
(145,285,0)
(327,182,0)
(101,154,0)
(168,228,0)
(167,259,0)
(195,287,0)
(87,329,0)
(313,241,0)
(123,140,0)
(30,175,0)
(140,95,0)
(42,343,0)
(136,137,0)
(145,7,0)
(297,131,0)
(252,253,0)
(269,61,0)
(291,239,0)
(325,65,0)
(149,314,0)
(177,95,0)
(79,87,0)
(111,227,0)
(124,212,0)
(108,184,0)
(161,251,0)
(240,165,0)
(339,84,0)
(48,190,0)
(26,259,0)
(279,237,0)
(192,138,0)
(292,287,0)
(114,235,0)
(183,211,0)
(254,93,0)
(103,211,0)
(48,117,0)
(255,35,0)
(306,342,0)
(176,101,0)
(57,203,0)
(110,56,0)
(188,143,0)
(127,287,0)
(342,297,0)
(321,52,0)
(340,190,0)
(202,190,0)
(245,63,0)
(156,280,0)
(130,96,0)
(241,287,0)
(86,293,0)
(76,6,0)
(37,265,0)
(98,287,0)
(224,301,0)
(69,287,0)
(171,163,0)
(305,138,0)
(187,175,0)
(66,115,0)
(206,227,0)
(96,130,0)
(260,141,0)
(3,287,0)
(9,324,0)
(77,225,0)
(216,118,0)
(308,287,0)
(128,6,0)
(259,287,0)
(58,289,0)
(272,210,0)
(186,262,0)
(261,147,0)
(98,117,0)
(255,55,0)
(298,77,0)
(137,52,0)
(169,257,0)
(203,195,0)
(25,184,0)
(25,165,0)
(141,126,0)
(332,68,0)
(125,246,0)
(47,299,0)
(65,286,0)
(336,259,0)
(220,171,0)
(6,52,0)
(318,287,0)
(301,95,0)
(80,268,0)
(336,314,0)
(278,141,0)
(225,77,0)
(165,287,0)
(280,293,0)
(51,228,0)
(227,287,0)
(333,325,0)
(59,7,0)
(40,301,0)
(127,135,0)
(250,265,0)
(19,221,0)
(314,287,0)
(289,296,0)
(242,230,0)
(102,270,0)
(64,83,0)
(12,265,0)
(24,268,0)
(93,106,0)
(276,88,0)
(184,33,0)
(163,266,0)
(200,209,0)
(258,217,0)
(312,287,0)
(256,68,0)
(268,329,0)
(139,230,0)
(61,269,0)
(0,145,0)
(221,259,0)
(159,287,0)
(212,13,0)
(302,326,0)
(312,15,0)
(260,28,0)
(273,287,0)
(145,259,0)
(131,297,0)
(238,71,0)
(304,287,0)
(158,343,0)
(215,178,0)
(337,178,0)
(91,72,0)
(173,259,0)
(194,287,0)
(324,9,0)
(204,71,0)
(226,287,0)
(190,48,0)
(286,287,0)
(97,259,0)
(251,161,0)
(56,314,0)
(97,324,0)
(106,9,0)
(232,83,0)
(277,287,0)
(345,336,0)
(142,143,0)
(262,52,0)
(127,163,0)
(197,239,0)
(160,262,0)
(329,268,0)
(330,259,0)
(174,253,0)
(253,295,0)
(22,21,0)
(296,289,0)
(180,123,0)
(223,235,0)
(109,113,0)
(259,238,0)
(145,165,0)
(87,259,0)
(134,221,0)
(149,61,0)
(209,287,0)
(50,180,0)
(36,117,0)
(331,306,0)
(144,254,0)
(60,324,0)
(43,225,0)
(95,287,0)
(297,342,0)
(25,287,0)
(336,296,0)
(112,287,0)
(230,259,0)
(265,37,0)
(116,168,0)
(264,295,0)
(306,259,0)
(118,226,0)
(146,285,0)
(119,287,0)
(290,163,0)
(56,259,0)
(2,150,0)
(238,259,0)
(189,131,0)
(328,32,0)
(102,253,0)
(185,154,0)
(38,184,0)
(285,145,0)
(326,148,0)
(205,287,0)
(68,45,0)
(210,259,0)
(285,13,0)
(288,241,0)
(253,102,0)
(81,217,0)
(8,59,0)
(275,286,0)
(92,306,0)
(320,211,0)
(152,330,0)
(222,254,0)
(250,52,0)
(296,336,0)
(300,103,0)
(282,135,0)
(100,150,0)
(237,259,0)
(246,259,0)
(95,265,0)
(137,147,0)
(334,87,0)
(143,277,0)
(23,287,0)
(343,158,0)
(203,35,0)
(193,69,0)
(15,312,0)
(27,287,0)
(238,121,0)
(83,13,0)
(89,299,0)
(32,287,0)
(319,59,0)
(281,287,0)
(211,13,0)
(85,299,0)
(314,149,0)
(1,287,0)
(150,32,0)
(153,25,0)
(299,85,0)
(145,115,0)
(14,193,0)
(323,56,0)
(168,32,0)
(25,69,0)
(41,132,0)
(297,287,0)
(65,325,0)
(31,173,0)
(67,286,0)
(106,93,0)
(138,165,0)
(260,13,0)
(229,195,0)
(44,217,0)
(217,314,0)
(267,48,0)
(104,141,0)
(55,259,0)
(159,161,0)
(48,212,0)
(268,13,0)
(83,232,0)
(88,259,0)
(36,287,0)
(5,118,0)
(303,132,0)
(49,330,0)
(251,259,0)
(247,251,0)
(93,254,0)
(219,98,0)
(118,32,0)
(179,97,0)
(199,96,0)
(330,152,0)
(286,65,0)
(248,26,0)
(180,21,0)
(201,48,0)
(213,45,0)
(315,168,0)
(53,32,0)
(212,48,0)
(260,266,0)
(121,238,0)
(53,63,0)
(113,259,0)
(155,288,0)
(324,97,0)
(115,13,0)
(232,287,0)
(342,306,0)
(235,259,0)
(158,287,0)
(166,167,0)
(190,13,0)
(130,287,0)
(45,287,0)
(173,37,0)
(265,13,0)
(55,287,0)
(78,300,0)
(29,171,0)
(154,101,0)
(9,287,0)
(198,212,0)
(151,167,0)
(234,180,0)
(322,277,0)
(154,127,0)
(161,159,0)
(123,180,0)
(317,55,0)
(178,232,0)
(217,258,0)
(10,93,0)
(196,287,0)
(311,209,0)
(211,103,0)
(20,108,0)
(28,260,0)
(88,77,0)
(46,287,0)
(294,287,0)
(140,123,0)
(157,287,0)
(329,287,0)
(162,226,0)
(299,314,0)
(129,97,0)
(325,259,0)
(164,288,0)
(316,149,0)
(310,36,0)
(39,307,0)
(205,13,0)
(257,287,0)
(299,259,0)
(249,280,0)
(68,32,0)
(94,137,0)
(172,53,0)
(4,101,0)
(175,259,0)
(90,307,0)
(37,173,0)
(307,259,0)
(74,28,0)
(218,250,0)
(63,287,0)
(18,140,0)
(7,145,0)
(239,126,0)
(11,106,0)
(280,32,0)
(107,175,0)
(72,287,0)
(271,193,0)
(77,88,0)
(48,287,0)
(335,135,0)
(237,72,0)
(230,15,0)
(163,171,0)
(82,270,0)
(265,95,0)
(300,167,0)
(59,259,0)
(52,287,0)
(270,102,0)
(231,325,0)
(227,69,0)
(71,238,0)
(135,287,0)
(243,246,0)
(105,127,0)
(99,336,0)
(175,30,0)
(7,59,0)
(115,145,0)
(346,83,0)
(141,260,0)
(210,205,0)
(165,145,0)
(148,71,0)
(208,260,0)
(214,205,0)
(143,32,0)
(150,257,0)
(270,69,0)
(293,287,0)
(262,98,0)
(178,259,0)
(236,115,0)
(16,287,0)
(206,25,0)
(246,243,0)
(338,258,0)
(289,32,0)
(326,209,0)
(184,108,0)
(70,69,0)
(246,314,0)
(34,16,0)
(75,285,0)
(228,287,0)
(103,287,0)
(283,210,0)
(341,251,0)
(191,26,0)
(85,181,0)
(61,149,0)
(148,326,0)
(167,300,0)
(54,48,0)
(170,237,0)
(344,33,0)
(233,84,0)
(284,182,0)
(168,32,1)
(184,108,1)
(336,259,1)
(87,259,1)
(70,45,1)
(134,73,1)
(296,336,1)
(206,25,1)
(153,26,1)
(127,135,1)
(148,326,1)
(219,262,1)
(16,34,1)
(171,220,1)
(283,9,1)
(257,169,1)
(260,28,1)
(231,333,1)
(137,94,1)
(323,138,1)
(315,277,1)
(77,298,1)
(82,174,1)
(342,306,1)
(98,219,1)
(83,64,1)
(84,339,1)
(341,312,1)
(230,259,1)
(178,337,1)
(228,51,1)
(293,86,1)
(334,79,1)
(4,176,1)
(245,53,1)
(50,234,1)
(62,141,1)
(111,130,1)
(159,161,1)
(260,13,1)
(288,32,1)
(36,310,1)
(183,320,1)
(129,106,1)
(32,328,1)
(146,240,1)
(132,41,1)
(6,128,1)
(290,260,1)
(317,255,1)
(328,209,1)
(40,95,1)
(61,269,1)
(134,344,1)
(22,180,1)
(277,322,1)
(106,93,1)
(191,132,1)
(254,222,1)
(102,270,1)
(205,214,1)
(320,300,1)
(161,251,1)
(270,69,1)
(141,278,1)
(59,8,1)
(83,13,1)
(66,236,1)
(99,345,1)
(114,259,1)
(246,314,1)
(78,167,1)
(118,5,1)
(278,104,1)
(331,158,1)
(131,189,1)
(218,12,1)
(197,291,1)
(113,109,1)
(134,264,1)
(118,32,1)
(286,275,1)
(303,30,1)
(41,303,1)
(284,52,1)
(134,244,1)
(73,138,1)
(186,160,1)
(345,70,1)
(241,313,1)
(93,10,1)
(168,116,1)
(68,256,1)
(301,95,1)
(316,56,1)
(36,117,1)
(39,221,1)
(123,140,1)
(31,263,1)
(19,134,1)
(65,325,1)
(48,267,1)
(170,279,1)
(265,250,1)
(258,217,1)
(249,228,1)
(52,321,1)
(108,20,1)
(155,293,1)
(211,183,1)
(25,153,1)
(15,230,1)
(58,336,1)
(267,212,1)
(235,223,1)
(204,120,1)
(300,167,1)
(285,13,1)
(225,77,1)
(39,152,1)
(164,155,1)
(232,83,1)
(107,187,1)
(169,150,1)
(162,118,1)
(156,249,1)
(185,101,1)
(95,265,1)
(280,156,1)
(11,93,1)
(87,334,1)
(260,208,1)
(229,203,1)
(221,19,1)
(213,68,1)
(288,164,1)
(250,218,1)
(138,305,1)
(72,91,1)
(135,282,1)
(7,59,1)
(96,199,1)
(175,107,1)
(301,224,1)
(335,32,1)
(47,243,1)
(115,13,1)
(239,197,1)
(136,235,1)
(226,162,1)
(167,166,1)
(43,77,1)
(336,99,1)
(191,85,1)
(289,32,1)
(208,28,1)
(224,40,1)
(311,84,1)
(343,42,1)
(144,103,1)
(55,317,1)
(12,177,1)
(76,147,1)
(326,302,1)
(188,226,1)
(211,13,1)
(48,117,1)
(280,32,1)
(132,259,1)
(49,221,1)
(56,259,1)
(238,71,1)
(145,7,1)
(48,190,1)
(201,163,1)
(53,32,1)
(340,202,1)
(29,290,1)
(300,78,1)
(57,182,1)
(68,32,1)
(25,95,1)
(154,185,1)
(346,178,1)
(259,238,1)
(105,154,1)
(298,88,1)
(217,81,1)
(217,314,1)
(106,11,1)
(276,301,1)
(17,125,1)
(26,259,1)
(77,88,1)
(125,132,1)
(67,65,1)
(127,105,1)
(329,268,1)
(325,231,1)
(158,343,1)
(151,329,1)
(143,32,1)
(25,69,1)
(64,346,1)
(202,54,1)
(80,87,1)
(63,245,1)
(138,165,1)
(248,191,1)
(6,52,1)
(209,200,1)
(140,95,1)
(26,248,1)
(149,61,1)
(338,217,1)
(60,97,1)
(187,307,1)
(153,113,1)
(92,331,1)
(145,115,1)
(223,114,1)
(42,55,1)
(222,144,1)
(91,237,1)
(225,43,1)
(307,259,1)
(321,135,1)
(324,60,1)
(130,96,1)
(51,168,1)
(207,49,1)
(115,66,1)
(239,126,1)
(252,193,1)
(236,0,1)
(116,315,1)
(319,115,1)
(75,146,1)
(143,142,1)
(124,190,1)
(271,14,1)
(97,259,1)
(254,259,1)
(240,159,1)
(250,52,1)
(314,149,1)
(199,297,1)
(150,100,1)
(122,257,1)
(251,247,1)
(234,301,1)
(163,171,1)
(206,227,1)
(120,48,1)
(165,145,1)
(44,314,1)
(237,170,1)
(101,259,1)
(309,286,1)
(260,141,1)
(235,259,1)
(133,276,1)
(212,198,1)
(261,137,1)
(215,205,1)
(210,272,1)
(141,126,1)
(79,36,1)
(285,75,1)
(299,89,1)
(230,242,1)
(25,184,1)
(53,172,1)
(147,261,1)
(134,22,1)
(268,13,1)
(190,340,1)
(9,324,1)
(265,13,1)
(333,193,1)
(88,133,1)
(256,332,1)
(14,69,1)
(212,13,1)
(177,98,1)
(0,285,1)
(167,259,1)
(282,335,1)
(227,69,1)
(172,122,1)
(262,52,1)
(307,90,1)
(221,259,1)
(330,259,1)
(262,186,1)
(297,342,1)
(55,259,1)
(175,259,1)
(216,258,1)
(258,338,1)
(182,327,1)
(137,52,1)
(286,65,1)
(180,123,1)
(327,284,1)
(150,32,1)
(296,289,1)
(103,211,1)
(56,110,1)
(313,288,1)
(24,80,1)
(265,37,1)
(291,195,1)
(243,246,1)
(25,165,1)
(88,259,1)
(94,136,1)
(330,207,1)
(193,69,1)
(139,72,1)
(160,16,1)
(81,44,1)
(339,233,1)
(238,121,1)
(97,179,1)
(306,259,1)
(297,131,1)
(178,259,1)
(344,184,1)
(205,13,1)
(98,117,1)
(337,215,1)
(299,259,1)
(101,4,1)
(332,63,1)
(200,311,1)
(113,259,1)
(28,74,1)
(54,201,1)
(214,210,1)
(18,50,1)
(279,127,1)
(20,38,1)
(255,309,1)
(174,252,1)
(154,101,1)
(38,235,1)
(251,259,1)
(190,13,1)
(61,316,1)
(324,97,1)
(255,35,1)
(336,314,1)
(2,241,1)
(305,192,1)
(86,280,1)
(237,259,1)
(227,111,1)
(34,6,1)
(289,58,1)
(127,163,1)
(247,341,1)
(48,212,1)
(100,2,1)
(173,259,1)
(244,258,1)
(253,102,1)
(303,307,1)
(326,209,1)
(37,173,1)
(310,225,1)
(203,35,1)
(268,24,1)
(203,57,1)
(325,259,1)
(242,139,1)
(142,188,1)
(302,204,1)
(176,232,1)
(312,15,1)
(8,319,1)
(246,17,1)
(128,76,1)
(299,314,1)
(195,229,1)
(145,285,1)
(322,143,1)
(145,259,1)
(210,259,1)
(71,148,1)
(220,29,1)
(193,271,1)
(90,39,1)
(140,18,1)
(201,239,1)
(263,250,1)
(93,254,1)
(59,259,1)
(246,259,1)
(89,47,1)
(10,254,1)
(179,129,1)
(264,253,1)
(109,26,1)
(69,296,1)
(173,31,1)
(30,175,1)
(152,330,1)
(306,92,1)
(270,82,1)
(189,342,1)
(217,259,1)
(192,165,1)
(275,67,1)
(104,239,1)
(198,124,1)
(272,283,1)
(74,62,1)
(85,299,1)
(5,216,1)
(45,213,1)
(110,323,1)
(166,151,1)
(300,167,2)
(79,301,2)
(210,301,2)
(68,32,2)
(42,193,2)
(80,301,2)
(29,239,2)
(96,193,2)
(322,258,2)
(252,193,2)
(106,301,2)
(138,165,2)
(0,301,2)
(159,161,2)
(309,193,2)
(314,138,2)
(14,258,2)
(11,301,2)
(232,83,2)
(199,193,2)
(342,306,2)
(30,307,2)
(217,138,2)
(18,301,2)
(303,301,2)
(248,193,2)
(325,259,2)
(26,235,2)
(247,301,2)
(9,301,2)
(225,77,2)
(279,301,2)
(153,193,2)
(55,259,2)
(307,193,2)
(242,301,2)
(255,35,2)
(25,193,2)
(97,301,2)
(90,138,2)
(147,235,2)
(316,138,2)
(137,235,2)
(166,301,2)
(49,221,2)
(178,259,2)
(130,193,2)
(286,65,2)
(285,13,2)
(37,235,2)
(94,235,2)
(48,117,2)
(307,235,2)
(163,239,2)
(288,258,2)
(248,258,2)
(220,239,2)
(214,301,2)
(167,259,2)
(89,132,2)
(103,211,2)
(137,52,2)
(31,235,2)
(123,140,2)
(207,221,2)
(306,193,2)
(234,301,2)
(127,301,2)
(25,95,2)
(152,221,2)
(59,259,2)
(337,301,2)
(87,301,2)
(141,126,2)
(276,301,2)
(227,69,2)
(118,32,2)
(303,235,2)
(320,301,2)
(56,259,2)
(82,193,2)
(25,69,2)
(70,258,2)
(106,93,2)
(25,184,2)
(6,52,2)
(265,13,2)
(253,193,2)
(98,117,2)
(102,270,2)
(246,259,2)
(161,301,2)
(301,235,2)
(260,239,2)
(243,132,2)
(184,235,2)
(30,175,2)
(285,301,2)
(39,235,2)
(115,13,2)
(55,193,2)
(190,13,2)
(341,301,2)
(227,193,2)
(246,132,2)
(145,7,2)
(174,193,2)
(37,173,2)
(142,258,2)
(301,95,2)
(60,301,2)
(169,258,2)
(90,258,2)
(127,163,2)
(9,324,2)
(7,59,2)
(264,193,2)
(230,301,2)
(91,301,2)
(270,69,2)
(150,258,2)
(69,296,2)
(123,301,2)
(158,343,2)
(260,141,2)
(345,258,2)
(262,235,2)
(87,259,2)
(288,32,2)
(161,251,2)
(300,301,2)
(179,301,2)
(71,148,2)
(299,314,2)
(217,259,2)
(268,13,2)
(336,258,2)
(312,301,2)
(95,265,2)
(53,32,2)
(90,301,2)
(210,259,2)
(249,258,2)
(280,258,2)
(211,301,2)
(260,13,2)
(303,193,2)
(103,301,2)
(145,301,2)
(332,258,2)
(50,301,2)
(221,301,2)
(140,301,2)
(153,301,2)
(255,193,2)
(25,258,2)
(330,259,2)
(26,138,2)
(152,330,2)
(20,235,2)
(34,235,2)
(189,193,2)
(317,193,2)
(319,301,2)
(324,301,2)
(299,132,2)
(92,193,2)
(25,301,2)
(28,239,2)
(186,235,2)
(47,132,2)
(268,301,2)
(237,301,2)
(26,193,2)
(110,138,2)
(39,301,2)
(313,258,2)
(5,258,2)
(336,259,2)
(58,258,2)
(343,193,2)
(122,258,2)
(239,126,2)
(149,61,2)
(134,193,2)
(15,301,2)
(261,235,2)
(101,259,2)
(315,258,2)
(133,301,2)
(154,101,2)
(333,193,2)
(136,235,2)
(180,123,2)
(148,326,2)
(221,258,2)
(138,301,2)
(83,13,2)
(10,301,2)
(253,102,2)
(299,259,2)
(191,193,2)
(81,138,2)
(19,301,2)
(305,301,2)
(66,301,2)
(218,235,2)
(145,115,2)
(251,301,2)
(53,258,2)
(173,235,2)
(36,117,2)
(165,145,2)
(271,258,2)
(125,132,2)
(270,193,2)
(155,258,2)
(303,258,2)
(344,235,2)
(73,138,2)
(88,259,2)
(158,193,2)
(243,246,2)
(45,258,2)
(170,301,2)
(145,259,2)
(39,138,2)
(250,52,2)
(154,301,2)
(72,301,2)
(150,32,2)
(171,239,2)
(64,301,2)
(307,258,2)
(168,258,2)
(310,301,2)
(48,212,2)
(342,193,2)
(143,32,2)
(26,301,2)
(298,301,2)
(134,258,2)
(99,258,2)
(17,132,2)
(206,25,2)
(248,235,2)
(193,69,2)
(217,314,2)
(101,301,2)
(187,307,2)
(118,258,2)
(254,301,2)
(19,258,2)
(132,138,2)
(132,235,2)
(164,258,2)
(132,193,2)
(38,235,2)
(329,301,2)
(275,193,2)
(78,301,2)
(175,259,2)
(160,235,2)
(26,258,2)
(297,342,2)
(191,235,2)
(296,336,2)
(211,13,2)
(56,138,2)
(8,301,2)
(237,259,2)
(134,301,2)
(97,259,2)
(303,138,2)
(260,28,2)
(289,32,2)
(41,301,2)
(113,259,2)
(206,227,2)
(41,235,2)
(26,259,2)
(221,193,2)
(248,138,2)
(326,209,2)
(85,132,2)
(330,221,2)
(280,32,2)
(191,301,2)
(221,138,2)
(19,138,2)
(149,138,2)
(230,259,2)
(168,32,2)
(105,301,2)
(165,301,2)
(293,258,2)
(153,258,2)
(12,235,2)
(191,138,2)
(108,235,2)
(193,258,2)
(93,254,2)
(263,235,2)
(76,235,2)
(175,307,2)
(289,258,2)
(262,52,2)
(324,97,2)
(203,35,2)
(296,258,2)
(250,235,2)
(141,239,2)
(43,301,2)
(221,259,2)
(83,301,2)
(208,239,2)
(245,258,2)
(228,258,2)
(115,301,2)
(75,301,2)
(132,259,2)
(314,149,2)
(191,258,2)
(278,239,2)
(90,235,2)
(65,193,2)
(36,301,2)
(216,258,2)
(162,258,2)
(93,301,2)
(41,193,2)
(2,258,2)
(329,268,2)
(107,307,2)
(109,26,2)
(25,165,2)
(297,131,2)
(44,138,2)
(232,301,2)
(104,239,2)
(226,258,2)
(90,193,2)
(235,259,2)
(25,235,2)
(39,258,2)
(272,301,2)
(41,138,2)
(307,138,2)
(61,269,2)
(113,26,2)
(297,193,2)
(86,258,2)
(277,258,2)
(338,138,2)
(312,15,2)
(212,13,2)
(177,235,2)
(215,301,2)
(336,314,2)
(15,230,2)
(134,235,2)
(39,193,2)
(167,301,2)
(16,235,2)
(95,235,2)
(19,193,2)
(176,301,2)
(156,258,2)
(19,235,2)
(163,171,2)
(63,258,2)
(265,235,2)
(51,258,2)
(221,235,2)
(219,235,2)
(225,301,2)
(139,301,2)
(128,235,2)
(259,238,2)
(240,301,2)
(153,138,2)
(100,258,2)
(67,193,2)
(238,71,2)
(258,217,2)
(41,258,2)
(111,193,2)
(24,301,2)
(130,96,2)
(146,301,2)
(248,301,2)
(98,235,2)
(251,259,2)
(4,301,2)
(68,258,2)
(102,193,2)
(222,301,2)
(143,258,2)
(323,138,2)
(62,239,2)
(258,138,2)
(77,301,2)
(172,258,2)
(61,138,2)
(183,301,2)
(144,301,2)
(306,259,2)
(256,258,2)
(151,301,2)
(307,259,2)
(224,235,2)
(192,301,2)
(132,301,2)
(334,301,2)
(346,301,2)
(40,235,2)
(77,88,2)
(205,13,2)
(296,289,2)
(265,37,2)
(241,258,2)
(173,259,2)
(153,235,2)
(325,193,2)
(59,301,2)
(129,301,2)
(69,258,2)
(244,258,2)
(131,193,2)
(265,250,2)
(246,314,2)
(85,299,2)
(48,190,2)
(307,301,2)
(180,301,2)
(331,193,2)
(116,258,2)
(88,301,2)
(236,301,2)
(238,121,2)
(22,301,2)
(185,301,2)
(74,239,2)
(178,301,2)
(205,301,2)
(6,235,2)
(132,258,2)
(286,193,2)
(213,258,2)
(254,259,2)
(188,258,2)
(184,108,2)
(65,325,2)
(7,301,2)
(140,95,2)
(283,301,2)
(25,138,2)
(290,239,2)
(231,193,2)
(257,258,2)
(145,285,2)
(159,301,2)
(134,138,2)
(127,135,2)
-----------------------------------
(0,cm_nic)
(1,if (cm_nic == NULL)
(2,gnix_ht_attr)
(3,if (cm_nic->addr_to_ep_ht)
(4,my_name)
(5,ht_initial_size)
(6,nic_attr.use_cdm_id)
(7,&cm_nic->dgram_hndl)
(8,dgram_hndl)
(9,cm_nic->my_name.gnix_addr.device_addr = cm_nic->nic->device_addr)
(10,gnix_addr)
(11,device_addr)
(12,domain)
(13,struct gnix_fid_domain *domain)
(14,ret)
(15,&cm_nic->wq_lock)
(16,nic_attr.use_cdm_id = true)
(17,addr_to_ep_ht)
(18,ret)
(19,dgram_hndl)
(20,FI_ENOMEM)
(21,)
(22,goto err;)
(23,if (info->src_addr)
(24,ptag)
(25,return ret;)
(26,cm_nic != NULL)
(27,name_type)
(28,&ep_name)
(29,ep_name)
(30,_gnix_nic_free(cm_nic->nic)
(31,nic)
(32,gnix_ht_attr = {0})
(33,)
(34,true)
(35,struct gnix_cm_nic **cm_nic_ptr)
(36,cm_nic->my_name.gnix_addr.cdm_id = cdm_id)
(37,&cm_nic->nic)
(38,ret)
(39,cm_nic)
(40,ret)
(41,addr_to_ep_ht)
(42,gnix_cm_nic_list_lock)
(43,cdm_id)
(44,cm_nic)
(45,gnix_ht_attr.destructor = NULL)
(46,if (cm_nic->addr_to_ep_ht == NULL)
(47,cm_nic)
(48,GNIX_INFO(FI_LOG_EP_CTRL, "creating cm_nic for %u/0x%x/%u\\n",\n\\n\\t\\t      domain->ptag, domain->cookie, cdm_id)
(49,cm_nic)
(50,"gnix_nic_alloc returned %s\\n")
(51,2)
(52,nic_attr = {0})
(53,gnix_ht_attr.ht_internal_locking)
(54,"creating cm_nic for %u/0x%x/%u\\n")
(55,*cm_nic_ptr = cm_nic)
(56,cm_nic->addr_to_ep_ht)
(57,cm_nic_ptr)
(58,gnix_ht_attr)
(59,cm_nic->dgram_hndl)
(60,device_addr)
(61,sizeof(struct gnix_hashtable)
(62,0)
(63,gnix_ht_attr.ht_internal_locking = 1)
(64,control_progress)
(65,&cm_nic->ref_cnt)
(66,control_progress)
(67,1)
(68,gnix_ht_attr.destructor)
(69,ret = _gnix_ht_init(cm_nic->addr_to_ep_ht, &gnix_ht_attr)
(70,ret)
(71,calloc(1, sizeof(*cm_nic)
(72,cm_nic->poll_cnt = 0)
(73,goto err;)
(74,ep_name)
(75,fabric)
(76,nic_attr)
(77,cm_nic->my_name.gnix_addr)
(78,cookie)
(79,cm_nic)
(80,domain)
(81,addr_to_ep_ht)
(82,ret)
(83,domain->control_progress)
(84,ret = FI_SUCCESS)
(85,free(cm_nic->addr_to_ep_ht)
(86,GNIX_HT_INCREASE_MULT)
(87,cm_nic->ptag)
(88,cm_nic->my_name)
(89,addr_to_ep_ht)
(90,nic)
(91,0)
(92,cm_nic_list)
(93,cm_nic->my_name.gnix_addr)
(94,must_alloc)
(95,ret = gnix_nic_alloc(domain, &nic_attr, &cm_nic->nic)
(96,&gnix_cm_nic_list_lock)
(97,cm_nic->nic)
(98,nic_attr.cdm_id = cdm_id)
(99,addr_to_ep_ht)
(100,ht_hash_seed)
(101,cm_nic->my_name)
(102,fi_strerror(-ret)
(103,cm_nic->my_name.cookie = domain->cookie)
(104,info)
(105,name_type)
(106,cm_nic->my_name.gnix_addr.device_addr)
(107,nic)
(108,-FI_ENOMEM)
(109,cm_nic)
(110,addr_to_ep_ht)
(111,ret)
(112,if (ret != FI_SUCCESS)
(113,free(cm_nic)
(114,cm_nic)
(115,domain->control_progress)
(116,ht_increase_step)
(117,uint32_t cdm_id)
(118,gnix_ht_attr.ht_initial_size)
(119,if (ret != FI_SUCCESS)
(120,cm_nic)
(121,struct gnix_cm_nic *)
(122,gnix_ht_attr)
(123,fi_strerror(-ret)
(124,domain)
(125,cm_nic)
(126,struct fi_info *info)
(127,cm_nic->my_name.name_type = name_type)
(128,use_cdm_id)
(129,cm_nic)
(130,pthread_mutex_unlock(&gnix_cm_nic_list_lock)
(131,&gnix_cm_nic_list)
(132,cm_nic->addr_to_ep_ht)
(133,my_name)
(134,cm_nic)
(135,name_type = GNIX_EPN_TYPE_UNBOUND)
(136,nic_attr)
(137,nic_attr.must_alloc)
(138,ret != FI_SUCCESS)
(139,cm_nic)
(140,-ret)
(141,info->src_addr)
(142,ht_maximum_size)
(143,gnix_ht_attr.ht_maximum_size)
(144,cm_nic)
(145,_gnix_dgram_hndl_alloc(domain->fabric,\n\\n\\t\\t\\t\\t     cm_nic,\n\\n\\t\\t\\t\\t     domain->control_progress,\n\\n\\t\\t\\t\\t     &cm_nic->dgram_hndl)
(146,domain)
(147,nic_attr.must_alloc = true)
(148,sizeof(*cm_nic)
(149,calloc(1, sizeof(struct gnix_hashtable)
(150,gnix_ht_attr.ht_hash_seed)
(151,cm_nic)
(152,_gnix_dgram_hndl_free(cm_nic->dgram_hndl)
(153,ret)
(154,cm_nic->my_name.name_type)
(155,gnix_ht_attr)
(156,ht_increase_type)
(157,nic_attr)
(158,pthread_mutex_lock(&gnix_cm_nic_list_lock)
(159,dlist_init(&cm_nic->cm_nic_wq)
(160,nic_attr)
(161,&cm_nic->cm_nic_wq)
(162,64)
(163,name_type = ep_name.name_type)
(164,ht_collision_thresh)
(165,ret = _gnix_dgram_hndl_alloc(domain->fabric,\n\\n\\t\\t\\t\\t     cm_nic,\n\\n\\t\\t\\t\\t     domain->control_progress,\n\\n\\t\\t\\t\\t     &cm_nic->dgram_hndl)
(166,my_name)
(167,cm_nic->my_name)
(168,gnix_ht_attr.ht_increase_step)
(169,0xdeadbeefbeefdead)
(170,poll_cnt)
(171,ep_name.name_type)
(172,ht_internal_locking)
(173,cm_nic->nic)
(174,"gnix_ht_init returned %s\\n")
(175,cm_nic->nic)
(176,cm_nic)
(177,ret)
(178,cm_nic->ctrl_progress)
(179,nic)
(180,GNIX_WARN(FI_LOG_EP_CTRL,\n\\n\\t\\t\\t  "gnix_nic_alloc returned %s\\n",\n\\n\\t\\t\\t  fi_strerror(-ret)
(181,)
(182,GNIX_TRACE(FI_LOG_EP_CTRL, "\\n")
(183,cookie)
(184,ret = -FI_ENOMEM)
(185,name_type)
(186,cdm_id)
(187,cm_nic)
(188,gnix_ht_attr)
(189,gnix_cm_nic_list)
(190,domain->ptag)
(191,cm_nic)
(192,ret)
(193,ret != FI_SUCCESS)
(194,ret)
(195,*cm_nic_ptr = NULL)
(196,if (cm_nic->nic)
(197,src_addr)
(198,cookie)
(199,gnix_cm_nic_list_lock)
(200,NULL)
(201,FI_LOG_EP_CTRL)
(202,domain)
(203,*cm_nic_ptr)
(204,1)
(205,cm_nic->domain = domain)
(206,RET)
(207,dgram_hndl)
(208,domain)
(209,*cm_nic = NULL)
(210,cm_nic->domain)
(211,domain->cookie)
(212,domain->cookie)
(213,NULL)
(214,domain)
(215,cm_nic)
(216,gnix_ht_attr)
(217,cm_nic->addr_to_ep_ht)
(218,nic_attr)
(219,cdm_id)
(220,name_type)
(221,cm_nic->dgram_hndl)
(222,my_name)
(223,NULL)
(224,FI_SUCCESS)
(225,cm_nic->my_name.gnix_addr.cdm_id)
(226,gnix_ht_attr.ht_initial_size = 64)
(227,return ret;)
(228,gnix_ht_attr.ht_increase_step = 2)
(229,NULL)
(230,cm_nic->wq_lock)
(231,ref_cnt)
(232,cm_nic->ctrl_progress = domain->control_progress)
(233,ret)
(234,FI_LOG_EP_CTRL)
(235,cm_nic == NULL)
(236,domain)
(237,cm_nic->poll_cnt)
(238,(struct gnix_cm_nic *)
(239,info->src_addr)
(240,ret)
(241,gnix_ht_attr.ht_collision_thresh = 500)
(242,wq_lock)
(243,_gnix_ht_destroy(cm_nic->addr_to_ep_ht)
(244,goto err;)
(245,1)
(246,cm_nic->addr_to_ep_ht)
(247,cm_nic_wq)
(248,NULL)
(249,gnix_ht_attr)
(250,&nic_attr)
(251,cm_nic->cm_nic_wq)
(252,FI_LOG_EP_CTRL)
(253,GNIX_WARN(FI_LOG_EP_CTRL,\n\\n\\t\\t\\t  "gnix_ht_init returned %s\\n",\n\\n\\t\\t\\t  fi_strerror(-ret)
(254,cm_nic->my_name)
(255,*cm_nic_ptr)
(256,destructor)
(257,gnix_ht_attr.ht_hash_seed = 0xdeadbeefbeefdead)
(258,cm_nic->addr_to_ep_ht == NULL)
(259,cm_nic = (struct gnix_cm_nic *)
(260,_gnix_get_ep_name(info->src_addr, 0, &ep_name, domain)
(261,true)
(262,nic_attr.cdm_id)
(263,cm_nic)
(264,goto err;)
(265,gnix_nic_alloc(domain, &nic_attr, &cm_nic->nic)
(266,)
(267,cdm_id)
(268,domain->ptag)
(269,struct gnix_hashtable)
(270,-ret)
(271,FI_SUCCESS)
(272,domain)
(273,if (cm_nic != NULL)
(274, sizeof(*cm_nic)
(275,__cm_nic_destruct)
(276,cm_nic)
(277,gnix_ht_attr.ht_maximum_size = 1024)
(278,src_addr)
(279,cm_nic)
(280,gnix_ht_attr.ht_increase_type)
(281,if (ret != FI_SUCCESS)
(282,GNIX_EPN_TYPE_UNBOUND)
(283,cm_nic)
(284,FI_LOG_EP_CTRL)
(285,domain->fabric)
(286,_gnix_ref_init(&cm_nic->ref_cnt, 1, __cm_nic_destruct)
(287,)
(288,gnix_ht_attr.ht_collision_thresh)
(289,&gnix_ht_attr)
(290,name_type)
(291,info)
(292,err:)
(293,gnix_ht_attr.ht_increase_type = GNIX_HT_INCREASE_MULT)
(294,ep_name)
(295,)
(296,_gnix_ht_init(cm_nic->addr_to_ep_ht, &gnix_ht_attr)
(297,dlist_insert_tail(&cm_nic->cm_nic_list, &gnix_cm_nic_list)
(298,gnix_addr)
(299,cm_nic->addr_to_ep_ht)
(300,cm_nic->my_name.cookie)
(301,ret != FI_SUCCESS)
(302,cm_nic)
(303,cm_nic)
(304,gnix_ht_attr)
(305,FI_SUCCESS)
(306,cm_nic->cm_nic_list)
(307,cm_nic->nic)
(308,cm_nic)
(309,cm_nic_ptr)
(310,cdm_id)
(311,cm_nic)
(312,fastlock_init(&cm_nic->wq_lock)
(313,500)
(314,cm_nic->addr_to_ep_ht = calloc(1, sizeof(struct gnix_hashtable)
(315,gnix_ht_attr)
(316,1)
(317,cm_nic)
(318,if (cm_nic->dgram_hndl)
(319,cm_nic)
(320,domain)
(321,nic_attr)
(322,1024)
(323,cm_nic)
(324,cm_nic->nic->device_addr)
(325,cm_nic->ref_cnt)
(326,*cm_nic)
(327,"\\n")
(328,gnix_ht_attr)
(329,cm_nic->ptag = domain->ptag)
(330,cm_nic->dgram_hndl)
(331,cm_nic)
(332,gnix_ht_attr)
(333,cm_nic)
(334,ptag)
(335,name_type)
(336,cm_nic->addr_to_ep_ht)
(337,ctrl_progress)
(338,NULL)
(339,FI_SUCCESS)
(340,ptag)
(341,cm_nic)
(342,&cm_nic->cm_nic_list)
(343,&gnix_cm_nic_list_lock)
(344,goto err;)
(345,cm_nic)
(346,domain)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^