-----label-----
0
-----code-----
VOS_STATUS hdd_wlan_re_init(void)
{
   VOS_STATUS       vosStatus;
   v_CONTEXT_t      pVosContext = NULL;
   hdd_context_t    *pHddCtx = NULL;
   eHalStatus       halStatus;
#ifdef HAVE_WCNSS_CAL_DOWNLOAD
   int              max_retries = 0;
#endif
#ifdef WLAN_BTAMP_FEATURE
   hdd_config_t     *pConfig = NULL;
   WLANBAP_ConfigType btAmpConfig;
#endif

   hdd_ssr_timer_del();
   hdd_prevent_suspend();

#ifdef HAVE_WCNSS_CAL_DOWNLOAD
   /* wait until WCNSS driver downloads NV */
   while (!wcnss_device_ready() && 5 >= ++max_retries) {
       msleep(1000);
   }
   if (max_retries >= 5) {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: WCNSS driver not ready", __func__);
      goto err_re_init;
   }
#endif

   /* The driver should always be initialized in STA mode after SSR */
   hdd_set_conparam(0);

   /* Re-open VOSS, it is a re-open b'se control transport was never closed. */
   vosStatus = vos_open(&pVosContext, 0);
   if (!VOS_IS_STATUS_SUCCESS(vosStatus))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);
      goto err_re_init;
   }

   /* Get the HDD context. */
   pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext);
   if(!pHddCtx)
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);
      goto err_vosclose;
   }

   /* Save the hal context in Adapter */
   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );
   if ( NULL == pHddCtx->hHal )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);
      goto err_vosclose;
   }

   /* Set the SME configuration parameters. */
   vosStatus = hdd_set_sme_config(pHddCtx);
   if ( VOS_STATUS_SUCCESS != vosStatus )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);
      goto err_vosclose;
   }

   /* Initialize the WMM module */
   vosStatus = hdd_wmm_init(pHddCtx);
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: hdd_wmm_init failed", __func__);
      goto err_vosclose;
   }

   vosStatus = vos_preStart( pHddCtx->pvosContext );
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);
      goto err_vosclose;
   }

   /* In the integrated architecture we update the configuration from
      the INI file and from NV before vOSS has been started so that
      the final contents are available to send down to the cCPU   */
   /* Apply the cfg.ini to cfg.dat */
   if (FALSE == hdd_update_config_dat(pHddCtx))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );
      goto err_vosclose;
   }

   /* Set the MAC Address, currently this is used by HAL to add self sta.
    * Remove this once self sta is added as part of session open. */
   halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,
         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],
           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]));
   if (!HAL_STATUS_SUCCESS(halStatus))
   {
      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "
            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);
      goto err_vosclose;
   }

   /* Start VOSS which starts up the SME/MAC/HAL modules and everything else
      Note: Firmware image will be read and downloaded inside vos_start API */
   vosStatus = vos_start( pVosContext );
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);
      goto err_vosclose;
   }

   /* Exchange capability info between Host and FW and also get versioning info from FW */
   hdd_exchange_version_and_caps(pHddCtx);

   vosStatus = hdd_post_voss_start_config( pHddCtx );
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",
         __func__);
      goto err_vosstop;
   }

#ifdef WLAN_BTAMP_FEATURE
   vosStatus = WLANBAP_Open(pVosContext);
   if(!VOS_IS_STATUS_SUCCESS(vosStatus))
   {
     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
        "%s: Failed to open BAP",__func__);
      goto err_vosstop;
   }
   vosStatus = BSL_Init(pVosContext);
   if(!VOS_IS_STATUS_SUCCESS(vosStatus))
   {
     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
        "%s: Failed to Init BSL",__func__);
     goto err_bap_close;
   }
   vosStatus = WLANBAP_Start(pVosContext);
   if (!VOS_IS_STATUS_SUCCESS(vosStatus))
   {
       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,
               "%s: Failed to start TL",__func__);
       goto err_bap_close;
   }
   pConfig = pHddCtx->cfg_ini;
   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;
   vosStatus = WLANBAP_SetConfig(&btAmpConfig);
#endif //WLAN_BTAMP_FEATURE

    /* Restart all adapters */
   hdd_start_all_adapters(pHddCtx);
   pHddCtx->isLogpInProgress = FALSE;
   pHddCtx->hdd_mcastbcast_filter_set = FALSE;
   hdd_register_mcast_bcast_filter(pHddCtx);

   /* Register with platform driver as client for Suspend/Resume */
   vosStatus = hddRegisterPmOps(pHddCtx);
   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);
      goto err_bap_stop;
   }
   /* Allow the phone to go to sleep */
   hdd_allow_suspend();
   /* register for riva power on lock */
   if (req_riva_power_on_lock("wlan"))
   {
      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",
                                        __func__);
      goto err_unregister_pmops;
   }
   goto success;

err_unregister_pmops:
   hddDeregisterPmOps(pHddCtx);

err_bap_stop:
#ifdef CONFIG_HAS_EARLYSUSPEND
   hdd_unregister_mcast_bcast_filter(pHddCtx);
#endif
   hdd_close_all_adapters(pHddCtx);
#ifdef WLAN_BTAMP_FEATURE
   WLANBAP_Stop(pVosContext);
#endif

#ifdef WLAN_BTAMP_FEATURE
err_bap_close:
   WLANBAP_Close(pVosContext);
#endif

err_vosstop:
   vos_stop(pVosContext);

err_vosclose:
   vos_close(pVosContext);
   vos_sched_close(pVosContext);
   if (pHddCtx)
   {
       /* Unregister the Net Device Notifier */
       unregister_netdevice_notifier(&hdd_netdev_notifier);
       /* Clean up HDD Nlink Service */
       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
       nl_srv_exit();
       /* Free up dynamically allocated members inside HDD Adapter */
       kfree(pHddCtx->cfg_ini);
       pHddCtx->cfg_ini= NULL;

       wiphy_unregister(pHddCtx->wiphy);
       wiphy_free(pHddCtx->wiphy);
   }
   vos_preClose(&pVosContext);

#ifdef MEMORY_DEBUG
   vos_mem_exit();
#endif

err_re_init:
   /* Allow the phone to go to sleep */
   hdd_allow_suspend();
   VOS_BUG(0);
   return -EPERM;

success:
   /* Trigger replay of BTC events */
   send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
   return VOS_STATUS_SUCCESS;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
8,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
10,23
10,24
10,25
10,26
10,27
10,28
10,29
10,30
10,31
10,32
10,33
10,34
10,35
10,36
10,37
10,38
10,39
10,40
10,41
10,42
10,43
10,44
10,45
10,46
10,47
10,48
10,49
10,50
10,51
10,52
10,53
10,54
10,55
10,56
10,57
10,58
11,12
12,13
12,14
13,14
15,16
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
26,27
27,28
27,29
28,29
30,31
30,32
30,33
33,34
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
44,45
46,47
47,48
48,49
50,51
51,52
51,53
52,53
55,56
56,57
56,58
57,58
59,60
59,61
59,62
60,61
62,63
63,64
66,67
66,68
67,68
68,69
68,70
69,70
71,72
73,74
73,75
74,75
75,76
75,77
75,78
75,79
76,77
78,79
81,82
83,84
85,86
86,87
86,88
87,88
89,90
89,91
90,91
90,92
91,92
93,94
95,96
95,97
95,98
96,97
98,99
100,101
102,103
102,104
103,104
104,105
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
114,115
116,117
118,119
119,120
119,121
120,121
120,122
121,122
124,125
124,126
125,126
125,127
126,127
129,130
129,131
129,132
130,131
132,133
134,135
136,137
136,138
137,138
137,139
138,139
140,141
140,142
141,142
144,145
144,146
145,146
146,147
146,148
146,149
146,150
147,148
149,150
152,153
154,155
156,157
157,158
157,159
158,159
160,161
160,162
161,162
163,164
165,166
165,167
166,167
166,168
167,168
169,170
171,172
171,173
172,173
173,174
173,175
173,176
173,177
174,175
176,177
179,180
181,182
183,184
184,185
184,186
185,186
187,188
187,189
188,189
190,191
192,193
192,194
193,194
194,195
194,196
195,196
197,198
199,200
199,201
200,201
201,202
201,203
201,204
201,205
202,203
204,205
207,208
209,210
211,212
212,213
212,214
213,214
215,216
215,217
216,217
218,219
218,220
219,220
222,223
222,224
223,224
224,225
224,226
225,226
227,228
229,230
229,231
230,231
231,232
231,233
231,234
231,235
232,233
234,235
237,238
239,240
241,242
241,243
242,243
242,244
243,244
245,246
245,247
246,247
248,249
250,251
250,252
251,252
252,253
252,254
252,255
252,256
253,254
255,256
258,259
260,261
262,263
263,264
263,265
264,265
266,267
266,268
266,269
266,270
266,271
267,268
269,270
269,271
270,271
273,274
275,276
275,277
276,277
276,278
277,278
279,280
281,282
282,283
282,284
283,284
283,285
284,285
284,286
285,286
290,291
291,292
292,293
292,294
293,294
293,295
294,295
294,296
295,296
300,301
300,302
301,302
302,303
302,304
303,304
305,306
307,308
307,309
308,309
309,310
309,311
309,312
309,313
309,314
309,315
310,311
312,313
315,316
317,318
319,320
321,322
323,324
324,325
324,326
325,326
327,328
327,329
328,329
330,331
332,333
332,334
333,334
334,335
334,336
335,336
337,338
339,340
339,341
340,341
341,342
341,343
341,344
341,345
342,343
344,345
347,348
349,350
351,352
352,353
352,354
353,354
355,356
357,358
358,359
358,360
359,360
361,362
361,363
362,363
364,365
366,367
366,368
367,368
368,369
368,370
369,370
371,372
373,374
373,375
374,375
375,376
375,377
375,378
375,379
376,377
378,379
381,382
383,384
385,386
386,387
386,388
387,388
389,390
391,392
392,393
392,394
393,394
393,395
394,395
397,398
399,400
400,401
400,402
401,402
401,403
402,403
405,406
407,408
408,409
408,410
409,410
411,412
413,414
414,415
414,416
415,416
417,418
417,419
418,419
420,421
422,423
422,424
423,424
424,425
424,426
425,426
427,428
429,430
429,431
430,431
431,432
431,433
431,434
431,435
432,433
434,435
437,438
439,440
441,442
442,443
443,444
445,446
445,447
446,447
446,448
447,448
450,451
450,452
451,452
452,453
452,454
452,455
452,456
453,454
455,456
458,459
460,461
462,463
464,465
464,466
466,467
467,468
467,469
468,469
470,471
472,473
472,474
474,475
475,476
475,477
476,477
478,479
480,481
480,482
482,483
483,484
483,485
484,485
486,487
488,489
488,490
490,491
491,492
491,493
492,493
494,495
496,497
497,498
497,499
498,499
500,501
502,503
502,504
503,504
505,506
505,507
505,508
505,509
505,510
505,511
505,512
506,507
507,508
507,509
508,509
510,511
511,512
511,513
514,515
515,516
515,517
515,518
516,517
518,519
521,522
522,523
523,524
525,526
526,527
526,528
527,528
529,530
529,531
530,531
533,534
534,535
534,536
535,536
535,537
536,537
539,540
541,542
542,543
542,544
543,544
545,546
545,547
546,547
549,550
550,551
550,552
551,552
553,554
553,555
554,555
557,558
558,559
558,560
559,560
561,562
562,563
564,565
564,566
566,567
567,568
568,569
570,571
571,572
571,573
572,573
575,576
576,577
577,578
579,580
579,581
581,582
582,583
582,584
582,585
583,584
585,586
588,589
589,590
-----nextToken-----
3,5,7,9,14,16,20,22,25,29,31,32,35,39,41,45,49,53,54,58,61,64,65,70,72,77,79,80,82,84,88,92,94,97,99,101,105,110,112,113,115,117,122,123,127,128,131,133,135,139,142,143,148,150,151,153,155,159,162,164,168,170,175,177,178,180,182,186,189,191,196,198,203,205,206,208,210,214,217,220,221,226,228,233,235,236,238,240,244,247,249,254,256,257,259,261,265,268,271,272,274,278,280,286,287,288,289,296,297,298,299,304,306,311,313,314,316,318,320,322,326,329,331,336,338,343,345,346,348,350,354,356,360,363,365,370,372,377,379,380,382,384,388,390,395,396,398,403,404,406,410,412,416,419,421,426,428,433,435,436,438,440,444,448,449,454,456,457,459,461,463,465,469,471,473,477,479,481,485,487,489,493,495,499,501,504,509,512,513,517,519,520,524,528,531,532,537,538,540,544,547,548,552,555,556,560,563,565,569,573,574,578,580,584,586,587,590
-----computeFrom-----
56,57
56,58
86,87
86,88
119,120
119,121
137,138
137,139
157,158
157,159
166,167
166,168
184,185
184,186
212,213
212,214
242,243
242,244
263,264
263,265
324,325
324,326
358,359
358,360
392,393
392,394
400,401
400,402
414,415
414,416
534,535
534,536
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
VOS_STATUS hdd_wlan_re_init(void){   VOS_STATUS       vosStatus;   v_CONTEXT_t      pVosContext = NULL;   hdd_context_t    *pHddCtx = NULL;   eHalStatus       halStatus;#ifdef HAVE_WCNSS_CAL_DOWNLOAD   int              max_retries = 0;#endif#ifdef WLAN_BTAMP_FEATURE   hdd_config_t     *pConfig = NULL;   WLANBAP_ConfigType btAmpConfig;#endif   hdd_ssr_timer_del();   hdd_prevent_suspend();#ifdef HAVE_WCNSS_CAL_DOWNLOAD   /* wait until WCNSS driver downloads NV */   while (!wcnss_device_ready() && 5 >= ++max_retries) {       msleep(1000);   }   if (max_retries >= 5) {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: WCNSS driver not ready", __func__);      goto err_re_init;   }#endif   /* The driver should always be initialized in STA mode after SSR */   hdd_set_conparam(0);   /* Re-open VOSS, it is a re-open b'se control transport was never closed. */   vosStatus = vos_open(&pVosContext, 0);   if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);      goto err_re_init;   }   /* Get the HDD context. */   pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext);   if(!pHddCtx)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);      goto err_vosclose;   }   /* Save the hal context in Adapter */   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );   if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);      goto err_vosclose;   }   /* Set the SME configuration parameters. */   vosStatus = hdd_set_sme_config(pHddCtx);   if ( VOS_STATUS_SUCCESS != vosStatus )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);      goto err_vosclose;   }   /* Initialize the WMM module */   vosStatus = hdd_wmm_init(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ))   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: hdd_wmm_init failed", __func__);      goto err_vosclose;   }   vosStatus = vos_preStart( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);      goto err_vosclose;   }   /* In the integrated architecture we update the configuration from      the INI file and from NV before vOSS has been started so that      the final contents are available to send down to the cCPU   */   /* Apply the cfg.ini to cfg.dat */   if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }   /* Set the MAC Address, currently this is used by HAL to add self sta.    * Remove this once self sta is added as part of session open. */   halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]));   if (!HAL_STATUS_SUCCESS(halStatus))   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);      goto err_vosclose;   }   /* Start VOSS which starts up the SME/MAC/HAL modules and everything else      Note: Firmware image will be read and downloaded inside vos_start API */   vosStatus = vos_start( pVosContext );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      goto err_vosclose;   }   /* Exchange capability info between Host and FW and also get versioning info from FW */   hdd_exchange_version_and_caps(pHddCtx);   vosStatus = hdd_post_voss_start_config( pHddCtx );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }#ifdef WLAN_BTAMP_FEATURE   vosStatus = WLANBAP_Open(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vosStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to open BAP",__func__);      goto err_vosstop;   }   vosStatus = BSL_Init(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vosStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to Init BSL",__func__);     goto err_bap_close;   }   vosStatus = WLANBAP_Start(pVosContext);   if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,               "%s: Failed to start TL",__func__);       goto err_bap_close;   }   pConfig = pHddCtx->cfg_ini;   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;   vosStatus = WLANBAP_SetConfig(&btAmpConfig);#endif //WLAN_BTAMP_FEATURE    /* Restart all adapters */   hdd_start_all_adapters(pHddCtx);   pHddCtx->isLogpInProgress = FALSE;   pHddCtx->hdd_mcastbcast_filter_set = FALSE;   hdd_register_mcast_bcast_filter(pHddCtx);   /* Register with platform driver as client for Suspend/Resume */   vosStatus = hddRegisterPmOps(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);      goto err_bap_stop;   }   /* Allow the phone to go to sleep */   hdd_allow_suspend();   /* register for riva power on lock */   if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);      goto err_unregister_pmops;   }   goto success;err_unregister_pmops:   hddDeregisterPmOps(pHddCtx);err_bap_stop:#ifdef CONFIG_HAS_EARLYSUSPEND   hdd_unregister_mcast_bcast_filter(pHddCtx);#endif   hdd_close_all_adapters(pHddCtx);#ifdef WLAN_BTAMP_FEATURE   WLANBAP_Stop(pVosContext);#endif#ifdef WLAN_BTAMP_FEATUREerr_bap_close:   WLANBAP_Close(pVosContext);#endiferr_vosstop:   vos_stop(pVosContext);err_vosclose:   vos_close(pVosContext);   vos_sched_close(pVosContext);   if (pHddCtx)   {       /* Unregister the Net Device Notifier */       unregister_netdevice_notifier(&hdd_netdev_notifier);       /* Clean up HDD Nlink Service */       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);       nl_srv_exit();       /* Free up dynamically allocated members inside HDD Adapter */       kfree(pHddCtx->cfg_ini);       pHddCtx->cfg_ini= NULL;       wiphy_unregister(pHddCtx->wiphy);       wiphy_free(pHddCtx->wiphy);   }   vos_preClose(&pVosContext);#ifdef MEMORY_DEBUG   vos_mem_exit();#endiferr_re_init:   /* Allow the phone to go to sleep */   hdd_allow_suspend();   VOS_BUG(0);   return -EPERM;success:   /* Trigger replay of BTC events */   send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);   return VOS_STATUS_SUCCESS;}
VOS_STATUS
VOS_STATUS
hdd_wlan_re_init(void)
hdd_wlan_re_init
void
void


{   VOS_STATUS       vosStatus;   v_CONTEXT_t      pVosContext = NULL;   hdd_context_t    *pHddCtx = NULL;   eHalStatus       halStatus;#ifdef HAVE_WCNSS_CAL_DOWNLOAD   int              max_retries = 0;#endif#ifdef WLAN_BTAMP_FEATURE   hdd_config_t     *pConfig = NULL;   WLANBAP_ConfigType btAmpConfig;#endif   hdd_ssr_timer_del();   hdd_prevent_suspend();#ifdef HAVE_WCNSS_CAL_DOWNLOAD   /* wait until WCNSS driver downloads NV */   while (!wcnss_device_ready() && 5 >= ++max_retries) {       msleep(1000);   }   if (max_retries >= 5) {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: WCNSS driver not ready", __func__);      goto err_re_init;   }#endif   /* The driver should always be initialized in STA mode after SSR */   hdd_set_conparam(0);   /* Re-open VOSS, it is a re-open b'se control transport was never closed. */   vosStatus = vos_open(&pVosContext, 0);   if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);      goto err_re_init;   }   /* Get the HDD context. */   pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext);   if(!pHddCtx)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);      goto err_vosclose;   }   /* Save the hal context in Adapter */   pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );   if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);      goto err_vosclose;   }   /* Set the SME configuration parameters. */   vosStatus = hdd_set_sme_config(pHddCtx);   if ( VOS_STATUS_SUCCESS != vosStatus )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);      goto err_vosclose;   }   /* Initialize the WMM module */   vosStatus = hdd_wmm_init(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ))   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: hdd_wmm_init failed", __func__);      goto err_vosclose;   }   vosStatus = vos_preStart( pHddCtx->pvosContext );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);      goto err_vosclose;   }   /* In the integrated architecture we update the configuration from      the INI file and from NV before vOSS has been started so that      the final contents are available to send down to the cCPU   */   /* Apply the cfg.ini to cfg.dat */   if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }   /* Set the MAC Address, currently this is used by HAL to add self sta.    * Remove this once self sta is added as part of session open. */   halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]));   if (!HAL_STATUS_SUCCESS(halStatus))   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);      goto err_vosclose;   }   /* Start VOSS which starts up the SME/MAC/HAL modules and everything else      Note: Firmware image will be read and downloaded inside vos_start API */   vosStatus = vos_start( pVosContext );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      goto err_vosclose;   }   /* Exchange capability info between Host and FW and also get versioning info from FW */   hdd_exchange_version_and_caps(pHddCtx);   vosStatus = hdd_post_voss_start_config( pHddCtx );   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }#ifdef WLAN_BTAMP_FEATURE   vosStatus = WLANBAP_Open(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vosStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to open BAP",__func__);      goto err_vosstop;   }   vosStatus = BSL_Init(pVosContext);   if(!VOS_IS_STATUS_SUCCESS(vosStatus))   {     VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,        "%s: Failed to Init BSL",__func__);     goto err_bap_close;   }   vosStatus = WLANBAP_Start(pVosContext);   if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {       VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,               "%s: Failed to start TL",__func__);       goto err_bap_close;   }   pConfig = pHddCtx->cfg_ini;   btAmpConfig.ucPreferredChannel = pConfig->preferredChannel;   vosStatus = WLANBAP_SetConfig(&btAmpConfig);#endif //WLAN_BTAMP_FEATURE    /* Restart all adapters */   hdd_start_all_adapters(pHddCtx);   pHddCtx->isLogpInProgress = FALSE;   pHddCtx->hdd_mcastbcast_filter_set = FALSE;   hdd_register_mcast_bcast_filter(pHddCtx);   /* Register with platform driver as client for Suspend/Resume */   vosStatus = hddRegisterPmOps(pHddCtx);   if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);      goto err_bap_stop;   }   /* Allow the phone to go to sleep */   hdd_allow_suspend();   /* register for riva power on lock */   if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);      goto err_unregister_pmops;   }   goto success;err_unregister_pmops:   hddDeregisterPmOps(pHddCtx);err_bap_stop:#ifdef CONFIG_HAS_EARLYSUSPEND   hdd_unregister_mcast_bcast_filter(pHddCtx);#endif   hdd_close_all_adapters(pHddCtx);#ifdef WLAN_BTAMP_FEATURE   WLANBAP_Stop(pVosContext);#endif#ifdef WLAN_BTAMP_FEATUREerr_bap_close:   WLANBAP_Close(pVosContext);#endiferr_vosstop:   vos_stop(pVosContext);err_vosclose:   vos_close(pVosContext);   vos_sched_close(pVosContext);   if (pHddCtx)   {       /* Unregister the Net Device Notifier */       unregister_netdevice_notifier(&hdd_netdev_notifier);       /* Clean up HDD Nlink Service */       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);       nl_srv_exit();       /* Free up dynamically allocated members inside HDD Adapter */       kfree(pHddCtx->cfg_ini);       pHddCtx->cfg_ini= NULL;       wiphy_unregister(pHddCtx->wiphy);       wiphy_free(pHddCtx->wiphy);   }   vos_preClose(&pVosContext);#ifdef MEMORY_DEBUG   vos_mem_exit();#endiferr_re_init:   /* Allow the phone to go to sleep */   hdd_allow_suspend();   VOS_BUG(0);   return -EPERM;success:   /* Trigger replay of BTC events */   send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);   return VOS_STATUS_SUCCESS;}
VOS_STATUS       vosStatus;
VOS_STATUS       vosStatus;
VOS_STATUS
VOS_STATUS
vosStatus
vosStatus
v_CONTEXT_t      pVosContext = NULL;
v_CONTEXT_t      pVosContext = NULL;
v_CONTEXT_t
v_CONTEXT_t
pVosContext = NULL
pVosContext
= NULL
NULL
NULL
hdd_context_t    *pHddCtx = NULL;
hdd_context_t    *pHddCtx = NULL;
hdd_context_t
hdd_context_t
*pHddCtx = NULL
*
pHddCtx
= NULL
NULL
NULL
eHalStatus       halStatus;
eHalStatus       halStatus;
eHalStatus
eHalStatus
halStatus
halStatus
hdd_ssr_timer_del();
hdd_ssr_timer_del()
hdd_ssr_timer_del
hdd_ssr_timer_del
hdd_prevent_suspend();
hdd_prevent_suspend()
hdd_prevent_suspend
hdd_prevent_suspend
hdd_set_conparam(0);
hdd_set_conparam(0)
hdd_set_conparam
hdd_set_conparam
0
vosStatus = vos_open(&pVosContext, 0);
vosStatus = vos_open(&pVosContext, 0)
vosStatus
vosStatus
vos_open(&pVosContext, 0)
vos_open
vos_open
&pVosContext
pVosContext
pVosContext
0
if (!VOS_IS_STATUS_SUCCESS(vosStatus))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);      goto err_re_init;   }
!VOS_IS_STATUS_SUCCESS(vosStatus)
VOS_IS_STATUS_SUCCESS(vosStatus)
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);      goto err_re_init;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_open failed"
__func__
__func__
goto err_re_init;
err_re_init
pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext);
pHddCtx = (hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext)
pHddCtx
pHddCtx
(hdd_context_t *)vos_get_context(VOS_MODULE_ID_HDD, pVosContext)
hdd_context_t *
hdd_context_t
hdd_context_t
*
*
vos_get_context(VOS_MODULE_ID_HDD, pVosContext)
vos_get_context
vos_get_context
VOS_MODULE_ID_HDD
VOS_MODULE_ID_HDD
pVosContext
pVosContext
if(!pHddCtx)   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);      goto err_vosclose;   }
!pHddCtx
pHddCtx
pHddCtx
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: HDD context is Null"
__func__
__func__
goto err_vosclose;
err_vosclose
pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext );
pHddCtx->hHal = (tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext )
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
(tHalHandle)vos_get_context( VOS_MODULE_ID_SME, pVosContext )
tHalHandle
tHalHandle
tHalHandle

vos_get_context( VOS_MODULE_ID_SME, pVosContext )
vos_get_context
vos_get_context
VOS_MODULE_ID_SME
VOS_MODULE_ID_SME
pVosContext
pVosContext
if ( NULL == pHddCtx->hHal )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);      goto err_vosclose;   }
NULL == pHddCtx->hHal
NULL
NULL
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: HAL context is null"
__func__
__func__
goto err_vosclose;
err_vosclose
vosStatus = hdd_set_sme_config(pHddCtx);
vosStatus = hdd_set_sme_config(pHddCtx)
vosStatus
vosStatus
hdd_set_sme_config(pHddCtx)
hdd_set_sme_config
hdd_set_sme_config
pHddCtx
pHddCtx
if ( VOS_STATUS_SUCCESS != vosStatus )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);      goto err_vosclose;   }
VOS_STATUS_SUCCESS != vosStatus
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: Failed hdd_set_sme_config"
__func__
__func__
goto err_vosclose;
err_vosclose
vosStatus = hdd_wmm_init(pHddCtx);
vosStatus = hdd_wmm_init(pHddCtx)
vosStatus
vosStatus
hdd_wmm_init(pHddCtx)
hdd_wmm_init
hdd_wmm_init
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( vosStatus ))   {      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: hdd_wmm_init failed", __func__);      goto err_vosclose;   }
!VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL, "%s: hdd_wmm_init failed", __func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: hdd_wmm_init failed", __func__);
hddLog(VOS_TRACE_LEVEL_FATAL, "%s: hdd_wmm_init failed", __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hdd_wmm_init failed"
__func__
__func__
goto err_vosclose;
err_vosclose
vosStatus = vos_preStart( pHddCtx->pvosContext );
vosStatus = vos_preStart( pHddCtx->pvosContext )
vosStatus
vosStatus
vos_preStart( pHddCtx->pvosContext )
vos_preStart
vos_preStart
pHddCtx->pvosContext
pHddCtx
pHddCtx
pvosContext
if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);      goto err_vosclose;   }
!VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_preStart failed"
__func__
__func__
goto err_vosclose;
err_vosclose
if (FALSE == hdd_update_config_dat(pHddCtx))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }
FALSE == hdd_update_config_dat(pHddCtx)
FALSE
FALSE
hdd_update_config_dat(pHddCtx)
hdd_update_config_dat
hdd_update_config_dat
pHddCtx
pHddCtx
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ );
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ )
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: config update failed"
__func__
__func__
goto err_vosclose;
err_vosclose
halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]));
halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]))
halStatus
halStatus
cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,         (v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0],           sizeof(pHddCtx->cfg_ini->intfMacAddr[0]))
cfgSetStr
cfgSetStr
pHddCtx->hHal
pHddCtx
pHddCtx
hHal
WNI_CFG_STA_ID
WNI_CFG_STA_ID
(v_U8_t *)&pHddCtx->cfg_ini->intfMacAddr[0]
v_U8_t *
v_U8_t
v_U8_t
*
*
&pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
sizeof(pHddCtx->cfg_ini->intfMacAddr[0])
(pHddCtx->cfg_ini->intfMacAddr[0])
pHddCtx->cfg_ini->intfMacAddr[0]
pHddCtx->cfg_ini->intfMacAddr
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
intfMacAddr
0
if (!HAL_STATUS_SUCCESS(halStatus))   {      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);      goto err_vosclose;   }
!HAL_STATUS_SUCCESS(halStatus)
HAL_STATUS_SUCCESS(halStatus)
HAL_STATUS_SUCCESS
HAL_STATUS_SUCCESS
halStatus
halStatus
{      hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus);
hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus)
hddLog
hddLog
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"%s: Failed to set MAC Address. "            "HALStatus is %08d [x%08x]"
__func__
__func__
halStatus
halStatus
halStatus
halStatus
goto err_vosclose;
err_vosclose
vosStatus = vos_start( pVosContext );
vosStatus = vos_start( pVosContext )
vosStatus
vosStatus
vos_start( pVosContext )
vos_start
vos_start
pVosContext
pVosContext
if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      goto err_vosclose;   }
!VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);      goto err_vosclose;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: vos_start failed"
__func__
__func__
goto err_vosclose;
err_vosclose
hdd_exchange_version_and_caps(pHddCtx);
hdd_exchange_version_and_caps(pHddCtx)
hdd_exchange_version_and_caps
hdd_exchange_version_and_caps
pHddCtx
pHddCtx
vosStatus = hdd_post_voss_start_config( pHddCtx );
vosStatus = hdd_post_voss_start_config( pHddCtx )
vosStatus
vosStatus
hdd_post_voss_start_config( pHddCtx )
hdd_post_voss_start_config
hdd_post_voss_start_config
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }
!VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);      goto err_vosstop;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",         __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hdd_post_voss_start_config failed"
__func__
__func__
goto err_vosstop;
err_vosstop
hdd_start_all_adapters(pHddCtx);
hdd_start_all_adapters(pHddCtx)
hdd_start_all_adapters
hdd_start_all_adapters
pHddCtx
pHddCtx
pHddCtx->isLogpInProgress = FALSE;
pHddCtx->isLogpInProgress = FALSE
pHddCtx->isLogpInProgress
pHddCtx
pHddCtx
isLogpInProgress
FALSE
FALSE
pHddCtx->hdd_mcastbcast_filter_set = FALSE;
pHddCtx->hdd_mcastbcast_filter_set = FALSE
pHddCtx->hdd_mcastbcast_filter_set
pHddCtx
pHddCtx
hdd_mcastbcast_filter_set
FALSE
FALSE
hdd_register_mcast_bcast_filter(pHddCtx);
hdd_register_mcast_bcast_filter(pHddCtx)
hdd_register_mcast_bcast_filter
hdd_register_mcast_bcast_filter
pHddCtx
pHddCtx
vosStatus = hddRegisterPmOps(pHddCtx);
vosStatus = hddRegisterPmOps(pHddCtx)
vosStatus
vosStatus
hddRegisterPmOps(pHddCtx)
hddRegisterPmOps
hddRegisterPmOps
pHddCtx
pHddCtx
if ( !VOS_IS_STATUS_SUCCESS( vosStatus ) )   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);      goto err_bap_stop;   }
!VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS( vosStatus )
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);      goto err_bap_stop;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: hddRegisterPmOps failed"
__func__
__func__
goto err_bap_stop;
err_bap_stop
hdd_allow_suspend();
hdd_allow_suspend()
hdd_allow_suspend
hdd_allow_suspend
if (req_riva_power_on_lock("wlan"))   {      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);      goto err_unregister_pmops;   }
req_riva_power_on_lock("wlan")
req_riva_power_on_lock
req_riva_power_on_lock
"wlan"
{      hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);      goto err_unregister_pmops;   }
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__);
hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",                                        __func__)
hddLog
hddLog
VOS_TRACE_LEVEL_FATAL
VOS_TRACE_LEVEL_FATAL
"%s: req riva power on lock failed"
__func__
__func__
goto err_unregister_pmops;
err_unregister_pmops
goto success;
success
err_unregister_pmops:   hddDeregisterPmOps(pHddCtx);
err_unregister_pmops
hddDeregisterPmOps(pHddCtx);
hddDeregisterPmOps(pHddCtx)
hddDeregisterPmOps
hddDeregisterPmOps
pHddCtx
pHddCtx
err_bap_stop:#ifdef CONFIG_HAS_EARLYSUSPEND   hdd_unregister_mcast_bcast_filter(pHddCtx);#endif   hdd_close_all_adapters(pHddCtx);
err_bap_stop
hdd_close_all_adapters(pHddCtx);
hdd_close_all_adapters(pHddCtx)
hdd_close_all_adapters
hdd_close_all_adapters
pHddCtx
pHddCtx
err_vosstop:   vos_stop(pVosContext);
err_vosstop
vos_stop(pVosContext);
vos_stop(pVosContext)
vos_stop
vos_stop
pVosContext
pVosContext
err_vosclose:   vos_close(pVosContext);
err_vosclose
vos_close(pVosContext);
vos_close(pVosContext)
vos_close
vos_close
pVosContext
pVosContext
vos_sched_close(pVosContext);
vos_sched_close(pVosContext)
vos_sched_close
vos_sched_close
pVosContext
pVosContext
if (pHddCtx)   {       /* Unregister the Net Device Notifier */       unregister_netdevice_notifier(&hdd_netdev_notifier);       /* Clean up HDD Nlink Service */       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);       nl_srv_exit();       /* Free up dynamically allocated members inside HDD Adapter */       kfree(pHddCtx->cfg_ini);       pHddCtx->cfg_ini= NULL;       wiphy_unregister(pHddCtx->wiphy);       wiphy_free(pHddCtx->wiphy);   }
pHddCtx
pHddCtx
{       /* Unregister the Net Device Notifier */       unregister_netdevice_notifier(&hdd_netdev_notifier);       /* Clean up HDD Nlink Service */       send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);       nl_srv_exit();       /* Free up dynamically allocated members inside HDD Adapter */       kfree(pHddCtx->cfg_ini);       pHddCtx->cfg_ini= NULL;       wiphy_unregister(pHddCtx->wiphy);       wiphy_free(pHddCtx->wiphy);   }
unregister_netdevice_notifier(&hdd_netdev_notifier);
unregister_netdevice_notifier(&hdd_netdev_notifier);
unregister_netdevice_notifier
unregister_netdevice_notifier
(&hdd_netdev_notifier)
&hdd_netdev_notifier
&
hdd_netdev_notifier
send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0)
send_btc_nlink_msg
send_btc_nlink_msg
WLAN_MODULE_DOWN_IND
WLAN_MODULE_DOWN_IND
0
nl_srv_exit();
nl_srv_exit()
nl_srv_exit
nl_srv_exit
kfree(pHddCtx->cfg_ini);
kfree(pHddCtx->cfg_ini)
kfree
kfree
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
pHddCtx->cfg_ini= NULL;
pHddCtx->cfg_ini= NULL
pHddCtx->cfg_ini
pHddCtx
pHddCtx
cfg_ini
NULL
NULL
wiphy_unregister(pHddCtx->wiphy);
wiphy_unregister(pHddCtx->wiphy)
wiphy_unregister
wiphy_unregister
pHddCtx->wiphy
pHddCtx
pHddCtx
wiphy
wiphy_free(pHddCtx->wiphy);
wiphy_free(pHddCtx->wiphy)
wiphy_free
wiphy_free
pHddCtx->wiphy
pHddCtx
pHddCtx
wiphy
vos_preClose(&pVosContext);
vos_preClose(&pVosContext)
vos_preClose
vos_preClose
&pVosContext
pVosContext
pVosContext
err_re_init:   /* Allow the phone to go to sleep */   hdd_allow_suspend();
err_re_init
hdd_allow_suspend();
hdd_allow_suspend()
hdd_allow_suspend
hdd_allow_suspend
VOS_BUG(0);
VOS_BUG(0)
VOS_BUG
VOS_BUG
0
return -EPERM;
-EPERM
EPERM
EPERM
success:   /* Trigger replay of BTC events */   send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
success
send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0);
send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0)
send_btc_nlink_msg
send_btc_nlink_msg
WLAN_MODULE_DOWN_IND
WLAN_MODULE_DOWN_IND
0
return VOS_STATUS_SUCCESS;
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
-----joern-----
(269,365,0)
(7,220,0)
(355,115,0)
(9,342,0)
(353,67,0)
(322,239,0)
(319,180,0)
(108,362,0)
(177,85,0)
(206,297,0)
(162,82,0)
(17,164,0)
(100,55,0)
(86,22,0)
(86,371,0)
(179,267,0)
(279,224,0)
(73,355,0)
(92,222,0)
(381,342,0)
(328,342,0)
(305,342,0)
(271,370,0)
(191,81,0)
(354,377,0)
(137,168,0)
(24,15,0)
(281,124,0)
(301,305,0)
(6,55,0)
(343,253,0)
(194,81,0)
(236,279,0)
(84,342,0)
(321,286,0)
(101,342,0)
(277,342,0)
(2,61,0)
(90,19,0)
(189,336,0)
(58,81,0)
(213,30,0)
(99,101,0)
(260,342,0)
(367,277,0)
(257,155,0)
(134,87,0)
(38,91,0)
(338,362,0)
(22,342,0)
(207,342,0)
(191,259,0)
(365,177,0)
(123,342,0)
(373,181,0)
(364,342,0)
(171,75,0)
(254,371,0)
(141,191,0)
(259,342,0)
(283,342,0)
(359,341,0)
(80,147,0)
(324,354,0)
(379,177,0)
(348,42,0)
(97,333,0)
(62,244,0)
(186,342,0)
(167,229,0)
(325,55,0)
(23,342,0)
(341,359,0)
(283,267,0)
(237,177,0)
(121,342,0)
(375,11,0)
(378,342,0)
(67,342,0)
(291,61,0)
(266,342,0)
(227,164,0)
(47,354,0)
(52,115,0)
(273,371,0)
(199,69,0)
(37,131,0)
(222,341,0)
(234,87,0)
(288,44,0)
(105,386,0)
(153,189,0)
(241,292,0)
(79,58,0)
(365,44,0)
(255,40,0)
(85,19,0)
(190,58,0)
(238,354,0)
(278,87,0)
(253,343,0)
(14,59,0)
(58,79,0)
(57,177,0)
(156,171,0)
(163,299,0)
(2,342,0)
(230,342,0)
(49,272,0)
(75,171,0)
(187,342,0)
(9,237,0)
(185,342,0)
(217,2,0)
(197,14,0)
(103,62,0)
(122,14,0)
(143,310,0)
(56,51,0)
(280,99,0)
(126,240,0)
(132,107,0)
(132,371,0)
(122,194,0)
(112,331,0)
(95,180,0)
(120,262,0)
(299,177,0)
(346,293,0)
(374,85,0)
(46,342,0)
(111,86,0)
(63,342,0)
(180,259,0)
(72,342,0)
(93,292,0)
(4,363,0)
(172,167,0)
(252,135,0)
(267,283,0)
(334,233,0)
(97,342,0)
(249,333,0)
(371,342,0)
(5,42,0)
(54,310,0)
(25,342,0)
(242,178,0)
(56,177,0)
(384,239,0)
(154,342,0)
(276,177,0)
(150,72,0)
(140,378,0)
(81,191,0)
(284,22,0)
(316,257,0)
(331,87,0)
(261,244,0)
(185,57,0)
(326,292,0)
(195,139,0)
(28,192,0)
(369,38,0)
(290,162,0)
(333,371,0)
(127,342,0)
(116,177,0)
(250,352,0)
(78,191,0)
(60,342,0)
(268,177,0)
(317,3,0)
(267,371,0)
(159,20,0)
(2,233,0)
(358,342,0)
(254,342,0)
(102,29,0)
(59,14,0)
(69,82,0)
(304,131,0)
(3,87,0)
(270,371,0)
(231,177,0)
(223,294,0)
(107,132,0)
(295,299,0)
(294,342,0)
(70,147,0)
(293,278,0)
(339,342,0)
(335,129,0)
(144,301,0)
(347,342,0)
(1,342,0)
(98,95,0)
(116,342,0)
(30,213,0)
(8,352,0)
(82,69,0)
(323,342,0)
(272,253,0)
(168,297,0)
(368,270,0)
(311,342,0)
(178,162,0)
(351,62,0)
(181,342,0)
(151,15,0)
(289,132,0)
(2,365,0)
(300,379,0)
(264,15,0)
(0,72,0)
(192,362,0)
(330,33,0)
(351,342,0)
(203,377,0)
(85,177,0)
(184,40,0)
(205,180,0)
(314,217,0)
(11,135,0)
(178,135,0)
(39,56,0)
(136,330,0)
(193,365,0)
(146,177,0)
(145,342,0)
(51,56,0)
(233,234,0)
(265,220,0)
(138,89,0)
(306,322,0)
(216,59,0)
(125,231,0)
(309,342,0)
(200,128,0)
(26,342,0)
(332,62,0)
(13,322,0)
(168,34,0)
(235,19,0)
(282,342,0)
(10,337,0)
(19,85,0)
(81,58,0)
(147,244,0)
(272,371,0)
(77,342,0)
(297,168,0)
(114,342,0)
(209,330,0)
(376,30,0)
(180,95,0)
(104,220,0)
(171,342,0)
(293,177,0)
(284,251,0)
(299,163,0)
(167,282,0)
(315,57,0)
(66,310,0)
(196,317,0)
(210,279,0)
(362,177,0)
(386,342,0)
(107,342,0)
(350,355,0)
(219,33,0)
(262,177,0)
(40,177,0)
(28,190,0)
(164,29,0)
(57,185,0)
(229,167,0)
(16,37,0)
(81,194,0)
(3,317,0)
(378,140,0)
(89,371,0)
(45,359,0)
(194,122,0)
(366,318,0)
(89,342,0)
(129,134,0)
(240,305,0)
(114,177,0)
(106,158,0)
(221,284,0)
(362,192,0)
(258,237,0)
(372,386,0)
(276,360,0)
(38,282,0)
(361,276,0)
(64,354,0)
(88,342,0)
(228,370,0)
(76,342,0)
(135,342,0)
(233,177,0)
(243,272,0)
(345,299,0)
(59,177,0)
(357,97,0)
(192,28,0)
(68,97,0)
(81,282,0)
(180,177,0)
(189,181,0)
(274,155,0)
(163,181,0)
(232,233,0)
(134,129,0)
(41,60,0)
(263,91,0)
(40,259,0)
(323,177,0)
(148,342,0)
(44,342,0)
(133,224,0)
(19,371,0)
(173,371,0)
(43,119,0)
(21,28,0)
(344,378,0)
(222,342,0)
(65,331,0)
(360,87,0)
(363,246,0)
(292,337,0)
(321,9,0)
(50,68,0)
(248,87,0)
(152,135,0)
(60,371,0)
(34,342,0)
(204,342,0)
(182,234,0)
(349,247,0)
(244,342,0)
(336,189,0)
(110,355,0)
(71,330,0)
(14,122,0)
(301,144,0)
(356,140,0)
(68,74,0)
(352,250,0)
(360,276,0)
(34,168,0)
(170,101,0)
(245,129,0)
(174,276,0)
(370,139,0)
(262,342,0)
(75,371,0)
(305,240,0)
(190,28,0)
(117,342,0)
(113,122,0)
(296,257,0)
(67,99,0)
(58,190,0)
(312,370,0)
(96,55,0)
(286,321,0)
(169,38,0)
(183,342,0)
(270,342,0)
(22,86,0)
(380,322,0)
(278,293,0)
(231,342,0)
(42,107,0)
(385,99,0)
(18,38,0)
(340,164,0)
(247,31,0)
(147,177,0)
(256,192,0)
(341,222,0)
(35,342,0)
(83,293,0)
(67,61,0)
(129,177,0)
(42,348,0)
(379,342,0)
(119,185,0)
(12,116,0)
(20,159,0)
(198,20,0)
(220,318,0)
(69,199,0)
(2,99,0)
(287,342,0)
(307,301,0)
(142,185,0)
(175,114,0)
(313,11,0)
(215,75,0)
(327,37,0)
(48,119,0)
(85,374,0)
(140,177,0)
(201,342,0)
(212,254,0)
(333,97,0)
(62,351,0)
(2,40,0)
(320,38,0)
(211,51,0)
(166,107,0)
(160,279,0)
(181,163,0)
(303,81,0)
(165,149,0)
(67,365,0)
(188,342,0)
(310,128,0)
(118,321,0)
(20,378,0)
(158,342,0)
(240,177,0)
(74,68,0)
(161,305,0)
(382,257,0)
(53,61,0)
(94,298,0)
(226,247,0)
(176,59,0)
(55,157,0)
(353,2,0)
(253,259,0)
(297,371,0)
(27,146,0)
(36,9,0)
(244,147,0)
(285,22,0)
(124,342,0)
(191,177,0)
(253,272,0)
(218,38,0)
(32,322,0)
(15,149,0)
(67,40,0)
(177,342,0)
(225,34,0)
(202,67,0)
(352,171,0)
(308,277,0)
(259,253,0)
(282,81,0)
(99,177,0)
(329,31,0)
(237,9,0)
(214,247,0)
(124,371,0)
(383,342,0)
(208,37,0)
(251,284,0)
(30,34,0)
(302,323,0)
(61,351,0)
(130,282,0)
(82,162,0)
(275,157,0)
(162,178,0)
(355,110,1)
(18,320,1)
(241,93,1)
(259,253,1)
(276,177,1)
(357,229,1)
(365,177,1)
(130,51,1)
(114,175,1)
(223,188,1)
(57,177,1)
(55,96,1)
(2,365,1)
(221,22,1)
(236,336,1)
(36,379,1)
(218,18,1)
(147,177,1)
(167,172,1)
(129,245,1)
(188,366,1)
(165,15,1)
(41,304,1)
(93,326,1)
(4,82,1)
(16,327,1)
(97,333,1)
(103,332,1)
(41,254,1)
(14,59,1)
(365,269,1)
(140,356,1)
(264,159,1)
(303,191,1)
(231,177,1)
(268,213,1)
(290,69,1)
(89,138,1)
(24,151,1)
(175,44,1)
(59,216,1)
(262,177,1)
(372,105,1)
(330,209,1)
(213,30,1)
(351,62,1)
(58,190,1)
(105,145,1)
(42,5,1)
(45,92,1)
(171,75,1)
(57,315,1)
(364,283,1)
(329,247,1)
(178,135,1)
(32,380,1)
(146,27,1)
(6,348,1)
(316,382,1)
(252,152,1)
(196,109,1)
(119,185,1)
(191,141,1)
(42,107,1)
(56,177,1)
(28,21,1)
(293,177,1)
(323,177,1)
(73,11,1)
(129,177,1)
(262,120,1)
(251,284,1)
(98,259,1)
(75,215,1)
(371,273,1)
(168,297,1)
(291,53,1)
(161,114,1)
(228,51,1)
(336,189,1)
(222,341,1)
(174,234,1)
(267,179,1)
(172,282,1)
(21,192,1)
(198,378,1)
(265,7,1)
(67,40,1)
(99,280,1)
(119,48,1)
(15,24,1)
(147,80,1)
(295,345,1)
(247,349,1)
(168,137,1)
(189,153,1)
(69,199,1)
(331,112,1)
(232,278,1)
(102,164,1)
(274,257,1)
(122,113,1)
(356,344,1)
(314,294,1)
(104,213,1)
(192,256,1)
(284,221,1)
(352,171,1)
(59,177,1)
(50,97,1)
(180,205,1)
(30,376,1)
(376,34,1)
(378,140,1)
(255,184,1)
(106,11,1)
(250,352,1)
(319,98,1)
(2,40,1)
(380,250,1)
(212,270,1)
(185,57,1)
(60,41,1)
(300,74,1)
(34,168,1)
(248,331,1)
(249,357,1)
(220,265,1)
(66,54,1)
(304,37,1)
(301,307,1)
(214,144,1)
(179,109,1)
(177,85,1)
(5,107,1)
(359,45,1)
(384,322,1)
(215,156,1)
(170,99,1)
(78,130,1)
(180,259,1)
(212,275,1)
(44,288,1)
(71,286,1)
(281,116,1)
(134,129,1)
(141,78,1)
(150,0,1)
(41,133,1)
(116,12,1)
(278,293,1)
(233,177,1)
(195,370,1)
(306,13,1)
(200,310,1)
(95,180,1)
(146,177,1)
(333,249,1)
(276,361,1)
(293,83,1)
(11,375,1)
(37,208,1)
(90,235,1)
(209,136,1)
(67,202,1)
(67,61,1)
(110,350,1)
(8,171,1)
(164,340,1)
(124,371,1)
(38,282,1)
(120,10,1)
(89,371,1)
(297,206,1)
(160,210,1)
(225,158,1)
(279,160,1)
(327,95,1)
(229,167,1)
(258,36,1)
(51,56,1)
(19,90,1)
(61,291,1)
(271,228,1)
(49,40,1)
(280,385,1)
(307,305,1)
(269,193,1)
(178,242,1)
(86,111,1)
(277,367,1)
(382,119,1)
(188,52,1)
(263,38,1)
(240,177,1)
(386,372,1)
(135,252,1)
(194,122,1)
(244,147,1)
(60,371,1)
(159,20,1)
(190,28,1)
(302,222,1)
(256,362,1)
(116,177,1)
(321,118,1)
(2,61,1)
(41,102,1)
(345,373,1)
(219,330,1)
(166,286,1)
(67,99,1)
(85,374,1)
(253,272,1)
(111,285,1)
(101,170,1)
(167,282,1)
(41,263,1)
(40,177,1)
(156,251,1)
(62,103,1)
(92,351,1)
(199,1,1)
(27,177,1)
(373,159,1)
(56,39,1)
(41,200,1)
(137,297,1)
(360,276,1)
(151,264,1)
(1,117,1)
(254,212,1)
(112,65,1)
(298,94,1)
(107,132,1)
(47,251,1)
(227,74,1)
(344,119,1)
(305,240,1)
(235,268,1)
(346,248,1)
(118,9,1)
(82,69,1)
(352,8,1)
(234,182,1)
(254,371,1)
(286,321,1)
(272,371,1)
(199,363,1)
(179,134,1)
(132,371,1)
(338,303,1)
(288,365,1)
(188,364,1)
(13,32,1)
(108,338,1)
(315,142,1)
(354,238,1)
(7,104,1)
(289,166,1)
(52,355,1)
(191,259,1)
(233,334,1)
(153,181,1)
(81,58,1)
(136,71,1)
(324,47,1)
(320,229,1)
(180,177,1)
(243,49,1)
(81,194,1)
(283,267,1)
(126,161,1)
(54,143,1)
(237,258,1)
(205,319,1)
(270,371,1)
(41,274,1)
(48,43,1)
(321,9,1)
(366,220,1)
(323,302,1)
(375,313,1)
(12,231,1)
(169,218,1)
(22,86,1)
(332,61,1)
(182,233,1)
(191,177,1)
(109,89,1)
(326,298,1)
(65,3,1)
(363,4,1)
(3,317,1)
(193,101,1)
(189,181,1)
(203,354,1)
(68,50,1)
(216,176,1)
(184,146,1)
(62,244,1)
(96,100,1)
(310,66,1)
(142,95,1)
(152,72,1)
(113,14,1)
(138,60,1)
(206,225,1)
(362,177,1)
(125,262,1)
(28,192,1)
(143,146,1)
(270,368,1)
(125,329,1)
(335,360,1)
(317,196,1)
(208,16,1)
(144,301,1)
(117,277,1)
(333,371,1)
(308,135,1)
(231,125,1)
(367,308,1)
(341,359,1)
(202,386,1)
(348,42,1)
(273,173,1)
(2,233,1)
(325,6,1)
(299,295,1)
(30,34,1)
(292,241,1)
(361,174,1)
(0,371,1)
(74,68,1)
(212,219,1)
(75,371,1)
(322,306,1)
(67,365,1)
(68,97,1)
(294,223,1)
(83,346,1)
(80,70,1)
(39,211,1)
(64,324,1)
(253,343,1)
(299,177,1)
(282,81,1)
(72,150,1)
(272,243,1)
(353,67,1)
(353,2,1)
(10,292,1)
(122,14,1)
(162,178,1)
(313,82,1)
(257,296,1)
(9,237,1)
(2,99,1)
(20,378,1)
(340,17,1)
(242,290,1)
(82,162,1)
(20,198,1)
(301,305,1)
(53,244,1)
(81,191,1)
(41,165,1)
(11,135,1)
(211,336,1)
(379,177,1)
(238,64,1)
(181,163,1)
(275,55,1)
(140,177,1)
(197,59,1)
(296,316,1)
(176,58,1)
(70,261,1)
(370,312,1)
(17,227,1)
(14,197,1)
(284,22,1)
(349,226,1)
(285,348,1)
(86,371,1)
(362,108,1)
(19,371,1)
(350,73,1)
(132,289,1)
(379,300,1)
(267,371,1)
(163,299,1)
(240,126,1)
(133,279,1)
(230,144,1)
(385,323,1)
(100,325,1)
(334,232,1)
(124,281,1)
(368,203,1)
(368,124,1)
(192,362,1)
(2,217,1)
(145,298,1)
(38,369,1)
(94,230,1)
(114,177,1)
(99,177,1)
(369,169,1)
(312,271,1)
(368,384,1)
(58,79,1)
(297,371,1)
(226,214,1)
(237,177,1)
(41,195,1)
(261,250,1)
(40,255,1)
(210,236,1)
(217,314,1)
(158,106,1)
(43,185,1)
(85,19,1)
(245,335,1)
(250,251,2)
(283,159,2)
(217,286,2)
(179,286,2)
(299,159,2)
(365,250,2)
(36,74,2)
(11,135,2)
(269,250,2)
(40,177,2)
(14,51,2)
(60,95,2)
(45,250,2)
(294,119,2)
(294,298,2)
(188,95,2)
(124,298,2)
(95,180,2)
(229,51,2)
(74,229,2)
(223,298,2)
(223,119,2)
(324,251,2)
(336,189,2)
(48,95,2)
(179,298,2)
(105,298,2)
(68,97,2)
(41,250,2)
(294,286,2)
(262,177,2)
(364,74,2)
(314,213,2)
(217,74,2)
(92,250,2)
(267,250,2)
(210,336,2)
(163,159,2)
(118,74,2)
(281,298,2)
(223,286,2)
(161,250,2)
(60,229,2)
(212,286,2)
(188,51,2)
(60,336,2)
(140,177,2)
(60,371,2)
(331,109,2)
(10,298,2)
(223,146,2)
(114,250,2)
(2,146,2)
(8,251,2)
(267,348,2)
(179,146,2)
(276,109,2)
(60,146,2)
(185,95,2)
(142,95,2)
(14,59,2)
(179,229,2)
(302,250,2)
(15,159,2)
(283,51,2)
(101,250,2)
(162,69,2)
(254,251,2)
(223,95,2)
(181,163,2)
(380,250,2)
(21,51,2)
(184,146,2)
(138,144,2)
(288,250,2)
(41,298,2)
(60,298,2)
(97,333,2)
(60,119,2)
(314,146,2)
(258,74,2)
(124,371,2)
(294,146,2)
(60,286,2)
(89,144,2)
(19,213,2)
(41,251,2)
(268,213,2)
(353,2,2)
(27,213,2)
(351,62,2)
(109,250,2)
(362,177,2)
(12,144,2)
(282,81,2)
(323,177,2)
(290,69,2)
(98,146,2)
(368,251,2)
(314,11,2)
(215,251,2)
(212,348,2)
(122,14,2)
(314,286,2)
(143,146,2)
(60,251,2)
(283,119,2)
(214,144,2)
(2,250,2)
(175,250,2)
(237,74,2)
(297,371,2)
(146,213,2)
(167,282,2)
(89,95,2)
(270,298,2)
(270,251,2)
(223,229,2)
(280,250,2)
(60,250,2)
(56,177,2)
(68,229,2)
(217,348,2)
(159,20,2)
(9,237,2)
(294,336,2)
(236,336,2)
(69,199,2)
(294,95,2)
(299,177,2)
(307,250,2)
(138,298,2)
(219,286,2)
(267,95,2)
(138,286,2)
(85,213,2)
(249,229,2)
(160,336,2)
(138,336,2)
(202,298,2)
(293,177,2)
(132,286,2)
(167,51,2)
(212,298,2)
(220,213,2)
(373,159,2)
(235,213,2)
(195,51,2)
(73,11,2)
(67,365,2)
(2,51,2)
(267,336,2)
(151,159,2)
(294,213,2)
(2,99,2)
(254,250,2)
(66,146,2)
(205,146,2)
(13,250,2)
(112,109,2)
(223,250,2)
(364,95,2)
(272,371,2)
(216,51,2)
(106,11,2)
(41,348,2)
(62,250,2)
(180,177,2)
(22,86,2)
(310,146,2)
(156,251,2)
(255,146,2)
(322,250,2)
(2,348,2)
(350,11,2)
(346,109,2)
(348,42,2)
(333,229,2)
(267,51,2)
(314,251,2)
(364,250,2)
(221,348,2)
(231,144,2)
(51,56,2)
(357,229,2)
(89,251,2)
(270,371,2)
(60,348,2)
(2,95,2)
(217,51,2)
(193,250,2)
(54,146,2)
(314,159,2)
(130,51,2)
(225,11,2)
(129,109,2)
(267,229,2)
(194,51,2)
(39,336,2)
(379,74,2)
(82,82,2)
(89,119,2)
(138,251,2)
(352,171,2)
(286,74,2)
(217,95,2)
(169,229,2)
(385,250,2)
(289,286,2)
(314,119,2)
(44,250,2)
(206,11,2)
(2,40,2)
(174,109,2)
(162,178,2)
(170,250,2)
(192,362,2)
(304,95,2)
(254,371,2)
(283,267,2)
(353,67,2)
(217,336,2)
(314,250,2)
(209,286,2)
(248,109,2)
(109,336,2)
(314,348,2)
(163,299,2)
(217,144,2)
(244,147,2)
(81,194,2)
(286,321,2)
(223,159,2)
(3,109,2)
(93,298,2)
(212,144,2)
(38,229,2)
(188,119,2)
(370,51,2)
(41,229,2)
(297,11,2)
(283,146,2)
(12,298,2)
(200,146,2)
(60,51,2)
(136,286,2)
(178,135,2)
(119,185,2)
(223,336,2)
(109,51,2)
(159,119,2)
(89,371,2)
(317,109,2)
(338,51,2)
(265,213,2)
(120,298,2)
(226,144,2)
(364,348,2)
(138,348,2)
(293,109,2)
(314,95,2)
(196,109,2)
(208,95,2)
(81,191,2)
(223,348,2)
(64,251,2)
(212,250,2)
(96,348,2)
(314,298,2)
(179,336,2)
(384,250,2)
(41,95,2)
(109,159,2)
(315,95,2)
(56,336,2)
(218,229,2)
(244,250,2)
(67,40,2)
(267,371,2)
(24,159,2)
(217,159,2)
(82,162,2)
(303,51,2)
(194,122,2)
(57,177,2)
(231,177,2)
(158,11,2)
(42,107,2)
(109,286,2)
(172,51,2)
(55,348,2)
(365,177,2)
(198,119,2)
(16,95,2)
(366,213,2)
(314,336,2)
(314,51,2)
(359,250,2)
(190,51,2)
(222,341,2)
(109,298,2)
(233,177,2)
(364,51,2)
(254,144,2)
(4,82,2)
(129,177,2)
(2,336,2)
(103,250,2)
(238,251,2)
(140,119,2)
(250,352,2)
(188,229,2)
(171,251,2)
(99,177,2)
(188,144,2)
(181,159,2)
(294,251,2)
(334,109,2)
(41,286,2)
(259,146,2)
(165,159,2)
(254,298,2)
(267,298,2)
(217,213,2)
(70,250,2)
(211,336,2)
(364,336,2)
(378,140,2)
(17,74,2)
(179,250,2)
(110,11,2)
(189,159,2)
(40,146,2)
(107,132,2)
(301,305,2)
(18,229,2)
(364,144,2)
(41,119,2)
(330,286,2)
(89,229,2)
(253,343,2)
(253,272,2)
(6,348,2)
(61,250,2)
(125,144,2)
(2,61,2)
(138,159,2)
(60,74,2)
(232,109,2)
(301,250,2)
(341,359,2)
(34,168,2)
(230,144,2)
(102,74,2)
(217,229,2)
(58,190,2)
(264,159,2)
(138,146,2)
(89,286,2)
(344,119,2)
(119,95,2)
(188,286,2)
(179,348,2)
(368,298,2)
(138,119,2)
(138,95,2)
(89,159,2)
(363,82,2)
(177,213,2)
(192,51,2)
(188,213,2)
(51,336,2)
(75,251,2)
(28,51,2)
(335,109,2)
(59,177,2)
(360,109,2)
(2,229,2)
(312,51,2)
(109,119,2)
(109,144,2)
(180,259,2)
(329,144,2)
(179,119,2)
(364,119,2)
(213,11,2)
(326,298,2)
(60,144,2)
(241,298,2)
(188,250,2)
(314,144,2)
(213,30,2)
(284,348,2)
(251,284,2)
(256,51,2)
(291,250,2)
(263,229,2)
(212,251,2)
(109,229,2)
(285,348,2)
(294,11,2)
(361,109,2)
(2,233,2)
(341,250,2)
(2,159,2)
(362,51,2)
(22,348,2)
(86,348,2)
(109,251,2)
(298,144,2)
(278,293,2)
(153,159,2)
(30,11,2)
(85,374,2)
(364,146,2)
(166,286,2)
(89,348,2)
(177,85,2)
(57,95,2)
(146,177,2)
(188,146,2)
(191,259,2)
(176,51,2)
(168,297,2)
(351,250,2)
(67,298,2)
(217,251,2)
(243,146,2)
(188,298,2)
(52,11,2)
(89,298,2)
(386,298,2)
(281,144,2)
(109,74,2)
(278,109,2)
(97,229,2)
(279,336,2)
(188,251,2)
(283,144,2)
(275,348,2)
(2,365,2)
(168,11,2)
(348,286,2)
(274,119,2)
(229,167,2)
(267,146,2)
(251,348,2)
(185,57,2)
(234,109,2)
(283,286,2)
(5,286,2)
(75,371,2)
(305,250,2)
(262,298,2)
(254,286,2)
(50,229,2)
(352,251,2)
(190,28,2)
(364,286,2)
(95,146,2)
(292,298,2)
(100,348,2)
(283,298,2)
(2,286,2)
(305,240,2)
(138,229,2)
(41,74,2)
(295,159,2)
(132,371,2)
(294,144,2)
(30,34,2)
(188,74,2)
(217,11,2)
(325,348,2)
(327,95,2)
(60,159,2)
(144,250,2)
(267,74,2)
(283,95,2)
(197,51,2)
(191,177,2)
(141,51,2)
(379,177,2)
(223,51,2)
(257,119,2)
(134,109,2)
(179,51,2)
(320,229,2)
(368,250,2)
(283,250,2)
(144,301,2)
(67,99,2)
(254,348,2)
(217,146,2)
(32,250,2)
(85,19,2)
(276,177,2)
(2,298,2)
(74,68,2)
(179,74,2)
(41,144,2)
(41,51,2)
(294,348,2)
(231,298,2)
(7,213,2)
(217,298,2)
(34,11,2)
(124,144,2)
(81,58,2)
(188,11,2)
(369,229,2)
(188,336,2)
(271,51,2)
(2,11,2)
(294,51,2)
(2,119,2)
(333,371,2)
(237,177,2)
(62,244,2)
(360,276,2)
(82,69,2)
(41,336,2)
(116,298,2)
(319,146,2)
(180,146,2)
(2,74,2)
(247,144,2)
(71,286,2)
(378,119,2)
(137,11,2)
(217,119,2)
(78,51,2)
(114,177,2)
(20,378,2)
(340,74,2)
(267,286,2)
(345,159,2)
(332,250,2)
(69,82,2)
(240,250,2)
(109,146,2)
(283,348,2)
(372,298,2)
(242,69,2)
(336,159,2)
(111,348,2)
(89,74,2)
(283,251,2)
(122,51,2)
(270,144,2)
(223,11,2)
(80,250,2)
(147,250,2)
(37,95,2)
(116,144,2)
(321,9,2)
(20,119,2)
(296,119,2)
(138,51,2)
(223,74,2)
(2,144,2)
(53,250,2)
(99,250,2)
(354,251,2)
(355,11,2)
(43,95,2)
(67,61,2)
(259,253,2)
(104,213,2)
(282,51,2)
(189,181,2)
(270,250,2)
(47,251,2)
(116,177,2)
(134,129,2)
(90,213,2)
(217,250,2)
(349,144,2)
(314,74,2)
(240,177,2)
(145,298,2)
(89,146,2)
(283,336,2)
(272,146,2)
(179,144,2)
(49,146,2)
(19,371,2)
(223,251,2)
(382,119,2)
(223,144,2)
(253,146,2)
(223,213,2)
(300,74,2)
(316,119,2)
(3,317,2)
(321,74,2)
(109,95,2)
(125,298,2)
(41,146,2)
(188,348,2)
(109,348,2)
(267,251,2)
(138,250,2)
(147,177,2)
(94,144,2)
(108,51,2)
(368,144,2)
(227,74,2)
(233,109,2)
(89,336,2)
(294,74,2)
(59,51,2)
(188,159,2)
(364,229,2)
(323,250,2)
(191,51,2)
(65,109,2)
(42,286,2)
(199,82,2)
(267,119,2)
(38,282,2)
(83,109,2)
(356,119,2)
(113,51,2)
(179,251,2)
(28,192,2)
(376,11,2)
(138,74,2)
(126,250,2)
(9,74,2)
(267,159,2)
(81,51,2)
(364,159,2)
(179,95,2)
(178,69,2)
(89,51,2)
(228,51,2)
(182,109,2)
(171,75,2)
(203,251,2)
(222,250,2)
(2,251,2)
(364,298,2)
(306,250,2)
(2,213,2)
(41,159,2)
(179,159,2)
(133,336,2)
(107,286,2)
(294,250,2)
(58,79,2)
(267,144,2)
(284,22,2)
(245,109,2)
(294,159,2)
(58,51,2)
(89,250,2)
(283,74,2)
(283,229,2)
(294,229,2)
(364,251,2)
(86,371,2)
(261,250,2)
(164,74,2)
(314,229,2)
-----------------------------------
(0,pHddCtx)
(1,hdd_prevent_suspend()
(2,return -EPERM;)
(3,unregister_netdevice_notifier(&hdd_netdev_notifier)
(4,1000)
(5,vosStatus)
(6,VOS_MODULE_ID_VOSS)
(7,"%s: vos_open failed")
(8,vosStatus)
(9,vosStatus = hdd_post_voss_start_config( pHddCtx )
(10,goto err_unregister_pmops;)
(11,max_retries >= 5)
(12,pHddCtx)
(13,"%s: Failed to start TL")
(14,pHddCtx->cfg_ini->intfMacAddr)
(15,hddLog(VOS_TRACE_LEVEL_FATAL, "%s: hdd_wmm_init failed", __func__)
(16,"%s: HAL context is null")
(17,"%s: vos_start failed")
(18,"%s: Failed to set MAC Address. "\n\\n            "HALStatus is %08d [x%08x]")
(19,vos_get_context(VOS_MODULE_ID_HDD, pVosContext)
(20,VOS_IS_STATUS_SUCCESS( vosStatus )
(21,0)
(22,vosStatus = BSL_Init(pVosContext)
(23,if (req_riva_power_on_lock("wlan")
(24,__func__)
(25,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(26,err_re_init:)
(27,pHddCtx)
(28,pHddCtx->cfg_ini->intfMacAddr[0])
(29,)
(30,VOS_IS_STATUS_SUCCESS(vosStatus)
(31,)
(32,VOS_TRACE_LEVEL_ERROR)
(33,)
(34,vosStatus = vos_open(&pVosContext, 0)
(35,pVosContext)
(36,vosStatus)
(37,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HAL context is null",__func__)
(38,hddLog(VOS_TRACE_LEVEL_ERROR,"%s: Failed to set MAC Address. "\n\\n            "HALStatus is %08d [x%08x]",__func__, halStatus, halStatus)
(39,pHddCtx)
(40,pHddCtx->hHal)
(41,pVosContext)
(42,VOS_IS_STATUS_SUCCESS(vosStatus)
(43,VOS_STATUS_SUCCESS)
(44,pHddCtx->hdd_mcastbcast_filter_set = FALSE)
(45,btAmpConfig)
(46,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(47,VOS_MODULE_ID_VOSS)
(48,vosStatus)
(49,VOS_MODULE_ID_SME)
(50,vosStatus)
(51,FALSE == hdd_update_config_dat(pHddCtx)
(52,goto err_re_init;)
(53,btAmpConfig)
(54,"%s: HDD context is Null")
(55,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n        "%s: Failed to open BAP",__func__)
(56,hdd_update_config_dat(pHddCtx)
(57,hdd_set_sme_config(pHddCtx)
(58,(v_U8_t *)
(59,pHddCtx->cfg_ini)
(60,vos_close(pVosContext)
(61,btAmpConfig.ucPreferredChannel)
(62,pConfig->preferredChannel)
(63,err_bap_close:)
(64,"%s: Failed to Init BSL")
(65,WLAN_MODULE_DOWN_IND)
(66,__func__)
(67,return VOS_STATUS_SUCCESS;)
(68,VOS_IS_STATUS_SUCCESS( vosStatus )
(69,!wcnss_device_ready()
(70,pHddCtx)
(71,VOS_TRACE_LEVEL_FATAL)
(72,*pHddCtx = NULL)
(73,VOS_TRACE_LEVEL_FATAL)
(74,!VOS_IS_STATUS_SUCCESS( vosStatus )
(75,WLANBAP_Start(pVosContext)
(76,err_bap_stop:)
(77,success:)
(78,pHddCtx)
(79,v_U8_t *)
(80,cfg_ini)
(81,cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,\n\\n         (v_U8_t *)
(82,!wcnss_device_ready()
(83,cfg_ini)
(84,err_unregister_pmops:)
(85,(hdd_context_t *)
(86,BSL_Init(pVosContext)
(87,)
(88,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(89,vos_sched_close(pVosContext)
(90,pVosContext)
(91,)
(92,vosStatus)
(93,"%s: req riva power on lock failed")
(94,"wlan")
(95,NULL == pHddCtx->hHal)
(96,__func__)
(97,vosStatus = vos_start( pVosContext )
(98,NULL)
(99,pHddCtx->isLogpInProgress)
(100,"%s: Failed to open BAP")
(101,pHddCtx->isLogpInProgress = FALSE)
(102,goto err_vosclose;)
(103,preferredChannel)
(104,VOS_TRACE_LEVEL_FATAL)
(105,WLAN_MODULE_DOWN_IND)
(106,0)
(107,vosStatus = WLANBAP_Open(pVosContext)
(108,cfg_ini)
(109,pHddCtx)
(110,__func__)
(111,pVosContext)
(112,0)
(113,0)
(114,hdd_register_mcast_bcast_filter(pHddCtx)
(115,)
(116,hdd_close_all_adapters(pHddCtx)
(117,hdd_ssr_timer_del()
(118,vosStatus)
(119,VOS_STATUS_SUCCESS != vosStatus)
(120,pHddCtx)
(121,if ( VOS_STATUS_SUCCESS != vosStatus )
(122,pHddCtx->cfg_ini->intfMacAddr[0])
(123,if ( NULL == pHddCtx->hHal )
(124,WLANBAP_Stop(pVosContext)
(125,pHddCtx)
(126,pHddCtx)
(127,max_retries)
(128,)
(129,pHddCtx->wiphy)
(130,halStatus)
(131,)
(132,WLANBAP_Open(pVosContext)
(133,goto err_vosclose;)
(134,wiphy_free(pHddCtx->wiphy)
(135,max_retries = 0)
(136,"%s: hdd_post_voss_start_config failed")
(137,0)
(138,pVosContext)
(139,)
(140,hdd_wmm_init(pHddCtx)
(141,hHal)
(142,vosStatus)
(143,VOS_TRACE_LEVEL_FATAL)
(144,!VOS_IS_STATUS_SUCCESS( vosStatus )
(145,goto success;)
(146,!pHddCtx)
(147,pHddCtx->cfg_ini)
(148,if(!VOS_IS_STATUS_SUCCESS(vosStatus)
(149,)
(150,NULL)
(151,"%s: hdd_wmm_init failed")
(152,max_retries)
(153,vosStatus)
(154,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(155,)
(156,vosStatus)
(157,)
(158,hdd_set_conparam(0)
(159,!VOS_IS_STATUS_SUCCESS( vosStatus )
(160,__func__)
(161,vosStatus)
(162,5 >= ++max_retries)
(163,vos_preStart( pHddCtx->pvosContext )
(164,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_start failed",__func__)
(165,goto err_vosclose;)
(166,vosStatus)
(167,HAL_STATUS_SUCCESS(halStatus)
(168,vos_open(&pVosContext, 0)
(169,halStatus)
(170,FALSE)
(171,vosStatus = WLANBAP_Start(pVosContext)
(172,halStatus)
(173,pVosContext)
(174,pHddCtx)
(175,pHddCtx)
(176,pHddCtx)
(177,pHddCtx = (hdd_context_t *)
(178,++max_retries)
(179,pVosContext)
(180,pHddCtx->hHal)
(181,vosStatus = vos_preStart( pHddCtx->pvosContext )
(182,NULL)
(183,pHddCtx)
(184,pHddCtx)
(185,vosStatus = hdd_set_sme_config(pHddCtx)
(186,halStatus)
(187,if ( !VOS_IS_STATUS_SUCCESS( vosStatus )
(188,hdd_allow_suspend()
(189,VOS_IS_STATUS_SUCCESS( vosStatus )
(190,&pHddCtx->cfg_ini->intfMacAddr[0])
(191,pHddCtx->hHal)
(192,pHddCtx->cfg_ini->intfMacAddr)
(193,pHddCtx)
(194,sizeof(pHddCtx->cfg_ini->intfMacAddr[0])
(195,goto err_vosclose;)
(196,hdd_netdev_notifier)
(197,intfMacAddr)
(198,vosStatus)
(199,wcnss_device_ready()
(200,goto err_vosclose;)
(201,if (max_retries >= 5)
(202,VOS_STATUS_SUCCESS)
(203,goto err_bap_close;)
(204,btAmpConfig)
(205,hHal)
(206,pVosContext)
(207,pConfig)
(208,__func__)
(209,__func__)
(210,"%s: vos_preStart failed")
(211,FALSE)
(212,pVosContext)
(213,!VOS_IS_STATUS_SUCCESS(vosStatus)
(214,VOS_TRACE_LEVEL_FATAL)
(215,pVosContext)
(216,cfg_ini)
(217,-EPERM)
(218,__func__)
(219,goto err_vosstop;)
(220,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_open failed",__func__)
(221,vosStatus)
(222,vosStatus = WLANBAP_SetConfig(&btAmpConfig)
(223,0)
(224,)
(225,vosStatus)
(226,"%s: hddRegisterPmOps failed")
(227,VOS_TRACE_LEVEL_FATAL)
(228,VOS_TRACE_LEVEL_FATAL)
(229,!HAL_STATUS_SUCCESS(halStatus)
(230,hdd_allow_suspend()
(231,hdd_unregister_mcast_bcast_filter(pHddCtx)
(232,pHddCtx)
(233,pHddCtx->cfg_ini)
(234,pHddCtx->cfg_ini= NULL)
(235,VOS_MODULE_ID_HDD)
(236,VOS_TRACE_LEVEL_FATAL)
(237,hdd_post_voss_start_config( pHddCtx )
(238,__func__)
(239,)
(240,hddRegisterPmOps(pHddCtx)
(241,__func__)
(242,max_retries)
(243,pVosContext)
(244,pConfig = pHddCtx->cfg_ini)
(245,wiphy)
(246,)
(247,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hddRegisterPmOps failed",__func__)
(248,nl_srv_exit()
(249,pVosContext)
(250,!VOS_IS_STATUS_SUCCESS(vosStatus)
(251,!VOS_IS_STATUS_SUCCESS(vosStatus)
(252,0)
(253,(tHalHandle)
(254,vos_stop(pVosContext)
(255,hHal)
(256,intfMacAddr)
(257,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: Failed hdd_set_sme_config",__func__)
(258,pHddCtx)
(259,pHddCtx->hHal = (tHalHandle)
(260,if (!VOS_IS_STATUS_SUCCESS(vosStatus)
(261,pConfig)
(262,hddDeregisterPmOps(pHddCtx)
(263,goto err_vosclose;)
(264,VOS_TRACE_LEVEL_FATAL)
(265,__func__)
(266,if(!VOS_IS_STATUS_SUCCESS(vosStatus)
(267,&pVosContext)
(268,pHddCtx)
(269,hdd_mcastbcast_filter_set)
(270,WLANBAP_Close(pVosContext)
(271,"%s: config update failed")
(272,vos_get_context( VOS_MODULE_ID_SME, pVosContext )
(273,NULL)
(274,goto err_vosclose;)
(275,goto err_vosstop;)
(276,pHddCtx->wiphy)
(277,*pConfig = NULL)
(278,kfree(pHddCtx->cfg_ini)
(279,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: vos_preStart failed",__func__)
(280,isLogpInProgress)
(281,pVosContext)
(282,halStatus = cfgSetStr(pHddCtx->hHal, WNI_CFG_STA_ID,\n\\n         (v_U8_t *)
(283,vos_preClose(&pVosContext)
(284,VOS_IS_STATUS_SUCCESS(vosStatus)
(285,vosStatus)
(286,!VOS_IS_STATUS_SUCCESS( vosStatus )
(287,if (pHddCtx)
(288,FALSE)
(289,pVosContext)
(290,5)
(291,ucPreferredChannel)
(292,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: req riva power on lock failed",\n\\n                                        __func__)
(293,pHddCtx->cfg_ini)
(294,VOS_BUG(0)
(295,pvosContext)
(296,__func__)
(297,&pVosContext)
(298,req_riva_power_on_lock("wlan")
(299,pHddCtx->pvosContext)
(300,pHddCtx)
(301,VOS_IS_STATUS_SUCCESS( vosStatus )
(302,pHddCtx)
(303,WNI_CFG_STA_ID)
(304,goto err_vosclose;)
(305,vosStatus = hddRegisterPmOps(pHddCtx)
(306,__func__)
(307,vosStatus)
(308,pConfig)
(309,err_vosclose:)
(310,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: HDD context is Null",__func__)
(311,while (!wcnss_device_ready()
(312,__func__)
(313,max_retries)
(314,EPERM)
(315,pHddCtx)
(316,"%s: Failed hdd_set_sme_config")
(317,&hdd_netdev_notifier)
(318,)
(319,pHddCtx)
(320,VOS_TRACE_LEVEL_ERROR)
(321,VOS_IS_STATUS_SUCCESS( vosStatus )
(322,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n               "%s: Failed to start TL",__func__)
(323,hdd_start_all_adapters(pHddCtx)
(324,VOS_TRACE_LEVEL_ERROR)
(325,VOS_TRACE_LEVEL_ERROR)
(326,VOS_TRACE_LEVEL_FATAL)
(327,VOS_TRACE_LEVEL_FATAL)
(328,if (!VOS_IS_STATUS_SUCCESS(vosStatus)
(329,goto err_bap_stop;)
(330,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: hdd_post_voss_start_config failed",\n\\n         __func__)
(331,send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0)
(332,pConfig)
(333,vos_start( pVosContext )
(334,cfg_ini)
(335,pHddCtx)
(336,!VOS_IS_STATUS_SUCCESS( vosStatus )
(337,)
(338,pHddCtx)
(339,if(!pHddCtx)
(340,__func__)
(341,WLANBAP_SetConfig(&btAmpConfig)
(342,)
(343,tHalHandle)
(344,vosStatus)
(345,pHddCtx)
(346,pHddCtx)
(347,err_vosstop:)
(348,!VOS_IS_STATUS_SUCCESS(vosStatus)
(349,__func__)
(350,"%s: WCNSS driver not ready")
(351,btAmpConfig.ucPreferredChannel = pConfig->preferredChannel)
(352,VOS_IS_STATUS_SUCCESS(vosStatus)
(353,RET)
(354,VOS_TRACE( VOS_MODULE_ID_VOSS, VOS_TRACE_LEVEL_ERROR,\n\\n        "%s: Failed to Init BSL",__func__)
(355,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: WCNSS driver not ready", __func__)
(356,pHddCtx)
(357,vosStatus)
(358,if (!HAL_STATUS_SUCCESS(halStatus)
(359,&btAmpConfig)
(360,wiphy_unregister(pHddCtx->wiphy)
(361,wiphy)
(362,pHddCtx->cfg_ini)
(363,msleep(1000)
(364,vos_mem_exit()
(365,pHddCtx->hdd_mcastbcast_filter_set)
(366,goto err_re_init;)
(367,NULL)
(368,pVosContext)
(369,halStatus)
(370,hddLog(VOS_TRACE_LEVEL_FATAL,"%s: config update failed",__func__ )
(371,pVosContext = NULL)
(372,0)
(373,vosStatus)
(374,hdd_context_t *)
(375,5)
(376,vosStatus)
(377,)
(378,vosStatus = hdd_wmm_init(pHddCtx)
(379,hdd_exchange_version_and_caps(pHddCtx)
(380,VOS_MODULE_ID_VOSS)
(381,if (FALSE == hdd_update_config_dat(pHddCtx)
(382,VOS_TRACE_LEVEL_FATAL)
(383,vosStatus)
(384,goto err_bap_close;)
(385,pHddCtx)
(386,send_btc_nlink_msg(WLAN_MODULE_DOWN_IND, 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^