-----label-----
1
-----code-----
static int calibrate_8916(struct tsens_priv *priv)
{
	int base0 = 0, base1 = 0, i;
	u32 p1[5], p2[5];
	int mode = 0;
	u32 *qfprom_cdata, *qfprom_csel;

	qfprom_cdata = (u32 *)qfprom_read(priv->dev, "calib");
	if (IS_ERR(qfprom_cdata))
		return PTR_ERR(qfprom_cdata);

	qfprom_csel = (u32 *)qfprom_read(priv->dev, "calib_sel");
	if (IS_ERR(qfprom_csel)) {
		kfree(qfprom_cdata);
		return PTR_ERR(qfprom_csel);
	}

	mode = (qfprom_csel[0] & MSM8916_CAL_SEL_MASK) >> MSM8916_CAL_SEL_SHIFT;
	dev_dbg(priv->dev, "calibration mode is %d\n", mode);

	switch (mode) {
	case TWO_PT_CALIB:
		base1 = (qfprom_cdata[1] & MSM8916_BASE1_MASK) >> MSM8916_BASE1_SHIFT;
		p2[0] = (qfprom_cdata[0] & MSM8916_S0_P2_MASK) >> MSM8916_S0_P2_SHIFT;
		p2[1] = (qfprom_cdata[0] & MSM8916_S1_P2_MASK) >> MSM8916_S1_P2_SHIFT;
		p2[2] = (qfprom_cdata[1] & MSM8916_S2_P2_MASK) >> MSM8916_S2_P2_SHIFT;
		p2[3] = (qfprom_cdata[1] & MSM8916_S3_P2_MASK) >> MSM8916_S3_P2_SHIFT;
		p2[4] = (qfprom_cdata[1] & MSM8916_S4_P2_MASK) >> MSM8916_S4_P2_SHIFT;
		for (i = 0; i < priv->num_sensors; i++)
			p2[i] = ((base1 + p2[i]) << 3);
		/* Fall through */
	case ONE_PT_CALIB2:
		base0 = (qfprom_cdata[0] & MSM8916_BASE0_MASK);
		p1[0] = (qfprom_cdata[0] & MSM8916_S0_P1_MASK) >> MSM8916_S0_P1_SHIFT;
		p1[1] = (qfprom_cdata[0] & MSM8916_S1_P1_MASK) >> MSM8916_S1_P1_SHIFT;
		p1[2] = (qfprom_cdata[0] & MSM8916_S2_P1_MASK) >> MSM8916_S2_P1_SHIFT;
		p1[3] = (qfprom_cdata[1] & MSM8916_S3_P1_MASK) >> MSM8916_S3_P1_SHIFT;
		p1[4] = (qfprom_cdata[1] & MSM8916_S4_P1_MASK) >> MSM8916_S4_P1_SHIFT;
		for (i = 0; i < priv->num_sensors; i++)
			p1[i] = (((base0) + p1[i]) << 3);
		break;
	default:
		for (i = 0; i < priv->num_sensors; i++) {
			p1[i] = 500;
			p2[i] = 780;
		}
		break;
	}

	compute_intercept_slope(priv, p1, p2, mode);
	kfree(qfprom_cdata);
	kfree(qfprom_csel);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
12,13
13,14
13,15
13,16
13,17
15,16
15,17
17,18
19,20
19,21
21,22
23,24
25,26
26,27
26,28
26,29
27,28
29,30
29,31
31,32
33,34
33,35
35,36
37,38
38,39
38,40
40,41
40,42
42,43
44,45
45,46
45,47
45,48
46,47
48,49
48,50
51,52
51,53
54,55
55,56
55,57
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
64,66
64,67
65,66
67,68
67,69
68,69
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
79,81
80,81
82,83
84,85
85,86
85,87
86,87
88,89
88,90
89,90
89,91
90,91
92,93
94,95
94,96
94,97
95,96
97,98
97,99
98,99
102,103
102,104
103,104
103,105
104,105
106,107
108,109
108,110
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
121,122
122,123
122,124
123,124
125,126
125,127
126,127
127,128
127,129
128,129
128,130
129,130
132,133
134,135
136,137
137,138
137,139
137,140
137,141
138,139
140,141
140,142
141,142
145,146
147,148
147,149
148,149
150,151
150,152
150,153
150,154
150,155
150,156
150,157
150,158
150,159
150,160
150,161
150,162
150,163
150,164
150,165
150,166
150,167
150,168
150,169
150,170
151,152
152,153
154,155
155,156
155,157
156,157
158,159
158,160
159,160
160,161
160,162
161,162
161,163
162,163
165,166
167,168
169,170
170,171
170,172
171,172
171,173
172,173
175,176
175,177
176,177
177,178
177,179
178,179
178,180
179,180
182,183
184,185
186,187
187,188
187,189
188,189
188,190
189,190
192,193
192,194
193,194
194,195
194,196
195,196
195,197
196,197
199,200
201,202
203,204
204,205
204,206
205,206
205,207
206,207
209,210
209,211
210,211
211,212
211,213
212,213
212,214
213,214
216,217
218,219
220,221
221,222
221,223
222,223
222,224
223,224
226,227
226,228
227,228
228,229
228,230
229,230
229,231
230,231
233,234
235,236
237,238
238,239
238,240
239,240
239,241
240,241
243,244
243,245
244,245
245,246
245,247
246,247
246,248
247,248
250,251
252,253
254,255
254,256
254,257
254,258
255,256
256,257
256,258
257,258
260,261
260,262
261,262
263,264
263,265
264,265
267,268
268,269
270,271
271,272
271,273
272,273
272,274
273,274
275,276
277,278
278,279
278,280
279,280
280,281
280,282
281,282
283,284
283,285
284,285
286,287
289,290
290,291
292,293
293,294
293,295
294,295
296,297
297,298
297,299
298,299
298,300
299,300
302,303
304,305
305,306
305,307
306,307
306,308
307,308
310,311
310,312
311,312
312,313
312,314
313,314
313,315
314,315
317,318
319,320
321,322
322,323
322,324
323,324
323,325
324,325
327,328
327,329
328,329
329,330
329,331
330,331
330,332
331,332
334,335
336,337
338,339
339,340
339,341
340,341
340,342
341,342
344,345
344,346
345,346
346,347
346,348
347,348
347,349
348,349
351,352
353,354
355,356
356,357
356,358
357,358
357,359
358,359
361,362
361,363
362,363
363,364
363,365
364,365
364,366
365,366
368,369
370,371
372,373
373,374
373,375
374,375
374,376
375,376
378,379
378,380
379,380
380,381
380,382
381,382
381,383
382,383
385,386
387,388
389,390
389,391
389,392
389,393
390,391
391,392
391,393
392,393
395,396
395,397
396,397
398,399
398,400
399,400
402,403
403,404
405,406
406,407
406,408
407,408
407,409
408,409
410,411
412,413
413,414
413,415
414,415
415,416
415,417
416,417
417,418
419,420
419,421
420,421
422,423
427,428
427,429
427,430
427,431
428,429
429,430
429,431
430,431
433,434
433,435
434,435
436,437
436,438
437,438
440,441
441,442
443,444
443,445
444,445
445,446
445,447
446,447
446,448
447,448
449,450
452,453
453,454
453,455
454,455
454,456
455,456
457,458
461,462
462,463
462,464
462,465
462,466
462,467
463,464
465,466
467,468
469,470
471,472
473,474
474,475
474,476
475,476
477,478
479,480
480,481
480,482
481,482
483,484
485,486
-----nextToken-----
2,4,7,9,10,14,16,18,20,22,24,28,30,32,34,36,39,41,43,47,49,50,52,53,57,61,63,66,69,70,71,75,77,81,83,87,91,93,96,99,100,101,105,107,112,114,118,120,124,130,131,133,135,139,142,143,144,146,149,153,157,163,164,166,168,173,174,180,181,183,185,190,191,197,198,200,202,207,208,214,215,217,219,224,225,231,232,234,236,241,242,248,249,251,253,258,259,262,265,266,269,274,276,282,285,287,288,291,295,300,301,303,308,309,315,316,318,320,325,326,332,333,335,337,342,343,349,350,352,354,359,360,366,367,369,371,376,377,383,384,386,388,393,394,397,400,401,404,409,411,418,421,423,424,425,426,431,432,435,438,439,442,448,450,451,456,458,459,460,464,466,468,470,472,476,478,482,484,486
-----computeFrom-----
55,56
55,57
85,86
85,87
122,123
122,124
125,126
125,127
127,128
127,129
155,156
155,157
158,159
158,160
160,161
160,162
170,171
170,172
175,176
175,177
177,178
177,179
187,188
187,189
192,193
192,194
194,195
194,196
204,205
204,206
209,210
209,211
211,212
211,213
221,222
221,223
226,227
226,228
228,229
228,230
238,239
238,240
243,244
243,245
245,246
245,247
256,257
256,258
260,261
260,262
271,272
271,273
278,279
278,280
280,281
280,282
293,294
293,295
297,298
297,299
305,306
305,307
310,311
310,312
312,313
312,314
322,323
322,324
327,328
327,329
329,330
329,331
339,340
339,341
344,345
344,346
346,347
346,348
356,357
356,358
361,362
361,363
363,364
363,365
373,374
373,375
378,379
378,380
380,381
380,382
391,392
391,393
395,396
395,397
406,407
406,408
413,414
413,415
415,416
415,417
429,430
429,431
433,434
433,435
445,446
445,447
453,454
453,455
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int calibrate_8916(struct tsens_priv *priv){	int base0 = 0, base1 = 0, i;	u32 p1[5], p2[5];	int mode = 0;	u32 *qfprom_cdata, *qfprom_csel;	qfprom_cdata = (u32 *)qfprom_read(priv->dev, "calib");	if (IS_ERR(qfprom_cdata))		return PTR_ERR(qfprom_cdata);	qfprom_csel = (u32 *)qfprom_read(priv->dev, "calib_sel");	if (IS_ERR(qfprom_csel)) {		kfree(qfprom_cdata);		return PTR_ERR(qfprom_csel);	}	mode = (qfprom_csel[0] & MSM8916_CAL_SEL_MASK) >> MSM8916_CAL_SEL_SHIFT;	dev_dbg(priv->dev, "calibration mode is %d\n", mode);	switch (mode) {	case TWO_PT_CALIB:		base1 = (qfprom_cdata[1] & MSM8916_BASE1_MASK) >> MSM8916_BASE1_SHIFT;		p2[0] = (qfprom_cdata[0] & MSM8916_S0_P2_MASK) >> MSM8916_S0_P2_SHIFT;		p2[1] = (qfprom_cdata[0] & MSM8916_S1_P2_MASK) >> MSM8916_S1_P2_SHIFT;		p2[2] = (qfprom_cdata[1] & MSM8916_S2_P2_MASK) >> MSM8916_S2_P2_SHIFT;		p2[3] = (qfprom_cdata[1] & MSM8916_S3_P2_MASK) >> MSM8916_S3_P2_SHIFT;		p2[4] = (qfprom_cdata[1] & MSM8916_S4_P2_MASK) >> MSM8916_S4_P2_SHIFT;		for (i = 0; i < priv->num_sensors; i++)			p2[i] = ((base1 + p2[i]) << 3);		/* Fall through */	case ONE_PT_CALIB2:		base0 = (qfprom_cdata[0] & MSM8916_BASE0_MASK);		p1[0] = (qfprom_cdata[0] & MSM8916_S0_P1_MASK) >> MSM8916_S0_P1_SHIFT;		p1[1] = (qfprom_cdata[0] & MSM8916_S1_P1_MASK) >> MSM8916_S1_P1_SHIFT;		p1[2] = (qfprom_cdata[0] & MSM8916_S2_P1_MASK) >> MSM8916_S2_P1_SHIFT;		p1[3] = (qfprom_cdata[1] & MSM8916_S3_P1_MASK) >> MSM8916_S3_P1_SHIFT;		p1[4] = (qfprom_cdata[1] & MSM8916_S4_P1_MASK) >> MSM8916_S4_P1_SHIFT;		for (i = 0; i < priv->num_sensors; i++)			p1[i] = (((base0) + p1[i]) << 3);		break;	default:		for (i = 0; i < priv->num_sensors; i++) {			p1[i] = 500;			p2[i] = 780;		}		break;	}	compute_intercept_slope(priv, p1, p2, mode);	kfree(qfprom_cdata);	kfree(qfprom_csel);	return 0;}
static int
calibrate_8916(struct tsens_priv *priv)
calibrate_8916
struct tsens_priv *priv
struct tsens_priv
tsens_priv
*priv
*
priv
{	int base0 = 0, base1 = 0, i;	u32 p1[5], p2[5];	int mode = 0;	u32 *qfprom_cdata, *qfprom_csel;	qfprom_cdata = (u32 *)qfprom_read(priv->dev, "calib");	if (IS_ERR(qfprom_cdata))		return PTR_ERR(qfprom_cdata);	qfprom_csel = (u32 *)qfprom_read(priv->dev, "calib_sel");	if (IS_ERR(qfprom_csel)) {		kfree(qfprom_cdata);		return PTR_ERR(qfprom_csel);	}	mode = (qfprom_csel[0] & MSM8916_CAL_SEL_MASK) >> MSM8916_CAL_SEL_SHIFT;	dev_dbg(priv->dev, "calibration mode is %d\n", mode);	switch (mode) {	case TWO_PT_CALIB:		base1 = (qfprom_cdata[1] & MSM8916_BASE1_MASK) >> MSM8916_BASE1_SHIFT;		p2[0] = (qfprom_cdata[0] & MSM8916_S0_P2_MASK) >> MSM8916_S0_P2_SHIFT;		p2[1] = (qfprom_cdata[0] & MSM8916_S1_P2_MASK) >> MSM8916_S1_P2_SHIFT;		p2[2] = (qfprom_cdata[1] & MSM8916_S2_P2_MASK) >> MSM8916_S2_P2_SHIFT;		p2[3] = (qfprom_cdata[1] & MSM8916_S3_P2_MASK) >> MSM8916_S3_P2_SHIFT;		p2[4] = (qfprom_cdata[1] & MSM8916_S4_P2_MASK) >> MSM8916_S4_P2_SHIFT;		for (i = 0; i < priv->num_sensors; i++)			p2[i] = ((base1 + p2[i]) << 3);		/* Fall through */	case ONE_PT_CALIB2:		base0 = (qfprom_cdata[0] & MSM8916_BASE0_MASK);		p1[0] = (qfprom_cdata[0] & MSM8916_S0_P1_MASK) >> MSM8916_S0_P1_SHIFT;		p1[1] = (qfprom_cdata[0] & MSM8916_S1_P1_MASK) >> MSM8916_S1_P1_SHIFT;		p1[2] = (qfprom_cdata[0] & MSM8916_S2_P1_MASK) >> MSM8916_S2_P1_SHIFT;		p1[3] = (qfprom_cdata[1] & MSM8916_S3_P1_MASK) >> MSM8916_S3_P1_SHIFT;		p1[4] = (qfprom_cdata[1] & MSM8916_S4_P1_MASK) >> MSM8916_S4_P1_SHIFT;		for (i = 0; i < priv->num_sensors; i++)			p1[i] = (((base0) + p1[i]) << 3);		break;	default:		for (i = 0; i < priv->num_sensors; i++) {			p1[i] = 500;			p2[i] = 780;		}		break;	}	compute_intercept_slope(priv, p1, p2, mode);	kfree(qfprom_cdata);	kfree(qfprom_csel);	return 0;}
int base0 = 0, base1 = 0, i;
int base0 = 0, base1 = 0, i;
int
base0 = 0
base0
= 0
0
base1 = 0
base1
= 0
0
i
i
u32 p1[5], p2[5];
u32 p1[5], p2[5];
u32
u32
p1[5]
p1
[5]
5
p2[5]
p2
[5]
5
int mode = 0;
int mode = 0;
int
mode = 0
mode
= 0
0
u32 *qfprom_cdata, *qfprom_csel;
u32 *qfprom_cdata, *qfprom_csel;
u32
u32
*qfprom_cdata
*
qfprom_cdata
*qfprom_csel
*
qfprom_csel
qfprom_cdata = (u32 *)qfprom_read(priv->dev, "calib");
qfprom_cdata = (u32 *)qfprom_read(priv->dev, "calib")
qfprom_cdata
qfprom_cdata
(u32 *)qfprom_read(priv->dev, "calib")
u32 *
u32
u32
*
*
qfprom_read(priv->dev, "calib")
qfprom_read
qfprom_read
priv->dev
priv
priv
dev
"calib"
if (IS_ERR(qfprom_cdata))		return PTR_ERR(qfprom_cdata);
IS_ERR(qfprom_cdata)
IS_ERR
IS_ERR
qfprom_cdata
qfprom_cdata
return PTR_ERR(qfprom_cdata);
PTR_ERR(qfprom_cdata)
PTR_ERR
PTR_ERR
qfprom_cdata
qfprom_cdata
qfprom_csel = (u32 *)qfprom_read(priv->dev, "calib_sel");
qfprom_csel = (u32 *)qfprom_read(priv->dev, "calib_sel")
qfprom_csel
qfprom_csel
(u32 *)qfprom_read(priv->dev, "calib_sel")
u32 *
u32
u32
*
*
qfprom_read(priv->dev, "calib_sel")
qfprom_read
qfprom_read
priv->dev
priv
priv
dev
"calib_sel"
if (IS_ERR(qfprom_csel)) {		kfree(qfprom_cdata);		return PTR_ERR(qfprom_csel);	}
IS_ERR(qfprom_csel)
IS_ERR
IS_ERR
qfprom_csel
qfprom_csel
{		kfree(qfprom_cdata);		return PTR_ERR(qfprom_csel);	}
kfree(qfprom_cdata);
kfree(qfprom_cdata)
kfree
kfree
qfprom_cdata
qfprom_cdata
return PTR_ERR(qfprom_csel);
PTR_ERR(qfprom_csel)
PTR_ERR
PTR_ERR
qfprom_csel
qfprom_csel
mode = (qfprom_csel[0] & MSM8916_CAL_SEL_MASK) >> MSM8916_CAL_SEL_SHIFT;
mode = (qfprom_csel[0] & MSM8916_CAL_SEL_MASK) >> MSM8916_CAL_SEL_SHIFT
mode
mode
(qfprom_csel[0] & MSM8916_CAL_SEL_MASK) >> MSM8916_CAL_SEL_SHIFT
(qfprom_csel[0] & MSM8916_CAL_SEL_MASK)
qfprom_csel[0] & MSM8916_CAL_SEL_MASK
qfprom_csel[0]
qfprom_csel
qfprom_csel
0
MSM8916_CAL_SEL_MASK
MSM8916_CAL_SEL_MASK
MSM8916_CAL_SEL_SHIFT
MSM8916_CAL_SEL_SHIFT
dev_dbg(priv->dev, "calibration mode is %d\n", mode);
dev_dbg(priv->dev, "calibration mode is %d\n", mode)
dev_dbg
dev_dbg
priv->dev
priv
priv
dev
"calibration mode is %d\n"
mode
mode
switch (mode) {	case TWO_PT_CALIB:		base1 = (qfprom_cdata[1] & MSM8916_BASE1_MASK) >> MSM8916_BASE1_SHIFT;		p2[0] = (qfprom_cdata[0] & MSM8916_S0_P2_MASK) >> MSM8916_S0_P2_SHIFT;		p2[1] = (qfprom_cdata[0] & MSM8916_S1_P2_MASK) >> MSM8916_S1_P2_SHIFT;		p2[2] = (qfprom_cdata[1] & MSM8916_S2_P2_MASK) >> MSM8916_S2_P2_SHIFT;		p2[3] = (qfprom_cdata[1] & MSM8916_S3_P2_MASK) >> MSM8916_S3_P2_SHIFT;		p2[4] = (qfprom_cdata[1] & MSM8916_S4_P2_MASK) >> MSM8916_S4_P2_SHIFT;		for (i = 0; i < priv->num_sensors; i++)			p2[i] = ((base1 + p2[i]) << 3);		/* Fall through */	case ONE_PT_CALIB2:		base0 = (qfprom_cdata[0] & MSM8916_BASE0_MASK);		p1[0] = (qfprom_cdata[0] & MSM8916_S0_P1_MASK) >> MSM8916_S0_P1_SHIFT;		p1[1] = (qfprom_cdata[0] & MSM8916_S1_P1_MASK) >> MSM8916_S1_P1_SHIFT;		p1[2] = (qfprom_cdata[0] & MSM8916_S2_P1_MASK) >> MSM8916_S2_P1_SHIFT;		p1[3] = (qfprom_cdata[1] & MSM8916_S3_P1_MASK) >> MSM8916_S3_P1_SHIFT;		p1[4] = (qfprom_cdata[1] & MSM8916_S4_P1_MASK) >> MSM8916_S4_P1_SHIFT;		for (i = 0; i < priv->num_sensors; i++)			p1[i] = (((base0) + p1[i]) << 3);		break;	default:		for (i = 0; i < priv->num_sensors; i++) {			p1[i] = 500;			p2[i] = 780;		}		break;	}
mode
mode
{	case TWO_PT_CALIB:		base1 = (qfprom_cdata[1] & MSM8916_BASE1_MASK) >> MSM8916_BASE1_SHIFT;		p2[0] = (qfprom_cdata[0] & MSM8916_S0_P2_MASK) >> MSM8916_S0_P2_SHIFT;		p2[1] = (qfprom_cdata[0] & MSM8916_S1_P2_MASK) >> MSM8916_S1_P2_SHIFT;		p2[2] = (qfprom_cdata[1] & MSM8916_S2_P2_MASK) >> MSM8916_S2_P2_SHIFT;		p2[3] = (qfprom_cdata[1] & MSM8916_S3_P2_MASK) >> MSM8916_S3_P2_SHIFT;		p2[4] = (qfprom_cdata[1] & MSM8916_S4_P2_MASK) >> MSM8916_S4_P2_SHIFT;		for (i = 0; i < priv->num_sensors; i++)			p2[i] = ((base1 + p2[i]) << 3);		/* Fall through */	case ONE_PT_CALIB2:		base0 = (qfprom_cdata[0] & MSM8916_BASE0_MASK);		p1[0] = (qfprom_cdata[0] & MSM8916_S0_P1_MASK) >> MSM8916_S0_P1_SHIFT;		p1[1] = (qfprom_cdata[0] & MSM8916_S1_P1_MASK) >> MSM8916_S1_P1_SHIFT;		p1[2] = (qfprom_cdata[0] & MSM8916_S2_P1_MASK) >> MSM8916_S2_P1_SHIFT;		p1[3] = (qfprom_cdata[1] & MSM8916_S3_P1_MASK) >> MSM8916_S3_P1_SHIFT;		p1[4] = (qfprom_cdata[1] & MSM8916_S4_P1_MASK) >> MSM8916_S4_P1_SHIFT;		for (i = 0; i < priv->num_sensors; i++)			p1[i] = (((base0) + p1[i]) << 3);		break;	default:		for (i = 0; i < priv->num_sensors; i++) {			p1[i] = 500;			p2[i] = 780;		}		break;	}
case TWO_PT_CALIB:
TWO_PT_CALIB
TWO_PT_CALIB
base1 = (qfprom_cdata[1] & MSM8916_BASE1_MASK) >> MSM8916_BASE1_SHIFT;
base1 = (qfprom_cdata[1] & MSM8916_BASE1_MASK) >> MSM8916_BASE1_SHIFT
base1
base1
(qfprom_cdata[1] & MSM8916_BASE1_MASK) >> MSM8916_BASE1_SHIFT
(qfprom_cdata[1] & MSM8916_BASE1_MASK)
qfprom_cdata[1] & MSM8916_BASE1_MASK
qfprom_cdata[1]
qfprom_cdata
qfprom_cdata
1
MSM8916_BASE1_MASK
MSM8916_BASE1_MASK
MSM8916_BASE1_SHIFT
MSM8916_BASE1_SHIFT
p2[0] = (qfprom_cdata[0] & MSM8916_S0_P2_MASK) >> MSM8916_S0_P2_SHIFT;
p2[0] = (qfprom_cdata[0] & MSM8916_S0_P2_MASK) >> MSM8916_S0_P2_SHIFT
p2[0]
p2
p2
0
(qfprom_cdata[0] & MSM8916_S0_P2_MASK) >> MSM8916_S0_P2_SHIFT
(qfprom_cdata[0] & MSM8916_S0_P2_MASK)
qfprom_cdata[0] & MSM8916_S0_P2_MASK
qfprom_cdata[0]
qfprom_cdata
qfprom_cdata
0
MSM8916_S0_P2_MASK
MSM8916_S0_P2_MASK
MSM8916_S0_P2_SHIFT
MSM8916_S0_P2_SHIFT
p2[1] = (qfprom_cdata[0] & MSM8916_S1_P2_MASK) >> MSM8916_S1_P2_SHIFT;
p2[1] = (qfprom_cdata[0] & MSM8916_S1_P2_MASK) >> MSM8916_S1_P2_SHIFT
p2[1]
p2
p2
1
(qfprom_cdata[0] & MSM8916_S1_P2_MASK) >> MSM8916_S1_P2_SHIFT
(qfprom_cdata[0] & MSM8916_S1_P2_MASK)
qfprom_cdata[0] & MSM8916_S1_P2_MASK
qfprom_cdata[0]
qfprom_cdata
qfprom_cdata
0
MSM8916_S1_P2_MASK
MSM8916_S1_P2_MASK
MSM8916_S1_P2_SHIFT
MSM8916_S1_P2_SHIFT
p2[2] = (qfprom_cdata[1] & MSM8916_S2_P2_MASK) >> MSM8916_S2_P2_SHIFT;
p2[2] = (qfprom_cdata[1] & MSM8916_S2_P2_MASK) >> MSM8916_S2_P2_SHIFT
p2[2]
p2
p2
2
(qfprom_cdata[1] & MSM8916_S2_P2_MASK) >> MSM8916_S2_P2_SHIFT
(qfprom_cdata[1] & MSM8916_S2_P2_MASK)
qfprom_cdata[1] & MSM8916_S2_P2_MASK
qfprom_cdata[1]
qfprom_cdata
qfprom_cdata
1
MSM8916_S2_P2_MASK
MSM8916_S2_P2_MASK
MSM8916_S2_P2_SHIFT
MSM8916_S2_P2_SHIFT
p2[3] = (qfprom_cdata[1] & MSM8916_S3_P2_MASK) >> MSM8916_S3_P2_SHIFT;
p2[3] = (qfprom_cdata[1] & MSM8916_S3_P2_MASK) >> MSM8916_S3_P2_SHIFT
p2[3]
p2
p2
3
(qfprom_cdata[1] & MSM8916_S3_P2_MASK) >> MSM8916_S3_P2_SHIFT
(qfprom_cdata[1] & MSM8916_S3_P2_MASK)
qfprom_cdata[1] & MSM8916_S3_P2_MASK
qfprom_cdata[1]
qfprom_cdata
qfprom_cdata
1
MSM8916_S3_P2_MASK
MSM8916_S3_P2_MASK
MSM8916_S3_P2_SHIFT
MSM8916_S3_P2_SHIFT
p2[4] = (qfprom_cdata[1] & MSM8916_S4_P2_MASK) >> MSM8916_S4_P2_SHIFT;
p2[4] = (qfprom_cdata[1] & MSM8916_S4_P2_MASK) >> MSM8916_S4_P2_SHIFT
p2[4]
p2
p2
4
(qfprom_cdata[1] & MSM8916_S4_P2_MASK) >> MSM8916_S4_P2_SHIFT
(qfprom_cdata[1] & MSM8916_S4_P2_MASK)
qfprom_cdata[1] & MSM8916_S4_P2_MASK
qfprom_cdata[1]
qfprom_cdata
qfprom_cdata
1
MSM8916_S4_P2_MASK
MSM8916_S4_P2_MASK
MSM8916_S4_P2_SHIFT
MSM8916_S4_P2_SHIFT
for (i = 0; i < priv->num_sensors; i++)			p2[i] = ((base1 + p2[i]) << 3);
i = 0;
i = 0
i
i
0
i < priv->num_sensors
i
i
priv->num_sensors
priv
priv
num_sensors
i++
i
i
p2[i] = ((base1 + p2[i]) << 3);
p2[i] = ((base1 + p2[i]) << 3)
p2[i]
p2
p2
i
i
((base1 + p2[i]) << 3)
(base1 + p2[i]) << 3
(base1 + p2[i])
base1 + p2[i]
base1
base1
p2[i]
p2
p2
i
i
3
case ONE_PT_CALIB2:
ONE_PT_CALIB2
ONE_PT_CALIB2
base0 = (qfprom_cdata[0] & MSM8916_BASE0_MASK);
base0 = (qfprom_cdata[0] & MSM8916_BASE0_MASK)
base0
base0
(qfprom_cdata[0] & MSM8916_BASE0_MASK)
qfprom_cdata[0] & MSM8916_BASE0_MASK
qfprom_cdata[0]
qfprom_cdata
qfprom_cdata
0
MSM8916_BASE0_MASK
MSM8916_BASE0_MASK
p1[0] = (qfprom_cdata[0] & MSM8916_S0_P1_MASK) >> MSM8916_S0_P1_SHIFT;
p1[0] = (qfprom_cdata[0] & MSM8916_S0_P1_MASK) >> MSM8916_S0_P1_SHIFT
p1[0]
p1
p1
0
(qfprom_cdata[0] & MSM8916_S0_P1_MASK) >> MSM8916_S0_P1_SHIFT
(qfprom_cdata[0] & MSM8916_S0_P1_MASK)
qfprom_cdata[0] & MSM8916_S0_P1_MASK
qfprom_cdata[0]
qfprom_cdata
qfprom_cdata
0
MSM8916_S0_P1_MASK
MSM8916_S0_P1_MASK
MSM8916_S0_P1_SHIFT
MSM8916_S0_P1_SHIFT
p1[1] = (qfprom_cdata[0] & MSM8916_S1_P1_MASK) >> MSM8916_S1_P1_SHIFT;
p1[1] = (qfprom_cdata[0] & MSM8916_S1_P1_MASK) >> MSM8916_S1_P1_SHIFT
p1[1]
p1
p1
1
(qfprom_cdata[0] & MSM8916_S1_P1_MASK) >> MSM8916_S1_P1_SHIFT
(qfprom_cdata[0] & MSM8916_S1_P1_MASK)
qfprom_cdata[0] & MSM8916_S1_P1_MASK
qfprom_cdata[0]
qfprom_cdata
qfprom_cdata
0
MSM8916_S1_P1_MASK
MSM8916_S1_P1_MASK
MSM8916_S1_P1_SHIFT
MSM8916_S1_P1_SHIFT
p1[2] = (qfprom_cdata[0] & MSM8916_S2_P1_MASK) >> MSM8916_S2_P1_SHIFT;
p1[2] = (qfprom_cdata[0] & MSM8916_S2_P1_MASK) >> MSM8916_S2_P1_SHIFT
p1[2]
p1
p1
2
(qfprom_cdata[0] & MSM8916_S2_P1_MASK) >> MSM8916_S2_P1_SHIFT
(qfprom_cdata[0] & MSM8916_S2_P1_MASK)
qfprom_cdata[0] & MSM8916_S2_P1_MASK
qfprom_cdata[0]
qfprom_cdata
qfprom_cdata
0
MSM8916_S2_P1_MASK
MSM8916_S2_P1_MASK
MSM8916_S2_P1_SHIFT
MSM8916_S2_P1_SHIFT
p1[3] = (qfprom_cdata[1] & MSM8916_S3_P1_MASK) >> MSM8916_S3_P1_SHIFT;
p1[3] = (qfprom_cdata[1] & MSM8916_S3_P1_MASK) >> MSM8916_S3_P1_SHIFT
p1[3]
p1
p1
3
(qfprom_cdata[1] & MSM8916_S3_P1_MASK) >> MSM8916_S3_P1_SHIFT
(qfprom_cdata[1] & MSM8916_S3_P1_MASK)
qfprom_cdata[1] & MSM8916_S3_P1_MASK
qfprom_cdata[1]
qfprom_cdata
qfprom_cdata
1
MSM8916_S3_P1_MASK
MSM8916_S3_P1_MASK
MSM8916_S3_P1_SHIFT
MSM8916_S3_P1_SHIFT
p1[4] = (qfprom_cdata[1] & MSM8916_S4_P1_MASK) >> MSM8916_S4_P1_SHIFT;
p1[4] = (qfprom_cdata[1] & MSM8916_S4_P1_MASK) >> MSM8916_S4_P1_SHIFT
p1[4]
p1
p1
4
(qfprom_cdata[1] & MSM8916_S4_P1_MASK) >> MSM8916_S4_P1_SHIFT
(qfprom_cdata[1] & MSM8916_S4_P1_MASK)
qfprom_cdata[1] & MSM8916_S4_P1_MASK
qfprom_cdata[1]
qfprom_cdata
qfprom_cdata
1
MSM8916_S4_P1_MASK
MSM8916_S4_P1_MASK
MSM8916_S4_P1_SHIFT
MSM8916_S4_P1_SHIFT
for (i = 0; i < priv->num_sensors; i++)			p1[i] = (((base0) + p1[i]) << 3);
i = 0;
i = 0
i
i
0
i < priv->num_sensors
i
i
priv->num_sensors
priv
priv
num_sensors
i++
i
i
p1[i] = (((base0) + p1[i]) << 3);
p1[i] = (((base0) + p1[i]) << 3)
p1[i]
p1
p1
i
i
(((base0) + p1[i]) << 3)
((base0) + p1[i]) << 3
((base0) + p1[i])
(base0) + p1[i]
(base0)
base0
base0
p1[i]
p1
p1
i
i
3
break;
default:
for (i = 0; i < priv->num_sensors; i++) {			p1[i] = 500;			p2[i] = 780;		}
i = 0;
i = 0
i
i
0
i < priv->num_sensors
i
i
priv->num_sensors
priv
priv
num_sensors
i++
i
i
{			p1[i] = 500;			p2[i] = 780;		}
p1[i] = 500;
p1[i] = 500
p1[i]
p1
p1
i
i
500
p2[i] = 780;
p2[i] = 780
p2[i]
p2
p2
i
i
780
break;
compute_intercept_slope(priv, p1, p2, mode);
compute_intercept_slope(priv, p1, p2, mode)
compute_intercept_slope
compute_intercept_slope
priv
priv
p1
p1
p2
p2
mode
mode
kfree(qfprom_cdata);
kfree(qfprom_cdata)
kfree
kfree
qfprom_cdata
qfprom_cdata
kfree(qfprom_csel);
kfree(qfprom_csel)
kfree
kfree
qfprom_csel
qfprom_csel
return 0;
0
-----joern-----
(42,78,0)
(236,35,0)
(193,234,0)
(162,179,0)
(5,170,0)
(237,97,0)
(247,7,0)
(90,114,0)
(17,122,0)
(109,220,0)
(243,78,0)
(208,83,0)
(148,167,0)
(269,98,0)
(172,60,0)
(113,20,0)
(60,7,0)
(61,74,0)
(55,227,0)
(219,262,0)
(206,247,0)
(220,195,0)
(84,3,0)
(101,254,0)
(79,38,0)
(110,83,0)
(19,179,0)
(224,176,0)
(253,155,0)
(143,25,0)
(206,228,0)
(221,74,0)
(154,40,0)
(165,75,0)
(53,204,0)
(238,127,0)
(2,274,0)
(272,25,0)
(170,114,0)
(19,183,0)
(198,221,0)
(82,75,0)
(1,162,0)
(177,144,0)
(224,110,0)
(129,38,0)
(243,254,0)
(91,254,0)
(42,214,0)
(184,160,0)
(179,272,0)
(100,272,0)
(226,244,0)
(77,16,0)
(104,257,0)
(230,52,0)
(250,195,0)
(192,203,0)
(149,198,0)
(44,213,0)
(92,15,0)
(121,228,0)
(47,141,0)
(272,179,0)
(11,127,0)
(108,254,0)
(112,123,0)
(4,254,0)
(242,122,0)
(215,129,0)
(191,170,0)
(223,234,0)
(136,69,0)
(210,75,0)
(78,42,0)
(51,199,0)
(262,219,0)
(45,173,0)
(277,229,0)
(104,210,0)
(71,16,0)
(49,11,0)
(224,127,0)
(41,179,0)
(138,254,0)
(10,143,0)
(54,50,0)
(244,122,0)
(245,276,0)
(194,90,0)
(118,135,0)
(214,179,0)
(136,141,0)
(74,101,0)
(223,217,0)
(180,168,0)
(145,159,0)
(176,224,0)
(43,76,0)
(279,214,0)
(227,169,0)
(20,231,0)
(23,104,0)
(59,220,0)
(278,67,0)
(3,171,0)
(266,73,0)
(99,122,0)
(46,122,0)
(248,53,0)
(81,229,0)
(139,126,0)
(276,233,0)
(170,179,0)
(187,183,0)
(251,83,0)
(127,224,0)
(93,122,0)
(264,67,0)
(69,179,0)
(274,185,0)
(29,51,0)
(232,122,0)
(237,53,0)
(275,138,0)
(240,7,0)
(275,173,0)
(138,275,0)
(223,122,0)
(213,181,0)
(109,231,0)
(141,136,0)
(166,127,0)
(271,179,0)
(30,143,0)
(231,254,0)
(223,52,0)
(16,179,0)
(217,101,0)
(114,90,0)
(35,181,0)
(265,33,0)
(127,122,0)
(160,257,0)
(223,177,0)
(233,276,0)
(212,151,0)
(148,64,0)
(22,177,0)
(200,165,0)
(65,69,0)
(103,139,0)
(129,254,0)
(222,56,0)
(171,3,0)
(131,126,0)
(183,19,0)
(124,271,0)
(173,275,0)
(119,144,0)
(190,171,0)
(116,217,0)
(32,194,0)
(169,227,0)
(125,104,0)
(195,220,0)
(102,244,0)
(213,122,0)
(8,53,0)
(207,51,0)
(184,50,0)
(140,45,0)
(114,170,0)
(185,257,0)
(258,247,0)
(26,168,0)
(177,126,0)
(94,43,0)
(141,47,0)
(146,159,0)
(256,166,0)
(97,237,0)
(123,50,0)
(167,260,0)
(159,147,0)
(37,213,0)
(151,179,0)
(15,40,0)
(38,16,0)
(185,274,0)
(160,184,0)
(36,187,0)
(7,240,0)
(228,121,0)
(263,276,0)
(235,50,0)
(33,70,0)
(216,87,0)
(24,43,0)
(0,195,0)
(76,254,0)
(152,19,0)
(205,69,0)
(134,9,0)
(63,40,0)
(67,3,0)
(80,247,0)
(223,73,0)
(272,100,0)
(223,123,0)
(151,155,0)
(255,217,0)
(273,73,0)
(34,233,0)
(52,243,0)
(9,50,0)
(223,51,0)
(14,254,0)
(228,206,0)
(6,33,0)
(97,204,0)
(220,109,0)
(276,179,0)
(56,127,0)
(171,179,0)
(31,223,0)
(238,227,0)
(92,76,0)
(158,97,0)
(231,109,0)
(83,257,0)
(153,183,0)
(73,47,0)
(247,75,0)
(278,254,0)
(78,243,0)
(169,181,0)
(53,237,0)
(87,179,0)
(223,60,0)
(115,126,0)
(155,219,0)
(174,135,0)
(202,90,0)
(76,92,0)
(135,262,0)
(186,114,0)
(21,20,0)
(120,151,0)
(223,20,0)
(155,151,0)
(130,141,0)
(106,160,0)
(72,234,0)
(70,259,0)
(142,19,0)
(211,240,0)
(137,181,0)
(132,123,0)
(201,35,0)
(47,254,0)
(107,237,0)
(198,179,0)
(27,122,0)
(53,50,0)
(214,42,0)
(123,204,0)
(196,127,0)
(241,110,0)
(274,126,0)
(86,70,0)
(110,224,0)
(69,136,0)
(147,254,0)
(40,15,0)
(156,42,0)
(67,278,0)
(166,122,0)
(101,74,0)
(144,259,0)
(87,260,0)
(90,194,0)
(225,35,0)
(163,198,0)
(157,60,0)
(252,185,0)
(175,238,0)
(223,43,0)
(188,254,0)
(199,187,0)
(143,257,0)
(267,177,0)
(261,203,0)
(33,126,0)
(194,254,0)
(246,98,0)
(168,122,0)
(233,128,0)
(203,138,0)
(117,52,0)
(74,221,0)
(13,109,0)
(173,45,0)
(210,104,0)
(128,233,0)
(18,15,0)
(133,171,0)
(179,122,0)
(219,155,0)
(98,213,0)
(62,75,0)
(228,240,0)
(234,278,0)
(3,67,0)
(15,92,0)
(93,179,0)
(60,75,0)
(181,169,0)
(56,167,0)
(96,45,0)
(270,219,0)
(268,169,0)
(164,122,0)
(209,173,0)
(150,136,0)
(183,187,0)
(181,122,0)
(178,128,0)
(239,238,0)
(148,223,0)
(89,122,0)
(38,129,0)
(182,185,0)
(227,238,0)
(28,122,0)
(35,122,0)
(229,122,0)
(262,254,0)
(40,179,0)
(105,35,0)
(187,199,0)
(12,92,0)
(223,135,0)
(88,214,0)
(35,257,0)
(223,159,0)
(16,38,0)
(237,194,0)
(271,64,0)
(218,254,0)
(85,25,0)
(48,275,0)
(204,97,0)
(95,254,0)
(66,122,0)
(39,78,0)
(57,122,0)
(189,210,0)
(147,128,0)
(161,93,0)
(249,221,0)
(111,184,0)
(45,179,0)
(25,272,0)
(128,147,0)
(98,257,0)
(199,254,0)
(247,206,0)
(25,143,0)
(223,203,0)
(68,160,0)
(223,33,0)
(195,179,0)
(240,228,0)
(197,254,0)
(221,198,0)
(83,110,0)
(213,98,0)
(126,115,1)
(128,233,1)
(217,116,1)
(204,97,1)
(151,179,1)
(212,120,1)
(224,110,1)
(171,179,1)
(221,198,1)
(130,136,1)
(273,266,1)
(141,136,1)
(223,52,1)
(83,257,1)
(175,239,1)
(216,11,1)
(203,261,1)
(123,50,1)
(76,92,1)
(29,129,1)
(19,179,1)
(213,181,1)
(223,60,1)
(131,58,1)
(67,3,1)
(106,111,1)
(193,76,1)
(198,179,1)
(25,85,1)
(220,59,1)
(52,117,1)
(223,203,1)
(185,257,1)
(2,139,1)
(156,214,1)
(171,190,1)
(186,170,1)
(267,22,1)
(183,153,1)
(197,210,1)
(111,50,1)
(223,51,1)
(223,20,1)
(195,179,1)
(187,183,1)
(248,107,1)
(270,155,1)
(172,157,1)
(65,73,1)
(224,176,1)
(123,132,1)
(74,221,1)
(47,141,1)
(36,183,1)
(93,161,1)
(35,225,1)
(110,241,1)
(53,204,1)
(143,10,1)
(184,50,1)
(68,106,1)
(117,230,1)
(169,268,1)
(49,127,1)
(149,217,1)
(114,186,1)
(113,21,1)
(34,276,1)
(276,245,1)
(168,180,1)
(167,56,1)
(173,209,1)
(191,32,1)
(63,43,1)
(124,162,1)
(241,83,1)
(265,6,1)
(275,48,1)
(94,24,1)
(33,265,1)
(223,177,1)
(81,277,1)
(177,126,1)
(23,189,1)
(269,181,1)
(201,236,1)
(196,162,1)
(62,82,1)
(104,125,1)
(272,100,1)
(6,144,1)
(271,179,1)
(173,45,1)
(162,179,1)
(140,203,1)
(115,131,1)
(26,229,1)
(237,53,1)
(41,244,1)
(177,267,1)
(35,257,1)
(208,196,1)
(223,43,1)
(255,199,1)
(61,221,1)
(262,219,1)
(233,34,1)
(31,166,1)
(132,112,1)
(87,216,1)
(139,103,1)
(92,15,1)
(10,30,1)
(209,45,1)
(45,96,1)
(8,248,1)
(214,88,1)
(0,20,1)
(146,194,1)
(110,83,1)
(45,179,1)
(43,94,1)
(40,179,1)
(78,39,1)
(48,173,1)
(79,16,1)
(228,206,1)
(51,207,1)
(42,156,1)
(60,75,1)
(180,26,1)
(263,159,1)
(207,29,1)
(120,135,1)
(98,246,1)
(185,182,1)
(96,140,1)
(256,93,1)
(35,181,1)
(234,72,1)
(14,274,1)
(229,81,1)
(147,128,1)
(139,126,1)
(9,50,1)
(249,198,1)
(272,25,1)
(21,243,1)
(67,264,1)
(247,80,1)
(12,15,1)
(268,227,1)
(50,54,1)
(105,14,1)
(213,44,1)
(70,86,1)
(104,257,1)
(56,222,1)
(148,167,1)
(163,149,1)
(184,160,1)
(1,179,1)
(97,237,1)
(223,123,1)
(93,179,1)
(11,49,1)
(240,228,1)
(125,23,1)
(236,105,1)
(116,255,1)
(223,135,1)
(237,194,1)
(266,147,1)
(278,67,1)
(2,126,1)
(223,159,1)
(253,151,1)
(227,55,1)
(214,179,1)
(134,204,1)
(250,0,1)
(84,171,1)
(243,78,1)
(178,233,1)
(166,256,1)
(210,75,1)
(155,253,1)
(16,77,1)
(274,126,1)
(225,201,1)
(264,3,1)
(190,133,1)
(233,276,1)
(32,58,1)
(183,19,1)
(165,75,1)
(148,64,1)
(154,63,1)
(54,235,1)
(80,258,1)
(22,274,1)
(111,9,1)
(182,252,1)
(101,74,1)
(92,12,1)
(74,61,1)
(30,41,1)
(133,234,1)
(128,178,1)
(72,193,1)
(33,126,1)
(53,8,1)
(227,238,1)
(109,13,1)
(119,177,1)
(246,269,1)
(127,224,1)
(158,237,1)
(64,271,1)
(71,215,1)
(55,238,1)
(206,247,1)
(179,272,1)
(223,73,1)
(152,142,1)
(251,208,1)
(159,145,1)
(150,69,1)
(75,62,1)
(238,175,1)
(228,121,1)
(222,87,1)
(181,169,1)
(160,68,1)
(7,240,1)
(210,104,1)
(107,123,1)
(11,127,1)
(69,205,1)
(103,70,1)
(97,158,1)
(20,113,1)
(187,36,1)
(83,251,1)
(56,127,1)
(15,40,1)
(189,165,1)
(170,5,1)
(161,35,1)
(240,211,1)
(136,69,1)
(138,275,1)
(169,227,1)
(9,134,1)
(118,174,1)
(112,184,1)
(165,200,1)
(215,184,1)
(157,210,1)
(5,191,1)
(195,250,1)
(18,40,1)
(85,143,1)
(60,172,1)
(230,47,1)
(90,202,1)
(135,118,1)
(166,127,1)
(223,234,1)
(141,130,1)
(3,84,1)
(78,42,1)
(247,75,1)
(105,197,1)
(3,171,1)
(189,75,1)
(73,273,1)
(69,179,1)
(88,279,1)
(275,173,1)
(44,37,1)
(194,90,1)
(25,143,1)
(142,51,1)
(144,119,1)
(15,18,1)
(252,2,1)
(109,220,1)
(211,228,1)
(276,179,1)
(38,79,1)
(42,214,1)
(40,154,1)
(205,65,1)
(38,16,1)
(226,102,1)
(174,101,1)
(200,7,1)
(145,146,1)
(170,179,1)
(239,137,1)
(223,31,1)
(219,270,1)
(215,58,1)
(245,263,1)
(274,185,1)
(24,262,1)
(192,231,1)
(13,220,1)
(77,71,1)
(151,212,1)
(59,195,1)
(258,60,1)
(16,179,1)
(202,114,1)
(162,1,1)
(160,257,1)
(244,226,1)
(87,179,1)
(223,33,1)
(39,42,1)
(86,33,1)
(271,124,1)
(136,150,1)
(58,213,1)
(148,223,1)
(238,127,1)
(114,170,1)
(143,257,1)
(247,7,1)
(198,163,1)
(220,195,1)
(153,19,1)
(102,168,1)
(137,11,1)
(82,278,1)
(37,98,1)
(231,109,1)
(213,98,1)
(235,138,1)
(90,114,1)
(129,38,1)
(261,192,1)
(219,155,1)
(199,187,1)
(155,151,1)
(19,152,1)
(279,52,1)
(223,217,1)
(221,249,1)
(53,50,1)
(98,257,1)
(71,58,2)
(155,151,2)
(80,210,2)
(227,11,2)
(20,58,2)
(3,58,2)
(265,274,2)
(165,210,2)
(175,11,2)
(98,257,2)
(184,58,2)
(141,136,2)
(61,58,2)
(138,275,2)
(238,127,2)
(170,179,2)
(161,11,2)
(199,58,2)
(37,11,2)
(190,58,2)
(123,184,2)
(63,58,2)
(62,58,2)
(276,58,2)
(82,58,2)
(185,274,2)
(127,224,2)
(11,127,2)
(19,179,2)
(15,58,2)
(151,179,2)
(247,210,2)
(127,162,2)
(38,16,2)
(210,75,2)
(261,58,2)
(183,19,2)
(256,11,2)
(92,15,2)
(148,167,2)
(210,58,2)
(214,58,2)
(33,126,2)
(235,58,2)
(224,110,2)
(223,73,2)
(279,58,2)
(77,58,2)
(238,11,2)
(223,217,2)
(223,177,2)
(24,58,2)
(42,214,2)
(104,210,2)
(23,58,2)
(54,58,2)
(83,162,2)
(227,238,2)
(223,203,2)
(140,58,2)
(224,162,2)
(233,276,2)
(6,274,2)
(206,210,2)
(159,58,2)
(141,58,2)
(251,162,2)
(130,58,2)
(112,184,2)
(76,92,2)
(220,58,2)
(128,58,2)
(239,11,2)
(174,58,2)
(208,162,2)
(266,58,2)
(67,58,2)
(56,11,2)
(186,58,2)
(39,58,2)
(272,25,2)
(131,58,2)
(191,58,2)
(148,64,2)
(35,11,2)
(276,179,2)
(45,179,2)
(150,58,2)
(213,11,2)
(56,127,2)
(58,11,2)
(274,185,2)
(231,109,2)
(214,179,2)
(111,184,2)
(125,58,2)
(187,183,2)
(128,233,2)
(101,58,2)
(248,184,2)
(101,74,2)
(53,204,2)
(9,184,2)
(153,58,2)
(0,58,2)
(136,69,2)
(52,58,2)
(184,160,2)
(155,58,2)
(8,184,2)
(42,58,2)
(93,179,2)
(47,58,2)
(126,58,2)
(219,58,2)
(183,58,2)
(110,162,2)
(32,58,2)
(228,121,2)
(192,58,2)
(258,210,2)
(179,272,2)
(142,58,2)
(5,58,2)
(223,52,2)
(110,83,2)
(73,58,2)
(69,179,2)
(207,58,2)
(151,58,2)
(137,11,2)
(268,11,2)
(160,184,2)
(106,58,2)
(162,179,2)
(185,257,2)
(223,33,2)
(216,11,2)
(209,58,2)
(7,210,2)
(234,58,2)
(68,58,2)
(125,210,2)
(204,97,2)
(129,38,2)
(136,58,2)
(19,58,2)
(195,179,2)
(93,11,2)
(134,184,2)
(189,58,2)
(25,143,2)
(223,159,2)
(154,58,2)
(114,58,2)
(210,104,2)
(90,114,2)
(187,58,2)
(181,169,2)
(14,58,2)
(50,58,2)
(9,50,2)
(53,184,2)
(156,58,2)
(275,58,2)
(255,58,2)
(144,274,2)
(104,58,2)
(171,58,2)
(7,240,2)
(203,58,2)
(213,98,2)
(118,58,2)
(237,194,2)
(12,58,2)
(223,11,2)
(222,11,2)
(145,58,2)
(132,184,2)
(120,58,2)
(223,51,2)
(272,100,2)
(44,11,2)
(119,274,2)
(36,58,2)
(171,179,2)
(173,45,2)
(148,223,2)
(165,75,2)
(67,3,2)
(129,58,2)
(75,58,2)
(15,40,2)
(55,11,2)
(167,11,2)
(157,210,2)
(115,58,2)
(224,176,2)
(87,11,2)
(173,58,2)
(72,58,2)
(233,58,2)
(220,195,2)
(271,179,2)
(262,219,2)
(53,50,2)
(139,126,2)
(158,184,2)
(40,179,2)
(40,58,2)
(160,257,2)
(147,58,2)
(124,162,2)
(250,58,2)
(35,257,2)
(184,184,2)
(169,227,2)
(196,162,2)
(68,184,2)
(202,58,2)
(88,58,2)
(267,274,2)
(219,155,2)
(135,58,2)
(177,274,2)
(78,58,2)
(69,58,2)
(240,228,2)
(263,58,2)
(182,274,2)
(84,58,2)
(237,184,2)
(64,162,2)
(270,58,2)
(152,58,2)
(211,210,2)
(213,181,2)
(105,11,2)
(70,274,2)
(215,58,2)
(59,58,2)
(269,11,2)
(246,11,2)
(262,58,2)
(223,234,2)
(198,58,2)
(21,58,2)
(113,58,2)
(35,181,2)
(228,206,2)
(275,173,2)
(163,58,2)
(78,42,2)
(166,11,2)
(206,247,2)
(146,58,2)
(133,58,2)
(49,162,2)
(107,184,2)
(97,184,2)
(74,221,2)
(3,171,2)
(169,11,2)
(278,58,2)
(96,58,2)
(117,58,2)
(195,58,2)
(98,11,2)
(223,20,2)
(43,58,2)
(16,58,2)
(51,58,2)
(138,58,2)
(223,123,2)
(11,162,2)
(221,58,2)
(247,75,2)
(139,274,2)
(194,90,2)
(97,237,2)
(184,50,2)
(109,220,2)
(48,58,2)
(241,162,2)
(65,58,2)
(76,58,2)
(194,58,2)
(221,198,2)
(204,184,2)
(86,274,2)
(74,58,2)
(23,210,2)
(87,179,2)
(197,58,2)
(2,58,2)
(33,274,2)
(274,126,2)
(274,274,2)
(79,58,2)
(212,58,2)
(217,58,2)
(264,58,2)
(116,58,2)
(143,257,2)
(178,58,2)
(189,210,2)
(92,58,2)
(252,274,2)
(245,58,2)
(225,11,2)
(106,184,2)
(223,135,2)
(278,67,2)
(103,274,2)
(172,210,2)
(223,60,2)
(228,210,2)
(47,141,2)
(147,128,2)
(123,50,2)
(60,75,2)
(29,58,2)
(223,43,2)
(104,257,2)
(22,274,2)
(230,58,2)
(114,170,2)
(193,58,2)
(34,58,2)
(243,78,2)
(38,58,2)
(83,257,2)
(198,179,2)
(170,58,2)
(182,58,2)
(199,187,2)
(13,58,2)
(185,58,2)
(252,58,2)
(18,58,2)
(111,58,2)
(166,127,2)
(90,58,2)
(45,58,2)
(210,210,2)
(60,210,2)
(2,274,2)
(16,179,2)
(31,11,2)
(109,58,2)
(243,58,2)
(160,58,2)
(177,126,2)
(273,58,2)
(240,210,2)
(236,11,2)
(201,11,2)
(237,53,2)
(274,58,2)
(231,58,2)
(247,7,2)
(149,58,2)
(200,210,2)
(271,162,2)
(205,58,2)
(94,58,2)
(181,11,2)
(253,58,2)
(249,58,2)
-----------------------------------
(0,qfprom_cdata)
(1,qfprom_cdata)
(2,i)
(3,qfprom_cdata[1] & MSM8916_S4_P1_MASK)
(4,for (i = 0; i < priv->num_sensors; i++)
(5,1)
(6,p2)
(7,p1[i] = (((base0)
(8,i)
(9,i++)
(10,dev)
(11,IS_ERR(qfprom_csel)
(12,MSM8916_S3_P1_SHIFT)
(13,MSM8916_S3_P2_SHIFT)
(14,break;)
(15,qfprom_cdata[1] & MSM8916_S3_P1_MASK)
(16,qfprom_cdata[0])
(17,qfprom_cdata)
(18,MSM8916_S3_P1_MASK)
(19,qfprom_cdata[0])
(20,p2[3])
(21,p2)
(22,p1)
(23,priv)
(24,p1)
(25,qfprom_read(priv->dev, "calib")
(26,base1)
(27,if (IS_ERR(qfprom_cdata)
(28,mode)
(29,p1)
(30,priv)
(31,0)
(32,base1)
(33,p2[i])
(34,MSM8916_S0_P2_MASK)
(35,compute_intercept_slope(priv, p1, p2, mode)
(36,MSM8916_S0_P1_SHIFT)
(37,"calibration mode is %d\\n")
(38,qfprom_cdata[0] & MSM8916_BASE0_MASK)
(39,MSM8916_S2_P2_SHIFT)
(40,qfprom_cdata[1])
(41,qfprom_cdata)
(42,qfprom_cdata[1] & MSM8916_S2_P2_MASK)
(43,p1[3])
(44,mode)
(45,qfprom_cdata[1])
(46,qfprom_csel)
(47,p2[1] = (qfprom_cdata[0] & MSM8916_S1_P2_MASK)
(48,MSM8916_S4_P2_SHIFT)
(49,qfprom_csel)
(50,i = 0)
(51,p1[0])
(52,p2[2])
(53,p2[i])
(54,0)
(55,MSM8916_CAL_SEL_MASK)
(56,PTR_ERR(qfprom_csel)
(57,base1)
(58,mode)
(59,MSM8916_S3_P2_MASK)
(60,p1[i])
(61,MSM8916_S1_P1_SHIFT)
(62,0)
(63,qfprom_cdata)
(64,return PTR_ERR(qfprom_cdata)
(65,qfprom_cdata)
(66,p1)
(67,(qfprom_cdata[1] & MSM8916_S4_P1_MASK)
(68,num_sensors)
(69,qfprom_cdata[0])
(70,p2[i] = 780)
(71,qfprom_cdata)
(72,4)
(73,p2[1])
(74,(qfprom_cdata[0] & MSM8916_S1_P1_MASK)
(75,i = 0)
(76,p1[3] = (qfprom_cdata[1] & MSM8916_S3_P1_MASK)
(77,0)
(78,(qfprom_cdata[1] & MSM8916_S2_P2_MASK)
(79,MSM8916_BASE0_MASK)
(80,i)
(81,0)
(82,i)
(83,priv->dev)
(84,MSM8916_S4_P1_MASK)
(85,"calib")
(86,780)
(87,kfree(qfprom_cdata)
(88,1)
(89,p2)
(90,(qfprom_cdata[1] & MSM8916_BASE1_MASK)
(91,case ONE_PT_CALIB2:)
(92,(qfprom_cdata[1] & MSM8916_S3_P1_MASK)
(93,kfree(qfprom_cdata)
(94,3)
(95,case TWO_PT_CALIB:)
(96,1)
(97,(base1 + p2[i])
(98,priv->dev)
(99,if (IS_ERR(qfprom_csel)
(100,u32 *)
(101,p1[1] = (qfprom_cdata[0] & MSM8916_S1_P1_MASK)
(102,mode)
(103,i)
(104,priv->num_sensors)
(105,priv)
(106,priv)
(107,base1)
(108,for (i = 0; i < priv->num_sensors; i++)
(109,(qfprom_cdata[1] & MSM8916_S3_P2_MASK)
(110,qfprom_read(priv->dev, "calib_sel")
(111,i)
(112,p2)
(113,3)
(114,qfprom_cdata[1] & MSM8916_BASE1_MASK)
(115,0)
(116,1)
(117,2)
(118,2)
(119,500)
(120,qfprom_cdata)
(121,base0)
(122,)
(123,p2[i])
(124,qfprom_cdata)
(125,num_sensors)
(126,i = 0)
(127,qfprom_csel = (u32 *)
(128,(qfprom_cdata[0] & MSM8916_S0_P2_MASK)
(129,base0 = (qfprom_cdata[0] & MSM8916_BASE0_MASK)
(130,MSM8916_S1_P2_SHIFT)
(131,i)
(132,i)
(133,qfprom_cdata)
(134,i)
(135,p1[2])
(136,qfprom_cdata[0] & MSM8916_S1_P2_MASK)
(137,mode)
(138,p2[4] = (qfprom_cdata[1] & MSM8916_S4_P2_MASK)
(139,i++)
(140,qfprom_cdata)
(141,(qfprom_cdata[0] & MSM8916_S1_P2_MASK)
(142,qfprom_cdata)
(143,priv->dev)
(144,p1[i] = 500)
(145,0)
(146,p2)
(147,p2[0] = (qfprom_cdata[0] & MSM8916_S0_P2_MASK)
(148,RET)
(149,qfprom_cdata)
(150,MSM8916_S1_P2_MASK)
(151,qfprom_cdata[0])
(152,0)
(153,MSM8916_S0_P1_MASK)
(154,1)
(155,qfprom_cdata[0] & MSM8916_S2_P1_MASK)
(156,MSM8916_S2_P2_MASK)
(157,p1)
(158,3)
(159,p2[0])
(160,priv->num_sensors)
(161,qfprom_cdata)
(162,IS_ERR(qfprom_cdata)
(163,0)
(164,i)
(165,i++)
(166,kfree(qfprom_csel)
(167,return PTR_ERR(qfprom_csel)
(168,base1 = 0)
(169,(qfprom_csel[0] & MSM8916_CAL_SEL_MASK)
(170,qfprom_cdata[1])
(171,qfprom_cdata[1])
(172,i)
(173,qfprom_cdata[1] & MSM8916_S4_P2_MASK)
(174,p1)
(175,0)
(176,u32 *)
(177,p1[i])
(178,MSM8916_S0_P2_SHIFT)
(179,qfprom_cdata = (u32 *)
(180,0)
(181,mode = (qfprom_csel[0] & MSM8916_CAL_SEL_MASK)
(182,num_sensors)
(183,qfprom_cdata[0] & MSM8916_S0_P1_MASK)
(184,i < priv->num_sensors)
(185,priv->num_sensors)
(186,MSM8916_BASE1_MASK)
(187,(qfprom_cdata[0] & MSM8916_S0_P1_MASK)
(188,default:)
(189,i)
(190,1)
(191,qfprom_cdata)
(192,p2)
(193,p1)
(194,base1 = (qfprom_cdata[1] & MSM8916_BASE1_MASK)
(195,qfprom_cdata[1])
(196,qfprom_csel)
(197,break;)
(198,qfprom_cdata[0])
(199,p1[0] = (qfprom_cdata[0] & MSM8916_S0_P1_MASK)
(200,i)
(201,p2)
(202,MSM8916_BASE1_SHIFT)
(203,p2[4])
(204,p2[i] = ((base1 + p2[i])
(205,0)
(206,+ p1[i])
(207,0)
(208,priv)
(209,MSM8916_S4_P2_MASK)
(210,i < priv->num_sensors)
(211,3)
(212,0)
(213,dev_dbg(priv->dev, "calibration mode is %d\\n", mode)
(214,qfprom_cdata[1])
(215,base0)
(216,qfprom_cdata)
(217,p1[1])
(218,for (i = 0; i < priv->num_sensors; i++)
(219,(qfprom_cdata[0] & MSM8916_S2_P1_MASK)
(220,qfprom_cdata[1] & MSM8916_S3_P2_MASK)
(221,qfprom_cdata[0] & MSM8916_S1_P1_MASK)
(222,qfprom_csel)
(223,return 0;)
(224,(u32 *)
(225,mode)
(226,0)
(227,qfprom_csel[0] & MSM8916_CAL_SEL_MASK)
(228,(base0)
(229,base0 = 0)
(230,p2)
(231,p2[3] = (qfprom_cdata[1] & MSM8916_S3_P2_MASK)
(232,base0)
(233,qfprom_cdata[0] & MSM8916_S0_P2_MASK)
(234,p1[4])
(235,i)
(236,p1)
(237,base1 + p2[i])
(238,qfprom_csel[0])
(239,qfprom_csel)
(240,((base0)
(241,"calib_sel")
(242,switch (mode)
(243,p2[2] = (qfprom_cdata[1] & MSM8916_S2_P2_MASK)
(244,mode = 0)
(245,0)
(246,dev)
(247,p1[i])
(248,p2)
(249,MSM8916_S1_P1_MASK)
(250,1)
(251,dev)
(252,priv)
(253,MSM8916_S2_P1_MASK)
(254,)
(255,p1)
(256,qfprom_csel)
(257,struct tsens_priv *priv)
(258,p1)
(259,)
(260,)
(261,4)
(262,p1[2] = (qfprom_cdata[0] & MSM8916_S2_P1_MASK)
(263,qfprom_cdata)
(264,MSM8916_S4_P1_SHIFT)
(265,i)
(266,p2)
(267,i)
(268,MSM8916_CAL_SEL_SHIFT)
(269,priv)
(270,MSM8916_S2_P1_SHIFT)
(271,PTR_ERR(qfprom_cdata)
(272,(u32 *)
(273,1)
(274,i < priv->num_sensors)
(275,(qfprom_cdata[1] & MSM8916_S4_P2_MASK)
(276,qfprom_cdata[0])
(277,base0)
(278,p1[4] = (qfprom_cdata[1] & MSM8916_S4_P1_MASK)
(279,qfprom_cdata)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^