-----label-----
0
-----code-----
static int ath3k_load_syscfg(struct usb_device *udev)
{
	unsigned char fw_state;
	char filename[ATH3K_NAME_LEN] = {0};
	const struct firmware *firmware;
	struct ath3k_version fw_version;
	int clk_value, ret;

	ret = ath3k_get_state(udev, &fw_state);
	if (ret < 0) {
		BT_ERR("Can't get state to change to load configuration err");
		return -EBUSY;
	}

	ret = ath3k_get_version(udev, &fw_version);
	if (ret < 0) {
		BT_ERR("Can't get version to change to load ram patch err");
		return ret;
	}

	switch (fw_version.ref_clock) {

	case ATH3K_XTAL_FREQ_26M:
		clk_value = 26;
		break;
	case ATH3K_XTAL_FREQ_40M:
		clk_value = 40;
		break;
	case ATH3K_XTAL_FREQ_19P2:
		clk_value = 19;
		break;
	default:
		clk_value = 0;
		break;
	}

	snprintf(filename, ATH3K_NAME_LEN, "ar3k/ramps_0x%08x_%d%s",
		le32_to_cpu(fw_version.rom_version), clk_value, ".dfu");

	ret = request_firmware(&firmware, filename, &udev->dev);
	if (ret < 0) {
		BT_ERR("Configuration file not found %s", filename);
		return ret;
	}

	ret = ath3k_load_fwfile(udev, firmware);
	release_firmware(firmware);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
12,13
13,14
13,15
15,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
42,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
53,54
55,56
57,58
58,59
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
67,68
67,69
68,69
71,72
72,73
73,74
75,76
76,77
76,78
77,78
79,80
79,81
79,82
80,81
82,83
84,85
85,86
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
101,102
101,103
102,103
102,104
103,104
106,107
106,108
106,109
106,110
106,111
106,112
106,113
106,114
106,115
106,116
106,117
106,118
107,108
108,109
110,111
111,112
111,113
112,113
116,117
117,118
119,120
120,121
120,122
121,122
125,126
126,127
128,129
129,130
129,131
130,131
135,136
136,137
136,138
137,138
141,142
142,143
142,144
142,145
142,146
142,147
142,148
142,149
143,144
145,146
147,148
150,151
150,152
151,152
153,154
153,155
154,155
157,158
160,161
161,162
161,163
162,163
164,165
164,166
164,167
164,168
165,166
167,168
168,169
170,171
172,173
173,174
173,175
174,175
177,178
177,179
178,179
178,180
179,180
182,183
182,184
183,184
184,185
184,186
184,187
185,186
188,189
190,191
191,192
193,194
194,195
194,196
195,196
197,198
197,199
197,200
198,199
200,201
202,203
204,205
205,206
205,207
206,207
208,209
210,211
211,212
-----nextToken-----
2,4,7,9,10,14,16,19,21,24,27,31,33,34,38,40,43,45,47,51,54,56,59,63,64,69,70,74,78,81,83,86,90,91,96,97,100,104,105,109,113,114,115,118,122,123,124,127,131,132,133,134,138,139,140,144,146,148,149,152,155,156,158,159,163,166,169,171,175,176,180,181,186,187,189,192,196,199,201,203,207,209,212
-----computeFrom-----
49,50
49,51
61,62
61,63
76,77
76,78
88,89
88,90
111,112
111,113
120,121
120,122
129,130
129,131
136,137
136,138
161,162
161,163
178,179
178,180
194,195
194,196
-----guardedBy-----
90,100
180,192
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int ath3k_load_syscfg(struct usb_device *udev){	unsigned char fw_state;	char filename[ATH3K_NAME_LEN] = {0};	const struct firmware *firmware;	struct ath3k_version fw_version;	int clk_value, ret;	ret = ath3k_get_state(udev, &fw_state);	if (ret < 0) {		BT_ERR("Can't get state to change to load configuration err");		return -EBUSY;	}	ret = ath3k_get_version(udev, &fw_version);	if (ret < 0) {		BT_ERR("Can't get version to change to load ram patch err");		return ret;	}	switch (fw_version.ref_clock) {	case ATH3K_XTAL_FREQ_26M:		clk_value = 26;		break;	case ATH3K_XTAL_FREQ_40M:		clk_value = 40;		break;	case ATH3K_XTAL_FREQ_19P2:		clk_value = 19;		break;	default:		clk_value = 0;		break;	}	snprintf(filename, ATH3K_NAME_LEN, "ar3k/ramps_0x%08x_%d%s",		le32_to_cpu(fw_version.rom_version), clk_value, ".dfu");	ret = request_firmware(&firmware, filename, &udev->dev);	if (ret < 0) {		BT_ERR("Configuration file not found %s", filename);		return ret;	}	ret = ath3k_load_fwfile(udev, firmware);	release_firmware(firmware);	return ret;}
static int
ath3k_load_syscfg(struct usb_device *udev)
ath3k_load_syscfg
struct usb_device *udev
struct usb_device
usb_device
*udev
*
udev
{	unsigned char fw_state;	char filename[ATH3K_NAME_LEN] = {0};	const struct firmware *firmware;	struct ath3k_version fw_version;	int clk_value, ret;	ret = ath3k_get_state(udev, &fw_state);	if (ret < 0) {		BT_ERR("Can't get state to change to load configuration err");		return -EBUSY;	}	ret = ath3k_get_version(udev, &fw_version);	if (ret < 0) {		BT_ERR("Can't get version to change to load ram patch err");		return ret;	}	switch (fw_version.ref_clock) {	case ATH3K_XTAL_FREQ_26M:		clk_value = 26;		break;	case ATH3K_XTAL_FREQ_40M:		clk_value = 40;		break;	case ATH3K_XTAL_FREQ_19P2:		clk_value = 19;		break;	default:		clk_value = 0;		break;	}	snprintf(filename, ATH3K_NAME_LEN, "ar3k/ramps_0x%08x_%d%s",		le32_to_cpu(fw_version.rom_version), clk_value, ".dfu");	ret = request_firmware(&firmware, filename, &udev->dev);	if (ret < 0) {		BT_ERR("Configuration file not found %s", filename);		return ret;	}	ret = ath3k_load_fwfile(udev, firmware);	release_firmware(firmware);	return ret;}
unsigned char fw_state;
unsigned char fw_state;
unsigned char
fw_state
fw_state
char filename[ATH3K_NAME_LEN] = {0};
char filename[ATH3K_NAME_LEN] = {0};
char
filename[ATH3K_NAME_LEN] = {0}
filename
[ATH3K_NAME_LEN]
ATH3K_NAME_LEN
ATH3K_NAME_LEN
= {0}
{0}
0
const struct firmware *firmware;
const struct firmware *firmware;
const struct firmware
firmware
*firmware
*
firmware
struct ath3k_version fw_version;
struct ath3k_version fw_version;
struct ath3k_version
ath3k_version
fw_version
fw_version
int clk_value, ret;
int clk_value, ret;
int
clk_value
clk_value
ret
ret
ret = ath3k_get_state(udev, &fw_state);
ret = ath3k_get_state(udev, &fw_state)
ret
ret
ath3k_get_state(udev, &fw_state)
ath3k_get_state
ath3k_get_state
udev
udev
&fw_state
fw_state
fw_state
if (ret < 0) {		BT_ERR("Can't get state to change to load configuration err");		return -EBUSY;	}
ret < 0
ret
ret
0
{		BT_ERR("Can't get state to change to load configuration err");		return -EBUSY;	}
BT_ERR("Can't get state to change to load configuration err");
BT_ERR("Can't get state to change to load configuration err")
BT_ERR
BT_ERR
"Can't get state to change to load configuration err"
return -EBUSY;
-EBUSY
EBUSY
EBUSY
ret = ath3k_get_version(udev, &fw_version);
ret = ath3k_get_version(udev, &fw_version)
ret
ret
ath3k_get_version(udev, &fw_version)
ath3k_get_version
ath3k_get_version
udev
udev
&fw_version
fw_version
fw_version
if (ret < 0) {		BT_ERR("Can't get version to change to load ram patch err");		return ret;	}
ret < 0
ret
ret
0
{		BT_ERR("Can't get version to change to load ram patch err");		return ret;	}
BT_ERR("Can't get version to change to load ram patch err");
BT_ERR("Can't get version to change to load ram patch err")
BT_ERR
BT_ERR
"Can't get version to change to load ram patch err"
return ret;
ret
ret
switch (fw_version.ref_clock) {	case ATH3K_XTAL_FREQ_26M:		clk_value = 26;		break;	case ATH3K_XTAL_FREQ_40M:		clk_value = 40;		break;	case ATH3K_XTAL_FREQ_19P2:		clk_value = 19;		break;	default:		clk_value = 0;		break;	}
fw_version.ref_clock
fw_version
fw_version
ref_clock
{	case ATH3K_XTAL_FREQ_26M:		clk_value = 26;		break;	case ATH3K_XTAL_FREQ_40M:		clk_value = 40;		break;	case ATH3K_XTAL_FREQ_19P2:		clk_value = 19;		break;	default:		clk_value = 0;		break;	}
case ATH3K_XTAL_FREQ_26M:
ATH3K_XTAL_FREQ_26M
ATH3K_XTAL_FREQ_26M
clk_value = 26;
clk_value = 26
clk_value
clk_value
26
break;
case ATH3K_XTAL_FREQ_40M:
ATH3K_XTAL_FREQ_40M
ATH3K_XTAL_FREQ_40M
clk_value = 40;
clk_value = 40
clk_value
clk_value
40
break;
case ATH3K_XTAL_FREQ_19P2:
ATH3K_XTAL_FREQ_19P2
ATH3K_XTAL_FREQ_19P2
clk_value = 19;
clk_value = 19
clk_value
clk_value
19
break;
default:
clk_value = 0;
clk_value = 0
clk_value
clk_value
0
break;
snprintf(filename, ATH3K_NAME_LEN, "ar3k/ramps_0x%08x_%d%s",		le32_to_cpu(fw_version.rom_version), clk_value, ".dfu");
snprintf(filename, ATH3K_NAME_LEN, "ar3k/ramps_0x%08x_%d%s",		le32_to_cpu(fw_version.rom_version), clk_value, ".dfu")
snprintf
snprintf
filename
filename
ATH3K_NAME_LEN
ATH3K_NAME_LEN
"ar3k/ramps_0x%08x_%d%s"
le32_to_cpu(fw_version.rom_version)
le32_to_cpu
le32_to_cpu
fw_version.rom_version
fw_version
fw_version
rom_version
clk_value
clk_value
".dfu"
ret = request_firmware(&firmware, filename, &udev->dev);
ret = request_firmware(&firmware, filename, &udev->dev)
ret
ret
request_firmware(&firmware, filename, &udev->dev)
request_firmware
request_firmware
&firmware
firmware
firmware
filename
filename
&udev->dev
udev->dev
udev
udev
dev
if (ret < 0) {		BT_ERR("Configuration file not found %s", filename);		return ret;	}
ret < 0
ret
ret
0
{		BT_ERR("Configuration file not found %s", filename);		return ret;	}
BT_ERR("Configuration file not found %s", filename);
BT_ERR("Configuration file not found %s", filename)
BT_ERR
BT_ERR
"Configuration file not found %s"
filename
filename
return ret;
ret
ret
ret = ath3k_load_fwfile(udev, firmware);
ret = ath3k_load_fwfile(udev, firmware)
ret
ret
ath3k_load_fwfile(udev, firmware)
ath3k_load_fwfile
ath3k_load_fwfile
udev
udev
firmware
firmware
release_firmware(firmware);
release_firmware(firmware)
release_firmware
release_firmware
firmware
firmware
return ret;
ret
ret
-----joern-----
(16,26,0)
(79,32,0)
(14,79,0)
(1,91,0)
(26,49,0)
(73,67,0)
(5,50,0)
(44,39,0)
(99,0,0)
(37,20,0)
(71,66,0)
(11,48,0)
(32,69,0)
(80,69,0)
(96,75,0)
(36,60,0)
(60,36,0)
(20,38,0)
(89,64,0)
(9,64,0)
(96,91,0)
(6,8,0)
(46,105,0)
(53,64,0)
(66,92,0)
(93,71,0)
(81,67,0)
(101,62,0)
(52,5,0)
(23,92,0)
(67,61,0)
(29,85,0)
(22,21,0)
(41,76,0)
(2,64,0)
(79,64,0)
(69,32,0)
(32,79,0)
(83,63,0)
(87,92,0)
(91,64,0)
(31,64,0)
(51,38,0)
(62,101,0)
(63,76,0)
(21,44,0)
(20,36,0)
(54,70,0)
(71,7,0)
(30,75,0)
(20,0,0)
(8,98,0)
(13,64,0)
(66,71,0)
(98,92,0)
(70,79,0)
(98,64,0)
(3,62,0)
(82,76,0)
(102,60,0)
(38,76,0)
(57,64,0)
(92,87,0)
(90,32,0)
(74,79,0)
(105,76,0)
(74,50,0)
(92,66,0)
(4,65,0)
(44,21,0)
(97,64,0)
(45,76,0)
(75,61,0)
(42,63,0)
(91,101,0)
(72,76,0)
(104,74,0)
(92,98,0)
(40,38,0)
(103,76,0)
(0,76,0)
(95,64,0)
(36,20,0)
(20,97,0)
(12,62,0)
(96,74,0)
(17,76,0)
(20,64,0)
(28,97,0)
(10,20,0)
(84,39,0)
(56,64,0)
(20,63,0)
(25,0,0)
(59,76,0)
(75,98,0)
(24,98,0)
(33,20,0)
(34,48,0)
(48,39,0)
(85,49,0)
(18,64,0)
(39,64,0)
(86,65,0)
(35,70,0)
(43,76,0)
(44,7,0)
(94,87,0)
(20,105,0)
(77,8,0)
(78,44,0)
(15,71,0)
(62,7,0)
(96,26,0)
(27,64,0)
(39,44,0)
(32,7,0)
(58,16,0)
(100,60,0)
(68,105,0)
(101,64,0)
(88,20,0)
(67,97,0)
(19,20,0)
(47,101,0)
(55,13,0)
(92,97,0)
(51,65,1)
(25,65,1)
(85,29,1)
(16,58,1)
(21,22,1)
(4,70,1)
(32,69,1)
(0,99,1)
(74,79,1)
(22,78,1)
(20,36,1)
(48,11,1)
(11,34,1)
(23,87,1)
(93,23,1)
(77,98,1)
(81,8,1)
(33,103,1)
(6,77,1)
(68,46,1)
(105,68,1)
(38,40,1)
(82,63,1)
(52,70,1)
(33,72,1)
(8,98,1)
(71,7,1)
(42,65,1)
(35,54,1)
(26,16,1)
(84,97,1)
(40,51,1)
(66,71,1)
(45,0,1)
(67,73,1)
(75,30,1)
(63,83,1)
(74,104,1)
(29,48,1)
(99,25,1)
(3,47,1)
(5,52,1)
(30,67,1)
(91,1,1)
(14,48,1)
(79,32,1)
(48,39,1)
(70,35,1)
(44,21,1)
(20,97,1)
(67,97,1)
(72,105,1)
(24,20,1)
(20,105,1)
(10,37,1)
(34,39,1)
(103,38,1)
(58,85,1)
(96,26,1)
(70,79,1)
(98,92,1)
(36,60,1)
(92,66,1)
(96,74,1)
(78,84,1)
(20,0,1)
(33,45,1)
(60,100,1)
(44,7,1)
(62,12,1)
(86,4,1)
(33,82,1)
(12,3,1)
(90,14,1)
(87,94,1)
(37,33,1)
(104,5,1)
(20,38,1)
(1,13,1)
(47,8,1)
(83,42,1)
(88,36,1)
(96,91,1)
(15,93,1)
(100,102,1)
(65,86,1)
(96,75,1)
(46,65,1)
(91,101,1)
(69,80,1)
(92,97,1)
(54,79,1)
(20,19,1)
(102,10,1)
(13,55,1)
(97,28,1)
(92,87,1)
(55,101,1)
(75,98,1)
(8,6,1)
(32,7,1)
(62,7,1)
(71,15,1)
(101,62,1)
(73,81,1)
(19,88,1)
(94,24,1)
(80,90,1)
(39,44,1)
(20,63,1)
(8,98,2)
(82,65,2)
(33,70,2)
(32,48,2)
(38,65,2)
(24,70,2)
(100,70,2)
(71,7,2)
(66,70,2)
(96,74,2)
(92,87,2)
(90,48,2)
(63,65,2)
(101,8,2)
(98,70,2)
(101,62,2)
(92,70,2)
(58,48,2)
(79,32,2)
(75,98,2)
(71,70,2)
(8,70,2)
(80,48,2)
(69,48,2)
(85,48,2)
(94,70,2)
(3,8,2)
(37,70,2)
(74,79,2)
(83,65,2)
(79,48,2)
(96,26,2)
(20,105,2)
(1,8,2)
(92,66,2)
(44,7,2)
(5,70,2)
(42,65,2)
(102,70,2)
(70,79,2)
(88,70,2)
(46,65,2)
(72,65,2)
(74,70,2)
(55,8,2)
(19,70,2)
(20,70,2)
(92,97,2)
(62,8,2)
(99,65,2)
(25,65,2)
(14,48,2)
(20,38,2)
(44,21,2)
(91,101,2)
(39,44,2)
(23,70,2)
(67,97,2)
(60,70,2)
(75,8,2)
(65,70,2)
(26,48,2)
(96,91,2)
(87,70,2)
(81,8,2)
(73,8,2)
(52,70,2)
(30,8,2)
(36,70,2)
(4,70,2)
(6,70,2)
(68,65,2)
(103,65,2)
(66,71,2)
(91,8,2)
(36,60,2)
(105,65,2)
(32,69,2)
(47,8,2)
(93,70,2)
(32,7,2)
(45,65,2)
(48,39,2)
(104,70,2)
(40,65,2)
(67,8,2)
(62,7,2)
(20,36,2)
(20,97,2)
(20,63,2)
(0,65,2)
(98,92,2)
(12,8,2)
(54,48,2)
(29,48,2)
(51,65,2)
(10,70,2)
(96,75,2)
(13,8,2)
(35,48,2)
(15,70,2)
(77,70,2)
(16,48,2)
(86,70,2)
(20,0,2)
(70,48,2)
-----------------------------------
(0,clk_value = 19)
(1,ret)
(2,if (ret < 0)
(3,udev)
(4,fw_version)
(5,BT_ERR("Can\'t get version to change to load ram patch err")
(6,0)
(7,struct usb_device *udev)
(8,ret < 0)
(9,if (ret < 0)
(10,"ar3k/ramps_0x%08x_%d%s")
(11,0)
(12,firmware)
(13,release_firmware(firmware)
(14,ret)
(15,dev)
(16,-EBUSY)
(17,case ATH3K_XTAL_FREQ_19P2:)
(18,if (ret < 0)
(19,".dfu")
(20,snprintf(filename, ATH3K_NAME_LEN, "ar3k/ramps_0x%08x_%d%s",\n\\n\\t\\tle32_to_cpu(fw_version.rom_version)
(21,&fw_state)
(22,fw_state)
(23,filename)
(24,ret)
(25,clk_value)
(26,return -EBUSY;)
(27,filename)
(28,filename)
(29,"Can\'t get state to change to load configuration err")
(30,ret)
(31,fw_state)
(32,ath3k_get_version(udev, &fw_version)
(33,filename)
(34,ret)
(35,0)
(36,le32_to_cpu(fw_version.rom_version)
(37,ATH3K_NAME_LEN)
(38,clk_value = 40)
(39,ret = ath3k_get_state(udev, &fw_state)
(40,40)
(41,case ATH3K_XTAL_FREQ_26M:)
(42,clk_value)
(43,case ATH3K_XTAL_FREQ_40M:)
(44,ath3k_get_state(udev, &fw_state)
(45,break;)
(46,clk_value)
(47,ret)
(48,ret < 0)
(49,)
(50,)
(51,clk_value)
(52,"Can\'t get version to change to load ram patch err")
(53,firmware)
(54,ret)
(55,firmware)
(56,ret)
(57,clk_value)
(58,EBUSY)
(59,default:)
(60,fw_version.rom_version)
(61,)
(62,ath3k_load_fwfile(udev, firmware)
(63,clk_value = 26)
(64,)
(65,fw_version.ref_clock)
(66,&udev->dev)
(67,BT_ERR("Configuration file not found %s", filename)
(68,0)
(69,&fw_version)
(70,ret < 0)
(71,udev->dev)
(72,break;)
(73,filename)
(74,return ret;)
(75,return ret;)
(76,)
(77,ret)
(78,udev)
(79,ret = ath3k_get_version(udev, &fw_version)
(80,fw_version)
(81,"Configuration file not found %s")
(82,break;)
(83,26)
(84,ret)
(85,BT_ERR("Can\'t get state to change to load configuration err")
(86,ref_clock)
(87,&firmware)
(88,clk_value)
(89,fw_version)
(90,udev)
(91,return ret;)
(92,request_firmware(&firmware, filename, &udev->dev)
(93,udev)
(94,firmware)
(95,switch (fw_version.ref_clock)
(96,RET)
(97,filename[ATH3K_NAME_LEN] = {0})
(98,ret = request_firmware(&firmware, filename, &udev->dev)
(99,19)
(100,rom_version)
(101,ret = ath3k_load_fwfile(udev, firmware)
(102,fw_version)
(103,break;)
(104,ret)
(105,clk_value = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^