-----label-----
1
-----code-----
void native_machine_shutdown(void)
{
	/* Stop the cpus and apics */
#ifdef CONFIG_SMP

	/* The boot cpu is always logical cpu 0 */
	int reboot_cpu_id = 0;
#endif

#ifdef CONFIG_X86_IO_APIC
	disable_IO_APIC();
#endif

#ifdef CONFIG_SMP

#ifdef CONFIG_X86_32
	/* See if there has been given a command line override */
	if ((reboot_cpu != -1) && (reboot_cpu < nr_cpu_ids) &&
		cpu_online(reboot_cpu))
		reboot_cpu_id = reboot_cpu;
#endif

	/* Make certain the cpu I'm about to reboot on is online */
	if (!cpu_online(reboot_cpu_id))
		reboot_cpu_id = smp_processor_id();

	/* Make certain I only run on the appropriate processor */
	set_cpus_allowed_ptr(current, cpumask_of(reboot_cpu_id));

	/* O.K Now that I'm on the appropriate processor,
	 * stop all of the others.
	 */
	stop_other_cpus();
#endif

	lapic_shutdown();

#ifdef CONFIG_HPET_TIMER
	hpet_disable();
#endif

#ifdef CONFIG_X86_64
	x86_platform.iommu_shutdown();
#endif
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
10,11
11,12
12,13
-----nextToken-----
2,4,6,8,13
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void native_machine_shutdown(void){	/* Stop the cpus and apics */#ifdef CONFIG_SMP	/* The boot cpu is always logical cpu 0 */	int reboot_cpu_id = 0;#endif#ifdef CONFIG_X86_IO_APIC	disable_IO_APIC();#endif#ifdef CONFIG_SMP#ifdef CONFIG_X86_32	/* See if there has been given a command line override */	if ((reboot_cpu != -1) && (reboot_cpu < nr_cpu_ids) &&		cpu_online(reboot_cpu))		reboot_cpu_id = reboot_cpu;#endif	/* Make certain the cpu I'm about to reboot on is online */	if (!cpu_online(reboot_cpu_id))		reboot_cpu_id = smp_processor_id();	/* Make certain I only run on the appropriate processor */	set_cpus_allowed_ptr(current, cpumask_of(reboot_cpu_id));	/* O.K Now that I'm on the appropriate processor,	 * stop all of the others.	 */	stop_other_cpus();#endif	lapic_shutdown();#ifdef CONFIG_HPET_TIMER	hpet_disable();#endif#ifdef CONFIG_X86_64	x86_platform.iommu_shutdown();#endif}
void
native_machine_shutdown(void)
native_machine_shutdown
void
void


{	/* Stop the cpus and apics */#ifdef CONFIG_SMP	/* The boot cpu is always logical cpu 0 */	int reboot_cpu_id = 0;#endif#ifdef CONFIG_X86_IO_APIC	disable_IO_APIC();#endif#ifdef CONFIG_SMP#ifdef CONFIG_X86_32	/* See if there has been given a command line override */	if ((reboot_cpu != -1) && (reboot_cpu < nr_cpu_ids) &&		cpu_online(reboot_cpu))		reboot_cpu_id = reboot_cpu;#endif	/* Make certain the cpu I'm about to reboot on is online */	if (!cpu_online(reboot_cpu_id))		reboot_cpu_id = smp_processor_id();	/* Make certain I only run on the appropriate processor */	set_cpus_allowed_ptr(current, cpumask_of(reboot_cpu_id));	/* O.K Now that I'm on the appropriate processor,	 * stop all of the others.	 */	stop_other_cpus();#endif	lapic_shutdown();#ifdef CONFIG_HPET_TIMER	hpet_disable();#endif#ifdef CONFIG_X86_64	x86_platform.iommu_shutdown();#endif}
lapic_shutdown();
lapic_shutdown()
lapic_shutdown
lapic_shutdown
-----joern-----
(8,12,0)
(2,13,0)
(9,5,0)
(10,5,1)
(1,2,1)
(0,12,1)
-----------------------------------
(0,disable_IO_APIC()
(1,reboot_cpu_id)
(2,current)
(3,-1)
(4,if ((reboot_cpu != -1)
(5,reboot_cpu_id = reboot_cpu)
(6,nr_cpu_ids)
(7,smp_processor_id()
(8,reboot_cpu_id)
(9,reboot_cpu_id)
(10,reboot_cpu_id)
(11,RET)
(12,reboot_cpu_id = 0)
(13,set_cpus_allowed_ptr(current, cpumask_of(reboot_cpu_id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^