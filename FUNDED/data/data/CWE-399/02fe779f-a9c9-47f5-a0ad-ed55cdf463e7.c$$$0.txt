-----label-----
1
-----code-----
static int
aha_isa_attach(device_t dev)
{
	struct	aha_softc *aha = device_get_softc(dev);
	bus_dma_filter_t *filter;
	void		 *filter_arg;
	bus_addr_t	 lowaddr;
	void		 *ih;
	int		 error;

	aha->dev = dev;
	aha->portrid = 0;
	aha->port = bus_alloc_resource(dev, SYS_RES_IOPORT, &aha->portrid,
	    0, ~0, AHA_NREGS, RF_ACTIVE);
	if (!aha->port) {
		device_printf(dev, "Unable to allocate I/O ports\n");
		return ENOMEM;
	}

	aha->irqrid = 0;
	aha->irq = bus_alloc_resource_any(dev, SYS_RES_IRQ, &aha->irqrid,
	    RF_ACTIVE);
	if (!aha->irq) {
		device_printf(dev, "Unable to allocate excluse use of irq\n");
		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,
		    aha->port);
		return ENOMEM;
	}

	aha->drqrid = 0;
	aha->drq = bus_alloc_resource_any(dev, SYS_RES_DRQ, &aha->drqrid,
	    RF_ACTIVE);
	if (!aha->drq) {
		device_printf(dev, "Unable to allocate drq\n");
		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,
		    aha->port);
		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
		return ENOMEM;
	}

#if 0				/* is the drq ever unset? */
	if (dev->id_drq != -1)
		isa_dmacascade(dev->id_drq);
#endif
	isa_dmacascade(rman_get_start(aha->drq));

	/* Allocate our parent dmatag */
	filter = NULL;
	filter_arg = NULL;
	lowaddr = BUS_SPACE_MAXADDR_24BIT;

	if (bus_dma_tag_create(	/* parent	*/ NULL,
				/* alignemnt	*/ 1,
				/* boundary	*/ 0,
				/* lowaddr	*/ lowaddr,
				/* highaddr	*/ BUS_SPACE_MAXADDR,
				/* filter	*/ filter,
				/* filterarg	*/ filter_arg,
				/* maxsize	*/ BUS_SPACE_MAXSIZE_24BIT,
				/* nsegments	*/ ~0,
				/* maxsegsz	*/ BUS_SPACE_MAXSIZE_24BIT,
				/* flags	*/ 0,
				/* lockfunc	*/ busdma_lock_mutex,
				/* lockarg	*/ &Giant,
				&aha->parent_dmat) != 0) {
		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,
		    aha->port);
		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);
		aha_free(aha);
		return (ENOMEM);
	}

	if (aha_init(aha)) {
		device_printf(dev, "init failed\n");
		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,
		    aha->port);
		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);
		aha_free(aha);
		return (ENOMEM);
	}
	/*
	 * The 1542A and B look the same.  So we guess based on
	 * the firmware revision.  It appears that only rev 0 is on
	 * the A cards.
	 */
	if (aha->boardid <= BOARD_1542 && aha->fw_major == 0) {
		device_printf(dev, "154xA may not work\n");
		aha->ccb_sg_opcode = INITIATOR_SG_CCB;
		aha->ccb_ccb_opcode = INITIATOR_CCB;
	}

	error = aha_attach(aha);
	if (error) {
		device_printf(dev, "attach failed\n");
		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,
		    aha->port);
		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);
		aha_free(aha);
		return (error);
	}

	error = bus_setup_intr(dev, aha->irq, INTR_TYPE_CAM|INTR_ENTROPY,
	    aha_intr, aha, &ih);
	if (error) {
		device_printf(dev, "Unable to register interrupt handler\n");
		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,
		    aha->port);
		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);
		aha_free(aha);
		return (error);
	}

	return (0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
10,23
10,24
10,25
10,26
10,27
10,28
10,29
10,30
10,31
10,32
10,33
10,34
10,35
10,36
10,37
10,38
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
31,32
32,33
32,34
34,35
34,36
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
46,47
46,48
49,50
50,51
50,52
52,53
54,55
55,56
55,57
56,57
56,58
57,58
60,61
62,63
63,64
63,65
64,65
64,66
65,66
69,70
70,71
70,72
71,72
71,73
72,73
75,76
75,77
75,78
75,79
75,80
75,81
75,82
75,83
76,77
78,79
80,81
82,83
83,84
83,85
84,85
88,89
90,91
92,93
94,95
94,96
95,96
96,97
96,98
97,98
100,101
100,102
101,102
102,103
102,104
102,105
103,104
105,106
108,109
109,110
111,112
112,113
112,114
113,114
113,115
114,115
118,119
119,120
119,121
120,121
120,122
121,122
124,125
124,126
124,127
124,128
124,129
125,126
127,128
129,130
131,132
132,133
132,134
133,134
136,137
138,139
138,140
139,140
140,141
140,142
141,142
144,145
144,146
144,147
145,146
146,147
146,148
146,149
147,148
149,150
152,153
153,154
153,155
153,156
153,157
153,158
154,155
156,157
158,159
160,161
160,162
161,162
164,165
164,166
165,166
168,169
169,170
171,172
172,173
172,174
173,174
173,175
174,175
178,179
179,180
179,181
180,181
180,182
181,182
184,185
184,186
184,187
184,188
184,189
185,186
187,188
189,190
191,192
192,193
192,194
193,194
196,197
198,199
198,200
199,200
200,201
200,202
201,202
204,205
204,206
204,207
204,208
205,206
206,207
206,208
206,209
207,208
209,210
212,213
213,214
213,215
213,216
213,217
213,218
214,215
216,217
218,219
220,221
220,222
221,222
224,225
224,226
225,226
228,229
229,230
229,231
229,232
229,233
229,234
230,231
232,233
234,235
236,237
236,238
237,238
240,241
240,242
241,242
244,245
245,246
247,248
248,249
248,250
249,250
251,252
251,253
252,253
254,255
254,256
255,256
258,259
259,260
259,261
260,261
262,263
264,265
265,266
265,267
266,267
268,269
270,271
271,272
271,273
272,273
274,275
276,277
276,278
277,278
277,279
278,279
278,280
278,281
278,282
278,283
278,284
278,285
278,286
278,287
278,288
278,289
278,290
278,291
278,292
278,293
279,280
281,282
285,286
287,288
289,290
291,292
293,294
295,296
297,298
300,301
302,303
303,304
305,306
306,307
306,308
307,308
311,312
311,313
311,314
311,315
311,316
312,313
313,314
313,315
313,316
313,317
313,318
314,315
316,317
318,319
320,321
320,322
321,322
324,325
324,326
325,326
328,329
329,330
329,331
329,332
329,333
329,334
330,331
332,333
334,335
336,337
336,338
337,338
340,341
340,342
341,342
344,345
345,346
345,347
345,348
345,349
345,350
346,347
348,349
350,351
352,353
352,354
353,354
356,357
356,358
357,358
360,361
361,362
361,363
362,363
364,365
366,367
367,368
368,369
370,371
370,372
371,372
371,373
372,373
374,375
376,377
376,378
376,379
376,380
376,381
376,382
377,378
378,379
378,380
378,381
379,380
381,382
384,385
385,386
385,387
385,388
385,389
385,390
386,387
388,389
390,391
392,393
392,394
393,394
396,397
396,398
397,398
400,401
401,402
401,403
401,404
401,405
401,406
402,403
404,405
406,407
408,409
408,410
409,410
412,413
412,414
413,414
416,417
417,418
417,419
417,420
417,421
417,422
418,419
420,421
422,423
424,425
424,426
425,426
428,429
428,430
429,430
432,433
433,434
433,435
434,435
436,437
438,439
439,440
440,441
442,443
442,444
443,444
443,445
444,445
444,446
445,446
445,447
446,447
449,450
451,452
451,453
452,453
452,454
453,454
457,458
457,459
457,460
458,459
459,460
459,461
459,462
460,461
462,463
465,466
466,467
466,468
467,468
467,469
468,469
471,472
473,474
474,475
474,476
475,476
475,477
476,477
479,480
481,482
482,483
482,484
483,484
485,486
485,487
486,487
488,489
490,491
490,492
491,492
493,494
493,495
493,496
493,497
493,498
493,499
494,495
495,496
495,497
495,498
496,497
498,499
501,502
502,503
502,504
502,505
502,506
502,507
503,504
505,506
507,508
509,510
509,511
510,511
513,514
513,515
514,515
517,518
518,519
518,520
518,521
518,522
518,523
519,520
521,522
523,524
525,526
525,527
526,527
529,530
529,531
530,531
533,534
534,535
534,536
534,537
534,538
534,539
535,536
537,538
539,540
541,542
541,543
542,543
545,546
545,547
546,547
549,550
550,551
550,552
551,552
553,554
555,556
556,557
557,558
559,560
560,561
560,562
561,562
563,564
563,565
563,566
563,567
563,568
563,569
563,570
564,565
566,567
568,569
568,570
569,570
572,573
572,574
573,574
575,576
577,578
579,580
581,582
582,583
584,585
584,586
585,586
587,588
587,589
587,590
587,591
587,592
587,593
588,589
589,590
589,591
589,592
590,591
592,593
595,596
596,597
596,598
596,599
596,600
596,601
597,598
599,600
601,602
603,604
603,605
604,605
607,608
607,609
608,609
611,612
612,613
612,614
612,615
612,616
612,617
613,614
615,616
617,618
619,620
619,621
620,621
623,624
623,625
624,625
627,628
628,629
628,630
628,631
628,632
628,633
629,630
631,632
633,634
635,636
635,637
636,637
639,640
639,641
640,641
643,644
644,645
644,646
645,646
647,648
649,650
650,651
651,652
653,654
654,655
-----nextToken-----
2,4,7,9,14,16,17,21,23,27,29,30,33,35,36,40,42,45,47,48,51,53,58,59,61,66,67,68,73,74,77,79,81,85,86,87,89,91,93,98,99,104,106,107,110,115,116,117,122,123,126,128,130,134,135,137,142,143,148,150,151,155,157,159,162,163,166,167,170,175,176,177,182,183,186,188,190,194,195,197,202,203,208,210,211,215,217,219,222,223,226,227,231,233,235,238,239,242,243,246,250,253,256,257,261,263,267,269,273,275,280,282,283,284,286,288,290,292,294,296,298,299,301,304,308,309,310,315,317,319,322,323,326,327,331,333,335,338,339,342,343,347,349,351,354,355,358,359,363,365,369,373,375,380,382,383,387,389,391,394,395,398,399,403,405,407,410,411,414,415,419,421,423,426,427,430,431,435,437,441,447,448,450,454,455,456,461,463,464,469,470,472,477,478,480,484,487,489,492,497,499,500,504,506,508,511,512,515,516,520,522,524,527,528,531,532,536,538,540,543,544,547,548,552,554,558,562,565,567,570,571,574,576,578,580,583,586,591,593,594,598,600,602,605,606,609,610,614,616,618,621,622,625,626,630,632,634,637,638,641,642,646,648,652,655
-----computeFrom-----
55,56
55,57
63,64
63,65
70,71
70,72
112,113
112,114
119,120
119,121
172,173
172,174
179,180
179,181
259,260
259,261
265,266
265,267
271,272
271,273
277,278
277,279
443,444
443,445
444,445
444,446
451,452
451,453
466,467
466,468
474,475
474,476
482,483
482,484
560,561
560,562
572,573
572,574
-----guardedBy-----
308,365
454,477
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;LiteralExpression;
-----ast_node-----
static intaha_isa_attach(device_t dev){	struct	aha_softc *aha = device_get_softc(dev);	bus_dma_filter_t *filter;	void		 *filter_arg;	bus_addr_t	 lowaddr;	void		 *ih;	int		 error;	aha->dev = dev;	aha->portrid = 0;	aha->port = bus_alloc_resource(dev, SYS_RES_IOPORT, &aha->portrid,	    0, ~0, AHA_NREGS, RF_ACTIVE);	if (!aha->port) {		device_printf(dev, "Unable to allocate I/O ports\n");		return ENOMEM;	}	aha->irqrid = 0;	aha->irq = bus_alloc_resource_any(dev, SYS_RES_IRQ, &aha->irqrid,	    RF_ACTIVE);	if (!aha->irq) {		device_printf(dev, "Unable to allocate excluse use of irq\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		return ENOMEM;	}	aha->drqrid = 0;	aha->drq = bus_alloc_resource_any(dev, SYS_RES_DRQ, &aha->drqrid,	    RF_ACTIVE);	if (!aha->drq) {		device_printf(dev, "Unable to allocate drq\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		return ENOMEM;	}#if 0				/* is the drq ever unset? */	if (dev->id_drq != -1)		isa_dmacascade(dev->id_drq);#endif	isa_dmacascade(rman_get_start(aha->drq));	/* Allocate our parent dmatag */	filter = NULL;	filter_arg = NULL;	lowaddr = BUS_SPACE_MAXADDR_24BIT;	if (bus_dma_tag_create(	/* parent	*/ NULL,				/* alignemnt	*/ 1,				/* boundary	*/ 0,				/* lowaddr	*/ lowaddr,				/* highaddr	*/ BUS_SPACE_MAXADDR,				/* filter	*/ filter,				/* filterarg	*/ filter_arg,				/* maxsize	*/ BUS_SPACE_MAXSIZE_24BIT,				/* nsegments	*/ ~0,				/* maxsegsz	*/ BUS_SPACE_MAXSIZE_24BIT,				/* flags	*/ 0,				/* lockfunc	*/ busdma_lock_mutex,				/* lockarg	*/ &Giant,				&aha->parent_dmat) != 0) {		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (ENOMEM);	}	if (aha_init(aha)) {		device_printf(dev, "init failed\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (ENOMEM);	}	/*	 * The 1542A and B look the same.  So we guess based on	 * the firmware revision.  It appears that only rev 0 is on	 * the A cards.	 */	if (aha->boardid <= BOARD_1542 && aha->fw_major == 0) {		device_printf(dev, "154xA may not work\n");		aha->ccb_sg_opcode = INITIATOR_SG_CCB;		aha->ccb_ccb_opcode = INITIATOR_CCB;	}	error = aha_attach(aha);	if (error) {		device_printf(dev, "attach failed\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (error);	}	error = bus_setup_intr(dev, aha->irq, INTR_TYPE_CAM|INTR_ENTROPY,	    aha_intr, aha, &ih);	if (error) {		device_printf(dev, "Unable to register interrupt handler\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (error);	}	return (0);}
static int
aha_isa_attach(device_t dev)
aha_isa_attach
device_t dev
device_t
device_t
dev
dev
{	struct	aha_softc *aha = device_get_softc(dev);	bus_dma_filter_t *filter;	void		 *filter_arg;	bus_addr_t	 lowaddr;	void		 *ih;	int		 error;	aha->dev = dev;	aha->portrid = 0;	aha->port = bus_alloc_resource(dev, SYS_RES_IOPORT, &aha->portrid,	    0, ~0, AHA_NREGS, RF_ACTIVE);	if (!aha->port) {		device_printf(dev, "Unable to allocate I/O ports\n");		return ENOMEM;	}	aha->irqrid = 0;	aha->irq = bus_alloc_resource_any(dev, SYS_RES_IRQ, &aha->irqrid,	    RF_ACTIVE);	if (!aha->irq) {		device_printf(dev, "Unable to allocate excluse use of irq\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		return ENOMEM;	}	aha->drqrid = 0;	aha->drq = bus_alloc_resource_any(dev, SYS_RES_DRQ, &aha->drqrid,	    RF_ACTIVE);	if (!aha->drq) {		device_printf(dev, "Unable to allocate drq\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		return ENOMEM;	}#if 0				/* is the drq ever unset? */	if (dev->id_drq != -1)		isa_dmacascade(dev->id_drq);#endif	isa_dmacascade(rman_get_start(aha->drq));	/* Allocate our parent dmatag */	filter = NULL;	filter_arg = NULL;	lowaddr = BUS_SPACE_MAXADDR_24BIT;	if (bus_dma_tag_create(	/* parent	*/ NULL,				/* alignemnt	*/ 1,				/* boundary	*/ 0,				/* lowaddr	*/ lowaddr,				/* highaddr	*/ BUS_SPACE_MAXADDR,				/* filter	*/ filter,				/* filterarg	*/ filter_arg,				/* maxsize	*/ BUS_SPACE_MAXSIZE_24BIT,				/* nsegments	*/ ~0,				/* maxsegsz	*/ BUS_SPACE_MAXSIZE_24BIT,				/* flags	*/ 0,				/* lockfunc	*/ busdma_lock_mutex,				/* lockarg	*/ &Giant,				&aha->parent_dmat) != 0) {		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (ENOMEM);	}	if (aha_init(aha)) {		device_printf(dev, "init failed\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (ENOMEM);	}	/*	 * The 1542A and B look the same.  So we guess based on	 * the firmware revision.  It appears that only rev 0 is on	 * the A cards.	 */	if (aha->boardid <= BOARD_1542 && aha->fw_major == 0) {		device_printf(dev, "154xA may not work\n");		aha->ccb_sg_opcode = INITIATOR_SG_CCB;		aha->ccb_ccb_opcode = INITIATOR_CCB;	}	error = aha_attach(aha);	if (error) {		device_printf(dev, "attach failed\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (error);	}	error = bus_setup_intr(dev, aha->irq, INTR_TYPE_CAM|INTR_ENTROPY,	    aha_intr, aha, &ih);	if (error) {		device_printf(dev, "Unable to register interrupt handler\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (error);	}	return (0);}
struct	aha_softc *aha = device_get_softc(dev);
struct	aha_softc *aha = device_get_softc(dev);
struct	aha_softc
aha_softc
*aha = device_get_softc(dev)
*
aha
= device_get_softc(dev)
device_get_softc(dev)
device_get_softc
device_get_softc
dev
dev
bus_dma_filter_t *filter;
bus_dma_filter_t *filter;
bus_dma_filter_t
bus_dma_filter_t
*filter
*
filter
void		 *filter_arg;
void		 *filter_arg;
void
*filter_arg
*
filter_arg
bus_addr_t	 lowaddr;
bus_addr_t	 lowaddr;
bus_addr_t
bus_addr_t
lowaddr
lowaddr
void		 *ih;
void		 *ih;
void
*ih
*
ih
int		 error;
int		 error;
int
error
error
aha->dev = dev;
aha->dev = dev
aha->dev
aha
aha
dev
dev
dev
aha->portrid = 0;
aha->portrid = 0
aha->portrid
aha
aha
portrid
0
aha->port = bus_alloc_resource(dev, SYS_RES_IOPORT, &aha->portrid,	    0, ~0, AHA_NREGS, RF_ACTIVE);
aha->port = bus_alloc_resource(dev, SYS_RES_IOPORT, &aha->portrid,	    0, ~0, AHA_NREGS, RF_ACTIVE)
aha->port
aha
aha
port
bus_alloc_resource(dev, SYS_RES_IOPORT, &aha->portrid,	    0, ~0, AHA_NREGS, RF_ACTIVE)
bus_alloc_resource
bus_alloc_resource
dev
dev
SYS_RES_IOPORT
SYS_RES_IOPORT
&aha->portrid
aha->portrid
aha
aha
portrid
0
~0
0
AHA_NREGS
AHA_NREGS
RF_ACTIVE
RF_ACTIVE
if (!aha->port) {		device_printf(dev, "Unable to allocate I/O ports\n");		return ENOMEM;	}
!aha->port
aha->port
aha
aha
port
{		device_printf(dev, "Unable to allocate I/O ports\n");		return ENOMEM;	}
device_printf(dev, "Unable to allocate I/O ports\n");
device_printf(dev, "Unable to allocate I/O ports\n")
device_printf
device_printf
dev
dev
"Unable to allocate I/O ports\n"
return ENOMEM;
ENOMEM
ENOMEM
aha->irqrid = 0;
aha->irqrid = 0
aha->irqrid
aha
aha
irqrid
0
aha->irq = bus_alloc_resource_any(dev, SYS_RES_IRQ, &aha->irqrid,	    RF_ACTIVE);
aha->irq = bus_alloc_resource_any(dev, SYS_RES_IRQ, &aha->irqrid,	    RF_ACTIVE)
aha->irq
aha
aha
irq
bus_alloc_resource_any(dev, SYS_RES_IRQ, &aha->irqrid,	    RF_ACTIVE)
bus_alloc_resource_any
bus_alloc_resource_any
dev
dev
SYS_RES_IRQ
SYS_RES_IRQ
&aha->irqrid
aha->irqrid
aha
aha
irqrid
RF_ACTIVE
RF_ACTIVE
if (!aha->irq) {		device_printf(dev, "Unable to allocate excluse use of irq\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		return ENOMEM;	}
!aha->irq
aha->irq
aha
aha
irq
{		device_printf(dev, "Unable to allocate excluse use of irq\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		return ENOMEM;	}
device_printf(dev, "Unable to allocate excluse use of irq\n");
device_printf(dev, "Unable to allocate excluse use of irq\n")
device_printf
device_printf
dev
dev
"Unable to allocate excluse use of irq\n"
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IOPORT
SYS_RES_IOPORT
aha->portrid
aha
aha
portrid
aha->port
aha
aha
port
return ENOMEM;
ENOMEM
ENOMEM
aha->drqrid = 0;
aha->drqrid = 0
aha->drqrid
aha
aha
drqrid
0
aha->drq = bus_alloc_resource_any(dev, SYS_RES_DRQ, &aha->drqrid,	    RF_ACTIVE);
aha->drq = bus_alloc_resource_any(dev, SYS_RES_DRQ, &aha->drqrid,	    RF_ACTIVE)
aha->drq
aha
aha
drq
bus_alloc_resource_any(dev, SYS_RES_DRQ, &aha->drqrid,	    RF_ACTIVE)
bus_alloc_resource_any
bus_alloc_resource_any
dev
dev
SYS_RES_DRQ
SYS_RES_DRQ
&aha->drqrid
aha->drqrid
aha
aha
drqrid
RF_ACTIVE
RF_ACTIVE
if (!aha->drq) {		device_printf(dev, "Unable to allocate drq\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		return ENOMEM;	}
!aha->drq
aha->drq
aha
aha
drq
{		device_printf(dev, "Unable to allocate drq\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		return ENOMEM;	}
device_printf(dev, "Unable to allocate drq\n");
device_printf(dev, "Unable to allocate drq\n")
device_printf
device_printf
dev
dev
"Unable to allocate drq\n"
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IOPORT
SYS_RES_IOPORT
aha->portrid
aha
aha
portrid
aha->port
aha
aha
port
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IRQ
SYS_RES_IRQ
aha->irqrid
aha
aha
irqrid
aha->irq
aha
aha
irq
return ENOMEM;
ENOMEM
ENOMEM
isa_dmacascade(rman_get_start(aha->drq));
isa_dmacascade(rman_get_start(aha->drq))
isa_dmacascade
isa_dmacascade
rman_get_start(aha->drq)
rman_get_start
rman_get_start
aha->drq
aha
aha
drq
filter = NULL;
filter = NULL
filter
filter
NULL
NULL
filter_arg = NULL;
filter_arg = NULL
filter_arg
filter_arg
NULL
NULL
lowaddr = BUS_SPACE_MAXADDR_24BIT;
lowaddr = BUS_SPACE_MAXADDR_24BIT
lowaddr
lowaddr
BUS_SPACE_MAXADDR_24BIT
BUS_SPACE_MAXADDR_24BIT
if (bus_dma_tag_create(	/* parent	*/ NULL,				/* alignemnt	*/ 1,				/* boundary	*/ 0,				/* lowaddr	*/ lowaddr,				/* highaddr	*/ BUS_SPACE_MAXADDR,				/* filter	*/ filter,				/* filterarg	*/ filter_arg,				/* maxsize	*/ BUS_SPACE_MAXSIZE_24BIT,				/* nsegments	*/ ~0,				/* maxsegsz	*/ BUS_SPACE_MAXSIZE_24BIT,				/* flags	*/ 0,				/* lockfunc	*/ busdma_lock_mutex,				/* lockarg	*/ &Giant,				&aha->parent_dmat) != 0) {		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (ENOMEM);	}
bus_dma_tag_create(	/* parent	*/ NULL,				/* alignemnt	*/ 1,				/* boundary	*/ 0,				/* lowaddr	*/ lowaddr,				/* highaddr	*/ BUS_SPACE_MAXADDR,				/* filter	*/ filter,				/* filterarg	*/ filter_arg,				/* maxsize	*/ BUS_SPACE_MAXSIZE_24BIT,				/* nsegments	*/ ~0,				/* maxsegsz	*/ BUS_SPACE_MAXSIZE_24BIT,				/* flags	*/ 0,				/* lockfunc	*/ busdma_lock_mutex,				/* lockarg	*/ &Giant,				&aha->parent_dmat) != 0
bus_dma_tag_create(	/* parent	*/ NULL,				/* alignemnt	*/ 1,				/* boundary	*/ 0,				/* lowaddr	*/ lowaddr,				/* highaddr	*/ BUS_SPACE_MAXADDR,				/* filter	*/ filter,				/* filterarg	*/ filter_arg,				/* maxsize	*/ BUS_SPACE_MAXSIZE_24BIT,				/* nsegments	*/ ~0,				/* maxsegsz	*/ BUS_SPACE_MAXSIZE_24BIT,				/* flags	*/ 0,				/* lockfunc	*/ busdma_lock_mutex,				/* lockarg	*/ &Giant,				&aha->parent_dmat)
bus_dma_tag_create
bus_dma_tag_create
NULL
NULL
1
0
lowaddr
lowaddr
BUS_SPACE_MAXADDR
BUS_SPACE_MAXADDR
filter
filter
filter_arg
filter_arg
BUS_SPACE_MAXSIZE_24BIT
BUS_SPACE_MAXSIZE_24BIT
~0
0
BUS_SPACE_MAXSIZE_24BIT
BUS_SPACE_MAXSIZE_24BIT
0
busdma_lock_mutex
busdma_lock_mutex
&Giant
Giant
Giant
&aha->parent_dmat
aha->parent_dmat
aha
aha
parent_dmat
0
{		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (ENOMEM);	}
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IOPORT
SYS_RES_IOPORT
aha->portrid
aha
aha
portrid
aha->port
aha
aha
port
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IRQ
SYS_RES_IRQ
aha->irqrid
aha
aha
irqrid
aha->irq
aha
aha
irq
bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);
bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_DRQ
SYS_RES_DRQ
aha->drqrid
aha
aha
drqrid
aha->drq
aha
aha
drq
aha_free(aha);
aha_free(aha)
aha_free
aha_free
aha
aha
return (ENOMEM);
(ENOMEM)
ENOMEM
ENOMEM
if (aha_init(aha)) {		device_printf(dev, "init failed\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (ENOMEM);	}
aha_init(aha)
aha_init
aha_init
aha
aha
{		device_printf(dev, "init failed\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (ENOMEM);	}
device_printf(dev, "init failed\n");
device_printf(dev, "init failed\n")
device_printf
device_printf
dev
dev
"init failed\n"
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IOPORT
SYS_RES_IOPORT
aha->portrid
aha
aha
portrid
aha->port
aha
aha
port
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IRQ
SYS_RES_IRQ
aha->irqrid
aha
aha
irqrid
aha->irq
aha
aha
irq
bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);
bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_DRQ
SYS_RES_DRQ
aha->drqrid
aha
aha
drqrid
aha->drq
aha
aha
drq
aha_free(aha);
aha_free(aha)
aha_free
aha_free
aha
aha
return (ENOMEM);
(ENOMEM)
ENOMEM
ENOMEM
if (aha->boardid <= BOARD_1542 && aha->fw_major == 0) {		device_printf(dev, "154xA may not work\n");		aha->ccb_sg_opcode = INITIATOR_SG_CCB;		aha->ccb_ccb_opcode = INITIATOR_CCB;	}
aha->boardid <= BOARD_1542 && aha->fw_major == 0
aha->boardid <= BOARD_1542
aha->boardid
aha
aha
boardid
BOARD_1542
BOARD_1542
aha->fw_major == 0
aha->fw_major
aha
aha
fw_major
0
{		device_printf(dev, "154xA may not work\n");		aha->ccb_sg_opcode = INITIATOR_SG_CCB;		aha->ccb_ccb_opcode = INITIATOR_CCB;	}
device_printf(dev, "154xA may not work\n");
device_printf(dev, "154xA may not work\n")
device_printf
device_printf
dev
dev
"154xA may not work\n"
aha->ccb_sg_opcode = INITIATOR_SG_CCB;
aha->ccb_sg_opcode = INITIATOR_SG_CCB
aha->ccb_sg_opcode
aha
aha
ccb_sg_opcode
INITIATOR_SG_CCB
INITIATOR_SG_CCB
aha->ccb_ccb_opcode = INITIATOR_CCB;
aha->ccb_ccb_opcode = INITIATOR_CCB
aha->ccb_ccb_opcode
aha
aha
ccb_ccb_opcode
INITIATOR_CCB
INITIATOR_CCB
error = aha_attach(aha);
error = aha_attach(aha)
error
error
aha_attach(aha)
aha_attach
aha_attach
aha
aha
if (error) {		device_printf(dev, "attach failed\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (error);	}
error
error
{		device_printf(dev, "attach failed\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (error);	}
device_printf(dev, "attach failed\n");
device_printf(dev, "attach failed\n")
device_printf
device_printf
dev
dev
"attach failed\n"
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IOPORT
SYS_RES_IOPORT
aha->portrid
aha
aha
portrid
aha->port
aha
aha
port
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IRQ
SYS_RES_IRQ
aha->irqrid
aha
aha
irqrid
aha->irq
aha
aha
irq
bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);
bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_DRQ
SYS_RES_DRQ
aha->drqrid
aha
aha
drqrid
aha->drq
aha
aha
drq
aha_free(aha);
aha_free(aha)
aha_free
aha_free
aha
aha
return (error);
(error)
error
error
error = bus_setup_intr(dev, aha->irq, INTR_TYPE_CAM|INTR_ENTROPY,	    aha_intr, aha, &ih);
error = bus_setup_intr(dev, aha->irq, INTR_TYPE_CAM|INTR_ENTROPY,	    aha_intr, aha, &ih)
error
error
bus_setup_intr(dev, aha->irq, INTR_TYPE_CAM|INTR_ENTROPY,	    aha_intr, aha, &ih)
bus_setup_intr
bus_setup_intr
dev
dev
aha->irq
aha
aha
irq
INTR_TYPE_CAM|INTR_ENTROPY
INTR_TYPE_CAM
INTR_TYPE_CAM
INTR_ENTROPY
INTR_ENTROPY
aha_intr
aha_intr
aha
aha
&ih
ih
ih
if (error) {		device_printf(dev, "Unable to register interrupt handler\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (error);	}
error
error
{		device_printf(dev, "Unable to register interrupt handler\n");		bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);		bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);		bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);		aha_free(aha);		return (error);	}
device_printf(dev, "Unable to register interrupt handler\n");
device_printf(dev, "Unable to register interrupt handler\n")
device_printf
device_printf
dev
dev
"Unable to register interrupt handler\n"
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port);
bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,		    aha->port)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IOPORT
SYS_RES_IOPORT
aha->portrid
aha
aha
portrid
aha->port
aha
aha
port
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq);
bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_IRQ
SYS_RES_IRQ
aha->irqrid
aha
aha
irqrid
aha->irq
aha
aha
irq
bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq);
bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq)
bus_release_resource
bus_release_resource
dev
dev
SYS_RES_DRQ
SYS_RES_DRQ
aha->drqrid
aha
aha
drqrid
aha->drq
aha
aha
drq
aha_free(aha);
aha_free(aha)
aha_free
aha_free
aha
aha
return (error);
(error)
error
error
return (0);
(0)
0
-----joern-----
(58,122,0)
(358,308,0)
(31,249,0)
(199,351,0)
(156,366,0)
(268,337,0)
(103,264,0)
(304,10,0)
(138,249,0)
(57,134,0)
(106,122,0)
(259,57,0)
(96,229,0)
(96,351,0)
(339,205,0)
(126,102,0)
(277,122,0)
(194,316,0)
(0,348,0)
(239,365,0)
(274,57,0)
(323,155,0)
(176,122,0)
(276,366,0)
(361,266,0)
(288,122,0)
(92,357,0)
(219,43,0)
(172,7,0)
(34,10,0)
(166,137,0)
(132,264,0)
(233,287,0)
(124,31,0)
(350,197,0)
(67,155,0)
(92,122,0)
(93,44,0)
(326,328,0)
(260,162,0)
(151,10,0)
(266,122,0)
(362,340,0)
(293,18,0)
(212,229,0)
(127,249,0)
(94,339,0)
(189,180,0)
(137,249,0)
(1,36,0)
(367,122,0)
(330,0,0)
(182,256,0)
(260,249,0)
(148,367,0)
(284,96,0)
(183,58,0)
(85,180,0)
(360,122,0)
(127,316,0)
(309,306,0)
(48,216,0)
(302,9,0)
(162,45,0)
(58,297,0)
(83,333,0)
(282,249,0)
(264,122,0)
(125,328,0)
(238,296,0)
(354,45,0)
(314,121,0)
(14,10,0)
(131,103,0)
(363,58,0)
(67,123,0)
(38,264,0)
(270,136,0)
(12,5,0)
(140,122,0)
(206,61,0)
(152,367,0)
(328,223,0)
(354,137,0)
(325,10,0)
(191,84,0)
(100,249,0)
(184,238,0)
(18,304,0)
(19,181,0)
(132,106,0)
(180,249,0)
(132,277,0)
(212,351,0)
(171,282,0)
(82,73,0)
(20,96,0)
(169,277,0)
(93,249,0)
(36,122,0)
(4,173,0)
(136,97,0)
(307,10,0)
(337,122,0)
(256,299,0)
(53,350,0)
(178,116,0)
(242,177,0)
(132,296,0)
(119,287,0)
(136,270,0)
(160,5,0)
(363,74,0)
(357,92,0)
(180,193,0)
(107,340,0)
(238,153,0)
(74,90,0)
(75,53,0)
(18,202,0)
(243,249,0)
(147,362,0)
(253,256,0)
(257,296,0)
(155,249,0)
(328,276,0)
(165,296,0)
(103,277,0)
(301,229,0)
(72,114,0)
(102,266,0)
(121,90,0)
(319,127,0)
(286,25,0)
(132,229,0)
(269,229,0)
(188,74,0)
(0,122,0)
(96,223,0)
(233,122,0)
(333,297,0)
(102,153,0)
(31,205,0)
(337,9,0)
(345,106,0)
(123,122,0)
(84,122,0)
(367,152,0)
(329,193,0)
(338,18,0)
(78,52,0)
(326,304,0)
(328,249,0)
(271,366,0)
(294,260,0)
(250,350,0)
(111,340,0)
(74,122,0)
(109,22,0)
(25,228,0)
(121,122,0)
(238,277,0)
(82,122,0)
(360,45,0)
(133,249,0)
(119,122,0)
(350,195,0)
(23,78,0)
(299,256,0)
(48,100,0)
(310,219,0)
(36,90,0)
(180,122,0)
(273,243,0)
(279,350,0)
(66,337,0)
(256,287,0)
(246,133,0)
(185,93,0)
(238,106,0)
(212,251,0)
(39,9,0)
(351,122,0)
(349,36,0)
(164,85,0)
(362,316,0)
(219,310,0)
(13,43,0)
(89,153,0)
(95,276,0)
(44,93,0)
(12,122,0)
(64,123,0)
(218,176,0)
(365,180,0)
(263,180,0)
(341,191,0)
(353,133,0)
(70,10,0)
(177,10,0)
(11,10,0)
(228,339,0)
(342,220,0)
(363,249,0)
(358,116,0)
(58,363,0)
(85,10,0)
(137,288,0)
(0,287,0)
(331,106,0)
(260,233,0)
(224,306,0)
(155,304,0)
(68,90,0)
(352,350,0)
(254,287,0)
(299,360,0)
(295,358,0)
(123,366,0)
(308,122,0)
(177,230,0)
(40,52,0)
(303,121,0)
(63,266,0)
(310,122,0)
(284,164,0)
(289,333,0)
(252,366,0)
(25,7,0)
(132,254,0)
(33,82,0)
(362,220,0)
(170,350,0)
(290,97,0)
(68,122,0)
(25,351,0)
(5,39,0)
(284,212,0)
(56,282,0)
(114,136,0)
(3,10,0)
(103,106,0)
(248,195,0)
(333,289,0)
(80,219,0)
(291,10,0)
(283,73,0)
(145,350,0)
(277,366,0)
(51,10,0)
(41,89,0)
(233,260,0)
(176,304,0)
(173,122,0)
(212,277,0)
(219,249,0)
(212,296,0)
(187,136,0)
(288,287,0)
(366,10,0)
(264,225,0)
(49,180,0)
(300,193,0)
(73,52,0)
(238,351,0)
(65,350,0)
(209,40,0)
(141,228,0)
(25,106,0)
(336,285,0)
(76,68,0)
(50,127,0)
(326,122,0)
(208,100,0)
(96,296,0)
(61,156,0)
(210,162,0)
(102,249,0)
(284,132,0)
(227,354,0)
(220,362,0)
(113,277,0)
(164,316,0)
(42,85,0)
(161,132,0)
(304,155,0)
(202,251,0)
(73,249,0)
(313,363,0)
(25,296,0)
(351,297,0)
(216,48,0)
(237,350,0)
(84,191,0)
(174,176,0)
(193,122,0)
(212,106,0)
(99,61,0)
(305,49,0)
(26,360,0)
(104,136,0)
(192,351,0)
(25,264,0)
(292,10,0)
(176,73,0)
(230,122,0)
(129,310,0)
(158,270,0)
(363,52,0)
(121,133,0)
(15,233,0)
(311,12,0)
(271,122,0)
(215,328,0)
(195,10,0)
(61,97,0)
(150,230,0)
(358,251,0)
(30,362,0)
(298,6,0)
(22,289,0)
(7,122,0)
(25,254,0)
(225,249,0)
(133,316,0)
(105,350,0)
(270,122,0)
(54,31,0)
(116,358,0)
(201,252,0)
(193,180,0)
(157,92,0)
(71,162,0)
(290,122,0)
(103,134,0)
(96,106,0)
(60,197,0)
(241,58,0)
(146,367,0)
(132,351,0)
(112,256,0)
(32,102,0)
(287,256,0)
(217,122,0)
(364,212,0)
(267,205,0)
(354,122,0)
(318,202,0)
(96,264,0)
(272,84,0)
(106,304,0)
(101,254,0)
(100,48,0)
(175,92,0)
(179,12,0)
(226,194,0)
(190,270,0)
(180,365,0)
(225,10,0)
(28,93,0)
(8,122,0)
(163,333,0)
(245,288,0)
(284,238,0)
(137,354,0)
(328,326,0)
(213,358,0)
(287,10,0)
(62,228,0)
(18,122,0)
(191,223,0)
(128,0,0)
(133,121,0)
(6,122,0)
(116,287,0)
(90,22,0)
(254,122,0)
(73,82,0)
(96,277,0)
(24,49,0)
(73,176,0)
(168,264,0)
(43,122,0)
(334,10,0)
(322,73,0)
(51,234,0)
(136,249,0)
(196,180,0)
(37,119,0)
(230,177,0)
(87,202,0)
(252,202,0)
(114,122,0)
(236,366,0)
(86,252,0)
(285,122,0)
(116,122,0)
(181,249,0)
(89,249,0)
(154,290,0)
(68,191,0)
(275,119,0)
(358,249,0)
(5,12,0)
(324,271,0)
(256,249,0)
(265,195,0)
(222,138,0)
(81,308,0)
(368,197,0)
(191,249,0)
(247,285,0)
(156,122,0)
(240,350,0)
(280,216,0)
(193,90,0)
(362,249,0)
(367,90,0)
(25,10,0)
(212,264,0)
(93,97,0)
(315,156,0)
(276,328,0)
(44,122,0)
(356,100,0)
(9,337,0)
(122,138,0)
(247,350,0)
(347,40,0)
(156,61,0)
(108,225,0)
(288,137,0)
(36,93,0)
(45,10,0)
(92,304,0)
(217,297,0)
(214,123,0)
(162,260,0)
(252,122,0)
(296,90,0)
(220,304,0)
(21,155,0)
(284,25,0)
(266,304,0)
(39,5,0)
(203,43,0)
(29,243,0)
(308,358,0)
(120,10,0)
(258,116,0)
(43,297,0)
(271,102,0)
(284,103,0)
(162,122,0)
(228,122,0)
(344,122,0)
(308,45,0)
(340,362,0)
(142,219,0)
(61,6,0)
(96,254,0)
(115,254,0)
(197,10,0)
(91,297,0)
(25,277,0)
(17,276,0)
(118,155,0)
(333,122,0)
(2,271,0)
(6,61,0)
(133,217,0)
(139,84,0)
(217,133,0)
(278,137,0)
(57,249,0)
(212,254,0)
(306,10,0)
(335,68,0)
(16,267,0)
(229,122,0)
(332,350,0)
(350,53,0)
(340,122,0)
(155,67,0)
(296,122,0)
(285,247,0)
(27,22,0)
(219,251,0)
(78,177,0)
(122,10,0)
(74,363,0)
(282,244,0)
(310,90,0)
(343,354,0)
(173,52,0)
(327,155,0)
(137,316,0)
(90,10,0)
(98,156,0)
(7,267,0)
(135,288,0)
(312,260,0)
(40,249,0)
(260,52,0)
(149,217,0)
(211,310,0)
(202,252,0)
(22,90,0)
(140,251,0)
(289,22,0)
(130,82,0)
(55,191,0)
(232,285,0)
(281,6,0)
(229,45,0)
(167,326,0)
(123,67,0)
(270,287,0)
(194,122,0)
(320,350,0)
(350,247,0)
(231,363,0)
(244,282,0)
(119,234,0)
(220,122,0)
(350,352,0)
(136,114,0)
(61,249,0)
(348,0,0)
(180,85,0)
(207,74,0)
(243,251,0)
(114,45,0)
(238,264,0)
(262,22,0)
(276,122,0)
(255,8,0)
(6,304,0)
(266,102,0)
(9,39,0)
(186,350,0)
(59,164,0)
(143,44,0)
(159,140,0)
(93,36,0)
(359,308,0)
(102,271,0)
(284,78,0)
(46,220,0)
(350,306,0)
(84,297,0)
(22,249,0)
(82,366,0)
(221,326,0)
(47,360,0)
(132,97,0)
(297,10,0)
(234,119,0)
(202,249,0)
(35,10,0)
(234,51,0)
(144,350,0)
(200,114,0)
(317,217,0)
(235,181,0)
(346,10,0)
(261,352,0)
(77,7,0)
(191,68,0)
(110,155,0)
(204,45,0)
(117,233,0)
(79,89,0)
(321,10,0)
(43,219,0)
(44,297,0)
(360,299,0)
(355,155,0)
(181,223,0)
(180,49,0)
(25,229,0)
(69,44,0)
(340,366,0)
(138,122,0)
(202,18,0)
(328,276,1)
(310,122,1)
(129,43,1)
(255,53,1)
(342,340,1)
(200,104,1)
(221,167,1)
(30,147,1)
(212,364,1)
(172,31,1)
(103,106,1)
(158,190,1)
(333,163,1)
(140,122,1)
(328,326,1)
(361,271,1)
(171,56,1)
(142,80,1)
(188,207,1)
(238,296,1)
(276,122,1)
(284,132,1)
(212,264,1)
(116,287,1)
(82,130,1)
(327,110,1)
(154,136,1)
(93,249,1)
(39,9,1)
(84,297,1)
(18,122,1)
(25,277,1)
(284,164,1)
(294,312,1)
(235,19,1)
(303,217,1)
(257,165,1)
(101,115,1)
(238,351,1)
(13,142,1)
(36,90,1)
(320,240,1)
(329,300,1)
(104,187,1)
(146,148,1)
(25,264,1)
(39,5,1)
(304,155,1)
(102,249,1)
(62,141,1)
(68,90,1)
(193,329,1)
(127,249,1)
(220,304,1)
(211,129,1)
(314,303,1)
(317,149,1)
(155,249,1)
(351,122,1)
(182,253,1)
(353,246,1)
(269,152,1)
(284,25,1)
(49,24,1)
(137,249,1)
(63,361,1)
(180,365,1)
(96,254,1)
(107,30,1)
(341,55,1)
(358,116,1)
(132,106,1)
(232,352,1)
(252,122,1)
(5,12,1)
(132,351,1)
(6,304,1)
(19,348,1)
(61,6,1)
(238,264,1)
(132,277,1)
(48,100,1)
(72,200,1)
(130,33,1)
(96,296,1)
(162,45,1)
(283,322,1)
(15,117,1)
(103,264,1)
(98,206,1)
(204,229,1)
(301,269,1)
(43,297,1)
(295,213,1)
(366,236,1)
(284,96,1)
(322,40,1)
(65,144,1)
(25,351,1)
(214,118,1)
(22,109,1)
(53,350,1)
(216,280,1)
(238,184,1)
(219,43,1)
(176,304,1)
(333,297,1)
(242,339,1)
(93,44,1)
(360,26,1)
(237,145,1)
(354,227,1)
(33,283,1)
(7,77,1)
(6,281,1)
(47,182,1)
(73,249,1)
(197,368,1)
(195,265,1)
(81,359,1)
(365,239,1)
(42,198,1)
(343,278,1)
(282,171,1)
(136,249,1)
(348,0,1)
(57,259,1)
(113,169,1)
(21,323,1)
(180,49,1)
(326,122,1)
(89,41,1)
(282,249,1)
(194,226,1)
(192,357,1)
(103,277,1)
(238,277,1)
(220,122,1)
(40,347,1)
(110,67,1)
(345,366,1)
(254,122,1)
(167,276,1)
(270,287,1)
(299,360,1)
(38,168,1)
(116,258,1)
(245,135,1)
(338,293,1)
(181,249,1)
(86,201,1)
(243,249,1)
(302,337,1)
(352,261,1)
(290,154,1)
(17,95,1)
(264,38,1)
(296,257,1)
(247,285,1)
(152,367,1)
(202,249,1)
(119,275,1)
(360,45,1)
(31,124,1)
(323,327,1)
(358,249,1)
(141,267,1)
(277,113,1)
(310,90,1)
(290,122,1)
(150,242,1)
(191,249,1)
(203,13,1)
(333,122,1)
(121,122,1)
(367,146,1)
(1,44,1)
(248,51,1)
(360,122,1)
(242,39,1)
(106,331,1)
(191,84,1)
(128,287,1)
(350,197,1)
(239,189,1)
(225,108,1)
(148,90,1)
(114,72,1)
(132,264,1)
(126,32,1)
(244,282,1)
(287,256,1)
(288,287,1)
(5,160,1)
(315,98,1)
(276,366,1)
(271,366,1)
(228,62,1)
(220,46,1)
(132,296,1)
(227,343,1)
(115,45,1)
(28,185,1)
(25,296,1)
(173,4,1)
(139,341,1)
(36,349,1)
(149,353,1)
(37,244,1)
(162,122,1)
(230,150,1)
(196,42,1)
(218,82,1)
(12,311,1)
(36,122,1)
(89,249,1)
(209,198,1)
(236,277,1)
(350,306,1)
(164,59,1)
(123,122,1)
(233,15,1)
(180,122,1)
(56,48,1)
(347,209,1)
(55,328,1)
(123,366,1)
(96,229,1)
(238,106,1)
(330,128,1)
(43,203,1)
(84,272,1)
(29,8,1)
(212,296,1)
(43,122,1)
(194,122,1)
(82,366,1)
(77,172,1)
(117,162,1)
(213,219,1)
(335,84,1)
(358,308,1)
(140,159,1)
(225,249,1)
(82,122,1)
(260,233,1)
(340,366,1)
(133,249,1)
(253,254,1)
(173,122,1)
(32,89,1)
(45,204,1)
(288,245,1)
(58,183,1)
(58,122,1)
(18,338,1)
(367,122,1)
(217,297,1)
(212,229,1)
(222,344,1)
(73,82,1)
(44,69,1)
(102,266,1)
(265,248,1)
(67,123,1)
(246,362,1)
(258,178,1)
(176,122,1)
(226,137,1)
(363,249,1)
(109,289,1)
(160,12,1)
(41,79,1)
(27,262,1)
(74,122,1)
(208,348,1)
(80,202,1)
(91,351,1)
(212,277,1)
(54,39,1)
(298,156,1)
(165,297,1)
(281,298,1)
(155,67,1)
(306,309,1)
(336,232,1)
(138,249,1)
(260,249,1)
(132,254,1)
(311,179,1)
(22,289,1)
(8,255,1)
(83,27,1)
(169,225,1)
(367,90,1)
(280,100,1)
(166,133,1)
(176,174,1)
(156,366,1)
(12,122,1)
(76,335,1)
(132,161,1)
(96,277,1)
(189,263,1)
(240,170,1)
(99,53,1)
(270,158,1)
(259,274,1)
(354,122,1)
(44,122,1)
(175,304,1)
(156,122,1)
(241,313,1)
(243,273,1)
(254,101,1)
(25,229,1)
(7,122,1)
(278,166,1)
(363,58,1)
(266,63,1)
(90,22,1)
(92,122,1)
(119,287,1)
(357,92,1)
(137,288,1)
(114,45,1)
(193,90,1)
(279,237,1)
(84,122,1)
(103,131,1)
(58,297,1)
(354,45,1)
(125,181,1)
(310,211,1)
(96,264,1)
(133,217,1)
(159,358,1)
(8,122,1)
(363,74,1)
(25,254,1)
(339,94,1)
(85,180,1)
(138,222,1)
(198,177,1)
(206,99,1)
(162,71,1)
(59,194,1)
(229,122,1)
(88,85,1)
(362,249,1)
(266,304,1)
(106,122,1)
(114,122,1)
(26,47,1)
(96,20,1)
(264,122,1)
(286,88,1)
(212,351,1)
(170,105,1)
(284,103,1)
(40,249,1)
(100,249,1)
(111,107,1)
(350,195,1)
(4,260,1)
(144,320,1)
(116,122,1)
(95,215,1)
(73,176,1)
(6,122,1)
(156,315,1)
(131,57,1)
(180,193,1)
(96,106,1)
(313,231,1)
(331,345,1)
(137,354,1)
(305,193,1)
(207,58,1)
(71,210,1)
(118,355,1)
(231,73,1)
(217,317,1)
(199,192,1)
(326,304,1)
(75,350,1)
(74,188,1)
(219,310,1)
(285,122,1)
(273,29,1)
(51,234,1)
(252,86,1)
(87,243,1)
(136,270,1)
(217,122,1)
(288,122,1)
(46,342,1)
(364,140,1)
(202,252,1)
(233,287,1)
(68,122,1)
(289,333,1)
(161,290,1)
(359,295,1)
(349,1,1)
(18,304,1)
(64,214,1)
(326,221,1)
(324,126,1)
(230,122,1)
(319,88,1)
(119,122,1)
(108,264,1)
(340,122,1)
(124,54,1)
(260,162,1)
(350,247,1)
(61,156,1)
(123,64,1)
(308,122,1)
(271,2,1)
(212,106,1)
(9,302,1)
(193,122,1)
(284,238,1)
(0,122,1)
(132,229,1)
(297,91,1)
(309,224,1)
(183,241,1)
(272,139,1)
(308,81,1)
(68,76,1)
(256,112,1)
(25,106,1)
(219,249,1)
(25,228,1)
(164,85,1)
(271,122,1)
(100,356,1)
(212,254,1)
(44,297,1)
(184,102,1)
(79,152,1)
(92,304,1)
(179,9,1)
(121,90,1)
(274,357,1)
(263,49,1)
(60,195,1)
(308,45,1)
(267,16,1)
(25,286,1)
(300,196,1)
(0,287,1)
(135,354,1)
(37,48,1)
(186,250,1)
(96,351,1)
(355,106,1)
(337,122,1)
(2,324,1)
(143,28,1)
(66,268,1)
(187,93,1)
(178,308,1)
(105,306,1)
(202,18,1)
(332,279,1)
(23,173,1)
(328,249,1)
(25,7,1)
(293,252,1)
(0,330,1)
(261,186,1)
(185,61,1)
(133,121,1)
(20,191,1)
(136,114,1)
(234,119,1)
(93,36,1)
(157,175,1)
(215,125,1)
(262,296,1)
(180,249,1)
(362,340,1)
(174,218,1)
(191,68,1)
(102,271,1)
(145,65,1)
(127,50,1)
(177,230,1)
(78,23,1)
(69,143,1)
(252,366,1)
(270,122,1)
(368,60,1)
(224,197,1)
(122,138,1)
(275,37,1)
(94,228,1)
(57,249,1)
(53,75,1)
(284,212,1)
(318,87,1)
(155,21,1)
(168,122,1)
(92,157,1)
(285,336,1)
(74,90,1)
(147,127,1)
(229,301,1)
(9,337,1)
(16,7,1)
(233,122,1)
(24,305,1)
(210,294,1)
(268,8,1)
(112,299,1)
(250,332,1)
(256,299,1)
(340,111,1)
(48,216,1)
(277,122,1)
(356,208,1)
(296,122,1)
(350,352,1)
(190,114,1)
(266,122,1)
(284,78,1)
(228,122,1)
(276,17,1)
(362,220,1)
(256,249,1)
(181,235,1)
(78,177,1)
(31,249,1)
(22,249,1)
(201,318,1)
(351,199,1)
(312,363,1)
(61,249,1)
(163,83,1)
(121,314,1)
(337,66,1)
(50,319,1)
(284,25,2)
(294,198,2)
(77,39,2)
(235,348,2)
(245,88,2)
(219,310,2)
(351,122,2)
(18,304,2)
(238,106,2)
(6,122,2)
(308,122,2)
(176,198,2)
(58,198,2)
(202,8,2)
(287,256,2)
(193,122,2)
(123,366,2)
(337,8,2)
(115,152,2)
(335,348,2)
(136,53,2)
(25,351,2)
(53,350,2)
(232,348,2)
(53,348,2)
(258,8,2)
(176,304,2)
(103,106,2)
(302,8,2)
(269,152,2)
(360,122,2)
(212,254,2)
(96,296,2)
(309,348,2)
(8,53,2)
(196,198,2)
(367,122,2)
(284,212,2)
(276,348,2)
(132,296,2)
(156,53,2)
(280,348,2)
(212,106,2)
(252,366,2)
(60,348,2)
(181,249,2)
(61,53,2)
(96,264,2)
(217,88,2)
(314,88,2)
(252,122,2)
(209,198,2)
(8,122,2)
(271,152,2)
(71,198,2)
(0,152,2)
(315,53,2)
(282,48,2)
(367,90,2)
(48,100,2)
(6,53,2)
(139,348,2)
(211,8,2)
(261,348,2)
(83,357,2)
(187,53,2)
(54,39,2)
(266,152,2)
(72,53,2)
(140,8,2)
(357,92,2)
(78,177,2)
(348,0,2)
(172,39,2)
(360,45,2)
(296,122,2)
(133,121,2)
(82,122,2)
(192,357,2)
(155,249,2)
(191,84,2)
(180,249,2)
(87,8,2)
(82,198,2)
(31,249,2)
(351,357,2)
(140,122,2)
(191,249,2)
(318,8,2)
(270,287,2)
(119,122,2)
(349,53,2)
(25,88,2)
(114,122,2)
(184,152,2)
(350,195,2)
(322,198,2)
(58,122,2)
(89,152,2)
(46,88,2)
(293,8,2)
(0,122,2)
(308,8,2)
(220,304,2)
(124,39,2)
(44,122,2)
(226,88,2)
(263,198,2)
(84,122,2)
(303,88,2)
(132,106,2)
(133,217,2)
(185,53,2)
(298,53,2)
(116,8,2)
(69,53,2)
(202,252,2)
(39,5,2)
(213,8,2)
(68,90,2)
(103,264,2)
(328,326,2)
(137,88,2)
(212,277,2)
(256,299,2)
(281,53,2)
(49,198,2)
(244,48,2)
(93,53,2)
(237,348,2)
(55,348,2)
(240,348,2)
(20,348,2)
(284,103,2)
(133,88,2)
(173,198,2)
(170,348,2)
(333,122,2)
(180,365,2)
(352,348,2)
(364,8,2)
(132,351,2)
(342,88,2)
(84,348,2)
(150,8,2)
(135,88,2)
(282,249,2)
(225,249,2)
(363,74,2)
(203,8,2)
(247,348,2)
(93,44,2)
(132,264,2)
(212,264,2)
(268,8,2)
(199,357,2)
(96,229,2)
(221,348,2)
(173,122,2)
(92,304,2)
(243,249,2)
(340,366,2)
(312,198,2)
(4,198,2)
(330,152,2)
(270,53,2)
(85,180,2)
(119,287,2)
(262,357,2)
(107,88,2)
(212,229,2)
(347,198,2)
(259,357,2)
(50,88,2)
(219,8,2)
(19,348,2)
(90,22,2)
(308,45,2)
(162,122,2)
(96,277,2)
(328,249,2)
(320,348,2)
(67,123,2)
(284,78,2)
(114,45,2)
(243,8,2)
(230,8,2)
(253,152,2)
(217,297,2)
(198,8,2)
(96,351,2)
(81,8,2)
(122,138,2)
(254,152,2)
(76,348,2)
(360,152,2)
(195,348,2)
(179,9,2)
(164,88,2)
(238,351,2)
(212,351,2)
(365,198,2)
(127,249,2)
(109,357,2)
(177,230,2)
(92,122,2)
(75,348,2)
(132,229,2)
(260,198,2)
(193,90,2)
(123,122,2)
(283,198,2)
(47,152,2)
(284,238,2)
(256,152,2)
(62,39,2)
(324,152,2)
(217,122,2)
(297,357,2)
(9,8,2)
(61,156,2)
(100,348,2)
(25,7,2)
(296,357,2)
(40,198,2)
(65,348,2)
(178,8,2)
(285,122,2)
(260,162,2)
(180,198,2)
(200,53,2)
(165,357,2)
(30,88,2)
(339,39,2)
(43,8,2)
(204,152,2)
(98,53,2)
(51,234,2)
(241,198,2)
(288,88,2)
(216,348,2)
(340,122,2)
(58,297,2)
(158,53,2)
(247,285,2)
(311,9,2)
(73,249,2)
(128,152,2)
(162,45,2)
(219,249,2)
(48,216,2)
(354,122,2)
(231,198,2)
(326,348,2)
(66,8,2)
(341,348,2)
(112,152,2)
(340,88,2)
(362,88,2)
(57,357,2)
(39,9,2)
(163,357,2)
(57,249,2)
(36,122,2)
(276,122,2)
(174,198,2)
(25,228,2)
(310,122,2)
(146,357,2)
(361,152,2)
(228,39,2)
(326,304,2)
(358,249,2)
(22,249,2)
(116,122,2)
(254,122,2)
(272,348,2)
(239,198,2)
(224,348,2)
(252,8,2)
(189,198,2)
(147,88,2)
(328,276,2)
(44,297,2)
(131,357,2)
(166,88,2)
(348,152,2)
(354,45,2)
(121,88,2)
(25,296,2)
(285,348,2)
(9,337,2)
(29,8,2)
(191,68,2)
(103,277,2)
(186,348,2)
(333,357,2)
(248,348,2)
(246,88,2)
(6,304,2)
(162,198,2)
(93,36,2)
(86,8,2)
(310,8,2)
(317,88,2)
(48,348,2)
(329,198,2)
(104,53,2)
(12,122,2)
(160,9,2)
(79,152,2)
(90,357,2)
(43,122,2)
(238,152,2)
(171,48,2)
(95,348,2)
(197,348,2)
(264,122,2)
(25,106,2)
(367,357,2)
(337,122,2)
(111,88,2)
(229,122,2)
(103,357,2)
(255,53,2)
(212,296,2)
(227,88,2)
(130,198,2)
(0,287,2)
(106,122,2)
(313,198,2)
(202,249,2)
(73,82,2)
(32,152,2)
(68,122,2)
(161,53,2)
(84,297,2)
(167,348,2)
(100,249,2)
(188,198,2)
(101,152,2)
(284,132,2)
(25,229,2)
(359,8,2)
(12,9,2)
(326,122,2)
(17,348,2)
(176,122,2)
(194,122,2)
(80,8,2)
(328,348,2)
(238,264,2)
(338,8,2)
(18,122,2)
(7,39,2)
(1,53,2)
(234,348,2)
(159,8,2)
(305,198,2)
(145,348,2)
(82,366,2)
(119,348,2)
(33,198,2)
(96,106,2)
(22,289,2)
(353,88,2)
(284,96,2)
(121,122,2)
(266,122,2)
(362,340,2)
(125,348,2)
(244,282,2)
(350,197,2)
(36,90,2)
(137,354,2)
(354,88,2)
(144,348,2)
(257,357,2)
(149,88,2)
(143,53,2)
(180,122,2)
(256,249,2)
(99,53,2)
(363,249,2)
(274,357,2)
(43,297,2)
(180,193,2)
(202,18,2)
(7,122,2)
(265,348,2)
(18,8,2)
(116,287,2)
(260,249,2)
(44,53,2)
(156,122,2)
(51,348,2)
(105,348,2)
(220,88,2)
(39,8,2)
(275,348,2)
(228,122,2)
(102,266,2)
(126,152,2)
(114,53,2)
(94,39,2)
(191,348,2)
(56,48,2)
(96,254,2)
(180,49,2)
(73,176,2)
(22,357,2)
(266,304,2)
(362,249,2)
(233,198,2)
(182,152,2)
(279,348,2)
(304,155,2)
(233,287,2)
(15,198,2)
(102,249,2)
(45,152,2)
(78,198,2)
(141,39,2)
(277,122,2)
(74,90,2)
(306,348,2)
(133,249,2)
(208,348,2)
(156,366,2)
(358,116,2)
(132,277,2)
(295,8,2)
(132,53,2)
(234,119,2)
(278,88,2)
(368,348,2)
(25,264,2)
(287,152,2)
(300,198,2)
(284,164,2)
(37,348,2)
(219,43,2)
(102,271,2)
(63,152,2)
(74,198,2)
(31,39,2)
(218,198,2)
(137,288,2)
(286,88,2)
(177,8,2)
(350,306,2)
(271,122,2)
(27,357,2)
(210,198,2)
(358,8,2)
(136,270,2)
(142,8,2)
(148,357,2)
(212,8,2)
(350,352,2)
(40,249,2)
(2,152,2)
(25,277,2)
(233,122,2)
(24,198,2)
(343,88,2)
(215,348,2)
(288,122,2)
(68,348,2)
(299,360,2)
(23,198,2)
(127,88,2)
(356,348,2)
(260,233,2)
(73,198,2)
(242,8,2)
(117,198,2)
(276,366,2)
(155,67,2)
(36,53,2)
(41,152,2)
(42,198,2)
(238,296,2)
(5,9,2)
(5,12,2)
(350,247,2)
(289,333,2)
(299,152,2)
(132,254,2)
(26,152,2)
(220,122,2)
(61,249,2)
(61,6,2)
(250,348,2)
(89,249,2)
(206,53,2)
(152,357,2)
(152,367,2)
(288,287,2)
(301,152,2)
(363,58,2)
(336,348,2)
(207,198,2)
(363,198,2)
(102,152,2)
(74,122,2)
(181,348,2)
(310,90,2)
(201,8,2)
(136,249,2)
(289,357,2)
(190,53,2)
(91,357,2)
(350,348,2)
(25,254,2)
(136,114,2)
(16,39,2)
(362,220,2)
(88,198,2)
(333,297,2)
(121,90,2)
(59,88,2)
(85,198,2)
(183,198,2)
(238,277,2)
(319,88,2)
(358,308,2)
(93,249,2)
(332,348,2)
(194,88,2)
(154,53,2)
(290,122,2)
(229,152,2)
(273,8,2)
(129,8,2)
(164,85,2)
(138,249,2)
(271,366,2)
(290,53,2)
(96,348,2)
(28,53,2)
(267,39,2)
(193,198,2)
(13,8,2)
(270,122,2)
(137,249,2)
(230,122,2)
-----------------------------------
(0,aha->drq)
(1,aha)
(2,portrid)
(3,if (error)
(4,aha)
(5,aha->fw_major == 0)
(6,aha->port)
(7,aha->ccb_sg_opcode)
(8,aha_init(aha)
(9,aha->boardid <= BOARD_1542)
(10,)
(11,if (error)
(12,aha->fw_major)
(13,aha)
(14,if (bus_dma_tag_create(\\t/* parent\\t*/ NULL,\n\\n\\t\\t\\t\\t/* alignemnt\\t*/ 1,\n\\n\\t\\t\\t\\t/* boundary\\t*/ 0,\n\\n\\t\\t\\t\\t/* lowaddr\\t*/ lowaddr,\n\\n\\t\\t\\t\\t/* highaddr\\t*/ BUS_SPACE_MAXADDR,\n\\n\\t\\t\\t\\t/* filter\\t*/ filter,\n\\n\\t\\t\\t\\t/* filterarg\\t*/ filter_arg,\n\\n\\t\\t\\t\\t/* maxsize\\t*/ BUS_SPACE_MAXSIZE_24BIT,\n\\n\\t\\t\\t\\t/* nsegments\\t*/ ~0,\n\\n\\t\\t\\t\\t/* maxsegsz\\t*/ BUS_SPACE_MAXSIZE_24BIT,\n\\n\\t\\t\\t\\t/* flags\\t*/ 0,\n\\n\\t\\t\\t\\t/* lockfunc\\t*/ busdma_lock_mutex,\n\\n\\t\\t\\t\\t/* lockarg\\t*/ &Giant,\n\\n\\t\\t\\t\\t&aha->parent_dmat)
(15,drq)
(16,INITIATOR_SG_CCB)
(17,portrid)
(18,aha->port)
(19,dev)
(20,ENOMEM)
(21,RF_ACTIVE)
(22,bus_alloc_resource_any(dev, SYS_RES_IRQ, &aha->irqrid,\n\\n\\t    RF_ACTIVE)
(23,error)
(24,INTR_ENTROPY)
(25,return (0)
(26,drqrid)
(27,SYS_RES_IRQ)
(28,SYS_RES_IRQ)
(29,dev)
(30,SYS_RES_IOPORT)
(31,device_printf(dev, "154xA may not work\\n")
(32,dev)
(33,aha)
(34,if (aha_init(aha)
(35,ih)
(36,aha->irq)
(37,aha)
(38,dev)
(39,aha->boardid <= BOARD_1542 && aha->fw_major == 0)
(40,device_printf(dev, "attach failed\\n")
(41,"Unable to allocate excluse use of irq\\n")
(42,error)
(43,aha->irqrid)
(44,aha->irqrid)
(45,aha->drqrid = 0)
(46,port)
(47,aha)
(48,dev->id_drq != -1)
(49,INTR_TYPE_CAM|INTR_ENTROPY)
(50,"Unable to register interrupt handler\\n")
(51,isa_dmacascade(rman_get_start(aha->drq)
(52,)
(53,bus_dma_tag_create(\\t/* parent\\t*/ NULL,\n\\n\\t\\t\\t\\t/* alignemnt\\t*/ 1,\n\\n\\t\\t\\t\\t/* boundary\\t*/ 0,\n\\n\\t\\t\\t\\t/* lowaddr\\t*/ lowaddr,\n\\n\\t\\t\\t\\t/* highaddr\\t*/ BUS_SPACE_MAXADDR,\n\\n\\t\\t\\t\\t/* filter\\t*/ filter,\n\\n\\t\\t\\t\\t/* filterarg\\t*/ filter_arg,\n\\n\\t\\t\\t\\t/* maxsize\\t*/ BUS_SPACE_MAXSIZE_24BIT,\n\\n\\t\\t\\t\\t/* nsegments\\t*/ ~0,\n\\n\\t\\t\\t\\t/* maxsegsz\\t*/ BUS_SPACE_MAXSIZE_24BIT,\n\\n\\t\\t\\t\\t/* flags\\t*/ 0,\n\\n\\t\\t\\t\\t/* lockfunc\\t*/ busdma_lock_mutex,\n\\n\\t\\t\\t\\t/* lockarg\\t*/ &Giant,\n\\n\\t\\t\\t\\t&aha->parent_dmat)
(54,dev)
(55,dev)
(56,dev)
(57,device_printf(dev, "Unable to allocate I/O ports\\n")
(58,aha->irqrid)
(59,error)
(60,filter_arg)
(61,bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,\n\\n\\t\\t    aha->port)
(62,ccb_ccb_opcode)
(63,port)
(64,portrid)
(65,filter)
(66,boardid)
(67,&aha->portrid)
(68,aha->irq)
(69,irqrid)
(70,filter_arg)
(71,drqrid)
(72,drqrid)
(73,bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,\n\\n\\t\\t    aha->port)
(74,aha->irq)
(75,0)
(76,irq)
(77,ccb_sg_opcode)
(78,return (error)
(79,dev)
(80,dev)
(81,drqrid)
(82,aha->portrid)
(83,aha)
(84,aha->irqrid)
(85,error = bus_setup_intr(dev, aha->irq, INTR_TYPE_CAM|INTR_ENTROPY,\n\\n\\t    aha_intr, aha, &ih)
(86,portrid)
(87,dev)
(88,error)
(89,device_printf(dev, "Unable to allocate excluse use of irq\\n")
(90,aha->irq = bus_alloc_resource_any(dev, SYS_RES_IRQ, &aha->irqrid,\n\\n\\t    RF_ACTIVE)
(91,0)
(92,aha->port)
(93,bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
(94,INITIATOR_CCB)
(95,aha)
(96,return ENOMEM;)
(97,)
(98,aha)
(99,dev)
(100,dev->id_drq)
(101,drq)
(102,bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,\n\\n\\t\\t    aha->port)
(103,return ENOMEM;)
(104,SYS_RES_DRQ)
(105,NULL)
(106,aha->port)
(107,aha)
(108,dev)
(109,RF_ACTIVE)
(110,0)
(111,portrid)
(112,RF_ACTIVE)
(113,portrid)
(114,aha->drqrid)
(115,aha)
(116,aha->drq)
(117,aha)
(118,SYS_RES_IOPORT)
(119,aha->drq)
(120,if (aha->boardid <= BOARD_1542 && aha->fw_major == 0)
(121,aha->irq)
(122,*aha = device_get_softc(dev)
(123,aha->portrid)
(124,"154xA may not work\\n")
(125,dev)
(126,SYS_RES_IOPORT)
(127,device_printf(dev, "Unable to register interrupt handler\\n")
(128,aha)
(129,aha)
(130,portrid)
(131,ENOMEM)
(132,return (ENOMEM)
(133,bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
(134,)
(135,aha)
(136,bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq)
(137,bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq)
(138,device_get_softc(dev)
(139,aha)
(140,aha_free(aha)
(141,aha)
(142,SYS_RES_IRQ)
(143,aha)
(144,BUS_SPACE_MAXADDR)
(145,filter_arg)
(146,irq)
(147,dev)
(148,aha)
(149,aha)
(150,aha)
(151,error)
(152,!aha->irq)
(153,)
(154,aha)
(155,bus_alloc_resource(dev, SYS_RES_IOPORT, &aha->portrid,\n\\n\\t    0, ~0, AHA_NREGS, RF_ACTIVE)
(156,aha->portrid)
(157,port)
(158,drq)
(159,aha)
(160,0)
(161,ENOMEM)
(162,aha->drqrid)
(163,irqrid)
(164,return (error)
(165,aha)
(166,dev)
(167,aha)
(168,aha)
(169,aha)
(170,1)
(171,id_drq)
(172,aha)
(173,aha_free(aha)
(174,port)
(175,aha)
(176,aha->port)
(177,error = aha_attach(aha)
(178,aha)
(179,aha)
(180,bus_setup_intr(dev, aha->irq, INTR_TYPE_CAM|INTR_ENTROPY,\n\\n\\t    aha_intr, aha, &ih)
(181,device_printf(dev, "Unable to allocate drq\\n")
(182,SYS_RES_DRQ)
(183,irqrid)
(184,ENOMEM)
(185,dev)
(186,busdma_lock_mutex)
(187,dev)
(188,irq)
(189,aha)
(190,aha)
(191,bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
(192,aha)
(193,aha->irq)
(194,aha_free(aha)
(195,filter = NULL)
(196,dev)
(197,filter_arg = NULL)
(198,error)
(199,irqrid)
(200,aha)
(201,aha)
(202,bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,\n\\n\\t\\t    aha->port)
(203,irqrid)
(204,0)
(205,)
(206,SYS_RES_IOPORT)
(207,aha)
(208,dev)
(209,dev)
(210,aha)
(211,irq)
(212,return (ENOMEM)
(213,dev)
(214,aha)
(215,SYS_RES_IOPORT)
(216,-1)
(217,aha->irqrid)
(218,aha)
(219,bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
(220,aha->port)
(221,port)
(222,dev)
(223,)
(224,lowaddr)
(225,aha->dev = dev)
(226,aha)
(227,drqrid)
(228,aha->ccb_ccb_opcode)
(229,aha->drqrid)
(230,aha_attach(aha)
(231,dev)
(232,aha)
(233,aha->drq)
(234,rman_get_start(aha->drq)
(235,"Unable to allocate drq\\n")
(236,0)
(237,BUS_SPACE_MAXSIZE_24BIT)
(238,return ENOMEM;)
(239,ih)
(240,0)
(241,aha)
(242,error)
(243,device_printf(dev, "init failed\\n")
(244,isa_dmacascade(dev->id_drq)
(245,drq)
(246,dev)
(247,&aha->parent_dmat)
(248,filter)
(249,device_t dev)
(250,0)
(251,)
(252,aha->portrid)
(253,dev)
(254,aha->drq)
(255,aha)
(256,bus_alloc_resource_any(dev, SYS_RES_DRQ, &aha->drqrid,\n\\n\\t    RF_ACTIVE)
(257,irq)
(258,drq)
(259,"Unable to allocate I/O ports\\n")
(260,bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq)
(261,Giant)
(262,dev)
(263,aha_intr)
(264,aha->dev)
(265,NULL)
(266,aha->port)
(267,aha->ccb_sg_opcode = INITIATOR_SG_CCB)
(268,aha)
(269,aha)
(270,aha->drq)
(271,aha->portrid)
(272,irqrid)
(273,"init failed\\n")
(274,dev)
(275,drq)
(276,aha->portrid)
(277,aha->portrid)
(278,SYS_RES_DRQ)
(279,~0)
(280,1)
(281,port)
(282,dev->id_drq)
(283,SYS_RES_IOPORT)
(284,RET)
(285,aha->parent_dmat)
(286,0)
(287,aha->drq = bus_alloc_resource_any(dev, SYS_RES_DRQ, &aha->drqrid,\n\\n\\t    RF_ACTIVE)
(288,aha->drq)
(289,&aha->irqrid)
(290,aha_free(aha)
(291,if (dev->id_drq != -1)
(292,aha)
(293,aha)
(294,SYS_RES_DRQ)
(295,SYS_RES_DRQ)
(296,aha->irq)
(297,aha->irqrid = 0)
(298,aha)
(299,&aha->drqrid)
(300,aha)
(301,drqrid)
(302,BOARD_1542)
(303,aha)
(304,aha->port = bus_alloc_resource(dev, SYS_RES_IOPORT, &aha->portrid,\n\\n\\t    0, ~0, AHA_NREGS, RF_ACTIVE)
(305,INTR_TYPE_CAM)
(306,lowaddr = BUS_SPACE_MAXADDR_24BIT)
(307,filter)
(308,aha->drqrid)
(309,BUS_SPACE_MAXADDR_24BIT)
(310,aha->irq)
(311,fw_major)
(312,dev)
(313,SYS_RES_IRQ)
(314,irq)
(315,portrid)
(316,)
(317,irqrid)
(318,SYS_RES_IOPORT)
(319,dev)
(320,lowaddr)
(321,if (!aha->port)
(322,dev)
(323,AHA_NREGS)
(324,aha)
(325,lowaddr)
(326,aha->port)
(327,~0)
(328,bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,\n\\n\\t\\t    aha->port)
(329,irq)
(330,drq)
(331,port)
(332,BUS_SPACE_MAXSIZE_24BIT)
(333,aha->irqrid)
(334,if (!aha->irq)
(335,aha)
(336,parent_dmat)
(337,aha->boardid)
(338,port)
(339,aha->ccb_ccb_opcode = INITIATOR_CCB)
(340,aha->portrid)
(341,SYS_RES_IRQ)
(342,aha)
(343,aha)
(344,aha)
(345,aha)
(346,if (!aha->drq)
(347,"attach failed\\n")
(348,!aha->drq)
(349,irq)
(350,bus_dma_tag_create(\\t/* parent\\t*/ NULL,\n\\n\\t\\t\\t\\t/* alignemnt\\t*/ 1,\n\\n\\t\\t\\t\\t/* boundary\\t*/ 0,\n\\n\\t\\t\\t\\t/* lowaddr\\t*/ lowaddr,\n\\n\\t\\t\\t\\t/* highaddr\\t*/ BUS_SPACE_MAXADDR,\n\\n\\t\\t\\t\\t/* filter\\t*/ filter,\n\\n\\t\\t\\t\\t/* filterarg\\t*/ filter_arg,\n\\n\\t\\t\\t\\t/* maxsize\\t*/ BUS_SPACE_MAXSIZE_24BIT,\n\\n\\t\\t\\t\\t/* nsegments\\t*/ ~0,\n\\n\\t\\t\\t\\t/* maxsegsz\\t*/ BUS_SPACE_MAXSIZE_24BIT,\n\\n\\t\\t\\t\\t/* flags\\t*/ 0,\n\\n\\t\\t\\t\\t/* lockfunc\\t*/ busdma_lock_mutex,\n\\n\\t\\t\\t\\t/* lockarg\\t*/ &Giant,\n\\n\\t\\t\\t\\t&aha->parent_dmat)
(351,aha->irqrid)
(352,&Giant)
(353,SYS_RES_IRQ)
(354,aha->drqrid)
(355,dev)
(356,id_drq)
(357,!aha->port)
(358,bus_release_resource(dev, SYS_RES_DRQ, aha->drqrid, aha->drq)
(359,aha)
(360,aha->drqrid)
(361,aha)
(362,bus_release_resource(dev, SYS_RES_IOPORT, aha->portrid,\n\\n\\t\\t    aha->port)
(363,bus_release_resource(dev, SYS_RES_IRQ, aha->irqrid, aha->irq)
(364,ENOMEM)
(365,&ih)
(366,aha->portrid = 0)
(367,aha->irq)
(368,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^