-----label-----
0
-----code-----
void dxeTXCompleteProcessing
(
   WLANDXE_CtrlBlkType *dxeCtxt
)
{
   wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;
   WLANDXE_ChannelCBType    *channelCb  = NULL;

   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "%s Enter", __func__);
  
   /* Test High Priority Channel is the INT source or not */
   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI];

   /* Handle TX complete for high priority channel */
   status = dxeTXCompFrame(dxeCtxt, channelCb);

   /* Test Low Priority Channel interrupt is enabled or not */
   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI];

   /* Handle TX complete for low priority channel */
   status = dxeTXCompFrame(dxeCtxt, channelCb);
  
   if((eWLAN_PAL_FALSE == dxeCtxt->txIntEnable) &&
      ((dxeCtxt->txCompletedFrames > 0) ||
       (WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState)))
   {
      dxeCtxt->txIntEnable =  eWLAN_PAL_TRUE; 
      wpalEnableInterrupt(DXE_INTERRUPT_TX_COMPLE);
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,
               "%s %s : %d, %s : %d", __func__,
               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType],
               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc,
               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType],
               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc);
   }
   
   /*Kicking the DXE after the TX Complete interrupt was enabled - to avoid 
     the posibility of a race*/
   dxePsComplete(dxeCtxt, eWLAN_PAL_FALSE);
   
   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "%s Exit", __func__);
   return;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
25,28
28,29
29,30
31,32
32,33
32,34
32,35
32,36
32,37
33,34
35,36
37,38
40,41
42,43
43,44
43,45
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
54,55
55,56
55,57
56,57
58,59
58,60
58,61
59,60
61,62
63,64
65,66
66,67
66,68
67,68
69,70
70,71
70,72
71,72
71,73
72,73
75,76
77,78
78,79
78,80
79,80
81,82
81,83
81,84
82,83
84,85
86,87
88,89
88,90
89,90
89,91
90,91
91,92
91,93
92,93
94,95
94,96
95,96
98,99
99,100
99,101
100,101
101,102
101,103
102,103
102,104
103,104
107,108
108,109
108,110
109,110
111,112
111,113
112,113
115,116
115,117
115,118
116,117
117,118
117,119
118,119
118,120
119,120
122,123
124,125
125,126
125,127
126,127
128,129
129,130
131,132
132,133
132,134
132,135
132,136
132,137
132,138
132,139
132,140
132,141
133,134
135,136
137,138
140,141
142,143
142,144
143,144
145,146
145,147
146,147
146,148
147,148
147,149
148,149
151,152
154,155
154,156
155,156
155,157
156,157
156,158
157,158
160,161
163,164
163,165
164,165
166,167
166,168
167,168
167,169
168,169
168,170
169,170
172,173
175,176
175,177
176,177
176,178
177,178
177,179
178,179
181,182
184,185
185,186
185,187
185,188
186,187
188,189
190,191
192,193
193,194
193,195
193,196
193,197
193,198
194,195
196,197
198,199
201,202
-----nextToken-----
2,4,7,9,10,15,17,20,24,26,27,30,34,36,38,39,41,45,50,51,53,57,60,62,64,68,73,74,76,80,83,85,87,93,96,97,104,105,106,110,113,114,120,121,123,127,130,134,136,138,139,141,144,149,150,152,153,158,159,161,162,165,170,171,173,174,179,180,182,183,187,189,191,195,197,199,200,202,203
-----computeFrom-----
43,44
43,45
55,56
55,57
66,67
66,68
78,79
78,80
89,90
89,91
91,92
91,93
99,100
99,101
101,102
101,103
108,109
108,110
117,118
117,119
-----guardedBy-----
97,121
113,179
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ArraySubscriptExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;
-----ast_node-----
void dxeTXCompleteProcessing(   WLANDXE_CtrlBlkType *dxeCtxt){   wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;   WLANDXE_ChannelCBType    *channelCb  = NULL;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);     /* Test High Priority Channel is the INT source or not */   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI];   /* Handle TX complete for high priority channel */   status = dxeTXCompFrame(dxeCtxt, channelCb);   /* Test Low Priority Channel interrupt is enabled or not */   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI];   /* Handle TX complete for low priority channel */   status = dxeTXCompFrame(dxeCtxt, channelCb);     if((eWLAN_PAL_FALSE == dxeCtxt->txIntEnable) &&      ((dxeCtxt->txCompletedFrames > 0) ||       (WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState)))   {      dxeCtxt->txIntEnable =  eWLAN_PAL_TRUE;       wpalEnableInterrupt(DXE_INTERRUPT_TX_COMPLE);      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,               "%s %s : %d, %s : %d", __func__,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc);   }      /*Kicking the DXE after the TX Complete interrupt was enabled - to avoid      the posibility of a race*/   dxePsComplete(dxeCtxt, eWLAN_PAL_FALSE);      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return;}
void
dxeTXCompleteProcessing(   WLANDXE_CtrlBlkType *dxeCtxt)
dxeTXCompleteProcessing
WLANDXE_CtrlBlkType *dxeCtxt
WLANDXE_CtrlBlkType
WLANDXE_CtrlBlkType
*dxeCtxt
*
dxeCtxt
{   wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;   WLANDXE_ChannelCBType    *channelCb  = NULL;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);     /* Test High Priority Channel is the INT source or not */   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI];   /* Handle TX complete for high priority channel */   status = dxeTXCompFrame(dxeCtxt, channelCb);   /* Test Low Priority Channel interrupt is enabled or not */   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI];   /* Handle TX complete for low priority channel */   status = dxeTXCompFrame(dxeCtxt, channelCb);     if((eWLAN_PAL_FALSE == dxeCtxt->txIntEnable) &&      ((dxeCtxt->txCompletedFrames > 0) ||       (WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState)))   {      dxeCtxt->txIntEnable =  eWLAN_PAL_TRUE;       wpalEnableInterrupt(DXE_INTERRUPT_TX_COMPLE);      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,               "%s %s : %d, %s : %d", __func__,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc);   }      /*Kicking the DXE after the TX Complete interrupt was enabled - to avoid      the posibility of a race*/   dxePsComplete(dxeCtxt, eWLAN_PAL_FALSE);      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return;}
wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;
wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;
wpt_status
wpt_status
status     = eWLAN_PAL_STATUS_SUCCESS
status
= eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
WLANDXE_ChannelCBType    *channelCb  = NULL;
WLANDXE_ChannelCBType    *channelCb  = NULL;
WLANDXE_ChannelCBType
WLANDXE_ChannelCBType
*channelCb  = NULL
*
channelCb
= NULL
NULL
NULL
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Enter"
__func__
__func__
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI];
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI]
channelCb
channelCb
&dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI]
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_TX_HIGH_PRI
WDTS_CHANNEL_TX_HIGH_PRI
status = dxeTXCompFrame(dxeCtxt, channelCb);
status = dxeTXCompFrame(dxeCtxt, channelCb)
status
status
dxeTXCompFrame(dxeCtxt, channelCb)
dxeTXCompFrame
dxeTXCompFrame
dxeCtxt
dxeCtxt
channelCb
channelCb
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI];
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI]
channelCb
channelCb
&dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI]
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_TX_LOW_PRI
WDTS_CHANNEL_TX_LOW_PRI
status = dxeTXCompFrame(dxeCtxt, channelCb);
status = dxeTXCompFrame(dxeCtxt, channelCb)
status
status
dxeTXCompFrame(dxeCtxt, channelCb)
dxeTXCompFrame
dxeTXCompFrame
dxeCtxt
dxeCtxt
channelCb
channelCb
if((eWLAN_PAL_FALSE == dxeCtxt->txIntEnable) &&      ((dxeCtxt->txCompletedFrames > 0) ||       (WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState)))   {      dxeCtxt->txIntEnable =  eWLAN_PAL_TRUE;       wpalEnableInterrupt(DXE_INTERRUPT_TX_COMPLE);      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,               "%s %s : %d, %s : %d", __func__,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc);   }
(eWLAN_PAL_FALSE == dxeCtxt->txIntEnable) &&      ((dxeCtxt->txCompletedFrames > 0) ||       (WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState))
(eWLAN_PAL_FALSE == dxeCtxt->txIntEnable)
eWLAN_PAL_FALSE == dxeCtxt->txIntEnable
eWLAN_PAL_FALSE
eWLAN_PAL_FALSE
dxeCtxt->txIntEnable
dxeCtxt
dxeCtxt
txIntEnable
((dxeCtxt->txCompletedFrames > 0) ||       (WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState))
(dxeCtxt->txCompletedFrames > 0) ||       (WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState)
(dxeCtxt->txCompletedFrames > 0)
dxeCtxt->txCompletedFrames > 0
dxeCtxt->txCompletedFrames
dxeCtxt
dxeCtxt
txCompletedFrames
0
(WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState)
WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState
WLANDXE_POWER_STATE_FULL
WLANDXE_POWER_STATE_FULL
dxeCtxt->hostPowerState
dxeCtxt
dxeCtxt
hostPowerState
{      dxeCtxt->txIntEnable =  eWLAN_PAL_TRUE;       wpalEnableInterrupt(DXE_INTERRUPT_TX_COMPLE);      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,               "%s %s : %d, %s : %d", __func__,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc);   }
dxeCtxt->txIntEnable =  eWLAN_PAL_TRUE;
dxeCtxt->txIntEnable =  eWLAN_PAL_TRUE
dxeCtxt->txIntEnable
dxeCtxt
dxeCtxt
txIntEnable
eWLAN_PAL_TRUE
eWLAN_PAL_TRUE
wpalEnableInterrupt(DXE_INTERRUPT_TX_COMPLE);
wpalEnableInterrupt(DXE_INTERRUPT_TX_COMPLE);
wpalEnableInterrupt
wpalEnableInterrupt
(DXE_INTERRUPT_TX_COMPLE)
DXE_INTERRUPT_TX_COMPLE
DXE_INTERRUPT_TX_COMPLE
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,               "%s %s : %d, %s : %d", __func__,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,               "%s %s : %d, %s : %d", __func__,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc,               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType],               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_WARN
eWLAN_PAL_TRACE_LEVEL_WARN
"%s %s : %d, %s : %d"
__func__
__func__
channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType]
channelType
channelType
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_TX_HIGH_PRI
WDTS_CHANNEL_TX_HIGH_PRI
channelType
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_TX_HIGH_PRI
WDTS_CHANNEL_TX_HIGH_PRI
numRsvdDesc
channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType]
channelType
channelType
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_TX_LOW_PRI
WDTS_CHANNEL_TX_LOW_PRI
channelType
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc
dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_TX_LOW_PRI
WDTS_CHANNEL_TX_LOW_PRI
numRsvdDesc
dxePsComplete(dxeCtxt, eWLAN_PAL_FALSE);
dxePsComplete(dxeCtxt, eWLAN_PAL_FALSE)
dxePsComplete
dxePsComplete
dxeCtxt
dxeCtxt
eWLAN_PAL_FALSE
eWLAN_PAL_FALSE
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Exit"
__func__
__func__
return;
-----joern-----
(42,111,0)
(35,3,0)
(68,105,0)
(3,42,0)
(99,33,0)
(53,12,0)
(73,42,0)
(15,60,0)
(12,13,0)
(27,2,0)
(100,105,0)
(40,25,0)
(45,53,0)
(43,14,0)
(65,101,0)
(65,64,0)
(88,99,0)
(58,100,0)
(62,101,0)
(26,78,0)
(33,63,0)
(41,45,0)
(11,32,0)
(92,65,0)
(97,81,0)
(51,112,0)
(8,101,0)
(4,34,0)
(57,18,0)
(1,78,0)
(76,18,0)
(35,65,0)
(7,34,0)
(17,99,0)
(96,111,0)
(80,107,0)
(38,82,0)
(107,89,0)
(29,89,0)
(48,18,0)
(21,96,0)
(104,22,0)
(77,63,0)
(86,63,0)
(78,1,0)
(34,38,0)
(95,8,0)
(103,60,0)
(37,3,0)
(56,22,0)
(24,59,0)
(69,33,0)
(113,64,0)
(71,63,0)
(12,60,0)
(91,111,0)
(105,111,0)
(113,100,0)
(50,63,0)
(25,32,0)
(99,67,0)
(34,4,0)
(28,71,0)
(60,12,0)
(89,107,0)
(65,35,0)
(61,77,0)
(5,11,0)
(15,111,0)
(78,69,0)
(11,111,0)
(1,111,0)
(108,15,0)
(36,4,0)
(109,51,0)
(44,15,0)
(112,51,0)
(0,65,0)
(107,112,0)
(98,51,0)
(87,71,0)
(60,15,0)
(59,63,0)
(32,11,0)
(3,35,0)
(77,111,0)
(16,35,0)
(4,111,0)
(51,111,0)
(67,99,0)
(20,13,0)
(93,1,0)
(69,78,0)
(42,3,0)
(65,89,0)
(110,113,0)
(96,13,0)
(45,91,0)
(30,1,0)
(85,11,0)
(100,113,0)
(64,65,0)
(52,62,0)
(94,63,0)
(14,63,0)
(32,25,0)
(67,63,0)
(9,91,0)
(105,100,0)
(14,81,0)
(38,34,0)
(13,12,0)
(19,63,0)
(13,96,0)
(2,111,0)
(6,33,0)
(18,63,0)
(39,82,0)
(22,63,0)
(74,71,0)
(10,32,0)
(79,59,0)
(89,65,0)
(65,25,0)
(53,45,0)
(54,2,0)
(112,107,0)
(70,77,0)
(47,64,0)
(31,19,0)
(23,91,0)
(33,69,0)
(64,113,0)
(82,63,0)
(12,53,0)
(81,82,0)
(66,67,0)
(25,65,0)
(75,71,0)
(83,112,0)
(55,81,0)
(84,65,0)
(82,38,0)
(72,65,0)
(91,45,0)
(81,14,0)
(106,18,0)
(2,62,0)
(102,42,0)
(81,111,0)
(90,105,0)
(46,96,0)
(99,111,0)
(49,4,0)
(105,111,1)
(33,69,1)
(18,57,1)
(40,32,1)
(87,28,1)
(21,46,1)
(36,49,1)
(24,79,1)
(88,66,1)
(53,45,1)
(42,111,1)
(48,76,1)
(34,7,1)
(81,55,1)
(31,19,1)
(13,96,1)
(85,5,1)
(96,21,1)
(70,53,1)
(27,54,1)
(69,78,1)
(39,67,1)
(90,47,1)
(73,102,1)
(16,3,1)
(25,40,1)
(65,64,1)
(19,71,1)
(91,111,1)
(99,17,1)
(106,48,1)
(9,23,1)
(65,25,1)
(30,6,1)
(59,24,1)
(103,15,1)
(25,32,1)
(35,3,1)
(56,104,1)
(109,98,1)
(11,85,1)
(61,70,1)
(46,20,1)
(34,4,1)
(91,9,1)
(17,88,1)
(23,41,1)
(60,15,1)
(38,34,1)
(76,22,1)
(26,1,1)
(78,1,1)
(2,27,1)
(42,73,1)
(113,110,1)
(78,26,1)
(107,112,1)
(66,33,1)
(37,42,1)
(32,10,1)
(99,111,1)
(89,107,1)
(3,37,1)
(83,51,1)
(3,42,1)
(35,16,1)
(51,109,1)
(1,93,1)
(96,111,1)
(52,2,1)
(82,38,1)
(113,100,1)
(54,53,1)
(93,30,1)
(102,64,1)
(6,18,1)
(77,61,1)
(112,51,1)
(80,112,1)
(67,99,1)
(58,105,1)
(65,89,1)
(22,56,1)
(41,14,1)
(15,44,1)
(2,111,1)
(60,103,1)
(104,59,1)
(1,111,1)
(57,106,1)
(64,113,1)
(74,77,1)
(51,111,1)
(4,36,1)
(65,35,1)
(71,75,1)
(92,8,1)
(12,13,1)
(43,82,1)
(55,97,1)
(53,12,1)
(44,108,1)
(5,89,1)
(62,52,1)
(72,0,1)
(100,105,1)
(8,95,1)
(108,45,1)
(49,39,1)
(14,81,1)
(81,111,1)
(75,87,1)
(32,11,1)
(20,60,1)
(97,43,1)
(15,111,1)
(28,74,1)
(12,60,1)
(45,91,1)
(7,4,1)
(77,111,1)
(84,72,1)
(105,68,1)
(70,65,1)
(10,11,1)
(0,92,1)
(81,82,1)
(107,80,1)
(29,84,1)
(4,111,1)
(100,58,1)
(68,90,1)
(110,100,1)
(47,25,1)
(98,29,1)
(11,111,1)
(95,62,1)
(99,33,1)
(112,83,1)
(90,53,2)
(107,53,2)
(1,111,2)
(77,111,2)
(27,53,2)
(109,53,2)
(38,34,2)
(21,60,2)
(81,82,2)
(8,53,2)
(11,53,2)
(25,53,2)
(53,12,2)
(0,53,2)
(10,53,2)
(65,64,2)
(99,111,2)
(108,45,2)
(65,89,2)
(78,1,2)
(3,53,2)
(110,53,2)
(37,53,2)
(44,45,2)
(83,53,2)
(31,19,2)
(113,53,2)
(32,11,2)
(112,51,2)
(12,13,2)
(42,53,2)
(99,33,2)
(40,53,2)
(102,53,2)
(54,53,2)
(68,53,2)
(35,3,2)
(13,60,2)
(58,53,2)
(60,45,2)
(91,111,2)
(98,53,2)
(25,32,2)
(96,60,2)
(107,112,2)
(69,78,2)
(112,53,2)
(65,25,2)
(52,53,2)
(105,111,2)
(60,15,2)
(51,53,2)
(12,60,2)
(73,53,2)
(32,53,2)
(92,53,2)
(15,111,2)
(72,53,2)
(89,107,2)
(15,45,2)
(89,53,2)
(80,53,2)
(4,111,2)
(20,60,2)
(65,35,2)
(3,42,2)
(14,81,2)
(81,111,2)
(33,69,2)
(103,45,2)
(29,53,2)
(47,53,2)
(34,4,2)
(45,91,2)
(84,53,2)
(35,53,2)
(62,53,2)
(100,53,2)
(42,111,2)
(11,111,2)
(13,96,2)
(53,45,2)
(51,111,2)
(5,53,2)
(16,53,2)
(2,53,2)
(105,53,2)
(100,105,2)
(82,38,2)
(65,53,2)
(12,45,2)
(2,111,2)
(95,53,2)
(113,100,2)
(67,99,2)
(46,60,2)
(64,53,2)
(85,53,2)
(96,111,2)
(64,113,2)
-----------------------------------
(0,eWLAN_PAL_TRACE_LEVEL_WARN)
(1,dxeCtxt->dxeChannel)
(2,dxeCtxt->txIntEnable)
(3,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI])
(4,dxeCtxt->dxeChannel)
(5,dxeCtxt)
(6,channelCb)
(7,WDTS_CHANNEL_TX_LOW_PRI)
(8,wpalEnableInterrupt(DXE_INTERRUPT_TX_COMPLE)
(9,txIntEnable)
(10,WDTS_CHANNEL_TX_HIGH_PRI)
(11,dxeCtxt->dxeChannel)
(12,(dxeCtxt->txCompletedFrames > 0)
(13,WLANDXE_POWER_STATE_FULL == dxeCtxt->hostPowerState)
(14,status = dxeTXCompFrame(dxeCtxt, channelCb)
(15,dxeCtxt->txCompletedFrames)
(16,numRsvdDesc)
(17,channelCb)
(18,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "%s Enter", __func__)
(19,return;)
(20,WLANDXE_POWER_STATE_FULL)
(21,hostPowerState)
(22,*channelCb  = NULL)
(23,dxeCtxt)
(24,eWLAN_PAL_STATUS_SUCCESS)
(25,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc)
(26,WDTS_CHANNEL_TX_HIGH_PRI)
(27,txIntEnable)
(28,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(29,channelType)
(30,dxeCtxt)
(31,RET)
(32,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI])
(33,channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI])
(34,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI])
(35,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc)
(36,dxeChannel)
(37,WDTS_CHANNEL_TX_LOW_PRI)
(38,&dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI])
(39,channelCb)
(40,numRsvdDesc)
(41,eWLAN_PAL_FALSE)
(42,dxeCtxt->dxeChannel)
(43,status)
(44,txCompletedFrames)
(45,eWLAN_PAL_FALSE == dxeCtxt->txIntEnable)
(46,dxeCtxt)
(47,channelType)
(48,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(49,dxeCtxt)
(50,channelCb)
(51,dxeCtxt->dxeChannel)
(52,eWLAN_PAL_TRUE)
(53,(eWLAN_PAL_FALSE == dxeCtxt->txIntEnable)
(54,dxeCtxt)
(55,channelCb)
(56,NULL)
(57,__func__)
(58,WDTS_CHANNEL_TX_LOW_PRI)
(59,status     = eWLAN_PAL_STATUS_SUCCESS)
(60,dxeCtxt->txCompletedFrames > 0)
(61,eWLAN_PAL_FALSE)
(62,dxeCtxt->txIntEnable =  eWLAN_PAL_TRUE)
(63,)
(64,channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType])
(65,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,\n\\n               "%s %s : %d, %s : %d", __func__,\n\\n               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType],\n\\n               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc,\n\\n               channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType],\n\\n               dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc)
(66,status)
(67,status = dxeTXCompFrame(dxeCtxt, channelCb)
(68,dxeChannel)
(69,&dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI])
(70,dxeCtxt)
(71,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "%s Exit", __func__)
(72,"%s %s : %d, %s : %d")
(73,dxeChannel)
(74,eWLAN_MODULE_DAL_DATA)
(75,__func__)
(76,eWLAN_MODULE_DAL_DATA)
(77,dxePsComplete(dxeCtxt, eWLAN_PAL_FALSE)
(78,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI])
(79,status)
(80,channelType)
(81,dxeTXCompFrame(dxeCtxt, channelCb)
(82,channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI])
(83,WDTS_CHANNEL_TX_HIGH_PRI)
(84,__func__)
(85,dxeChannel)
(86,status)
(87,"%s Exit")
(88,dxeCtxt)
(89,channelType[dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType])
(90,dxeCtxt)
(91,dxeCtxt->txIntEnable)
(92,eWLAN_MODULE_DAL_DATA)
(93,dxeChannel)
(94,if((eWLAN_PAL_FALSE == dxeCtxt->txIntEnable)
(95,DXE_INTERRUPT_TX_COMPLE)
(96,dxeCtxt->hostPowerState)
(97,dxeCtxt)
(98,dxeCtxt)
(99,dxeTXCompFrame(dxeCtxt, channelCb)
(100,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI])
(101,)
(102,dxeCtxt)
(103,0)
(104,channelCb)
(105,dxeCtxt->dxeChannel)
(106,"%s Enter")
(107,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].channelType)
(108,dxeCtxt)
(109,dxeChannel)
(110,channelType)
(111,WLANDXE_CtrlBlkType *dxeCtxt)
(112,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI])
(113,dxeCtxt->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].channelType)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^