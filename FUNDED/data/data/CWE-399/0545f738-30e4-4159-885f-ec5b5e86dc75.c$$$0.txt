-----label-----
1
-----code-----
static int nbd_thread(void *data)
{
	struct nbd_device *nbd = data;
	struct request *req;

	set_user_nice(current, MIN_NICE);
	while (!kthread_should_stop() || !list_empty(&nbd->waiting_queue)) {
		/* wait for something to do */
		wait_event_interruptible(nbd->waiting_wq,
					 kthread_should_stop() ||
					 !list_empty(&nbd->waiting_queue));

		/* extract request */
		if (list_empty(&nbd->waiting_queue))
			continue;

		spin_lock_irq(&nbd->queue_lock);
		req = list_entry(nbd->waiting_queue.next, struct request,
				 queuelist);
		list_del_init(&req->queuelist);
		spin_unlock_irq(&nbd->queue_lock);

		/* handle request */
		nbd_handle_req(nbd, req);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
28,29
29,30
29,31
29,32
30,31
32,33
34,35
36,37
36,38
37,38
37,39
38,39
39,40
40,41
42,43
43,44
43,45
44,45
46,47
47,48
47,49
48,49
51,52
51,53
51,54
51,55
51,56
51,57
51,58
52,53
53,54
53,55
53,56
54,55
56,57
56,58
57,58
60,61
60,62
61,62
62,63
64,65
65,66
65,67
66,67
68,69
69,70
69,71
70,71
73,74
73,75
74,75
74,76
75,76
77,78
78,79
78,80
79,80
83,84
84,85
84,86
85,86
87,88
88,89
88,90
89,90
92,93
93,94
94,95
94,96
95,96
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
106,107
107,108
107,109
108,109
111,112
112,113
112,114
112,115
113,114
115,116
117,118
119,120
-----nextToken-----
2,4,6,8,9,14,16,17,20,24,26,27,31,33,35,41,45,49,50,55,58,59,63,67,71,72,76,80,81,82,86,90,91,96,100,101,105,109,110,114,116,118,120
-----computeFrom-----
37,38
37,39
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;WhileStatement;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int nbd_thread(void *data){	struct nbd_device *nbd = data;	struct request *req;	set_user_nice(current, MIN_NICE);	while (!kthread_should_stop() || !list_empty(&nbd->waiting_queue)) {		/* wait for something to do */		wait_event_interruptible(nbd->waiting_wq,					 kthread_should_stop() ||					 !list_empty(&nbd->waiting_queue));		/* extract request */		if (list_empty(&nbd->waiting_queue))			continue;		spin_lock_irq(&nbd->queue_lock);		req = list_entry(nbd->waiting_queue.next, struct request,				 queuelist);		list_del_init(&req->queuelist);		spin_unlock_irq(&nbd->queue_lock);		/* handle request */		nbd_handle_req(nbd, req);	}	return 0;}
static int
nbd_thread(void *data)
nbd_thread
void *data
void
*data
*
data
{	struct nbd_device *nbd = data;	struct request *req;	set_user_nice(current, MIN_NICE);	while (!kthread_should_stop() || !list_empty(&nbd->waiting_queue)) {		/* wait for something to do */		wait_event_interruptible(nbd->waiting_wq,					 kthread_should_stop() ||					 !list_empty(&nbd->waiting_queue));		/* extract request */		if (list_empty(&nbd->waiting_queue))			continue;		spin_lock_irq(&nbd->queue_lock);		req = list_entry(nbd->waiting_queue.next, struct request,				 queuelist);		list_del_init(&req->queuelist);		spin_unlock_irq(&nbd->queue_lock);		/* handle request */		nbd_handle_req(nbd, req);	}	return 0;}
struct nbd_device *nbd = data;
struct nbd_device *nbd = data;
struct nbd_device
nbd_device
*nbd = data
*
nbd
= data
data
data
struct request *req;
struct request *req;
struct request
request
*req
*
req
set_user_nice(current, MIN_NICE);
set_user_nice(current, MIN_NICE)
set_user_nice
set_user_nice
current
current
MIN_NICE
MIN_NICE
while (!kthread_should_stop() || !list_empty(&nbd->waiting_queue)) {		/* wait for something to do */		wait_event_interruptible(nbd->waiting_wq,					 kthread_should_stop() ||					 !list_empty(&nbd->waiting_queue));		/* extract request */		if (list_empty(&nbd->waiting_queue))			continue;		spin_lock_irq(&nbd->queue_lock);		req = list_entry(nbd->waiting_queue.next, struct request,				 queuelist);		list_del_init(&req->queuelist);		spin_unlock_irq(&nbd->queue_lock);		/* handle request */		nbd_handle_req(nbd, req);	}
!kthread_should_stop() || !list_empty(&nbd->waiting_queue)
!kthread_should_stop()
kthread_should_stop()
kthread_should_stop
kthread_should_stop
!list_empty(&nbd->waiting_queue)
list_empty(&nbd->waiting_queue)
list_empty
list_empty
&nbd->waiting_queue
nbd->waiting_queue
nbd
nbd
waiting_queue
{		/* wait for something to do */		wait_event_interruptible(nbd->waiting_wq,					 kthread_should_stop() ||					 !list_empty(&nbd->waiting_queue));		/* extract request */		if (list_empty(&nbd->waiting_queue))			continue;		spin_lock_irq(&nbd->queue_lock);		req = list_entry(nbd->waiting_queue.next, struct request,				 queuelist);		list_del_init(&req->queuelist);		spin_unlock_irq(&nbd->queue_lock);		/* handle request */		nbd_handle_req(nbd, req);	}
wait_event_interruptible(nbd->waiting_wq,					 kthread_should_stop() ||					 !list_empty(&nbd->waiting_queue));
wait_event_interruptible(nbd->waiting_wq,					 kthread_should_stop() ||					 !list_empty(&nbd->waiting_queue))
wait_event_interruptible
wait_event_interruptible
nbd->waiting_wq
nbd
nbd
waiting_wq
kthread_should_stop() ||					 !list_empty(&nbd->waiting_queue)
kthread_should_stop()
kthread_should_stop
kthread_should_stop
!list_empty(&nbd->waiting_queue)
list_empty(&nbd->waiting_queue)
list_empty
list_empty
&nbd->waiting_queue
nbd->waiting_queue
nbd
nbd
waiting_queue
if (list_empty(&nbd->waiting_queue))			continue;
list_empty(&nbd->waiting_queue)
list_empty
list_empty
&nbd->waiting_queue
nbd->waiting_queue
nbd
nbd
waiting_queue
continue;
spin_lock_irq(&nbd->queue_lock);
spin_lock_irq(&nbd->queue_lock)
spin_lock_irq
spin_lock_irq
&nbd->queue_lock
nbd->queue_lock
nbd
nbd
queue_lock
req = list_entry(nbd->waiting_queue.next, struct request,				 queuelist);
list_del_init(&req->queuelist);
list_del_init(&req->queuelist)
list_del_init
list_del_init
&req->queuelist
req->queuelist
req
req
queuelist
spin_unlock_irq(&nbd->queue_lock);
spin_unlock_irq(&nbd->queue_lock)
spin_unlock_irq
spin_unlock_irq
&nbd->queue_lock
nbd->queue_lock
nbd
nbd
queue_lock
nbd_handle_req(nbd, req);
nbd_handle_req(nbd, req)
nbd_handle_req
nbd_handle_req
nbd
nbd
req
req
return 0;
0
-----joern-----
(46,29,0)
(1,16,0)
(8,9,0)
(11,30,0)
(51,10,0)
(20,7,0)
(15,53,0)
(9,8,0)
(35,53,0)
(22,58,0)
(12,2,0)
(41,34,0)
(37,12,0)
(31,55,0)
(49,40,0)
(57,32,0)
(30,52,0)
(13,29,0)
(22,31,0)
(7,10,0)
(13,3,0)
(58,22,0)
(3,14,0)
(36,6,0)
(60,32,0)
(50,48,0)
(21,27,0)
(25,26,0)
(42,11,0)
(2,17,0)
(4,40,0)
(22,14,0)
(38,58,0)
(25,40,0)
(11,48,0)
(9,6,0)
(47,34,0)
(12,30,0)
(31,59,0)
(40,25,0)
(48,11,0)
(7,30,0)
(53,35,0)
(56,7,0)
(44,29,0)
(18,14,0)
(17,14,0)
(15,50,0)
(40,30,0)
(8,14,0)
(10,7,0)
(45,27,0)
(5,12,0)
(10,51,0)
(2,12,0)
(29,13,0)
(26,59,0)
(16,27,0)
(59,26,0)
(0,6,0)
(34,30,0)
(26,25,0)
(55,31,0)
(28,30,0)
(30,27,0)
(33,16,0)
(29,30,0)
(35,23,0)
(24,27,0)
(58,30,0)
(39,58,0)
(3,13,0)
(34,14,0)
(17,2,0)
(23,35,0)
(31,22,0)
(59,31,0)
(32,27,0)
(54,11,0)
(6,9,0)
(19,30,0)
(50,15,0)
(53,15,0)
(48,50,0)
(5,37,1)
(3,13,1)
(0,17,1)
(47,41,1)
(16,1,1)
(22,58,1)
(4,49,1)
(40,30,1)
(31,59,1)
(29,30,1)
(55,58,1)
(34,30,1)
(22,31,1)
(33,30,1)
(60,53,1)
(34,47,1)
(39,53,1)
(49,55,1)
(54,42,1)
(29,46,1)
(40,4,1)
(42,35,1)
(30,19,1)
(2,12,1)
(8,9,1)
(23,34,1)
(23,43,1)
(25,40,1)
(53,15,1)
(59,26,1)
(56,22,1)
(46,44,1)
(23,16,1)
(32,60,1)
(1,33,1)
(9,6,1)
(58,30,1)
(12,30,1)
(26,25,1)
(48,11,1)
(31,55,1)
(50,48,1)
(51,10,1)
(13,29,1)
(43,51,1)
(57,32,1)
(11,30,1)
(20,56,1)
(7,30,1)
(17,2,1)
(15,50,1)
(11,54,1)
(44,8,1)
(53,35,1)
(58,38,1)
(19,28,1)
(41,3,1)
(10,7,1)
(38,39,1)
(37,51,1)
(6,36,1)
(30,52,1)
(12,5,1)
(36,0,1)
(7,20,1)
(35,23,1)
(8,51,2)
(6,51,2)
(7,30,2)
(15,35,2)
(40,30,2)
(53,35,2)
(53,15,2)
(50,48,2)
(3,13,2)
(23,53,2)
(49,55,2)
(58,30,2)
(2,12,2)
(29,30,2)
(31,53,2)
(51,10,2)
(22,31,2)
(40,55,2)
(26,55,2)
(54,35,2)
(59,55,2)
(13,51,2)
(44,51,2)
(10,7,2)
(25,55,2)
(17,51,2)
(25,40,2)
(55,53,2)
(20,53,2)
(48,11,2)
(8,9,2)
(5,51,2)
(0,51,2)
(31,55,2)
(7,53,2)
(46,51,2)
(58,53,2)
(42,35,2)
(17,2,2)
(38,53,2)
(12,51,2)
(53,53,2)
(13,29,2)
(47,51,2)
(22,53,2)
(43,51,2)
(34,30,2)
(35,23,2)
(59,26,2)
(35,53,2)
(4,55,2)
(48,35,2)
(29,51,2)
(11,35,2)
(57,32,2)
(36,51,2)
(51,53,2)
(50,35,2)
(9,6,2)
(9,51,2)
(3,51,2)
(39,53,2)
(11,30,2)
(56,53,2)
(15,50,2)
(41,51,2)
(31,59,2)
(22,58,2)
(26,25,2)
(37,51,2)
(12,30,2)
(30,52,2)
(2,51,2)
(10,53,2)
(34,51,2)
-----------------------------------
(0,req)
(1,MIN_NICE)
(2,&nbd->queue_lock)
(3,spin_unlock_irq(&nbd->queue_lock)
(4,waiting_queue)
(5,queue_lock)
(6,req->queuelist)
(7,nbd->waiting_queue)
(8,list_del_init(&req->queuelist)
(9,&req->queuelist)
(10,&nbd->waiting_queue)
(11,nbd->waiting_queue)
(12,nbd->queue_lock)
(13,&nbd->queue_lock)
(14,)
(15,!list_empty(&nbd->waiting_queue)
(16,set_user_nice(current, MIN_NICE)
(17,spin_lock_irq(&nbd->queue_lock)
(18,if (list_empty(&nbd->waiting_queue)
(19,data)
(20,waiting_queue)
(21,while (!kthread_should_stop()
(22,wait_event_interruptible(nbd->waiting_wq,\n\\n\\t\\t\\t\\t\\t kthread_should_stop()
(23,kthread_should_stop()
(24,nbd)
(25,&nbd->waiting_queue)
(26,list_empty(&nbd->waiting_queue)
(27,)
(28,nbd)
(29,nbd->queue_lock)
(30,*nbd = data)
(31,kthread_should_stop()
(32,return 0;)
(33,current)
(34,nbd_handle_req(nbd, req)
(35,!kthread_should_stop()
(36,queuelist)
(37,nbd)
(38,waiting_wq)
(39,nbd)
(40,nbd->waiting_queue)
(41,nbd)
(42,nbd)
(43,continue;)
(44,nbd)
(45,req)
(46,queue_lock)
(47,req)
(48,&nbd->waiting_queue)
(49,nbd)
(50,list_empty(&nbd->waiting_queue)
(51,list_empty(&nbd->waiting_queue)
(52,void *data)
(53,!kthread_should_stop()
(54,waiting_queue)
(55,kthread_should_stop()
(56,nbd)
(57,RET)
(58,nbd->waiting_wq)
(59,!list_empty(&nbd->waiting_queue)
(60,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^