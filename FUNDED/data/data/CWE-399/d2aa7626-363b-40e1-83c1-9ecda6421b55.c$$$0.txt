-----label-----
0
-----code-----
void brcmf_sdio_init(void)
{
	int ret;

	brcmf_dbg(SDIO, "Enter\n");

	ret = platform_driver_probe(&brcmf_sdio_pd, brcmf_sdio_pd_probe);
	if (ret == -ENODEV) {
		brcmf_dbg(SDIO, "No platform data available, registering without.\n");
		ret = sdio_register_driver(&brcmf_sdmmc_driver);
	}

	if (ret)
		brcmf_err("driver registration failed: %d\n", ret);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
10,11
11,12
11,13
13,14
15,16
16,17
16,18
16,19
17,18
19,20
22,23
23,24
23,25
24,25
26,27
26,28
26,29
27,28
29,30
30,31
32,33
34,35
34,36
35,36
35,37
36,37
38,39
39,40
41,42
41,43
42,43
43,44
43,45
43,46
44,45
46,47
49,50
50,51
50,52
51,52
53,54
53,55
54,55
56,57
57,58
59,60
59,61
60,61
62,63
63,64
63,65
63,66
64,65
67,68
-----nextToken-----
2,4,6,8,12,14,18,20,21,25,28,31,33,37,40,45,47,48,52,55,58,61,65,66,68
-----computeFrom-----
23,24
23,25
35,36
35,37
50,51
50,52
-----guardedBy-----
37,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;
-----ast_node-----
void brcmf_sdio_init(void){	int ret;	brcmf_dbg(SDIO, "Enter\n");	ret = platform_driver_probe(&brcmf_sdio_pd, brcmf_sdio_pd_probe);	if (ret == -ENODEV) {		brcmf_dbg(SDIO, "No platform data available, registering without.\n");		ret = sdio_register_driver(&brcmf_sdmmc_driver);	}	if (ret)		brcmf_err("driver registration failed: %d\n", ret);}
void
brcmf_sdio_init(void)
brcmf_sdio_init
void
void


{	int ret;	brcmf_dbg(SDIO, "Enter\n");	ret = platform_driver_probe(&brcmf_sdio_pd, brcmf_sdio_pd_probe);	if (ret == -ENODEV) {		brcmf_dbg(SDIO, "No platform data available, registering without.\n");		ret = sdio_register_driver(&brcmf_sdmmc_driver);	}	if (ret)		brcmf_err("driver registration failed: %d\n", ret);}
int ret;
int ret;
int
ret
ret
brcmf_dbg(SDIO, "Enter\n");
brcmf_dbg(SDIO, "Enter\n")
brcmf_dbg
brcmf_dbg
SDIO
SDIO
"Enter\n"
ret = platform_driver_probe(&brcmf_sdio_pd, brcmf_sdio_pd_probe);
ret = platform_driver_probe(&brcmf_sdio_pd, brcmf_sdio_pd_probe)
ret
ret
platform_driver_probe(&brcmf_sdio_pd, brcmf_sdio_pd_probe)
platform_driver_probe
platform_driver_probe
&brcmf_sdio_pd
brcmf_sdio_pd
brcmf_sdio_pd
brcmf_sdio_pd_probe
brcmf_sdio_pd_probe
if (ret == -ENODEV) {		brcmf_dbg(SDIO, "No platform data available, registering without.\n");		ret = sdio_register_driver(&brcmf_sdmmc_driver);	}
ret == -ENODEV
ret
ret
-ENODEV
ENODEV
ENODEV
{		brcmf_dbg(SDIO, "No platform data available, registering without.\n");		ret = sdio_register_driver(&brcmf_sdmmc_driver);	}
brcmf_dbg(SDIO, "No platform data available, registering without.\n");
brcmf_dbg(SDIO, "No platform data available, registering without.\n")
brcmf_dbg
brcmf_dbg
SDIO
SDIO
"No platform data available, registering without.\n"
ret = sdio_register_driver(&brcmf_sdmmc_driver);
ret = sdio_register_driver(&brcmf_sdmmc_driver)
ret
ret
sdio_register_driver(&brcmf_sdmmc_driver)
sdio_register_driver
sdio_register_driver
&brcmf_sdmmc_driver
brcmf_sdmmc_driver
brcmf_sdmmc_driver
if (ret)		brcmf_err("driver registration failed: %d\n", ret);
ret
ret
brcmf_err("driver registration failed: %d\n", ret);
brcmf_err("driver registration failed: %d\n", ret)
brcmf_err
brcmf_err
"driver registration failed: %d\n"
ret
ret
-----joern-----
(24,7,0)
(27,26,0)
(22,29,0)
(4,3,0)
(29,22,0)
(29,12,0)
(11,20,0)
(10,14,0)
(7,16,0)
(20,12,0)
(25,12,0)
(18,14,0)
(0,29,0)
(26,20,0)
(12,14,0)
(6,8,0)
(6,7,0)
(19,12,0)
(3,16,0)
(5,8,0)
(9,25,0)
(23,22,0)
(8,6,0)
(20,26,0)
(12,20,0)
(15,28,0)
(7,6,0)
(28,14,0)
(30,3,0)
(2,28,0)
(25,7,0)
(1,25,0)
(17,14,0)
(9,13,1)
(30,4,1)
(13,7,1)
(28,15,1)
(29,22,1)
(20,26,1)
(26,27,1)
(25,7,1)
(25,1,1)
(25,12,1)
(24,3,1)
(13,29,1)
(4,29,1)
(6,8,1)
(15,2,1)
(27,19,1)
(22,23,1)
(3,30,1)
(5,24,1)
(1,9,1)
(20,11,1)
(19,28,1)
(7,6,1)
(11,26,1)
(0,12,1)
(21,25,1)
(12,20,1)
(8,5,1)
(21,13,1)
(23,0,1)
(29,12,1)
(25,7,2)
(8,29,2)
(7,6,2)
(9,13,2)
(25,13,2)
(6,8,2)
(30,29,2)
(25,12,2)
(6,29,2)
(24,29,2)
(20,26,2)
(29,12,2)
(3,29,2)
(7,29,2)
(29,22,2)
(4,29,2)
(5,29,2)
(12,20,2)
(1,13,2)
-----------------------------------
(0,ret)
(1,ret)
(2,SDIO)
(3,brcmf_dbg(SDIO, "No platform data available, registering without.\\n")
(4,SDIO)
(5,brcmf_sdmmc_driver)
(6,sdio_register_driver(&brcmf_sdmmc_driver)
(7,ret = sdio_register_driver(&brcmf_sdmmc_driver)
(8,&brcmf_sdmmc_driver)
(9,"driver registration failed: %d\\n")
(10,ret)
(11,brcmf_sdio_pd_probe)
(12,ret = platform_driver_probe(&brcmf_sdio_pd, brcmf_sdio_pd_probe)
(13,ret)
(14,)
(15,"Enter\\n")
(16,)
(17,if (ret == -ENODEV)
(18,if (ret)
(19,ret)
(20,platform_driver_probe(&brcmf_sdio_pd, brcmf_sdio_pd_probe)
(21,RET)
(22,-ENODEV)
(23,ENODEV)
(24,ret)
(25,brcmf_err("driver registration failed: %d\\n", ret)
(26,&brcmf_sdio_pd)
(27,brcmf_sdio_pd)
(28,brcmf_dbg(SDIO, "Enter\\n")
(29,ret == -ENODEV)
(30,"No platform data available, registering without.\\n")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^