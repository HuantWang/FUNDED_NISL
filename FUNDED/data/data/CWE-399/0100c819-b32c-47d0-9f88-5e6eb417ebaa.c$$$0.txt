-----label-----
1
-----code-----
ssize_t copy_oldmem_page(unsigned long pfn, char *buf,
			 size_t csize, unsigned long offset,
			 int userbuf)
{
	void *vaddr;

	if (!csize)
		return 0;

	vaddr = ioremap(__pfn_to_phys(pfn), PAGE_SIZE);
	if (!vaddr)
		return -ENOMEM;

	if (userbuf) {
		if (copy_to_user(buf, vaddr + offset, csize)) {
			iounmap(vaddr);
			return -EFAULT;
		}
	} else {
		memcpy(buf, vaddr + offset, csize);
	}

	iounmap(vaddr);
	return csize;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
6,7
6,8
8,9
10,11
10,12
12,13
12,14
15,16
15,17
16,17
18,19
20,21
20,22
22,23
24,25
24,26
26,27
28,29
28,30
28,31
28,32
28,33
28,34
28,35
29,30
30,31
30,32
32,33
32,34
35,36
35,37
36,37
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
45,48
46,47
48,49
48,50
49,50
51,52
53,54
55,56
55,57
56,57
57,58
59,60
60,61
61,62
63,64
63,65
63,66
64,65
66,67
67,68
67,69
68,69
68,70
68,71
68,72
69,70
71,72
73,74
73,75
74,75
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
85,86
87,88
88,89
89,90
91,92
92,93
93,94
93,95
93,96
93,97
94,95
96,97
98,99
98,100
99,100
101,102
103,104
105,106
106,107
106,108
107,108
109,110
111,112
112,113
-----nextToken-----
3,5,7,9,11,13,14,17,19,21,23,25,27,31,33,34,38,40,44,47,50,52,54,58,62,65,70,72,75,77,79,84,86,90,95,97,100,102,104,108,110,113
-----computeFrom-----
42,43
42,44
73,74
73,75
98,99
98,100
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
ssize_t copy_oldmem_page(unsigned long pfn, char *buf,			 size_t csize, unsigned long offset,			 int userbuf){	void *vaddr;	if (!csize)		return 0;	vaddr = ioremap(__pfn_to_phys(pfn), PAGE_SIZE);	if (!vaddr)		return -ENOMEM;	if (userbuf) {		if (copy_to_user(buf, vaddr + offset, csize)) {			iounmap(vaddr);			return -EFAULT;		}	} else {		memcpy(buf, vaddr + offset, csize);	}	iounmap(vaddr);	return csize;}
ssize_t
ssize_t
copy_oldmem_page(unsigned long pfn, char *buf,			 size_t csize, unsigned long offset,			 int userbuf)
copy_oldmem_page
unsigned long pfn
unsigned long
pfn
pfn
char *buf
char
*buf
*
buf
size_t csize
size_t
size_t
csize
csize
unsigned long offset
unsigned long
offset
offset
int userbuf
int
userbuf
userbuf
{	void *vaddr;	if (!csize)		return 0;	vaddr = ioremap(__pfn_to_phys(pfn), PAGE_SIZE);	if (!vaddr)		return -ENOMEM;	if (userbuf) {		if (copy_to_user(buf, vaddr + offset, csize)) {			iounmap(vaddr);			return -EFAULT;		}	} else {		memcpy(buf, vaddr + offset, csize);	}	iounmap(vaddr);	return csize;}
void *vaddr;
void *vaddr;
void
*vaddr
*
vaddr
if (!csize)		return 0;
!csize
csize
csize
return 0;
0
vaddr = ioremap(__pfn_to_phys(pfn), PAGE_SIZE);
vaddr = ioremap(__pfn_to_phys(pfn), PAGE_SIZE)
vaddr
vaddr
ioremap(__pfn_to_phys(pfn), PAGE_SIZE)
ioremap
ioremap
__pfn_to_phys(pfn)
__pfn_to_phys
__pfn_to_phys
pfn
pfn
PAGE_SIZE
PAGE_SIZE
if (!vaddr)		return -ENOMEM;
!vaddr
vaddr
vaddr
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
if (userbuf) {		if (copy_to_user(buf, vaddr + offset, csize)) {			iounmap(vaddr);			return -EFAULT;		}	} else {		memcpy(buf, vaddr + offset, csize);	}
userbuf
userbuf
{		if (copy_to_user(buf, vaddr + offset, csize)) {			iounmap(vaddr);			return -EFAULT;		}	}
if (copy_to_user(buf, vaddr + offset, csize)) {			iounmap(vaddr);			return -EFAULT;		}
copy_to_user(buf, vaddr + offset, csize)
copy_to_user
copy_to_user
buf
buf
vaddr + offset
vaddr
vaddr
offset
offset
csize
csize
{			iounmap(vaddr);			return -EFAULT;		}
iounmap(vaddr);
iounmap(vaddr)
iounmap
iounmap
vaddr
vaddr
return -EFAULT;
-EFAULT
EFAULT
EFAULT
{		memcpy(buf, vaddr + offset, csize);	}
memcpy(buf, vaddr + offset, csize);
memcpy(buf, vaddr + offset, csize)
memcpy
memcpy
buf
buf
vaddr + offset
vaddr
vaddr
offset
offset
csize
csize
iounmap(vaddr);
iounmap(vaddr)
iounmap
iounmap
vaddr
vaddr
return csize;
csize
csize
-----joern-----
(29,43,0)
(27,0,0)
(1,8,0)
(32,43,0)
(12,21,0)
(35,21,0)
(25,37,0)
(48,44,0)
(44,7,0)
(20,4,0)
(38,43,0)
(42,25,0)
(20,23,0)
(31,7,0)
(21,23,0)
(33,4,0)
(15,4,0)
(35,5,0)
(48,1,0)
(46,36,0)
(48,34,0)
(19,29,0)
(37,25,0)
(13,22,0)
(0,2,0)
(11,24,0)
(25,6,0)
(35,7,0)
(4,37,0)
(44,43,0)
(22,14,0)
(48,14,0)
(10,37,0)
(39,21,0)
(35,2,0)
(3,35,0)
(30,4,0)
(45,20,0)
(26,31,0)
(16,44,0)
(15,8,0)
(21,35,0)
(17,30,0)
(21,4,0)
(41,43,0)
(20,0,0)
(0,7,0)
(29,4,0)
(18,0,0)
(49,20,0)
(37,4,0)
(50,34,0)
(9,43,0)
(36,1,0)
(4,43,0)
(47,35,0)
(0,20,0)
(28,15,0)
(19,35,1)
(30,17,1)
(37,10,1)
(21,23,1)
(48,44,1)
(25,6,1)
(35,21,1)
(0,18,1)
(50,31,1)
(35,47,1)
(15,4,1)
(31,26,1)
(29,19,1)
(35,7,1)
(20,23,1)
(0,2,1)
(27,40,1)
(48,1,1)
(22,13,1)
(44,16,1)
(30,4,1)
(28,0,1)
(25,42,1)
(46,15,1)
(17,4,1)
(47,21,1)
(20,4,1)
(34,50,1)
(0,20,1)
(18,20,1)
(21,12,1)
(15,28,1)
(21,4,1)
(20,45,1)
(19,0,1)
(13,30,1)
(39,3,1)
(10,25,1)
(48,14,1)
(14,22,1)
(45,49,1)
(49,27,1)
(44,7,1)
(42,33,1)
(36,46,1)
(3,40,1)
(0,7,1)
(12,39,1)
(40,30,1)
(37,25,1)
(29,4,1)
(33,31,1)
(48,34,1)
(16,29,1)
(35,2,1)
(31,7,1)
(1,36,1)
(4,37,1)
(48,14,2)
(37,31,2)
(16,0,2)
(33,31,2)
(50,31,2)
(47,40,2)
(29,0,2)
(13,30,2)
(28,0,2)
(30,31,2)
(15,4,2)
(48,1,2)
(35,40,2)
(16,40,2)
(44,40,2)
(10,31,2)
(44,7,2)
(49,40,2)
(20,4,2)
(21,23,2)
(21,4,2)
(48,34,2)
(20,40,2)
(35,2,2)
(25,6,2)
(1,0,2)
(20,23,2)
(0,40,2)
(27,40,2)
(48,44,2)
(39,40,2)
(31,7,2)
(34,31,2)
(35,21,2)
(0,2,2)
(0,7,2)
(29,4,2)
(0,20,2)
(45,40,2)
(30,4,2)
(19,40,2)
(18,40,2)
(4,31,2)
(40,30,2)
(15,0,2)
(29,40,2)
(36,0,2)
(19,0,2)
(42,31,2)
(35,7,2)
(21,40,2)
(17,31,2)
(4,37,2)
(3,40,2)
(44,0,2)
(37,25,2)
(22,30,2)
(25,31,2)
(12,40,2)
(46,0,2)
(14,30,2)
-----------------------------------
(0,copy_to_user(buf, vaddr + offset, csize)
(1,return -EFAULT;)
(2,char *buf)
(3,buf)
(4,vaddr = ioremap(__pfn_to_phys(pfn)
(5,)
(6,unsigned long pfn)
(7,size_t csize)
(8,)
(9,if (!vaddr)
(10,PAGE_SIZE)
(11,if (copy_to_user(buf, vaddr + offset, csize)
(12,offset)
(13,ENOMEM)
(14,return -ENOMEM;)
(15,iounmap(vaddr)
(16,csize)
(17,vaddr)
(18,csize)
(19,vaddr)
(20,vaddr + offset)
(21,vaddr + offset)
(22,-ENOMEM)
(23,unsigned long offset)
(24,)
(25,__pfn_to_phys(pfn)
(26,csize)
(27,buf)
(28,vaddr)
(29,iounmap(vaddr)
(30,!vaddr)
(31,!csize)
(32,if (userbuf)
(33,vaddr)
(34,return 0;)
(35,memcpy(buf, vaddr + offset, csize)
(36,-EFAULT)
(37,ioremap(__pfn_to_phys(pfn)
(38,if (!csize)
(39,vaddr)
(40,userbuf)
(41,vaddr)
(42,pfn)
(43,)
(44,return csize;)
(45,offset)
(46,EFAULT)
(47,csize)
(48,RET)
(49,vaddr)
(50,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^