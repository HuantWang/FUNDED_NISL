-----label-----
1
-----code-----
static int smiapp_registered(struct v4l2_subdev *subdev)
{
	struct smiapp_sensor *sensor = to_smiapp_sensor(subdev);
	int rval;

	if (sensor->scaler) {
		rval = smiapp_register_subdev(
			sensor, sensor->binner, sensor->scaler,
			SMIAPP_PAD_SRC, SMIAPP_PAD_SINK,
			MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);
		if (rval < 0)
			return rval;
	}

	return smiapp_register_subdev(
		sensor, sensor->pixel_array, sensor->binner,
		SMIAPP_PA_PAD_SRC, SMIAPP_PAD_SINK,
		MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
28,29
30,31
30,32
31,32
31,33
32,33
35,36
35,37
36,37
37,38
37,39
38,39
40,41
40,42
40,43
40,44
40,45
40,46
40,47
41,42
43,44
45,46
45,47
46,47
49,50
49,51
50,51
53,54
55,56
57,58
57,59
58,59
60,61
62,63
62,64
63,64
63,65
64,65
67,68
68,69
70,71
71,72
71,73
71,74
71,75
71,76
71,77
71,78
72,73
74,75
76,77
76,78
77,78
80,81
80,82
81,82
84,85
86,87
88,89
88,90
89,90
91,92
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,27,29,33,34,39,42,44,47,48,51,52,54,56,59,61,65,66,69,73,75,78,79,82,83,85,87,90,92
-----computeFrom-----
37,38
37,39
57,58
57,59
63,64
63,65
88,89
88,90
-----guardedBy-----
65,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static int smiapp_registered(struct v4l2_subdev *subdev){	struct smiapp_sensor *sensor = to_smiapp_sensor(subdev);	int rval;	if (sensor->scaler) {		rval = smiapp_register_subdev(			sensor, sensor->binner, sensor->scaler,			SMIAPP_PAD_SRC, SMIAPP_PAD_SINK,			MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);		if (rval < 0)			return rval;	}	return smiapp_register_subdev(		sensor, sensor->pixel_array, sensor->binner,		SMIAPP_PA_PAD_SRC, SMIAPP_PAD_SINK,		MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);}
static int
smiapp_registered(struct v4l2_subdev *subdev)
smiapp_registered
struct v4l2_subdev *subdev
struct v4l2_subdev
v4l2_subdev
*subdev
*
subdev
{	struct smiapp_sensor *sensor = to_smiapp_sensor(subdev);	int rval;	if (sensor->scaler) {		rval = smiapp_register_subdev(			sensor, sensor->binner, sensor->scaler,			SMIAPP_PAD_SRC, SMIAPP_PAD_SINK,			MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);		if (rval < 0)			return rval;	}	return smiapp_register_subdev(		sensor, sensor->pixel_array, sensor->binner,		SMIAPP_PA_PAD_SRC, SMIAPP_PAD_SINK,		MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);}
struct smiapp_sensor *sensor = to_smiapp_sensor(subdev);
struct smiapp_sensor *sensor = to_smiapp_sensor(subdev);
struct smiapp_sensor
smiapp_sensor
*sensor = to_smiapp_sensor(subdev)
*
sensor
= to_smiapp_sensor(subdev)
to_smiapp_sensor(subdev)
to_smiapp_sensor
to_smiapp_sensor
subdev
subdev
int rval;
int rval;
int
rval
rval
if (sensor->scaler) {		rval = smiapp_register_subdev(			sensor, sensor->binner, sensor->scaler,			SMIAPP_PAD_SRC, SMIAPP_PAD_SINK,			MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);		if (rval < 0)			return rval;	}
sensor->scaler
sensor
sensor
scaler
{		rval = smiapp_register_subdev(			sensor, sensor->binner, sensor->scaler,			SMIAPP_PAD_SRC, SMIAPP_PAD_SINK,			MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);		if (rval < 0)			return rval;	}
rval = smiapp_register_subdev(			sensor, sensor->binner, sensor->scaler,			SMIAPP_PAD_SRC, SMIAPP_PAD_SINK,			MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);
rval = smiapp_register_subdev(			sensor, sensor->binner, sensor->scaler,			SMIAPP_PAD_SRC, SMIAPP_PAD_SINK,			MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE)
rval
rval
smiapp_register_subdev(			sensor, sensor->binner, sensor->scaler,			SMIAPP_PAD_SRC, SMIAPP_PAD_SINK,			MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE)
smiapp_register_subdev
smiapp_register_subdev
sensor
sensor
sensor->binner
sensor
sensor
binner
sensor->scaler
sensor
sensor
scaler
SMIAPP_PAD_SRC
SMIAPP_PAD_SRC
SMIAPP_PAD_SINK
SMIAPP_PAD_SINK
MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE
MEDIA_LNK_FL_ENABLED
MEDIA_LNK_FL_ENABLED
MEDIA_LNK_FL_IMMUTABLE
MEDIA_LNK_FL_IMMUTABLE
if (rval < 0)			return rval;
rval < 0
rval
rval
0
return rval;
rval
rval
return smiapp_register_subdev(		sensor, sensor->pixel_array, sensor->binner,		SMIAPP_PA_PAD_SRC, SMIAPP_PAD_SINK,		MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE);
smiapp_register_subdev(		sensor, sensor->pixel_array, sensor->binner,		SMIAPP_PA_PAD_SRC, SMIAPP_PAD_SINK,		MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE)
smiapp_register_subdev
smiapp_register_subdev
sensor
sensor
sensor->pixel_array
sensor
sensor
pixel_array
sensor->binner
sensor
sensor
binner
SMIAPP_PA_PAD_SRC
SMIAPP_PA_PAD_SRC
SMIAPP_PAD_SINK
SMIAPP_PAD_SINK
MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE
MEDIA_LNK_FL_ENABLED
MEDIA_LNK_FL_ENABLED
MEDIA_LNK_FL_IMMUTABLE
MEDIA_LNK_FL_IMMUTABLE
-----joern-----
(11,20,0)
(30,14,0)
(21,39,0)
(6,7,0)
(26,39,0)
(16,31,0)
(35,42,0)
(24,31,0)
(5,18,0)
(43,40,0)
(14,9,0)
(1,27,0)
(31,30,0)
(39,44,0)
(20,39,0)
(17,18,0)
(3,7,0)
(19,40,0)
(0,25,0)
(18,2,0)
(25,30,0)
(45,27,0)
(14,30,0)
(47,6,0)
(40,30,0)
(7,6,0)
(28,32,0)
(7,30,0)
(18,30,0)
(6,31,0)
(42,6,0)
(10,25,0)
(2,18,0)
(6,42,0)
(15,32,0)
(27,30,0)
(48,32,0)
(13,18,0)
(36,15,0)
(18,40,0)
(37,21,0)
(34,2,0)
(12,14,0)
(46,30,0)
(8,7,0)
(22,42,0)
(6,39,0)
(18,15,0)
(27,18,0)
(31,6,0)
(23,20,0)
(33,6,0)
(18,27,0)
(36,21,0)
(6,30,0)
(29,44,0)
(39,6,0)
(40,18,0)
(38,2,0)
(4,32,0)
(41,6,0)
(30,32,0)
(25,10,1)
(47,41,1)
(26,25,1)
(5,40,1)
(11,39,1)
(33,26,1)
(38,17,1)
(7,30,1)
(45,1,1)
(43,27,1)
(13,25,1)
(21,39,1)
(25,30,1)
(17,5,1)
(6,7,1)
(20,39,1)
(42,35,1)
(34,38,1)
(20,23,1)
(16,7,1)
(36,21,1)
(19,43,1)
(23,11,1)
(36,15,1)
(40,30,1)
(14,9,1)
(27,30,1)
(27,45,1)
(14,12,1)
(37,20,1)
(18,40,1)
(30,14,1)
(24,16,1)
(18,30,1)
(31,30,1)
(6,42,1)
(41,31,1)
(8,3,1)
(10,0,1)
(7,8,1)
(6,31,1)
(39,6,1)
(1,13,1)
(18,27,1)
(2,34,1)
(31,24,1)
(15,18,1)
(13,20,1)
(22,47,1)
(6,30,1)
(18,2,1)
(12,46,1)
(35,22,1)
(0,30,1)
(40,19,1)
(21,37,1)
(3,33,1)
(25,30,2)
(14,9,2)
(18,25,2)
(26,25,2)
(1,25,2)
(38,20,2)
(21,39,2)
(15,25,2)
(40,30,2)
(18,30,2)
(3,25,2)
(34,20,2)
(13,20,2)
(5,25,2)
(24,25,2)
(21,20,2)
(38,25,2)
(6,31,2)
(27,20,2)
(13,25,2)
(47,25,2)
(39,6,2)
(35,25,2)
(22,25,2)
(15,20,2)
(18,2,2)
(5,20,2)
(41,25,2)
(2,20,2)
(18,20,2)
(2,25,2)
(19,25,2)
(43,25,2)
(20,25,2)
(11,25,2)
(40,25,2)
(40,20,2)
(16,25,2)
(18,27,2)
(39,25,2)
(18,40,2)
(37,20,2)
(43,20,2)
(19,20,2)
(27,30,2)
(23,25,2)
(6,42,2)
(33,25,2)
(27,25,2)
(36,15,2)
(6,7,2)
(6,30,2)
(31,25,2)
(36,21,2)
(30,14,2)
(42,25,2)
(17,20,2)
(20,39,2)
(1,20,2)
(34,25,2)
(6,25,2)
(8,25,2)
(7,30,2)
(45,25,2)
(7,25,2)
(17,25,2)
(45,20,2)
(31,30,2)
-----------------------------------
(0,sensor)
(1,sensor)
(2,MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE)
(3,sensor)
(4,if (sensor->scaler)
(5,SMIAPP_PA_PAD_SRC)
(6,smiapp_register_subdev(\n\\n\\t\\t\\tsensor, sensor->binner, sensor->scaler,\n\\n\\t\\t\\tSMIAPP_PAD_SRC, SMIAPP_PAD_SINK,\n\\n\\t\\t\\tMEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE)
(7,sensor->binner)
(8,binner)
(9,struct v4l2_subdev *subdev)
(10,scaler)
(11,rval)
(12,subdev)
(13,sensor)
(14,to_smiapp_sensor(subdev)
(15,return smiapp_register_subdev(\n\\n\\t\\tsensor, sensor->pixel_array, sensor->binner,\n\\n\\t\\tSMIAPP_PA_PAD_SRC, SMIAPP_PAD_SINK,\n\\n\\t\\tMEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE)
(16,sensor)
(17,SMIAPP_PAD_SINK)
(18,smiapp_register_subdev(\n\\n\\t\\tsensor, sensor->pixel_array, sensor->binner,\n\\n\\t\\tSMIAPP_PA_PAD_SRC, SMIAPP_PAD_SINK,\n\\n\\t\\tMEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE)
(19,binner)
(20,rval < 0)
(21,return rval;)
(22,MEDIA_LNK_FL_ENABLED)
(23,0)
(24,scaler)
(25,sensor->scaler)
(26,rval)
(27,sensor->pixel_array)
(28,rval)
(29,if (rval < 0)
(30,*sensor = to_smiapp_sensor(subdev)
(31,sensor->scaler)
(32,)
(33,sensor)
(34,MEDIA_LNK_FL_IMMUTABLE)
(35,MEDIA_LNK_FL_IMMUTABLE)
(36,RET)
(37,rval)
(38,MEDIA_LNK_FL_ENABLED)
(39,rval = smiapp_register_subdev(\n\\n\\t\\t\\tsensor, sensor->binner, sensor->scaler,\n\\n\\t\\t\\tSMIAPP_PAD_SRC, SMIAPP_PAD_SINK,\n\\n\\t\\t\\tMEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE)
(40,sensor->binner)
(41,SMIAPP_PAD_SRC)
(42,MEDIA_LNK_FL_ENABLED | MEDIA_LNK_FL_IMMUTABLE)
(43,sensor)
(44,)
(45,pixel_array)
(46,sensor)
(47,SMIAPP_PAD_SINK)
(48,sensor)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^