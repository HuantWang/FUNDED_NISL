-----label-----
1
-----code-----
static int ipoib_mcast_join_finish(struct ipoib_mcast *mcast,
				   struct ib_sa_mcmember_rec *mcmember)
{
	struct net_device *dev = mcast->dev;
	struct ipoib_dev_priv *priv = netdev_priv(dev);
	struct ipoib_ah *ah;
	int ret;
	int set_qkey = 0;

	mcast->mcmember = *mcmember;

	/* Set the cached Q_Key before we attach if it's the broadcast group */
	if (!memcmp(mcast->mcmember.mgid.raw, priv->dev->broadcast + 4,
		    sizeof (union ib_gid))) {
		spin_lock_irq(&priv->lock);
		if (!priv->broadcast) {
			spin_unlock_irq(&priv->lock);
			return -EAGAIN;
		}
		priv->qkey = be32_to_cpu(priv->broadcast->mcmember.qkey);
		spin_unlock_irq(&priv->lock);
		priv->tx_wr.wr.ud.remote_qkey = priv->qkey;
		set_qkey = 1;
	}

	if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)) {
		if (test_and_set_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {
			ipoib_warn(priv, "multicast group %pI6 already attached\n",
				   mcast->mcmember.mgid.raw);

			return 0;
		}

		ret = ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid),
					 &mcast->mcmember.mgid, set_qkey);
		if (ret < 0) {
			ipoib_warn(priv, "couldn't attach QP to multicast group %pI6\n",
				   mcast->mcmember.mgid.raw);

			clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags);
			return ret;
		}
	}

	{
		struct ib_ah_attr av = {
			.dlid	       = be16_to_cpu(mcast->mcmember.mlid),
			.port_num      = priv->port,
			.sl	       = mcast->mcmember.sl,
			.ah_flags      = IB_AH_GRH,
			.static_rate   = mcast->mcmember.rate,
			.grh	       = {
				.flow_label    = be32_to_cpu(mcast->mcmember.flow_label),
				.hop_limit     = mcast->mcmember.hop_limit,
				.sgid_index    = 0,
				.traffic_class = mcast->mcmember.traffic_class
			}
		};
		av.grh.dgid = mcast->mcmember.mgid;

		ah = ipoib_create_ah(dev, priv->pd, &av);
		if (!ah) {
			ipoib_warn(priv, "ib_address_create failed\n");
		} else {
			spin_lock_irq(&priv->lock);
			mcast->ah = ah;
			spin_unlock_irq(&priv->lock);

			ipoib_dbg_mcast(priv, "MGID %pI6 AV %p, LID 0x%04x, SL %d\n",
					mcast->mcmember.mgid.raw,
					mcast->ah->ah,
					be16_to_cpu(mcast->mcmember.mlid),
					mcast->mcmember.sl);
		}
	}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
30,31
31,32
31,33
32,33
34,35
34,36
34,37
37,38
38,39
38,40
39,40
41,42
43,44
44,45
44,46
45,46
47,48
47,49
50,51
51,52
51,53
53,54
55,56
56,57
56,58
58,59
58,60
60,61
62,63
63,64
63,65
64,65
64,66
65,66
68,69
69,70
71,72
71,73
72,73
73,74
73,75
73,76
73,77
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
84,85
84,86
85,86
85,87
86,87
86,88
87,88
92,93
93,94
93,95
94,95
97,98
97,99
97,100
97,101
97,102
97,103
98,99
99,100
99,101
100,101
102,103
103,104
103,105
104,105
107,108
107,109
108,109
109,110
109,111
110,111
113,114
113,115
114,115
115,116
115,117
116,117
118,119
119,120
119,121
120,121
123,124
124,125
125,126
127,128
128,129
128,130
129,130
129,131
130,131
133,134
133,135
134,135
136,137
136,138
137,138
137,139
138,139
138,140
139,140
144,145
145,146
145,147
146,147
148,149
149,150
149,151
150,151
153,154
154,155
154,156
155,156
155,157
156,157
156,158
157,158
157,159
158,159
158,160
159,160
165,166
165,167
166,167
169,170
170,171
170,172
171,172
174,175
174,176
175,176
176,177
176,178
176,179
177,178
179,180
181,182
182,183
182,184
183,184
186,187
186,188
186,189
187,188
187,189
188,189
188,190
188,191
189,190
191,192
193,194
194,195
194,196
195,196
198,199
198,200
199,200
200,201
200,202
200,203
200,204
201,202
203,204
206,207
206,208
207,208
207,209
208,209
208,210
209,210
214,215
216,217
217,218
217,219
218,219
220,221
220,222
220,223
220,224
220,225
221,222
223,224
225,226
225,227
226,227
228,229
228,230
229,230
229,231
230,231
234,235
235,236
235,237
236,237
236,238
237,238
241,242
243,244
243,245
244,245
244,246
245,246
248,249
248,250
248,251
249,250
250,251
250,252
250,253
250,254
251,252
253,254
256,257
256,258
257,258
257,259
258,259
258,260
259,260
264,265
265,266
265,267
265,268
266,267
268,269
270,271
271,272
271,273
272,273
275,276
276,277
278,279
279,280
281,282
282,283
282,284
283,284
283,285
284,285
284,286
285,286
289,290
289,291
290,291
290,292
291,292
295,296
296,297
296,298
297,298
299,300
299,301
299,302
299,303
300,301
302,303
304,305
304,306
305,306
308,309
309,310
311,312
311,313
311,314
312,313
313,314
315,316
316,317
317,318
317,319
317,320
318,319
320,321
323,324
323,325
323,326
323,327
324,325
325,326
325,327
326,327
328,329
329,330
329,331
330,331
333,334
334,335
334,336
335,336
335,337
336,337
339,340
341,342
342,343
342,344
343,344
345,346
346,347
346,348
347,348
350,351
351,352
351,353
351,354
351,355
351,356
351,357
351,358
352,353
354,355
357,358
357,359
358,359
358,360
359,360
359,361
360,361
365,366
365,367
366,367
366,368
367,368
371,372
371,373
372,373
374,375
374,376
375,376
375,377
376,377
380,381
380,382
381,382
381,383
382,383
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,29,33,35,36,40,42,46,48,49,52,54,57,59,61,66,67,70,75,80,81,82,83,88,89,90,91,95,96,101,105,106,111,112,117,121,122,126,131,132,135,140,141,142,143,147,151,152,160,161,162,163,164,167,168,172,173,178,180,184,185,190,192,196,197,202,204,205,210,211,212,213,215,219,222,224,227,231,232,233,238,239,240,242,246,247,252,254,255,260,261,262,263,267,269,273,274,277,280,286,287,288,292,293,294,298,301,303,306,307,310,314,319,321,322,327,331,332,337,338,340,344,348,349,353,355,356,361,362,363,364,368,369,370,373,377,378,379,383,384,385
-----computeFrom-----
63,64
63,65
84,85
84,86
128,129
128,130
154,155
154,156
170,171
170,172
217,218
217,219
244,245
244,246
282,283
282,284
296,297
296,298
334,335
334,336
-----guardedBy-----
246,277
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;CompoundStatement;ProblemStatement;NullStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;
-----ast_node-----
static int ipoib_mcast_join_finish(struct ipoib_mcast *mcast,				   struct ib_sa_mcmember_rec *mcmember){	struct net_device *dev = mcast->dev;	struct ipoib_dev_priv *priv = netdev_priv(dev);	struct ipoib_ah *ah;	int ret;	int set_qkey = 0;	mcast->mcmember = *mcmember;	/* Set the cached Q_Key before we attach if it's the broadcast group */	if (!memcmp(mcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		    sizeof (union ib_gid))) {		spin_lock_irq(&priv->lock);		if (!priv->broadcast) {			spin_unlock_irq(&priv->lock);			return -EAGAIN;		}		priv->qkey = be32_to_cpu(priv->broadcast->mcmember.qkey);		spin_unlock_irq(&priv->lock);		priv->tx_wr.wr.ud.remote_qkey = priv->qkey;		set_qkey = 1;	}	if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)) {		if (test_and_set_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {			ipoib_warn(priv, "multicast group %pI6 already attached\n",				   mcast->mcmember.mgid.raw);			return 0;		}		ret = ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid),					 &mcast->mcmember.mgid, set_qkey);		if (ret < 0) {			ipoib_warn(priv, "couldn't attach QP to multicast group %pI6\n",				   mcast->mcmember.mgid.raw);			clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags);			return ret;		}	}	{		struct ib_ah_attr av = {			.dlid	       = be16_to_cpu(mcast->mcmember.mlid),			.port_num      = priv->port,			.sl	       = mcast->mcmember.sl,			.ah_flags      = IB_AH_GRH,			.static_rate   = mcast->mcmember.rate,			.grh	       = {				.flow_label    = be32_to_cpu(mcast->mcmember.flow_label),				.hop_limit     = mcast->mcmember.hop_limit,				.sgid_index    = 0,				.traffic_class = mcast->mcmember.traffic_class			}		};		av.grh.dgid = mcast->mcmember.mgid;		ah = ipoib_create_ah(dev, priv->pd, &av);		if (!ah) {			ipoib_warn(priv, "ib_address_create failed\n");		} else {			spin_lock_irq(&priv->lock);			mcast->ah = ah;			spin_unlock_irq(&priv->lock);			ipoib_dbg_mcast(priv, "MGID %pI6 AV %p, LID 0x%04x, SL %d\n",					mcast->mcmember.mgid.raw,					mcast->ah->ah,					be16_to_cpu(mcast->mcmember.mlid),					mcast->mcmember.sl);		}	}
static int
ipoib_mcast_join_finish(struct ipoib_mcast *mcast,				   struct ib_sa_mcmember_rec *mcmember)
ipoib_mcast_join_finish
struct ipoib_mcast *mcast
struct ipoib_mcast
ipoib_mcast
*mcast
*
mcast
struct ib_sa_mcmember_rec *mcmember
struct ib_sa_mcmember_rec
ib_sa_mcmember_rec
*mcmember
*
mcmember
{	struct net_device *dev = mcast->dev;	struct ipoib_dev_priv *priv = netdev_priv(dev);	struct ipoib_ah *ah;	int ret;	int set_qkey = 0;	mcast->mcmember = *mcmember;	/* Set the cached Q_Key before we attach if it's the broadcast group */	if (!memcmp(mcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		    sizeof (union ib_gid))) {		spin_lock_irq(&priv->lock);		if (!priv->broadcast) {			spin_unlock_irq(&priv->lock);			return -EAGAIN;		}		priv->qkey = be32_to_cpu(priv->broadcast->mcmember.qkey);		spin_unlock_irq(&priv->lock);		priv->tx_wr.wr.ud.remote_qkey = priv->qkey;		set_qkey = 1;	}	if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)) {		if (test_and_set_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {			ipoib_warn(priv, "multicast group %pI6 already attached\n",				   mcast->mcmember.mgid.raw);			return 0;		}		ret = ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid),					 &mcast->mcmember.mgid, set_qkey);		if (ret < 0) {			ipoib_warn(priv, "couldn't attach QP to multicast group %pI6\n",				   mcast->mcmember.mgid.raw);			clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags);			return ret;		}	}	{		struct ib_ah_attr av = {			.dlid	       = be16_to_cpu(mcast->mcmember.mlid),			.port_num      = priv->port,			.sl	       = mcast->mcmember.sl,			.ah_flags      = IB_AH_GRH,			.static_rate   = mcast->mcmember.rate,			.grh	       = {				.flow_label    = be32_to_cpu(mcast->mcmember.flow_label),				.hop_limit     = mcast->mcmember.hop_limit,				.sgid_index    = 0,				.traffic_class = mcast->mcmember.traffic_class			}		};		av.grh.dgid = mcast->mcmember.mgid;		ah = ipoib_create_ah(dev, priv->pd, &av);		if (!ah) {			ipoib_warn(priv, "ib_address_create failed\n");		} else {			spin_lock_irq(&priv->lock);			mcast->ah = ah;			spin_unlock_irq(&priv->lock);			ipoib_dbg_mcast(priv, "MGID %pI6 AV %p, LID 0x%04x, SL %d\n",					mcast->mcmember.mgid.raw,					mcast->ah->ah,					be16_to_cpu(mcast->mcmember.mlid),					mcast->mcmember.sl);		}	}
struct net_device *dev = mcast->dev;
struct net_device *dev = mcast->dev;
struct net_device
net_device
*dev = mcast->dev
*
dev
= mcast->dev
mcast->dev
mcast
mcast
dev
struct ipoib_dev_priv *priv = netdev_priv(dev);
struct ipoib_dev_priv *priv = netdev_priv(dev);
struct ipoib_dev_priv
ipoib_dev_priv
*priv = netdev_priv(dev)
*
priv
= netdev_priv(dev)
netdev_priv(dev)
netdev_priv
netdev_priv
dev
dev
struct ipoib_ah *ah;
struct ipoib_ah *ah;
struct ipoib_ah
ipoib_ah
*ah
*
ah
int ret;
int ret;
int
ret
ret
int set_qkey = 0;
int set_qkey = 0;
int
set_qkey = 0
set_qkey
= 0
0
mcast->mcmember = *mcmember;
mcast->mcmember = *mcmember
mcast->mcmember
mcast
mcast
mcmember
*mcmember
mcmember
mcmember
if (!memcmp(mcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		    sizeof (union ib_gid))) {		spin_lock_irq(&priv->lock);		if (!priv->broadcast) {			spin_unlock_irq(&priv->lock);			return -EAGAIN;		}		priv->qkey = be32_to_cpu(priv->broadcast->mcmember.qkey);		spin_unlock_irq(&priv->lock);		priv->tx_wr.wr.ud.remote_qkey = priv->qkey;		set_qkey = 1;	}
!memcmp(mcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		    sizeof (union ib_gid))
memcmp(mcast->mcmember.mgid.raw, priv->dev->broadcast + 4,		    sizeof (union ib_gid))
memcmp
memcmp
mcast->mcmember.mgid.raw
mcast->mcmember.mgid
mcast->mcmember
mcast
mcast
mcmember
mgid
raw
priv->dev->broadcast + 4
priv->dev->broadcast
priv->dev
priv
priv
dev
broadcast
4
sizeof (union ib_gid)
union ib_gid
union ib_gid
ib_gid

{		spin_lock_irq(&priv->lock);		if (!priv->broadcast) {			spin_unlock_irq(&priv->lock);			return -EAGAIN;		}		priv->qkey = be32_to_cpu(priv->broadcast->mcmember.qkey);		spin_unlock_irq(&priv->lock);		priv->tx_wr.wr.ud.remote_qkey = priv->qkey;		set_qkey = 1;	}
spin_lock_irq(&priv->lock);
spin_lock_irq(&priv->lock)
spin_lock_irq
spin_lock_irq
&priv->lock
priv->lock
priv
priv
lock
if (!priv->broadcast) {			spin_unlock_irq(&priv->lock);			return -EAGAIN;		}
!priv->broadcast
priv->broadcast
priv
priv
broadcast
{			spin_unlock_irq(&priv->lock);			return -EAGAIN;		}
spin_unlock_irq(&priv->lock);
spin_unlock_irq(&priv->lock)
spin_unlock_irq
spin_unlock_irq
&priv->lock
priv->lock
priv
priv
lock
return -EAGAIN;
-EAGAIN
EAGAIN
EAGAIN
priv->qkey = be32_to_cpu(priv->broadcast->mcmember.qkey);
priv->qkey = be32_to_cpu(priv->broadcast->mcmember.qkey)
priv->qkey
priv
priv
qkey
be32_to_cpu(priv->broadcast->mcmember.qkey)
be32_to_cpu
be32_to_cpu
priv->broadcast->mcmember.qkey
priv->broadcast->mcmember
priv->broadcast
priv
priv
broadcast
mcmember
qkey
spin_unlock_irq(&priv->lock);
spin_unlock_irq(&priv->lock)
spin_unlock_irq
spin_unlock_irq
&priv->lock
priv->lock
priv
priv
lock
priv->tx_wr.wr.ud.remote_qkey = priv->qkey;
priv->tx_wr.wr.ud.remote_qkey = priv->qkey
priv->tx_wr.wr.ud.remote_qkey
priv->tx_wr.wr.ud
priv->tx_wr.wr
priv->tx_wr
priv
priv
tx_wr
wr
ud
remote_qkey
priv->qkey
priv
priv
qkey
set_qkey = 1;
set_qkey = 1
set_qkey
set_qkey
1
if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)) {		if (test_and_set_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {			ipoib_warn(priv, "multicast group %pI6 already attached\n",				   mcast->mcmember.mgid.raw);			return 0;		}		ret = ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid),					 &mcast->mcmember.mgid, set_qkey);		if (ret < 0) {			ipoib_warn(priv, "couldn't attach QP to multicast group %pI6\n",				   mcast->mcmember.mgid.raw);			clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags);			return ret;		}	}
!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
test_bit
test_bit
IPOIB_MCAST_FLAG_SENDONLY
IPOIB_MCAST_FLAG_SENDONLY
&mcast->flags
mcast->flags
mcast
mcast
flags
{		if (test_and_set_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {			ipoib_warn(priv, "multicast group %pI6 already attached\n",				   mcast->mcmember.mgid.raw);			return 0;		}		ret = ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid),					 &mcast->mcmember.mgid, set_qkey);		if (ret < 0) {			ipoib_warn(priv, "couldn't attach QP to multicast group %pI6\n",				   mcast->mcmember.mgid.raw);			clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags);			return ret;		}	}
if (test_and_set_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)) {			ipoib_warn(priv, "multicast group %pI6 already attached\n",				   mcast->mcmember.mgid.raw);			return 0;		}
test_and_set_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
test_and_set_bit
test_and_set_bit
IPOIB_MCAST_FLAG_ATTACHED
IPOIB_MCAST_FLAG_ATTACHED
&mcast->flags
mcast->flags
mcast
mcast
flags
{			ipoib_warn(priv, "multicast group %pI6 already attached\n",				   mcast->mcmember.mgid.raw);			return 0;		}
ipoib_warn(priv, "multicast group %pI6 already attached\n",				   mcast->mcmember.mgid.raw);
ipoib_warn(priv, "multicast group %pI6 already attached\n",				   mcast->mcmember.mgid.raw)
ipoib_warn
ipoib_warn
priv
priv
"multicast group %pI6 already attached\n"
mcast->mcmember.mgid.raw
mcast->mcmember.mgid
mcast->mcmember
mcast
mcast
mcmember
mgid
raw
return 0;
0
ret = ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid),					 &mcast->mcmember.mgid, set_qkey);
ret = ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid),					 &mcast->mcmember.mgid, set_qkey)
ret
ret
ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid),					 &mcast->mcmember.mgid, set_qkey)
ipoib_mcast_attach
ipoib_mcast_attach
dev
dev
be16_to_cpu(mcast->mcmember.mlid)
be16_to_cpu
be16_to_cpu
mcast->mcmember.mlid
mcast->mcmember
mcast
mcast
mcmember
mlid
&mcast->mcmember.mgid
mcast->mcmember.mgid
mcast->mcmember
mcast
mcast
mcmember
mgid
set_qkey
set_qkey
if (ret < 0) {			ipoib_warn(priv, "couldn't attach QP to multicast group %pI6\n",				   mcast->mcmember.mgid.raw);			clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags);			return ret;		}
ret < 0
ret
ret
0
{			ipoib_warn(priv, "couldn't attach QP to multicast group %pI6\n",				   mcast->mcmember.mgid.raw);			clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags);			return ret;		}
ipoib_warn(priv, "couldn't attach QP to multicast group %pI6\n",				   mcast->mcmember.mgid.raw);
ipoib_warn(priv, "couldn't attach QP to multicast group %pI6\n",				   mcast->mcmember.mgid.raw)
ipoib_warn
ipoib_warn
priv
priv
"couldn't attach QP to multicast group %pI6\n"
mcast->mcmember.mgid.raw
mcast->mcmember.mgid
mcast->mcmember
mcast
mcast
mcmember
mgid
raw
clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags);
clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
clear_bit
clear_bit
IPOIB_MCAST_FLAG_ATTACHED
IPOIB_MCAST_FLAG_ATTACHED
&mcast->flags
mcast->flags
mcast
mcast
flags
return ret;
ret
ret
{		struct ib_ah_attr av = {			.dlid	       = be16_to_cpu(mcast->mcmember.mlid),			.port_num      = priv->port,			.sl	       = mcast->mcmember.sl,			.ah_flags      = IB_AH_GRH,			.static_rate   = mcast->mcmember.rate,			.grh	       = {				.flow_label    = be32_to_cpu(mcast->mcmember.flow_label),				.hop_limit     = mcast->mcmember.hop_limit,				.sgid_index    = 0,				.traffic_class = mcast->mcmember.traffic_class			}		}
struct ib_ah_attr av = {			.dlid	       = be16_to_cpu(mcast->mcmember.mlid),			.port_num      = priv->port,			.sl	       = mcast->mcmember.sl,			.ah_flags      = IB_AH_GRH,			.static_rate   = mcast->mcmember.rate,			.grh	       = {				.flow_label    = be32_to_cpu(mcast->mcmember.flow_label),				.hop_limit     = mcast->mcmember.hop_limit,				.sgid_index    = 0,				.traffic_class = mcast->mcmember.traffic_class			}
;
av.grh.dgid = mcast->mcmember.mgid;
av.grh.dgid = mcast->mcmember.mgid
av.grh.dgid
av.grh
av
av
grh
dgid
mcast->mcmember.mgid
mcast->mcmember
mcast
mcast
mcmember
mgid
ah = ipoib_create_ah(dev, priv->pd, &av);
ah = ipoib_create_ah(dev, priv->pd, &av)
ah
ah
ipoib_create_ah(dev, priv->pd, &av)
ipoib_create_ah
ipoib_create_ah
dev
dev
priv->pd
priv
priv
pd
&av
av
av
if (!ah) {			ipoib_warn(priv, "ib_address_create failed\n");		} else {			spin_lock_irq(&priv->lock);			mcast->ah = ah;			spin_unlock_irq(&priv->lock);			ipoib_dbg_mcast(priv, "MGID %pI6 AV %p, LID 0x%04x, SL %d\n",					mcast->mcmember.mgid.raw,					mcast->ah->ah,					be16_to_cpu(mcast->mcmember.mlid),					mcast->mcmember.sl);		}
!ah
ah
ah
{			ipoib_warn(priv, "ib_address_create failed\n");		}
ipoib_warn(priv, "ib_address_create failed\n");
ipoib_warn(priv, "ib_address_create failed\n")
ipoib_warn
ipoib_warn
priv
priv
"ib_address_create failed\n"
{			spin_lock_irq(&priv->lock);			mcast->ah = ah;			spin_unlock_irq(&priv->lock);			ipoib_dbg_mcast(priv, "MGID %pI6 AV %p, LID 0x%04x, SL %d\n",					mcast->mcmember.mgid.raw,					mcast->ah->ah,					be16_to_cpu(mcast->mcmember.mlid),					mcast->mcmember.sl);		}
spin_lock_irq(&priv->lock);
spin_lock_irq(&priv->lock)
spin_lock_irq
spin_lock_irq
&priv->lock
priv->lock
priv
priv
lock
mcast->ah = ah;
mcast->ah = ah
mcast->ah
mcast
mcast
ah
ah
ah
spin_unlock_irq(&priv->lock);
spin_unlock_irq(&priv->lock)
spin_unlock_irq
spin_unlock_irq
&priv->lock
priv->lock
priv
priv
lock
ipoib_dbg_mcast(priv, "MGID %pI6 AV %p, LID 0x%04x, SL %d\n",					mcast->mcmember.mgid.raw,					mcast->ah->ah,					be16_to_cpu(mcast->mcmember.mlid),					mcast->mcmember.sl);
ipoib_dbg_mcast(priv, "MGID %pI6 AV %p, LID 0x%04x, SL %d\n",					mcast->mcmember.mgid.raw,					mcast->ah->ah,					be16_to_cpu(mcast->mcmember.mlid),					mcast->mcmember.sl)
ipoib_dbg_mcast
ipoib_dbg_mcast
priv
priv
"MGID %pI6 AV %p, LID 0x%04x, SL %d\n"
mcast->mcmember.mgid.raw
mcast->mcmember.mgid
mcast->mcmember
mcast
mcast
mcmember
mgid
raw
mcast->ah->ah
mcast->ah
mcast
mcast
ah
ah
be16_to_cpu(mcast->mcmember.mlid)
be16_to_cpu
be16_to_cpu
mcast->mcmember.mlid
mcast->mcmember
mcast
mcast
mcmember
mlid
mcast->mcmember.sl
mcast->mcmember
mcast
mcast
mcmember
sl
-----joern-----
(262,215,0)
(82,19,0)
(42,255,0)
(266,215,0)
(147,103,0)
(276,124,0)
(115,58,0)
(120,28,0)
(98,68,0)
(217,54,0)
(233,19,0)
(175,199,0)
(87,130,0)
(94,121,0)
(126,165,0)
(211,104,0)
(106,155,0)
(228,170,0)
(125,37,0)
(45,91,0)
(15,37,0)
(167,276,0)
(23,37,0)
(257,122,0)
(188,54,0)
(128,260,0)
(215,58,0)
(19,50,0)
(208,259,0)
(216,253,0)
(157,134,0)
(176,213,0)
(195,9,0)
(19,179,0)
(101,268,0)
(136,76,0)
(239,4,0)
(62,175,0)
(131,115,0)
(18,235,0)
(175,58,0)
(30,61,0)
(13,29,0)
(116,271,0)
(226,78,0)
(153,77,0)
(221,147,0)
(258,204,0)
(131,45,0)
(225,190,0)
(169,25,0)
(274,86,0)
(177,82,0)
(151,82,0)
(35,36,0)
(248,233,0)
(61,182,0)
(78,199,0)
(210,228,0)
(77,189,0)
(89,185,0)
(22,182,0)
(195,103,0)
(82,151,0)
(84,50,0)
(6,179,0)
(3,47,0)
(65,213,0)
(174,115,0)
(171,215,0)
(136,19,0)
(229,127,0)
(96,130,0)
(82,14,0)
(113,218,0)
(189,58,0)
(162,144,0)
(2,256,0)
(130,87,0)
(119,180,0)
(16,135,0)
(122,204,0)
(222,268,0)
(177,256,0)
(96,58,0)
(33,206,0)
(44,54,0)
(191,173,0)
(217,125,0)
(152,127,0)
(118,233,0)
(96,199,0)
(190,144,0)
(236,58,0)
(131,155,0)
(276,167,0)
(80,111,0)
(108,37,0)
(138,137,0)
(124,61,0)
(23,41,0)
(66,132,0)
(179,58,0)
(187,89,0)
(258,9,0)
(9,258,0)
(147,8,0)
(191,111,0)
(164,158,0)
(51,90,0)
(56,37,0)
(144,190,0)
(8,233,0)
(155,98,0)
(240,23,0)
(218,151,0)
(155,220,0)
(98,259,0)
(86,23,0)
(144,199,0)
(55,91,0)
(4,76,0)
(137,138,0)
(133,51,0)
(43,241,0)
(73,240,0)
(92,86,0)
(213,65,0)
(158,58,0)
(93,65,0)
(191,11,0)
(206,71,0)
(65,58,0)
(131,50,0)
(260,251,0)
(59,191,0)
(223,14,0)
(273,50,0)
(78,58,0)
(182,61,0)
(240,204,0)
(74,191,0)
(132,204,0)
(166,56,0)
(112,8,0)
(17,254,0)
(261,156,0)
(247,136,0)
(186,235,0)
(110,204,0)
(256,175,0)
(75,193,0)
(185,204,0)
(151,268,0)
(148,114,0)
(227,241,0)
(191,225,0)
(34,189,0)
(134,262,0)
(180,204,0)
(165,126,0)
(79,18,0)
(41,43,0)
(252,218,0)
(87,82,0)
(141,11,0)
(270,50,0)
(165,242,0)
(27,76,0)
(235,186,0)
(125,217,0)
(127,68,0)
(206,151,0)
(187,103,0)
(228,199,0)
(121,204,0)
(235,18,0)
(91,19,0)
(199,228,0)
(131,240,0)
(4,19,0)
(38,45,0)
(114,271,0)
(215,262,0)
(138,58,0)
(213,176,0)
(104,166,0)
(185,89,0)
(245,259,0)
(10,50,0)
(131,254,0)
(203,202,0)
(28,135,0)
(107,84,0)
(204,50,0)
(5,156,0)
(70,96,0)
(181,204,0)
(190,225,0)
(156,261,0)
(249,173,0)
(11,236,0)
(132,243,0)
(82,84,0)
(121,202,0)
(46,158,0)
(241,110,0)
(61,124,0)
(102,276,0)
(80,58,0)
(99,31,0)
(161,81,0)
(263,121,0)
(135,28,0)
(225,191,0)
(54,204,0)
(265,16,0)
(20,271,0)
(49,245,0)
(197,3,0)
(214,18,0)
(269,126,0)
(250,19,0)
(82,177,0)
(144,58,0)
(3,254,0)
(135,16,0)
(233,248,0)
(90,158,0)
(26,248,0)
(81,255,0)
(60,50,0)
(60,19,0)
(156,81,0)
(251,260,0)
(276,102,0)
(168,236,0)
(36,3,0)
(271,114,0)
(91,76,0)
(197,31,0)
(56,166,0)
(248,204,0)
(272,50,0)
(54,217,0)
(82,87,0)
(196,182,0)
(117,207,0)
(126,77,0)
(193,233,0)
(254,58,0)
(102,32,0)
(21,120,0)
(232,261,0)
(14,37,0)
(25,204,0)
(175,256,0)
(130,96,0)
(255,15,0)
(205,138,0)
(180,184,0)
(139,78,0)
(16,58,0)
(105,65,0)
(39,122,0)
(86,204,0)
(11,191,0)
(129,104,0)
(172,204,0)
(31,255,0)
(183,96,0)
(165,204,0)
(209,185,0)
(43,41,0)
(81,156,0)
(220,155,0)
(48,50,0)
(51,71,0)
(83,130,0)
(90,51,0)
(224,124,0)
(181,19,0)
(137,260,0)
(77,126,0)
(9,195,0)
(241,43,0)
(12,43,0)
(176,234,0)
(67,151,0)
(166,104,0)
(160,50,0)
(201,190,0)
(57,14,0)
(191,204,0)
(121,71,0)
(276,29,0)
(202,121,0)
(13,25,0)
(163,173,0)
(236,147,0)
(186,47,0)
(199,50,0)
(173,163,0)
(159,131,0)
(146,50,0)
(219,80,0)
(237,165,0)
(63,175,0)
(104,204,0)
(179,19,0)
(254,199,0)
(31,242,0)
(100,138,0)
(198,50,0)
(28,120,0)
(267,189,0)
(32,102,0)
(31,240,0)
(41,23,0)
(271,58,0)
(204,181,0)
(31,254,0)
(88,258,0)
(18,204,0)
(259,50,0)
(256,177,0)
(64,165,0)
(207,120,0)
(236,11,0)
(109,48,0)
(48,19,0)
(262,134,0)
(255,81,0)
(15,86,0)
(182,199,0)
(85,45,0)
(120,76,0)
(25,13,0)
(29,13,0)
(110,241,0)
(1,25,0)
(192,13,0)
(72,132,0)
(150,163,0)
(149,220,0)
(264,84,0)
(173,191,0)
(178,76,0)
(197,206,0)
(200,185,0)
(114,202,0)
(69,115,0)
(45,120,0)
(191,103,0)
(24,110,0)
(111,80,0)
(0,179,0)
(189,77,0)
(95,50,0)
(52,220,0)
(238,258,0)
(233,8,0)
(29,276,0)
(140,82,0)
(111,191,0)
(244,16,0)
(194,80,0)
(212,236,0)
(230,181,0)
(260,137,0)
(145,82,0)
(189,199,0)
(97,60,0)
(8,259,0)
(68,98,0)
(142,144,0)
(253,8,0)
(68,127,0)
(127,58,0)
(233,193,0)
(127,199,0)
(78,163,0)
(163,78,0)
(80,199,0)
(231,111,0)
(158,90,0)
(154,29,0)
(184,180,0)
(275,110,0)
(89,187,0)
(143,261,0)
(40,248,0)
(261,204,0)
(86,15,0)
(234,176,0)
(7,68,0)
(271,199,0)
(124,276,0)
(202,114,0)
(197,131,0)
(115,147,0)
(246,240,0)
(123,254,0)
(53,180,0)
(182,58,0)
(131,255,0)
(189,199,1)
(107,264,1)
(131,155,1)
(256,175,1)
(145,67,1)
(165,126,1)
(129,167,1)
(185,204,1)
(155,106,1)
(105,48,1)
(144,58,1)
(173,249,1)
(96,70,1)
(82,19,1)
(114,271,1)
(173,163,1)
(191,225,1)
(110,204,1)
(197,206,1)
(96,199,1)
(244,265,1)
(215,58,1)
(88,238,1)
(19,179,1)
(52,149,1)
(183,145,1)
(64,134,1)
(137,138,1)
(40,118,1)
(207,120,1)
(161,156,1)
(230,172,1)
(218,151,1)
(43,241,1)
(176,213,1)
(12,241,1)
(255,42,1)
(104,211,1)
(3,36,1)
(29,154,1)
(131,255,1)
(25,204,1)
(191,204,1)
(60,97,1)
(94,218,1)
(182,22,1)
(267,34,1)
(106,220,1)
(131,45,1)
(193,75,1)
(54,188,1)
(61,182,1)
(9,258,1)
(155,220,1)
(152,229,1)
(147,8,1)
(2,175,1)
(16,58,1)
(77,153,1)
(237,64,1)
(28,135,1)
(75,248,1)
(229,155,1)
(102,32,1)
(131,254,1)
(82,87,1)
(174,69,1)
(102,29,1)
(194,225,1)
(163,150,1)
(189,267,1)
(175,62,1)
(218,252,1)
(141,236,1)
(73,246,1)
(274,255,1)
(260,137,1)
(236,58,1)
(197,31,1)
(17,84,1)
(121,204,1)
(248,26,1)
(70,183,1)
(187,89,1)
(168,212,1)
(144,199,1)
(233,19,1)
(271,20,1)
(7,127,1)
(240,73,1)
(186,235,1)
(209,200,1)
(150,78,1)
(210,254,1)
(48,19,1)
(11,236,1)
(115,174,1)
(213,65,1)
(128,167,1)
(44,23,1)
(86,204,1)
(79,214,1)
(185,209,1)
(197,131,1)
(203,114,1)
(212,173,1)
(215,266,1)
(80,58,1)
(86,23,1)
(124,61,1)
(261,143,1)
(138,205,1)
(96,58,1)
(189,58,1)
(135,16,1)
(36,35,1)
(34,237,1)
(247,120,1)
(63,87,1)
(66,72,1)
(127,199,1)
(60,19,1)
(136,247,1)
(240,204,1)
(241,110,1)
(126,77,1)
(45,38,1)
(200,253,1)
(158,164,1)
(92,274,1)
(65,93,1)
(35,186,1)
(124,224,1)
(261,204,1)
(154,13,1)
(233,193,1)
(275,24,1)
(109,191,1)
(172,19,1)
(132,204,1)
(18,204,1)
(167,276,1)
(16,244,1)
(55,45,1)
(156,5,1)
(157,251,1)
(56,166,1)
(265,21,1)
(104,204,1)
(140,177,1)
(221,115,1)
(206,151,1)
(153,189,1)
(192,25,1)
(13,25,1)
(138,58,1)
(248,204,1)
(246,184,1)
(116,263,1)
(180,119,1)
(175,199,1)
(134,262,1)
(80,219,1)
(147,221,1)
(177,256,1)
(220,52,1)
(21,234,1)
(239,122,1)
(105,4,1)
(127,152,1)
(164,46,1)
(188,44,1)
(81,161,1)
(254,123,1)
(82,140,1)
(239,207,1)
(69,187,1)
(149,218,1)
(18,79,1)
(180,204,1)
(228,170,1)
(219,194,1)
(25,1,1)
(204,181,1)
(62,63,1)
(120,28,1)
(227,110,1)
(82,84,1)
(112,98,1)
(251,260,1)
(30,182,1)
(46,133,1)
(232,125,1)
(99,165,1)
(110,275,1)
(258,88,1)
(123,17,1)
(156,261,1)
(276,29,1)
(54,204,1)
(223,57,1)
(113,151,1)
(214,184,1)
(175,58,1)
(93,105,1)
(24,240,1)
(115,58,1)
(226,59,1)
(109,132,1)
(231,80,1)
(151,82,1)
(236,147,1)
(181,19,1)
(82,177,1)
(197,3,1)
(78,139,1)
(111,80,1)
(89,185,1)
(83,96,1)
(80,199,1)
(199,228,1)
(65,58,1)
(42,81,1)
(163,78,1)
(255,81,1)
(266,171,1)
(179,0,1)
(127,58,1)
(74,195,1)
(85,136,1)
(5,261,1)
(3,254,1)
(249,163,1)
(262,215,1)
(45,120,1)
(159,60,1)
(13,192,1)
(253,216,1)
(91,55,1)
(122,39,1)
(14,223,1)
(121,202,1)
(148,271,1)
(169,124,1)
(143,232,1)
(207,117,1)
(211,129,1)
(195,9,1)
(166,104,1)
(125,217,1)
(131,240,1)
(20,116,1)
(4,239,1)
(217,54,1)
(29,13,1)
(97,234,1)
(57,15,1)
(51,90,1)
(162,142,1)
(31,255,1)
(133,121,1)
(68,7,1)
(119,53,1)
(196,199,1)
(100,128,1)
(1,169,1)
(8,233,1)
(118,112,1)
(182,199,1)
(252,113,1)
(31,240,1)
(182,58,1)
(41,43,1)
(81,156,1)
(206,33,1)
(77,189,1)
(184,180,1)
(264,204,1)
(233,248,1)
(86,92,1)
(234,176,1)
(31,254,1)
(117,91,1)
(26,40,1)
(130,96,1)
(181,230,1)
(202,114,1)
(38,85,1)
(131,159,1)
(191,111,1)
(216,8,1)
(84,107,1)
(201,144,1)
(202,203,1)
(53,56,1)
(6,250,1)
(67,134,1)
(98,68,1)
(236,168,1)
(78,58,1)
(39,257,1)
(158,58,1)
(235,18,1)
(22,196,1)
(263,94,1)
(131,115,1)
(149,251,1)
(224,61,1)
(61,30,1)
(271,199,1)
(238,147,1)
(90,158,1)
(228,210,1)
(4,19,1)
(126,269,1)
(225,190,1)
(82,14,1)
(136,19,1)
(142,11,1)
(179,58,1)
(256,2,1)
(205,100,1)
(48,109,1)
(43,12,1)
(254,58,1)
(190,201,1)
(87,130,1)
(269,77,1)
(191,173,1)
(190,144,1)
(191,11,1)
(91,19,1)
(253,8,1)
(15,86,1)
(130,83,1)
(139,226,1)
(68,127,1)
(128,14,1)
(122,204,1)
(31,99,1)
(165,204,1)
(171,157,1)
(271,58,1)
(276,102,1)
(59,74,1)
(241,227,1)
(23,41,1)
(144,162,1)
(132,66,1)
(72,253,1)
(33,51,1)
(258,204,1)
(0,6,1)
(114,148,1)
(111,231,1)
(78,199,1)
(276,124,1)
(11,141,1)
(257,207,1)
(112,251,2)
(175,134,2)
(176,218,2)
(98,68,2)
(39,207,2)
(19,179,2)
(93,218,2)
(100,184,2)
(177,256,2)
(31,240,2)
(26,218,2)
(91,19,2)
(255,81,2)
(68,127,2)
(251,184,2)
(181,19,2)
(205,167,2)
(149,218,2)
(216,218,2)
(217,54,2)
(104,167,2)
(132,253,2)
(234,176,2)
(55,234,2)
(191,11,2)
(11,253,2)
(21,234,2)
(257,207,2)
(203,218,2)
(127,199,2)
(251,260,2)
(82,84,2)
(229,251,2)
(143,184,2)
(189,134,2)
(155,220,2)
(41,184,2)
(206,151,2)
(102,32,2)
(131,240,2)
(152,251,2)
(89,253,2)
(213,65,2)
(67,134,2)
(141,253,2)
(184,167,2)
(180,204,2)
(191,253,2)
(122,207,2)
(82,134,2)
(216,251,2)
(4,19,2)
(260,167,2)
(104,204,2)
(137,184,2)
(241,184,2)
(78,58,2)
(131,254,2)
(152,218,2)
(217,184,2)
(124,61,2)
(157,251,2)
(161,184,2)
(205,184,2)
(40,251,2)
(185,253,2)
(188,184,2)
(265,234,2)
(121,204,2)
(165,204,2)
(65,234,2)
(43,241,2)
(207,234,2)
(176,251,2)
(86,23,2)
(234,234,2)
(44,184,2)
(254,58,2)
(75,218,2)
(122,204,2)
(72,253,2)
(61,182,2)
(52,218,2)
(175,199,2)
(7,218,2)
(7,251,2)
(136,19,2)
(215,58,2)
(51,218,2)
(77,189,2)
(93,234,2)
(134,262,2)
(56,167,2)
(121,218,2)
(167,276,2)
(48,19,2)
(82,14,2)
(40,218,2)
(176,213,2)
(156,184,2)
(86,184,2)
(197,31,2)
(73,184,2)
(13,25,2)
(204,181,2)
(233,19,2)
(14,184,2)
(81,156,2)
(56,166,2)
(262,215,2)
(275,184,2)
(111,80,2)
(200,253,2)
(78,199,2)
(48,251,2)
(227,184,2)
(271,199,2)
(234,218,2)
(131,218,2)
(186,235,2)
(148,218,2)
(195,253,2)
(189,199,2)
(226,253,2)
(202,218,2)
(115,58,2)
(118,251,2)
(189,58,2)
(225,190,2)
(162,253,2)
(182,58,2)
(91,234,2)
(118,218,2)
(237,134,2)
(271,58,2)
(137,138,2)
(121,202,2)
(266,251,2)
(96,134,2)
(274,184,2)
(235,184,2)
(9,258,2)
(112,218,2)
(54,184,2)
(197,3,2)
(177,134,2)
(176,234,2)
(175,58,2)
(88,253,2)
(120,28,2)
(33,218,2)
(144,58,2)
(144,199,2)
(83,134,2)
(116,218,2)
(26,251,2)
(68,251,2)
(195,9,2)
(28,234,2)
(99,134,2)
(24,184,2)
(126,134,2)
(42,184,2)
(94,218,2)
(140,134,2)
(128,167,2)
(31,134,2)
(212,253,2)
(119,167,2)
(120,234,2)
(52,251,2)
(180,167,2)
(51,90,2)
(66,253,2)
(213,251,2)
(65,58,2)
(133,218,2)
(8,251,2)
(89,185,2)
(255,184,2)
(34,134,2)
(131,45,2)
(165,134,2)
(131,255,2)
(77,134,2)
(271,218,2)
(247,234,2)
(131,155,2)
(163,78,2)
(138,167,2)
(193,251,2)
(127,218,2)
(80,253,2)
(234,251,2)
(57,184,2)
(236,58,2)
(173,253,2)
(132,204,2)
(8,218,2)
(82,177,2)
(97,251,2)
(174,253,2)
(194,253,2)
(183,134,2)
(256,175,2)
(87,130,2)
(221,253,2)
(65,218,2)
(193,218,2)
(201,253,2)
(269,134,2)
(113,134,2)
(110,204,2)
(38,234,2)
(190,253,2)
(62,134,2)
(4,234,2)
(90,158,2)
(139,253,2)
(45,120,2)
(276,29,2)
(252,134,2)
(249,253,2)
(276,102,2)
(125,217,2)
(240,184,2)
(184,180,2)
(211,167,2)
(231,253,2)
(229,218,2)
(158,58,2)
(145,134,2)
(115,253,2)
(135,16,2)
(240,204,2)
(68,218,2)
(5,184,2)
(253,218,2)
(236,253,2)
(171,251,2)
(15,86,2)
(138,58,2)
(111,253,2)
(16,234,2)
(64,134,2)
(267,134,2)
(28,135,2)
(155,218,2)
(3,184,2)
(137,167,2)
(186,184,2)
(127,251,2)
(36,184,2)
(92,184,2)
(233,248,2)
(147,253,2)
(215,251,2)
(191,225,2)
(75,251,2)
(128,184,2)
(23,41,2)
(130,96,2)
(81,184,2)
(253,251,2)
(251,167,2)
(23,184,2)
(117,234,2)
(93,251,2)
(114,271,2)
(166,104,2)
(63,134,2)
(70,134,2)
(105,234,2)
(15,184,2)
(248,251,2)
(260,137,2)
(60,218,2)
(197,206,2)
(59,253,2)
(110,184,2)
(187,89,2)
(190,144,2)
(3,254,2)
(228,170,2)
(18,184,2)
(144,253,2)
(261,184,2)
(223,184,2)
(65,251,2)
(46,218,2)
(82,87,2)
(2,134,2)
(197,131,2)
(256,134,2)
(155,251,2)
(241,110,2)
(166,167,2)
(233,193,2)
(191,204,2)
(220,251,2)
(150,253,2)
(220,218,2)
(90,218,2)
(60,251,2)
(31,254,2)
(233,218,2)
(165,126,2)
(253,8,2)
(82,19,2)
(213,234,2)
(206,218,2)
(79,184,2)
(98,218,2)
(29,13,2)
(158,218,2)
(218,134,2)
(185,204,2)
(85,234,2)
(153,134,2)
(207,120,2)
(12,184,2)
(96,199,2)
(239,234,2)
(209,253,2)
(105,251,2)
(69,253,2)
(48,218,2)
(25,204,2)
(74,253,2)
(86,204,2)
(263,218,2)
(248,204,2)
(213,218,2)
(78,253,2)
(258,204,2)
(80,58,2)
(276,124,2)
(236,147,2)
(262,251,2)
(41,43,2)
(43,184,2)
(16,58,2)
(8,233,2)
(147,8,2)
(261,204,2)
(173,163,2)
(131,251,2)
(258,253,2)
(142,253,2)
(159,218,2)
(53,167,2)
(131,115,2)
(149,251,2)
(225,253,2)
(80,199,2)
(168,253,2)
(233,251,2)
(96,58,2)
(54,204,2)
(109,251,2)
(214,184,2)
(191,111,2)
(105,218,2)
(97,218,2)
(106,218,2)
(163,253,2)
(9,253,2)
(151,82,2)
(129,167,2)
(156,261,2)
(114,218,2)
(31,255,2)
(238,253,2)
(35,184,2)
(159,251,2)
(219,253,2)
(246,184,2)
(187,253,2)
(218,151,2)
(202,114,2)
(244,234,2)
(45,234,2)
(260,184,2)
(164,218,2)
(100,167,2)
(151,134,2)
(106,251,2)
(18,204,2)
(127,58,2)
(126,77,2)
(232,184,2)
(60,19,2)
(130,134,2)
(135,234,2)
(109,218,2)
(87,134,2)
(125,184,2)
(136,234,2)
(191,173,2)
(248,218,2)
(20,218,2)
(11,236,2)
(182,199,2)
(98,251,2)
(138,184,2)
(235,18,2)
(134,251,2)
(179,58,2)
(199,228,2)
-----------------------------------
(0,dev)
(1,dev)
(2,mgid)
(3,return -EAGAIN;)
(4,netif_tx_lock_bh(dev)
(5,wr)
(6,mcast)
(7,mgid)
(8,ah = ipoib_create_ah(dev, priv->pd, &av)
(9,&priv->lock)
(10,set_qkey)
(11,mcast->ah->ah)
(12,qkey)
(13,priv->dev->broadcast)
(14,set_qkey = 1)
(15,priv->tx_wr.wr.ud.remote_qkey = priv->qkey)
(16,mcast->pkt_queue)
(17,mcast)
(18,priv->lock)
(19,*dev = mcast->dev)
(20,mcmember)
(21,skb)
(22,mcmember)
(23,priv->qkey = be32_to_cpu(priv->broadcast->mcmember.qkey)
(24,priv)
(25,priv->dev)
(26,pd)
(27,skb)
(28,skb_dequeue(&mcast->pkt_queue)
(29,priv->dev->broadcast + 4)
(30,mgid)
(31,return 0;)
(32,union ib_gid)
(33,ret)
(34,mcast)
(35,EAGAIN)
(36,-EAGAIN)
(37,)
(38,dev)
(39,"dev_queue_xmit failed to requeue packet\\n")
(40,priv)
(41,be32_to_cpu(priv->broadcast->mcmember.qkey)
(42,remote_qkey)
(43,priv->broadcast->mcmember.qkey)
(44,priv)
(45,skb->dev)
(46,mcast)
(47,)
(48,netif_tx_lock_bh(dev)
(49,)
(50,)
(51,clear_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
(52,grh)
(53,priv)
(54,priv->lock)
(55,dev)
(56,spin_lock_irq(&priv->lock)
(57,set_qkey)
(58,struct ipoib_mcast *mcast)
(59,"MGID %pI6 AV %p, LID 0x%04x, SL %d\\n")
(60,netif_tx_unlock_bh(dev)
(61,mcast->mcmember.mgid)
(62,mcmember)
(63,mcast)
(64,priv)
(65,mcast->pkt_queue)
(66,"ib_address_create failed\\n")
(67,ret)
(68,mcast->mcmember.mgid)
(69,mcast)
(70,mcmember)
(71,)
(72,priv)
(73,qkey)
(74,priv)
(75,av)
(76,)
(77,mcast->mcmember.mgid)
(78,mcast->mcmember)
(79,lock)
(80,mcast->mcmember)
(81,priv->tx_wr.wr.ud)
(82,ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid)
(83,mlid)
(84,set_qkey = 0)
(85,skb)
(86,priv->qkey)
(87,be16_to_cpu(mcast->mcmember.mlid)
(88,lock)
(89,&priv->lock)
(90,&mcast->flags)
(91,skb->dev = dev)
(92,qkey)
(93,pkt_queue)
(94,priv)
(95,if (!memcmp(mcast->mcmember.mgid.raw, priv->dev->broadcast + 4,\n\\n\\t\\t    sizeof (union ib_gid)
(96,mcast->mcmember)
(97,dev)
(98,av.grh.dgid = mcast->mcmember.mgid)
(99,0)
(100,mcast)
(101,if (test_and_set_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
(102,sizeof (union ib_gid)
(103,)
(104,priv->lock)
(105,mcast)
(106,dgid)
(107,0)
(108,if (!priv->broadcast)
(109,dev)
(110,priv->broadcast)
(111,mcast->mcmember.sl)
(112,ah)
(113,ret)
(114,mcast->mcmember.mgid)
(115,mcast->ah)
(116,mcast)
(117,skb)
(118,dev)
(119,broadcast)
(120,*skb = skb_dequeue(&mcast->pkt_queue)
(121,ipoib_warn(priv, "couldn\'t attach QP to multicast group %pI6\\n",\n\\n\\t\\t\\t\\t   mcast->mcmember.mgid.raw)
(122,ipoib_warn(priv, "dev_queue_xmit failed to requeue packet\\n")
(123,mcmember)
(124,mcast->mcmember.mgid.raw)
(125,spin_unlock_irq(&priv->lock)
(126,mcast->mcmember.mgid.raw)
(127,mcast->mcmember)
(128,IPOIB_MCAST_FLAG_SENDONLY)
(129,priv)
(130,mcast->mcmember.mlid)
(131,return 0;)
(132,ipoib_warn(priv, "ib_address_create failed\\n")
(133,IPOIB_MCAST_FLAG_ATTACHED)
(134,test_and_set_bit(IPOIB_MCAST_FLAG_ATTACHED, &mcast->flags)
(135,&mcast->pkt_queue)
(136,netif_tx_unlock_bh(dev)
(137,&mcast->flags)
(138,mcast->flags)
(139,mcmember)
(140,set_qkey)
(141,ah)
(142,mcast)
(143,tx_wr)
(144,mcast->mcmember)
(145,dev)
(146,ah)
(147,mcast->ah = ah)
(148,mgid)
(149,av)
(150,mgid)
(151,ret = ipoib_mcast_attach(dev, be16_to_cpu(mcast->mcmember.mlid)
(152,mcmember)
(153,mgid)
(154,4)
(155,av.grh.dgid)
(156,priv->tx_wr.wr)
(157,IPOIB_MCAST_FLAG_ATTACHED)
(158,mcast->flags)
(159,0)
(160,dev)
(161,ud)
(162,mcmember)
(163,mcast->mcmember.mgid)
(164,flags)
(165,ipoib_warn(priv, "multicast group %pI6 already attached\\n",\n\\n\\t\\t\\t\\t   mcast->mcmember.mgid.raw)
(166,&priv->lock)
(167,!memcmp(mcast->mcmember.mgid.raw, priv->dev->broadcast + 4,\n\\n\\t\\t    sizeof (union ib_gid)
(168,ah)
(169,priv)
(170,struct ib_sa_mcmember_rec *mcmember)
(171,mcast)
(172,priv)
(173,mcast->mcmember.mgid.raw)
(174,ah)
(175,mcast->mcmember)
(176,skb_queue_empty(&mcast->pkt_queue)
(177,&mcast->mcmember.mgid)
(178,if (dev_queue_xmit(skb)
(179,mcast->dev)
(180,priv->broadcast)
(181,netdev_priv(dev)
(182,mcast->mcmember)
(183,mcast)
(184,!priv->broadcast)
(185,priv->lock)
(186,spin_unlock_irq(&priv->lock)
(187,spin_lock_irq(&priv->lock)
(188,lock)
(189,mcast->mcmember)
(190,mcast->mcmember.mlid)
(191,ipoib_dbg_mcast(priv, "MGID %pI6 AV %p, LID 0x%04x, SL %d\\n",\n\\n\\t\\t\\t\\t\\tmcast->mcmember.mgid.raw,\n\\n\\t\\t\\t\\t\\tmcast->ah->ah,\n\\n\\t\\t\\t\\t\\tbe16_to_cpu(mcast->mcmember.mlid)
(192,broadcast)
(193,&av)
(194,mcast)
(195,spin_unlock_irq(&priv->lock)
(196,mcast)
(197,RET)
(198,if (!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
(199,mcast->mcmember = *mcmember)
(200,priv)
(201,mlid)
(202,mcast->mcmember.mgid.raw)
(203,raw)
(204,*priv = netdev_priv(dev)
(205,flags)
(206,return ret;)
(207,dev_queue_xmit(skb)
(208,if (!ah)
(209,lock)
(210,mcmember)
(211,lock)
(212,mcast)
(213,&mcast->pkt_queue)
(214,priv)
(215,mcast->flags)
(216,ah)
(217,&priv->lock)
(218,ret < 0)
(219,mcmember)
(220,av.grh)
(221,ah)
(222,if (ret < 0)
(223,1)
(224,raw)
(225,be16_to_cpu(mcast->mcmember.mlid)
(226,mcast)
(227,mcmember)
(228,*mcmember)
(229,mcast)
(230,dev)
(231,sl)
(232,priv)
(233,ipoib_create_ah(dev, priv->pd, &av)
(234,!skb_queue_empty(&mcast->pkt_queue)
(235,&priv->lock)
(236,mcast->ah)
(237,"multicast group %pI6 already attached\\n")
(238,priv)
(239,dev)
(240,priv->qkey)
(241,priv->broadcast->mcmember)
(242,)
(243,)
(244,pkt_queue)
(245,)
(246,priv)
(247,dev)
(248,priv->pd)
(249,raw)
(250,dev)
(251,!test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
(252,0)
(253,!ah)
(254,mcast->mcmember)
(255,priv->tx_wr.wr.ud.remote_qkey)
(256,mcast->mcmember.mgid)
(257,priv)
(258,priv->lock)
(259,)
(260,test_bit(IPOIB_MCAST_FLAG_SENDONLY, &mcast->flags)
(261,priv->tx_wr)
(262,&mcast->flags)
(263,"couldn\'t attach QP to multicast group %pI6\\n")
(264,set_qkey)
(265,mcast)
(266,flags)
(267,mcmember)
(268,)
(269,raw)
(270,while (!skb_queue_empty(&mcast->pkt_queue)
(271,mcast->mcmember)
(272,priv)
(273,ret)
(274,priv)
(275,broadcast)
(276,memcmp(mcast->mcmember.mgid.raw, priv->dev->broadcast + 4,\n\\n\\t\\t    sizeof (union ib_gid)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^