-----label-----
1
-----code-----
struct nfcmrvl_private *nfcmrvl_nci_register_dev(enum nfcmrvl_phy phy,
				void *drv_data,
				struct nfcmrvl_if_ops *ops,
				struct device *dev,
				struct nfcmrvl_platform_data *pdata)
{
	struct nfcmrvl_private *priv;
	int rc;
	int headroom;
	int tailroom;
	u32 protocols;

	priv = kzalloc(sizeof(*priv), GFP_KERNEL);
	if (!priv)
		return ERR_PTR(-ENOMEM);

	priv->drv_data = drv_data;
	priv->if_ops = ops;
	priv->dev = dev;
	priv->phy = phy;

	memcpy(&priv->config, pdata, sizeof(*pdata));

	if (priv->config.reset_n_io) {
		rc = gpio_request_one(priv->config.reset_n_io,
				      GPIOF_OUT_INIT_LOW,
				      "nfcmrvl_reset_n");
		if (rc < 0) {
			priv->config.reset_n_io = 0;
			nfc_err(dev, "failed to request reset_n io\n");
		}
	}

	if (phy == NFCMRVL_PHY_SPI) {
		headroom = NCI_SPI_HDR_LEN;
		tailroom = 1;
	} else
		headroom = tailroom = 0;

	if (priv->config.hci_muxed)
		headroom += NFCMRVL_HCI_EVENT_HEADER_SIZE;

	protocols = NFC_PROTO_JEWEL_MASK
		| NFC_PROTO_MIFARE_MASK
		| NFC_PROTO_FELICA_MASK
		| NFC_PROTO_ISO14443_MASK
		| NFC_PROTO_ISO14443_B_MASK
		| NFC_PROTO_ISO15693_MASK
		| NFC_PROTO_NFC_DEP_MASK;

	priv->ndev = nci_allocate_device(&nfcmrvl_nci_ops, protocols,
					 headroom, tailroom);
	if (!priv->ndev) {
		nfc_err(dev, "nci_allocate_device failed\n");
		rc = -ENOMEM;
		goto error_free_gpio;
	}

	nci_set_drvdata(priv->ndev, priv);

	rc = nci_register_device(priv->ndev);
	if (rc) {
		nfc_err(dev, "nci_register_device failed %d\n", rc);
		goto error_free_dev;
	}

	/* Ensure that controller is powered off */
	nfcmrvl_chip_halt(priv);

	rc = nfcmrvl_fw_dnld_init(priv);
	if (rc) {
		nfc_err(dev, "failed to initialize FW download %d\n", rc);
		goto error_free_dev;
	}

	nfc_info(dev, "registered with nci successfully\n");
	return priv;

error_free_dev:
	nci_free_device(priv->ndev);
error_free_gpio:
	if (priv->config.reset_n_io)
		gpio_free(priv->config.reset_n_io);
	kfree(priv);
	return ERR_PTR(rc);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
4,11
7,8
7,9
8,9
10,11
12,13
12,14
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
24,25
26,27
26,28
29,30
29,31
30,31
32,33
32,34
35,36
35,37
35,38
35,39
35,40
35,41
35,42
35,43
35,44
35,45
35,46
35,47
35,48
35,49
35,50
35,51
35,52
35,53
35,54
35,55
35,56
35,57
35,58
35,59
35,60
35,61
35,62
35,63
35,64
35,65
36,37
37,38
37,39
38,39
40,41
40,42
43,44
44,45
44,46
46,47
48,49
49,50
49,51
51,52
53,54
54,55
54,56
56,57
58,59
59,60
59,61
60,61
62,63
64,65
65,66
65,67
66,67
68,69
68,70
68,71
69,70
71,72
72,73
73,74
74,75
76,77
78,79
78,80
79,80
80,81
82,83
83,84
83,85
84,85
86,87
87,88
89,90
90,91
90,92
91,92
91,93
92,93
95,96
97,98
98,99
98,100
99,100
99,101
100,101
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
121,122
122,123
122,124
122,125
122,126
123,124
125,126
126,127
126,128
127,128
130,131
132,133
133,134
134,135
135,136
137,138
137,139
138,139
138,140
139,140
139,141
140,141
144,145
144,146
145,146
146,147
146,148
147,148
149,150
149,151
149,152
149,153
150,151
152,153
152,154
153,154
153,155
154,155
158,159
161,162
161,163
162,163
162,164
163,164
166,167
166,168
167,168
168,169
168,170
169,170
169,171
170,171
170,172
171,172
176,177
177,178
177,179
177,180
178,179
180,181
183,184
183,185
183,186
184,185
184,186
185,186
187,188
189,190
189,191
190,191
191,192
191,193
192,193
194,195
196,197
197,198
197,199
198,199
201,202
202,203
202,204
203,204
205,206
205,207
206,207
209,210
209,211
210,211
210,212
211,212
211,213
212,213
216,217
217,218
217,219
218,219
220,221
222,223
223,224
223,225
224,225
226,227
226,228
227,228
227,229
228,229
228,230
229,230
229,231
230,231
230,232
231,232
231,233
232,233
234,235
236,237
238,239
240,241
242,243
244,245
246,247
247,248
247,249
248,249
248,250
249,250
252,253
252,254
252,255
252,256
252,257
253,254
255,256
256,257
258,259
260,261
262,263
264,265
264,266
265,266
266,267
266,268
267,268
270,271
270,272
270,273
271,272
272,273
272,274
272,275
273,274
275,276
278,279
279,280
279,281
280,281
282,283
283,284
285,286
287,288
288,289
288,290
288,291
289,290
291,292
291,293
292,293
295,296
297,298
298,299
298,300
299,300
301,302
301,303
302,303
304,305
304,306
305,306
308,309
308,310
309,310
311,312
311,313
312,313
313,314
313,315
313,316
313,317
314,315
316,317
319,320
321,322
323,324
324,325
324,326
325,326
327,328
329,330
330,331
330,332
331,332
333,334
333,335
334,335
336,337
338,339
338,340
339,340
341,342
341,343
342,343
343,344
343,345
343,346
343,347
344,345
346,347
349,350
351,352
353,354
354,355
354,356
354,357
355,356
357,358
360,361
361,362
363,364
363,365
365,366
366,367
366,368
367,368
369,370
369,371
370,371
373,374
373,375
375,376
375,377
376,377
376,378
377,378
377,379
378,379
382,383
383,384
383,385
384,385
386,387
386,388
387,388
387,389
388,389
392,393
393,394
393,395
394,395
396,397
398,399
399,400
399,401
400,401
402,403
-----nextToken-----
3,5,6,9,11,13,15,16,19,21,22,25,27,28,31,33,34,39,41,42,45,47,50,52,55,57,61,63,67,70,75,77,81,85,88,93,94,96,101,102,104,109,110,112,117,118,120,124,128,129,131,136,141,142,143,148,151,155,156,157,159,160,164,165,172,173,174,175,179,181,182,186,188,193,195,199,200,204,207,208,213,214,215,219,221,225,233,235,237,239,241,243,245,250,251,254,257,259,261,263,268,269,274,276,277,281,284,286,290,293,294,296,300,303,306,307,310,315,317,318,320,322,326,328,332,335,337,340,345,347,348,350,352,356,358,359,362,364,368,371,372,374,379,380,381,385,389,390,391,395,397,401,403
-----computeFrom-----
65,66
65,67
90,91
90,92
98,99
98,100
106,107
106,108
114,115
114,116
146,147
146,148
162,163
162,164
168,169
168,170
184,185
184,186
191,192
191,193
197,198
197,199
202,203
202,204
205,206
205,207
217,218
217,219
223,224
223,225
226,227
226,228
227,228
227,229
228,229
228,230
229,230
229,231
230,231
230,232
231,232
231,233
247,248
247,249
279,280
279,281
298,299
298,300
330,331
330,332
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
struct nfcmrvl_private *nfcmrvl_nci_register_dev(enum nfcmrvl_phy phy,				void *drv_data,				struct nfcmrvl_if_ops *ops,				struct device *dev,				struct nfcmrvl_platform_data *pdata){	struct nfcmrvl_private *priv;	int rc;	int headroom;	int tailroom;	u32 protocols;	priv = kzalloc(sizeof(*priv), GFP_KERNEL);	if (!priv)		return ERR_PTR(-ENOMEM);	priv->drv_data = drv_data;	priv->if_ops = ops;	priv->dev = dev;	priv->phy = phy;	memcpy(&priv->config, pdata, sizeof(*pdata));	if (priv->config.reset_n_io) {		rc = gpio_request_one(priv->config.reset_n_io,				      GPIOF_OUT_INIT_LOW,				      "nfcmrvl_reset_n");		if (rc < 0) {			priv->config.reset_n_io = 0;			nfc_err(dev, "failed to request reset_n io\n");		}	}	if (phy == NFCMRVL_PHY_SPI) {		headroom = NCI_SPI_HDR_LEN;		tailroom = 1;	} else		headroom = tailroom = 0;	if (priv->config.hci_muxed)		headroom += NFCMRVL_HCI_EVENT_HEADER_SIZE;	protocols = NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK		| NFC_PROTO_FELICA_MASK		| NFC_PROTO_ISO14443_MASK		| NFC_PROTO_ISO14443_B_MASK		| NFC_PROTO_ISO15693_MASK		| NFC_PROTO_NFC_DEP_MASK;	priv->ndev = nci_allocate_device(&nfcmrvl_nci_ops, protocols,					 headroom, tailroom);	if (!priv->ndev) {		nfc_err(dev, "nci_allocate_device failed\n");		rc = -ENOMEM;		goto error_free_gpio;	}	nci_set_drvdata(priv->ndev, priv);	rc = nci_register_device(priv->ndev);	if (rc) {		nfc_err(dev, "nci_register_device failed %d\n", rc);		goto error_free_dev;	}	/* Ensure that controller is powered off */	nfcmrvl_chip_halt(priv);	rc = nfcmrvl_fw_dnld_init(priv);	if (rc) {		nfc_err(dev, "failed to initialize FW download %d\n", rc);		goto error_free_dev;	}	nfc_info(dev, "registered with nci successfully\n");	return priv;error_free_dev:	nci_free_device(priv->ndev);error_free_gpio:	if (priv->config.reset_n_io)		gpio_free(priv->config.reset_n_io);	kfree(priv);	return ERR_PTR(rc);}
struct nfcmrvl_private
nfcmrvl_private
*nfcmrvl_nci_register_dev(enum nfcmrvl_phy phy,				void *drv_data,				struct nfcmrvl_if_ops *ops,				struct device *dev,				struct nfcmrvl_platform_data *pdata)
*
nfcmrvl_nci_register_dev
enum nfcmrvl_phy phy
enum nfcmrvl_phy
nfcmrvl_phy
phy
phy
void *drv_data
void
*drv_data
*
drv_data
struct nfcmrvl_if_ops *ops
struct nfcmrvl_if_ops
nfcmrvl_if_ops
*ops
*
ops
struct device *dev
struct device
device
*dev
*
dev
struct nfcmrvl_platform_data *pdata
struct nfcmrvl_platform_data
nfcmrvl_platform_data
*pdata
*
pdata
{	struct nfcmrvl_private *priv;	int rc;	int headroom;	int tailroom;	u32 protocols;	priv = kzalloc(sizeof(*priv), GFP_KERNEL);	if (!priv)		return ERR_PTR(-ENOMEM);	priv->drv_data = drv_data;	priv->if_ops = ops;	priv->dev = dev;	priv->phy = phy;	memcpy(&priv->config, pdata, sizeof(*pdata));	if (priv->config.reset_n_io) {		rc = gpio_request_one(priv->config.reset_n_io,				      GPIOF_OUT_INIT_LOW,				      "nfcmrvl_reset_n");		if (rc < 0) {			priv->config.reset_n_io = 0;			nfc_err(dev, "failed to request reset_n io\n");		}	}	if (phy == NFCMRVL_PHY_SPI) {		headroom = NCI_SPI_HDR_LEN;		tailroom = 1;	} else		headroom = tailroom = 0;	if (priv->config.hci_muxed)		headroom += NFCMRVL_HCI_EVENT_HEADER_SIZE;	protocols = NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK		| NFC_PROTO_FELICA_MASK		| NFC_PROTO_ISO14443_MASK		| NFC_PROTO_ISO14443_B_MASK		| NFC_PROTO_ISO15693_MASK		| NFC_PROTO_NFC_DEP_MASK;	priv->ndev = nci_allocate_device(&nfcmrvl_nci_ops, protocols,					 headroom, tailroom);	if (!priv->ndev) {		nfc_err(dev, "nci_allocate_device failed\n");		rc = -ENOMEM;		goto error_free_gpio;	}	nci_set_drvdata(priv->ndev, priv);	rc = nci_register_device(priv->ndev);	if (rc) {		nfc_err(dev, "nci_register_device failed %d\n", rc);		goto error_free_dev;	}	/* Ensure that controller is powered off */	nfcmrvl_chip_halt(priv);	rc = nfcmrvl_fw_dnld_init(priv);	if (rc) {		nfc_err(dev, "failed to initialize FW download %d\n", rc);		goto error_free_dev;	}	nfc_info(dev, "registered with nci successfully\n");	return priv;error_free_dev:	nci_free_device(priv->ndev);error_free_gpio:	if (priv->config.reset_n_io)		gpio_free(priv->config.reset_n_io);	kfree(priv);	return ERR_PTR(rc);}
struct nfcmrvl_private *priv;
struct nfcmrvl_private *priv;
struct nfcmrvl_private
nfcmrvl_private
*priv
*
priv
int rc;
int rc;
int
rc
rc
int headroom;
int headroom;
int
headroom
headroom
int tailroom;
int tailroom;
int
tailroom
tailroom
u32 protocols;
u32 protocols;
u32
u32
protocols
protocols
priv = kzalloc(sizeof(*priv), GFP_KERNEL);
priv = kzalloc(sizeof(*priv), GFP_KERNEL)
priv
priv
kzalloc(sizeof(*priv), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*priv)
(*priv)
*priv
priv
priv
GFP_KERNEL
GFP_KERNEL
if (!priv)		return ERR_PTR(-ENOMEM);
!priv
priv
priv
return ERR_PTR(-ENOMEM);
ERR_PTR(-ENOMEM)
ERR_PTR
ERR_PTR
-ENOMEM
ENOMEM
ENOMEM
priv->drv_data = drv_data;
priv->drv_data = drv_data
priv->drv_data
priv
priv
drv_data
drv_data
drv_data
priv->if_ops = ops;
priv->if_ops = ops
priv->if_ops
priv
priv
if_ops
ops
ops
priv->dev = dev;
priv->dev = dev
priv->dev
priv
priv
dev
dev
dev
priv->phy = phy;
priv->phy = phy
priv->phy
priv
priv
phy
phy
phy
memcpy(&priv->config, pdata, sizeof(*pdata));
memcpy(&priv->config, pdata, sizeof(*pdata))
memcpy
memcpy
&priv->config
priv->config
priv
priv
config
pdata
pdata
sizeof(*pdata)
(*pdata)
*pdata
pdata
pdata
if (priv->config.reset_n_io) {		rc = gpio_request_one(priv->config.reset_n_io,				      GPIOF_OUT_INIT_LOW,				      "nfcmrvl_reset_n");		if (rc < 0) {			priv->config.reset_n_io = 0;			nfc_err(dev, "failed to request reset_n io\n");		}	}
priv->config.reset_n_io
priv->config
priv
priv
config
reset_n_io
{		rc = gpio_request_one(priv->config.reset_n_io,				      GPIOF_OUT_INIT_LOW,				      "nfcmrvl_reset_n");		if (rc < 0) {			priv->config.reset_n_io = 0;			nfc_err(dev, "failed to request reset_n io\n");		}	}
rc = gpio_request_one(priv->config.reset_n_io,				      GPIOF_OUT_INIT_LOW,				      "nfcmrvl_reset_n");
rc = gpio_request_one(priv->config.reset_n_io,				      GPIOF_OUT_INIT_LOW,				      "nfcmrvl_reset_n")
rc
rc
gpio_request_one(priv->config.reset_n_io,				      GPIOF_OUT_INIT_LOW,				      "nfcmrvl_reset_n")
gpio_request_one
gpio_request_one
priv->config.reset_n_io
priv->config
priv
priv
config
reset_n_io
GPIOF_OUT_INIT_LOW
GPIOF_OUT_INIT_LOW
"nfcmrvl_reset_n"
if (rc < 0) {			priv->config.reset_n_io = 0;			nfc_err(dev, "failed to request reset_n io\n");		}
rc < 0
rc
rc
0
{			priv->config.reset_n_io = 0;			nfc_err(dev, "failed to request reset_n io\n");		}
priv->config.reset_n_io = 0;
priv->config.reset_n_io = 0
priv->config.reset_n_io
priv->config
priv
priv
config
reset_n_io
0
nfc_err(dev, "failed to request reset_n io\n");
nfc_err(dev, "failed to request reset_n io\n")
nfc_err
nfc_err
dev
dev
"failed to request reset_n io\n"
if (phy == NFCMRVL_PHY_SPI) {		headroom = NCI_SPI_HDR_LEN;		tailroom = 1;	} else		headroom = tailroom = 0;
phy == NFCMRVL_PHY_SPI
phy
phy
NFCMRVL_PHY_SPI
NFCMRVL_PHY_SPI
{		headroom = NCI_SPI_HDR_LEN;		tailroom = 1;	}
headroom = NCI_SPI_HDR_LEN;
headroom = NCI_SPI_HDR_LEN
headroom
headroom
NCI_SPI_HDR_LEN
NCI_SPI_HDR_LEN
tailroom = 1;
tailroom = 1
tailroom
tailroom
1
headroom = tailroom = 0;
headroom = tailroom = 0
headroom
headroom
tailroom = 0
tailroom
tailroom
0
if (priv->config.hci_muxed)		headroom += NFCMRVL_HCI_EVENT_HEADER_SIZE;
priv->config.hci_muxed
priv->config
priv
priv
config
hci_muxed
headroom += NFCMRVL_HCI_EVENT_HEADER_SIZE;
headroom += NFCMRVL_HCI_EVENT_HEADER_SIZE
headroom
headroom
NFCMRVL_HCI_EVENT_HEADER_SIZE
NFCMRVL_HCI_EVENT_HEADER_SIZE
protocols = NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK		| NFC_PROTO_FELICA_MASK		| NFC_PROTO_ISO14443_MASK		| NFC_PROTO_ISO14443_B_MASK		| NFC_PROTO_ISO15693_MASK		| NFC_PROTO_NFC_DEP_MASK;
protocols = NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK		| NFC_PROTO_FELICA_MASK		| NFC_PROTO_ISO14443_MASK		| NFC_PROTO_ISO14443_B_MASK		| NFC_PROTO_ISO15693_MASK		| NFC_PROTO_NFC_DEP_MASK
protocols
protocols
NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK		| NFC_PROTO_FELICA_MASK		| NFC_PROTO_ISO14443_MASK		| NFC_PROTO_ISO14443_B_MASK		| NFC_PROTO_ISO15693_MASK		| NFC_PROTO_NFC_DEP_MASK
NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK		| NFC_PROTO_FELICA_MASK		| NFC_PROTO_ISO14443_MASK		| NFC_PROTO_ISO14443_B_MASK		| NFC_PROTO_ISO15693_MASK
NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK		| NFC_PROTO_FELICA_MASK		| NFC_PROTO_ISO14443_MASK		| NFC_PROTO_ISO14443_B_MASK
NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK		| NFC_PROTO_FELICA_MASK		| NFC_PROTO_ISO14443_MASK
NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK		| NFC_PROTO_FELICA_MASK
NFC_PROTO_JEWEL_MASK		| NFC_PROTO_MIFARE_MASK
NFC_PROTO_JEWEL_MASK
NFC_PROTO_JEWEL_MASK
NFC_PROTO_MIFARE_MASK
NFC_PROTO_MIFARE_MASK
NFC_PROTO_FELICA_MASK
NFC_PROTO_FELICA_MASK
NFC_PROTO_ISO14443_MASK
NFC_PROTO_ISO14443_MASK
NFC_PROTO_ISO14443_B_MASK
NFC_PROTO_ISO14443_B_MASK
NFC_PROTO_ISO15693_MASK
NFC_PROTO_ISO15693_MASK
NFC_PROTO_NFC_DEP_MASK
NFC_PROTO_NFC_DEP_MASK
priv->ndev = nci_allocate_device(&nfcmrvl_nci_ops, protocols,					 headroom, tailroom);
priv->ndev = nci_allocate_device(&nfcmrvl_nci_ops, protocols,					 headroom, tailroom)
priv->ndev
priv
priv
ndev
nci_allocate_device(&nfcmrvl_nci_ops, protocols,					 headroom, tailroom)
nci_allocate_device
nci_allocate_device
&nfcmrvl_nci_ops
nfcmrvl_nci_ops
nfcmrvl_nci_ops
protocols
protocols
headroom
headroom
tailroom
tailroom
if (!priv->ndev) {		nfc_err(dev, "nci_allocate_device failed\n");		rc = -ENOMEM;		goto error_free_gpio;	}
!priv->ndev
priv->ndev
priv
priv
ndev
{		nfc_err(dev, "nci_allocate_device failed\n");		rc = -ENOMEM;		goto error_free_gpio;	}
nfc_err(dev, "nci_allocate_device failed\n");
nfc_err(dev, "nci_allocate_device failed\n")
nfc_err
nfc_err
dev
dev
"nci_allocate_device failed\n"
rc = -ENOMEM;
rc = -ENOMEM
rc
rc
-ENOMEM
ENOMEM
ENOMEM
goto error_free_gpio;
error_free_gpio
nci_set_drvdata(priv->ndev, priv);
nci_set_drvdata(priv->ndev, priv)
nci_set_drvdata
nci_set_drvdata
priv->ndev
priv
priv
ndev
priv
priv
rc = nci_register_device(priv->ndev);
rc = nci_register_device(priv->ndev)
rc
rc
nci_register_device(priv->ndev)
nci_register_device
nci_register_device
priv->ndev
priv
priv
ndev
if (rc) {		nfc_err(dev, "nci_register_device failed %d\n", rc);		goto error_free_dev;	}
rc
rc
{		nfc_err(dev, "nci_register_device failed %d\n", rc);		goto error_free_dev;	}
nfc_err(dev, "nci_register_device failed %d\n", rc);
nfc_err(dev, "nci_register_device failed %d\n", rc)
nfc_err
nfc_err
dev
dev
"nci_register_device failed %d\n"
rc
rc
goto error_free_dev;
error_free_dev
nfcmrvl_chip_halt(priv);
nfcmrvl_chip_halt(priv)
nfcmrvl_chip_halt
nfcmrvl_chip_halt
priv
priv
rc = nfcmrvl_fw_dnld_init(priv);
rc = nfcmrvl_fw_dnld_init(priv)
rc
rc
nfcmrvl_fw_dnld_init(priv)
nfcmrvl_fw_dnld_init
nfcmrvl_fw_dnld_init
priv
priv
if (rc) {		nfc_err(dev, "failed to initialize FW download %d\n", rc);		goto error_free_dev;	}
rc
rc
{		nfc_err(dev, "failed to initialize FW download %d\n", rc);		goto error_free_dev;	}
nfc_err(dev, "failed to initialize FW download %d\n", rc);
nfc_err(dev, "failed to initialize FW download %d\n", rc)
nfc_err
nfc_err
dev
dev
"failed to initialize FW download %d\n"
rc
rc
goto error_free_dev;
error_free_dev
nfc_info(dev, "registered with nci successfully\n");
nfc_info(dev, "registered with nci successfully\n")
nfc_info
nfc_info
dev
dev
"registered with nci successfully\n"
return priv;
priv
priv
error_free_dev:	nci_free_device(priv->ndev);
error_free_dev
nci_free_device(priv->ndev);
nci_free_device(priv->ndev)
nci_free_device
nci_free_device
priv->ndev
priv
priv
ndev
error_free_gpio:	if (priv->config.reset_n_io)		gpio_free(priv->config.reset_n_io);
error_free_gpio
if (priv->config.reset_n_io)		gpio_free(priv->config.reset_n_io);
priv->config.reset_n_io
priv->config
priv
priv
config
reset_n_io
gpio_free(priv->config.reset_n_io);
gpio_free(priv->config.reset_n_io)
gpio_free
gpio_free
priv->config.reset_n_io
priv->config
priv
priv
config
reset_n_io
kfree(priv);
kfree(priv)
kfree
kfree
priv
priv
return ERR_PTR(rc);
ERR_PTR(rc)
ERR_PTR
ERR_PTR
rc
rc
-----joern-----
(140,146,0)
(34,146,0)
(96,179,0)
(30,14,0)
(52,157,0)
(194,50,0)
(179,187,0)
(156,190,0)
(57,192,0)
(40,141,0)
(192,166,0)
(107,56,0)
(177,145,0)
(87,103,0)
(57,135,0)
(89,56,0)
(161,146,0)
(123,88,0)
(44,187,0)
(60,21,0)
(142,59,0)
(205,2,0)
(186,190,0)
(137,119,0)
(187,146,0)
(12,82,0)
(50,194,0)
(183,157,0)
(10,160,0)
(28,121,0)
(66,82,0)
(14,187,0)
(63,140,0)
(192,146,0)
(6,187,0)
(2,78,0)
(171,62,0)
(138,13,0)
(127,121,0)
(151,146,0)
(11,135,0)
(66,99,0)
(4,59,0)
(208,76,0)
(37,78,0)
(211,65,0)
(84,80,0)
(102,146,0)
(149,184,0)
(136,155,0)
(22,166,0)
(125,152,0)
(9,101,0)
(54,187,0)
(88,146,0)
(49,27,0)
(118,82,0)
(112,70,0)
(89,187,0)
(91,211,0)
(84,187,0)
(5,90,0)
(209,211,0)
(182,52,0)
(122,116,0)
(54,12,0)
(82,66,0)
(21,145,0)
(8,12,0)
(124,84,0)
(61,33,0)
(75,42,0)
(119,142,0)
(33,62,0)
(90,65,0)
(57,186,0)
(179,65,0)
(192,49,0)
(168,99,0)
(141,177,0)
(39,146,0)
(77,187,0)
(139,186,0)
(115,89,0)
(107,146,0)
(86,192,0)
(134,66,0)
(201,107,0)
(83,146,0)
(43,180,0)
(65,146,0)
(189,145,0)
(179,96,0)
(177,146,0)
(87,14,0)
(120,179,0)
(78,133,0)
(154,50,0)
(1,146,0)
(180,43,0)
(101,133,0)
(184,146,0)
(71,90,0)
(59,142,0)
(109,166,0)
(58,146,0)
(32,27,0)
(43,187,0)
(21,31,0)
(135,44,0)
(48,189,0)
(129,28,0)
(26,11,0)
(90,155,0)
(63,187,0)
(67,122,0)
(91,88,0)
(192,122,0)
(73,13,0)
(202,187,0)
(0,165,0)
(56,107,0)
(27,146,0)
(117,51,0)
(106,184,0)
(163,141,0)
(211,187,0)
(141,187,0)
(116,187,0)
(38,183,0)
(64,11,0)
(195,179,0)
(186,104,0)
(191,49,0)
(200,29,0)
(27,79,0)
(132,189,0)
(53,177,0)
(113,21,0)
(206,90,0)
(107,153,0)
(166,187,0)
(42,178,0)
(169,92,0)
(207,5,0)
(116,122,0)
(193,63,0)
(14,87,0)
(49,187,0)
(203,44,0)
(74,11,0)
(194,199,0)
(13,88,0)
(80,84,0)
(20,43,0)
(111,112,0)
(119,146,0)
(112,153,0)
(152,65,0)
(59,4,0)
(90,119,0)
(153,107,0)
(196,50,0)
(50,187,0)
(211,91,0)
(51,117,0)
(95,146,0)
(4,117,0)
(51,160,0)
(86,197,0)
(43,65,0)
(2,155,0)
(122,110,0)
(192,141,0)
(180,146,0)
(160,51,0)
(85,28,0)
(155,136,0)
(192,29,0)
(90,136,0)
(104,186,0)
(7,33,0)
(105,104,0)
(1,198,0)
(35,146,0)
(72,146,0)
(17,75,0)
(44,135,0)
(176,160,0)
(86,178,0)
(108,146,0)
(184,145,0)
(18,89,0)
(100,57,0)
(92,66,0)
(13,36,0)
(164,146,0)
(33,187,0)
(187,14,0)
(81,4,0)
(172,136,0)
(166,1,0)
(181,146,0)
(197,146,0)
(56,89,0)
(130,80,0)
(77,146,0)
(90,101,0)
(19,135,0)
(29,183,0)
(140,63,0)
(90,2,0)
(117,4,0)
(183,146,0)
(93,1,0)
(159,63,0)
(45,101,0)
(11,145,0)
(25,152,0)
(82,12,0)
(192,152,0)
(150,2,0)
(126,82,0)
(47,49,0)
(103,87,0)
(15,146,0)
(11,76,0)
(199,194,0)
(165,187,0)
(153,112,0)
(162,155,0)
(29,187,0)
(23,54,0)
(185,90,0)
(90,5,0)
(90,78,0)
(16,13,0)
(41,116,0)
(197,187,0)
(158,52,0)
(63,65,0)
(204,197,0)
(114,51,0)
(28,187,0)
(121,28,0)
(143,43,0)
(174,78,0)
(194,110,0)
(68,116,0)
(94,142,0)
(189,190,0)
(42,75,0)
(173,211,0)
(62,33,0)
(144,103,0)
(97,54,0)
(107,70,0)
(147,146,0)
(3,29,0)
(57,88,0)
(24,136,0)
(55,117,0)
(188,84,0)
(165,146,0)
(128,202,0)
(13,145,0)
(65,90,0)
(170,110,0)
(135,146,0)
(175,36,0)
(152,187,0)
(167,92,0)
(12,54,0)
(88,91,0)
(142,119,0)
(131,59,0)
(148,180,0)
(110,31,0)
(69,77,0)
(180,187,0)
(210,194,0)
(180,148,1)
(189,145,1)
(73,138,1)
(52,157,1)
(200,3,1)
(150,205,1)
(144,6,1)
(62,171,1)
(123,180,1)
(199,194,1)
(211,187,1)
(137,62,1)
(77,187,1)
(211,173,1)
(149,98,1)
(24,162,1)
(114,55,1)
(92,66,1)
(103,144,1)
(75,17,1)
(178,42,1)
(134,121,1)
(138,46,1)
(179,65,1)
(177,53,1)
(61,155,1)
(192,29,1)
(163,27,1)
(97,134,1)
(54,187,1)
(82,118,1)
(56,89,1)
(57,88,1)
(126,12,1)
(184,145,1)
(90,71,1)
(90,155,1)
(180,43,1)
(152,125,1)
(11,135,1)
(2,155,1)
(191,47,1)
(12,54,1)
(80,130,1)
(18,183,1)
(65,90,1)
(204,184,1)
(155,136,1)
(32,49,1)
(74,98,1)
(63,187,1)
(84,187,1)
(192,57,1)
(170,122,1)
(14,87,1)
(179,195,1)
(118,126,1)
(2,78,1)
(13,16,1)
(205,62,1)
(90,78,1)
(26,74,1)
(21,113,1)
(185,206,1)
(43,143,1)
(124,156,1)
(141,40,1)
(110,170,1)
(71,185,1)
(130,84,1)
(44,187,1)
(202,187,1)
(80,84,1)
(121,28,1)
(29,200,1)
(192,49,1)
(152,187,1)
(94,137,1)
(137,2,1)
(192,152,1)
(117,51,1)
(13,88,1)
(193,159,1)
(195,120,1)
(92,169,1)
(77,69,1)
(197,204,1)
(116,68,1)
(197,187,1)
(27,79,1)
(33,7,1)
(11,145,1)
(172,24,1)
(135,44,1)
(14,30,1)
(100,77,1)
(8,54,1)
(101,45,1)
(98,135,1)
(194,110,1)
(55,81,1)
(91,211,1)
(89,187,1)
(196,154,1)
(67,116,1)
(188,124,1)
(2,150,1)
(45,9,1)
(187,14,1)
(124,140,1)
(28,187,1)
(189,48,1)
(57,186,1)
(1,198,1)
(192,122,1)
(3,177,1)
(192,166,1)
(158,121,1)
(19,165,1)
(116,187,1)
(43,65,1)
(154,80,1)
(30,87,1)
(33,187,1)
(179,187,1)
(122,67,1)
(166,22,1)
(50,187,1)
(29,187,1)
(148,43,1)
(165,187,1)
(143,20,1)
(203,19,1)
(128,187,1)
(132,96,1)
(47,1,1)
(59,4,1)
(136,172,1)
(86,178,1)
(165,0,1)
(7,61,1)
(131,94,1)
(122,116,1)
(57,135,1)
(210,50,1)
(27,32,1)
(17,202,1)
(93,166,1)
(53,141,1)
(90,136,1)
(167,66,1)
(169,167,1)
(127,28,1)
(206,5,1)
(78,174,1)
(86,197,1)
(5,207,1)
(208,11,1)
(207,152,1)
(66,82,1)
(63,193,1)
(107,70,1)
(153,112,1)
(0,46,1)
(107,56,1)
(120,65,1)
(211,65,1)
(111,201,1)
(16,73,1)
(69,199,1)
(28,129,1)
(176,10,1)
(84,188,1)
(182,158,1)
(209,123,1)
(109,202,1)
(44,203,1)
(159,175,1)
(125,25,1)
(42,75,1)
(90,5,1)
(85,107,1)
(183,38,1)
(87,103,1)
(192,141,1)
(106,149,1)
(22,109,1)
(51,160,1)
(86,192,1)
(115,18,1)
(90,101,1)
(180,187,1)
(49,191,1)
(175,13,1)
(23,97,1)
(139,189,1)
(105,139,1)
(159,208,1)
(81,131,1)
(119,142,1)
(156,186,1)
(89,115,1)
(160,176,1)
(43,187,1)
(90,2,1)
(173,209,1)
(48,132,1)
(64,26,1)
(68,41,1)
(90,119,1)
(11,64,1)
(62,33,1)
(194,210,1)
(158,21,1)
(183,157,1)
(63,65,1)
(186,104,1)
(40,163,1)
(141,187,1)
(61,101,1)
(46,88,1)
(162,52,1)
(184,106,1)
(37,52,1)
(25,119,1)
(88,91,1)
(177,145,1)
(107,153,1)
(41,92,1)
(201,56,1)
(13,145,1)
(60,110,1)
(142,59,1)
(174,37,1)
(52,182,1)
(194,50,1)
(54,23,1)
(12,8,1)
(82,12,1)
(10,114,1)
(166,187,1)
(49,187,1)
(38,29,1)
(113,60,1)
(202,128,1)
(171,33,1)
(57,100,1)
(140,63,1)
(158,92,1)
(96,179,1)
(1,93,1)
(104,105,1)
(4,117,1)
(112,70,1)
(112,111,1)
(50,196,1)
(21,145,1)
(69,80,1)
(129,85,1)
(121,127,1)
(9,78,1)
(20,96,1)
(148,96,2)
(90,5,2)
(169,121,2)
(124,98,2)
(140,63,2)
(121,28,2)
(170,92,2)
(28,187,2)
(25,202,2)
(199,80,2)
(57,96,2)
(192,46,2)
(203,46,2)
(155,136,2)
(33,202,2)
(96,179,2)
(211,65,2)
(66,82,2)
(183,202,2)
(75,202,2)
(42,75,2)
(77,46,2)
(3,202,2)
(194,80,2)
(50,80,2)
(57,135,2)
(91,96,2)
(125,202,2)
(179,65,2)
(141,202,2)
(20,96,2)
(40,202,2)
(211,187,2)
(134,121,2)
(107,56,2)
(109,202,2)
(118,121,2)
(11,135,2)
(96,202,2)
(163,202,2)
(33,187,2)
(43,96,2)
(63,65,2)
(37,52,2)
(45,52,2)
(197,98,2)
(122,116,2)
(106,98,2)
(115,202,2)
(177,145,2)
(29,202,2)
(1,198,2)
(175,46,2)
(57,88,2)
(69,98,2)
(32,202,2)
(130,98,2)
(88,91,2)
(192,122,2)
(196,80,2)
(7,202,2)
(10,202,2)
(101,52,2)
(80,84,2)
(80,98,2)
(124,96,2)
(140,98,2)
(171,202,2)
(90,101,2)
(86,178,2)
(205,62,2)
(63,98,2)
(202,187,2)
(131,202,2)
(188,46,2)
(159,98,2)
(69,96,2)
(192,166,2)
(107,202,2)
(195,202,2)
(183,157,2)
(152,202,2)
(44,46,2)
(52,202,2)
(17,202,2)
(193,98,2)
(65,90,2)
(92,121,2)
(188,98,2)
(51,160,2)
(104,96,2)
(89,187,2)
(192,141,2)
(92,66,2)
(191,202,2)
(209,96,2)
(57,46,2)
(16,46,2)
(192,96,2)
(193,46,2)
(166,202,2)
(81,202,2)
(24,52,2)
(2,78,2)
(156,96,2)
(100,98,2)
(153,202,2)
(179,187,2)
(184,145,2)
(84,98,2)
(2,155,2)
(2,62,2)
(69,46,2)
(189,96,2)
(59,4,2)
(59,202,2)
(68,92,2)
(114,202,2)
(180,43,2)
(90,119,2)
(120,202,2)
(90,202,2)
(185,202,2)
(111,202,2)
(63,46,2)
(137,202,2)
(100,46,2)
(4,202,2)
(21,145,2)
(53,202,2)
(100,96,2)
(67,92,2)
(46,96,2)
(167,121,2)
(23,121,2)
(200,202,2)
(52,157,2)
(117,51,2)
(0,46,2)
(14,87,2)
(26,98,2)
(194,110,2)
(199,194,2)
(142,59,2)
(86,192,2)
(74,98,2)
(159,46,2)
(152,187,2)
(49,187,2)
(176,202,2)
(82,121,2)
(64,98,2)
(77,98,2)
(197,187,2)
(139,96,2)
(192,49,2)
(211,96,2)
(66,121,2)
(162,52,2)
(57,98,2)
(9,52,2)
(188,96,2)
(60,92,2)
(84,46,2)
(130,96,2)
(51,202,2)
(165,187,2)
(129,202,2)
(173,96,2)
(124,46,2)
(57,186,2)
(206,202,2)
(44,187,2)
(187,14,2)
(141,187,2)
(80,96,2)
(153,112,2)
(47,202,2)
(174,52,2)
(130,46,2)
(78,52,2)
(126,121,2)
(179,202,2)
(65,202,2)
(13,46,2)
(19,46,2)
(107,153,2)
(77,96,2)
(84,187,2)
(136,52,2)
(82,12,2)
(55,202,2)
(27,202,2)
(143,96,2)
(90,136,2)
(142,202,2)
(80,46,2)
(91,211,2)
(186,96,2)
(97,121,2)
(48,96,2)
(201,202,2)
(172,52,2)
(113,92,2)
(105,96,2)
(11,98,2)
(87,103,2)
(12,54,2)
(90,78,2)
(160,202,2)
(54,187,2)
(77,187,2)
(155,52,2)
(13,145,2)
(62,33,2)
(42,202,2)
(150,62,2)
(11,145,2)
(110,92,2)
(94,202,2)
(63,187,2)
(192,98,2)
(71,202,2)
(119,142,2)
(12,121,2)
(184,98,2)
(180,96,2)
(28,202,2)
(112,70,2)
(29,187,2)
(204,98,2)
(208,98,2)
(192,29,2)
(186,104,2)
(210,80,2)
(61,202,2)
(166,187,2)
(135,46,2)
(112,202,2)
(192,152,2)
(178,202,2)
(4,117,2)
(123,96,2)
(180,187,2)
(116,92,2)
(38,202,2)
(84,96,2)
(49,202,2)
(54,121,2)
(140,46,2)
(122,92,2)
(119,202,2)
(90,2,2)
(158,202,2)
(5,202,2)
(132,96,2)
(43,187,2)
(21,92,2)
(207,202,2)
(13,88,2)
(56,89,2)
(8,121,2)
(88,96,2)
(43,65,2)
(89,202,2)
(22,202,2)
(27,79,2)
(18,202,2)
(107,70,2)
(194,50,2)
(50,187,2)
(93,202,2)
(138,46,2)
(90,155,2)
(121,202,2)
(116,187,2)
(62,202,2)
(149,98,2)
(85,202,2)
(86,197,2)
(177,202,2)
(1,202,2)
(56,202,2)
(127,202,2)
(98,46,2)
(135,44,2)
(165,46,2)
(154,80,2)
(117,202,2)
(182,202,2)
(73,46,2)
(189,145,2)
(41,92,2)
-----------------------------------
(0,priv)
(1,priv->drv_data = drv_data)
(2,headroom += NFCMRVL_HCI_EVENT_HEADER_SIZE)
(3,priv)
(4,NFC_PROTO_FELICA_MASK\n\\n\\t\\t| NFC_PROTO_ISO14443_MASK\n\\n\\t\\t| NFC_PROTO_ISO14443_B_MASK\n\\n\\t\\t| NFC_PROTO_ISO15693_MASK\n\\n\\t\\t| NFC_PROTO_NFC_DEP_MASK)
(5,&nfcmrvl_nci_ops)
(6,priv)
(7,config)
(8,reset_n_io)
(9,tailroom)
(10,NFC_PROTO_ISO15693_MASK)
(11,nfc_err(dev, "failed to initialize FW download %d\\n", rc)
(12,priv->config.reset_n_io)
(13,nfc_err(dev, "nci_register_device failed %d\\n", rc)
(14,kzalloc(sizeof(*priv)
(15,tailroom)
(16,rc)
(17,ENOMEM)
(18,priv)
(19,rc)
(20,priv)
(21,nfc_err(dev, "failed to request reset_n io\\n")
(22,drv_data)
(23,config)
(24,tailroom)
(25,priv)
(26,"failed to initialize FW download %d\\n")
(27,priv->if_ops = ops)
(28,priv->config)
(29,priv->phy)
(30,GFP_KERNEL)
(31,)
(32,ops)
(33,priv->config)
(34,if (rc)
(35,if (!priv->ndev)
(36,)
(37,headroom)
(38,phy)
(39,if (priv->config.hci_muxed)
(40,dev)
(41,priv)
(42,ERR_PTR(-ENOMEM)
(43,priv->ndev)
(44,nfcmrvl_fw_dnld_init(priv)
(45,1)
(46,rc)
(47,priv)
(48,"nci_allocate_device failed\\n")
(49,priv->if_ops)
(50,priv->config)
(51,NFC_PROTO_ISO14443_B_MASK\n\\n\\t\\t| NFC_PROTO_ISO15693_MASK\n\\n\\t\\t| NFC_PROTO_NFC_DEP_MASK)
(52,phy == NFCMRVL_PHY_SPI)
(53,dev)
(54,priv->config)
(55,NFC_PROTO_ISO14443_MASK)
(56,&priv->config)
(57,ERR_PTR(rc)
(58,if (!priv)
(59,NFC_PROTO_MIFARE_MASK\n\\n\\t\\t| NFC_PROTO_FELICA_MASK\n\\n\\t\\t| NFC_PROTO_ISO14443_MASK\n\\n\\t\\t| NFC_PROTO_ISO14443_B_MASK\n\\n\\t\\t| NFC_PROTO_ISO15693_MASK\n\\n\\t\\t| NFC_PROTO_NFC_DEP_MASK)
(60,dev)
(61,priv)
(62,priv->config.hci_muxed)
(63,priv->ndev)
(64,rc)
(65,priv->ndev = nci_allocate_device(&nfcmrvl_nci_ops, protocols,\n\\n\\t\\t\\t\\t\\t headroom, tailroom)
(66,rc = gpio_request_one(priv->config.reset_n_io,\n\\n\\t\\t\\t\\t      GPIOF_OUT_INIT_LOW,\n\\n\\t\\t\\t\\t      "nfcmrvl_reset_n")
(67,reset_n_io)
(68,config)
(69,priv)
(70,struct nfcmrvl_platform_data *pdata)
(71,tailroom)
(72,error_free_dev:)
(73,"nci_register_device failed %d\\n")
(74,dev)
(75,-ENOMEM)
(76,)
(77,kfree(priv)
(78,headroom = NCI_SPI_HDR_LEN)
(79,struct nfcmrvl_if_ops *ops)
(80,priv->config.reset_n_io)
(81,NFC_PROTO_FELICA_MASK)
(82,gpio_request_one(priv->config.reset_n_io,\n\\n\\t\\t\\t\\t      GPIOF_OUT_INIT_LOW,\n\\n\\t\\t\\t\\t      "nfcmrvl_reset_n")
(83,headroom)
(84,priv->config)
(85,priv)
(86,RET)
(87,sizeof(*priv)
(88,rc = nci_register_device(priv->ndev)
(89,priv->config)
(90,nci_allocate_device(&nfcmrvl_nci_ops, protocols,\n\\n\\t\\t\\t\\t\\t headroom, tailroom)
(91,nci_register_device(priv->ndev)
(92,rc < 0)
(93,drv_data)
(94,NFC_PROTO_JEWEL_MASK)
(95,error_free_gpio:)
(96,!priv->ndev)
(97,priv)
(98,rc)
(99,)
(100,rc)
(101,tailroom = 1)
(102,if (phy == NFCMRVL_PHY_SPI)
(103,*priv)
(104,-ENOMEM)
(105,ENOMEM)
(106,"registered with nci successfully\\n")
(107,memcpy(&priv->config, pdata, sizeof(*pdata)
(108,rc)
(109,priv)
(110,priv->config.reset_n_io = 0)
(111,pdata)
(112,*pdata)
(113,"failed to request reset_n io\\n")
(114,NFC_PROTO_ISO14443_B_MASK)
(115,config)
(116,priv->config)
(117,NFC_PROTO_ISO14443_MASK\n\\n\\t\\t| NFC_PROTO_ISO14443_B_MASK\n\\n\\t\\t| NFC_PROTO_ISO15693_MASK\n\\n\\t\\t| NFC_PROTO_NFC_DEP_MASK)
(118,"nfcmrvl_reset_n")
(119,protocols = NFC_PROTO_JEWEL_MASK\n\\n\\t\\t| NFC_PROTO_MIFARE_MASK\n\\n\\t\\t| NFC_PROTO_FELICA_MASK\n\\n\\t\\t| NFC_PROTO_ISO14443_MASK\n\\n\\t\\t| NFC_PROTO_ISO14443_B_MASK\n\\n\\t\\t| NFC_PROTO_ISO15693_MASK\n\\n\\t\\t| NFC_PROTO_NFC_DEP_MASK)
(120,priv)
(121,priv->config.reset_n_io)
(122,priv->config.reset_n_io)
(123,rc)
(124,priv)
(125,ndev)
(126,GPIOF_OUT_INIT_LOW)
(127,reset_n_io)
(128,priv)
(129,config)
(130,reset_n_io)
(131,NFC_PROTO_MIFARE_MASK)
(132,dev)
(133,)
(134,rc)
(135,rc = nfcmrvl_fw_dnld_init(priv)
(136,tailroom = 0)
(137,protocols)
(138,dev)
(139,rc)
(140,nci_free_device(priv->ndev)
(141,priv->dev)
(142,NFC_PROTO_JEWEL_MASK\n\\n\\t\\t| NFC_PROTO_MIFARE_MASK\n\\n\\t\\t| NFC_PROTO_FELICA_MASK\n\\n\\t\\t| NFC_PROTO_ISO14443_MASK\n\\n\\t\\t| NFC_PROTO_ISO14443_B_MASK\n\\n\\t\\t| NFC_PROTO_ISO15693_MASK\n\\n\\t\\t| NFC_PROTO_NFC_DEP_MASK)
(143,ndev)
(144,priv)
(145,struct device *dev)
(146,)
(147,priv)
(148,priv)
(149,dev)
(150,NFCMRVL_HCI_EVENT_HEADER_SIZE)
(151,if (rc)
(152,priv->ndev)
(153,sizeof(*pdata)
(154,priv)
(155,headroom = tailroom = 0)
(156,goto error_free_gpio;)
(157,enum nfcmrvl_phy phy)
(158,phy)
(159,priv)
(160,NFC_PROTO_ISO15693_MASK\n\\n\\t\\t| NFC_PROTO_NFC_DEP_MASK)
(161,if (priv->config.reset_n_io)
(162,headroom)
(163,priv)
(164,if (priv->config.reset_n_io)
(165,nfcmrvl_chip_halt(priv)
(166,priv->drv_data)
(167,rc)
(168,if (rc < 0)
(169,0)
(170,0)
(171,hci_muxed)
(172,0)
(173,ndev)
(174,NCI_SPI_HDR_LEN)
(175,goto error_free_dev;)
(176,NFC_PROTO_NFC_DEP_MASK)
(177,priv->dev = dev)
(178,return ERR_PTR(-ENOMEM)
(179,priv->ndev)
(180,nci_set_drvdata(priv->ndev, priv)
(181,protocols)
(182,NFCMRVL_PHY_SPI)
(183,priv->phy = phy)
(184,nfc_info(dev, "registered with nci successfully\\n")
(185,headroom)
(186,rc = -ENOMEM)
(187,priv = kzalloc(sizeof(*priv)
(188,config)
(189,nfc_err(dev, "nci_allocate_device failed\\n")
(190,)
(191,if_ops)
(192,return ERR_PTR(rc)
(193,ndev)
(194,priv->config.reset_n_io)
(195,ndev)
(196,config)
(197,return priv;)
(198,void *drv_data)
(199,gpio_free(priv->config.reset_n_io)
(200,phy)
(201,pdata)
(202,!priv)
(203,priv)
(204,priv)
(205,headroom)
(206,protocols)
(207,nfcmrvl_nci_ops)
(208,goto error_free_dev;)
(209,priv)
(210,reset_n_io)
(211,priv->ndev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^