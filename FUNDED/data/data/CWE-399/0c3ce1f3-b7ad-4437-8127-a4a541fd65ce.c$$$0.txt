-----label-----
1
-----code-----
static int dove_thermal_probe(struct platform_device *pdev)
{
	struct thermal_zone_device *thermal = NULL;
	struct dove_thermal_priv *priv;
	struct resource *res;
	int ret;

	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
	if (!res) {
		dev_err(&pdev->dev, "Failed to get platform resource\n");
		return -ENODEV;
	}

	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
	if (!priv)
		return -ENOMEM;

	priv->sensor = devm_request_and_ioremap(&pdev->dev, res);
	if (!priv->sensor) {
		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");
		return -EADDRNOTAVAIL;
	}

	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
	if (!res) {
		dev_err(&pdev->dev, "Failed to get platform resource\n");
		return -ENODEV;
	}
	priv->control = devm_request_and_ioremap(&pdev->dev, res);
	if (!priv->control) {
		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");
		return -EADDRNOTAVAIL;
	}

	ret = dove_init_sensor(priv);
	if (ret) {
		dev_err(&pdev->dev, "Failed to initialize sensor\n");
		return ret;
	}

	thermal = thermal_zone_device_register("dove_thermal", 0, 0,
					       priv, &ops, NULL, 0, 0);
	if (IS_ERR(thermal)) {
		dev_err(&pdev->dev,
			"Failed to register thermal zone device\n");
		return PTR_ERR(thermal);
	}

	platform_set_drvdata(pdev, thermal);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
22,23
23,24
23,25
24,25
26,27
26,28
29,30
30,31
30,32
31,32
33,34
33,35
36,37
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
45,48
45,49
46,47
48,49
50,51
53,54
53,55
54,55
55,56
57,58
57,59
58,59
59,60
59,61
59,62
60,61
62,63
63,64
63,65
64,65
68,69
69,70
70,71
72,73
73,74
73,75
74,75
76,77
76,78
76,79
76,80
77,78
79,80
80,81
80,82
81,82
84,85
85,86
86,87
87,88
89,90
91,92
91,93
92,93
93,94
95,96
96,97
97,98
99,100
100,101
100,102
101,102
101,103
102,103
105,106
105,107
105,108
106,107
108,109
109,110
109,111
110,111
113,114
115,116
115,117
116,117
117,118
117,119
118,119
121,122
121,123
122,123
123,124
123,125
123,126
124,125
126,127
127,128
127,129
128,129
132,133
133,134
134,135
136,137
137,138
137,139
138,139
140,141
140,142
140,143
140,144
141,142
143,144
145,146
148,149
148,150
149,150
150,151
152,153
152,154
153,154
154,155
154,156
154,157
155,156
157,158
158,159
158,160
159,160
163,164
164,165
165,166
167,168
168,169
168,170
169,170
169,171
170,171
173,174
173,175
173,176
174,175
176,177
177,178
177,179
178,179
181,182
183,184
183,185
184,185
185,186
185,187
186,187
189,190
189,191
190,191
191,192
191,193
191,194
192,193
194,195
195,196
195,197
196,197
200,201
201,202
202,203
204,205
205,206
205,207
206,207
208,209
208,210
209,210
211,212
213,214
213,215
214,215
216,217
216,218
217,218
218,219
218,220
218,221
219,220
221,222
222,223
222,224
223,224
227,228
228,229
230,231
231,232
231,233
232,233
234,235
234,236
234,237
234,238
234,239
234,240
234,241
234,242
234,243
235,236
240,241
242,243
243,244
245,246
249,250
249,251
250,251
250,252
251,252
253,254
255,256
255,257
256,257
257,258
257,259
257,260
258,259
260,261
261,262
261,263
262,263
266,267
267,268
267,269
268,269
270,271
272,273
273,274
273,275
273,276
274,275
276,277
278,279
280,281
-----nextToken-----
2,4,7,9,10,15,17,18,21,25,27,28,32,34,35,38,40,44,47,49,51,52,56,61,65,66,67,71,75,78,82,83,88,90,94,98,103,104,107,111,112,114,119,120,125,129,130,131,135,139,142,144,146,147,151,156,160,161,162,166,171,172,175,179,180,182,187,188,193,197,198,199,203,207,210,212,215,220,224,225,226,229,233,236,237,238,239,241,244,246,247,248,252,254,259,263,264,265,269,271,275,277,279,281
-----computeFrom-----
42,43
42,44
73,74
73,75
100,101
100,102
137,138
137,139
168,169
168,170
205,206
205,207
231,232
231,233
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int dove_thermal_probe(struct platform_device *pdev){	struct thermal_zone_device *thermal = NULL;	struct dove_thermal_priv *priv;	struct resource *res;	int ret;	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);	if (!res) {		dev_err(&pdev->dev, "Failed to get platform resource\n");		return -ENODEV;	}	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);	if (!priv)		return -ENOMEM;	priv->sensor = devm_request_and_ioremap(&pdev->dev, res);	if (!priv->sensor) {		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");		return -EADDRNOTAVAIL;	}	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);	if (!res) {		dev_err(&pdev->dev, "Failed to get platform resource\n");		return -ENODEV;	}	priv->control = devm_request_and_ioremap(&pdev->dev, res);	if (!priv->control) {		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");		return -EADDRNOTAVAIL;	}	ret = dove_init_sensor(priv);	if (ret) {		dev_err(&pdev->dev, "Failed to initialize sensor\n");		return ret;	}	thermal = thermal_zone_device_register("dove_thermal", 0, 0,					       priv, &ops, NULL, 0, 0);	if (IS_ERR(thermal)) {		dev_err(&pdev->dev,			"Failed to register thermal zone device\n");		return PTR_ERR(thermal);	}	platform_set_drvdata(pdev, thermal);	return 0;}
static int
dove_thermal_probe(struct platform_device *pdev)
dove_thermal_probe
struct platform_device *pdev
struct platform_device
platform_device
*pdev
*
pdev
{	struct thermal_zone_device *thermal = NULL;	struct dove_thermal_priv *priv;	struct resource *res;	int ret;	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);	if (!res) {		dev_err(&pdev->dev, "Failed to get platform resource\n");		return -ENODEV;	}	priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);	if (!priv)		return -ENOMEM;	priv->sensor = devm_request_and_ioremap(&pdev->dev, res);	if (!priv->sensor) {		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");		return -EADDRNOTAVAIL;	}	res = platform_get_resource(pdev, IORESOURCE_MEM, 1);	if (!res) {		dev_err(&pdev->dev, "Failed to get platform resource\n");		return -ENODEV;	}	priv->control = devm_request_and_ioremap(&pdev->dev, res);	if (!priv->control) {		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");		return -EADDRNOTAVAIL;	}	ret = dove_init_sensor(priv);	if (ret) {		dev_err(&pdev->dev, "Failed to initialize sensor\n");		return ret;	}	thermal = thermal_zone_device_register("dove_thermal", 0, 0,					       priv, &ops, NULL, 0, 0);	if (IS_ERR(thermal)) {		dev_err(&pdev->dev,			"Failed to register thermal zone device\n");		return PTR_ERR(thermal);	}	platform_set_drvdata(pdev, thermal);	return 0;}
struct thermal_zone_device *thermal = NULL;
struct thermal_zone_device *thermal = NULL;
struct thermal_zone_device
thermal_zone_device
*thermal = NULL
*
thermal
= NULL
NULL
NULL
struct dove_thermal_priv *priv;
struct dove_thermal_priv *priv;
struct dove_thermal_priv
dove_thermal_priv
*priv
*
priv
struct resource *res;
struct resource *res;
struct resource
resource
*res
*
res
int ret;
int ret;
int
ret
ret
res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
res = platform_get_resource(pdev, IORESOURCE_MEM, 0)
res
res
platform_get_resource(pdev, IORESOURCE_MEM, 0)
platform_get_resource
platform_get_resource
pdev
pdev
IORESOURCE_MEM
IORESOURCE_MEM
0
if (!res) {		dev_err(&pdev->dev, "Failed to get platform resource\n");		return -ENODEV;	}
!res
res
res
{		dev_err(&pdev->dev, "Failed to get platform resource\n");		return -ENODEV;	}
dev_err(&pdev->dev, "Failed to get platform resource\n");
dev_err(&pdev->dev, "Failed to get platform resource\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Failed to get platform resource\n"
return -ENODEV;
-ENODEV
ENODEV
ENODEV
priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL);
priv = devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL)
priv
priv
devm_kzalloc(&pdev->dev, sizeof(*priv), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&pdev->dev
pdev->dev
pdev
pdev
dev
sizeof(*priv)
(*priv)
*priv
priv
priv
GFP_KERNEL
GFP_KERNEL
if (!priv)		return -ENOMEM;
!priv
priv
priv
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
priv->sensor = devm_request_and_ioremap(&pdev->dev, res);
priv->sensor = devm_request_and_ioremap(&pdev->dev, res)
priv->sensor
priv
priv
sensor
devm_request_and_ioremap(&pdev->dev, res)
devm_request_and_ioremap
devm_request_and_ioremap
&pdev->dev
pdev->dev
pdev
pdev
dev
res
res
if (!priv->sensor) {		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");		return -EADDRNOTAVAIL;	}
!priv->sensor
priv->sensor
priv
priv
sensor
{		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");		return -EADDRNOTAVAIL;	}
dev_err(&pdev->dev, "Failed to request_ioremap memory\n");
dev_err(&pdev->dev, "Failed to request_ioremap memory\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Failed to request_ioremap memory\n"
return -EADDRNOTAVAIL;
-EADDRNOTAVAIL
EADDRNOTAVAIL
EADDRNOTAVAIL
res = platform_get_resource(pdev, IORESOURCE_MEM, 1);
res = platform_get_resource(pdev, IORESOURCE_MEM, 1)
res
res
platform_get_resource(pdev, IORESOURCE_MEM, 1)
platform_get_resource
platform_get_resource
pdev
pdev
IORESOURCE_MEM
IORESOURCE_MEM
1
if (!res) {		dev_err(&pdev->dev, "Failed to get platform resource\n");		return -ENODEV;	}
!res
res
res
{		dev_err(&pdev->dev, "Failed to get platform resource\n");		return -ENODEV;	}
dev_err(&pdev->dev, "Failed to get platform resource\n");
dev_err(&pdev->dev, "Failed to get platform resource\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Failed to get platform resource\n"
return -ENODEV;
-ENODEV
ENODEV
ENODEV
priv->control = devm_request_and_ioremap(&pdev->dev, res);
priv->control = devm_request_and_ioremap(&pdev->dev, res)
priv->control
priv
priv
control
devm_request_and_ioremap(&pdev->dev, res)
devm_request_and_ioremap
devm_request_and_ioremap
&pdev->dev
pdev->dev
pdev
pdev
dev
res
res
if (!priv->control) {		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");		return -EADDRNOTAVAIL;	}
!priv->control
priv->control
priv
priv
control
{		dev_err(&pdev->dev, "Failed to request_ioremap memory\n");		return -EADDRNOTAVAIL;	}
dev_err(&pdev->dev, "Failed to request_ioremap memory\n");
dev_err(&pdev->dev, "Failed to request_ioremap memory\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Failed to request_ioremap memory\n"
return -EADDRNOTAVAIL;
-EADDRNOTAVAIL
EADDRNOTAVAIL
EADDRNOTAVAIL
ret = dove_init_sensor(priv);
ret = dove_init_sensor(priv)
ret
ret
dove_init_sensor(priv)
dove_init_sensor
dove_init_sensor
priv
priv
if (ret) {		dev_err(&pdev->dev, "Failed to initialize sensor\n");		return ret;	}
ret
ret
{		dev_err(&pdev->dev, "Failed to initialize sensor\n");		return ret;	}
dev_err(&pdev->dev, "Failed to initialize sensor\n");
dev_err(&pdev->dev, "Failed to initialize sensor\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Failed to initialize sensor\n"
return ret;
ret
ret
thermal = thermal_zone_device_register("dove_thermal", 0, 0,					       priv, &ops, NULL, 0, 0);
thermal = thermal_zone_device_register("dove_thermal", 0, 0,					       priv, &ops, NULL, 0, 0)
thermal
thermal
thermal_zone_device_register("dove_thermal", 0, 0,					       priv, &ops, NULL, 0, 0)
thermal_zone_device_register
thermal_zone_device_register
"dove_thermal"
0
0
priv
priv
&ops
ops
ops
NULL
NULL
0
0
if (IS_ERR(thermal)) {		dev_err(&pdev->dev,			"Failed to register thermal zone device\n");		return PTR_ERR(thermal);	}
IS_ERR(thermal)
IS_ERR
IS_ERR
thermal
thermal
{		dev_err(&pdev->dev,			"Failed to register thermal zone device\n");		return PTR_ERR(thermal);	}
dev_err(&pdev->dev,			"Failed to register thermal zone device\n");
dev_err(&pdev->dev,			"Failed to register thermal zone device\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Failed to register thermal zone device\n"
return PTR_ERR(thermal);
PTR_ERR(thermal)
PTR_ERR
PTR_ERR
thermal
thermal
platform_set_drvdata(pdev, thermal);
platform_set_drvdata(pdev, thermal)
platform_set_drvdata
platform_set_drvdata
pdev
pdev
thermal
thermal
return 0;
0
-----joern-----
(96,33,0)
(102,130,0)
(101,150,0)
(77,142,0)
(36,85,0)
(93,39,0)
(5,1,0)
(48,150,0)
(43,142,0)
(93,11,0)
(149,11,0)
(55,14,0)
(3,149,0)
(44,32,0)
(82,122,0)
(131,6,0)
(50,137,0)
(127,153,0)
(52,136,0)
(129,102,0)
(46,137,0)
(103,149,0)
(135,108,0)
(59,83,0)
(65,132,0)
(54,4,0)
(77,78,0)
(53,62,0)
(123,17,0)
(134,55,0)
(12,105,0)
(143,140,0)
(134,62,0)
(31,154,0)
(80,130,0)
(5,53,0)
(147,150,0)
(59,11,0)
(132,130,0)
(5,105,0)
(116,153,0)
(41,154,0)
(5,127,0)
(53,87,0)
(124,44,0)
(21,154,0)
(19,102,0)
(137,19,0)
(146,64,0)
(125,135,0)
(79,109,0)
(157,116,0)
(119,136,0)
(5,6,0)
(17,150,0)
(81,151,0)
(83,59,0)
(60,128,0)
(64,119,0)
(71,121,0)
(112,67,0)
(20,17,0)
(40,150,0)
(57,62,0)
(0,59,0)
(2,74,0)
(48,154,0)
(95,59,0)
(76,108,0)
(143,130,0)
(24,150,0)
(138,132,0)
(39,2,0)
(106,139,0)
(83,61,0)
(107,32,0)
(78,77,0)
(116,70,0)
(154,130,0)
(23,154,0)
(142,77,0)
(78,67,0)
(3,156,0)
(112,140,0)
(92,55,0)
(8,11,0)
(90,33,0)
(73,150,0)
(51,52,0)
(140,150,0)
(149,3,0)
(54,100,0)
(86,48,0)
(17,11,0)
(56,154,0)
(137,11,0)
(114,156,0)
(113,55,0)
(155,130,0)
(110,124,0)
(30,150,0)
(33,90,0)
(132,65,0)
(130,102,0)
(58,135,0)
(104,32,0)
(6,100,0)
(119,64,0)
(118,146,0)
(6,55,0)
(15,108,0)
(134,150,0)
(135,11,0)
(26,134,0)
(115,12,0)
(154,31,0)
(14,61,0)
(130,150,0)
(70,116,0)
(91,150,0)
(105,62,0)
(140,143,0)
(32,44,0)
(89,44,0)
(97,128,0)
(111,140,0)
(146,11,0)
(7,135,0)
(102,19,0)
(85,70,0)
(117,8,0)
(127,55,0)
(98,154,0)
(122,4,0)
(8,148,0)
(18,151,0)
(89,147,0)
(42,76,0)
(108,150,0)
(62,147,0)
(19,137,0)
(61,108,0)
(122,11,0)
(25,132,0)
(5,134,0)
(5,112,0)
(4,54,0)
(85,11,0)
(14,150,0)
(47,150,0)
(90,102,0)
(32,11,0)
(49,143,0)
(4,122,0)
(2,39,0)
(144,31,0)
(61,83,0)
(154,48,0)
(151,130,0)
(28,48,0)
(128,150,0)
(158,151,0)
(62,130,0)
(10,154,0)
(9,149,0)
(61,14,0)
(127,62,0)
(13,54,0)
(133,2,0)
(39,93,0)
(147,89,0)
(35,93,0)
(86,127,0)
(148,8,0)
(16,146,0)
(44,150,0)
(45,142,0)
(17,48,0)
(22,155,0)
(151,81,0)
(63,93,0)
(152,8,0)
(109,53,0)
(126,32,0)
(66,62,0)
(5,52,0)
(37,85,0)
(139,1,0)
(102,90,0)
(75,154,0)
(64,146,0)
(108,135,0)
(141,150,0)
(159,89,0)
(38,150,0)
(70,85,0)
(121,48,0)
(151,147,0)
(72,51,0)
(94,78,0)
(156,3,0)
(55,130,0)
(27,131,0)
(156,87,0)
(89,148,0)
(145,112,0)
(99,86,0)
(68,44,0)
(84,150,0)
(132,14,0)
(142,11,0)
(120,119,0)
(148,89,0)
(34,61,0)
(6,62,0)
(88,150,0)
(29,122,0)
(105,74,0)
(135,125,1)
(17,48,1)
(155,22,1)
(122,29,1)
(55,130,1)
(86,48,1)
(61,83,1)
(122,11,1)
(8,11,1)
(134,62,1)
(12,115,1)
(5,6,1)
(5,52,1)
(92,76,1)
(35,63,1)
(20,121,1)
(135,11,1)
(49,111,1)
(82,65,1)
(53,109,1)
(2,133,1)
(116,70,1)
(62,66,1)
(149,11,1)
(7,15,1)
(29,82,1)
(124,110,1)
(2,39,1)
(31,144,1)
(132,25,1)
(114,3,1)
(96,19,1)
(116,157,1)
(54,13,1)
(51,72,1)
(151,147,1)
(137,11,1)
(37,121,1)
(45,69,1)
(42,108,1)
(5,105,1)
(115,2,1)
(22,130,1)
(72,119,1)
(5,1,1)
(133,39,1)
(108,135,1)
(68,128,1)
(119,120,1)
(97,60,1)
(19,137,1)
(154,31,1)
(81,151,1)
(3,149,1)
(149,103,1)
(8,117,1)
(107,126,1)
(79,156,1)
(78,77,1)
(39,93,1)
(6,55,1)
(142,11,1)
(111,65,1)
(144,75,1)
(66,57,1)
(69,140,1)
(112,145,1)
(155,130,1)
(105,12,1)
(119,64,1)
(90,33,1)
(89,148,1)
(78,94,1)
(86,99,1)
(137,50,1)
(138,14,1)
(118,16,1)
(52,51,1)
(46,80,1)
(156,3,1)
(110,44,1)
(127,55,1)
(16,124,1)
(113,92,1)
(64,146,1)
(145,78,1)
(102,129,1)
(58,7,1)
(5,112,1)
(63,81,1)
(99,116,1)
(102,19,1)
(83,59,1)
(134,55,1)
(53,62,1)
(4,122,1)
(55,113,1)
(146,118,1)
(21,56,1)
(26,17,1)
(121,71,1)
(71,48,1)
(158,147,1)
(76,42,1)
(43,45,1)
(93,35,1)
(109,79,1)
(61,108,1)
(10,21,1)
(140,143,1)
(65,132,1)
(120,64,1)
(70,85,1)
(44,32,1)
(148,8,1)
(105,62,1)
(25,138,1)
(85,36,1)
(85,11,1)
(127,86,1)
(124,44,1)
(76,108,1)
(36,37,1)
(9,76,1)
(48,154,1)
(106,155,1)
(125,58,1)
(28,69,1)
(56,28,1)
(34,83,1)
(98,31,1)
(50,46,1)
(59,11,1)
(121,48,1)
(54,4,1)
(75,10,1)
(159,148,1)
(152,62,1)
(89,44,1)
(104,107,1)
(147,89,1)
(94,77,1)
(32,104,1)
(143,49,1)
(132,14,1)
(5,134,1)
(139,106,1)
(33,96,1)
(23,41,1)
(102,90,1)
(17,123,1)
(151,130,1)
(18,158,1)
(61,34,1)
(5,127,1)
(154,130,1)
(77,142,1)
(13,4,1)
(93,11,1)
(156,114,1)
(127,62,1)
(131,27,1)
(62,130,1)
(17,11,1)
(146,11,1)
(89,159,1)
(6,62,1)
(142,43,1)
(157,70,1)
(130,102,1)
(143,130,1)
(126,68,1)
(5,53,1)
(134,26,1)
(128,97,1)
(0,95,1)
(15,81,1)
(123,20,1)
(14,61,1)
(103,9,1)
(151,18,1)
(132,130,1)
(117,152,1)
(129,90,1)
(59,0,1)
(6,131,1)
(57,155,1)
(154,23,1)
(32,11,1)
(80,124,1)
(1,139,1)
(95,55,1)
(41,98,1)
(112,140,1)
(27,54,1)
(46,124,2)
(62,155,2)
(42,81,2)
(85,11,2)
(18,155,2)
(39,93,2)
(2,39,2)
(152,155,2)
(52,124,2)
(75,69,2)
(80,124,2)
(32,11,2)
(48,69,2)
(76,81,2)
(96,124,2)
(1,155,2)
(132,14,2)
(129,124,2)
(143,130,2)
(108,135,2)
(55,76,2)
(25,76,2)
(54,4,2)
(117,155,2)
(93,81,2)
(50,124,2)
(142,69,2)
(82,65,2)
(13,65,2)
(158,155,2)
(65,76,2)
(132,130,2)
(4,65,2)
(22,124,2)
(5,1,2)
(27,65,2)
(148,8,2)
(8,11,2)
(19,137,2)
(90,33,2)
(145,69,2)
(5,134,2)
(109,76,2)
(137,124,2)
(69,65,2)
(0,76,2)
(92,76,2)
(98,69,2)
(154,130,2)
(6,55,2)
(72,124,2)
(86,121,2)
(157,121,2)
(2,81,2)
(123,121,2)
(59,76,2)
(64,124,2)
(17,11,2)
(154,69,2)
(147,155,2)
(7,81,2)
(120,124,2)
(94,69,2)
(41,69,2)
(53,76,2)
(156,3,2)
(62,130,2)
(135,11,2)
(51,124,2)
(121,48,2)
(134,121,2)
(130,124,2)
(143,65,2)
(140,143,2)
(137,11,2)
(146,124,2)
(102,124,2)
(6,62,2)
(138,76,2)
(28,69,2)
(33,124,2)
(125,81,2)
(48,154,2)
(34,76,2)
(146,11,2)
(56,69,2)
(127,62,2)
(132,76,2)
(43,69,2)
(89,44,2)
(147,89,2)
(86,48,2)
(133,81,2)
(89,148,2)
(16,124,2)
(14,76,2)
(114,76,2)
(61,108,2)
(112,140,2)
(159,155,2)
(70,121,2)
(156,76,2)
(63,81,2)
(149,11,2)
(58,81,2)
(29,65,2)
(12,81,2)
(140,65,2)
(10,69,2)
(155,124,2)
(116,121,2)
(95,76,2)
(116,70,2)
(19,124,2)
(79,76,2)
(26,121,2)
(155,130,2)
(78,69,2)
(66,155,2)
(39,81,2)
(45,69,2)
(134,62,2)
(118,124,2)
(53,62,2)
(5,105,2)
(83,59,2)
(77,69,2)
(9,76,2)
(57,155,2)
(90,124,2)
(99,121,2)
(65,132,2)
(5,52,2)
(44,32,2)
(130,102,2)
(149,76,2)
(134,55,2)
(71,69,2)
(4,122,2)
(64,146,2)
(6,65,2)
(76,108,2)
(35,81,2)
(151,155,2)
(121,69,2)
(81,151,2)
(70,85,2)
(142,11,2)
(151,130,2)
(85,121,2)
(59,11,2)
(144,69,2)
(122,65,2)
(83,76,2)
(5,53,2)
(81,155,2)
(105,81,2)
(119,124,2)
(55,130,2)
(124,44,2)
(103,76,2)
(3,149,2)
(127,121,2)
(89,155,2)
(14,61,2)
(139,155,2)
(131,65,2)
(154,31,2)
(135,81,2)
(151,147,2)
(3,76,2)
(8,155,2)
(105,62,2)
(113,76,2)
(102,90,2)
(106,155,2)
(5,112,2)
(15,81,2)
(54,65,2)
(93,11,2)
(37,121,2)
(36,121,2)
(49,65,2)
(21,69,2)
(122,11,2)
(102,19,2)
(111,65,2)
(108,81,2)
(115,81,2)
(112,69,2)
(119,64,2)
(127,55,2)
(61,76,2)
(31,69,2)
(5,6,2)
(78,77,2)
(148,155,2)
(20,121,2)
(61,83,2)
(17,48,2)
(17,121,2)
(23,69,2)
(77,142,2)
(5,127,2)
-----------------------------------
(0,dev)
(1,return -ENOMEM;)
(2,dev_err(&pdev->dev, "Failed to request_ioremap memory\\n")
(3,&pdev->dev)
(4,&pdev->dev)
(5,RET)
(6,return -EADDRNOTAVAIL;)
(7,pdev)
(8,pdev->dev)
(9,pdev)
(10,0)
(11,struct platform_device *pdev)
(12,-EADDRNOTAVAIL)
(13,"Failed to request_ioremap memory\\n")
(14,priv->control = devm_request_and_ioremap(&pdev->dev, res)
(15,res)
(16,pdev)
(17,platform_set_drvdata(pdev, thermal)
(18,sensor)
(19,&pdev->dev)
(20,pdev)
(21,0)
(22,priv)
(23,0)
(24,priv)
(25,control)
(26,0)
(27,EADDRNOTAVAIL)
(28,thermal)
(29,dev)
(30,thermal)
(31,&ops)
(32,platform_get_resource(pdev, IORESOURCE_MEM, 0)
(33,*priv)
(34,res)
(35,dev)
(36,dev)
(37,pdev)
(38,ret)
(39,&pdev->dev)
(40,if (!priv)
(41,0)
(42,res)
(43,dev)
(44,res = platform_get_resource(pdev, IORESOURCE_MEM, 0)
(45,pdev)
(46,pdev)
(47,res)
(48,thermal = thermal_zone_device_register("dove_thermal", 0, 0,\n\\n\\t\\t\\t\\t\\t       priv, &ops, NULL, 0, 0)
(49,priv)
(50,dev)
(51,-ENODEV)
(52,return -ENODEV;)
(53,return -ENODEV;)
(54,dev_err(&pdev->dev, "Failed to request_ioremap memory\\n")
(55,priv->control)
(56,"dove_thermal")
(57,priv)
(58,IORESOURCE_MEM)
(59,pdev->dev)
(60,thermal)
(61,devm_request_and_ioremap(&pdev->dev, res)
(62,priv->sensor)
(63,pdev)
(64,&pdev->dev)
(65,!priv->control)
(66,sensor)
(67,)
(68,res)
(69,ret)
(70,&pdev->dev)
(71,thermal)
(72,ENODEV)
(73,if (!priv->sensor)
(74,)
(75,priv)
(76,!res)
(77,&pdev->dev)
(78,dev_err(&pdev->dev, "Failed to initialize sensor\\n")
(79,ENODEV)
(80,priv)
(81,!priv->sensor)
(82,pdev)
(83,&pdev->dev)
(84,if (!res)
(85,pdev->dev)
(86,PTR_ERR(thermal)
(87,)
(88,if (ret)
(89,devm_request_and_ioremap(&pdev->dev, res)
(90,sizeof(*priv)
(91,if (!priv->control)
(92,priv)
(93,pdev->dev)
(94,"Failed to initialize sensor\\n")
(95,pdev)
(96,priv)
(97,NULL)
(98,NULL)
(99,thermal)
(100,)
(101,if (IS_ERR(thermal)
(102,devm_kzalloc(&pdev->dev, sizeof(*priv)
(103,dev)
(104,0)
(105,return -EADDRNOTAVAIL;)
(106,ENOMEM)
(107,IORESOURCE_MEM)
(108,res = platform_get_resource(pdev, IORESOURCE_MEM, 1)
(109,-ENODEV)
(110,res)
(111,ret)
(112,return ret;)
(113,control)
(114,"Failed to get platform resource\\n")
(115,EADDRNOTAVAIL)
(116,dev_err(&pdev->dev,\n\\n\\t\\t\\t"Failed to register thermal zone device\\n")
(117,dev)
(118,dev)
(119,dev_err(&pdev->dev, "Failed to get platform resource\\n")
(120,"Failed to get platform resource\\n")
(121,IS_ERR(thermal)
(122,pdev->dev)
(123,thermal)
(124,!res)
(125,1)
(126,pdev)
(127,return PTR_ERR(thermal)
(128,*thermal = NULL)
(129,GFP_KERNEL)
(130,priv = devm_kzalloc(&pdev->dev, sizeof(*priv)
(131,-EADDRNOTAVAIL)
(132,priv->control)
(133,"Failed to request_ioremap memory\\n")
(134,return 0;)
(135,platform_get_resource(pdev, IORESOURCE_MEM, 1)
(136,)
(137,pdev->dev)
(138,priv)
(139,-ENOMEM)
(140,ret = dove_init_sensor(priv)
(141,if (!res)
(142,pdev->dev)
(143,dove_init_sensor(priv)
(144,ops)
(145,ret)
(146,pdev->dev)
(147,priv->sensor = devm_request_and_ioremap(&pdev->dev, res)
(148,&pdev->dev)
(149,pdev->dev)
(150,)
(151,priv->sensor)
(152,pdev)
(153,)
(154,thermal_zone_device_register("dove_thermal", 0, 0,\n\\n\\t\\t\\t\\t\\t       priv, &ops, NULL, 0, 0)
(155,!priv)
(156,dev_err(&pdev->dev, "Failed to get platform resource\\n")
(157,"Failed to register thermal zone device\\n")
(158,priv)
(159,res)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^