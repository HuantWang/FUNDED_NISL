-----label-----
1
-----code-----
int dev_pm_put_subsys_data(struct device *dev)
{
	struct pm_subsys_data *psd;
	int ret = 0;

	spin_lock_irq(&dev->power.lock);

	psd = dev_to_psd(dev);
	if (!psd) {
		ret = -EINVAL;
		goto out;
	}

	if (--psd->refcount == 0) {
		dev->power.subsys_data = NULL;
		kfree(psd);
		ret = 1;
	}

 out:
	spin_unlock_irq(&dev->power.lock);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
22,23
22,24
24,25
26,27
27,28
27,29
28,29
30,31
31,32
31,33
32,33
32,34
33,34
37,38
38,39
38,40
39,40
41,42
41,43
42,43
44,45
46,47
46,48
47,48
48,49
50,51
50,52
51,52
52,53
52,54
53,54
55,56
56,57
58,59
60,61
60,62
61,62
61,63
62,63
63,64
63,65
64,65
68,69
68,70
68,71
69,70
70,71
70,72
71,72
71,73
72,73
72,74
73,74
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
90,91
90,92
92,93
93,94
93,95
94,95
96,97
97,98
97,99
98,99
98,100
99,100
103,104
104,105
-----nextToken-----
2,4,7,9,10,15,17,18,21,23,25,29,34,35,36,40,43,45,49,54,57,59,65,66,67,74,75,76,78,82,84,88,89,91,95,100,101,102,105
-----computeFrom-----
38,39
38,40
52,53
52,54
61,62
61,63
70,71
70,72
86,87
86,88
-----guardedBy-----
65,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int dev_pm_put_subsys_data(struct device *dev){	struct pm_subsys_data *psd;	int ret = 0;	spin_lock_irq(&dev->power.lock);	psd = dev_to_psd(dev);	if (!psd) {		ret = -EINVAL;		goto out;	}	if (--psd->refcount == 0) {		dev->power.subsys_data = NULL;		kfree(psd);		ret = 1;	} out:	spin_unlock_irq(&dev->power.lock);	return ret;}
int
dev_pm_put_subsys_data(struct device *dev)
dev_pm_put_subsys_data
struct device *dev
struct device
device
*dev
*
dev
{	struct pm_subsys_data *psd;	int ret = 0;	spin_lock_irq(&dev->power.lock);	psd = dev_to_psd(dev);	if (!psd) {		ret = -EINVAL;		goto out;	}	if (--psd->refcount == 0) {		dev->power.subsys_data = NULL;		kfree(psd);		ret = 1;	} out:	spin_unlock_irq(&dev->power.lock);	return ret;}
struct pm_subsys_data *psd;
struct pm_subsys_data *psd;
struct pm_subsys_data
pm_subsys_data
*psd
*
psd
int ret = 0;
int ret = 0;
int
ret = 0
ret
= 0
0
spin_lock_irq(&dev->power.lock);
spin_lock_irq(&dev->power.lock)
spin_lock_irq
spin_lock_irq
&dev->power.lock
dev->power.lock
dev->power
dev
dev
power
lock
psd = dev_to_psd(dev);
psd = dev_to_psd(dev)
psd
psd
dev_to_psd(dev)
dev_to_psd
dev_to_psd
dev
dev
if (!psd) {		ret = -EINVAL;		goto out;	}
!psd
psd
psd
{		ret = -EINVAL;		goto out;	}
ret = -EINVAL;
ret = -EINVAL
ret
ret
-EINVAL
EINVAL
EINVAL
goto out;
out
if (--psd->refcount == 0) {		dev->power.subsys_data = NULL;		kfree(psd);		ret = 1;	}
--psd->refcount == 0
--psd->refcount
psd->refcount
psd
psd
refcount
0
{		dev->power.subsys_data = NULL;		kfree(psd);		ret = 1;	}
dev->power.subsys_data = NULL;
dev->power.subsys_data = NULL
dev->power.subsys_data
dev->power
dev
dev
power
subsys_data
NULL
NULL
kfree(psd);
kfree(psd)
kfree
kfree
psd
psd
ret = 1;
ret = 1
ret
ret
1
out:	spin_unlock_irq(&dev->power.lock);
out
spin_unlock_irq(&dev->power.lock);
spin_unlock_irq(&dev->power.lock)
spin_unlock_irq
spin_unlock_irq
&dev->power.lock
dev->power.lock
dev->power
dev
dev
power
lock
return ret;
ret
ret
-----joern-----
(52,44,0)
(48,30,0)
(55,16,0)
(6,10,0)
(54,2,0)
(27,43,0)
(19,16,0)
(57,22,0)
(38,2,0)
(10,44,0)
(28,25,0)
(2,11,0)
(18,46,0)
(41,6,0)
(14,11,0)
(8,49,0)
(25,13,0)
(4,6,0)
(51,20,0)
(1,19,0)
(56,17,0)
(23,51,0)
(49,18,0)
(9,48,0)
(11,2,0)
(19,22,0)
(46,18,0)
(15,27,0)
(48,47,0)
(54,13,0)
(21,54,0)
(50,44,0)
(17,2,0)
(53,49,0)
(16,55,0)
(43,27,0)
(39,47,0)
(35,48,0)
(55,44,0)
(27,24,0)
(37,43,0)
(47,48,0)
(45,12,0)
(22,19,0)
(40,44,0)
(26,24,0)
(20,30,0)
(2,44,0)
(52,39,0)
(12,13,0)
(18,49,0)
(11,30,0)
(22,30,0)
(34,44,0)
(3,22,0)
(6,12,0)
(49,2,0)
(0,20,0)
(7,47,0)
(20,51,0)
(6,27,0)
(6,44,0)
(42,12,0)
(33,10,0)
(51,25,0)
(36,10,0)
(31,44,0)
(5,44,0)
(47,39,0)
(16,19,0)
(32,46,0)
(39,52,0)
(29,20,0)
(19,1,1)
(23,20,1)
(29,0,1)
(7,48,1)
(42,45,1)
(11,14,1)
(17,56,1)
(57,26,1)
(41,6,1)
(6,4,1)
(28,51,1)
(54,21,1)
(2,11,1)
(6,27,1)
(11,30,1)
(20,30,1)
(51,23,1)
(1,22,1)
(49,53,1)
(57,46,1)
(25,28,1)
(48,30,1)
(15,17,1)
(19,22,1)
(27,43,1)
(6,12,1)
(47,48,1)
(55,16,1)
(16,19,1)
(53,8,1)
(39,47,1)
(46,18,1)
(21,25,1)
(35,9,1)
(22,3,1)
(47,7,1)
(0,46,1)
(45,54,1)
(12,42,1)
(38,52,1)
(8,17,1)
(20,29,1)
(49,2,1)
(26,27,1)
(9,10,1)
(51,20,1)
(3,57,1)
(57,12,1)
(54,2,1)
(10,33,1)
(32,18,1)
(33,36,1)
(52,39,1)
(6,10,1)
(17,2,1)
(22,30,1)
(14,38,1)
(37,15,1)
(56,2,1)
(18,49,1)
(46,32,1)
(43,37,1)
(48,35,1)
(4,55,1)
(49,17,2)
(20,46,2)
(27,43,2)
(25,46,2)
(6,12,2)
(46,17,2)
(49,2,2)
(51,46,2)
(18,49,2)
(47,48,2)
(51,20,2)
(41,6,2)
(12,46,2)
(11,30,2)
(42,46,2)
(46,18,2)
(53,17,2)
(22,30,2)
(27,17,2)
(19,22,2)
(21,46,2)
(8,17,2)
(26,17,2)
(32,17,2)
(45,46,2)
(0,46,2)
(2,11,2)
(15,17,2)
(48,30,2)
(28,46,2)
(6,27,2)
(18,17,2)
(43,17,2)
(23,46,2)
(20,30,2)
(6,10,2)
(29,46,2)
(39,47,2)
(16,19,2)
(17,2,2)
(54,46,2)
(52,39,2)
(37,17,2)
(54,2,2)
(55,16,2)
-----------------------------------
(0,dev)
(1,lock)
(2,psd = dev_to_psd(dev)
(3,power)
(4,ret)
(5,ret)
(6,return ret;)
(7,lock)
(8,psd)
(9,dev)
(10,ret = 0)
(11,dev_to_psd(dev)
(12,ret = 1)
(13,)
(14,dev)
(15,ret)
(16,&dev->power.lock)
(17,!psd)
(18,--psd->refcount)
(19,dev->power.lock)
(20,dev->power)
(21,psd)
(22,dev->power)
(23,subsys_data)
(24,)
(25,dev->power.subsys_data = NULL)
(26,goto out;)
(27,ret = -EINVAL)
(28,NULL)
(29,power)
(30,struct device *dev)
(31,if (--psd->refcount == 0)
(32,0)
(33,0)
(34,out:)
(35,power)
(36,ret)
(37,EINVAL)
(38,psd)
(39,&dev->power.lock)
(40,if (!psd)
(41,RET)
(42,1)
(43,-EINVAL)
(44,)
(45,ret)
(46,--psd->refcount == 0)
(47,dev->power.lock)
(48,dev->power)
(49,psd->refcount)
(50,psd)
(51,dev->power.subsys_data)
(52,spin_lock_irq(&dev->power.lock)
(53,refcount)
(54,kfree(psd)
(55,spin_unlock_irq(&dev->power.lock)
(56,psd)
(57,dev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^