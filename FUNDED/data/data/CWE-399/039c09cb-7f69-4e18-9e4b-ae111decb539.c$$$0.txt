-----label-----
1
-----code-----
static acpi_status acpi_bus_device_attach(acpi_handle handle, u32 lvl_not_used,
					  void *not_used, void **ret_not_used)
{
	struct acpi_device *device;
	unsigned long long sta_not_used;
	int ret;

	/*
	 * Ignore errors ignored by acpi_bus_check_add() to avoid terminating
	 * namespace walks prematurely.
	 */
	if (acpi_bus_type_and_status(handle, &ret, &sta_not_used))
		return AE_OK;

	if (acpi_bus_get_device(handle, &device))
		return AE_CTRL_DEPTH;

	ret = acpi_scan_attach_handler(device);
	if (ret)
		return ret > 0 ? AE_OK : AE_CTRL_DEPTH;

	ret = device_attach(&device->dev);
	return ret >= 0 ? AE_OK : AE_CTRL_DEPTH;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
6,7
6,8
7,8
9,10
11,12
11,13
12,13
14,15
16,17
16,18
18,19
18,20
21,22
21,23
23,24
23,25
23,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
38,39
40,41
41,42
41,43
43,44
45,46
45,47
46,47
46,48
46,49
46,50
47,48
49,50
51,52
52,53
54,55
55,56
57,58
58,59
60,61
60,62
61,62
61,63
61,64
62,63
64,65
66,67
67,68
69,70
70,71
72,73
73,74
73,75
74,75
76,77
76,78
77,78
79,80
81,82
81,83
82,83
84,85
85,86
85,87
85,88
86,87
86,88
87,88
90,91
92,93
94,95
95,96
95,97
96,97
98,99
98,100
99,100
101,102
102,103
102,104
103,104
106,107
107,108
107,109
107,110
108,109
108,110
109,110
112,113
114,115
-----nextToken-----
3,5,8,10,13,15,17,19,20,22,24,25,26,31,33,34,37,39,42,44,48,50,53,56,59,63,65,68,71,75,78,80,83,88,89,91,93,97,100,104,105,110,111,113,115
-----computeFrom-----
73,74
73,75
86,87
86,88
95,96
95,97
108,109
108,110
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;ConditionalExpression;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static acpi_status acpi_bus_device_attach(acpi_handle handle, u32 lvl_not_used,					  void *not_used, void **ret_not_used){	struct acpi_device *device;	unsigned long long sta_not_used;	int ret;	/*	 * Ignore errors ignored by acpi_bus_check_add() to avoid terminating	 * namespace walks prematurely.	 */	if (acpi_bus_type_and_status(handle, &ret, &sta_not_used))		return AE_OK;	if (acpi_bus_get_device(handle, &device))		return AE_CTRL_DEPTH;	ret = acpi_scan_attach_handler(device);	if (ret)		return ret > 0 ? AE_OK : AE_CTRL_DEPTH;	ret = device_attach(&device->dev);	return ret >= 0 ? AE_OK : AE_CTRL_DEPTH;}
static acpi_status
acpi_status
acpi_bus_device_attach(acpi_handle handle, u32 lvl_not_used,					  void *not_used, void **ret_not_used)
acpi_bus_device_attach
acpi_handle handle
acpi_handle
acpi_handle
handle
handle
u32 lvl_not_used
u32
u32
lvl_not_used
lvl_not_used
void *not_used
void
*not_used
*
not_used
void **ret_not_used
void
**ret_not_used
*
*
ret_not_used
{	struct acpi_device *device;	unsigned long long sta_not_used;	int ret;	/*	 * Ignore errors ignored by acpi_bus_check_add() to avoid terminating	 * namespace walks prematurely.	 */	if (acpi_bus_type_and_status(handle, &ret, &sta_not_used))		return AE_OK;	if (acpi_bus_get_device(handle, &device))		return AE_CTRL_DEPTH;	ret = acpi_scan_attach_handler(device);	if (ret)		return ret > 0 ? AE_OK : AE_CTRL_DEPTH;	ret = device_attach(&device->dev);	return ret >= 0 ? AE_OK : AE_CTRL_DEPTH;}
struct acpi_device *device;
struct acpi_device *device;
struct acpi_device
acpi_device
*device
*
device
unsigned long long sta_not_used;
unsigned long long sta_not_used;
unsigned long long
sta_not_used
sta_not_used
int ret;
int ret;
int
ret
ret
if (acpi_bus_type_and_status(handle, &ret, &sta_not_used))		return AE_OK;
acpi_bus_type_and_status(handle, &ret, &sta_not_used)
acpi_bus_type_and_status
acpi_bus_type_and_status
handle
handle
&ret
ret
ret
&sta_not_used
sta_not_used
sta_not_used
return AE_OK;
AE_OK
AE_OK
if (acpi_bus_get_device(handle, &device))		return AE_CTRL_DEPTH;
acpi_bus_get_device(handle, &device)
acpi_bus_get_device
acpi_bus_get_device
handle
handle
&device
device
device
return AE_CTRL_DEPTH;
AE_CTRL_DEPTH
AE_CTRL_DEPTH
ret = acpi_scan_attach_handler(device);
ret = acpi_scan_attach_handler(device)
ret
ret
acpi_scan_attach_handler(device)
acpi_scan_attach_handler
acpi_scan_attach_handler
device
device
if (ret)		return ret > 0 ? AE_OK : AE_CTRL_DEPTH;
ret
ret
return ret > 0 ? AE_OK : AE_CTRL_DEPTH;
ret > 0 ? AE_OK : AE_CTRL_DEPTH
ret > 0
ret
ret
0
AE_OK
AE_OK
AE_CTRL_DEPTH
AE_CTRL_DEPTH
ret = device_attach(&device->dev);
ret = device_attach(&device->dev)
ret
ret
device_attach(&device->dev)
device_attach
device_attach
&device->dev
device->dev
device
device
dev
return ret >= 0 ? AE_OK : AE_CTRL_DEPTH;
ret >= 0 ? AE_OK : AE_CTRL_DEPTH
ret >= 0
ret
ret
0
AE_OK
AE_OK
AE_CTRL_DEPTH
AE_CTRL_DEPTH
-----joern-----
(20,27,0)
(42,48,0)
(16,38,0)
(25,26,0)
(13,2,0)
(24,45,0)
(48,2,0)
(30,33,0)
(7,18,0)
(3,15,0)
(12,5,0)
(45,38,0)
(37,6,0)
(0,12,0)
(7,5,0)
(22,38,0)
(40,19,0)
(35,18,0)
(15,1,0)
(46,2,0)
(31,23,0)
(26,19,0)
(45,24,0)
(2,12,0)
(15,14,0)
(18,7,0)
(9,19,0)
(8,24,0)
(14,15,0)
(41,38,0)
(19,27,0)
(43,38,0)
(44,38,0)
(28,29,0)
(32,14,0)
(20,29,0)
(17,33,0)
(39,17,0)
(20,23,0)
(47,26,0)
(12,38,0)
(2,48,0)
(21,48,0)
(5,7,0)
(33,17,0)
(6,33,0)
(33,6,0)
(5,12,0)
(34,18,0)
(36,38,0)
(11,45,0)
(19,26,0)
(4,38,0)
(48,22,0)
(33,1,0)
(20,22,0)
(26,45,0)
(47,10,1)
(8,11,1)
(19,26,1)
(48,42,1)
(48,21,1)
(39,30,1)
(15,14,1)
(23,31,1)
(13,12,1)
(10,45,1)
(5,7,1)
(20,27,1)
(31,33,1)
(33,17,1)
(21,2,1)
(20,22,1)
(37,17,1)
(34,35,1)
(12,5,1)
(33,6,1)
(29,28,1)
(6,37,1)
(18,34,1)
(15,1,1)
(32,3,1)
(45,24,1)
(19,9,1)
(40,26,1)
(9,26,1)
(26,45,1)
(25,47,1)
(17,39,1)
(2,46,1)
(20,29,1)
(0,10,1)
(42,2,1)
(3,33,1)
(33,1,1)
(14,32,1)
(26,25,1)
(11,15,1)
(2,12,1)
(24,8,1)
(28,15,1)
(35,0,1)
(20,23,1)
(27,19,1)
(19,40,1)
(48,2,1)
(22,48,1)
(7,18,1)
(46,13,1)
(26,10,2)
(46,10,2)
(45,15,2)
(20,27,2)
(7,10,2)
(14,33,2)
(33,17,2)
(2,10,2)
(20,29,2)
(15,14,2)
(7,18,2)
(12,10,2)
(21,2,2)
(27,10,2)
(42,2,2)
(34,10,2)
(29,15,2)
(31,33,2)
(28,15,2)
(9,26,2)
(15,33,2)
(3,33,2)
(48,10,2)
(19,10,2)
(25,10,2)
(48,2,2)
(5,10,2)
(33,6,2)
(13,10,2)
(12,5,2)
(20,22,2)
(8,15,2)
(5,7,2)
(40,26,2)
(0,10,2)
(2,12,2)
(32,33,2)
(11,15,2)
(24,15,2)
(33,1,2)
(15,1,2)
(22,10,2)
(18,10,2)
(10,15,2)
(35,10,2)
(23,33,2)
(45,24,2)
(20,23,2)
(19,26,2)
(47,10,2)
(26,45,2)
-----------------------------------
(0,ret)
(1,acpi_handle handle)
(2,ret >= 0)
(3,handle)
(4,ret)
(5,device_attach(&device->dev)
(6,&sta_not_used)
(7,&device->dev)
(8,device)
(9,AE_CTRL_DEPTH)
(10,ret)
(11,ret)
(12,ret = device_attach(&device->dev)
(13,ret)
(14,&device)
(15,acpi_bus_get_device(handle, &device)
(16,if (acpi_bus_get_device(handle, &device)
(17,&ret)
(18,device->dev)
(19,ret > 0 ? AE_OK : AE_CTRL_DEPTH)
(20,RET)
(21,AE_CTRL_DEPTH)
(22,return ret >= 0 ? AE_OK : AE_CTRL_DEPTH;)
(23,return AE_OK;)
(24,acpi_scan_attach_handler(device)
(25,0)
(26,ret > 0)
(27,return ret > 0 ? AE_OK : AE_CTRL_DEPTH;)
(28,AE_CTRL_DEPTH)
(29,return AE_CTRL_DEPTH;)
(30,handle)
(31,AE_OK)
(32,device)
(33,acpi_bus_type_and_status(handle, &ret, &sta_not_used)
(34,dev)
(35,device)
(36,if (ret)
(37,sta_not_used)
(38,)
(39,ret)
(40,AE_OK)
(41,if (acpi_bus_type_and_status(handle, &ret, &sta_not_used)
(42,AE_OK)
(43,sta_not_used)
(44,device)
(45,ret = acpi_scan_attach_handler(device)
(46,0)
(47,ret)
(48,ret >= 0 ? AE_OK : AE_CTRL_DEPTH)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^