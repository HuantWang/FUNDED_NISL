-----label-----
0
-----code-----
VOS_STATUS
WLANBAP_STAPktPending 
( 
  ptBtampHandle  btampHandle,  /* Used by BAP to identify the app context and VOSS ctx (!?) */ 
  v_U8_t         phy_link_handle,  /* Used by BAP to indentify the WLAN assoc. (StaId) */
  WLANTL_ACEnumType ucAc   /* This is the first instance of a TL type in bapApi.h */
)
{
    VOS_STATUS     vosStatus; 
    ptBtampContext pBtampCtx = (ptBtampContext) btampHandle; 
    v_PVOID_t      pvosGCtx;
    v_U8_t         ucSTAId;  /* The StaId (used by TL, PE, and HAL) */
    v_PVOID_t      pHddHdl; /* Handle to return BSL context in */

  
#ifdef BAP_DEBUG
    /* Trace the tBtampCtx being passed in. */
    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO_HIGH,
              "WLAN BAP Context Monitor: pBtampCtx value = %p in %s:%d", pBtampCtx, __func__, __LINE__ );
#endif //BAP_DEBUG

    /*------------------------------------------------------------------------
      Sanity check params
     ------------------------------------------------------------------------*/
    if ( NULL == pBtampCtx) 
    {
        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                "Invalid BAP handle value in WLANBAP_STAPktPending"); 
        return VOS_STATUS_E_FAULT;
    }

    // Retrieve the VOSS context
    pvosGCtx = pBtampCtx->pvosGCtx;
 
    /* Lookup the StaId using the phy_link_handle and the BAP context */ 

    vosStatus = WLANBAP_GetStaIdFromLinkCtx ( 
            btampHandle,  /* btampHandle value in  */ 
            phy_link_handle,  /* phy_link_handle value in */
            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */
            &pHddHdl); /* Handle to return BSL context */
    if ( VOS_STATUS_SUCCESS != vosStatus ) 
    {
      VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,
                   "Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending");
      return VOS_STATUS_E_FAULT;
    }


    // Let TL know we have a packet to send...
    vosStatus = WLANTL_STAPktPending( 
            pvosGCtx,
            ucSTAId,
            ucAc);
    if ( VOS_STATUS_SUCCESS != vosStatus ) 
    {
        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,
                        "Tx: Packet rejected by TL in WLANBAP_STAPktPending");
        return vosStatus;
    }            
    pBtampCtx->dataPktPending = VOS_TRUE;//Indication for LinkSupervision module that data is pending 
    return VOS_STATUS_SUCCESS;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
6,7
6,8
7,8
9,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
35,37
36,37
36,38
37,38
40,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
76,77
77,78
79,80
80,81
80,82
81,82
83,84
83,85
84,85
87,88
88,89
88,90
89,90
91,92
91,93
91,94
91,95
91,96
92,93
94,95
96,97
98,99
99,100
101,102
102,103
104,105
104,106
105,106
105,107
106,107
108,109
110,111
110,112
111,112
112,113
112,114
112,115
112,116
113,114
115,116
117,118
120,121
121,122
123,124
124,125
124,126
125,126
127,128
127,129
127,130
127,131
128,129
130,131
132,133
134,135
136,137
136,138
137,138
137,139
138,139
140,141
142,143
142,144
143,144
144,145
144,146
144,147
144,148
145,146
147,148
149,150
152,153
153,154
155,156
156,157
156,158
157,158
157,159
158,159
161,162
163,164
164,165
-----nextToken-----
3,5,8,10,13,15,18,20,25,27,31,33,38,39,41,45,47,51,53,57,59,63,65,70,72,74,75,78,82,85,86,90,93,95,97,100,103,107,109,114,116,118,119,122,126,129,131,133,135,139,141,146,148,150,151,154,159,160,162,165
-----computeFrom-----
61,62
61,63
80,81
80,82
88,89
88,90
105,106
105,107
124,125
124,126
137,138
137,139
156,157
156,158
-----guardedBy-----
141,154
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
VOS_STATUSWLANBAP_STAPktPending (   ptBtampHandle  btampHandle,  /* Used by BAP to identify the app context and VOSS ctx (!?) */   v_U8_t         phy_link_handle,  /* Used by BAP to indentify the WLAN assoc. (StaId) */  WLANTL_ACEnumType ucAc   /* This is the first instance of a TL type in bapApi.h */){    VOS_STATUS     vosStatus;     ptBtampContext pBtampCtx = (ptBtampContext) btampHandle;     v_PVOID_t      pvosGCtx;    v_U8_t         ucSTAId;  /* The StaId (used by TL, PE, and HAL) */    v_PVOID_t      pHddHdl; /* Handle to return BSL context in */  #ifdef BAP_DEBUG    /* Trace the tBtampCtx being passed in. */    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO_HIGH,              "WLAN BAP Context Monitor: pBtampCtx value = %p in %s:%d", pBtampCtx, __func__, __LINE__ );#endif //BAP_DEBUG    /*------------------------------------------------------------------------      Sanity check params     ------------------------------------------------------------------------*/    if ( NULL == pBtampCtx)     {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "Invalid BAP handle value in WLANBAP_STAPktPending");         return VOS_STATUS_E_FAULT;    }    // Retrieve the VOSS context    pvosGCtx = pBtampCtx->pvosGCtx;     /* Lookup the StaId using the phy_link_handle and the BAP context */     vosStatus = WLANBAP_GetStaIdFromLinkCtx (             btampHandle,  /* btampHandle value in  */             phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl); /* Handle to return BSL context */    if ( VOS_STATUS_SUCCESS != vosStatus )     {      VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                   "Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending");      return VOS_STATUS_E_FAULT;    }    // Let TL know we have a packet to send...    vosStatus = WLANTL_STAPktPending(             pvosGCtx,            ucSTAId,            ucAc);    if ( VOS_STATUS_SUCCESS != vosStatus )     {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                        "Tx: Packet rejected by TL in WLANBAP_STAPktPending");        return vosStatus;    }                pBtampCtx->dataPktPending = VOS_TRUE;//Indication for LinkSupervision module that data is pending     return VOS_STATUS_SUCCESS;}
VOS_STATUS
VOS_STATUS
WLANBAP_STAPktPending (   ptBtampHandle  btampHandle,  /* Used by BAP to identify the app context and VOSS ctx (!?) */   v_U8_t         phy_link_handle,  /* Used by BAP to indentify the WLAN assoc. (StaId) */  WLANTL_ACEnumType ucAc   /* This is the first instance of a TL type in bapApi.h */)
WLANBAP_STAPktPending
ptBtampHandle  btampHandle
ptBtampHandle
ptBtampHandle
btampHandle
btampHandle
v_U8_t         phy_link_handle
v_U8_t
v_U8_t
phy_link_handle
phy_link_handle
WLANTL_ACEnumType ucAc
WLANTL_ACEnumType
WLANTL_ACEnumType
ucAc
ucAc
{    VOS_STATUS     vosStatus;     ptBtampContext pBtampCtx = (ptBtampContext) btampHandle;     v_PVOID_t      pvosGCtx;    v_U8_t         ucSTAId;  /* The StaId (used by TL, PE, and HAL) */    v_PVOID_t      pHddHdl; /* Handle to return BSL context in */  #ifdef BAP_DEBUG    /* Trace the tBtampCtx being passed in. */    VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO_HIGH,              "WLAN BAP Context Monitor: pBtampCtx value = %p in %s:%d", pBtampCtx, __func__, __LINE__ );#endif //BAP_DEBUG    /*------------------------------------------------------------------------      Sanity check params     ------------------------------------------------------------------------*/    if ( NULL == pBtampCtx)     {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "Invalid BAP handle value in WLANBAP_STAPktPending");         return VOS_STATUS_E_FAULT;    }    // Retrieve the VOSS context    pvosGCtx = pBtampCtx->pvosGCtx;     /* Lookup the StaId using the phy_link_handle and the BAP context */     vosStatus = WLANBAP_GetStaIdFromLinkCtx (             btampHandle,  /* btampHandle value in  */             phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl); /* Handle to return BSL context */    if ( VOS_STATUS_SUCCESS != vosStatus )     {      VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                   "Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending");      return VOS_STATUS_E_FAULT;    }    // Let TL know we have a packet to send...    vosStatus = WLANTL_STAPktPending(             pvosGCtx,            ucSTAId,            ucAc);    if ( VOS_STATUS_SUCCESS != vosStatus )     {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                        "Tx: Packet rejected by TL in WLANBAP_STAPktPending");        return vosStatus;    }                pBtampCtx->dataPktPending = VOS_TRUE;//Indication for LinkSupervision module that data is pending     return VOS_STATUS_SUCCESS;}
VOS_STATUS     vosStatus;
VOS_STATUS     vosStatus;
VOS_STATUS
VOS_STATUS
vosStatus
vosStatus
ptBtampContext pBtampCtx = (ptBtampContext) btampHandle;
ptBtampContext pBtampCtx = (ptBtampContext) btampHandle;
ptBtampContext
ptBtampContext
pBtampCtx = (ptBtampContext) btampHandle
pBtampCtx
= (ptBtampContext) btampHandle
(ptBtampContext) btampHandle
ptBtampContext
ptBtampContext
ptBtampContext

btampHandle
btampHandle
v_PVOID_t      pvosGCtx;
v_PVOID_t      pvosGCtx;
v_PVOID_t
v_PVOID_t
pvosGCtx
pvosGCtx
v_U8_t         ucSTAId;
v_U8_t         ucSTAId;
v_U8_t
v_U8_t
ucSTAId
ucSTAId
v_PVOID_t      pHddHdl;
v_PVOID_t      pHddHdl;
v_PVOID_t
v_PVOID_t
pHddHdl
pHddHdl
if ( NULL == pBtampCtx)     {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "Invalid BAP handle value in WLANBAP_STAPktPending");         return VOS_STATUS_E_FAULT;    }
NULL == pBtampCtx
NULL
NULL
pBtampCtx
pBtampCtx
{        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "Invalid BAP handle value in WLANBAP_STAPktPending");         return VOS_STATUS_E_FAULT;    }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "Invalid BAP handle value in WLANBAP_STAPktPending");
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                "Invalid BAP handle value in WLANBAP_STAPktPending")
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"Invalid BAP handle value in WLANBAP_STAPktPending"
return VOS_STATUS_E_FAULT;
VOS_STATUS_E_FAULT
VOS_STATUS_E_FAULT
pvosGCtx = pBtampCtx->pvosGCtx;
pvosGCtx = pBtampCtx->pvosGCtx
pvosGCtx
pvosGCtx
pBtampCtx->pvosGCtx
pBtampCtx
pBtampCtx
pvosGCtx
vosStatus = WLANBAP_GetStaIdFromLinkCtx (             btampHandle,  /* btampHandle value in  */             phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl);
vosStatus = WLANBAP_GetStaIdFromLinkCtx (             btampHandle,  /* btampHandle value in  */             phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl)
vosStatus
vosStatus
WLANBAP_GetStaIdFromLinkCtx (             btampHandle,  /* btampHandle value in  */             phy_link_handle,  /* phy_link_handle value in */            &ucSTAId,  /* The StaId (used by TL, PE, and HAL) */            &pHddHdl)
WLANBAP_GetStaIdFromLinkCtx
WLANBAP_GetStaIdFromLinkCtx
btampHandle
btampHandle
phy_link_handle
phy_link_handle
&ucSTAId
ucSTAId
ucSTAId
&pHddHdl
pHddHdl
pHddHdl
if ( VOS_STATUS_SUCCESS != vosStatus )     {      VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                   "Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending");      return VOS_STATUS_E_FAULT;    }
VOS_STATUS_SUCCESS != vosStatus
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
vosStatus
vosStatus
{      VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                   "Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending");      return VOS_STATUS_E_FAULT;    }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                   "Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending");
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,                   "Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending")
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_INFO
VOS_TRACE_LEVEL_INFO
"Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending"
return VOS_STATUS_E_FAULT;
VOS_STATUS_E_FAULT
VOS_STATUS_E_FAULT
vosStatus = WLANTL_STAPktPending(             pvosGCtx,            ucSTAId,            ucAc);
vosStatus = WLANTL_STAPktPending(             pvosGCtx,            ucSTAId,            ucAc)
vosStatus
vosStatus
WLANTL_STAPktPending(             pvosGCtx,            ucSTAId,            ucAc)
WLANTL_STAPktPending
WLANTL_STAPktPending
pvosGCtx
pvosGCtx
ucSTAId
ucSTAId
ucAc
ucAc
if ( VOS_STATUS_SUCCESS != vosStatus )     {        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                        "Tx: Packet rejected by TL in WLANBAP_STAPktPending");        return vosStatus;    }
VOS_STATUS_SUCCESS != vosStatus
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
vosStatus
vosStatus
{        VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                        "Tx: Packet rejected by TL in WLANBAP_STAPktPending");        return vosStatus;    }
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                        "Tx: Packet rejected by TL in WLANBAP_STAPktPending");
VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,                        "Tx: Packet rejected by TL in WLANBAP_STAPktPending")
VOS_TRACE
VOS_TRACE
VOS_MODULE_ID_BAP
VOS_MODULE_ID_BAP
VOS_TRACE_LEVEL_ERROR
VOS_TRACE_LEVEL_ERROR
"Tx: Packet rejected by TL in WLANBAP_STAPktPending"
return vosStatus;
vosStatus
vosStatus
pBtampCtx->dataPktPending = VOS_TRUE;
pBtampCtx->dataPktPending = VOS_TRUE
pBtampCtx->dataPktPending
pBtampCtx
pBtampCtx
dataPktPending
VOS_TRUE
VOS_TRUE
return VOS_STATUS_SUCCESS;
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
-----joern-----
(75,74,0)
(43,30,0)
(58,44,0)
(15,78,0)
(74,43,0)
(2,19,0)
(32,74,0)
(40,30,0)
(48,44,0)
(4,67,0)
(6,47,0)
(20,30,0)
(11,26,0)
(75,30,0)
(22,19,0)
(79,40,0)
(76,21,0)
(26,44,0)
(37,48,0)
(38,3,0)
(51,66,0)
(21,49,0)
(0,44,0)
(61,66,0)
(80,43,0)
(79,33,0)
(49,21,0)
(48,43,0)
(21,16,0)
(70,49,0)
(40,0,0)
(26,5,0)
(24,30,0)
(68,0,0)
(77,40,0)
(19,49,0)
(12,30,0)
(3,21,0)
(21,54,0)
(14,50,0)
(35,36,0)
(21,5,0)
(71,21,0)
(55,66,0)
(44,30,0)
(43,48,0)
(42,47,0)
(66,18,0)
(17,30,0)
(60,78,0)
(79,14,0)
(13,75,0)
(7,74,0)
(47,30,0)
(63,47,0)
(31,47,0)
(53,74,0)
(47,44,0)
(74,62,0)
(33,75,0)
(72,67,0)
(28,14,0)
(44,26,0)
(41,47,0)
(64,47,0)
(56,67,0)
(46,16,0)
(79,23,0)
(49,30,0)
(57,48,0)
(36,75,0)
(74,75,0)
(39,30,0)
(34,30,0)
(8,36,0)
(21,3,0)
(26,11,0)
(45,44,0)
(29,78,0)
(27,26,0)
(81,0,0)
(67,50,0)
(25,30,0)
(65,45,0)
(9,23,0)
(59,45,0)
(33,69,0)
(1,20,0)
(10,33,0)
(73,30,0)
(78,69,0)
(23,18,0)
(16,21,0)
(0,20,0)
(52,30,0)
(8,35,1)
(74,32,1)
(47,44,1)
(9,66,1)
(40,77,1)
(36,8,1)
(63,6,1)
(42,63,1)
(14,28,1)
(19,49,1)
(56,72,1)
(49,21,1)
(21,5,1)
(16,46,1)
(77,20,1)
(15,60,1)
(0,68,1)
(0,44,1)
(68,81,1)
(59,65,1)
(79,33,1)
(65,47,1)
(29,15,1)
(80,45,1)
(38,16,1)
(48,44,1)
(72,4,1)
(33,75,1)
(51,19,1)
(10,78,1)
(66,61,1)
(28,67,1)
(1,0,1)
(3,38,1)
(32,53,1)
(7,13,1)
(27,58,1)
(2,49,1)
(60,36,1)
(6,44,1)
(40,0,1)
(4,45,1)
(19,22,1)
(55,51,1)
(48,37,1)
(67,56,1)
(64,41,1)
(31,64,1)
(78,29,1)
(47,31,1)
(20,1,1)
(45,59,1)
(44,26,1)
(26,27,1)
(45,44,1)
(76,71,1)
(21,54,1)
(61,55,1)
(33,10,1)
(37,57,1)
(36,75,1)
(13,19,1)
(75,74,1)
(79,14,1)
(74,43,1)
(70,43,1)
(21,16,1)
(53,7,1)
(22,2,1)
(46,76,1)
(41,42,1)
(81,36,1)
(26,5,1)
(71,70,1)
(21,3,1)
(23,9,1)
(79,23,1)
(79,40,1)
(74,62,1)
(35,75,1)
(43,48,1)
(57,80,1)
(26,11,1)
(66,19,2)
(60,36,2)
(21,16,2)
(4,45,2)
(81,36,2)
(68,36,2)
(74,62,2)
(43,48,2)
(76,45,2)
(79,40,2)
(22,45,2)
(28,45,2)
(2,45,2)
(37,45,2)
(79,23,2)
(40,36,2)
(61,19,2)
(78,36,2)
(3,45,2)
(9,19,2)
(21,45,2)
(38,45,2)
(20,36,2)
(15,36,2)
(36,75,2)
(44,26,2)
(26,5,2)
(33,75,2)
(43,45,2)
(1,36,2)
(19,49,2)
(49,45,2)
(79,33,2)
(56,45,2)
(21,54,2)
(57,45,2)
(74,43,2)
(79,14,2)
(16,45,2)
(33,36,2)
(77,36,2)
(74,19,2)
(45,44,2)
(72,45,2)
(10,36,2)
(14,45,2)
(48,44,2)
(13,19,2)
(21,3,2)
(40,0,2)
(80,45,2)
(36,19,2)
(67,45,2)
(26,11,2)
(32,19,2)
(51,19,2)
(75,74,2)
(47,44,2)
(55,19,2)
(48,45,2)
(21,5,2)
(46,45,2)
(23,19,2)
(49,21,2)
(8,19,2)
(70,45,2)
(35,19,2)
(7,19,2)
(0,44,2)
(71,45,2)
(19,45,2)
(29,36,2)
(0,36,2)
(53,19,2)
(75,19,2)
-----------------------------------
(0,pBtampCtx->dataPktPending)
(1,VOS_TRUE)
(2,VOS_STATUS_SUCCESS)
(3,&pHddHdl)
(4,VOS_MODULE_ID_BAP)
(5,ptBtampHandle  btampHandle)
(6,VOS_MODULE_ID_BAP)
(7,pvosGCtx)
(8,vosStatus)
(9,VOS_STATUS_E_FAULT)
(10,vosStatus)
(11,ptBtampContext)
(12,ucSTAId)
(13,vosStatus)
(14,return VOS_STATUS_E_FAULT;)
(15,VOS_TRACE_LEVEL_ERROR)
(16,&ucSTAId)
(17,pHddHdl)
(18,)
(19,VOS_STATUS_SUCCESS != vosStatus)
(20,pBtampCtx->dataPktPending = VOS_TRUE)
(21,WLANBAP_GetStaIdFromLinkCtx ( \n\\n            btampHandle,  /* btampHandle value in  */ \n\\n            phy_link_handle,  /* phy_link_handle value in */\n\\n            &ucSTAId,  /* The StaId (used by TL, PE, and HAL)
(22,vosStatus)
(23,return VOS_STATUS_E_FAULT;)
(24,pBtampCtx)
(25,if ( VOS_STATUS_SUCCESS != vosStatus )
(26,(ptBtampContext)
(27,btampHandle)
(28,VOS_STATUS_E_FAULT)
(29,"Tx: Packet rejected by TL in WLANBAP_STAPktPending")
(30,)
(31,__LINE__)
(32,ucAc)
(33,return vosStatus;)
(34,if ( VOS_STATUS_SUCCESS != vosStatus )
(35,VOS_STATUS_SUCCESS)
(36,VOS_STATUS_SUCCESS != vosStatus)
(37,pvosGCtx)
(38,pHddHdl)
(39,vosStatus)
(40,return VOS_STATUS_SUCCESS;)
(41,pBtampCtx)
(42,"WLAN BAP Context Monitor: pBtampCtx value = %p in %s:%d")
(43,pvosGCtx = pBtampCtx->pvosGCtx)
(44,pBtampCtx = (ptBtampContext)
(45,NULL == pBtampCtx)
(46,ucSTAId)
(47,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO_HIGH,\n\\n              "WLAN BAP Context Monitor: pBtampCtx value = %p in %s:%d", pBtampCtx, __func__, __LINE__ )
(48,pBtampCtx->pvosGCtx)
(49,vosStatus = WLANBAP_GetStaIdFromLinkCtx ( \n\\n            btampHandle,  /* btampHandle value in  */ \n\\n            phy_link_handle,  /* phy_link_handle value in */\n\\n            &ucSTAId,  /* The StaId (used by TL, PE, and HAL)
(50,)
(51,VOS_MODULE_ID_BAP)
(52,if ( NULL == pBtampCtx)
(53,ucSTAId)
(54,v_U8_t         phy_link_handle)
(55,VOS_TRACE_LEVEL_INFO)
(56,"Invalid BAP handle value in WLANBAP_STAPktPending")
(57,pBtampCtx)
(58,pBtampCtx)
(59,pBtampCtx)
(60,VOS_MODULE_ID_BAP)
(61,"Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending")
(62,WLANTL_ACEnumType ucAc)
(63,VOS_TRACE_LEVEL_INFO_HIGH)
(64,__func__)
(65,NULL)
(66,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_INFO,\n\\n                   "Unable to retrieve STA Id from BAP context and phy_link_handle in WLANBAP_STAPktPending")
(67,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                "Invalid BAP handle value in WLANBAP_STAPktPending")
(68,dataPktPending)
(69,)
(70,vosStatus)
(71,btampHandle)
(72,VOS_TRACE_LEVEL_ERROR)
(73,pvosGCtx)
(74,WLANTL_STAPktPending( \n\\n            pvosGCtx,\n\\n            ucSTAId,\n\\n            ucAc)
(75,vosStatus = WLANTL_STAPktPending( \n\\n            pvosGCtx,\n\\n            ucSTAId,\n\\n            ucAc)
(76,phy_link_handle)
(77,VOS_STATUS_SUCCESS)
(78,VOS_TRACE( VOS_MODULE_ID_BAP, VOS_TRACE_LEVEL_ERROR,\n\\n                        "Tx: Packet rejected by TL in WLANBAP_STAPktPending")
(79,RET)
(80,pvosGCtx)
(81,pBtampCtx)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^