-----label-----
0
-----code-----
void show_free_areas(void)
{
	struct page_state ps;
	int cpu, temperature;
	unsigned long active;
	unsigned long inactive;
	unsigned long free;
	struct zone *zone;

	for_each_zone(zone) {
		show_node(zone);
		printk("%s per-cpu:", zone->name);

		if (!zone->present_pages) {
			printk(" empty\n");
			continue;
		} else
			printk("\n");

		for (cpu = 0; cpu < NR_CPUS; ++cpu) {
			struct per_cpu_pageset *pageset = zone->pageset + cpu;
			for (temperature = 0; temperature < 2; temperature++)
				printk("cpu %d %s: low %d, high %d, batch %d\n",
					cpu,
					temperature ? "cold" : "hot",
					pageset->pcp[temperature].low,
					pageset->pcp[temperature].high,
					pageset->pcp[temperature].batch);
		}
	}

	get_page_state(&ps);
	get_zone_counts(&active, &inactive, &free);

	printk("\nFree pages: %11ukB (%ukB HighMem)\n",
		K(nr_free_pages()),
		K(nr_free_highpages()));

	printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu "
		"unstable:%lu free:%u\n",
		active,
		inactive,
		ps.nr_dirty,
		ps.nr_writeback,
		ps.nr_unstable,
		nr_free_pages());

	for_each_zone(zone) {
		show_node(zone);
		printk("%s"
			" free:%lukB"
			" min:%lukB"
			" low:%lukB"
			" high:%lukB"
			" active:%lukB"
			" inactive:%lukB"
			"\n",
			zone->name,
			K(zone->free_pages),
			K(zone->pages_min),
			K(zone->pages_low),
			K(zone->pages_high),
			K(zone->nr_active),
			K(zone->nr_inactive)
			);
	}

	for_each_zone(zone) {
		struct list_head *elem;
 		unsigned long nr, flags, order, total = 0;

		show_node(zone);
		printk("%s: ", zone->name);
		if (!zone->present_pages) {
			printk("empty\n");
			continue;
		}

		spin_lock_irqsave(&zone->lock, flags);
		for (order = 0; order < MAX_ORDER; order++) {
			nr = 0;
			list_for_each(elem, &zone->free_area[order].free_list)
				++nr;
			total += nr << order;
			printk("%lu*%lukB ", nr, K(1UL) << order);
		}
		spin_unlock_irqrestore(&zone->lock, flags);
		printk("= %lukB\n", K(total));
	}

	show_swap_cache_info();
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
9,21
9,22
9,23
9,24
9,25
9,26
9,27
9,28
9,29
10,11
11,12
11,13
12,13
14,15
16,17
17,18
17,19
17,20
19,20
21,22
23,24
24,25
24,26
26,27
28,29
29,30
29,31
31,32
33,34
34,35
34,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
47,48
49,50
51,52
52,53
52,54
52,55
52,56
53,54
54,55
54,56
55,56
57,58
59,60
60,61
60,62
60,63
61,62
64,65
64,66
65,66
68,69
68,70
68,71
69,70
70,71
70,72
71,72
74,75
74,76
75,76
76,77
76,78
77,78
81,82
82,83
82,84
83,84
86,87
86,88
86,89
86,90
87,88
88,89
88,90
89,90
92,93
92,94
93,94
95,96
97,98
98,99
100,101
100,102
101,102
102,103
102,104
103,104
105,106
105,107
105,108
108,109
109,110
109,111
110,111
110,112
111,112
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
122,123
122,124
123,124
126,127
127,128
129,130
130,131
130,132
130,133
130,134
130,135
130,136
130,137
131,132
134,135
136,137
136,138
136,139
137,138
141,142
141,143
142,143
142,144
143,144
143,145
144,145
147,148
150,151
150,152
151,152
151,153
152,153
152,154
153,154
156,157
159,160
159,161
160,161
160,162
161,162
161,163
162,163
165,166
168,169
169,170
169,171
170,171
172,173
173,174
175,176
176,177
176,178
176,179
176,180
177,178
179,180
180,181
182,183
183,184
185,186
186,187
188,189
189,190
189,191
189,192
189,193
190,191
193,194
193,195
194,195
196,197
197,198
199,200
199,201
200,201
202,203
203,204
205,206
206,207
206,208
206,209
206,210
206,211
206,212
206,213
206,214
207,208
210,211
212,213
214,215
214,216
215,216
218,219
218,220
219,220
222,223
222,224
223,224
226,227
227,228
229,230
230,231
230,232
231,232
233,234
235,236
236,237
236,238
237,238
238,239
238,240
239,240
241,242
243,244
244,245
244,246
244,247
244,248
244,249
244,250
244,251
244,252
244,253
245,246
248,249
248,250
249,250
252,253
252,254
253,254
255,256
255,257
256,257
259,260
259,261
260,261
262,263
262,264
263,264
266,267
266,268
267,268
269,270
269,271
270,271
273,274
273,275
274,275
276,277
276,278
277,278
280,281
280,282
281,282
283,284
283,285
284,285
287,288
287,289
288,289
290,291
290,292
291,292
294,295
295,296
295,297
296,297
298,299
300,301
301,302
301,303
301,304
301,305
301,306
301,307
301,308
301,309
301,310
302,303
303,304
303,305
304,305
306,307
306,308
309,310
310,311
310,312
310,313
310,314
310,315
312,313
314,315
316,317
318,319
318,320
320,321
322,323
323,324
323,325
324,325
326,327
328,329
329,330
329,331
329,332
330,331
333,334
333,335
334,335
337,338
337,339
338,339
339,340
339,341
340,341
343,344
343,345
344,345
345,346
345,347
346,347
350,351
351,352
351,353
351,354
352,353
354,355
355,356
355,357
356,357
359,360
361,362
361,363
361,364
361,365
362,363
363,364
363,365
364,365
367,368
367,369
368,369
370,371
372,373
373,374
375,376
375,377
375,378
375,379
375,380
375,381
376,377
377,378
377,379
378,379
381,382
382,383
383,384
383,385
383,386
384,385
386,387
388,389
389,390
389,391
390,391
390,392
391,392
391,393
392,393
395,396
398,399
399,400
400,401
402,403
403,404
403,405
404,405
406,407
406,408
407,408
409,410
411,412
412,413
412,414
412,415
412,416
413,414
416,417
418,419
418,420
419,420
419,421
420,421
423,424
425,426
426,427
426,428
426,429
427,428
429,430
430,431
430,432
431,432
434,435
436,437
437,438
437,439
437,440
438,439
441,442
441,443
442,443
444,445
446,447
447,448
448,449
-----nextToken-----
2,4,6,8,13,15,18,20,22,25,27,30,32,35,37,41,43,44,48,50,56,58,62,63,66,67,72,73,78,79,80,84,85,90,91,94,96,99,104,106,107,112,113,115,120,121,124,125,128,132,133,135,138,139,140,145,146,148,149,154,155,157,158,163,164,166,167,171,174,178,181,184,187,191,192,195,198,201,204,208,209,211,213,216,217,220,221,224,225,228,232,234,240,242,246,247,250,251,254,257,258,261,264,265,268,271,272,275,278,279,282,285,286,289,292,293,297,299,305,307,308,311,313,315,317,319,321,325,327,331,332,335,336,341,342,347,348,349,353,357,358,360,365,366,369,371,374,379,380,385,387,393,394,396,397,401,405,408,410,414,415,417,421,422,424,428,432,433,435,439,440,443,445,449
-----computeFrom-----
88,89
88,90
92,93
92,94
109,110
109,111
118,119
118,120
122,123
122,124
363,364
363,365
367,368
367,369
377,378
377,379
403,404
403,405
406,407
406,408
418,419
418,420
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ConditionalExpression;IdExpression;Name;LiteralExpression;LiteralExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;Declarator;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ProblemStatement;ExpressionStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void show_free_areas(void){	struct page_state ps;	int cpu, temperature;	unsigned long active;	unsigned long inactive;	unsigned long free;	struct zone *zone;	for_each_zone(zone) {		show_node(zone);		printk("%s per-cpu:", zone->name);		if (!zone->present_pages) {			printk(" empty\n");			continue;		} else			printk("\n");		for (cpu = 0; cpu < NR_CPUS; ++cpu) {			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}	}	get_page_state(&ps);	get_zone_counts(&active, &inactive, &free);	printk("\nFree pages: %11ukB (%ukB HighMem)\n",		K(nr_free_pages()),		K(nr_free_highpages()));	printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu "		"unstable:%lu free:%u\n",		active,		inactive,		ps.nr_dirty,		ps.nr_writeback,		ps.nr_unstable,		nr_free_pages());	for_each_zone(zone) {		show_node(zone);		printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			);	}	for_each_zone(zone) {		struct list_head *elem; 		unsigned long nr, flags, order, total = 0;		show_node(zone);		printk("%s: ", zone->name);		if (!zone->present_pages) {			printk("empty\n");			continue;		}		spin_lock_irqsave(&zone->lock, flags);		for (order = 0; order < MAX_ORDER; order++) {			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}		spin_unlock_irqrestore(&zone->lock, flags);		printk("= %lukB\n", K(total));	}	show_swap_cache_info();}
void
show_free_areas(void)
show_free_areas
void
void


{	struct page_state ps;	int cpu, temperature;	unsigned long active;	unsigned long inactive;	unsigned long free;	struct zone *zone;	for_each_zone(zone) {		show_node(zone);		printk("%s per-cpu:", zone->name);		if (!zone->present_pages) {			printk(" empty\n");			continue;		} else			printk("\n");		for (cpu = 0; cpu < NR_CPUS; ++cpu) {			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}	}	get_page_state(&ps);	get_zone_counts(&active, &inactive, &free);	printk("\nFree pages: %11ukB (%ukB HighMem)\n",		K(nr_free_pages()),		K(nr_free_highpages()));	printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu "		"unstable:%lu free:%u\n",		active,		inactive,		ps.nr_dirty,		ps.nr_writeback,		ps.nr_unstable,		nr_free_pages());	for_each_zone(zone) {		show_node(zone);		printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			);	}	for_each_zone(zone) {		struct list_head *elem; 		unsigned long nr, flags, order, total = 0;		show_node(zone);		printk("%s: ", zone->name);		if (!zone->present_pages) {			printk("empty\n");			continue;		}		spin_lock_irqsave(&zone->lock, flags);		for (order = 0; order < MAX_ORDER; order++) {			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}		spin_unlock_irqrestore(&zone->lock, flags);		printk("= %lukB\n", K(total));	}	show_swap_cache_info();}
struct page_state ps;
struct page_state ps;
struct page_state
page_state
ps
ps
int cpu, temperature;
int cpu, temperature;
int
cpu
cpu
temperature
temperature
unsigned long active;
unsigned long active;
unsigned long
active
active
unsigned long inactive;
unsigned long inactive;
unsigned long
inactive
inactive
unsigned long free;
unsigned long free;
unsigned long
free
free
struct zone *zone;
struct zone *zone;
struct zone
zone
*zone
*
zone
for_each_zone(zone)
for_each_zone(zone)
for_each_zone
for_each_zone
zone
zone
)
{		show_node(zone);		printk("%s per-cpu:", zone->name);		if (!zone->present_pages) {			printk(" empty\n");			continue;		} else			printk("\n");		for (cpu = 0; cpu < NR_CPUS; ++cpu) {			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}	}
show_node(zone);
show_node(zone)
show_node
show_node
zone
zone
printk("%s per-cpu:", zone->name);
printk("%s per-cpu:", zone->name)
printk
printk
"%s per-cpu:"
zone->name
zone
zone
name
if (!zone->present_pages) {			printk(" empty\n");			continue;		} else			printk("\n");
!zone->present_pages
zone->present_pages
zone
zone
present_pages
{			printk(" empty\n");			continue;		}
printk(" empty\n");
printk(" empty\n")
printk
printk
" empty\n"
continue;
printk("\n");
printk("\n")
printk
printk
"\n"
for (cpu = 0; cpu < NR_CPUS; ++cpu) {			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}
cpu = 0;
cpu = 0
cpu
cpu
0
cpu < NR_CPUS
cpu
cpu
NR_CPUS
NR_CPUS
++cpu
cpu
cpu
{			struct per_cpu_pageset *pageset = zone->pageset + cpu;			for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);		}
struct per_cpu_pageset *pageset = zone->pageset + cpu;
struct per_cpu_pageset *pageset = zone->pageset + cpu;
struct per_cpu_pageset
per_cpu_pageset
*pageset = zone->pageset + cpu
*
pageset
= zone->pageset + cpu
zone->pageset + cpu
zone->pageset
zone
zone
pageset
cpu
cpu
for (temperature = 0; temperature < 2; temperature++)				printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);
temperature = 0;
temperature = 0
temperature
temperature
0
temperature < 2
temperature
temperature
2
temperature++
temperature
temperature
printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch);
printk("cpu %d %s: low %d, high %d, batch %d\n",					cpu,					temperature ? "cold" : "hot",					pageset->pcp[temperature].low,					pageset->pcp[temperature].high,					pageset->pcp[temperature].batch)
printk
printk
"cpu %d %s: low %d, high %d, batch %d\n"
cpu
cpu
temperature ? "cold" : "hot"
temperature
temperature
"cold"
"hot"
pageset->pcp[temperature].low
pageset->pcp[temperature]
pageset->pcp
pageset
pageset
pcp
temperature
temperature
low
pageset->pcp[temperature].high
pageset->pcp[temperature]
pageset->pcp
pageset
pageset
pcp
temperature
temperature
high
pageset->pcp[temperature].batch
pageset->pcp[temperature]
pageset->pcp
pageset
pageset
pcp
temperature
temperature
batch
get_page_state(&ps);
get_page_state(&ps)
get_page_state
get_page_state
&ps
ps
ps
get_zone_counts(&active, &inactive, &free);
get_zone_counts(&active, &inactive, &free)
get_zone_counts
get_zone_counts
&active
active
active
&inactive
inactive
inactive
&free
free
free
printk("\nFree pages: %11ukB (%ukB HighMem)\n",		K(nr_free_pages()),		K(nr_free_highpages()));
printk("\nFree pages: %11ukB (%ukB HighMem)\n",		K(nr_free_pages()),		K(nr_free_highpages()))
printk
printk
"\nFree pages: %11ukB (%ukB HighMem)\n"
K(nr_free_pages())
K
K
nr_free_pages()
nr_free_pages
nr_free_pages
K(nr_free_highpages())
K
K
nr_free_highpages()
nr_free_highpages
nr_free_highpages
printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu "		"unstable:%lu free:%u\n",		active,		inactive,		ps.nr_dirty,		ps.nr_writeback,		ps.nr_unstable,		nr_free_pages());
printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu "		"unstable:%lu free:%u\n",		active,		inactive,		ps.nr_dirty,		ps.nr_writeback,		ps.nr_unstable,		nr_free_pages())
printk
printk
"Active:%lu inactive:%lu dirty:%lu writeback:%lu "		"unstable:%lu free:%u\n"
active
active
inactive
inactive
ps.nr_dirty
ps
ps
nr_dirty
ps.nr_writeback
ps
ps
nr_writeback
ps.nr_unstable
ps
ps
nr_unstable
nr_free_pages()
nr_free_pages
nr_free_pages
for_each_zone(zone)
for_each_zone(zone)
for_each_zone
for_each_zone
zone
zone
)
{		show_node(zone);		printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			);	}
show_node(zone);
show_node(zone)
show_node
show_node
zone
zone
printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			);
printk("%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n",			zone->name,			K(zone->free_pages),			K(zone->pages_min),			K(zone->pages_low),			K(zone->pages_high),			K(zone->nr_active),			K(zone->nr_inactive)			)
printk
printk
"%s"			" free:%lukB"			" min:%lukB"			" low:%lukB"			" high:%lukB"			" active:%lukB"			" inactive:%lukB"			"\n"
zone->name
zone
zone
name
K(zone->free_pages)
K
K
zone->free_pages
zone
zone
free_pages
K(zone->pages_min)
K
K
zone->pages_min
zone
zone
pages_min
K(zone->pages_low)
K
K
zone->pages_low
zone
zone
pages_low
K(zone->pages_high)
K
K
zone->pages_high
zone
zone
pages_high
K(zone->nr_active)
K
K
zone->nr_active
zone
zone
nr_active
K(zone->nr_inactive)
K
K
zone->nr_inactive
zone
zone
nr_inactive
for_each_zone(zone)
for_each_zone(zone)
for_each_zone
for_each_zone
zone
zone
)
{		struct list_head *elem; 		unsigned long nr, flags, order, total = 0;		show_node(zone);		printk("%s: ", zone->name);		if (!zone->present_pages) {			printk("empty\n");			continue;		}		spin_lock_irqsave(&zone->lock, flags);		for (order = 0; order < MAX_ORDER; order++) {			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}		spin_unlock_irqrestore(&zone->lock, flags);		printk("= %lukB\n", K(total));	}
struct list_head *elem;
struct list_head *elem;
struct list_head
list_head
*elem
*
elem
unsigned long nr, flags, order, total = 0;
unsigned long nr, flags, order, total = 0;
unsigned long
nr
nr
flags
flags
order
order
total = 0
total
= 0
0
show_node(zone);
show_node(zone)
show_node
show_node
zone
zone
printk("%s: ", zone->name);
printk("%s: ", zone->name)
printk
printk
"%s: "
zone->name
zone
zone
name
if (!zone->present_pages) {			printk("empty\n");			continue;		}
!zone->present_pages
zone->present_pages
zone
zone
present_pages
{			printk("empty\n");			continue;		}
printk("empty\n");
printk("empty\n")
printk
printk
"empty\n"
continue;
spin_lock_irqsave(&zone->lock, flags);
spin_lock_irqsave(&zone->lock, flags)
spin_lock_irqsave
spin_lock_irqsave
&zone->lock
zone->lock
zone
zone
lock
flags
flags
for (order = 0; order < MAX_ORDER; order++) {			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}
order = 0;
order = 0
order
order
0
order < MAX_ORDER
order
order
MAX_ORDER
MAX_ORDER
order++
order
order
{			nr = 0;			list_for_each(elem, &zone->free_area[order].free_list)				++nr;			total += nr << order;			printk("%lu*%lukB ", nr, K(1UL) << order);		}
nr = 0;
nr = 0
nr
nr
0
list_for_each(elem, &zone->free_area[order].free_list)				++
list_for_each(elem, &zone->free_area[order].free_list)				++
list_for_each(elem, &zone->free_area[order].free_list)
list_for_each
list_for_each
elem
elem
&zone->free_area[order].free_list
zone->free_area[order].free_list
zone->free_area[order]
zone->free_area
zone
zone
free_area
order
order
free_list
+
nr;
nr
nr
total += nr << order;
total += nr << order
total
total
nr << order
nr
nr
order
order
printk("%lu*%lukB ", nr, K(1UL) << order);
printk("%lu*%lukB ", nr, K(1UL) << order)
printk
printk
"%lu*%lukB "
nr
nr
K(1UL) << order
K(1UL)
K
K
1UL
order
order
spin_unlock_irqrestore(&zone->lock, flags);
spin_unlock_irqrestore(&zone->lock, flags)
spin_unlock_irqrestore
spin_unlock_irqrestore
&zone->lock
zone->lock
zone
zone
lock
flags
flags
printk("= %lukB\n", K(total));
printk("= %lukB\n", K(total))
printk
printk
"= %lukB\n"
K(total)
K
K
total
total
show_swap_cache_info();
show_swap_cache_info()
show_swap_cache_info
show_swap_cache_info
-----joern-----
(105,211,0)
(154,12,0)
(0,80,0)
(147,63,0)
(205,161,0)
(119,145,0)
(89,61,0)
(14,1,0)
(62,152,0)
(49,16,0)
(182,40,0)
(73,107,0)
(162,201,0)
(91,64,0)
(66,187,0)
(58,155,0)
(85,142,0)
(192,115,0)
(159,64,0)
(86,52,0)
(66,173,0)
(171,90,0)
(133,138,0)
(110,31,0)
(15,27,0)
(61,102,0)
(36,12,0)
(60,139,0)
(172,66,0)
(175,139,0)
(212,174,0)
(3,173,0)
(81,30,0)
(77,177,0)
(91,38,0)
(202,21,0)
(185,201,0)
(191,134,0)
(132,212,0)
(178,188,0)
(6,40,0)
(209,205,0)
(164,41,0)
(67,97,0)
(95,211,0)
(74,34,0)
(188,189,0)
(182,24,0)
(116,80,0)
(27,151,0)
(103,52,0)
(155,81,0)
(93,61,0)
(34,19,0)
(194,185,0)
(64,91,0)
(40,177,0)
(138,174,0)
(82,107,0)
(91,43,0)
(145,102,0)
(157,52,0)
(102,145,0)
(166,80,0)
(20,40,0)
(54,197,0)
(16,112,0)
(31,61,0)
(46,181,0)
(16,64,0)
(204,185,0)
(18,138,0)
(137,55,0)
(179,80,0)
(109,39,0)
(188,152,0)
(166,171,0)
(61,169,0)
(184,87,0)
(45,90,0)
(153,100,0)
(34,9,0)
(182,77,0)
(65,145,0)
(61,161,0)
(51,143,0)
(151,27,0)
(61,31,0)
(33,138,0)
(149,110,0)
(203,193,0)
(57,177,0)
(37,14,0)
(48,129,0)
(211,24,0)
(23,15,0)
(114,33,0)
(61,93,0)
(152,188,0)
(32,70,0)
(84,153,0)
(128,24,0)
(64,39,0)
(111,187,0)
(34,12,0)
(77,189,0)
(163,87,0)
(42,108,0)
(76,55,0)
(7,210,0)
(121,137,0)
(139,34,0)
(112,174,0)
(63,197,0)
(197,54,0)
(26,154,0)
(79,80,0)
(189,80,0)
(176,24,0)
(187,66,0)
(138,33,0)
(195,112,0)
(121,40,0)
(124,12,0)
(25,43,0)
(159,193,0)
(90,171,0)
(70,32,0)
(180,80,0)
(134,34,0)
(57,40,0)
(22,143,0)
(112,16,0)
(184,61,0)
(190,166,0)
(140,174,0)
(169,12,0)
(87,184,0)
(19,34,0)
(96,121,0)
(13,80,0)
(195,33,0)
(130,1,0)
(99,77,0)
(197,63,0)
(115,154,0)
(66,172,0)
(10,38,0)
(167,80,0)
(72,87,0)
(27,15,0)
(21,38,0)
(181,108,0)
(122,159,0)
(210,7,0)
(135,112,0)
(148,34,0)
(198,16,0)
(165,182,0)
(125,138,0)
(129,97,0)
(69,195,0)
(118,121,0)
(77,182,0)
(146,174,0)
(160,78,0)
(47,34,0)
(55,137,0)
(123,80,0)
(117,154,0)
(32,63,0)
(75,110,0)
(34,139,0)
(120,39,0)
(92,205,0)
(168,81,0)
(5,159,0)
(114,193,0)
(136,13,0)
(93,143,0)
(94,174,0)
(161,205,0)
(121,177,0)
(63,32,0)
(61,103,0)
(151,80,0)
(78,200,0)
(127,9,0)
(68,78,0)
(152,80,0)
(4,151,0)
(108,181,0)
(210,12,0)
(196,12,0)
(77,77,0)
(142,24,0)
(98,189,0)
(43,91,0)
(50,189,0)
(28,12,0)
(61,184,0)
(66,12,0)
(100,153,0)
(41,38,0)
(193,159,0)
(137,24,0)
(33,30,0)
(2,15,0)
(11,91,0)
(52,103,0)
(155,64,0)
(144,114,0)
(63,12,0)
(29,33,0)
(113,12,0)
(101,146,0)
(186,172,0)
(193,114,0)
(137,121,0)
(81,174,0)
(173,66,0)
(88,155,0)
(59,134,0)
(201,80,0)
(106,12,0)
(161,61,0)
(31,110,0)
(112,195,0)
(33,38,0)
(131,35,0)
(208,206,0)
(33,114,0)
(206,169,0)
(158,30,0)
(188,77,0)
(30,81,0)
(56,64,0)
(156,57,0)
(207,12,0)
(104,43,0)
(170,12,0)
(34,134,0)
(183,9,0)
(33,195,0)
(9,34,0)
(30,33,0)
(143,93,0)
(213,90,0)
(8,181,0)
(102,61,0)
(141,38,0)
(107,61,0)
(81,155,0)
(150,137,0)
(108,154,0)
(83,7,0)
(193,174,0)
(201,185,0)
(61,107,0)
(17,182,0)
(171,166,0)
(200,78,0)
(53,153,0)
(103,61,0)
(199,212,0)
(80,12,0)
(44,33,0)
(71,41,0)
(71,21,1)
(84,53,1)
(34,9,1)
(41,164,1)
(164,71,1)
(35,131,1)
(133,18,1)
(131,100,1)
(30,158,1)
(127,139,1)
(6,20,1)
(41,38,1)
(157,86,1)
(95,142,1)
(61,102,1)
(64,91,1)
(94,140,1)
(146,101,1)
(185,194,1)
(209,92,1)
(203,159,1)
(82,73,1)
(81,155,1)
(89,206,1)
(184,87,1)
(112,16,1)
(83,41,1)
(121,137,1)
(23,211,1)
(142,24,1)
(61,103,1)
(182,40,1)
(148,47,1)
(172,186,1)
(211,105,1)
(151,27,1)
(153,84,1)
(159,64,1)
(119,65,1)
(33,114,1)
(174,94,1)
(55,76,1)
(140,64,1)
(88,138,1)
(63,197,1)
(142,85,1)
(201,185,1)
(193,174,1)
(29,212,1)
(204,162,1)
(173,3,1)
(156,40,1)
(195,112,1)
(45,213,1)
(67,129,1)
(145,119,1)
(125,18,1)
(68,160,1)
(92,31,1)
(77,182,1)
(69,112,1)
(182,24,1)
(147,66,1)
(166,190,1)
(22,51,1)
(5,30,1)
(3,210,1)
(181,46,1)
(105,95,1)
(195,69,1)
(197,54,1)
(15,2,1)
(118,77,1)
(152,188,1)
(166,171,1)
(107,82,1)
(61,161,1)
(16,198,1)
(81,168,1)
(144,193,1)
(20,211,1)
(50,98,1)
(58,88,1)
(66,187,1)
(199,174,1)
(25,104,1)
(104,56,1)
(77,189,1)
(138,125,1)
(132,199,1)
(76,96,1)
(33,38,1)
(46,8,1)
(61,31,1)
(66,172,1)
(160,201,1)
(54,32,1)
(155,58,1)
(130,14,1)
(16,64,1)
(61,107,1)
(158,81,1)
(37,100,1)
(161,205,1)
(178,62,1)
(72,161,1)
(91,11,1)
(96,118,1)
(112,135,1)
(91,43,1)
(95,24,1)
(155,64,1)
(193,203,1)
(135,16,1)
(61,93,1)
(199,146,1)
(93,143,1)
(101,33,1)
(212,174,1)
(60,175,1)
(40,6,1)
(4,27,1)
(9,183,1)
(183,127,1)
(56,41,1)
(149,75,1)
(19,134,1)
(65,184,1)
(44,29,1)
(191,59,1)
(151,4,1)
(17,165,1)
(143,22,1)
(193,159,1)
(14,37,1)
(168,155,1)
(205,209,1)
(111,173,1)
(90,45,1)
(59,9,1)
(34,134,1)
(202,212,1)
(212,132,1)
(188,77,1)
(112,174,1)
(188,189,1)
(21,202,1)
(162,13,1)
(114,193,1)
(190,171,1)
(91,38,1)
(10,35,1)
(100,153,1)
(57,156,1)
(146,174,1)
(138,133,1)
(102,145,1)
(200,78,1)
(33,30,1)
(77,77,1)
(139,60,1)
(126,196,1)
(194,204,1)
(48,200,1)
(208,34,1)
(136,189,1)
(75,93,1)
(7,83,1)
(13,136,1)
(122,5,1)
(42,115,1)
(30,81,1)
(211,24,1)
(34,139,1)
(38,141,1)
(10,130,1)
(182,17,1)
(81,174,1)
(11,43,1)
(62,151,1)
(71,38,1)
(137,24,1)
(150,55,1)
(34,19,1)
(27,15,1)
(175,148,1)
(8,42,1)
(110,149,1)
(18,44,1)
(114,144,1)
(43,25,1)
(186,187,1)
(213,200,1)
(74,63,1)
(137,55,1)
(78,68,1)
(189,50,1)
(21,38,1)
(108,181,1)
(187,111,1)
(70,147,1)
(53,108,1)
(198,49,1)
(165,99,1)
(213,67,1)
(86,107,1)
(33,195,1)
(115,192,1)
(196,152,1)
(87,163,1)
(138,174,1)
(210,7,1)
(159,122,1)
(52,157,1)
(129,48,1)
(206,208,1)
(137,150,1)
(134,191,1)
(141,10,1)
(24,128,1)
(163,72,1)
(66,173,1)
(176,166,1)
(99,57,1)
(85,121,1)
(128,176,1)
(57,40,1)
(32,70,1)
(98,61,1)
(61,184,1)
(47,74,1)
(49,114,1)
(103,52,1)
(121,40,1)
(171,90,1)
(31,110,1)
(2,23,1)
(33,138,1)
(73,89,1)
(51,103,1)
(188,178,1)
(63,32,1)
(57,40,2)
(61,107,2)
(155,212,2)
(35,100,2)
(88,212,2)
(137,24,2)
(146,212,2)
(121,40,2)
(114,193,2)
(49,212,2)
(61,93,2)
(138,212,2)
(6,211,2)
(66,173,2)
(94,41,2)
(63,197,2)
(101,212,2)
(77,211,2)
(150,211,2)
(64,91,2)
(30,81,2)
(20,211,2)
(112,212,2)
(56,41,2)
(77,182,2)
(211,24,2)
(81,174,2)
(130,100,2)
(195,112,2)
(212,212,2)
(151,27,2)
(104,41,2)
(199,212,2)
(81,212,2)
(198,212,2)
(93,143,2)
(165,211,2)
(137,211,2)
(137,55,2)
(174,41,2)
(112,16,2)
(91,38,2)
(33,30,2)
(33,212,2)
(146,174,2)
(135,212,2)
(33,114,2)
(156,211,2)
(95,211,2)
(25,41,2)
(132,212,2)
(77,77,2)
(31,110,2)
(96,211,2)
(182,24,2)
(11,41,2)
(199,41,2)
(85,211,2)
(102,145,2)
(29,212,2)
(212,41,2)
(63,32,2)
(158,212,2)
(48,200,2)
(142,211,2)
(16,212,2)
(112,174,2)
(64,41,2)
(61,31,2)
(41,41,2)
(105,211,2)
(118,211,2)
(43,41,2)
(67,200,2)
(159,212,2)
(129,200,2)
(37,100,2)
(168,212,2)
(21,41,2)
(195,212,2)
(61,184,2)
(58,212,2)
(30,212,2)
(91,43,2)
(57,211,2)
(108,181,2)
(197,54,2)
(132,41,2)
(140,41,2)
(33,38,2)
(201,185,2)
(33,195,2)
(99,211,2)
(182,40,2)
(18,212,2)
(159,64,2)
(152,188,2)
(103,52,2)
(138,174,2)
(61,103,2)
(193,174,2)
(44,212,2)
(34,139,2)
(144,212,2)
(164,41,2)
(34,19,2)
(202,41,2)
(32,70,2)
(121,137,2)
(34,9,2)
(27,15,2)
(133,18,2)
(66,172,2)
(77,189,2)
(41,38,2)
(16,64,2)
(34,134,2)
(66,187,2)
(193,159,2)
(166,171,2)
(21,38,2)
(211,211,2)
(114,212,2)
(171,90,2)
(131,100,2)
(203,212,2)
(182,211,2)
(125,18,2)
(33,138,2)
(71,41,2)
(212,174,2)
(69,212,2)
(121,211,2)
(91,41,2)
(40,211,2)
(142,24,2)
(61,102,2)
(17,211,2)
(55,211,2)
(188,77,2)
(161,205,2)
(184,87,2)
(100,153,2)
(14,100,2)
(122,212,2)
(81,155,2)
(61,161,2)
(76,211,2)
(5,212,2)
(155,64,2)
(200,78,2)
(193,212,2)
(188,189,2)
(210,7,2)
-----------------------------------
(0,flags)
(1,)
(2,lock)
(3,active)
(4,flags)
(5,pageset)
(6,0)
(7,&ps)
(8,zone)
(9,ps.nr_writeback)
(10,cpu)
(11,cpu)
(12,)
(13,show_node(zone)
(14,printk(" empty\\n")
(15,zone->lock)
(16,pageset->pcp)
(17,order)
(18,temperature)
(19,nr_free_pages()
(20,nr)
(21,++cpu)
(22,pages_min)
(23,zone)
(24,order = 0)
(25,pageset)
(26,if (!zone->present_pages)
(27,&zone->lock)
(28,active)
(29,"cpu %d %s: low %d, high %d, batch %d\\n")
(30,pageset->pcp[temperature].low)
(31,K(zone->pages_low)
(32,K(nr_free_pages()
(33,printk("cpu %d %s: low %d, high %d, batch %d\\n",\n\\n\\t\\t\\t\\t\\tcpu,\n\\n\\t\\t\\t\\t\\ttemperature ? "cold" : "hot",\n\\n\\t\\t\\t\\t\\tpageset->pcp[temperature].low,\n\\n\\t\\t\\t\\t\\tpageset->pcp[temperature].high,\n\\n\\t\\t\\t\\t\\tpageset->pcp[temperature].batch)
(34,printk("Active:%lu inactive:%lu dirty:%lu writeback:%lu "\n\\n\\t\\t"unstable:%lu free:%u\\n",\n\\n\\t\\tactive,\n\\n\\t\\tinactive,\n\\n\\t\\tps.nr_dirty,\n\\n\\t\\tps.nr_writeback,\n\\n\\t\\tps.nr_unstable,\n\\n\\t\\tnr_free_pages()
(35,printk("\\n")
(36,ps)
(37," empty\\n")
(38,cpu = 0)
(39,)
(40,nr = 0)
(41,cpu < NR_CPUS)
(42,"%s per-cpu:")
(43,zone->pageset)
(44,cpu)
(45,lock)
(46,name)
(47,active)
(48,"empty\\n")
(49,pageset)
(50,0)
(51,zone)
(52,zone->free_pages)
(53,zone)
(54,nr_free_highpages()
(55,K(1UL)
(56,pageset)
(57,++nr)
(58,pcp)
(59,ps)
(60,nr_dirty)
(61,printk("%s"\n\\n\\t\\t\\t" free:%lukB"\n\\n\\t\\t\\t" min:%lukB"\n\\n\\t\\t\\t" low:%lukB"\n\\n\\t\\t\\t" high:%lukB"\n\\n\\t\\t\\t" active:%lukB"\n\\n\\t\\t\\t" inactive:%lukB"\n\\n\\t\\t\\t"\\n",\n\\n\\t\\t\\tzone->name,\n\\n\\t\\t\\tK(zone->free_pages)
(62,"= %lukB\\n")
(63,printk("\\nFree pages: %11ukB (%ukB HighMem)
(64,*pageset = zone->pageset + cpu)
(65,zone)
(66,get_zone_counts(&active, &inactive, &free)
(67,continue;)
(68,present_pages)
(69,batch)
(70,nr_free_pages()
(71,cpu)
(72,zone)
(73,zone)
(74,"Active:%lu inactive:%lu dirty:%lu writeback:%lu "\n\\n\\t\\t"unstable:%lu free:%u\\n")
(75,zone)
(76,1UL)
(77,total += nr << order)
(78,zone->present_pages)
(79,nr)
(80,)
(81,pageset->pcp[temperature])
(82,name)
(83,ps)
(84,present_pages)
(85,order)
(86,zone)
(87,zone->nr_active)
(88,pageset)
(89,"%s"\n\\n\\t\\t\\t" free:%lukB"\n\\n\\t\\t\\t" min:%lukB"\n\\n\\t\\t\\t" low:%lukB"\n\\n\\t\\t\\t" high:%lukB"\n\\n\\t\\t\\t" active:%lukB"\n\\n\\t\\t\\t" inactive:%lukB"\n\\n\\t\\t\\t"\\n")
(90,zone->lock)
(91,zone->pageset + cpu)
(92,zone)
(93,K(zone->pages_min)
(94,0)
(95,order)
(96,nr)
(97,)
(98,total)
(99,total)
(100,!zone->present_pages)
(101,temperature)
(102,K(zone->nr_inactive)
(103,K(zone->free_pages)
(104,zone)
(105,MAX_ORDER)
(106,zone)
(107,zone->name)
(108,printk("%s per-cpu:", zone->name)
(109,pageset)
(110,zone->pages_low)
(111,inactive)
(112,pageset->pcp[temperature])
(113,cpu)
(114,pageset->pcp[temperature].high)
(115,show_node(zone)
(116,for (order = 0; order < MAX_ORDER; order++)
(117,for (cpu = 0; cpu < NR_CPUS; ++cpu)
(118,"%lu*%lukB ")
(119,nr_inactive)
(120,for (temperature = 0; temperature < 2; temperature++)
(121,printk("%lu*%lukB ", nr, K(1UL)
(122,pcp)
(123,order)
(124,temperature)
(125,"hot")
(126,RET)
(127,ps)
(128,0)
(129,printk("empty\\n")
(130,continue;)
(131,"\\n")
(132,2)
(133,"cold")
(134,ps.nr_unstable)
(135,temperature)
(136,zone)
(137,K(1UL)
(138,temperature ? "cold" : "hot")
(139,ps.nr_dirty)
(140,temperature)
(141,0)
(142,order++)
(143,zone->pages_min)
(144,high)
(145,zone->nr_inactive)
(146,temperature++)
(147,"\\nFree pages: %11ukB (%ukB HighMem)
(148,inactive)
(149,pages_low)
(150,order)
(151,spin_unlock_irqrestore(&zone->lock, flags)
(152,printk("= %lukB\\n", K(total)
(153,zone->present_pages)
(154,)
(155,pageset->pcp)
(156,nr)
(157,free_pages)
(158,low)
(159,pageset->pcp)
(160,zone)
(161,K(zone->pages_high)
(162,"%s: ")
(163,nr_active)
(164,NR_CPUS)
(165,nr)
(166,spin_lock_irqsave(&zone->lock, flags)
(167,total)
(168,temperature)
(169,)
(170,free)
(171,&zone->lock)
(172,&free)
(173,&active)
(174,temperature = 0)
(175,ps)
(176,order)
(177,)
(178,total)
(179,elem)
(180,if (!zone->present_pages)
(181,zone->name)
(182,nr << order)
(183,nr_writeback)
(184,K(zone->nr_active)
(185,zone->name)
(186,free)
(187,&inactive)
(188,K(total)
(189,total = 0)
(190,flags)
(191,nr_unstable)
(192,zone)
(193,pageset->pcp[temperature])
(194,name)
(195,pageset->pcp[temperature].batch)
(196,show_swap_cache_info()
(197,K(nr_free_highpages()
(198,pcp)
(199,temperature)
(200,!zone->present_pages)
(201,printk("%s: ", zone->name)
(202,cpu)
(203,temperature)
(204,zone)
(205,zone->pages_high)
(206,show_node(zone)
(207,inactive)
(208,zone)
(209,pages_high)
(210,get_page_state(&ps)
(211,order < MAX_ORDER)
(212,temperature < 2)
(213,zone)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^