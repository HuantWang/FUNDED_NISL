-----label-----
1
-----code-----
struct mm_iommu_table_group_mem_t *mm_iommu_lookup_rm(struct mm_struct *mm,
		unsigned long ua, unsigned long size)
{
	struct mm_iommu_table_group_mem_t *mem, *ret = NULL;

	list_for_each_entry_lockless(mem, &mm->context.iommu_group_mem_list,
			next) {
		if ((mem->ua <= ua) &&
				(ua + size <= mem->ua +
				 (mem->entries << PAGE_SHIFT))) {
			ret = mem;
			break;
		}
	}

	return ret;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
23,26
24,25
26,27
26,28
29,30
29,31
29,32
32,33
33,34
35,36
36,37
36,38
36,39
36,40
37,38
39,40
41,42
42,43
42,44
43,44
43,45
44,45
48,49
50,51
51,52
52,53
52,54
53,54
53,55
54,55
55,56
55,57
56,57
56,58
57,58
60,61
62,63
63,64
63,65
64,65
64,66
65,66
67,68
69,70
69,71
70,71
70,72
71,72
74,75
75,76
75,77
76,77
76,78
77,78
80,81
82,83
82,84
83,84
84,85
84,86
85,86
87,88
90,91
91,92
-----nextToken-----
3,5,6,9,11,12,14,16,18,20,25,27,28,30,31,34,38,40,45,46,47,49,58,59,61,66,68,72,73,78,79,81,86,88,89,92
-----computeFrom-----
53,54
53,55
55,56
55,57
63,64
63,65
64,65
64,66
69,70
69,71
75,76
75,77
84,85
84,86
-----guardedBy-----
78,88
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ReturnStatement;IdExpression;Name;
-----ast_node-----
struct mm_iommu_table_group_mem_t *mm_iommu_lookup_rm(struct mm_struct *mm,		unsigned long ua, unsigned long size){	struct mm_iommu_table_group_mem_t *mem, *ret = NULL;	list_for_each_entry_lockless(mem, &mm->context.iommu_group_mem_list,			next) {		if ((mem->ua <= ua) &&				(ua + size <= mem->ua +				 (mem->entries << PAGE_SHIFT))) {			ret = mem;			break;		}	}	return ret;}
struct mm_iommu_table_group_mem_t
mm_iommu_table_group_mem_t
*mm_iommu_lookup_rm(struct mm_struct *mm,		unsigned long ua, unsigned long size)
*
mm_iommu_lookup_rm
struct mm_struct *mm
struct mm_struct
mm_struct
*mm
*
mm
unsigned long ua
unsigned long
ua
ua
unsigned long size
unsigned long
size
size
{	struct mm_iommu_table_group_mem_t *mem, *ret = NULL;	list_for_each_entry_lockless(mem, &mm->context.iommu_group_mem_list,			next) {		if ((mem->ua <= ua) &&				(ua + size <= mem->ua +				 (mem->entries << PAGE_SHIFT))) {			ret = mem;			break;		}	}	return ret;}
struct mm_iommu_table_group_mem_t *mem, *ret = NULL;
struct mm_iommu_table_group_mem_t *mem, *ret = NULL;
struct mm_iommu_table_group_mem_t
mm_iommu_table_group_mem_t
*mem
*
mem
*ret = NULL
*
ret
= NULL
NULL
NULL
list_for_each_entry_lockless(mem, &mm->context.iommu_group_mem_list,			next)
list_for_each_entry_lockless(mem, &mm->context.iommu_group_mem_list,			next)
list_for_each_entry_lockless
list_for_each_entry_lockless
mem
mem
&mm->context.iommu_group_mem_list
mm->context.iommu_group_mem_list
mm->context
mm
mm
context
iommu_group_mem_list
next
next
)
{		if ((mem->ua <= ua) &&				(ua + size <= mem->ua +				 (mem->entries << PAGE_SHIFT))) {			ret = mem;			break;		}	}
if ((mem->ua <= ua) &&				(ua + size <= mem->ua +				 (mem->entries << PAGE_SHIFT))) {			ret = mem;			break;		}
(mem->ua <= ua) &&				(ua + size <= mem->ua +				 (mem->entries << PAGE_SHIFT))
(mem->ua <= ua)
mem->ua <= ua
mem->ua
mem
mem
ua
ua
ua
(ua + size <= mem->ua +				 (mem->entries << PAGE_SHIFT))
ua + size <= mem->ua +				 (mem->entries << PAGE_SHIFT)
ua + size
ua
ua
size
size
mem->ua +				 (mem->entries << PAGE_SHIFT)
mem->ua
mem
mem
ua
(mem->entries << PAGE_SHIFT)
mem->entries << PAGE_SHIFT
mem->entries
mem
mem
entries
PAGE_SHIFT
PAGE_SHIFT
{			ret = mem;			break;		}
ret = mem;
ret = mem
ret
ret
mem
mem
break;
return ret;
ret
ret
-----joern-----
(29,30,0)
(0,7,0)
(29,15,0)
(20,2,0)
(6,36,0)
(26,10,0)
(35,15,0)
(3,6,0)
(2,9,0)
(12,14,0)
(6,7,0)
(8,6,0)
(14,11,0)
(14,0,0)
(27,10,0)
(5,26,0)
(6,3,0)
(29,2,0)
(1,5,0)
(34,29,0)
(32,2,0)
(31,29,0)
(4,9,0)
(0,14,0)
(19,3,0)
(10,26,0)
(18,3,0)
(14,36,0)
(21,13,0)
(16,14,0)
(33,13,0)
(22,30,0)
(24,15,0)
(26,5,0)
(7,6,0)
(15,30,0)
(17,30,0)
(13,5,0)
(25,10,0)
(5,13,0)
(7,0,0)
(26,0,0)
(28,30,0)
(0,26,0)
(23,22,0)
(25,27,1)
(6,36,1)
(7,0,1)
(6,8,1)
(31,4,1)
(0,14,1)
(29,2,1)
(12,6,1)
(2,32,1)
(5,13,1)
(16,12,1)
(18,15,1)
(14,11,1)
(31,7,1)
(21,10,1)
(32,20,1)
(1,13,1)
(13,33,1)
(29,15,1)
(3,19,1)
(34,29,1)
(26,5,1)
(7,6,1)
(24,35,1)
(26,10,1)
(10,25,1)
(15,24,1)
(14,16,1)
(27,14,1)
(29,31,1)
(19,18,1)
(4,2,1)
(5,1,1)
(14,36,1)
(0,26,1)
(33,21,1)
(20,7,1)
(6,3,1)
(8,3,1)
(27,6,2)
(25,6,2)
(6,36,2)
(2,7,2)
(14,11,2)
(0,26,2)
(5,13,2)
(26,5,2)
(20,7,2)
(21,6,2)
(0,6,2)
(14,6,2)
(7,0,2)
(10,6,2)
(0,14,2)
(29,2,2)
(12,6,2)
(1,6,2)
(33,6,2)
(34,29,2)
(26,10,2)
(14,36,2)
(26,6,2)
(4,7,2)
(16,6,2)
(29,15,2)
(7,6,2)
(5,6,2)
(6,3,2)
(13,6,2)
(32,7,2)
-----------------------------------
(0,ua + size <= mem->ua +\n\\n\\t\\t\\t\\t (mem->entries << PAGE_SHIFT)
(1,PAGE_SHIFT)
(2,ret = mem)
(3,mem->ua)
(4,break;)
(5,mem->entries << PAGE_SHIFT)
(6,mem->ua <= ua)
(7,(mem->ua <= ua)
(8,ua)
(9,)
(10,mem->ua)
(11,unsigned long size)
(12,ua)
(13,mem->entries)
(14,ua + size)
(15,*ret = NULL)
(16,size)
(17,ret)
(18,mem)
(19,ua)
(20,ret)
(21,mem)
(22,)
(23,if ((mem->ua <= ua)
(24,NULL)
(25,ua)
(26,mem->ua +\n\\n\\t\\t\\t\\t (mem->entries << PAGE_SHIFT)
(27,mem)
(28,mem)
(29,return ret;)
(30,)
(31,ret)
(32,mem)
(33,entries)
(34,RET)
(35,ret)
(36,unsigned long ua)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^