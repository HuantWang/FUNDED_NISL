-----label-----
1
-----code-----
pgprot_t pci_phys_mem_access_prot(struct file *file,
				  unsigned long pfn,
				  unsigned long size,
				  pgprot_t prot)
{
	struct pci_dev *pdev = NULL;
	struct resource *found = NULL;
	resource_size_t offset = ((resource_size_t)pfn) << PAGE_SHIFT;
	int i;

	if (page_is_ram(pfn))
		return prot;

	prot = pgprot_noncached(prot);
	for_each_pci_dev(pdev) {
		for (i = 0; i <= PCI_ROM_RESOURCE; i++) {
			struct resource *rp = &pdev->resource[i];
			int flags = rp->flags;

			/* Active and same type? */
			if ((flags & IORESOURCE_MEM) == 0)
				continue;
			/* In the range of this resource? */
			if (offset < (rp->start & PAGE_MASK) ||
			    offset > rp->end)
				continue;
			found = rp;
			break;
		}
		if (found)
			break;
	}
	if (found) {
		if (found->flags & IORESOURCE_PREFETCH)
			prot = pgprot_noncached_wc(prot);
		pci_dev_put(pdev);
	}

	pr_debug("PCI: Non-PCI map for %llx, prot: %lx\n",
		 (unsigned long long)offset, pgprot_val(prot));

	return prot;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
6,7
6,8
7,8
9,10
9,11
12,13
12,14
14,15
16,17
16,18
18,19
20,21
20,22
21,22
23,24
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
25,35
25,36
25,37
26,27
27,28
27,29
28,29
30,31
30,32
30,33
33,34
34,35
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
53,55
54,55
55,56
55,57
56,57
56,58
57,58
60,61
62,63
64,65
65,66
65,67
67,68
69,70
69,71
70,71
70,72
71,72
73,74
75,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
95,97
95,98
95,99
96,97
97,98
97,99
98,99
101,102
101,103
102,103
104,105
106,107
107,108
109,110
109,111
109,112
109,113
109,114
109,115
110,111
111,112
111,113
112,113
114,115
114,116
114,117
117,118
118,119
119,120
119,121
120,121
120,122
121,122
124,125
126,127
127,128
127,129
129,130
129,131
131,132
132,133
132,134
133,134
136,137
136,138
137,138
137,139
138,139
139,140
139,141
140,141
142,143
146,147
146,148
147,148
147,149
148,149
148,150
149,150
151,152
152,153
152,154
153,154
153,155
154,155
157,158
159,160
159,161
160,161
162,163
162,164
163,164
167,168
168,169
168,170
169,170
171,172
174,175
174,176
175,176
178,179
178,180
179,180
181,182
181,183
182,183
182,184
183,184
183,185
184,185
184,186
185,186
188,189
190,191
191,192
191,193
192,193
194,195
194,196
195,196
197,198
199,200
200,201
200,202
201,202
203,204
205,206
206,207
206,208
206,209
206,210
207,208
210,211
210,212
211,212
211,213
214,215
216,217
216,218
217,218
219,220
221,222
222,223
-----nextToken-----
3,5,8,10,11,13,15,17,19,22,24,29,31,32,35,39,41,42,45,49,51,58,59,61,63,66,68,72,74,77,81,84,86,90,92,99,100,103,105,108,113,115,116,122,123,125,128,130,134,135,141,143,144,145,150,155,156,158,161,164,165,166,170,172,173,176,177,180,186,187,189,193,196,198,202,204,208,209,212,213,215,218,220,223
-----computeFrom-----
53,54
53,55
79,80
79,81
97,98
97,99
101,102
101,103
137,138
137,139
139,140
139,141
147,148
147,149
148,149
148,150
152,153
152,154
159,160
159,161
168,169
168,170
183,184
183,185
191,192
191,193
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ContinueStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ContinueStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BreakStatement;IfStatement;IdExpression;Name;BreakStatement;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
pgprot_t pci_phys_mem_access_prot(struct file *file,				  unsigned long pfn,				  unsigned long size,				  pgprot_t prot){	struct pci_dev *pdev = NULL;	struct resource *found = NULL;	resource_size_t offset = ((resource_size_t)pfn) << PAGE_SHIFT;	int i;	if (page_is_ram(pfn))		return prot;	prot = pgprot_noncached(prot);	for_each_pci_dev(pdev) {		for (i = 0; i <= PCI_ROM_RESOURCE; i++) {			struct resource *rp = &pdev->resource[i];			int flags = rp->flags;			/* Active and same type? */			if ((flags & IORESOURCE_MEM) == 0)				continue;			/* In the range of this resource? */			if (offset < (rp->start & PAGE_MASK) ||			    offset > rp->end)				continue;			found = rp;			break;		}		if (found)			break;	}	if (found) {		if (found->flags & IORESOURCE_PREFETCH)			prot = pgprot_noncached_wc(prot);		pci_dev_put(pdev);	}	pr_debug("PCI: Non-PCI map for %llx, prot: %lx\n",		 (unsigned long long)offset, pgprot_val(prot));	return prot;}
pgprot_t
pgprot_t
pci_phys_mem_access_prot(struct file *file,				  unsigned long pfn,				  unsigned long size,				  pgprot_t prot)
pci_phys_mem_access_prot
struct file *file
struct file
file
*file
*
file
unsigned long pfn
unsigned long
pfn
pfn
unsigned long size
unsigned long
size
size
pgprot_t prot
pgprot_t
pgprot_t
prot
prot
{	struct pci_dev *pdev = NULL;	struct resource *found = NULL;	resource_size_t offset = ((resource_size_t)pfn) << PAGE_SHIFT;	int i;	if (page_is_ram(pfn))		return prot;	prot = pgprot_noncached(prot);	for_each_pci_dev(pdev) {		for (i = 0; i <= PCI_ROM_RESOURCE; i++) {			struct resource *rp = &pdev->resource[i];			int flags = rp->flags;			/* Active and same type? */			if ((flags & IORESOURCE_MEM) == 0)				continue;			/* In the range of this resource? */			if (offset < (rp->start & PAGE_MASK) ||			    offset > rp->end)				continue;			found = rp;			break;		}		if (found)			break;	}	if (found) {		if (found->flags & IORESOURCE_PREFETCH)			prot = pgprot_noncached_wc(prot);		pci_dev_put(pdev);	}	pr_debug("PCI: Non-PCI map for %llx, prot: %lx\n",		 (unsigned long long)offset, pgprot_val(prot));	return prot;}
struct pci_dev *pdev = NULL;
struct pci_dev *pdev = NULL;
struct pci_dev
pci_dev
*pdev = NULL
*
pdev
= NULL
NULL
NULL
struct resource *found = NULL;
struct resource *found = NULL;
struct resource
resource
*found = NULL
*
found
= NULL
NULL
NULL
resource_size_t offset = ((resource_size_t)pfn) << PAGE_SHIFT;
resource_size_t offset = ((resource_size_t)pfn) << PAGE_SHIFT;
resource_size_t
resource_size_t
offset = ((resource_size_t)pfn) << PAGE_SHIFT
offset
= ((resource_size_t)pfn) << PAGE_SHIFT
((resource_size_t)pfn) << PAGE_SHIFT
((resource_size_t)pfn)
(resource_size_t)pfn
resource_size_t
resource_size_t
resource_size_t

pfn
pfn
PAGE_SHIFT
PAGE_SHIFT
int i;
int i;
int
i
i
if (page_is_ram(pfn))		return prot;
page_is_ram(pfn)
page_is_ram
page_is_ram
pfn
pfn
return prot;
prot
prot
prot = pgprot_noncached(prot);
prot = pgprot_noncached(prot)
prot
prot
pgprot_noncached(prot)
pgprot_noncached
pgprot_noncached
prot
prot
for_each_pci_dev(pdev)
for_each_pci_dev(pdev)
for_each_pci_dev
for_each_pci_dev
pdev
pdev
)
{		for (i = 0; i <= PCI_ROM_RESOURCE; i++) {			struct resource *rp = &pdev->resource[i];			int flags = rp->flags;			/* Active and same type? */			if ((flags & IORESOURCE_MEM) == 0)				continue;			/* In the range of this resource? */			if (offset < (rp->start & PAGE_MASK) ||			    offset > rp->end)				continue;			found = rp;			break;		}		if (found)			break;	}
for (i = 0; i <= PCI_ROM_RESOURCE; i++) {			struct resource *rp = &pdev->resource[i];			int flags = rp->flags;			/* Active and same type? */			if ((flags & IORESOURCE_MEM) == 0)				continue;			/* In the range of this resource? */			if (offset < (rp->start & PAGE_MASK) ||			    offset > rp->end)				continue;			found = rp;			break;		}
i = 0;
i = 0
i
i
0
i <= PCI_ROM_RESOURCE
i
i
PCI_ROM_RESOURCE
PCI_ROM_RESOURCE
i++
i
i
{			struct resource *rp = &pdev->resource[i];			int flags = rp->flags;			/* Active and same type? */			if ((flags & IORESOURCE_MEM) == 0)				continue;			/* In the range of this resource? */			if (offset < (rp->start & PAGE_MASK) ||			    offset > rp->end)				continue;			found = rp;			break;		}
struct resource *rp = &pdev->resource[i];
struct resource *rp = &pdev->resource[i];
struct resource
resource
*rp = &pdev->resource[i]
*
rp
= &pdev->resource[i]
&pdev->resource[i]
pdev->resource[i]
pdev->resource
pdev
pdev
resource
i
i
int flags = rp->flags;
int flags = rp->flags;
int
flags = rp->flags
flags
= rp->flags
rp->flags
rp
rp
flags
if ((flags & IORESOURCE_MEM) == 0)				continue;
(flags & IORESOURCE_MEM) == 0
(flags & IORESOURCE_MEM)
flags & IORESOURCE_MEM
flags
flags
IORESOURCE_MEM
IORESOURCE_MEM
0
continue;
if (offset < (rp->start & PAGE_MASK) ||			    offset > rp->end)				continue;
offset < (rp->start & PAGE_MASK) ||			    offset > rp->end
offset < (rp->start & PAGE_MASK)
offset
offset
(rp->start & PAGE_MASK)
rp->start & PAGE_MASK
rp->start
rp
rp
start
PAGE_MASK
PAGE_MASK
offset > rp->end
offset
offset
rp->end
rp
rp
end
continue;
found = rp;
found = rp
found
found
rp
rp
break;
if (found)			break;
found
found
break;
if (found) {		if (found->flags & IORESOURCE_PREFETCH)			prot = pgprot_noncached_wc(prot);		pci_dev_put(pdev);	}
found
found
{		if (found->flags & IORESOURCE_PREFETCH)			prot = pgprot_noncached_wc(prot);		pci_dev_put(pdev);	}
if (found->flags & IORESOURCE_PREFETCH)			prot = pgprot_noncached_wc(prot);
found->flags & IORESOURCE_PREFETCH
found->flags
found
found
flags
IORESOURCE_PREFETCH
IORESOURCE_PREFETCH
prot = pgprot_noncached_wc(prot);
prot = pgprot_noncached_wc(prot)
prot
prot
pgprot_noncached_wc(prot)
pgprot_noncached_wc
pgprot_noncached_wc
prot
prot
pci_dev_put(pdev);
pci_dev_put(pdev)
pci_dev_put
pci_dev_put
pdev
pdev
pr_debug("PCI: Non-PCI map for %llx, prot: %lx\n",		 (unsigned long long)offset, pgprot_val(prot));
pr_debug("PCI: Non-PCI map for %llx, prot: %lx\n",		 (unsigned long long)offset, pgprot_val(prot))
pr_debug
pr_debug
"PCI: Non-PCI map for %llx, prot: %lx\n"
(unsigned long long)offset
unsigned long long
unsigned long long

offset
offset
pgprot_val(prot)
pgprot_val
pgprot_val
prot
prot
return prot;
prot
prot
-----joern-----
(56,23,0)
(56,86,0)
(90,101,0)
(24,45,0)
(12,37,0)
(63,3,0)
(75,80,0)
(69,12,0)
(22,91,0)
(62,87,0)
(12,106,0)
(36,106,0)
(102,3,0)
(87,13,0)
(67,69,0)
(80,75,0)
(5,23,0)
(13,87,0)
(7,30,0)
(56,106,0)
(69,67,0)
(44,78,0)
(40,91,0)
(105,29,0)
(38,58,0)
(14,78,0)
(87,26,0)
(92,6,0)
(23,8,0)
(17,66,0)
(35,19,0)
(51,34,0)
(26,87,0)
(60,98,0)
(56,41,0)
(66,30,0)
(29,13,0)
(13,29,0)
(9,5,0)
(37,49,0)
(82,85,0)
(101,19,0)
(27,106,0)
(71,23,0)
(52,49,0)
(68,12,0)
(88,32,0)
(72,67,0)
(67,5,0)
(94,69,0)
(69,83,0)
(85,53,0)
(30,98,0)
(5,86,0)
(16,25,0)
(46,0,0)
(84,29,0)
(55,32,0)
(15,85,0)
(78,106,0)
(85,30,0)
(34,28,0)
(2,45,0)
(57,75,0)
(101,32,0)
(59,51,0)
(50,37,0)
(23,106,0)
(75,53,0)
(19,25,0)
(20,28,0)
(45,41,0)
(19,101,0)
(104,53,0)
(96,28,0)
(5,67,0)
(66,17,0)
(5,41,0)
(97,98,0)
(29,30,0)
(89,106,0)
(40,32,0)
(21,66,0)
(8,41,0)
(17,12,0)
(93,34,0)
(10,98,0)
(86,70,0)
(37,12,0)
(34,3,0)
(108,13,0)
(28,30,0)
(31,8,0)
(26,17,0)
(23,41,0)
(49,103,0)
(34,51,0)
(2,56,0)
(74,98,0)
(32,106,0)
(70,23,0)
(3,106,0)
(103,49,0)
(43,19,0)
(33,17,0)
(70,86,0)
(58,25,0)
(47,66,0)
(99,86,0)
(35,30,0)
(0,25,0)
(100,92,0)
(30,35,0)
(17,26,0)
(54,40,0)
(49,37,0)
(49,6,0)
(53,85,0)
(11,106,0)
(87,12,0)
(19,35,0)
(18,56,0)
(86,41,0)
(1,106,0)
(53,98,0)
(42,25,0)
(64,58,0)
(107,75,0)
(81,101,0)
(83,69,0)
(67,106,0)
(70,41,0)
(28,98,0)
(8,23,0)
(4,98,0)
(79,70,0)
(77,106,0)
(61,80,0)
(39,34,0)
(70,23,1)
(86,41,1)
(39,93,1)
(69,12,1)
(85,30,1)
(21,47,1)
(48,58,1)
(69,94,1)
(25,42,1)
(88,55,1)
(87,12,1)
(75,53,1)
(80,75,1)
(66,21,1)
(45,24,1)
(31,71,1)
(93,76,1)
(82,15,1)
(5,41,1)
(40,54,1)
(33,87,1)
(16,23,1)
(84,105,1)
(38,64,1)
(29,84,1)
(12,37,1)
(0,25,1)
(3,63,1)
(63,102,1)
(54,86,1)
(107,57,1)
(75,107,1)
(81,90,1)
(96,20,1)
(67,69,1)
(101,81,1)
(45,41,1)
(94,72,1)
(23,8,1)
(29,30,1)
(19,43,1)
(8,41,1)
(86,70,1)
(34,39,1)
(76,65,1)
(20,26,1)
(57,53,1)
(28,96,1)
(108,29,1)
(70,41,1)
(76,48,1)
(26,17,1)
(71,92,1)
(40,32,1)
(42,16,1)
(49,103,1)
(46,95,1)
(64,25,1)
(92,6,1)
(37,49,1)
(2,56,1)
(104,30,1)
(56,18,1)
(34,28,1)
(56,41,1)
(13,29,1)
(92,100,1)
(49,52,1)
(70,79,1)
(34,3,1)
(46,73,1)
(54,51,1)
(100,12,1)
(80,61,1)
(67,5,1)
(58,25,1)
(19,101,1)
(101,32,1)
(49,6,1)
(19,25,1)
(23,41,1)
(7,58,1)
(65,48,1)
(56,23,1)
(90,7,1)
(73,26,1)
(24,92,1)
(69,83,1)
(43,101,1)
(37,50,1)
(18,67,1)
(66,30,1)
(32,88,1)
(56,86,1)
(105,62,1)
(17,66,1)
(102,32,1)
(9,69,1)
(13,108,1)
(0,46,1)
(50,49,1)
(5,9,1)
(68,3,1)
(58,38,1)
(17,12,1)
(51,34,1)
(52,68,1)
(28,30,1)
(15,104,1)
(87,13,1)
(35,19,1)
(48,10,1)
(30,35,1)
(47,33,1)
(59,34,1)
(8,31,1)
(85,82,1)
(10,28,1)
(72,40,1)
(99,51,1)
(53,85,1)
(2,45,1)
(26,87,1)
(79,99,1)
(5,86,1)
(61,75,1)
(72,76,1)
(51,59,1)
(95,80,1)
(62,80,1)
(64,0,1)
(5,23,1)
(26,87,2)
(28,26,2)
(65,48,2)
(81,58,2)
(21,87,2)
(64,26,2)
(56,92,2)
(19,101,2)
(5,86,2)
(101,58,2)
(51,76,2)
(107,58,2)
(99,51,2)
(25,92,2)
(101,32,2)
(23,41,2)
(42,92,2)
(84,80,2)
(29,30,2)
(61,58,2)
(96,26,2)
(70,51,2)
(62,80,2)
(58,92,2)
(64,80,2)
(53,58,2)
(92,6,2)
(16,92,2)
(35,19,2)
(34,28,2)
(19,58,2)
(71,92,2)
(37,49,2)
(94,92,2)
(70,23,2)
(40,32,2)
(95,80,2)
(105,80,2)
(76,92,2)
(2,45,2)
(23,8,2)
(58,25,2)
(0,25,2)
(23,92,2)
(13,80,2)
(15,58,2)
(67,5,2)
(17,12,2)
(9,92,2)
(47,87,2)
(75,53,2)
(73,26,2)
(82,58,2)
(30,58,2)
(93,76,2)
(48,92,2)
(90,58,2)
(51,34,2)
(30,35,2)
(46,80,2)
(64,92,2)
(58,80,2)
(34,76,2)
(19,25,2)
(38,26,2)
(5,23,2)
(17,87,2)
(54,76,2)
(72,92,2)
(87,13,2)
(69,12,2)
(43,58,2)
(56,86,2)
(38,92,2)
(45,92,2)
(57,58,2)
(46,26,2)
(86,51,2)
(49,6,2)
(67,92,2)
(69,83,2)
(17,66,2)
(13,29,2)
(86,41,2)
(10,26,2)
(56,23,2)
(80,58,2)
(85,58,2)
(35,58,2)
(33,87,2)
(79,51,2)
(26,17,2)
(26,80,2)
(87,80,2)
(40,76,2)
(0,80,2)
(75,58,2)
(20,26,2)
(5,92,2)
(2,56,2)
(66,87,2)
(12,37,2)
(59,76,2)
(24,92,2)
(56,41,2)
(104,58,2)
(67,69,2)
(80,75,2)
(8,41,2)
(49,103,2)
(38,80,2)
(7,58,2)
(18,92,2)
(8,92,2)
(31,92,2)
(86,70,2)
(0,26,2)
(108,80,2)
(39,76,2)
(66,30,2)
(45,41,2)
(5,41,2)
(70,41,2)
(85,30,2)
(29,80,2)
(58,26,2)
(69,92,2)
(87,12,2)
(28,30,2)
(53,85,2)
(34,3,2)
-----------------------------------
(0,i++)
(1,found)
(2,RET)
(3,*found = NULL)
(4,rp)
(5,pgprot_val(prot)
(6,unsigned long pfn)
(7,rp)
(8,pgprot_noncached(prot)
(9,prot)
(10,break;)
(11,if (found)
(12,offset = ((resource_size_t)
(13,rp->start & PAGE_MASK)
(14,for (i = 0; i <= PCI_ROM_RESOURCE; i++)
(15,rp)
(16,i)
(17,offset > rp->end)
(18,prot)
(19,pdev->resource[i])
(20,found)
(21,end)
(22,if (found->flags & IORESOURCE_PREFETCH)
(23,prot = pgprot_noncached(prot)
(24,prot)
(25,i = 0)
(26,offset < (rp->start & PAGE_MASK)
(27,pdev)
(28,found = rp)
(29,rp->start)
(30,*rp = &pdev->resource[i])
(31,prot)
(32,*pdev = NULL)
(33,offset)
(34,found->flags)
(35,&pdev->resource[i])
(36,i)
(37,((resource_size_t)
(38,PCI_ROM_RESOURCE)
(39,flags)
(40,pci_dev_put(pdev)
(41,pgprot_t prot)
(42,0)
(43,i)
(44,if (found)
(45,return prot;)
(46,i)
(47,rp)
(48,found)
(49,(resource_size_t)
(50,PAGE_SHIFT)
(51,found->flags & IORESOURCE_PREFETCH)
(52,pfn)
(53,flags = rp->flags)
(54,pdev)
(55,pdev)
(56,return prot;)
(57,flags)
(58,i <= PCI_ROM_RESOURCE)
(59,IORESOURCE_PREFETCH)
(60,if ((flags & IORESOURCE_MEM)
(61,0)
(62,offset)
(63,NULL)
(64,i)
(65,break;)
(66,rp->end)
(67,pr_debug("PCI: Non-PCI map for %llx, prot: %lx\\n",\n\\n\\t\\t (unsigned long long)
(68,offset)
(69,(unsigned long long)
(70,pgprot_noncached_wc(prot)
(71,prot)
(72,"PCI: Non-PCI map for %llx, prot: %lx\\n")
(73,continue;)
(74,flags)
(75,flags & IORESOURCE_MEM)
(76,found)
(77,offset)
(78,)
(79,prot)
(80,(flags & IORESOURCE_MEM)
(81,resource)
(82,flags)
(83,unsigned long long)
(84,start)
(85,rp->flags)
(86,prot = pgprot_noncached_wc(prot)
(87,offset < (rp->start & PAGE_MASK)
(88,NULL)
(89,if (page_is_ram(pfn)
(90,pdev)
(91,)
(92,page_is_ram(pfn)
(93,found)
(94,offset)
(95,continue;)
(96,rp)
(97,if (offset < (rp->start & PAGE_MASK)
(98,)
(99,prot)
(100,pfn)
(101,pdev->resource)
(102,found)
(103,resource_size_t)
(104,flags)
(105,rp)
(106,)
(107,IORESOURCE_MEM)
(108,PAGE_MASK)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^