-----label-----
1
-----code-----
static void intel_pstate_set_pstate(struct cpudata *cpu, int pstate)
{
	int max_perf, min_perf;

	intel_pstate_get_min_max(cpu, &min_perf, &max_perf);

	pstate = clamp_t(int, pstate, min_perf, max_perf);

	if (pstate == cpu->pstate.current_pstate)
		return;

	trace_cpu_frequency(pstate * 100000, cpu->cpu);

	cpu->pstate.current_pstate = pstate;
	if (limits.no_turbo)
		wrmsrl(MSR_IA32_PERF_CTL, BIT(32) | (pstate << 8));
	else
		wrmsrl(MSR_IA32_PERF_CTL, pstate << 8);

}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
16,17
17,18
17,19
17,20
19,20
21,22
23,24
24,25
24,26
24,27
24,28
25,26
27,28
29,30
30,31
32,33
33,34
35,36
36,37
36,38
37,38
37,39
38,39
40,41
40,42
41,42
41,43
42,43
47,48
48,49
48,50
48,51
49,50
51,52
51,53
52,53
55,56
55,57
56,57
59,60
60,61
60,62
61,62
61,63
62,63
62,64
63,64
67,68
69,70
69,71
69,72
70,71
70,72
71,72
74,75
75,76
75,77
75,78
76,77
78,79
80,81
80,82
81,82
81,83
82,83
85,86
86,87
86,88
87,88
90,91
91,92
91,93
91,94
92,93
94,95
96,97
96,98
97,98
-----nextToken-----
2,4,7,9,10,12,14,18,20,22,26,28,31,34,39,43,44,45,46,50,53,54,57,58,64,65,66,68,72,73,77,79,83,84,88,89,93,95,98,99
-----computeFrom-----
37,38
37,39
51,52
51,53
60,61
60,62
80,81
80,82
86,87
86,88
96,97
96,98
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void intel_pstate_set_pstate(struct cpudata *cpu, int pstate){	int max_perf, min_perf;	intel_pstate_get_min_max(cpu, &min_perf, &max_perf);	pstate = clamp_t(int, pstate, min_perf, max_perf);	if (pstate == cpu->pstate.current_pstate)		return;	trace_cpu_frequency(pstate * 100000, cpu->cpu);	cpu->pstate.current_pstate = pstate;	if (limits.no_turbo)		wrmsrl(MSR_IA32_PERF_CTL, BIT(32) | (pstate << 8));	else		wrmsrl(MSR_IA32_PERF_CTL, pstate << 8);}
static void
intel_pstate_set_pstate(struct cpudata *cpu, int pstate)
intel_pstate_set_pstate
struct cpudata *cpu
struct cpudata
cpudata
*cpu
*
cpu
int pstate
int
pstate
pstate
{	int max_perf, min_perf;	intel_pstate_get_min_max(cpu, &min_perf, &max_perf);	pstate = clamp_t(int, pstate, min_perf, max_perf);	if (pstate == cpu->pstate.current_pstate)		return;	trace_cpu_frequency(pstate * 100000, cpu->cpu);	cpu->pstate.current_pstate = pstate;	if (limits.no_turbo)		wrmsrl(MSR_IA32_PERF_CTL, BIT(32) | (pstate << 8));	else		wrmsrl(MSR_IA32_PERF_CTL, pstate << 8);}
int max_perf, min_perf;
int max_perf, min_perf;
int
max_perf
max_perf
min_perf
min_perf
intel_pstate_get_min_max(cpu, &min_perf, &max_perf);
intel_pstate_get_min_max(cpu, &min_perf, &max_perf)
intel_pstate_get_min_max
intel_pstate_get_min_max
cpu
cpu
&min_perf
min_perf
min_perf
&max_perf
max_perf
max_perf
pstate = clamp_t(int, pstate, min_perf, max_perf);
if (pstate == cpu->pstate.current_pstate)		return;
pstate == cpu->pstate.current_pstate
pstate
pstate
cpu->pstate.current_pstate
cpu->pstate
cpu
cpu
pstate
current_pstate
return;
trace_cpu_frequency(pstate * 100000, cpu->cpu);
trace_cpu_frequency(pstate * 100000, cpu->cpu)
trace_cpu_frequency
trace_cpu_frequency
pstate * 100000
pstate
pstate
100000
cpu->cpu
cpu
cpu
cpu
cpu->pstate.current_pstate = pstate;
cpu->pstate.current_pstate = pstate
cpu->pstate.current_pstate
cpu->pstate
cpu
cpu
pstate
current_pstate
pstate
pstate
if (limits.no_turbo)		wrmsrl(MSR_IA32_PERF_CTL, BIT(32) | (pstate << 8));	else		wrmsrl(MSR_IA32_PERF_CTL, pstate << 8);
limits.no_turbo
limits
limits
no_turbo
wrmsrl(MSR_IA32_PERF_CTL, BIT(32) | (pstate << 8));
wrmsrl(MSR_IA32_PERF_CTL, BIT(32) | (pstate << 8))
wrmsrl
wrmsrl
MSR_IA32_PERF_CTL
MSR_IA32_PERF_CTL
BIT(32) | (pstate << 8)
BIT(32)
BIT
BIT
32
(pstate << 8)
pstate << 8
pstate
pstate
8
wrmsrl(MSR_IA32_PERF_CTL, pstate << 8);
wrmsrl(MSR_IA32_PERF_CTL, pstate << 8)
wrmsrl
wrmsrl
MSR_IA32_PERF_CTL
MSR_IA32_PERF_CTL
pstate << 8
pstate
pstate
8
-----joern-----
(42,52,0)
(38,3,0)
(16,4,0)
(41,56,0)
(27,9,0)
(12,14,0)
(28,34,0)
(3,38,0)
(3,34,0)
(26,17,0)
(57,54,0)
(32,56,0)
(32,34,0)
(22,26,0)
(39,34,0)
(33,56,0)
(11,24,0)
(3,32,0)
(15,5,0)
(20,44,0)
(46,54,0)
(9,44,0)
(2,50,0)
(47,31,0)
(45,52,0)
(9,28,0)
(7,39,0)
(1,46,0)
(57,17,0)
(44,9,0)
(51,50,0)
(44,17,0)
(16,17,0)
(40,28,0)
(6,38,0)
(8,46,0)
(0,44,0)
(2,39,0)
(16,31,0)
(58,2,0)
(28,31,0)
(55,57,0)
(56,34,0)
(23,57,0)
(48,5,0)
(26,52,0)
(52,42,0)
(25,3,0)
(37,58,0)
(36,31,0)
(42,32,0)
(30,39,0)
(54,57,0)
(53,26,0)
(52,26,0)
(28,32,0)
(32,31,0)
(2,58,0)
(54,46,0)
(54,31,0)
(24,16,0)
(39,32,0)
(35,4,0)
(49,31,0)
(46,34,0)
(4,16,0)
(29,31,0)
(16,24,0)
(21,42,0)
(50,2,0)
(13,32,0)
(39,2,0)
(46,32,0)
(18,56,0)
(42,34,0)
(43,3,0)
(10,16,0)
(19,56,0)
(56,32,0)
(15,28,1)
(28,40,1)
(44,0,1)
(21,32,1)
(46,32,1)
(45,26,1)
(42,52,1)
(28,32,1)
(2,39,1)
(13,16,1)
(42,34,1)
(12,50,1)
(27,44,1)
(58,37,1)
(24,11,1)
(40,9,1)
(50,2,1)
(23,46,1)
(48,15,1)
(56,34,1)
(3,25,1)
(3,32,1)
(57,55,1)
(26,53,1)
(6,5,1)
(25,43,1)
(41,33,1)
(16,4,1)
(2,58,1)
(12,38,1)
(22,21,1)
(11,4,1)
(1,8,1)
(30,58,1)
(14,42,1)
(12,14,1)
(9,44,1)
(26,17,1)
(5,48,1)
(43,6,1)
(37,51,1)
(52,26,1)
(20,54,1)
(54,57,1)
(39,32,1)
(33,18,1)
(4,35,1)
(46,1,1)
(9,27,1)
(32,34,1)
(56,41,1)
(35,10,1)
(19,13,1)
(3,34,1)
(53,22,1)
(32,56,1)
(18,19,1)
(7,30,1)
(57,17,1)
(28,34,1)
(0,20,1)
(39,34,1)
(16,24,1)
(46,34,1)
(55,23,1)
(51,5,1)
(39,7,1)
(44,17,1)
(16,17,1)
(42,32,1)
(8,42,1)
(54,46,1)
(38,3,1)
(52,45,1)
(55,42,2)
(30,5,2)
(50,2,2)
(16,24,2)
(39,5,2)
(3,32,2)
(25,5,2)
(46,34,2)
(38,5,2)
(5,42,2)
(57,17,2)
(16,4,2)
(50,5,2)
(9,42,2)
(46,32,2)
(8,42,2)
(48,42,2)
(51,5,2)
(39,34,2)
(2,39,2)
(32,56,2)
(32,34,2)
(57,42,2)
(3,5,2)
(39,32,2)
(44,17,2)
(0,42,2)
(43,5,2)
(38,3,2)
(14,42,2)
(54,42,2)
(9,44,2)
(37,5,2)
(28,42,2)
(27,42,2)
(40,42,2)
(7,5,2)
(44,42,2)
(42,34,2)
(6,5,2)
(52,26,2)
(2,5,2)
(56,34,2)
(28,32,2)
(1,42,2)
(54,57,2)
(42,32,2)
(23,42,2)
(46,42,2)
(12,14,2)
(15,42,2)
(20,42,2)
(28,34,2)
(2,58,2)
(54,46,2)
(16,17,2)
(58,5,2)
(42,52,2)
(3,34,2)
(26,17,2)
-----------------------------------
(0,pstate)
(1,100000)
(2,BIT(32)
(3,pstate << 8)
(4,&min_perf)
(5,limits.no_turbo)
(6,MSR_IA32_PERF_CTL)
(7,8)
(8,pstate)
(9,cpu->pstate.current_pstate)
(10,cpu)
(11,max_perf)
(12,RET)
(13,pstate)
(14,return;)
(15,limits)
(16,intel_pstate_get_min_max(cpu, &min_perf, &max_perf)
(17,struct cpudata *cpu)
(18,pstate)
(19,int)
(20,cpu)
(21,pstate)
(22,cpu)
(23,cpu)
(24,&max_perf)
(25,8)
(26,cpu->pstate)
(27,current_pstate)
(28,cpu->pstate.current_pstate = pstate)
(29,if (pstate == cpu->pstate.current_pstate)
(30,pstate)
(31,)
(32,pstate = clamp_t(int, pstate, min_perf, max_perf)
(33,min_perf)
(34,int pstate)
(35,min_perf)
(36,if (limits.no_turbo)
(37,32)
(38,wrmsrl(MSR_IA32_PERF_CTL, pstate << 8)
(39,pstate << 8)
(40,pstate)
(41,max_perf)
(42,pstate == cpu->pstate.current_pstate)
(43,pstate)
(44,cpu->pstate)
(45,current_pstate)
(46,pstate * 100000)
(47,max_perf)
(48,no_turbo)
(49,min_perf)
(50,wrmsrl(MSR_IA32_PERF_CTL, BIT(32)
(51,MSR_IA32_PERF_CTL)
(52,cpu->pstate.current_pstate)
(53,pstate)
(54,trace_cpu_frequency(pstate * 100000, cpu->cpu)
(55,cpu)
(56,clamp_t(int, pstate, min_perf, max_perf)
(57,cpu->cpu)
(58,BIT(32)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^