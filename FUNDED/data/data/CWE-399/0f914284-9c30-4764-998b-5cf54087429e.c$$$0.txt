-----label-----
1
-----code-----
static bool manage_workers(struct worker *worker)
{
	struct worker_pool *pool = worker->pool;

	/*
	 * Anyone who successfully grabs manager_arb wins the arbitration
	 * and becomes the manager.  mutex_trylock() on pool->manager_arb
	 * failure while holding pool->lock reliably indicates that someone
	 * else is managing the pool and the worker which failed trylock
	 * can proceed to executing work items.  This means that anyone
	 * grabbing manager_arb is responsible for actually performing
	 * manager duties.  If manager_arb is grabbed and released without
	 * actual management, the pool may stall indefinitely.
	 */
	if (!mutex_trylock(&pool->manager_arb))
		return false;

	maybe_create_worker(pool);

	mutex_unlock(&pool->manager_arb);
	return true;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
24,26
25,26
26,27
26,28
27,28
29,30
30,31
30,32
31,32
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
47,48
47,49
48,49
51,52
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,28,32,33,35,39,41,45,49,50,52
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static bool manage_workers(struct worker *worker){	struct worker_pool *pool = worker->pool;	/*	 * Anyone who successfully grabs manager_arb wins the arbitration	 * and becomes the manager.  mutex_trylock() on pool->manager_arb	 * failure while holding pool->lock reliably indicates that someone	 * else is managing the pool and the worker which failed trylock	 * can proceed to executing work items.  This means that anyone	 * grabbing manager_arb is responsible for actually performing	 * manager duties.  If manager_arb is grabbed and released without	 * actual management, the pool may stall indefinitely.	 */	if (!mutex_trylock(&pool->manager_arb))		return false;	maybe_create_worker(pool);	mutex_unlock(&pool->manager_arb);	return true;}
static bool
manage_workers(struct worker *worker)
manage_workers
struct worker *worker
struct worker
worker
*worker
*
worker
{	struct worker_pool *pool = worker->pool;	/*	 * Anyone who successfully grabs manager_arb wins the arbitration	 * and becomes the manager.  mutex_trylock() on pool->manager_arb	 * failure while holding pool->lock reliably indicates that someone	 * else is managing the pool and the worker which failed trylock	 * can proceed to executing work items.  This means that anyone	 * grabbing manager_arb is responsible for actually performing	 * manager duties.  If manager_arb is grabbed and released without	 * actual management, the pool may stall indefinitely.	 */	if (!mutex_trylock(&pool->manager_arb))		return false;	maybe_create_worker(pool);	mutex_unlock(&pool->manager_arb);	return true;}
struct worker_pool *pool = worker->pool;
struct worker_pool *pool = worker->pool;
struct worker_pool
worker_pool
*pool = worker->pool
*
pool
= worker->pool
worker->pool
worker
worker
pool
if (!mutex_trylock(&pool->manager_arb))		return false;
!mutex_trylock(&pool->manager_arb)
mutex_trylock(&pool->manager_arb)
mutex_trylock
mutex_trylock
&pool->manager_arb
pool->manager_arb
pool
pool
manager_arb
return false;
false
maybe_create_worker(pool);
maybe_create_worker(pool)
maybe_create_worker
maybe_create_worker
pool
pool
mutex_unlock(&pool->manager_arb);
mutex_unlock(&pool->manager_arb)
mutex_unlock
mutex_unlock
&pool->manager_arb
pool->manager_arb
pool
pool
manager_arb
return true;
true
-----joern-----
(1,5,0)
(26,3,0)
(3,18,0)
(16,14,0)
(17,13,0)
(25,14,0)
(14,20,0)
(26,5,0)
(2,7,0)
(21,12,0)
(16,5,0)
(15,6,0)
(19,1,0)
(7,23,0)
(3,26,0)
(18,3,0)
(23,7,0)
(6,5,0)
(13,23,0)
(10,12,0)
(24,5,0)
(11,16,0)
(7,16,0)
(0,7,0)
(9,18,0)
(18,16,0)
(8,14,0)
(23,13,0)
(6,16,0)
(14,16,0)
(21,1,0)
(22,18,0)
(13,17,0)
(4,5,0)
(13,23,1)
(19,26,1)
(1,19,1)
(7,16,1)
(7,0,1)
(17,13,1)
(22,6,1)
(18,9,1)
(10,17,1)
(6,15,1)
(15,17,1)
(21,12,1)
(18,16,1)
(25,11,1)
(12,10,1)
(6,16,1)
(14,20,1)
(3,18,1)
(2,16,1)
(14,8,1)
(21,1,1)
(8,25,1)
(23,7,1)
(26,3,1)
(0,2,1)
(9,22,1)
(16,14,1)
(10,17,2)
(14,20,2)
(21,1,2)
(16,14,2)
(26,17,2)
(13,23,2)
(7,16,2)
(22,17,2)
(9,17,2)
(18,16,2)
(18,17,2)
(15,17,2)
(23,7,2)
(19,17,2)
(6,16,2)
(26,3,2)
(3,17,2)
(12,17,2)
(17,13,2)
(6,17,2)
(3,18,2)
(1,17,2)
(21,12,2)
-----------------------------------
(0,manager_arb)
(1,return true;)
(2,pool)
(3,&pool->manager_arb)
(4,pool)
(5,)
(6,maybe_create_worker(pool)
(7,pool->manager_arb)
(8,pool)
(9,manager_arb)
(10,false)
(11,pool)
(12,return false;)
(13,mutex_trylock(&pool->manager_arb)
(14,worker->pool)
(15,pool)
(16,*pool = worker->pool)
(17,!mutex_trylock(&pool->manager_arb)
(18,pool->manager_arb)
(19,true)
(20,struct worker *worker)
(21,RET)
(22,pool)
(23,&pool->manager_arb)
(24,if (!mutex_trylock(&pool->manager_arb)
(25,worker)
(26,mutex_unlock(&pool->manager_arb)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^