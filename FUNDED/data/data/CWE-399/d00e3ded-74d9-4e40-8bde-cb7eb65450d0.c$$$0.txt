-----label-----
0
-----code-----
static void binder_set_nice(long nice)
{
	long min_nice;
	if (can_nice(current, nice)) {
		set_user_nice(current, nice);
		return;
	}
	min_nice = rlimit_to_nice(current->signal->rlim[RLIMIT_NICE].rlim_cur);
	binder_debug(BINDER_DEBUG_PRIORITY_CAP,
		     "%d: nice value %ld not allowed use %ld instead\n",
		      current->pid, nice, min_nice);
	set_user_nice(current, min_nice);
	if (min_nice <= MAX_NICE)
		return;
	binder_user_error("%d RLIMIT_NICE not set\n", current->pid);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
10,11
11,12
11,13
13,14
15,16
15,17
16,17
16,18
16,19
17,18
19,20
21,22
23,24
23,25
24,25
25,26
25,27
25,28
26,27
28,29
30,31
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
40,42
41,42
41,43
42,43
42,44
43,44
43,45
44,45
48,49
51,52
52,53
52,54
52,55
52,56
52,57
52,58
53,54
55,56
58,59
58,60
59,60
62,63
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
74,75
74,76
75,76
75,77
76,77
78,79
81,82
82,83
82,84
82,85
83,84
86,87
86,88
87,88
-----nextToken-----
2,4,6,8,12,14,18,20,22,27,29,31,32,36,39,45,46,47,49,50,54,56,57,60,61,63,65,69,71,73,77,79,80,84,85,88,89
-----computeFrom-----
34,35
34,36
75,76
75,77
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;
-----ast_node-----
static void binder_set_nice(long nice){	long min_nice;	if (can_nice(current, nice)) {		set_user_nice(current, nice);		return;	}	min_nice = rlimit_to_nice(current->signal->rlim[RLIMIT_NICE].rlim_cur);	binder_debug(BINDER_DEBUG_PRIORITY_CAP,		     "%d: nice value %ld not allowed use %ld instead\n",		      current->pid, nice, min_nice);	set_user_nice(current, min_nice);	if (min_nice <= MAX_NICE)		return;	binder_user_error("%d RLIMIT_NICE not set\n", current->pid);}
static void
binder_set_nice(long nice)
binder_set_nice
long nice
long
nice
nice
{	long min_nice;	if (can_nice(current, nice)) {		set_user_nice(current, nice);		return;	}	min_nice = rlimit_to_nice(current->signal->rlim[RLIMIT_NICE].rlim_cur);	binder_debug(BINDER_DEBUG_PRIORITY_CAP,		     "%d: nice value %ld not allowed use %ld instead\n",		      current->pid, nice, min_nice);	set_user_nice(current, min_nice);	if (min_nice <= MAX_NICE)		return;	binder_user_error("%d RLIMIT_NICE not set\n", current->pid);}
long min_nice;
long min_nice;
long
min_nice
min_nice
if (can_nice(current, nice)) {		set_user_nice(current, nice);		return;	}
can_nice(current, nice)
can_nice
can_nice
current
current
nice
nice
{		set_user_nice(current, nice);		return;	}
set_user_nice(current, nice);
set_user_nice(current, nice)
set_user_nice
set_user_nice
current
current
nice
nice
return;
min_nice = rlimit_to_nice(current->signal->rlim[RLIMIT_NICE].rlim_cur);
min_nice = rlimit_to_nice(current->signal->rlim[RLIMIT_NICE].rlim_cur)
min_nice
min_nice
rlimit_to_nice(current->signal->rlim[RLIMIT_NICE].rlim_cur)
rlimit_to_nice
rlimit_to_nice
current->signal->rlim[RLIMIT_NICE].rlim_cur
current->signal->rlim[RLIMIT_NICE]
current->signal->rlim
current->signal
current
current
signal
rlim
RLIMIT_NICE
RLIMIT_NICE
rlim_cur
binder_debug(BINDER_DEBUG_PRIORITY_CAP,		     "%d: nice value %ld not allowed use %ld instead\n",		      current->pid, nice, min_nice);
binder_debug(BINDER_DEBUG_PRIORITY_CAP,		     "%d: nice value %ld not allowed use %ld instead\n",		      current->pid, nice, min_nice)
binder_debug
binder_debug
BINDER_DEBUG_PRIORITY_CAP
BINDER_DEBUG_PRIORITY_CAP
"%d: nice value %ld not allowed use %ld instead\n"
current->pid
current
current
pid
nice
nice
min_nice
min_nice
set_user_nice(current, min_nice);
set_user_nice(current, min_nice)
set_user_nice
set_user_nice
current
current
min_nice
min_nice
if (min_nice <= MAX_NICE)		return;
min_nice <= MAX_NICE
min_nice
min_nice
MAX_NICE
MAX_NICE
return;
binder_user_error("%d RLIMIT_NICE not set\n", current->pid);
binder_user_error("%d RLIMIT_NICE not set\n", current->pid)
binder_user_error
binder_user_error
"%d RLIMIT_NICE not set\n"
current->pid
current
current
pid
-----joern-----
(33,16,0)
(25,34,0)
(14,18,0)
(15,25,0)
(41,6,0)
(36,10,0)
(7,18,0)
(45,12,0)
(9,18,0)
(37,42,0)
(6,24,0)
(35,16,0)
(6,42,0)
(4,38,0)
(38,16,0)
(30,8,0)
(22,42,0)
(2,24,0)
(3,8,0)
(5,3,0)
(17,10,0)
(16,35,0)
(10,35,0)
(1,24,0)
(24,2,0)
(25,19,0)
(40,9,0)
(27,8,0)
(24,42,0)
(23,42,0)
(43,35,0)
(26,21,0)
(2,38,0)
(38,2,0)
(31,19,0)
(44,3,0)
(32,8,0)
(11,24,0)
(26,31,0)
(29,12,0)
(35,10,0)
(16,38,0)
(28,25,0)
(0,6,0)
(8,34,0)
(18,9,0)
(9,42,0)
(8,3,0)
(39,8,0)
(13,11,0)
(8,42,0)
(8,24,0)
(12,34,0)
(20,11,0)
(26,21,1)
(38,4,1)
(7,40,1)
(35,10,1)
(28,12,1)
(18,14,1)
(20,13,1)
(10,17,1)
(43,10,1)
(16,33,1)
(8,24,1)
(21,11,1)
(24,2,1)
(5,30,1)
(27,32,1)
(26,9,1)
(30,39,1)
(44,5,1)
(11,20,1)
(40,11,1)
(26,31,1)
(17,36,1)
(35,43,1)
(16,35,1)
(15,28,1)
(25,15,1)
(12,34,1)
(8,27,1)
(8,3,1)
(1,12,1)
(13,6,1)
(14,7,1)
(4,16,1)
(2,38,1)
(25,34,1)
(32,3,1)
(29,45,1)
(6,0,1)
(0,41,1)
(38,16,1)
(3,44,1)
(9,18,1)
(8,34,1)
(36,1,1)
(41,8,1)
(11,24,1)
(12,29,1)
(31,25,1)
(6,24,1)
(33,35,1)
(39,24,1)
(41,12,2)
(33,12,2)
(39,12,2)
(11,12,2)
(12,34,2)
(25,12,2)
(36,12,2)
(44,12,2)
(8,24,2)
(27,12,2)
(16,35,2)
(17,12,2)
(43,12,2)
(21,11,2)
(6,12,2)
(25,34,2)
(38,12,2)
(35,12,2)
(30,12,2)
(16,12,2)
(20,12,2)
(6,24,2)
(18,11,2)
(31,12,2)
(32,12,2)
(26,31,2)
(8,34,2)
(9,18,2)
(40,11,2)
(26,21,2)
(35,10,2)
(8,12,2)
(5,12,2)
(38,16,2)
(8,3,2)
(2,12,2)
(28,12,2)
(0,12,2)
(10,12,2)
(15,12,2)
(7,11,2)
(24,2,2)
(24,12,2)
(13,12,2)
(14,11,2)
(2,38,2)
(9,11,2)
(3,12,2)
(11,24,2)
(1,12,2)
(4,12,2)
-----------------------------------
(0,min_nice)
(1,min_nice)
(2,rlimit_to_nice(current->signal->rlim[RLIMIT_NICE].rlim_cur)
(3,current->pid)
(4,rlim_cur)
(5,current)
(6,set_user_nice(current, min_nice)
(7,current)
(8,binder_debug(BINDER_DEBUG_PRIORITY_CAP,\n\\n\\t\\t     "%d: nice value %ld not allowed use %ld instead\\n",\n\\n\\t\\t      current->pid, nice, min_nice)
(9,binder_user_error("%d RLIMIT_NICE not set\\n", current->pid)
(10,current->signal)
(11,min_nice <= MAX_NICE)
(12,can_nice(current, nice)
(13,min_nice)
(14,pid)
(15,nice)
(16,current->signal->rlim[RLIMIT_NICE])
(17,signal)
(18,current->pid)
(19,)
(20,MAX_NICE)
(21,return;)
(22,min_nice)
(23,if (min_nice <= MAX_NICE)
(24,min_nice = rlimit_to_nice(current->signal->rlim[RLIMIT_NICE].rlim_cur)
(25,set_user_nice(current, nice)
(26,RET)
(27,min_nice)
(28,current)
(29,nice)
(30,"%d: nice value %ld not allowed use %ld instead\\n")
(31,return;)
(32,nice)
(33,RLIMIT_NICE)
(34,long nice)
(35,current->signal->rlim)
(36,current)
(37,if (can_nice(current, nice)
(38,current->signal->rlim[RLIMIT_NICE].rlim_cur)
(39,BINDER_DEBUG_PRIORITY_CAP)
(40,"%d RLIMIT_NICE not set\\n")
(41,current)
(42,)
(43,rlim)
(44,pid)
(45,current)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^