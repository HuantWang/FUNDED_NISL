-----label-----
1
-----code-----
static int scoop_probe(struct platform_device *pdev)
{
	struct scoop_dev *devptr;
	struct scoop_config *inf;
	struct resource *mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
	int ret;

	if (!mem)
		return -EINVAL;

	devptr = kzalloc(sizeof(struct scoop_dev), GFP_KERNEL);
	if (!devptr)
		return -ENOMEM;

	spin_lock_init(&devptr->scoop_lock);

	inf = pdev->dev.platform_data;
	devptr->base = ioremap(mem->start, resource_size(mem));

	if (!devptr->base) {
		ret = -ENOMEM;
		goto err_ioremap;
	}

	platform_set_drvdata(pdev, devptr);

	printk("Sharp Scoop Device found at 0x%08x -> 0x%8p\n",(unsigned int)mem->start, devptr->base);

	iowrite16(0x0140, devptr->base + SCOOP_MCR);
	reset_scoop(&pdev->dev);
	iowrite16(0x0000, devptr->base + SCOOP_CPR);
	iowrite16(inf->io_dir & 0xffff, devptr->base + SCOOP_GPCR);
	iowrite16(inf->io_out & 0xffff, devptr->base + SCOOP_GPWR);

	devptr->suspend_clr = inf->suspend_clr;
	devptr->suspend_set = inf->suspend_set;

	devptr->gpio.base = -1;

	if (inf->gpio_base != 0) {
		devptr->gpio.label = dev_name(&pdev->dev);
		devptr->gpio.base = inf->gpio_base;
		devptr->gpio.ngpio = 12; /* PA11 = 0, PA12 = 1, etc. up to PA22 = 11 */
		devptr->gpio.set = scoop_gpio_set;
		devptr->gpio.get = scoop_gpio_get;
		devptr->gpio.direction_input = scoop_gpio_direction_input;
		devptr->gpio.direction_output = scoop_gpio_direction_output;

		ret = gpiochip_add_data(&devptr->gpio, devptr);
		if (ret)
			goto err_gpio;
	}

	return 0;

err_gpio:
	platform_set_drvdata(pdev, NULL);
err_ioremap:
	iounmap(devptr->base);
	kfree(devptr);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
28,29
30,31
30,32
30,33
33,34
34,35
34,36
34,37
34,38
35,36
37,38
39,40
42,43
43,44
43,45
45,46
47,48
47,49
48,49
49,50
51,52
52,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
59,62
60,61
62,63
63,64
63,65
64,65
67,68
69,70
69,71
70,71
71,72
73,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
90,92
91,92
91,93
92,93
96,97
97,98
97,99
98,99
98,100
99,100
102,103
102,104
102,105
103,104
105,106
105,107
106,107
109,110
109,111
110,111
112,113
114,115
114,116
115,116
116,117
116,118
117,118
120,121
120,122
121,122
122,123
122,124
123,124
125,126
126,127
128,129
130,131
131,132
131,133
131,134
132,133
134,135
136,137
138,139
139,140
139,141
139,142
139,143
140,141
143,144
143,145
144,145
144,146
147,148
147,149
148,149
151,152
151,153
152,153
155,156
156,157
156,158
156,159
157,158
160,161
160,162
161,162
161,163
162,163
165,166
167,168
168,169
168,170
169,170
171,172
172,173
172,174
173,174
176,177
177,178
177,179
177,180
178,179
181,182
181,183
182,183
182,184
183,184
186,187
188,189
189,190
189,191
189,192
190,191
192,193
192,194
193,194
193,195
194,195
198,199
198,200
199,200
199,201
200,201
203,204
205,206
206,207
206,208
206,209
207,208
209,210
209,211
210,211
210,212
211,212
215,216
215,217
216,217
216,218
217,218
220,221
222,223
223,224
223,225
224,225
224,226
225,226
228,229
228,230
229,230
232,233
233,234
233,235
234,235
234,236
235,236
238,239
238,240
239,240
242,243
243,244
243,245
244,245
244,246
245,246
245,247
246,247
250,251
252,253
252,254
253,254
253,255
254,255
254,256
255,256
259,260
259,261
259,262
259,263
259,264
259,265
259,266
259,267
259,268
260,261
261,262
261,263
262,263
262,264
263,264
263,265
264,265
268,269
268,270
269,270
271,272
272,273
272,274
273,274
276,277
277,278
277,279
278,279
278,280
279,280
279,281
280,281
284,285
284,286
285,286
288,289
289,290
289,291
290,291
290,292
291,292
291,293
292,293
297,298
298,299
298,300
299,300
299,301
300,301
300,302
301,302
305,306
307,308
308,309
308,310
309,310
309,311
310,311
310,312
311,312
315,316
317,318
318,319
318,320
319,320
319,321
320,321
320,322
321,322
325,326
327,328
328,329
328,330
329,330
329,331
330,331
330,332
331,332
335,336
337,338
338,339
338,340
339,340
341,342
341,343
341,344
342,343
344,345
345,346
345,347
346,347
349,350
351,352
351,353
352,353
354,355
356,357
358,359
358,360
360,361
361,362
361,363
361,364
362,363
364,365
366,367
368,369
368,370
370,371
371,372
371,373
372,373
374,375
374,376
375,376
378,379
379,380
379,381
380,381
382,383
384,385
385,386
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,25,29,31,32,36,38,40,41,44,46,50,54,58,61,65,66,68,72,76,80,84,85,89,93,94,95,100,101,104,107,108,111,113,118,119,124,127,129,133,135,137,141,142,145,146,149,150,153,154,158,159,163,164,166,170,174,175,179,180,184,185,187,191,195,196,197,201,202,204,208,212,213,214,218,219,221,226,227,230,231,236,237,240,241,247,248,249,251,256,257,258,265,266,267,270,274,275,281,282,283,286,287,293,294,295,296,302,303,304,306,312,313,314,316,322,323,324,326,332,333,334,336,340,343,347,348,350,353,355,357,359,363,365,367,369,373,376,377,381,383,386
-----computeFrom-----
56,57
56,58
87,88
87,89
97,98
97,99
122,123
122,124
160,161
160,162
181,182
181,183
192,193
192,194
198,199
198,200
209,210
209,211
215,216
215,217
223,224
223,225
233,234
233,235
243,244
243,245
253,254
253,255
261,262
261,263
277,278
277,279
289,290
289,291
298,299
298,300
308,309
308,310
318,319
318,320
328,329
328,330
338,339
338,340
-----guardedBy-----
256,286
257,287
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int scoop_probe(struct platform_device *pdev){	struct scoop_dev *devptr;	struct scoop_config *inf;	struct resource *mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);	int ret;	if (!mem)		return -EINVAL;	devptr = kzalloc(sizeof(struct scoop_dev), GFP_KERNEL);	if (!devptr)		return -ENOMEM;	spin_lock_init(&devptr->scoop_lock);	inf = pdev->dev.platform_data;	devptr->base = ioremap(mem->start, resource_size(mem));	if (!devptr->base) {		ret = -ENOMEM;		goto err_ioremap;	}	platform_set_drvdata(pdev, devptr);	printk("Sharp Scoop Device found at 0x%08x -> 0x%8p\n",(unsigned int)mem->start, devptr->base);	iowrite16(0x0140, devptr->base + SCOOP_MCR);	reset_scoop(&pdev->dev);	iowrite16(0x0000, devptr->base + SCOOP_CPR);	iowrite16(inf->io_dir & 0xffff, devptr->base + SCOOP_GPCR);	iowrite16(inf->io_out & 0xffff, devptr->base + SCOOP_GPWR);	devptr->suspend_clr = inf->suspend_clr;	devptr->suspend_set = inf->suspend_set;	devptr->gpio.base = -1;	if (inf->gpio_base != 0) {		devptr->gpio.label = dev_name(&pdev->dev);		devptr->gpio.base = inf->gpio_base;		devptr->gpio.ngpio = 12; /* PA11 = 0, PA12 = 1, etc. up to PA22 = 11 */		devptr->gpio.set = scoop_gpio_set;		devptr->gpio.get = scoop_gpio_get;		devptr->gpio.direction_input = scoop_gpio_direction_input;		devptr->gpio.direction_output = scoop_gpio_direction_output;		ret = gpiochip_add_data(&devptr->gpio, devptr);		if (ret)			goto err_gpio;	}	return 0;err_gpio:	platform_set_drvdata(pdev, NULL);err_ioremap:	iounmap(devptr->base);	kfree(devptr);	return ret;}
static int
scoop_probe(struct platform_device *pdev)
scoop_probe
struct platform_device *pdev
struct platform_device
platform_device
*pdev
*
pdev
{	struct scoop_dev *devptr;	struct scoop_config *inf;	struct resource *mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);	int ret;	if (!mem)		return -EINVAL;	devptr = kzalloc(sizeof(struct scoop_dev), GFP_KERNEL);	if (!devptr)		return -ENOMEM;	spin_lock_init(&devptr->scoop_lock);	inf = pdev->dev.platform_data;	devptr->base = ioremap(mem->start, resource_size(mem));	if (!devptr->base) {		ret = -ENOMEM;		goto err_ioremap;	}	platform_set_drvdata(pdev, devptr);	printk("Sharp Scoop Device found at 0x%08x -> 0x%8p\n",(unsigned int)mem->start, devptr->base);	iowrite16(0x0140, devptr->base + SCOOP_MCR);	reset_scoop(&pdev->dev);	iowrite16(0x0000, devptr->base + SCOOP_CPR);	iowrite16(inf->io_dir & 0xffff, devptr->base + SCOOP_GPCR);	iowrite16(inf->io_out & 0xffff, devptr->base + SCOOP_GPWR);	devptr->suspend_clr = inf->suspend_clr;	devptr->suspend_set = inf->suspend_set;	devptr->gpio.base = -1;	if (inf->gpio_base != 0) {		devptr->gpio.label = dev_name(&pdev->dev);		devptr->gpio.base = inf->gpio_base;		devptr->gpio.ngpio = 12; /* PA11 = 0, PA12 = 1, etc. up to PA22 = 11 */		devptr->gpio.set = scoop_gpio_set;		devptr->gpio.get = scoop_gpio_get;		devptr->gpio.direction_input = scoop_gpio_direction_input;		devptr->gpio.direction_output = scoop_gpio_direction_output;		ret = gpiochip_add_data(&devptr->gpio, devptr);		if (ret)			goto err_gpio;	}	return 0;err_gpio:	platform_set_drvdata(pdev, NULL);err_ioremap:	iounmap(devptr->base);	kfree(devptr);	return ret;}
struct scoop_dev *devptr;
struct scoop_dev *devptr;
struct scoop_dev
scoop_dev
*devptr
*
devptr
struct scoop_config *inf;
struct scoop_config *inf;
struct scoop_config
scoop_config
*inf
*
inf
struct resource *mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
struct resource *mem = platform_get_resource(pdev, IORESOURCE_MEM, 0);
struct resource
resource
*mem = platform_get_resource(pdev, IORESOURCE_MEM, 0)
*
mem
= platform_get_resource(pdev, IORESOURCE_MEM, 0)
platform_get_resource(pdev, IORESOURCE_MEM, 0)
platform_get_resource
platform_get_resource
pdev
pdev
IORESOURCE_MEM
IORESOURCE_MEM
0
int ret;
int ret;
int
ret
ret
if (!mem)		return -EINVAL;
!mem
mem
mem
return -EINVAL;
-EINVAL
EINVAL
EINVAL
devptr = kzalloc(sizeof(struct scoop_dev), GFP_KERNEL);
devptr = kzalloc(sizeof(struct scoop_dev), GFP_KERNEL)
devptr
devptr
kzalloc(sizeof(struct scoop_dev), GFP_KERNEL)
kzalloc
kzalloc
sizeof(struct scoop_dev)
struct scoop_dev
struct scoop_dev
scoop_dev

GFP_KERNEL
GFP_KERNEL
if (!devptr)		return -ENOMEM;
!devptr
devptr
devptr
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
spin_lock_init(&devptr->scoop_lock);
spin_lock_init(&devptr->scoop_lock)
spin_lock_init
spin_lock_init
&devptr->scoop_lock
devptr->scoop_lock
devptr
devptr
scoop_lock
inf = pdev->dev.platform_data;
inf = pdev->dev.platform_data
inf
inf
pdev->dev.platform_data
pdev->dev
pdev
pdev
dev
platform_data
devptr->base = ioremap(mem->start, resource_size(mem));
devptr->base = ioremap(mem->start, resource_size(mem))
devptr->base
devptr
devptr
base
ioremap(mem->start, resource_size(mem))
ioremap
ioremap
mem->start
mem
mem
start
resource_size(mem)
resource_size
resource_size
mem
mem
if (!devptr->base) {		ret = -ENOMEM;		goto err_ioremap;	}
!devptr->base
devptr->base
devptr
devptr
base
{		ret = -ENOMEM;		goto err_ioremap;	}
ret = -ENOMEM;
ret = -ENOMEM
ret
ret
-ENOMEM
ENOMEM
ENOMEM
goto err_ioremap;
err_ioremap
platform_set_drvdata(pdev, devptr);
platform_set_drvdata(pdev, devptr)
platform_set_drvdata
platform_set_drvdata
pdev
pdev
devptr
devptr
printk("Sharp Scoop Device found at 0x%08x -> 0x%8p\n",(unsigned int)mem->start, devptr->base);
printk("Sharp Scoop Device found at 0x%08x -> 0x%8p\n",(unsigned int)mem->start, devptr->base)
printk
printk
"Sharp Scoop Device found at 0x%08x -> 0x%8p\n"
(unsigned int)mem->start
unsigned int
unsigned int

mem->start
mem
mem
start
devptr->base
devptr
devptr
base
iowrite16(0x0140, devptr->base + SCOOP_MCR);
iowrite16(0x0140, devptr->base + SCOOP_MCR)
iowrite16
iowrite16
0x0140
devptr->base + SCOOP_MCR
devptr->base
devptr
devptr
base
SCOOP_MCR
SCOOP_MCR
reset_scoop(&pdev->dev);
reset_scoop(&pdev->dev)
reset_scoop
reset_scoop
&pdev->dev
pdev->dev
pdev
pdev
dev
iowrite16(0x0000, devptr->base + SCOOP_CPR);
iowrite16(0x0000, devptr->base + SCOOP_CPR)
iowrite16
iowrite16
0x0000
devptr->base + SCOOP_CPR
devptr->base
devptr
devptr
base
SCOOP_CPR
SCOOP_CPR
iowrite16(inf->io_dir & 0xffff, devptr->base + SCOOP_GPCR);
iowrite16(inf->io_dir & 0xffff, devptr->base + SCOOP_GPCR)
iowrite16
iowrite16
inf->io_dir & 0xffff
inf->io_dir
inf
inf
io_dir
0xffff
devptr->base + SCOOP_GPCR
devptr->base
devptr
devptr
base
SCOOP_GPCR
SCOOP_GPCR
iowrite16(inf->io_out & 0xffff, devptr->base + SCOOP_GPWR);
iowrite16(inf->io_out & 0xffff, devptr->base + SCOOP_GPWR)
iowrite16
iowrite16
inf->io_out & 0xffff
inf->io_out
inf
inf
io_out
0xffff
devptr->base + SCOOP_GPWR
devptr->base
devptr
devptr
base
SCOOP_GPWR
SCOOP_GPWR
devptr->suspend_clr = inf->suspend_clr;
devptr->suspend_clr = inf->suspend_clr
devptr->suspend_clr
devptr
devptr
suspend_clr
inf->suspend_clr
inf
inf
suspend_clr
devptr->suspend_set = inf->suspend_set;
devptr->suspend_set = inf->suspend_set
devptr->suspend_set
devptr
devptr
suspend_set
inf->suspend_set
inf
inf
suspend_set
devptr->gpio.base = -1;
devptr->gpio.base = -1
devptr->gpio.base
devptr->gpio
devptr
devptr
gpio
base
-1
1
if (inf->gpio_base != 0) {		devptr->gpio.label = dev_name(&pdev->dev);		devptr->gpio.base = inf->gpio_base;		devptr->gpio.ngpio = 12; /* PA11 = 0, PA12 = 1, etc. up to PA22 = 11 */		devptr->gpio.set = scoop_gpio_set;		devptr->gpio.get = scoop_gpio_get;		devptr->gpio.direction_input = scoop_gpio_direction_input;		devptr->gpio.direction_output = scoop_gpio_direction_output;		ret = gpiochip_add_data(&devptr->gpio, devptr);		if (ret)			goto err_gpio;	}
inf->gpio_base != 0
inf->gpio_base
inf
inf
gpio_base
0
{		devptr->gpio.label = dev_name(&pdev->dev);		devptr->gpio.base = inf->gpio_base;		devptr->gpio.ngpio = 12; /* PA11 = 0, PA12 = 1, etc. up to PA22 = 11 */		devptr->gpio.set = scoop_gpio_set;		devptr->gpio.get = scoop_gpio_get;		devptr->gpio.direction_input = scoop_gpio_direction_input;		devptr->gpio.direction_output = scoop_gpio_direction_output;		ret = gpiochip_add_data(&devptr->gpio, devptr);		if (ret)			goto err_gpio;	}
devptr->gpio.label = dev_name(&pdev->dev);
devptr->gpio.label = dev_name(&pdev->dev)
devptr->gpio.label
devptr->gpio
devptr
devptr
gpio
label
dev_name(&pdev->dev)
dev_name
dev_name
&pdev->dev
pdev->dev
pdev
pdev
dev
devptr->gpio.base = inf->gpio_base;
devptr->gpio.base = inf->gpio_base
devptr->gpio.base
devptr->gpio
devptr
devptr
gpio
base
inf->gpio_base
inf
inf
gpio_base
devptr->gpio.ngpio = 12;
devptr->gpio.ngpio = 12
devptr->gpio.ngpio
devptr->gpio
devptr
devptr
gpio
ngpio
12
devptr->gpio.set = scoop_gpio_set;
devptr->gpio.set = scoop_gpio_set
devptr->gpio.set
devptr->gpio
devptr
devptr
gpio
set
scoop_gpio_set
scoop_gpio_set
devptr->gpio.get = scoop_gpio_get;
devptr->gpio.get = scoop_gpio_get
devptr->gpio.get
devptr->gpio
devptr
devptr
gpio
get
scoop_gpio_get
scoop_gpio_get
devptr->gpio.direction_input = scoop_gpio_direction_input;
devptr->gpio.direction_input = scoop_gpio_direction_input
devptr->gpio.direction_input
devptr->gpio
devptr
devptr
gpio
direction_input
scoop_gpio_direction_input
scoop_gpio_direction_input
devptr->gpio.direction_output = scoop_gpio_direction_output;
devptr->gpio.direction_output = scoop_gpio_direction_output
devptr->gpio.direction_output
devptr->gpio
devptr
devptr
gpio
direction_output
scoop_gpio_direction_output
scoop_gpio_direction_output
ret = gpiochip_add_data(&devptr->gpio, devptr);
ret = gpiochip_add_data(&devptr->gpio, devptr)
ret
ret
gpiochip_add_data(&devptr->gpio, devptr)
gpiochip_add_data
gpiochip_add_data
&devptr->gpio
devptr->gpio
devptr
devptr
gpio
devptr
devptr
if (ret)			goto err_gpio;
ret
ret
goto err_gpio;
err_gpio
return 0;
0
err_gpio:	platform_set_drvdata(pdev, NULL);
err_gpio
platform_set_drvdata(pdev, NULL);
platform_set_drvdata(pdev, NULL)
platform_set_drvdata
platform_set_drvdata
pdev
pdev
NULL
NULL
err_ioremap:	iounmap(devptr->base);
err_ioremap
iounmap(devptr->base);
iounmap(devptr->base)
iounmap
iounmap
devptr->base
devptr
devptr
base
kfree(devptr);
kfree(devptr)
kfree
kfree
devptr
devptr
return ret;
ret
ret
-----joern-----
(119,11,0)
(153,11,0)
(114,134,0)
(15,24,0)
(58,150,0)
(132,134,0)
(206,9,0)
(17,218,0)
(125,49,0)
(183,204,0)
(24,191,0)
(160,72,0)
(85,118,0)
(76,9,0)
(198,188,0)
(133,47,0)
(89,150,0)
(173,215,0)
(26,27,0)
(71,121,0)
(150,1,0)
(33,16,0)
(34,46,0)
(92,30,0)
(48,75,0)
(194,37,0)
(42,134,0)
(46,34,0)
(107,116,0)
(70,218,0)
(11,134,0)
(72,156,0)
(205,185,0)
(56,166,0)
(9,218,0)
(45,131,0)
(104,179,0)
(11,119,0)
(56,152,0)
(57,93,0)
(90,202,0)
(45,84,0)
(211,81,0)
(149,73,0)
(104,221,0)
(216,203,0)
(110,66,0)
(178,27,0)
(138,134,0)
(29,210,0)
(150,134,0)
(195,112,0)
(120,221,0)
(78,72,0)
(14,164,0)
(129,179,0)
(87,102,0)
(41,17,0)
(79,102,0)
(38,84,0)
(88,71,0)
(72,1,0)
(106,193,0)
(108,62,0)
(3,120,0)
(62,134,0)
(158,210,0)
(49,125,0)
(213,1,0)
(200,180,0)
(4,24,0)
(45,134,0)
(201,141,0)
(77,81,0)
(122,173,0)
(152,56,0)
(118,203,0)
(164,221,0)
(29,183,0)
(166,56,0)
(129,134,0)
(20,114,0)
(212,190,0)
(39,152,0)
(223,194,0)
(193,210,0)
(220,169,0)
(217,75,0)
(194,166,0)
(192,115,0)
(225,39,0)
(155,64,0)
(105,141,0)
(16,106,0)
(46,145,0)
(163,50,0)
(12,212,0)
(116,218,0)
(120,174,0)
(100,121,0)
(49,134,0)
(50,1,0)
(202,210,0)
(24,221,0)
(95,105,0)
(219,134,0)
(119,37,0)
(139,38,0)
(221,136,0)
(67,79,0)
(174,10,0)
(161,221,0)
(24,37,0)
(106,16,0)
(211,161,0)
(206,11,0)
(185,102,0)
(39,141,0)
(124,104,0)
(180,134,0)
(188,136,0)
(66,221,0)
(226,134,0)
(147,205,0)
(221,134,0)
(47,63,0)
(19,210,0)
(137,148,0)
(126,173,0)
(130,57,0)
(86,145,0)
(23,120,0)
(54,34,0)
(188,198,0)
(118,62,0)
(105,21,0)
(84,38,0)
(28,75,0)
(208,119,0)
(190,221,0)
(61,193,0)
(62,118,0)
(183,29,0)
(79,210,0)
(83,26,0)
(168,215,0)
(164,115,0)
(109,201,0)
(75,221,0)
(66,180,0)
(0,221,0)
(123,8,0)
(184,221,0)
(64,141,0)
(122,211,0)
(52,134,0)
(122,0,0)
(224,161,0)
(141,64,0)
(122,66,0)
(136,188,0)
(165,10,0)
(169,91,0)
(113,50,0)
(148,137,0)
(180,200,0)
(122,134,0)
(131,201,0)
(122,106,0)
(55,200,0)
(196,191,0)
(56,134,0)
(159,184,0)
(37,148,0)
(191,24,0)
(34,221,0)
(179,129,0)
(10,141,0)
(151,73,0)
(172,215,0)
(219,96,0)
(167,46,0)
(203,221,0)
(136,221,0)
(98,125,0)
(44,10,0)
(222,0,0)
(10,174,0)
(99,205,0)
(94,156,0)
(91,169,0)
(70,148,0)
(131,45,0)
(157,190,0)
(36,39,0)
(84,45,0)
(215,221,0)
(191,196,0)
(175,191,0)
(21,210,0)
(144,121,0)
(205,221,0)
(218,116,0)
(73,1,0)
(96,219,0)
(35,91,0)
(18,161,0)
(80,104,0)
(2,134,0)
(146,116,0)
(51,134,0)
(101,194,0)
(22,221,0)
(26,202,0)
(122,169,0)
(179,104,0)
(135,0,0)
(75,28,0)
(121,141,0)
(32,96,0)
(5,158,0)
(161,211,0)
(204,213,0)
(171,136,0)
(140,200,0)
(204,183,0)
(122,120,0)
(203,37,0)
(37,134,0)
(82,91,0)
(30,93,0)
(7,27,0)
(75,37,0)
(137,218,0)
(125,37,0)
(170,213,0)
(173,158,0)
(189,201,0)
(9,206,0)
(38,221,0)
(122,46,0)
(185,205,0)
(177,137,0)
(43,218,0)
(115,164,0)
(31,93,0)
(187,152,0)
(122,115,0)
(102,221,0)
(186,196,0)
(142,9,0)
(196,134,0)
(111,66,0)
(141,134,0)
(115,21,0)
(102,185,0)
(93,8,0)
(206,25,0)
(182,116,0)
(0,37,0)
(64,73,0)
(25,206,0)
(197,57,0)
(194,221,0)
(214,141,0)
(103,203,0)
(97,105,0)
(156,94,0)
(114,221,0)
(81,210,0)
(93,30,0)
(201,131,0)
(128,122,0)
(199,190,0)
(174,134,0)
(197,122,0)
(181,38,0)
(112,176,0)
(91,221,0)
(57,79,0)
(127,131,0)
(218,134,0)
(94,134,0)
(21,105,0)
(148,37,0)
(16,221,0)
(145,210,0)
(125,221,0)
(162,134,0)
(150,221,0)
(213,204,0)
(156,72,0)
(203,118,0)
(122,26,0)
(197,63,0)
(11,206,0)
(27,221,0)
(143,16,0)
(215,173,0)
(148,70,0)
(40,134,0)
(116,1,0)
(27,26,0)
(121,71,0)
(59,125,0)
(209,164,0)
(169,29,0)
(154,213,0)
(122,212,0)
(102,79,0)
(207,134,0)
(119,221,0)
(13,70,0)
(152,39,0)
(65,166,0)
(190,212,0)
(166,194,0)
(6,70,0)
(73,64,0)
(197,176,0)
(117,119,0)
(69,34,0)
(74,211,0)
(68,106,0)
(53,84,0)
(212,219,0)
(50,134,0)
(200,141,0)
(57,134,0)
(38,37,0)
(191,24,1)
(135,222,1)
(125,37,1)
(77,211,1)
(3,45,1)
(131,127,1)
(156,72,1)
(174,10,1)
(70,218,1)
(183,204,1)
(169,91,1)
(64,73,1)
(176,112,1)
(72,78,1)
(194,37,1)
(54,158,1)
(67,202,1)
(78,160,1)
(211,74,1)
(166,65,1)
(90,26,1)
(171,188,1)
(106,16,1)
(115,192,1)
(130,114,1)
(34,69,1)
(202,90,1)
(143,145,1)
(76,142,1)
(9,218,1)
(33,143,1)
(10,44,1)
(119,117,1)
(89,28,1)
(17,218,1)
(120,221,1)
(199,180,1)
(20,49,1)
(116,146,1)
(166,194,1)
(192,164,1)
(212,12,1)
(150,1,1)
(83,27,1)
(190,221,1)
(26,83,1)
(85,203,1)
(175,24,1)
(74,161,1)
(61,106,1)
(57,79,1)
(114,221,1)
(222,141,1)
(6,13,1)
(35,71,1)
(187,39,1)
(122,120,1)
(161,18,1)
(16,33,1)
(203,221,1)
(129,179,1)
(152,187,1)
(27,221,1)
(147,99,1)
(46,167,1)
(118,85,1)
(206,9,1)
(203,37,1)
(71,121,1)
(149,214,1)
(122,128,1)
(45,84,1)
(120,23,1)
(196,191,1)
(47,133,1)
(99,67,1)
(23,3,1)
(34,221,1)
(57,130,1)
(66,110,1)
(188,22,1)
(224,21,1)
(150,221,1)
(46,34,1)
(223,152,1)
(161,221,1)
(213,1,1)
(197,122,1)
(122,66,1)
(163,60,1)
(142,153,1)
(111,174,1)
(137,218,1)
(217,37,1)
(203,103,1)
(125,221,1)
(30,92,1)
(105,95,1)
(48,217,1)
(195,184,1)
(109,189,1)
(215,221,1)
(75,48,1)
(84,53,1)
(75,37,1)
(160,62,1)
(11,206,1)
(28,75,1)
(153,150,1)
(18,224,1)
(169,220,1)
(70,6,1)
(157,199,1)
(184,159,1)
(64,155,1)
(24,15,1)
(15,4,1)
(79,102,1)
(133,17,1)
(101,223,1)
(84,38,1)
(158,5,1)
(115,164,1)
(139,181,1)
(218,116,1)
(127,201,1)
(104,80,1)
(194,101,1)
(95,97,1)
(122,173,1)
(71,88,1)
(49,125,1)
(188,198,1)
(128,71,1)
(16,221,1)
(164,221,1)
(91,221,1)
(38,221,1)
(5,173,1)
(173,215,1)
(131,201,1)
(126,215,1)
(12,190,1)
(39,141,1)
(72,1,1)
(82,35,1)
(122,211,1)
(148,137,1)
(151,149,1)
(69,54,1)
(96,32,1)
(205,147,1)
(122,212,1)
(124,184,1)
(173,126,1)
(102,87,1)
(37,148,1)
(92,31,1)
(31,28,1)
(29,183,1)
(144,100,1)
(102,185,1)
(193,61,1)
(56,166,1)
(110,111,1)
(189,56,1)
(122,115,1)
(94,156,1)
(102,221,1)
(213,154,1)
(145,86,1)
(57,93,1)
(128,227,1)
(22,17,1)
(68,16,1)
(65,194,1)
(100,219,1)
(177,70,1)
(36,225,1)
(216,108,1)
(164,209,1)
(24,221,1)
(26,27,1)
(181,131,1)
(178,7,1)
(116,1,1)
(112,195,1)
(205,221,1)
(221,136,1)
(170,169,1)
(44,165,1)
(211,161,1)
(182,43,1)
(194,221,1)
(55,66,1)
(63,47,1)
(122,106,1)
(184,221,1)
(38,139,1)
(159,221,1)
(41,218,1)
(141,64,1)
(137,177,1)
(59,123,1)
(214,129,1)
(219,96,1)
(103,216,1)
(119,221,1)
(208,206,1)
(9,76,1)
(209,14,1)
(86,46,1)
(136,171,1)
(87,185,1)
(66,221,1)
(7,193,1)
(11,119,1)
(32,212,1)
(225,196,1)
(121,141,1)
(117,208,1)
(122,26,1)
(56,152,1)
(186,94,1)
(24,37,1)
(50,113,1)
(38,37,1)
(200,141,1)
(220,91,1)
(113,163,1)
(91,82,1)
(93,30,1)
(17,41,1)
(136,188,1)
(179,104,1)
(59,50,1)
(123,93,1)
(58,89,1)
(81,77,1)
(150,58,1)
(60,227,1)
(114,20,1)
(200,140,1)
(154,170,1)
(106,68,1)
(53,38,1)
(197,63,1)
(13,0,1)
(80,124,1)
(105,141,1)
(21,105,1)
(148,70,1)
(4,186,1)
(107,182,1)
(152,39,1)
(122,0,1)
(167,34,1)
(125,98,1)
(204,213,1)
(75,221,1)
(146,107,1)
(104,221,1)
(168,81,1)
(206,25,1)
(97,115,1)
(10,141,1)
(212,190,1)
(122,46,1)
(172,168,1)
(197,176,1)
(140,55,1)
(185,205,1)
(0,221,1)
(50,1,1)
(201,141,1)
(39,36,1)
(191,175,1)
(227,79,1)
(155,73,1)
(98,59,1)
(122,169,1)
(45,131,1)
(215,172,1)
(14,29,1)
(118,203,1)
(119,37,1)
(0,135,1)
(62,118,1)
(121,144,1)
(190,157,1)
(108,11,1)
(165,120,1)
(73,151,1)
(88,121,1)
(73,1,1)
(201,109,1)
(27,178,1)
(197,57,1)
(180,200,1)
(159,17,2)
(122,66,2)
(212,190,2)
(218,116,2)
(32,28,2)
(44,28,2)
(20,28,2)
(185,71,2)
(119,221,2)
(75,184,2)
(209,71,2)
(13,184,2)
(23,28,2)
(37,148,2)
(175,28,2)
(80,184,2)
(106,16,2)
(55,28,2)
(208,28,2)
(203,28,2)
(111,28,2)
(203,37,2)
(84,28,2)
(97,71,2)
(0,221,2)
(75,37,2)
(152,39,2)
(66,221,2)
(21,71,2)
(180,28,2)
(104,184,2)
(102,71,2)
(18,71,2)
(211,161,2)
(24,37,2)
(56,166,2)
(125,227,2)
(105,141,2)
(98,227,2)
(38,221,2)
(106,71,2)
(104,221,2)
(9,218,2)
(114,221,2)
(9,28,2)
(122,115,2)
(164,71,2)
(141,184,2)
(91,221,2)
(150,1,2)
(124,184,2)
(180,200,2)
(179,184,2)
(150,28,2)
(193,71,2)
(5,71,2)
(16,71,2)
(130,227,2)
(63,17,2)
(3,28,2)
(11,28,2)
(26,71,2)
(122,26,2)
(206,28,2)
(72,1,2)
(93,28,2)
(217,184,2)
(131,28,2)
(118,203,2)
(122,71,2)
(142,28,2)
(192,71,2)
(122,46,2)
(185,205,2)
(130,28,2)
(38,28,2)
(128,71,2)
(147,71,2)
(54,71,2)
(24,221,2)
(15,28,2)
(161,221,2)
(74,71,2)
(50,1,2)
(200,28,2)
(49,28,2)
(94,28,2)
(144,28,2)
(79,102,2)
(223,28,2)
(10,141,2)
(160,28,2)
(145,71,2)
(141,64,2)
(49,125,2)
(139,28,2)
(114,28,2)
(221,17,2)
(135,184,2)
(119,37,2)
(37,184,2)
(64,73,2)
(28,75,2)
(17,218,2)
(71,121,2)
(31,28,2)
(66,28,2)
(171,17,2)
(35,71,2)
(20,227,2)
(133,17,2)
(127,28,2)
(79,71,2)
(73,184,2)
(64,184,2)
(204,71,2)
(78,28,2)
(213,1,2)
(120,221,2)
(113,227,2)
(201,141,2)
(140,28,2)
(69,71,2)
(122,106,2)
(121,141,2)
(184,17,2)
(14,71,2)
(62,118,2)
(129,179,2)
(71,28,2)
(30,28,2)
(6,184,2)
(214,184,2)
(62,28,2)
(148,184,2)
(96,28,2)
(169,71,2)
(194,28,2)
(101,28,2)
(93,30,2)
(95,71,2)
(205,221,2)
(29,183,2)
(85,28,2)
(57,79,2)
(11,119,2)
(224,71,2)
(125,37,2)
(219,96,2)
(115,164,2)
(195,184,2)
(188,198,2)
(92,28,2)
(158,71,2)
(67,71,2)
(16,221,2)
(169,91,2)
(190,28,2)
(187,28,2)
(29,71,2)
(202,71,2)
(53,28,2)
(57,93,2)
(154,71,2)
(166,194,2)
(191,24,2)
(165,28,2)
(196,191,2)
(46,34,2)
(118,28,2)
(82,71,2)
(21,105,2)
(119,28,2)
(45,28,2)
(166,28,2)
(183,71,2)
(122,212,2)
(137,218,2)
(149,184,2)
(39,141,2)
(163,227,2)
(177,184,2)
(60,227,2)
(199,28,2)
(205,71,2)
(87,71,2)
(27,71,2)
(219,28,2)
(206,25,2)
(108,28,2)
(167,71,2)
(0,184,2)
(194,221,2)
(73,1,2)
(157,28,2)
(90,71,2)
(65,28,2)
(123,28,2)
(126,71,2)
(59,28,2)
(197,176,2)
(45,131,2)
(125,221,2)
(89,28,2)
(22,17,2)
(197,122,2)
(70,218,2)
(98,28,2)
(122,173,2)
(11,206,2)
(155,184,2)
(153,28,2)
(137,184,2)
(26,27,2)
(189,28,2)
(225,28,2)
(148,137,2)
(112,184,2)
(129,184,2)
(120,28,2)
(27,221,2)
(201,28,2)
(76,28,2)
(150,221,2)
(45,84,2)
(102,221,2)
(4,28,2)
(61,71,2)
(227,71,2)
(213,71,2)
(110,28,2)
(103,28,2)
(58,28,2)
(152,28,2)
(12,28,2)
(125,28,2)
(174,28,2)
(204,213,2)
(136,188,2)
(196,28,2)
(122,169,2)
(215,221,2)
(122,211,2)
(186,28,2)
(181,28,2)
(7,71,2)
(116,1,2)
(77,71,2)
(100,28,2)
(34,221,2)
(197,57,2)
(39,28,2)
(24,28,2)
(179,104,2)
(57,28,2)
(222,184,2)
(212,28,2)
(109,28,2)
(148,70,2)
(143,71,2)
(94,156,2)
(206,9,2)
(34,71,2)
(122,120,2)
(75,221,2)
(10,28,2)
(48,184,2)
(191,28,2)
(184,221,2)
(122,227,2)
(50,227,2)
(46,71,2)
(190,221,2)
(178,71,2)
(156,28,2)
(183,204,2)
(105,71,2)
(122,0,2)
(72,28,2)
(91,71,2)
(99,71,2)
(59,227,2)
(164,221,2)
(83,71,2)
(47,17,2)
(36,28,2)
(172,71,2)
(216,28,2)
(68,71,2)
(200,141,2)
(102,185,2)
(131,201,2)
(56,28,2)
(81,71,2)
(38,37,2)
(121,28,2)
(33,71,2)
(220,71,2)
(203,221,2)
(28,184,2)
(136,17,2)
(188,17,2)
(215,71,2)
(151,184,2)
(161,71,2)
(176,184,2)
(168,71,2)
(173,215,2)
(221,136,2)
(117,28,2)
(84,38,2)
(57,227,2)
(114,227,2)
(115,71,2)
(49,227,2)
(174,10,2)
(170,71,2)
(128,227,2)
(70,184,2)
(86,71,2)
(194,37,2)
(211,71,2)
(156,72,2)
(88,28,2)
(56,152,2)
(173,71,2)
(197,63,2)
-----------------------------------
(0,devptr->base)
(1,struct platform_device *pdev)
(2,ret)
(3,devptr)
(4,devptr)
(5,scoop_gpio_set)
(6,start)
(7,devptr)
(8,)
(9,mem->start)
(10,inf->suspend_clr)
(11,printk("Sharp Scoop Device found at 0x%08x -> 0x%8p\\n",(unsigned int)
(12,base)
(13,mem)
(14,devptr)
(15,base)
(16,devptr->gpio)
(17,!mem)
(18,gpio)
(19,if (ret)
(20,devptr)
(21,devptr->gpio.base = inf->gpio_base)
(22,devptr)
(23,suspend_clr)
(24,devptr->base)
(25,unsigned int)
(26,devptr->gpio.direction_output)
(27,devptr->gpio)
(28,!devptr->base)
(29,devptr->gpio.label = dev_name(&pdev->dev)
(30,-ENOMEM)
(31,ret)
(32,1)
(33,gpio)
(34,devptr->gpio)
(35,devptr)
(36,io_dir)
(37,devptr->base = ioremap(mem->start, resource_size(mem)
(38,devptr->base)
(39,inf->io_dir)
(40,mem)
(41,mem)
(42,if (!devptr->base)
(43,mem)
(44,suspend_clr)
(45,iowrite16(inf->io_out & 0xffff, devptr->base + SCOOP_GPWR)
(46,devptr->gpio.get)
(47,-EINVAL)
(48,base)
(49,iounmap(devptr->base)
(50,platform_set_drvdata(pdev, NULL)
(51,if (!mem)
(52,inf)
(53,SCOOP_GPWR)
(54,devptr)
(55,inf)
(56,iowrite16(inf->io_dir & 0xffff, devptr->base + SCOOP_GPCR)
(57,return ret;)
(58,devptr)
(59,devptr)
(60,goto err_gpio;)
(61,scoop_gpio_direction_input)
(62,iowrite16(0x0140, devptr->base + SCOOP_MCR)
(63,return -EINVAL;)
(64,pdev->dev.platform_data)
(65,SCOOP_GPCR)
(66,devptr->suspend_set)
(67,ret)
(68,direction_input)
(69,gpio)
(70,mem->start)
(71,inf->gpio_base != 0)
(72,pdev->dev)
(73,pdev->dev)
(74,ngpio)
(75,devptr->base)
(76,start)
(77,12)
(78,dev)
(79,ret = gpiochip_add_data(&devptr->gpio, devptr)
(80,scoop_lock)
(81,devptr->gpio.ngpio = 12)
(82,gpio)
(83,direction_output)
(84,devptr->base + SCOOP_GPWR)
(85,SCOOP_MCR)
(86,scoop_gpio_get)
(87,devptr)
(88,0)
(89,pdev)
(90,scoop_gpio_direction_output)
(91,devptr->gpio)
(92,ENOMEM)
(93,ret = -ENOMEM)
(94,reset_scoop(&pdev->dev)
(95,gpio_base)
(96,-1)
(97,inf)
(98,base)
(99,devptr)
(100,inf)
(101,base)
(102,gpiochip_add_data(&devptr->gpio, devptr)
(103,base)
(104,devptr->scoop_lock)
(105,inf->gpio_base)
(106,devptr->gpio.direction_input)
(107,IORESOURCE_MEM)
(108,0x0140)
(109,io_out)
(110,suspend_set)
(111,devptr)
(112,-ENOMEM)
(113,NULL)
(114,kfree(devptr)
(115,devptr->gpio.base)
(116,platform_get_resource(pdev, IORESOURCE_MEM, 0)
(117,base)
(118,devptr->base + SCOOP_MCR)
(119,devptr->base)
(120,devptr->suspend_clr)
(121,inf->gpio_base)
(122,return 0;)
(123,goto err_ioremap;)
(124,devptr)
(125,devptr->base)
(126,set)
(127,0xffff)
(128,0)
(129,spin_lock_init(&devptr->scoop_lock)
(130,ret)
(131,inf->io_out & 0xffff)
(132,if (inf->gpio_base != 0)
(133,EINVAL)
(134,)
(135,base)
(136,kzalloc(sizeof(struct scoop_dev)
(137,resource_size(mem)
(138,err_ioremap:)
(139,base)
(140,suspend_set)
(141,inf = pdev->dev.platform_data)
(142,mem)
(143,devptr)
(144,gpio_base)
(145,devptr->gpio.get = scoop_gpio_get)
(146,0)
(147,gpio)
(148,ioremap(mem->start, resource_size(mem)
(149,pdev)
(150,platform_set_drvdata(pdev, devptr)
(151,dev)
(152,inf->io_dir & 0xffff)
(153,"Sharp Scoop Device found at 0x%08x -> 0x%8p\\n")
(154,dev)
(155,platform_data)
(156,&pdev->dev)
(157,gpio)
(158,devptr->gpio.set = scoop_gpio_set)
(159,devptr)
(160,pdev)
(161,devptr->gpio)
(162,err_gpio:)
(163,pdev)
(164,devptr->gpio)
(165,inf)
(166,devptr->base + SCOOP_GPCR)
(167,get)
(168,devptr)
(169,devptr->gpio.label)
(170,pdev)
(171,GFP_KERNEL)
(172,gpio)
(173,devptr->gpio.set)
(174,devptr->suspend_clr = inf->suspend_clr)
(175,SCOOP_CPR)
(176,return -ENOMEM;)
(177,mem)
(178,gpio)
(179,&devptr->scoop_lock)
(180,devptr->suspend_set = inf->suspend_set)
(181,devptr)
(182,pdev)
(183,dev_name(&pdev->dev)
(184,!devptr)
(185,&devptr->gpio)
(186,0x0000)
(187,0xffff)
(188,sizeof(struct scoop_dev)
(189,inf)
(190,devptr->gpio)
(191,devptr->base + SCOOP_CPR)
(192,base)
(193,devptr->gpio.direction_input = scoop_gpio_direction_input)
(194,devptr->base)
(195,ENOMEM)
(196,iowrite16(0x0000, devptr->base + SCOOP_CPR)
(197,RET)
(198,struct scoop_dev)
(199,devptr)
(200,inf->suspend_set)
(201,inf->io_out)
(202,devptr->gpio.direction_output = scoop_gpio_direction_output)
(203,devptr->base)
(204,&pdev->dev)
(205,devptr->gpio)
(206,(unsigned int)
(207,devptr)
(208,devptr)
(209,gpio)
(210,)
(211,devptr->gpio.ngpio)
(212,devptr->gpio.base)
(213,pdev->dev)
(214,inf)
(215,devptr->gpio)
(216,devptr)
(217,devptr)
(218,*mem = platform_get_resource(pdev, IORESOURCE_MEM, 0)
(219,devptr->gpio.base = -1)
(220,label)
(221,devptr = kzalloc(sizeof(struct scoop_dev)
(222,devptr)
(223,devptr)
(224,devptr)
(225,inf)
(226,if (!devptr)
(227,ret)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^