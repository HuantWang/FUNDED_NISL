-----label-----
1
-----code-----
static int
add_dock_dependent_device(struct dock_station *ds, acpi_handle handle)
{
	struct dock_dependent_device *dd;

	dd = kzalloc(sizeof(*dd), GFP_KERNEL);
	if (!dd)
		return -ENOMEM;

	dd->handle = handle;
	INIT_LIST_HEAD(&dd->list);

	spin_lock(&ds->dd_lock);
	list_add_tail(&dd->list, &ds->dependent_devices);
	spin_unlock(&ds->dd_lock);

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
16,19
16,20
16,21
16,22
16,23
16,24
16,25
17,18
18,19
18,20
19,20
21,22
21,23
24,25
25,26
25,27
26,27
28,29
28,30
28,31
29,30
31,32
32,33
33,34
34,35
36,37
38,39
38,40
39,40
40,41
42,43
43,44
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
54,55
55,56
55,57
56,57
58,59
59,60
59,61
60,61
63,64
64,65
64,66
65,66
67,68
68,69
68,70
69,70
72,73
73,74
73,75
73,76
74,75
76,77
77,78
77,79
78,79
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
90,91
91,92
91,93
92,93
95,96
-----nextToken-----
2,4,7,9,10,13,15,20,22,23,27,30,35,37,41,45,50,51,53,57,61,62,66,70,71,75,79,80,84,85,89,93,94,96
-----computeFrom-----
25,26
25,27
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static intadd_dock_dependent_device(struct dock_station *ds, acpi_handle handle){	struct dock_dependent_device *dd;	dd = kzalloc(sizeof(*dd), GFP_KERNEL);	if (!dd)		return -ENOMEM;	dd->handle = handle;	INIT_LIST_HEAD(&dd->list);	spin_lock(&ds->dd_lock);	list_add_tail(&dd->list, &ds->dependent_devices);	spin_unlock(&ds->dd_lock);	return 0;}
static int
add_dock_dependent_device(struct dock_station *ds, acpi_handle handle)
add_dock_dependent_device
struct dock_station *ds
struct dock_station
dock_station
*ds
*
ds
acpi_handle handle
acpi_handle
acpi_handle
handle
handle
{	struct dock_dependent_device *dd;	dd = kzalloc(sizeof(*dd), GFP_KERNEL);	if (!dd)		return -ENOMEM;	dd->handle = handle;	INIT_LIST_HEAD(&dd->list);	spin_lock(&ds->dd_lock);	list_add_tail(&dd->list, &ds->dependent_devices);	spin_unlock(&ds->dd_lock);	return 0;}
struct dock_dependent_device *dd;
struct dock_dependent_device *dd;
struct dock_dependent_device
dock_dependent_device
*dd
*
dd
dd = kzalloc(sizeof(*dd), GFP_KERNEL);
dd = kzalloc(sizeof(*dd), GFP_KERNEL)
dd
dd
kzalloc(sizeof(*dd), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*dd)
(*dd)
*dd
dd
dd
GFP_KERNEL
GFP_KERNEL
if (!dd)		return -ENOMEM;
!dd
dd
dd
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
dd->handle = handle;
dd->handle = handle
dd->handle
dd
dd
handle
handle
handle
INIT_LIST_HEAD(&dd->list);
INIT_LIST_HEAD(&dd->list)
INIT_LIST_HEAD
INIT_LIST_HEAD
&dd->list
dd->list
dd
dd
list
spin_lock(&ds->dd_lock);
spin_lock(&ds->dd_lock)
spin_lock
spin_lock
&ds->dd_lock
ds->dd_lock
ds
ds
dd_lock
list_add_tail(&dd->list, &ds->dependent_devices);
list_add_tail(&dd->list, &ds->dependent_devices)
list_add_tail
list_add_tail
&dd->list
dd->list
dd
dd
list
&ds->dependent_devices
ds->dependent_devices
ds
ds
dependent_devices
spin_unlock(&ds->dd_lock);
spin_unlock(&ds->dd_lock)
spin_unlock
spin_unlock
&ds->dd_lock
ds->dd_lock
ds
ds
dd_lock
return 0;
0
-----joern-----
(3,34,0)
(17,39,0)
(30,16,0)
(20,44,0)
(46,3,0)
(10,18,0)
(17,4,0)
(28,3,0)
(14,31,0)
(31,14,0)
(4,32,0)
(27,16,0)
(11,32,0)
(37,46,0)
(32,4,0)
(23,3,0)
(17,16,0)
(4,17,0)
(1,30,0)
(47,18,0)
(46,30,0)
(19,21,0)
(22,46,0)
(44,5,0)
(36,16,0)
(40,23,0)
(9,46,0)
(2,44,0)
(13,3,0)
(32,35,0)
(5,44,0)
(0,15,0)
(7,16,0)
(3,16,0)
(43,13,0)
(7,14,0)
(34,3,0)
(37,16,0)
(12,33,0)
(34,15,0)
(39,13,0)
(47,37,0)
(42,32,0)
(21,33,0)
(41,37,0)
(38,21,0)
(8,5,0)
(33,12,0)
(15,34,0)
(14,7,0)
(5,8,0)
(33,21,0)
(44,35,0)
(12,16,0)
(26,34,0)
(25,31,0)
(24,31,0)
(29,13,0)
(45,10,0)
(39,17,0)
(6,0,0)
(21,3,0)
(15,0,0)
(8,16,0)
(13,39,0)
(30,48,0)
(31,35,0)
(46,9,1)
(31,25,1)
(21,38,1)
(10,45,1)
(37,46,1)
(17,39,1)
(33,21,1)
(39,13,1)
(29,43,1)
(18,10,1)
(6,28,1)
(0,6,1)
(20,12,1)
(9,22,1)
(17,4,1)
(19,30,1)
(30,48,1)
(15,0,1)
(40,3,1)
(21,3,1)
(13,3,1)
(42,11,1)
(23,3,1)
(31,35,1)
(24,17,1)
(47,18,1)
(38,19,1)
(3,34,1)
(32,42,1)
(44,2,1)
(23,40,1)
(34,26,1)
(12,33,1)
(41,7,1)
(22,23,1)
(13,29,1)
(11,39,1)
(25,24,1)
(45,23,1)
(26,15,1)
(37,41,1)
(32,35,1)
(43,8,1)
(4,32,1)
(1,46,1)
(5,44,1)
(8,5,1)
(46,3,1)
(47,37,1)
(30,1,1)
(2,20,1)
(44,35,1)
(34,15,1)
(7,14,1)
(14,31,1)
(30,23,2)
(5,44,2)
(14,31,2)
(4,32,2)
(15,0,2)
(47,37,2)
(38,23,2)
(8,23,2)
(46,3,2)
(29,23,2)
(30,48,2)
(9,23,2)
(43,23,2)
(22,23,2)
(13,23,2)
(8,5,2)
(31,35,2)
(47,18,2)
(39,23,2)
(25,23,2)
(2,23,2)
(10,23,2)
(45,23,2)
(33,23,2)
(5,23,2)
(21,3,2)
(31,23,2)
(11,23,2)
(39,13,2)
(3,34,2)
(13,3,2)
(4,23,2)
(37,46,2)
(21,23,2)
(42,23,2)
(44,35,2)
(44,23,2)
(1,23,2)
(17,23,2)
(17,39,2)
(12,33,2)
(20,23,2)
(12,23,2)
(32,35,2)
(32,23,2)
(24,23,2)
(19,23,2)
(14,23,2)
(7,23,2)
(33,21,2)
(7,14,2)
(37,23,2)
(46,23,2)
(34,15,2)
(23,3,2)
(41,23,2)
(18,23,2)
(17,4,2)
-----------------------------------
(0,*dd)
(1,handle)
(2,dd_lock)
(3,dd = kzalloc(sizeof(*dd)
(4,&ds->dependent_devices)
(5,&ds->dd_lock)
(6,dd)
(7,spin_unlock(&ds->dd_lock)
(8,spin_lock(&ds->dd_lock)
(9,handle)
(10,-ENOMEM)
(11,ds)
(12,INIT_LIST_HEAD(&dd->list)
(13,dd->list)
(14,&ds->dd_lock)
(15,sizeof(*dd)
(16,)
(17,list_add_tail(&dd->list, &ds->dependent_devices)
(18,return -ENOMEM;)
(19,dd)
(20,ds)
(21,dd->list)
(22,dd)
(23,!dd)
(24,ds)
(25,dd_lock)
(26,GFP_KERNEL)
(27,dd)
(28,dd)
(29,list)
(30,dd->handle = handle)
(31,ds->dd_lock)
(32,ds->dependent_devices)
(33,&dd->list)
(34,kzalloc(sizeof(*dd)
(35,struct dock_station *ds)
(36,if (!dd)
(37,return 0;)
(38,list)
(39,&dd->list)
(40,dd)
(41,0)
(42,dependent_devices)
(43,dd)
(44,ds->dd_lock)
(45,ENOMEM)
(46,dd->handle)
(47,RET)
(48,acpi_handle handle)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^