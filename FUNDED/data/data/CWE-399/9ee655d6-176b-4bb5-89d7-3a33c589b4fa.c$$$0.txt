-----label-----
0
-----code-----
wpt_packet * wpalPacketAlloc(wpt_packet_type pktType, wpt_uint32 nPktSize,
                             wpalPacketLowPacketCB rxLowCB, void *usrData)
{
   VOS_STATUS   vosStatus = VOS_STATUS_E_FAILURE;
   wpt_packet*  pPkt      = NULL;
   vos_pkt_t*   pVosPkt   = NULL;
   void*        pData     = NULL;
   v_U16_t      allocLen;
   /*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */

   switch (pktType)
   {
   case eWLAN_PAL_PKT_TYPE_TX_802_11_MGMT:
      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,
                                       nPktSize, 1, VOS_FALSE,
                                       NULL, NULL /*no callback*/);
      break;

   case eWLAN_PAL_PKT_TYPE_RX_RAW:
      /* Set the wpalPacketAvailableCB before we try to get a VOS
       * packet from the 'free list' and reset it if vos_pkt_get_packet()
       * returns a valid packet. This order is required to avoid the
       * race condition:
       * 1. The below call to vos_pkt_get_packet() in RX_Thread determines
       *    that no more packets are available in the 'free list' and sets
       *    the low resource callbacks.
       * 2. in parallel vos_pkt_return_packet() is called in MC_Thread for a
       *    Management frame before wpalPacketAlloc() gets a chance to set
       *    wpalPacketAvailableCB and since the 'low resource callbacks'
       *    are set the callback function - wpalPacketRXLowResourceCB is
       *    executed,but since wpalPacketAvailableCB is still NULL the low
       *    resource recovery fails.
       */
      wpalPacketAvailableCB = rxLowCB;

      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,
                                       nPktSize, 1, VOS_FALSE,
                                       wpalPacketRXLowResourceCB, usrData);

#ifndef FEATURE_R33D
      /* Reserve the entire raw rx buffer for DXE */
      if( vosStatus == VOS_STATUS_SUCCESS )
      {
        wpalPacketAvailableCB = NULL;
        vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize );
      }
#endif /* FEATURE_R33D */
      if((NULL != pVosPkt) && (VOS_STATUS_E_RESOURCES != vosStatus))
      {
         vos_pkt_get_packet_length(pVosPkt, &allocLen);
         if (nPktSize != allocLen)
         {
            WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,
                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);
            vos_pkt_return_packet(pVosPkt);
            return NULL;
         }
      }
      break;

   default:
      WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  " try to allocate unsupported packet type (%d)", pktType);
      break;
   }

   if(VOS_IS_STATUS_SUCCESS(vosStatus))
   {
      pPkt = (wpt_packet *)pVosPkt;
   }


   return pPkt;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
4,10
7,8
7,9
8,9
10,11
12,13
12,14
13,14
15,16
17,18
17,19
18,19
20,21
22,23
22,24
24,25
24,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
28,29
29,30
29,31
30,31
32,33
32,34
34,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
41,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
54,55
55,56
57,58
58,59
58,60
60,61
60,62
60,63
63,64
64,65
66,67
67,68
67,69
68,69
70,71
72,73
72,74
73,74
75,76
75,77
75,78
75,79
75,80
75,81
75,82
75,83
75,84
75,85
75,86
75,87
76,77
77,78
79,80
80,81
80,82
81,82
83,84
83,85
83,86
83,87
83,88
83,89
83,90
83,91
84,85
86,87
87,88
89,90
91,92
94,95
96,97
98,99
101,102
102,103
104,105
105,106
105,107
106,107
108,109
110,111
111,112
111,113
112,113
114,115
114,116
114,117
114,118
114,119
114,120
114,121
114,122
115,116
117,118
118,119
120,121
122,123
125,126
127,128
129,130
131,132
131,133
132,133
132,134
133,134
135,136
137,138
137,139
138,139
139,140
139,141
140,141
142,143
144,145
145,146
145,147
146,147
148,149
148,150
148,151
148,152
149,150
151,152
153,154
154,155
156,157
158,159
158,160
159,160
159,161
160,161
161,162
161,163
162,163
164,165
166,167
167,168
167,169
168,169
170,171
172,173
172,174
173,174
174,175
174,176
174,177
175,176
177,178
179,180
180,181
182,183
182,184
183,184
183,185
184,185
186,187
188,189
188,190
188,191
189,190
190,191
190,192
190,193
190,194
190,195
191,192
193,194
195,196
198,199
200,201
201,202
201,203
202,203
204,205
206,207
207,208
211,212
212,213
212,214
212,215
212,216
212,217
213,214
215,216
217,218
220,221
223,224
223,225
224,225
224,226
225,226
227,228
229,230
230,231
231,232
231,233
232,233
234,235
234,236
235,236
235,237
236,237
238,239
240,241
242,243
243,244
-----nextToken-----
3,5,6,9,11,14,16,19,21,23,25,26,31,33,36,40,42,43,46,50,52,53,56,59,61,62,65,69,71,74,78,82,85,88,90,92,93,95,97,99,100,103,107,109,113,116,119,121,123,124,126,128,130,134,136,141,143,147,150,152,155,157,163,165,169,171,176,178,181,185,187,192,194,196,197,199,203,205,208,209,210,214,216,218,219,221,222,226,228,233,237,239,241,244
-----computeFrom-----
80,81
80,82
105,106
105,107
111,112
111,113
132,133
132,134
139,140
139,141
145,146
145,147
159,160
159,161
161,162
161,163
167,168
167,169
183,184
183,185
231,232
231,233
-----guardedBy-----
134,147
163,208
165,205
187,199
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;BreakStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
wpt_packet * wpalPacketAlloc(wpt_packet_type pktType, wpt_uint32 nPktSize,                             wpalPacketLowPacketCB rxLowCB, void *usrData){   VOS_STATUS   vosStatus = VOS_STATUS_E_FAILURE;   wpt_packet*  pPkt      = NULL;   vos_pkt_t*   pVosPkt   = NULL;   void*        pData     = NULL;   v_U16_t      allocLen;   /*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */   switch (pktType)   {   case eWLAN_PAL_PKT_TYPE_TX_802_11_MGMT:      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,                                       nPktSize, 1, VOS_FALSE,                                       NULL, NULL /*no callback*/);      break;   case eWLAN_PAL_PKT_TYPE_RX_RAW:      /* Set the wpalPacketAvailableCB before we try to get a VOS       * packet from the 'free list' and reset it if vos_pkt_get_packet()       * returns a valid packet. This order is required to avoid the       * race condition:       * 1. The below call to vos_pkt_get_packet() in RX_Thread determines       *    that no more packets are available in the 'free list' and sets       *    the low resource callbacks.       * 2. in parallel vos_pkt_return_packet() is called in MC_Thread for a       *    Management frame before wpalPacketAlloc() gets a chance to set       *    wpalPacketAvailableCB and since the 'low resource callbacks'       *    are set the callback function - wpalPacketRXLowResourceCB is       *    executed,but since wpalPacketAvailableCB is still NULL the low       *    resource recovery fails.       */      wpalPacketAvailableCB = rxLowCB;      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,                                       nPktSize, 1, VOS_FALSE,                                       wpalPacketRXLowResourceCB, usrData);#ifndef FEATURE_R33D      /* Reserve the entire raw rx buffer for DXE */      if( vosStatus == VOS_STATUS_SUCCESS )      {        wpalPacketAvailableCB = NULL;        vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize );      }#endif /* FEATURE_R33D */      if((NULL != pVosPkt) && (VOS_STATUS_E_RESOURCES != vosStatus))      {         vos_pkt_get_packet_length(pVosPkt, &allocLen);         if (nPktSize != allocLen)         {            WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);            vos_pkt_return_packet(pVosPkt);            return NULL;         }      }      break;   default:      WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                  " try to allocate unsupported packet type (%d)", pktType);      break;   }   if(VOS_IS_STATUS_SUCCESS(vosStatus))   {      pPkt = (wpt_packet *)pVosPkt;   }   return pPkt;}
wpt_packet
wpt_packet
* wpalPacketAlloc(wpt_packet_type pktType, wpt_uint32 nPktSize,                             wpalPacketLowPacketCB rxLowCB, void *usrData)
*
wpalPacketAlloc
wpt_packet_type pktType
wpt_packet_type
wpt_packet_type
pktType
pktType
wpt_uint32 nPktSize
wpt_uint32
wpt_uint32
nPktSize
nPktSize
wpalPacketLowPacketCB rxLowCB
wpalPacketLowPacketCB
wpalPacketLowPacketCB
rxLowCB
rxLowCB
void *usrData
void
*usrData
*
usrData
{   VOS_STATUS   vosStatus = VOS_STATUS_E_FAILURE;   wpt_packet*  pPkt      = NULL;   vos_pkt_t*   pVosPkt   = NULL;   void*        pData     = NULL;   v_U16_t      allocLen;   /*- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - */   switch (pktType)   {   case eWLAN_PAL_PKT_TYPE_TX_802_11_MGMT:      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,                                       nPktSize, 1, VOS_FALSE,                                       NULL, NULL /*no callback*/);      break;   case eWLAN_PAL_PKT_TYPE_RX_RAW:      /* Set the wpalPacketAvailableCB before we try to get a VOS       * packet from the 'free list' and reset it if vos_pkt_get_packet()       * returns a valid packet. This order is required to avoid the       * race condition:       * 1. The below call to vos_pkt_get_packet() in RX_Thread determines       *    that no more packets are available in the 'free list' and sets       *    the low resource callbacks.       * 2. in parallel vos_pkt_return_packet() is called in MC_Thread for a       *    Management frame before wpalPacketAlloc() gets a chance to set       *    wpalPacketAvailableCB and since the 'low resource callbacks'       *    are set the callback function - wpalPacketRXLowResourceCB is       *    executed,but since wpalPacketAvailableCB is still NULL the low       *    resource recovery fails.       */      wpalPacketAvailableCB = rxLowCB;      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,                                       nPktSize, 1, VOS_FALSE,                                       wpalPacketRXLowResourceCB, usrData);#ifndef FEATURE_R33D      /* Reserve the entire raw rx buffer for DXE */      if( vosStatus == VOS_STATUS_SUCCESS )      {        wpalPacketAvailableCB = NULL;        vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize );      }#endif /* FEATURE_R33D */      if((NULL != pVosPkt) && (VOS_STATUS_E_RESOURCES != vosStatus))      {         vos_pkt_get_packet_length(pVosPkt, &allocLen);         if (nPktSize != allocLen)         {            WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);            vos_pkt_return_packet(pVosPkt);            return NULL;         }      }      break;   default:      WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                  " try to allocate unsupported packet type (%d)", pktType);      break;   }   if(VOS_IS_STATUS_SUCCESS(vosStatus))   {      pPkt = (wpt_packet *)pVosPkt;   }   return pPkt;}
VOS_STATUS   vosStatus = VOS_STATUS_E_FAILURE;
VOS_STATUS   vosStatus = VOS_STATUS_E_FAILURE;
VOS_STATUS
VOS_STATUS
vosStatus = VOS_STATUS_E_FAILURE
vosStatus
= VOS_STATUS_E_FAILURE
VOS_STATUS_E_FAILURE
VOS_STATUS_E_FAILURE
wpt_packet*  pPkt      = NULL;
wpt_packet*  pPkt      = NULL;
wpt_packet
wpt_packet
*  pPkt      = NULL
*
pPkt
= NULL
NULL
NULL
vos_pkt_t*   pVosPkt   = NULL;
vos_pkt_t*   pVosPkt   = NULL;
vos_pkt_t
vos_pkt_t
*   pVosPkt   = NULL
*
pVosPkt
= NULL
NULL
NULL
void*        pData     = NULL;
void*        pData     = NULL;
void
*        pData     = NULL
*
pData
= NULL
NULL
NULL
v_U16_t      allocLen;
v_U16_t      allocLen;
v_U16_t
v_U16_t
allocLen
allocLen
switch (pktType)   {   case eWLAN_PAL_PKT_TYPE_TX_802_11_MGMT:      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,                                       nPktSize, 1, VOS_FALSE,                                       NULL, NULL /*no callback*/);      break;   case eWLAN_PAL_PKT_TYPE_RX_RAW:      /* Set the wpalPacketAvailableCB before we try to get a VOS       * packet from the 'free list' and reset it if vos_pkt_get_packet()       * returns a valid packet. This order is required to avoid the       * race condition:       * 1. The below call to vos_pkt_get_packet() in RX_Thread determines       *    that no more packets are available in the 'free list' and sets       *    the low resource callbacks.       * 2. in parallel vos_pkt_return_packet() is called in MC_Thread for a       *    Management frame before wpalPacketAlloc() gets a chance to set       *    wpalPacketAvailableCB and since the 'low resource callbacks'       *    are set the callback function - wpalPacketRXLowResourceCB is       *    executed,but since wpalPacketAvailableCB is still NULL the low       *    resource recovery fails.       */      wpalPacketAvailableCB = rxLowCB;      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,                                       nPktSize, 1, VOS_FALSE,                                       wpalPacketRXLowResourceCB, usrData);#ifndef FEATURE_R33D      /* Reserve the entire raw rx buffer for DXE */      if( vosStatus == VOS_STATUS_SUCCESS )      {        wpalPacketAvailableCB = NULL;        vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize );      }#endif /* FEATURE_R33D */      if((NULL != pVosPkt) && (VOS_STATUS_E_RESOURCES != vosStatus))      {         vos_pkt_get_packet_length(pVosPkt, &allocLen);         if (nPktSize != allocLen)         {            WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);            vos_pkt_return_packet(pVosPkt);            return NULL;         }      }      break;   default:      WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                  " try to allocate unsupported packet type (%d)", pktType);      break;   }
pktType
pktType
{   case eWLAN_PAL_PKT_TYPE_TX_802_11_MGMT:      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,                                       nPktSize, 1, VOS_FALSE,                                       NULL, NULL /*no callback*/);      break;   case eWLAN_PAL_PKT_TYPE_RX_RAW:      /* Set the wpalPacketAvailableCB before we try to get a VOS       * packet from the 'free list' and reset it if vos_pkt_get_packet()       * returns a valid packet. This order is required to avoid the       * race condition:       * 1. The below call to vos_pkt_get_packet() in RX_Thread determines       *    that no more packets are available in the 'free list' and sets       *    the low resource callbacks.       * 2. in parallel vos_pkt_return_packet() is called in MC_Thread for a       *    Management frame before wpalPacketAlloc() gets a chance to set       *    wpalPacketAvailableCB and since the 'low resource callbacks'       *    are set the callback function - wpalPacketRXLowResourceCB is       *    executed,but since wpalPacketAvailableCB is still NULL the low       *    resource recovery fails.       */      wpalPacketAvailableCB = rxLowCB;      vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,                                       nPktSize, 1, VOS_FALSE,                                       wpalPacketRXLowResourceCB, usrData);#ifndef FEATURE_R33D      /* Reserve the entire raw rx buffer for DXE */      if( vosStatus == VOS_STATUS_SUCCESS )      {        wpalPacketAvailableCB = NULL;        vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize );      }#endif /* FEATURE_R33D */      if((NULL != pVosPkt) && (VOS_STATUS_E_RESOURCES != vosStatus))      {         vos_pkt_get_packet_length(pVosPkt, &allocLen);         if (nPktSize != allocLen)         {            WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);            vos_pkt_return_packet(pVosPkt);            return NULL;         }      }      break;   default:      WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                  " try to allocate unsupported packet type (%d)", pktType);      break;   }
case eWLAN_PAL_PKT_TYPE_TX_802_11_MGMT:
eWLAN_PAL_PKT_TYPE_TX_802_11_MGMT
eWLAN_PAL_PKT_TYPE_TX_802_11_MGMT
vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,                                       nPktSize, 1, VOS_FALSE,                                       NULL, NULL /*no callback*/);
vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,                                       nPktSize, 1, VOS_FALSE,                                       NULL, NULL /*no callback*/)
vosStatus
vosStatus
vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,                                       nPktSize, 1, VOS_FALSE,                                       NULL, NULL /*no callback*/)
vos_pkt_get_packet
vos_pkt_get_packet
&pVosPkt
pVosPkt
pVosPkt
VOS_PKT_TYPE_TX_802_11_MGMT
VOS_PKT_TYPE_TX_802_11_MGMT
nPktSize
nPktSize
1
VOS_FALSE
VOS_FALSE
NULL
NULL
NULL
NULL
break;
case eWLAN_PAL_PKT_TYPE_RX_RAW:
eWLAN_PAL_PKT_TYPE_RX_RAW
eWLAN_PAL_PKT_TYPE_RX_RAW
wpalPacketAvailableCB = rxLowCB;
wpalPacketAvailableCB = rxLowCB
wpalPacketAvailableCB
wpalPacketAvailableCB
rxLowCB
rxLowCB
vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,                                       nPktSize, 1, VOS_FALSE,                                       wpalPacketRXLowResourceCB, usrData);
vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,                                       nPktSize, 1, VOS_FALSE,                                       wpalPacketRXLowResourceCB, usrData)
vosStatus
vosStatus
vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,                                       nPktSize, 1, VOS_FALSE,                                       wpalPacketRXLowResourceCB, usrData)
vos_pkt_get_packet
vos_pkt_get_packet
&pVosPkt
pVosPkt
pVosPkt
VOS_PKT_TYPE_RX_RAW
VOS_PKT_TYPE_RX_RAW
nPktSize
nPktSize
1
VOS_FALSE
VOS_FALSE
wpalPacketRXLowResourceCB
wpalPacketRXLowResourceCB
usrData
usrData
if( vosStatus == VOS_STATUS_SUCCESS )      {        wpalPacketAvailableCB = NULL;        vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize );      }
vosStatus == VOS_STATUS_SUCCESS
vosStatus
vosStatus
VOS_STATUS_SUCCESS
VOS_STATUS_SUCCESS
{        wpalPacketAvailableCB = NULL;        vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize );      }
wpalPacketAvailableCB = NULL;
wpalPacketAvailableCB = NULL
wpalPacketAvailableCB
wpalPacketAvailableCB
NULL
NULL
vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize );
vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize )
vosStatus
vosStatus
vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize )
vos_pkt_reserve_head_fast
vos_pkt_reserve_head_fast
pVosPkt
pVosPkt
&pData
pData
pData
nPktSize
nPktSize
if((NULL != pVosPkt) && (VOS_STATUS_E_RESOURCES != vosStatus))      {         vos_pkt_get_packet_length(pVosPkt, &allocLen);         if (nPktSize != allocLen)         {            WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);            vos_pkt_return_packet(pVosPkt);            return NULL;         }      }
(NULL != pVosPkt) && (VOS_STATUS_E_RESOURCES != vosStatus)
(NULL != pVosPkt)
NULL != pVosPkt
NULL
NULL
pVosPkt
pVosPkt
(VOS_STATUS_E_RESOURCES != vosStatus)
VOS_STATUS_E_RESOURCES != vosStatus
VOS_STATUS_E_RESOURCES
VOS_STATUS_E_RESOURCES
vosStatus
vosStatus
{         vos_pkt_get_packet_length(pVosPkt, &allocLen);         if (nPktSize != allocLen)         {            WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);            vos_pkt_return_packet(pVosPkt);            return NULL;         }      }
vos_pkt_get_packet_length(pVosPkt, &allocLen);
vos_pkt_get_packet_length(pVosPkt, &allocLen)
vos_pkt_get_packet_length
vos_pkt_get_packet_length
pVosPkt
pVosPkt
&allocLen
allocLen
allocLen
if (nPktSize != allocLen)         {            WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);            vos_pkt_return_packet(pVosPkt);            return NULL;         }
nPktSize != allocLen
nPktSize
nPktSize
allocLen
allocLen
{            WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);            vos_pkt_return_packet(pVosPkt);            return NULL;         }
WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen);
WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                       "RX packet alloc has problem, discard this frame, Len %d", allocLen)
WPAL_TRACE
WPAL_TRACE
eWLAN_MODULE_PAL
eWLAN_MODULE_PAL
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"RX packet alloc has problem, discard this frame, Len %d"
allocLen
allocLen
vos_pkt_return_packet(pVosPkt);
vos_pkt_return_packet(pVosPkt)
vos_pkt_return_packet
vos_pkt_return_packet
pVosPkt
pVosPkt
return NULL;
NULL
NULL
break;
default:
WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                  " try to allocate unsupported packet type (%d)", pktType);
WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,                  " try to allocate unsupported packet type (%d)", pktType)
WPAL_TRACE
WPAL_TRACE
eWLAN_MODULE_PAL
eWLAN_MODULE_PAL
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
" try to allocate unsupported packet type (%d)"
pktType
pktType
break;
if(VOS_IS_STATUS_SUCCESS(vosStatus))   {      pPkt = (wpt_packet *)pVosPkt;   }
VOS_IS_STATUS_SUCCESS(vosStatus)
VOS_IS_STATUS_SUCCESS
VOS_IS_STATUS_SUCCESS
vosStatus
vosStatus
{      pPkt = (wpt_packet *)pVosPkt;   }
pPkt = (wpt_packet *)pVosPkt;
pPkt = (wpt_packet *)pVosPkt
pPkt
pPkt
(wpt_packet *)pVosPkt
wpt_packet *
wpt_packet
wpt_packet
*
*
pVosPkt
pVosPkt
return pPkt;
pPkt
pPkt
-----joern-----
(113,69,0)
(91,14,0)
(50,46,0)
(59,110,0)
(24,15,0)
(45,15,0)
(107,3,0)
(89,72,0)
(0,18,0)
(82,17,0)
(34,3,0)
(7,50,0)
(6,31,0)
(19,3,0)
(55,3,0)
(79,59,0)
(57,15,0)
(58,59,0)
(22,30,0)
(27,30,0)
(44,13,0)
(5,114,0)
(76,47,0)
(106,110,0)
(107,114,0)
(11,59,0)
(100,89,0)
(29,114,0)
(97,31,0)
(90,56,0)
(99,67,0)
(96,42,0)
(96,18,0)
(63,56,0)
(59,79,0)
(85,89,0)
(1,31,0)
(75,114,0)
(53,57,0)
(48,108,0)
(4,13,0)
(43,15,0)
(110,59,0)
(69,113,0)
(83,49,0)
(14,57,0)
(51,46,0)
(105,111,0)
(69,38,0)
(32,46,0)
(88,79,0)
(70,5,0)
(56,31,0)
(66,105,0)
(23,108,0)
(112,106,0)
(93,108,0)
(61,105,0)
(46,31,0)
(10,15,0)
(65,15,0)
(18,96,0)
(52,106,0)
(42,98,0)
(39,31,0)
(47,12,0)
(98,30,0)
(8,18,0)
(42,96,0)
(73,31,0)
(28,38,0)
(68,42,0)
(42,110,0)
(3,107,0)
(95,59,0)
(48,30,0)
(40,110,0)
(17,62,0)
(13,15,0)
(110,31,0)
(80,59,0)
(60,59,0)
(14,15,0)
(30,98,0)
(30,114,0)
(47,5,0)
(44,98,0)
(33,3,0)
(78,105,0)
(103,31,0)
(67,31,0)
(64,15,0)
(54,31,0)
(18,114,0)
(98,62,0)
(14,47,0)
(108,15,0)
(25,57,0)
(104,3,0)
(30,48,0)
(26,15,0)
(2,98,0)
(101,107,0)
(5,47,0)
(3,67,0)
(20,17,0)
(44,110,0)
(94,56,0)
(84,5,0)
(59,72,0)
(67,3,0)
(5,70,0)
(102,42,0)
(109,50,0)
(9,31,0)
(49,111,0)
(41,69,0)
(50,17,0)
(69,114,0)
(79,114,0)
(3,72,0)
(87,56,0)
(35,13,0)
(86,3,0)
(46,21,0)
(71,59,0)
(44,67,0)
(92,105,0)
(56,81,0)
(16,113,0)
(77,48,0)
(30,72,0)
(50,111,0)
(37,44,0)
(59,36,0)
(49,114,0)
(109,14,0)
(114,15,0)
(59,36,1)
(89,85,1)
(98,30,1)
(78,89,1)
(5,84,1)
(109,14,1)
(44,13,1)
(49,114,1)
(94,90,1)
(69,113,1)
(48,77,1)
(56,63,1)
(0,106,1)
(30,48,1)
(110,59,1)
(11,80,1)
(40,46,1)
(84,76,1)
(59,72,1)
(30,27,1)
(33,19,1)
(37,39,1)
(5,114,1)
(3,72,1)
(59,79,1)
(92,78,1)
(46,21,1)
(101,99,1)
(79,88,1)
(20,106,1)
(77,22,1)
(17,82,1)
(90,87,1)
(50,46,1)
(44,67,1)
(5,70,1)
(39,89,1)
(19,86,1)
(30,114,1)
(34,33,1)
(3,107,1)
(106,112,1)
(100,69,1)
(79,114,1)
(102,18,1)
(76,44,1)
(29,57,1)
(75,29,1)
(91,47,1)
(49,83,1)
(63,94,1)
(74,108,1)
(86,55,1)
(4,35,1)
(50,17,1)
(107,101,1)
(85,100,1)
(66,61,1)
(80,95,1)
(37,9,1)
(27,48,1)
(99,74,1)
(96,42,1)
(22,2,1)
(39,96,1)
(50,7,1)
(16,41,1)
(59,71,1)
(42,98,1)
(30,72,1)
(44,37,1)
(18,8,1)
(46,51,1)
(96,18,1)
(88,40,1)
(93,114,1)
(114,75,1)
(53,25,1)
(105,66,1)
(14,57,1)
(25,13,1)
(61,92,1)
(55,104,1)
(60,79,1)
(23,93,1)
(68,102,1)
(51,32,1)
(108,23,1)
(107,114,1)
(106,110,1)
(0,98,1)
(91,44,1)
(104,107,1)
(42,68,1)
(69,114,1)
(56,81,1)
(44,98,1)
(9,67,1)
(87,74,1)
(83,105,1)
(89,72,1)
(3,34,1)
(52,110,1)
(109,50,1)
(95,60,1)
(67,3,1)
(2,17,1)
(41,96,1)
(37,6,1)
(57,53,1)
(47,5,1)
(44,110,1)
(14,91,1)
(112,52,1)
(32,74,1)
(82,20,1)
(6,56,1)
(58,11,1)
(113,16,1)
(7,49,1)
(13,4,1)
(48,108,1)
(71,58,1)
(18,114,1)
(42,110,1)
(8,0,1)
(14,47,1)
(91,89,2)
(79,74,2)
(3,74,2)
(49,114,2)
(106,74,2)
(59,72,2)
(59,74,2)
(8,74,2)
(18,114,2)
(46,21,2)
(30,72,2)
(96,74,2)
(90,74,2)
(107,74,2)
(42,110,2)
(19,74,2)
(16,96,2)
(44,96,2)
(44,110,2)
(67,74,2)
(37,74,2)
(113,96,2)
(41,96,2)
(110,59,2)
(71,74,2)
(5,44,2)
(50,89,2)
(95,74,2)
(77,106,2)
(55,74,2)
(99,74,2)
(83,89,2)
(14,74,2)
(78,89,2)
(69,96,2)
(109,50,2)
(34,74,2)
(47,44,2)
(94,74,2)
(69,113,2)
(44,67,2)
(84,44,2)
(11,74,2)
(40,74,2)
(9,74,2)
(37,89,2)
(112,74,2)
(50,17,2)
(66,89,2)
(30,48,2)
(105,89,2)
(0,74,2)
(17,106,2)
(67,3,2)
(44,74,2)
(98,30,2)
(14,89,2)
(56,81,2)
(7,89,2)
(91,96,2)
(42,98,2)
(89,72,2)
(85,96,2)
(92,89,2)
(48,106,2)
(22,106,2)
(91,74,2)
(59,79,2)
(88,74,2)
(39,96,2)
(20,106,2)
(98,106,2)
(46,74,2)
(68,18,2)
(58,74,2)
(32,74,2)
(30,106,2)
(82,106,2)
(37,96,2)
(89,96,2)
(109,14,2)
(18,74,2)
(63,74,2)
(3,72,2)
(47,5,2)
(102,18,2)
(5,114,2)
(51,74,2)
(49,89,2)
(33,74,2)
(14,96,2)
(2,106,2)
(27,106,2)
(104,74,2)
(79,114,2)
(80,74,2)
(107,114,2)
(52,74,2)
(44,13,2)
(14,47,2)
(14,57,2)
(5,70,2)
(96,42,2)
(69,114,2)
(86,74,2)
(106,110,2)
(60,74,2)
(96,18,2)
(100,96,2)
(56,74,2)
(87,74,2)
(50,46,2)
(6,74,2)
(76,44,2)
(3,107,2)
(59,36,2)
(110,74,2)
(44,98,2)
(101,74,2)
(30,114,2)
(48,108,2)
(42,18,2)
(61,89,2)
(44,89,2)
(39,89,2)
-----------------------------------
(0,NULL)
(1,if((NULL != pVosPkt)
(2,vosStatus)
(3,vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,\n\\n                                       nPktSize, 1, VOS_FALSE,\n\\n                                       NULL, NULL /*no callback*/)
(4,VOS_STATUS_E_FAILURE)
(5,(wpt_packet *)
(6,break;)
(7,NULL)
(8,pVosPkt)
(9,break;)
(10,pData)
(11,VOS_FALSE)
(12,)
(13,vosStatus = VOS_STATUS_E_FAILURE)
(14,return pPkt;)
(15,)
(16,allocLen)
(17,wpalPacketAvailableCB = NULL)
(18,NULL != pVosPkt)
(19,VOS_FALSE)
(20,wpalPacketAvailableCB)
(21,wpalPacketLowPacketCB rxLowCB)
(22,pVosPkt)
(23,NULL)
(24,if(VOS_IS_STATUS_SUCCESS(vosStatus)
(25,pPkt)
(26,pVosPkt)
(27,nPktSize)
(28,if (nPktSize != allocLen)
(29,pVosPkt)
(30,vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize )
(31,)
(32,wpalPacketAvailableCB)
(33,NULL)
(34,NULL)
(35,vosStatus)
(36,void *usrData)
(37,vosStatus)
(38,)
(39,break;)
(40,vosStatus)
(41,pVosPkt)
(42,VOS_STATUS_E_RESOURCES != vosStatus)
(43,pPkt)
(44,VOS_IS_STATUS_SUCCESS(vosStatus)
(45,vosStatus)
(46,wpalPacketAvailableCB = rxLowCB)
(47,pPkt = (wpt_packet *)
(48,&pData)
(49,vos_pkt_return_packet(pVosPkt)
(50,return NULL;)
(51,rxLowCB)
(52,vosStatus)
(53,NULL)
(54,case eWLAN_PAL_PKT_TYPE_RX_RAW:)
(55,nPktSize)
(56,WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  " try to allocate unsupported packet type (%d)
(57,*  pPkt      = NULL)
(58,wpalPacketRXLowResourceCB)
(59,vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,\n\\n                                       nPktSize, 1, VOS_FALSE,\n\\n                                       wpalPacketRXLowResourceCB, usrData)
(60,VOS_PKT_TYPE_RX_RAW)
(61,"RX packet alloc has problem, discard this frame, Len %d")
(62,)
(63,pktType)
(64,switch (pktType)
(65,allocLen)
(66,allocLen)
(67,vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_TX_802_11_MGMT,\n\\n                                       nPktSize, 1, VOS_FALSE,\n\\n                                       NULL, NULL /*no callback*/)
(68,vosStatus)
(69,vos_pkt_get_packet_length(pVosPkt, &allocLen)
(70,wpt_packet *)
(71,usrData)
(72,wpt_uint32 nPktSize)
(73,if( vosStatus == VOS_STATUS_SUCCESS )
(74,pktType)
(75,NULL)
(76,pPkt)
(77,pData)
(78,eWLAN_MODULE_PAL)
(79,&pVosPkt)
(80,1)
(81,wpt_packet_type pktType)
(82,NULL)
(83,pVosPkt)
(84,pVosPkt)
(85,allocLen)
(86,1)
(87,eWLAN_MODULE_PAL)
(88,pVosPkt)
(89,nPktSize != allocLen)
(90,eWLAN_PAL_TRACE_LEVEL_ERROR)
(91,pPkt)
(92,eWLAN_PAL_TRACE_LEVEL_ERROR)
(93,pData)
(94," try to allocate unsupported packet type (%d)
(95,nPktSize)
(96,(NULL != pVosPkt)
(97,default:)
(98,vosStatus =  vos_pkt_reserve_head_fast( pVosPkt, &pData, nPktSize )
(99,vosStatus)
(100,nPktSize)
(101,pVosPkt)
(102,VOS_STATUS_E_RESOURCES)
(103,case eWLAN_PAL_PKT_TYPE_TX_802_11_MGMT:)
(104,VOS_PKT_TYPE_TX_802_11_MGMT)
(105,WPAL_TRACE(eWLAN_MODULE_PAL, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                       "RX packet alloc has problem, discard this frame, Len %d", allocLen)
(106,vosStatus == VOS_STATUS_SUCCESS)
(107,&pVosPkt)
(108,*        pData     = NULL)
(109,RET)
(110,vosStatus = vos_pkt_get_packet(&pVosPkt, VOS_PKT_TYPE_RX_RAW,\n\\n                                       nPktSize, 1, VOS_FALSE,\n\\n                                       wpalPacketRXLowResourceCB, usrData)
(111,)
(112,VOS_STATUS_SUCCESS)
(113,&allocLen)
(114,*   pVosPkt   = NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^