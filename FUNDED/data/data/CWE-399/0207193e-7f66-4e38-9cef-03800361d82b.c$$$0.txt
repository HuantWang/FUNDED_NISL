-----label-----
1
-----code-----
static int xgene_pcie_probe_bridge(struct platform_device *pdev)
{
	struct device_node *dn = pdev->dev.of_node;
	struct xgene_pcie_port *port;
	resource_size_t iobase = 0;
	struct pci_bus *bus;
	int ret;
	LIST_HEAD(res);

	port = devm_kzalloc(&pdev->dev, sizeof(*port), GFP_KERNEL);
	if (!port)
		return -ENOMEM;
	port->node = of_node_get(pdev->dev.of_node);
	port->dev = &pdev->dev;

	ret = xgene_pcie_map_reg(port, pdev);
	if (ret)
		return ret;

	ret = xgene_pcie_init_port(port);
	if (ret)
		return ret;

	ret = of_pci_get_host_bridge_resources(dn, 0, 0xff, &res, &iobase);
	if (ret)
		return ret;

	ret = xgene_pcie_setup(port, &res, iobase);
	if (ret)
		return ret;

	bus = pci_scan_root_bus(&pdev->dev, 0, &xgene_pcie_ops, port, &res);
	if (!bus)
		return -ENOMEM;

	platform_set_drvdata(pdev, port);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
26,27
27,28
27,29
28,29
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
49,50
49,51
51,52
53,54
54,55
54,56
55,56
57,58
58,59
60,61
61,62
61,63
62,63
64,65
64,66
64,67
64,68
65,66
67,68
68,69
68,70
69,70
72,73
73,74
74,75
75,76
77,78
79,80
79,81
80,81
81,82
83,84
84,85
85,86
87,88
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
96,97
96,98
97,98
97,99
98,99
102,103
103,104
103,105
104,105
104,106
105,106
108,109
109,110
109,111
110,111
113,114
114,115
114,116
115,116
117,118
117,119
117,120
118,119
120,121
122,123
124,125
124,126
125,126
127,128
128,129
130,131
131,132
131,133
132,133
134,135
134,136
135,136
137,138
139,140
139,141
140,141
142,143
143,144
145,146
146,147
146,148
147,148
149,150
149,151
149,152
149,153
149,154
149,155
150,151
152,153
156,157
157,158
159,160
160,161
162,163
162,164
163,164
165,166
166,167
168,169
169,170
169,171
170,171
172,173
172,174
172,175
172,176
173,174
175,176
177,178
178,179
180,181
182,183
182,184
183,184
185,186
186,187
188,189
189,190
189,191
190,191
192,193
192,194
192,195
192,196
192,197
192,198
193,194
195,196
196,197
196,198
197,198
201,202
202,203
204,205
206,207
207,208
209,210
209,211
210,211
211,212
213,214
214,215
215,216
217,218
218,219
218,220
218,221
219,220
221,222
223,224
225,226
-----nextToken-----
2,4,7,9,10,15,17,18,23,24,25,29,31,32,36,38,40,44,46,47,50,52,56,59,63,66,70,71,76,78,82,86,91,92,95,99,100,101,106,107,111,112,116,119,121,123,126,129,133,136,138,141,144,148,151,153,154,155,158,161,164,167,171,174,176,179,181,184,187,191,194,198,199,200,203,205,208,212,216,220,222,224,226
-----computeFrom-----
61,62
61,63
88,89
88,90
103,104
103,105
114,115
114,116
131,132
131,133
146,147
146,148
169,170
169,171
189,190
189,191
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int xgene_pcie_probe_bridge(struct platform_device *pdev){	struct device_node *dn = pdev->dev.of_node;	struct xgene_pcie_port *port;	resource_size_t iobase = 0;	struct pci_bus *bus;	int ret;	LIST_HEAD(res);	port = devm_kzalloc(&pdev->dev, sizeof(*port), GFP_KERNEL);	if (!port)		return -ENOMEM;	port->node = of_node_get(pdev->dev.of_node);	port->dev = &pdev->dev;	ret = xgene_pcie_map_reg(port, pdev);	if (ret)		return ret;	ret = xgene_pcie_init_port(port);	if (ret)		return ret;	ret = of_pci_get_host_bridge_resources(dn, 0, 0xff, &res, &iobase);	if (ret)		return ret;	ret = xgene_pcie_setup(port, &res, iobase);	if (ret)		return ret;	bus = pci_scan_root_bus(&pdev->dev, 0, &xgene_pcie_ops, port, &res);	if (!bus)		return -ENOMEM;	platform_set_drvdata(pdev, port);	return 0;}
static int
xgene_pcie_probe_bridge(struct platform_device *pdev)
xgene_pcie_probe_bridge
struct platform_device *pdev
struct platform_device
platform_device
*pdev
*
pdev
{	struct device_node *dn = pdev->dev.of_node;	struct xgene_pcie_port *port;	resource_size_t iobase = 0;	struct pci_bus *bus;	int ret;	LIST_HEAD(res);	port = devm_kzalloc(&pdev->dev, sizeof(*port), GFP_KERNEL);	if (!port)		return -ENOMEM;	port->node = of_node_get(pdev->dev.of_node);	port->dev = &pdev->dev;	ret = xgene_pcie_map_reg(port, pdev);	if (ret)		return ret;	ret = xgene_pcie_init_port(port);	if (ret)		return ret;	ret = of_pci_get_host_bridge_resources(dn, 0, 0xff, &res, &iobase);	if (ret)		return ret;	ret = xgene_pcie_setup(port, &res, iobase);	if (ret)		return ret;	bus = pci_scan_root_bus(&pdev->dev, 0, &xgene_pcie_ops, port, &res);	if (!bus)		return -ENOMEM;	platform_set_drvdata(pdev, port);	return 0;}
struct device_node *dn = pdev->dev.of_node;
struct device_node *dn = pdev->dev.of_node;
struct device_node
device_node
*dn = pdev->dev.of_node
*
dn
= pdev->dev.of_node
pdev->dev.of_node
pdev->dev
pdev
pdev
dev
of_node
struct xgene_pcie_port *port;
struct xgene_pcie_port *port;
struct xgene_pcie_port
xgene_pcie_port
*port
*
port
resource_size_t iobase = 0;
resource_size_t iobase = 0;
resource_size_t
resource_size_t
iobase = 0
iobase
= 0
0
struct pci_bus *bus;
struct pci_bus *bus;
struct pci_bus
pci_bus
*bus
*
bus
int ret;
int ret;
int
ret
ret
LIST_HEAD(res);
LIST_HEAD(res);
LIST_HEAD
LIST_HEAD
(res)
res
res
port = devm_kzalloc(&pdev->dev, sizeof(*port), GFP_KERNEL);
port = devm_kzalloc(&pdev->dev, sizeof(*port), GFP_KERNEL)
port
port
devm_kzalloc(&pdev->dev, sizeof(*port), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&pdev->dev
pdev->dev
pdev
pdev
dev
sizeof(*port)
(*port)
*port
port
port
GFP_KERNEL
GFP_KERNEL
if (!port)		return -ENOMEM;
!port
port
port
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
port->node = of_node_get(pdev->dev.of_node);
port->node = of_node_get(pdev->dev.of_node)
port->node
port
port
node
of_node_get(pdev->dev.of_node)
of_node_get
of_node_get
pdev->dev.of_node
pdev->dev
pdev
pdev
dev
of_node
port->dev = &pdev->dev;
port->dev = &pdev->dev
port->dev
port
port
dev
&pdev->dev
pdev->dev
pdev
pdev
dev
ret = xgene_pcie_map_reg(port, pdev);
ret = xgene_pcie_map_reg(port, pdev)
ret
ret
xgene_pcie_map_reg(port, pdev)
xgene_pcie_map_reg
xgene_pcie_map_reg
port
port
pdev
pdev
if (ret)		return ret;
ret
ret
return ret;
ret
ret
ret = xgene_pcie_init_port(port);
ret = xgene_pcie_init_port(port)
ret
ret
xgene_pcie_init_port(port)
xgene_pcie_init_port
xgene_pcie_init_port
port
port
if (ret)		return ret;
ret
ret
return ret;
ret
ret
ret = of_pci_get_host_bridge_resources(dn, 0, 0xff, &res, &iobase);
ret = of_pci_get_host_bridge_resources(dn, 0, 0xff, &res, &iobase)
ret
ret
of_pci_get_host_bridge_resources(dn, 0, 0xff, &res, &iobase)
of_pci_get_host_bridge_resources
of_pci_get_host_bridge_resources
dn
dn
0
0xff
&res
res
res
&iobase
iobase
iobase
if (ret)		return ret;
ret
ret
return ret;
ret
ret
ret = xgene_pcie_setup(port, &res, iobase);
ret = xgene_pcie_setup(port, &res, iobase)
ret
ret
xgene_pcie_setup(port, &res, iobase)
xgene_pcie_setup
xgene_pcie_setup
port
port
&res
res
res
iobase
iobase
if (ret)		return ret;
ret
ret
return ret;
ret
ret
bus = pci_scan_root_bus(&pdev->dev, 0, &xgene_pcie_ops, port, &res);
bus = pci_scan_root_bus(&pdev->dev, 0, &xgene_pcie_ops, port, &res)
bus
bus
pci_scan_root_bus(&pdev->dev, 0, &xgene_pcie_ops, port, &res)
pci_scan_root_bus
pci_scan_root_bus
&pdev->dev
pdev->dev
pdev
pdev
dev
0
&xgene_pcie_ops
xgene_pcie_ops
xgene_pcie_ops
port
port
&res
res
res
if (!bus)		return -ENOMEM;
!bus
bus
bus
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
platform_set_drvdata(pdev, port);
platform_set_drvdata(pdev, port)
platform_set_drvdata
platform_set_drvdata
pdev
pdev
port
port
return 0;
0
-----joern-----
(8,29,0)
(101,41,0)
(53,43,0)
(102,34,0)
(35,18,0)
(42,8,0)
(25,101,0)
(21,65,0)
(40,18,0)
(118,83,0)
(43,53,0)
(62,23,0)
(43,18,0)
(73,18,0)
(75,107,0)
(37,84,0)
(8,112,0)
(8,42,0)
(120,89,0)
(92,18,0)
(4,55,0)
(15,43,0)
(14,11,0)
(63,12,0)
(23,75,0)
(30,18,0)
(28,34,0)
(116,38,0)
(16,18,0)
(38,84,0)
(100,90,0)
(81,12,0)
(82,45,0)
(20,75,0)
(86,84,0)
(55,84,0)
(89,86,0)
(11,14,0)
(84,18,0)
(96,1,0)
(57,53,0)
(82,116,0)
(82,106,0)
(87,18,0)
(72,55,0)
(67,114,0)
(110,107,0)
(56,18,0)
(31,37,0)
(80,86,0)
(82,56,0)
(111,18,0)
(81,84,0)
(36,18,0)
(93,81,0)
(75,73,0)
(65,12,0)
(15,84,0)
(51,19,0)
(19,34,0)
(75,23,0)
(34,19,0)
(76,8,0)
(41,101,0)
(88,18,0)
(0,18,0)
(1,42,0)
(70,18,0)
(52,28,0)
(106,23,0)
(66,91,0)
(59,29,0)
(82,97,0)
(114,111,0)
(84,55,0)
(29,8,0)
(112,8,0)
(19,12,0)
(23,18,0)
(116,15,0)
(89,18,0)
(42,1,0)
(27,84,0)
(115,11,0)
(55,41,0)
(56,38,0)
(82,10,0)
(11,28,0)
(11,64,0)
(105,73,0)
(75,84,0)
(26,63,0)
(9,65,0)
(87,11,0)
(58,106,0)
(95,11,0)
(69,111,0)
(1,12,0)
(33,15,0)
(77,75,0)
(90,8,0)
(28,18,0)
(79,73,0)
(53,57,0)
(34,28,0)
(109,63,0)
(63,72,0)
(49,38,0)
(11,87,0)
(41,55,0)
(39,83,0)
(81,111,0)
(38,99,0)
(37,18,0)
(32,14,0)
(113,17,0)
(103,38,0)
(119,15,0)
(37,12,0)
(46,97,0)
(48,87,0)
(117,56,0)
(57,83,0)
(3,57,0)
(8,84,0)
(72,63,0)
(7,45,0)
(14,73,0)
(85,84,0)
(8,90,0)
(56,15,0)
(45,89,0)
(13,36,0)
(29,18,0)
(78,18,0)
(97,87,0)
(82,114,0)
(55,72,0)
(50,19,0)
(104,65,0)
(74,1,0)
(108,18,0)
(111,81,0)
(99,18,0)
(83,12,0)
(22,112,0)
(65,104,0)
(104,99,0)
(94,44,0)
(2,81,0)
(5,11,0)
(17,10,0)
(44,29,0)
(61,64,0)
(54,8,0)
(86,89,0)
(99,104,0)
(98,85,0)
(107,75,0)
(71,18,0)
(83,57,0)
(64,11,0)
(6,37,0)
(91,116,0)
(116,91,1)
(15,84,1)
(56,38,1)
(119,33,1)
(38,84,1)
(114,67,1)
(29,8,1)
(48,47,1)
(33,85,1)
(89,86,1)
(3,83,1)
(20,62,1)
(11,64,1)
(44,29,1)
(1,74,1)
(8,84,1)
(82,97,1)
(9,21,1)
(101,25,1)
(105,28,1)
(4,41,1)
(54,90,1)
(112,22,1)
(47,89,1)
(103,49,1)
(15,119,1)
(116,15,1)
(85,84,1)
(63,26,1)
(82,56,1)
(81,84,1)
(83,12,1)
(58,60,1)
(63,12,1)
(34,19,1)
(104,65,1)
(37,6,1)
(106,23,1)
(84,55,1)
(79,105,1)
(113,85,1)
(74,96,1)
(66,44,1)
(90,100,1)
(27,36,1)
(82,45,1)
(57,83,1)
(75,107,1)
(75,73,1)
(41,101,1)
(55,41,1)
(110,20,1)
(65,9,1)
(67,68,1)
(91,66,1)
(14,32,1)
(46,24,1)
(34,102,1)
(87,11,1)
(96,59,1)
(86,84,1)
(72,63,1)
(65,12,1)
(81,93,1)
(2,69,1)
(37,12,1)
(45,7,1)
(97,46,1)
(102,19,1)
(114,111,1)
(75,84,1)
(11,28,1)
(6,31,1)
(21,38,1)
(97,87,1)
(17,113,1)
(31,44,1)
(10,17,1)
(8,90,1)
(106,58,1)
(7,47,1)
(86,80,1)
(19,51,1)
(64,61,1)
(50,52,1)
(68,111,1)
(22,54,1)
(42,1,1)
(25,72,1)
(77,107,1)
(23,75,1)
(75,77,1)
(45,89,1)
(82,114,1)
(94,29,1)
(116,38,1)
(80,120,1)
(99,104,1)
(120,68,1)
(109,27,1)
(115,48,1)
(5,95,1)
(83,118,1)
(13,73,1)
(82,106,1)
(61,5,1)
(19,12,1)
(43,53,1)
(118,39,1)
(60,23,1)
(59,60,1)
(11,14,1)
(57,3,1)
(44,94,1)
(37,84,1)
(111,81,1)
(24,87,1)
(28,34,1)
(82,10,1)
(76,42,1)
(8,112,1)
(56,117,1)
(85,98,1)
(26,109,1)
(38,103,1)
(62,24,1)
(36,13,1)
(51,50,1)
(82,116,1)
(95,115,1)
(56,15,1)
(8,42,1)
(81,12,1)
(1,12,1)
(14,73,1)
(117,37,1)
(32,64,1)
(93,2,1)
(98,84,1)
(55,4,1)
(53,57,1)
(49,43,1)
(55,72,1)
(100,76,1)
(39,15,1)
(73,79,1)
(69,99,1)
(107,110,1)
(114,111,2)
(82,10,2)
(89,86,2)
(20,24,2)
(38,85,2)
(94,60,2)
(55,72,2)
(37,44,2)
(110,24,2)
(82,106,2)
(39,85,2)
(14,47,2)
(72,63,2)
(43,85,2)
(11,47,2)
(65,12,2)
(5,47,2)
(33,85,2)
(43,53,2)
(68,85,2)
(81,84,2)
(85,84,2)
(75,24,2)
(81,12,2)
(106,60,2)
(57,83,2)
(63,12,2)
(106,23,2)
(10,85,2)
(48,47,2)
(67,68,2)
(8,112,2)
(8,90,2)
(45,47,2)
(17,85,2)
(61,47,2)
(29,60,2)
(22,60,2)
(55,41,2)
(47,68,2)
(58,60,2)
(82,45,2)
(21,85,2)
(31,44,2)
(113,85,2)
(15,85,2)
(9,85,2)
(59,60,2)
(86,84,2)
(82,97,2)
(29,8,2)
(1,60,2)
(82,114,2)
(44,60,2)
(34,19,2)
(91,44,2)
(104,65,2)
(87,11,2)
(65,85,2)
(23,75,2)
(83,85,2)
(57,85,2)
(100,60,2)
(45,89,2)
(53,85,2)
(6,44,2)
(11,28,2)
(77,24,2)
(37,84,2)
(8,60,2)
(82,116,2)
(97,24,2)
(75,84,2)
(24,47,2)
(118,85,2)
(54,60,2)
(89,68,2)
(74,60,2)
(1,12,2)
(53,57,2)
(62,24,2)
(81,85,2)
(8,42,2)
(111,85,2)
(32,47,2)
(103,85,2)
(96,60,2)
(119,85,2)
(90,60,2)
(97,87,2)
(64,47,2)
(66,44,2)
(99,85,2)
(84,55,2)
(75,73,2)
(80,68,2)
(44,29,2)
(42,1,2)
(82,56,2)
(28,34,2)
(2,85,2)
(60,24,2)
(3,85,2)
(116,44,2)
(41,101,2)
(38,84,2)
(23,24,2)
(8,84,2)
(86,68,2)
(95,47,2)
(75,107,2)
(56,44,2)
(56,15,2)
(111,81,2)
(93,85,2)
(112,60,2)
(76,60,2)
(11,64,2)
(116,15,2)
(116,38,2)
(42,60,2)
(15,84,2)
(115,47,2)
(69,85,2)
(120,68,2)
(107,24,2)
(7,47,2)
(11,14,2)
(117,44,2)
(37,12,2)
(83,12,2)
(104,85,2)
(14,73,2)
(19,12,2)
(114,68,2)
(46,24,2)
(49,85,2)
(87,47,2)
(99,104,2)
(56,38,2)
-----------------------------------
(0,bus)
(1,pdev->dev)
(2,port)
(3,of_node)
(4,GFP_KERNEL)
(5,0xff)
(6,port)
(7,ret)
(8,pci_scan_root_bus(&pdev->dev, 0, &xgene_pcie_ops, port, &res)
(9,dev)
(10,return -ENOMEM;)
(11,of_pci_get_host_bridge_resources(dn, 0, 0xff, &res, &iobase)
(12,struct platform_device *pdev)
(13,res)
(14,&iobase)
(15,port->node)
(16,if (!port)
(17,-ENOMEM)
(18,)
(19,pdev->dev)
(20,port)
(21,pdev)
(22,res)
(23,ret = xgene_pcie_setup(port, &res, iobase)
(24,ret)
(25,port)
(26,dev)
(27,port)
(28,*dn = pdev->dev.of_node)
(29,bus = pci_scan_root_bus(&pdev->dev, 0, &xgene_pcie_ops, port, &res)
(30,if (ret)
(31,pdev)
(32,iobase)
(33,port)
(34,pdev->dev.of_node)
(35,port)
(36,LIST_HEAD(res)
(37,platform_set_drvdata(pdev, port)
(38,port->dev)
(39,pdev)
(40,if (ret)
(41,sizeof(*port)
(42,&pdev->dev)
(43,port->node = of_node_get(pdev->dev.of_node)
(44,!bus)
(45,return ret;)
(46,ret)
(47,ret)
(48,ret)
(49,port)
(50,pdev)
(51,dev)
(52,dn)
(53,of_node_get(pdev->dev.of_node)
(54,port)
(55,devm_kzalloc(&pdev->dev, sizeof(*port)
(56,return 0;)
(57,pdev->dev.of_node)
(58,ret)
(59,bus)
(60,ret)
(61,res)
(62,ret)
(63,pdev->dev)
(64,&res)
(65,pdev->dev)
(66,ENOMEM)
(67,ret)
(68,ret)
(69,ret)
(70,iobase)
(71,dn)
(72,&pdev->dev)
(73,iobase = 0)
(74,dev)
(75,xgene_pcie_setup(port, &res, iobase)
(76,0)
(77,iobase)
(78,if (ret)
(79,0)
(80,port)
(81,xgene_pcie_map_reg(port, pdev)
(82,RET)
(83,pdev->dev)
(84,port = devm_kzalloc(&pdev->dev, sizeof(*port)
(85,!port)
(86,xgene_pcie_init_port(port)
(87,ret = of_pci_get_host_bridge_resources(dn, 0, 0xff, &res, &iobase)
(88,ret)
(89,ret = xgene_pcie_init_port(port)
(90,&xgene_pcie_ops)
(91,-ENOMEM)
(92,if (ret)
(93,pdev)
(94,bus)
(95,0)
(96,pdev)
(97,return ret;)
(98,port)
(99,port->dev = &pdev->dev)
(100,xgene_pcie_ops)
(101,*port)
(102,of_node)
(103,dev)
(104,&pdev->dev)
(105,iobase)
(106,return ret;)
(107,&res)
(108,if (!bus)
(109,pdev)
(110,res)
(111,ret = xgene_pcie_map_reg(port, pdev)
(112,&res)
(113,ENOMEM)
(114,return ret;)
(115,dn)
(116,return -ENOMEM;)
(117,0)
(118,dev)
(119,node)
(120,ret)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^