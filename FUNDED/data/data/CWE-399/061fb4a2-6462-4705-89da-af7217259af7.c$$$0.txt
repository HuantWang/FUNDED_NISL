-----label-----
1
-----code-----
int rdma_resolve_ip_route(struct sockaddr *src_addr,
			  const struct sockaddr *dst_addr,
			  struct rdma_dev_addr *addr)
{
	struct sockaddr_storage ssrc_addr = {};
	struct sockaddr *src_in = (struct sockaddr *)&ssrc_addr;

	if (src_addr) {
		if (src_addr->sa_family != dst_addr->sa_family)
			return -EINVAL;

		memcpy(src_in, src_addr, rdma_addr_size(src_addr));
	} else {
		src_in->sa_family = dst_addr->sa_family;
	}

	return addr_resolve(src_in, dst_addr, addr, false, 0);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
23,26
23,27
24,25
25,26
25,27
26,27
28,29
28,30
30,31
32,33
33,34
33,35
34,35
36,37
36,38
36,39
39,40
40,41
40,42
41,42
41,43
42,43
44,45
46,47
47,48
49,50
49,51
49,52
50,51
52,53
52,54
53,54
53,55
54,55
54,56
55,56
55,57
56,57
59,60
59,61
60,61
63,64
64,65
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
75,77
76,77
78,79
80,81
81,82
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
91,92
92,93
92,94
92,95
92,96
92,97
92,98
93,94
95,96
97,98
99,100
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,27,29,31,35,37,38,43,45,48,51,57,58,61,62,66,70,72,74,77,79,85,86,89,90,94,96,98,100,101,102
-----computeFrom-----
54,55
54,56
82,83
82,84
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;LiteralExpression;
-----ast_node-----
int rdma_resolve_ip_route(struct sockaddr *src_addr,			  const struct sockaddr *dst_addr,			  struct rdma_dev_addr *addr){	struct sockaddr_storage ssrc_addr = {};	struct sockaddr *src_in = (struct sockaddr *)&ssrc_addr;	if (src_addr) {		if (src_addr->sa_family != dst_addr->sa_family)			return -EINVAL;		memcpy(src_in, src_addr, rdma_addr_size(src_addr));	} else {		src_in->sa_family = dst_addr->sa_family;	}	return addr_resolve(src_in, dst_addr, addr, false, 0);}
int
rdma_resolve_ip_route(struct sockaddr *src_addr,			  const struct sockaddr *dst_addr,			  struct rdma_dev_addr *addr)
rdma_resolve_ip_route
struct sockaddr *src_addr
struct sockaddr
sockaddr
*src_addr
*
src_addr
const struct sockaddr *dst_addr
const struct sockaddr
sockaddr
*dst_addr
*
dst_addr
struct rdma_dev_addr *addr
struct rdma_dev_addr
rdma_dev_addr
*addr
*
addr
{	struct sockaddr_storage ssrc_addr = {};	struct sockaddr *src_in = (struct sockaddr *)&ssrc_addr;	if (src_addr) {		if (src_addr->sa_family != dst_addr->sa_family)			return -EINVAL;		memcpy(src_in, src_addr, rdma_addr_size(src_addr));	} else {		src_in->sa_family = dst_addr->sa_family;	}	return addr_resolve(src_in, dst_addr, addr, false, 0);}
struct sockaddr_storage ssrc_addr = {};
struct sockaddr_storage ssrc_addr = {};
struct sockaddr_storage
sockaddr_storage
ssrc_addr = {}
ssrc_addr
= {}
{}
struct sockaddr *src_in = (struct sockaddr *)&ssrc_addr;
struct sockaddr *src_in = (struct sockaddr *)&ssrc_addr;
struct sockaddr
sockaddr
*src_in = (struct sockaddr *)&ssrc_addr
*
src_in
= (struct sockaddr *)&ssrc_addr
(struct sockaddr *)&ssrc_addr
struct sockaddr *
struct sockaddr
sockaddr
*
*
&ssrc_addr
ssrc_addr
ssrc_addr
if (src_addr) {		if (src_addr->sa_family != dst_addr->sa_family)			return -EINVAL;		memcpy(src_in, src_addr, rdma_addr_size(src_addr));	} else {		src_in->sa_family = dst_addr->sa_family;	}
src_addr
src_addr
{		if (src_addr->sa_family != dst_addr->sa_family)			return -EINVAL;		memcpy(src_in, src_addr, rdma_addr_size(src_addr));	}
if (src_addr->sa_family != dst_addr->sa_family)			return -EINVAL;
src_addr->sa_family != dst_addr->sa_family
src_addr->sa_family
src_addr
src_addr
sa_family
dst_addr->sa_family
dst_addr
dst_addr
sa_family
return -EINVAL;
-EINVAL
EINVAL
EINVAL
memcpy(src_in, src_addr, rdma_addr_size(src_addr));
memcpy(src_in, src_addr, rdma_addr_size(src_addr))
memcpy
memcpy
src_in
src_in
src_addr
src_addr
rdma_addr_size(src_addr)
rdma_addr_size
rdma_addr_size
src_addr
src_addr
{		src_in->sa_family = dst_addr->sa_family;	}
src_in->sa_family = dst_addr->sa_family;
src_in->sa_family = dst_addr->sa_family
src_in->sa_family
src_in
src_in
sa_family
dst_addr->sa_family
dst_addr
dst_addr
sa_family
return addr_resolve(src_in, dst_addr, addr, false, 0);
addr_resolve(src_in, dst_addr, addr, false, 0)
addr_resolve
addr_resolve
src_in
src_in
dst_addr
dst_addr
addr
addr
false
0
-----joern-----
(22,38,0)
(2,30,0)
(7,32,0)
(19,36,0)
(40,21,0)
(1,9,0)
(15,11,0)
(37,46,0)
(44,46,0)
(14,38,0)
(19,35,0)
(27,40,0)
(9,32,0)
(36,32,0)
(46,20,0)
(11,38,0)
(41,9,0)
(4,1,0)
(39,34,0)
(36,15,0)
(1,2,0)
(24,40,0)
(40,28,0)
(31,0,0)
(9,13,0)
(6,15,0)
(29,40,0)
(13,26,0)
(8,20,0)
(17,8,0)
(3,40,0)
(46,21,0)
(42,13,0)
(40,36,0)
(40,9,0)
(38,11,0)
(26,13,0)
(1,30,0)
(33,1,0)
(2,1,0)
(0,35,0)
(16,2,0)
(38,21,0)
(43,32,0)
(23,26,0)
(8,30,0)
(1,34,0)
(45,40,0)
(15,9,0)
(5,15,0)
(11,18,0)
(20,8,0)
(20,46,0)
(13,9,0)
(13,42,0)
(12,32,0)
(10,8,0)
(2,16,1)
(13,42,1)
(1,9,1)
(14,15,1)
(19,35,1)
(20,8,1)
(10,17,1)
(19,36,1)
(36,15,1)
(40,21,1)
(17,25,1)
(11,38,1)
(44,37,1)
(8,30,1)
(27,3,1)
(46,21,1)
(15,9,1)
(40,28,1)
(40,9,1)
(3,24,1)
(9,13,1)
(26,23,1)
(24,11,1)
(5,6,1)
(15,5,1)
(4,20,1)
(23,41,1)
(33,4,1)
(35,0,1)
(36,40,1)
(25,9,1)
(46,44,1)
(20,46,1)
(22,14,1)
(13,26,1)
(38,22,1)
(2,30,1)
(6,25,1)
(31,20,1)
(1,2,1)
(40,45,1)
(45,29,1)
(29,27,1)
(16,33,1)
(8,10,1)
(37,8,1)
(1,30,1)
(38,21,1)
(0,31,1)
(24,1,1)
(40,28,2)
(2,30,2)
(2,20,2)
(3,25,2)
(14,25,2)
(15,9,2)
(1,30,2)
(38,25,2)
(40,9,2)
(8,30,2)
(6,25,2)
(17,25,2)
(38,21,2)
(31,20,2)
(40,20,2)
(5,25,2)
(4,20,2)
(15,25,2)
(16,20,2)
(1,20,2)
(24,20,2)
(40,21,2)
(1,9,2)
(22,25,2)
(19,35,2)
(40,25,2)
(45,20,2)
(46,25,2)
(9,13,2)
(20,8,2)
(33,20,2)
(35,20,2)
(10,25,2)
(36,25,2)
(1,2,2)
(20,25,2)
(24,25,2)
(36,15,2)
(46,21,2)
(29,25,2)
(27,25,2)
(11,38,2)
(37,25,2)
(11,25,2)
(29,20,2)
(19,36,2)
(0,20,2)
(20,46,2)
(13,42,2)
(13,26,2)
(36,20,2)
(8,25,2)
(45,25,2)
(27,20,2)
(3,20,2)
(44,25,2)
-----------------------------------
(0,-EINVAL)
(1,memcpy(src_in, src_addr, rdma_addr_size(src_addr)
(2,rdma_addr_size(src_addr)
(3,dst_addr)
(4,src_in)
(5,sa_family)
(6,src_in)
(7,)
(8,src_addr->sa_family)
(9,*src_in = (struct sockaddr *)
(10,sa_family)
(11,src_in->sa_family = dst_addr->sa_family)
(12,src_in)
(13,(struct sockaddr *)
(14,dst_addr)
(15,src_in->sa_family)
(16,src_addr)
(17,src_addr)
(18,)
(19,RET)
(20,src_addr->sa_family != dst_addr->sa_family)
(21,const struct sockaddr *dst_addr)
(22,sa_family)
(23,ssrc_addr)
(24,src_in)
(25,src_addr)
(26,&ssrc_addr)
(27,addr)
(28,struct rdma_dev_addr *addr)
(29,false)
(30,struct sockaddr *src_addr)
(31,EINVAL)
(32,)
(33,src_addr)
(34,)
(35,return -EINVAL;)
(36,return addr_resolve(src_in, dst_addr, addr, false, 0)
(37,dst_addr)
(38,dst_addr->sa_family)
(39,if (src_addr->sa_family != dst_addr->sa_family)
(40,addr_resolve(src_in, dst_addr, addr, false, 0)
(41,src_in)
(42,struct sockaddr *)
(43,if (src_addr)
(44,sa_family)
(45,0)
(46,dst_addr->sa_family)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^