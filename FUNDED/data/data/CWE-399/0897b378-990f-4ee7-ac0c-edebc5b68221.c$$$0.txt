-----label-----
1
-----code-----
static bool manage_workers(struct worker *worker)
{
	struct worker_pool *pool = worker->pool;

	/*
	 * Anyone who successfully grabs manager_arb wins the arbitration
	 * and becomes the manager.  mutex_trylock() on pool->manager_arb
	 * failure while holding pool->lock reliably indicates that someone
	 * else is managing the pool and the worker which failed trylock
	 * can proceed to executing work items.  This means that anyone
	 * grabbing manager_arb is responsible for actually performing
	 * manager duties.  If manager_arb is grabbed and released without
	 * actual management, the pool may stall indefinitely.
	 */
	if (!mutex_trylock(&pool->manager_arb))
		return false;

	maybe_create_worker(pool);

	mutex_unlock(&pool->manager_arb);
	return true;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
24,26
25,26
26,27
26,28
27,28
29,30
30,31
30,32
31,32
34,35
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
47,48
47,49
48,49
51,52
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,28,32,33,35,39,41,45,49,50,52
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static bool manage_workers(struct worker *worker){	struct worker_pool *pool = worker->pool;	/*	 * Anyone who successfully grabs manager_arb wins the arbitration	 * and becomes the manager.  mutex_trylock() on pool->manager_arb	 * failure while holding pool->lock reliably indicates that someone	 * else is managing the pool and the worker which failed trylock	 * can proceed to executing work items.  This means that anyone	 * grabbing manager_arb is responsible for actually performing	 * manager duties.  If manager_arb is grabbed and released without	 * actual management, the pool may stall indefinitely.	 */	if (!mutex_trylock(&pool->manager_arb))		return false;	maybe_create_worker(pool);	mutex_unlock(&pool->manager_arb);	return true;}
static bool
manage_workers(struct worker *worker)
manage_workers
struct worker *worker
struct worker
worker
*worker
*
worker
{	struct worker_pool *pool = worker->pool;	/*	 * Anyone who successfully grabs manager_arb wins the arbitration	 * and becomes the manager.  mutex_trylock() on pool->manager_arb	 * failure while holding pool->lock reliably indicates that someone	 * else is managing the pool and the worker which failed trylock	 * can proceed to executing work items.  This means that anyone	 * grabbing manager_arb is responsible for actually performing	 * manager duties.  If manager_arb is grabbed and released without	 * actual management, the pool may stall indefinitely.	 */	if (!mutex_trylock(&pool->manager_arb))		return false;	maybe_create_worker(pool);	mutex_unlock(&pool->manager_arb);	return true;}
struct worker_pool *pool = worker->pool;
struct worker_pool *pool = worker->pool;
struct worker_pool
worker_pool
*pool = worker->pool
*
pool
= worker->pool
worker->pool
worker
worker
pool
if (!mutex_trylock(&pool->manager_arb))		return false;
!mutex_trylock(&pool->manager_arb)
mutex_trylock(&pool->manager_arb)
mutex_trylock
mutex_trylock
&pool->manager_arb
pool->manager_arb
pool
pool
manager_arb
return false;
false
maybe_create_worker(pool);
maybe_create_worker(pool)
maybe_create_worker
maybe_create_worker
pool
pool
mutex_unlock(&pool->manager_arb);
mutex_unlock(&pool->manager_arb)
mutex_unlock
mutex_unlock
&pool->manager_arb
pool->manager_arb
pool
pool
manager_arb
return true;
true
-----joern-----
(0,18,0)
(8,13,0)
(1,23,0)
(22,19,0)
(11,24,0)
(3,22,0)
(13,17,0)
(16,1,0)
(23,17,0)
(7,13,0)
(25,17,0)
(9,24,0)
(20,22,0)
(26,23,0)
(10,23,0)
(17,24,0)
(17,19,0)
(23,1,0)
(18,0,0)
(8,18,0)
(24,17,0)
(5,19,0)
(12,17,0)
(13,8,0)
(12,19,0)
(16,19,0)
(4,12,0)
(18,8,0)
(15,13,0)
(24,14,0)
(6,21,0)
(2,19,0)
(1,16,0)
(3,21,0)
(24,11,1)
(1,23,1)
(10,26,1)
(7,17,1)
(13,17,1)
(4,0,1)
(23,10,1)
(20,16,1)
(12,17,1)
(3,22,1)
(13,15,1)
(22,20,1)
(18,8,1)
(9,25,1)
(17,24,1)
(8,13,1)
(16,1,1)
(24,14,1)
(21,6,1)
(6,0,1)
(26,12,1)
(12,4,1)
(23,17,1)
(3,21,1)
(11,9,1)
(15,7,1)
(0,18,1)
(16,1,2)
(24,14,2)
(1,23,2)
(22,0,2)
(16,0,2)
(6,0,2)
(21,0,2)
(8,13,2)
(23,17,2)
(0,18,2)
(20,0,2)
(3,22,2)
(17,24,2)
(18,8,2)
(26,0,2)
(1,0,2)
(12,17,2)
(10,0,2)
(13,17,2)
(3,21,2)
(4,0,2)
(12,0,2)
(23,0,2)
-----------------------------------
(0,!mutex_trylock(&pool->manager_arb)
(1,&pool->manager_arb)
(2,if (!mutex_trylock(&pool->manager_arb)
(3,RET)
(4,pool)
(5,pool)
(6,false)
(7,pool)
(8,&pool->manager_arb)
(9,worker)
(10,manager_arb)
(11,pool)
(12,maybe_create_worker(pool)
(13,pool->manager_arb)
(14,struct worker *worker)
(15,manager_arb)
(16,mutex_unlock(&pool->manager_arb)
(17,*pool = worker->pool)
(18,mutex_trylock(&pool->manager_arb)
(19,)
(20,true)
(21,return false;)
(22,return true;)
(23,pool->manager_arb)
(24,worker->pool)
(25,pool)
(26,pool)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^