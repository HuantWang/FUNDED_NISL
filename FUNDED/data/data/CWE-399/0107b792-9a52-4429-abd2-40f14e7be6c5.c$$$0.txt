-----label-----
1
-----code-----
int mdss_mdp_ctl_start(struct mdss_mdp_ctl *ctl, bool handoff)
{
	struct mdss_mdp_ctl *sctl;
	struct mdss_data_type *mdata = mdss_mdp_get_mdata();
	int ret = 0;

	pr_debug("ctl_num=%d, power_state=%d\n", ctl->num, ctl->power_state);

	if (mdss_mdp_ctl_is_power_on_interactive(ctl)
			&& !(ctl->pending_mode_switch)) {
		pr_debug("%d: panel already on!\n", __LINE__);
		return 0;
	}

	ret = mdss_mdp_ctl_setup(ctl);
	if (ret)
		return ret;

	sctl = mdss_mdp_get_split_ctl(ctl);

	mutex_lock(&ctl->lock);

	if (mdss_mdp_ctl_is_power_off(ctl))
		memset(&ctl->cur_perf, 0, sizeof(ctl->cur_perf));

	/*
	 * keep power_on false during handoff to avoid unexpected
	 * operations to overlay.
	 */
	if (!handoff || ctl->pending_mode_switch)
		ctl->power_state = MDSS_PANEL_POWER_ON;

	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON);

	ret = mdss_mdp_ctl_intf_event(ctl,
		MDSS_EVENT_RESET, NULL, CTL_INTF_EVENT_FLAG_DEFAULT);
	if (ret) {
		pr_err("panel power on failed ctl=%d\n", ctl->num);
		goto error;
	}

	ret = mdss_mdp_ctl_start_sub(ctl, handoff);
	if (ret == 0) {
		if (sctl && ctl->mfd &&
		    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY) {
			/*split display available */
			ret = mdss_mdp_ctl_start_sub(sctl, handoff);
			if (!ret)
				mdss_mdp_ctl_split_display_enable(1, ctl, sctl);
		} else if (ctl->mixer_right) {
			struct mdss_mdp_mixer *mixer = ctl->mixer_right;
			u32 out;

			mixer->params_changed++;
			out = (mixer->height << 16) | mixer->width;
			mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out);
			mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0);
		} else if (is_pingpong_split(ctl->mfd)) {
			ctl->slave_intf_num = (ctl->intf_num + 1);
			mdss_mdp_ctl_pp_split_display_enable(true, ctl);
		}
	}

	mdss_mdp_hist_intr_setup(&mdata->hist_intr, MDSS_IRQ_RESUME);

error:
	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF);
	mutex_unlock(&ctl->lock);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
15,32
15,33
15,34
15,35
16,17
17,18
17,19
18,19
20,21
20,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
39,40
41,42
42,43
42,44
42,45
42,46
43,44
46,47
46,48
47,48
50,51
50,52
51,52
54,55
54,56
55,56
55,57
56,57
56,58
57,58
59,60
61,62
62,63
63,64
63,65
64,65
67,68
67,69
68,69
69,70
69,71
69,72
70,71
74,75
76,77
77,78
77,79
78,79
80,81
80,82
81,82
83,84
85,86
85,87
86,87
88,89
89,90
91,92
92,93
92,94
93,94
95,96
95,97
96,97
98,99
100,101
101,102
101,103
102,103
104,105
105,106
105,107
106,107
109,110
109,111
110,111
110,112
111,112
113,114
115,116
116,117
116,118
116,119
116,120
117,118
119,120
120,121
120,122
121,122
125,126
126,127
127,128
127,129
128,129
131,132
131,133
132,133
132,134
133,134
134,135
136,137
136,138
137,138
140,141
141,142
141,143
142,143
142,144
143,144
146,147
148,149
149,150
149,151
150,151
152,153
153,154
155,156
156,157
156,158
157,158
159,160
159,161
159,162
159,163
159,164
160,161
162,163
164,165
166,167
168,169
170,171
170,172
171,172
173,174
173,175
174,175
175,176
175,177
175,178
176,177
179,180
179,181
180,181
183,184
185,186
186,187
186,188
187,188
189,190
189,191
189,192
190,191
192,193
194,195
196,197
196,198
197,198
197,199
198,199
201,202
202,203
202,204
202,205
203,204
203,205
204,205
204,206
205,206
207,208
207,209
208,209
211,212
211,213
212,213
212,214
213,214
213,215
214,215
218,219
220,221
220,222
221,222
222,223
222,224
223,224
225,226
225,227
225,228
226,227
228,229
230,231
232,233
232,234
233,234
234,235
236,237
237,238
237,239
237,240
237,241
238,239
241,242
243,244
245,246
245,247
245,248
246,247
246,248
247,248
250,251
250,252
250,253
250,254
250,255
250,256
251,252
252,253
252,254
253,254
255,256
255,257
255,258
258,259
259,260
259,261
260,261
263,264
264,265
264,266
265,266
267,268
269,270
270,271
271,272
271,273
272,273
275,276
276,277
276,278
277,278
279,280
279,281
280,281
281,282
281,283
282,283
282,284
283,284
287,288
287,289
288,289
291,292
292,293
292,294
292,295
292,296
293,294
295,296
297,298
299,300
301,302
302,303
302,304
302,305
302,306
303,304
305,306
307,308
310,311
310,312
311,312
311,313
312,313
314,315
314,316
315,316
318,319
318,320
319,320
320,321
320,322
321,322
321,323
322,323
325,326
326,327
326,328
327,328
327,329
328,329
332,333
333,334
333,335
333,336
334,335
337,338
339,340
340,341
340,342
340,343
341,342
343,344
344,345
344,346
345,346
348,349
350,351
350,352
352,353
353,354
353,355
354,355
356,357
357,358
359,360
360,361
360,362
361,362
363,364
364,365
364,366
365,366
368,369
369,370
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,26,28,29,33,36,38,40,44,45,48,49,52,53,58,60,65,66,71,72,73,75,79,82,84,87,90,94,97,99,103,107,108,112,114,118,122,123,124,129,130,135,138,139,144,145,147,151,154,158,161,163,165,167,169,172,177,178,181,182,184,188,191,193,195,199,200,206,209,210,215,216,217,219,224,227,229,231,235,239,240,242,244,248,249,254,256,257,261,262,266,268,273,274,278,284,285,286,289,290,294,296,298,300,304,306,308,309,313,316,317,323,324,329,330,331,335,336,338,342,346,347,349,351,355,358,362,366,367,370
-----computeFrom-----
55,56
55,57
77,78
77,79
92,93
92,94
132,133
132,134
141,142
141,143
156,157
156,158
186,187
186,188
197,198
197,199
203,204
203,205
204,205
204,206
211,212
211,213
222,223
222,224
276,277
276,278
279,280
279,281
281,282
281,283
320,321
320,322
326,327
326,328
-----guardedBy-----
138,144
199,235
215,242
206,244
-----guardedByNegation-----
215,338
216,317
-----lastLexicalUse-----
215,338
-----jump-----
215,338
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LabelStatement;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int mdss_mdp_ctl_start(struct mdss_mdp_ctl *ctl, bool handoff){	struct mdss_mdp_ctl *sctl;	struct mdss_data_type *mdata = mdss_mdp_get_mdata();	int ret = 0;	pr_debug("ctl_num=%d, power_state=%d\n", ctl->num, ctl->power_state);	if (mdss_mdp_ctl_is_power_on_interactive(ctl)			&& !(ctl->pending_mode_switch)) {		pr_debug("%d: panel already on!\n", __LINE__);		return 0;	}	ret = mdss_mdp_ctl_setup(ctl);	if (ret)		return ret;	sctl = mdss_mdp_get_split_ctl(ctl);	mutex_lock(&ctl->lock);	if (mdss_mdp_ctl_is_power_off(ctl))		memset(&ctl->cur_perf, 0, sizeof(ctl->cur_perf));	/*	 * keep power_on false during handoff to avoid unexpected	 * operations to overlay.	 */	if (!handoff || ctl->pending_mode_switch)		ctl->power_state = MDSS_PANEL_POWER_ON;	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON);	ret = mdss_mdp_ctl_intf_event(ctl,		MDSS_EVENT_RESET, NULL, CTL_INTF_EVENT_FLAG_DEFAULT);	if (ret) {		pr_err("panel power on failed ctl=%d\n", ctl->num);		goto error;	}	ret = mdss_mdp_ctl_start_sub(ctl, handoff);	if (ret == 0) {		if (sctl && ctl->mfd &&		    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY) {			/*split display available */			ret = mdss_mdp_ctl_start_sub(sctl, handoff);			if (!ret)				mdss_mdp_ctl_split_display_enable(1, ctl, sctl);		} else if (ctl->mixer_right) {			struct mdss_mdp_mixer *mixer = ctl->mixer_right;			u32 out;			mixer->params_changed++;			out = (mixer->height << 16) | mixer->width;			mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out);			mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0);		} else if (is_pingpong_split(ctl->mfd)) {			ctl->slave_intf_num = (ctl->intf_num + 1);			mdss_mdp_ctl_pp_split_display_enable(true, ctl);		}	}	mdss_mdp_hist_intr_setup(&mdata->hist_intr, MDSS_IRQ_RESUME);error:	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF);	mutex_unlock(&ctl->lock);	return ret;}
int
mdss_mdp_ctl_start(struct mdss_mdp_ctl *ctl, bool handoff)
mdss_mdp_ctl_start
struct mdss_mdp_ctl *ctl
struct mdss_mdp_ctl
mdss_mdp_ctl
*ctl
*
ctl
bool handoff
bool
handoff
handoff
{	struct mdss_mdp_ctl *sctl;	struct mdss_data_type *mdata = mdss_mdp_get_mdata();	int ret = 0;	pr_debug("ctl_num=%d, power_state=%d\n", ctl->num, ctl->power_state);	if (mdss_mdp_ctl_is_power_on_interactive(ctl)			&& !(ctl->pending_mode_switch)) {		pr_debug("%d: panel already on!\n", __LINE__);		return 0;	}	ret = mdss_mdp_ctl_setup(ctl);	if (ret)		return ret;	sctl = mdss_mdp_get_split_ctl(ctl);	mutex_lock(&ctl->lock);	if (mdss_mdp_ctl_is_power_off(ctl))		memset(&ctl->cur_perf, 0, sizeof(ctl->cur_perf));	/*	 * keep power_on false during handoff to avoid unexpected	 * operations to overlay.	 */	if (!handoff || ctl->pending_mode_switch)		ctl->power_state = MDSS_PANEL_POWER_ON;	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON);	ret = mdss_mdp_ctl_intf_event(ctl,		MDSS_EVENT_RESET, NULL, CTL_INTF_EVENT_FLAG_DEFAULT);	if (ret) {		pr_err("panel power on failed ctl=%d\n", ctl->num);		goto error;	}	ret = mdss_mdp_ctl_start_sub(ctl, handoff);	if (ret == 0) {		if (sctl && ctl->mfd &&		    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY) {			/*split display available */			ret = mdss_mdp_ctl_start_sub(sctl, handoff);			if (!ret)				mdss_mdp_ctl_split_display_enable(1, ctl, sctl);		} else if (ctl->mixer_right) {			struct mdss_mdp_mixer *mixer = ctl->mixer_right;			u32 out;			mixer->params_changed++;			out = (mixer->height << 16) | mixer->width;			mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out);			mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0);		} else if (is_pingpong_split(ctl->mfd)) {			ctl->slave_intf_num = (ctl->intf_num + 1);			mdss_mdp_ctl_pp_split_display_enable(true, ctl);		}	}	mdss_mdp_hist_intr_setup(&mdata->hist_intr, MDSS_IRQ_RESUME);error:	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF);	mutex_unlock(&ctl->lock);	return ret;}
struct mdss_mdp_ctl *sctl;
struct mdss_mdp_ctl *sctl;
struct mdss_mdp_ctl
mdss_mdp_ctl
*sctl
*
sctl
struct mdss_data_type *mdata = mdss_mdp_get_mdata();
struct mdss_data_type *mdata = mdss_mdp_get_mdata();
struct mdss_data_type
mdss_data_type
*mdata = mdss_mdp_get_mdata()
*
mdata
= mdss_mdp_get_mdata()
mdss_mdp_get_mdata()
mdss_mdp_get_mdata
mdss_mdp_get_mdata
int ret = 0;
int ret = 0;
int
ret = 0
ret
= 0
0
pr_debug("ctl_num=%d, power_state=%d\n", ctl->num, ctl->power_state);
pr_debug("ctl_num=%d, power_state=%d\n", ctl->num, ctl->power_state)
pr_debug
pr_debug
"ctl_num=%d, power_state=%d\n"
ctl->num
ctl
ctl
num
ctl->power_state
ctl
ctl
power_state
if (mdss_mdp_ctl_is_power_on_interactive(ctl)			&& !(ctl->pending_mode_switch)) {		pr_debug("%d: panel already on!\n", __LINE__);		return 0;	}
mdss_mdp_ctl_is_power_on_interactive(ctl)			&& !(ctl->pending_mode_switch)
mdss_mdp_ctl_is_power_on_interactive(ctl)
mdss_mdp_ctl_is_power_on_interactive
mdss_mdp_ctl_is_power_on_interactive
ctl
ctl
!(ctl->pending_mode_switch)
(ctl->pending_mode_switch)
ctl->pending_mode_switch
ctl
ctl
pending_mode_switch
{		pr_debug("%d: panel already on!\n", __LINE__);		return 0;	}
pr_debug("%d: panel already on!\n", __LINE__);
pr_debug("%d: panel already on!\n", __LINE__)
pr_debug
pr_debug
"%d: panel already on!\n"
__LINE__
return 0;
0
ret = mdss_mdp_ctl_setup(ctl);
ret = mdss_mdp_ctl_setup(ctl)
ret
ret
mdss_mdp_ctl_setup(ctl)
mdss_mdp_ctl_setup
mdss_mdp_ctl_setup
ctl
ctl
if (ret)		return ret;
ret
ret
return ret;
ret
ret
sctl = mdss_mdp_get_split_ctl(ctl);
sctl = mdss_mdp_get_split_ctl(ctl)
sctl
sctl
mdss_mdp_get_split_ctl(ctl)
mdss_mdp_get_split_ctl
mdss_mdp_get_split_ctl
ctl
ctl
mutex_lock(&ctl->lock);
mutex_lock(&ctl->lock)
mutex_lock
mutex_lock
&ctl->lock
ctl->lock
ctl
ctl
lock
if (mdss_mdp_ctl_is_power_off(ctl))		memset(&ctl->cur_perf, 0, sizeof(ctl->cur_perf));
mdss_mdp_ctl_is_power_off(ctl)
mdss_mdp_ctl_is_power_off
mdss_mdp_ctl_is_power_off
ctl
ctl
memset(&ctl->cur_perf, 0, sizeof(ctl->cur_perf));
memset(&ctl->cur_perf, 0, sizeof(ctl->cur_perf))
memset
memset
&ctl->cur_perf
ctl->cur_perf
ctl
ctl
cur_perf
0
sizeof(ctl->cur_perf)
(ctl->cur_perf)
ctl->cur_perf
ctl
ctl
cur_perf
if (!handoff || ctl->pending_mode_switch)		ctl->power_state = MDSS_PANEL_POWER_ON;
!handoff || ctl->pending_mode_switch
!handoff
handoff
handoff
ctl->pending_mode_switch
ctl
ctl
pending_mode_switch
ctl->power_state = MDSS_PANEL_POWER_ON;
ctl->power_state = MDSS_PANEL_POWER_ON
ctl->power_state
ctl
ctl
power_state
MDSS_PANEL_POWER_ON
MDSS_PANEL_POWER_ON
mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON);
mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON);
mdss_mdp_clk_ctrl
mdss_mdp_clk_ctrl
(MDP_BLOCK_POWER_ON)
MDP_BLOCK_POWER_ON
MDP_BLOCK_POWER_ON
ret = mdss_mdp_ctl_intf_event(ctl,		MDSS_EVENT_RESET, NULL, CTL_INTF_EVENT_FLAG_DEFAULT);
ret = mdss_mdp_ctl_intf_event(ctl,		MDSS_EVENT_RESET, NULL, CTL_INTF_EVENT_FLAG_DEFAULT)
ret
ret
mdss_mdp_ctl_intf_event(ctl,		MDSS_EVENT_RESET, NULL, CTL_INTF_EVENT_FLAG_DEFAULT)
mdss_mdp_ctl_intf_event
mdss_mdp_ctl_intf_event
ctl
ctl
MDSS_EVENT_RESET
MDSS_EVENT_RESET
NULL
NULL
CTL_INTF_EVENT_FLAG_DEFAULT
CTL_INTF_EVENT_FLAG_DEFAULT
if (ret) {		pr_err("panel power on failed ctl=%d\n", ctl->num);		goto error;	}
ret
ret
{		pr_err("panel power on failed ctl=%d\n", ctl->num);		goto error;	}
pr_err("panel power on failed ctl=%d\n", ctl->num);
pr_err("panel power on failed ctl=%d\n", ctl->num)
pr_err
pr_err
"panel power on failed ctl=%d\n"
ctl->num
ctl
ctl
num
goto error;
error
ret = mdss_mdp_ctl_start_sub(ctl, handoff);
ret = mdss_mdp_ctl_start_sub(ctl, handoff)
ret
ret
mdss_mdp_ctl_start_sub(ctl, handoff)
mdss_mdp_ctl_start_sub
mdss_mdp_ctl_start_sub
ctl
ctl
handoff
handoff
if (ret == 0) {		if (sctl && ctl->mfd &&		    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY) {			/*split display available */			ret = mdss_mdp_ctl_start_sub(sctl, handoff);			if (!ret)				mdss_mdp_ctl_split_display_enable(1, ctl, sctl);		} else if (ctl->mixer_right) {			struct mdss_mdp_mixer *mixer = ctl->mixer_right;			u32 out;			mixer->params_changed++;			out = (mixer->height << 16) | mixer->width;			mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out);			mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0);		} else if (is_pingpong_split(ctl->mfd)) {			ctl->slave_intf_num = (ctl->intf_num + 1);			mdss_mdp_ctl_pp_split_display_enable(true, ctl);		}	}
ret == 0
ret
ret
0
{		if (sctl && ctl->mfd &&		    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY) {			/*split display available */			ret = mdss_mdp_ctl_start_sub(sctl, handoff);			if (!ret)				mdss_mdp_ctl_split_display_enable(1, ctl, sctl);		} else if (ctl->mixer_right) {			struct mdss_mdp_mixer *mixer = ctl->mixer_right;			u32 out;			mixer->params_changed++;			out = (mixer->height << 16) | mixer->width;			mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out);			mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0);		} else if (is_pingpong_split(ctl->mfd)) {			ctl->slave_intf_num = (ctl->intf_num + 1);			mdss_mdp_ctl_pp_split_display_enable(true, ctl);		}	}
if (sctl && ctl->mfd &&		    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY) {			/*split display available */			ret = mdss_mdp_ctl_start_sub(sctl, handoff);			if (!ret)				mdss_mdp_ctl_split_display_enable(1, ctl, sctl);		} else if (ctl->mixer_right) {			struct mdss_mdp_mixer *mixer = ctl->mixer_right;			u32 out;			mixer->params_changed++;			out = (mixer->height << 16) | mixer->width;			mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out);			mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0);		} else if (is_pingpong_split(ctl->mfd)) {			ctl->slave_intf_num = (ctl->intf_num + 1);			mdss_mdp_ctl_pp_split_display_enable(true, ctl);		}
sctl && ctl->mfd &&		    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY
sctl && ctl->mfd
sctl
sctl
ctl->mfd
ctl
ctl
mfd
ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY
ctl->mfd->split_mode
ctl->mfd
ctl
ctl
mfd
split_mode
MDP_DUAL_LM_DUAL_DISPLAY
MDP_DUAL_LM_DUAL_DISPLAY
{			/*split display available */			ret = mdss_mdp_ctl_start_sub(sctl, handoff);			if (!ret)				mdss_mdp_ctl_split_display_enable(1, ctl, sctl);		}
ret = mdss_mdp_ctl_start_sub(sctl, handoff);
ret = mdss_mdp_ctl_start_sub(sctl, handoff)
ret
ret
mdss_mdp_ctl_start_sub(sctl, handoff)
mdss_mdp_ctl_start_sub
mdss_mdp_ctl_start_sub
sctl
sctl
handoff
handoff
if (!ret)				mdss_mdp_ctl_split_display_enable(1, ctl, sctl);
!ret
ret
ret
mdss_mdp_ctl_split_display_enable(1, ctl, sctl);
mdss_mdp_ctl_split_display_enable(1, ctl, sctl)
mdss_mdp_ctl_split_display_enable
mdss_mdp_ctl_split_display_enable
1
ctl
ctl
sctl
sctl
if (ctl->mixer_right) {			struct mdss_mdp_mixer *mixer = ctl->mixer_right;			u32 out;			mixer->params_changed++;			out = (mixer->height << 16) | mixer->width;			mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out);			mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0);		} else if (is_pingpong_split(ctl->mfd)) {			ctl->slave_intf_num = (ctl->intf_num + 1);			mdss_mdp_ctl_pp_split_display_enable(true, ctl);		}
ctl->mixer_right
ctl
ctl
mixer_right
{			struct mdss_mdp_mixer *mixer = ctl->mixer_right;			u32 out;			mixer->params_changed++;			out = (mixer->height << 16) | mixer->width;			mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out);			mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0);		}
struct mdss_mdp_mixer *mixer = ctl->mixer_right;
struct mdss_mdp_mixer *mixer = ctl->mixer_right;
struct mdss_mdp_mixer
mdss_mdp_mixer
*mixer = ctl->mixer_right
*
mixer
= ctl->mixer_right
ctl->mixer_right
ctl
ctl
mixer_right
u32 out;
u32 out;
u32
u32
out
out
mixer->params_changed++;
mixer->params_changed++
mixer->params_changed
mixer
mixer
params_changed
out = (mixer->height << 16) | mixer->width;
out = (mixer->height << 16) | mixer->width
out
out
(mixer->height << 16) | mixer->width
(mixer->height << 16)
mixer->height << 16
mixer->height
mixer
mixer
height
16
mixer->width
mixer
mixer
width
mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out);
mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out)
mdp_mixer_write
mdp_mixer_write
mixer
mixer
MDSS_MDP_REG_LM_OUT_SIZE
MDSS_MDP_REG_LM_OUT_SIZE
out
out
mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0);
mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0)
mdss_mdp_ctl_write
mdss_mdp_ctl_write
ctl
ctl
MDSS_MDP_REG_CTL_PACK_3D
MDSS_MDP_REG_CTL_PACK_3D
0
if (is_pingpong_split(ctl->mfd)) {			ctl->slave_intf_num = (ctl->intf_num + 1);			mdss_mdp_ctl_pp_split_display_enable(true, ctl);		}
is_pingpong_split(ctl->mfd)
is_pingpong_split
is_pingpong_split
ctl->mfd
ctl
ctl
mfd
{			ctl->slave_intf_num = (ctl->intf_num + 1);			mdss_mdp_ctl_pp_split_display_enable(true, ctl);		}
ctl->slave_intf_num = (ctl->intf_num + 1);
ctl->slave_intf_num = (ctl->intf_num + 1)
ctl->slave_intf_num
ctl
ctl
slave_intf_num
(ctl->intf_num + 1)
ctl->intf_num + 1
ctl->intf_num
ctl
ctl
intf_num
1
mdss_mdp_ctl_pp_split_display_enable(true, ctl);
mdss_mdp_ctl_pp_split_display_enable(true, ctl)
mdss_mdp_ctl_pp_split_display_enable
mdss_mdp_ctl_pp_split_display_enable
true
ctl
ctl
mdss_mdp_hist_intr_setup(&mdata->hist_intr, MDSS_IRQ_RESUME);
mdss_mdp_hist_intr_setup(&mdata->hist_intr, MDSS_IRQ_RESUME)
mdss_mdp_hist_intr_setup
mdss_mdp_hist_intr_setup
&mdata->hist_intr
mdata->hist_intr
mdata
mdata
hist_intr
MDSS_IRQ_RESUME
MDSS_IRQ_RESUME
error:	mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF);
error
mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF);
mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF);
mdss_mdp_clk_ctrl
mdss_mdp_clk_ctrl
(MDP_BLOCK_POWER_OFF)
MDP_BLOCK_POWER_OFF
MDP_BLOCK_POWER_OFF
mutex_unlock(&ctl->lock);
mutex_unlock(&ctl->lock)
mutex_unlock
mutex_unlock
&ctl->lock
ctl->lock
ctl
ctl
lock
return ret;
ret
ret
-----joern-----
(83,153,0)
(52,168,0)
(125,61,0)
(169,21,0)
(158,153,0)
(3,151,0)
(54,121,0)
(99,57,0)
(58,153,0)
(14,156,0)
(100,165,0)
(85,95,0)
(174,83,0)
(61,125,0)
(151,62,0)
(171,165,0)
(193,146,0)
(184,59,0)
(197,128,0)
(26,93,0)
(90,156,0)
(103,60,0)
(175,25,0)
(89,62,0)
(55,145,0)
(192,165,0)
(57,165,0)
(88,67,0)
(122,191,0)
(29,153,0)
(31,163,0)
(30,165,0)
(118,53,0)
(21,153,0)
(97,153,0)
(80,96,0)
(170,193,0)
(131,153,0)
(192,20,0)
(196,54,0)
(56,60,0)
(94,57,0)
(32,61,0)
(62,89,0)
(43,141,0)
(161,80,0)
(53,144,0)
(112,147,0)
(24,153,0)
(48,156,0)
(92,47,0)
(142,39,0)
(164,88,0)
(33,107,0)
(151,67,0)
(121,54,0)
(45,194,0)
(44,88,0)
(159,153,0)
(147,112,0)
(163,71,0)
(120,155,0)
(141,125,0)
(111,156,0)
(21,46,0)
(66,73,0)
(197,153,0)
(79,165,0)
(171,83,0)
(0,117,0)
(178,173,0)
(181,94,0)
(138,163,0)
(68,153,0)
(82,133,0)
(38,153,0)
(102,140,0)
(77,145,0)
(40,81,0)
(58,146,0)
(111,7,0)
(53,118,0)
(183,95,0)
(154,0,0)
(112,152,0)
(69,144,0)
(179,117,0)
(10,12,0)
(30,12,0)
(106,116,0)
(118,177,0)
(127,14,0)
(190,67,0)
(107,67,0)
(48,28,0)
(117,0,0)
(181,20,0)
(148,79,0)
(23,145,0)
(13,141,0)
(156,67,0)
(144,166,0)
(82,165,0)
(4,57,0)
(50,100,0)
(70,53,0)
(162,41,0)
(87,158,0)
(125,141,0)
(163,165,0)
(34,80,0)
(59,165,0)
(42,198,0)
(83,173,0)
(185,100,0)
(59,154,0)
(145,46,0)
(146,58,0)
(177,153,0)
(123,191,0)
(193,165,0)
(158,192,0)
(47,73,0)
(81,165,0)
(88,156,0)
(25,198,0)
(94,181,0)
(18,107,0)
(15,83,0)
(126,88,0)
(12,30,0)
(191,143,0)
(172,153,0)
(137,67,0)
(64,81,0)
(156,14,0)
(73,47,0)
(0,154,0)
(140,158,0)
(80,165,0)
(60,47,0)
(61,83,0)
(6,189,0)
(2,153,0)
(16,73,0)
(173,83,0)
(71,96,0)
(110,140,0)
(144,153,0)
(188,192,0)
(173,165,0)
(116,121,0)
(21,25,0)
(169,155,0)
(49,96,0)
(96,80,0)
(121,116,0)
(116,165,0)
(15,20,0)
(47,60,0)
(60,165,0)
(73,165,0)
(19,41,0)
(147,165,0)
(146,193,0)
(9,116,0)
(25,15,0)
(150,30,0)
(134,121,0)
(89,156,0)
(187,131,0)
(160,192,0)
(139,129,0)
(100,104,0)
(47,153,0)
(177,118,0)
(119,14,0)
(154,59,0)
(28,62,0)
(11,82,0)
(115,107,0)
(128,41,0)
(169,93,0)
(41,165,0)
(166,144,0)
(104,100,0)
(124,117,0)
(65,28,0)
(186,171,0)
(46,153,0)
(113,15,0)
(192,158,0)
(72,48,0)
(114,168,0)
(93,12,0)
(78,15,0)
(109,147,0)
(63,111,0)
(125,54,0)
(98,95,0)
(15,25,0)
(95,165,0)
(117,165,0)
(141,165,0)
(75,152,0)
(149,39,0)
(132,171,0)
(36,84,0)
(62,28,0)
(8,147,0)
(91,181,0)
(39,149,0)
(37,112,0)
(129,153,0)
(22,145,0)
(135,177,0)
(46,145,0)
(54,125,0)
(105,79,0)
(84,165,0)
(128,197,0)
(71,133,0)
(176,82,0)
(74,89,0)
(7,111,0)
(14,165,0)
(155,143,0)
(1,25,0)
(51,46,0)
(7,67,0)
(108,89,0)
(21,158,0)
(95,98,0)
(167,111,0)
(27,86,0)
(35,21,0)
(168,165,0)
(28,48,0)
(86,153,0)
(107,165,0)
(96,71,0)
(101,129,0)
(149,168,0)
(76,153,0)
(41,128,0)
(17,48,0)
(180,1,0)
(145,165,0)
(81,194,0)
(5,193,0)
(39,104,0)
(88,151,0)
(57,94,0)
(136,171,0)
(104,39,0)
(168,149,0)
(12,153,0)
(62,151,0)
(130,153,0)
(182,53,0)
(75,112,1)
(180,25,1)
(163,165,1)
(0,117,1)
(27,177,1)
(5,86,1)
(15,83,1)
(100,50,1)
(112,147,1)
(58,146,1)
(117,165,1)
(79,165,1)
(10,154,1)
(92,129,1)
(86,27,1)
(166,69,1)
(156,14,1)
(81,165,1)
(169,155,1)
(32,140,1)
(173,165,1)
(144,166,1)
(98,95,1)
(61,83,1)
(174,195,1)
(164,126,1)
(191,122,1)
(85,183,1)
(84,36,1)
(22,77,1)
(73,16,1)
(70,107,1)
(138,98,1)
(62,28,1)
(57,165,1)
(15,20,1)
(145,165,1)
(70,98,1)
(108,28,1)
(141,13,1)
(150,10,1)
(14,119,1)
(80,165,1)
(181,20,1)
(80,34,1)
(187,94,1)
(89,156,1)
(91,84,1)
(175,61,1)
(126,151,1)
(107,33,1)
(30,150,1)
(154,0,1)
(70,140,1)
(192,188,1)
(41,162,1)
(18,88,1)
(94,181,1)
(88,44,1)
(160,87,1)
(197,128,1)
(195,12,1)
(47,73,1)
(168,165,1)
(44,164,1)
(28,48,1)
(87,157,1)
(148,61,1)
(7,111,1)
(185,142,1)
(70,1,1)
(177,135,1)
(48,156,1)
(193,170,1)
(125,141,1)
(17,72,1)
(192,20,1)
(11,176,1)
(114,52,1)
(104,100,1)
(100,165,1)
(116,106,1)
(84,165,1)
(147,8,1)
(140,110,1)
(56,92,1)
(77,55,1)
(102,158,1)
(39,104,1)
(51,131,1)
(94,57,1)
(26,195,1)
(162,19,1)
(127,90,1)
(25,15,1)
(193,165,1)
(187,194,1)
(141,165,1)
(82,11,1)
(48,17,1)
(96,80,1)
(124,179,1)
(171,165,1)
(60,103,1)
(171,83,1)
(49,80,1)
(140,158,1)
(176,71,1)
(183,79,1)
(155,120,1)
(3,7,1)
(142,149,1)
(12,30,1)
(43,32,1)
(39,149,1)
(194,45,1)
(99,4,1)
(16,66,1)
(184,47,1)
(149,168,1)
(90,79,1)
(173,178,1)
(9,141,1)
(62,89,1)
(70,82,1)
(41,165,1)
(13,43,1)
(91,39,1)
(116,165,1)
(139,144,1)
(122,123,1)
(61,32,1)
(157,46,1)
(50,185,1)
(15,78,1)
(72,3,1)
(95,165,1)
(1,180,1)
(151,62,1)
(64,94,1)
(71,96,1)
(169,21,1)
(125,54,1)
(88,156,1)
(136,132,1)
(61,125,1)
(146,193,1)
(57,99,1)
(23,51,1)
(36,197,1)
(47,60,1)
(101,139,1)
(171,186,1)
(28,65,1)
(109,37,1)
(131,187,1)
(81,40,1)
(46,145,1)
(73,165,1)
(96,49,1)
(21,46,1)
(37,157,1)
(79,105,1)
(70,171,1)
(177,118,1)
(181,91,1)
(134,116,1)
(55,23,1)
(170,5,1)
(179,59,1)
(196,121,1)
(54,196,1)
(121,134,1)
(21,158,1)
(178,174,1)
(60,165,1)
(82,165,1)
(121,116,1)
(74,108,1)
(132,1,1)
(19,83,1)
(66,60,1)
(34,161,1)
(158,192,1)
(117,124,1)
(118,53,1)
(135,118,1)
(78,113,1)
(52,84,1)
(119,127,1)
(115,18,1)
(21,35,1)
(169,93,1)
(63,167,1)
(123,154,1)
(103,56,1)
(88,151,1)
(110,102,1)
(65,48,1)
(167,156,1)
(83,173,1)
(186,136,1)
(106,9,1)
(111,63,1)
(4,181,1)
(192,165,1)
(129,101,1)
(168,114,1)
(161,163,1)
(54,121,1)
(8,109,1)
(93,26,1)
(14,165,1)
(128,41,1)
(59,165,1)
(111,156,1)
(147,165,1)
(31,138,1)
(154,59,1)
(107,165,1)
(21,25,1)
(105,148,1)
(182,70,1)
(120,191,1)
(30,165,1)
(59,184,1)
(33,115,1)
(45,81,1)
(95,85,1)
(27,75,1)
(89,74,1)
(1,25,1)
(163,31,1)
(113,175,1)
(188,160,1)
(93,12,1)
(53,182,1)
(145,22,1)
(40,64,1)
(35,58,1)
(53,144,1)
(120,154,2)
(53,157,2)
(10,154,2)
(111,156,2)
(125,32,2)
(3,79,2)
(44,79,2)
(121,141,2)
(79,165,2)
(109,157,2)
(197,128,2)
(134,141,2)
(128,41,2)
(128,195,2)
(39,149,2)
(88,151,2)
(13,32,2)
(54,121,2)
(167,79,2)
(33,79,2)
(116,141,2)
(156,79,2)
(14,79,2)
(71,96,2)
(11,98,2)
(169,21,2)
(48,156,2)
(78,61,2)
(147,165,2)
(123,154,2)
(54,141,2)
(181,20,2)
(93,12,2)
(100,84,2)
(35,195,2)
(49,98,2)
(15,20,2)
(102,157,2)
(23,195,2)
(187,195,2)
(1,61,2)
(50,84,2)
(163,98,2)
(95,165,2)
(62,28,2)
(48,79,2)
(61,83,2)
(18,79,2)
(173,195,2)
(52,84,2)
(122,154,2)
(106,141,2)
(149,168,2)
(59,165,2)
(144,166,2)
(58,195,2)
(145,165,2)
(89,79,2)
(149,84,2)
(169,155,2)
(115,79,2)
(46,145,2)
(71,98,2)
(188,157,2)
(108,79,2)
(156,14,2)
(70,157,2)
(47,60,2)
(96,98,2)
(154,0,2)
(0,59,2)
(183,79,2)
(147,157,2)
(55,195,2)
(176,98,2)
(99,181,2)
(88,156,2)
(140,157,2)
(113,61,2)
(171,165,2)
(112,157,2)
(83,173,2)
(181,195,2)
(43,32,2)
(39,104,2)
(191,154,2)
(186,1,2)
(125,54,2)
(158,157,2)
(100,165,2)
(195,154,2)
(175,61,2)
(110,157,2)
(88,79,2)
(151,79,2)
(57,165,2)
(81,94,2)
(126,79,2)
(154,59,2)
(79,61,2)
(180,61,2)
(174,195,2)
(15,61,2)
(12,154,2)
(32,140,2)
(75,157,2)
(36,195,2)
(1,25,2)
(98,79,2)
(28,48,2)
(61,140,2)
(138,98,2)
(124,59,2)
(197,195,2)
(141,165,2)
(177,118,2)
(62,79,2)
(19,195,2)
(41,165,2)
(85,79,2)
(21,158,2)
(77,195,2)
(64,94,2)
(185,84,2)
(192,165,2)
(179,59,2)
(148,61,2)
(41,195,2)
(27,195,2)
(61,125,2)
(160,157,2)
(74,79,2)
(141,32,2)
(81,165,2)
(135,157,2)
(117,59,2)
(127,79,2)
(53,144,2)
(136,1,2)
(182,157,2)
(168,84,2)
(8,157,2)
(21,46,2)
(30,154,2)
(155,154,2)
(83,195,2)
(34,98,2)
(164,79,2)
(82,165,2)
(95,79,2)
(4,181,2)
(90,79,2)
(72,79,2)
(117,165,2)
(146,195,2)
(31,98,2)
(5,195,2)
(125,141,2)
(91,195,2)
(104,100,2)
(107,165,2)
(94,57,2)
(171,83,2)
(131,195,2)
(21,25,2)
(118,53,2)
(105,61,2)
(196,141,2)
(7,111,2)
(161,98,2)
(114,84,2)
(140,158,2)
(45,94,2)
(94,195,2)
(178,195,2)
(146,193,2)
(162,195,2)
(80,165,2)
(63,79,2)
(60,165,2)
(21,195,2)
(80,98,2)
(26,195,2)
(168,165,2)
(14,165,2)
(157,195,2)
(86,195,2)
(104,84,2)
(87,157,2)
(194,94,2)
(62,89,2)
(142,84,2)
(40,94,2)
(12,30,2)
(121,116,2)
(82,98,2)
(116,165,2)
(93,195,2)
(17,79,2)
(158,192,2)
(107,79,2)
(84,195,2)
(30,165,2)
(47,73,2)
(22,195,2)
(89,156,2)
(84,165,2)
(65,79,2)
(96,80,2)
(150,154,2)
(111,79,2)
(94,181,2)
(192,20,2)
(171,1,2)
(37,157,2)
(73,165,2)
(46,195,2)
(151,62,2)
(58,146,2)
(118,157,2)
(193,165,2)
(193,195,2)
(51,195,2)
(98,95,2)
(177,157,2)
(169,93,2)
(173,165,2)
(25,15,2)
(25,61,2)
(0,117,2)
(7,79,2)
(57,181,2)
(9,141,2)
(15,83,2)
(28,79,2)
(145,195,2)
(112,147,2)
(39,84,2)
(119,79,2)
(192,157,2)
(132,1,2)
(163,165,2)
(170,195,2)
-----------------------------------
(0,!(ctl->pending_mode_switch)
(1,!ret)
(2,mdata)
(3,out)
(4,ctl)
(5,ctl)
(6,if (sctl && ctl->mfd &&\n\\n\\t\\t    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY)
(7,mixer->params_changed++)
(8,num)
(9,ctl)
(10,ret)
(11,ctl)
(12,ret = mdss_mdp_ctl_setup(ctl)
(13,mfd)
(14,ctl->mixer_right)
(15,mdss_mdp_ctl_start_sub(sctl, handoff)
(16,power_state)
(17,height)
(18,ctl)
(19,ctl)
(20,bool handoff)
(21,return ret;)
(22,CTL_INTF_EVENT_FLAG_DEFAULT)
(23,ctl)
(24,error:)
(25,ret = mdss_mdp_ctl_start_sub(sctl, handoff)
(26,ret)
(27,MDP_BLOCK_POWER_OFF)
(28,mixer->height << 16)
(29,if (!handoff || ctl->pending_mode_switch)
(30,mdss_mdp_ctl_setup(ctl)
(31,slave_intf_num)
(32,sctl)
(33,0)
(34,intf_num)
(35,ret)
(36,ctl)
(37,"panel power on failed ctl=%d\\n")
(38,if (mdss_mdp_ctl_is_power_on_interactive(ctl)
(39,memset(&ctl->cur_perf, 0, sizeof(ctl->cur_perf)
(40,power_state)
(41,ctl->lock)
(42,if (!ret)
(43,ctl)
(44,out)
(45,MDSS_PANEL_POWER_ON)
(46,ret = mdss_mdp_ctl_intf_event(ctl,\n\\n\\t\\tMDSS_EVENT_RESET, NULL, CTL_INTF_EVENT_FLAG_DEFAULT)
(47,pr_debug("ctl_num=%d, power_state=%d\\n", ctl->num, ctl->power_state)
(48,mixer->height)
(49,1)
(50,cur_perf)
(51,ret)
(52,ctl)
(53,mdata->hist_intr)
(54,ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY)
(55,MDSS_EVENT_RESET)
(56,ctl)
(57,ctl->pending_mode_switch)
(58,mutex_unlock(&ctl->lock)
(59,mdss_mdp_ctl_is_power_on_interactive(ctl)
(60,ctl->num)
(61,sctl && ctl->mfd &&\n\\n\\t\\t    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY)
(62,(mixer->height << 16)
(63,params_changed)
(64,ctl)
(65,16)
(66,ctl)
(67,)
(68,if (ret == 0)
(69,mdata)
(70,mdata)
(71,ctl->slave_intf_num = (ctl->intf_num + 1)
(72,mixer)
(73,ctl->power_state)
(74,width)
(75,goto error;)
(76,ret)
(77,NULL)
(78,handoff)
(79,ctl->mixer_right)
(80,ctl->intf_num)
(81,ctl->power_state)
(82,mdss_mdp_ctl_pp_split_display_enable(true, ctl)
(83,sctl = mdss_mdp_get_split_ctl(ctl)
(84,mdss_mdp_ctl_is_power_off(ctl)
(85,mfd)
(86,mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_OFF)
(87,ret)
(88,mdp_mixer_write(mixer, MDSS_MDP_REG_LM_OUT_SIZE, out)
(89,mixer->width)
(90,mixer)
(91,handoff)
(92,"ctl_num=%d, power_state=%d\\n")
(93,return ret;)
(94,!handoff || ctl->pending_mode_switch)
(95,ctl->mfd)
(96,ctl->intf_num + 1)
(97,if (ret)
(98,is_pingpong_split(ctl->mfd)
(99,pending_mode_switch)
(100,ctl->cur_perf)
(101,0)
(102,ret)
(103,num)
(104,sizeof(ctl->cur_perf)
(105,mixer_right)
(106,mfd)
(107,mdss_mdp_ctl_write(ctl, MDSS_MDP_REG_CTL_PACK_3D, 0)
(108,mixer)
(109,ctl)
(110,0)
(111,mixer->params_changed)
(112,pr_err("panel power on failed ctl=%d\\n", ctl->num)
(113,sctl)
(114,cur_perf)
(115,MDSS_MDP_REG_CTL_PACK_3D)
(116,ctl->mfd)
(117,ctl->pending_mode_switch)
(118,&mdata->hist_intr)
(119,mixer_right)
(120,0)
(121,ctl->mfd->split_mode)
(122,__LINE__)
(123,"%d: panel already on!\\n")
(124,pending_mode_switch)
(125,ctl->mfd &&\n\\n\\t\\t    ctl->mfd->split_mode == MDP_DUAL_LM_DUAL_DISPLAY)
(126,mixer)
(127,ctl)
(128,&ctl->lock)
(129,ret = 0)
(130,if (ret)
(131,mdss_mdp_clk_ctrl(MDP_BLOCK_POWER_ON)
(132,1)
(133,)
(134,split_mode)
(135,MDSS_IRQ_RESUME)
(136,ctl)
(137,out)
(138,ctl)
(139,ret)
(140,ret == 0)
(141,ctl->mfd)
(142,0)
(143,)
(144,*mdata = mdss_mdp_get_mdata()
(145,mdss_mdp_ctl_intf_event(ctl,\n\\n\\t\\tMDSS_EVENT_RESET, NULL, CTL_INTF_EVENT_FLAG_DEFAULT)
(146,&ctl->lock)
(147,ctl->num)
(148,ctl)
(149,&ctl->cur_perf)
(150,ctl)
(151,out = (mixer->height << 16)
(152,)
(153,)
(154,mdss_mdp_ctl_is_power_on_interactive(ctl)
(155,return 0;)
(156,*mixer = ctl->mixer_right)
(157,ret)
(158,ret = mdss_mdp_ctl_start_sub(ctl, handoff)
(159,if (mdss_mdp_ctl_is_power_off(ctl)
(160,ctl)
(161,ctl)
(162,lock)
(163,ctl->slave_intf_num)
(164,MDSS_MDP_REG_LM_OUT_SIZE)
(165,struct mdss_mdp_ctl *ctl)
(166,mdss_mdp_get_mdata()
(167,mixer)
(168,ctl->cur_perf)
(169,RET)
(170,lock)
(171,mdss_mdp_ctl_split_display_enable(1, ctl, sctl)
(172,sctl)
(173,mdss_mdp_get_split_ctl(ctl)
(174,sctl)
(175,ret)
(176,true)
(177,mdss_mdp_hist_intr_setup(&mdata->hist_intr, MDSS_IRQ_RESUME)
(178,ctl)
(179,ctl)
(180,ret)
(181,!handoff)
(182,hist_intr)
(183,ctl)
(184,ctl)
(185,ctl)
(186,sctl)
(187,MDP_BLOCK_POWER_ON)
(188,handoff)
(189,)
(190,mixer)
(191,pr_debug("%d: panel already on!\\n", __LINE__)
(192,mdss_mdp_ctl_start_sub(ctl, handoff)
(193,ctl->lock)
(194,ctl->power_state = MDSS_PANEL_POWER_ON)
(195,ret)
(196,MDP_DUAL_LM_DUAL_DISPLAY)
(197,mutex_lock(&ctl->lock)
(198,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^