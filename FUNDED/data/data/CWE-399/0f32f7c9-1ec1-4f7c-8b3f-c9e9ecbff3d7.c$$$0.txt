-----label-----
1
-----code-----
static int bfusb_probe(struct usb_interface *intf, const struct usb_device_id *id)
{
	const struct firmware *firmware;
	struct usb_device *udev = interface_to_usbdev(intf);
	struct usb_host_endpoint *bulk_out_ep;
	struct usb_host_endpoint *bulk_in_ep;
	struct hci_dev *hdev;
	struct bfusb_data *data;

	BT_DBG("intf %p id %p", intf, id);

	/* Check number of endpoints */
	if (intf->cur_altsetting->desc.bNumEndpoints < 2)
		return -EIO;

	bulk_out_ep = &intf->cur_altsetting->endpoint[0];
	bulk_in_ep  = &intf->cur_altsetting->endpoint[1];

	if (!bulk_out_ep || !bulk_in_ep) {
		BT_ERR("Bulk endpoints not found");
		goto done;
	}

	/* Initialize control structure and load firmware */
	data = devm_kzalloc(&intf->dev, sizeof(struct bfusb_data), GFP_KERNEL);
	if (!data) {
		BT_ERR("Can't allocate memory for control structure");
		goto done;
	}

	data->udev = udev;
	data->bulk_in_ep    = bulk_in_ep->desc.bEndpointAddress;
	data->bulk_out_ep   = bulk_out_ep->desc.bEndpointAddress;
	data->bulk_pkt_size = le16_to_cpu(bulk_out_ep->desc.wMaxPacketSize);

	rwlock_init(&data->lock);

	data->reassembly = NULL;

	skb_queue_head_init(&data->transmit_q);
	skb_queue_head_init(&data->pending_q);
	skb_queue_head_init(&data->completed_q);

	if (request_firmware(&firmware, "bfubase.frm", &udev->dev) < 0) {
		BT_ERR("Firmware request failed");
		goto done;
	}

	BT_DBG("firmware data %p size %zu", firmware->data, firmware->size);

	if (bfusb_load_firmware(data, firmware->data, firmware->size) < 0) {
		BT_ERR("Firmware loading failed");
		goto release;
	}

	release_firmware(firmware);

	/* Initialize and register HCI device */
	hdev = hci_alloc_dev();
	if (!hdev) {
		BT_ERR("Can't allocate HCI device");
		goto done;
	}

	data->hdev = hdev;

	hdev->bus = HCI_USB;
	hci_set_drvdata(hdev, data);
	SET_HCIDEV_DEV(hdev, &intf->dev);

	hdev->open  = bfusb_open;
	hdev->close = bfusb_close;
	hdev->flush = bfusb_flush;
	hdev->send  = bfusb_send_frame;

	set_bit(HCI_QUIRK_BROKEN_LOCAL_COMMANDS, &hdev->quirks);

	if (hci_register_dev(hdev) < 0) {
		BT_ERR("Can't register HCI device");
		hci_free_dev(hdev);
		goto done;
	}

	usb_set_intfdata(intf, data);

	return 0;

release:
	release_firmware(firmware);

done:
	return -EIO;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
17,47
17,48
17,49
17,50
17,51
17,52
17,53
17,54
17,55
17,56
17,57
17,58
17,59
18,19
19,20
19,21
20,21
22,23
22,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
53,54
53,55
54,55
56,57
56,58
59,60
60,61
60,62
61,62
63,64
63,65
66,67
67,68
67,69
67,70
67,71
68,69
71,72
73,74
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
80,81
86,87
87,88
88,89
90,91
91,92
91,93
92,93
94,95
95,96
95,97
96,97
96,98
97,98
97,99
98,99
103,104
104,105
104,106
105,106
107,108
108,109
108,110
109,110
109,111
110,111
110,112
111,112
116,117
116,118
117,118
117,119
118,119
119,120
121,122
122,123
124,125
124,126
125,126
126,127
126,128
127,128
130,131
132,133
133,134
133,135
134,135
136,137
136,138
136,139
136,140
137,138
139,140
140,141
140,142
141,142
144,145
145,146
145,147
146,147
149,150
151,152
151,153
152,153
153,154
155,156
155,157
156,157
157,158
157,159
158,159
161,162
163,164
164,165
164,166
165,166
165,167
166,167
169,170
171,172
172,173
172,174
173,174
173,175
174,175
177,178
177,179
178,179
178,180
179,180
183,184
184,185
184,186
185,186
185,187
186,187
189,190
189,191
190,191
190,192
191,192
195,196
196,197
196,198
197,198
197,199
198,199
201,202
201,203
202,203
204,205
204,206
205,206
205,207
206,207
210,211
211,212
211,213
212,213
214,215
215,216
215,217
216,217
219,220
220,221
220,222
221,222
221,223
222,223
225,226
227,228
228,229
228,230
229,230
231,232
232,233
232,234
233,234
236,237
237,238
237,239
238,239
240,241
241,242
241,243
242,243
245,246
246,247
246,248
247,248
249,250
250,251
250,252
251,252
254,255
254,256
255,256
255,257
256,257
256,258
256,259
256,260
257,258
259,260
260,261
263,264
264,265
264,266
265,266
269,270
269,271
270,271
271,272
271,273
272,273
275,276
277,278
278,279
278,280
278,281
278,282
279,280
282,283
282,284
283,284
286,287
286,288
287,288
290,291
290,292
291,292
291,293
292,293
292,294
292,295
292,296
293,294
295,296
297,298
297,299
298,299
301,302
301,303
302,303
306,307
306,308
307,308
308,309
308,310
309,310
312,313
314,315
315,316
315,317
316,317
318,319
320,321
321,322
321,323
322,323
324,325
325,326
327,328
327,329
328,329
329,330
331,332
331,333
332,333
333,334
333,335
334,335
337,338
339,340
340,341
340,342
341,342
341,343
342,343
345,346
347,348
348,349
348,350
349,350
349,351
350,351
353,354
355,356
356,357
356,358
356,359
357,358
359,360
361,362
363,364
364,365
364,366
364,367
365,366
367,368
369,370
370,371
370,372
371,372
374,375
375,376
375,377
376,377
376,378
377,378
380,381
382,383
383,384
383,385
384,385
384,386
385,386
388,389
390,391
391,392
391,393
392,393
392,394
393,394
396,397
398,399
399,400
399,401
400,401
400,402
401,402
404,405
406,407
407,408
407,409
407,410
408,409
410,411
412,413
413,414
413,415
414,415
417,418
417,419
418,419
418,420
419,420
419,421
420,421
422,423
425,426
425,427
425,428
426,427
427,428
427,429
428,429
431,432
432,433
432,434
433,434
435,436
437,438
439,440
440,441
440,442
440,443
441,442
443,444
445,446
447,448
449,450
449,451
451,452
452,453
452,454
453,454
455,456
457,458
457,459
459,460
460,461
461,462
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,30,31,35,37,41,43,44,48,50,51,55,57,58,62,64,65,69,70,72,74,81,82,83,84,85,89,93,99,100,101,102,106,112,113,114,115,120,123,128,129,131,135,138,142,143,147,148,150,154,159,160,162,167,168,170,175,176,180,181,182,187,188,192,193,194,199,200,203,207,208,209,213,217,218,223,224,226,230,234,235,239,243,244,248,252,253,258,261,262,266,267,268,273,274,276,280,281,284,285,288,289,294,296,299,300,303,304,305,310,311,313,317,319,323,326,330,335,336,338,343,344,346,351,352,354,358,360,362,366,368,372,373,378,379,381,386,387,389,394,395,397,402,403,405,409,411,415,416,421,423,424,429,430,434,436,438,442,444,446,448,450,454,456,458,462
-----computeFrom-----
76,77
76,78
91,92
91,93
104,105
104,106
117,118
117,119
133,134
133,135
164,165
164,166
172,173
172,174
184,185
184,186
196,197
196,198
220,221
220,222
255,256
255,257
291,292
291,293
321,322
321,323
340,341
340,342
348,349
348,350
375,376
375,377
383,384
383,385
391,392
391,393
399,400
399,401
418,419
418,420
-----guardedBy-----
423,436
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LabelStatement;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static int bfusb_probe(struct usb_interface *intf, const struct usb_device_id *id){	const struct firmware *firmware;	struct usb_device *udev = interface_to_usbdev(intf);	struct usb_host_endpoint *bulk_out_ep;	struct usb_host_endpoint *bulk_in_ep;	struct hci_dev *hdev;	struct bfusb_data *data;	BT_DBG("intf %p id %p", intf, id);	/* Check number of endpoints */	if (intf->cur_altsetting->desc.bNumEndpoints < 2)		return -EIO;	bulk_out_ep = &intf->cur_altsetting->endpoint[0];	bulk_in_ep  = &intf->cur_altsetting->endpoint[1];	if (!bulk_out_ep || !bulk_in_ep) {		BT_ERR("Bulk endpoints not found");		goto done;	}	/* Initialize control structure and load firmware */	data = devm_kzalloc(&intf->dev, sizeof(struct bfusb_data), GFP_KERNEL);	if (!data) {		BT_ERR("Can't allocate memory for control structure");		goto done;	}	data->udev = udev;	data->bulk_in_ep    = bulk_in_ep->desc.bEndpointAddress;	data->bulk_out_ep   = bulk_out_ep->desc.bEndpointAddress;	data->bulk_pkt_size = le16_to_cpu(bulk_out_ep->desc.wMaxPacketSize);	rwlock_init(&data->lock);	data->reassembly = NULL;	skb_queue_head_init(&data->transmit_q);	skb_queue_head_init(&data->pending_q);	skb_queue_head_init(&data->completed_q);	if (request_firmware(&firmware, "bfubase.frm", &udev->dev) < 0) {		BT_ERR("Firmware request failed");		goto done;	}	BT_DBG("firmware data %p size %zu", firmware->data, firmware->size);	if (bfusb_load_firmware(data, firmware->data, firmware->size) < 0) {		BT_ERR("Firmware loading failed");		goto release;	}	release_firmware(firmware);	/* Initialize and register HCI device */	hdev = hci_alloc_dev();	if (!hdev) {		BT_ERR("Can't allocate HCI device");		goto done;	}	data->hdev = hdev;	hdev->bus = HCI_USB;	hci_set_drvdata(hdev, data);	SET_HCIDEV_DEV(hdev, &intf->dev);	hdev->open  = bfusb_open;	hdev->close = bfusb_close;	hdev->flush = bfusb_flush;	hdev->send  = bfusb_send_frame;	set_bit(HCI_QUIRK_BROKEN_LOCAL_COMMANDS, &hdev->quirks);	if (hci_register_dev(hdev) < 0) {		BT_ERR("Can't register HCI device");		hci_free_dev(hdev);		goto done;	}	usb_set_intfdata(intf, data);	return 0;release:	release_firmware(firmware);done:	return -EIO;}
static int
bfusb_probe(struct usb_interface *intf, const struct usb_device_id *id)
bfusb_probe
struct usb_interface *intf
struct usb_interface
usb_interface
*intf
*
intf
const struct usb_device_id *id
const struct usb_device_id
usb_device_id
*id
*
id
{	const struct firmware *firmware;	struct usb_device *udev = interface_to_usbdev(intf);	struct usb_host_endpoint *bulk_out_ep;	struct usb_host_endpoint *bulk_in_ep;	struct hci_dev *hdev;	struct bfusb_data *data;	BT_DBG("intf %p id %p", intf, id);	/* Check number of endpoints */	if (intf->cur_altsetting->desc.bNumEndpoints < 2)		return -EIO;	bulk_out_ep = &intf->cur_altsetting->endpoint[0];	bulk_in_ep  = &intf->cur_altsetting->endpoint[1];	if (!bulk_out_ep || !bulk_in_ep) {		BT_ERR("Bulk endpoints not found");		goto done;	}	/* Initialize control structure and load firmware */	data = devm_kzalloc(&intf->dev, sizeof(struct bfusb_data), GFP_KERNEL);	if (!data) {		BT_ERR("Can't allocate memory for control structure");		goto done;	}	data->udev = udev;	data->bulk_in_ep    = bulk_in_ep->desc.bEndpointAddress;	data->bulk_out_ep   = bulk_out_ep->desc.bEndpointAddress;	data->bulk_pkt_size = le16_to_cpu(bulk_out_ep->desc.wMaxPacketSize);	rwlock_init(&data->lock);	data->reassembly = NULL;	skb_queue_head_init(&data->transmit_q);	skb_queue_head_init(&data->pending_q);	skb_queue_head_init(&data->completed_q);	if (request_firmware(&firmware, "bfubase.frm", &udev->dev) < 0) {		BT_ERR("Firmware request failed");		goto done;	}	BT_DBG("firmware data %p size %zu", firmware->data, firmware->size);	if (bfusb_load_firmware(data, firmware->data, firmware->size) < 0) {		BT_ERR("Firmware loading failed");		goto release;	}	release_firmware(firmware);	/* Initialize and register HCI device */	hdev = hci_alloc_dev();	if (!hdev) {		BT_ERR("Can't allocate HCI device");		goto done;	}	data->hdev = hdev;	hdev->bus = HCI_USB;	hci_set_drvdata(hdev, data);	SET_HCIDEV_DEV(hdev, &intf->dev);	hdev->open  = bfusb_open;	hdev->close = bfusb_close;	hdev->flush = bfusb_flush;	hdev->send  = bfusb_send_frame;	set_bit(HCI_QUIRK_BROKEN_LOCAL_COMMANDS, &hdev->quirks);	if (hci_register_dev(hdev) < 0) {		BT_ERR("Can't register HCI device");		hci_free_dev(hdev);		goto done;	}	usb_set_intfdata(intf, data);	return 0;release:	release_firmware(firmware);done:	return -EIO;}
const struct firmware *firmware;
const struct firmware *firmware;
const struct firmware
firmware
*firmware
*
firmware
struct usb_device *udev = interface_to_usbdev(intf);
struct usb_device *udev = interface_to_usbdev(intf);
struct usb_device
usb_device
*udev = interface_to_usbdev(intf)
*
udev
= interface_to_usbdev(intf)
interface_to_usbdev(intf)
interface_to_usbdev
interface_to_usbdev
intf
intf
struct usb_host_endpoint *bulk_out_ep;
struct usb_host_endpoint *bulk_out_ep;
struct usb_host_endpoint
usb_host_endpoint
*bulk_out_ep
*
bulk_out_ep
struct usb_host_endpoint *bulk_in_ep;
struct usb_host_endpoint *bulk_in_ep;
struct usb_host_endpoint
usb_host_endpoint
*bulk_in_ep
*
bulk_in_ep
struct hci_dev *hdev;
struct hci_dev *hdev;
struct hci_dev
hci_dev
*hdev
*
hdev
struct bfusb_data *data;
struct bfusb_data *data;
struct bfusb_data
bfusb_data
*data
*
data
BT_DBG("intf %p id %p", intf, id);
BT_DBG("intf %p id %p", intf, id)
BT_DBG
BT_DBG
"intf %p id %p"
intf
intf
id
id
if (intf->cur_altsetting->desc.bNumEndpoints < 2)		return -EIO;
intf->cur_altsetting->desc.bNumEndpoints < 2
intf->cur_altsetting->desc.bNumEndpoints
intf->cur_altsetting->desc
intf->cur_altsetting
intf
intf
cur_altsetting
desc
bNumEndpoints
2
return -EIO;
-EIO
EIO
EIO
bulk_out_ep = &intf->cur_altsetting->endpoint[0];
bulk_out_ep = &intf->cur_altsetting->endpoint[0]
bulk_out_ep
bulk_out_ep
&intf->cur_altsetting->endpoint[0]
intf->cur_altsetting->endpoint[0]
intf->cur_altsetting->endpoint
intf->cur_altsetting
intf
intf
cur_altsetting
endpoint
0
bulk_in_ep  = &intf->cur_altsetting->endpoint[1];
bulk_in_ep  = &intf->cur_altsetting->endpoint[1]
bulk_in_ep
bulk_in_ep
&intf->cur_altsetting->endpoint[1]
intf->cur_altsetting->endpoint[1]
intf->cur_altsetting->endpoint
intf->cur_altsetting
intf
intf
cur_altsetting
endpoint
1
if (!bulk_out_ep || !bulk_in_ep) {		BT_ERR("Bulk endpoints not found");		goto done;	}
!bulk_out_ep || !bulk_in_ep
!bulk_out_ep
bulk_out_ep
bulk_out_ep
!bulk_in_ep
bulk_in_ep
bulk_in_ep
{		BT_ERR("Bulk endpoints not found");		goto done;	}
BT_ERR("Bulk endpoints not found");
BT_ERR("Bulk endpoints not found")
BT_ERR
BT_ERR
"Bulk endpoints not found"
goto done;
done
data = devm_kzalloc(&intf->dev, sizeof(struct bfusb_data), GFP_KERNEL);
data = devm_kzalloc(&intf->dev, sizeof(struct bfusb_data), GFP_KERNEL)
data
data
devm_kzalloc(&intf->dev, sizeof(struct bfusb_data), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&intf->dev
intf->dev
intf
intf
dev
sizeof(struct bfusb_data)
struct bfusb_data
struct bfusb_data
bfusb_data

GFP_KERNEL
GFP_KERNEL
if (!data) {		BT_ERR("Can't allocate memory for control structure");		goto done;	}
!data
data
data
{		BT_ERR("Can't allocate memory for control structure");		goto done;	}
BT_ERR("Can't allocate memory for control structure");
BT_ERR("Can't allocate memory for control structure")
BT_ERR
BT_ERR
"Can't allocate memory for control structure"
goto done;
done
data->udev = udev;
data->udev = udev
data->udev
data
data
udev
udev
udev
data->bulk_in_ep    = bulk_in_ep->desc.bEndpointAddress;
data->bulk_in_ep    = bulk_in_ep->desc.bEndpointAddress
data->bulk_in_ep
data
data
bulk_in_ep
bulk_in_ep->desc.bEndpointAddress
bulk_in_ep->desc
bulk_in_ep
bulk_in_ep
desc
bEndpointAddress
data->bulk_out_ep   = bulk_out_ep->desc.bEndpointAddress;
data->bulk_out_ep   = bulk_out_ep->desc.bEndpointAddress
data->bulk_out_ep
data
data
bulk_out_ep
bulk_out_ep->desc.bEndpointAddress
bulk_out_ep->desc
bulk_out_ep
bulk_out_ep
desc
bEndpointAddress
data->bulk_pkt_size = le16_to_cpu(bulk_out_ep->desc.wMaxPacketSize);
data->bulk_pkt_size = le16_to_cpu(bulk_out_ep->desc.wMaxPacketSize)
data->bulk_pkt_size
data
data
bulk_pkt_size
le16_to_cpu(bulk_out_ep->desc.wMaxPacketSize)
le16_to_cpu
le16_to_cpu
bulk_out_ep->desc.wMaxPacketSize
bulk_out_ep->desc
bulk_out_ep
bulk_out_ep
desc
wMaxPacketSize
rwlock_init(&data->lock);
rwlock_init(&data->lock)
rwlock_init
rwlock_init
&data->lock
data->lock
data
data
lock
data->reassembly = NULL;
data->reassembly = NULL
data->reassembly
data
data
reassembly
NULL
NULL
skb_queue_head_init(&data->transmit_q);
skb_queue_head_init(&data->transmit_q)
skb_queue_head_init
skb_queue_head_init
&data->transmit_q
data->transmit_q
data
data
transmit_q
skb_queue_head_init(&data->pending_q);
skb_queue_head_init(&data->pending_q)
skb_queue_head_init
skb_queue_head_init
&data->pending_q
data->pending_q
data
data
pending_q
skb_queue_head_init(&data->completed_q);
skb_queue_head_init(&data->completed_q)
skb_queue_head_init
skb_queue_head_init
&data->completed_q
data->completed_q
data
data
completed_q
if (request_firmware(&firmware, "bfubase.frm", &udev->dev) < 0) {		BT_ERR("Firmware request failed");		goto done;	}
request_firmware(&firmware, "bfubase.frm", &udev->dev) < 0
request_firmware(&firmware, "bfubase.frm", &udev->dev)
request_firmware
request_firmware
&firmware
firmware
firmware
"bfubase.frm"
&udev->dev
udev->dev
udev
udev
dev
0
{		BT_ERR("Firmware request failed");		goto done;	}
BT_ERR("Firmware request failed");
BT_ERR("Firmware request failed")
BT_ERR
BT_ERR
"Firmware request failed"
goto done;
done
BT_DBG("firmware data %p size %zu", firmware->data, firmware->size);
BT_DBG("firmware data %p size %zu", firmware->data, firmware->size)
BT_DBG
BT_DBG
"firmware data %p size %zu"
firmware->data
firmware
firmware
data
firmware->size
firmware
firmware
size
if (bfusb_load_firmware(data, firmware->data, firmware->size) < 0) {		BT_ERR("Firmware loading failed");		goto release;	}
bfusb_load_firmware(data, firmware->data, firmware->size) < 0
bfusb_load_firmware(data, firmware->data, firmware->size)
bfusb_load_firmware
bfusb_load_firmware
data
data
firmware->data
firmware
firmware
data
firmware->size
firmware
firmware
size
0
{		BT_ERR("Firmware loading failed");		goto release;	}
BT_ERR("Firmware loading failed");
BT_ERR("Firmware loading failed")
BT_ERR
BT_ERR
"Firmware loading failed"
goto release;
release
release_firmware(firmware);
release_firmware(firmware)
release_firmware
release_firmware
firmware
firmware
hdev = hci_alloc_dev();
hdev = hci_alloc_dev()
hdev
hdev
hci_alloc_dev()
hci_alloc_dev
hci_alloc_dev
if (!hdev) {		BT_ERR("Can't allocate HCI device");		goto done;	}
!hdev
hdev
hdev
{		BT_ERR("Can't allocate HCI device");		goto done;	}
BT_ERR("Can't allocate HCI device");
BT_ERR("Can't allocate HCI device")
BT_ERR
BT_ERR
"Can't allocate HCI device"
goto done;
done
data->hdev = hdev;
data->hdev = hdev
data->hdev
data
data
hdev
hdev
hdev
hdev->bus = HCI_USB;
hdev->bus = HCI_USB
hdev->bus
hdev
hdev
bus
HCI_USB
HCI_USB
hci_set_drvdata(hdev, data);
hci_set_drvdata(hdev, data)
hci_set_drvdata
hci_set_drvdata
hdev
hdev
data
data
SET_HCIDEV_DEV(hdev, &intf->dev);
SET_HCIDEV_DEV(hdev, &intf->dev)
SET_HCIDEV_DEV
SET_HCIDEV_DEV
hdev
hdev
&intf->dev
intf->dev
intf
intf
dev
hdev->open  = bfusb_open;
hdev->open  = bfusb_open
hdev->open
hdev
hdev
open
bfusb_open
bfusb_open
hdev->close = bfusb_close;
hdev->close = bfusb_close
hdev->close
hdev
hdev
close
bfusb_close
bfusb_close
hdev->flush = bfusb_flush;
hdev->flush = bfusb_flush
hdev->flush
hdev
hdev
flush
bfusb_flush
bfusb_flush
hdev->send  = bfusb_send_frame;
hdev->send  = bfusb_send_frame
hdev->send
hdev
hdev
send
bfusb_send_frame
bfusb_send_frame
set_bit(HCI_QUIRK_BROKEN_LOCAL_COMMANDS, &hdev->quirks);
set_bit(HCI_QUIRK_BROKEN_LOCAL_COMMANDS, &hdev->quirks)
set_bit
set_bit
HCI_QUIRK_BROKEN_LOCAL_COMMANDS
HCI_QUIRK_BROKEN_LOCAL_COMMANDS
&hdev->quirks
hdev->quirks
hdev
hdev
quirks
if (hci_register_dev(hdev) < 0) {		BT_ERR("Can't register HCI device");		hci_free_dev(hdev);		goto done;	}
hci_register_dev(hdev) < 0
hci_register_dev(hdev)
hci_register_dev
hci_register_dev
hdev
hdev
0
{		BT_ERR("Can't register HCI device");		hci_free_dev(hdev);		goto done;	}
BT_ERR("Can't register HCI device");
BT_ERR("Can't register HCI device")
BT_ERR
BT_ERR
"Can't register HCI device"
hci_free_dev(hdev);
hci_free_dev(hdev)
hci_free_dev
hci_free_dev
hdev
hdev
goto done;
done
usb_set_intfdata(intf, data);
usb_set_intfdata(intf, data)
usb_set_intfdata
usb_set_intfdata
intf
intf
data
data
return 0;
0
release:	release_firmware(firmware);
release
release_firmware(firmware);
release_firmware(firmware)
release_firmware
release_firmware
firmware
firmware
done:	return -EIO;
done
return -EIO;
-EIO
EIO
EIO
-----joern-----
(165,6,0)
(230,123,0)
(233,193,0)
(142,126,0)
(17,18,0)
(176,121,0)
(105,166,0)
(84,100,0)
(195,166,0)
(119,92,0)
(17,181,0)
(213,99,0)
(108,121,0)
(32,135,0)
(180,229,0)
(110,226,0)
(177,188,0)
(100,121,0)
(57,86,0)
(170,143,0)
(113,25,0)
(176,99,0)
(17,86,0)
(222,166,0)
(122,121,0)
(214,229,0)
(253,29,0)
(147,121,0)
(47,58,0)
(91,194,0)
(124,121,0)
(190,43,0)
(6,21,0)
(194,21,0)
(10,212,0)
(227,98,0)
(89,4,0)
(102,121,0)
(56,229,0)
(27,250,0)
(186,121,0)
(73,175,0)
(25,154,0)
(18,21,0)
(191,107,0)
(162,142,0)
(88,121,0)
(107,67,0)
(172,45,0)
(96,33,0)
(95,176,0)
(53,39,0)
(129,111,0)
(234,121,0)
(24,3,0)
(169,111,0)
(228,159,0)
(166,105,0)
(20,78,0)
(236,43,0)
(235,10,0)
(188,196,0)
(179,54,0)
(248,169,0)
(69,21,0)
(54,42,0)
(245,18,0)
(81,22,0)
(91,121,0)
(9,248,0)
(67,107,0)
(250,21,0)
(37,121,0)
(74,84,0)
(106,18,0)
(86,100,0)
(91,34,0)
(17,49,0)
(91,45,0)
(17,6,0)
(9,154,0)
(163,152,0)
(38,121,0)
(135,32,0)
(209,77,0)
(17,45,0)
(169,248,0)
(239,121,0)
(41,123,0)
(194,19,0)
(77,184,0)
(97,126,0)
(236,149,0)
(2,43,0)
(146,121,0)
(202,6,0)
(211,99,0)
(240,73,0)
(55,239,0)
(60,30,0)
(23,226,0)
(28,82,0)
(250,121,0)
(213,190,0)
(104,101,0)
(111,99,0)
(203,211,0)
(19,121,0)
(137,121,0)
(251,155,0)
(219,5,0)
(126,67,0)
(109,62,0)
(136,200,0)
(17,29,0)
(127,101,0)
(152,139,0)
(22,81,0)
(64,34,0)
(111,169,0)
(198,79,0)
(241,21,0)
(70,193,0)
(7,153,0)
(221,126,0)
(18,36,0)
(21,121,0)
(11,212,0)
(135,229,0)
(80,49,0)
(153,7,0)
(91,128,0)
(50,114,0)
(10,78,0)
(216,194,0)
(189,21,0)
(226,98,0)
(61,29,0)
(190,213,0)
(105,212,0)
(91,86,0)
(249,121,0)
(226,110,0)
(153,250,0)
(86,229,0)
(41,99,0)
(168,45,0)
(20,121,0)
(12,38,0)
(252,107,0)
(148,91,0)
(140,222,0)
(117,229,0)
(45,124,0)
(193,21,0)
(21,189,0)
(0,121,0)
(138,117,0)
(126,97,0)
(93,154,0)
(155,118,0)
(125,7,0)
(185,42,0)
(7,99,0)
(207,26,0)
(22,42,0)
(116,69,0)
(72,41,0)
(34,0,0)
(214,200,0)
(52,128,0)
(192,180,0)
(128,38,0)
(170,17,0)
(160,15,0)
(36,121,0)
(250,153,0)
(47,121,0)
(192,187,0)
(212,121,0)
(181,102,0)
(132,49,0)
(39,229,0)
(141,26,0)
(244,37,0)
(79,237,0)
(201,197,0)
(206,181,0)
(140,99,0)
(145,248,0)
(218,102,0)
(157,131,0)
(211,238,0)
(159,229,0)
(183,176,0)
(84,25,0)
(123,121,0)
(76,199,0)
(75,121,0)
(42,54,0)
(29,131,0)
(246,219,0)
(26,121,0)
(63,124,0)
(182,118,0)
(58,39,0)
(247,7,0)
(102,123,0)
(13,78,0)
(1,121,0)
(174,121,0)
(131,121,0)
(128,21,0)
(90,121,0)
(134,237,0)
(234,32,0)
(150,180,0)
(35,213,0)
(161,194,0)
(117,21,0)
(117,121,0)
(139,152,0)
(217,101,0)
(25,84,0)
(91,49,0)
(120,8,0)
(229,43,0)
(229,121,0)
(54,212,0)
(39,58,0)
(210,39,0)
(17,34,0)
(15,121,0)
(181,229,0)
(91,181,0)
(141,193,0)
(68,197,0)
(51,140,0)
(166,222,0)
(231,86,0)
(222,140,0)
(164,196,0)
(118,21,0)
(156,128,0)
(225,117,0)
(62,239,0)
(214,33,0)
(232,92,0)
(214,30,0)
(100,84,0)
(91,18,0)
(31,36,0)
(103,10,0)
(101,229,0)
(139,114,0)
(174,104,0)
(154,121,0)
(133,121,0)
(114,212,0)
(112,19,0)
(242,1,0)
(200,214,0)
(3,98,0)
(58,47,0)
(91,6,0)
(71,184,0)
(98,226,0)
(42,22,0)
(30,214,0)
(82,4,0)
(104,174,0)
(101,104,0)
(85,62,0)
(45,21,0)
(29,229,0)
(43,236,0)
(115,140,0)
(91,197,0)
(78,20,0)
(193,141,0)
(40,214,0)
(158,97,0)
(46,222,0)
(114,139,0)
(8,17,0)
(205,175,0)
(224,0,0)
(26,141,0)
(220,135,0)
(167,181,0)
(49,229,0)
(81,121,0)
(197,229,0)
(3,99,0)
(173,211,0)
(16,5,0)
(17,128,0)
(223,110,0)
(32,234,0)
(170,91,0)
(67,126,0)
(92,239,0)
(187,192,0)
(204,44,0)
(6,15,0)
(243,54,0)
(17,121,0)
(215,3,0)
(91,29,0)
(17,197,0)
(118,155,0)
(107,123,0)
(34,229,0)
(87,135,0)
(176,229,0)
(197,20,0)
(65,30,0)
(66,121,0)
(208,121,0)
(59,25,0)
(48,211,0)
(123,41,0)
(171,200,0)
(144,121,0)
(94,169,0)
(178,111,0)
(17,194,0)
(154,9,0)
(149,236,0)
(239,92,0)
(14,121,0)
(49,81,0)
(239,62,0)
(98,3,0)
(126,142,0)
(211,121,0)
(77,21,0)
(43,190,0)
(43,229,0)
(187,121,0)
(151,180,0)
(152,154,0)
(130,213,0)
(199,143,0)
(44,184,0)
(248,9,0)
(33,214,0)
(131,21,0)
(83,34,0)
(212,105,0)
(180,192,0)
(78,10,0)
(240,69,1)
(32,135,1)
(212,105,1)
(248,145,1)
(98,3,1)
(119,232,1)
(16,219,1)
(50,154,1)
(252,221,1)
(125,27,1)
(203,173,1)
(156,52,1)
(97,126,1)
(79,198,1)
(17,29,1)
(76,110,1)
(242,33,1)
(166,195,1)
(211,238,1)
(39,229,1)
(253,69,1)
(141,193,1)
(70,207,1)
(56,139,1)
(207,124,1)
(109,55,1)
(37,244,1)
(91,194,1)
(59,113,1)
(69,21,1)
(123,41,1)
(52,250,1)
(18,21,1)
(140,99,1)
(30,60,1)
(129,93,1)
(236,149,1)
(214,229,1)
(135,87,1)
(117,229,1)
(102,123,1)
(114,212,1)
(96,214,1)
(193,233,1)
(223,226,1)
(47,58,1)
(91,29,1)
(77,21,1)
(227,3,1)
(45,21,1)
(71,77,1)
(92,119,1)
(113,86,1)
(130,56,1)
(211,99,1)
(80,20,1)
(49,132,1)
(118,21,1)
(188,177,1)
(11,110,1)
(17,18,1)
(78,10,1)
(250,21,1)
(91,86,1)
(21,189,1)
(194,161,1)
(7,99,1)
(124,63,1)
(191,252,1)
(139,152,1)
(22,42,1)
(160,6,1)
(239,62,1)
(33,214,1)
(36,31,1)
(48,203,1)
(17,86,1)
(116,21,1)
(34,64,1)
(10,212,1)
(197,229,1)
(170,17,1)
(174,104,1)
(83,187,1)
(43,2,1)
(231,57,1)
(111,99,1)
(198,139,1)
(42,185,1)
(91,49,1)
(107,123,1)
(131,21,1)
(41,72,1)
(170,91,1)
(98,227,1)
(178,129,1)
(17,49,1)
(213,35,1)
(17,181,1)
(189,241,1)
(43,190,1)
(91,181,1)
(169,111,1)
(100,84,1)
(25,59,1)
(217,47,1)
(107,191,1)
(220,0,1)
(15,160,1)
(3,215,1)
(166,222,1)
(209,44,1)
(17,8,1)
(42,54,1)
(91,45,1)
(86,229,1)
(250,153,1)
(54,212,1)
(89,82,1)
(195,222,1)
(69,116,1)
(84,25,1)
(87,220,1)
(164,188,1)
(110,226,1)
(67,107,1)
(0,224,1)
(57,102,1)
(41,99,1)
(13,10,1)
(222,46,1)
(142,162,1)
(171,136,1)
(224,34,1)
(173,123,1)
(235,103,1)
(151,150,1)
(126,142,1)
(134,79,1)
(159,229,1)
(33,96,1)
(111,178,1)
(58,39,1)
(241,1,1)
(101,229,1)
(35,130,1)
(150,81,1)
(218,181,1)
(115,11,1)
(145,169,1)
(120,134,1)
(226,23,1)
(6,21,1)
(63,45,1)
(91,18,1)
(120,16,1)
(155,118,1)
(214,200,1)
(190,213,1)
(128,21,1)
(197,68,1)
(12,128,1)
(185,54,1)
(192,180,1)
(140,51,1)
(120,205,1)
(91,197,1)
(28,97,1)
(39,210,1)
(213,99,1)
(91,34,1)
(234,32,1)
(44,204,1)
(163,114,1)
(85,109,1)
(51,115,1)
(81,22,1)
(34,229,1)
(95,155,1)
(200,171,1)
(179,49,1)
(31,18,1)
(17,194,1)
(233,70,1)
(139,114,1)
(202,165,1)
(104,101,1)
(77,209,1)
(182,26,1)
(101,127,1)
(18,106,1)
(112,194,1)
(17,197,1)
(169,94,1)
(126,67,1)
(2,236,1)
(23,98,1)
(91,128,1)
(8,120,1)
(244,164,1)
(94,111,1)
(158,126,1)
(74,25,1)
(181,229,1)
(17,45,1)
(248,169,1)
(148,176,1)
(20,78,1)
(46,140,1)
(7,247,1)
(135,229,1)
(168,15,1)
(17,128,1)
(1,242,1)
(180,229,1)
(176,183,1)
(221,142,1)
(229,43,1)
(246,159,1)
(9,248,1)
(152,154,1)
(24,211,1)
(106,245,1)
(72,230,1)
(201,100,1)
(93,212,1)
(251,118,1)
(205,73,1)
(128,156,1)
(180,151,1)
(64,83,1)
(165,19,1)
(29,229,1)
(61,253,1)
(55,97,1)
(153,7,1)
(183,95,1)
(54,243,1)
(91,6,1)
(49,229,1)
(152,163,1)
(78,13,1)
(29,61,1)
(26,141,1)
(193,21,1)
(155,251,1)
(120,71,1)
(225,36,1)
(53,234,1)
(214,30,1)
(243,179,1)
(120,89,1)
(131,157,1)
(27,117,1)
(211,48,1)
(45,172,1)
(40,239,1)
(117,21,1)
(222,140,1)
(19,112,1)
(176,229,1)
(17,6,1)
(176,99,1)
(10,235,1)
(3,99,1)
(154,9,1)
(236,190,1)
(206,167,1)
(105,166,1)
(228,229,1)
(25,154,1)
(84,74,1)
(204,155,1)
(114,50,1)
(210,53,1)
(138,225,1)
(136,30,1)
(62,85,1)
(157,29,1)
(68,201,1)
(226,98,1)
(239,92,1)
(118,182,1)
(187,192,1)
(215,24,1)
(132,80,1)
(82,28,1)
(43,236,1)
(159,228,1)
(73,240,1)
(247,125,1)
(117,138,1)
(232,62,1)
(194,21,1)
(60,65,1)
(199,76,1)
(91,148,1)
(181,206,1)
(216,38,1)
(17,34,1)
(97,158,1)
(103,197,1)
(162,174,1)
(120,37,1)
(6,202,1)
(172,168,1)
(219,246,1)
(161,216,1)
(170,143,1)
(177,33,1)
(167,159,1)
(127,217,1)
(245,131,1)
(38,12,1)
(143,199,1)
(86,231,1)
(102,218,1)
(65,40,1)
(110,223,1)
(113,159,2)
(28,97,2)
(22,42,2)
(110,226,2)
(154,9,2)
(17,155,2)
(49,159,2)
(253,69,2)
(105,110,2)
(198,139,2)
(97,159,2)
(63,69,2)
(229,43,2)
(181,229,2)
(247,69,2)
(100,159,2)
(91,18,2)
(17,29,2)
(17,159,2)
(242,33,2)
(216,69,2)
(101,159,2)
(128,21,2)
(193,21,2)
(53,159,2)
(47,159,2)
(120,97,2)
(1,33,2)
(38,69,2)
(117,229,2)
(67,159,2)
(8,139,2)
(236,149,2)
(80,159,2)
(213,99,2)
(118,21,2)
(106,69,2)
(136,97,2)
(187,192,2)
(91,128,2)
(241,33,2)
(91,29,2)
(207,69,2)
(91,155,2)
(10,212,2)
(71,155,2)
(102,159,2)
(9,110,2)
(6,21,2)
(239,92,2)
(164,33,2)
(98,3,2)
(251,69,2)
(152,154,2)
(152,114,2)
(87,159,2)
(120,155,2)
(76,110,2)
(77,155,2)
(42,159,2)
(92,97,2)
(94,110,2)
(91,86,2)
(119,97,2)
(125,69,2)
(22,159,2)
(18,21,2)
(15,69,2)
(139,152,2)
(159,139,2)
(211,99,2)
(214,229,2)
(111,110,2)
(17,97,2)
(142,159,2)
(39,159,2)
(236,139,2)
(185,159,2)
(11,110,2)
(93,110,2)
(248,169,2)
(21,189,2)
(17,128,2)
(9,248,2)
(192,180,2)
(17,45,2)
(40,97,2)
(140,99,2)
(220,159,2)
(57,159,2)
(197,159,2)
(176,155,2)
(49,229,2)
(239,62,2)
(50,110,2)
(47,58,2)
(45,21,2)
(135,159,2)
(81,22,2)
(202,69,2)
(29,229,2)
(222,140,2)
(244,33,2)
(117,21,2)
(195,110,2)
(205,69,2)
(46,110,2)
(233,69,2)
(245,69,2)
(126,159,2)
(13,159,2)
(27,69,2)
(177,33,2)
(101,229,2)
(97,126,2)
(170,17,2)
(127,159,2)
(12,69,2)
(43,190,2)
(82,97,2)
(166,110,2)
(54,212,2)
(34,159,2)
(20,159,2)
(180,229,2)
(157,69,2)
(163,114,2)
(17,69,2)
(25,154,2)
(8,159,2)
(78,159,2)
(218,159,2)
(112,69,2)
(91,6,2)
(158,159,2)
(197,229,2)
(41,99,2)
(239,97,2)
(206,159,2)
(192,159,2)
(172,69,2)
(54,159,2)
(18,69,2)
(62,97,2)
(176,99,2)
(69,21,2)
(91,181,2)
(43,236,2)
(36,69,2)
(168,69,2)
(188,33,2)
(86,159,2)
(123,41,2)
(201,159,2)
(224,159,2)
(178,110,2)
(139,110,2)
(84,159,2)
(124,69,2)
(194,69,2)
(102,123,2)
(190,139,2)
(134,139,2)
(118,69,2)
(117,69,2)
(183,155,2)
(3,99,2)
(246,159,2)
(17,6,2)
(8,155,2)
(42,54,2)
(171,97,2)
(37,33,2)
(131,21,2)
(74,159,2)
(77,21,2)
(33,97,2)
(180,159,2)
(250,21,2)
(16,159,2)
(250,69,2)
(17,49,2)
(167,159,2)
(45,69,2)
(70,69,2)
(169,110,2)
(104,159,2)
(217,159,2)
(86,229,2)
(160,69,2)
(8,69,2)
(115,110,2)
(126,142,2)
(32,135,2)
(193,69,2)
(189,33,2)
(91,45,2)
(78,10,2)
(229,139,2)
(111,99,2)
(212,110,2)
(148,155,2)
(155,69,2)
(219,159,2)
(95,155,2)
(73,69,2)
(240,69,2)
(2,139,2)
(194,21,2)
(26,69,2)
(166,222,2)
(204,155,2)
(154,110,2)
(126,67,2)
(131,69,2)
(128,69,2)
(100,84,2)
(58,159,2)
(243,159,2)
(151,159,2)
(252,159,2)
(81,159,2)
(228,139,2)
(64,159,2)
(187,159,2)
(176,229,2)
(234,159,2)
(150,159,2)
(0,159,2)
(8,97,2)
(120,139,2)
(221,159,2)
(135,229,2)
(153,69,2)
(200,97,2)
(132,159,2)
(17,18,2)
(174,104,2)
(69,33,2)
(169,111,2)
(174,159,2)
(105,166,2)
(61,69,2)
(17,181,2)
(234,32,2)
(35,139,2)
(138,69,2)
(109,97,2)
(17,197,2)
(211,238,2)
(116,33,2)
(6,69,2)
(83,159,2)
(129,110,2)
(91,34,2)
(30,97,2)
(56,139,2)
(182,69,2)
(65,97,2)
(140,110,2)
(52,69,2)
(162,159,2)
(170,91,2)
(34,229,2)
(8,33,2)
(10,159,2)
(212,105,2)
(170,143,2)
(231,159,2)
(67,107,2)
(139,114,2)
(68,159,2)
(141,69,2)
(17,86,2)
(39,229,2)
(161,69,2)
(210,159,2)
(58,39,2)
(120,69,2)
(190,213,2)
(103,159,2)
(85,97,2)
(33,214,2)
(235,159,2)
(232,97,2)
(31,69,2)
(104,101,2)
(107,123,2)
(145,110,2)
(32,159,2)
(191,159,2)
(155,118,2)
(91,49,2)
(120,33,2)
(209,155,2)
(79,139,2)
(60,97,2)
(89,97,2)
(222,110,2)
(84,25,2)
(165,69,2)
(143,110,2)
(25,159,2)
(17,194,2)
(59,159,2)
(7,69,2)
(179,159,2)
(96,97,2)
(214,97,2)
(153,7,2)
(226,98,2)
(55,97,2)
(120,159,2)
(17,33,2)
(213,139,2)
(26,141,2)
(214,200,2)
(19,69,2)
(130,139,2)
(44,155,2)
(17,139,2)
(107,159,2)
(20,78,2)
(7,99,2)
(91,194,2)
(51,110,2)
(114,212,2)
(250,153,2)
(156,69,2)
(21,33,2)
(114,110,2)
(199,110,2)
(43,139,2)
(181,159,2)
(159,229,2)
(214,30,2)
(225,69,2)
(17,34,2)
(29,69,2)
(141,193,2)
(91,197,2)
(248,110,2)
-----------------------------------
(0,data->reassembly = NULL)
(1,release_firmware(firmware)
(2,GFP_KERNEL)
(3,intf->cur_altsetting)
(4,)
(5,)
(6,hdev->flush)
(7,intf->dev)
(8,-EIO)
(9,&intf->cur_altsetting->endpoint[1])
(10,bulk_out_ep->desc)
(11,bulk_out_ep)
(12,bfusb_open)
(13,bEndpointAddress)
(14,if (!hdev)
(15,hdev->flush = bfusb_flush)
(16,goto done;)
(17,return -EIO;)
(18,hdev->bus)
(19,hdev->close = bfusb_close)
(20,data->bulk_out_ep   = bulk_out_ep->desc.bEndpointAddress)
(21,hdev = hci_alloc_dev()
(22,le16_to_cpu(bulk_out_ep->desc.wMaxPacketSize)
(23,bNumEndpoints)
(24,intf)
(25,bulk_in_ep->desc)
(26,set_bit(HCI_QUIRK_BROKEN_LOCAL_COMMANDS, &hdev->quirks)
(27,hdev)
(28,"Firmware request failed")
(29,data->hdev)
(30,firmware->data)
(31,HCI_USB)
(32,&data->transmit_q)
(33,bfusb_load_firmware(data, firmware->data, firmware->size)
(34,data->reassembly)
(35,dev)
(36,hdev->bus = HCI_USB)
(37,release_firmware(firmware)
(38,hdev->open  = bfusb_open)
(39,data->pending_q)
(40,data)
(41,interface_to_usbdev(intf)
(42,bulk_out_ep->desc.wMaxPacketSize)
(43,devm_kzalloc(&intf->dev, sizeof(struct bfusb_data)
(44,BT_ERR("Can\'t register HCI device")
(45,hdev->send)
(46,endpoint)
(47,skb_queue_head_init(&data->pending_q)
(48,id)
(49,data->bulk_pkt_size)
(50,bulk_out_ep)
(51,cur_altsetting)
(52,hdev)
(53,data)
(54,bulk_out_ep->desc)
(55,"firmware data %p size %zu")
(56,data)
(57,data)
(58,&data->pending_q)
(59,desc)
(60,data)
(61,hdev)
(62,firmware->data)
(63,bfusb_send_frame)
(64,reassembly)
(65,firmware)
(66,udev)
(67,&udev->dev)
(68,bulk_out_ep)
(69,!hdev)
(70,hdev)
(71,goto done;)
(72,intf)
(73,BT_ERR("Can\'t allocate HCI device")
(74,bEndpointAddress)
(75,if (!bulk_out_ep || !bulk_in_ep)
(76,EIO)
(77,hci_free_dev(hdev)
(78,bulk_out_ep->desc.bEndpointAddress)
(79,BT_ERR("Bulk endpoints not found")
(80,data)
(81,data->bulk_pkt_size = le16_to_cpu(bulk_out_ep->desc.wMaxPacketSize)
(82,BT_ERR("Firmware request failed")
(83,data)
(84,bulk_in_ep->desc.bEndpointAddress)
(85,data)
(86,data->bulk_in_ep)
(87,transmit_q)
(88,if (!data)
(89,goto done;)
(90,if (request_firmware(&firmware, "bfubase.frm", &udev->dev)
(91,return 0;)
(92,firmware->size)
(93,bulk_in_ep)
(94,endpoint)
(95,intf)
(96,0)
(97,request_firmware(&firmware, "bfubase.frm", &udev->dev)
(98,intf->cur_altsetting->desc)
(99,struct usb_interface *intf)
(100,data->bulk_in_ep    = bulk_in_ep->desc.bEndpointAddress)
(101,data->completed_q)
(102,data->udev = udev)
(103,bulk_out_ep)
(104,&data->completed_q)
(105,&intf->cur_altsetting->endpoint[0])
(106,bus)
(107,udev->dev)
(108,data)
(109,firmware)
(110,intf->cur_altsetting->desc.bNumEndpoints < 2)
(111,intf->cur_altsetting)
(112,bfusb_close)
(113,bulk_in_ep)
(114,!bulk_out_ep)
(115,intf)
(116,hdev)
(117,hci_set_drvdata(hdev, data)
(118,hci_register_dev(hdev)
(119,size)
(120,EIO)
(121,)
(122,if (bfusb_load_firmware(data, firmware->data, firmware->size)
(123,*udev = interface_to_usbdev(intf)
(124,hdev->send  = bfusb_send_frame)
(125,intf)
(126,request_firmware(&firmware, "bfubase.frm", &udev->dev)
(127,completed_q)
(128,hdev->open)
(129,intf)
(130,intf)
(131,data->hdev = hdev)
(132,bulk_pkt_size)
(133,release:)
(134,goto done;)
(135,data->transmit_q)
(136,firmware)
(137,firmware)
(138,data)
(139,!bulk_out_ep || !bulk_in_ep)
(140,intf->cur_altsetting)
(141,&hdev->quirks)
(142,&firmware)
(143,return -EIO;)
(144,bulk_in_ep)
(145,1)
(146,if (hci_register_dev(hdev)
(147,done:)
(148,0)
(149,struct bfusb_data)
(150,data)
(151,lock)
(152,!bulk_in_ep)
(153,&intf->dev)
(154,bulk_in_ep  = &intf->cur_altsetting->endpoint[1])
(155,hci_register_dev(hdev)
(156,open)
(157,hdev)
(158,0)
(159,!data)
(160,bfusb_flush)
(161,close)
(162,firmware)
(163,bulk_in_ep)
(164,goto release;)
(165,hdev)
(166,intf->cur_altsetting->endpoint[0])
(167,data)
(168,hdev)
(169,intf->cur_altsetting->endpoint)
(170,RET)
(171,size)
(172,send)
(173,"intf %p id %p")
(174,skb_queue_head_init(&data->completed_q)
(175,)
(176,usb_set_intfdata(intf, data)
(177,"Firmware loading failed")
(178,cur_altsetting)
(179,bulk_out_ep)
(180,data->lock)
(181,data->udev)
(182,hdev)
(183,data)
(184,)
(185,wMaxPacketSize)
(186,if (intf->cur_altsetting->desc.bNumEndpoints < 2)
(187,rwlock_init(&data->lock)
(188,BT_ERR("Firmware loading failed")
(189,hci_alloc_dev()
(190,&intf->dev)
(191,dev)
(192,&data->lock)
(193,hdev->quirks)
(194,hdev->close)
(195,0)
(196,)
(197,data->bulk_out_ep)
(198,"Bulk endpoints not found")
(199,-EIO)
(200,firmware->size)
(201,data)
(202,flush)
(203,intf)
(204,"Can\'t register HCI device")
(205,goto done;)
(206,udev)
(207,HCI_QUIRK_BROKEN_LOCAL_COMMANDS)
(208,bulk_out_ep)
(209,hdev)
(210,pending_q)
(211,BT_DBG("intf %p id %p", intf, id)
(212,bulk_out_ep = &intf->cur_altsetting->endpoint[0])
(213,intf->dev)
(214,bfusb_load_firmware(data, firmware->data, firmware->size)
(215,cur_altsetting)
(216,hdev)
(217,data)
(218,udev)
(219,BT_ERR("Can\'t allocate memory for control structure")
(220,data)
(221,"bfubase.frm")
(222,intf->cur_altsetting->endpoint)
(223,2)
(224,NULL)
(225,hdev)
(226,intf->cur_altsetting->desc.bNumEndpoints)
(227,desc)
(228,data)
(229,data = devm_kzalloc(&intf->dev, sizeof(struct bfusb_data)
(230,udev)
(231,bulk_in_ep)
(232,firmware)
(233,quirks)
(234,skb_queue_head_init(&data->transmit_q)
(235,desc)
(236,sizeof(struct bfusb_data)
(237,)
(238,const struct usb_device_id *id)
(239,BT_DBG("firmware data %p size %zu", firmware->data, firmware->size)
(240,"Can\'t allocate HCI device")
(241,hdev)
(242,firmware)
(243,desc)
(244,firmware)
(245,hdev)
(246,"Can\'t allocate memory for control structure")
(247,dev)
(248,intf->cur_altsetting->endpoint[1])
(249,hdev)
(250,SET_HCIDEV_DEV(hdev, &intf->dev)
(251,0)
(252,udev)
(253,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^