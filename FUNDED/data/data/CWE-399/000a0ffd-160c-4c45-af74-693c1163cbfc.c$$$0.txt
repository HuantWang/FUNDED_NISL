-----label-----
1
-----code-----
size_t fw_iso_buffer_lookup(struct fw_iso_buffer *buffer, dma_addr_t completed)
{
	size_t i;
	dma_addr_t address;
	ssize_t offset;

	for (i = 0; i < buffer->page_count; i++) {
		address = page_private(buffer->pages[i]);
		offset = (ssize_t)completed - (ssize_t)address;
		if (offset > 0 && offset <= PAGE_SIZE)
			return (i << PAGE_SHIFT) + offset;
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
17,18
17,19
17,20
17,21
17,22
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
30,31
31,32
31,33
32,33
34,35
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
42,43
42,44
43,44
45,46
45,47
46,47
49,50
50,51
52,53
52,54
52,55
53,54
54,55
54,56
55,56
57,58
57,59
58,59
60,61
60,62
61,62
61,63
62,63
65,66
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
73,75
74,75
77,78
79,80
79,81
80,81
80,82
81,82
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
100,101
100,102
101,102
103,104
105,106
107,108
-----nextToken-----
3,5,8,10,11,14,16,21,23,27,29,33,35,40,41,44,47,48,51,56,59,63,64,66,70,75,76,78,82,83,85,90,91,94,96,102,104,106,108
-----computeFrom-----
38,39
38,40
42,43
42,44
54,55
54,56
68,69
68,70
71,72
71,73
87,88
87,89
88,89
88,90
92,93
92,94
98,99
98,100
100,101
100,102
-----guardedBy-----
94,106
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
size_t fw_iso_buffer_lookup(struct fw_iso_buffer *buffer, dma_addr_t completed){	size_t i;	dma_addr_t address;	ssize_t offset;	for (i = 0; i < buffer->page_count; i++) {		address = page_private(buffer->pages[i]);		offset = (ssize_t)completed - (ssize_t)address;		if (offset > 0 && offset <= PAGE_SIZE)			return (i << PAGE_SHIFT) + offset;	}	return 0;}
size_t
size_t
fw_iso_buffer_lookup(struct fw_iso_buffer *buffer, dma_addr_t completed)
fw_iso_buffer_lookup
struct fw_iso_buffer *buffer
struct fw_iso_buffer
fw_iso_buffer
*buffer
*
buffer
dma_addr_t completed
dma_addr_t
dma_addr_t
completed
completed
{	size_t i;	dma_addr_t address;	ssize_t offset;	for (i = 0; i < buffer->page_count; i++) {		address = page_private(buffer->pages[i]);		offset = (ssize_t)completed - (ssize_t)address;		if (offset > 0 && offset <= PAGE_SIZE)			return (i << PAGE_SHIFT) + offset;	}	return 0;}
size_t i;
size_t i;
size_t
size_t
i
i
dma_addr_t address;
dma_addr_t address;
dma_addr_t
dma_addr_t
address
address
ssize_t offset;
ssize_t offset;
ssize_t
ssize_t
offset
offset
for (i = 0; i < buffer->page_count; i++) {		address = page_private(buffer->pages[i]);		offset = (ssize_t)completed - (ssize_t)address;		if (offset > 0 && offset <= PAGE_SIZE)			return (i << PAGE_SHIFT) + offset;	}
i = 0;
i = 0
i
i
0
i < buffer->page_count
i
i
buffer->page_count
buffer
buffer
page_count
i++
i
i
{		address = page_private(buffer->pages[i]);		offset = (ssize_t)completed - (ssize_t)address;		if (offset > 0 && offset <= PAGE_SIZE)			return (i << PAGE_SHIFT) + offset;	}
address = page_private(buffer->pages[i]);
address = page_private(buffer->pages[i])
address
address
page_private(buffer->pages[i])
page_private
page_private
buffer->pages[i]
buffer->pages
buffer
buffer
pages
i
i
offset = (ssize_t)completed - (ssize_t)address;
offset = (ssize_t)completed - (ssize_t)address
offset
offset
(ssize_t)completed - (ssize_t)address
(ssize_t)completed
ssize_t
ssize_t
ssize_t

completed
completed
(ssize_t)address
ssize_t
ssize_t
ssize_t

address
address
if (offset > 0 && offset <= PAGE_SIZE)			return (i << PAGE_SHIFT) + offset;
offset > 0 && offset <= PAGE_SIZE
offset > 0
offset
offset
0
offset <= PAGE_SIZE
offset
offset
PAGE_SIZE
PAGE_SIZE
return (i << PAGE_SHIFT) + offset;
(i << PAGE_SHIFT) + offset
(i << PAGE_SHIFT)
i << PAGE_SHIFT
i
i
PAGE_SHIFT
PAGE_SHIFT
offset
offset
return 0;
0
-----joern-----
(6,18,0)
(13,39,0)
(0,43,0)
(30,3,0)
(40,36,0)
(33,1,0)
(19,46,0)
(31,18,0)
(40,17,0)
(13,30,0)
(51,33,0)
(29,15,0)
(49,34,0)
(7,32,0)
(25,13,0)
(50,40,0)
(19,32,0)
(10,39,0)
(3,30,0)
(23,43,0)
(43,0,0)
(44,2,0)
(2,15,0)
(36,40,0)
(40,13,0)
(33,32,0)
(41,3,0)
(8,38,0)
(16,11,0)
(32,33,0)
(5,0,0)
(48,33,0)
(9,46,0)
(37,36,0)
(3,46,0)
(44,13,0)
(2,44,0)
(21,0,0)
(34,18,0)
(30,13,0)
(49,17,0)
(47,15,0)
(0,1,0)
(22,34,0)
(15,13,0)
(24,18,0)
(27,3,0)
(36,11,0)
(30,38,0)
(4,44,0)
(46,19,0)
(46,39,0)
(38,30,0)
(3,27,0)
(32,19,0)
(42,36,0)
(32,11,0)
(38,35,0)
(12,18,0)
(43,11,0)
(20,28,0)
(14,44,0)
(28,11,0)
(15,2,0)
(38,45,0)
(45,38,0)
(26,11,0)
(33,51,1)
(32,33,1)
(47,13,1)
(48,9,1)
(36,37,1)
(32,7,1)
(22,43,1)
(23,28,1)
(13,30,1)
(2,15,1)
(3,41,1)
(28,20,1)
(8,25,1)
(3,27,1)
(38,8,1)
(14,15,1)
(38,35,1)
(15,13,1)
(30,38,1)
(19,32,1)
(30,3,1)
(16,26,1)
(25,46,1)
(40,36,1)
(15,29,1)
(41,38,1)
(49,34,1)
(0,1,1)
(9,43,1)
(2,44,1)
(40,50,1)
(36,11,1)
(11,16,1)
(51,48,1)
(46,19,1)
(42,2,1)
(34,22,1)
(50,36,1)
(32,11,1)
(4,14,1)
(21,23,1)
(49,17,1)
(29,47,1)
(23,11,1)
(17,40,1)
(44,4,1)
(7,33,1)
(43,0,1)
(33,1,1)
(44,13,1)
(38,45,1)
(20,2,1)
(0,5,1)
(43,11,1)
(37,42,1)
(3,46,1)
(5,21,1)
(40,13,1)
(28,11,1)
(30,3,2)
(13,43,2)
(2,44,2)
(15,43,2)
(9,43,2)
(38,43,2)
(21,2,2)
(3,43,2)
(3,27,2)
(43,0,2)
(2,43,2)
(30,38,2)
(40,2,2)
(13,30,2)
(4,15,2)
(5,2,2)
(51,43,2)
(32,43,2)
(25,43,2)
(44,15,2)
(38,45,2)
(48,43,2)
(46,19,2)
(33,1,2)
(42,2,2)
(20,2,2)
(28,2,2)
(37,2,2)
(36,2,2)
(49,34,2)
(14,15,2)
(30,43,2)
(40,13,2)
(15,13,2)
(2,15,2)
(32,33,2)
(3,46,2)
(7,43,2)
(32,11,2)
(47,43,2)
(43,11,2)
(33,43,2)
(38,35,2)
(22,43,2)
(50,2,2)
(34,43,2)
(44,13,2)
(46,43,2)
(17,2,2)
(8,43,2)
(29,43,2)
(40,36,2)
(41,43,2)
(49,17,2)
(36,11,2)
(0,1,2)
(0,2,2)
(43,2,2)
(19,32,2)
(23,2,2)
(28,11,2)
(19,43,2)
-----------------------------------
(0,buffer->page_count)
(1,struct fw_iso_buffer *buffer)
(2,offset > 0 && offset <= PAGE_SIZE)
(3,(ssize_t)
(4,PAGE_SIZE)
(5,page_count)
(6,for (i = 0; i < buffer->page_count; i++)
(7,i)
(8,completed)
(9,address)
(10,if (offset > 0 && offset <= PAGE_SIZE)
(11,i = 0)
(12,i)
(13,offset = (ssize_t)
(14,offset)
(15,offset > 0)
(16,0)
(17,return (i << PAGE_SHIFT)
(18,)
(19,page_private(buffer->pages[i])
(20,i)
(21,buffer)
(22,0)
(23,i)
(24,offset)
(25,offset)
(26,i)
(27,ssize_t)
(28,i++)
(29,0)
(30,(ssize_t)
(31,address)
(32,buffer->pages[i])
(33,buffer->pages)
(34,return 0;)
(35,dma_addr_t completed)
(36,i << PAGE_SHIFT)
(37,PAGE_SHIFT)
(38,(ssize_t)
(39,)
(40,(i << PAGE_SHIFT)
(41,address)
(42,i)
(43,i < buffer->page_count)
(44,offset <= PAGE_SIZE)
(45,ssize_t)
(46,address = page_private(buffer->pages[i])
(47,offset)
(48,buffer)
(49,RET)
(50,offset)
(51,pages)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^