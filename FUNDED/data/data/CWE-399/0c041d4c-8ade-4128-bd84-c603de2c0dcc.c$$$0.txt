-----label-----
1
-----code-----
static struct iommu_group *get_pci_alias_group(struct pci_dev *pdev,
					       unsigned long *devfns)
{
	struct pci_dev *tmp = NULL;
	struct iommu_group *group;

	if (test_and_set_bit(pdev->devfn & 0xff, devfns))
		return NULL;

	group = iommu_group_get(&pdev->dev);
	if (group)
		return group;

	for_each_pci_dev(tmp) {
		if (tmp == pdev || tmp->bus != pdev->bus)
			continue;

		/* We alias them or they alias us */
		if (((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&
		     pdev->dma_alias_devfn == tmp->devfn) ||
		    ((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&
		     tmp->dma_alias_devfn == pdev->devfn)) {

			group = get_pci_alias_group(tmp, devfns);
			if (group) {
				pci_dev_put(tmp);
				return group;
			}

			group = get_pci_function_alias_group(tmp, devfns);
			if (group) {
				pci_dev_put(tmp);
				return group;
			}
		}
	}

	return NULL;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
19,20
20,21
20,22
21,22
23,24
23,25
23,26
26,27
27,28
29,30
30,31
30,32
31,32
33,34
33,35
36,37
36,38
37,38
37,39
37,40
38,39
40,41
40,42
41,42
41,43
42,43
46,47
48,49
49,50
51,52
52,53
52,54
53,54
55,56
55,57
56,57
58,59
59,60
59,61
60,61
63,64
63,65
64,65
66,67
67,68
69,70
70,71
70,72
71,72
73,74
75,76
76,77
76,78
77,78
77,79
78,79
78,80
79,80
79,81
80,81
82,83
84,85
84,86
85,86
85,87
86,87
89,90
89,91
90,91
94,95
94,96
95,96
95,97
96,97
97,98
97,99
98,99
99,100
99,101
100,101
100,102
101,102
104,105
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
115,116
116,117
116,118
117,118
118,119
118,120
119,120
119,121
120,121
123,124
125,126
125,127
126,127
126,128
127,128
130,131
130,132
131,132
134,135
134,136
134,137
134,138
135,136
136,137
136,138
137,138
139,140
139,141
139,142
140,141
142,143
144,145
146,147
146,148
147,148
149,150
149,151
150,151
151,152
151,153
152,153
154,155
156,157
157,158
159,160
160,161
160,162
161,162
163,164
163,165
163,166
164,165
166,167
168,169
170,171
170,172
171,172
173,174
173,175
174,175
175,176
175,177
176,177
178,179
180,181
181,182
183,184
184,185
-----nextToken-----
3,5,6,9,11,12,14,16,17,22,24,25,28,32,34,35,39,43,44,45,47,50,54,57,61,62,65,68,72,74,81,83,87,88,91,92,93,102,103,105,109,110,113,114,121,122,124,128,129,132,133,138,141,143,145,148,153,155,158,162,165,167,169,172,177,179,182,185
-----computeFrom-----
40,41
40,42
52,53
52,54
78,79
78,80
79,80
79,81
84,85
84,86
95,96
95,97
97,98
97,99
99,100
99,101
106,107
106,108
116,117
116,118
118,119
118,120
125,126
125,127
136,137
136,138
160,161
160,162
-----guardedBy-----
128,179
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ContinueStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct iommu_group *get_pci_alias_group(struct pci_dev *pdev,					       unsigned long *devfns){	struct pci_dev *tmp = NULL;	struct iommu_group *group;	if (test_and_set_bit(pdev->devfn & 0xff, devfns))		return NULL;	group = iommu_group_get(&pdev->dev);	if (group)		return group;	for_each_pci_dev(tmp) {		if (tmp == pdev || tmp->bus != pdev->bus)			continue;		/* We alias them or they alias us */		if (((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     pdev->dma_alias_devfn == tmp->devfn) ||		    ((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     tmp->dma_alias_devfn == pdev->devfn)) {			group = get_pci_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}			group = get_pci_function_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}		}	}	return NULL;}
static struct iommu_group
iommu_group
*get_pci_alias_group(struct pci_dev *pdev,					       unsigned long *devfns)
*
get_pci_alias_group
struct pci_dev *pdev
struct pci_dev
pci_dev
*pdev
*
pdev
unsigned long *devfns
unsigned long
*devfns
*
devfns
{	struct pci_dev *tmp = NULL;	struct iommu_group *group;	if (test_and_set_bit(pdev->devfn & 0xff, devfns))		return NULL;	group = iommu_group_get(&pdev->dev);	if (group)		return group;	for_each_pci_dev(tmp) {		if (tmp == pdev || tmp->bus != pdev->bus)			continue;		/* We alias them or they alias us */		if (((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     pdev->dma_alias_devfn == tmp->devfn) ||		    ((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     tmp->dma_alias_devfn == pdev->devfn)) {			group = get_pci_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}			group = get_pci_function_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}		}	}	return NULL;}
struct pci_dev *tmp = NULL;
struct pci_dev *tmp = NULL;
struct pci_dev
pci_dev
*tmp = NULL
*
tmp
= NULL
NULL
NULL
struct iommu_group *group;
struct iommu_group *group;
struct iommu_group
iommu_group
*group
*
group
if (test_and_set_bit(pdev->devfn & 0xff, devfns))		return NULL;
test_and_set_bit(pdev->devfn & 0xff, devfns)
test_and_set_bit
test_and_set_bit
pdev->devfn & 0xff
pdev->devfn
pdev
pdev
devfn
0xff
devfns
devfns
return NULL;
NULL
NULL
group = iommu_group_get(&pdev->dev);
group = iommu_group_get(&pdev->dev)
group
group
iommu_group_get(&pdev->dev)
iommu_group_get
iommu_group_get
&pdev->dev
pdev->dev
pdev
pdev
dev
if (group)		return group;
group
group
return group;
group
group
for_each_pci_dev(tmp)
for_each_pci_dev(tmp)
for_each_pci_dev
for_each_pci_dev
tmp
tmp
)
{		if (tmp == pdev || tmp->bus != pdev->bus)			continue;		/* We alias them or they alias us */		if (((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     pdev->dma_alias_devfn == tmp->devfn) ||		    ((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     tmp->dma_alias_devfn == pdev->devfn)) {			group = get_pci_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}			group = get_pci_function_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}		}	}
if (tmp == pdev || tmp->bus != pdev->bus)			continue;
tmp == pdev || tmp->bus != pdev->bus
tmp == pdev
tmp
tmp
pdev
pdev
tmp->bus != pdev->bus
tmp->bus
tmp
tmp
bus
pdev->bus
pdev
pdev
bus
continue;
if (((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     pdev->dma_alias_devfn == tmp->devfn) ||		    ((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     tmp->dma_alias_devfn == pdev->devfn)) {			group = get_pci_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}			group = get_pci_function_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}		}
((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     pdev->dma_alias_devfn == tmp->devfn) ||		    ((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     tmp->dma_alias_devfn == pdev->devfn)
((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     pdev->dma_alias_devfn == tmp->devfn)
(pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     pdev->dma_alias_devfn == tmp->devfn
(pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN
pdev->dev_flags
pdev
pdev
dev_flags
PCI_DEV_FLAGS_DMA_ALIAS_DEVFN
PCI_DEV_FLAGS_DMA_ALIAS_DEVFN
pdev->dma_alias_devfn == tmp->devfn
pdev->dma_alias_devfn
pdev
pdev
dma_alias_devfn
tmp->devfn
tmp
tmp
devfn
((tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     tmp->dma_alias_devfn == pdev->devfn)
(tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN) &&		     tmp->dma_alias_devfn == pdev->devfn
(tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN
tmp->dev_flags
tmp
tmp
dev_flags
PCI_DEV_FLAGS_DMA_ALIAS_DEVFN
PCI_DEV_FLAGS_DMA_ALIAS_DEVFN
tmp->dma_alias_devfn == pdev->devfn
tmp->dma_alias_devfn
tmp
tmp
dma_alias_devfn
pdev->devfn
pdev
pdev
devfn
{			group = get_pci_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}			group = get_pci_function_alias_group(tmp, devfns);			if (group) {				pci_dev_put(tmp);				return group;			}		}
group = get_pci_alias_group(tmp, devfns);
group = get_pci_alias_group(tmp, devfns)
group
group
get_pci_alias_group(tmp, devfns)
get_pci_alias_group
get_pci_alias_group
tmp
tmp
devfns
devfns
if (group) {				pci_dev_put(tmp);				return group;			}
group
group
{				pci_dev_put(tmp);				return group;			}
pci_dev_put(tmp);
pci_dev_put(tmp)
pci_dev_put
pci_dev_put
tmp
tmp
return group;
group
group
group = get_pci_function_alias_group(tmp, devfns);
group = get_pci_function_alias_group(tmp, devfns)
group
group
get_pci_function_alias_group(tmp, devfns)
get_pci_function_alias_group
get_pci_function_alias_group
tmp
tmp
devfns
devfns
if (group) {				pci_dev_put(tmp);				return group;			}
group
group
{				pci_dev_put(tmp);				return group;			}
pci_dev_put(tmp);
pci_dev_put(tmp)
pci_dev_put
pci_dev_put
tmp
tmp
return group;
group
group
return NULL;
NULL
NULL
-----joern-----
(64,78,0)
(75,74,0)
(23,0,0)
(2,67,0)
(20,52,0)
(42,2,0)
(60,79,0)
(33,2,0)
(89,32,0)
(76,57,0)
(72,13,0)
(9,8,0)
(36,27,0)
(43,98,0)
(71,80,0)
(43,93,0)
(81,74,0)
(5,12,0)
(67,62,0)
(47,31,0)
(49,15,0)
(79,57,0)
(34,98,0)
(25,20,0)
(58,62,0)
(82,49,0)
(11,1,0)
(24,12,0)
(19,52,0)
(1,27,0)
(57,62,0)
(93,43,0)
(12,24,0)
(27,1,0)
(93,37,0)
(83,65,0)
(96,11,0)
(96,39,0)
(13,32,0)
(43,77,0)
(65,62,0)
(32,13,0)
(27,67,0)
(68,52,0)
(37,67,0)
(22,32,0)
(44,19,0)
(92,7,0)
(46,20,0)
(12,67,0)
(50,12,0)
(40,37,0)
(87,71,0)
(48,68,0)
(37,93,0)
(49,24,0)
(56,47,0)
(97,19,0)
(69,13,0)
(78,0,0)
(96,76,0)
(82,52,0)
(88,15,0)
(15,67,0)
(79,60,0)
(77,43,0)
(26,37,0)
(80,77,0)
(91,15,0)
(96,65,0)
(61,76,0)
(38,11,0)
(16,62,0)
(77,80,0)
(10,70,0)
(3,8,0)
(45,82,0)
(3,67,0)
(49,82,0)
(1,74,0)
(0,78,0)
(19,93,0)
(70,62,0)
(6,82,0)
(73,9,0)
(84,39,0)
(98,7,0)
(57,79,0)
(23,67,0)
(35,62,0)
(66,67,0)
(78,52,0)
(9,90,0)
(55,3,0)
(90,2,0)
(30,68,0)
(60,20,0)
(32,52,0)
(47,67,0)
(20,60,0)
(71,68,0)
(53,23,0)
(28,70,0)
(68,71,0)
(0,23,0)
(14,23,0)
(41,62,0)
(72,21,0)
(80,71,0)
(0,80,0)
(29,57,0)
(59,7,0)
(24,49,0)
(4,72,0)
(86,1,0)
(7,98,0)
(98,43,0)
(7,67,0)
(13,72,0)
(15,49,0)
(27,21,0)
(18,67,0)
(90,74,0)
(2,90,0)
(93,19,0)
(63,27,0)
(11,31,0)
(51,90,0)
(12,52,0)
(96,9,0)
(17,78,0)
(2,21,0)
(80,0,0)
(9,90,1)
(32,52,1)
(42,51,1)
(32,22,1)
(64,17,1)
(43,98,1)
(57,79,1)
(96,76,1)
(38,47,1)
(97,44,1)
(24,12,1)
(23,14,1)
(48,30,1)
(3,67,1)
(37,67,1)
(7,67,1)
(26,98,1)
(71,87,1)
(60,20,1)
(87,68,1)
(69,32,1)
(15,91,1)
(19,97,1)
(36,86,1)
(20,46,1)
(66,18,1)
(4,13,1)
(34,7,1)
(72,21,1)
(12,52,1)
(61,95,1)
(73,3,1)
(45,6,1)
(7,59,1)
(13,32,1)
(98,7,1)
(84,72,1)
(67,66,1)
(12,67,1)
(76,61,1)
(44,37,1)
(63,36,1)
(3,55,1)
(0,23,1)
(47,67,1)
(24,49,1)
(2,67,1)
(6,15,1)
(9,73,1)
(23,67,1)
(12,5,1)
(76,57,1)
(25,29,1)
(78,64,1)
(65,83,1)
(83,77,1)
(82,52,1)
(22,89,1)
(27,63,1)
(68,48,1)
(13,69,1)
(15,67,1)
(47,56,1)
(2,21,1)
(11,38,1)
(96,65,1)
(98,34,1)
(92,80,1)
(14,53,1)
(33,42,1)
(46,25,1)
(56,85,1)
(82,45,1)
(77,80,1)
(79,60,1)
(19,52,1)
(5,50,1)
(95,57,1)
(40,26,1)
(90,2,1)
(83,85,1)
(88,12,1)
(72,4,1)
(77,43,1)
(11,1,1)
(80,0,1)
(50,95,1)
(17,71,1)
(89,67,1)
(27,21,1)
(96,39,1)
(1,27,1)
(39,84,1)
(93,37,1)
(2,33,1)
(91,88,1)
(54,24,1)
(51,77,1)
(43,93,1)
(49,82,1)
(96,11,1)
(80,71,1)
(72,13,1)
(94,90,1)
(68,52,1)
(30,24,1)
(20,52,1)
(49,15,1)
(78,52,1)
(96,9,1)
(29,72,1)
(37,40,1)
(27,67,1)
(93,19,1)
(86,94,1)
(30,54,1)
(71,68,1)
(0,78,1)
(53,78,1)
(85,1,1)
(55,94,1)
(59,92,1)
(76,57,2)
(71,95,2)
(1,94,2)
(11,85,2)
(83,77,2)
(37,67,2)
(96,11,2)
(0,23,2)
(78,52,2)
(53,71,2)
(83,85,2)
(96,65,2)
(49,12,2)
(85,94,2)
(82,52,2)
(12,67,2)
(95,72,2)
(59,80,2)
(24,95,2)
(0,78,2)
(96,76,2)
(51,77,2)
(47,85,2)
(6,12,2)
(82,12,2)
(64,71,2)
(15,67,2)
(24,12,2)
(49,15,2)
(32,52,2)
(93,98,2)
(61,95,2)
(94,77,2)
(55,94,2)
(48,95,2)
(49,82,2)
(11,1,2)
(2,21,2)
(65,77,2)
(77,80,2)
(79,60,2)
(25,72,2)
(60,72,2)
(47,67,2)
(12,52,2)
(36,94,2)
(23,67,2)
(72,13,2)
(30,95,2)
(96,9,2)
(93,37,2)
(92,80,2)
(57,72,2)
(2,77,2)
(84,72,2)
(0,71,2)
(42,77,2)
(80,0,2)
(27,21,2)
(71,68,2)
(12,95,2)
(50,95,2)
(24,49,2)
(77,95,2)
(91,12,2)
(9,94,2)
(15,12,2)
(38,85,2)
(33,77,2)
(78,71,2)
(7,67,2)
(96,39,2)
(86,94,2)
(97,98,2)
(39,72,2)
(68,52,2)
(79,72,2)
(43,80,2)
(87,95,2)
(80,95,2)
(43,93,2)
(65,85,2)
(34,80,2)
(17,71,2)
(76,95,2)
(93,19,2)
(19,98,2)
(90,77,2)
(98,7,2)
(68,95,2)
(63,94,2)
(5,95,2)
(72,21,2)
(26,98,2)
(3,94,2)
(46,72,2)
(27,67,2)
(29,72,2)
(88,12,2)
(3,67,2)
(98,80,2)
(14,71,2)
(23,71,2)
(60,20,2)
(2,67,2)
(77,43,2)
(19,52,2)
(54,24,2)
(80,71,2)
(44,98,2)
(40,98,2)
(45,12,2)
(57,79,2)
(7,80,2)
(37,98,2)
(56,85,2)
(90,2,2)
(27,94,2)
(73,94,2)
(9,90,2)
(20,72,2)
(13,32,2)
(1,27,2)
(43,98,2)
(20,52,2)
-----------------------------------
(0,pdev->dma_alias_devfn == tmp->devfn)
(1,group = get_pci_function_alias_group(tmp, devfns)
(2,get_pci_alias_group(tmp, devfns)
(3,pci_dev_put(tmp)
(4,devfns)
(5,pdev)
(6,pdev)
(7,tmp->dev_flags)
(8,)
(9,return group;)
(10,if (((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
(11,return group;)
(12,tmp == pdev)
(13,pdev->devfn & 0xff)
(14,devfn)
(15,tmp->bus)
(16,if (group)
(17,pdev)
(18,tmp)
(19,pdev->devfn)
(20,pdev->dev)
(21,unsigned long *devfns)
(22,devfn)
(23,tmp->devfn)
(24,tmp == pdev || tmp->bus != pdev->bus)
(25,pdev)
(26,tmp)
(27,get_pci_function_alias_group(tmp, devfns)
(28,if (tmp == pdev || tmp->bus != pdev->bus)
(29,group)
(30,pdev)
(31,)
(32,pdev->devfn)
(33,devfns)
(34,PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
(35,tmp)
(36,tmp)
(37,tmp->dma_alias_devfn)
(38,group)
(39,return NULL;)
(40,dma_alias_devfn)
(41,if (test_and_set_bit(pdev->devfn & 0xff, devfns)
(42,tmp)
(43,(tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
(44,pdev)
(45,bus)
(46,dev)
(47,pci_dev_put(tmp)
(48,dev_flags)
(49,tmp->bus != pdev->bus)
(50,tmp)
(51,group)
(52,struct pci_dev *pdev)
(53,tmp)
(54,continue;)
(55,tmp)
(56,tmp)
(57,group = iommu_group_get(&pdev->dev)
(58,group)
(59,dev_flags)
(60,&pdev->dev)
(61,group)
(62,)
(63,devfns)
(64,dma_alias_devfn)
(65,return NULL;)
(66,NULL)
(67,*tmp = NULL)
(68,pdev->dev_flags)
(69,0xff)
(70,)
(71,pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
(72,test_and_set_bit(pdev->devfn & 0xff, devfns)
(73,group)
(74,)
(75,if (group)
(76,return group;)
(77,((pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
(78,pdev->dma_alias_devfn)
(79,iommu_group_get(&pdev->dev)
(80,(pdev->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
(81,if (group)
(82,pdev->bus)
(83,NULL)
(84,NULL)
(85,group)
(86,group)
(87,PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
(88,tmp)
(89,pdev)
(90,group = get_pci_alias_group(tmp, devfns)
(91,bus)
(92,tmp)
(93,tmp->dma_alias_devfn == pdev->devfn)
(94,group)
(95,group)
(96,RET)
(97,devfn)
(98,tmp->dev_flags & PCI_DEV_FLAGS_DMA_ALIAS_DEVFN)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^