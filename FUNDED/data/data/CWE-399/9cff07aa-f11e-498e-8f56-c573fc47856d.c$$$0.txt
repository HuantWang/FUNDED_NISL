-----label-----
0
-----code-----
void arc_cache_init(void)
{
	unsigned int __maybe_unused cpu = smp_processor_id();
	char str[256];

	printk(arc_cache_mumbojumbo(0, str, sizeof(str)));

	if (IS_ENABLED(CONFIG_ARC_HAS_ICACHE)) {
		struct cpuinfo_arc_cache *ic = &cpuinfo_arc700[cpu].icache;

		if (!ic->ver)
			panic("cache support enabled but non-existent cache\n");

		if (ic->line_len != L1_CACHE_BYTES)
			panic("ICache line [%d] != kernel Config [%d]",
			      ic->line_len, L1_CACHE_BYTES);

		if (ic->ver != CONFIG_ARC_MMU_VER)
			panic("Cache ver [%d] doesn't match MMU ver [%d]\n",
			      ic->ver, CONFIG_ARC_MMU_VER);

		/*
		 * In MMU v4 (HS38x) the aliasing icache config uses IVIL/PTAG
		 * pair to provide vaddr/paddr respectively, just as in MMU v3
		 */
		if (is_isa_arcv2() && ic->alias)
			_cache_line_loop_ic_fn = __cache_line_loop_v3;
		else
			_cache_line_loop_ic_fn = __cache_line_loop;
	}

	if (IS_ENABLED(CONFIG_ARC_HAS_DCACHE)) {
		struct cpuinfo_arc_cache *dc = &cpuinfo_arc700[cpu].dcache;

		if (!dc->ver)
			panic("cache support enabled but non-existent cache\n");

		if (dc->line_len != L1_CACHE_BYTES)
			panic("DCache line [%d] != kernel Config [%d]",
			      dc->line_len, L1_CACHE_BYTES);

		/* check for D-Cache aliasing on ARCompact: ARCv2 has PIPT */
		if (is_isa_arcompact()) {
			int handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING);

			if (dc->alias && !handled)
				panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n");
			else if (!dc->alias && handled)
				panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");
		}
	}

	if (is_isa_arcv2() && l2_line_sz && !slc_enable) {

		/* IM set : flush before invalidate */
		write_aux_reg(ARC_REG_SLC_CTRL,
			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_IM);

		write_aux_reg(ARC_REG_SLC_INVALIDATE, 1);

		/* Important to wait for flush to complete */
		while (read_aux_reg(ARC_REG_SLC_CTRL) & SLC_CTRL_BUSY);
		write_aux_reg(ARC_REG_SLC_CTRL,
			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_DISABLE);
	}

	if (is_isa_arcv2() && ioc_exists) {
		/* IO coherency base - 0x8z */
		write_aux_reg(ARC_REG_IO_COH_AP0_BASE, 0x80000);
		/* IO coherency aperture size - 512Mb: 0x8z-0xAz */
		write_aux_reg(ARC_REG_IO_COH_AP0_SIZE, 0x11);
		/* Enable partial writes */
		write_aux_reg(ARC_REG_IO_COH_PARTIAL, 1);
		/* Enable IO coherency */
		write_aux_reg(ARC_REG_IO_COH_ENABLE, 1);

		__dma_cache_wback_inv = __dma_cache_wback_inv_ioc;
		__dma_cache_inv = __dma_cache_inv_ioc;
		__dma_cache_wback = __dma_cache_wback_ioc;
	} else if (is_isa_arcv2() && l2_line_sz && slc_enable) {
		__dma_cache_wback_inv = __dma_cache_wback_inv_slc;
		__dma_cache_inv = __dma_cache_inv_slc;
		__dma_cache_wback = __dma_cache_wback_slc;
	} else {
		__dma_cache_wback_inv = __dma_cache_wback_inv_l1;
		__dma_cache_inv = __dma_cache_inv_l1;
		__dma_cache_wback = __dma_cache_wback_l1;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
10,11
11,12
11,13
13,14
15,16
16,17
17,18
17,19
18,19
20,21
21,22
23,24
24,25
24,26
26,27
26,28
28,29
30,31
31,32
31,33
32,33
34,35
34,36
34,37
34,38
35,36
38,39
40,41
41,42
42,43
44,45
44,46
45,46
45,47
46,47
48,49
49,50
51,52
51,53
51,54
51,55
51,56
52,53
53,54
53,55
54,55
56,57
56,58
56,59
59,60
60,61
61,62
61,63
62,63
62,64
63,64
65,66
68,69
68,70
69,70
70,71
70,72
71,72
74,75
75,76
75,77
76,77
79,80
79,81
80,81
80,82
81,82
81,83
82,83
85,86
87,88
88,89
88,90
88,91
88,92
89,90
92,93
92,94
93,94
96,97
98,99
98,100
99,100
99,101
100,101
100,102
101,102
104,105
106,107
107,108
107,109
107,110
107,111
108,109
111,112
111,113
112,113
115,116
117,118
117,119
117,120
118,119
118,120
119,120
120,121
122,123
122,124
123,124
126,127
127,128
127,129
128,129
130,131
132,133
133,134
133,135
134,135
136,137
138,139
138,140
139,140
139,141
140,141
142,143
143,144
145,146
145,147
145,148
145,149
146,147
147,148
147,149
148,149
150,151
150,152
150,153
153,154
154,155
155,156
155,157
156,157
156,158
157,158
159,160
162,163
162,164
163,164
164,165
164,166
165,166
168,169
169,170
169,171
170,171
173,174
173,175
174,175
174,176
175,176
175,177
176,177
179,180
181,182
182,183
182,184
182,185
182,186
183,184
186,187
186,188
187,188
190,191
192,193
192,194
193,194
194,195
196,197
196,198
197,198
198,199
198,200
200,201
200,202
202,203
203,204
203,205
204,205
206,207
208,209
208,210
208,211
209,210
209,211
210,211
210,212
211,212
214,215
215,216
217,218
218,219
218,220
219,220
222,223
222,224
223,224
223,225
224,225
225,226
225,227
226,227
229,230
231,232
232,233
232,234
233,234
236,237
236,238
237,238
237,239
238,239
238,240
239,240
240,241
242,243
244,245
245,246
247,248
247,249
247,250
247,251
248,249
249,250
249,251
249,252
250,251
252,253
254,255
254,256
255,256
255,257
256,257
258,259
260,261
262,263
263,264
263,265
263,266
264,265
266,267
269,270
269,271
270,271
270,272
271,272
271,273
272,273
274,275
276,277
279,280
280,281
280,282
280,283
281,282
283,284
285,286
285,287
286,287
286,288
287,288
289,290
291,292
293,294
293,295
293,296
294,295
294,296
295,296
296,297
298,299
300,301
300,302
300,303
300,304
300,305
300,306
300,307
301,302
302,303
302,304
302,305
303,304
305,306
308,309
309,310
309,311
309,312
310,311
312,313
315,316
316,317
316,318
316,319
317,318
319,320
322,323
323,324
323,325
323,326
324,325
326,327
329,330
330,331
330,332
331,332
333,334
335,336
336,337
336,338
337,338
339,340
341,342
342,343
342,344
343,344
345,346
347,348
347,349
347,350
348,349
348,350
349,350
349,351
350,351
351,352
353,354
355,356
357,358
357,359
357,360
358,359
359,360
359,361
360,361
362,363
364,365
365,366
365,367
366,367
368,369
370,371
371,372
371,373
372,373
374,375
376,377
376,378
376,379
377,378
378,379
378,380
379,380
381,382
383,384
384,385
384,386
385,386
387,388
389,390
390,391
390,392
391,392
393,394
-----nextToken-----
2,4,6,8,12,14,19,22,25,27,29,33,36,37,39,43,47,50,55,57,58,64,66,67,72,73,77,78,83,84,86,90,91,94,95,97,102,103,105,109,110,113,114,116,121,124,125,129,131,135,137,141,144,149,151,152,158,160,161,166,167,171,172,177,178,180,184,185,188,189,191,195,199,201,205,207,212,213,216,220,221,227,228,230,234,235,241,243,246,251,253,257,259,261,265,267,268,273,275,277,278,282,284,288,290,292,297,299,304,306,307,311,313,314,318,320,321,325,327,328,332,334,338,340,344,346,352,354,356,361,363,367,369,373,375,380,382,386,388,392,394
-----computeFrom-----
17,18
17,19
80,81
80,82
99,100
99,101
118,119
118,120
127,128
127,129
133,134
133,135
174,175
174,176
209,210
209,211
223,224
223,225
237,238
237,239
238,239
238,240
254,255
254,256
270,271
270,272
285,286
285,287
294,295
294,296
330,331
330,332
336,337
336,338
342,343
342,344
348,349
348,350
349,350
349,351
359,360
359,361
365,366
365,367
371,372
371,373
378,379
378,380
384,385
384,386
390,391
390,392
-----guardedBy-----
84,95
86,97
83,94
103,114
105,116
102,113
178,189
180,191
177,188
-----guardedByNegation-----
216,230
213,228
212,227
297,352
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;WhileStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;NullStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void arc_cache_init(void){	unsigned int __maybe_unused cpu = smp_processor_id();	char str[256];	printk(arc_cache_mumbojumbo(0, str, sizeof(str)));	if (IS_ENABLED(CONFIG_ARC_HAS_ICACHE)) {		struct cpuinfo_arc_cache *ic = &cpuinfo_arc700[cpu].icache;		if (!ic->ver)			panic("cache support enabled but non-existent cache\n");		if (ic->line_len != L1_CACHE_BYTES)			panic("ICache line [%d] != kernel Config [%d]",			      ic->line_len, L1_CACHE_BYTES);		if (ic->ver != CONFIG_ARC_MMU_VER)			panic("Cache ver [%d] doesn't match MMU ver [%d]\n",			      ic->ver, CONFIG_ARC_MMU_VER);		/*		 * In MMU v4 (HS38x) the aliasing icache config uses IVIL/PTAG		 * pair to provide vaddr/paddr respectively, just as in MMU v3		 */		if (is_isa_arcv2() && ic->alias)			_cache_line_loop_ic_fn = __cache_line_loop_v3;		else			_cache_line_loop_ic_fn = __cache_line_loop;	}	if (IS_ENABLED(CONFIG_ARC_HAS_DCACHE)) {		struct cpuinfo_arc_cache *dc = &cpuinfo_arc700[cpu].dcache;		if (!dc->ver)			panic("cache support enabled but non-existent cache\n");		if (dc->line_len != L1_CACHE_BYTES)			panic("DCache line [%d] != kernel Config [%d]",			      dc->line_len, L1_CACHE_BYTES);		/* check for D-Cache aliasing on ARCompact: ARCv2 has PIPT */		if (is_isa_arcompact()) {			int handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING);			if (dc->alias && !handled)				panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n");			else if (!dc->alias && handled)				panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");		}	}	if (is_isa_arcv2() && l2_line_sz && !slc_enable) {		/* IM set : flush before invalidate */		write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_IM);		write_aux_reg(ARC_REG_SLC_INVALIDATE, 1);		/* Important to wait for flush to complete */		while (read_aux_reg(ARC_REG_SLC_CTRL) & SLC_CTRL_BUSY);		write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_DISABLE);	}	if (is_isa_arcv2() && ioc_exists) {		/* IO coherency base - 0x8z */		write_aux_reg(ARC_REG_IO_COH_AP0_BASE, 0x80000);		/* IO coherency aperture size - 512Mb: 0x8z-0xAz */		write_aux_reg(ARC_REG_IO_COH_AP0_SIZE, 0x11);		/* Enable partial writes */		write_aux_reg(ARC_REG_IO_COH_PARTIAL, 1);		/* Enable IO coherency */		write_aux_reg(ARC_REG_IO_COH_ENABLE, 1);		__dma_cache_wback_inv = __dma_cache_wback_inv_ioc;		__dma_cache_inv = __dma_cache_inv_ioc;		__dma_cache_wback = __dma_cache_wback_ioc;	} else if (is_isa_arcv2() && l2_line_sz && slc_enable) {		__dma_cache_wback_inv = __dma_cache_wback_inv_slc;		__dma_cache_inv = __dma_cache_inv_slc;		__dma_cache_wback = __dma_cache_wback_slc;	} else {		__dma_cache_wback_inv = __dma_cache_wback_inv_l1;		__dma_cache_inv = __dma_cache_inv_l1;		__dma_cache_wback = __dma_cache_wback_l1;	}}
void
arc_cache_init(void)
arc_cache_init
void
void


{	unsigned int __maybe_unused cpu = smp_processor_id();	char str[256];	printk(arc_cache_mumbojumbo(0, str, sizeof(str)));	if (IS_ENABLED(CONFIG_ARC_HAS_ICACHE)) {		struct cpuinfo_arc_cache *ic = &cpuinfo_arc700[cpu].icache;		if (!ic->ver)			panic("cache support enabled but non-existent cache\n");		if (ic->line_len != L1_CACHE_BYTES)			panic("ICache line [%d] != kernel Config [%d]",			      ic->line_len, L1_CACHE_BYTES);		if (ic->ver != CONFIG_ARC_MMU_VER)			panic("Cache ver [%d] doesn't match MMU ver [%d]\n",			      ic->ver, CONFIG_ARC_MMU_VER);		/*		 * In MMU v4 (HS38x) the aliasing icache config uses IVIL/PTAG		 * pair to provide vaddr/paddr respectively, just as in MMU v3		 */		if (is_isa_arcv2() && ic->alias)			_cache_line_loop_ic_fn = __cache_line_loop_v3;		else			_cache_line_loop_ic_fn = __cache_line_loop;	}	if (IS_ENABLED(CONFIG_ARC_HAS_DCACHE)) {		struct cpuinfo_arc_cache *dc = &cpuinfo_arc700[cpu].dcache;		if (!dc->ver)			panic("cache support enabled but non-existent cache\n");		if (dc->line_len != L1_CACHE_BYTES)			panic("DCache line [%d] != kernel Config [%d]",			      dc->line_len, L1_CACHE_BYTES);		/* check for D-Cache aliasing on ARCompact: ARCv2 has PIPT */		if (is_isa_arcompact()) {			int handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING);			if (dc->alias && !handled)				panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n");			else if (!dc->alias && handled)				panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");		}	}	if (is_isa_arcv2() && l2_line_sz && !slc_enable) {		/* IM set : flush before invalidate */		write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_IM);		write_aux_reg(ARC_REG_SLC_INVALIDATE, 1);		/* Important to wait for flush to complete */		while (read_aux_reg(ARC_REG_SLC_CTRL) & SLC_CTRL_BUSY);		write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_DISABLE);	}	if (is_isa_arcv2() && ioc_exists) {		/* IO coherency base - 0x8z */		write_aux_reg(ARC_REG_IO_COH_AP0_BASE, 0x80000);		/* IO coherency aperture size - 512Mb: 0x8z-0xAz */		write_aux_reg(ARC_REG_IO_COH_AP0_SIZE, 0x11);		/* Enable partial writes */		write_aux_reg(ARC_REG_IO_COH_PARTIAL, 1);		/* Enable IO coherency */		write_aux_reg(ARC_REG_IO_COH_ENABLE, 1);		__dma_cache_wback_inv = __dma_cache_wback_inv_ioc;		__dma_cache_inv = __dma_cache_inv_ioc;		__dma_cache_wback = __dma_cache_wback_ioc;	} else if (is_isa_arcv2() && l2_line_sz && slc_enable) {		__dma_cache_wback_inv = __dma_cache_wback_inv_slc;		__dma_cache_inv = __dma_cache_inv_slc;		__dma_cache_wback = __dma_cache_wback_slc;	} else {		__dma_cache_wback_inv = __dma_cache_wback_inv_l1;		__dma_cache_inv = __dma_cache_inv_l1;		__dma_cache_wback = __dma_cache_wback_l1;	}}
unsigned int __maybe_unused
unsigned int __maybe_unused
unsigned int
__maybe_unused
__maybe_unused
d
cpu = smp_processor_id();
cpu = smp_processor_id()
cpu
cpu
smp_processor_id()
smp_processor_id
smp_processor_id
char str[256];
char str[256];
char
str[256]
str
[256]
256
printk(arc_cache_mumbojumbo(0, str, sizeof(str)));
printk(arc_cache_mumbojumbo(0, str, sizeof(str)))
printk
printk
arc_cache_mumbojumbo(0, str, sizeof(str))
arc_cache_mumbojumbo
arc_cache_mumbojumbo
0
str
str
sizeof(str)
(str)
str
str
if (IS_ENABLED(CONFIG_ARC_HAS_ICACHE)) {		struct cpuinfo_arc_cache *ic = &cpuinfo_arc700[cpu].icache;		if (!ic->ver)			panic("cache support enabled but non-existent cache\n");		if (ic->line_len != L1_CACHE_BYTES)			panic("ICache line [%d] != kernel Config [%d]",			      ic->line_len, L1_CACHE_BYTES);		if (ic->ver != CONFIG_ARC_MMU_VER)			panic("Cache ver [%d] doesn't match MMU ver [%d]\n",			      ic->ver, CONFIG_ARC_MMU_VER);		/*		 * In MMU v4 (HS38x) the aliasing icache config uses IVIL/PTAG		 * pair to provide vaddr/paddr respectively, just as in MMU v3		 */		if (is_isa_arcv2() && ic->alias)			_cache_line_loop_ic_fn = __cache_line_loop_v3;		else			_cache_line_loop_ic_fn = __cache_line_loop;	}
IS_ENABLED(CONFIG_ARC_HAS_ICACHE)
IS_ENABLED
IS_ENABLED
(CONFIG_ARC_HAS_ICACHE)
CONFIG_ARC_HAS_ICACHE
CONFIG_ARC_HAS_ICACHE
{		struct cpuinfo_arc_cache *ic = &cpuinfo_arc700[cpu].icache;		if (!ic->ver)			panic("cache support enabled but non-existent cache\n");		if (ic->line_len != L1_CACHE_BYTES)			panic("ICache line [%d] != kernel Config [%d]",			      ic->line_len, L1_CACHE_BYTES);		if (ic->ver != CONFIG_ARC_MMU_VER)			panic("Cache ver [%d] doesn't match MMU ver [%d]\n",			      ic->ver, CONFIG_ARC_MMU_VER);		/*		 * In MMU v4 (HS38x) the aliasing icache config uses IVIL/PTAG		 * pair to provide vaddr/paddr respectively, just as in MMU v3		 */		if (is_isa_arcv2() && ic->alias)			_cache_line_loop_ic_fn = __cache_line_loop_v3;		else			_cache_line_loop_ic_fn = __cache_line_loop;	}
struct cpuinfo_arc_cache *ic = &cpuinfo_arc700[cpu].icache;
struct cpuinfo_arc_cache *ic = &cpuinfo_arc700[cpu].icache;
struct cpuinfo_arc_cache
cpuinfo_arc_cache
*ic = &cpuinfo_arc700[cpu].icache
*
ic
= &cpuinfo_arc700[cpu].icache
&cpuinfo_arc700[cpu].icache
cpuinfo_arc700[cpu].icache
cpuinfo_arc700[cpu]
cpuinfo_arc700
cpuinfo_arc700
cpu
cpu
icache
if (!ic->ver)			panic("cache support enabled but non-existent cache\n");
!ic->ver
ic->ver
ic
ic
ver
panic("cache support enabled but non-existent cache\n");
panic("cache support enabled but non-existent cache\n")
panic
panic
"cache support enabled but non-existent cache\n"
if (ic->line_len != L1_CACHE_BYTES)			panic("ICache line [%d] != kernel Config [%d]",			      ic->line_len, L1_CACHE_BYTES);
ic->line_len != L1_CACHE_BYTES
ic->line_len
ic
ic
line_len
L1_CACHE_BYTES
L1_CACHE_BYTES
panic("ICache line [%d] != kernel Config [%d]",			      ic->line_len, L1_CACHE_BYTES);
panic("ICache line [%d] != kernel Config [%d]",			      ic->line_len, L1_CACHE_BYTES)
panic
panic
"ICache line [%d] != kernel Config [%d]"
ic->line_len
ic
ic
line_len
L1_CACHE_BYTES
L1_CACHE_BYTES
if (ic->ver != CONFIG_ARC_MMU_VER)			panic("Cache ver [%d] doesn't match MMU ver [%d]\n",			      ic->ver, CONFIG_ARC_MMU_VER);
ic->ver != CONFIG_ARC_MMU_VER
ic->ver
ic
ic
ver
CONFIG_ARC_MMU_VER
CONFIG_ARC_MMU_VER
panic("Cache ver [%d] doesn't match MMU ver [%d]\n",			      ic->ver, CONFIG_ARC_MMU_VER);
panic("Cache ver [%d] doesn't match MMU ver [%d]\n",			      ic->ver, CONFIG_ARC_MMU_VER)
panic
panic
"Cache ver [%d] doesn't match MMU ver [%d]\n"
ic->ver
ic
ic
ver
CONFIG_ARC_MMU_VER
CONFIG_ARC_MMU_VER
if (is_isa_arcv2() && ic->alias)			_cache_line_loop_ic_fn = __cache_line_loop_v3;		else			_cache_line_loop_ic_fn = __cache_line_loop;
is_isa_arcv2() && ic->alias
is_isa_arcv2()
is_isa_arcv2
is_isa_arcv2
ic->alias
ic
ic
alias
_cache_line_loop_ic_fn = __cache_line_loop_v3;
_cache_line_loop_ic_fn = __cache_line_loop_v3
_cache_line_loop_ic_fn
_cache_line_loop_ic_fn
__cache_line_loop_v3
__cache_line_loop_v3
_cache_line_loop_ic_fn = __cache_line_loop;
_cache_line_loop_ic_fn = __cache_line_loop
_cache_line_loop_ic_fn
_cache_line_loop_ic_fn
__cache_line_loop
__cache_line_loop
if (IS_ENABLED(CONFIG_ARC_HAS_DCACHE)) {		struct cpuinfo_arc_cache *dc = &cpuinfo_arc700[cpu].dcache;		if (!dc->ver)			panic("cache support enabled but non-existent cache\n");		if (dc->line_len != L1_CACHE_BYTES)			panic("DCache line [%d] != kernel Config [%d]",			      dc->line_len, L1_CACHE_BYTES);		/* check for D-Cache aliasing on ARCompact: ARCv2 has PIPT */		if (is_isa_arcompact()) {			int handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING);			if (dc->alias && !handled)				panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n");			else if (!dc->alias && handled)				panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");		}	}
IS_ENABLED(CONFIG_ARC_HAS_DCACHE)
IS_ENABLED
IS_ENABLED
(CONFIG_ARC_HAS_DCACHE)
CONFIG_ARC_HAS_DCACHE
CONFIG_ARC_HAS_DCACHE
{		struct cpuinfo_arc_cache *dc = &cpuinfo_arc700[cpu].dcache;		if (!dc->ver)			panic("cache support enabled but non-existent cache\n");		if (dc->line_len != L1_CACHE_BYTES)			panic("DCache line [%d] != kernel Config [%d]",			      dc->line_len, L1_CACHE_BYTES);		/* check for D-Cache aliasing on ARCompact: ARCv2 has PIPT */		if (is_isa_arcompact()) {			int handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING);			if (dc->alias && !handled)				panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n");			else if (!dc->alias && handled)				panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");		}	}
struct cpuinfo_arc_cache *dc = &cpuinfo_arc700[cpu].dcache;
struct cpuinfo_arc_cache *dc = &cpuinfo_arc700[cpu].dcache;
struct cpuinfo_arc_cache
cpuinfo_arc_cache
*dc = &cpuinfo_arc700[cpu].dcache
*
dc
= &cpuinfo_arc700[cpu].dcache
&cpuinfo_arc700[cpu].dcache
cpuinfo_arc700[cpu].dcache
cpuinfo_arc700[cpu]
cpuinfo_arc700
cpuinfo_arc700
cpu
cpu
dcache
if (!dc->ver)			panic("cache support enabled but non-existent cache\n");
!dc->ver
dc->ver
dc
dc
ver
panic("cache support enabled but non-existent cache\n");
panic("cache support enabled but non-existent cache\n")
panic
panic
"cache support enabled but non-existent cache\n"
if (dc->line_len != L1_CACHE_BYTES)			panic("DCache line [%d] != kernel Config [%d]",			      dc->line_len, L1_CACHE_BYTES);
dc->line_len != L1_CACHE_BYTES
dc->line_len
dc
dc
line_len
L1_CACHE_BYTES
L1_CACHE_BYTES
panic("DCache line [%d] != kernel Config [%d]",			      dc->line_len, L1_CACHE_BYTES);
panic("DCache line [%d] != kernel Config [%d]",			      dc->line_len, L1_CACHE_BYTES)
panic
panic
"DCache line [%d] != kernel Config [%d]"
dc->line_len
dc
dc
line_len
L1_CACHE_BYTES
L1_CACHE_BYTES
if (is_isa_arcompact()) {			int handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING);			if (dc->alias && !handled)				panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n");			else if (!dc->alias && handled)				panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");		}
is_isa_arcompact()
is_isa_arcompact
is_isa_arcompact
{			int handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING);			if (dc->alias && !handled)				panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n");			else if (!dc->alias && handled)				panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");		}
int handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING);
int handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING);
int
handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING)
handled
= IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING)
IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING)
IS_ENABLED
IS_ENABLED
CONFIG_ARC_CACHE_VIPT_ALIASING
CONFIG_ARC_CACHE_VIPT_ALIASING
if (dc->alias && !handled)				panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n");			else if (!dc->alias && handled)				panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");
dc->alias && !handled
dc->alias
dc
dc
alias
!handled
handled
handled
panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n");
panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n")
panic
panic
"Enable CONFIG_ARC_CACHE_VIPT_ALIASING\n"
if (!dc->alias && handled)				panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");
!dc->alias && handled
!dc->alias
dc->alias
dc
dc
alias
handled
handled
panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n");
panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n")
panic
panic
"Disable CONFIG_ARC_CACHE_VIPT_ALIASING\n"
if (is_isa_arcv2() && l2_line_sz && !slc_enable) {		/* IM set : flush before invalidate */		write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_IM);		write_aux_reg(ARC_REG_SLC_INVALIDATE, 1);		/* Important to wait for flush to complete */		while (read_aux_reg(ARC_REG_SLC_CTRL) & SLC_CTRL_BUSY);		write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_DISABLE);	}
is_isa_arcv2() && l2_line_sz && !slc_enable
is_isa_arcv2() && l2_line_sz
is_isa_arcv2()
is_isa_arcv2
is_isa_arcv2
l2_line_sz
l2_line_sz
!slc_enable
slc_enable
slc_enable
{		/* IM set : flush before invalidate */		write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_IM);		write_aux_reg(ARC_REG_SLC_INVALIDATE, 1);		/* Important to wait for flush to complete */		while (read_aux_reg(ARC_REG_SLC_CTRL) & SLC_CTRL_BUSY);		write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_DISABLE);	}
write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_IM);
write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_IM)
write_aux_reg
write_aux_reg
ARC_REG_SLC_CTRL
ARC_REG_SLC_CTRL
read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_IM
read_aux_reg(ARC_REG_SLC_CTRL)
read_aux_reg
read_aux_reg
ARC_REG_SLC_CTRL
ARC_REG_SLC_CTRL
SLC_CTRL_IM
SLC_CTRL_IM
write_aux_reg(ARC_REG_SLC_INVALIDATE, 1);
write_aux_reg(ARC_REG_SLC_INVALIDATE, 1)
write_aux_reg
write_aux_reg
ARC_REG_SLC_INVALIDATE
ARC_REG_SLC_INVALIDATE
1
while (read_aux_reg(ARC_REG_SLC_CTRL) & SLC_CTRL_BUSY);
read_aux_reg(ARC_REG_SLC_CTRL) & SLC_CTRL_BUSY
read_aux_reg(ARC_REG_SLC_CTRL)
read_aux_reg
read_aux_reg
ARC_REG_SLC_CTRL
ARC_REG_SLC_CTRL
SLC_CTRL_BUSY
SLC_CTRL_BUSY
;
write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_DISABLE);
write_aux_reg(ARC_REG_SLC_CTRL,			read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_DISABLE)
write_aux_reg
write_aux_reg
ARC_REG_SLC_CTRL
ARC_REG_SLC_CTRL
read_aux_reg(ARC_REG_SLC_CTRL) | SLC_CTRL_DISABLE
read_aux_reg(ARC_REG_SLC_CTRL)
read_aux_reg
read_aux_reg
ARC_REG_SLC_CTRL
ARC_REG_SLC_CTRL
SLC_CTRL_DISABLE
SLC_CTRL_DISABLE
if (is_isa_arcv2() && ioc_exists) {		/* IO coherency base - 0x8z */		write_aux_reg(ARC_REG_IO_COH_AP0_BASE, 0x80000);		/* IO coherency aperture size - 512Mb: 0x8z-0xAz */		write_aux_reg(ARC_REG_IO_COH_AP0_SIZE, 0x11);		/* Enable partial writes */		write_aux_reg(ARC_REG_IO_COH_PARTIAL, 1);		/* Enable IO coherency */		write_aux_reg(ARC_REG_IO_COH_ENABLE, 1);		__dma_cache_wback_inv = __dma_cache_wback_inv_ioc;		__dma_cache_inv = __dma_cache_inv_ioc;		__dma_cache_wback = __dma_cache_wback_ioc;	} else if (is_isa_arcv2() && l2_line_sz && slc_enable) {		__dma_cache_wback_inv = __dma_cache_wback_inv_slc;		__dma_cache_inv = __dma_cache_inv_slc;		__dma_cache_wback = __dma_cache_wback_slc;	} else {		__dma_cache_wback_inv = __dma_cache_wback_inv_l1;		__dma_cache_inv = __dma_cache_inv_l1;		__dma_cache_wback = __dma_cache_wback_l1;	}
is_isa_arcv2() && ioc_exists
is_isa_arcv2()
is_isa_arcv2
is_isa_arcv2
ioc_exists
ioc_exists
{		/* IO coherency base - 0x8z */		write_aux_reg(ARC_REG_IO_COH_AP0_BASE, 0x80000);		/* IO coherency aperture size - 512Mb: 0x8z-0xAz */		write_aux_reg(ARC_REG_IO_COH_AP0_SIZE, 0x11);		/* Enable partial writes */		write_aux_reg(ARC_REG_IO_COH_PARTIAL, 1);		/* Enable IO coherency */		write_aux_reg(ARC_REG_IO_COH_ENABLE, 1);		__dma_cache_wback_inv = __dma_cache_wback_inv_ioc;		__dma_cache_inv = __dma_cache_inv_ioc;		__dma_cache_wback = __dma_cache_wback_ioc;	}
write_aux_reg(ARC_REG_IO_COH_AP0_BASE, 0x80000);
write_aux_reg(ARC_REG_IO_COH_AP0_BASE, 0x80000)
write_aux_reg
write_aux_reg
ARC_REG_IO_COH_AP0_BASE
ARC_REG_IO_COH_AP0_BASE
0x80000
write_aux_reg(ARC_REG_IO_COH_AP0_SIZE, 0x11);
write_aux_reg(ARC_REG_IO_COH_AP0_SIZE, 0x11)
write_aux_reg
write_aux_reg
ARC_REG_IO_COH_AP0_SIZE
ARC_REG_IO_COH_AP0_SIZE
0x11
write_aux_reg(ARC_REG_IO_COH_PARTIAL, 1);
write_aux_reg(ARC_REG_IO_COH_PARTIAL, 1)
write_aux_reg
write_aux_reg
ARC_REG_IO_COH_PARTIAL
ARC_REG_IO_COH_PARTIAL
1
write_aux_reg(ARC_REG_IO_COH_ENABLE, 1);
write_aux_reg(ARC_REG_IO_COH_ENABLE, 1)
write_aux_reg
write_aux_reg
ARC_REG_IO_COH_ENABLE
ARC_REG_IO_COH_ENABLE
1
__dma_cache_wback_inv = __dma_cache_wback_inv_ioc;
__dma_cache_wback_inv = __dma_cache_wback_inv_ioc
__dma_cache_wback_inv
__dma_cache_wback_inv
__dma_cache_wback_inv_ioc
__dma_cache_wback_inv_ioc
__dma_cache_inv = __dma_cache_inv_ioc;
__dma_cache_inv = __dma_cache_inv_ioc
__dma_cache_inv
__dma_cache_inv
__dma_cache_inv_ioc
__dma_cache_inv_ioc
__dma_cache_wback = __dma_cache_wback_ioc;
__dma_cache_wback = __dma_cache_wback_ioc
__dma_cache_wback
__dma_cache_wback
__dma_cache_wback_ioc
__dma_cache_wback_ioc
if (is_isa_arcv2() && l2_line_sz && slc_enable) {		__dma_cache_wback_inv = __dma_cache_wback_inv_slc;		__dma_cache_inv = __dma_cache_inv_slc;		__dma_cache_wback = __dma_cache_wback_slc;	} else {		__dma_cache_wback_inv = __dma_cache_wback_inv_l1;		__dma_cache_inv = __dma_cache_inv_l1;		__dma_cache_wback = __dma_cache_wback_l1;	}
is_isa_arcv2() && l2_line_sz && slc_enable
is_isa_arcv2() && l2_line_sz
is_isa_arcv2()
is_isa_arcv2
is_isa_arcv2
l2_line_sz
l2_line_sz
slc_enable
slc_enable
{		__dma_cache_wback_inv = __dma_cache_wback_inv_slc;		__dma_cache_inv = __dma_cache_inv_slc;		__dma_cache_wback = __dma_cache_wback_slc;	}
__dma_cache_wback_inv = __dma_cache_wback_inv_slc;
__dma_cache_wback_inv = __dma_cache_wback_inv_slc
__dma_cache_wback_inv
__dma_cache_wback_inv
__dma_cache_wback_inv_slc
__dma_cache_wback_inv_slc
__dma_cache_inv = __dma_cache_inv_slc;
__dma_cache_inv = __dma_cache_inv_slc
__dma_cache_inv
__dma_cache_inv
__dma_cache_inv_slc
__dma_cache_inv_slc
__dma_cache_wback = __dma_cache_wback_slc;
__dma_cache_wback = __dma_cache_wback_slc
__dma_cache_wback
__dma_cache_wback
__dma_cache_wback_slc
__dma_cache_wback_slc
{		__dma_cache_wback_inv = __dma_cache_wback_inv_l1;		__dma_cache_inv = __dma_cache_inv_l1;		__dma_cache_wback = __dma_cache_wback_l1;	}
__dma_cache_wback_inv = __dma_cache_wback_inv_l1;
__dma_cache_wback_inv = __dma_cache_wback_inv_l1
__dma_cache_wback_inv
__dma_cache_wback_inv
__dma_cache_wback_inv_l1
__dma_cache_wback_inv_l1
__dma_cache_inv = __dma_cache_inv_l1;
__dma_cache_inv = __dma_cache_inv_l1
__dma_cache_inv
__dma_cache_inv
__dma_cache_inv_l1
__dma_cache_inv_l1
__dma_cache_wback = __dma_cache_wback_l1;
__dma_cache_wback = __dma_cache_wback_l1
__dma_cache_wback
__dma_cache_wback
__dma_cache_wback_l1
__dma_cache_wback_l1
-----joern-----
(86,184,0)
(126,0,0)
(71,153,0)
(181,49,0)
(124,155,0)
(11,194,0)
(170,32,0)
(14,104,0)
(187,36,0)
(196,0,0)
(88,0,0)
(173,26,0)
(15,52,0)
(84,112,0)
(151,54,0)
(112,84,0)
(154,10,0)
(33,86,0)
(39,86,0)
(41,187,0)
(186,153,0)
(124,66,0)
(152,13,0)
(55,23,0)
(137,8,0)
(23,184,0)
(38,153,0)
(182,184,0)
(102,69,0)
(139,58,0)
(180,175,0)
(16,145,0)
(104,184,0)
(106,108,0)
(66,124,0)
(71,182,0)
(140,132,0)
(115,176,0)
(134,17,0)
(47,139,0)
(171,99,0)
(98,124,0)
(30,104,0)
(40,7,0)
(80,156,0)
(27,132,0)
(165,76,0)
(145,4,0)
(95,73,0)
(156,80,0)
(91,187,0)
(127,141,0)
(25,104,0)
(46,32,0)
(116,28,0)
(108,57,0)
(100,191,0)
(92,91,0)
(6,53,0)
(202,198,0)
(49,69,0)
(187,26,0)
(2,132,0)
(151,36,0)
(85,7,0)
(201,7,0)
(83,41,0)
(29,69,0)
(27,84,0)
(5,86,0)
(46,35,0)
(99,101,0)
(36,151,0)
(198,183,0)
(17,10,0)
(90,13,0)
(64,198,0)
(158,56,0)
(162,49,0)
(13,90,0)
(148,24,0)
(163,187,0)
(19,58,0)
(9,41,0)
(32,170,0)
(76,69,0)
(54,151,0)
(97,192,0)
(36,187,0)
(149,24,0)
(67,156,0)
(53,99,0)
(192,82,0)
(50,7,0)
(8,137,0)
(200,112,0)
(153,71,0)
(93,56,0)
(28,69,0)
(156,187,0)
(109,132,0)
(175,57,0)
(128,160,0)
(20,91,0)
(77,105,0)
(199,132,0)
(172,65,0)
(188,17,0)
(157,155,0)
(146,29,0)
(144,155,0)
(110,45,0)
(164,88,0)
(122,10,0)
(48,23,0)
(82,192,0)
(114,102,0)
(121,26,0)
(3,54,0)
(18,29,0)
(168,101,0)
(75,128,0)
(1,28,0)
(84,27,0)
(145,132,0)
(58,19,0)
(117,138,0)
(147,132,0)
(129,132,0)
(62,102,0)
(0,184,0)
(70,60,0)
(58,139,0)
(169,9,0)
(138,111,0)
(133,191,0)
(21,69,0)
(10,17,0)
(31,69,0)
(176,53,0)
(104,30,0)
(178,54,0)
(96,21,0)
(44,90,0)
(54,145,0)
(120,42,0)
(12,21,0)
(159,170,0)
(78,84,0)
(60,82,0)
(167,189,0)
(191,65,0)
(150,113,0)
(87,23,0)
(86,5,0)
(34,169,0)
(135,175,0)
(43,55,0)
(72,58,0)
(183,198,0)
(118,31,0)
(8,45,0)
(131,55,0)
(160,179,0)
(35,46,0)
(105,91,0)
(37,184,0)
(74,108,0)
(68,66,0)
(184,7,0)
(204,172,0)
(91,105,0)
(53,176,0)
(123,60,0)
(82,60,0)
(189,65,0)
(10,187,0)
(169,124,0)
(63,73,0)
(41,9,0)
(166,172,0)
(174,189,0)
(79,31,0)
(153,145,0)
(111,138,0)
(99,53,0)
(0,88,0)
(161,88,0)
(193,151,0)
(59,45,0)
(130,32,0)
(119,156,0)
(142,5,0)
(195,7,0)
(107,26,0)
(143,136,0)
(179,160,0)
(197,26,0)
(198,184,0)
(9,169,0)
(184,182,0)
(19,101,0)
(32,46,0)
(51,76,0)
(128,184,0)
(60,187,0)
(89,71,0)
(182,71,0)
(81,41,0)
(73,101,0)
(103,94,0)
(4,145,0)
(45,8,0)
(177,128,0)
(160,128,0)
(24,57,0)
(125,84,0)
(203,141,0)
(185,183,0)
(23,55,0)
(192,124,0)
(22,19,0)
(13,152,1)
(71,89,1)
(123,70,1)
(192,124,1)
(135,8,1)
(58,139,1)
(0,196,1)
(176,115,1)
(37,42,1)
(61,105,1)
(54,178,1)
(100,133,1)
(59,110,1)
(171,46,1)
(87,131,1)
(22,90,1)
(158,93,1)
(34,9,1)
(35,113,1)
(74,24,1)
(175,180,1)
(183,185,1)
(128,184,1)
(24,149,1)
(194,11,1)
(39,183,1)
(153,145,1)
(47,22,1)
(170,159,1)
(83,81,1)
(32,130,1)
(200,78,1)
(102,114,1)
(161,0,1)
(159,130,1)
(64,194,1)
(96,102,1)
(138,111,1)
(23,48,1)
(38,186,1)
(190,76,1)
(63,99,1)
(10,122,1)
(125,145,1)
(54,145,1)
(146,31,1)
(94,103,1)
(95,63,1)
(12,96,1)
(196,126,1)
(55,23,1)
(166,204,1)
(169,124,1)
(21,12,1)
(68,98,1)
(43,23,1)
(187,36,1)
(148,175,1)
(39,88,1)
(64,30,1)
(120,27,1)
(25,14,1)
(88,161,1)
(185,198,1)
(55,43,1)
(128,177,1)
(60,187,1)
(77,91,1)
(92,80,1)
(181,21,1)
(142,86,1)
(160,179,1)
(92,52,1)
(115,171,1)
(118,79,1)
(35,136,1)
(119,187,1)
(134,10,1)
(133,172,1)
(156,67,1)
(90,13,1)
(204,8,1)
(151,193,1)
(104,25,1)
(82,192,1)
(52,15,1)
(97,60,1)
(111,46,1)
(0,184,1)
(18,146,1)
(6,176,1)
(160,128,1)
(179,55,1)
(36,151,1)
(61,17,1)
(93,160,1)
(113,150,1)
(4,16,1)
(15,80,1)
(145,4,1)
(8,45,1)
(91,187,1)
(189,174,1)
(66,68,1)
(190,189,1)
(70,124,1)
(32,170,1)
(79,138,1)
(117,111,1)
(35,169,1)
(202,64,1)
(152,73,1)
(198,184,1)
(56,158,1)
(35,94,1)
(58,72,1)
(182,71,1)
(203,127,1)
(177,75,1)
(174,167,1)
(76,51,1)
(88,0,1)
(139,47,1)
(45,110,1)
(169,34,1)
(23,184,1)
(45,59,1)
(29,18,1)
(35,61,1)
(179,5,1)
(78,125,1)
(167,191,1)
(127,160,1)
(11,30,1)
(193,54,1)
(180,135,1)
(41,187,1)
(114,62,1)
(19,58,1)
(110,137,1)
(62,28,1)
(5,142,1)
(86,33,1)
(178,3,1)
(116,29,1)
(153,38,1)
(67,119,1)
(75,179,1)
(105,91,1)
(1,116,1)
(51,165,1)
(143,82,1)
(17,10,1)
(48,87,1)
(124,66,1)
(162,181,1)
(152,90,1)
(5,86,1)
(183,198,1)
(130,35,1)
(126,164,1)
(190,108,1)
(191,100,1)
(46,35,1)
(112,200,1)
(103,141,1)
(89,153,1)
(98,61,1)
(184,182,1)
(3,163,1)
(28,1,1)
(53,6,1)
(122,154,1)
(53,176,1)
(72,139,1)
(71,153,1)
(44,13,1)
(27,84,1)
(99,53,1)
(150,169,1)
(136,143,1)
(81,82,1)
(46,32,1)
(31,118,1)
(33,39,1)
(103,42,1)
(9,41,1)
(80,156,1)
(90,44,1)
(131,5,1)
(138,117,1)
(188,105,1)
(165,49,1)
(104,184,1)
(60,123,1)
(163,94,1)
(82,60,1)
(186,37,1)
(156,187,1)
(10,187,1)
(105,77,1)
(42,120,1)
(41,83,1)
(30,104,1)
(154,188,1)
(103,56,1)
(169,9,1)
(106,74,1)
(108,106,1)
(49,162,1)
(172,166,1)
(84,112,1)
(164,183,1)
(151,54,1)
(149,148,1)
(17,134,1)
(73,95,1)
(141,203,1)
(86,184,1)
(20,92,1)
(91,20,1)
(111,19,1)
(14,184,1)
(137,138,1)
(192,97,1)
(198,202,1)
(8,137,1)
(196,183,2)
(74,8,2)
(30,104,2)
(172,8,2)
(53,176,2)
(86,42,2)
(11,30,2)
(202,42,2)
(15,80,2)
(55,23,2)
(10,105,2)
(58,46,2)
(98,61,2)
(63,46,2)
(142,42,2)
(90,46,2)
(12,138,2)
(36,151,2)
(193,94,2)
(194,30,2)
(180,8,2)
(114,138,2)
(17,105,2)
(161,183,2)
(61,94,2)
(30,42,2)
(80,94,2)
(39,42,2)
(177,179,2)
(91,187,2)
(148,8,2)
(181,138,2)
(88,0,2)
(41,82,2)
(104,42,2)
(174,8,2)
(141,160,2)
(91,94,2)
(73,46,2)
(204,8,2)
(60,61,2)
(81,82,2)
(110,137,2)
(183,198,2)
(139,46,2)
(90,90,2)
(151,54,2)
(108,8,2)
(153,42,2)
(133,8,2)
(46,32,2)
(87,5,2)
(166,8,2)
(93,160,2)
(171,46,2)
(86,184,2)
(33,42,2)
(187,36,2)
(28,138,2)
(67,94,2)
(56,160,2)
(169,82,2)
(189,8,2)
(14,42,2)
(20,94,2)
(1,138,2)
(89,42,2)
(128,179,2)
(90,13,2)
(5,86,2)
(192,124,2)
(92,94,2)
(96,138,2)
(163,94,2)
(25,42,2)
(23,5,2)
(64,42,2)
(52,80,2)
(24,8,2)
(143,82,2)
(136,82,2)
(151,94,2)
(70,61,2)
(116,138,2)
(44,46,2)
(169,9,2)
(156,187,2)
(75,179,2)
(9,41,2)
(186,42,2)
(165,138,2)
(184,42,2)
(117,111,2)
(97,60,2)
(44,90,2)
(77,94,2)
(48,5,2)
(82,192,2)
(162,138,2)
(153,145,2)
(58,139,2)
(84,112,2)
(22,46,2)
(146,138,2)
(3,94,2)
(8,45,2)
(175,8,2)
(95,46,2)
(68,61,2)
(99,53,2)
(46,35,2)
(41,187,2)
(127,160,2)
(13,46,2)
(115,46,2)
(124,61,2)
(79,138,2)
(122,105,2)
(5,42,2)
(152,90,2)
(134,105,2)
(8,137,2)
(126,183,2)
(156,94,2)
(105,94,2)
(6,46,2)
(88,183,2)
(170,130,2)
(160,179,2)
(10,187,2)
(119,94,2)
(19,58,2)
(54,145,2)
(71,42,2)
(149,8,2)
(9,82,2)
(102,138,2)
(179,42,2)
(169,124,2)
(160,42,2)
(0,184,2)
(187,94,2)
(192,60,2)
(76,138,2)
(154,105,2)
(105,91,2)
(203,160,2)
(104,184,2)
(176,46,2)
(53,46,2)
(137,138,2)
(72,46,2)
(123,61,2)
(29,138,2)
(31,138,2)
(34,9,2)
(82,60,2)
(27,84,2)
(37,42,2)
(167,8,2)
(106,8,2)
(159,130,2)
(160,128,2)
(13,90,2)
(38,42,2)
(51,138,2)
(124,66,2)
(145,4,2)
(191,8,2)
(36,94,2)
(158,160,2)
(8,138,2)
(138,111,2)
(0,183,2)
(83,82,2)
(17,10,2)
(164,183,2)
(131,5,2)
(118,138,2)
(188,105,2)
(198,42,2)
(21,138,2)
(49,138,2)
(47,46,2)
(60,187,2)
(185,42,2)
(43,5,2)
(19,46,2)
(152,46,2)
(59,110,2)
(66,61,2)
(198,184,2)
(32,35,2)
(80,156,2)
(182,71,2)
(45,137,2)
(135,8,2)
(113,169,2)
(23,184,2)
(178,94,2)
(182,42,2)
(100,8,2)
(71,153,2)
(55,5,2)
(54,94,2)
(32,170,2)
(82,61,2)
(99,46,2)
(18,138,2)
(150,169,2)
(130,35,2)
(62,138,2)
(128,184,2)
(183,42,2)
(184,182,2)
-----------------------------------
(0,ic->line_len)
(1,1)
(2,str)
(3,cpuinfo_arc700)
(4,smp_processor_id()
(5,ic->ver != CONFIG_ARC_MMU_VER)
(6,SLC_CTRL_IM)
(7,)
(8,is_isa_arcv2()
(9,!dc->alias)
(10,dc->line_len)
(11,"cache support enabled but non-existent cache\\n")
(12,__dma_cache_wback_inv_ioc)
(13,read_aux_reg(ARC_REG_SLC_CTRL)
(14,ic)
(15,"cache support enabled but non-existent cache\\n")
(16,cpu)
(17,panic("DCache line [%d] != kernel Config [%d]",\n\\n\\t\\t\\t      dc->line_len, L1_CACHE_BYTES)
(18,0x11)
(19,write_aux_reg(ARC_REG_SLC_CTRL,\n\\n\\t\\t\\tread_aux_reg(ARC_REG_SLC_CTRL)
(20,line_len)
(21,__dma_cache_wback_inv = __dma_cache_wback_inv_ioc)
(22,ARC_REG_SLC_CTRL)
(23,ic->ver)
(24,__dma_cache_inv = __dma_cache_inv_slc)
(25,ver)
(26,)
(27,printk(arc_cache_mumbojumbo(0, str, sizeof(str)
(28,write_aux_reg(ARC_REG_IO_COH_PARTIAL, 1)
(29,write_aux_reg(ARC_REG_IO_COH_AP0_SIZE, 0x11)
(30,!ic->ver)
(31,write_aux_reg(ARC_REG_IO_COH_AP0_BASE, 0x80000)
(32,l2_line_sz && !slc_enable)
(33,ver)
(34,handled)
(35,is_isa_arcv2()
(36,&cpuinfo_arc700[cpu].dcache)
(37,ic)
(38,cpu)
(39,ic)
(40,if (ic->line_len != L1_CACHE_BYTES)
(41,dc->alias)
(42,IS_ENABLED(CONFIG_ARC_HAS_ICACHE)
(43,CONFIG_ARC_MMU_VER)
(44,SLC_CTRL_BUSY)
(45,l2_line_sz && slc_enable)
(46,is_isa_arcv2()
(47,ARC_REG_SLC_CTRL)
(48,ver)
(49,__dma_cache_inv = __dma_cache_inv_ioc)
(50,ic)
(51,__dma_cache_wback_ioc)
(52,panic("cache support enabled but non-existent cache\\n")
(53,read_aux_reg(ARC_REG_SLC_CTRL)
(54,cpuinfo_arc700[cpu])
(55,panic("Cache ver [%d] doesn\'t match MMU ver [%d]\\n",\n\\n\\t\\t\\t      ic->ver, CONFIG_ARC_MMU_VER)
(56,_cache_line_loop_ic_fn = __cache_line_loop_v3)
(57,)
(58,read_aux_reg(ARC_REG_SLC_CTRL)
(59,slc_enable)
(60,dc->alias)
(61,is_isa_arcompact()
(62,ARC_REG_IO_COH_ENABLE)
(63,ARC_REG_SLC_INVALIDATE)
(64,ic)
(65,)
(66,IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING)
(67,ver)
(68,CONFIG_ARC_CACHE_VIPT_ALIASING)
(69,)
(70,dc)
(71,cpuinfo_arc700[cpu].icache)
(72,SLC_CTRL_DISABLE)
(73,write_aux_reg(ARC_REG_SLC_INVALIDATE, 1)
(74,__dma_cache_wback)
(75,ic)
(76,__dma_cache_wback = __dma_cache_wback_ioc)
(77,L1_CACHE_BYTES)
(78,str)
(79,ARC_REG_IO_COH_AP0_BASE)
(80,!dc->ver)
(81,dc)
(82,dc->alias && !handled)
(83,alias)
(84,arc_cache_mumbojumbo(0, str, sizeof(str)
(85,if (is_isa_arcv2()
(86,ic->ver)
(87,ic)
(88,panic("ICache line [%d] != kernel Config [%d]",\n\\n\\t\\t\\t      ic->line_len, L1_CACHE_BYTES)
(89,icache)
(90,read_aux_reg(ARC_REG_SLC_CTRL)
(91,dc->line_len)
(92,dc)
(93,_cache_line_loop_ic_fn)
(94,IS_ENABLED(CONFIG_ARC_HAS_DCACHE)
(95,1)
(96,__dma_cache_wback_inv)
(97,handled)
(98,handled)
(99,write_aux_reg(ARC_REG_SLC_CTRL,\n\\n\\t\\t\\tread_aux_reg(ARC_REG_SLC_CTRL)
(100,__dma_cache_inv_l1)
(101,)
(102,write_aux_reg(ARC_REG_IO_COH_ENABLE, 1)
(103,CONFIG_ARC_HAS_DCACHE)
(104,ic->ver)
(105,dc->line_len != L1_CACHE_BYTES)
(106,__dma_cache_wback_slc)
(107,if (!dc->ver)
(108,__dma_cache_wback = __dma_cache_wback_slc)
(109,cpu)
(110,l2_line_sz)
(111,is_isa_arcv2()
(112,sizeof(str)
(113,panic("Disable CONFIG_ARC_CACHE_VIPT_ALIASING\\n")
(114,1)
(115,ARC_REG_SLC_CTRL)
(116,ARC_REG_IO_COH_PARTIAL)
(117,ioc_exists)
(118,0x80000)
(119,dc)
(120,CONFIG_ARC_HAS_ICACHE)
(121,dc)
(122,line_len)
(123,alias)
(124,handled = IS_ENABLED(CONFIG_ARC_CACHE_VIPT_ALIASING)
(125,0)
(126,ic)
(127,_cache_line_loop_ic_fn)
(128,ic->alias)
(129,if (is_isa_arcv2()
(130,l2_line_sz)
(131,"Cache ver [%d] doesn\'t match MMU ver [%d]\\n")
(132,)
(133,__dma_cache_inv)
(134,L1_CACHE_BYTES)
(135,__dma_cache_wback_inv)
(136,panic("Enable CONFIG_ARC_CACHE_VIPT_ALIASING\\n")
(137,is_isa_arcv2()
(138,is_isa_arcv2()
(139,read_aux_reg(ARC_REG_SLC_CTRL)
(140,if (IS_ENABLED(CONFIG_ARC_HAS_ICACHE)
(141,_cache_line_loop_ic_fn = __cache_line_loop)
(142,CONFIG_ARC_MMU_VER)
(143,"Enable CONFIG_ARC_CACHE_VIPT_ALIASING\\n")
(144,if (dc->alias && !handled)
(145,cpu = smp_processor_id()
(146,ARC_REG_IO_COH_AP0_SIZE)
(147,if (is_isa_arcv2()
(148,__dma_cache_inv)
(149,__dma_cache_inv_slc)
(150,"Disable CONFIG_ARC_CACHE_VIPT_ALIASING\\n")
(151,cpuinfo_arc700[cpu].dcache)
(152,ARC_REG_SLC_CTRL)
(153,cpuinfo_arc700[cpu])
(154,dc)
(155,)
(156,dc->ver)
(157,handled)
(158,__cache_line_loop_v3)
(159,slc_enable)
(160,is_isa_arcv2()
(161,L1_CACHE_BYTES)
(162,__dma_cache_inv_ioc)
(163,dc)
(164,"ICache line [%d] != kernel Config [%d]")
(165,__dma_cache_wback)
(166,__dma_cache_wback_inv_l1)
(167,__dma_cache_wback)
(168,while (read_aux_reg(ARC_REG_SLC_CTRL)
(169,!dc->alias && handled)
(170,!slc_enable)
(171,ARC_REG_SLC_CTRL)
(172,__dma_cache_wback_inv = __dma_cache_wback_inv_l1)
(173,if (is_isa_arcompact()
(174,__dma_cache_wback_l1)
(175,__dma_cache_wback_inv = __dma_cache_wback_inv_slc)
(176,read_aux_reg(ARC_REG_SLC_CTRL)
(177,alias)
(178,cpu)
(179,is_isa_arcv2()
(180,__dma_cache_wback_inv_slc)
(181,__dma_cache_inv)
(182,&cpuinfo_arc700[cpu].icache)
(183,ic->line_len != L1_CACHE_BYTES)
(184,*ic = &cpuinfo_arc700[cpu].icache)
(185,L1_CACHE_BYTES)
(186,cpuinfo_arc700)
(187,*dc = &cpuinfo_arc700[cpu].dcache)
(188,"DCache line [%d] != kernel Config [%d]")
(189,__dma_cache_wback = __dma_cache_wback_l1)
(190,RET)
(191,__dma_cache_inv = __dma_cache_inv_l1)
(192,!handled)
(193,dcache)
(194,panic("cache support enabled but non-existent cache\\n")
(195,if (ic->ver != CONFIG_ARC_MMU_VER)
(196,line_len)
(197,if (dc->line_len != L1_CACHE_BYTES)
(198,ic->line_len)
(199,if (IS_ENABLED(CONFIG_ARC_HAS_DCACHE)
(200,str)
(201,if (!ic->ver)
(202,line_len)
(203,__cache_line_loop)
(204,__dma_cache_wback_inv)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^