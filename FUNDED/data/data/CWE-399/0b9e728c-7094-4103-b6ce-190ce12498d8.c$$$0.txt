-----label-----
1
-----code-----
static int nand_ooblayout_ecc_sp(struct mtd_info *mtd, int section,
				 struct mtd_oob_region *oobregion)
{
	struct nand_chip *chip = mtd_to_nand(mtd);
	struct nand_ecc_ctrl *ecc = &chip->ecc;

	if (section > 1)
		return -ERANGE;

	if (!section) {
		oobregion->offset = 0;
		oobregion->length = 4;
	} else {
		oobregion->offset = 6;
		oobregion->length = ecc->total - 4;
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
21,24
21,25
21,26
22,23
23,24
23,25
24,25
26,27
26,28
26,29
29,30
30,31
30,32
31,32
33,34
35,36
36,37
36,38
37,38
39,40
39,41
39,42
42,43
43,44
44,45
44,46
45,46
48,49
48,50
49,50
49,51
50,51
53,54
54,55
55,56
57,58
57,59
57,60
58,59
59,60
61,62
61,63
62,63
63,64
63,65
64,65
64,66
65,66
69,70
70,71
70,72
71,72
71,73
72,73
76,77
76,78
77,78
78,79
78,80
79,80
79,81
80,81
84,85
85,86
85,87
86,87
86,88
87,88
90,91
90,92
91,92
91,93
92,93
96,97
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,25,27,28,32,34,38,40,41,46,47,51,52,56,60,66,67,68,73,74,75,81,82,83,88,89,93,94,95,97
-----computeFrom-----
49,50
49,51
63,64
63,65
70,71
70,72
78,79
78,80
85,86
85,87
90,91
90,92
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
static int nand_ooblayout_ecc_sp(struct mtd_info *mtd, int section,				 struct mtd_oob_region *oobregion){	struct nand_chip *chip = mtd_to_nand(mtd);	struct nand_ecc_ctrl *ecc = &chip->ecc;	if (section > 1)		return -ERANGE;	if (!section) {		oobregion->offset = 0;		oobregion->length = 4;	} else {		oobregion->offset = 6;		oobregion->length = ecc->total - 4;	}	return 0;}
static int
nand_ooblayout_ecc_sp(struct mtd_info *mtd, int section,				 struct mtd_oob_region *oobregion)
nand_ooblayout_ecc_sp
struct mtd_info *mtd
struct mtd_info
mtd_info
*mtd
*
mtd
int section
int
section
section
struct mtd_oob_region *oobregion
struct mtd_oob_region
mtd_oob_region
*oobregion
*
oobregion
{	struct nand_chip *chip = mtd_to_nand(mtd);	struct nand_ecc_ctrl *ecc = &chip->ecc;	if (section > 1)		return -ERANGE;	if (!section) {		oobregion->offset = 0;		oobregion->length = 4;	} else {		oobregion->offset = 6;		oobregion->length = ecc->total - 4;	}	return 0;}
struct nand_chip *chip = mtd_to_nand(mtd);
struct nand_chip *chip = mtd_to_nand(mtd);
struct nand_chip
nand_chip
*chip = mtd_to_nand(mtd)
*
chip
= mtd_to_nand(mtd)
mtd_to_nand(mtd)
mtd_to_nand
mtd_to_nand
mtd
mtd
struct nand_ecc_ctrl *ecc = &chip->ecc;
struct nand_ecc_ctrl *ecc = &chip->ecc;
struct nand_ecc_ctrl
nand_ecc_ctrl
*ecc = &chip->ecc
*
ecc
= &chip->ecc
&chip->ecc
chip->ecc
chip
chip
ecc
if (section > 1)		return -ERANGE;
section > 1
section
section
1
return -ERANGE;
-ERANGE
ERANGE
ERANGE
if (!section) {		oobregion->offset = 0;		oobregion->length = 4;	} else {		oobregion->offset = 6;		oobregion->length = ecc->total - 4;	}
!section
section
section
{		oobregion->offset = 0;		oobregion->length = 4;	}
oobregion->offset = 0;
oobregion->offset = 0
oobregion->offset
oobregion
oobregion
offset
0
oobregion->length = 4;
oobregion->length = 4
oobregion->length
oobregion
oobregion
length
4
{		oobregion->offset = 6;		oobregion->length = ecc->total - 4;	}
oobregion->offset = 6;
oobregion->offset = 6
oobregion->offset
oobregion
oobregion
offset
6
oobregion->length = ecc->total - 4;
oobregion->length = ecc->total - 4
oobregion->length
oobregion
oobregion
length
ecc->total - 4
ecc->total
ecc
ecc
total
4
return 0;
0
-----joern-----
(15,33,0)
(36,35,0)
(20,51,0)
(17,35,0)
(49,39,0)
(40,0,0)
(41,49,0)
(8,45,0)
(2,28,0)
(5,36,0)
(23,16,0)
(4,9,0)
(52,14,0)
(15,48,0)
(28,22,0)
(42,51,0)
(14,32,0)
(4,45,0)
(28,16,0)
(53,9,0)
(44,42,0)
(46,16,0)
(54,15,0)
(26,28,0)
(28,17,0)
(19,20,0)
(29,8,0)
(18,4,0)
(43,22,0)
(17,1,0)
(25,22,0)
(9,10,0)
(47,0,0)
(29,35,0)
(37,4,0)
(10,0,0)
(28,36,0)
(8,39,0)
(45,4,0)
(7,45,0)
(0,48,0)
(11,42,0)
(3,29,0)
(22,35,0)
(2,32,0)
(1,30,0)
(13,48,0)
(50,1,0)
(45,8,0)
(10,9,0)
(24,16,0)
(28,29,0)
(12,29,0)
(27,16,0)
(9,16,0)
(48,16,0)
(0,10,0)
(31,30,0)
(38,36,0)
(48,15,0)
(36,31,0)
(34,17,0)
(22,49,0)
(21,17,0)
(6,31,0)
(45,7,1)
(5,38,1)
(43,20,1)
(26,8,1)
(28,17,1)
(28,29,1)
(15,33,1)
(20,19,1)
(15,54,1)
(0,40,1)
(4,18,1)
(52,42,1)
(3,12,1)
(21,20,1)
(36,35,1)
(45,4,1)
(19,42,1)
(54,13,1)
(8,45,1)
(34,21,1)
(22,25,1)
(9,10,1)
(53,48,1)
(20,51,1)
(25,43,1)
(36,5,1)
(47,53,1)
(42,11,1)
(0,48,1)
(44,9,1)
(14,52,1)
(22,35,1)
(10,0,1)
(2,28,1)
(2,32,1)
(7,4,1)
(12,49,1)
(32,14,1)
(17,35,1)
(18,37,1)
(48,15,1)
(49,41,1)
(29,3,1)
(38,1,1)
(1,50,1)
(6,36,1)
(4,9,1)
(28,22,1)
(42,51,1)
(50,17,1)
(28,36,1)
(11,44,1)
(37,29,1)
(41,22,1)
(26,31,1)
(28,26,1)
(17,34,1)
(40,47,1)
(31,6,1)
(29,35,1)
(36,35,2)
(45,4,2)
(22,20,2)
(29,35,2)
(21,20,2)
(41,20,2)
(45,20,2)
(1,20,2)
(10,0,2)
(49,20,2)
(52,42,2)
(17,35,2)
(5,20,2)
(42,51,2)
(6,20,2)
(29,20,2)
(7,20,2)
(2,32,2)
(48,15,2)
(12,20,2)
(22,35,2)
(3,20,2)
(36,20,2)
(31,20,2)
(34,20,2)
(37,20,2)
(26,42,2)
(50,20,2)
(20,51,2)
(8,45,2)
(25,20,2)
(38,20,2)
(9,10,2)
(17,20,2)
(28,42,2)
(2,28,2)
(4,20,2)
(4,9,2)
(28,17,2)
(8,20,2)
(19,42,2)
(0,48,2)
(20,42,2)
(14,42,2)
(28,22,2)
(15,33,2)
(28,29,2)
(28,36,2)
(18,20,2)
(43,20,2)
(32,42,2)
-----------------------------------
(0,chip->ecc)
(1,oobregion->offset = 0)
(2,RET)
(3,length)
(4,ecc->total)
(5,length)
(6,4)
(7,4)
(8,oobregion->length = ecc->total - 4)
(9,*ecc = &chip->ecc)
(10,&chip->ecc)
(11,1)
(12,oobregion)
(13,chip)
(14,-ERANGE)
(15,mtd_to_nand(mtd)
(16,)
(17,oobregion->offset)
(18,total)
(19,section)
(20,!section)
(21,oobregion)
(22,oobregion->offset)
(23,if (section > 1)
(24,ecc)
(25,offset)
(26,0)
(27,chip)
(28,return 0;)
(29,oobregion->length)
(30,)
(31,oobregion->length = 4)
(32,return -ERANGE;)
(33,struct mtd_info *mtd)
(34,offset)
(35,struct mtd_oob_region *oobregion)
(36,oobregion->length)
(37,ecc)
(38,oobregion)
(39,)
(40,ecc)
(41,6)
(42,section > 1)
(43,oobregion)
(44,section)
(45,ecc->total - 4)
(46,if (!section)
(47,chip)
(48,*chip = mtd_to_nand(mtd)
(49,oobregion->offset = 6)
(50,0)
(51,int section)
(52,ERANGE)
(53,ecc)
(54,mtd)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^