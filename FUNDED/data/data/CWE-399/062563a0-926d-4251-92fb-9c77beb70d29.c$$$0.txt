-----label-----
1
-----code-----
static int msm_xfer_msg(struct slim_controller *ctrl, struct slim_msg_txn *txn)
{
	DECLARE_COMPLETION_ONSTACK(done);
	struct msm_slim_ctrl *dev = slim_get_ctrldata(ctrl);
	u32 *pbuf;
	u8 *puc;
	int timeout;
	int msgv = -1;
	u8 la = txn->la;
	u8 mc = (u8)(txn->mc & 0xFF);
	/*
	 * Voting for runtime PM: Slimbus has 2 possible use cases:
	 * 1. messaging
	 * 2. Data channels
	 * Messaging case goes through messaging slots and data channels
	 * use their own slots
	 * This "get" votes for messaging bandwidth
	 */
	if (!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG))
		msgv = msm_slim_get_ctrl(dev);
	if (msgv >= 0)
		dev->state = MSM_CTRL_AWAKE;
	mutex_lock(&dev->tx_lock);
	if (dev->state == MSM_CTRL_ASLEEP ||
		((!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&
		dev->state == MSM_CTRL_IDLE)) {
		dev_err(dev->dev, "runtime or system PM suspended state");
		mutex_unlock(&dev->tx_lock);
		if (msgv >= 0)
			msm_slim_put_ctrl(dev);
		return -EBUSY;
	}
	if (txn->mt == SLIM_MSG_MT_CORE &&
		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION) {
		if (dev->reconf_busy) {
			wait_for_completion(&dev->reconf);
			dev->reconf_busy = false;
		}
		/* This "get" votes for data channels */
		if (dev->ctrl.sched.usedslots != 0 &&
			!dev->chan_active) {
			int chv = msm_slim_get_ctrl(dev);
			if (chv >= 0)
				dev->chan_active = true;
		}
	}
	txn->rl--;
	pbuf = msm_get_msg_buf(dev, txn->rl, &done);
	dev->err = 0;

	if (txn->dt == SLIM_MSG_DEST_ENUMADDR) {
		mutex_unlock(&dev->tx_lock);
		if (msgv >= 0)
			msm_slim_put_ctrl(dev);
		return -EPROTONOSUPPORT;
	}
	if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&
		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||
		 mc == SLIM_MSG_MC_CONNECT_SINK ||
		 mc == SLIM_MSG_MC_DISCONNECT_PORT))
		la = dev->pgdla;
	if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)
		*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 0, la);
	else
		*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 1, la);
	if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)
		puc = ((u8 *)pbuf) + 3;
	else
		puc = ((u8 *)pbuf) + 2;
	if (txn->rbuf)
		*(puc++) = txn->tid;
	if ((txn->mt == SLIM_MSG_MT_CORE) &&
		((mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&
		mc <= SLIM_MSG_MC_REPORT_INFORMATION) ||
		(mc >= SLIM_MSG_MC_REQUEST_VALUE &&
		 mc <= SLIM_MSG_MC_CHANGE_VALUE))) {
		*(puc++) = (txn->ec & 0xFF);
		*(puc++) = (txn->ec >> 8)&0xFF;
	}
	if (txn->wbuf)
		memcpy(puc, txn->wbuf, txn->len);
	if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&
		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||
		 mc == SLIM_MSG_MC_CONNECT_SINK ||
		 mc == SLIM_MSG_MC_DISCONNECT_PORT)) {
		if (mc != SLIM_MSG_MC_DISCONNECT_PORT)
			dev->err = msm_slim_connect_pipe_port(dev, *puc);
		else {
			/*
			 * Remove channel disconnects master-side ports from
			 * channel. No need to send that again on the bus
			 * Only disable port
			 */
			writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,
					(*puc + dev->port_b), dev->ver));
			mutex_unlock(&dev->tx_lock);
			if (msgv >= 0)
				msm_slim_put_ctrl(dev);
			return 0;
		}
		if (dev->err) {
			dev_err(dev->dev, "pipe-port connect err:%d", dev->err);
			mutex_unlock(&dev->tx_lock);
			if (msgv >= 0)
				msm_slim_put_ctrl(dev);
			return dev->err;
		}
		*(puc) = *(puc) + dev->port_b;
	}
	if (txn->mt == SLIM_MSG_MT_CORE &&
		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)
		dev->reconf_busy = true;
	msm_send_msg_buf(dev, pbuf, txn->rl, MGR_TX_MSG);
	timeout = wait_for_completion_timeout(&done, HZ);
	if (mc == SLIM_MSG_MC_RECONFIGURE_NOW) {
		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |
					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&
				timeout) {
			timeout = wait_for_completion_timeout(&dev->reconf, HZ);
			dev->reconf_busy = false;
			if (timeout) {
				clk_disable_unprepare(dev->rclk);
				disable_irq(dev->irq);
			}
		}
		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |
					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&
				!timeout) {
			dev->reconf_busy = false;
			dev_err(dev->dev, "clock pause failed");
			mutex_unlock(&dev->tx_lock);
			return -ETIMEDOUT;
		}
		if (txn->mt == SLIM_MSG_MT_CORE &&
			txn->mc == SLIM_MSG_MC_RECONFIGURE_NOW) {
			if (dev->ctrl.sched.usedslots == 0 &&
					dev->chan_active) {
				dev->chan_active = false;
				msm_slim_put_ctrl(dev);
			}
		}
	}
	mutex_unlock(&dev->tx_lock);
	if (msgv >= 0)
		msm_slim_put_ctrl(dev);

	if (!timeout)
		dev_err(dev->dev, "TX timed out:MC:0x%x,mt:0x%x", txn->mc,
					txn->mt);

	return timeout ? dev->err : -ETIMEDOUT;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
17,47
17,48
17,49
18,19
19,20
19,21
20,21
22,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
29,32
32,33
33,34
33,35
34,35
36,37
38,39
39,40
39,41
40,41
42,43
42,44
45,46
46,47
46,48
47,48
49,50
49,51
52,53
53,54
53,55
55,56
57,58
58,59
58,60
60,61
60,62
62,63
63,64
65,66
66,67
66,68
67,68
69,70
69,71
71,72
72,73
72,74
73,74
76,77
77,78
77,79
78,79
80,81
80,82
82,83
83,84
83,85
84,85
85,86
87,88
87,89
88,89
88,90
89,90
93,94
93,95
94,95
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
105,106
107,108
107,109
108,109
110,111
112,113
112,114
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
123,124
125,126
126,127
126,128
127,128
129,130
130,131
130,132
131,132
134,135
134,136
135,136
135,137
136,137
136,138
137,138
137,139
138,139
141,142
143,144
144,145
144,146
145,146
146,147
147,148
148,149
148,150
149,150
149,151
150,151
153,154
155,156
155,157
156,157
156,158
157,158
160,161
162,163
162,164
162,165
162,166
163,164
164,165
164,166
164,167
165,166
167,168
167,169
168,169
172,173
173,174
173,175
174,175
176,177
177,178
177,179
178,179
181,182
181,183
182,183
182,184
183,184
186,187
187,188
187,189
188,189
190,191
192,193
193,194
194,195
196,197
196,198
197,198
197,199
198,199
198,200
199,200
199,201
200,201
203,204
205,206
205,207
206,207
208,209
210,211
210,212
211,212
211,213
212,213
212,214
213,214
216,217
216,218
217,218
218,219
218,220
219,220
221,222
222,223
222,224
223,224
226,227
227,228
227,229
228,229
228,230
229,230
233,234
233,235
234,235
234,236
235,236
235,237
236,237
236,238
237,238
237,239
238,239
238,240
239,240
245,246
246,247
246,248
247,248
250,251
250,252
251,252
252,253
252,254
254,255
254,256
256,257
257,258
257,259
258,259
260,261
262,263
262,264
263,264
263,265
264,265
267,268
268,269
268,270
269,270
269,271
270,271
274,275
275,276
276,277
276,278
277,278
280,281
281,282
281,283
282,283
284,285
284,286
284,287
284,288
285,286
287,288
289,290
289,291
290,291
293,294
294,295
296,297
297,298
297,299
298,299
298,300
299,300
303,304
303,305
304,305
304,306
305,306
305,307
306,307
309,310
311,312
311,313
311,314
312,313
313,314
313,315
314,315
316,317
317,318
317,319
318,319
321,322
321,323
322,323
322,324
323,324
326,327
327,328
327,329
328,329
330,331
332,333
333,334
334,335
336,337
336,338
337,338
337,339
338,339
338,340
339,340
339,341
340,341
340,342
341,342
344,345
346,347
346,348
347,348
347,349
348,349
352,353
353,354
353,355
354,355
354,356
355,356
355,357
356,357
358,359
360,361
360,362
361,362
363,364
365,366
365,367
366,367
368,369
370,371
371,372
371,373
372,373
374,375
374,376
375,376
378,379
378,380
378,381
379,380
379,381
380,381
380,382
381,382
384,385
386,387
387,388
387,389
388,389
389,390
391,392
391,393
391,394
391,395
391,396
391,397
392,393
394,395
394,396
395,396
398,399
398,400
399,400
402,403
405,406
407,408
408,409
408,410
409,410
410,411
412,413
412,414
412,415
412,416
412,417
412,418
413,414
415,416
415,417
416,417
419,420
419,421
420,421
423,424
426,427
428,429
428,430
428,431
429,430
429,431
430,431
430,432
431,432
434,435
436,437
437,438
437,439
438,439
440,441
440,442
441,442
442,443
442,444
443,444
443,445
444,445
446,447
448,449
451,452
452,453
452,454
453,454
455,456
455,457
456,457
457,458
457,459
458,459
458,460
459,460
461,462
463,464
466,467
466,468
467,468
467,469
468,469
471,472
472,473
472,474
473,474
474,475
475,476
476,477
478,479
478,480
479,480
482,483
482,484
483,484
483,485
484,485
485,486
485,487
486,487
486,488
487,488
490,491
492,493
493,494
493,495
494,495
495,496
495,497
496,497
496,498
497,498
499,500
501,502
501,503
502,503
504,505
506,507
507,508
507,509
508,509
508,510
509,510
511,512
513,514
513,515
514,515
516,517
518,519
518,520
519,520
520,521
520,522
521,522
522,523
523,524
524,525
526,527
527,528
527,529
528,529
528,530
529,530
533,534
534,535
534,536
535,536
536,537
537,538
538,539
540,541
540,542
541,542
542,543
542,544
543,544
543,545
544,545
549,550
549,551
550,551
550,552
551,552
554,555
555,556
555,557
555,558
555,559
556,557
558,559
560,561
560,562
561,562
564,565
564,566
565,566
568,569
568,570
569,570
569,571
570,571
570,572
571,572
571,573
572,573
572,574
573,574
576,577
578,579
578,580
579,580
579,581
580,581
584,585
585,586
585,587
586,587
586,588
587,588
587,589
588,589
590,591
592,593
592,594
593,594
595,596
597,598
597,599
598,599
600,601
602,603
602,604
602,605
603,604
603,605
603,606
604,605
604,606
605,606
607,608
609,610
610,611
610,612
611,612
611,613
612,613
615,616
615,617
615,618
616,617
618,619
620,621
621,622
623,624
623,625
623,626
623,627
624,625
625,626
625,627
625,628
626,627
629,630
629,631
629,632
629,633
630,631
632,633
634,635
635,636
635,637
636,637
637,638
639,640
639,641
640,641
643,644
643,645
644,645
647,648
648,649
648,650
649,650
651,652
652,653
652,654
653,654
656,657
656,658
657,658
657,659
658,659
661,662
662,663
662,664
663,664
665,666
667,668
669,670
669,671
670,671
670,672
671,672
674,675
674,676
674,677
674,678
675,676
676,677
676,678
676,679
676,680
677,678
679,680
679,681
680,681
684,685
684,686
685,686
688,689
689,690
689,691
690,691
692,693
693,694
693,695
694,695
697,698
697,699
698,699
698,700
699,700
702,703
703,704
703,705
704,705
706,707
708,709
709,710
709,711
710,711
713,714
714,715
714,716
715,716
716,717
717,718
719,720
719,721
720,721
721,722
722,723
724,725
724,726
725,726
728,729
728,730
729,730
729,731
730,731
730,732
731,732
731,733
732,733
735,736
737,738
737,739
738,739
740,741
742,743
743,744
743,745
744,745
744,746
745,746
749,750
750,751
750,752
750,753
750,754
750,755
751,752
753,754
755,756
757,758
757,759
758,759
761,762
763,764
764,765
764,766
765,766
767,768
767,769
767,770
768,769
770,771
771,772
773,774
775,776
775,777
776,777
776,778
777,778
779,780
781,782
781,783
781,784
782,783
782,784
783,784
783,785
784,785
785,786
785,787
786,787
786,788
787,788
790,791
791,792
791,793
792,793
794,795
796,797
798,799
798,800
798,801
799,800
800,801
800,802
801,802
803,804
803,805
803,806
804,805
806,807
807,808
807,809
808,809
811,812
813,814
814,815
814,816
815,816
815,817
816,817
820,821
820,822
821,822
823,824
823,825
824,825
825,826
825,827
826,827
828,829
828,830
829,830
832,833
833,834
833,835
834,835
836,837
836,838
837,838
840,841
840,842
841,842
841,843
842,843
843,844
843,845
844,845
844,846
845,846
848,849
849,850
849,851
850,851
852,853
854,855
855,856
857,858
857,859
857,860
857,861
858,859
859,860
859,861
860,861
860,862
861,862
865,866
866,867
866,868
866,869
867,868
869,870
869,871
870,871
874,875
875,876
875,877
876,877
878,879
879,880
879,881
880,881
883,884
884,885
885,886
887,888
887,889
888,889
888,890
889,890
889,891
890,891
890,892
891,892
894,895
896,897
896,898
897,898
897,899
898,899
901,902
903,904
904,905
904,906
905,906
905,907
906,907
906,908
907,908
907,909
908,909
908,910
909,910
909,911
910,911
916,917
916,918
917,918
920,921
920,922
921,922
922,923
922,924
923,924
923,925
924,925
928,929
929,930
929,931
930,931
932,933
934,935
935,936
935,937
936,937
938,939
939,940
939,941
940,941
943,944
943,945
944,945
944,946
945,946
948,949
949,950
949,951
950,951
952,953
954,955
954,956
955,956
956,957
958,959
959,960
959,961
959,962
959,963
959,964
960,961
962,963
962,964
963,964
967,968
967,969
968,969
971,972
971,973
972,973
975,976
976,977
976,978
976,979
977,978
979,980
979,981
980,981
983,984
984,985
-----nextToken-----
2,4,7,9,10,13,15,16,21,24,28,30,31,35,37,41,43,44,48,50,51,54,56,59,61,64,68,70,74,75,79,81,86,90,91,92,99,100,102,106,109,111,115,116,121,122,124,128,132,133,139,140,142,151,152,154,158,159,161,166,169,170,171,175,179,180,184,185,189,191,195,201,202,204,207,209,214,215,220,224,225,230,231,232,240,241,242,243,244,248,249,253,255,259,261,265,266,271,272,273,278,279,283,286,288,291,292,295,300,301,302,307,308,310,315,319,320,324,325,329,331,335,342,343,345,349,350,351,357,359,362,364,367,369,373,376,377,382,383,385,390,393,396,397,400,401,403,404,406,411,414,417,418,421,422,424,425,427,432,433,435,439,445,447,449,450,454,460,462,464,465,469,470,477,480,481,488,489,491,498,500,503,505,510,512,515,517,525,530,531,532,539,545,546,547,548,552,553,557,559,562,563,566,567,574,575,577,581,582,583,589,591,594,596,599,601,606,608,613,614,617,619,622,627,628,631,633,638,641,642,645,646,650,654,655,659,660,664,666,668,672,673,678,681,682,683,686,687,691,695,696,700,701,705,707,711,712,718,723,726,727,733,734,736,739,741,746,747,748,752,754,756,759,760,762,766,769,772,774,778,780,788,789,793,795,797,802,805,809,810,812,817,818,819,822,827,830,831,835,838,839,846,847,851,853,856,862,863,864,868,871,872,873,877,881,882,886,892,893,895,899,900,902,911,912,913,914,915,918,919,925,926,927,931,933,937,941,942,946,947,951,953,957,961,964,965,966,969,970,973,974,978,981,982,985
-----computeFrom-----
87,88
87,89
96,97
96,98
104,105
104,106
113,114
113,115
118,119
118,120
135,136
135,137
136,137
136,138
144,145
144,146
148,149
148,150
155,156
155,157
182,183
182,184
197,198
197,199
198,199
198,200
205,206
205,207
227,228
227,229
234,235
234,236
235,236
235,237
263,264
263,265
268,269
268,270
281,282
281,283
297,298
297,299
304,305
304,306
322,323
322,324
337,338
337,339
338,339
338,340
339,340
339,341
346,347
346,348
353,354
353,355
354,355
354,356
355,356
355,357
360,361
360,362
365,366
365,367
371,372
371,373
379,380
379,381
387,388
387,389
408,409
408,410
429,430
429,431
437,438
437,439
440,441
440,442
452,453
452,454
455,456
455,457
472,473
472,474
483,484
483,485
485,486
485,487
493,494
493,495
495,496
495,497
496,497
496,498
501,502
501,503
507,508
507,509
508,509
508,510
513,514
513,515
520,521
520,522
527,528
527,529
534,535
534,536
540,541
540,542
542,543
542,544
569,570
569,571
570,571
570,572
571,572
571,573
578,579
578,580
585,586
585,587
586,587
586,588
587,588
587,589
592,593
592,594
597,598
597,599
604,605
604,606
610,611
610,612
635,636
635,637
657,658
657,659
698,699
698,700
714,715
714,716
719,720
719,721
729,730
729,731
730,731
730,732
737,738
737,739
743,744
743,745
764,765
764,766
776,777
776,778
783,784
783,785
785,786
785,787
791,792
791,793
800,801
800,802
814,815
814,816
841,842
841,843
843,844
843,845
849,850
849,851
859,860
859,861
888,889
888,890
889,890
889,891
896,897
896,898
905,906
905,907
906,907
906,908
922,923
922,924
944,945
944,946
-----guardedBy-----
158,191
248,271
249,272
350,373
382,400
488,545
601,608
599,606
778,900
780,902
797,822
918,933
919,926
-----guardedByNegation-----
382,421
-----lastLexicalUse-----
382,421
-----jump-----
382,421
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;ConditionalExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
static int msm_xfer_msg(struct slim_controller *ctrl, struct slim_msg_txn *txn){	DECLARE_COMPLETION_ONSTACK(done);	struct msm_slim_ctrl *dev = slim_get_ctrldata(ctrl);	u32 *pbuf;	u8 *puc;	int timeout;	int msgv = -1;	u8 la = txn->la;	u8 mc = (u8)(txn->mc & 0xFF);	/*	 * Voting for runtime PM: Slimbus has 2 possible use cases:	 * 1. messaging	 * 2. Data channels	 * Messaging case goes through messaging slots and data channels	 * use their own slots	 * This "get" votes for messaging bandwidth	 */	if (!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG))		msgv = msm_slim_get_ctrl(dev);	if (msgv >= 0)		dev->state = MSM_CTRL_AWAKE;	mutex_lock(&dev->tx_lock);	if (dev->state == MSM_CTRL_ASLEEP ||		((!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&		dev->state == MSM_CTRL_IDLE)) {		dev_err(dev->dev, "runtime or system PM suspended state");		mutex_unlock(&dev->tx_lock);		if (msgv >= 0)			msm_slim_put_ctrl(dev);		return -EBUSY;	}	if (txn->mt == SLIM_MSG_MT_CORE &&		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION) {		if (dev->reconf_busy) {			wait_for_completion(&dev->reconf);			dev->reconf_busy = false;		}		/* This "get" votes for data channels */		if (dev->ctrl.sched.usedslots != 0 &&			!dev->chan_active) {			int chv = msm_slim_get_ctrl(dev);			if (chv >= 0)				dev->chan_active = true;		}	}	txn->rl--;	pbuf = msm_get_msg_buf(dev, txn->rl, &done);	dev->err = 0;	if (txn->dt == SLIM_MSG_DEST_ENUMADDR) {		mutex_unlock(&dev->tx_lock);		if (msgv >= 0)			msm_slim_put_ctrl(dev);		return -EPROTONOSUPPORT;	}	if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT))		la = dev->pgdla;	if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)		*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 0, la);	else		*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 1, la);	if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)		puc = ((u8 *)pbuf) + 3;	else		puc = ((u8 *)pbuf) + 2;	if (txn->rbuf)		*(puc++) = txn->tid;	if ((txn->mt == SLIM_MSG_MT_CORE) &&		((mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&		mc <= SLIM_MSG_MC_REPORT_INFORMATION) ||		(mc >= SLIM_MSG_MC_REQUEST_VALUE &&		 mc <= SLIM_MSG_MC_CHANGE_VALUE))) {		*(puc++) = (txn->ec & 0xFF);		*(puc++) = (txn->ec >> 8)&0xFF;	}	if (txn->wbuf)		memcpy(puc, txn->wbuf, txn->len);	if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT)) {		if (mc != SLIM_MSG_MC_DISCONNECT_PORT)			dev->err = msm_slim_connect_pipe_port(dev, *puc);		else {			/*			 * Remove channel disconnects master-side ports from			 * channel. No need to send that again on the bus			 * Only disable port			 */			writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,					(*puc + dev->port_b), dev->ver));			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return 0;		}		if (dev->err) {			dev_err(dev->dev, "pipe-port connect err:%d", dev->err);			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return dev->err;		}		*(puc) = *(puc) + dev->port_b;	}	if (txn->mt == SLIM_MSG_MT_CORE &&		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)		dev->reconf_busy = true;	msm_send_msg_buf(dev, pbuf, txn->rl, MGR_TX_MSG);	timeout = wait_for_completion_timeout(&done, HZ);	if (mc == SLIM_MSG_MC_RECONFIGURE_NOW) {		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				timeout) {			timeout = wait_for_completion_timeout(&dev->reconf, HZ);			dev->reconf_busy = false;			if (timeout) {				clk_disable_unprepare(dev->rclk);				disable_irq(dev->irq);			}		}		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				!timeout) {			dev->reconf_busy = false;			dev_err(dev->dev, "clock pause failed");			mutex_unlock(&dev->tx_lock);			return -ETIMEDOUT;		}		if (txn->mt == SLIM_MSG_MT_CORE &&			txn->mc == SLIM_MSG_MC_RECONFIGURE_NOW) {			if (dev->ctrl.sched.usedslots == 0 &&					dev->chan_active) {				dev->chan_active = false;				msm_slim_put_ctrl(dev);			}		}	}	mutex_unlock(&dev->tx_lock);	if (msgv >= 0)		msm_slim_put_ctrl(dev);	if (!timeout)		dev_err(dev->dev, "TX timed out:MC:0x%x,mt:0x%x", txn->mc,					txn->mt);	return timeout ? dev->err : -ETIMEDOUT;}
static int
msm_xfer_msg(struct slim_controller *ctrl, struct slim_msg_txn *txn)
msm_xfer_msg
struct slim_controller *ctrl
struct slim_controller
slim_controller
*ctrl
*
ctrl
struct slim_msg_txn *txn
struct slim_msg_txn
slim_msg_txn
*txn
*
txn
{	DECLARE_COMPLETION_ONSTACK(done);	struct msm_slim_ctrl *dev = slim_get_ctrldata(ctrl);	u32 *pbuf;	u8 *puc;	int timeout;	int msgv = -1;	u8 la = txn->la;	u8 mc = (u8)(txn->mc & 0xFF);	/*	 * Voting for runtime PM: Slimbus has 2 possible use cases:	 * 1. messaging	 * 2. Data channels	 * Messaging case goes through messaging slots and data channels	 * use their own slots	 * This "get" votes for messaging bandwidth	 */	if (!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG))		msgv = msm_slim_get_ctrl(dev);	if (msgv >= 0)		dev->state = MSM_CTRL_AWAKE;	mutex_lock(&dev->tx_lock);	if (dev->state == MSM_CTRL_ASLEEP ||		((!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&		dev->state == MSM_CTRL_IDLE)) {		dev_err(dev->dev, "runtime or system PM suspended state");		mutex_unlock(&dev->tx_lock);		if (msgv >= 0)			msm_slim_put_ctrl(dev);		return -EBUSY;	}	if (txn->mt == SLIM_MSG_MT_CORE &&		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION) {		if (dev->reconf_busy) {			wait_for_completion(&dev->reconf);			dev->reconf_busy = false;		}		/* This "get" votes for data channels */		if (dev->ctrl.sched.usedslots != 0 &&			!dev->chan_active) {			int chv = msm_slim_get_ctrl(dev);			if (chv >= 0)				dev->chan_active = true;		}	}	txn->rl--;	pbuf = msm_get_msg_buf(dev, txn->rl, &done);	dev->err = 0;	if (txn->dt == SLIM_MSG_DEST_ENUMADDR) {		mutex_unlock(&dev->tx_lock);		if (msgv >= 0)			msm_slim_put_ctrl(dev);		return -EPROTONOSUPPORT;	}	if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT))		la = dev->pgdla;	if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)		*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 0, la);	else		*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 1, la);	if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)		puc = ((u8 *)pbuf) + 3;	else		puc = ((u8 *)pbuf) + 2;	if (txn->rbuf)		*(puc++) = txn->tid;	if ((txn->mt == SLIM_MSG_MT_CORE) &&		((mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&		mc <= SLIM_MSG_MC_REPORT_INFORMATION) ||		(mc >= SLIM_MSG_MC_REQUEST_VALUE &&		 mc <= SLIM_MSG_MC_CHANGE_VALUE))) {		*(puc++) = (txn->ec & 0xFF);		*(puc++) = (txn->ec >> 8)&0xFF;	}	if (txn->wbuf)		memcpy(puc, txn->wbuf, txn->len);	if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT)) {		if (mc != SLIM_MSG_MC_DISCONNECT_PORT)			dev->err = msm_slim_connect_pipe_port(dev, *puc);		else {			/*			 * Remove channel disconnects master-side ports from			 * channel. No need to send that again on the bus			 * Only disable port			 */			writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,					(*puc + dev->port_b), dev->ver));			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return 0;		}		if (dev->err) {			dev_err(dev->dev, "pipe-port connect err:%d", dev->err);			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return dev->err;		}		*(puc) = *(puc) + dev->port_b;	}	if (txn->mt == SLIM_MSG_MT_CORE &&		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)		dev->reconf_busy = true;	msm_send_msg_buf(dev, pbuf, txn->rl, MGR_TX_MSG);	timeout = wait_for_completion_timeout(&done, HZ);	if (mc == SLIM_MSG_MC_RECONFIGURE_NOW) {		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				timeout) {			timeout = wait_for_completion_timeout(&dev->reconf, HZ);			dev->reconf_busy = false;			if (timeout) {				clk_disable_unprepare(dev->rclk);				disable_irq(dev->irq);			}		}		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				!timeout) {			dev->reconf_busy = false;			dev_err(dev->dev, "clock pause failed");			mutex_unlock(&dev->tx_lock);			return -ETIMEDOUT;		}		if (txn->mt == SLIM_MSG_MT_CORE &&			txn->mc == SLIM_MSG_MC_RECONFIGURE_NOW) {			if (dev->ctrl.sched.usedslots == 0 &&					dev->chan_active) {				dev->chan_active = false;				msm_slim_put_ctrl(dev);			}		}	}	mutex_unlock(&dev->tx_lock);	if (msgv >= 0)		msm_slim_put_ctrl(dev);	if (!timeout)		dev_err(dev->dev, "TX timed out:MC:0x%x,mt:0x%x", txn->mc,					txn->mt);	return timeout ? dev->err : -ETIMEDOUT;}
DECLARE_COMPLETION_ONSTACK(done);
DECLARE_COMPLETION_ONSTACK(done);
DECLARE_COMPLETION_ONSTACK
DECLARE_COMPLETION_ONSTACK
(done)
done
done
struct msm_slim_ctrl *dev = slim_get_ctrldata(ctrl);
struct msm_slim_ctrl *dev = slim_get_ctrldata(ctrl);
struct msm_slim_ctrl
msm_slim_ctrl
*dev = slim_get_ctrldata(ctrl)
*
dev
= slim_get_ctrldata(ctrl)
slim_get_ctrldata(ctrl)
slim_get_ctrldata
slim_get_ctrldata
ctrl
ctrl
u32 *pbuf;
u32 *pbuf;
u32
u32
*pbuf
*
pbuf
u8 *puc;
u8 *puc;
u8
u8
*puc
*
puc
int timeout;
int timeout;
int
timeout
timeout
int msgv = -1;
int msgv = -1;
int
msgv = -1
msgv
= -1
-1
1
u8 la = txn->la;
u8 la = txn->la;
u8
u8
la = txn->la
la
= txn->la
txn->la
txn
txn
la
u8 mc = (u8)(txn->mc & 0xFF);
u8 mc = (u8)(txn->mc & 0xFF);
u8
u8
mc = (u8)(txn->mc & 0xFF)
mc
= (u8)(txn->mc & 0xFF)
(u8)(txn->mc & 0xFF)
(u8)
u8
u8
txn->mc & 0xFF
txn->mc
txn
txn
mc
0xFF
if (!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG))		msgv = msm_slim_get_ctrl(dev);
!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG
txn->mc
txn
txn
mc
SLIM_MSG_CLK_PAUSE_SEQ_FLG
SLIM_MSG_CLK_PAUSE_SEQ_FLG
msgv = msm_slim_get_ctrl(dev);
msgv = msm_slim_get_ctrl(dev)
msgv
msgv
msm_slim_get_ctrl(dev)
msm_slim_get_ctrl
msm_slim_get_ctrl
dev
dev
if (msgv >= 0)		dev->state = MSM_CTRL_AWAKE;
msgv >= 0
msgv
msgv
0
dev->state = MSM_CTRL_AWAKE;
dev->state = MSM_CTRL_AWAKE
dev->state
dev
dev
state
MSM_CTRL_AWAKE
MSM_CTRL_AWAKE
mutex_lock(&dev->tx_lock);
mutex_lock(&dev->tx_lock)
mutex_lock
mutex_lock
&dev->tx_lock
dev->tx_lock
dev
dev
tx_lock
if (dev->state == MSM_CTRL_ASLEEP ||		((!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&		dev->state == MSM_CTRL_IDLE)) {		dev_err(dev->dev, "runtime or system PM suspended state");		mutex_unlock(&dev->tx_lock);		if (msgv >= 0)			msm_slim_put_ctrl(dev);		return -EBUSY;	}
dev->state == MSM_CTRL_ASLEEP ||		((!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&		dev->state == MSM_CTRL_IDLE)
dev->state == MSM_CTRL_ASLEEP
dev->state
dev
dev
state
MSM_CTRL_ASLEEP
MSM_CTRL_ASLEEP
((!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&		dev->state == MSM_CTRL_IDLE)
(!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&		dev->state == MSM_CTRL_IDLE
(!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG))
!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG
txn->mc
txn
txn
mc
SLIM_MSG_CLK_PAUSE_SEQ_FLG
SLIM_MSG_CLK_PAUSE_SEQ_FLG
dev->state == MSM_CTRL_IDLE
dev->state
dev
dev
state
MSM_CTRL_IDLE
MSM_CTRL_IDLE
{		dev_err(dev->dev, "runtime or system PM suspended state");		mutex_unlock(&dev->tx_lock);		if (msgv >= 0)			msm_slim_put_ctrl(dev);		return -EBUSY;	}
dev_err(dev->dev, "runtime or system PM suspended state");
dev_err(dev->dev, "runtime or system PM suspended state")
dev_err
dev_err
dev->dev
dev
dev
dev
"runtime or system PM suspended state"
mutex_unlock(&dev->tx_lock);
mutex_unlock(&dev->tx_lock)
mutex_unlock
mutex_unlock
&dev->tx_lock
dev->tx_lock
dev
dev
tx_lock
if (msgv >= 0)			msm_slim_put_ctrl(dev);
msgv >= 0
msgv
msgv
0
msm_slim_put_ctrl(dev);
msm_slim_put_ctrl(dev)
msm_slim_put_ctrl
msm_slim_put_ctrl
dev
dev
return -EBUSY;
-EBUSY
EBUSY
EBUSY
if (txn->mt == SLIM_MSG_MT_CORE &&		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION) {		if (dev->reconf_busy) {			wait_for_completion(&dev->reconf);			dev->reconf_busy = false;		}		/* This "get" votes for data channels */		if (dev->ctrl.sched.usedslots != 0 &&			!dev->chan_active) {			int chv = msm_slim_get_ctrl(dev);			if (chv >= 0)				dev->chan_active = true;		}	}
txn->mt == SLIM_MSG_MT_CORE &&		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION
txn->mt == SLIM_MSG_MT_CORE
txn->mt
txn
txn
mt
SLIM_MSG_MT_CORE
SLIM_MSG_MT_CORE
mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION
mc
mc
SLIM_MSG_MC_BEGIN_RECONFIGURATION
SLIM_MSG_MC_BEGIN_RECONFIGURATION
{		if (dev->reconf_busy) {			wait_for_completion(&dev->reconf);			dev->reconf_busy = false;		}		/* This "get" votes for data channels */		if (dev->ctrl.sched.usedslots != 0 &&			!dev->chan_active) {			int chv = msm_slim_get_ctrl(dev);			if (chv >= 0)				dev->chan_active = true;		}	}
if (dev->reconf_busy) {			wait_for_completion(&dev->reconf);			dev->reconf_busy = false;		}
dev->reconf_busy
dev
dev
reconf_busy
{			wait_for_completion(&dev->reconf);			dev->reconf_busy = false;		}
wait_for_completion(&dev->reconf);
wait_for_completion(&dev->reconf)
wait_for_completion
wait_for_completion
&dev->reconf
dev->reconf
dev
dev
reconf
dev->reconf_busy = false;
dev->reconf_busy = false
dev->reconf_busy
dev
dev
reconf_busy
false
if (dev->ctrl.sched.usedslots != 0 &&			!dev->chan_active) {			int chv = msm_slim_get_ctrl(dev);			if (chv >= 0)				dev->chan_active = true;		}
dev->ctrl.sched.usedslots != 0 &&			!dev->chan_active
dev->ctrl.sched.usedslots != 0
dev->ctrl.sched.usedslots
dev->ctrl.sched
dev->ctrl
dev
dev
ctrl
sched
usedslots
0
!dev->chan_active
dev->chan_active
dev
dev
chan_active
{			int chv = msm_slim_get_ctrl(dev);			if (chv >= 0)				dev->chan_active = true;		}
int chv = msm_slim_get_ctrl(dev);
int chv = msm_slim_get_ctrl(dev);
int
chv = msm_slim_get_ctrl(dev)
chv
= msm_slim_get_ctrl(dev)
msm_slim_get_ctrl(dev)
msm_slim_get_ctrl
msm_slim_get_ctrl
dev
dev
if (chv >= 0)				dev->chan_active = true;
chv >= 0
chv
chv
0
dev->chan_active = true;
dev->chan_active = true
dev->chan_active
dev
dev
chan_active
true
txn->rl--;
txn->rl--
txn->rl
txn
txn
rl
pbuf = msm_get_msg_buf(dev, txn->rl, &done);
pbuf = msm_get_msg_buf(dev, txn->rl, &done)
pbuf
pbuf
msm_get_msg_buf(dev, txn->rl, &done)
msm_get_msg_buf
msm_get_msg_buf
dev
dev
txn->rl
txn
txn
rl
&done
done
done
dev->err = 0;
dev->err = 0
dev->err
dev
dev
err
0
if (txn->dt == SLIM_MSG_DEST_ENUMADDR) {		mutex_unlock(&dev->tx_lock);		if (msgv >= 0)			msm_slim_put_ctrl(dev);		return -EPROTONOSUPPORT;	}
txn->dt == SLIM_MSG_DEST_ENUMADDR
txn->dt
txn
txn
dt
SLIM_MSG_DEST_ENUMADDR
SLIM_MSG_DEST_ENUMADDR
{		mutex_unlock(&dev->tx_lock);		if (msgv >= 0)			msm_slim_put_ctrl(dev);		return -EPROTONOSUPPORT;	}
mutex_unlock(&dev->tx_lock);
mutex_unlock(&dev->tx_lock)
mutex_unlock
mutex_unlock
&dev->tx_lock
dev->tx_lock
dev
dev
tx_lock
if (msgv >= 0)			msm_slim_put_ctrl(dev);
msgv >= 0
msgv
msgv
0
msm_slim_put_ctrl(dev);
msm_slim_put_ctrl(dev)
msm_slim_put_ctrl
msm_slim_put_ctrl
dev
dev
return -EPROTONOSUPPORT;
-EPROTONOSUPPORT
EPROTONOSUPPORT
EPROTONOSUPPORT
if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT))		la = dev->pgdla;
txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT)
txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF
txn->mt == SLIM_MSG_MT_CORE
txn->mt
txn
txn
mt
SLIM_MSG_MT_CORE
SLIM_MSG_MT_CORE
txn->la == 0xFF
txn->la
txn
txn
la
0xFF
(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT)
mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT
mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK
mc == SLIM_MSG_MC_CONNECT_SOURCE
mc
mc
SLIM_MSG_MC_CONNECT_SOURCE
SLIM_MSG_MC_CONNECT_SOURCE
mc == SLIM_MSG_MC_CONNECT_SINK
mc
mc
SLIM_MSG_MC_CONNECT_SINK
SLIM_MSG_MC_CONNECT_SINK
mc == SLIM_MSG_MC_DISCONNECT_PORT
mc
mc
SLIM_MSG_MC_DISCONNECT_PORT
SLIM_MSG_MC_DISCONNECT_PORT
la = dev->pgdla;
la = dev->pgdla
la
la
dev->pgdla
dev
dev
pgdla
if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)		*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 0, la);	else		*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 1, la);
txn->dt == SLIM_MSG_DEST_LOGICALADDR
txn->dt
txn
txn
dt
SLIM_MSG_DEST_LOGICALADDR
SLIM_MSG_DEST_LOGICALADDR
*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 0, la);
*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 0, la)
*pbuf
pbuf
pbuf
SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 0, la)
SLIM_MSG_ASM_FIRST_WORD
SLIM_MSG_ASM_FIRST_WORD
txn->rl
txn
txn
rl
txn->mt
txn
txn
mt
mc
mc
0
la
la
*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 1, la);
*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 1, la)
*pbuf
pbuf
pbuf
SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 1, la)
SLIM_MSG_ASM_FIRST_WORD
SLIM_MSG_ASM_FIRST_WORD
txn->rl
txn
txn
rl
txn->mt
txn
txn
mt
mc
mc
1
la
la
if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)		puc = ((u8 *)pbuf) + 3;	else		puc = ((u8 *)pbuf) + 2;
txn->dt == SLIM_MSG_DEST_LOGICALADDR
txn->dt
txn
txn
dt
SLIM_MSG_DEST_LOGICALADDR
SLIM_MSG_DEST_LOGICALADDR
puc = ((u8 *)pbuf) + 3;
puc = ((u8 *)pbuf) + 3
puc
puc
((u8 *)pbuf) + 3
((u8 *)pbuf)
(u8 *)pbuf
u8 *
u8
u8
*
*
pbuf
pbuf
3
puc = ((u8 *)pbuf) + 2;
puc = ((u8 *)pbuf) + 2
puc
puc
((u8 *)pbuf) + 2
((u8 *)pbuf)
(u8 *)pbuf
u8 *
u8
u8
*
*
pbuf
pbuf
2
if (txn->rbuf)		*(puc++) = txn->tid;
txn->rbuf
txn
txn
rbuf
*(puc++) = txn->tid;
*(puc++) = txn->tid
*(puc++)
(puc++)
puc++
puc
puc
txn->tid
txn
txn
tid
if ((txn->mt == SLIM_MSG_MT_CORE) &&		((mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&		mc <= SLIM_MSG_MC_REPORT_INFORMATION) ||		(mc >= SLIM_MSG_MC_REQUEST_VALUE &&		 mc <= SLIM_MSG_MC_CHANGE_VALUE))) {		*(puc++) = (txn->ec & 0xFF);		*(puc++) = (txn->ec >> 8)&0xFF;	}
(txn->mt == SLIM_MSG_MT_CORE) &&		((mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&		mc <= SLIM_MSG_MC_REPORT_INFORMATION) ||		(mc >= SLIM_MSG_MC_REQUEST_VALUE &&		 mc <= SLIM_MSG_MC_CHANGE_VALUE))
(txn->mt == SLIM_MSG_MT_CORE)
txn->mt == SLIM_MSG_MT_CORE
txn->mt
txn
txn
mt
SLIM_MSG_MT_CORE
SLIM_MSG_MT_CORE
((mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&		mc <= SLIM_MSG_MC_REPORT_INFORMATION) ||		(mc >= SLIM_MSG_MC_REQUEST_VALUE &&		 mc <= SLIM_MSG_MC_CHANGE_VALUE))
(mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&		mc <= SLIM_MSG_MC_REPORT_INFORMATION) ||		(mc >= SLIM_MSG_MC_REQUEST_VALUE &&		 mc <= SLIM_MSG_MC_CHANGE_VALUE)
(mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&		mc <= SLIM_MSG_MC_REPORT_INFORMATION)
mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&		mc <= SLIM_MSG_MC_REPORT_INFORMATION
mc >= SLIM_MSG_MC_REQUEST_INFORMATION
mc
mc
SLIM_MSG_MC_REQUEST_INFORMATION
SLIM_MSG_MC_REQUEST_INFORMATION
mc <= SLIM_MSG_MC_REPORT_INFORMATION
mc
mc
SLIM_MSG_MC_REPORT_INFORMATION
SLIM_MSG_MC_REPORT_INFORMATION
(mc >= SLIM_MSG_MC_REQUEST_VALUE &&		 mc <= SLIM_MSG_MC_CHANGE_VALUE)
mc >= SLIM_MSG_MC_REQUEST_VALUE &&		 mc <= SLIM_MSG_MC_CHANGE_VALUE
mc >= SLIM_MSG_MC_REQUEST_VALUE
mc
mc
SLIM_MSG_MC_REQUEST_VALUE
SLIM_MSG_MC_REQUEST_VALUE
mc <= SLIM_MSG_MC_CHANGE_VALUE
mc
mc
SLIM_MSG_MC_CHANGE_VALUE
SLIM_MSG_MC_CHANGE_VALUE
{		*(puc++) = (txn->ec & 0xFF);		*(puc++) = (txn->ec >> 8)&0xFF;	}
*(puc++) = (txn->ec & 0xFF);
*(puc++) = (txn->ec & 0xFF)
*(puc++)
(puc++)
puc++
puc
puc
(txn->ec & 0xFF)
txn->ec & 0xFF
txn->ec
txn
txn
ec
0xFF
*(puc++) = (txn->ec >> 8)&0xFF;
*(puc++) = (txn->ec >> 8)&0xFF
*(puc++)
(puc++)
puc++
puc
puc
(txn->ec >> 8)&0xFF
(txn->ec >> 8)
txn->ec >> 8
txn->ec
txn
txn
ec
8
0xFF
if (txn->wbuf)		memcpy(puc, txn->wbuf, txn->len);
txn->wbuf
txn
txn
wbuf
memcpy(puc, txn->wbuf, txn->len);
memcpy(puc, txn->wbuf, txn->len)
memcpy
memcpy
puc
puc
txn->wbuf
txn
txn
wbuf
txn->len
txn
txn
len
if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT)) {		if (mc != SLIM_MSG_MC_DISCONNECT_PORT)			dev->err = msm_slim_connect_pipe_port(dev, *puc);		else {			/*			 * Remove channel disconnects master-side ports from			 * channel. No need to send that again on the bus			 * Only disable port			 */			writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,					(*puc + dev->port_b), dev->ver));			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return 0;		}		if (dev->err) {			dev_err(dev->dev, "pipe-port connect err:%d", dev->err);			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return dev->err;		}		*(puc) = *(puc) + dev->port_b;	}
txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&		(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT)
txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF
txn->mt == SLIM_MSG_MT_CORE
txn->mt
txn
txn
mt
SLIM_MSG_MT_CORE
SLIM_MSG_MT_CORE
txn->la == 0xFF
txn->la
txn
txn
la
0xFF
(mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT)
mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK ||		 mc == SLIM_MSG_MC_DISCONNECT_PORT
mc == SLIM_MSG_MC_CONNECT_SOURCE ||		 mc == SLIM_MSG_MC_CONNECT_SINK
mc == SLIM_MSG_MC_CONNECT_SOURCE
mc
mc
SLIM_MSG_MC_CONNECT_SOURCE
SLIM_MSG_MC_CONNECT_SOURCE
mc == SLIM_MSG_MC_CONNECT_SINK
mc
mc
SLIM_MSG_MC_CONNECT_SINK
SLIM_MSG_MC_CONNECT_SINK
mc == SLIM_MSG_MC_DISCONNECT_PORT
mc
mc
SLIM_MSG_MC_DISCONNECT_PORT
SLIM_MSG_MC_DISCONNECT_PORT
{		if (mc != SLIM_MSG_MC_DISCONNECT_PORT)			dev->err = msm_slim_connect_pipe_port(dev, *puc);		else {			/*			 * Remove channel disconnects master-side ports from			 * channel. No need to send that again on the bus			 * Only disable port			 */			writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,					(*puc + dev->port_b), dev->ver));			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return 0;		}		if (dev->err) {			dev_err(dev->dev, "pipe-port connect err:%d", dev->err);			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return dev->err;		}		*(puc) = *(puc) + dev->port_b;	}
if (mc != SLIM_MSG_MC_DISCONNECT_PORT)			dev->err = msm_slim_connect_pipe_port(dev, *puc);		else {			/*			 * Remove channel disconnects master-side ports from			 * channel. No need to send that again on the bus			 * Only disable port			 */			writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,					(*puc + dev->port_b), dev->ver));			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return 0;		}
mc != SLIM_MSG_MC_DISCONNECT_PORT
mc
mc
SLIM_MSG_MC_DISCONNECT_PORT
SLIM_MSG_MC_DISCONNECT_PORT
dev->err = msm_slim_connect_pipe_port(dev, *puc);
dev->err = msm_slim_connect_pipe_port(dev, *puc)
dev->err
dev
dev
err
msm_slim_connect_pipe_port(dev, *puc)
msm_slim_connect_pipe_port
msm_slim_connect_pipe_port
dev
dev
*puc
puc
puc
{			/*			 * Remove channel disconnects master-side ports from			 * channel. No need to send that again on the bus			 * Only disable port			 */			writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,					(*puc + dev->port_b), dev->ver));			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return 0;		}
writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,					(*puc + dev->port_b), dev->ver));
writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,					(*puc + dev->port_b), dev->ver))
writel_relaxed
writel_relaxed
0
PGD_PORT(PGD_PORT_CFGn,					(*puc + dev->port_b), dev->ver)
PGD_PORT
PGD_PORT
PGD_PORT_CFGn
PGD_PORT_CFGn
(*puc + dev->port_b)
*puc + dev->port_b
*puc
puc
puc
dev->port_b
dev
dev
port_b
dev->ver
dev
dev
ver
mutex_unlock(&dev->tx_lock);
mutex_unlock(&dev->tx_lock)
mutex_unlock
mutex_unlock
&dev->tx_lock
dev->tx_lock
dev
dev
tx_lock
if (msgv >= 0)				msm_slim_put_ctrl(dev);
msgv >= 0
msgv
msgv
0
msm_slim_put_ctrl(dev);
msm_slim_put_ctrl(dev)
msm_slim_put_ctrl
msm_slim_put_ctrl
dev
dev
return 0;
0
if (dev->err) {			dev_err(dev->dev, "pipe-port connect err:%d", dev->err);			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return dev->err;		}
dev->err
dev
dev
err
{			dev_err(dev->dev, "pipe-port connect err:%d", dev->err);			mutex_unlock(&dev->tx_lock);			if (msgv >= 0)				msm_slim_put_ctrl(dev);			return dev->err;		}
dev_err(dev->dev, "pipe-port connect err:%d", dev->err);
dev_err(dev->dev, "pipe-port connect err:%d", dev->err)
dev_err
dev_err
dev->dev
dev
dev
dev
"pipe-port connect err:%d"
dev->err
dev
dev
err
mutex_unlock(&dev->tx_lock);
mutex_unlock(&dev->tx_lock)
mutex_unlock
mutex_unlock
&dev->tx_lock
dev->tx_lock
dev
dev
tx_lock
if (msgv >= 0)				msm_slim_put_ctrl(dev);
msgv >= 0
msgv
msgv
0
msm_slim_put_ctrl(dev);
msm_slim_put_ctrl(dev)
msm_slim_put_ctrl
msm_slim_put_ctrl
dev
dev
return dev->err;
dev->err
dev
dev
err
*(puc) = *(puc) + dev->port_b;
*(puc) = *(puc) + dev->port_b
*(puc)
(puc)
puc
puc
*(puc) + dev->port_b
*(puc)
(puc)
puc
puc
dev->port_b
dev
dev
port_b
if (txn->mt == SLIM_MSG_MT_CORE &&		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)		dev->reconf_busy = true;
txn->mt == SLIM_MSG_MT_CORE &&		mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION
txn->mt == SLIM_MSG_MT_CORE
txn->mt
txn
txn
mt
SLIM_MSG_MT_CORE
SLIM_MSG_MT_CORE
mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION
mc
mc
SLIM_MSG_MC_BEGIN_RECONFIGURATION
SLIM_MSG_MC_BEGIN_RECONFIGURATION
dev->reconf_busy = true;
dev->reconf_busy = true
dev->reconf_busy
dev
dev
reconf_busy
true
msm_send_msg_buf(dev, pbuf, txn->rl, MGR_TX_MSG);
msm_send_msg_buf(dev, pbuf, txn->rl, MGR_TX_MSG)
msm_send_msg_buf
msm_send_msg_buf
dev
dev
pbuf
pbuf
txn->rl
txn
txn
rl
MGR_TX_MSG
MGR_TX_MSG
timeout = wait_for_completion_timeout(&done, HZ);
timeout = wait_for_completion_timeout(&done, HZ)
timeout
timeout
wait_for_completion_timeout(&done, HZ)
wait_for_completion_timeout
wait_for_completion_timeout
&done
done
done
HZ
HZ
if (mc == SLIM_MSG_MC_RECONFIGURE_NOW) {		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				timeout) {			timeout = wait_for_completion_timeout(&dev->reconf, HZ);			dev->reconf_busy = false;			if (timeout) {				clk_disable_unprepare(dev->rclk);				disable_irq(dev->irq);			}		}		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				!timeout) {			dev->reconf_busy = false;			dev_err(dev->dev, "clock pause failed");			mutex_unlock(&dev->tx_lock);			return -ETIMEDOUT;		}		if (txn->mt == SLIM_MSG_MT_CORE &&			txn->mc == SLIM_MSG_MC_RECONFIGURE_NOW) {			if (dev->ctrl.sched.usedslots == 0 &&					dev->chan_active) {				dev->chan_active = false;				msm_slim_put_ctrl(dev);			}		}	}
mc == SLIM_MSG_MC_RECONFIGURE_NOW
mc
mc
SLIM_MSG_MC_RECONFIGURE_NOW
SLIM_MSG_MC_RECONFIGURE_NOW
{		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				timeout) {			timeout = wait_for_completion_timeout(&dev->reconf, HZ);			dev->reconf_busy = false;			if (timeout) {				clk_disable_unprepare(dev->rclk);				disable_irq(dev->irq);			}		}		if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				!timeout) {			dev->reconf_busy = false;			dev_err(dev->dev, "clock pause failed");			mutex_unlock(&dev->tx_lock);			return -ETIMEDOUT;		}		if (txn->mt == SLIM_MSG_MT_CORE &&			txn->mc == SLIM_MSG_MC_RECONFIGURE_NOW) {			if (dev->ctrl.sched.usedslots == 0 &&					dev->chan_active) {				dev->chan_active = false;				msm_slim_put_ctrl(dev);			}		}	}
if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				timeout) {			timeout = wait_for_completion_timeout(&dev->reconf, HZ);			dev->reconf_busy = false;			if (timeout) {				clk_disable_unprepare(dev->rclk);				disable_irq(dev->irq);			}		}
(txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				timeout
(txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG))
txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)
txn->mc
txn
txn
mc
(SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)
SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG
SLIM_MSG_MC_RECONFIGURE_NOW
SLIM_MSG_MC_RECONFIGURE_NOW
SLIM_MSG_CLK_PAUSE_SEQ_FLG
SLIM_MSG_CLK_PAUSE_SEQ_FLG
timeout
timeout
{			timeout = wait_for_completion_timeout(&dev->reconf, HZ);			dev->reconf_busy = false;			if (timeout) {				clk_disable_unprepare(dev->rclk);				disable_irq(dev->irq);			}		}
timeout = wait_for_completion_timeout(&dev->reconf, HZ);
timeout = wait_for_completion_timeout(&dev->reconf, HZ)
timeout
timeout
wait_for_completion_timeout(&dev->reconf, HZ)
wait_for_completion_timeout
wait_for_completion_timeout
&dev->reconf
dev->reconf
dev
dev
reconf
HZ
HZ
dev->reconf_busy = false;
dev->reconf_busy = false
dev->reconf_busy
dev
dev
reconf_busy
false
if (timeout) {				clk_disable_unprepare(dev->rclk);				disable_irq(dev->irq);			}
timeout
timeout
{				clk_disable_unprepare(dev->rclk);				disable_irq(dev->irq);			}
clk_disable_unprepare(dev->rclk);
clk_disable_unprepare(dev->rclk)
clk_disable_unprepare
clk_disable_unprepare
dev->rclk
dev
dev
rclk
disable_irq(dev->irq);
disable_irq(dev->irq)
disable_irq
disable_irq
dev->irq
dev
dev
irq
if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				!timeout) {			dev->reconf_busy = false;			dev_err(dev->dev, "clock pause failed");			mutex_unlock(&dev->tx_lock);			return -ETIMEDOUT;		}
(txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)) &&				!timeout
(txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG))
txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)
txn->mc
txn
txn
mc
(SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG)
SLIM_MSG_MC_RECONFIGURE_NOW |					SLIM_MSG_CLK_PAUSE_SEQ_FLG
SLIM_MSG_MC_RECONFIGURE_NOW
SLIM_MSG_MC_RECONFIGURE_NOW
SLIM_MSG_CLK_PAUSE_SEQ_FLG
SLIM_MSG_CLK_PAUSE_SEQ_FLG
!timeout
timeout
timeout
{			dev->reconf_busy = false;			dev_err(dev->dev, "clock pause failed");			mutex_unlock(&dev->tx_lock);			return -ETIMEDOUT;		}
dev->reconf_busy = false;
dev->reconf_busy = false
dev->reconf_busy
dev
dev
reconf_busy
false
dev_err(dev->dev, "clock pause failed");
dev_err(dev->dev, "clock pause failed")
dev_err
dev_err
dev->dev
dev
dev
dev
"clock pause failed"
mutex_unlock(&dev->tx_lock);
mutex_unlock(&dev->tx_lock)
mutex_unlock
mutex_unlock
&dev->tx_lock
dev->tx_lock
dev
dev
tx_lock
return -ETIMEDOUT;
-ETIMEDOUT
ETIMEDOUT
ETIMEDOUT
if (txn->mt == SLIM_MSG_MT_CORE &&			txn->mc == SLIM_MSG_MC_RECONFIGURE_NOW) {			if (dev->ctrl.sched.usedslots == 0 &&					dev->chan_active) {				dev->chan_active = false;				msm_slim_put_ctrl(dev);			}		}
txn->mt == SLIM_MSG_MT_CORE &&			txn->mc == SLIM_MSG_MC_RECONFIGURE_NOW
txn->mt == SLIM_MSG_MT_CORE
txn->mt
txn
txn
mt
SLIM_MSG_MT_CORE
SLIM_MSG_MT_CORE
txn->mc == SLIM_MSG_MC_RECONFIGURE_NOW
txn->mc
txn
txn
mc
SLIM_MSG_MC_RECONFIGURE_NOW
SLIM_MSG_MC_RECONFIGURE_NOW
{			if (dev->ctrl.sched.usedslots == 0 &&					dev->chan_active) {				dev->chan_active = false;				msm_slim_put_ctrl(dev);			}		}
if (dev->ctrl.sched.usedslots == 0 &&					dev->chan_active) {				dev->chan_active = false;				msm_slim_put_ctrl(dev);			}
dev->ctrl.sched.usedslots == 0 &&					dev->chan_active
dev->ctrl.sched.usedslots == 0
dev->ctrl.sched.usedslots
dev->ctrl.sched
dev->ctrl
dev
dev
ctrl
sched
usedslots
0
dev->chan_active
dev
dev
chan_active
{				dev->chan_active = false;				msm_slim_put_ctrl(dev);			}
dev->chan_active = false;
dev->chan_active = false
dev->chan_active
dev
dev
chan_active
false
msm_slim_put_ctrl(dev);
msm_slim_put_ctrl(dev)
msm_slim_put_ctrl
msm_slim_put_ctrl
dev
dev
mutex_unlock(&dev->tx_lock);
mutex_unlock(&dev->tx_lock)
mutex_unlock
mutex_unlock
&dev->tx_lock
dev->tx_lock
dev
dev
tx_lock
if (msgv >= 0)		msm_slim_put_ctrl(dev);
msgv >= 0
msgv
msgv
0
msm_slim_put_ctrl(dev);
msm_slim_put_ctrl(dev)
msm_slim_put_ctrl
msm_slim_put_ctrl
dev
dev
if (!timeout)		dev_err(dev->dev, "TX timed out:MC:0x%x,mt:0x%x", txn->mc,					txn->mt);
!timeout
timeout
timeout
dev_err(dev->dev, "TX timed out:MC:0x%x,mt:0x%x", txn->mc,					txn->mt);
dev_err(dev->dev, "TX timed out:MC:0x%x,mt:0x%x", txn->mc,					txn->mt)
dev_err
dev_err
dev->dev
dev
dev
dev
"TX timed out:MC:0x%x,mt:0x%x"
txn->mc
txn
txn
mc
txn->mt
txn
txn
mt
return timeout ? dev->err : -ETIMEDOUT;
timeout ? dev->err : -ETIMEDOUT
timeout
timeout
dev->err
dev
dev
err
-ETIMEDOUT
ETIMEDOUT
ETIMEDOUT
-----joern-----
(33,578,0)
(91,227,0)
(555,470,0)
(306,481,0)
(530,231,0)
(544,332,0)
(452,588,0)
(405,418,0)
(350,240,0)
(38,397,0)
(66,576,0)
(100,541,0)
(461,211,0)
(75,192,0)
(419,296,0)
(574,370,0)
(303,226,0)
(157,223,0)
(415,550,0)
(188,324,0)
(269,383,0)
(471,57,0)
(204,405,0)
(499,227,0)
(118,321,0)
(379,342,0)
(92,160,0)
(598,74,0)
(294,345,0)
(460,470,0)
(478,310,0)
(491,563,0)
(62,192,0)
(533,137,0)
(449,182,0)
(560,345,0)
(514,550,0)
(341,305,0)
(20,557,0)
(245,440,0)
(359,280,0)
(23,382,0)
(262,345,0)
(341,541,0)
(19,600,0)
(587,112,0)
(310,74,0)
(423,194,0)
(220,371,0)
(402,304,0)
(41,363,0)
(26,294,0)
(124,212,0)
(43,135,0)
(314,264,0)
(599,410,0)
(575,345,0)
(43,345,0)
(23,575,0)
(151,187,0)
(409,519,0)
(232,410,0)
(7,288,0)
(293,345,0)
(239,111,0)
(287,550,0)
(493,514,0)
(9,35,0)
(226,9,0)
(544,182,0)
(328,23,0)
(140,268,0)
(442,433,0)
(556,86,0)
(329,345,0)
(272,46,0)
(200,410,0)
(370,74,0)
(96,271,0)
(392,74,0)
(549,575,0)
(401,152,0)
(298,329,0)
(524,410,0)
(565,359,0)
(322,474,0)
(192,345,0)
(501,367,0)
(541,30,0)
(292,52,0)
(504,57,0)
(452,426,0)
(406,251,0)
(467,507,0)
(159,410,0)
(23,187,0)
(503,476,0)
(382,252,0)
(341,308,0)
(583,550,0)
(244,222,0)
(538,581,0)
(130,183,0)
(226,410,0)
(206,358,0)
(27,73,0)
(282,601,0)
(341,50,0)
(238,397,0)
(387,196,0)
(59,196,0)
(185,370,0)
(152,401,0)
(296,363,0)
(74,550,0)
(237,19,0)
(131,457,0)
(231,345,0)
(376,127,0)
(459,550,0)
(97,465,0)
(12,227,0)
(384,471,0)
(220,445,0)
(493,410,0)
(117,315,0)
(18,2,0)
(476,345,0)
(219,332,0)
(106,361,0)
(566,367,0)
(482,293,0)
(53,383,0)
(290,178,0)
(451,280,0)
(510,410,0)
(23,290,0)
(322,324,0)
(418,295,0)
(432,489,0)
(181,433,0)
(557,2,0)
(352,324,0)
(48,476,0)
(367,501,0)
(225,171,0)
(165,44,0)
(562,544,0)
(408,229,0)
(185,215,0)
(272,550,0)
(31,212,0)
(23,96,0)
(94,410,0)
(40,364,0)
(263,469,0)
(342,73,0)
(291,426,0)
(386,234,0)
(586,345,0)
(391,598,0)
(133,550,0)
(542,215,0)
(194,410,0)
(183,130,0)
(146,46,0)
(238,272,0)
(568,472,0)
(185,306,0)
(477,410,0)
(312,382,0)
(23,171,0)
(251,345,0)
(182,589,0)
(253,59,0)
(378,550,0)
(390,560,0)
(203,21,0)
(219,361,0)
(408,576,0)
(162,177,0)
(131,148,0)
(164,371,0)
(82,354,0)
(235,499,0)
(567,410,0)
(342,345,0)
(35,74,0)
(605,598,0)
(249,388,0)
(507,268,0)
(170,345,0)
(2,18,0)
(525,130,0)
(44,165,0)
(183,74,0)
(24,148,0)
(333,99,0)
(479,100,0)
(101,408,0)
(129,474,0)
(297,474,0)
(71,380,0)
(417,14,0)
(421,524,0)
(169,288,0)
(203,580,0)
(307,86,0)
(603,575,0)
(480,21,0)
(485,220,0)
(347,170,0)
(137,30,0)
(100,196,0)
(161,510,0)
(332,544,0)
(600,74,0)
(35,254,0)
(411,27,0)
(479,265,0)
(477,455,0)
(60,290,0)
(107,5,0)
(519,397,0)
(222,117,0)
(359,565,0)
(594,258,0)
(553,234,0)
(479,341,0)
(508,220,0)
(246,345,0)
(529,316,0)
(305,280,0)
(449,524,0)
(240,131,0)
(211,358,0)
(84,361,0)
(158,345,0)
(255,481,0)
(114,140,0)
(130,525,0)
(545,599,0)
(74,35,0)
(581,74,0)
(514,280,0)
(95,550,0)
(531,455,0)
(338,550,0)
(21,410,0)
(132,493,0)
(588,233,0)
(178,233,0)
(156,227,0)
(257,86,0)
(85,593,0)
(494,263,0)
(251,406,0)
(420,598,0)
(470,465,0)
(78,74,0)
(418,405,0)
(382,345,0)
(9,226,0)
(427,192,0)
(100,382,0)
(358,211,0)
(160,104,0)
(195,296,0)
(589,472,0)
(598,277,0)
(265,308,0)
(124,383,0)
(122,21,0)
(608,165,0)
(66,59,0)
(207,438,0)
(474,322,0)
(65,569,0)
(219,290,0)
(76,264,0)
(479,603,0)
(470,25,0)
(521,441,0)
(406,388,0)
(69,120,0)
(535,197,0)
(359,330,0)
(475,395,0)
(142,522,0)
(395,224,0)
(385,152,0)
(217,1,0)
(589,182,0)
(434,94,0)
(90,504,0)
(44,138,0)
(80,600,0)
(36,345,0)
(299,251,0)
(29,563,0)
(290,345,0)
(73,342,0)
(66,345,0)
(273,272,0)
(430,433,0)
(341,550,0)
(155,280,0)
(604,36,0)
(64,567,0)
(345,512,0)
(465,470,0)
(81,418,0)
(334,1,0)
(586,534,0)
(295,418,0)
(127,280,0)
(21,203,0)
(522,410,0)
(561,169,0)
(473,398,0)
(575,120,0)
(557,410,0)
(569,57,0)
(108,471,0)
(455,477,0)
(446,416,0)
(505,264,0)
(153,57,0)
(147,550,0)
(217,519,0)
(224,488,0)
(532,135,0)
(224,395,0)
(372,273,0)
(454,153,0)
(431,572,0)
(304,345,0)
(462,4,0)
(1,217,0)
(192,427,0)
(209,9,0)
(528,211,0)
(49,550,0)
(570,276,0)
(284,78,0)
(341,382,0)
(506,148,0)
(300,295,0)
(331,2,0)
(354,82,0)
(256,408,0)
(603,308,0)
(266,510,0)
(30,138,0)
(363,296,0)
(200,127,0)
(487,514,0)
(508,410,0)
(278,426,0)
(427,218,0)
(286,251,0)
(507,57,0)
(340,223,0)
(449,227,0)
(100,155,0)
(580,392,0)
(541,12,0)
(171,51,0)
(167,268,0)
(597,304,0)
(285,308,0)
(144,581,0)
(594,441,0)
(46,272,0)
(55,179,0)
(395,410,0)
(468,410,0)
(102,345,0)
(393,550,0)
(341,290,0)
(234,410,0)
(433,410,0)
(603,382,0)
(71,130,0)
(273,322,0)
(306,185,0)
(1,345,0)
(319,246,0)
(479,219,0)
(520,406,0)
(83,187,0)
(145,476,0)
(408,120,0)
(127,351,0)
(13,305,0)
(383,124,0)
(327,268,0)
(304,100,0)
(277,598,0)
(558,507,0)
(12,182,0)
(125,271,0)
(121,158,0)
(215,74,0)
(367,410,0)
(14,417,0)
(39,540,0)
(229,341,0)
(113,534,0)
(11,575,0)
(308,345,0)
(301,359,0)
(2,557,0)
(496,265,0)
(52,292,0)
(441,345,0)
(602,351,0)
(28,581,0)
(259,599,0)
(179,19,0)
(23,554,0)
(587,345,0)
(100,336,0)
(220,508,0)
(18,77,0)
(400,224,0)
(397,519,0)
(339,578,0)
(599,449,0)
(581,28,0)
(534,586,0)
(499,258,0)
(77,518,0)
(274,477,0)
(12,541,0)
(598,534,0)
(323,43,0)
(73,489,0)
(184,550,0)
(526,497,0)
(236,449,0)
(510,287,0)
(472,242,0)
(219,541,0)
(434,281,0)
(212,124,0)
(316,529,0)
(437,381,0)
(472,589,0)
(176,102,0)
(198,201,0)
(392,580,0)
(121,249,0)
(593,85,0)
(103,468,0)
(564,200,0)
(517,371,0)
(398,581,0)
(321,345,0)
(248,524,0)
(374,345,0)
(51,177,0)
(306,18,0)
(171,345,0)
(247,587,0)
(540,345,0)
(219,308,0)
(578,197,0)
(425,231,0)
(58,598,0)
(5,107,0)
(184,469,0)
(581,287,0)
(23,308,0)
(267,238,0)
(380,71,0)
(479,23,0)
(531,238,0)
(23,155,0)
(135,43,0)
(87,91,0)
(398,410,0)
(127,200,0)
(150,158,0)
(544,227,0)
(243,592,0)
(163,47,0)
(357,576,0)
(341,155,0)
(36,107,0)
(276,457,0)
(139,328,0)
(318,365,0)
(263,345,0)
(573,477,0)
(348,550,0)
(249,121,0)
(179,74,0)
(8,370,0)
(309,330,0)
(571,50,0)
(154,73,0)
(457,276,0)
(213,149,0)
(19,179,0)
(105,46,0)
(316,106,0)
(205,496,0)
(472,280,0)
(502,102,0)
(509,600,0)
(424,36,0)
(155,277,0)
(438,554,0)
(246,315,0)
(468,137,0)
(23,305,0)
(590,550,0)
(96,345,0)
(100,50,0)
(201,198,0)
(515,567,0)
(341,332,0)
(428,395,0)
(430,165,0)
(191,550,0)
(341,336,0)
(15,262,0)
(595,4,0)
(374,198,0)
(287,510,0)
(254,35,0)
(54,550,0)
(237,488,0)
(603,168,0)
(603,290,0)
(204,465,0)
(123,99,0)
(186,592,0)
(341,575,0)
(471,268,0)
(580,203,0)
(70,364,0)
(91,357,0)
(276,570,0)
(592,410,0)
(529,345,0)
(268,572,0)
(128,183,0)
(52,567,0)
(366,550,0)
(600,19,0)
(322,273,0)
(346,290,0)
(552,308,0)
(321,601,0)
(414,94,0)
(23,50,0)
(265,388,0)
(344,512,0)
(559,589,0)
(455,440,0)
(231,32,0)
(377,313,0)
(67,96,0)
(160,410,0)
(310,354,0)
(288,169,0)
(362,501,0)
(539,226,0)
(546,398,0)
(19,237,0)
(404,434,0)
(383,74,0)
(375,557,0)
(4,583,0)
(579,315,0)
(111,345,0)
(120,550,0)
(104,160,0)
(264,76,0)
(165,430,0)
(514,345,0)
(140,57,0)
(99,410,0)
(10,170,0)
(57,550,0)
(444,550,0)
(149,229,0)
(591,518,0)
(57,504,0)
(201,169,0)
(257,380,0)
(511,493,0)
(363,410,0)
(16,27,0)
(189,550,0)
(302,563,0)
(355,522,0)
(240,182,0)
(522,581,0)
(34,76,0)
(158,121,0)
(89,57,0)
(6,440,0)
(512,453,0)
(93,500,0)
(71,501,0)
(484,329,0)
(389,262,0)
(180,167,0)
(219,382,0)
(156,336,0)
(499,182,0)
(216,272,0)
(381,345,0)
(270,219,0)
(280,550,0)
(368,345,0)
(124,237,0)
(357,91,0)
(82,234,0)
(175,179,0)
(525,584,0)
(407,529,0)
(106,316,0)
(197,578,0)
(317,430,0)
(94,434,0)
(289,310,0)
(258,262,0)
(576,357,0)
(219,575,0)
(227,330,0)
(143,178,0)
(601,112,0)
(581,398,0)
(23,240,0)
(422,212,0)
(295,25,0)
(537,246,0)
(32,231,0)
(45,51,0)
(445,345,0)
(450,374,0)
(167,57,0)
(433,430,0)
(134,605,0)
(448,593,0)
(466,66,0)
(223,410,0)
(476,503,0)
(262,258,0)
(341,96,0)
(283,152,0)
(211,345,0)
(371,220,0)
(91,182,0)
(343,95,0)
(187,438,0)
(596,363,0)
(100,305,0)
(548,78,0)
(23,332,0)
(0,586,0)
(237,124,0)
(341,171,0)
(315,246,0)
(497,99,0)
(397,177,0)
(543,68,0)
(593,345,0)
(250,550,0)
(311,392,0)
(441,594,0)
(582,569,0)
(436,96,0)
(440,455,0)
(585,232,0)
(357,345,0)
(498,272,0)
(532,196,0)
(524,449,0)
(100,332,0)
(193,356,0)
(141,603,0)
(518,77,0)
(605,410,0)
(329,59,0)
(116,257,0)
(202,293,0)
(137,468,0)
(86,257,0)
(324,322,0)
(258,594,0)
(42,313,0)
(35,9,0)
(584,74,0)
(396,140,0)
(63,481,0)
(14,550,0)
(514,493,0)
(293,47,0)
(23,541,0)
(117,222,0)
(219,336,0)
(56,171,0)
(240,227,0)
(495,183,0)
(490,401,0)
(4,410,0)
(523,392,0)
(341,240,0)
(61,514,0)
(458,357,0)
(607,252,0)
(199,105,0)
(455,531,0)
(198,374,0)
(3,168,0)
(66,120,0)
(172,141,0)
(551,215,0)
(503,276,0)
(100,575,0)
(598,194,0)
(23,336,0)
(153,268,0)
(170,417,0)
(486,550,0)
(115,584,0)
(242,472,0)
(419,68,0)
(228,159,0)
(308,25,0)
(110,586,0)
(337,550,0)
(567,52,0)
(194,598,0)
(230,468,0)
(126,74,0)
(215,185,0)
(416,345,0)
(156,182,0)
(234,82,0)
(516,156,0)
(417,170,0)
(598,605,0)
(481,306,0)
(512,345,0)
(88,367,0)
(413,388,0)
(238,531,0)
(109,508,0)
(365,361,0)
(351,127,0)
(572,345,0)
(336,104,0)
(260,50,0)
(288,358,0)
(405,281,0)
(426,345,0)
(463,167,0)
(59,329,0)
(174,356,0)
(222,85,0)
(241,374,0)
(445,220,0)
(280,127,0)
(229,397,0)
(232,68,0)
(569,268,0)
(68,232,0)
(412,203,0)
(22,593,0)
(187,345,0)
(336,156,0)
(296,419,0)
(47,554,0)
(525,313,0)
(325,159,0)
(488,224,0)
(401,490,0)
(490,168,0)
(79,550,0)
(399,1,0)
(469,184,0)
(439,182,0)
(345,550,0)
(588,452,0)
(18,306,0)
(107,36,0)
(360,66,0)
(99,497,0)
(173,43,0)
(527,550,0)
(426,452,0)
(47,293,0)
(326,158,0)
(219,155,0)
(403,229,0)
(279,94,0)
(330,359,0)
(449,599,0)
(264,410,0)
(130,71,0)
(592,518,0)
(229,272,0)
(85,222,0)
(364,74,0)
(216,397,0)
(127,345,0)
(210,321,0)
(100,308,0)
(358,288,0)
(313,525,0)
(443,529,0)
(470,345,0)
(330,227,0)
(258,499,0)
(481,74,0)
(320,594,0)
(394,295,0)
(335,216,0)
(281,405,0)
(464,82,0)
(169,201,0)
(68,419,0)
(518,592,0)
(583,4,0)
(405,204,0)
(313,74,0)
(17,445,0)
(32,218,0)
(492,382,0)
(212,74,0)
(77,18,0)
(380,257,0)
(214,508,0)
(598,287,0)
(5,554,0)
(324,410,0)
(519,217,0)
(365,594,0)
(135,532,0)
(593,252,0)
(581,534,0)
(370,185,0)
(457,131,0)
(152,345,0)
(315,117,0)
(229,149,0)
(221,441,0)
(98,605,0)
(30,137,0)
(373,155,0)
(119,200,0)
(72,514,0)
(371,410,0)
(50,576,0)
(572,268,0)
(353,232,0)
(447,550,0)
(276,503,0)
(578,410,0)
(369,52,0)
(229,408,0)
(483,160,0)
(86,410,0)
(606,489,0)
(469,263,0)
(547,294,0)
(501,71,0)
(465,204,0)
(429,584,0)
(281,434,0)
(208,263,0)
(349,445,0)
(261,550,0)
(190,227,0)
(305,28,0)
(488,237,0)
(594,365,0)
(332,44,0)
(219,305,0)
(513,581,0)
(59,66,0)
(37,153,0)
(577,287,0)
(100,290,0)
(354,310,0)
(456,25,0)
(584,525,0)
(408,345,0)
(275,194,0)
(581,522,0)
(50,345,0)
(435,117,0)
(341,321,0)
(295,345,0)
(46,105,0)
(536,550,0)
(166,12,0)
(203,21,1)
(156,227,1)
(341,240,1)
(409,217,1)
(51,45,1)
(42,183,1)
(433,442,1)
(541,12,1)
(341,321,1)
(94,414,1)
(200,410,1)
(349,17,1)
(5,107,1)
(528,178,1)
(8,574,1)
(153,57,1)
(66,345,1)
(475,428,1)
(221,521,1)
(474,129,1)
(278,102,1)
(23,336,1)
(100,575,1)
(604,424,1)
(573,136,1)
(380,257,1)
(258,262,1)
(237,19,1)
(37,454,1)
(145,48,1)
(479,265,1)
(544,562,1)
(48,240,1)
(118,210,1)
(597,111,1)
(341,541,1)
(435,315,1)
(603,141,1)
(422,19,1)
(306,185,1)
(1,345,1)
(569,65,1)
(452,426,1)
(595,201,1)
(143,290,1)
(419,296,1)
(408,345,1)
(322,324,1)
(567,64,1)
(566,88,1)
(575,345,1)
(553,386,1)
(301,190,1)
(170,10,1)
(158,345,1)
(10,347,1)
(398,410,1)
(560,390,1)
(262,15,1)
(436,580,1)
(335,507,1)
(100,155,1)
(192,345,1)
(598,605,1)
(46,105,1)
(461,528,1)
(514,487,1)
(100,541,1)
(58,391,1)
(216,272,1)
(370,74,1)
(95,343,1)
(173,323,1)
(476,345,1)
(391,420,1)
(321,345,1)
(122,77,1)
(525,584,1)
(608,430,1)
(63,2,1)
(428,223,1)
(588,452,1)
(27,16,1)
(232,410,1)
(4,462,1)
(241,450,1)
(572,345,1)
(253,329,1)
(543,232,1)
(116,86,1)
(94,410,1)
(259,524,1)
(238,272,1)
(100,304,1)
(277,598,1)
(477,274,1)
(251,345,1)
(123,333,1)
(402,597,1)
(7,358,1)
(464,234,1)
(568,439,1)
(160,410,1)
(497,526,1)
(9,226,1)
(394,300,1)
(26,547,1)
(581,287,1)
(310,478,1)
(208,494,1)
(333,120,1)
(600,74,1)
(71,501,1)
(325,228,1)
(27,73,1)
(175,55,1)
(358,206,1)
(205,560,1)
(319,537,1)
(573,427,1)
(569,268,1)
(183,74,1)
(404,94,1)
(210,85,1)
(152,345,1)
(263,345,1)
(80,509,1)
(607,382,1)
(225,56,1)
(497,99,1)
(14,417,1)
(236,159,1)
(603,382,1)
(346,588,1)
(523,311,1)
(537,419,1)
(581,522,1)
(450,169,1)
(219,305,1)
(443,365,1)
(354,310,1)
(582,268,1)
(46,146,1)
(330,359,1)
(519,409,1)
(370,8,1)
(50,260,1)
(581,534,1)
(23,155,1)
(111,239,1)
(502,176,1)
(289,82,1)
(35,254,1)
(198,374,1)
(341,50,1)
(294,345,1)
(91,87,1)
(2,557,1)
(520,251,1)
(77,18,1)
(593,345,1)
(204,465,1)
(251,299,1)
(341,171,1)
(1,399,1)
(479,603,1)
(158,326,1)
(327,292,1)
(390,153,1)
(258,499,1)
(139,5,1)
(152,283,1)
(509,179,1)
(170,345,1)
(533,468,1)
(216,397,1)
(398,546,1)
(81,295,1)
(141,172,1)
(359,565,1)
(132,72,1)
(204,405,1)
(586,345,1)
(498,514,1)
(153,37,1)
(547,576,1)
(102,502,1)
(414,279,1)
(318,78,1)
(471,57,1)
(144,538,1)
(578,410,1)
(478,289,1)
(384,108,1)
(594,441,1)
(103,541,1)
(100,305,1)
(97,470,1)
(484,294,1)
(217,1,1)
(28,581,1)
(540,39,1)
(374,241,1)
(342,345,1)
(82,464,1)
(78,74,1)
(295,25,1)
(407,443,1)
(472,242,1)
(23,541,1)
(581,398,1)
(296,363,1)
(529,407,1)
(303,539,1)
(406,520,1)
(481,74,1)
(308,552,1)
(549,11,1)
(499,227,1)
(307,497,1)
(341,332,1)
(41,531,1)
(11,280,1)
(455,440,1)
(334,38,1)
(551,481,1)
(518,592,1)
(449,524,1)
(529,345,1)
(598,287,1)
(521,258,1)
(270,140,1)
(215,74,1)
(0,110,1)
(294,26,1)
(314,380,1)
(33,339,1)
(129,297,1)
(514,345,1)
(104,160,1)
(434,94,1)
(187,83,1)
(589,472,1)
(74,35,1)
(273,322,1)
(12,227,1)
(324,352,1)
(211,345,1)
(61,580,1)
(276,503,1)
(449,599,1)
(339,28,1)
(545,259,1)
(92,336,1)
(320,318,1)
(522,410,1)
(23,332,1)
(228,488,1)
(417,170,1)
(23,308,1)
(321,118,1)
(91,182,1)
(171,225,1)
(212,31,1)
(421,236,1)
(445,349,1)
(219,575,1)
(88,257,1)
(375,518,1)
(199,498,1)
(82,234,1)
(592,410,1)
(21,410,1)
(561,288,1)
(580,392,1)
(78,548,1)
(70,40,1)
(501,362,1)
(595,252,1)
(22,448,1)
(504,90,1)
(32,231,1)
(469,263,1)
(270,416,1)
(172,381,1)
(131,457,1)
(107,36,1)
(238,267,1)
(215,542,1)
(229,272,1)
(169,561,1)
(248,421,1)
(36,604,1)
(271,125,1)
(169,288,1)
(44,165,1)
(382,312,1)
(125,96,1)
(224,395,1)
(598,58,1)
(228,44,1)
(59,329,1)
(376,451,1)
(426,345,1)
(86,556,1)
(150,406,1)
(85,222,1)
(12,182,1)
(440,6,1)
(91,227,1)
(518,591,1)
(283,385,1)
(59,66,1)
(581,144,1)
(179,74,1)
(347,587,1)
(184,469,1)
(472,280,1)
(240,350,1)
(538,513,1)
(418,81,1)
(50,345,1)
(295,394,1)
(470,555,1)
(23,328,1)
(38,273,1)
(466,360,1)
(222,117,1)
(463,180,1)
(256,101,1)
(399,334,1)
(137,468,1)
(124,383,1)
(362,367,1)
(427,192,1)
(267,455,1)
(222,244,1)
(314,534,1)
(18,306,1)
(77,518,1)
(76,34,1)
(266,161,1)
(363,596,1)
(586,0,1)
(287,510,1)
(83,151,1)
(23,50,1)
(455,477,1)
(238,397,1)
(389,499,1)
(86,410,1)
(180,532,1)
(297,324,1)
(13,76,1)
(323,59,1)
(492,27,1)
(587,247,1)
(381,437,1)
(187,345,1)
(60,346,1)
(598,534,1)
(69,575,1)
(595,354,1)
(582,292,1)
(600,80,1)
(66,466,1)
(68,543,1)
(167,57,1)
(262,345,1)
(298,484,1)
(480,122,1)
(275,605,1)
(352,188,1)
(285,569,1)
(331,557,1)
(438,207,1)
(243,159,1)
(224,400,1)
(341,336,1)
(584,115,1)
(598,74,1)
(448,222,1)
(556,307,1)
(247,601,1)
(598,194,1)
(73,342,1)
(405,418,1)
(186,243,1)
(296,195,1)
(9,209,1)
(507,467,1)
(55,224,1)
(117,315,1)
(239,167,1)
(392,523,1)
(265,308,1)
(182,589,1)
(304,345,1)
(34,264,1)
(560,345,1)
(219,290,1)
(579,246,1)
(124,212,1)
(368,95,1)
(353,296,1)
(403,220,1)
(546,473,1)
(542,551,1)
(585,353,1)
(206,211,1)
(508,214,1)
(528,102,1)
(176,354,1)
(449,182,1)
(315,246,1)
(209,226,1)
(68,232,1)
(510,410,1)
(183,495,1)
(381,345,1)
(397,519,1)
(496,205,1)
(345,512,1)
(465,97,1)
(495,128,1)
(341,575,1)
(76,264,1)
(488,237,1)
(406,251,1)
(445,345,1)
(605,134,1)
(85,593,1)
(374,345,1)
(140,114,1)
(43,345,1)
(531,238,1)
(23,305,1)
(576,357,1)
(501,367,1)
(62,32,1)
(574,215,1)
(322,474,1)
(234,553,1)
(67,436,1)
(102,345,1)
(211,461,1)
(20,375,1)
(71,130,1)
(512,453,1)
(234,410,1)
(100,332,1)
(335,540,1)
(167,268,1)
(194,423,1)
(493,410,1)
(100,336,1)
(339,277,1)
(544,227,1)
(36,345,1)
(75,62,1)
(519,217,1)
(219,155,1)
(188,364,1)
(99,123,1)
(513,398,1)
(213,403,1)
(130,183,1)
(100,308,1)
(512,344,1)
(479,100,1)
(328,139,1)
(21,480,1)
(593,252,1)
(172,471,1)
(64,515,1)
(425,136,1)
(524,248,1)
(312,492,1)
(468,230,1)
(163,293,1)
(583,4,1)
(23,382,1)
(580,203,1)
(257,116,1)
(16,411,1)
(365,594,1)
(503,476,1)
(359,280,1)
(23,240,1)
(603,575,1)
(154,201,1)
(280,127,1)
(140,268,1)
(127,345,1)
(282,321,1)
(383,53,1)
(364,74,1)
(460,184,1)
(243,449,1)
(364,70,1)
(428,104,1)
(418,295,1)
(499,235,1)
(372,322,1)
(114,396,1)
(52,369,1)
(39,507,1)
(195,363,1)
(313,377,1)
(157,227,1)
(237,124,1)
(229,408,1)
(532,135,1)
(264,505,1)
(567,410,1)
(220,508,1)
(514,280,1)
(470,25,1)
(47,293,1)
(510,266,1)
(377,42,1)
(487,493,1)
(430,433,1)
(52,567,1)
(603,290,1)
(336,156,1)
(110,113,1)
(341,305,1)
(430,317,1)
(201,198,1)
(599,410,1)
(231,345,1)
(127,200,1)
(594,258,1)
(216,335,1)
(479,341,1)
(315,579,1)
(326,150,1)
(355,142,1)
(56,397,1)
(96,345,1)
(562,30,1)
(555,460,1)
(511,132,1)
(416,345,1)
(449,227,1)
(219,541,1)
(548,284,1)
(6,245,1)
(473,522,1)
(226,303,1)
(220,371,1)
(101,403,1)
(456,308,1)
(113,380,1)
(540,345,1)
(140,57,1)
(340,157,1)
(89,345,1)
(351,602,1)
(544,182,1)
(468,410,1)
(135,43,1)
(395,475,1)
(479,23,1)
(578,33,1)
(226,410,1)
(220,445,1)
(295,345,1)
(526,99,1)
(90,89,1)
(288,358,1)
(530,425,1)
(403,216,1)
(126,287,1)
(558,14,1)
(257,86,1)
(603,308,1)
(53,269,1)
(311,203,1)
(227,330,1)
(200,564,1)
(360,253,1)
(202,438,1)
(602,200,1)
(136,51,1)
(408,576,1)
(121,158,1)
(437,471,1)
(571,78,1)
(493,511,1)
(276,570,1)
(190,197,1)
(420,194,1)
(142,305,1)
(354,82,1)
(557,20,1)
(482,202,1)
(23,171,1)
(185,370,1)
(477,410,1)
(535,578,1)
(531,455,1)
(45,171,1)
(120,69,1)
(424,47,1)
(119,376,1)
(423,275,1)
(160,483,1)
(592,186,1)
(128,501,1)
(507,57,1)
(371,164,1)
(155,280,1)
(304,402,1)
(332,544,1)
(290,60,1)
(151,531,1)
(212,74,1)
(157,182,1)
(479,219,1)
(197,578,1)
(347,85,1)
(517,485,1)
(273,372,1)
(235,320,1)
(358,211,1)
(219,336,1)
(178,143,1)
(324,410,1)
(357,345,1)
(165,608,1)
(229,149,1)
(341,96,1)
(244,117,1)
(19,600,1)
(347,364,1)
(260,571,1)
(279,465,1)
(273,272,1)
(405,281,1)
(61,271,1)
(185,215,1)
(245,477,1)
(23,187,1)
(232,585,1)
(156,182,1)
(179,175,1)
(181,332,1)
(25,456,1)
(12,166,1)
(593,22,1)
(494,569,1)
(205,153,1)
(305,13,1)
(194,410,1)
(367,566,1)
(454,249,1)
(471,268,1)
(66,120,1)
(395,410,1)
(66,576,1)
(223,340,1)
(383,74,1)
(369,567,1)
(573,273,1)
(451,583,1)
(347,419,1)
(167,463,1)
(108,490,1)
(246,345,1)
(156,516,1)
(122,131,1)
(539,126,1)
(508,410,1)
(284,77,1)
(100,290,1)
(426,291,1)
(329,345,1)
(371,410,1)
(57,504,1)
(458,50,1)
(19,179,1)
(2,331,1)
(411,73,1)
(490,401,1)
(557,410,1)
(434,404,1)
(43,173,1)
(575,549,1)
(159,325,1)
(223,410,1)
(18,2,1)
(268,572,1)
(467,558,1)
(564,119,1)
(433,410,1)
(290,345,1)
(308,345,1)
(577,57,1)
(514,493,1)
(601,282,1)
(442,181,1)
(385,497,1)
(401,152,1)
(246,319,1)
(329,298,1)
(408,256,1)
(499,182,1)
(439,197,1)
(416,446,1)
(342,379,1)
(596,41,1)
(72,61,1)
(572,431,1)
(263,208,1)
(552,285,1)
(269,212,1)
(341,382,1)
(534,586,1)
(230,103,1)
(153,268,1)
(293,482,1)
(100,382,1)
(305,280,1)
(589,559,1)
(201,169,1)
(472,568,1)
(134,98,1)
(507,268,1)
(164,517,1)
(515,74,1)
(441,345,1)
(306,481,1)
(98,155,1)
(488,224,1)
(522,355,1)
(252,607,1)
(396,106,1)
(249,121,1)
(408,120,1)
(386,204,1)
(441,221,1)
(161,577,1)
(367,410,1)
(96,67,1)
(219,308,1)
(584,74,1)
(476,145,1)
(106,316,1)
(457,276,1)
(525,313,1)
(197,535,1)
(281,434,1)
(99,410,1)
(109,371,1)
(111,345,1)
(171,345,1)
(559,472,1)
(100,50,1)
(165,430,1)
(264,410,1)
(229,397,1)
(47,163,1)
(300,281,1)
(240,227,1)
(127,351,1)
(341,229,1)
(274,573,1)
(272,46,1)
(30,137,1)
(15,389,1)
(313,74,1)
(392,74,1)
(363,410,1)
(65,582,1)
(231,530,1)
(146,105,1)
(23,575,1)
(446,140,1)
(214,109,1)
(599,545,1)
(419,68,1)
(341,290,1)
(31,422,1)
(379,154,1)
(292,52,1)
(431,327,1)
(137,533,1)
(357,91,1)
(341,155,1)
(597,167,1)
(581,74,1)
(595,27,1)
(330,309,1)
(494,25,1)
(35,9,1)
(159,410,1)
(591,592,1)
(255,63,1)
(380,71,1)
(219,270,1)
(605,410,1)
(462,595,1)
(105,199,1)
(192,75,1)
(203,412,1)
(316,529,1)
(359,301,1)
(265,496,1)
(483,92,1)
(373,76,1)
(40,272,1)
(155,373,1)
(382,345,1)
(516,223,1)
(117,435,1)
(23,290,1)
(23,96,1)
(350,294,1)
(429,313,1)
(412,21,1)
(149,213,1)
(4,410,1)
(471,384,1)
(219,332,1)
(524,410,1)
(485,445,1)
(291,278,1)
(587,345,1)
(240,182,1)
(130,525,1)
(344,368,1)
(310,74,1)
(299,286,1)
(341,308,1)
(569,57,1)
(286,204,1)
(17,216,1)
(317,433,1)
(87,458,1)
(219,382,1)
(505,314,1)
(293,345,1)
(115,429,1)
(481,255,1)
(166,488,1)
(288,7,1)
(465,470,1)
(207,187,1)
(400,395,1)
(470,345,1)
(309,359,1)
(534,586,2)
(225,273,2)
(598,74,2)
(237,224,2)
(310,74,2)
(36,345,2)
(518,592,2)
(329,345,2)
(16,201,2)
(167,57,2)
(523,203,2)
(498,77,2)
(295,25,2)
(30,137,2)
(2,518,2)
(449,524,2)
(341,240,2)
(392,203,2)
(206,354,2)
(120,204,2)
(202,531,2)
(91,78,2)
(127,204,2)
(10,364,2)
(419,531,2)
(152,497,2)
(130,501,2)
(74,35,2)
(347,364,2)
(406,251,2)
(581,74,2)
(511,294,2)
(585,296,2)
(214,216,2)
(396,78,2)
(240,227,2)
(273,322,2)
(541,12,2)
(391,76,2)
(185,481,2)
(25,569,2)
(490,401,2)
(450,169,2)
(322,324,2)
(100,294,2)
(359,197,2)
(430,433,2)
(471,497,2)
(7,354,2)
(224,497,2)
(525,313,2)
(100,308,2)
(408,403,2)
(223,410,2)
(259,159,2)
(559,197,2)
(463,294,2)
(530,136,2)
(558,364,2)
(4,204,2)
(314,497,2)
(465,470,2)
(76,264,2)
(478,82,2)
(219,382,2)
(219,308,2)
(2,557,2)
(546,76,2)
(605,410,2)
(315,419,2)
(188,364,2)
(199,294,2)
(471,268,2)
(124,19,2)
(332,488,2)
(252,27,2)
(251,345,2)
(14,531,2)
(449,182,2)
(237,19,2)
(219,332,2)
(12,227,2)
(156,227,2)
(602,204,2)
(268,572,2)
(232,296,2)
(397,519,2)
(335,364,2)
(31,19,2)
(520,204,2)
(269,212,2)
(525,584,2)
(380,71,2)
(398,410,2)
(354,310,2)
(301,197,2)
(471,57,2)
(406,204,2)
(600,179,2)
(479,23,2)
(121,158,2)
(45,273,2)
(37,204,2)
(183,74,2)
(456,569,2)
(264,497,2)
(306,185,2)
(194,410,2)
(100,541,2)
(495,501,2)
(603,308,2)
(529,345,2)
(418,295,2)
(115,313,2)
(140,78,2)
(433,410,2)
(342,345,2)
(185,215,2)
(13,76,2)
(472,242,2)
(470,345,2)
(149,403,2)
(509,179,2)
(313,183,2)
(576,78,2)
(167,268,2)
(72,294,2)
(580,392,2)
(488,497,2)
(544,227,2)
(44,488,2)
(480,77,2)
(578,497,2)
(600,74,2)
(449,159,2)
(156,223,2)
(182,589,2)
(592,497,2)
(318,78,2)
(198,169,2)
(380,257,2)
(210,85,2)
(294,345,2)
(211,354,2)
(436,580,2)
(364,74,2)
(179,224,2)
(132,294,2)
(479,219,2)
(371,216,2)
(101,403,2)
(190,197,2)
(44,165,2)
(256,403,2)
(262,78,2)
(599,159,2)
(481,74,2)
(493,294,2)
(12,182,2)
(232,410,2)
(187,531,2)
(323,294,2)
(23,240,2)
(265,308,2)
(548,77,2)
(317,488,2)
(449,599,2)
(273,364,2)
(545,159,2)
(560,153,2)
(23,171,2)
(102,345,2)
(119,204,2)
(50,78,2)
(86,410,2)
(533,488,2)
(278,102,2)
(221,78,2)
(499,78,2)
(78,77,2)
(146,294,2)
(408,576,2)
(68,232,2)
(199,77,2)
(91,182,2)
(21,294,2)
(36,531,2)
(336,156,2)
(598,194,2)
(467,531,2)
(117,419,2)
(59,66,2)
(482,531,2)
(571,78,2)
(587,345,2)
(473,76,2)
(40,77,2)
(11,204,2)
(425,136,2)
(57,504,2)
(180,294,2)
(163,531,2)
(94,410,2)
(455,440,2)
(408,120,2)
(262,345,2)
(586,345,2)
(404,465,2)
(568,197,2)
(547,78,2)
(21,77,2)
(18,306,2)
(320,78,2)
(397,273,2)
(434,465,2)
(336,223,2)
(111,167,2)
(448,222,2)
(315,246,2)
(99,410,2)
(203,77,2)
(365,594,2)
(272,77,2)
(272,46,2)
(137,488,2)
(541,488,2)
(364,294,2)
(431,292,2)
(342,201,2)
(306,481,2)
(558,531,2)
(66,576,2)
(231,136,2)
(594,78,2)
(239,167,2)
(472,280,2)
(497,204,2)
(150,204,2)
(272,294,2)
(316,78,2)
(309,197,2)
(100,336,2)
(341,531,2)
(265,204,2)
(308,345,2)
(449,227,2)
(595,204,2)
(200,204,2)
(153,57,2)
(153,268,2)
(238,455,2)
(469,263,2)
(479,100,2)
(408,345,2)
(316,529,2)
(439,197,2)
(498,294,2)
(105,77,2)
(446,140,2)
(503,294,2)
(603,290,2)
(283,497,2)
(557,518,2)
(531,364,2)
(152,345,2)
(296,531,2)
(229,364,2)
(247,85,2)
(238,397,2)
(443,78,2)
(341,308,2)
(207,531,2)
(282,85,2)
(273,272,2)
(339,497,2)
(185,370,2)
(367,257,2)
(107,531,2)
(103,488,2)
(186,497,2)
(591,497,2)
(293,531,2)
(341,336,2)
(534,380,2)
(433,488,2)
(440,364,2)
(581,534,2)
(281,465,2)
(117,315,2)
(481,2,2)
(171,345,2)
(423,76,2)
(589,472,2)
(99,204,2)
(73,342,2)
(341,575,2)
(416,345,2)
(479,341,2)
(501,367,2)
(383,212,2)
(487,77,2)
(231,345,2)
(543,296,2)
(352,364,2)
(204,465,2)
(23,336,2)
(287,510,2)
(430,488,2)
(134,76,2)
(23,531,2)
(56,273,2)
(401,497,2)
(556,497,2)
(392,74,2)
(43,345,2)
(62,136,2)
(27,201,2)
(22,222,2)
(508,216,2)
(597,294,2)
(122,294,2)
(507,57,2)
(508,410,2)
(124,212,2)
(305,280,2)
(43,294,2)
(351,204,2)
(380,497,2)
(229,397,2)
(552,569,2)
(23,541,2)
(540,507,2)
(73,201,2)
(217,1,2)
(569,268,2)
(592,410,2)
(129,364,2)
(327,292,2)
(94,465,2)
(200,410,2)
(276,294,2)
(5,531,2)
(405,281,2)
(375,518,2)
(603,382,2)
(424,531,2)
(417,531,2)
(298,294,2)
(308,569,2)
(560,345,2)
(146,77,2)
(334,273,2)
(341,50,2)
(104,160,2)
(201,198,2)
(92,223,2)
(524,159,2)
(9,226,2)
(562,488,2)
(66,120,2)
(399,273,2)
(394,281,2)
(157,497,2)
(144,76,2)
(145,294,2)
(441,78,2)
(86,497,2)
(28,581,2)
(96,580,2)
(354,204,2)
(33,497,2)
(288,358,2)
(518,497,2)
(564,204,2)
(100,305,2)
(542,481,2)
(510,410,2)
(497,99,2)
(580,203,2)
(136,273,2)
(96,345,2)
(166,488,2)
(485,216,2)
(20,518,2)
(466,294,2)
(479,265,2)
(35,254,2)
(429,313,2)
(365,78,2)
(205,204,2)
(304,294,2)
(100,382,2)
(192,136,2)
(382,27,2)
(141,497,2)
(107,36,2)
(82,204,2)
(263,345,2)
(384,497,2)
(479,603,2)
(603,497,2)
(341,155,2)
(292,52,2)
(18,2,2)
(172,497,2)
(477,410,2)
(474,364,2)
(169,288,2)
(179,74,2)
(458,78,2)
(374,169,2)
(598,76,2)
(357,345,2)
(417,170,2)
(402,294,2)
(246,345,2)
(341,290,2)
(492,27,2)
(513,76,2)
(220,216,2)
(215,481,2)
(574,215,2)
(155,76,2)
(321,345,2)
(139,531,2)
(23,187,2)
(236,159,2)
(122,77,2)
(284,77,2)
(370,215,2)
(426,102,2)
(246,419,2)
(526,204,2)
(253,294,2)
(346,102,2)
(381,345,2)
(604,531,2)
(67,580,2)
(176,354,2)
(220,371,2)
(596,531,2)
(353,296,2)
(374,345,2)
(505,497,2)
(299,204,2)
(321,85,2)
(428,497,2)
(583,204,2)
(291,102,2)
(427,136,2)
(173,294,2)
(32,231,2)
(359,565,2)
(76,497,2)
(601,85,2)
(483,223,2)
(476,294,2)
(355,76,2)
(23,308,2)
(358,211,2)
(18,518,2)
(69,204,2)
(290,345,2)
(23,96,2)
(227,330,2)
(70,294,2)
(519,273,2)
(40,294,2)
(475,497,2)
(19,224,2)
(276,503,2)
(581,287,2)
(359,280,2)
(403,364,2)
(593,252,2)
(130,183,2)
(53,212,2)
(330,197,2)
(98,76,2)
(23,305,2)
(0,380,2)
(68,296,2)
(26,78,2)
(183,501,2)
(158,345,2)
(116,497,2)
(468,488,2)
(531,238,2)
(234,204,2)
(409,273,2)
(499,227,2)
(128,501,2)
(310,82,2)
(23,575,2)
(289,82,2)
(142,76,2)
(1,345,2)
(227,197,2)
(319,419,2)
(363,410,2)
(124,383,2)
(78,74,2)
(307,497,2)
(127,200,2)
(412,294,2)
(386,204,2)
(330,359,2)
(165,430,2)
(23,155,2)
(100,290,2)
(102,354,2)
(593,345,2)
(169,354,2)
(277,598,2)
(50,345,2)
(271,580,2)
(82,234,2)
(419,68,2)
(294,78,2)
(296,363,2)
(516,223,2)
(286,204,2)
(350,294,2)
(325,497,2)
(154,201,2)
(588,102,2)
(135,43,2)
(260,78,2)
(219,290,2)
(212,19,2)
(140,57,2)
(347,531,2)
(370,74,2)
(608,488,2)
(407,78,2)
(517,216,2)
(245,364,2)
(194,76,2)
(114,78,2)
(390,153,2)
(605,76,2)
(395,497,2)
(77,18,2)
(229,531,2)
(341,364,2)
(184,469,2)
(229,149,2)
(379,201,2)
(14,364,2)
(531,455,2)
(561,354,2)
(127,345,2)
(23,382,2)
(75,136,2)
(441,345,2)
(204,405,2)
(118,85,2)
(66,294,2)
(237,124,2)
(240,182,2)
(511,77,2)
(514,345,2)
(357,78,2)
(85,593,2)
(41,531,2)
(19,600,2)
(47,531,2)
(400,497,2)
(216,272,2)
(461,354,2)
(313,74,2)
(195,531,2)
(83,531,2)
(213,403,2)
(23,290,2)
(220,508,2)
(42,183,2)
(420,76,2)
(216,364,2)
(80,179,2)
(454,204,2)
(455,364,2)
(224,395,2)
(514,493,2)
(197,578,2)
(514,280,2)
(192,345,2)
(155,280,2)
(385,497,2)
(38,273,2)
(235,78,2)
(477,364,2)
(100,155,2)
(21,410,2)
(12,488,2)
(4,410,2)
(130,525,2)
(324,410,2)
(217,273,2)
(583,4,2)
(332,544,2)
(244,419,2)
(607,27,2)
(66,345,2)
(151,531,2)
(528,354,2)
(10,531,2)
(219,155,2)
(418,281,2)
(573,364,2)
(140,268,2)
(132,77,2)
(594,441,2)
(223,497,2)
(519,217,2)
(599,410,2)
(277,76,2)
(328,531,2)
(322,364,2)
(467,364,2)
(171,273,2)
(304,345,2)
(100,575,2)
(598,605,2)
(405,418,2)
(297,364,2)
(55,224,2)
(551,481,2)
(522,410,2)
(538,76,2)
(395,410,2)
(109,216,2)
(589,197,2)
(249,204,2)
(270,78,2)
(300,281,2)
(598,287,2)
(581,76,2)
(228,497,2)
(535,497,2)
(248,159,2)
(23,332,2)
(110,380,2)
(464,204,2)
(575,204,2)
(219,305,2)
(382,345,2)
(201,354,2)
(85,419,2)
(77,497,2)
(371,410,2)
(61,294,2)
(100,50,2)
(35,9,2)
(160,410,2)
(137,468,2)
(77,518,2)
(514,294,2)
(280,204,2)
(502,354,2)
(293,345,2)
(484,294,2)
(238,272,2)
(268,292,2)
(91,227,2)
(295,281,2)
(372,322,2)
(165,488,2)
(567,410,2)
(249,121,2)
(572,292,2)
(251,204,2)
(576,357,2)
(324,364,2)
(274,364,2)
(557,410,2)
(586,380,2)
(6,364,2)
(216,397,2)
(507,364,2)
(28,76,2)
(540,345,2)
(593,222,2)
(412,77,2)
(401,152,2)
(398,76,2)
(579,419,2)
(219,541,2)
(532,135,2)
(427,192,2)
(170,345,2)
(377,183,2)
(341,541,2)
(470,25,2)
(197,497,2)
(451,204,2)
(201,169,2)
(335,531,2)
(187,345,2)
(594,258,2)
(280,127,2)
(212,74,2)
(81,281,2)
(452,102,2)
(257,497,2)
(584,74,2)
(411,201,2)
(257,86,2)
(143,102,2)
(63,2,2)
(215,74,2)
(229,272,2)
(164,216,2)
(27,73,2)
(276,570,2)
(30,488,2)
(326,204,2)
(8,215,2)
(182,197,2)
(529,78,2)
(15,78,2)
(580,77,2)
(581,398,2)
(131,294,2)
(288,354,2)
(549,204,2)
(480,294,2)
(123,204,2)
(47,293,2)
(60,102,2)
(376,204,2)
(553,204,2)
(437,471,2)
(499,182,2)
(255,2,2)
(178,102,2)
(569,57,2)
(445,216,2)
(222,117,2)
(203,294,2)
(455,477,2)
(258,262,2)
(405,465,2)
(48,294,2)
(578,410,2)
(462,204,2)
(5,107,2)
(357,91,2)
(360,294,2)
(452,426,2)
(17,216,2)
(71,501,2)
(488,237,2)
(522,76,2)
(170,364,2)
(113,380,2)
(111,345,2)
(160,223,2)
(211,345,2)
(532,294,2)
(306,2,2)
(507,268,2)
(358,354,2)
(87,78,2)
(290,102,2)
(219,336,2)
(362,257,2)
(363,531,2)
(158,204,2)
(588,452,2)
(170,531,2)
(88,257,2)
(442,488,2)
(598,534,2)
(131,457,2)
(421,159,2)
(341,96,2)
(108,497,2)
(537,419,2)
(72,77,2)
(422,19,2)
(381,471,2)
(281,434,2)
(258,499,2)
(364,77,2)
(46,105,2)
(219,575,2)
(512,453,2)
(203,21,2)
(59,329,2)
(85,222,2)
(345,512,2)
(71,257,2)
(216,531,2)
(32,136,2)
(52,567,2)
(305,76,2)
(503,476,2)
(222,419,2)
(105,294,2)
(445,345,2)
(572,345,2)
(566,257,2)
(493,410,2)
(156,182,2)
(46,294,2)
(181,488,2)
(14,417,2)
(487,294,2)
(219,78,2)
(159,497,2)
(501,257,2)
(106,78,2)
(580,294,2)
(416,140,2)
(417,364,2)
(472,197,2)
(419,296,2)
(100,332,2)
(341,382,2)
(584,313,2)
(153,204,2)
(46,77,2)
(457,294,2)
(229,408,2)
(340,497,2)
(23,50,2)
(488,224,2)
(514,77,2)
(34,497,2)
(70,77,2)
(159,410,2)
(311,203,2)
(521,78,2)
(468,410,2)
(241,169,2)
(175,224,2)
(373,76,2)
(243,497,2)
(525,183,2)
(490,497,2)
(329,294,2)
(435,419,2)
(279,465,2)
(1,273,2)
(58,76,2)
(285,569,2)
(39,507,2)
(341,321,2)
(414,465,2)
(493,77,2)
(127,351,2)
(331,518,2)
(226,410,2)
(258,78,2)
(106,316,2)
(507,531,2)
(19,179,2)
(240,294,2)
(121,204,2)
(389,78,2)
(438,531,2)
(457,276,2)
(167,294,2)
(341,305,2)
(354,82,2)
(383,74,2)
(198,374,2)
(220,445,2)
(104,223,2)
(524,410,2)
(349,216,2)
(587,85,2)
(434,94,2)
(544,182,2)
(476,345,2)
(71,130,2)
(267,455,2)
(135,294,2)
(367,410,2)
(322,474,2)
(51,273,2)
(496,204,2)
(61,77,2)
(575,345,2)
(264,410,2)
(125,580,2)
(341,171,2)
(59,294,2)
(544,488,2)
(341,332,2)
(333,204,2)
(295,345,2)
(234,410,2)
(230,488,2)
(581,522,2)
(426,345,2)
(603,575,2)
(403,531,2)
(312,27,2)
(275,76,2)
-----------------------------------
(0,pgdla)
(1,dev->reconf)
(2,txn->la == 0xFF)
(3,if (msgv >= 0)
(4,txn->rl)
(5,mutex_unlock(&dev->tx_lock)
(6,SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(7,usedslots)
(8,SLIM_MSG_MC_DISCONNECT_PORT)
(9,txn->mc & 0xFF)
(10,tx_lock)
(11,dev)
(12,puc++)
(13,pbuf)
(14,mutex_unlock(&dev->tx_lock)
(15,port_b)
(16,0)
(17,dev)
(18,txn->la == 0xFF &&\n\\n\\t\\t(mc == SLIM_MSG_MC_CONNECT_SOURCE ||\n\\n\\t\\t mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(19,mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&\n\\n\\t\\tmc <= SLIM_MSG_MC_REPORT_INFORMATION)
(20,la)
(21,txn->mt)
(22,chan_active)
(23,return -ETIMEDOUT;)
(24,if (dev->err)
(25,dev->state = MSM_CTRL_AWAKE)
(26,err)
(27,chv >= 0)
(28,*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 1, la)
(29,if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |\n\\n\\t\\t\\t\\t\\tSLIM_MSG_CLK_PAUSE_SEQ_FLG)
(30,*(puc++)
(31,SLIM_MSG_MC_REQUEST_VALUE)
(32,clk_disable_unprepare(dev->rclk)
(33,dt)
(34,SLIM_MSG_DEST_LOGICALADDR)
(35,(u8)
(36,dev->tx_lock)
(37,0)
(38,timeout)
(39,dev)
(40,mc)
(41,txn)
(42,mc)
(43,dev->tx_lock)
(44,*(puc++)
(45,false)
(46,wait_for_completion_timeout(&done, HZ)
(47,dev_err(dev->dev, "clock pause failed")
(48,dev)
(49,if (!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(50,dev->err)
(51,dev->reconf_busy = false)
(52,txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(53,SLIM_MSG_MC_CHANGE_VALUE)
(54,if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&\n\\n\\t\\t(mc == SLIM_MSG_MC_CONNECT_SOURCE ||\n\\n\\t\\t mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(55,mc)
(56,dev)
(57,msgv = -1)
(58,la)
(59,dev_err(dev->dev, "pipe-port connect err:%d", dev->err)
(60,reconf_busy)
(61,dev)
(62,dev)
(63,mc)
(64,mc)
(65,0)
(66,dev->err)
(67,reconf_busy)
(68,txn->mc == SLIM_MSG_MC_RECONFIGURE_NOW)
(69,0)
(70,SLIM_MSG_MC_RECONFIGURE_NOW)
(71,txn->la == 0xFF &&\n\\n\\t\\t(mc == SLIM_MSG_MC_CONNECT_SOURCE ||\n\\n\\t\\t mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(72,pbuf)
(73,chv = msm_slim_get_ctrl(dev)
(74,mc = (u8)
(75,irq)
(76,txn->dt == SLIM_MSG_DEST_LOGICALADDR)
(77,txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&\n\\n\\t\\t(mc == SLIM_MSG_MC_CONNECT_SOURCE ||\n\\n\\t\\t mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(78,mc != SLIM_MSG_MC_DISCONNECT_PORT)
(79,if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)
(80,SLIM_MSG_MC_REPORT_INFORMATION)
(81,MSM_CTRL_IDLE)
(82,txn->mt == SLIM_MSG_MT_CORE)
(83,reconf_busy)
(84,if (msgv >= 0)
(85,dev->ctrl.sched.usedslots == 0 &&\n\\n\\t\\t\\t\\t\\tdev->chan_active)
(86,txn->mt)
(87,puc)
(88,txn)
(89,msgv)
(90,1)
(91,*puc)
(92,txn)
(93,if (dev->ctrl.sched.usedslots == 0 &&\n\\n\\t\\t\\t\\t\\tdev->chan_active)
(94,txn->mc)
(95,DECLARE_COMPLETION_ONSTACK(done)
(96,dev->reconf_busy)
(97,MSM_CTRL_ASLEEP)
(98,txn)
(99,txn->dt)
(100,return dev->err;)
(101,dev)
(102,dev->reconf_busy)
(103,txn)
(104,*(puc++)
(105,&done)
(106,mutex_unlock(&dev->tx_lock)
(107,&dev->tx_lock)
(108,msgv)
(109,txn)
(110,dev)
(111,msm_slim_put_ctrl(dev)
(112,)
(113,la)
(114,0)
(115,SLIM_MSG_MC_DISCONNECT_PORT)
(116,SLIM_MSG_MT_CORE)
(117,dev->ctrl.sched.usedslots)
(118,chan_active)
(119,txn)
(120,dev->err = 0)
(121,&dev->tx_lock)
(122,txn)
(123,dt)
(124,mc >= SLIM_MSG_MC_REQUEST_VALUE &&\n\\n\\t\\t mc <= SLIM_MSG_MC_CHANGE_VALUE)
(125,true)
(126,mc)
(127,msm_get_msg_buf(dev, txn->rl, &done)
(128,mc)
(129,SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(130,mc == SLIM_MSG_MC_CONNECT_SOURCE ||\n\\n\\t\\t mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(131,*(puc)
(132,txn)
(133,if (txn->mt == SLIM_MSG_MT_CORE &&\n\\n\\t\\tmc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)
(134,rl)
(135,&dev->tx_lock)
(136,timeout)
(137,txn->ec & 0xFF)
(138,)
(139,ETIMEDOUT)
(140,msgv >= 0)
(141,-EPROTONOSUPPORT)
(142,txn)
(143,false)
(144,la)
(145,port_b)
(146,HZ)
(147,puc)
(148,)
(149,-ETIMEDOUT)
(150,dev)
(151,dev)
(152,dev->tx_lock)
(153,msgv >= 0)
(154,chv)
(155,*pbuf)
(156,puc++)
(157,txn)
(158,dev->tx_lock)
(159,txn->wbuf)
(160,txn->tid)
(161,txn)
(162,if (timeout)
(163,"clock pause failed")
(164,mc)
(165,(txn->ec >> 8)
(166,puc)
(167,msgv >= 0)
(168,)
(169,dev->ctrl.sched.usedslots != 0)
(170,dev->tx_lock)
(171,dev->reconf_busy)
(172,EPROTONOSUPPORT)
(173,tx_lock)
(174,if (dev->ctrl.sched.usedslots != 0 &&\n\\n\\t\\t\\t!dev->chan_active)
(175,SLIM_MSG_MC_REQUEST_INFORMATION)
(176,dev)
(177,)
(178,dev->reconf_busy = false)
(179,mc >= SLIM_MSG_MC_REQUEST_INFORMATION)
(180,msgv)
(181,txn)
(182,puc = ((u8 *)
(183,mc == SLIM_MSG_MC_CONNECT_SOURCE)
(184,mutex_lock(&dev->tx_lock)
(185,mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(186,mt)
(187,dev->reconf_busy)
(188,txn)
(189,pbuf)
(190,puc)
(191,msgv)
(192,dev->irq)
(193,if (dev->reconf_busy)
(194,txn->mt)
(195,SLIM_MSG_MT_CORE)
(196,)
(197,txn->dt == SLIM_MSG_DEST_LOGICALADDR)
(198,!dev->chan_active)
(199,done)
(200,txn->rl)
(201,dev->ctrl.sched.usedslots != 0 &&\n\\n\\t\\t\\t!dev->chan_active)
(202,dev)
(203,txn->mt == SLIM_MSG_MT_CORE)
(204,dev->state == MSM_CTRL_ASLEEP ||\n\\n\\t\\t((!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(205,EBUSY)
(206,sched)
(207,false)
(208,tx_lock)
(209,0xFF)
(210,dev)
(211,dev->ctrl)
(212,mc >= SLIM_MSG_MC_REQUEST_VALUE)
(213,ETIMEDOUT)
(214,mt)
(215,mc == SLIM_MSG_MC_CONNECT_SINK)
(216,!timeout)
(217,&dev->reconf)
(218,)
(219,return 0;)
(220,dev_err(dev->dev, "TX timed out:MC:0x%x,mt:0x%x", txn->mc,\n\\n\\t\\t\\t\\t\\ttxn->mt)
(221,ver)
(222,dev->ctrl.sched.usedslots == 0)
(223,txn->rbuf)
(224,txn->mt == SLIM_MSG_MT_CORE)
(225,reconf_busy)
(226,txn->mc)
(227,puc = ((u8 *)
(228,txn)
(229,timeout ? dev->err : -ETIMEDOUT)
(230,ec)
(231,dev->rclk)
(232,txn->mc)
(233,)
(234,txn->mt)
(235,puc)
(236,puc)
(237,(mc >= SLIM_MSG_MC_REQUEST_INFORMATION &&\n\\n\\t\\tmc <= SLIM_MSG_MC_REPORT_INFORMATION)
(238,!timeout)
(239,dev)
(240,*(puc)
(241,chan_active)
(242,u8 *)
(243,txn)
(244,0)
(245,SLIM_MSG_MC_RECONFIGURE_NOW)
(246,dev->ctrl)
(247,dev)
(248,wbuf)
(249,mutex_unlock(&dev->tx_lock)
(250,if ((txn->mt == SLIM_MSG_MT_CORE)
(251,dev->dev)
(252,dev->chan_active = true)
(253,"pipe-port connect err:%d")
(254,u8)
(255,SLIM_MSG_MC_CONNECT_SOURCE)
(256,err)
(257,txn->mt == SLIM_MSG_MT_CORE)
(258,*puc + dev->port_b)
(259,txn)
(260,err)
(261,if (msgv >= 0)
(262,dev->port_b)
(263,dev->tx_lock)
(264,txn->dt)
(265,return -EBUSY;)
(266,la)
(267,timeout)
(268,msgv = msm_slim_get_ctrl(dev)
(269,mc)
(270,0)
(271,dev->reconf_busy = true)
(272,timeout = wait_for_completion_timeout(&done, HZ)
(273,(txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |\n\\n\\t\\t\\t\\t\\tSLIM_MSG_CLK_PAUSE_SEQ_FLG)
(274,mc)
(275,txn)
(276,(puc)
(277,*pbuf = SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 0, la)
(278,dev)
(279,txn)
(280,pbuf = msm_get_msg_buf(dev, txn->rl, &done)
(281,!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(282,false)
(283,tx_lock)
(284,mc)
(285,dev)
(286,dev)
(287,la = txn->la)
(288,dev->ctrl.sched.usedslots)
(289,mc)
(290,dev->reconf_busy)
(291,reconf)
(292,!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(293,dev->dev)
(294,dev->err)
(295,dev->state)
(296,txn->mt == SLIM_MSG_MT_CORE)
(297,SLIM_MSG_MC_RECONFIGURE_NOW)
(298,dev)
(299,dev)
(300,dev)
(301,pbuf)
(302,if ((txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |\n\\n\\t\\t\\t\\t\\tSLIM_MSG_CLK_PAUSE_SEQ_FLG)
(303,mc)
(304,dev->err)
(305,*pbuf)
(306,mc == SLIM_MSG_MC_CONNECT_SOURCE ||\n\\n\\t\\t mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(307,txn)
(308,dev->state)
(309,2)
(310,mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)
(311,mc)
(312,chan_active)
(313,mc == SLIM_MSG_MC_CONNECT_SINK)
(314,txn)
(315,dev->ctrl.sched)
(316,&dev->tx_lock)
(317,8)
(318,0)
(319,ctrl)
(320,PGD_PORT_CFGn)
(321,dev->chan_active)
(322,txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |\n\\n\\t\\t\\t\\t\\tSLIM_MSG_CLK_PAUSE_SEQ_FLG)
(323,dev)
(324,txn->mc)
(325,wbuf)
(326,tx_lock)
(327,msgv)
(328,-ETIMEDOUT)
(329,dev->dev)
(330,((u8 *)
(331,0xFF)
(332,*(puc++)
(333,txn)
(334,dev)
(335,timeout)
(336,*(puc++)
(337,dev)
(338,if (txn->wbuf)
(339,txn)
(340,rbuf)
(341,return timeout ? dev->err : -ETIMEDOUT;)
(342,msm_slim_get_ctrl(dev)
(343,done)
(344,ctrl)
(345,*dev = slim_get_ctrldata(ctrl)
(346,dev)
(347,dev)
(348,mc)
(349,dev)
(350,puc)
(351,&done)
(352,mc)
(353,txn)
(354,txn->mt == SLIM_MSG_MT_CORE &&\n\\n\\t\\tmc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)
(355,rl)
(356,)
(357,msm_slim_connect_pipe_port(dev, *puc)
(358,dev->ctrl.sched)
(359,(u8 *)
(360,dev)
(361,)
(362,0xFF)
(363,txn->mt)
(364,mc == SLIM_MSG_MC_RECONFIGURE_NOW)
(365,writel_relaxed(0, PGD_PORT(PGD_PORT_CFGn,\n\\n\\t\\t\\t\\t\\t(*puc + dev->port_b)
(366,if (dev->state == MSM_CTRL_ASLEEP ||\n\\n\\t\\t((!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(367,txn->la)
(368,dev)
(369,SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(370,mc == SLIM_MSG_MC_DISCONNECT_PORT)
(371,txn->mc)
(372,timeout)
(373,pbuf)
(374,dev->chan_active)
(375,txn)
(376,dev)
(377,SLIM_MSG_MC_CONNECT_SINK)
(378,if (txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&\n\\n\\t\\t(mc == SLIM_MSG_MC_CONNECT_SOURCE ||\n\\n\\t\\t mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(379,dev)
(380,txn->mt == SLIM_MSG_MT_CORE && txn->la == 0xFF &&\n\\n\\t\\t(mc == SLIM_MSG_MC_CONNECT_SOURCE ||\n\\n\\t\\t mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(381,msm_slim_put_ctrl(dev)
(382,dev->chan_active)
(383,mc <= SLIM_MSG_MC_CHANGE_VALUE)
(384,0)
(385,dev)
(386,txn)
(387,if (msgv >= 0)
(388,)
(389,dev)
(390,dev)
(391,0)
(392,mc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)
(393,timeout)
(394,state)
(395,txn->mt)
(396,msgv)
(397,timeout = wait_for_completion_timeout(&dev->reconf, HZ)
(398,txn->mt)
(399,reconf)
(400,SLIM_MSG_MT_CORE)
(401,&dev->tx_lock)
(402,err)
(403,timeout)
(404,SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(405,(!(txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(406,dev_err(dev->dev, "runtime or system PM suspended state")
(407,tx_lock)
(408,dev->err)
(409,HZ)
(410,struct slim_msg_txn *txn)
(411,chv)
(412,SLIM_MSG_MT_CORE)
(413,if (msgv >= 0)
(414,mc)
(415,if (txn->mt == SLIM_MSG_MT_CORE &&\n\\n\\t\\tmc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)
(416,msm_slim_put_ctrl(dev)
(417,&dev->tx_lock)
(418,dev->state == MSM_CTRL_IDLE)
(419,txn->mt == SLIM_MSG_MT_CORE &&\n\\n\\t\\t\\ttxn->mc == SLIM_MSG_MC_RECONFIGURE_NOW)
(420,mc)
(421,txn)
(422,mc)
(423,mt)
(424,dev)
(425,dev)
(426,dev->reconf)
(427,disable_irq(dev->irq)
(428,txn)
(429,mc)
(430,txn->ec >> 8)
(431,dev)
(432,if (chv >= 0)
(433,txn->ec)
(434,txn->mc & SLIM_MSG_CLK_PAUSE_SEQ_FLG)
(435,usedslots)
(436,dev)
(437,dev)
(438,dev->reconf_busy = false)
(439,puc)
(440,SLIM_MSG_MC_RECONFIGURE_NOW |\n\\n\\t\\t\\t\\t\\tSLIM_MSG_CLK_PAUSE_SEQ_FLG)
(441,dev->ver)
(442,ec)
(443,dev)
(444,la)
(445,dev->dev)
(446,dev)
(447,if (msgv >= 0)
(448,dev)
(449,memcpy(puc, txn->wbuf, txn->len)
(450,dev)
(451,pbuf)
(452,&dev->reconf)
(453,struct slim_controller *ctrl)
(454,msgv)
(455,txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |\n\\n\\t\\t\\t\\t\\tSLIM_MSG_CLK_PAUSE_SEQ_FLG)
(456,MSM_CTRL_AWAKE)
(457,*(puc)
(458,dev)
(459,if (mc == SLIM_MSG_MC_RECONFIGURE_NOW)
(460,dev)
(461,ctrl)
(462,rl)
(463,0)
(464,SLIM_MSG_MT_CORE)
(465,dev->state == MSM_CTRL_ASLEEP)
(466,err)
(467,0)
(468,txn->ec)
(469,&dev->tx_lock)
(470,dev->state)
(471,msgv >= 0)
(472,(u8 *)
(473,txn)
(474,SLIM_MSG_MC_RECONFIGURE_NOW |\n\\n\\t\\t\\t\\t\\tSLIM_MSG_CLK_PAUSE_SEQ_FLG)
(475,mt)
(476,dev->port_b)
(477,txn->mc)
(478,SLIM_MSG_MC_BEGIN_RECONFIGURATION)
(479,RET)
(480,mt)
(481,mc == SLIM_MSG_MC_CONNECT_SOURCE)
(482,dev)
(483,tid)
(484,dev)
(485,"TX timed out:MC:0x%x,mt:0x%x")
(486,if (txn->rbuf)
(487,MGR_TX_MSG)
(488,(txn->mt == SLIM_MSG_MT_CORE)
(489,)
(490,mutex_unlock(&dev->tx_lock)
(491,if (txn->mt == SLIM_MSG_MT_CORE &&\n\\n\\t\\t\\ttxn->mc == SLIM_MSG_MC_RECONFIGURE_NOW)
(492,dev)
(493,txn->rl)
(494,dev)
(495,SLIM_MSG_MC_CONNECT_SOURCE)
(496,-EBUSY)
(497,txn->dt == SLIM_MSG_DEST_ENUMADDR)
(498,timeout)
(499,*puc)
(500,)
(501,txn->la == 0xFF)
(502,reconf_busy)
(503,+ dev->port_b)
(504,-1)
(505,dt)
(506,if (mc != SLIM_MSG_MC_DISCONNECT_PORT)
(507,msgv >= 0)
(508,txn->mt)
(509,mc)
(510,txn->la)
(511,rl)
(512,slim_get_ctrldata(ctrl)
(513,mc)
(514,msm_send_msg_buf(dev, pbuf, txn->rl, MGR_TX_MSG)
(515,txn)
(516,puc)
(517,txn)
(518,txn->mt == SLIM_MSG_MT_CORE)
(519,wait_for_completion_timeout(&dev->reconf, HZ)
(520,"runtime or system PM suspended state")
(521,dev)
(522,txn->rl)
(523,SLIM_MSG_MC_BEGIN_RECONFIGURATION)
(524,txn->wbuf)
(525,mc == SLIM_MSG_MC_CONNECT_SINK ||\n\\n\\t\\t mc == SLIM_MSG_MC_DISCONNECT_PORT)
(526,SLIM_MSG_DEST_ENUMADDR)
(527,if (!timeout)
(528,dev)
(529,dev->tx_lock)
(530,rclk)
(531,(txn->mc == (SLIM_MSG_MC_RECONFIGURE_NOW |\n\\n\\t\\t\\t\\t\\tSLIM_MSG_CLK_PAUSE_SEQ_FLG)
(532,mutex_unlock(&dev->tx_lock)
(533,0xFF)
(534,la = dev->pgdla)
(535,SLIM_MSG_DEST_LOGICALADDR)
(536,if (txn->dt == SLIM_MSG_DEST_ENUMADDR)
(537,dev)
(538,1)
(539,txn)
(540,msm_slim_put_ctrl(dev)
(541,*(puc++)
(542,SLIM_MSG_MC_CONNECT_SINK)
(543,SLIM_MSG_MC_RECONFIGURE_NOW)
(544,puc++)
(545,len)
(546,mt)
(547,dev)
(548,SLIM_MSG_MC_DISCONNECT_PORT)
(549,err)
(550,)
(551,mc)
(552,state)
(553,mt)
(554,)
(555,state)
(556,mt)
(557,txn->la)
(558,msgv)
(559,3)
(560,msm_slim_put_ctrl(dev)
(561,0)
(562,puc)
(563,)
(564,rl)
(565,u8 *)
(566,la)
(567,txn->mc)
(568,pbuf)
(569,msgv >= 0)
(570,puc)
(571,dev)
(572,msm_slim_get_ctrl(dev)
(573,txn)
(574,mc)
(575,dev->err)
(576,dev->err = msm_slim_connect_pipe_port(dev, *puc)
(577,la)
(578,txn->dt)
(579,sched)
(580,txn->mt == SLIM_MSG_MT_CORE &&\n\\n\\t\\tmc == SLIM_MSG_MC_BEGIN_RECONFIGURATION)
(581,SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 1, la)
(582,msgv)
(583,txn->rl--)
(584,mc == SLIM_MSG_MC_DISCONNECT_PORT)
(585,mc)
(586,dev->pgdla)
(587,msm_slim_put_ctrl(dev)
(588,wait_for_completion(&dev->reconf)
(589,((u8 *)
(590,if (txn->dt == SLIM_MSG_DEST_LOGICALADDR)
(591,SLIM_MSG_MT_CORE)
(592,txn->mt)
(593,dev->chan_active)
(594,PGD_PORT(PGD_PORT_CFGn,\n\\n\\t\\t\\t\\t\\t(*puc + dev->port_b)
(595,txn)
(596,mt)
(597,dev)
(598,SLIM_MSG_ASM_FIRST_WORD(txn->rl, txn->mt, mc, 0, la)
(599,txn->len)
(600,mc <= SLIM_MSG_MC_REPORT_INFORMATION)
(601,dev->chan_active = false)
(602,done)
(603,return -EPROTONOSUPPORT;)
(604,tx_lock)
(605,txn->rl)
(606,chv)
(607,true)
(608,0xFF)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^