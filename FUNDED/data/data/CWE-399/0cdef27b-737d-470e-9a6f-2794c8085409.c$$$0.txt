-----label-----
1
-----code-----
void mlx4_en_fill_qp_context(struct mlx4_en_priv *priv, int size, int stride,
			     int is_tx, int rss, int qpn, int cqn,
			     int user_prio, struct mlx4_qp_context *context)
{
	struct mlx4_en_dev *mdev = priv->mdev;
	struct net_device *dev = priv->dev;

	memset(context, 0, sizeof *context);
	context->flags = cpu_to_be32(7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET);
	context->pd = cpu_to_be32(mdev->priv_pdn);
	context->mtu_msgmax = 0xff;
	if (!is_tx && !rss)
		context->rq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);
	if (is_tx)
		context->sq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);
	else
		context->sq_size_stride = ilog2(TXBB_SIZE) - 4;
	context->usr_page = cpu_to_be32(mdev->priv_uar.index);
	context->local_qpn = cpu_to_be32(qpn);
	context->pri_path.ackto = 1 & 0x07;
	context->pri_path.sched_queue = 0x83 | (priv->port - 1) << 6;
	if (user_prio >= 0) {
		context->pri_path.sched_queue |= user_prio << 3;
		context->pri_path.feup = MLX4_FEUP_FORCE_ETH_UP;
	}
	context->pri_path.counter_index = 0xff;
	context->cqn_send = cpu_to_be32(cqn);
	context->cqn_recv = cpu_to_be32(cqn);
	context->db_rec_addr = cpu_to_be64(priv->res.db.dma << 2);
	if (!(dev->features & NETIF_F_HW_VLAN_CTAG_RX))
		context->param3 |= cpu_to_be32(1 << 30);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
3,9
3,10
3,11
3,12
3,13
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
21,22
23,24
23,25
25,26
27,28
27,29
29,30
31,32
31,33
33,34
35,36
35,37
37,38
39,40
39,41
40,41
42,43
42,44
45,46
45,47
45,48
45,49
45,50
45,51
45,52
45,53
45,54
45,55
45,56
45,57
45,58
45,59
45,60
45,61
45,62
45,63
46,47
47,48
47,49
48,49
50,51
50,52
50,53
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
62,63
62,64
62,65
65,66
66,67
66,68
67,68
70,71
71,72
71,73
71,74
71,75
72,73
74,75
77,78
78,79
79,80
81,82
82,83
82,84
83,84
83,85
84,85
87,88
87,89
88,89
90,91
90,92
91,92
91,93
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
101,103
102,103
105,106
105,107
106,107
108,109
108,110
109,110
112,113
113,114
113,115
114,115
114,116
115,116
119,120
119,121
120,121
120,122
121,122
122,123
124,125
125,126
127,128
128,129
128,130
129,130
129,131
130,131
133,134
133,135
134,135
134,136
135,136
135,137
136,137
138,139
141,142
142,143
142,144
143,144
143,145
144,145
146,147
149,150
149,151
149,152
150,151
152,153
153,154
153,155
154,155
154,156
155,156
158,159
158,160
159,160
159,161
160,161
160,162
161,162
163,164
166,167
167,168
167,169
168,169
168,170
169,170
171,172
174,175
175,176
175,177
176,177
176,178
177,178
180,181
180,182
181,182
181,183
182,183
184,185
187,188
188,189
188,190
189,190
189,191
190,191
193,194
193,195
194,195
196,197
196,198
197,198
197,199
198,199
202,203
203,204
203,205
204,205
204,206
205,206
208,209
208,210
209,210
211,212
213,214
214,215
214,216
215,216
215,217
216,217
216,218
217,218
221,222
221,223
224,225
225,226
225,227
226,227
226,228
227,228
227,229
228,229
232,233
232,234
234,235
234,236
235,236
236,237
236,238
237,238
237,239
238,239
243,244
243,245
244,245
244,246
245,246
248,249
248,250
249,250
250,251
250,252
251,252
251,253
252,253
252,254
253,254
257,258
257,259
258,259
261,262
262,263
262,264
263,264
263,265
264,265
264,266
265,266
269,270
271,272
272,273
272,274
273,274
273,275
274,275
274,276
275,276
280,281
281,282
281,283
282,283
282,284
283,284
286,287
286,288
287,288
289,290
291,292
292,293
292,294
293,294
293,295
294,295
297,298
297,299
298,299
300,301
302,303
303,304
303,305
304,305
304,306
305,306
308,309
308,310
309,310
311,312
311,313
312,313
312,314
313,314
313,315
314,315
314,316
315,316
321,322
321,323
322,323
323,324
324,325
324,326
325,326
325,327
326,327
329,330
331,332
332,333
332,334
333,334
333,335
334,335
337,338
337,339
338,339
340,341
340,342
-----nextToken-----
2,4,7,9,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,41,43,44,49,51,52,56,57,61,63,64,68,69,73,75,76,80,85,86,89,92,93,96,98,103,104,107,110,111,116,117,118,123,126,131,132,137,139,140,145,147,148,151,156,157,162,164,165,170,172,173,178,179,183,185,186,191,192,195,199,200,201,206,207,210,212,218,219,220,222,223,229,230,231,233,239,240,241,242,246,247,254,255,256,259,260,266,267,268,270,276,277,278,279,284,285,288,290,295,296,299,301,306,307,310,316,317,318,319,320,327,328,330,335,336,339,341,342
-----computeFrom-----
82,83
82,84
90,91
90,92
91,92
91,93
94,95
94,96
100,101
100,102
113,114
113,115
120,121
120,122
128,129
128,130
133,134
133,135
134,135
134,136
142,143
142,144
153,154
153,155
158,159
158,160
159,160
159,161
167,168
167,169
175,176
175,177
180,181
180,182
188,189
188,190
203,204
203,205
214,215
214,216
221,222
221,223
225,226
225,227
232,233
232,234
234,235
234,236
236,237
236,238
244,245
244,246
250,251
250,252
257,258
257,259
262,263
262,264
272,273
272,274
281,282
281,283
292,293
292,294
303,304
303,305
311,312
311,313
324,325
324,326
332,333
332,334
340,341
340,342
-----guardedBy-----
246,259
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;LiteralExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;LiteralExpression;LiteralExpression;
-----ast_node-----
void mlx4_en_fill_qp_context(struct mlx4_en_priv *priv, int size, int stride,			     int is_tx, int rss, int qpn, int cqn,			     int user_prio, struct mlx4_qp_context *context){	struct mlx4_en_dev *mdev = priv->mdev;	struct net_device *dev = priv->dev;	memset(context, 0, sizeof *context);	context->flags = cpu_to_be32(7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET);	context->pd = cpu_to_be32(mdev->priv_pdn);	context->mtu_msgmax = 0xff;	if (!is_tx && !rss)		context->rq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);	if (is_tx)		context->sq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);	else		context->sq_size_stride = ilog2(TXBB_SIZE) - 4;	context->usr_page = cpu_to_be32(mdev->priv_uar.index);	context->local_qpn = cpu_to_be32(qpn);	context->pri_path.ackto = 1 & 0x07;	context->pri_path.sched_queue = 0x83 | (priv->port - 1) << 6;	if (user_prio >= 0) {		context->pri_path.sched_queue |= user_prio << 3;		context->pri_path.feup = MLX4_FEUP_FORCE_ETH_UP;	}	context->pri_path.counter_index = 0xff;	context->cqn_send = cpu_to_be32(cqn);	context->cqn_recv = cpu_to_be32(cqn);	context->db_rec_addr = cpu_to_be64(priv->res.db.dma << 2);	if (!(dev->features & NETIF_F_HW_VLAN_CTAG_RX))		context->param3 |= cpu_to_be32(1 << 30);}
void
mlx4_en_fill_qp_context(struct mlx4_en_priv *priv, int size, int stride,			     int is_tx, int rss, int qpn, int cqn,			     int user_prio, struct mlx4_qp_context *context)
mlx4_en_fill_qp_context
struct mlx4_en_priv *priv
struct mlx4_en_priv
mlx4_en_priv
*priv
*
priv
int size
int
size
size
int stride
int
stride
stride
int is_tx
int
is_tx
is_tx
int rss
int
rss
rss
int qpn
int
qpn
qpn
int cqn
int
cqn
cqn
int user_prio
int
user_prio
user_prio
struct mlx4_qp_context *context
struct mlx4_qp_context
mlx4_qp_context
*context
*
context
{	struct mlx4_en_dev *mdev = priv->mdev;	struct net_device *dev = priv->dev;	memset(context, 0, sizeof *context);	context->flags = cpu_to_be32(7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET);	context->pd = cpu_to_be32(mdev->priv_pdn);	context->mtu_msgmax = 0xff;	if (!is_tx && !rss)		context->rq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);	if (is_tx)		context->sq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);	else		context->sq_size_stride = ilog2(TXBB_SIZE) - 4;	context->usr_page = cpu_to_be32(mdev->priv_uar.index);	context->local_qpn = cpu_to_be32(qpn);	context->pri_path.ackto = 1 & 0x07;	context->pri_path.sched_queue = 0x83 | (priv->port - 1) << 6;	if (user_prio >= 0) {		context->pri_path.sched_queue |= user_prio << 3;		context->pri_path.feup = MLX4_FEUP_FORCE_ETH_UP;	}	context->pri_path.counter_index = 0xff;	context->cqn_send = cpu_to_be32(cqn);	context->cqn_recv = cpu_to_be32(cqn);	context->db_rec_addr = cpu_to_be64(priv->res.db.dma << 2);	if (!(dev->features & NETIF_F_HW_VLAN_CTAG_RX))		context->param3 |= cpu_to_be32(1 << 30);}
struct mlx4_en_dev *mdev = priv->mdev;
struct mlx4_en_dev *mdev = priv->mdev;
struct mlx4_en_dev
mlx4_en_dev
*mdev = priv->mdev
*
mdev
= priv->mdev
priv->mdev
priv
priv
mdev
struct net_device *dev = priv->dev;
struct net_device *dev = priv->dev;
struct net_device
net_device
*dev = priv->dev
*
dev
= priv->dev
priv->dev
priv
priv
dev
memset(context, 0, sizeof *context);
memset(context, 0, sizeof *context)
memset
memset
context
context
0
sizeof *context
*context
context
context
context->flags = cpu_to_be32(7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET);
context->flags = cpu_to_be32(7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET)
context->flags
context
context
flags
cpu_to_be32(7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET)
cpu_to_be32
cpu_to_be32
7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET
7 << 16
7
16
rss << MLX4_RSS_QPC_FLAG_OFFSET
rss
rss
MLX4_RSS_QPC_FLAG_OFFSET
MLX4_RSS_QPC_FLAG_OFFSET
context->pd = cpu_to_be32(mdev->priv_pdn);
context->pd = cpu_to_be32(mdev->priv_pdn)
context->pd
context
context
pd
cpu_to_be32(mdev->priv_pdn)
cpu_to_be32
cpu_to_be32
mdev->priv_pdn
mdev
mdev
priv_pdn
context->mtu_msgmax = 0xff;
context->mtu_msgmax = 0xff
context->mtu_msgmax
context
context
mtu_msgmax
0xff
if (!is_tx && !rss)		context->rq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);
!is_tx && !rss
!is_tx
is_tx
is_tx
!rss
rss
rss
context->rq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);
context->rq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4)
context->rq_size_stride
context
context
rq_size_stride
ilog2(size) << 3 | (ilog2(stride) - 4)
ilog2(size) << 3
ilog2(size)
ilog2
ilog2
size
size
3
(ilog2(stride) - 4)
ilog2(stride) - 4
ilog2(stride)
ilog2
ilog2
stride
stride
4
if (is_tx)		context->sq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);	else		context->sq_size_stride = ilog2(TXBB_SIZE) - 4;
is_tx
is_tx
context->sq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4);
context->sq_size_stride = ilog2(size) << 3 | (ilog2(stride) - 4)
context->sq_size_stride
context
context
sq_size_stride
ilog2(size) << 3 | (ilog2(stride) - 4)
ilog2(size) << 3
ilog2(size)
ilog2
ilog2
size
size
3
(ilog2(stride) - 4)
ilog2(stride) - 4
ilog2(stride)
ilog2
ilog2
stride
stride
4
context->sq_size_stride = ilog2(TXBB_SIZE) - 4;
context->sq_size_stride = ilog2(TXBB_SIZE) - 4
context->sq_size_stride
context
context
sq_size_stride
ilog2(TXBB_SIZE) - 4
ilog2(TXBB_SIZE)
ilog2
ilog2
TXBB_SIZE
TXBB_SIZE
4
context->usr_page = cpu_to_be32(mdev->priv_uar.index);
context->usr_page = cpu_to_be32(mdev->priv_uar.index)
context->usr_page
context
context
usr_page
cpu_to_be32(mdev->priv_uar.index)
cpu_to_be32
cpu_to_be32
mdev->priv_uar.index
mdev->priv_uar
mdev
mdev
priv_uar
index
context->local_qpn = cpu_to_be32(qpn);
context->local_qpn = cpu_to_be32(qpn)
context->local_qpn
context
context
local_qpn
cpu_to_be32(qpn)
cpu_to_be32
cpu_to_be32
qpn
qpn
context->pri_path.ackto = 1 & 0x07;
context->pri_path.ackto = 1 & 0x07
context->pri_path.ackto
context->pri_path
context
context
pri_path
ackto
1 & 0x07
1
0x07
context->pri_path.sched_queue = 0x83 | (priv->port - 1) << 6;
context->pri_path.sched_queue = 0x83 | (priv->port - 1) << 6
context->pri_path.sched_queue
context->pri_path
context
context
pri_path
sched_queue
0x83 | (priv->port - 1) << 6
0x83
(priv->port - 1) << 6
(priv->port - 1)
priv->port - 1
priv->port
priv
priv
port
1
6
if (user_prio >= 0) {		context->pri_path.sched_queue |= user_prio << 3;		context->pri_path.feup = MLX4_FEUP_FORCE_ETH_UP;	}
user_prio >= 0
user_prio
user_prio
0
{		context->pri_path.sched_queue |= user_prio << 3;		context->pri_path.feup = MLX4_FEUP_FORCE_ETH_UP;	}
context->pri_path.sched_queue |= user_prio << 3;
context->pri_path.sched_queue |= user_prio << 3
context->pri_path.sched_queue
context->pri_path
context
context
pri_path
sched_queue
user_prio << 3
user_prio
user_prio
3
context->pri_path.feup = MLX4_FEUP_FORCE_ETH_UP;
context->pri_path.feup = MLX4_FEUP_FORCE_ETH_UP
context->pri_path.feup
context->pri_path
context
context
pri_path
feup
MLX4_FEUP_FORCE_ETH_UP
MLX4_FEUP_FORCE_ETH_UP
context->pri_path.counter_index = 0xff;
context->pri_path.counter_index = 0xff
context->pri_path.counter_index
context->pri_path
context
context
pri_path
counter_index
0xff
context->cqn_send = cpu_to_be32(cqn);
context->cqn_send = cpu_to_be32(cqn)
context->cqn_send
context
context
cqn_send
cpu_to_be32(cqn)
cpu_to_be32
cpu_to_be32
cqn
cqn
context->cqn_recv = cpu_to_be32(cqn);
context->cqn_recv = cpu_to_be32(cqn)
context->cqn_recv
context
context
cqn_recv
cpu_to_be32(cqn)
cpu_to_be32
cpu_to_be32
cqn
cqn
context->db_rec_addr = cpu_to_be64(priv->res.db.dma << 2);
context->db_rec_addr = cpu_to_be64(priv->res.db.dma << 2)
context->db_rec_addr
context
context
db_rec_addr
cpu_to_be64(priv->res.db.dma << 2)
cpu_to_be64
cpu_to_be64
priv->res.db.dma << 2
priv->res.db.dma
priv->res.db
priv->res
priv
priv
res
db
dma
2
if (!(dev->features & NETIF_F_HW_VLAN_CTAG_RX))		context->param3 |= cpu_to_be32(1 << 30);
!(dev->features & NETIF_F_HW_VLAN_CTAG_RX)
(dev->features & NETIF_F_HW_VLAN_CTAG_RX)
dev->features & NETIF_F_HW_VLAN_CTAG_RX
dev->features
dev
dev
features
NETIF_F_HW_VLAN_CTAG_RX
NETIF_F_HW_VLAN_CTAG_RX
context->param3 |= cpu_to_be32(1 << 30);
context->param3 |= cpu_to_be32(1 << 30)
context->param3
context
context
param3
cpu_to_be32(1 << 30)
cpu_to_be32
cpu_to_be32
1 << 30
1
30
-----joern-----
(115,201,0)
(158,152,0)
(79,190,0)
(26,45,0)
(90,138,0)
(61,163,0)
(51,130,0)
(191,90,0)
(122,8,0)
(41,11,0)
(130,113,0)
(27,54,0)
(40,28,0)
(203,135,0)
(59,82,0)
(125,97,0)
(3,72,0)
(100,113,0)
(156,128,0)
(10,68,0)
(163,61,0)
(27,35,0)
(105,12,0)
(120,201,0)
(76,202,0)
(135,116,0)
(113,130,0)
(63,100,0)
(162,49,0)
(162,160,0)
(34,4,0)
(25,49,0)
(94,190,0)
(97,67,0)
(98,86,0)
(13,196,0)
(132,8,0)
(141,119,0)
(169,143,0)
(74,68,0)
(57,175,0)
(181,164,0)
(2,22,0)
(21,54,0)
(94,53,0)
(26,30,0)
(101,143,0)
(94,135,0)
(22,44,0)
(11,150,0)
(56,116,0)
(92,22,0)
(103,133,0)
(19,18,0)
(142,133,0)
(20,162,0)
(24,160,0)
(160,72,0)
(110,54,0)
(164,181,0)
(41,116,0)
(81,200,0)
(65,135,0)
(48,35,0)
(184,109,0)
(94,160,0)
(159,202,0)
(86,29,0)
(35,60,0)
(170,158,0)
(180,67,0)
(122,82,0)
(151,102,0)
(2,134,0)
(118,127,0)
(39,101,0)
(154,94,0)
(91,138,0)
(143,119,0)
(30,34,0)
(111,3,0)
(146,20,0)
(147,104,0)
(105,116,0)
(111,175,0)
(69,82,0)
(127,166,0)
(148,53,0)
(44,172,0)
(204,152,0)
(137,42,0)
(82,116,0)
(64,54,0)
(94,154,0)
(143,101,0)
(133,42,0)
(78,105,0)
(162,135,0)
(50,41,0)
(58,63,0)
(113,100,0)
(184,116,0)
(202,94,0)
(43,7,0)
(29,54,0)
(165,104,0)
(187,184,0)
(162,190,0)
(153,193,0)
(182,147,0)
(177,84,0)
(0,127,0)
(84,54,0)
(70,52,0)
(155,179,0)
(204,149,0)
(149,7,0)
(46,185,0)
(112,18,0)
(150,11,0)
(66,26,0)
(29,86,0)
(192,147,0)
(136,54,0)
(139,34,0)
(23,81,0)
(190,201,0)
(162,20,0)
(35,27,0)
(180,134,0)
(193,103,0)
(119,143,0)
(175,103,0)
(131,193,0)
(190,110,0)
(198,54,0)
(162,63,0)
(201,116,0)
(152,158,0)
(32,54,0)
(144,81,0)
(160,116,0)
(99,53,0)
(96,42,0)
(84,116,0)
(8,54,0)
(94,43,0)
(44,22,0)
(49,116,0)
(62,43,0)
(20,200,0)
(12,105,0)
(174,105,0)
(168,90,0)
(202,116,0)
(167,137,0)
(181,68,0)
(101,110,0)
(22,2,0)
(64,6,0)
(12,162,0)
(162,53,0)
(117,2,0)
(172,44,0)
(88,180,0)
(83,49,0)
(82,122,0)
(152,204,0)
(196,13,0)
(93,96,0)
(127,118,0)
(44,112,0)
(47,54,0)
(195,29,0)
(171,128,0)
(112,44,0)
(175,111,0)
(161,157,0)
(128,116,0)
(72,3,0)
(6,64,0)
(68,45,0)
(6,181,0)
(3,111,0)
(135,198,0)
(1,67,0)
(185,154,0)
(173,113,0)
(72,54,0)
(162,195,0)
(7,149,0)
(33,43,0)
(94,49,0)
(5,195,0)
(94,163,0)
(133,103,0)
(56,27,0)
(94,28,0)
(155,116,0)
(102,116,0)
(186,165,0)
(176,204,0)
(149,204,0)
(108,111,0)
(38,152,0)
(138,54,0)
(165,179,0)
(118,97,0)
(97,125,0)
(162,56,0)
(53,125,0)
(182,54,0)
(53,116,0)
(17,84,0)
(106,61,0)
(94,195,0)
(193,150,0)
(73,185,0)
(94,102,0)
(197,63,0)
(18,112,0)
(114,41,0)
(162,85,0)
(158,137,0)
(162,28,0)
(43,116,0)
(140,56,0)
(94,155,0)
(179,165,0)
(77,155,0)
(67,97,0)
(9,196,0)
(154,185,0)
(71,54,0)
(36,160,0)
(31,112,0)
(28,172,0)
(199,28,0)
(145,164,0)
(52,85,0)
(109,184,0)
(94,41,0)
(178,137,0)
(107,12,0)
(95,102,0)
(97,118,0)
(137,158,0)
(189,56,0)
(121,96,0)
(181,6,0)
(124,155,0)
(183,133,0)
(103,54,0)
(94,63,0)
(196,90,0)
(75,164,0)
(55,163,0)
(138,157,0)
(28,116,0)
(102,182,0)
(188,103,0)
(157,138,0)
(49,64,0)
(87,122,0)
(84,109,0)
(126,20,0)
(96,119,0)
(30,26,0)
(128,195,0)
(18,166,0)
(163,52,0)
(119,96,0)
(89,86,0)
(147,182,0)
(110,101,0)
(90,196,0)
(109,84,0)
(16,118,0)
(157,42,0)
(37,157,0)
(63,116,0)
(179,54,0)
(162,41,0)
(94,122,0)
(94,56,0)
(61,116,0)
(67,180,0)
(34,30,0)
(80,61,0)
(201,190,0)
(123,175,0)
(195,128,0)
(194,198,0)
(11,54,0)
(94,12,0)
(7,54,0)
(129,54,0)
(150,193,0)
(68,181,0)
(160,116,1)
(80,106,1)
(190,201,1)
(117,28,1)
(94,28,1)
(193,131,1)
(170,137,1)
(56,189,1)
(26,45,1)
(22,92,1)
(198,194,1)
(177,17,1)
(28,40,1)
(194,135,1)
(69,81,1)
(79,201,1)
(152,158,1)
(94,154,1)
(30,26,1)
(92,2,1)
(106,162,1)
(100,113,1)
(163,61,1)
(73,202,1)
(122,82,1)
(133,183,1)
(114,64,1)
(41,50,1)
(160,24,1)
(68,45,1)
(39,190,1)
(135,65,1)
(94,49,1)
(119,96,1)
(155,116,1)
(18,166,1)
(123,160,1)
(49,25,1)
(204,176,1)
(157,161,1)
(146,126,1)
(11,150,1)
(75,49,1)
(138,157,1)
(201,120,1)
(34,4,1)
(94,160,1)
(44,112,1)
(6,181,1)
(15,172,1)
(169,119,1)
(165,186,1)
(94,163,1)
(37,91,1)
(70,163,1)
(12,105,1)
(127,0,1)
(150,193,1)
(185,46,1)
(140,72,1)
(94,12,1)
(53,116,1)
(98,89,1)
(84,116,1)
(145,75,1)
(105,174,1)
(189,140,1)
(131,153,1)
(204,152,1)
(132,122,1)
(157,42,1)
(184,116,1)
(77,124,1)
(53,148,1)
(74,10,1)
(141,96,1)
(27,35,1)
(40,199,1)
(14,13,1)
(18,19,1)
(13,196,1)
(115,29,1)
(164,145,1)
(17,138,1)
(61,80,1)
(135,116,1)
(63,197,1)
(86,98,1)
(187,177,1)
(88,53,1)
(7,149,1)
(30,34,1)
(41,116,1)
(81,144,1)
(20,200,1)
(87,82,1)
(83,84,1)
(111,175,1)
(52,70,1)
(94,63,1)
(173,130,1)
(162,63,1)
(102,116,1)
(96,93,1)
(183,142,1)
(113,130,1)
(201,116,1)
(154,185,1)
(96,42,1)
(180,88,1)
(167,43,1)
(147,104,1)
(62,179,1)
(14,94,1)
(184,187,1)
(43,33,1)
(162,20,1)
(94,102,1)
(153,41,1)
(143,119,1)
(97,67,1)
(112,18,1)
(121,39,1)
(186,155,1)
(12,107,1)
(72,3,1)
(23,110,1)
(162,190,1)
(0,67,1)
(35,60,1)
(202,116,1)
(94,41,1)
(199,30,1)
(122,87,1)
(162,49,1)
(102,95,1)
(94,53,1)
(156,27,1)
(50,114,1)
(101,143,1)
(191,7,1)
(48,56,1)
(149,204,1)
(110,101,1)
(43,116,1)
(175,103,1)
(55,61,1)
(51,63,1)
(130,51,1)
(94,190,1)
(94,195,1)
(38,158,1)
(162,53,1)
(15,30,1)
(1,180,1)
(67,1,1)
(152,38,1)
(9,90,1)
(24,36,1)
(91,103,1)
(90,138,1)
(171,156,1)
(151,8,1)
(181,68,1)
(162,28,1)
(159,13,1)
(84,109,1)
(112,31,1)
(113,173,1)
(144,23,1)
(158,170,1)
(64,6,1)
(63,116,1)
(162,195,1)
(67,180,1)
(124,182,1)
(97,118,1)
(128,171,1)
(103,133,1)
(182,147,1)
(2,117,1)
(2,134,1)
(155,77,1)
(158,137,1)
(174,78,1)
(105,116,1)
(195,128,1)
(190,79,1)
(127,166,1)
(57,123,1)
(107,105,1)
(82,116,1)
(179,165,1)
(203,11,1)
(162,56,1)
(163,55,1)
(16,127,1)
(126,12,1)
(89,195,1)
(25,83,1)
(139,198,1)
(20,146,1)
(94,43,1)
(8,132,1)
(172,44,1)
(26,66,1)
(111,108,1)
(94,135,1)
(196,90,1)
(49,116,1)
(118,127,1)
(76,159,1)
(109,184,1)
(29,86,1)
(22,2,1)
(82,59,1)
(56,116,1)
(46,73,1)
(65,203,1)
(36,100,1)
(178,167,1)
(128,116,1)
(3,111,1)
(165,104,1)
(59,69,1)
(95,151,1)
(162,160,1)
(120,115,1)
(44,22,1)
(168,191,1)
(176,152,1)
(143,169,1)
(66,34,1)
(94,155,1)
(195,5,1)
(162,135,1)
(69,52,1)
(68,74,1)
(61,116,1)
(181,164,1)
(202,76,1)
(118,16,1)
(142,188,1)
(81,200,1)
(175,57,1)
(31,18,1)
(28,116,1)
(93,121,1)
(119,141,1)
(196,9,1)
(5,128,1)
(108,175,1)
(99,15,1)
(58,15,1)
(192,102,1)
(148,99,1)
(180,134,1)
(125,97,1)
(94,122,1)
(10,164,1)
(36,125,1)
(193,103,1)
(19,22,1)
(133,42,1)
(94,56,1)
(137,178,1)
(147,192,1)
(161,37,1)
(90,168,1)
(34,139,1)
(162,41,1)
(78,81,1)
(197,58,1)
(35,48,1)
(33,62,1)
(137,42,1)
(22,30,2)
(135,116,2)
(63,15,2)
(193,103,2)
(112,18,2)
(66,34,2)
(12,105,2)
(100,113,2)
(94,160,2)
(162,20,2)
(31,30,2)
(127,166,2)
(7,149,2)
(61,81,2)
(100,15,2)
(159,13,2)
(30,26,2)
(137,42,2)
(162,81,2)
(172,30,2)
(105,81,2)
(175,103,2)
(138,157,2)
(162,41,2)
(94,28,2)
(133,42,2)
(190,201,2)
(119,96,2)
(63,116,2)
(111,175,2)
(2,134,2)
(34,4,2)
(162,195,2)
(113,130,2)
(127,15,2)
(125,97,2)
(20,200,2)
(67,180,2)
(152,158,2)
(94,195,2)
(94,63,2)
(181,164,2)
(162,56,2)
(28,116,2)
(118,127,2)
(26,45,2)
(26,34,2)
(101,143,2)
(1,15,2)
(147,104,2)
(94,122,2)
(165,104,2)
(118,15,2)
(143,119,2)
(204,152,2)
(20,81,2)
(46,13,2)
(44,112,2)
(105,116,2)
(53,116,2)
(154,185,2)
(96,42,2)
(72,3,2)
(162,63,2)
(162,53,2)
(58,15,2)
(107,81,2)
(84,116,2)
(68,45,2)
(94,13,2)
(117,30,2)
(94,49,2)
(155,116,2)
(51,15,2)
(122,82,2)
(94,43,2)
(125,15,2)
(94,135,2)
(202,116,2)
(82,116,2)
(148,15,2)
(97,15,2)
(179,165,2)
(49,116,2)
(52,81,2)
(195,128,2)
(2,30,2)
(94,155,2)
(28,30,2)
(130,15,2)
(73,13,2)
(29,86,2)
(149,204,2)
(163,81,2)
(182,147,2)
(97,67,2)
(199,30,2)
(70,81,2)
(146,81,2)
(180,15,2)
(94,12,2)
(22,2,2)
(180,134,2)
(19,30,2)
(201,116,2)
(53,15,2)
(27,35,2)
(106,81,2)
(78,81,2)
(162,135,2)
(11,150,2)
(181,68,2)
(92,30,2)
(163,61,2)
(172,44,2)
(6,181,2)
(112,30,2)
(158,137,2)
(110,101,2)
(84,109,2)
(109,184,2)
(55,81,2)
(103,133,2)
(13,196,2)
(94,102,2)
(128,116,2)
(40,30,2)
(97,118,2)
(64,6,2)
(76,13,2)
(30,34,2)
(61,116,2)
(94,190,2)
(160,116,2)
(150,193,2)
(162,28,2)
(94,163,2)
(16,15,2)
(102,116,2)
(162,49,2)
(94,41,2)
(202,13,2)
(67,15,2)
(56,116,2)
(157,42,2)
(154,13,2)
(94,53,2)
(197,15,2)
(3,111,2)
(185,13,2)
(94,154,2)
(90,138,2)
(43,116,2)
(88,15,2)
(196,90,2)
(173,15,2)
(126,81,2)
(18,30,2)
(18,166,2)
(94,56,2)
(44,30,2)
(80,81,2)
(113,15,2)
(35,60,2)
(81,200,2)
(99,15,2)
(41,116,2)
(162,190,2)
(184,116,2)
(174,81,2)
(162,160,2)
(12,81,2)
(44,22,2)
(0,15,2)
-----------------------------------
(0,stride)
(1,3)
(2,ilog2(size)
(3,cpu_to_be32(mdev->priv_uar.index)
(4,int is_tx)
(5,ackto)
(6,cpu_to_be32(7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET)
(7,context->db_rec_addr = cpu_to_be64(priv->res.db.dma << 2)
(8,context->pri_path.counter_index = 0xff)
(9,NETIF_F_HW_VLAN_CTAG_RX)
(10,rss)
(11,context->pd = cpu_to_be32(mdev->priv_pdn)
(12,context->pri_path.sched_queue)
(13,!(dev->features & NETIF_F_HW_VLAN_CTAG_RX)
(14,RET)
(15,is_tx)
(16,4)
(17,context)
(18,ilog2(stride)
(19,stride)
(20,user_prio << 3)
(21,if (is_tx)
(22,ilog2(size)
(23,user_prio)
(24,usr_page)
(25,flags)
(26,!rss)
(27,context->local_qpn = cpu_to_be32(qpn)
(28,context->rq_size_stride)
(29,context->pri_path.ackto = 1 & 0x07)
(30,!is_tx && !rss)
(31,4)
(32,mdev)
(33,db_rec_addr)
(34,!is_tx)
(35,cpu_to_be32(qpn)
(36,context)
(37,priv)
(38,dma)
(39,0x83)
(40,rq_size_stride)
(41,context->pd)
(42,struct mlx4_en_priv *priv)
(43,context->db_rec_addr)
(44,ilog2(size)
(45,int rss)
(46,30)
(47,if (!(dev->features & NETIF_F_HW_VLAN_CTAG_RX)
(48,qpn)
(49,context->flags)
(50,pd)
(51,TXBB_SIZE)
(52,context->pri_path.feup = MLX4_FEUP_FORCE_ETH_UP)
(53,context->sq_size_stride)
(54,)
(55,feup)
(56,context->local_qpn)
(57,priv_uar)
(58,context)
(59,pri_path)
(60,int qpn)
(61,context->pri_path)
(62,context)
(63,context->sq_size_stride)
(64,context->flags = cpu_to_be32(7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET)
(65,mtu_msgmax)
(66,rss)
(67,ilog2(size)
(68,rss << MLX4_RSS_QPC_FLAG_OFFSET)
(69,context)
(70,MLX4_FEUP_FORCE_ETH_UP)
(71,if (!is_tx && !rss)
(72,context->usr_page = cpu_to_be32(mdev->priv_uar.index)
(73,1)
(74,MLX4_RSS_QPC_FLAG_OFFSET)
(75,7)
(76,param3)
(77,cqn_recv)
(78,context)
(79,sched_queue)
(80,pri_path)
(81,user_prio >= 0)
(82,context->pri_path)
(83,context)
(84,memset(context, 0, sizeof *context)
(85,)
(86,1 & 0x07)
(87,counter_index)
(88,size)
(89,1)
(90,dev->features)
(91,dev)
(92,3)
(93,port)
(94,context->param3 |= cpu_to_be32(1 << 30)
(95,cqn_send)
(96,priv->port)
(97,ilog2(size)
(98,0x07)
(99,context)
(100,context->sq_size_stride = ilog2(TXBB_SIZE)
(101,0x83 | (priv->port - 1)
(102,context->cqn_send)
(103,*mdev = priv->mdev)
(104,int cqn)
(105,context->pri_path)
(106,context)
(107,sched_queue)
(108,index)
(109,sizeof *context)
(110,context->pri_path.sched_queue = 0x83 | (priv->port - 1)
(111,mdev->priv_uar.index)
(112,ilog2(stride)
(113,ilog2(TXBB_SIZE)
(114,context)
(115,context)
(116,struct mlx4_qp_context *context)
(117,size)
(118,ilog2(stride)
(119,priv->port - 1)
(120,pri_path)
(121,priv)
(122,context->pri_path.counter_index)
(123,mdev)
(124,context)
(125,context->sq_size_stride = ilog2(size)
(126,user_prio)
(127,ilog2(stride)
(128,context->pri_path)
(129,if (user_prio >= 0)
(130,ilog2(TXBB_SIZE)
(131,priv_pdn)
(132,0xff)
(133,priv->mdev)
(134,int size)
(135,context->mtu_msgmax)
(136,dev)
(137,priv->res)
(138,*dev = priv->dev)
(139,is_tx)
(140,context)
(141,1)
(142,priv)
(143,(priv->port - 1)
(144,0)
(145,16)
(146,3)
(147,cpu_to_be32(cqn)
(148,sq_size_stride)
(149,cpu_to_be64(priv->res.db.dma << 2)
(150,cpu_to_be32(mdev->priv_pdn)
(151,context)
(152,priv->res.db.dma)
(153,mdev)
(154,cpu_to_be32(1 << 30)
(155,context->cqn_recv)
(156,context)
(157,priv->dev)
(158,priv->res.db)
(159,context)
(160,context->usr_page)
(161,dev)
(162,context->pri_path.sched_queue |= user_prio << 3)
(163,context->pri_path.feup)
(164,7 << 16)
(165,cpu_to_be32(cqn)
(166,int stride)
(167,priv)
(168,features)
(169,6)
(170,db)
(171,pri_path)
(172,context->rq_size_stride = ilog2(size)
(173,4)
(174,pri_path)
(175,mdev->priv_uar)
(176,2)
(177,0)
(178,res)
(179,context->cqn_recv = cpu_to_be32(cqn)
(180,ilog2(size)
(181,7 << 16 | rss << MLX4_RSS_QPC_FLAG_OFFSET)
(182,context->cqn_send = cpu_to_be32(cqn)
(183,mdev)
(184,*context)
(185,1 << 30)
(186,cqn)
(187,context)
(188,mdev)
(189,local_qpn)
(190,context->pri_path.sched_queue)
(191,dev)
(192,cqn)
(193,mdev->priv_pdn)
(194,0xff)
(195,context->pri_path.ackto)
(196,dev->features & NETIF_F_HW_VLAN_CTAG_RX)
(197,sq_size_stride)
(198,context->mtu_msgmax = 0xff)
(199,context)
(200,int user_prio)
(201,context->pri_path)
(202,context->param3)
(203,context)
(204,priv->res.db.dma << 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^