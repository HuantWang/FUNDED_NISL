-----label-----
1
-----code-----
static i40e_status i40e_shutdown_asq(struct i40e_hw *hw)
{
	i40e_status ret_code = 0;

	if (hw->aq.asq.count == 0)
		return I40E_ERR_NOT_READY;

	/* Stop firmware AdminQ processing */
	wr32(hw, hw->aq.asq.head, 0);
	wr32(hw, hw->aq.asq.tail, 0);
	wr32(hw, hw->aq.asq.len, 0);
	wr32(hw, hw->aq.asq.bal, 0);
	wr32(hw, hw->aq.asq.bah, 0);

	/* make sure lock is available */
	mutex_lock(&hw->aq.asq_mutex);

	hw->aq.asq.count = 0; /* to indicate uninitialized queue */

	/* free ring buffers */
	i40e_free_asq_bufs(hw);

	mutex_unlock(&hw->aq.asq_mutex);

	return ret_code;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
7,8
9,10
9,11
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
12,21
12,22
12,23
12,24
13,14
14,15
14,16
15,16
17,18
17,19
19,20
21,22
21,23
22,23
22,24
23,24
23,25
24,25
24,26
25,26
25,27
26,27
32,33
33,34
35,36
36,37
36,38
36,39
36,40
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
44,45
50,51
51,52
51,53
51,54
51,55
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
65,66
66,67
66,68
66,69
66,70
67,68
69,70
71,72
71,73
72,73
72,74
73,74
73,75
74,75
80,81
81,82
81,83
81,84
81,85
82,83
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
95,96
96,97
96,98
96,99
96,100
97,98
99,100
101,102
101,103
102,103
102,104
103,104
103,105
104,105
110,111
111,112
111,113
112,113
114,115
115,116
115,117
116,117
116,118
117,118
121,122
122,123
122,124
123,124
123,125
124,125
124,126
125,126
125,127
126,127
132,133
133,134
133,135
134,135
136,137
138,139
139,140
139,141
140,141
142,143
143,144
143,145
144,145
144,146
145,146
149,150
150,151
-----nextToken-----
3,5,8,10,11,16,18,20,27,28,29,30,31,34,38,40,45,46,47,48,49,53,55,60,61,62,63,64,68,70,75,76,77,78,79,83,85,90,91,92,93,94,98,100,105,106,107,108,109,113,118,119,120,127,128,129,130,131,135,137,141,146,147,148,151
-----computeFrom-----
22,23
22,24
122,123
122,124
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static i40e_status i40e_shutdown_asq(struct i40e_hw *hw){	i40e_status ret_code = 0;	if (hw->aq.asq.count == 0)		return I40E_ERR_NOT_READY;	/* Stop firmware AdminQ processing */	wr32(hw, hw->aq.asq.head, 0);	wr32(hw, hw->aq.asq.tail, 0);	wr32(hw, hw->aq.asq.len, 0);	wr32(hw, hw->aq.asq.bal, 0);	wr32(hw, hw->aq.asq.bah, 0);	/* make sure lock is available */	mutex_lock(&hw->aq.asq_mutex);	hw->aq.asq.count = 0; /* to indicate uninitialized queue */	/* free ring buffers */	i40e_free_asq_bufs(hw);	mutex_unlock(&hw->aq.asq_mutex);	return ret_code;}
static i40e_status
i40e_status
i40e_shutdown_asq(struct i40e_hw *hw)
i40e_shutdown_asq
struct i40e_hw *hw
struct i40e_hw
i40e_hw
*hw
*
hw
{	i40e_status ret_code = 0;	if (hw->aq.asq.count == 0)		return I40E_ERR_NOT_READY;	/* Stop firmware AdminQ processing */	wr32(hw, hw->aq.asq.head, 0);	wr32(hw, hw->aq.asq.tail, 0);	wr32(hw, hw->aq.asq.len, 0);	wr32(hw, hw->aq.asq.bal, 0);	wr32(hw, hw->aq.asq.bah, 0);	/* make sure lock is available */	mutex_lock(&hw->aq.asq_mutex);	hw->aq.asq.count = 0; /* to indicate uninitialized queue */	/* free ring buffers */	i40e_free_asq_bufs(hw);	mutex_unlock(&hw->aq.asq_mutex);	return ret_code;}
i40e_status ret_code = 0;
i40e_status ret_code = 0;
i40e_status
i40e_status
ret_code = 0
ret_code
= 0
0
if (hw->aq.asq.count == 0)		return I40E_ERR_NOT_READY;
hw->aq.asq.count == 0
hw->aq.asq.count
hw->aq.asq
hw->aq
hw
hw
aq
asq
count
0
return I40E_ERR_NOT_READY;
I40E_ERR_NOT_READY
I40E_ERR_NOT_READY
wr32(hw, hw->aq.asq.head, 0);
wr32(hw, hw->aq.asq.head, 0)
wr32
wr32
hw
hw
hw->aq.asq.head
hw->aq.asq
hw->aq
hw
hw
aq
asq
head
0
wr32(hw, hw->aq.asq.tail, 0);
wr32(hw, hw->aq.asq.tail, 0)
wr32
wr32
hw
hw
hw->aq.asq.tail
hw->aq.asq
hw->aq
hw
hw
aq
asq
tail
0
wr32(hw, hw->aq.asq.len, 0);
wr32(hw, hw->aq.asq.len, 0)
wr32
wr32
hw
hw
hw->aq.asq.len
hw->aq.asq
hw->aq
hw
hw
aq
asq
len
0
wr32(hw, hw->aq.asq.bal, 0);
wr32(hw, hw->aq.asq.bal, 0)
wr32
wr32
hw
hw
hw->aq.asq.bal
hw->aq.asq
hw->aq
hw
hw
aq
asq
bal
0
wr32(hw, hw->aq.asq.bah, 0);
wr32(hw, hw->aq.asq.bah, 0)
wr32
wr32
hw
hw
hw->aq.asq.bah
hw->aq.asq
hw->aq
hw
hw
aq
asq
bah
0
mutex_lock(&hw->aq.asq_mutex);
mutex_lock(&hw->aq.asq_mutex)
mutex_lock
mutex_lock
&hw->aq.asq_mutex
hw->aq.asq_mutex
hw->aq
hw
hw
aq
asq_mutex
hw->aq.asq.count = 0;
hw->aq.asq.count = 0
hw->aq.asq.count
hw->aq.asq
hw->aq
hw
hw
aq
asq
count
0
i40e_free_asq_bufs(hw);
i40e_free_asq_bufs(hw)
i40e_free_asq_bufs
i40e_free_asq_bufs
hw
hw
mutex_unlock(&hw->aq.asq_mutex);
mutex_unlock(&hw->aq.asq_mutex)
mutex_unlock
mutex_unlock
&hw->aq.asq_mutex
hw->aq.asq_mutex
hw->aq
hw
hw
aq
asq_mutex
return ret_code;
ret_code
ret_code
-----joern-----
(47,82,0)
(62,6,0)
(2,37,0)
(63,64,0)
(72,82,0)
(88,1,0)
(13,50,0)
(21,60,0)
(48,37,0)
(28,4,0)
(76,30,0)
(3,60,0)
(73,19,0)
(11,22,0)
(41,1,0)
(5,64,0)
(65,69,0)
(69,71,0)
(72,83,0)
(47,80,0)
(9,6,0)
(8,29,0)
(92,66,0)
(95,75,0)
(50,1,0)
(74,38,0)
(49,43,0)
(41,82,0)
(35,48,0)
(14,5,0)
(44,66,0)
(50,91,0)
(64,55,0)
(88,75,0)
(23,19,0)
(94,18,0)
(78,50,0)
(54,57,0)
(21,57,0)
(84,39,0)
(56,23,0)
(31,30,0)
(10,62,0)
(41,61,0)
(43,49,0)
(6,80,0)
(80,47,0)
(53,41,0)
(20,82,0)
(90,20,0)
(66,92,0)
(29,1,0)
(11,84,0)
(51,58,0)
(6,62,0)
(42,47,0)
(89,84,0)
(12,66,0)
(47,1,0)
(30,1,0)
(43,1,0)
(86,82,0)
(28,92,0)
(55,64,0)
(92,28,0)
(33,29,0)
(46,43,0)
(37,48,0)
(87,5,0)
(32,39,0)
(61,19,0)
(19,61,0)
(62,1,0)
(37,18,0)
(30,82,0)
(4,82,0)
(68,18,0)
(49,83,0)
(61,41,0)
(29,69,0)
(0,23,0)
(57,20,0)
(70,82,0)
(77,60,0)
(27,38,0)
(40,62,0)
(79,22,0)
(52,88,0)
(55,58,0)
(5,1,0)
(7,88,0)
(24,71,0)
(4,28,0)
(75,91,0)
(38,71,0)
(45,80,0)
(50,82,0)
(25,47,0)
(81,41,0)
(71,38,0)
(19,23,0)
(48,30,0)
(93,49,0)
(36,61,0)
(75,88,0)
(23,1,0)
(69,29,0)
(91,75,0)
(85,70,0)
(60,1,0)
(67,82,0)
(16,39,0)
(57,21,0)
(83,49,0)
(18,37,0)
(38,1,0)
(34,92,0)
(15,21,0)
(30,48,0)
(64,5,0)
(29,82,0)
(83,72,0)
(80,6,0)
(18,1,0)
(70,1,0)
(66,1,0)
(84,82,0)
(91,50,0)
(58,55,0)
(60,21,0)
(59,43,0)
(39,82,0)
(26,55,0)
(17,91,0)
(71,69,0)
(43,59,1)
(74,27,1)
(29,69,1)
(37,2,1)
(90,57,1)
(88,7,1)
(44,12,1)
(64,63,1)
(4,28,1)
(41,61,1)
(51,55,1)
(23,1,1)
(10,40,1)
(61,19,1)
(50,91,1)
(62,1,1)
(57,54,1)
(60,77,1)
(61,36,1)
(12,41,1)
(53,61,1)
(9,62,1)
(35,37,1)
(17,75,1)
(39,32,1)
(41,1,1)
(25,58,1)
(76,29,1)
(37,18,1)
(22,79,1)
(49,43,1)
(31,48,1)
(70,85,1)
(56,81,1)
(87,14,1)
(21,60,1)
(29,1,1)
(84,39,1)
(48,35,1)
(27,8,1)
(26,64,1)
(43,1,1)
(47,80,1)
(55,26,1)
(30,1,1)
(60,1,1)
(79,58,1)
(23,0,1)
(95,88,1)
(5,87,1)
(8,50,1)
(57,21,1)
(77,3,1)
(55,64,1)
(75,95,1)
(93,43,1)
(84,89,1)
(92,34,1)
(32,16,1)
(80,6,1)
(80,45,1)
(38,74,1)
(40,25,1)
(33,69,1)
(69,65,1)
(47,42,1)
(91,17,1)
(92,66,1)
(18,1,1)
(65,71,1)
(7,52,1)
(48,37,1)
(41,53,1)
(21,15,1)
(20,90,1)
(71,24,1)
(78,91,1)
(62,10,1)
(11,22,1)
(69,71,1)
(85,20,1)
(18,68,1)
(72,83,1)
(54,21,1)
(5,1,1)
(29,33,1)
(30,31,1)
(49,93,1)
(2,18,1)
(94,76,1)
(0,56,1)
(73,23,1)
(38,1,1)
(50,78,1)
(83,49,1)
(70,1,1)
(6,62,1)
(89,72,1)
(24,38,1)
(19,73,1)
(14,39,1)
(11,84,1)
(63,5,1)
(59,46,1)
(13,47,1)
(19,23,1)
(28,92,1)
(64,5,1)
(58,55,1)
(45,6,1)
(75,88,1)
(68,94,1)
(42,80,1)
(47,1,1)
(50,1,1)
(58,51,1)
(34,66,1)
(3,4,1)
(88,1,1)
(91,75,1)
(81,30,1)
(52,13,1)
(66,44,1)
(6,9,1)
(36,19,1)
(15,60,1)
(30,48,1)
(66,1,1)
(71,38,1)
(46,70,1)
(84,39,2)
(23,58,2)
(50,58,2)
(37,58,2)
(11,22,2)
(89,58,2)
(54,58,2)
(11,84,2)
(92,66,2)
(70,1,2)
(43,58,2)
(83,58,2)
(64,5,2)
(19,23,2)
(6,62,2)
(59,58,2)
(80,6,2)
(15,58,2)
(79,58,2)
(71,58,2)
(37,18,2)
(17,58,2)
(19,58,2)
(28,92,2)
(29,1,2)
(94,58,2)
(91,75,2)
(28,58,2)
(27,58,2)
(42,58,2)
(33,58,2)
(69,58,2)
(38,1,2)
(31,58,2)
(5,1,2)
(75,58,2)
(30,48,2)
(45,58,2)
(93,58,2)
(62,58,2)
(92,58,2)
(61,58,2)
(6,58,2)
(30,1,2)
(29,58,2)
(46,58,2)
(47,1,2)
(88,58,2)
(23,1,2)
(9,58,2)
(35,58,2)
(12,58,2)
(30,58,2)
(78,58,2)
(36,58,2)
(66,1,2)
(2,58,2)
(44,58,2)
(50,1,2)
(22,58,2)
(4,28,2)
(8,58,2)
(72,83,2)
(95,58,2)
(25,58,2)
(7,58,2)
(18,58,2)
(72,58,2)
(80,58,2)
(57,21,2)
(57,58,2)
(74,58,2)
(70,58,2)
(41,58,2)
(65,58,2)
(52,58,2)
(20,58,2)
(68,58,2)
(85,58,2)
(48,37,2)
(60,1,2)
(71,38,2)
(84,58,2)
(21,58,2)
(49,58,2)
(56,58,2)
(50,91,2)
(10,58,2)
(61,19,2)
(55,64,2)
(34,58,2)
(0,58,2)
(13,58,2)
(29,69,2)
(47,80,2)
(40,58,2)
(75,88,2)
(88,1,2)
(91,58,2)
(49,43,2)
(18,1,2)
(43,1,2)
(24,58,2)
(77,58,2)
(21,60,2)
(66,58,2)
(69,71,2)
(90,58,2)
(4,58,2)
(53,58,2)
(60,58,2)
(41,61,2)
(58,55,2)
(73,58,2)
(41,1,2)
(38,58,2)
(62,1,2)
(83,49,2)
(47,58,2)
(48,58,2)
(81,58,2)
(76,58,2)
(3,58,2)
-----------------------------------
(0,aq)
(1,struct i40e_hw *hw)
(2,asq)
(3,hw)
(4,mutex_lock(&hw->aq.asq_mutex)
(5,hw->aq)
(6,hw->aq.asq)
(7,aq)
(8,hw)
(9,asq)
(10,aq)
(11,RET)
(12,hw)
(13,hw)
(14,hw)
(15,asq)
(16,ret_code)
(17,tail)
(18,hw->aq)
(19,hw->aq.asq)
(20,hw->aq.asq.count = 0)
(21,hw->aq.asq)
(22,return I40E_ERR_NOT_READY;)
(23,hw->aq)
(24,asq)
(25,hw)
(26,count)
(27,hw)
(28,&hw->aq.asq_mutex)
(29,wr32(hw, hw->aq.asq.len, 0)
(30,wr32(hw, hw->aq.asq.bal, 0)
(31,0)
(32,0)
(33,0)
(34,asq_mutex)
(35,bal)
(36,bah)
(37,hw->aq.asq)
(38,hw->aq)
(39,ret_code = 0)
(40,hw)
(41,wr32(hw, hw->aq.asq.bah, 0)
(42,0)
(43,hw->aq)
(44,aq)
(45,head)
(46,hw)
(47,wr32(hw, hw->aq.asq.head, 0)
(48,hw->aq.asq.bal)
(49,hw->aq.asq_mutex)
(50,wr32(hw, hw->aq.asq.tail, 0)
(51,0)
(52,hw)
(53,0)
(54,count)
(55,hw->aq.asq.count)
(56,hw)
(57,hw->aq.asq.count)
(58,hw->aq.asq.count == 0)
(59,aq)
(60,hw->aq)
(61,hw->aq.asq.bah)
(62,hw->aq)
(63,asq)
(64,hw->aq.asq)
(65,len)
(66,hw->aq)
(67,ret_code)
(68,aq)
(69,hw->aq.asq.len)
(70,i40e_free_asq_bufs(hw)
(71,hw->aq.asq)
(72,mutex_unlock(&hw->aq.asq_mutex)
(73,asq)
(74,aq)
(75,hw->aq.asq)
(76,hw)
(77,aq)
(78,0)
(79,I40E_ERR_NOT_READY)
(80,hw->aq.asq.head)
(81,hw)
(82,)
(83,&hw->aq.asq_mutex)
(84,return ret_code;)
(85,hw)
(86,if (hw->aq.asq.count == 0)
(87,aq)
(88,hw->aq)
(89,ret_code)
(90,0)
(91,hw->aq.asq.tail)
(92,hw->aq.asq_mutex)
(93,asq_mutex)
(94,hw)
(95,asq)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^