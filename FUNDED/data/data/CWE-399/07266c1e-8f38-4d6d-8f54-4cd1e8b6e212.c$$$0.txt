-----label-----
1
-----code-----
static void xgene_get_strings(struct net_device *ndev, u32 stringset, u8 *data)
{
	int i;
	u8 *p = data;

	if (stringset != ETH_SS_STATS)
		return;

	for (i = 0; i < XGENE_STATS_LEN; i++) {
		memcpy(p, gstrings_stats[i].name, ETH_GSTRING_LEN);
		p += ETH_GSTRING_LEN;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
22,25
22,26
23,24
24,25
24,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
38,39
38,40
39,40
39,41
40,41
42,43
45,46
45,47
45,48
45,49
46,47
47,48
47,49
48,49
51,52
51,53
52,53
54,55
56,57
57,58
59,60
59,61
60,61
61,62
61,63
61,64
61,65
62,63
64,65
66,67
66,68
67,68
67,69
68,69
70,71
73,74
75,76
76,77
76,78
77,78
79,80
-----nextToken-----
2,4,7,9,10,13,15,18,20,21,25,27,31,33,34,37,41,43,44,49,50,53,55,58,63,65,69,71,72,74,78,80
-----computeFrom-----
39,40
39,41
47,48
47,49
51,52
51,53
76,77
76,78
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void xgene_get_strings(struct net_device *ndev, u32 stringset, u8 *data){	int i;	u8 *p = data;	if (stringset != ETH_SS_STATS)		return;	for (i = 0; i < XGENE_STATS_LEN; i++) {		memcpy(p, gstrings_stats[i].name, ETH_GSTRING_LEN);		p += ETH_GSTRING_LEN;	}}
static void
xgene_get_strings(struct net_device *ndev, u32 stringset, u8 *data)
xgene_get_strings
struct net_device *ndev
struct net_device
net_device
*ndev
*
ndev
u32 stringset
u32
u32
stringset
stringset
u8 *data
u8
u8
*data
*
data
{	int i;	u8 *p = data;	if (stringset != ETH_SS_STATS)		return;	for (i = 0; i < XGENE_STATS_LEN; i++) {		memcpy(p, gstrings_stats[i].name, ETH_GSTRING_LEN);		p += ETH_GSTRING_LEN;	}}
int i;
int i;
int
i
i
u8 *p = data;
u8 *p = data;
u8
u8
*p = data
*
p
= data
data
data
if (stringset != ETH_SS_STATS)		return;
stringset != ETH_SS_STATS
stringset
stringset
ETH_SS_STATS
ETH_SS_STATS
return;
for (i = 0; i < XGENE_STATS_LEN; i++) {		memcpy(p, gstrings_stats[i].name, ETH_GSTRING_LEN);		p += ETH_GSTRING_LEN;	}
i = 0;
i = 0
i
i
0
i < XGENE_STATS_LEN
i
i
XGENE_STATS_LEN
XGENE_STATS_LEN
i++
i
i
{		memcpy(p, gstrings_stats[i].name, ETH_GSTRING_LEN);		p += ETH_GSTRING_LEN;	}
memcpy(p, gstrings_stats[i].name, ETH_GSTRING_LEN);
memcpy(p, gstrings_stats[i].name, ETH_GSTRING_LEN)
memcpy
memcpy
p
p
gstrings_stats[i].name
gstrings_stats[i]
gstrings_stats
gstrings_stats
i
i
name
ETH_GSTRING_LEN
ETH_GSTRING_LEN
p += ETH_GSTRING_LEN;
p += ETH_GSTRING_LEN
p
p
ETH_GSTRING_LEN
ETH_GSTRING_LEN
-----joern-----
(10,34,0)
(14,34,0)
(13,27,0)
(20,20,0)
(21,2,0)
(9,34,0)
(4,22,0)
(20,18,0)
(24,31,0)
(0,14,0)
(30,24,0)
(27,1,0)
(22,20,0)
(2,32,0)
(22,31,0)
(11,27,0)
(33,32,0)
(29,12,0)
(14,3,0)
(16,24,0)
(22,14,0)
(8,14,0)
(19,34,0)
(12,32,0)
(5,31,0)
(26,32,0)
(15,34,0)
(7,2,0)
(22,18,0)
(28,20,0)
(23,17,0)
(6,20,0)
(31,24,0)
(25,22,0)
(20,14,0)
(31,22,0)
(24,32,0)
(28,22,1)
(27,13,1)
(24,32,1)
(22,14,1)
(31,5,1)
(12,29,1)
(22,20,1)
(13,11,1)
(23,17,1)
(4,31,1)
(17,27,1)
(0,8,1)
(6,28,1)
(14,3,1)
(7,21,1)
(5,24,1)
(30,25,1)
(22,4,1)
(20,6,1)
(24,16,1)
(31,24,1)
(21,12,1)
(29,20,1)
(32,33,1)
(14,0,1)
(16,30,1)
(20,20,1)
(25,2,1)
(2,7,1)
(21,32,1)
(11,14,1)
(12,32,1)
(27,1,1)
(26,27,1)
(20,14,1)
(2,32,1)
(22,31,1)
(33,26,1)
(23,2,1)
(22,2,2)
(30,2,2)
(31,24,2)
(20,14,2)
(23,17,2)
(31,2,2)
(32,27,2)
(4,2,2)
(24,32,2)
(20,20,2)
(7,2,2)
(22,20,2)
(17,27,2)
(27,1,2)
(2,2,2)
(2,32,2)
(22,31,2)
(21,2,2)
(26,27,2)
(12,2,2)
(25,2,2)
(16,2,2)
(12,32,2)
(2,27,2)
(20,2,2)
(7,27,2)
(21,27,2)
(28,2,2)
(5,2,2)
(24,2,2)
(22,14,2)
(14,3,2)
(29,2,2)
(6,2,2)
(33,27,2)
-----------------------------------
(0,data)
(1,u32 stringset)
(2,i < XGENE_STATS_LEN)
(3,u8 *data)
(4,ETH_GSTRING_LEN)
(5,name)
(6,ETH_GSTRING_LEN)
(7,XGENE_STATS_LEN)
(8,p)
(9,for (i = 0; i < XGENE_STATS_LEN; i++)
(10,i)
(11,stringset)
(12,i++)
(13,ETH_SS_STATS)
(14,*p = data)
(15,if (stringset != ETH_SS_STATS)
(16,i)
(17,return;)
(18,)
(19,p)
(20,p += ETH_GSTRING_LEN)
(21,i)
(22,memcpy(p, gstrings_stats[i].name, ETH_GSTRING_LEN)
(23,RET)
(24,gstrings_stats[i])
(25,p)
(26,i)
(27,stringset != ETH_SS_STATS)
(28,p)
(29,i)
(30,gstrings_stats)
(31,gstrings_stats[i].name)
(32,i = 0)
(33,0)
(34,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^