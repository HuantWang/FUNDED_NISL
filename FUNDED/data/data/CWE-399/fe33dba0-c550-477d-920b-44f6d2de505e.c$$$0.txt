-----label-----
0
-----code-----
int acpi_video_register(void)
{
	int result = 0;
	if (register_count) {
		/*
		 * if the function of acpi_video_register is already called,
		 * don't register the acpi_vide_bus again and return no error.
		 */
		return 0;
	}

	mutex_init(&video_list_lock);
	INIT_LIST_HEAD(&video_bus_head);

	result = acpi_bus_register_driver(&acpi_video_bus);
	if (result < 0)
		return -ENODEV;

	/*
	 * When the acpi_video_bus is loaded successfully, increase
	 * the counter reference.
	 */
	register_count = 1;

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
10,11
11,12
11,13
13,14
13,15
15,16
17,18
17,19
18,19
20,21
21,22
23,24
24,25
24,26
25,26
27,28
28,29
28,30
31,32
32,33
32,34
33,34
35,36
36,37
36,38
39,40
40,41
40,42
41,42
43,44
43,45
44,45
46,47
47,48
49,50
49,51
50,51
50,52
51,52
54,55
55,56
56,57
58,59
59,60
59,61
60,61
63,64
-----nextToken-----
2,4,6,8,12,14,16,19,22,26,29,30,34,37,38,42,45,48,52,53,57,61,62,64
-----computeFrom-----
40,41
40,42
50,51
50,52
59,60
59,61
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;IdExpression;Name;CompoundStatement;ReturnStatement;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;
-----ast_node-----
int acpi_video_register(void){	int result = 0;	if (register_count) {		/*		 * if the function of acpi_video_register is already called,		 * don't register the acpi_vide_bus again and return no error.		 */		return 0;	}	mutex_init(&video_list_lock);	INIT_LIST_HEAD(&video_bus_head);	result = acpi_bus_register_driver(&acpi_video_bus);	if (result < 0)		return -ENODEV;	/*	 * When the acpi_video_bus is loaded successfully, increase	 * the counter reference.	 */	register_count = 1;	return 0;}
int
acpi_video_register(void)
acpi_video_register
void
void


{	int result = 0;	if (register_count) {		/*		 * if the function of acpi_video_register is already called,		 * don't register the acpi_vide_bus again and return no error.		 */		return 0;	}	mutex_init(&video_list_lock);	INIT_LIST_HEAD(&video_bus_head);	result = acpi_bus_register_driver(&acpi_video_bus);	if (result < 0)		return -ENODEV;	/*	 * When the acpi_video_bus is loaded successfully, increase	 * the counter reference.	 */	register_count = 1;	return 0;}
int result = 0;
int result = 0;
int
result = 0
result
= 0
0
if (register_count) {		/*		 * if the function of acpi_video_register is already called,		 * don't register the acpi_vide_bus again and return no error.		 */		return 0;	}
register_count
register_count
{		/*		 * if the function of acpi_video_register is already called,		 * don't register the acpi_vide_bus again and return no error.		 */		return 0;	}
return 0;
0
mutex_init(&video_list_lock);
mutex_init(&video_list_lock);
mutex_init
mutex_init
(&video_list_lock)
&video_list_lock
&
video_list_lock
INIT_LIST_HEAD(&video_bus_head);
INIT_LIST_HEAD(&video_bus_head);
INIT_LIST_HEAD
INIT_LIST_HEAD
(&video_bus_head)
&video_bus_head
&
video_bus_head
result = acpi_bus_register_driver(&acpi_video_bus);
result = acpi_bus_register_driver(&acpi_video_bus)
result
result
acpi_bus_register_driver(&acpi_video_bus)
acpi_bus_register_driver
acpi_bus_register_driver
&acpi_video_bus
acpi_video_bus
acpi_video_bus
if (result < 0)		return -ENODEV;
result < 0
result
result
0
return -ENODEV;
-ENODEV
ENODEV
ENODEV
register_count = 1;
register_count = 1
register_count
register_count
1
return 0;
0
-----joern-----
(24,10,0)
(17,6,0)
(27,5,0)
(32,14,0)
(0,1,0)
(13,6,0)
(15,21,0)
(33,13,0)
(10,6,0)
(12,32,0)
(5,13,0)
(28,6,0)
(29,28,0)
(9,1,0)
(2,6,0)
(1,0,0)
(3,26,0)
(29,32,0)
(21,13,0)
(19,27,0)
(18,2,0)
(16,30,0)
(20,6,0)
(13,5,0)
(11,2,0)
(4,3,0)
(28,10,0)
(31,6,0)
(23,10,0)
(0,6,0)
(25,21,0)
(26,3,0)
(8,28,0)
(29,30,0)
(26,6,0)
(5,27,0)
(7,16,0)
(27,19,1)
(5,27,1)
(2,11,1)
(29,28,1)
(15,13,1)
(9,22,1)
(33,26,1)
(7,21,1)
(32,12,1)
(28,8,1)
(8,10,1)
(1,9,1)
(11,18,1)
(21,13,1)
(29,30,1)
(30,16,1)
(0,1,1)
(21,25,1)
(23,21,1)
(26,3,1)
(3,4,1)
(16,7,1)
(25,15,1)
(10,24,1)
(28,10,1)
(13,5,1)
(22,2,1)
(4,0,1)
(29,32,1)
(12,22,1)
(19,33,1)
(24,23,1)
(0,1,2)
(5,27,2)
(4,22,2)
(21,22,2)
(16,21,2)
(5,22,2)
(15,22,2)
(29,30,2)
(24,21,2)
(25,22,2)
(7,21,2)
(28,21,2)
(0,22,2)
(1,22,2)
(21,13,2)
(19,22,2)
(29,32,2)
(13,5,2)
(12,22,2)
(23,21,2)
(8,21,2)
(3,22,2)
(13,22,2)
(28,10,2)
(27,22,2)
(29,28,2)
(26,3,2)
(9,22,2)
(26,22,2)
(30,21,2)
(10,21,2)
(33,22,2)
(32,22,2)
-----------------------------------
(0,mutex_init(&video_list_lock)
(1,&video_list_lock)
(2,result = 0)
(3,&video_bus_head)
(4,video_bus_head)
(5,acpi_bus_register_driver(&acpi_video_bus)
(6,)
(7,ENODEV)
(8,0)
(9,video_list_lock)
(10,register_count = 1)
(11,0)
(12,0)
(13,result = acpi_bus_register_driver(&acpi_video_bus)
(14,)
(15,result)
(16,-ENODEV)
(17,if (result < 0)
(18,result)
(19,acpi_video_bus)
(20,if (register_count)
(21,result < 0)
(22,register_count)
(23,register_count)
(24,1)
(25,0)
(26,INIT_LIST_HEAD(&video_bus_head)
(27,&acpi_video_bus)
(28,return 0;)
(29,RET)
(30,return -ENODEV;)
(31,result)
(32,return 0;)
(33,result)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^