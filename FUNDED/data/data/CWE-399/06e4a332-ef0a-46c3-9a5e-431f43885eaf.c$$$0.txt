-----label-----
1
-----code-----
static bool usb3_std_req_get_status(struct renesas_usb3 *usb3,
				    struct usb_ctrlrequest *ctrl)
{
	bool stall = false;
	struct renesas_usb3_ep *usb3_ep;
	int num;
	u16 status = 0;

	switch (ctrl->bRequestType & USB_RECIP_MASK) {
	case USB_RECIP_DEVICE:
		if (usb3->gadget.is_selfpowered)
			status |= 1 << USB_DEVICE_SELF_POWERED;
		if (usb3->gadget.speed == USB_SPEED_SUPER)
			status |= usb3_feature_get_un_enabled(usb3);
		break;
	case USB_RECIP_INTERFACE:
		break;
	case USB_RECIP_ENDPOINT:
		num = le16_to_cpu(ctrl->wIndex) & USB_ENDPOINT_NUMBER_MASK;
		usb3_ep = usb3_get_ep(usb3, num);
		if (usb3_ep->halt)
			status |= 1 << USB_ENDPOINT_HALT;
		break;
	default:
		stall = true;
		break;
	}

	if (!stall) {
		status = cpu_to_le16(status);
		dev_dbg(usb3_to_dev(usb3), "get_status: req = %p\n",
			usb_req_to_usb3_req(usb3->ep0_req));
		usb3_pipe0_internal_xfer(usb3, &status, sizeof(status),
					 usb3_pipe0_get_status_completion);
	}

	return stall;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
33,34
33,35
35,36
37,38
38,39
38,40
39,40
41,42
41,43
43,44
45,46
45,47
46,47
46,48
47,48
47,49
48,49
51,52
53,54
53,55
53,56
53,57
53,58
53,59
53,60
53,61
53,62
53,63
53,64
53,65
53,66
53,67
54,55
55,56
57,58
57,59
58,59
58,60
59,60
59,61
60,61
64,65
65,66
65,67
66,67
68,69
68,70
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
76,77
80,81
82,83
83,84
83,85
84,85
86,87
86,88
87,88
89,90
92,93
93,94
96,97
97,98
99,100
100,101
100,102
101,102
103,104
103,105
104,105
104,106
105,106
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
117,118
117,119
117,120
118,119
120,121
122,123
124,125
124,126
125,126
125,127
126,127
129,130
130,131
130,132
131,132
133,134
133,135
135,136
139,140
140,141
140,142
141,142
145,146
145,147
146,147
147,148
149,150
149,151
149,152
150,151
151,152
151,153
152,153
154,155
154,156
155,156
157,158
159,160
160,161
160,162
160,163
160,164
161,162
163,164
163,165
164,165
166,167
169,170
169,171
170,171
172,173
172,174
173,174
176,177
177,178
177,179
177,180
177,181
177,182
178,179
180,181
182,183
183,184
185,186
186,187
187,188
189,190
191,192
192,193
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,24,28,30,31,34,36,40,42,44,49,50,52,56,61,62,63,67,69,71,77,78,79,81,85,88,90,91,94,95,98,102,106,109,110,112,116,119,121,123,127,128,132,134,136,137,138,142,143,144,148,153,156,158,162,165,167,168,171,174,175,179,181,184,188,190,193
-----computeFrom-----
46,47
46,48
65,66
65,67
68,69
68,70
73,74
73,75
83,84
83,85
100,101
100,102
103,104
103,105
114,115
114,116
130,131
130,132
133,134
133,135
140,141
140,142
151,152
151,153
-----guardedBy-----
77,90
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;SwitchStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static bool usb3_std_req_get_status(struct renesas_usb3 *usb3,				    struct usb_ctrlrequest *ctrl){	bool stall = false;	struct renesas_usb3_ep *usb3_ep;	int num;	u16 status = 0;	switch (ctrl->bRequestType & USB_RECIP_MASK) {	case USB_RECIP_DEVICE:		if (usb3->gadget.is_selfpowered)			status |= 1 << USB_DEVICE_SELF_POWERED;		if (usb3->gadget.speed == USB_SPEED_SUPER)			status |= usb3_feature_get_un_enabled(usb3);		break;	case USB_RECIP_INTERFACE:		break;	case USB_RECIP_ENDPOINT:		num = le16_to_cpu(ctrl->wIndex) & USB_ENDPOINT_NUMBER_MASK;		usb3_ep = usb3_get_ep(usb3, num);		if (usb3_ep->halt)			status |= 1 << USB_ENDPOINT_HALT;		break;	default:		stall = true;		break;	}	if (!stall) {		status = cpu_to_le16(status);		dev_dbg(usb3_to_dev(usb3), "get_status: req = %p\n",			usb_req_to_usb3_req(usb3->ep0_req));		usb3_pipe0_internal_xfer(usb3, &status, sizeof(status),					 usb3_pipe0_get_status_completion);	}	return stall;}
static bool
usb3_std_req_get_status(struct renesas_usb3 *usb3,				    struct usb_ctrlrequest *ctrl)
usb3_std_req_get_status
struct renesas_usb3 *usb3
struct renesas_usb3
renesas_usb3
*usb3
*
usb3
struct usb_ctrlrequest *ctrl
struct usb_ctrlrequest
usb_ctrlrequest
*ctrl
*
ctrl
{	bool stall = false;	struct renesas_usb3_ep *usb3_ep;	int num;	u16 status = 0;	switch (ctrl->bRequestType & USB_RECIP_MASK) {	case USB_RECIP_DEVICE:		if (usb3->gadget.is_selfpowered)			status |= 1 << USB_DEVICE_SELF_POWERED;		if (usb3->gadget.speed == USB_SPEED_SUPER)			status |= usb3_feature_get_un_enabled(usb3);		break;	case USB_RECIP_INTERFACE:		break;	case USB_RECIP_ENDPOINT:		num = le16_to_cpu(ctrl->wIndex) & USB_ENDPOINT_NUMBER_MASK;		usb3_ep = usb3_get_ep(usb3, num);		if (usb3_ep->halt)			status |= 1 << USB_ENDPOINT_HALT;		break;	default:		stall = true;		break;	}	if (!stall) {		status = cpu_to_le16(status);		dev_dbg(usb3_to_dev(usb3), "get_status: req = %p\n",			usb_req_to_usb3_req(usb3->ep0_req));		usb3_pipe0_internal_xfer(usb3, &status, sizeof(status),					 usb3_pipe0_get_status_completion);	}	return stall;}
bool stall = false;
bool stall = false;
bool
stall = false
stall
= false
false
struct renesas_usb3_ep *usb3_ep;
struct renesas_usb3_ep *usb3_ep;
struct renesas_usb3_ep
renesas_usb3_ep
*usb3_ep
*
usb3_ep
int num;
int num;
int
num
num
u16 status = 0;
u16 status = 0;
u16
u16
status = 0
status
= 0
0
switch (ctrl->bRequestType & USB_RECIP_MASK) {	case USB_RECIP_DEVICE:		if (usb3->gadget.is_selfpowered)			status |= 1 << USB_DEVICE_SELF_POWERED;		if (usb3->gadget.speed == USB_SPEED_SUPER)			status |= usb3_feature_get_un_enabled(usb3);		break;	case USB_RECIP_INTERFACE:		break;	case USB_RECIP_ENDPOINT:		num = le16_to_cpu(ctrl->wIndex) & USB_ENDPOINT_NUMBER_MASK;		usb3_ep = usb3_get_ep(usb3, num);		if (usb3_ep->halt)			status |= 1 << USB_ENDPOINT_HALT;		break;	default:		stall = true;		break;	}
ctrl->bRequestType & USB_RECIP_MASK
ctrl->bRequestType
ctrl
ctrl
bRequestType
USB_RECIP_MASK
USB_RECIP_MASK
{	case USB_RECIP_DEVICE:		if (usb3->gadget.is_selfpowered)			status |= 1 << USB_DEVICE_SELF_POWERED;		if (usb3->gadget.speed == USB_SPEED_SUPER)			status |= usb3_feature_get_un_enabled(usb3);		break;	case USB_RECIP_INTERFACE:		break;	case USB_RECIP_ENDPOINT:		num = le16_to_cpu(ctrl->wIndex) & USB_ENDPOINT_NUMBER_MASK;		usb3_ep = usb3_get_ep(usb3, num);		if (usb3_ep->halt)			status |= 1 << USB_ENDPOINT_HALT;		break;	default:		stall = true;		break;	}
case USB_RECIP_DEVICE:
USB_RECIP_DEVICE
USB_RECIP_DEVICE
if (usb3->gadget.is_selfpowered)			status |= 1 << USB_DEVICE_SELF_POWERED;
usb3->gadget.is_selfpowered
usb3->gadget
usb3
usb3
gadget
is_selfpowered
status |= 1 << USB_DEVICE_SELF_POWERED;
status |= 1 << USB_DEVICE_SELF_POWERED
status
status
1 << USB_DEVICE_SELF_POWERED
1
USB_DEVICE_SELF_POWERED
USB_DEVICE_SELF_POWERED
if (usb3->gadget.speed == USB_SPEED_SUPER)			status |= usb3_feature_get_un_enabled(usb3);
usb3->gadget.speed == USB_SPEED_SUPER
usb3->gadget.speed
usb3->gadget
usb3
usb3
gadget
speed
USB_SPEED_SUPER
USB_SPEED_SUPER
status |= usb3_feature_get_un_enabled(usb3);
status |= usb3_feature_get_un_enabled(usb3)
status
status
usb3_feature_get_un_enabled(usb3)
usb3_feature_get_un_enabled
usb3_feature_get_un_enabled
usb3
usb3
break;
case USB_RECIP_INTERFACE:
USB_RECIP_INTERFACE
USB_RECIP_INTERFACE
break;
case USB_RECIP_ENDPOINT:
USB_RECIP_ENDPOINT
USB_RECIP_ENDPOINT
num = le16_to_cpu(ctrl->wIndex) & USB_ENDPOINT_NUMBER_MASK;
num = le16_to_cpu(ctrl->wIndex) & USB_ENDPOINT_NUMBER_MASK
num
num
le16_to_cpu(ctrl->wIndex) & USB_ENDPOINT_NUMBER_MASK
le16_to_cpu(ctrl->wIndex)
le16_to_cpu
le16_to_cpu
ctrl->wIndex
ctrl
ctrl
wIndex
USB_ENDPOINT_NUMBER_MASK
USB_ENDPOINT_NUMBER_MASK
usb3_ep = usb3_get_ep(usb3, num);
usb3_ep = usb3_get_ep(usb3, num)
usb3_ep
usb3_ep
usb3_get_ep(usb3, num)
usb3_get_ep
usb3_get_ep
usb3
usb3
num
num
if (usb3_ep->halt)			status |= 1 << USB_ENDPOINT_HALT;
usb3_ep->halt
usb3_ep
usb3_ep
halt
status |= 1 << USB_ENDPOINT_HALT;
status |= 1 << USB_ENDPOINT_HALT
status
status
1 << USB_ENDPOINT_HALT
1
USB_ENDPOINT_HALT
USB_ENDPOINT_HALT
break;
default:
stall = true;
stall = true
stall
stall
true
break;
if (!stall) {		status = cpu_to_le16(status);		dev_dbg(usb3_to_dev(usb3), "get_status: req = %p\n",			usb_req_to_usb3_req(usb3->ep0_req));		usb3_pipe0_internal_xfer(usb3, &status, sizeof(status),					 usb3_pipe0_get_status_completion);	}
!stall
stall
stall
{		status = cpu_to_le16(status);		dev_dbg(usb3_to_dev(usb3), "get_status: req = %p\n",			usb_req_to_usb3_req(usb3->ep0_req));		usb3_pipe0_internal_xfer(usb3, &status, sizeof(status),					 usb3_pipe0_get_status_completion);	}
status = cpu_to_le16(status);
status = cpu_to_le16(status)
status
status
cpu_to_le16(status)
cpu_to_le16
cpu_to_le16
status
status
dev_dbg(usb3_to_dev(usb3), "get_status: req = %p\n",			usb_req_to_usb3_req(usb3->ep0_req));
dev_dbg(usb3_to_dev(usb3), "get_status: req = %p\n",			usb_req_to_usb3_req(usb3->ep0_req))
dev_dbg
dev_dbg
usb3_to_dev(usb3)
usb3_to_dev
usb3_to_dev
usb3
usb3
"get_status: req = %p\n"
usb_req_to_usb3_req(usb3->ep0_req)
usb_req_to_usb3_req
usb_req_to_usb3_req
usb3->ep0_req
usb3
usb3
ep0_req
usb3_pipe0_internal_xfer(usb3, &status, sizeof(status),					 usb3_pipe0_get_status_completion);
usb3_pipe0_internal_xfer(usb3, &status, sizeof(status),					 usb3_pipe0_get_status_completion)
usb3_pipe0_internal_xfer
usb3_pipe0_internal_xfer
usb3
usb3
&status
status
status
sizeof(status)
(status)
status
status
usb3_pipe0_get_status_completion
usb3_pipe0_get_status_completion
return stall;
stall
stall
-----joern-----
(31,54,0)
(67,31,0)
(13,54,0)
(1,36,0)
(80,58,0)
(58,80,0)
(50,94,0)
(77,96,0)
(62,36,0)
(82,17,0)
(59,57,0)
(71,16,0)
(76,85,0)
(24,59,0)
(97,57,0)
(85,48,0)
(54,99,0)
(0,52,0)
(79,16,0)
(75,2,0)
(81,70,0)
(93,36,0)
(22,79,0)
(17,45,0)
(46,36,0)
(68,98,0)
(53,54,0)
(69,77,0)
(95,31,0)
(98,29,0)
(28,62,0)
(25,99,0)
(5,85,0)
(65,58,0)
(35,13,0)
(49,36,0)
(17,82,0)
(54,13,0)
(31,8,0)
(7,14,0)
(94,48,0)
(62,57,0)
(47,14,0)
(55,43,0)
(4,10,0)
(34,48,0)
(86,27,0)
(75,39,0)
(60,34,0)
(91,77,0)
(64,34,0)
(44,43,0)
(85,5,0)
(78,98,0)
(101,99,0)
(26,99,0)
(33,79,0)
(73,96,0)
(40,99,0)
(8,31,0)
(29,98,0)
(87,99,0)
(29,27,0)
(82,11,0)
(88,39,0)
(37,99,0)
(63,39,0)
(66,82,0)
(58,19,0)
(45,17,0)
(14,70,0)
(3,99,0)
(27,29,0)
(10,99,0)
(2,75,0)
(30,45,0)
(98,48,0)
(9,2,0)
(5,75,0)
(79,39,0)
(16,39,0)
(84,58,0)
(72,2,0)
(20,45,0)
(31,48,0)
(94,82,0)
(41,77,0)
(79,5,0)
(56,99,0)
(21,41,0)
(79,75,0)
(39,36,0)
(77,41,0)
(96,77,0)
(22,11,0)
(8,99,0)
(59,10,0)
(92,8,0)
(89,42,0)
(77,11,0)
(90,99,0)
(42,34,0)
(6,10,0)
(5,39,0)
(96,22,0)
(52,16,0)
(23,99,0)
(34,42,0)
(83,52,0)
(18,5,0)
(12,57,0)
(13,80,0)
(62,10,0)
(45,48,0)
(80,13,0)
(32,36,0)
(74,22,0)
(38,29,0)
(79,22,0)
(57,36,0)
(61,62,0)
(100,36,0)
(16,52,0)
(82,94,0)
(41,22,0)
(70,14,0)
(15,99,0)
(43,8,0)
(14,19,0)
(51,75,0)
(77,48,0)
(44,8,1)
(92,54,1)
(82,17,1)
(14,19,1)
(55,44,1)
(77,41,1)
(64,70,1)
(40,10,1)
(65,84,1)
(30,66,1)
(35,80,1)
(76,18,1)
(58,19,1)
(5,75,1)
(26,5,1)
(29,98,1)
(5,39,1)
(4,6,1)
(16,52,1)
(54,13,1)
(60,64,1)
(77,96,1)
(24,56,1)
(81,14,1)
(53,70,1)
(96,22,1)
(72,51,1)
(17,45,1)
(51,42,1)
(21,91,1)
(98,48,1)
(68,75,1)
(96,73,1)
(47,7,1)
(83,0,1)
(24,90,1)
(31,48,1)
(84,53,1)
(52,83,1)
(29,38,1)
(26,27,1)
(14,47,1)
(28,77,1)
(79,16,1)
(20,30,1)
(43,55,1)
(94,50,1)
(79,75,1)
(16,39,1)
(41,21,1)
(71,43,1)
(70,14,1)
(7,39,1)
(28,59,1)
(56,16,1)
(39,63,1)
(24,40,1)
(88,57,1)
(24,26,1)
(41,22,1)
(85,76,1)
(68,42,1)
(45,48,1)
(57,12,1)
(10,4,1)
(91,82,1)
(94,48,1)
(77,48,1)
(43,8,1)
(9,72,1)
(67,95,1)
(69,96,1)
(38,98,1)
(74,59,1)
(79,39,1)
(31,67,1)
(82,94,1)
(12,97,1)
(50,22,1)
(79,33,1)
(63,88,1)
(61,62,1)
(62,28,1)
(79,5,1)
(18,27,1)
(80,58,1)
(56,43,1)
(42,34,1)
(73,41,1)
(31,54,1)
(90,70,1)
(33,74,1)
(5,85,1)
(8,31,1)
(75,39,1)
(85,48,1)
(45,20,1)
(95,92,1)
(98,78,1)
(62,57,1)
(66,94,1)
(59,57,1)
(75,2,1)
(13,80,1)
(89,34,1)
(77,69,1)
(78,68,1)
(13,35,1)
(27,86,1)
(70,81,1)
(62,10,1)
(34,48,1)
(2,9,1)
(59,24,1)
(58,65,1)
(6,70,1)
(22,79,1)
(59,10,1)
(34,60,1)
(86,29,1)
(0,71,1)
(27,29,1)
(42,89,1)
(58,70,2)
(18,27,2)
(10,70,2)
(16,52,2)
(79,75,2)
(43,70,2)
(73,59,2)
(0,43,2)
(86,70,2)
(16,39,2)
(67,70,2)
(29,70,2)
(85,27,2)
(70,14,2)
(5,85,2)
(77,41,2)
(6,70,2)
(34,48,2)
(41,59,2)
(26,70,2)
(77,59,2)
(78,70,2)
(55,70,2)
(76,27,2)
(38,70,2)
(77,48,2)
(59,57,2)
(82,59,2)
(75,42,2)
(34,70,2)
(61,62,2)
(94,59,2)
(30,59,2)
(33,59,2)
(95,70,2)
(31,70,2)
(98,48,2)
(69,59,2)
(43,8,2)
(59,10,2)
(80,58,2)
(40,70,2)
(79,16,2)
(54,70,2)
(21,59,2)
(22,59,2)
(9,42,2)
(96,59,2)
(60,70,2)
(85,48,2)
(4,70,2)
(84,70,2)
(41,22,2)
(66,59,2)
(71,43,2)
(51,42,2)
(29,98,2)
(72,42,2)
(79,59,2)
(13,80,2)
(42,34,2)
(82,17,2)
(83,43,2)
(82,94,2)
(35,70,2)
(90,70,2)
(20,59,2)
(44,70,2)
(62,57,2)
(75,2,2)
(27,29,2)
(56,70,2)
(27,70,2)
(8,70,2)
(98,70,2)
(2,42,2)
(91,59,2)
(96,22,2)
(45,48,2)
(62,10,2)
(74,59,2)
(52,43,2)
(14,19,2)
(22,79,2)
(64,70,2)
(5,75,2)
(31,48,2)
(50,59,2)
(92,70,2)
(42,70,2)
(80,70,2)
(79,5,2)
(13,70,2)
(65,70,2)
(58,19,2)
(8,31,2)
(77,96,2)
(17,59,2)
(53,70,2)
(68,70,2)
(5,27,2)
(54,13,2)
(5,39,2)
(16,43,2)
(75,39,2)
(31,54,2)
(89,70,2)
(79,39,2)
(17,45,2)
(45,59,2)
(94,48,2)
-----------------------------------
(0,1)
(1,switch (ctrl->bRequestType & USB_RECIP_MASK)
(2,1 << USB_DEVICE_SELF_POWERED)
(3,case USB_RECIP_ENDPOINT:)
(4,true)
(5,status |= usb3_feature_get_un_enabled(usb3)
(6,stall)
(7,ctrl)
(8,usb3_ep = usb3_get_ep(usb3, num)
(9,USB_DEVICE_SELF_POWERED)
(10,stall = true)
(11,)
(12,false)
(13,le16_to_cpu(ctrl->wIndex)
(14,ctrl->bRequestType)
(15,if (usb3->gadget.is_selfpowered)
(16,status |= 1 << USB_ENDPOINT_HALT)
(17,usb_req_to_usb3_req(usb3->ep0_req)
(18,status)
(19,struct usb_ctrlrequest *ctrl)
(20,ep0_req)
(21,status)
(22,status = cpu_to_le16(status)
(23,case USB_RECIP_DEVICE:)
(24,stall)
(25,case USB_RECIP_INTERFACE:)
(26,break;)
(27,usb3->gadget.speed == USB_SPEED_SUPER)
(28,stall)
(29,usb3->gadget.speed)
(30,usb3)
(31,usb3_get_ep(usb3, num)
(32,if (!stall)
(33,status)
(34,usb3->gadget)
(35,USB_ENDPOINT_NUMBER_MASK)
(36,)
(37,default:)
(38,speed)
(39,status = 0)
(40,break;)
(41,&status)
(42,usb3->gadget.is_selfpowered)
(43,usb3_ep->halt)
(44,usb3_ep)
(45,usb3->ep0_req)
(46,usb3_ep)
(47,bRequestType)
(48,struct renesas_usb3 *usb3)
(49,stall)
(50,usb3)
(51,status)
(52,1 << USB_ENDPOINT_HALT)
(53,num)
(54,num = le16_to_cpu(ctrl->wIndex)
(55,halt)
(56,break;)
(57,stall = false)
(58,ctrl->wIndex)
(59,!stall)
(60,gadget)
(61,RET)
(62,return stall;)
(63,0)
(64,usb3)
(65,wIndex)
(66,"get_status: req = %p\\n")
(67,num)
(68,usb3)
(69,usb3_pipe0_get_status_completion)
(70,ctrl->bRequestType & USB_RECIP_MASK)
(71,status)
(72,1)
(73,status)
(74,status)
(75,status |= 1 << USB_DEVICE_SELF_POWERED)
(76,usb3)
(77,usb3_pipe0_internal_xfer(usb3, &status, sizeof(status)
(78,gadget)
(79,cpu_to_le16(status)
(80,le16_to_cpu(ctrl->wIndex)
(81,USB_RECIP_MASK)
(82,dev_dbg(usb3_to_dev(usb3)
(83,USB_ENDPOINT_HALT)
(84,ctrl)
(85,usb3_feature_get_un_enabled(usb3)
(86,USB_SPEED_SUPER)
(87,if (usb3_ep->halt)
(88,status)
(89,is_selfpowered)
(90,break;)
(91,usb3)
(92,usb3_ep)
(93,status)
(94,usb3_to_dev(usb3)
(95,usb3)
(96,sizeof(status)
(97,stall)
(98,usb3->gadget)
(99,)
(100,num)
(101,if (usb3->gadget.speed == USB_SPEED_SUPER)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^