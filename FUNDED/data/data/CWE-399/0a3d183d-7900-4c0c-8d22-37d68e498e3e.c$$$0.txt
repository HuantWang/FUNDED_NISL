-----label-----
1
-----code-----
void
netxen_process_rcv(struct netxen_adapter *adapter, int ctxid,
		   struct status_desc *desc)
{
	struct pci_dev *pdev = adapter->pdev;
	struct net_device *netdev = adapter->netdev;
	u64 sts_data = le64_to_cpu(desc->status_desc_data);
	int index = netxen_get_sts_refhandle(sts_data);
	struct netxen_recv_context *recv_ctx = &(adapter->recv_ctx[ctxid]);
	struct netxen_rx_buffer *buffer;
	struct sk_buff *skb;
	u32 length = netxen_get_sts_totallength(sts_data);
	u32 desc_ctx;
	struct netxen_rcv_desc_ctx *rcv_desc;
	int ret;

	desc_ctx = netxen_get_sts_type(sts_data);
	if (unlikely(desc_ctx >= NUM_RCV_DESC_RINGS)) {
		printk("%s: %s Bad Rcv descriptor ring\n",
		       netxen_nic_driver_name, netdev->name);
		return;
	}

	rcv_desc = &recv_ctx->rcv_desc[desc_ctx];
	if (unlikely(index > rcv_desc->max_rx_desc_count)) {
		DPRINTK(ERR, "Got a buffer index:%x Max is %x\n",
			index, rcv_desc->max_rx_desc_count);
		return;
	}
	buffer = &rcv_desc->rx_buf_arr[index];
	if (desc_ctx == RCV_DESC_LRO_CTXID) {
		buffer->lro_current_frags++;
		if (netxen_get_sts_desc_lro_last_frag(desc)) {
			buffer->lro_expected_frags =
			    netxen_get_sts_desc_lro_cnt(desc);
			buffer->lro_length = length;
		}
		if (buffer->lro_current_frags != buffer->lro_expected_frags) {
			if (buffer->lro_expected_frags != 0) {
				printk("LRO: (refhandle:%x) recv frag."
				       "wait for last. flags: %x expected:%d"
				       "have:%d\n", index,
				       netxen_get_sts_desc_lro_last_frag(desc),
				       buffer->lro_expected_frags,
				       buffer->lro_current_frags);
			}
			return;
		}
	}

	pci_unmap_single(pdev, buffer->dma, rcv_desc->dma_size,
			 PCI_DMA_FROMDEVICE);

	skb = (struct sk_buff *)buffer->skb;

	if (likely(adapter->rx_csum &&
				netxen_get_sts_status(sts_data) == STATUS_CKSUM_OK)) {
		adapter->stats.csummed++;
		skb->ip_summed = CHECKSUM_UNNECESSARY;
	} else
		skb->ip_summed = CHECKSUM_NONE;

	skb->dev = netdev;
	if (desc_ctx == RCV_DESC_LRO_CTXID) {
		/* True length was only available on the last pkt */
		skb_put(skb, buffer->lro_length);
	} else {
		skb_put(skb, length);
	}

	skb->protocol = eth_type_trans(skb, netdev);

	ret = netif_receive_skb(skb);

	/*
	 * RH: Do we need these stats on a regular basis. Can we get it from
	 * Linux stats.
	 */
	switch (ret) {
	case NET_RX_SUCCESS:
		adapter->stats.uphappy++;
		break;

	case NET_RX_CN_LOW:
		adapter->stats.uplcong++;
		break;

	case NET_RX_CN_MOD:
		adapter->stats.upmcong++;
		break;

	case NET_RX_CN_HIGH:
		adapter->stats.uphcong++;
		break;

	case NET_RX_DROP:
		adapter->stats.updropped++;
		break;

	default:
		adapter->stats.updunno++;
		break;
	}

	netdev->last_rx = jiffies;

	rcv_desc->rcv_free++;
	rcv_desc->rcv_pending--;

	/*
	 * We just consumed one buffer so post a buffer.
	 */
	buffer->skb = NULL;
	buffer->state = NETXEN_BUFFER_FREE;
	buffer->lro_current_frags = 0;
	buffer->lro_expected_frags = 0;

	adapter->stats.no_rcv++;
	adapter->stats.rxbytes += length;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
18,19
18,20
21,22
21,23
21,24
21,25
21,26
21,27
21,28
21,29
21,30
21,31
21,32
21,33
21,34
21,35
21,36
21,37
21,38
21,39
21,40
21,41
21,42
21,43
21,44
21,45
21,46
21,47
21,48
21,49
21,50
21,51
21,52
21,53
21,54
21,55
22,23
23,24
23,25
24,25
26,27
26,28
26,29
29,30
30,31
30,32
31,32
34,35
35,36
35,37
36,37
38,39
38,40
38,41
41,42
42,43
42,44
43,44
46,47
47,48
47,49
48,49
50,51
50,52
52,53
53,54
53,55
54,55
56,57
56,58
57,58
60,61
61,62
61,63
63,64
63,65
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
75,76
75,77
75,78
78,79
79,80
80,81
81,82
81,83
82,83
82,84
83,84
86,87
88,89
89,90
89,91
90,91
92,93
92,94
95,96
96,97
96,98
97,98
99,100
99,101
102,103
103,104
103,105
104,105
106,107
106,108
108,109
109,110
109,111
110,111
112,113
114,115
115,116
115,117
116,117
118,119
120,121
121,122
121,123
122,123
124,125
124,126
127,128
128,129
128,130
130,131
132,133
133,134
133,135
134,135
136,137
136,138
137,138
139,140
141,142
141,143
142,143
142,144
143,144
145,146
145,147
146,147
148,149
150,151
150,152
151,152
152,153
152,154
152,155
152,156
153,154
156,157
158,159
158,160
159,160
163,164
164,165
164,166
165,166
167,168
168,169
168,170
169,170
169,171
170,171
173,174
175,176
175,177
176,177
176,178
177,178
179,180
179,181
180,181
182,183
182,184
183,184
186,187
186,188
187,188
188,189
188,190
188,191
188,192
188,193
189,190
191,192
194,195
196,197
196,198
197,198
201,202
202,203
202,204
203,204
205,206
206,207
206,208
207,208
207,209
208,209
211,212
213,214
213,215
214,215
214,216
215,216
217,218
219,220
219,221
219,222
220,221
221,222
222,223
222,224
223,224
226,227
226,228
227,228
227,229
228,229
230,231
232,233
232,234
233,234
234,235
234,236
235,236
235,237
236,237
239,240
239,241
240,241
242,243
244,245
245,246
245,247
246,247
246,248
247,248
250,251
252,253
252,254
253,254
253,255
254,255
254,256
255,256
258,259
258,260
259,260
262,263
262,264
263,264
263,265
264,265
264,266
265,266
265,267
266,267
270,271
271,272
272,273
272,274
272,275
272,276
272,277
272,278
273,274
276,277
278,279
278,280
279,280
281,282
283,284
283,285
284,285
287,288
287,289
288,289
292,293
293,294
293,295
293,296
293,297
293,298
294,295
296,297
298,299
298,300
299,300
302,303
302,304
303,304
306,307
308,309
309,310
309,311
310,311
312,313
312,314
313,314
313,315
314,315
316,317
318,319
318,320
319,320
322,323
322,324
322,325
323,324
323,325
324,325
326,327
326,328
327,328
327,329
328,329
331,332
331,333
332,333
332,334
333,334
335,336
337,338
339,340
339,341
340,341
341,342
342,343
342,344
343,344
343,345
344,345
348,349
349,350
349,351
350,351
350,352
351,352
354,355
356,357
357,358
357,359
358,359
358,360
359,360
362,363
364,365
365,366
365,367
366,367
366,368
367,368
370,371
372,373
372,374
372,375
373,374
373,375
374,375
376,377
378,379
379,380
380,381
380,382
380,383
381,382
383,384
385,386
385,387
386,387
389,390
390,391
391,392
391,393
391,394
392,393
394,395
396,397
398,399
399,400
399,401
400,401
400,402
401,402
404,405
404,406
404,407
405,406
407,408
409,410
411,412
412,413
412,414
413,414
415,416
415,417
416,417
418,419
420,421
420,422
421,422
423,424
423,425
423,426
423,427
423,428
423,429
423,430
423,431
423,432
423,433
423,434
423,435
423,436
423,437
423,438
423,439
423,440
423,441
424,425
425,426
427,428
428,429
429,430
429,431
430,431
430,432
431,432
436,437
437,438
439,440
440,441
441,442
441,443
442,443
442,444
443,444
448,449
449,450
451,452
452,453
453,454
453,455
454,455
454,456
455,456
460,461
461,462
463,464
464,465
465,466
465,467
466,467
466,468
467,468
472,473
473,474
475,476
476,477
477,478
477,479
478,479
478,480
479,480
485,486
486,487
487,488
487,489
488,489
488,490
489,490
494,495
495,496
495,497
496,497
496,498
497,498
500,501
502,503
503,504
504,505
504,506
505,506
508,509
509,510
510,511
510,512
511,512
514,515
515,516
515,517
516,517
516,518
517,518
520,521
522,523
523,524
523,525
524,525
524,526
525,526
528,529
530,531
531,532
531,533
532,533
532,534
533,534
537,538
538,539
538,540
539,540
539,541
540,541
544,545
545,546
546,547
546,548
547,548
547,549
548,549
552,553
553,554
553,555
554,555
554,556
555,556
555,557
556,557
560,561
-----nextToken-----
2,4,7,9,10,12,14,17,19,20,25,27,28,32,33,37,39,40,44,45,49,51,55,58,59,62,64,68,70,74,76,77,84,85,87,91,93,94,98,100,101,105,107,111,113,117,119,123,125,126,129,131,135,138,140,144,147,149,154,155,157,160,161,162,166,171,172,174,178,181,184,185,190,192,193,195,198,199,200,204,209,210,212,216,218,224,225,229,231,237,238,241,243,248,249,251,256,257,260,261,267,268,269,274,275,277,280,282,285,286,289,290,291,295,297,300,301,304,305,307,311,315,317,320,321,325,329,330,334,336,338,345,346,347,352,353,355,360,361,363,368,369,371,375,377,382,384,387,388,393,395,397,402,403,406,408,410,414,417,419,422,426,432,433,434,435,438,444,445,446,447,450,456,457,458,459,462,468,469,470,471,474,480,481,482,483,484,490,491,492,493,498,499,501,506,507,512,513,518,519,521,526,527,529,534,535,536,541,542,543,549,550,551,557,558,559,561
-----computeFrom-----
133,134
133,135
145,146
145,147
164,165
164,166
179,180
179,181
202,203
202,204
214,215
214,216
234,235
234,236
245,246
245,247
253,254
253,255
264,265
264,266
309,310
309,311
326,327
326,328
331,332
331,333
349,350
349,351
357,358
357,359
365,366
365,367
373,374
373,375
399,400
399,401
412,413
412,414
495,496
495,497
515,516
515,517
523,524
523,525
531,532
531,533
538,539
538,540
553,554
553,555
-----guardedBy-----
261,286
260,289
257,290
268,286
267,289
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;DefaultStatement;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;
-----ast_node-----
voidnetxen_process_rcv(struct netxen_adapter *adapter, int ctxid,		   struct status_desc *desc){	struct pci_dev *pdev = adapter->pdev;	struct net_device *netdev = adapter->netdev;	u64 sts_data = le64_to_cpu(desc->status_desc_data);	int index = netxen_get_sts_refhandle(sts_data);	struct netxen_recv_context *recv_ctx = &(adapter->recv_ctx[ctxid]);	struct netxen_rx_buffer *buffer;	struct sk_buff *skb;	u32 length = netxen_get_sts_totallength(sts_data);	u32 desc_ctx;	struct netxen_rcv_desc_ctx *rcv_desc;	int ret;	desc_ctx = netxen_get_sts_type(sts_data);	if (unlikely(desc_ctx >= NUM_RCV_DESC_RINGS)) {		printk("%s: %s Bad Rcv descriptor ring\n",		       netxen_nic_driver_name, netdev->name);		return;	}	rcv_desc = &recv_ctx->rcv_desc[desc_ctx];	if (unlikely(index > rcv_desc->max_rx_desc_count)) {		DPRINTK(ERR, "Got a buffer index:%x Max is %x\n",			index, rcv_desc->max_rx_desc_count);		return;	}	buffer = &rcv_desc->rx_buf_arr[index];	if (desc_ctx == RCV_DESC_LRO_CTXID) {		buffer->lro_current_frags++;		if (netxen_get_sts_desc_lro_last_frag(desc)) {			buffer->lro_expected_frags =			    netxen_get_sts_desc_lro_cnt(desc);			buffer->lro_length = length;		}		if (buffer->lro_current_frags != buffer->lro_expected_frags) {			if (buffer->lro_expected_frags != 0) {				printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags);			}			return;		}	}	pci_unmap_single(pdev, buffer->dma, rcv_desc->dma_size,			 PCI_DMA_FROMDEVICE);	skb = (struct sk_buff *)buffer->skb;	if (likely(adapter->rx_csum &&				netxen_get_sts_status(sts_data) == STATUS_CKSUM_OK)) {		adapter->stats.csummed++;		skb->ip_summed = CHECKSUM_UNNECESSARY;	} else		skb->ip_summed = CHECKSUM_NONE;	skb->dev = netdev;	if (desc_ctx == RCV_DESC_LRO_CTXID) {		/* True length was only available on the last pkt */		skb_put(skb, buffer->lro_length);	} else {		skb_put(skb, length);	}	skb->protocol = eth_type_trans(skb, netdev);	ret = netif_receive_skb(skb);	/*	 * RH: Do we need these stats on a regular basis. Can we get it from	 * Linux stats.	 */	switch (ret) {	case NET_RX_SUCCESS:		adapter->stats.uphappy++;		break;	case NET_RX_CN_LOW:		adapter->stats.uplcong++;		break;	case NET_RX_CN_MOD:		adapter->stats.upmcong++;		break;	case NET_RX_CN_HIGH:		adapter->stats.uphcong++;		break;	case NET_RX_DROP:		adapter->stats.updropped++;		break;	default:		adapter->stats.updunno++;		break;	}	netdev->last_rx = jiffies;	rcv_desc->rcv_free++;	rcv_desc->rcv_pending--;	/*	 * We just consumed one buffer so post a buffer.	 */	buffer->skb = NULL;	buffer->state = NETXEN_BUFFER_FREE;	buffer->lro_current_frags = 0;	buffer->lro_expected_frags = 0;	adapter->stats.no_rcv++;	adapter->stats.rxbytes += length;}
void
netxen_process_rcv(struct netxen_adapter *adapter, int ctxid,		   struct status_desc *desc)
netxen_process_rcv
struct netxen_adapter *adapter
struct netxen_adapter
netxen_adapter
*adapter
*
adapter
int ctxid
int
ctxid
ctxid
struct status_desc *desc
struct status_desc
status_desc
*desc
*
desc
{	struct pci_dev *pdev = adapter->pdev;	struct net_device *netdev = adapter->netdev;	u64 sts_data = le64_to_cpu(desc->status_desc_data);	int index = netxen_get_sts_refhandle(sts_data);	struct netxen_recv_context *recv_ctx = &(adapter->recv_ctx[ctxid]);	struct netxen_rx_buffer *buffer;	struct sk_buff *skb;	u32 length = netxen_get_sts_totallength(sts_data);	u32 desc_ctx;	struct netxen_rcv_desc_ctx *rcv_desc;	int ret;	desc_ctx = netxen_get_sts_type(sts_data);	if (unlikely(desc_ctx >= NUM_RCV_DESC_RINGS)) {		printk("%s: %s Bad Rcv descriptor ring\n",		       netxen_nic_driver_name, netdev->name);		return;	}	rcv_desc = &recv_ctx->rcv_desc[desc_ctx];	if (unlikely(index > rcv_desc->max_rx_desc_count)) {		DPRINTK(ERR, "Got a buffer index:%x Max is %x\n",			index, rcv_desc->max_rx_desc_count);		return;	}	buffer = &rcv_desc->rx_buf_arr[index];	if (desc_ctx == RCV_DESC_LRO_CTXID) {		buffer->lro_current_frags++;		if (netxen_get_sts_desc_lro_last_frag(desc)) {			buffer->lro_expected_frags =			    netxen_get_sts_desc_lro_cnt(desc);			buffer->lro_length = length;		}		if (buffer->lro_current_frags != buffer->lro_expected_frags) {			if (buffer->lro_expected_frags != 0) {				printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags);			}			return;		}	}	pci_unmap_single(pdev, buffer->dma, rcv_desc->dma_size,			 PCI_DMA_FROMDEVICE);	skb = (struct sk_buff *)buffer->skb;	if (likely(adapter->rx_csum &&				netxen_get_sts_status(sts_data) == STATUS_CKSUM_OK)) {		adapter->stats.csummed++;		skb->ip_summed = CHECKSUM_UNNECESSARY;	} else		skb->ip_summed = CHECKSUM_NONE;	skb->dev = netdev;	if (desc_ctx == RCV_DESC_LRO_CTXID) {		/* True length was only available on the last pkt */		skb_put(skb, buffer->lro_length);	} else {		skb_put(skb, length);	}	skb->protocol = eth_type_trans(skb, netdev);	ret = netif_receive_skb(skb);	/*	 * RH: Do we need these stats on a regular basis. Can we get it from	 * Linux stats.	 */	switch (ret) {	case NET_RX_SUCCESS:		adapter->stats.uphappy++;		break;	case NET_RX_CN_LOW:		adapter->stats.uplcong++;		break;	case NET_RX_CN_MOD:		adapter->stats.upmcong++;		break;	case NET_RX_CN_HIGH:		adapter->stats.uphcong++;		break;	case NET_RX_DROP:		adapter->stats.updropped++;		break;	default:		adapter->stats.updunno++;		break;	}	netdev->last_rx = jiffies;	rcv_desc->rcv_free++;	rcv_desc->rcv_pending--;	/*	 * We just consumed one buffer so post a buffer.	 */	buffer->skb = NULL;	buffer->state = NETXEN_BUFFER_FREE;	buffer->lro_current_frags = 0;	buffer->lro_expected_frags = 0;	adapter->stats.no_rcv++;	adapter->stats.rxbytes += length;}
struct pci_dev *pdev = adapter->pdev;
struct pci_dev *pdev = adapter->pdev;
struct pci_dev
pci_dev
*pdev = adapter->pdev
*
pdev
= adapter->pdev
adapter->pdev
adapter
adapter
pdev
struct net_device *netdev = adapter->netdev;
struct net_device *netdev = adapter->netdev;
struct net_device
net_device
*netdev = adapter->netdev
*
netdev
= adapter->netdev
adapter->netdev
adapter
adapter
netdev
u64 sts_data = le64_to_cpu(desc->status_desc_data);
u64 sts_data = le64_to_cpu(desc->status_desc_data);
u64
u64
sts_data = le64_to_cpu(desc->status_desc_data)
sts_data
= le64_to_cpu(desc->status_desc_data)
le64_to_cpu(desc->status_desc_data)
le64_to_cpu
le64_to_cpu
desc->status_desc_data
desc
desc
status_desc_data
int index = netxen_get_sts_refhandle(sts_data);
int index = netxen_get_sts_refhandle(sts_data);
int
index = netxen_get_sts_refhandle(sts_data)
index
= netxen_get_sts_refhandle(sts_data)
netxen_get_sts_refhandle(sts_data)
netxen_get_sts_refhandle
netxen_get_sts_refhandle
sts_data
sts_data
struct netxen_recv_context *recv_ctx = &(adapter->recv_ctx[ctxid]);
struct netxen_recv_context *recv_ctx = &(adapter->recv_ctx[ctxid]);
struct netxen_recv_context
netxen_recv_context
*recv_ctx = &(adapter->recv_ctx[ctxid])
*
recv_ctx
= &(adapter->recv_ctx[ctxid])
&(adapter->recv_ctx[ctxid])
(adapter->recv_ctx[ctxid])
adapter->recv_ctx[ctxid]
adapter->recv_ctx
adapter
adapter
recv_ctx
ctxid
ctxid
struct netxen_rx_buffer *buffer;
struct netxen_rx_buffer *buffer;
struct netxen_rx_buffer
netxen_rx_buffer
*buffer
*
buffer
struct sk_buff *skb;
struct sk_buff *skb;
struct sk_buff
sk_buff
*skb
*
skb
u32 length = netxen_get_sts_totallength(sts_data);
u32 length = netxen_get_sts_totallength(sts_data);
u32
u32
length = netxen_get_sts_totallength(sts_data)
length
= netxen_get_sts_totallength(sts_data)
netxen_get_sts_totallength(sts_data)
netxen_get_sts_totallength
netxen_get_sts_totallength
sts_data
sts_data
u32 desc_ctx;
u32 desc_ctx;
u32
u32
desc_ctx
desc_ctx
struct netxen_rcv_desc_ctx *rcv_desc;
struct netxen_rcv_desc_ctx *rcv_desc;
struct netxen_rcv_desc_ctx
netxen_rcv_desc_ctx
*rcv_desc
*
rcv_desc
int ret;
int ret;
int
ret
ret
desc_ctx = netxen_get_sts_type(sts_data);
desc_ctx = netxen_get_sts_type(sts_data)
desc_ctx
desc_ctx
netxen_get_sts_type(sts_data)
netxen_get_sts_type
netxen_get_sts_type
sts_data
sts_data
if (unlikely(desc_ctx >= NUM_RCV_DESC_RINGS)) {		printk("%s: %s Bad Rcv descriptor ring\n",		       netxen_nic_driver_name, netdev->name);		return;	}
unlikely(desc_ctx >= NUM_RCV_DESC_RINGS)
unlikely
unlikely
desc_ctx >= NUM_RCV_DESC_RINGS
desc_ctx
desc_ctx
NUM_RCV_DESC_RINGS
NUM_RCV_DESC_RINGS
{		printk("%s: %s Bad Rcv descriptor ring\n",		       netxen_nic_driver_name, netdev->name);		return;	}
printk("%s: %s Bad Rcv descriptor ring\n",		       netxen_nic_driver_name, netdev->name);
printk("%s: %s Bad Rcv descriptor ring\n",		       netxen_nic_driver_name, netdev->name)
printk
printk
"%s: %s Bad Rcv descriptor ring\n"
netxen_nic_driver_name
netxen_nic_driver_name
netdev->name
netdev
netdev
name
return;
rcv_desc = &recv_ctx->rcv_desc[desc_ctx];
rcv_desc = &recv_ctx->rcv_desc[desc_ctx]
rcv_desc
rcv_desc
&recv_ctx->rcv_desc[desc_ctx]
recv_ctx->rcv_desc[desc_ctx]
recv_ctx->rcv_desc
recv_ctx
recv_ctx
rcv_desc
desc_ctx
desc_ctx
if (unlikely(index > rcv_desc->max_rx_desc_count)) {		DPRINTK(ERR, "Got a buffer index:%x Max is %x\n",			index, rcv_desc->max_rx_desc_count);		return;	}
unlikely(index > rcv_desc->max_rx_desc_count)
unlikely
unlikely
index > rcv_desc->max_rx_desc_count
index
index
rcv_desc->max_rx_desc_count
rcv_desc
rcv_desc
max_rx_desc_count
{		DPRINTK(ERR, "Got a buffer index:%x Max is %x\n",			index, rcv_desc->max_rx_desc_count);		return;	}
DPRINTK(ERR, "Got a buffer index:%x Max is %x\n",			index, rcv_desc->max_rx_desc_count);
DPRINTK(ERR, "Got a buffer index:%x Max is %x\n",			index, rcv_desc->max_rx_desc_count)
DPRINTK
DPRINTK
ERR
ERR
"Got a buffer index:%x Max is %x\n"
index
index
rcv_desc->max_rx_desc_count
rcv_desc
rcv_desc
max_rx_desc_count
return;
buffer = &rcv_desc->rx_buf_arr[index];
buffer = &rcv_desc->rx_buf_arr[index]
buffer
buffer
&rcv_desc->rx_buf_arr[index]
rcv_desc->rx_buf_arr[index]
rcv_desc->rx_buf_arr
rcv_desc
rcv_desc
rx_buf_arr
index
index
if (desc_ctx == RCV_DESC_LRO_CTXID) {		buffer->lro_current_frags++;		if (netxen_get_sts_desc_lro_last_frag(desc)) {			buffer->lro_expected_frags =			    netxen_get_sts_desc_lro_cnt(desc);			buffer->lro_length = length;		}		if (buffer->lro_current_frags != buffer->lro_expected_frags) {			if (buffer->lro_expected_frags != 0) {				printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags);			}			return;		}	}
desc_ctx == RCV_DESC_LRO_CTXID
desc_ctx
desc_ctx
RCV_DESC_LRO_CTXID
RCV_DESC_LRO_CTXID
{		buffer->lro_current_frags++;		if (netxen_get_sts_desc_lro_last_frag(desc)) {			buffer->lro_expected_frags =			    netxen_get_sts_desc_lro_cnt(desc);			buffer->lro_length = length;		}		if (buffer->lro_current_frags != buffer->lro_expected_frags) {			if (buffer->lro_expected_frags != 0) {				printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags);			}			return;		}	}
buffer->lro_current_frags++;
buffer->lro_current_frags++
buffer->lro_current_frags
buffer
buffer
lro_current_frags
if (netxen_get_sts_desc_lro_last_frag(desc)) {			buffer->lro_expected_frags =			    netxen_get_sts_desc_lro_cnt(desc);			buffer->lro_length = length;		}
netxen_get_sts_desc_lro_last_frag(desc)
netxen_get_sts_desc_lro_last_frag
netxen_get_sts_desc_lro_last_frag
desc
desc
{			buffer->lro_expected_frags =			    netxen_get_sts_desc_lro_cnt(desc);			buffer->lro_length = length;		}
buffer->lro_expected_frags =			    netxen_get_sts_desc_lro_cnt(desc);
buffer->lro_expected_frags =			    netxen_get_sts_desc_lro_cnt(desc)
buffer->lro_expected_frags
buffer
buffer
lro_expected_frags
netxen_get_sts_desc_lro_cnt(desc)
netxen_get_sts_desc_lro_cnt
netxen_get_sts_desc_lro_cnt
desc
desc
buffer->lro_length = length;
buffer->lro_length = length
buffer->lro_length
buffer
buffer
lro_length
length
length
if (buffer->lro_current_frags != buffer->lro_expected_frags) {			if (buffer->lro_expected_frags != 0) {				printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags);			}			return;		}
buffer->lro_current_frags != buffer->lro_expected_frags
buffer->lro_current_frags
buffer
buffer
lro_current_frags
buffer->lro_expected_frags
buffer
buffer
lro_expected_frags
{			if (buffer->lro_expected_frags != 0) {				printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags);			}			return;		}
if (buffer->lro_expected_frags != 0) {				printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags);			}
buffer->lro_expected_frags != 0
buffer->lro_expected_frags
buffer
buffer
lro_expected_frags
0
{				printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags);			}
printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags);
printk("LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n", index,				       netxen_get_sts_desc_lro_last_frag(desc),				       buffer->lro_expected_frags,				       buffer->lro_current_frags)
printk
printk
"LRO: (refhandle:%x) recv frag."				       "wait for last. flags: %x expected:%d"				       "have:%d\n"
index
index
netxen_get_sts_desc_lro_last_frag(desc)
netxen_get_sts_desc_lro_last_frag
netxen_get_sts_desc_lro_last_frag
desc
desc
buffer->lro_expected_frags
buffer
buffer
lro_expected_frags
buffer->lro_current_frags
buffer
buffer
lro_current_frags
return;
pci_unmap_single(pdev, buffer->dma, rcv_desc->dma_size,			 PCI_DMA_FROMDEVICE);
pci_unmap_single(pdev, buffer->dma, rcv_desc->dma_size,			 PCI_DMA_FROMDEVICE)
pci_unmap_single
pci_unmap_single
pdev
pdev
buffer->dma
buffer
buffer
dma
rcv_desc->dma_size
rcv_desc
rcv_desc
dma_size
PCI_DMA_FROMDEVICE
PCI_DMA_FROMDEVICE
skb = (struct sk_buff *)buffer->skb;
skb = (struct sk_buff *)buffer->skb
skb
skb
(struct sk_buff *)buffer->skb
struct sk_buff *
struct sk_buff
sk_buff
*
*
buffer->skb
buffer
buffer
skb
if (likely(adapter->rx_csum &&				netxen_get_sts_status(sts_data) == STATUS_CKSUM_OK)) {		adapter->stats.csummed++;		skb->ip_summed = CHECKSUM_UNNECESSARY;	} else		skb->ip_summed = CHECKSUM_NONE;
likely(adapter->rx_csum &&				netxen_get_sts_status(sts_data) == STATUS_CKSUM_OK)
likely
likely
adapter->rx_csum &&				netxen_get_sts_status(sts_data) == STATUS_CKSUM_OK
adapter->rx_csum
adapter
adapter
rx_csum
netxen_get_sts_status(sts_data) == STATUS_CKSUM_OK
netxen_get_sts_status(sts_data)
netxen_get_sts_status
netxen_get_sts_status
sts_data
sts_data
STATUS_CKSUM_OK
STATUS_CKSUM_OK
{		adapter->stats.csummed++;		skb->ip_summed = CHECKSUM_UNNECESSARY;	}
adapter->stats.csummed++;
adapter->stats.csummed++
adapter->stats.csummed
adapter->stats
adapter
adapter
stats
csummed
skb->ip_summed = CHECKSUM_UNNECESSARY;
skb->ip_summed = CHECKSUM_UNNECESSARY
skb->ip_summed
skb
skb
ip_summed
CHECKSUM_UNNECESSARY
CHECKSUM_UNNECESSARY
skb->ip_summed = CHECKSUM_NONE;
skb->ip_summed = CHECKSUM_NONE
skb->ip_summed
skb
skb
ip_summed
CHECKSUM_NONE
CHECKSUM_NONE
skb->dev = netdev;
skb->dev = netdev
skb->dev
skb
skb
dev
netdev
netdev
if (desc_ctx == RCV_DESC_LRO_CTXID) {		/* True length was only available on the last pkt */		skb_put(skb, buffer->lro_length);	} else {		skb_put(skb, length);	}
desc_ctx == RCV_DESC_LRO_CTXID
desc_ctx
desc_ctx
RCV_DESC_LRO_CTXID
RCV_DESC_LRO_CTXID
{		/* True length was only available on the last pkt */		skb_put(skb, buffer->lro_length);	}
skb_put(skb, buffer->lro_length);
skb_put(skb, buffer->lro_length)
skb_put
skb_put
skb
skb
buffer->lro_length
buffer
buffer
lro_length
{		skb_put(skb, length);	}
skb_put(skb, length);
skb_put(skb, length)
skb_put
skb_put
skb
skb
length
length
skb->protocol = eth_type_trans(skb, netdev);
skb->protocol = eth_type_trans(skb, netdev)
skb->protocol
skb
skb
protocol
eth_type_trans(skb, netdev)
eth_type_trans
eth_type_trans
skb
skb
netdev
netdev
ret = netif_receive_skb(skb);
ret = netif_receive_skb(skb)
ret
ret
netif_receive_skb(skb)
netif_receive_skb
netif_receive_skb
skb
skb
switch (ret) {	case NET_RX_SUCCESS:		adapter->stats.uphappy++;		break;	case NET_RX_CN_LOW:		adapter->stats.uplcong++;		break;	case NET_RX_CN_MOD:		adapter->stats.upmcong++;		break;	case NET_RX_CN_HIGH:		adapter->stats.uphcong++;		break;	case NET_RX_DROP:		adapter->stats.updropped++;		break;	default:		adapter->stats.updunno++;		break;	}
ret
ret
{	case NET_RX_SUCCESS:		adapter->stats.uphappy++;		break;	case NET_RX_CN_LOW:		adapter->stats.uplcong++;		break;	case NET_RX_CN_MOD:		adapter->stats.upmcong++;		break;	case NET_RX_CN_HIGH:		adapter->stats.uphcong++;		break;	case NET_RX_DROP:		adapter->stats.updropped++;		break;	default:		adapter->stats.updunno++;		break;	}
case NET_RX_SUCCESS:
NET_RX_SUCCESS
NET_RX_SUCCESS
adapter->stats.uphappy++;
adapter->stats.uphappy++
adapter->stats.uphappy
adapter->stats
adapter
adapter
stats
uphappy
break;
case NET_RX_CN_LOW:
NET_RX_CN_LOW
NET_RX_CN_LOW
adapter->stats.uplcong++;
adapter->stats.uplcong++
adapter->stats.uplcong
adapter->stats
adapter
adapter
stats
uplcong
break;
case NET_RX_CN_MOD:
NET_RX_CN_MOD
NET_RX_CN_MOD
adapter->stats.upmcong++;
adapter->stats.upmcong++
adapter->stats.upmcong
adapter->stats
adapter
adapter
stats
upmcong
break;
case NET_RX_CN_HIGH:
NET_RX_CN_HIGH
NET_RX_CN_HIGH
adapter->stats.uphcong++;
adapter->stats.uphcong++
adapter->stats.uphcong
adapter->stats
adapter
adapter
stats
uphcong
break;
case NET_RX_DROP:
NET_RX_DROP
NET_RX_DROP
adapter->stats.updropped++;
adapter->stats.updropped++
adapter->stats.updropped
adapter->stats
adapter
adapter
stats
updropped
break;
default:
adapter->stats.updunno++;
adapter->stats.updunno++
adapter->stats.updunno
adapter->stats
adapter
adapter
stats
updunno
break;
netdev->last_rx = jiffies;
netdev->last_rx = jiffies
netdev->last_rx
netdev
netdev
last_rx
jiffies
jiffies
rcv_desc->rcv_free++;
rcv_desc->rcv_free++
rcv_desc->rcv_free
rcv_desc
rcv_desc
rcv_free
rcv_desc->rcv_pending--;
rcv_desc->rcv_pending--
rcv_desc->rcv_pending
rcv_desc
rcv_desc
rcv_pending
buffer->skb = NULL;
buffer->skb = NULL
buffer->skb
buffer
buffer
skb
NULL
NULL
buffer->state = NETXEN_BUFFER_FREE;
buffer->state = NETXEN_BUFFER_FREE
buffer->state
buffer
buffer
state
NETXEN_BUFFER_FREE
NETXEN_BUFFER_FREE
buffer->lro_current_frags = 0;
buffer->lro_current_frags = 0
buffer->lro_current_frags
buffer
buffer
lro_current_frags
0
buffer->lro_expected_frags = 0;
buffer->lro_expected_frags = 0
buffer->lro_expected_frags
buffer
buffer
lro_expected_frags
0
adapter->stats.no_rcv++;
adapter->stats.no_rcv++
adapter->stats.no_rcv
adapter->stats
adapter
adapter
stats
no_rcv
adapter->stats.rxbytes += length;
adapter->stats.rxbytes += length
adapter->stats.rxbytes
adapter->stats
adapter
adapter
stats
rxbytes
length
length
-----joern-----
(51,168,0)
(86,0,0)
(150,174,0)
(231,208,0)
(83,291,0)
(65,90,0)
(175,240,0)
(165,174,0)
(42,165,0)
(157,208,0)
(88,174,0)
(23,137,0)
(181,205,0)
(244,200,0)
(183,95,0)
(267,280,0)
(207,194,0)
(214,114,0)
(226,300,0)
(153,130,0)
(41,207,0)
(38,235,0)
(243,12,0)
(255,111,0)
(109,114,0)
(18,57,0)
(158,174,0)
(119,52,0)
(272,264,0)
(17,158,0)
(48,114,0)
(300,312,0)
(238,316,0)
(133,173,0)
(127,174,0)
(131,255,0)
(52,114,0)
(241,298,0)
(269,124,0)
(215,69,0)
(159,198,0)
(140,288,0)
(213,129,0)
(192,194,0)
(146,174,0)
(268,276,0)
(146,160,0)
(276,235,0)
(286,114,0)
(11,148,0)
(217,248,0)
(144,19,0)
(116,60,0)
(46,36,0)
(254,147,0)
(180,198,0)
(0,127,0)
(212,302,0)
(304,174,0)
(26,174,0)
(119,0,0)
(48,182,0)
(273,264,0)
(139,118,0)
(135,160,0)
(182,287,0)
(75,316,0)
(143,161,0)
(103,11,0)
(261,240,0)
(302,68,0)
(112,95,0)
(69,235,0)
(209,302,0)
(156,19,0)
(110,279,0)
(207,40,0)
(109,57,0)
(99,308,0)
(43,147,0)
(124,105,0)
(74,286,0)
(64,185,0)
(249,126,0)
(148,144,0)
(276,268,0)
(114,1,0)
(101,273,0)
(14,198,0)
(45,194,0)
(50,201,0)
(155,83,0)
(243,61,0)
(151,85,0)
(160,146,0)
(12,243,0)
(129,213,0)
(258,268,0)
(108,92,0)
(142,118,0)
(156,235,0)
(138,291,0)
(32,84,0)
(53,235,0)
(128,147,0)
(37,174,0)
(1,38,0)
(69,13,0)
(98,19,0)
(230,256,0)
(47,66,0)
(293,214,0)
(69,296,0)
(194,207,0)
(69,130,0)
(152,119,0)
(311,119,0)
(210,174,0)
(191,205,0)
(63,61,0)
(229,64,0)
(262,286,0)
(222,247,0)
(222,174,0)
(274,21,0)
(311,161,0)
(240,148,0)
(207,41,0)
(230,114,0)
(299,287,0)
(297,37,0)
(141,198,0)
(235,156,0)
(118,250,0)
(162,208,0)
(125,316,0)
(222,84,0)
(119,200,0)
(113,200,0)
(256,301,0)
(68,180,0)
(194,208,0)
(216,75,0)
(186,174,0)
(231,124,0)
(200,114,0)
(119,18,0)
(94,242,0)
(75,208,0)
(64,208,0)
(105,124,0)
(69,285,0)
(221,67,0)
(137,23,0)
(22,157,0)
(37,297,0)
(19,174,0)
(276,218,0)
(316,75,0)
(241,120,0)
(78,64,0)
(57,301,0)
(200,165,0)
(257,248,0)
(196,217,0)
(280,300,0)
(73,174,0)
(85,190,0)
(134,18,0)
(29,129,0)
(15,230,0)
(247,222,0)
(185,64,0)
(18,114,0)
(271,174,0)
(223,162,0)
(66,208,0)
(245,51,0)
(3,198,0)
(288,111,0)
(100,52,0)
(160,208,0)
(288,248,0)
(130,291,0)
(50,198,0)
(240,261,0)
(11,239,0)
(145,146,0)
(91,23,0)
(256,300,0)
(126,208,0)
(193,21,0)
(116,230,0)
(62,201,0)
(170,162,0)
(266,112,0)
(24,198,0)
(306,274,0)
(239,11,0)
(317,274,0)
(89,286,0)
(255,248,0)
(115,280,0)
(123,109,0)
(4,25,0)
(4,174,0)
(36,217,0)
(82,174,0)
(130,69,0)
(10,275,0)
(149,255,0)
(119,112,0)
(294,0,0)
(80,285,0)
(84,222,0)
(274,173,0)
(52,256,0)
(44,116,0)
(59,287,0)
(211,274,0)
(11,297,0)
(81,39,0)
(292,177,0)
(16,248,0)
(49,247,0)
(190,85,0)
(13,114,0)
(25,4,0)
(251,158,0)
(279,37,0)
(119,65,0)
(33,198,0)
(281,222,0)
(6,20,0)
(204,13,0)
(30,118,0)
(288,146,0)
(96,308,0)
(279,110,0)
(8,198,0)
(158,146,0)
(275,25,0)
(34,198,0)
(280,248,0)
(263,52,0)
(95,290,0)
(136,84,0)
(253,312,0)
(166,276,0)
(219,126,0)
(195,174,0)
(248,217,0)
(117,21,0)
(138,57,0)
(222,213,0)
(106,39,0)
(105,198,0)
(129,208,0)
(180,68,0)
(312,19,0)
(38,1,0)
(241,133,0)
(56,90,0)
(179,65,0)
(252,48,0)
(285,57,0)
(67,174,0)
(0,114,0)
(162,51,0)
(112,248,0)
(111,174,0)
(107,279,0)
(167,174,0)
(242,174,0)
(25,275,0)
(225,174,0)
(54,174,0)
(121,198,0)
(21,37,0)
(93,69,0)
(58,38,0)
(224,198,0)
(178,114,0)
(218,276,0)
(168,51,0)
(287,182,0)
(314,239,0)
(201,50,0)
(70,231,0)
(12,157,0)
(102,37,0)
(31,288,0)
(23,126,0)
(307,279,0)
(315,268,0)
(185,33,0)
(318,160,0)
(287,114,0)
(287,57,0)
(119,16,0)
(36,114,0)
(217,36,0)
(217,196,0)
(79,48,0)
(111,288,0)
(289,174,0)
(7,231,0)
(182,48,0)
(248,174,0)
(284,127,0)
(202,92,0)
(300,174,0)
(273,114,0)
(114,174,0)
(13,69,0)
(89,92,0)
(82,257,0)
(239,67,0)
(237,275,0)
(264,174,0)
(295,18,0)
(116,248,0)
(316,238,0)
(154,256,0)
(85,291,0)
(90,174,0)
(51,162,0)
(310,109,0)
(97,311,0)
(12,35,0)
(110,174,0)
(190,19,0)
(188,257,0)
(247,37,0)
(176,174,0)
(278,25,0)
(77,273,0)
(76,230,0)
(161,311,0)
(61,243,0)
(297,11,0)
(184,17,0)
(285,114,0)
(313,13,0)
(199,138,0)
(147,254,0)
(87,240,0)
(227,207,0)
(169,174,0)
(61,19,0)
(257,82,0)
(28,157,0)
(277,220,0)
(260,16,0)
(72,198,0)
(17,248,0)
(254,174,0)
(65,146,0)
(206,139,0)
(120,220,0)
(119,255,0)
(233,198,0)
(268,37,0)
(119,273,0)
(214,242,0)
(124,231,0)
(9,66,0)
(172,161,0)
(298,250,0)
(312,300,0)
(122,139,0)
(213,174,0)
(234,174,0)
(230,116,0)
(147,37,0)
(305,285,0)
(280,171,0)
(197,222,0)
(27,144,0)
(39,148,0)
(265,243,0)
(205,38,0)
(161,208,0)
(228,82,0)
(168,198,0)
(139,146,0)
(259,16,0)
(68,302,0)
(119,214,0)
(246,213,0)
(282,85,0)
(270,185,0)
(302,208,0)
(201,66,0)
(119,17,0)
(126,23,0)
(55,198,0)
(2,36,0)
(137,290,0)
(203,214,0)
(109,177,0)
(285,69,0)
(164,112,0)
(38,205,0)
(1,114,0)
(84,114,0)
(286,89,0)
(157,12,0)
(177,109,0)
(119,300,0)
(283,174,0)
(187,239,0)
(309,129,0)
(144,148,0)
(235,174,0)
(238,198,0)
(303,156,0)
(21,274,0)
(16,20,0)
(67,41,0)
(66,201,0)
(71,247,0)
(57,138,0)
(205,37,0)
(19,190,0)
(275,208,0)
(132,148,0)
(274,235,0)
(33,185,0)
(308,148,0)
(118,139,0)
(35,12,0)
(232,248,0)
(41,67,0)
(148,174,0)
(104,65,0)
(5,17,0)
(119,174,0)
(236,68,0)
(163,75,0)
(38,205,1)
(128,110,1)
(105,124,1)
(166,37,1)
(143,172,1)
(287,59,1)
(36,114,1)
(318,135,1)
(67,41,1)
(133,274,1)
(222,281,1)
(0,294,1)
(217,36,1)
(275,208,1)
(46,2,1)
(1,38,1)
(244,242,1)
(119,200,1)
(255,248,1)
(261,240,1)
(141,168,1)
(35,12,1)
(222,213,1)
(243,265,1)
(48,114,1)
(42,200,1)
(2,232,1)
(68,236,1)
(89,286,1)
(120,69,1)
(298,118,1)
(259,260,1)
(200,114,1)
(132,300,1)
(17,5,1)
(205,37,1)
(36,46,1)
(62,66,1)
(25,275,1)
(268,258,1)
(158,251,1)
(27,132,1)
(249,35,1)
(214,114,1)
(211,317,1)
(23,126,1)
(194,45,1)
(154,52,1)
(191,181,1)
(75,163,1)
(20,6,1)
(209,189,1)
(207,194,1)
(230,114,1)
(144,27,1)
(306,211,1)
(253,226,1)
(95,183,1)
(17,248,1)
(185,270,1)
(215,93,1)
(236,302,1)
(317,218,1)
(22,248,1)
(263,100,1)
(21,37,1)
(84,32,1)
(288,146,1)
(34,33,1)
(85,291,1)
(39,148,1)
(126,219,1)
(115,267,1)
(140,255,1)
(24,105,1)
(12,243,1)
(16,259,1)
(201,66,1)
(276,268,1)
(130,153,1)
(276,235,1)
(168,51,1)
(145,213,1)
(239,187,1)
(37,297,1)
(102,261,1)
(313,285,1)
(272,273,1)
(93,177,1)
(285,305,1)
(162,223,1)
(111,288,1)
(157,28,1)
(303,53,1)
(149,131,1)
(136,197,1)
(179,104,1)
(12,157,1)
(280,115,1)
(182,287,1)
(119,152,1)
(212,209,1)
(156,19,1)
(230,256,1)
(129,309,1)
(57,138,1)
(78,229,1)
(16,248,1)
(310,182,1)
(312,19,1)
(123,310,1)
(311,97,1)
(197,39,1)
(52,263,1)
(147,37,1)
(96,158,1)
(76,44,1)
(284,0,1)
(285,114,1)
(258,315,1)
(264,272,1)
(156,303,1)
(170,189,1)
(241,133,1)
(19,190,1)
(69,13,1)
(51,162,1)
(69,235,1)
(192,221,1)
(247,71,1)
(238,316,1)
(270,64,1)
(119,17,1)
(119,16,1)
(38,235,1)
(314,102,1)
(112,164,1)
(237,127,1)
(6,16,1)
(251,17,1)
(307,90,1)
(230,15,1)
(148,144,1)
(193,306,1)
(8,238,1)
(285,57,1)
(64,208,1)
(316,125,1)
(274,235,1)
(50,201,1)
(312,253,1)
(43,128,1)
(70,7,1)
(308,99,1)
(25,278,1)
(68,302,1)
(241,120,1)
(262,39,1)
(9,189,1)
(0,114,1)
(257,188,1)
(135,145,1)
(240,148,1)
(117,193,1)
(104,3,1)
(292,109,1)
(300,312,1)
(199,18,1)
(281,247,1)
(45,192,1)
(216,189,1)
(239,67,1)
(157,208,1)
(134,83,1)
(44,308,1)
(109,114,1)
(119,52,1)
(268,37,1)
(118,139,1)
(53,19,1)
(104,34,1)
(100,57,1)
(280,248,1)
(33,185,1)
(119,300,1)
(280,300,1)
(61,63,1)
(221,235,1)
(153,215,1)
(107,307,1)
(131,280,1)
(113,244,1)
(308,148,1)
(243,61,1)
(5,184,1)
(112,248,1)
(41,207,1)
(104,141,1)
(260,35,1)
(184,20,1)
(48,79,1)
(116,248,1)
(293,264,1)
(200,113,1)
(13,114,1)
(187,314,1)
(85,151,1)
(299,48,1)
(74,262,1)
(302,212,1)
(13,204,1)
(29,246,1)
(178,218,1)
(31,140,1)
(279,107,1)
(137,23,1)
(104,24,1)
(164,266,1)
(144,19,1)
(180,68,1)
(231,70,1)
(66,208,1)
(240,87,1)
(90,56,1)
(184,95,1)
(66,47,1)
(86,165,1)
(82,257,1)
(56,65,1)
(138,199,1)
(161,208,1)
(49,84,1)
(11,103,1)
(315,166,1)
(286,114,1)
(106,114,1)
(279,37,1)
(30,142,1)
(119,112,1)
(295,134,1)
(11,148,1)
(119,273,1)
(124,269,1)
(152,311,1)
(11,239,1)
(23,91,1)
(119,214,1)
(188,228,1)
(59,299,1)
(201,62,1)
(288,31,1)
(316,75,1)
(189,82,1)
(63,157,1)
(80,130,1)
(119,65,1)
(222,247,1)
(69,130,1)
(222,84,1)
(265,61,1)
(257,248,1)
(83,291,1)
(177,109,1)
(185,64,1)
(252,83,1)
(273,77,1)
(15,76,1)
(101,254,1)
(130,291,1)
(274,21,1)
(104,72,1)
(21,117,1)
(181,178,1)
(69,285,1)
(18,114,1)
(161,143,1)
(109,57,1)
(65,179,1)
(311,161,1)
(124,231,1)
(91,126,1)
(286,74,1)
(278,275,1)
(204,313,1)
(213,129,1)
(297,11,1)
(131,116,1)
(75,208,1)
(7,189,1)
(38,58,1)
(217,196,1)
(138,291,1)
(83,155,1)
(309,29,1)
(205,191,1)
(282,98,1)
(287,114,1)
(104,8,1)
(207,40,1)
(61,19,1)
(269,231,1)
(127,284,1)
(18,295,1)
(241,119,1)
(247,37,1)
(228,111,1)
(255,149,1)
(235,156,1)
(79,252,1)
(241,298,1)
(245,162,1)
(155,89,1)
(232,222,1)
(206,30,1)
(87,175,1)
(252,256,1)
(175,148,1)
(28,22,1)
(214,203,1)
(51,245,1)
(103,239,1)
(163,216,1)
(194,208,1)
(52,114,1)
(294,86,1)
(32,136,1)
(4,25,1)
(248,217,1)
(39,81,1)
(177,292,1)
(126,208,1)
(119,18,1)
(229,189,1)
(116,230,1)
(146,160,1)
(94,214,1)
(242,94,1)
(160,318,1)
(98,146,1)
(172,4,1)
(302,208,1)
(267,308,1)
(97,161,1)
(165,42,1)
(119,0,1)
(288,248,1)
(287,57,1)
(47,9,1)
(71,49,1)
(129,208,1)
(273,114,1)
(65,146,1)
(77,101,1)
(162,208,1)
(218,276,1)
(120,177,1)
(114,1,1)
(110,279,1)
(197,182,1)
(305,80,1)
(139,146,1)
(99,96,1)
(223,170,1)
(207,227,1)
(203,293,1)
(84,114,1)
(109,123,1)
(183,112,1)
(160,208,1)
(190,85,1)
(275,10,1)
(266,137,1)
(72,180,1)
(227,194,1)
(158,146,1)
(81,106,1)
(122,206,1)
(58,205,1)
(119,255,1)
(125,75,1)
(256,154,1)
(10,237,1)
(182,48,1)
(3,50,1)
(231,208,1)
(151,282,1)
(256,300,1)
(147,43,1)
(139,122,1)
(254,147,1)
(64,78,1)
(226,67,1)
(219,249,1)
(142,261,1)
(217,196,2)
(276,235,2)
(89,39,2)
(158,146,2)
(103,261,2)
(141,189,2)
(44,308,2)
(248,182,2)
(48,39,2)
(203,182,2)
(161,208,2)
(91,35,2)
(316,189,2)
(218,261,2)
(58,218,2)
(191,218,2)
(33,185,2)
(273,39,2)
(86,182,2)
(142,261,2)
(102,261,2)
(34,189,2)
(101,182,2)
(13,114,2)
(64,189,2)
(119,255,2)
(287,114,2)
(99,39,2)
(69,130,2)
(119,18,2)
(36,39,2)
(229,189,2)
(164,35,2)
(182,287,2)
(0,39,2)
(205,218,2)
(13,177,2)
(72,189,2)
(21,218,2)
(66,208,2)
(254,39,2)
(178,218,2)
(272,39,2)
(17,39,2)
(189,39,2)
(257,182,2)
(94,182,2)
(147,37,2)
(312,19,2)
(95,35,2)
(37,261,2)
(286,114,2)
(313,177,2)
(200,114,2)
(247,37,2)
(3,189,2)
(46,182,2)
(243,61,2)
(38,235,2)
(311,39,2)
(206,261,2)
(157,39,2)
(211,218,2)
(144,19,2)
(104,39,2)
(12,243,2)
(138,83,2)
(109,57,2)
(157,208,2)
(270,189,2)
(69,177,2)
(183,35,2)
(125,189,2)
(122,261,2)
(81,218,2)
(59,39,2)
(242,182,2)
(1,218,2)
(143,182,2)
(193,218,2)
(161,182,2)
(2,182,2)
(255,248,2)
(25,275,2)
(274,218,2)
(83,291,2)
(168,189,2)
(64,208,2)
(285,57,2)
(112,248,2)
(15,308,2)
(35,182,2)
(280,300,2)
(149,182,2)
(106,218,2)
(317,218,2)
(298,261,2)
(23,126,2)
(305,177,2)
(109,114,2)
(82,182,2)
(75,208,2)
(19,190,2)
(119,214,2)
(105,189,2)
(255,182,2)
(279,39,2)
(133,218,2)
(57,83,2)
(157,182,2)
(165,182,2)
(124,231,2)
(219,35,2)
(49,182,2)
(119,300,2)
(287,39,2)
(50,201,2)
(162,189,2)
(259,35,2)
(189,182,2)
(89,286,2)
(284,39,2)
(268,261,2)
(288,248,2)
(214,114,2)
(113,182,2)
(25,182,2)
(22,182,2)
(201,66,2)
(184,182,2)
(223,189,2)
(39,148,2)
(70,189,2)
(116,308,2)
(25,39,2)
(128,182,2)
(240,148,2)
(158,39,2)
(197,182,2)
(207,40,2)
(262,39,2)
(94,39,2)
(22,39,2)
(74,39,2)
(194,208,2)
(308,39,2)
(30,261,2)
(97,182,2)
(213,129,2)
(272,182,2)
(32,39,2)
(276,261,2)
(12,182,2)
(83,39,2)
(51,189,2)
(143,39,2)
(126,35,2)
(69,13,2)
(241,120,2)
(47,189,2)
(294,182,2)
(2,39,2)
(154,83,2)
(256,83,2)
(139,146,2)
(287,57,2)
(180,189,2)
(76,308,2)
(96,39,2)
(31,182,2)
(119,65,2)
(152,182,2)
(36,182,2)
(265,157,2)
(107,39,2)
(12,157,2)
(297,261,2)
(119,17,2)
(170,189,2)
(156,19,2)
(4,182,2)
(237,182,2)
(214,182,2)
(43,182,2)
(251,39,2)
(200,182,2)
(258,261,2)
(179,39,2)
(236,189,2)
(268,37,2)
(43,39,2)
(114,218,2)
(228,39,2)
(263,83,2)
(238,316,2)
(294,39,2)
(65,39,2)
(232,182,2)
(280,308,2)
(181,218,2)
(77,182,2)
(75,189,2)
(266,35,2)
(116,230,2)
(111,39,2)
(273,182,2)
(49,39,2)
(50,189,2)
(177,182,2)
(79,39,2)
(4,25,2)
(65,146,2)
(11,239,2)
(288,39,2)
(71,39,2)
(308,148,2)
(84,182,2)
(130,177,2)
(140,182,2)
(302,208,2)
(310,182,2)
(215,177,2)
(222,84,2)
(116,248,2)
(212,189,2)
(63,157,2)
(41,207,2)
(31,39,2)
(230,308,2)
(160,208,2)
(214,39,2)
(199,83,2)
(180,68,2)
(11,261,2)
(61,157,2)
(316,75,2)
(52,83,2)
(120,182,2)
(239,261,2)
(276,268,2)
(232,39,2)
(119,182,2)
(104,182,2)
(0,182,2)
(280,248,2)
(147,39,2)
(293,39,2)
(207,194,2)
(16,35,2)
(203,39,2)
(119,0,2)
(204,177,2)
(119,112,2)
(114,1,2)
(217,36,2)
(284,182,2)
(248,217,2)
(140,39,2)
(241,133,2)
(255,39,2)
(5,39,2)
(307,182,2)
(61,19,2)
(68,302,2)
(275,208,2)
(281,182,2)
(311,182,2)
(119,16,2)
(65,182,2)
(137,35,2)
(163,189,2)
(269,189,2)
(155,39,2)
(11,148,2)
(217,39,2)
(222,39,2)
(152,39,2)
(314,261,2)
(38,218,2)
(248,39,2)
(17,248,2)
(127,39,2)
(238,189,2)
(273,114,2)
(62,189,2)
(119,200,2)
(279,37,2)
(78,189,2)
(110,39,2)
(33,189,2)
(71,182,2)
(118,139,2)
(244,39,2)
(218,276,2)
(6,35,2)
(48,114,2)
(254,147,2)
(138,291,2)
(146,160,2)
(209,189,2)
(86,39,2)
(99,182,2)
(118,261,2)
(197,39,2)
(119,39,2)
(166,261,2)
(130,291,2)
(162,208,2)
(117,218,2)
(275,182,2)
(297,11,2)
(115,308,2)
(107,182,2)
(46,39,2)
(110,279,2)
(172,39,2)
(38,205,2)
(165,39,2)
(241,298,2)
(24,189,2)
(308,182,2)
(124,189,2)
(243,157,2)
(119,52,2)
(128,39,2)
(84,39,2)
(293,182,2)
(1,38,2)
(279,182,2)
(200,39,2)
(93,177,2)
(129,208,2)
(136,39,2)
(185,189,2)
(281,39,2)
(51,162,2)
(285,114,2)
(9,189,2)
(119,273,2)
(274,21,2)
(182,39,2)
(148,144,2)
(57,138,2)
(315,261,2)
(8,189,2)
(136,182,2)
(247,182,2)
(245,189,2)
(249,35,2)
(10,39,2)
(205,37,2)
(190,85,2)
(187,261,2)
(105,124,2)
(35,39,2)
(35,12,2)
(261,240,2)
(216,189,2)
(131,182,2)
(278,182,2)
(77,39,2)
(257,248,2)
(127,182,2)
(66,189,2)
(161,39,2)
(201,189,2)
(222,247,2)
(149,39,2)
(260,35,2)
(222,213,2)
(307,39,2)
(4,39,2)
(184,39,2)
(5,182,2)
(172,182,2)
(82,257,2)
(39,218,2)
(90,182,2)
(85,291,2)
(217,182,2)
(264,182,2)
(188,182,2)
(222,182,2)
(264,39,2)
(292,182,2)
(56,182,2)
(230,256,2)
(126,208,2)
(100,83,2)
(139,261,2)
(96,182,2)
(251,182,2)
(82,39,2)
(228,182,2)
(231,189,2)
(90,39,2)
(101,39,2)
(37,297,2)
(12,39,2)
(0,114,2)
(36,114,2)
(16,248,2)
(42,39,2)
(84,114,2)
(112,35,2)
(158,182,2)
(237,39,2)
(247,39,2)
(52,114,2)
(137,23,2)
(69,285,2)
(28,182,2)
(67,41,2)
(299,39,2)
(69,235,2)
(10,182,2)
(109,182,2)
(254,182,2)
(134,83,2)
(42,182,2)
(110,182,2)
(275,39,2)
(274,235,2)
(177,109,2)
(28,39,2)
(97,39,2)
(302,189,2)
(111,182,2)
(18,83,2)
(131,39,2)
(113,39,2)
(288,146,2)
(153,177,2)
(311,161,2)
(239,67,2)
(188,39,2)
(288,182,2)
(111,288,2)
(123,182,2)
(20,35,2)
(21,37,2)
(231,208,2)
(295,83,2)
(278,39,2)
(252,39,2)
(300,312,2)
(267,308,2)
(18,114,2)
(56,39,2)
(23,35,2)
(306,218,2)
(179,182,2)
(182,48,2)
(7,189,2)
(17,182,2)
(80,177,2)
(244,182,2)
(147,182,2)
(242,39,2)
(235,156,2)
(230,114,2)
(285,177,2)
(32,182,2)
(286,39,2)
(185,64,2)
(256,300,2)
(68,189,2)
(257,39,2)
(168,51,2)
-----------------------------------
(0,buffer->lro_expected_frags)
(1,&rcv_desc->rx_buf_arr[index])
(2,buffer)
(3,break;)
(4,adapter->stats.no_rcv++)
(5,dev)
(6,CHECKSUM_NONE)
(7,adapter)
(8,break;)
(9,adapter)
(10,stats)
(11,recv_ctx->rcv_desc[desc_ctx])
(12,adapter->rx_csum &&\n\\n\\t\\t\\t\\tnetxen_get_sts_status(sts_data)
(13,buffer->lro_current_frags)
(14,case NET_RX_CN_MOD:)
(15,lro_length)
(16,skb->ip_summed)
(17,skb->dev)
(18,buffer->lro_expected_frags)
(19,sts_data = le64_to_cpu(desc->status_desc_data)
(20,skb->ip_summed = CHECKSUM_NONE)
(21,rcv_desc->max_rx_desc_count)
(22,adapter)
(23,adapter->stats.csummed)
(24,break;)
(25,adapter->stats.no_rcv)
(26,skb)
(27,sts_data)
(28,rx_csum)
(29,adapter)
(30,netxen_nic_driver_name)
(31,netdev)
(32,dma)
(33,adapter->stats.uplcong++)
(34,break;)
(35,likely(adapter->rx_csum &&\n\\n\\t\\t\\t\\tnetxen_get_sts_status(sts_data)
(36,buffer->skb)
(37,rcv_desc = &recv_ctx->rcv_desc[desc_ctx])
(38,rcv_desc->rx_buf_arr[index])
(39,desc_ctx == RCV_DESC_LRO_CTXID)
(40,int ctxid)
(41,&(adapter->recv_ctx[ctxid])
(42,0)
(43,rcv_pending)
(44,skb)
(45,recv_ctx)
(46,skb)
(47,stats)
(48,buffer->lro_current_frags)
(49,rcv_desc)
(50,adapter->stats.updunno++)
(51,adapter->stats.uphcong)
(52,buffer->lro_length)
(53,index)
(54,sts_data)
(55,case NET_RX_CN_LOW:)
(56,jiffies)
(57,buffer->lro_expected_frags =\n\\n\\t\\t\\t    netxen_get_sts_desc_lro_cnt(desc)
(58,index)
(59,lro_expected_frags)
(60,)
(61,netxen_get_sts_status(sts_data)
(62,updunno)
(63,sts_data)
(64,adapter->stats)
(65,netdev->last_rx)
(66,adapter->stats)
(67,*recv_ctx = &(adapter->recv_ctx[ctxid])
(68,adapter->stats.upmcong)
(69,printk("LRO: (refhandle:%x)
(70,stats)
(71,dma_size)
(72,break;)
(73,if (desc_ctx == RCV_DESC_LRO_CTXID)
(74,lro_current_frags)
(75,adapter->stats)
(76,buffer)
(77,skb)
(78,stats)
(79,lro_current_frags)
(80,buffer)
(81,RCV_DESC_LRO_CTXID)
(82,ret = netif_receive_skb(skb)
(83,netxen_get_sts_desc_lro_last_frag(desc)
(84,buffer->dma)
(85,desc->status_desc_data)
(86,buffer)
(87,NUM_RCV_DESC_RINGS)
(88,if (unlikely(desc_ctx >= NUM_RCV_DESC_RINGS)
(89,buffer->lro_current_frags++)
(90,netdev->last_rx = jiffies)
(91,csummed)
(92,)
(93,"LRO: (refhandle:%x)
(94,NETXEN_BUFFER_FREE)
(95,skb->ip_summed = CHECKSUM_UNNECESSARY)
(96,desc_ctx)
(97,rxbytes)
(98,sts_data)
(99,RCV_DESC_LRO_CTXID)
(100,buffer)
(101,buffer)
(102,rcv_desc)
(103,desc_ctx)
(104,netdev)
(105,adapter->stats.uphappy++)
(106,desc_ctx)
(107,rcv_free)
(108,if (netxen_get_sts_desc_lro_last_frag(desc)
(109,buffer->lro_expected_frags)
(110,rcv_desc->rcv_free++)
(111,skb->protocol = eth_type_trans(skb, netdev)
(112,skb->ip_summed)
(113,lro_current_frags)
(114,buffer = &rcv_desc->rx_buf_arr[index])
(115,length)
(116,skb_put(skb, buffer->lro_length)
(117,max_rx_desc_count)
(118,printk("%s: %s Bad Rcv descriptor ring\\n",\n\\n\\t\\t       netxen_nic_driver_name, netdev->name)
(119,adapter->stats.rxbytes += length)
(120,return;)
(121,default:)
(122,name)
(123,lro_expected_frags)
(124,adapter->stats.uphappy)
(125,updropped)
(126,adapter->stats)
(127,buffer->lro_expected_frags = 0)
(128,rcv_desc)
(129,adapter->pdev)
(130,netxen_get_sts_desc_lro_last_frag(desc)
(131,skb)
(132,desc_ctx)
(133,return;)
(134,buffer)
(135,adapter)
(136,buffer)
(137,adapter->stats.csummed++)
(138,netxen_get_sts_desc_lro_cnt(desc)
(139,netdev->name)
(140,skb)
(141,break;)
(142,"%s: %s Bad Rcv descriptor ring\\n")
(143,stats)
(144,netxen_get_sts_type(sts_data)
(145,netdev)
(146,*netdev = adapter->netdev)
(147,rcv_desc->rcv_pending)
(148,desc_ctx = netxen_get_sts_type(sts_data)
(149,protocol)
(150,buffer)
(151,status_desc_data)
(152,length)
(153,desc)
(154,length)
(155,desc)
(156,netxen_get_sts_refhandle(sts_data)
(157,adapter->rx_csum)
(158,skb->dev = netdev)
(159,case NET_RX_CN_HIGH:)
(160,adapter->netdev)
(161,adapter->stats)
(162,adapter->stats)
(163,stats)
(164,ip_summed)
(165,buffer->lro_current_frags = 0)
(166,index)
(167,if (desc_ctx == RCV_DESC_LRO_CTXID)
(168,adapter->stats.uphcong++)
(169,recv_ctx)
(170,adapter)
(171,)
(172,adapter)
(173,)
(174,)
(175,desc_ctx)
(176,index)
(177,buffer->lro_expected_frags != 0)
(178,buffer)
(179,last_rx)
(180,adapter->stats.upmcong++)
(181,rcv_desc)
(182,buffer->lro_current_frags != buffer->lro_expected_frags)
(183,CHECKSUM_UNNECESSARY)
(184,skb)
(185,adapter->stats.uplcong)
(186,if (unlikely(index > rcv_desc->max_rx_desc_count)
(187,rcv_desc)
(188,skb)
(189,ret)
(190,le64_to_cpu(desc->status_desc_data)
(191,rx_buf_arr)
(192,adapter)
(193,rcv_desc)
(194,adapter->recv_ctx)
(195,if (likely(adapter->rx_csum &&\n\\n\\t\\t\\t\\tnetxen_get_sts_status(sts_data)
(196,struct sk_buff *)
(197,pdev)
(198,)
(199,desc)
(200,buffer->lro_current_frags)
(201,adapter->stats.updunno)
(202,if (buffer->lro_current_frags != buffer->lro_expected_frags)
(203,state)
(204,lro_current_frags)
(205,rcv_desc->rx_buf_arr)
(206,netdev)
(207,adapter->recv_ctx[ctxid])
(208,struct netxen_adapter *adapter)
(209,adapter)
(210,netdev)
(211,"Got a buffer index:%x Max is %x\\n")
(212,stats)
(213,*pdev = adapter->pdev)
(214,buffer->state)
(215,index)
(216,adapter)
(217,(struct sk_buff *)
(218,unlikely(index > rcv_desc->max_rx_desc_count)
(219,stats)
(220,)
(221,recv_ctx)
(222,pci_unmap_single(pdev, buffer->dma, rcv_desc->dma_size,\n\\n\\t\\t\\t PCI_DMA_FROMDEVICE)
(223,stats)
(224,case NET_RX_DROP:)
(225,length)
(226,length)
(227,ctxid)
(228,ret)
(229,adapter)
(230,buffer->lro_length)
(231,adapter->stats)
(232,skb)
(233,case NET_RX_SUCCESS:)
(234,desc_ctx)
(235,index = netxen_get_sts_refhandle(sts_data)
(236,upmcong)
(237,adapter)
(238,adapter->stats.updropped++)
(239,recv_ctx->rcv_desc)
(240,desc_ctx >= NUM_RCV_DESC_RINGS)
(241,RET)
(242,buffer->state = NETXEN_BUFFER_FREE)
(243,netxen_get_sts_status(sts_data)
(244,buffer)
(245,uphcong)
(246,pdev)
(247,rcv_desc->dma_size)
(248,skb = (struct sk_buff *)
(249,adapter)
(250,)
(251,netdev)
(252,buffer)
(253,sts_data)
(254,rcv_desc->rcv_pending--)
(255,skb->protocol)
(256,buffer->lro_length = length)
(257,netif_receive_skb(skb)
(258,max_rx_desc_count)
(259,ip_summed)
(260,skb)
(261,unlikely(desc_ctx >= NUM_RCV_DESC_RINGS)
(262,buffer)
(263,lro_length)
(264,buffer->skb = NULL)
(265,STATUS_CKSUM_OK)
(266,skb)
(267,skb)
(268,rcv_desc->max_rx_desc_count)
(269,uphappy)
(270,uplcong)
(271,ret)
(272,NULL)
(273,buffer->skb)
(274,DPRINTK(ERR, "Got a buffer index:%x Max is %x\\n",\n\\n\\t\\t\\tindex, rcv_desc->max_rx_desc_count)
(275,adapter->stats)
(276,index > rcv_desc->max_rx_desc_count)
(277,if (buffer->lro_expected_frags != 0)
(278,no_rcv)
(279,rcv_desc->rcv_free)
(280,skb_put(skb, length)
(281,PCI_DMA_FROMDEVICE)
(282,desc)
(283,switch (ret)
(284,0)
(285,buffer->lro_expected_frags)
(286,buffer->lro_current_frags)
(287,buffer->lro_expected_frags)
(288,eth_type_trans(skb, netdev)
(289,pdev)
(290,)
(291,struct status_desc *desc)
(292,0)
(293,buffer)
(294,lro_expected_frags)
(295,lro_expected_frags)
(296,)
(297,&recv_ctx->rcv_desc[desc_ctx])
(298,return;)
(299,buffer)
(300,length = netxen_get_sts_totallength(sts_data)
(301,)
(302,adapter->stats)
(303,sts_data)
(304,rcv_desc)
(305,lro_expected_frags)
(306,index)
(307,rcv_desc)
(308,desc_ctx == RCV_DESC_LRO_CTXID)
(309,pdev)
(310,buffer)
(311,adapter->stats.rxbytes)
(312,netxen_get_sts_totallength(sts_data)
(313,buffer)
(314,recv_ctx)
(315,rcv_desc)
(316,adapter->stats.updropped)
(317,ERR)
(318,netdev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^