-----label-----
1
-----code-----
static int record__mmap_read_all(struct record *rec)
{
	int i;
	int rc = 0;

	for (i = 0; i < rec->evlist->nr_mmaps; i++) {
		if (rec->evlist->mmap[i].base) {
			if (record__mmap_read(rec, &rec->evlist->mmap[i]) != 0) {
				rc = -1;
				goto out;
			}
		}
	}

	if (perf_header__has_feat(&rec->session->header, HEADER_TRACING_DATA))
		rc = record__write(rec, &finished_round_event, sizeof(finished_round_event));

out:
	return rc;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
12,13
13,14
13,15
15,16
17,18
18,19
18,20
20,21
20,22
22,23
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
33,34
33,35
34,35
34,36
35,36
39,40
40,41
42,43
43,44
43,45
44,45
44,46
45,46
45,47
46,47
46,48
47,48
47,49
48,49
52,53
55,56
56,57
56,58
57,58
57,59
58,59
58,60
58,61
59,60
61,62
63,64
64,65
64,66
65,66
65,67
66,67
66,68
67,68
71,72
74,75
74,76
75,76
76,77
76,78
77,78
79,80
81,82
83,84
83,85
84,85
84,86
84,87
85,86
87,88
88,89
88,90
89,90
89,91
90,91
94,95
96,97
97,98
97,99
98,99
100,101
100,102
100,103
100,104
101,102
103,104
105,106
106,107
108,109
109,110
109,111
110,111
113,114
113,115
115,116
116,117
-----nextToken-----
2,4,7,9,10,14,16,19,21,23,28,29,32,36,37,38,41,49,50,51,53,54,60,62,68,69,70,72,73,78,80,82,86,91,92,93,95,99,102,104,107,111,112,114,117
-----computeFrom-----
26,27
26,28
30,31
30,32
57,58
57,59
76,77
76,78
97,98
97,99
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;LiteralExpression;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int record__mmap_read_all(struct record *rec){	int i;	int rc = 0;	for (i = 0; i < rec->evlist->nr_mmaps; i++) {		if (rec->evlist->mmap[i].base) {			if (record__mmap_read(rec, &rec->evlist->mmap[i]) != 0) {				rc = -1;				goto out;			}		}	}	if (perf_header__has_feat(&rec->session->header, HEADER_TRACING_DATA))		rc = record__write(rec, &finished_round_event, sizeof(finished_round_event));out:	return rc;}
static int
record__mmap_read_all(struct record *rec)
record__mmap_read_all
struct record *rec
struct record
record
*rec
*
rec
{	int i;	int rc = 0;	for (i = 0; i < rec->evlist->nr_mmaps; i++) {		if (rec->evlist->mmap[i].base) {			if (record__mmap_read(rec, &rec->evlist->mmap[i]) != 0) {				rc = -1;				goto out;			}		}	}	if (perf_header__has_feat(&rec->session->header, HEADER_TRACING_DATA))		rc = record__write(rec, &finished_round_event, sizeof(finished_round_event));out:	return rc;}
int i;
int i;
int
i
i
int rc = 0;
int rc = 0;
int
rc = 0
rc
= 0
0
for (i = 0; i < rec->evlist->nr_mmaps; i++) {		if (rec->evlist->mmap[i].base) {			if (record__mmap_read(rec, &rec->evlist->mmap[i]) != 0) {				rc = -1;				goto out;			}		}	}
i = 0;
i = 0
i
i
0
i < rec->evlist->nr_mmaps
i
i
rec->evlist->nr_mmaps
rec->evlist
rec
rec
evlist
nr_mmaps
i++
i
i
{		if (rec->evlist->mmap[i].base) {			if (record__mmap_read(rec, &rec->evlist->mmap[i]) != 0) {				rc = -1;				goto out;			}		}	}
if (rec->evlist->mmap[i].base) {			if (record__mmap_read(rec, &rec->evlist->mmap[i]) != 0) {				rc = -1;				goto out;			}		}
rec->evlist->mmap[i].base
rec->evlist->mmap[i]
rec->evlist->mmap
rec->evlist
rec
rec
evlist
mmap
i
i
base
{			if (record__mmap_read(rec, &rec->evlist->mmap[i]) != 0) {				rc = -1;				goto out;			}		}
if (record__mmap_read(rec, &rec->evlist->mmap[i]) != 0) {				rc = -1;				goto out;			}
record__mmap_read(rec, &rec->evlist->mmap[i]) != 0
record__mmap_read(rec, &rec->evlist->mmap[i])
record__mmap_read
record__mmap_read
rec
rec
&rec->evlist->mmap[i]
rec->evlist->mmap[i]
rec->evlist->mmap
rec->evlist
rec
rec
evlist
mmap
i
i
0
{				rc = -1;				goto out;			}
rc = -1;
rc = -1
rc
rc
-1
1
goto out;
out
if (perf_header__has_feat(&rec->session->header, HEADER_TRACING_DATA))		rc = record__write(rec, &finished_round_event, sizeof(finished_round_event));
perf_header__has_feat(&rec->session->header, HEADER_TRACING_DATA)
perf_header__has_feat
perf_header__has_feat
&rec->session->header
rec->session->header
rec->session
rec
rec
session
header
HEADER_TRACING_DATA
HEADER_TRACING_DATA
rc = record__write(rec, &finished_round_event, sizeof(finished_round_event));
rc = record__write(rec, &finished_round_event, sizeof(finished_round_event))
rc
rc
record__write(rec, &finished_round_event, sizeof(finished_round_event))
record__write
record__write
rec
rec
&finished_round_event
finished_round_event
finished_round_event
sizeof(finished_round_event)
finished_round_event
finished_round_event
finished_round_event

out:	return rc;
out
return rc;
rc
rc
-----joern-----
(17,7,0)
(44,30,0)
(18,38,0)
(10,32,0)
(1,21,0)
(8,2,0)
(19,0,0)
(67,26,0)
(9,23,0)
(34,33,0)
(25,58,0)
(34,50,0)
(58,21,0)
(27,58,0)
(33,14,0)
(52,50,0)
(9,10,0)
(14,13,0)
(7,23,0)
(58,25,0)
(6,7,0)
(2,19,0)
(63,67,0)
(35,20,0)
(20,50,0)
(26,49,0)
(61,21,0)
(59,32,0)
(9,38,0)
(2,46,0)
(43,42,0)
(15,33,0)
(58,27,0)
(22,23,0)
(49,50,0)
(26,67,0)
(5,52,0)
(39,7,0)
(7,6,0)
(3,49,0)
(53,32,0)
(24,6,0)
(11,52,0)
(65,18,0)
(49,26,0)
(52,25,0)
(14,33,0)
(67,21,0)
(62,20,0)
(64,21,0)
(20,46,0)
(13,14,0)
(38,18,0)
(71,58,0)
(51,26,0)
(69,31,0)
(16,10,0)
(0,42,0)
(47,48,0)
(46,20,0)
(9,32,0)
(60,10,0)
(40,13,0)
(57,25,0)
(4,34,0)
(55,17,0)
(0,19,0)
(23,7,0)
(54,49,0)
(37,32,0)
(25,52,0)
(45,27,0)
(38,30,0)
(46,2,0)
(12,64,0)
(68,46,0)
(29,32,0)
(66,0,0)
(19,2,0)
(70,9,0)
(41,38,0)
(42,0,0)
(28,34,0)
(0,50,0)
(36,9,0)
(7,17,0)
(56,32,0)
(7,50,0)
(2,21,0)
(33,34,0)
(25,57,1)
(46,68,1)
(38,18,1)
(2,8,1)
(54,3,1)
(27,45,1)
(1,10,1)
(66,27,1)
(8,46,1)
(42,43,1)
(70,44,1)
(35,66,1)
(63,21,1)
(64,21,1)
(26,49,1)
(67,26,1)
(51,49,1)
(57,52,1)
(9,23,1)
(0,19,1)
(70,13,1)
(41,42,1)
(55,6,1)
(45,58,1)
(2,21,1)
(27,58,1)
(52,50,1)
(9,38,1)
(25,52,1)
(18,65,1)
(9,10,1)
(34,50,1)
(33,34,1)
(33,15,1)
(7,6,1)
(15,34,1)
(65,41,1)
(36,9,1)
(14,33,1)
(64,12,1)
(42,0,1)
(58,71,1)
(58,21,1)
(12,42,1)
(4,28,1)
(7,17,1)
(22,13,1)
(68,20,1)
(0,50,1)
(21,61,1)
(52,11,1)
(23,7,1)
(62,35,1)
(17,55,1)
(11,5,1)
(61,1,1)
(40,14,1)
(28,67,1)
(20,62,1)
(5,67,1)
(26,51,1)
(43,0,1)
(39,22,1)
(19,2,1)
(9,70,1)
(34,4,1)
(49,50,1)
(13,40,1)
(20,50,1)
(67,21,1)
(2,46,1)
(24,39,1)
(70,23,1)
(10,16,1)
(44,38,1)
(71,25,1)
(16,60,1)
(13,14,1)
(63,64,1)
(6,24,1)
(58,25,1)
(7,50,1)
(46,20,1)
(12,27,1)
(49,54,1)
(3,63,1)
(3,42,2)
(3,27,2)
(7,13,2)
(0,50,2)
(15,67,2)
(64,42,2)
(2,46,2)
(67,26,2)
(67,21,2)
(26,49,2)
(65,42,2)
(71,67,2)
(34,67,2)
(52,50,2)
(44,42,2)
(13,14,2)
(23,7,2)
(39,13,2)
(24,13,2)
(51,27,2)
(4,67,2)
(7,6,2)
(8,27,2)
(13,67,2)
(66,27,2)
(18,42,2)
(2,27,2)
(12,42,2)
(54,42,2)
(58,21,2)
(54,27,2)
(51,42,2)
(0,19,2)
(20,27,2)
(63,42,2)
(57,67,2)
(6,13,2)
(34,50,2)
(7,17,2)
(12,27,2)
(14,33,2)
(36,9,2)
(0,27,2)
(11,67,2)
(9,10,2)
(17,13,2)
(52,67,2)
(67,27,2)
(5,67,2)
(45,67,2)
(19,27,2)
(19,2,2)
(49,50,2)
(33,34,2)
(68,27,2)
(25,67,2)
(26,27,2)
(40,67,2)
(38,18,2)
(67,42,2)
(55,13,2)
(22,13,2)
(64,27,2)
(49,42,2)
(25,52,2)
(63,27,2)
(14,67,2)
(42,0,2)
(7,50,2)
(35,27,2)
(38,42,2)
(64,21,2)
(62,27,2)
(46,20,2)
(27,58,2)
(46,27,2)
(41,42,2)
(58,25,2)
(49,27,2)
(26,42,2)
(33,67,2)
(43,27,2)
(27,67,2)
(23,13,2)
(20,50,2)
(58,67,2)
(28,67,2)
(2,21,2)
(9,38,2)
(42,27,2)
(9,23,2)
-----------------------------------
(0,record__mmap_read(rec, &rec->evlist->mmap[i])
(1,i)
(2,rec->evlist->mmap[i])
(3,rec)
(4,session)
(5,rec)
(6,&finished_round_event)
(7,record__write(rec, &finished_round_event, sizeof(finished_round_event)
(8,i)
(9,return rc;)
(10,rc = 0)
(11,evlist)
(12,i)
(13,perf_header__has_feat(&rec->session->header, HEADER_TRACING_DATA)
(14,&rec->session->header)
(15,header)
(16,0)
(17,sizeof(finished_round_event)
(18,-1)
(19,&rec->evlist->mmap[i])
(20,rec->evlist)
(21,i = 0)
(22,rc)
(23,rc = record__write(rec, &finished_round_event, sizeof(finished_round_event)
(24,finished_round_event)
(25,rec->evlist->mmap)
(26,rec->evlist->nr_mmaps)
(27,rec->evlist->mmap[i].base)
(28,rec)
(29,if (perf_header__has_feat(&rec->session->header, HEADER_TRACING_DATA)
(30,)
(31,)
(32,)
(33,rec->session->header)
(34,rec->session)
(35,rec)
(36,RET)
(37,out:)
(38,rc = -1)
(39,rec)
(40,HEADER_TRACING_DATA)
(41,rc)
(42,record__mmap_read(rec, &rec->evlist->mmap[i])
(43,0)
(44,goto out;)
(45,base)
(46,rec->evlist->mmap)
(47,if (rec->evlist->mmap[i].base)
(48,)
(49,rec->evlist)
(50,struct record *rec)
(51,nr_mmaps)
(52,rec->evlist)
(53,for (i = 0; i < rec->evlist->nr_mmaps; i++)
(54,evlist)
(55,finished_round_event)
(56,rc)
(57,mmap)
(58,rec->evlist->mmap[i])
(59,i)
(60,rc)
(61,0)
(62,evlist)
(63,i)
(64,i++)
(65,1)
(66,rec)
(67,i < rec->evlist->nr_mmaps)
(68,mmap)
(69,if (record__mmap_read(rec, &rec->evlist->mmap[i])
(70,rc)
(71,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^