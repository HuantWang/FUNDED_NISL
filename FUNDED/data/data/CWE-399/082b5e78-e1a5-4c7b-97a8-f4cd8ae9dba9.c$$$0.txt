-----label-----
1
-----code-----
static void pmf_gpio_exit(struct gpio_runtime *rt)
{
	pmf_gpio_all_amps_off(rt);
	rt->implementation_private = 0;

	if (rt->headphone_notify.gpio_private)
		pmf_unregister_irq_client(rt->headphone_notify.gpio_private);
	if (rt->line_in_notify.gpio_private)
		pmf_unregister_irq_client(rt->line_in_notify.gpio_private);
	if (rt->line_out_notify.gpio_private)
		pmf_unregister_irq_client(rt->line_out_notify.gpio_private);

	/* make sure no work is pending before freeing
	 * all things */
	cancel_delayed_work(&rt->headphone_notify.work);
	cancel_delayed_work(&rt->line_in_notify.work);
	cancel_delayed_work(&rt->line_out_notify.work);
	flush_scheduled_work();

	mutex_destroy(&rt->headphone_notify.mutex);
	mutex_destroy(&rt->line_in_notify.mutex);
	mutex_destroy(&rt->line_out_notify.mutex);

	kfree(rt->headphone_notify.gpio_private);
	kfree(rt->line_in_notify.gpio_private);
	kfree(rt->line_out_notify.gpio_private);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
20,21
20,22
21,22
25,26
25,27
26,27
26,28
27,28
27,29
28,29
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
38,39
42,43
42,44
43,44
43,45
44,45
44,46
45,46
49,50
50,51
50,52
51,52
53,54
53,55
54,55
54,56
55,56
59,60
59,61
60,61
60,62
61,62
61,63
62,63
66,67
67,68
67,69
68,69
70,71
70,72
71,72
71,73
72,73
76,77
77,78
77,79
78,79
80,81
81,82
81,83
82,83
82,84
83,84
87,88
88,89
88,90
89,90
91,92
92,93
92,94
93,94
93,95
94,95
98,99
99,100
99,101
100,101
102,103
103,104
103,105
104,105
104,106
105,106
109,110
110,111
111,112
113,114
114,115
114,116
115,116
117,118
118,119
118,120
119,120
119,121
120,121
124,125
125,126
125,127
126,127
128,129
129,130
129,131
130,131
130,132
131,132
135,136
136,137
136,138
137,138
139,140
140,141
140,142
141,142
141,143
142,143
146,147
147,148
147,149
148,149
150,151
150,152
151,152
151,153
152,153
156,157
157,158
157,159
158,159
160,161
160,162
161,162
161,163
162,163
166,167
167,168
167,169
168,169
170,171
170,172
171,172
171,173
172,173
-----nextToken-----
2,4,7,9,10,15,17,22,23,24,29,30,31,35,39,40,41,46,47,48,52,56,57,58,63,64,65,69,73,74,75,79,84,85,86,90,95,96,97,101,106,107,108,112,116,121,122,123,127,132,133,134,138,143,144,145,149,153,154,155,159,163,164,165,169,173,174,175
-----computeFrom-----
19,20
19,21
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;
-----ast_node-----
static void pmf_gpio_exit(struct gpio_runtime *rt){	pmf_gpio_all_amps_off(rt);	rt->implementation_private = 0;	if (rt->headphone_notify.gpio_private)		pmf_unregister_irq_client(rt->headphone_notify.gpio_private);	if (rt->line_in_notify.gpio_private)		pmf_unregister_irq_client(rt->line_in_notify.gpio_private);	if (rt->line_out_notify.gpio_private)		pmf_unregister_irq_client(rt->line_out_notify.gpio_private);	/* make sure no work is pending before freeing	 * all things */	cancel_delayed_work(&rt->headphone_notify.work);	cancel_delayed_work(&rt->line_in_notify.work);	cancel_delayed_work(&rt->line_out_notify.work);	flush_scheduled_work();	mutex_destroy(&rt->headphone_notify.mutex);	mutex_destroy(&rt->line_in_notify.mutex);	mutex_destroy(&rt->line_out_notify.mutex);	kfree(rt->headphone_notify.gpio_private);	kfree(rt->line_in_notify.gpio_private);	kfree(rt->line_out_notify.gpio_private);}
static void
pmf_gpio_exit(struct gpio_runtime *rt)
pmf_gpio_exit
struct gpio_runtime *rt
struct gpio_runtime
gpio_runtime
*rt
*
rt
{	pmf_gpio_all_amps_off(rt);	rt->implementation_private = 0;	if (rt->headphone_notify.gpio_private)		pmf_unregister_irq_client(rt->headphone_notify.gpio_private);	if (rt->line_in_notify.gpio_private)		pmf_unregister_irq_client(rt->line_in_notify.gpio_private);	if (rt->line_out_notify.gpio_private)		pmf_unregister_irq_client(rt->line_out_notify.gpio_private);	/* make sure no work is pending before freeing	 * all things */	cancel_delayed_work(&rt->headphone_notify.work);	cancel_delayed_work(&rt->line_in_notify.work);	cancel_delayed_work(&rt->line_out_notify.work);	flush_scheduled_work();	mutex_destroy(&rt->headphone_notify.mutex);	mutex_destroy(&rt->line_in_notify.mutex);	mutex_destroy(&rt->line_out_notify.mutex);	kfree(rt->headphone_notify.gpio_private);	kfree(rt->line_in_notify.gpio_private);	kfree(rt->line_out_notify.gpio_private);}
pmf_gpio_all_amps_off(rt);
pmf_gpio_all_amps_off(rt)
pmf_gpio_all_amps_off
pmf_gpio_all_amps_off
rt
rt
rt->implementation_private = 0;
rt->implementation_private = 0
rt->implementation_private
rt
rt
implementation_private
0
if (rt->headphone_notify.gpio_private)		pmf_unregister_irq_client(rt->headphone_notify.gpio_private);
rt->headphone_notify.gpio_private
rt->headphone_notify
rt
rt
headphone_notify
gpio_private
pmf_unregister_irq_client(rt->headphone_notify.gpio_private);
pmf_unregister_irq_client(rt->headphone_notify.gpio_private)
pmf_unregister_irq_client
pmf_unregister_irq_client
rt->headphone_notify.gpio_private
rt->headphone_notify
rt
rt
headphone_notify
gpio_private
if (rt->line_in_notify.gpio_private)		pmf_unregister_irq_client(rt->line_in_notify.gpio_private);
rt->line_in_notify.gpio_private
rt->line_in_notify
rt
rt
line_in_notify
gpio_private
pmf_unregister_irq_client(rt->line_in_notify.gpio_private);
pmf_unregister_irq_client(rt->line_in_notify.gpio_private)
pmf_unregister_irq_client
pmf_unregister_irq_client
rt->line_in_notify.gpio_private
rt->line_in_notify
rt
rt
line_in_notify
gpio_private
if (rt->line_out_notify.gpio_private)		pmf_unregister_irq_client(rt->line_out_notify.gpio_private);
rt->line_out_notify.gpio_private
rt->line_out_notify
rt
rt
line_out_notify
gpio_private
pmf_unregister_irq_client(rt->line_out_notify.gpio_private);
pmf_unregister_irq_client(rt->line_out_notify.gpio_private)
pmf_unregister_irq_client
pmf_unregister_irq_client
rt->line_out_notify.gpio_private
rt->line_out_notify
rt
rt
line_out_notify
gpio_private
cancel_delayed_work(&rt->headphone_notify.work);
cancel_delayed_work(&rt->headphone_notify.work)
cancel_delayed_work
cancel_delayed_work
&rt->headphone_notify.work
rt->headphone_notify.work
rt->headphone_notify
rt
rt
headphone_notify
work
cancel_delayed_work(&rt->line_in_notify.work);
cancel_delayed_work(&rt->line_in_notify.work)
cancel_delayed_work
cancel_delayed_work
&rt->line_in_notify.work
rt->line_in_notify.work
rt->line_in_notify
rt
rt
line_in_notify
work
cancel_delayed_work(&rt->line_out_notify.work);
cancel_delayed_work(&rt->line_out_notify.work)
cancel_delayed_work
cancel_delayed_work
&rt->line_out_notify.work
rt->line_out_notify.work
rt->line_out_notify
rt
rt
line_out_notify
work
flush_scheduled_work();
flush_scheduled_work()
flush_scheduled_work
flush_scheduled_work
mutex_destroy(&rt->headphone_notify.mutex);
mutex_destroy(&rt->headphone_notify.mutex)
mutex_destroy
mutex_destroy
&rt->headphone_notify.mutex
rt->headphone_notify.mutex
rt->headphone_notify
rt
rt
headphone_notify
mutex
mutex_destroy(&rt->line_in_notify.mutex);
mutex_destroy(&rt->line_in_notify.mutex)
mutex_destroy
mutex_destroy
&rt->line_in_notify.mutex
rt->line_in_notify.mutex
rt->line_in_notify
rt
rt
line_in_notify
mutex
mutex_destroy(&rt->line_out_notify.mutex);
mutex_destroy(&rt->line_out_notify.mutex)
mutex_destroy
mutex_destroy
&rt->line_out_notify.mutex
rt->line_out_notify.mutex
rt->line_out_notify
rt
rt
line_out_notify
mutex
kfree(rt->headphone_notify.gpio_private);
kfree(rt->headphone_notify.gpio_private)
kfree
kfree
rt->headphone_notify.gpio_private
rt->headphone_notify
rt
rt
headphone_notify
gpio_private
kfree(rt->line_in_notify.gpio_private);
kfree(rt->line_in_notify.gpio_private)
kfree
kfree
rt->line_in_notify.gpio_private
rt->line_in_notify
rt
rt
line_in_notify
gpio_private
kfree(rt->line_out_notify.gpio_private);
kfree(rt->line_out_notify.gpio_private)
kfree
kfree
rt->line_out_notify.gpio_private
rt->line_out_notify
rt
rt
line_out_notify
gpio_private
-----joern-----
(86,77,0)
(103,4,0)
(94,59,0)
(49,73,0)
(69,56,0)
(9,41,0)
(53,43,0)
(104,30,0)
(12,23,0)
(65,13,0)
(56,41,0)
(3,25,0)
(33,14,0)
(64,21,0)
(7,89,0)
(36,104,0)
(82,13,0)
(38,97,0)
(62,38,0)
(99,87,0)
(4,34,0)
(26,54,0)
(10,25,0)
(98,32,0)
(86,98,0)
(66,41,0)
(23,41,0)
(19,8,0)
(5,84,0)
(72,95,0)
(102,90,0)
(13,82,0)
(61,27,0)
(52,41,0)
(59,87,0)
(46,91,0)
(83,61,0)
(35,25,0)
(95,104,0)
(6,27,0)
(61,5,0)
(42,89,0)
(81,63,0)
(85,39,0)
(84,5,0)
(56,69,0)
(103,41,0)
(55,95,0)
(87,99,0)
(1,66,0)
(25,10,0)
(16,41,0)
(34,4,0)
(67,32,0)
(39,29,0)
(79,8,0)
(93,31,0)
(70,34,0)
(101,27,0)
(59,97,0)
(88,45,0)
(80,97,0)
(50,51,0)
(78,97,0)
(15,100,0)
(40,59,0)
(31,14,0)
(57,10,0)
(90,97,0)
(2,63,0)
(30,104,0)
(34,80,0)
(8,43,0)
(100,15,0)
(24,78,0)
(9,35,0)
(21,89,0)
(0,13,0)
(23,97,0)
(51,15,0)
(51,97,0)
(28,51,0)
(4,103,0)
(88,41,0)
(10,97,0)
(63,91,0)
(18,90,0)
(29,39,0)
(92,41,0)
(45,73,0)
(17,82,0)
(58,80,0)
(87,59,0)
(15,51,0)
(27,61,0)
(60,37,0)
(82,17,0)
(35,9,0)
(48,54,0)
(90,66,0)
(54,48,0)
(84,41,0)
(39,37,0)
(48,41,0)
(75,37,0)
(44,41,0)
(37,39,0)
(32,98,0)
(14,97,0)
(11,10,0)
(45,88,0)
(89,21,0)
(38,54,0)
(32,97,0)
(73,45,0)
(71,15,0)
(76,87,0)
(8,97,0)
(98,86,0)
(96,82,0)
(13,97,0)
(100,41,0)
(106,14,0)
(20,80,0)
(54,38,0)
(95,97,0)
(89,97,0)
(105,32,0)
(74,78,0)
(80,34,0)
(27,97,0)
(68,38,0)
(17,41,0)
(91,63,0)
(14,31,0)
(77,86,0)
(43,69,0)
(69,43,0)
(25,35,0)
(22,98,0)
(63,97,0)
(77,41,0)
(78,73,0)
(73,78,0)
(37,97,0)
(5,61,0)
(104,95,0)
(43,8,0)
(25,10,1)
(91,46,1)
(70,80,1)
(15,71,1)
(90,97,1)
(13,97,1)
(50,48,1)
(83,27,1)
(3,10,1)
(85,37,1)
(49,78,1)
(60,75,1)
(75,91,1)
(61,27,1)
(90,102,1)
(2,81,1)
(6,101,1)
(61,83,1)
(36,95,1)
(82,13,1)
(37,60,1)
(91,63,1)
(26,38,1)
(95,55,1)
(14,97,1)
(23,97,1)
(42,66,1)
(14,33,1)
(27,97,1)
(79,88,1)
(63,97,1)
(80,20,1)
(51,97,1)
(47,17,1)
(32,97,1)
(87,59,1)
(106,30,1)
(89,7,1)
(62,68,1)
(55,72,1)
(84,5,1)
(95,97,1)
(28,50,1)
(88,45,1)
(43,8,1)
(27,6,1)
(105,103,1)
(19,79,1)
(35,25,1)
(31,14,1)
(73,78,1)
(65,100,1)
(18,23,1)
(101,92,1)
(8,19,1)
(74,29,1)
(51,28,1)
(7,42,1)
(82,96,1)
(103,4,1)
(76,59,1)
(58,84,1)
(81,99,1)
(54,38,1)
(100,15,1)
(23,12,1)
(68,77,1)
(86,98,1)
(40,94,1)
(104,36,1)
(34,70,1)
(13,0,1)
(30,104,1)
(24,74,1)
(104,95,1)
(63,2,1)
(43,53,1)
(9,35,1)
(34,80,1)
(64,89,1)
(25,3,1)
(66,1,1)
(11,57,1)
(93,14,1)
(92,9,1)
(39,37,1)
(81,31,1)
(98,32,1)
(17,82,1)
(45,73,1)
(21,89,1)
(39,85,1)
(57,56,1)
(20,58,1)
(33,106,1)
(89,97,1)
(87,76,1)
(38,97,1)
(48,54,1)
(94,31,1)
(78,97,1)
(72,21,1)
(67,105,1)
(56,69,1)
(21,64,1)
(80,97,1)
(59,97,1)
(74,91,1)
(32,67,1)
(10,11,1)
(99,87,1)
(1,90,1)
(4,34,1)
(10,97,1)
(59,40,1)
(98,22,1)
(5,61,1)
(78,24,1)
(53,8,1)
(71,51,1)
(29,39,1)
(8,97,1)
(15,51,1)
(22,32,1)
(0,65,1)
(77,86,1)
(73,49,1)
(54,26,1)
(106,21,1)
(96,13,1)
(102,18,1)
(69,43,1)
(37,97,1)
(46,63,1)
(31,93,1)
(38,62,1)
(40,31,2)
(103,4,2)
(31,14,2)
(45,73,2)
(85,91,2)
(29,91,2)
(14,97,2)
(37,97,2)
(5,61,2)
(56,69,2)
(48,54,2)
(51,97,2)
(80,97,2)
(75,91,2)
(8,97,2)
(10,97,2)
(34,80,2)
(60,91,2)
(9,35,2)
(98,32,2)
(89,97,2)
(100,15,2)
(43,8,2)
(55,21,2)
(78,97,2)
(99,87,2)
(76,31,2)
(21,89,2)
(15,51,2)
(59,97,2)
(32,97,2)
(4,34,2)
(54,38,2)
(72,21,2)
(73,78,2)
(36,21,2)
(13,97,2)
(35,25,2)
(63,97,2)
(104,21,2)
(29,39,2)
(99,31,2)
(61,27,2)
(104,95,2)
(86,98,2)
(84,5,2)
(95,21,2)
(87,31,2)
(39,37,2)
(94,31,2)
(37,91,2)
(77,86,2)
(30,21,2)
(38,97,2)
(17,82,2)
(82,13,2)
(23,97,2)
(87,59,2)
(91,63,2)
(25,10,2)
(30,104,2)
(27,97,2)
(69,43,2)
(88,45,2)
(39,91,2)
(95,97,2)
(90,97,2)
(59,31,2)
-----------------------------------
(0,line_out_notify)
(1,0)
(2,line_out_notify)
(3,work)
(4,&rt->line_in_notify.mutex)
(5,&rt->headphone_notify.mutex)
(6,headphone_notify)
(7,headphone_notify)
(8,rt->line_in_notify)
(9,cancel_delayed_work(&rt->line_out_notify.work)
(10,rt->line_out_notify)
(11,line_out_notify)
(12,rt)
(13,rt->line_out_notify)
(14,rt->line_in_notify)
(15,rt->line_in_notify.gpio_private)
(16,if (rt->line_in_notify.gpio_private)
(17,kfree(rt->line_out_notify.gpio_private)
(18,rt)
(19,line_in_notify)
(20,line_in_notify)
(21,rt->headphone_notify.gpio_private)
(22,mutex)
(23,pmf_gpio_all_amps_off(rt)
(24,headphone_notify)
(25,rt->line_out_notify.work)
(26,gpio_private)
(27,rt->headphone_notify)
(28,line_in_notify)
(29,pmf_unregister_irq_client(rt->line_out_notify.gpio_private)
(30,pmf_unregister_irq_client(rt->headphone_notify.gpio_private)
(31,rt->line_in_notify.gpio_private)
(32,rt->line_out_notify)
(33,line_in_notify)
(34,rt->line_in_notify.mutex)
(35,&rt->line_out_notify.work)
(36,gpio_private)
(37,rt->line_out_notify)
(38,rt->headphone_notify)
(39,rt->line_out_notify.gpio_private)
(40,line_in_notify)
(41,)
(42,rt)
(43,rt->line_in_notify.work)
(44,if (rt->line_out_notify.gpio_private)
(45,&rt->headphone_notify.work)
(46,gpio_private)
(47,RET)
(48,kfree(rt->headphone_notify.gpio_private)
(49,work)
(50,rt)
(51,rt->line_in_notify)
(52,if (rt->headphone_notify.gpio_private)
(53,work)
(54,rt->headphone_notify.gpio_private)
(55,headphone_notify)
(56,cancel_delayed_work(&rt->line_in_notify.work)
(57,rt)
(58,rt)
(59,rt->line_in_notify)
(60,line_out_notify)
(61,rt->headphone_notify.mutex)
(62,headphone_notify)
(63,rt->line_out_notify)
(64,gpio_private)
(65,rt)
(66,rt->implementation_private = 0)
(67,line_out_notify)
(68,rt)
(69,&rt->line_in_notify.work)
(70,mutex)
(71,gpio_private)
(72,rt)
(73,rt->headphone_notify.work)
(74,rt)
(75,rt)
(76,gpio_private)
(77,mutex_destroy(&rt->line_out_notify.mutex)
(78,rt->headphone_notify)
(79,rt)
(80,rt->line_in_notify)
(81,rt)
(82,rt->line_out_notify.gpio_private)
(83,mutex)
(84,mutex_destroy(&rt->headphone_notify.mutex)
(85,gpio_private)
(86,&rt->line_out_notify.mutex)
(87,rt->line_in_notify.gpio_private)
(88,cancel_delayed_work(&rt->headphone_notify.work)
(89,rt->headphone_notify)
(90,rt->implementation_private)
(91,rt->line_out_notify.gpio_private)
(92,flush_scheduled_work()
(93,gpio_private)
(94,rt)
(95,rt->headphone_notify)
(96,gpio_private)
(97,struct gpio_runtime *rt)
(98,rt->line_out_notify.mutex)
(99,pmf_unregister_irq_client(rt->line_in_notify.gpio_private)
(100,kfree(rt->line_in_notify.gpio_private)
(101,rt)
(102,implementation_private)
(103,mutex_destroy(&rt->line_in_notify.mutex)
(104,rt->headphone_notify.gpio_private)
(105,rt)
(106,rt)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^