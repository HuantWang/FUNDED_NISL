-----label-----
0
-----code-----
static int ath3k_load_patch(struct usb_device *udev)
{
	unsigned char fw_state;
	char filename[ATH3K_NAME_LEN] = {0};
	const struct firmware *firmware;
	struct ath3k_version fw_version;
	__u32 pt_rom_version, pt_build_version;
	int ret;

	ret = ath3k_get_state(udev, &fw_state);
	if (ret < 0) {
		BT_ERR("Can't get state to change to load ram patch err");
		return ret;
	}

	if (fw_state & ATH3K_PATCH_UPDATE) {
		BT_DBG("Patch was already downloaded");
		return 0;
	}

	ret = ath3k_get_version(udev, &fw_version);
	if (ret < 0) {
		BT_ERR("Can't get version to change to load ram patch err");
		return ret;
	}

	snprintf(filename, ATH3K_NAME_LEN, "ar3k/AthrBT_0x%08x.dfu",
		 le32_to_cpu(fw_version.rom_version));

	ret = request_firmware(&firmware, filename, &udev->dev);
	if (ret < 0) {
		BT_ERR("Patch file not found %s", filename);
		return ret;
	}

	pt_rom_version = get_unaligned_le32(firmware->data +
					    firmware->size - 8);
	pt_build_version = get_unaligned_le32(firmware->data +
					      firmware->size - 4);

	if (pt_rom_version != le32_to_cpu(fw_version.rom_version) ||
	    pt_build_version <= le32_to_cpu(fw_version.build_version)) {
		BT_ERR("Patch file version did not match with firmware");
		release_firmware(firmware);
		return -EINVAL;
	}

	ret = ath3k_load_fwfile(udev, firmware);
	release_firmware(firmware);

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
12,13
13,14
13,15
15,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
42,45
43,44
45,46
47,48
49,50
50,51
50,52
52,53
54,55
55,56
55,57
56,57
58,59
58,60
58,61
59,60
61,62
63,64
64,65
66,67
66,68
67,68
67,69
68,69
71,72
71,73
72,73
73,74
73,75
74,75
77,78
78,79
80,81
80,82
81,82
81,83
82,83
84,85
86,87
86,88
87,88
88,89
88,90
89,90
92,93
94,95
95,96
95,97
96,97
98,99
98,100
98,101
99,100
101,102
103,104
104,105
106,107
106,108
107,108
107,109
108,109
111,112
111,113
112,113
113,114
113,115
114,115
117,118
118,119
120,121
121,122
121,123
121,124
121,125
121,126
122,123
124,125
126,127
129,130
129,131
130,131
132,133
132,134
133,134
136,137
137,138
137,139
138,139
140,141
140,142
140,143
140,144
141,142
143,144
144,145
146,147
148,149
149,150
149,151
150,151
153,154
153,155
154,155
154,156
155,156
158,159
158,160
159,160
160,161
160,162
160,163
161,162
164,165
166,167
167,168
169,170
170,171
170,172
171,172
173,174
173,175
174,175
176,177
176,178
177,178
177,179
178,179
178,180
179,180
182,183
182,184
183,184
187,188
188,189
188,190
189,190
191,192
191,193
192,193
194,195
194,196
195,196
195,197
196,197
196,198
197,198
200,201
200,202
201,202
205,206
205,207
206,207
206,208
207,208
207,209
208,209
210,211
210,212
211,212
213,214
213,215
214,215
217,218
217,219
218,219
220,221
220,222
221,222
223,224
223,225
224,225
227,228
227,229
227,230
228,229
229,230
229,231
230,231
233,234
234,235
234,236
235,236
237,238
239,240
240,241
241,242
243,244
244,245
244,246
245,246
247,248
247,249
247,250
248,249
250,251
252,253
254,255
255,256
255,257
256,257
258,259
260,261
261,262
-----nextToken-----
2,4,7,9,10,14,16,19,21,24,27,31,33,34,38,40,44,46,48,51,53,57,60,62,65,69,70,75,76,79,83,85,90,91,93,97,100,102,105,109,110,115,116,119,123,125,127,128,131,134,135,139,142,145,147,151,152,156,157,162,163,165,168,172,175,180,181,184,185,186,190,193,198,199,202,203,204,209,212,215,216,219,222,225,226,231,232,236,238,242,246,249,251,253,257,259,262
-----computeFrom-----
55,56
55,57
67,68
67,69
81,82
81,83
95,96
95,97
107,108
107,109
137,138
137,139
154,155
154,156
170,171
170,172
176,177
176,178
177,178
177,179
188,189
188,190
194,195
194,196
195,196
195,197
206,207
206,208
207,208
207,209
217,218
217,219
244,245
244,246
-----guardedBy-----
69,79
109,119
156,168
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int ath3k_load_patch(struct usb_device *udev){	unsigned char fw_state;	char filename[ATH3K_NAME_LEN] = {0};	const struct firmware *firmware;	struct ath3k_version fw_version;	__u32 pt_rom_version, pt_build_version;	int ret;	ret = ath3k_get_state(udev, &fw_state);	if (ret < 0) {		BT_ERR("Can't get state to change to load ram patch err");		return ret;	}	if (fw_state & ATH3K_PATCH_UPDATE) {		BT_DBG("Patch was already downloaded");		return 0;	}	ret = ath3k_get_version(udev, &fw_version);	if (ret < 0) {		BT_ERR("Can't get version to change to load ram patch err");		return ret;	}	snprintf(filename, ATH3K_NAME_LEN, "ar3k/AthrBT_0x%08x.dfu",		 le32_to_cpu(fw_version.rom_version));	ret = request_firmware(&firmware, filename, &udev->dev);	if (ret < 0) {		BT_ERR("Patch file not found %s", filename);		return ret;	}	pt_rom_version = get_unaligned_le32(firmware->data +					    firmware->size - 8);	pt_build_version = get_unaligned_le32(firmware->data +					      firmware->size - 4);	if (pt_rom_version != le32_to_cpu(fw_version.rom_version) ||	    pt_build_version <= le32_to_cpu(fw_version.build_version)) {		BT_ERR("Patch file version did not match with firmware");		release_firmware(firmware);		return -EINVAL;	}	ret = ath3k_load_fwfile(udev, firmware);	release_firmware(firmware);	return ret;}
static int
ath3k_load_patch(struct usb_device *udev)
ath3k_load_patch
struct usb_device *udev
struct usb_device
usb_device
*udev
*
udev
{	unsigned char fw_state;	char filename[ATH3K_NAME_LEN] = {0};	const struct firmware *firmware;	struct ath3k_version fw_version;	__u32 pt_rom_version, pt_build_version;	int ret;	ret = ath3k_get_state(udev, &fw_state);	if (ret < 0) {		BT_ERR("Can't get state to change to load ram patch err");		return ret;	}	if (fw_state & ATH3K_PATCH_UPDATE) {		BT_DBG("Patch was already downloaded");		return 0;	}	ret = ath3k_get_version(udev, &fw_version);	if (ret < 0) {		BT_ERR("Can't get version to change to load ram patch err");		return ret;	}	snprintf(filename, ATH3K_NAME_LEN, "ar3k/AthrBT_0x%08x.dfu",		 le32_to_cpu(fw_version.rom_version));	ret = request_firmware(&firmware, filename, &udev->dev);	if (ret < 0) {		BT_ERR("Patch file not found %s", filename);		return ret;	}	pt_rom_version = get_unaligned_le32(firmware->data +					    firmware->size - 8);	pt_build_version = get_unaligned_le32(firmware->data +					      firmware->size - 4);	if (pt_rom_version != le32_to_cpu(fw_version.rom_version) ||	    pt_build_version <= le32_to_cpu(fw_version.build_version)) {		BT_ERR("Patch file version did not match with firmware");		release_firmware(firmware);		return -EINVAL;	}	ret = ath3k_load_fwfile(udev, firmware);	release_firmware(firmware);	return ret;}
unsigned char fw_state;
unsigned char fw_state;
unsigned char
fw_state
fw_state
char filename[ATH3K_NAME_LEN] = {0};
char filename[ATH3K_NAME_LEN] = {0};
char
filename[ATH3K_NAME_LEN] = {0}
filename
[ATH3K_NAME_LEN]
ATH3K_NAME_LEN
ATH3K_NAME_LEN
= {0}
{0}
0
const struct firmware *firmware;
const struct firmware *firmware;
const struct firmware
firmware
*firmware
*
firmware
struct ath3k_version fw_version;
struct ath3k_version fw_version;
struct ath3k_version
ath3k_version
fw_version
fw_version
__u32 pt_rom_version, pt_build_version;
__u32 pt_rom_version, pt_build_version;
__u32
__u32
pt_rom_version
pt_rom_version
pt_build_version
pt_build_version
int ret;
int ret;
int
ret
ret
ret = ath3k_get_state(udev, &fw_state);
ret = ath3k_get_state(udev, &fw_state)
ret
ret
ath3k_get_state(udev, &fw_state)
ath3k_get_state
ath3k_get_state
udev
udev
&fw_state
fw_state
fw_state
if (ret < 0) {		BT_ERR("Can't get state to change to load ram patch err");		return ret;	}
ret < 0
ret
ret
0
{		BT_ERR("Can't get state to change to load ram patch err");		return ret;	}
BT_ERR("Can't get state to change to load ram patch err");
BT_ERR("Can't get state to change to load ram patch err")
BT_ERR
BT_ERR
"Can't get state to change to load ram patch err"
return ret;
ret
ret
if (fw_state & ATH3K_PATCH_UPDATE) {		BT_DBG("Patch was already downloaded");		return 0;	}
fw_state & ATH3K_PATCH_UPDATE
fw_state
fw_state
ATH3K_PATCH_UPDATE
ATH3K_PATCH_UPDATE
{		BT_DBG("Patch was already downloaded");		return 0;	}
BT_DBG("Patch was already downloaded");
BT_DBG("Patch was already downloaded")
BT_DBG
BT_DBG
"Patch was already downloaded"
return 0;
0
ret = ath3k_get_version(udev, &fw_version);
ret = ath3k_get_version(udev, &fw_version)
ret
ret
ath3k_get_version(udev, &fw_version)
ath3k_get_version
ath3k_get_version
udev
udev
&fw_version
fw_version
fw_version
if (ret < 0) {		BT_ERR("Can't get version to change to load ram patch err");		return ret;	}
ret < 0
ret
ret
0
{		BT_ERR("Can't get version to change to load ram patch err");		return ret;	}
BT_ERR("Can't get version to change to load ram patch err");
BT_ERR("Can't get version to change to load ram patch err")
BT_ERR
BT_ERR
"Can't get version to change to load ram patch err"
return ret;
ret
ret
snprintf(filename, ATH3K_NAME_LEN, "ar3k/AthrBT_0x%08x.dfu",		 le32_to_cpu(fw_version.rom_version));
snprintf(filename, ATH3K_NAME_LEN, "ar3k/AthrBT_0x%08x.dfu",		 le32_to_cpu(fw_version.rom_version))
snprintf
snprintf
filename
filename
ATH3K_NAME_LEN
ATH3K_NAME_LEN
"ar3k/AthrBT_0x%08x.dfu"
le32_to_cpu(fw_version.rom_version)
le32_to_cpu
le32_to_cpu
fw_version.rom_version
fw_version
fw_version
rom_version
ret = request_firmware(&firmware, filename, &udev->dev);
ret = request_firmware(&firmware, filename, &udev->dev)
ret
ret
request_firmware(&firmware, filename, &udev->dev)
request_firmware
request_firmware
&firmware
firmware
firmware
filename
filename
&udev->dev
udev->dev
udev
udev
dev
if (ret < 0) {		BT_ERR("Patch file not found %s", filename);		return ret;	}
ret < 0
ret
ret
0
{		BT_ERR("Patch file not found %s", filename);		return ret;	}
BT_ERR("Patch file not found %s", filename);
BT_ERR("Patch file not found %s", filename)
BT_ERR
BT_ERR
"Patch file not found %s"
filename
filename
return ret;
ret
ret
pt_rom_version = get_unaligned_le32(firmware->data +					    firmware->size - 8);
pt_rom_version = get_unaligned_le32(firmware->data +					    firmware->size - 8)
pt_rom_version
pt_rom_version
get_unaligned_le32(firmware->data +					    firmware->size - 8)
get_unaligned_le32
get_unaligned_le32
firmware->data +					    firmware->size - 8
firmware->data +					    firmware->size
firmware->data
firmware
firmware
data
firmware->size
firmware
firmware
size
8
pt_build_version = get_unaligned_le32(firmware->data +					      firmware->size - 4);
pt_build_version = get_unaligned_le32(firmware->data +					      firmware->size - 4)
pt_build_version
pt_build_version
get_unaligned_le32(firmware->data +					      firmware->size - 4)
get_unaligned_le32
get_unaligned_le32
firmware->data +					      firmware->size - 4
firmware->data +					      firmware->size
firmware->data
firmware
firmware
data
firmware->size
firmware
firmware
size
4
if (pt_rom_version != le32_to_cpu(fw_version.rom_version) ||	    pt_build_version <= le32_to_cpu(fw_version.build_version)) {		BT_ERR("Patch file version did not match with firmware");		release_firmware(firmware);		return -EINVAL;	}
pt_rom_version != le32_to_cpu(fw_version.rom_version) ||	    pt_build_version <= le32_to_cpu(fw_version.build_version)
pt_rom_version != le32_to_cpu(fw_version.rom_version)
pt_rom_version
pt_rom_version
le32_to_cpu(fw_version.rom_version)
le32_to_cpu
le32_to_cpu
fw_version.rom_version
fw_version
fw_version
rom_version
pt_build_version <= le32_to_cpu(fw_version.build_version)
pt_build_version
pt_build_version
le32_to_cpu(fw_version.build_version)
le32_to_cpu
le32_to_cpu
fw_version.build_version
fw_version
fw_version
build_version
{		BT_ERR("Patch file version did not match with firmware");		release_firmware(firmware);		return -EINVAL;	}
BT_ERR("Patch file version did not match with firmware");
BT_ERR("Patch file version did not match with firmware")
BT_ERR
BT_ERR
"Patch file version did not match with firmware"
release_firmware(firmware);
release_firmware(firmware)
release_firmware
release_firmware
firmware
firmware
return -EINVAL;
-EINVAL
EINVAL
EINVAL
ret = ath3k_load_fwfile(udev, firmware);
ret = ath3k_load_fwfile(udev, firmware)
ret
ret
ath3k_load_fwfile(udev, firmware)
ath3k_load_fwfile
ath3k_load_fwfile
udev
udev
firmware
firmware
release_firmware(firmware);
release_firmware(firmware)
release_firmware
release_firmware
firmware
firmware
return ret;
ret
ret
-----joern-----
(1,86,0)
(2,93,0)
(129,68,0)
(4,75,0)
(67,54,0)
(79,75,0)
(73,17,0)
(92,4,0)
(103,48,0)
(69,30,0)
(110,123,0)
(126,75,0)
(116,4,0)
(95,93,0)
(11,112,0)
(122,120,0)
(10,83,0)
(26,27,0)
(82,131,0)
(17,114,0)
(55,120,0)
(83,38,0)
(82,49,0)
(80,112,0)
(38,83,0)
(61,11,0)
(71,75,0)
(50,75,0)
(121,88,0)
(42,65,0)
(72,43,0)
(100,77,0)
(114,0,0)
(133,38,0)
(116,53,0)
(12,2,0)
(119,71,0)
(59,38,0)
(21,102,0)
(115,41,0)
(10,0,0)
(27,44,0)
(82,108,0)
(63,11,0)
(128,101,0)
(14,96,0)
(84,1,0)
(44,75,0)
(73,130,0)
(0,75,0)
(97,77,0)
(17,101,0)
(52,112,0)
(56,75,0)
(96,26,0)
(93,56,0)
(70,30,0)
(56,93,0)
(77,100,0)
(58,113,0)
(83,10,0)
(125,75,0)
(90,102,0)
(124,8,0)
(0,114,0)
(80,105,0)
(9,33,0)
(49,120,0)
(62,131,0)
(3,30,0)
(57,73,0)
(41,115,0)
(4,71,0)
(36,101,0)
(88,60,0)
(46,121,0)
(78,130,0)
(85,75,0)
(4,116,0)
(81,44,0)
(102,44,0)
(28,75,0)
(7,96,0)
(104,109,0)
(130,73,0)
(35,10,0)
(108,112,0)
(39,31,0)
(13,53,0)
(89,75,0)
(40,74,0)
(108,86,0)
(5,115,0)
(6,75,0)
(29,122,0)
(1,71,0)
(87,0,0)
(127,68,0)
(45,75,0)
(26,113,0)
(15,20,0)
(8,56,0)
(33,37,0)
(25,55,0)
(34,75,0)
(32,67,0)
(51,88,0)
(93,2,0)
(117,1,0)
(80,71,0)
(88,75,0)
(91,4,0)
(113,26,0)
(24,8,0)
(82,48,0)
(65,54,0)
(132,56,0)
(98,75,0)
(26,96,0)
(68,113,0)
(66,130,0)
(93,94,0)
(112,80,0)
(82,33,0)
(107,105,0)
(113,68,0)
(60,20,0)
(18,115,0)
(60,88,0)
(48,47,0)
(114,17,0)
(109,47,0)
(30,70,0)
(101,17,0)
(102,41,0)
(41,102,0)
(76,4,0)
(99,60,0)
(131,70,0)
(118,77,0)
(123,49,0)
(22,108,0)
(90,10,0)
(65,56,0)
(19,75,0)
(23,53,0)
(44,27,0)
(131,75,0)
(31,37,0)
(106,121,0)
(20,60,0)
(77,94,0)
(30,94,0)
(80,100,0)
(111,80,0)
(17,73,0)
(10,90,0)
(53,116,0)
(100,80,0)
(64,70,0)
(16,74,0)
(105,80,0)
(82,65,0)
(43,75,0)
(102,90,0)
(33,88,0)
(70,75,0)
(112,75,0)
(60,94,0)
(27,26,0)
(92,121,1)
(107,52,1)
(32,8,1)
(129,96,1)
(22,1,1)
(113,58,1)
(70,30,1)
(122,29,1)
(8,24,1)
(49,123,1)
(26,113,1)
(82,108,1)
(17,73,1)
(56,93,1)
(74,16,1)
(123,110,1)
(61,112,1)
(104,74,1)
(73,130,1)
(82,33,1)
(68,127,1)
(80,100,1)
(88,60,1)
(52,4,1)
(29,90,1)
(101,36,1)
(4,116,1)
(39,121,1)
(36,128,1)
(21,0,1)
(7,81,1)
(27,26,1)
(112,80,1)
(18,5,1)
(105,107,1)
(84,117,1)
(80,105,1)
(83,38,1)
(108,112,1)
(23,76,1)
(2,12,1)
(10,0,1)
(108,22,1)
(82,48,1)
(15,99,1)
(82,131,1)
(102,44,1)
(95,132,1)
(40,8,1)
(73,57,1)
(24,124,1)
(48,103,1)
(82,65,1)
(132,71,1)
(60,94,1)
(10,83,1)
(55,25,1)
(46,88,1)
(57,130,1)
(91,92,1)
(102,41,1)
(121,106,1)
(5,21,1)
(113,68,1)
(76,91,1)
(62,43,1)
(87,44,1)
(69,64,1)
(81,11,1)
(77,94,1)
(93,94,1)
(67,32,1)
(82,49,1)
(33,9,1)
(121,88,1)
(96,14,1)
(114,17,1)
(38,133,1)
(90,10,1)
(58,68,1)
(44,27,1)
(111,105,1)
(110,55,1)
(97,111,1)
(106,46,1)
(66,78,1)
(133,59,1)
(59,35,1)
(118,97,1)
(116,53,1)
(60,20,1)
(131,62,1)
(77,118,1)
(42,67,1)
(131,70,1)
(33,88,1)
(26,96,1)
(100,77,1)
(30,3,1)
(41,115,1)
(20,15,1)
(78,101,1)
(16,40,1)
(124,56,1)
(93,2,1)
(115,18,1)
(1,84,1)
(117,11,1)
(63,61,1)
(103,109,1)
(1,71,1)
(4,71,1)
(130,66,1)
(99,51,1)
(12,95,1)
(128,87,1)
(0,114,1)
(80,71,1)
(109,104,1)
(43,72,1)
(3,69,1)
(90,102,1)
(64,90,1)
(13,23,1)
(8,56,1)
(53,13,1)
(11,63,1)
(65,42,1)
(9,31,1)
(65,56,1)
(17,101,1)
(51,74,1)
(72,70,1)
(14,7,1)
(25,122,1)
(127,129,1)
(31,39,1)
(71,119,1)
(11,112,1)
(35,102,1)
(30,94,1)
(77,121,2)
(112,80,2)
(112,121,2)
(9,121,2)
(4,121,2)
(44,27,2)
(102,11,2)
(109,74,2)
(113,11,2)
(121,88,2)
(30,94,2)
(70,30,2)
(73,11,2)
(5,11,2)
(88,60,2)
(73,130,2)
(3,90,2)
(82,49,2)
(58,11,2)
(22,11,2)
(35,102,2)
(53,121,2)
(110,90,2)
(68,11,2)
(36,11,2)
(96,11,2)
(107,121,2)
(1,11,2)
(118,121,2)
(104,74,2)
(69,90,2)
(10,102,2)
(122,90,2)
(123,90,2)
(13,121,2)
(101,11,2)
(77,94,2)
(41,11,2)
(39,121,2)
(26,113,2)
(83,102,2)
(99,74,2)
(106,74,2)
(55,90,2)
(116,53,2)
(127,11,2)
(49,90,2)
(82,131,2)
(33,121,2)
(31,121,2)
(82,65,2)
(26,11,2)
(41,115,2)
(100,77,2)
(131,90,2)
(60,20,2)
(66,11,2)
(80,105,2)
(25,90,2)
(83,38,2)
(56,93,2)
(108,112,2)
(130,11,2)
(87,11,2)
(44,11,2)
(111,121,2)
(57,11,2)
(103,74,2)
(61,121,2)
(102,41,2)
(15,74,2)
(65,8,2)
(90,11,2)
(91,121,2)
(52,121,2)
(60,94,2)
(81,11,2)
(108,11,2)
(116,121,2)
(10,0,2)
(115,11,2)
(128,11,2)
(4,71,2)
(65,56,2)
(92,121,2)
(121,74,2)
(17,73,2)
(29,90,2)
(48,74,2)
(0,11,2)
(17,101,2)
(38,102,2)
(93,94,2)
(8,56,2)
(40,8,2)
(33,88,2)
(80,100,2)
(131,70,2)
(76,121,2)
(133,102,2)
(100,121,2)
(14,11,2)
(82,108,2)
(88,74,2)
(62,90,2)
(46,74,2)
(43,90,2)
(0,114,2)
(105,121,2)
(16,8,2)
(102,44,2)
(60,74,2)
(11,112,2)
(129,11,2)
(20,74,2)
(70,90,2)
(27,11,2)
(27,26,2)
(97,121,2)
(4,116,2)
(59,102,2)
(63,121,2)
(67,8,2)
(10,83,2)
(80,121,2)
(11,121,2)
(26,96,2)
(51,74,2)
(82,33,2)
(90,102,2)
(32,8,2)
(42,8,2)
(30,90,2)
(64,90,2)
(7,11,2)
(17,11,2)
(74,8,2)
(93,2,2)
(113,68,2)
(117,11,2)
(21,11,2)
(80,71,2)
(114,11,2)
(82,48,2)
(23,121,2)
(84,11,2)
(78,11,2)
(18,11,2)
(72,90,2)
(114,17,2)
(1,71,2)
(90,10,2)
-----------------------------------
(0,pt_build_version = get_unaligned_le32(firmware->data +\n\\n\\t\\t\\t\\t\\t      firmware->size - 4)
(1,BT_ERR("Patch file not found %s", filename)
(2,&fw_state)
(3,firmware)
(4,snprintf(filename, ATH3K_NAME_LEN, "ar3k/AthrBT_0x%08x.dfu",\n\\n\\t\\t le32_to_cpu(fw_version.rom_version)
(5,fw_version)
(6,pt_build_version)
(7,firmware)
(8,ret < 0)
(9,ret)
(10,pt_build_version <= le32_to_cpu(fw_version.build_version)
(11,ret < 0)
(12,fw_state)
(13,rom_version)
(14,data)
(15,fw_version)
(16,ATH3K_PATCH_UPDATE)
(17,firmware->data +\n\\n\\t\\t\\t\\t\\t      firmware->size - 4)
(18,rom_version)
(19,if (ret < 0)
(20,&fw_version)
(21,pt_rom_version)
(22,ret)
(23,fw_version)
(24,0)
(25,firmware)
(26,firmware->data +\n\\n\\t\\t\\t\\t\\t    firmware->size - 8)
(27,get_unaligned_le32(firmware->data +\n\\n\\t\\t\\t\\t\\t    firmware->size - 8)
(28,ret)
(29,"Patch file version did not match with firmware")
(30,ath3k_load_fwfile(udev, firmware)
(31,BT_ERR("Can\'t get version to change to load ram patch err")
(32,"Can\'t get state to change to load ram patch err")
(33,return ret;)
(34,if (ret < 0)
(35,pt_build_version)
(36,data)
(37,)
(38,fw_version.build_version)
(39,"Can\'t get version to change to load ram patch err")
(40,fw_state)
(41,le32_to_cpu(fw_version.rom_version)
(42,ret)
(43,release_firmware(firmware)
(44,pt_rom_version = get_unaligned_le32(firmware->data +\n\\n\\t\\t\\t\\t\\t    firmware->size - 8)
(45,fw_state)
(46,ret)
(47,)
(48,return 0;)
(49,return -EINVAL;)
(50,if (ret < 0)
(51,ret)
(52,ret)
(53,fw_version.rom_version)
(54,)
(55,release_firmware(firmware)
(56,ret = ath3k_get_state(udev, &fw_state)
(57,4)
(58,8)
(59,fw_version)
(60,ath3k_get_version(udev, &fw_version)
(61,ret)
(62,ret)
(63,0)
(64,ret)
(65,return ret;)
(66,size)
(67,BT_ERR("Can\'t get state to change to load ram patch err")
(68,firmware->size)
(69,udev)
(70,ret = ath3k_load_fwfile(udev, firmware)
(71,filename[ATH3K_NAME_LEN] = {0})
(72,firmware)
(73,firmware->size - 4)
(74,fw_state & ATH3K_PATCH_UPDATE)
(75,)
(76,"ar3k/AthrBT_0x%08x.dfu")
(77,udev->dev)
(78,firmware)
(79,pt_rom_version)
(80,request_firmware(&firmware, filename, &udev->dev)
(81,pt_rom_version)
(82,RET)
(83,le32_to_cpu(fw_version.build_version)
(84,filename)
(85,fw_version)
(86,)
(87,pt_build_version)
(88,ret = ath3k_get_version(udev, &fw_version)
(89,filename)
(90,pt_rom_version != le32_to_cpu(fw_version.rom_version)
(91,ATH3K_NAME_LEN)
(92,filename)
(93,ath3k_get_state(udev, &fw_state)
(94,struct usb_device *udev)
(95,udev)
(96,firmware->data)
(97,udev)
(98,if (fw_state & ATH3K_PATCH_UPDATE)
(99,udev)
(100,&udev->dev)
(101,firmware->data)
(102,pt_rom_version != le32_to_cpu(fw_version.rom_version)
(103,0)
(104,"Patch was already downloaded")
(105,&firmware)
(106,0)
(107,firmware)
(108,return ret;)
(109,BT_DBG("Patch was already downloaded")
(110,EINVAL)
(111,filename)
(112,ret = request_firmware(&firmware, filename, &udev->dev)
(113,firmware->size - 8)
(114,get_unaligned_le32(firmware->data +\n\\n\\t\\t\\t\\t\\t      firmware->size - 4)
(115,fw_version.rom_version)
(116,le32_to_cpu(fw_version.rom_version)
(117,"Patch file not found %s")
(118,dev)
(119,filename)
(120,)
(121,ret < 0)
(122,BT_ERR("Patch file version did not match with firmware")
(123,-EINVAL)
(124,ret)
(125,firmware)
(126,if (pt_rom_version != le32_to_cpu(fw_version.rom_version)
(127,size)
(128,firmware)
(129,firmware)
(130,firmware->size)
(131,return ret;)
(132,ret)
(133,build_version)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^