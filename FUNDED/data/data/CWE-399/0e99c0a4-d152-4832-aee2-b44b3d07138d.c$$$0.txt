-----label-----
1
-----code-----
int pcibios_add_device(struct pci_dev *dev)
{
	struct setup_data *data;
	struct pci_setup_rom *rom;
	u64 pa_data;

	pa_data = boot_params.hdr.setup_data;
	while (pa_data) {
		data = ioremap(pa_data, sizeof(*rom));
		if (!data)
			return -ENOMEM;

		if (data->type == SETUP_PCI) {
			rom = (struct pci_setup_rom *)data;

			if ((pci_domain_nr(dev->bus) == rom->segment) &&
			    (dev->bus->number == rom->bus) &&
			    (PCI_SLOT(dev->devfn) == rom->device) &&
			    (PCI_FUNC(dev->devfn) == rom->function) &&
			    (dev->vendor == rom->vendor) &&
			    (dev->device == rom->devid)) {
				dev->rom = pa_data +
				      offsetof(struct pci_setup_rom, romdata);
				dev->romlen = rom->pcilen;
			}
		}
		pa_data = data->next;
		iounmap(data);
	}
	set_dma_domain_ops(dev);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
38,39
42,43
42,44
43,44
45,46
45,47
45,48
45,49
45,50
46,47
47,48
47,49
48,49
50,51
50,52
50,53
51,52
53,54
55,56
56,57
57,58
58,59
60,61
60,62
61,62
62,63
64,65
65,66
66,67
68,69
68,70
69,70
69,71
70,71
70,72
71,72
74,75
76,77
76,78
77,78
78,79
78,80
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
89,90
89,91
90,91
90,92
91,92
91,93
92,93
92,94
93,94
93,95
94,95
94,96
95,96
96,97
96,98
97,98
97,99
98,99
100,101
100,102
101,102
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
111,113
112,113
116,117
116,118
117,118
120,121
121,122
121,123
122,123
122,124
123,124
125,126
125,127
126,127
129,130
129,131
130,131
133,134
134,135
134,136
135,136
135,137
136,137
138,139
138,140
139,140
142,143
142,144
143,144
146,147
147,148
147,149
148,149
148,150
149,150
152,153
152,154
153,154
156,157
157,158
157,159
158,159
158,160
159,160
162,163
162,164
163,164
166,167
166,168
167,168
168,169
169,170
169,171
170,171
170,172
171,172
174,175
174,176
175,176
178,179
179,180
179,181
180,181
182,183
182,184
183,184
186,187
187,188
187,189
188,189
190,191
192,193
193,194
193,195
194,195
196,197
198,199
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,25,29,31,35,39,40,41,44,49,52,54,59,63,67,72,73,75,80,84,86,88,99,102,103,106,107,113,114,115,118,119,124,127,128,131,132,137,140,141,144,145,150,151,154,155,160,161,164,165,172,173,176,177,181,184,185,189,191,195,197,199
-----computeFrom-----
33,34
33,35
47,48
47,49
69,70
69,71
78,79
78,80
90,91
90,92
91,92
91,93
92,93
92,94
93,94
93,95
94,95
94,96
96,97
96,98
109,110
109,111
121,122
121,123
134,135
134,136
147,148
147,149
157,158
157,159
169,170
169,171
179,180
179,181
-----guardedBy-----
72,88
164,176
160,172
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;WhileStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ProblemStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int pcibios_add_device(struct pci_dev *dev){	struct setup_data *data;	struct pci_setup_rom *rom;	u64 pa_data;	pa_data = boot_params.hdr.setup_data;	while (pa_data) {		data = ioremap(pa_data, sizeof(*rom));		if (!data)			return -ENOMEM;		if (data->type == SETUP_PCI) {			rom = (struct pci_setup_rom *)data;			if ((pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function) &&			    (dev->vendor == rom->vendor) &&			    (dev->device == rom->devid)) {				dev->rom = pa_data +				      offsetof(struct pci_setup_rom, romdata);				dev->romlen = rom->pcilen;			}		}		pa_data = data->next;		iounmap(data);	}	set_dma_domain_ops(dev);	return 0;}
int
pcibios_add_device(struct pci_dev *dev)
pcibios_add_device
struct pci_dev *dev
struct pci_dev
pci_dev
*dev
*
dev
{	struct setup_data *data;	struct pci_setup_rom *rom;	u64 pa_data;	pa_data = boot_params.hdr.setup_data;	while (pa_data) {		data = ioremap(pa_data, sizeof(*rom));		if (!data)			return -ENOMEM;		if (data->type == SETUP_PCI) {			rom = (struct pci_setup_rom *)data;			if ((pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function) &&			    (dev->vendor == rom->vendor) &&			    (dev->device == rom->devid)) {				dev->rom = pa_data +				      offsetof(struct pci_setup_rom, romdata);				dev->romlen = rom->pcilen;			}		}		pa_data = data->next;		iounmap(data);	}	set_dma_domain_ops(dev);	return 0;}
struct setup_data *data;
struct setup_data *data;
struct setup_data
setup_data
*data
*
data
struct pci_setup_rom *rom;
struct pci_setup_rom *rom;
struct pci_setup_rom
pci_setup_rom
*rom
*
rom
u64 pa_data;
u64 pa_data;
u64
u64
pa_data
pa_data
pa_data = boot_params.hdr.setup_data;
pa_data = boot_params.hdr.setup_data
pa_data
pa_data
boot_params.hdr.setup_data
boot_params.hdr
boot_params
boot_params
hdr
setup_data
while (pa_data) {		data = ioremap(pa_data, sizeof(*rom));		if (!data)			return -ENOMEM;		if (data->type == SETUP_PCI) {			rom = (struct pci_setup_rom *)data;			if ((pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function) &&			    (dev->vendor == rom->vendor) &&			    (dev->device == rom->devid)) {				dev->rom = pa_data +				      offsetof(struct pci_setup_rom, romdata);				dev->romlen = rom->pcilen;			}		}		pa_data = data->next;		iounmap(data);	}
pa_data
pa_data
{		data = ioremap(pa_data, sizeof(*rom));		if (!data)			return -ENOMEM;		if (data->type == SETUP_PCI) {			rom = (struct pci_setup_rom *)data;			if ((pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function) &&			    (dev->vendor == rom->vendor) &&			    (dev->device == rom->devid)) {				dev->rom = pa_data +				      offsetof(struct pci_setup_rom, romdata);				dev->romlen = rom->pcilen;			}		}		pa_data = data->next;		iounmap(data);	}
data = ioremap(pa_data, sizeof(*rom));
data = ioremap(pa_data, sizeof(*rom))
data
data
ioremap(pa_data, sizeof(*rom))
ioremap
ioremap
pa_data
pa_data
sizeof(*rom)
(*rom)
*rom
rom
rom
if (!data)			return -ENOMEM;
!data
data
data
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
if (data->type == SETUP_PCI) {			rom = (struct pci_setup_rom *)data;			if ((pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function) &&			    (dev->vendor == rom->vendor) &&			    (dev->device == rom->devid)) {				dev->rom = pa_data +				      offsetof(struct pci_setup_rom, romdata);				dev->romlen = rom->pcilen;			}		}
data->type == SETUP_PCI
data->type
data
data
type
SETUP_PCI
SETUP_PCI
{			rom = (struct pci_setup_rom *)data;			if ((pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function) &&			    (dev->vendor == rom->vendor) &&			    (dev->device == rom->devid)) {				dev->rom = pa_data +				      offsetof(struct pci_setup_rom, romdata);				dev->romlen = rom->pcilen;			}		}
rom = (struct pci_setup_rom *)data;
rom = (struct pci_setup_rom *)data
rom
rom
(struct pci_setup_rom *)data
struct pci_setup_rom *
struct pci_setup_rom
pci_setup_rom
*
*
data
data
if ((pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function) &&			    (dev->vendor == rom->vendor) &&			    (dev->device == rom->devid)) {				dev->rom = pa_data +				      offsetof(struct pci_setup_rom, romdata);				dev->romlen = rom->pcilen;			}
(pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function) &&			    (dev->vendor == rom->vendor) &&			    (dev->device == rom->devid)
(pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function) &&			    (dev->vendor == rom->vendor)
(pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device) &&			    (PCI_FUNC(dev->devfn) == rom->function)
(pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus) &&			    (PCI_SLOT(dev->devfn) == rom->device)
(pci_domain_nr(dev->bus) == rom->segment) &&			    (dev->bus->number == rom->bus)
(pci_domain_nr(dev->bus) == rom->segment)
pci_domain_nr(dev->bus) == rom->segment
pci_domain_nr(dev->bus)
pci_domain_nr
pci_domain_nr
dev->bus
dev
dev
bus
rom->segment
rom
rom
segment
(dev->bus->number == rom->bus)
dev->bus->number == rom->bus
dev->bus->number
dev->bus
dev
dev
bus
number
rom->bus
rom
rom
bus
(PCI_SLOT(dev->devfn) == rom->device)
PCI_SLOT(dev->devfn) == rom->device
PCI_SLOT(dev->devfn)
PCI_SLOT
PCI_SLOT
dev->devfn
dev
dev
devfn
rom->device
rom
rom
device
(PCI_FUNC(dev->devfn) == rom->function)
PCI_FUNC(dev->devfn) == rom->function
PCI_FUNC(dev->devfn)
PCI_FUNC
PCI_FUNC
dev->devfn
dev
dev
devfn
rom->function
rom
rom
function
(dev->vendor == rom->vendor)
dev->vendor == rom->vendor
dev->vendor
dev
dev
vendor
rom->vendor
rom
rom
vendor
(dev->device == rom->devid)
dev->device == rom->devid
dev->device
dev
dev
device
rom->devid
rom
rom
devid
{				dev->rom = pa_data +				      offsetof(struct pci_setup_rom, romdata);				dev->romlen = rom->pcilen;			}
dev->rom = pa_data +				      offsetof(struct pci_setup_rom, romdata);
dev->romlen = rom->pcilen;
dev->romlen = rom->pcilen
dev->romlen
dev
dev
romlen
rom->pcilen
rom
rom
pcilen
pa_data = data->next;
pa_data = data->next
pa_data
pa_data
data->next
data
data
next
iounmap(data);
iounmap(data)
iounmap
iounmap
data
data
set_dma_domain_ops(dev);
set_dma_domain_ops(dev)
set_dma_domain_ops
set_dma_domain_ops
dev
dev
return 0;
0
-----joern-----
(42,15,0)
(12,2,0)
(6,14,0)
(93,38,0)
(12,110,0)
(91,55,0)
(5,40,0)
(63,75,0)
(102,49,0)
(20,18,0)
(37,101,0)
(89,6,0)
(96,14,0)
(112,37,0)
(7,16,0)
(39,98,0)
(36,98,0)
(41,101,0)
(68,92,0)
(78,6,0)
(10,42,0)
(1,69,0)
(57,10,0)
(39,67,0)
(45,95,0)
(36,100,0)
(69,2,0)
(41,2,0)
(70,78,0)
(82,24,0)
(72,0,0)
(48,69,0)
(73,49,0)
(76,9,0)
(38,93,0)
(9,86,0)
(106,26,0)
(64,27,0)
(107,26,0)
(76,93,0)
(93,42,0)
(22,27,0)
(97,4,0)
(4,101,0)
(11,36,0)
(59,101,0)
(3,78,0)
(26,106,0)
(95,45,0)
(8,74,0)
(38,110,0)
(21,0,0)
(103,84,0)
(51,75,0)
(100,89,0)
(56,39,0)
(69,98,0)
(75,63,0)
(9,85,0)
(84,4,0)
(28,86,0)
(79,89,0)
(88,4,0)
(42,93,0)
(17,92,0)
(46,84,0)
(78,100,0)
(92,17,0)
(2,12,0)
(15,55,0)
(86,9,0)
(2,41,0)
(95,73,0)
(44,63,0)
(52,14,0)
(29,15,0)
(61,45,0)
(33,14,0)
(100,14,0)
(108,47,0)
(17,66,0)
(73,95,0)
(89,75,0)
(99,86,0)
(94,45,0)
(98,32,0)
(74,107,0)
(25,106,0)
(71,18,0)
(35,36,0)
(26,107,0)
(93,76,0)
(84,40,0)
(75,40,0)
(53,55,0)
(85,0,0)
(110,12,0)
(96,100,0)
(24,16,0)
(12,22,0)
(46,47,0)
(67,89,0)
(13,74,0)
(59,40,0)
(55,15,0)
(63,18,0)
(42,10,0)
(90,10,0)
(110,38,0)
(109,6,0)
(80,40,0)
(58,92,0)
(0,101,0)
(65,96,0)
(87,32,0)
(67,39,0)
(30,27,0)
(18,63,0)
(98,36,0)
(95,38,0)
(45,98,0)
(4,17,0)
(22,37,0)
(50,40,0)
(74,101,0)
(43,40,0)
(106,98,0)
(89,100,0)
(104,108,0)
(89,67,0)
(27,22,0)
(85,9,0)
(2,69,0)
(19,106,0)
(0,85,0)
(62,16,0)
(49,101,0)
(92,98,0)
(55,101,0)
(110,26,0)
(16,100,0)
(10,98,0)
(107,74,0)
(49,73,0)
(23,100,0)
(31,23,0)
(60,98,0)
(27,98,0)
(54,49,0)
(16,24,0)
(47,4,0)
(86,98,0)
(77,37,0)
(83,41,0)
(37,22,0)
(111,41,0)
(6,78,0)
(26,110,0)
(34,59,0)
(15,42,0)
(22,12,0)
(36,35,0)
(38,95,0)
(81,100,0)
(9,76,0)
(100,89,1)
(108,104,1)
(91,9,1)
(94,61,1)
(77,112,1)
(49,54,1)
(61,73,1)
(60,24,1)
(84,4,1)
(13,8,1)
(9,85,1)
(86,99,1)
(29,55,1)
(16,62,1)
(96,65,1)
(53,91,1)
(8,95,1)
(112,26,1)
(36,100,1)
(109,24,1)
(99,28,1)
(36,35,1)
(25,19,1)
(68,58,1)
(20,71,1)
(12,22,1)
(23,100,1)
(38,95,1)
(58,4,1)
(46,84,1)
(7,23,1)
(37,101,1)
(63,44,1)
(54,102,1)
(56,79,1)
(42,15,1)
(98,36,1)
(18,20,1)
(1,41,1)
(11,60,1)
(15,29,1)
(48,1,1)
(103,59,1)
(45,94,1)
(76,9,1)
(70,3,1)
(107,74,1)
(0,72,1)
(41,111,1)
(16,100,1)
(15,55,1)
(93,38,1)
(74,101,1)
(65,6,1)
(92,68,1)
(2,41,1)
(102,42,1)
(97,88,1)
(17,92,1)
(88,76,1)
(10,90,1)
(84,103,1)
(26,107,1)
(78,70,1)
(49,101,1)
(63,18,1)
(34,105,1)
(9,86,1)
(95,73,1)
(27,98,1)
(37,77,1)
(39,98,1)
(85,0,1)
(81,105,1)
(24,16,1)
(22,37,1)
(0,101,1)
(72,21,1)
(111,83,1)
(59,34,1)
(89,6,1)
(79,81,1)
(59,101,1)
(83,22,1)
(89,67,1)
(36,11,1)
(2,69,1)
(4,97,1)
(57,15,1)
(42,10,1)
(82,16,1)
(109,76,1)
(45,98,1)
(26,106,1)
(62,7,1)
(110,12,1)
(27,64,1)
(31,100,1)
(30,37,1)
(41,101,1)
(109,17,1)
(69,48,1)
(22,27,1)
(55,101,1)
(19,107,1)
(93,42,1)
(104,23,1)
(21,98,1)
(78,100,1)
(3,109,1)
(105,75,1)
(28,85,1)
(47,108,1)
(10,98,1)
(12,2,1)
(67,39,1)
(23,31,1)
(90,57,1)
(75,63,1)
(74,13,1)
(24,82,1)
(95,45,1)
(55,53,1)
(89,75,1)
(46,47,1)
(106,98,1)
(39,56,1)
(71,51,1)
(106,25,1)
(96,100,1)
(110,26,1)
(69,98,1)
(73,49,1)
(64,30,1)
(38,110,1)
(47,4,1)
(44,18,1)
(6,78,1)
(4,101,1)
(86,98,1)
(76,93,1)
(105,96,1)
(92,98,1)
(110,26,2)
(102,42,2)
(0,101,2)
(77,26,2)
(4,76,2)
(104,23,2)
(38,42,2)
(23,105,2)
(67,105,2)
(19,95,2)
(84,4,2)
(0,24,2)
(26,107,2)
(27,26,2)
(49,101,2)
(28,24,2)
(106,98,2)
(8,95,2)
(89,75,2)
(85,0,2)
(89,105,2)
(110,12,2)
(64,26,2)
(76,93,2)
(7,23,2)
(111,22,2)
(93,38,2)
(76,9,2)
(92,76,2)
(81,105,2)
(22,37,2)
(16,100,2)
(16,23,2)
(98,24,2)
(41,22,2)
(15,9,2)
(73,49,2)
(22,27,2)
(2,69,2)
(4,101,2)
(54,42,2)
(26,95,2)
(47,23,2)
(17,76,2)
(103,105,2)
(83,22,2)
(3,23,2)
(29,9,2)
(38,95,2)
(9,85,2)
(48,22,2)
(93,9,2)
(45,42,2)
(60,24,2)
(97,76,2)
(94,42,2)
(74,95,2)
(107,95,2)
(9,86,2)
(69,22,2)
(56,105,2)
(106,95,2)
(13,95,2)
(42,10,2)
(41,101,2)
(70,23,2)
(59,101,2)
(30,26,2)
(69,98,2)
(88,76,2)
(76,24,2)
(46,84,2)
(75,63,2)
(39,105,2)
(25,95,2)
(1,22,2)
(24,23,2)
(37,26,2)
(98,36,2)
(62,23,2)
(95,73,2)
(6,23,2)
(9,24,2)
(58,76,2)
(96,23,2)
(89,6,2)
(11,24,2)
(55,101,2)
(68,76,2)
(84,105,2)
(86,98,2)
(12,22,2)
(74,101,2)
(105,23,2)
(21,24,2)
(10,98,2)
(78,100,2)
(107,74,2)
(15,55,2)
(95,42,2)
(26,106,2)
(53,9,2)
(108,23,2)
(34,105,2)
(55,9,2)
(110,95,2)
(38,110,2)
(42,9,2)
(57,9,2)
(78,23,2)
(61,42,2)
(59,105,2)
(31,105,2)
(39,98,2)
(63,18,2)
(90,9,2)
(12,2,2)
(100,89,2)
(47,4,2)
(49,42,2)
(99,24,2)
(91,9,2)
(82,23,2)
(85,24,2)
(27,98,2)
(93,42,2)
(96,100,2)
(86,24,2)
(65,23,2)
(73,42,2)
(6,78,2)
(112,26,2)
(100,105,2)
(24,16,2)
(2,41,2)
(2,22,2)
(92,98,2)
(72,24,2)
(22,26,2)
(79,105,2)
(37,101,2)
(109,23,2)
(95,45,2)
(36,24,2)
(89,67,2)
(46,47,2)
(17,92,2)
(10,9,2)
(67,39,2)
(42,15,2)
(23,100,2)
(36,100,2)
(12,26,2)
(45,98,2)
(36,35,2)
-----------------------------------
(0,dev->bus)
(1,rom)
(2,dev->device == rom->devid)
(3,data)
(4,dev->romlen)
(5,while (pa_data)
(6,pa_data = data->next)
(7,data)
(8,dev)
(9,pci_domain_nr(dev->bus)
(10,rom->bus)
(11,data)
(12,(dev->vendor == rom->vendor)
(13,devfn)
(14,)
(15,dev->bus->number)
(16,data->type)
(17,dev->romlen = rom->pcilen)
(18,boot_params.hdr)
(19,rom)
(20,hdr)
(21,dev)
(22,dev->vendor == rom->vendor)
(23,!data)
(24,data->type == SETUP_PCI)
(25,function)
(26,PCI_FUNC(dev->devfn)
(27,rom->vendor)
(28,rom)
(29,number)
(30,rom)
(31,data)
(32,)
(33,if (data->type == SETUP_PCI)
(34,dev)
(35,struct pci_setup_rom *)
(36,(struct pci_setup_rom *)
(37,dev->vendor)
(38,(PCI_SLOT(dev->devfn)
(39,*rom)
(40,)
(41,dev->device)
(42,dev->bus->number == rom->bus)
(43,rom)
(44,setup_data)
(45,rom->device)
(46,RET)
(47,return -ENOMEM;)
(48,devid)
(49,dev->devfn)
(50,data)
(51,pa_data)
(52,if (!data)
(53,bus)
(54,devfn)
(55,dev->bus)
(56,rom)
(57,rom)
(58,rom)
(59,set_dma_domain_ops(dev)
(60,rom)
(61,rom)
(62,type)
(63,boot_params.hdr.setup_data)
(64,vendor)
(65,data)
(66,)
(67,sizeof(*rom)
(68,pcilen)
(69,rom->devid)
(70,next)
(71,boot_params)
(72,bus)
(73,PCI_SLOT(dev->devfn)
(74,dev->devfn)
(75,pa_data = boot_params.hdr.setup_data)
(76,(pci_domain_nr(dev->bus)
(77,vendor)
(78,data->next)
(79,pa_data)
(80,pa_data)
(81,data)
(82,SETUP_PCI)
(83,dev)
(84,return 0;)
(85,pci_domain_nr(dev->bus)
(86,rom->segment)
(87,if ((pci_domain_nr(dev->bus)
(88,dev)
(89,ioremap(pa_data, sizeof(*rom)
(90,bus)
(91,dev)
(92,rom->pcilen)
(93,(dev->bus->number == rom->bus)
(94,device)
(95,PCI_SLOT(dev->devfn)
(96,iounmap(data)
(97,romlen)
(98,rom = (struct pci_setup_rom *)
(99,segment)
(100,data = ioremap(pa_data, sizeof(*rom)
(101,struct pci_dev *dev)
(102,dev)
(103,0)
(104,ENOMEM)
(105,pa_data)
(106,rom->function)
(107,PCI_FUNC(dev->devfn)
(108,-ENOMEM)
(109,pa_data)
(110,(PCI_FUNC(dev->devfn)
(111,device)
(112,dev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^