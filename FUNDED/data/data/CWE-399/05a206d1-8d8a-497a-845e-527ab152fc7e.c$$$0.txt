-----label-----
1
-----code-----
struct ahci_host_priv *ahci_platform_get_resources(struct platform_device *pdev)
{
	struct device *dev = &pdev->dev;
	struct ahci_host_priv *hpriv;
	struct clk *clk;
	int i, rc = -ENOMEM;

	if (!devres_open_group(dev, NULL, GFP_KERNEL))
		return ERR_PTR(-ENOMEM);

	hpriv = devres_alloc(ahci_platform_put_resources, sizeof(*hpriv),
			     GFP_KERNEL);
	if (!hpriv)
		goto err_out;

	devres_add(dev, hpriv);

	hpriv->mmio = devm_ioremap_resource(dev,
			      platform_get_resource(pdev, IORESOURCE_MEM, 0));
	if (IS_ERR(hpriv->mmio)) {
		dev_err(dev, "no mmio space\n");
		rc = PTR_ERR(hpriv->mmio);
		goto err_out;
	}

	hpriv->target_pwr = devm_regulator_get_optional(dev, "target");
	if (IS_ERR(hpriv->target_pwr)) {
		rc = PTR_ERR(hpriv->target_pwr);
		if (rc == -EPROBE_DEFER)
			goto err_out;
		hpriv->target_pwr = NULL;
	}

	for (i = 0; i < AHCI_MAX_CLKS; i++) {
		/*
		 * For now we must use clk_get(dev, NULL) for the first clock,
		 * because some platforms (da850, spear13xx) are not yet
		 * converted to use devicetree for clocks.  For new platforms
		 * this is equivalent to of_clk_get(dev->of_node, 0).
		 */
		if (i == 0)
			clk = clk_get(dev, NULL);
		else
			clk = of_clk_get(dev->of_node, i);

		if (IS_ERR(clk)) {
			rc = PTR_ERR(clk);
			if (rc == -EPROBE_DEFER)
				goto err_out;
			break;
		}
		hpriv->clks[i] = clk;
	}

	hpriv->phy = devm_phy_get(dev, "sata-phy");
	if (IS_ERR(hpriv->phy)) {
		rc = PTR_ERR(hpriv->phy);
		switch (rc) {
		case -ENOSYS:
			/* No PHY support. Check if PHY is required. */
			if (of_find_property(dev->of_node, "phys", NULL)) {
				dev_err(dev, "couldn't get sata-phy: ENOSYS\n");
				goto err_out;
			}
		case -ENODEV:
			/* continue normally */
			hpriv->phy = NULL;
			break;

		case -EPROBE_DEFER:
			goto err_out;

		default:
			dev_err(dev, "couldn't get sata-phy\n");
			goto err_out;
		}
	}

	pm_runtime_enable(dev);
	pm_runtime_get_sync(dev);
	hpriv->got_runtime_pm = true;

	devres_remove_group(dev, NULL);
	return hpriv;

err_out:
	devres_release_group(dev, NULL);
	return ERR_PTR(rc);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
13,20
13,21
13,22
13,23
13,24
13,25
13,26
13,27
13,28
13,29
13,30
13,31
13,32
13,33
13,34
13,35
14,15
15,16
15,17
16,17
18,19
18,20
18,21
21,22
22,23
23,24
23,25
24,25
27,28
28,29
28,30
29,30
31,32
31,33
34,35
35,36
35,37
36,37
38,39
38,40
41,42
42,43
42,44
42,45
44,45
46,47
46,48
48,49
49,50
50,51
52,53
52,54
53,54
54,55
54,56
54,57
54,58
55,56
57,58
59,60
61,62
63,64
64,65
64,66
65,66
67,68
68,69
70,71
71,72
71,73
72,73
74,75
74,76
74,77
74,78
75,76
77,78
79,80
80,81
81,82
82,83
84,85
86,87
86,88
87,88
88,89
90,91
92,93
93,94
93,95
93,96
94,95
96,97
98,99
100,101
101,102
101,103
102,103
102,104
103,104
106,107
106,108
106,109
107,108
109,110
111,112
111,113
111,114
111,115
112,113
114,115
116,117
119,120
119,121
120,121
120,122
121,122
123,124
123,125
124,125
127,128
127,129
127,130
128,129
129,130
129,131
129,132
130,131
132,133
135,136
136,137
136,138
137,138
139,140
139,141
140,141
142,143
142,144
143,144
146,147
148,149
149,150
149,151
150,151
150,152
151,152
154,155
154,156
154,157
155,156
157,158
160,161
160,162
161,162
161,163
162,163
164,165
164,166
165,166
168,169
168,170
168,171
169,170
170,171
170,172
171,172
173,174
173,175
174,175
176,177
176,178
177,178
180,181
180,182
181,182
181,183
182,183
184,185
185,186
187,188
189,190
190,191
190,192
191,192
191,193
192,193
195,196
197,198
197,199
197,200
197,201
198,199
199,200
199,201
200,201
203,204
203,205
204,205
206,207
208,209
209,210
211,212
211,213
211,214
212,213
212,214
212,215
213,214
213,215
214,215
217,218
218,219
218,220
219,220
221,222
221,223
221,224
222,223
224,225
226,227
228,229
229,230
229,231
230,231
232,233
232,234
232,235
233,234
235,236
235,237
236,237
239,240
241,242
241,243
242,243
242,244
243,244
245,246
247,248
247,249
247,250
248,249
249,250
249,251
250,251
252,253
252,254
253,254
255,256
257,258
257,259
258,259
258,260
259,260
261,262
262,263
264,265
267,268
268,269
268,270
269,270
269,271
270,271
270,272
271,272
274,275
276,277
278,279
279,280
279,281
280,281
280,282
281,282
284,285
284,286
284,287
285,286
287,288
290,291
290,292
291,292
291,293
292,293
294,295
294,296
295,296
298,299
298,300
299,300
300,301
300,302
301,302
303,304
303,305
304,305
306,307
306,308
307,308
310,311
310,312
311,312
313,314
313,315
313,316
313,317
313,318
313,319
313,320
313,321
313,322
313,323
314,315
315,316
316,317
318,319
318,320
319,320
319,321
319,322
319,323
320,321
322,323
322,324
323,324
327,328
329,330
329,331
330,331
331,332
331,333
331,334
332,333
334,335
337,338
339,340
340,341
341,342
343,344
344,345
344,346
345,346
345,347
346,347
349,350
352,353
353,354
354,355
356,357
359,360
360,361
360,362
360,363
361,362
363,364
366,367
368,369
369,370
369,371
370,371
372,373
374,375
375,376
375,377
376,377
378,379
380,381
381,382
381,383
382,383
382,384
383,384
387,388
388,389
388,390
388,391
389,390
391,392
393,394
395,396
396,397
398,399
398,400
400,401
401,402
401,403
401,404
402,403
404,405
406,407
408,409
409,410
409,411
410,411
412,413
-----nextToken-----
3,5,6,9,11,12,17,19,20,25,26,30,32,33,37,39,40,43,45,47,51,56,58,60,62,66,69,73,76,78,83,85,89,91,95,97,99,104,105,108,110,113,115,117,118,122,125,126,131,133,134,138,141,144,145,147,152,153,156,158,159,163,166,167,172,175,178,179,183,186,188,193,194,196,201,202,205,207,210,215,216,220,223,225,227,231,234,237,238,240,244,246,251,254,256,260,263,265,266,272,273,275,277,282,283,286,288,289,293,296,297,302,305,308,309,312,317,321,324,325,326,328,333,335,336,338,342,347,348,350,351,355,357,358,362,364,365,367,371,373,377,379,384,385,386,390,392,394,397,399,403,405,407,411,413
-----computeFrom-----
71,72
71,73
101,102
101,103
136,137
136,138
149,150
149,151
170,171
170,172
181,182
181,183
190,191
190,192
199,200
199,201
203,204
203,205
213,214
213,215
218,219
218,220
229,230
229,231
249,250
249,251
258,259
258,260
268,269
268,270
279,280
279,281
300,301
300,302
344,345
344,346
381,382
381,383
-----guardedBy-----
-----guardedByNegation-----
215,240
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;BreakStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;SwitchStatement;IdExpression;Name;CompoundStatement;CaseStatement;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;CaseStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
struct ahci_host_priv *ahci_platform_get_resources(struct platform_device *pdev){	struct device *dev = &pdev->dev;	struct ahci_host_priv *hpriv;	struct clk *clk;	int i, rc = -ENOMEM;	if (!devres_open_group(dev, NULL, GFP_KERNEL))		return ERR_PTR(-ENOMEM);	hpriv = devres_alloc(ahci_platform_put_resources, sizeof(*hpriv),			     GFP_KERNEL);	if (!hpriv)		goto err_out;	devres_add(dev, hpriv);	hpriv->mmio = devm_ioremap_resource(dev,			      platform_get_resource(pdev, IORESOURCE_MEM, 0));	if (IS_ERR(hpriv->mmio)) {		dev_err(dev, "no mmio space\n");		rc = PTR_ERR(hpriv->mmio);		goto err_out;	}	hpriv->target_pwr = devm_regulator_get_optional(dev, "target");	if (IS_ERR(hpriv->target_pwr)) {		rc = PTR_ERR(hpriv->target_pwr);		if (rc == -EPROBE_DEFER)			goto err_out;		hpriv->target_pwr = NULL;	}	for (i = 0; i < AHCI_MAX_CLKS; i++) {		/*		 * For now we must use clk_get(dev, NULL) for the first clock,		 * because some platforms (da850, spear13xx) are not yet		 * converted to use devicetree for clocks.  For new platforms		 * this is equivalent to of_clk_get(dev->of_node, 0).		 */		if (i == 0)			clk = clk_get(dev, NULL);		else			clk = of_clk_get(dev->of_node, i);		if (IS_ERR(clk)) {			rc = PTR_ERR(clk);			if (rc == -EPROBE_DEFER)				goto err_out;			break;		}		hpriv->clks[i] = clk;	}	hpriv->phy = devm_phy_get(dev, "sata-phy");	if (IS_ERR(hpriv->phy)) {		rc = PTR_ERR(hpriv->phy);		switch (rc) {		case -ENOSYS:			/* No PHY support. Check if PHY is required. */			if (of_find_property(dev->of_node, "phys", NULL)) {				dev_err(dev, "couldn't get sata-phy: ENOSYS\n");				goto err_out;			}		case -ENODEV:			/* continue normally */			hpriv->phy = NULL;			break;		case -EPROBE_DEFER:			goto err_out;		default:			dev_err(dev, "couldn't get sata-phy\n");			goto err_out;		}	}	pm_runtime_enable(dev);	pm_runtime_get_sync(dev);	hpriv->got_runtime_pm = true;	devres_remove_group(dev, NULL);	return hpriv;err_out:	devres_release_group(dev, NULL);	return ERR_PTR(rc);}
struct ahci_host_priv
ahci_host_priv
*ahci_platform_get_resources(struct platform_device *pdev)
*
ahci_platform_get_resources
struct platform_device *pdev
struct platform_device
platform_device
*pdev
*
pdev
{	struct device *dev = &pdev->dev;	struct ahci_host_priv *hpriv;	struct clk *clk;	int i, rc = -ENOMEM;	if (!devres_open_group(dev, NULL, GFP_KERNEL))		return ERR_PTR(-ENOMEM);	hpriv = devres_alloc(ahci_platform_put_resources, sizeof(*hpriv),			     GFP_KERNEL);	if (!hpriv)		goto err_out;	devres_add(dev, hpriv);	hpriv->mmio = devm_ioremap_resource(dev,			      platform_get_resource(pdev, IORESOURCE_MEM, 0));	if (IS_ERR(hpriv->mmio)) {		dev_err(dev, "no mmio space\n");		rc = PTR_ERR(hpriv->mmio);		goto err_out;	}	hpriv->target_pwr = devm_regulator_get_optional(dev, "target");	if (IS_ERR(hpriv->target_pwr)) {		rc = PTR_ERR(hpriv->target_pwr);		if (rc == -EPROBE_DEFER)			goto err_out;		hpriv->target_pwr = NULL;	}	for (i = 0; i < AHCI_MAX_CLKS; i++) {		/*		 * For now we must use clk_get(dev, NULL) for the first clock,		 * because some platforms (da850, spear13xx) are not yet		 * converted to use devicetree for clocks.  For new platforms		 * this is equivalent to of_clk_get(dev->of_node, 0).		 */		if (i == 0)			clk = clk_get(dev, NULL);		else			clk = of_clk_get(dev->of_node, i);		if (IS_ERR(clk)) {			rc = PTR_ERR(clk);			if (rc == -EPROBE_DEFER)				goto err_out;			break;		}		hpriv->clks[i] = clk;	}	hpriv->phy = devm_phy_get(dev, "sata-phy");	if (IS_ERR(hpriv->phy)) {		rc = PTR_ERR(hpriv->phy);		switch (rc) {		case -ENOSYS:			/* No PHY support. Check if PHY is required. */			if (of_find_property(dev->of_node, "phys", NULL)) {				dev_err(dev, "couldn't get sata-phy: ENOSYS\n");				goto err_out;			}		case -ENODEV:			/* continue normally */			hpriv->phy = NULL;			break;		case -EPROBE_DEFER:			goto err_out;		default:			dev_err(dev, "couldn't get sata-phy\n");			goto err_out;		}	}	pm_runtime_enable(dev);	pm_runtime_get_sync(dev);	hpriv->got_runtime_pm = true;	devres_remove_group(dev, NULL);	return hpriv;err_out:	devres_release_group(dev, NULL);	return ERR_PTR(rc);}
struct device *dev = &pdev->dev;
struct device *dev = &pdev->dev;
struct device
device
*dev = &pdev->dev
*
dev
= &pdev->dev
&pdev->dev
pdev->dev
pdev
pdev
dev
struct ahci_host_priv *hpriv;
struct ahci_host_priv *hpriv;
struct ahci_host_priv
ahci_host_priv
*hpriv
*
hpriv
struct clk *clk;
struct clk *clk;
struct clk
clk
*clk
*
clk
int i, rc = -ENOMEM;
int i, rc = -ENOMEM;
int
i
i
rc = -ENOMEM
rc
= -ENOMEM
-ENOMEM
ENOMEM
ENOMEM
if (!devres_open_group(dev, NULL, GFP_KERNEL))		return ERR_PTR(-ENOMEM);
!devres_open_group(dev, NULL, GFP_KERNEL)
devres_open_group(dev, NULL, GFP_KERNEL)
devres_open_group
devres_open_group
dev
dev
NULL
NULL
GFP_KERNEL
GFP_KERNEL
return ERR_PTR(-ENOMEM);
ERR_PTR(-ENOMEM)
ERR_PTR
ERR_PTR
-ENOMEM
ENOMEM
ENOMEM
hpriv = devres_alloc(ahci_platform_put_resources, sizeof(*hpriv),			     GFP_KERNEL);
hpriv = devres_alloc(ahci_platform_put_resources, sizeof(*hpriv),			     GFP_KERNEL)
hpriv
hpriv
devres_alloc(ahci_platform_put_resources, sizeof(*hpriv),			     GFP_KERNEL)
devres_alloc
devres_alloc
ahci_platform_put_resources
ahci_platform_put_resources
sizeof(*hpriv)
(*hpriv)
*hpriv
hpriv
hpriv
GFP_KERNEL
GFP_KERNEL
if (!hpriv)		goto err_out;
!hpriv
hpriv
hpriv
goto err_out;
err_out
devres_add(dev, hpriv);
devres_add(dev, hpriv)
devres_add
devres_add
dev
dev
hpriv
hpriv
hpriv->mmio = devm_ioremap_resource(dev,			      platform_get_resource(pdev, IORESOURCE_MEM, 0));
hpriv->mmio = devm_ioremap_resource(dev,			      platform_get_resource(pdev, IORESOURCE_MEM, 0))
hpriv->mmio
hpriv
hpriv
mmio
devm_ioremap_resource(dev,			      platform_get_resource(pdev, IORESOURCE_MEM, 0))
devm_ioremap_resource
devm_ioremap_resource
dev
dev
platform_get_resource(pdev, IORESOURCE_MEM, 0)
platform_get_resource
platform_get_resource
pdev
pdev
IORESOURCE_MEM
IORESOURCE_MEM
0
if (IS_ERR(hpriv->mmio)) {		dev_err(dev, "no mmio space\n");		rc = PTR_ERR(hpriv->mmio);		goto err_out;	}
IS_ERR(hpriv->mmio)
IS_ERR
IS_ERR
hpriv->mmio
hpriv
hpriv
mmio
{		dev_err(dev, "no mmio space\n");		rc = PTR_ERR(hpriv->mmio);		goto err_out;	}
dev_err(dev, "no mmio space\n");
dev_err(dev, "no mmio space\n")
dev_err
dev_err
dev
dev
"no mmio space\n"
rc = PTR_ERR(hpriv->mmio);
rc = PTR_ERR(hpriv->mmio)
rc
rc
PTR_ERR(hpriv->mmio)
PTR_ERR
PTR_ERR
hpriv->mmio
hpriv
hpriv
mmio
goto err_out;
err_out
hpriv->target_pwr = devm_regulator_get_optional(dev, "target");
hpriv->target_pwr = devm_regulator_get_optional(dev, "target")
hpriv->target_pwr
hpriv
hpriv
target_pwr
devm_regulator_get_optional(dev, "target")
devm_regulator_get_optional
devm_regulator_get_optional
dev
dev
"target"
if (IS_ERR(hpriv->target_pwr)) {		rc = PTR_ERR(hpriv->target_pwr);		if (rc == -EPROBE_DEFER)			goto err_out;		hpriv->target_pwr = NULL;	}
IS_ERR(hpriv->target_pwr)
IS_ERR
IS_ERR
hpriv->target_pwr
hpriv
hpriv
target_pwr
{		rc = PTR_ERR(hpriv->target_pwr);		if (rc == -EPROBE_DEFER)			goto err_out;		hpriv->target_pwr = NULL;	}
rc = PTR_ERR(hpriv->target_pwr);
rc = PTR_ERR(hpriv->target_pwr)
rc
rc
PTR_ERR(hpriv->target_pwr)
PTR_ERR
PTR_ERR
hpriv->target_pwr
hpriv
hpriv
target_pwr
if (rc == -EPROBE_DEFER)			goto err_out;
rc == -EPROBE_DEFER
rc
rc
-EPROBE_DEFER
EPROBE_DEFER
EPROBE_DEFER
goto err_out;
err_out
hpriv->target_pwr = NULL;
hpriv->target_pwr = NULL
hpriv->target_pwr
hpriv
hpriv
target_pwr
NULL
NULL
for (i = 0; i < AHCI_MAX_CLKS; i++) {		/*		 * For now we must use clk_get(dev, NULL) for the first clock,		 * because some platforms (da850, spear13xx) are not yet		 * converted to use devicetree for clocks.  For new platforms		 * this is equivalent to of_clk_get(dev->of_node, 0).		 */		if (i == 0)			clk = clk_get(dev, NULL);		else			clk = of_clk_get(dev->of_node, i);		if (IS_ERR(clk)) {			rc = PTR_ERR(clk);			if (rc == -EPROBE_DEFER)				goto err_out;			break;		}		hpriv->clks[i] = clk;	}
i = 0;
i = 0
i
i
0
i < AHCI_MAX_CLKS
i
i
AHCI_MAX_CLKS
AHCI_MAX_CLKS
i++
i
i
{		/*		 * For now we must use clk_get(dev, NULL) for the first clock,		 * because some platforms (da850, spear13xx) are not yet		 * converted to use devicetree for clocks.  For new platforms		 * this is equivalent to of_clk_get(dev->of_node, 0).		 */		if (i == 0)			clk = clk_get(dev, NULL);		else			clk = of_clk_get(dev->of_node, i);		if (IS_ERR(clk)) {			rc = PTR_ERR(clk);			if (rc == -EPROBE_DEFER)				goto err_out;			break;		}		hpriv->clks[i] = clk;	}
if (i == 0)			clk = clk_get(dev, NULL);		else			clk = of_clk_get(dev->of_node, i);
i == 0
i
i
0
clk = clk_get(dev, NULL);
clk = clk_get(dev, NULL)
clk
clk
clk_get(dev, NULL)
clk_get
clk_get
dev
dev
NULL
NULL
clk = of_clk_get(dev->of_node, i);
clk = of_clk_get(dev->of_node, i)
clk
clk
of_clk_get(dev->of_node, i)
of_clk_get
of_clk_get
dev->of_node
dev
dev
of_node
i
i
if (IS_ERR(clk)) {			rc = PTR_ERR(clk);			if (rc == -EPROBE_DEFER)				goto err_out;			break;		}
IS_ERR(clk)
IS_ERR
IS_ERR
clk
clk
{			rc = PTR_ERR(clk);			if (rc == -EPROBE_DEFER)				goto err_out;			break;		}
rc = PTR_ERR(clk);
rc = PTR_ERR(clk)
rc
rc
PTR_ERR(clk)
PTR_ERR
PTR_ERR
clk
clk
if (rc == -EPROBE_DEFER)				goto err_out;
rc == -EPROBE_DEFER
rc
rc
-EPROBE_DEFER
EPROBE_DEFER
EPROBE_DEFER
goto err_out;
err_out
break;
hpriv->clks[i] = clk;
hpriv->clks[i] = clk
hpriv->clks[i]
hpriv->clks
hpriv
hpriv
clks
i
i
clk
clk
hpriv->phy = devm_phy_get(dev, "sata-phy");
hpriv->phy = devm_phy_get(dev, "sata-phy")
hpriv->phy
hpriv
hpriv
phy
devm_phy_get(dev, "sata-phy")
devm_phy_get
devm_phy_get
dev
dev
"sata-phy"
if (IS_ERR(hpriv->phy)) {		rc = PTR_ERR(hpriv->phy);		switch (rc) {		case -ENOSYS:			/* No PHY support. Check if PHY is required. */			if (of_find_property(dev->of_node, "phys", NULL)) {				dev_err(dev, "couldn't get sata-phy: ENOSYS\n");				goto err_out;			}		case -ENODEV:			/* continue normally */			hpriv->phy = NULL;			break;		case -EPROBE_DEFER:			goto err_out;		default:			dev_err(dev, "couldn't get sata-phy\n");			goto err_out;		}	}
IS_ERR(hpriv->phy)
IS_ERR
IS_ERR
hpriv->phy
hpriv
hpriv
phy
{		rc = PTR_ERR(hpriv->phy);		switch (rc) {		case -ENOSYS:			/* No PHY support. Check if PHY is required. */			if (of_find_property(dev->of_node, "phys", NULL)) {				dev_err(dev, "couldn't get sata-phy: ENOSYS\n");				goto err_out;			}		case -ENODEV:			/* continue normally */			hpriv->phy = NULL;			break;		case -EPROBE_DEFER:			goto err_out;		default:			dev_err(dev, "couldn't get sata-phy\n");			goto err_out;		}	}
rc = PTR_ERR(hpriv->phy);
rc = PTR_ERR(hpriv->phy)
rc
rc
PTR_ERR(hpriv->phy)
PTR_ERR
PTR_ERR
hpriv->phy
hpriv
hpriv
phy
switch (rc) {		case -ENOSYS:			/* No PHY support. Check if PHY is required. */			if (of_find_property(dev->of_node, "phys", NULL)) {				dev_err(dev, "couldn't get sata-phy: ENOSYS\n");				goto err_out;			}		case -ENODEV:			/* continue normally */			hpriv->phy = NULL;			break;		case -EPROBE_DEFER:			goto err_out;		default:			dev_err(dev, "couldn't get sata-phy\n");			goto err_out;		}
rc
rc
{		case -ENOSYS:			/* No PHY support. Check if PHY is required. */			if (of_find_property(dev->of_node, "phys", NULL)) {				dev_err(dev, "couldn't get sata-phy: ENOSYS\n");				goto err_out;			}		case -ENODEV:			/* continue normally */			hpriv->phy = NULL;			break;		case -EPROBE_DEFER:			goto err_out;		default:			dev_err(dev, "couldn't get sata-phy\n");			goto err_out;		}
case -ENOSYS:
-ENOSYS
ENOSYS
ENOSYS
if (of_find_property(dev->of_node, "phys", NULL)) {				dev_err(dev, "couldn't get sata-phy: ENOSYS\n");				goto err_out;			}
of_find_property(dev->of_node, "phys", NULL)
of_find_property
of_find_property
dev->of_node
dev
dev
of_node
"phys"
NULL
NULL
{				dev_err(dev, "couldn't get sata-phy: ENOSYS\n");				goto err_out;			}
dev_err(dev, "couldn't get sata-phy: ENOSYS\n");
dev_err(dev, "couldn't get sata-phy: ENOSYS\n")
dev_err
dev_err
dev
dev
"couldn't get sata-phy: ENOSYS\n"
goto err_out;
err_out
case -ENODEV:
-ENODEV
ENODEV
ENODEV
hpriv->phy = NULL;
hpriv->phy = NULL
hpriv->phy
hpriv
hpriv
phy
NULL
NULL
break;
case -EPROBE_DEFER:
-EPROBE_DEFER
EPROBE_DEFER
EPROBE_DEFER
goto err_out;
err_out
default:
dev_err(dev, "couldn't get sata-phy\n");
dev_err(dev, "couldn't get sata-phy\n")
dev_err
dev_err
dev
dev
"couldn't get sata-phy\n"
goto err_out;
err_out
pm_runtime_enable(dev);
pm_runtime_enable(dev)
pm_runtime_enable
pm_runtime_enable
dev
dev
pm_runtime_get_sync(dev);
pm_runtime_get_sync(dev)
pm_runtime_get_sync
pm_runtime_get_sync
dev
dev
hpriv->got_runtime_pm = true;
hpriv->got_runtime_pm = true
hpriv->got_runtime_pm
hpriv
hpriv
got_runtime_pm
true
devres_remove_group(dev, NULL);
devres_remove_group(dev, NULL)
devres_remove_group
devres_remove_group
dev
dev
NULL
NULL
return hpriv;
hpriv
hpriv
err_out:	devres_release_group(dev, NULL);
err_out
devres_release_group(dev, NULL);
devres_release_group(dev, NULL)
devres_release_group
devres_release_group
dev
dev
NULL
NULL
return ERR_PTR(rc);
ERR_PTR(rc)
ERR_PTR
ERR_PTR
rc
rc
-----joern-----
(21,158,0)
(141,107,0)
(214,209,0)
(175,141,0)
(71,187,0)
(0,29,0)
(162,207,0)
(109,215,0)
(29,124,0)
(182,206,0)
(31,27,0)
(207,77,0)
(139,212,0)
(155,65,0)
(168,72,0)
(128,107,0)
(64,161,0)
(15,215,0)
(29,61,0)
(85,36,0)
(4,163,0)
(177,41,0)
(34,146,0)
(49,136,0)
(196,55,0)
(127,201,0)
(93,74,0)
(60,42,0)
(79,88,0)
(16,200,0)
(145,16,0)
(206,42,0)
(20,97,0)
(35,52,0)
(30,179,0)
(45,34,0)
(124,42,0)
(16,163,0)
(193,112,0)
(200,128,0)
(183,205,0)
(117,53,0)
(50,214,0)
(16,193,0)
(19,164,0)
(166,92,0)
(91,201,0)
(89,77,0)
(130,124,0)
(148,171,0)
(203,155,0)
(164,36,0)
(121,72,0)
(133,103,0)
(25,130,0)
(101,187,0)
(213,103,0)
(95,177,0)
(197,128,0)
(170,42,0)
(53,161,0)
(115,74,0)
(119,200,0)
(208,209,0)
(17,195,0)
(27,31,0)
(215,15,0)
(150,205,0)
(48,205,0)
(214,124,0)
(147,27,0)
(174,85,0)
(161,53,0)
(60,36,0)
(75,33,0)
(6,171,0)
(26,214,0)
(187,124,0)
(159,34,0)
(202,195,0)
(176,62,0)
(40,142,0)
(201,81,0)
(212,36,0)
(84,196,0)
(119,206,0)
(85,205,0)
(171,148,0)
(83,205,0)
(141,124,0)
(5,43,0)
(92,65,0)
(59,142,0)
(90,43,0)
(13,100,0)
(179,22,0)
(33,75,0)
(130,146,0)
(172,59,0)
(56,121,0)
(109,209,0)
(126,134,0)
(3,29,0)
(180,42,0)
(190,87,0)
(38,75,0)
(186,31,0)
(164,107,0)
(108,124,0)
(204,68,0)
(209,42,0)
(74,68,0)
(151,205,0)
(39,141,0)
(146,42,0)
(107,42,0)
(193,175,0)
(77,207,0)
(22,179,0)
(94,122,0)
(157,85,0)
(32,60,0)
(43,5,0)
(1,42,0)
(68,103,0)
(8,152,0)
(18,22,0)
(185,178,0)
(68,74,0)
(163,134,0)
(179,190,0)
(44,212,0)
(216,133,0)
(215,109,0)
(109,124,0)
(46,109,0)
(192,170,0)
(141,175,0)
(171,146,0)
(79,65,0)
(175,193,0)
(113,53,0)
(82,75,0)
(187,36,0)
(195,103,0)
(161,209,0)
(21,57,0)
(206,124,0)
(167,87,0)
(16,121,0)
(105,208,0)
(125,205,0)
(165,100,0)
(121,61,0)
(200,31,0)
(155,36,0)
(92,142,0)
(177,124,0)
(187,42,0)
(100,13,0)
(137,112,0)
(123,190,0)
(200,130,0)
(63,36,0)
(199,205,0)
(77,121,0)
(140,42,0)
(62,178,0)
(152,42,0)
(116,136,0)
(161,36,0)
(37,42,0)
(66,177,0)
(36,42,0)
(31,103,0)
(65,155,0)
(75,124,0)
(188,65,0)
(34,36,0)
(194,43,0)
(122,136,0)
(212,44,0)
(114,42,0)
(129,57,0)
(47,15,0)
(102,87,0)
(156,103,0)
(169,42,0)
(57,21,0)
(59,65,0)
(128,124,0)
(14,196,0)
(2,33,0)
(173,79,0)
(31,79,0)
(189,212,0)
(208,124,0)
(190,92,0)
(144,133,0)
(153,88,0)
(61,121,0)
(74,36,0)
(29,146,0)
(209,161,0)
(170,36,0)
(43,124,0)
(79,142,0)
(211,36,0)
(43,107,0)
(24,27,0)
(211,42,0)
(110,88,0)
(104,81,0)
(52,36,0)
(107,164,0)
(171,124,0)
(163,42,0)
(134,163,0)
(70,214,0)
(200,177,0)
(80,42,0)
(13,36,0)
(100,184,0)
(23,152,0)
(55,42,0)
(61,29,0)
(73,164,0)
(124,75,0)
(51,155,0)
(16,15,0)
(131,42,0)
(28,53,0)
(142,68,0)
(86,2,0)
(138,108,0)
(154,109,0)
(196,124,0)
(160,193,0)
(78,208,0)
(181,42,0)
(146,34,0)
(111,171,0)
(152,36,0)
(96,124,0)
(200,208,0)
(136,122,0)
(149,62,0)
(33,2,0)
(135,10,0)
(214,26,0)
(16,190,0)
(191,130,0)
(120,42,0)
(132,122,0)
(200,42,0)
(15,97,0)
(92,190,0)
(12,141,0)
(119,158,0)
(99,52,0)
(118,42,0)
(52,97,0)
(178,205,0)
(67,128,0)
(69,41,0)
(36,13,0)
(10,103,0)
(11,170,0)
(53,184,0)
(7,55,0)
(41,72,0)
(27,124,0)
(68,142,0)
(54,100,0)
(143,42,0)
(58,211,0)
(198,205,0)
(98,212,0)
(14,84,1)
(75,33,1)
(35,26,1)
(89,121,1)
(156,213,1)
(192,125,1)
(104,201,1)
(210,108,1)
(10,135,1)
(43,194,1)
(85,36,1)
(155,51,1)
(214,50,1)
(200,16,1)
(187,124,1)
(22,18,1)
(187,71,1)
(69,177,1)
(43,107,1)
(147,59,1)
(150,178,1)
(211,36,1)
(16,121,1)
(77,207,1)
(194,90,1)
(95,77,1)
(26,214,1)
(47,52,1)
(49,116,1)
(82,33,1)
(164,36,1)
(135,79,1)
(36,13,1)
(2,86,1)
(119,200,1)
(16,145,1)
(108,124,1)
(200,128,1)
(136,49,1)
(161,53,1)
(115,93,1)
(78,187,1)
(9,193,1)
(186,27,1)
(29,146,1)
(171,124,1)
(84,211,1)
(54,63,1)
(55,7,1)
(171,6,1)
(127,136,1)
(43,124,1)
(23,8,1)
(116,122,1)
(45,159,1)
(165,54,1)
(191,25,1)
(172,65,1)
(100,184,1)
(27,24,1)
(19,128,1)
(195,103,1)
(201,91,1)
(129,44,1)
(146,34,1)
(16,15,1)
(39,160,1)
(176,136,1)
(208,105,1)
(124,75,1)
(113,117,1)
(57,129,1)
(212,36,1)
(7,196,1)
(96,44,1)
(195,202,1)
(92,142,1)
(109,154,1)
(68,74,1)
(179,190,1)
(139,98,1)
(105,78,1)
(79,173,1)
(202,17,1)
(214,124,1)
(61,29,1)
(196,124,1)
(12,39,1)
(174,9,1)
(109,209,1)
(15,215,1)
(154,46,1)
(119,206,1)
(16,190,1)
(50,70,1)
(40,133,1)
(38,96,1)
(152,36,1)
(192,20,1)
(29,124,1)
(192,76,1)
(79,142,1)
(162,89,1)
(66,95,1)
(67,197,1)
(5,43,1)
(79,65,1)
(4,36,1)
(161,36,1)
(200,31,1)
(24,147,1)
(44,212,1)
(28,64,1)
(31,27,1)
(199,85,1)
(62,149,1)
(107,164,1)
(70,209,1)
(177,66,1)
(130,124,1)
(60,32,1)
(133,144,1)
(8,55,1)
(171,146,1)
(117,28,1)
(130,191,1)
(68,103,1)
(197,195,1)
(164,73,1)
(206,124,1)
(123,59,1)
(108,138,1)
(188,133,1)
(192,106,1)
(204,74,1)
(128,124,1)
(58,60,1)
(190,92,1)
(101,108,1)
(31,103,1)
(175,141,1)
(3,56,1)
(158,21,1)
(126,4,1)
(167,179,1)
(65,155,1)
(73,19,1)
(133,103,1)
(208,124,1)
(53,184,1)
(59,172,1)
(34,45,1)
(213,41,1)
(91,127,1)
(92,65,1)
(216,195,1)
(203,188,1)
(121,61,1)
(209,161,1)
(141,107,1)
(148,171,1)
(170,36,1)
(18,30,1)
(64,208,1)
(185,62,1)
(159,130,1)
(33,2,1)
(138,124,1)
(59,142,1)
(76,179,1)
(212,139,1)
(157,174,1)
(52,99,1)
(90,107,1)
(207,162,1)
(99,35,1)
(155,36,1)
(86,38,1)
(10,103,1)
(160,5,1)
(30,190,1)
(60,36,1)
(77,121,1)
(34,36,1)
(74,36,1)
(200,177,1)
(141,124,1)
(52,36,1)
(51,203,1)
(11,192,1)
(25,26,1)
(103,156,1)
(119,158,1)
(214,209,1)
(177,124,1)
(13,100,1)
(211,58,1)
(178,185,1)
(53,113,1)
(134,126,1)
(111,146,1)
(31,186,1)
(109,124,1)
(197,167,1)
(122,132,1)
(74,115,1)
(32,150,1)
(17,103,1)
(192,199,1)
(85,157,1)
(46,47,1)
(29,0,1)
(215,109,1)
(166,123,1)
(100,165,1)
(206,182,1)
(106,77,1)
(21,57,1)
(0,3,1)
(200,130,1)
(179,22,1)
(17,10,1)
(163,134,1)
(128,67,1)
(145,170,1)
(56,148,1)
(144,216,1)
(27,124,1)
(193,175,1)
(75,82,1)
(173,31,1)
(92,166,1)
(192,104,1)
(149,176,1)
(132,94,1)
(200,208,1)
(142,68,1)
(16,193,1)
(172,142,1)
(71,101,1)
(189,163,1)
(59,65,1)
(196,14,1)
(41,69,1)
(182,152,1)
(192,210,1)
(141,12,1)
(152,23,1)
(98,189,1)
(213,148,1)
(68,204,1)
(16,163,1)
(170,11,1)
(32,5,1)
(136,122,1)
(6,111,1)
(187,36,1)
(93,40,1)
(20,15,1)
(161,53,2)
(109,124,2)
(170,5,2)
(195,148,2)
(60,36,2)
(213,77,2)
(202,77,2)
(172,195,2)
(124,44,2)
(95,77,2)
(170,108,2)
(193,5,2)
(25,26,2)
(146,34,2)
(192,5,2)
(17,77,2)
(152,5,2)
(23,5,2)
(186,59,2)
(19,179,2)
(202,148,2)
(204,133,2)
(67,195,2)
(11,26,2)
(200,31,2)
(10,59,2)
(213,148,2)
(144,195,2)
(41,77,2)
(156,77,2)
(190,59,2)
(91,136,2)
(130,26,2)
(62,136,2)
(17,148,2)
(209,161,2)
(52,26,2)
(16,5,2)
(201,136,2)
(196,5,2)
(159,26,2)
(0,148,2)
(206,136,2)
(16,26,2)
(200,26,2)
(59,142,2)
(29,124,2)
(127,136,2)
(164,195,2)
(14,136,2)
(171,26,2)
(170,26,2)
(154,26,2)
(214,124,2)
(109,26,2)
(29,146,2)
(166,59,2)
(35,26,2)
(164,36,2)
(65,155,2)
(27,124,2)
(187,108,2)
(29,148,2)
(212,36,2)
(16,108,2)
(30,59,2)
(11,108,2)
(16,15,2)
(119,158,2)
(74,36,2)
(200,130,2)
(107,179,2)
(32,136,2)
(23,136,2)
(196,124,2)
(82,44,2)
(19,195,2)
(178,136,2)
(163,134,2)
(79,142,2)
(129,44,2)
(85,36,2)
(68,74,2)
(104,136,2)
(73,195,2)
(59,195,2)
(197,195,2)
(44,212,2)
(187,36,2)
(177,124,2)
(20,26,2)
(188,133,2)
(15,215,2)
(77,121,2)
(160,5,2)
(141,124,2)
(53,184,2)
(71,108,2)
(75,33,2)
(171,124,2)
(161,36,2)
(43,195,2)
(146,26,2)
(119,200,2)
(43,124,2)
(26,214,2)
(43,179,2)
(50,108,2)
(194,195,2)
(64,108,2)
(209,108,2)
(68,103,2)
(148,171,2)
(162,148,2)
(174,5,2)
(115,133,2)
(14,5,2)
(206,124,2)
(211,136,2)
(203,133,2)
(18,59,2)
(22,59,2)
(211,5,2)
(90,195,2)
(148,26,2)
(12,5,2)
(27,59,2)
(128,179,2)
(182,136,2)
(155,36,2)
(207,148,2)
(196,136,2)
(145,5,2)
(66,77,2)
(89,148,2)
(11,136,2)
(197,179,2)
(206,5,2)
(170,136,2)
(200,77,2)
(200,179,2)
(200,128,2)
(65,133,2)
(128,124,2)
(53,108,2)
(57,44,2)
(13,100,2)
(39,5,2)
(200,108,2)
(149,136,2)
(79,65,2)
(8,136,2)
(167,179,2)
(90,179,2)
(170,77,2)
(99,26,2)
(5,195,2)
(11,5,2)
(47,26,2)
(77,148,2)
(74,133,2)
(15,26,2)
(106,77,2)
(200,5,2)
(192,77,2)
(16,193,2)
(52,36,2)
(192,179,2)
(191,26,2)
(67,179,2)
(133,195,2)
(136,122,2)
(107,195,2)
(16,179,2)
(200,136,2)
(16,77,2)
(84,136,2)
(56,148,2)
(55,5,2)
(96,44,2)
(77,207,2)
(78,108,2)
(182,5,2)
(61,148,2)
(161,108,2)
(170,36,2)
(141,5,2)
(9,5,2)
(7,5,2)
(55,136,2)
(193,175,2)
(36,13,2)
(158,44,2)
(11,179,2)
(173,59,2)
(31,103,2)
(152,136,2)
(105,108,2)
(59,65,2)
(119,206,2)
(93,133,2)
(214,108,2)
(108,44,2)
(157,5,2)
(176,136,2)
(145,77,2)
(194,179,2)
(130,124,2)
(190,92,2)
(68,133,2)
(86,44,2)
(121,148,2)
(192,26,2)
(5,43,2)
(107,164,2)
(145,179,2)
(5,179,2)
(43,107,2)
(145,26,2)
(215,109,2)
(171,146,2)
(211,36,2)
(21,57,2)
(101,108,2)
(185,136,2)
(111,26,2)
(24,59,2)
(92,142,2)
(16,163,2)
(179,190,2)
(200,208,2)
(195,77,2)
(92,65,2)
(34,26,2)
(8,5,2)
(10,103,2)
(40,133,2)
(138,44,2)
(31,59,2)
(117,108,2)
(3,148,2)
(156,148,2)
(177,77,2)
(152,36,2)
(155,133,2)
(179,59,2)
(100,184,2)
(108,124,2)
(200,177,2)
(192,108,2)
(109,209,2)
(69,77,2)
(103,148,2)
(51,133,2)
(175,5,2)
(11,77,2)
(208,108,2)
(28,108,2)
(128,195,2)
(75,44,2)
(32,5,2)
(147,59,2)
(121,61,2)
(58,136,2)
(164,179,2)
(145,136,2)
(31,27,2)
(216,195,2)
(16,190,2)
(6,26,2)
(113,108,2)
(16,121,2)
(60,5,2)
(58,5,2)
(123,59,2)
(7,136,2)
(175,141,2)
(145,108,2)
(17,59,2)
(214,209,2)
(2,44,2)
(70,108,2)
(192,136,2)
(38,44,2)
(34,36,2)
(208,124,2)
(76,179,2)
(202,59,2)
(215,26,2)
(26,108,2)
(195,103,2)
(92,59,2)
(142,133,2)
(142,68,2)
(135,59,2)
(73,179,2)
(150,136,2)
(103,77,2)
(33,2,2)
(60,136,2)
(179,22,2)
(141,107,2)
(21,44,2)
(210,108,2)
(84,5,2)
(187,124,2)
(199,5,2)
(61,29,2)
(45,26,2)
(170,179,2)
(79,59,2)
(33,44,2)
(124,75,2)
(195,59,2)
(46,26,2)
(133,103,2)
(16,136,2)
(85,5,2)
-----------------------------------
(0,target_pwr)
(1,for (i = 0; i < AHCI_MAX_CLKS; i++)
(2,*hpriv)
(3,hpriv)
(4,rc)
(5,IS_ERR(hpriv->phy)
(6,target_pwr)
(7,true)
(8,dev)
(9,rc)
(10,i++)
(11,NULL)
(12,phy)
(13,&pdev->dev)
(14,got_runtime_pm)
(15,rc = PTR_ERR(hpriv->mmio)
(16,ERR_PTR(rc)
(17,i)
(18,EPROBE_DEFER)
(19,dev)
(20,goto err_out;)
(21,ERR_PTR(-ENOMEM)
(22,-EPROBE_DEFER)
(23,NULL)
(24,clks)
(25,hpriv)
(26,IS_ERR(hpriv->mmio)
(27,hpriv->clks)
(28,pdev)
(29,hpriv->target_pwr)
(30,rc)
(31,hpriv->clks[i])
(32,dev)
(33,sizeof(*hpriv)
(34,devm_regulator_get_optional(dev, "target")
(35,dev)
(36,*dev = &pdev->dev)
(37,dev)
(38,ahci_platform_put_resources)
(39,hpriv)
(40,clk)
(41,hpriv->target_pwr = NULL)
(42,)
(43,hpriv->phy)
(44,!devres_open_group(dev, NULL, GFP_KERNEL)
(45,"target")
(46,hpriv)
(47,rc)
(48,EPROBE_DEFER:)
(49,NULL)
(50,mmio)
(51,NULL)
(52,dev_err(dev, "no mmio space\\n")
(53,platform_get_resource(pdev, IORESOURCE_MEM, 0)
(54,pdev)
(55,hpriv->got_runtime_pm = true)
(56,rc)
(57,-ENOMEM)
(58,dev)
(59,IS_ERR(clk)
(60,pm_runtime_enable(dev)
(61,PTR_ERR(hpriv->target_pwr)
(62,hpriv->phy)
(63,dev)
(64,dev)
(65,clk = clk_get(dev, NULL)
(66,target_pwr)
(67,phy)
(68,of_clk_get(dev->of_node, i)
(69,NULL)
(70,hpriv)
(71,hpriv)
(72,)
(73,"sata-phy")
(74,dev->of_node)
(75,devres_alloc(ahci_platform_put_resources, sizeof(*hpriv)
(76,goto err_out;)
(77,rc == -EPROBE_DEFER)
(78,hpriv)
(79,hpriv->clks[i] = clk)
(80,if (IS_ERR(hpriv->target_pwr)
(81,)
(82,GFP_KERNEL)
(83,default:)
(84,hpriv)
(85,dev_err(dev, "couldn\'t get sata-phy\\n")
(86,hpriv)
(87,)
(88,)
(89,rc)
(90,hpriv)
(91,"couldn\'t get sata-phy: ENOSYS\\n")
(92,PTR_ERR(clk)
(93,dev)
(94,dev)
(95,hpriv)
(96,hpriv)
(97,)
(98,NULL)
(99,"no mmio space\\n")
(100,pdev->dev)
(101,dev)
(102,if (rc == -EPROBE_DEFER)
(103,i = 0)
(104,goto err_out;)
(105,mmio)
(106,goto err_out;)
(107,hpriv->phy = devm_phy_get(dev, "sata-phy")
(108,!hpriv)
(109,hpriv->mmio)
(110,if (i == 0)
(111,hpriv)
(112,)
(113,0)
(114,if (!hpriv)
(115,of_node)
(116,"phys")
(117,IORESOURCE_MEM)
(118,if (IS_ERR(hpriv->mmio)
(119,RET)
(120,i)
(121,rc = PTR_ERR(hpriv->target_pwr)
(122,dev->of_node)
(123,rc)
(124,hpriv = devres_alloc(ahci_platform_put_resources, sizeof(*hpriv)
(125,goto err_out;)
(126,ENOMEM)
(127,dev)
(128,hpriv->phy)
(129,ENOMEM)
(130,hpriv->target_pwr)
(131,err_out:)
(132,of_node)
(133,i == 0)
(134,-ENOMEM)
(135,i)
(136,of_find_property(dev->of_node, "phys", NULL)
(137,switch (rc)
(138,hpriv)
(139,GFP_KERNEL)
(140,hpriv)
(141,hpriv->phy)
(142,clk = of_clk_get(dev->of_node, i)
(143,clk)
(144,0)
(145,rc)
(146,hpriv->target_pwr = devm_regulator_get_optional(dev, "target")
(147,hpriv)
(148,IS_ERR(hpriv->target_pwr)
(149,phy)
(150,break;)
(151,if (of_find_property(dev->of_node, "phys", NULL)
(152,devres_remove_group(dev, NULL)
(153,if (IS_ERR(clk)
(154,mmio)
(155,clk_get(dev, NULL)
(156,0)
(157,"couldn\'t get sata-phy\\n")
(158,return ERR_PTR(-ENOMEM)
(159,dev)
(160,rc)
(161,devm_ioremap_resource(dev,\n\\n\\t\\t\\t      platform_get_resource(pdev, IORESOURCE_MEM, 0)
(162,EPROBE_DEFER)
(163,rc = -ENOMEM)
(164,devm_phy_get(dev, "sata-phy")
(165,dev)
(166,clk)
(167,break;)
(168,if (rc == -EPROBE_DEFER)
(169,if (IS_ERR(hpriv->phy)
(170,devres_release_group(dev, NULL)
(171,hpriv->target_pwr)
(172,clk)
(173,clk)
(174,dev)
(175,PTR_ERR(hpriv->phy)
(176,hpriv)
(177,hpriv->target_pwr)
(178,hpriv->phy = NULL)
(179,rc == -EPROBE_DEFER)
(180,if (!devres_open_group(dev, NULL, GFP_KERNEL)
(181,rc)
(182,hpriv)
(183,ENOSYS:)
(184,struct platform_device *pdev)
(185,NULL)
(186,i)
(187,devres_add(dev, hpriv)
(188,clk)
(189,dev)
(190,rc = PTR_ERR(clk)
(191,target_pwr)
(192,dev)
(193,rc = PTR_ERR(hpriv->phy)
(194,phy)
(195,i < AHCI_MAX_CLKS)
(196,hpriv->got_runtime_pm)
(197,hpriv)
(198,ENODEV:)
(199,goto err_out;)
(200,return ERR_PTR(rc)
(201,dev_err(dev, "couldn\'t get sata-phy: ENOSYS\\n")
(202,AHCI_MAX_CLKS)
(203,dev)
(204,i)
(205,)
(206,return hpriv;)
(207,-EPROBE_DEFER)
(208,hpriv->mmio)
(209,hpriv->mmio = devm_ioremap_resource(dev,\n\\n\\t\\t\\t      platform_get_resource(pdev, IORESOURCE_MEM, 0)
(210,goto err_out;)
(211,pm_runtime_get_sync(dev)
(212,devres_open_group(dev, NULL, GFP_KERNEL)
(213,i)
(214,hpriv->mmio)
(215,PTR_ERR(hpriv->mmio)
(216,i)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^