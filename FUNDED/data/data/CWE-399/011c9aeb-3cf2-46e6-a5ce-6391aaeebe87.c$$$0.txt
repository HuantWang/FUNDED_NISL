-----label-----
1
-----code-----
static int sun4i_ss_probe(struct platform_device *pdev)
{
	u32 v;
	int err, i;
	unsigned long cr;
	const unsigned long cr_ahb = 24 * 1000 * 1000;
	const unsigned long cr_mod = 150 * 1000 * 1000;
	struct sun4i_ss_ctx *ss;

	if (!pdev->dev.of_node)
		return -ENODEV;

	ss = devm_kzalloc(&pdev->dev, sizeof(*ss), GFP_KERNEL);
	if (!ss)
		return -ENOMEM;

	ss->base = devm_platform_ioremap_resource(pdev, 0);
	if (IS_ERR(ss->base)) {
		dev_err(&pdev->dev, "Cannot request MMIO\n");
		return PTR_ERR(ss->base);
	}

	ss->ssclk = devm_clk_get(&pdev->dev, "mod");
	if (IS_ERR(ss->ssclk)) {
		err = PTR_ERR(ss->ssclk);
		dev_err(&pdev->dev, "Cannot get SS clock err=%d\n", err);
		return err;
	}
	dev_dbg(&pdev->dev, "clock ss acquired\n");

	ss->busclk = devm_clk_get(&pdev->dev, "ahb");
	if (IS_ERR(ss->busclk)) {
		err = PTR_ERR(ss->busclk);
		dev_err(&pdev->dev, "Cannot get AHB SS clock err=%d\n", err);
		return err;
	}
	dev_dbg(&pdev->dev, "clock ahb_ss acquired\n");

	ss->reset = devm_reset_control_get_optional(&pdev->dev, "ahb");
	if (IS_ERR(ss->reset)) {
		if (PTR_ERR(ss->reset) == -EPROBE_DEFER)
			return PTR_ERR(ss->reset);
		dev_info(&pdev->dev, "no reset control found\n");
		ss->reset = NULL;
	}

	/* Enable both clocks */
	err = clk_prepare_enable(ss->busclk);
	if (err) {
		dev_err(&pdev->dev, "Cannot prepare_enable busclk\n");
		return err;
	}
	err = clk_prepare_enable(ss->ssclk);
	if (err) {
		dev_err(&pdev->dev, "Cannot prepare_enable ssclk\n");
		goto error_ssclk;
	}

	/*
	 * Check that clock have the correct rates given in the datasheet
	 * Try to set the clock to the maximum allowed
	 */
	err = clk_set_rate(ss->ssclk, cr_mod);
	if (err) {
		dev_err(&pdev->dev, "Cannot set clock rate to ssclk\n");
		goto error_clk;
	}

	/* Deassert reset if we have a reset control */
	if (ss->reset) {
		err = reset_control_deassert(ss->reset);
		if (err) {
			dev_err(&pdev->dev, "Cannot deassert reset control\n");
			goto error_clk;
		}
	}

	/*
	 * The only impact on clocks below requirement are bad performance,
	 * so do not print "errors"
	 * warn on Overclocked clocks
	 */
	cr = clk_get_rate(ss->busclk);
	if (cr >= cr_ahb)
		dev_dbg(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",
			cr, cr / 1000000, cr_ahb);
	else
		dev_warn(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",
			 cr, cr / 1000000, cr_ahb);

	cr = clk_get_rate(ss->ssclk);
	if (cr <= cr_mod)
		if (cr < cr_mod)
			dev_warn(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",
				 cr, cr / 1000000, cr_mod);
		else
			dev_dbg(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",
				cr, cr / 1000000, cr_mod);
	else
		dev_warn(&pdev->dev, "Clock ss is at %lu (%lu MHz) (must be <= %lu)\n",
			 cr, cr / 1000000, cr_mod);

	/*
	 * Datasheet named it "Die Bonding ID"
	 * I expect to be a sort of Security System Revision number.
	 * Since the A80 seems to have an other version of SS
	 * this info could be useful
	 */
	writel(SS_ENABLED, ss->base + SS_CTL);
	v = readl(ss->base + SS_CTL);
	v >>= 16;
	v &= 0x07;
	dev_info(&pdev->dev, "Die ID %d\n", v);
	writel(0, ss->base + SS_CTL);

	ss->dev = &pdev->dev;

	spin_lock_init(&ss->slock);

	for (i = 0; i < ARRAY_SIZE(ss_algs); i++) {
		ss_algs[i].ss = ss;
		switch (ss_algs[i].type) {
		case CRYPTO_ALG_TYPE_SKCIPHER:
			err = crypto_register_skcipher(&ss_algs[i].alg.crypto);
			if (err) {
				dev_err(ss->dev, "Fail to register %s\n",
					ss_algs[i].alg.crypto.base.cra_name);
				goto error_alg;
			}
			break;
		case CRYPTO_ALG_TYPE_AHASH:
			err = crypto_register_ahash(&ss_algs[i].alg.hash);
			if (err) {
				dev_err(ss->dev, "Fail to register %s\n",
					ss_algs[i].alg.hash.halg.base.cra_name);
				goto error_alg;
			}
			break;
		case CRYPTO_ALG_TYPE_RNG:
			err = crypto_register_rng(&ss_algs[i].alg.rng);
			if (err) {
				dev_err(ss->dev, "Fail to register %s\n",
					ss_algs[i].alg.rng.base.cra_name);
			}
			break;
		}
	}
	platform_set_drvdata(pdev, ss);
	return 0;
error_alg:
	i--;
	for (; i >= 0; i--) {
		switch (ss_algs[i].type) {
		case CRYPTO_ALG_TYPE_SKCIPHER:
			crypto_unregister_skcipher(&ss_algs[i].alg.crypto);
			break;
		case CRYPTO_ALG_TYPE_AHASH:
			crypto_unregister_ahash(&ss_algs[i].alg.hash);
			break;
		case CRYPTO_ALG_TYPE_RNG:
			crypto_unregister_rng(&ss_algs[i].alg.rng);
			break;
		}
	}
	if (ss->reset)
		reset_control_assert(ss->reset);
error_clk:
	clk_disable_unprepare(ss->ssclk);
error_ssclk:
	clk_disable_unprepare(ss->busclk);
	return err;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
11,51
11,52
11,53
11,54
11,55
11,56
11,57
11,58
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
19,22
21,22
23,24
25,26
26,27
26,28
28,29
30,31
31,32
31,33
33,34
33,35
35,36
36,37
36,38
37,38
37,39
41,42
42,43
42,44
44,45
44,46
46,47
47,48
47,49
48,49
48,50
52,53
53,54
53,55
54,55
56,57
56,58
59,60
59,61
60,61
61,62
61,63
62,63
62,64
63,64
67,68
68,69
69,70
71,72
72,73
72,74
73,74
75,76
75,77
75,78
75,79
76,77
78,79
79,80
79,81
80,81
83,84
84,85
85,86
86,87
88,89
90,91
90,92
91,92
92,93
94,95
95,96
96,97
98,99
99,100
99,101
100,101
100,102
101,102
104,105
104,106
104,107
105,106
107,108
110,111
110,112
111,112
111,113
112,113
114,115
114,116
115,116
118,119
118,120
119,120
120,121
120,122
120,123
121,122
123,124
124,125
124,126
125,126
129,130
130,131
130,132
131,132
133,134
133,135
134,135
137,138
138,139
138,140
139,140
139,141
140,141
143,144
143,145
143,146
144,145
146,147
147,148
147,149
148,149
152,153
152,154
153,154
153,155
154,155
156,157
156,158
157,158
160,161
160,162
160,163
161,162
162,163
162,164
163,164
165,166
165,167
166,167
168,169
168,170
169,170
172,173
173,174
173,175
173,176
173,177
174,175
176,177
177,178
177,179
178,179
182,183
184,185
185,186
187,188
188,189
188,190
188,191
189,190
191,192
192,193
192,194
193,194
197,198
198,199
198,200
199,200
199,201
200,201
203,204
203,205
203,206
204,205
206,207
207,208
207,209
208,209
212,213
212,214
213,214
213,215
214,215
216,217
216,218
217,218
220,221
220,222
220,223
221,222
222,223
222,224
223,224
225,226
225,227
226,227
228,229
228,230
229,230
232,233
233,234
233,235
233,236
233,237
234,235
236,237
237,238
237,239
238,239
242,243
244,245
245,246
247,248
248,249
248,250
248,251
249,250
251,252
252,253
252,254
253,254
257,258
258,259
258,260
259,260
259,261
260,261
263,264
263,265
263,266
264,265
266,267
267,268
267,269
268,269
272,273
272,274
273,274
273,275
274,275
276,277
276,278
277,278
280,281
280,282
280,283
281,282
281,283
282,283
282,284
283,284
283,285
284,285
286,287
286,288
287,288
290,291
291,292
293,294
294,295
294,296
295,296
297,298
297,299
298,299
301,302
302,303
302,304
302,305
303,304
305,306
306,307
306,308
307,308
311,312
312,313
312,314
313,314
313,315
314,315
317,318
319,320
320,321
320,322
321,322
323,324
323,325
324,325
326,327
326,328
327,328
330,331
330,332
331,332
333,334
333,335
334,335
335,336
335,337
335,338
336,337
338,339
339,340
339,341
340,341
344,345
345,346
347,348
348,349
348,350
349,350
351,352
351,353
352,353
354,355
354,356
355,356
358,359
358,360
359,360
361,362
361,363
362,363
363,364
363,365
363,366
364,365
366,367
367,368
367,369
368,369
372,373
374,375
375,376
375,377
376,377
378,379
378,380
378,381
379,380
381,382
381,383
382,383
385,386
387,388
387,389
388,389
390,391
390,392
391,392
392,393
392,394
392,395
393,394
395,396
396,397
396,398
397,398
401,402
403,404
403,405
404,405
404,406
405,406
408,409
408,410
409,410
410,411
410,412
411,412
413,414
413,415
414,415
416,417
416,418
417,418
420,421
420,422
421,422
423,424
423,425
424,425
425,426
425,427
425,428
426,427
428,429
429,430
429,431
430,431
434,435
436,437
437,438
437,439
438,439
440,441
440,442
441,442
443,444
443,445
444,445
447,448
447,449
447,450
448,449
448,450
449,450
451,452
453,454
454,455
454,456
454,457
454,458
454,459
454,460
455,456
457,458
458,459
458,460
459,460
463,464
465,466
465,467
466,467
469,470
471,472
472,473
472,474
472,475
472,476
472,477
472,478
473,474
475,476
476,477
476,478
477,478
481,482
483,484
483,485
484,485
487,488
489,490
490,491
490,492
491,492
493,494
493,495
494,495
496,497
496,498
497,498
500,501
500,502
500,503
501,502
501,503
502,503
504,505
506,507
506,508
506,509
507,508
507,509
508,509
510,511
512,513
513,514
513,515
513,516
513,517
513,518
513,519
514,515
516,517
517,518
517,519
518,519
522,523
524,525
524,526
525,526
528,529
530,531
531,532
531,533
531,534
531,535
531,536
531,537
532,533
534,535
535,536
535,537
536,537
540,541
542,543
542,544
543,544
546,547
548,549
549,550
549,551
549,552
549,553
549,554
549,555
550,551
552,553
553,554
553,555
554,555
558,559
560,561
560,562
561,562
564,565
566,567
567,568
567,569
567,570
568,569
570,571
572,573
572,574
573,574
573,575
574,575
577,578
579,580
580,581
580,582
581,582
583,584
583,585
584,585
586,587
586,588
587,588
587,589
588,589
591,592
593,594
594,595
594,596
595,596
598,599
599,600
599,601
600,601
603,604
604,605
604,606
604,607
604,608
605,606
607,608
608,609
608,610
609,610
613,614
615,616
616,617
616,618
616,619
617,618
620,621
620,622
621,622
621,623
622,623
625,626
627,628
628,629
628,630
629,630
629,631
630,631
633,634
634,635
634,636
635,636
638,639
639,640
639,641
640,641
642,643
643,644
643,645
644,645
647,648
647,649
647,650
647,651
648,649
649,650
649,651
650,651
653,654
653,655
654,655
656,657
656,658
657,658
659,660
661,662
662,663
664,665
664,666
665,666
666,667
666,668
667,668
667,669
668,669
668,670
669,670
671,672
674,675
676,677
676,678
677,678
677,679
678,679
678,680
679,680
681,682
684,685
684,686
684,687
684,688
684,689
684,690
684,691
684,692
684,693
684,694
684,695
684,696
685,686
686,687
688,689
689,690
689,691
690,691
692,693
692,694
693,694
695,696
696,697
696,698
697,698
697,699
698,699
698,700
699,700
701,702
705,706
705,707
706,707
708,709
708,710
709,710
710,711
710,712
710,713
710,714
711,712
713,714
713,715
714,715
718,719
718,720
719,720
719,721
720,721
720,722
721,722
721,723
722,723
722,724
723,724
725,726
731,732
734,735
735,736
737,738
738,739
738,740
739,740
741,742
741,743
742,743
744,745
745,746
745,747
746,747
746,748
747,748
747,749
748,749
750,751
754,755
754,756
755,756
757,758
757,759
758,759
759,760
759,761
759,762
759,763
760,761
762,763
762,764
763,764
767,768
767,769
768,769
768,770
769,770
769,771
770,771
770,772
771,772
771,773
772,773
772,774
773,774
775,776
782,783
785,786
786,787
788,789
789,790
789,791
790,791
792,793
792,794
793,794
795,796
796,797
796,798
797,798
797,799
798,799
798,800
799,800
801,802
805,806
805,807
806,807
808,809
809,810
810,811
810,812
810,813
810,814
811,812
813,814
813,815
814,815
818,819
818,820
819,820
819,821
820,821
820,822
821,822
821,823
822,823
822,824
823,824
825,826
832,833
833,834
833,835
833,836
834,835
836,837
838,839
840,841
842,843
842,844
844,845
845,846
846,847
848,849
848,850
848,851
848,852
850,851
850,852
851,852
854,855
855,856
857,858
858,859
858,860
859,860
859,861
860,861
860,862
861,862
863,864
866,867
866,868
866,869
866,870
866,871
866,872
866,873
866,874
866,875
867,868
868,869
870,871
871,872
871,873
872,873
874,875
875,876
875,877
876,877
876,878
877,878
877,879
878,879
880,881
885,886
886,887
888,889
889,890
889,891
890,891
892,893
893,894
893,895
894,895
894,896
895,896
895,897
896,897
898,899
903,904
904,905
906,907
907,908
907,909
908,909
910,911
911,912
911,913
912,913
912,914
913,914
913,915
914,915
916,917
921,922
921,923
922,923
922,924
923,924
926,927
927,928
927,929
928,929
930,931
930,932
931,932
934,935
934,936
936,937
937,938
937,939
938,939
940,941
940,942
941,942
944,945
944,946
946,947
947,948
947,949
948,949
950,951
950,952
951,952
954,955
955,956
-----nextToken-----

-----computeFrom-----
36,37
36,38
37,38
37,39
47,48
47,49
48,49
48,50
72,73
72,74
99,100
99,101
138,139
138,140
162,163
162,164
198,199
198,200
222,223
222,224
258,259
258,260
282,283
282,284
312,313
312,314
320,321
320,322
348,349
348,350
375,376
375,377
410,411
410,412
437,438
437,439
448,449
448,450
465,466
465,467
483,484
483,485
490,491
490,492
501,502
501,503
507,508
507,509
524,525
524,526
542,543
542,544
560,561
560,562
572,573
572,574
580,581
580,582
586,587
586,588
594,595
594,596
599,600
599,601
620,621
620,622
628,629
628,630
649,650
649,651
653,654
653,655
666,667
666,668
689,690
689,691
738,739
738,740
789,790
789,791
850,851
850,852
-----guardedBy-----
288,299
289,300
285,296
452,470
450,467
505,547
503,544
511,529
509,526
-----guardedByNegation-----
452,488
450,485
505,565
503,562
511,547
509,544
-----lastLexicalUse-----
452,488
450,485
505,565
503,562
511,547
509,544
-----jump-----
452,488
450,485
505,565
503,562
511,547
509,544
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;GotoStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;SwitchStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;Name;Name;GotoStatement;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;FieldReference;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;Name;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;ForStatement;NullStatement;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;SwitchStatement;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;Name;BreakStatement;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int sun4i_ss_probe(struct platform_device *pdev){	u32 v;	int err, i;	unsigned long cr;	const unsigned long cr_ahb = 24 * 1000 * 1000;	const unsigned long cr_mod = 150 * 1000 * 1000;	struct sun4i_ss_ctx *ss;	if (!pdev->dev.of_node)		return -ENODEV;	ss = devm_kzalloc(&pdev->dev, sizeof(*ss), GFP_KERNEL);	if (!ss)		return -ENOMEM;	ss->base = devm_platform_ioremap_resource(pdev, 0);	if (IS_ERR(ss->base)) {		dev_err(&pdev->dev, "Cannot request MMIO\n");		return PTR_ERR(ss->base);	}	ss->ssclk = devm_clk_get(&pdev->dev, "mod");	if (IS_ERR(ss->ssclk)) {		err = PTR_ERR(ss->ssclk);		dev_err(&pdev->dev, "Cannot get SS clock err=%d\n", err);		return err;	}	dev_dbg(&pdev->dev, "clock ss acquired\n");	ss->busclk = devm_clk_get(&pdev->dev, "ahb");	if (IS_ERR(ss->busclk)) {		err = PTR_ERR(ss->busclk);		dev_err(&pdev->dev, "Cannot get AHB SS clock err=%d\n", err);		return err;	}	dev_dbg(&pdev->dev, "clock ahb_ss acquired\n");	ss->reset = devm_reset_control_get_optional(&pdev->dev, "ahb");	if (IS_ERR(ss->reset)) {		if (PTR_ERR(ss->reset) == -EPROBE_DEFER)			return PTR_ERR(ss->reset);		dev_info(&pdev->dev, "no reset control found\n");		ss->reset = NULL;	}	/* Enable both clocks */	err = clk_prepare_enable(ss->busclk);	if (err) {		dev_err(&pdev->dev, "Cannot prepare_enable busclk\n");		return err;	}	err = clk_prepare_enable(ss->ssclk);	if (err) {		dev_err(&pdev->dev, "Cannot prepare_enable ssclk\n");		goto error_ssclk;	}	/*	 * Check that clock have the correct rates given in the datasheet	 * Try to set the clock to the maximum allowed	 */	err = clk_set_rate(ss->ssclk, cr_mod);	if (err) {		dev_err(&pdev->dev, "Cannot set clock rate to ssclk\n");		goto error_clk;	}	/* Deassert reset if we have a reset control */	if (ss->reset) {		err = reset_control_deassert(ss->reset);		if (err) {			dev_err(&pdev->dev, "Cannot deassert reset control\n");			goto error_clk;		}	}	/*	 * The only impact on clocks below requirement are bad performance,	 * so do not print "errors"	 * warn on Overclocked clocks	 */	cr = clk_get_rate(ss->busclk);	if (cr >= cr_ahb)		dev_dbg(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			cr, cr / 1000000, cr_ahb);	else		dev_warn(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			 cr, cr / 1000000, cr_ahb);	cr = clk_get_rate(ss->ssclk);	if (cr <= cr_mod)		if (cr < cr_mod)			dev_warn(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				 cr, cr / 1000000, cr_mod);		else			dev_dbg(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				cr, cr / 1000000, cr_mod);	else		dev_warn(&pdev->dev, "Clock ss is at %lu (%lu MHz) (must be <= %lu)\n",			 cr, cr / 1000000, cr_mod);	/*	 * Datasheet named it "Die Bonding ID"	 * I expect to be a sort of Security System Revision number.	 * Since the A80 seems to have an other version of SS	 * this info could be useful	 */	writel(SS_ENABLED, ss->base + SS_CTL);	v = readl(ss->base + SS_CTL);	v >>= 16;	v &= 0x07;	dev_info(&pdev->dev, "Die ID %d\n", v);	writel(0, ss->base + SS_CTL);	ss->dev = &pdev->dev;	spin_lock_init(&ss->slock);	for (i = 0; i < ARRAY_SIZE(ss_algs); i++) {		ss_algs[i].ss = ss;		switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			err = crypto_register_skcipher(&ss_algs[i].alg.crypto);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_AHASH:			err = crypto_register_ahash(&ss_algs[i].alg.hash);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_RNG:			err = crypto_register_rng(&ss_algs[i].alg.rng);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name);			}			break;		}	}	platform_set_drvdata(pdev, ss);	return 0;error_alg:	i--;	for (; i >= 0; i--) {		switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			crypto_unregister_skcipher(&ss_algs[i].alg.crypto);			break;		case CRYPTO_ALG_TYPE_AHASH:			crypto_unregister_ahash(&ss_algs[i].alg.hash);			break;		case CRYPTO_ALG_TYPE_RNG:			crypto_unregister_rng(&ss_algs[i].alg.rng);			break;		}	}	if (ss->reset)		reset_control_assert(ss->reset);error_clk:	clk_disable_unprepare(ss->ssclk);error_ssclk:	clk_disable_unprepare(ss->busclk);	return err;}
static int
sun4i_ss_probe(struct platform_device *pdev)
sun4i_ss_probe
struct platform_device *pdev
struct platform_device
platform_device
*pdev
*
pdev
{	u32 v;	int err, i;	unsigned long cr;	const unsigned long cr_ahb = 24 * 1000 * 1000;	const unsigned long cr_mod = 150 * 1000 * 1000;	struct sun4i_ss_ctx *ss;	if (!pdev->dev.of_node)		return -ENODEV;	ss = devm_kzalloc(&pdev->dev, sizeof(*ss), GFP_KERNEL);	if (!ss)		return -ENOMEM;	ss->base = devm_platform_ioremap_resource(pdev, 0);	if (IS_ERR(ss->base)) {		dev_err(&pdev->dev, "Cannot request MMIO\n");		return PTR_ERR(ss->base);	}	ss->ssclk = devm_clk_get(&pdev->dev, "mod");	if (IS_ERR(ss->ssclk)) {		err = PTR_ERR(ss->ssclk);		dev_err(&pdev->dev, "Cannot get SS clock err=%d\n", err);		return err;	}	dev_dbg(&pdev->dev, "clock ss acquired\n");	ss->busclk = devm_clk_get(&pdev->dev, "ahb");	if (IS_ERR(ss->busclk)) {		err = PTR_ERR(ss->busclk);		dev_err(&pdev->dev, "Cannot get AHB SS clock err=%d\n", err);		return err;	}	dev_dbg(&pdev->dev, "clock ahb_ss acquired\n");	ss->reset = devm_reset_control_get_optional(&pdev->dev, "ahb");	if (IS_ERR(ss->reset)) {		if (PTR_ERR(ss->reset) == -EPROBE_DEFER)			return PTR_ERR(ss->reset);		dev_info(&pdev->dev, "no reset control found\n");		ss->reset = NULL;	}	/* Enable both clocks */	err = clk_prepare_enable(ss->busclk);	if (err) {		dev_err(&pdev->dev, "Cannot prepare_enable busclk\n");		return err;	}	err = clk_prepare_enable(ss->ssclk);	if (err) {		dev_err(&pdev->dev, "Cannot prepare_enable ssclk\n");		goto error_ssclk;	}	/*	 * Check that clock have the correct rates given in the datasheet	 * Try to set the clock to the maximum allowed	 */	err = clk_set_rate(ss->ssclk, cr_mod);	if (err) {		dev_err(&pdev->dev, "Cannot set clock rate to ssclk\n");		goto error_clk;	}	/* Deassert reset if we have a reset control */	if (ss->reset) {		err = reset_control_deassert(ss->reset);		if (err) {			dev_err(&pdev->dev, "Cannot deassert reset control\n");			goto error_clk;		}	}	/*	 * The only impact on clocks below requirement are bad performance,	 * so do not print "errors"	 * warn on Overclocked clocks	 */	cr = clk_get_rate(ss->busclk);	if (cr >= cr_ahb)		dev_dbg(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			cr, cr / 1000000, cr_ahb);	else		dev_warn(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			 cr, cr / 1000000, cr_ahb);	cr = clk_get_rate(ss->ssclk);	if (cr <= cr_mod)		if (cr < cr_mod)			dev_warn(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				 cr, cr / 1000000, cr_mod);		else			dev_dbg(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				cr, cr / 1000000, cr_mod);	else		dev_warn(&pdev->dev, "Clock ss is at %lu (%lu MHz) (must be <= %lu)\n",			 cr, cr / 1000000, cr_mod);	/*	 * Datasheet named it "Die Bonding ID"	 * I expect to be a sort of Security System Revision number.	 * Since the A80 seems to have an other version of SS	 * this info could be useful	 */	writel(SS_ENABLED, ss->base + SS_CTL);	v = readl(ss->base + SS_CTL);	v >>= 16;	v &= 0x07;	dev_info(&pdev->dev, "Die ID %d\n", v);	writel(0, ss->base + SS_CTL);	ss->dev = &pdev->dev;	spin_lock_init(&ss->slock);	for (i = 0; i < ARRAY_SIZE(ss_algs); i++) {		ss_algs[i].ss = ss;		switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			err = crypto_register_skcipher(&ss_algs[i].alg.crypto);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_AHASH:			err = crypto_register_ahash(&ss_algs[i].alg.hash);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_RNG:			err = crypto_register_rng(&ss_algs[i].alg.rng);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name);			}			break;		}	}	platform_set_drvdata(pdev, ss);	return 0;error_alg:	i--;	for (; i >= 0; i--) {		switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			crypto_unregister_skcipher(&ss_algs[i].alg.crypto);			break;		case CRYPTO_ALG_TYPE_AHASH:			crypto_unregister_ahash(&ss_algs[i].alg.hash);			break;		case CRYPTO_ALG_TYPE_RNG:			crypto_unregister_rng(&ss_algs[i].alg.rng);			break;		}	}	if (ss->reset)		reset_control_assert(ss->reset);error_clk:	clk_disable_unprepare(ss->ssclk);error_ssclk:	clk_disable_unprepare(ss->busclk);	return err;}
u32 v;
u32 v;
u32
u32
v
v
int err, i;
int err, i;
int
err
err
i
i
unsigned long cr;
unsigned long cr;
unsigned long
cr
cr
const unsigned long cr_ahb = 24 * 1000 * 1000;
const unsigned long cr_ahb = 24 * 1000 * 1000;
const unsigned long
cr_ahb = 24 * 1000 * 1000
cr_ahb
= 24 * 1000 * 1000
24 * 1000 * 1000
24 * 1000
24
1000
1000
const unsigned long cr_mod = 150 * 1000 * 1000;
const unsigned long cr_mod = 150 * 1000 * 1000;
const unsigned long
cr_mod = 150 * 1000 * 1000
cr_mod
= 150 * 1000 * 1000
150 * 1000 * 1000
150 * 1000
150
1000
1000
struct sun4i_ss_ctx *ss;
struct sun4i_ss_ctx *ss;
struct sun4i_ss_ctx
sun4i_ss_ctx
*ss
*
ss
if (!pdev->dev.of_node)		return -ENODEV;
!pdev->dev.of_node
pdev->dev.of_node
pdev->dev
pdev
pdev
dev
of_node
return -ENODEV;
-ENODEV
ENODEV
ENODEV
ss = devm_kzalloc(&pdev->dev, sizeof(*ss), GFP_KERNEL);
ss = devm_kzalloc(&pdev->dev, sizeof(*ss), GFP_KERNEL)
ss
ss
devm_kzalloc(&pdev->dev, sizeof(*ss), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&pdev->dev
pdev->dev
pdev
pdev
dev
sizeof(*ss)
(*ss)
*ss
ss
ss
GFP_KERNEL
GFP_KERNEL
if (!ss)		return -ENOMEM;
!ss
ss
ss
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
ss->base = devm_platform_ioremap_resource(pdev, 0);
ss->base = devm_platform_ioremap_resource(pdev, 0)
ss->base
ss
ss
base
devm_platform_ioremap_resource(pdev, 0)
devm_platform_ioremap_resource
devm_platform_ioremap_resource
pdev
pdev
0
if (IS_ERR(ss->base)) {		dev_err(&pdev->dev, "Cannot request MMIO\n");		return PTR_ERR(ss->base);	}
IS_ERR(ss->base)
IS_ERR
IS_ERR
ss->base
ss
ss
base
{		dev_err(&pdev->dev, "Cannot request MMIO\n");		return PTR_ERR(ss->base);	}
dev_err(&pdev->dev, "Cannot request MMIO\n");
dev_err(&pdev->dev, "Cannot request MMIO\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Cannot request MMIO\n"
return PTR_ERR(ss->base);
PTR_ERR(ss->base)
PTR_ERR
PTR_ERR
ss->base
ss
ss
base
ss->ssclk = devm_clk_get(&pdev->dev, "mod");
ss->ssclk = devm_clk_get(&pdev->dev, "mod")
ss->ssclk
ss
ss
ssclk
devm_clk_get(&pdev->dev, "mod")
devm_clk_get
devm_clk_get
&pdev->dev
pdev->dev
pdev
pdev
dev
"mod"
if (IS_ERR(ss->ssclk)) {		err = PTR_ERR(ss->ssclk);		dev_err(&pdev->dev, "Cannot get SS clock err=%d\n", err);		return err;	}
IS_ERR(ss->ssclk)
IS_ERR
IS_ERR
ss->ssclk
ss
ss
ssclk
{		err = PTR_ERR(ss->ssclk);		dev_err(&pdev->dev, "Cannot get SS clock err=%d\n", err);		return err;	}
err = PTR_ERR(ss->ssclk);
err = PTR_ERR(ss->ssclk)
err
err
PTR_ERR(ss->ssclk)
PTR_ERR
PTR_ERR
ss->ssclk
ss
ss
ssclk
dev_err(&pdev->dev, "Cannot get SS clock err=%d\n", err);
dev_err(&pdev->dev, "Cannot get SS clock err=%d\n", err)
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Cannot get SS clock err=%d\n"
err
err
return err;
err
err
dev_dbg(&pdev->dev, "clock ss acquired\n");
dev_dbg(&pdev->dev, "clock ss acquired\n")
dev_dbg
dev_dbg
&pdev->dev
pdev->dev
pdev
pdev
dev
"clock ss acquired\n"
ss->busclk = devm_clk_get(&pdev->dev, "ahb");
ss->busclk = devm_clk_get(&pdev->dev, "ahb")
ss->busclk
ss
ss
busclk
devm_clk_get(&pdev->dev, "ahb")
devm_clk_get
devm_clk_get
&pdev->dev
pdev->dev
pdev
pdev
dev
"ahb"
if (IS_ERR(ss->busclk)) {		err = PTR_ERR(ss->busclk);		dev_err(&pdev->dev, "Cannot get AHB SS clock err=%d\n", err);		return err;	}
IS_ERR(ss->busclk)
IS_ERR
IS_ERR
ss->busclk
ss
ss
busclk
{		err = PTR_ERR(ss->busclk);		dev_err(&pdev->dev, "Cannot get AHB SS clock err=%d\n", err);		return err;	}
err = PTR_ERR(ss->busclk);
err = PTR_ERR(ss->busclk)
err
err
PTR_ERR(ss->busclk)
PTR_ERR
PTR_ERR
ss->busclk
ss
ss
busclk
dev_err(&pdev->dev, "Cannot get AHB SS clock err=%d\n", err);
dev_err(&pdev->dev, "Cannot get AHB SS clock err=%d\n", err)
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Cannot get AHB SS clock err=%d\n"
err
err
return err;
err
err
dev_dbg(&pdev->dev, "clock ahb_ss acquired\n");
dev_dbg(&pdev->dev, "clock ahb_ss acquired\n")
dev_dbg
dev_dbg
&pdev->dev
pdev->dev
pdev
pdev
dev
"clock ahb_ss acquired\n"
ss->reset = devm_reset_control_get_optional(&pdev->dev, "ahb");
ss->reset = devm_reset_control_get_optional(&pdev->dev, "ahb")
ss->reset
ss
ss
reset
devm_reset_control_get_optional(&pdev->dev, "ahb")
devm_reset_control_get_optional
devm_reset_control_get_optional
&pdev->dev
pdev->dev
pdev
pdev
dev
"ahb"
if (IS_ERR(ss->reset)) {		if (PTR_ERR(ss->reset) == -EPROBE_DEFER)			return PTR_ERR(ss->reset);		dev_info(&pdev->dev, "no reset control found\n");		ss->reset = NULL;	}
IS_ERR(ss->reset)
IS_ERR
IS_ERR
ss->reset
ss
ss
reset
{		if (PTR_ERR(ss->reset) == -EPROBE_DEFER)			return PTR_ERR(ss->reset);		dev_info(&pdev->dev, "no reset control found\n");		ss->reset = NULL;	}
if (PTR_ERR(ss->reset) == -EPROBE_DEFER)			return PTR_ERR(ss->reset);
PTR_ERR(ss->reset) == -EPROBE_DEFER
PTR_ERR(ss->reset)
PTR_ERR
PTR_ERR
ss->reset
ss
ss
reset
-EPROBE_DEFER
EPROBE_DEFER
EPROBE_DEFER
return PTR_ERR(ss->reset);
PTR_ERR(ss->reset)
PTR_ERR
PTR_ERR
ss->reset
ss
ss
reset
dev_info(&pdev->dev, "no reset control found\n");
dev_info(&pdev->dev, "no reset control found\n")
dev_info
dev_info
&pdev->dev
pdev->dev
pdev
pdev
dev
"no reset control found\n"
ss->reset = NULL;
ss->reset = NULL
ss->reset
ss
ss
reset
NULL
NULL
err = clk_prepare_enable(ss->busclk);
err = clk_prepare_enable(ss->busclk)
err
err
clk_prepare_enable(ss->busclk)
clk_prepare_enable
clk_prepare_enable
ss->busclk
ss
ss
busclk
if (err) {		dev_err(&pdev->dev, "Cannot prepare_enable busclk\n");		return err;	}
err
err
{		dev_err(&pdev->dev, "Cannot prepare_enable busclk\n");		return err;	}
dev_err(&pdev->dev, "Cannot prepare_enable busclk\n");
dev_err(&pdev->dev, "Cannot prepare_enable busclk\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Cannot prepare_enable busclk\n"
return err;
err
err
err = clk_prepare_enable(ss->ssclk);
err = clk_prepare_enable(ss->ssclk)
err
err
clk_prepare_enable(ss->ssclk)
clk_prepare_enable
clk_prepare_enable
ss->ssclk
ss
ss
ssclk
if (err) {		dev_err(&pdev->dev, "Cannot prepare_enable ssclk\n");		goto error_ssclk;	}
err
err
{		dev_err(&pdev->dev, "Cannot prepare_enable ssclk\n");		goto error_ssclk;	}
dev_err(&pdev->dev, "Cannot prepare_enable ssclk\n");
dev_err(&pdev->dev, "Cannot prepare_enable ssclk\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Cannot prepare_enable ssclk\n"
goto error_ssclk;
error_ssclk
err = clk_set_rate(ss->ssclk, cr_mod);
err = clk_set_rate(ss->ssclk, cr_mod)
err
err
clk_set_rate(ss->ssclk, cr_mod)
clk_set_rate
clk_set_rate
ss->ssclk
ss
ss
ssclk
cr_mod
cr_mod
if (err) {		dev_err(&pdev->dev, "Cannot set clock rate to ssclk\n");		goto error_clk;	}
err
err
{		dev_err(&pdev->dev, "Cannot set clock rate to ssclk\n");		goto error_clk;	}
dev_err(&pdev->dev, "Cannot set clock rate to ssclk\n");
dev_err(&pdev->dev, "Cannot set clock rate to ssclk\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Cannot set clock rate to ssclk\n"
goto error_clk;
error_clk
if (ss->reset) {		err = reset_control_deassert(ss->reset);		if (err) {			dev_err(&pdev->dev, "Cannot deassert reset control\n");			goto error_clk;		}	}
ss->reset
ss
ss
reset
{		err = reset_control_deassert(ss->reset);		if (err) {			dev_err(&pdev->dev, "Cannot deassert reset control\n");			goto error_clk;		}	}
err = reset_control_deassert(ss->reset);
err = reset_control_deassert(ss->reset)
err
err
reset_control_deassert(ss->reset)
reset_control_deassert
reset_control_deassert
ss->reset
ss
ss
reset
if (err) {			dev_err(&pdev->dev, "Cannot deassert reset control\n");			goto error_clk;		}
err
err
{			dev_err(&pdev->dev, "Cannot deassert reset control\n");			goto error_clk;		}
dev_err(&pdev->dev, "Cannot deassert reset control\n");
dev_err(&pdev->dev, "Cannot deassert reset control\n")
dev_err
dev_err
&pdev->dev
pdev->dev
pdev
pdev
dev
"Cannot deassert reset control\n"
goto error_clk;
error_clk
cr = clk_get_rate(ss->busclk);
cr = clk_get_rate(ss->busclk)
cr
cr
clk_get_rate(ss->busclk)
clk_get_rate
clk_get_rate
ss->busclk
ss
ss
busclk
if (cr >= cr_ahb)		dev_dbg(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			cr, cr / 1000000, cr_ahb);	else		dev_warn(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			 cr, cr / 1000000, cr_ahb);
cr >= cr_ahb
cr
cr
cr_ahb
cr_ahb
dev_dbg(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			cr, cr / 1000000, cr_ahb);
dev_dbg(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			cr, cr / 1000000, cr_ahb)
dev_dbg
dev_dbg
&pdev->dev
pdev->dev
pdev
pdev
dev
"Clock bus %lu (%lu MHz) (must be >= %lu)\n"
cr
cr
cr / 1000000
cr
cr
1000000
cr_ahb
cr_ahb
dev_warn(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			 cr, cr / 1000000, cr_ahb);
dev_warn(&pdev->dev, "Clock bus %lu (%lu MHz) (must be >= %lu)\n",			 cr, cr / 1000000, cr_ahb)
dev_warn
dev_warn
&pdev->dev
pdev->dev
pdev
pdev
dev
"Clock bus %lu (%lu MHz) (must be >= %lu)\n"
cr
cr
cr / 1000000
cr
cr
1000000
cr_ahb
cr_ahb
cr = clk_get_rate(ss->ssclk);
cr = clk_get_rate(ss->ssclk)
cr
cr
clk_get_rate(ss->ssclk)
clk_get_rate
clk_get_rate
ss->ssclk
ss
ss
ssclk
if (cr <= cr_mod)		if (cr < cr_mod)			dev_warn(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				 cr, cr / 1000000, cr_mod);		else			dev_dbg(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				cr, cr / 1000000, cr_mod);	else		dev_warn(&pdev->dev, "Clock ss is at %lu (%lu MHz) (must be <= %lu)\n",			 cr, cr / 1000000, cr_mod);
cr <= cr_mod
cr
cr
cr_mod
cr_mod
if (cr < cr_mod)			dev_warn(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				 cr, cr / 1000000, cr_mod);		else			dev_dbg(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				cr, cr / 1000000, cr_mod);
cr < cr_mod
cr
cr
cr_mod
cr_mod
dev_warn(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				 cr, cr / 1000000, cr_mod);
dev_warn(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				 cr, cr / 1000000, cr_mod)
dev_warn
dev_warn
&pdev->dev
pdev->dev
pdev
pdev
dev
"Clock ss %lu (%lu MHz) (must be <= %lu)\n"
cr
cr
cr / 1000000
cr
cr
1000000
cr_mod
cr_mod
dev_dbg(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				cr, cr / 1000000, cr_mod);
dev_dbg(&pdev->dev, "Clock ss %lu (%lu MHz) (must be <= %lu)\n",				cr, cr / 1000000, cr_mod)
dev_dbg
dev_dbg
&pdev->dev
pdev->dev
pdev
pdev
dev
"Clock ss %lu (%lu MHz) (must be <= %lu)\n"
cr
cr
cr / 1000000
cr
cr
1000000
cr_mod
cr_mod
dev_warn(&pdev->dev, "Clock ss is at %lu (%lu MHz) (must be <= %lu)\n",			 cr, cr / 1000000, cr_mod);
dev_warn(&pdev->dev, "Clock ss is at %lu (%lu MHz) (must be <= %lu)\n",			 cr, cr / 1000000, cr_mod)
dev_warn
dev_warn
&pdev->dev
pdev->dev
pdev
pdev
dev
"Clock ss is at %lu (%lu MHz) (must be <= %lu)\n"
cr
cr
cr / 1000000
cr
cr
1000000
cr_mod
cr_mod
writel(SS_ENABLED, ss->base + SS_CTL);
writel(SS_ENABLED, ss->base + SS_CTL)
writel
writel
SS_ENABLED
SS_ENABLED
ss->base + SS_CTL
ss->base
ss
ss
base
SS_CTL
SS_CTL
v = readl(ss->base + SS_CTL);
v = readl(ss->base + SS_CTL)
v
v
readl(ss->base + SS_CTL)
readl
readl
ss->base + SS_CTL
ss->base
ss
ss
base
SS_CTL
SS_CTL
v >>= 16;
v >>= 16
v
v
16
v &= 0x07;
v &= 0x07
v
v
0x07
dev_info(&pdev->dev, "Die ID %d\n", v);
dev_info(&pdev->dev, "Die ID %d\n", v)
dev_info
dev_info
&pdev->dev
pdev->dev
pdev
pdev
dev
"Die ID %d\n"
v
v
writel(0, ss->base + SS_CTL);
writel(0, ss->base + SS_CTL)
writel
writel
0
ss->base + SS_CTL
ss->base
ss
ss
base
SS_CTL
SS_CTL
ss->dev = &pdev->dev;
ss->dev = &pdev->dev
ss->dev
ss
ss
dev
&pdev->dev
pdev->dev
pdev
pdev
dev
spin_lock_init(&ss->slock);
spin_lock_init(&ss->slock)
spin_lock_init
spin_lock_init
&ss->slock
ss->slock
ss
ss
slock
for (i = 0; i < ARRAY_SIZE(ss_algs); i++) {		ss_algs[i].ss = ss;		switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			err = crypto_register_skcipher(&ss_algs[i].alg.crypto);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_AHASH:			err = crypto_register_ahash(&ss_algs[i].alg.hash);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_RNG:			err = crypto_register_rng(&ss_algs[i].alg.rng);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name);			}			break;		}	}
i = 0;
i = 0
i
i
0
i < ARRAY_SIZE(ss_algs)
i
i
ARRAY_SIZE(ss_algs)
ARRAY_SIZE
ARRAY_SIZE
ss_algs
ss_algs
i++
i
i
{		ss_algs[i].ss = ss;		switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			err = crypto_register_skcipher(&ss_algs[i].alg.crypto);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_AHASH:			err = crypto_register_ahash(&ss_algs[i].alg.hash);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_RNG:			err = crypto_register_rng(&ss_algs[i].alg.rng);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name);			}			break;		}	}
ss_algs[i].ss = ss;
ss_algs[i].ss = ss
ss_algs[i].ss
ss_algs[i]
ss_algs
ss_algs
i
i
ss
ss
ss
switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			err = crypto_register_skcipher(&ss_algs[i].alg.crypto);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_AHASH:			err = crypto_register_ahash(&ss_algs[i].alg.hash);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_RNG:			err = crypto_register_rng(&ss_algs[i].alg.rng);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name);			}			break;		}
ss_algs[i].type
ss_algs[i]
ss_algs
ss_algs
i
i
type
{		case CRYPTO_ALG_TYPE_SKCIPHER:			err = crypto_register_skcipher(&ss_algs[i].alg.crypto);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_AHASH:			err = crypto_register_ahash(&ss_algs[i].alg.hash);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name);				goto error_alg;			}			break;		case CRYPTO_ALG_TYPE_RNG:			err = crypto_register_rng(&ss_algs[i].alg.rng);			if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name);			}			break;		}
case CRYPTO_ALG_TYPE_SKCIPHER:
CRYPTO_ALG_TYPE_SKCIPHER
CRYPTO_ALG_TYPE_SKCIPHER
err = crypto_register_skcipher(&ss_algs[i].alg.crypto);
err = crypto_register_skcipher(&ss_algs[i].alg.crypto)
err
err
crypto_register_skcipher(&ss_algs[i].alg.crypto)
crypto_register_skcipher
crypto_register_skcipher
&ss_algs[i].alg.crypto
ss_algs[i].alg.crypto
ss_algs[i].alg
ss_algs[i]
ss_algs
ss_algs
i
i
alg
crypto
if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name);				goto error_alg;			}
err
err
{				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name);				goto error_alg;			}
dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name);
dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.crypto.base.cra_name)
dev_err
dev_err
ss->dev
ss
ss
dev
"Fail to register %s\n"
ss_algs[i].alg.crypto.base.cra_name
ss_algs[i].alg.crypto.base
ss_algs[i].alg.crypto
ss_algs[i].alg
ss_algs[i]
ss_algs
ss_algs
i
i
alg
crypto
base
cra_name
goto error_alg;
error_alg
break;
case CRYPTO_ALG_TYPE_AHASH:
CRYPTO_ALG_TYPE_AHASH
CRYPTO_ALG_TYPE_AHASH
err = crypto_register_ahash(&ss_algs[i].alg.hash);
err = crypto_register_ahash(&ss_algs[i].alg.hash)
err
err
crypto_register_ahash(&ss_algs[i].alg.hash)
crypto_register_ahash
crypto_register_ahash
&ss_algs[i].alg.hash
ss_algs[i].alg.hash
ss_algs[i].alg
ss_algs[i]
ss_algs
ss_algs
i
i
alg
hash
if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name);				goto error_alg;			}
err
err
{				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name);				goto error_alg;			}
dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name);
dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.hash.halg.base.cra_name)
dev_err
dev_err
ss->dev
ss
ss
dev
"Fail to register %s\n"
ss_algs[i].alg.hash.halg.base.cra_name
ss_algs[i].alg.hash.halg.base
ss_algs[i].alg.hash.halg
ss_algs[i].alg.hash
ss_algs[i].alg
ss_algs[i]
ss_algs
ss_algs
i
i
alg
hash
halg
base
cra_name
goto error_alg;
error_alg
break;
case CRYPTO_ALG_TYPE_RNG:
CRYPTO_ALG_TYPE_RNG
CRYPTO_ALG_TYPE_RNG
err = crypto_register_rng(&ss_algs[i].alg.rng);
err = crypto_register_rng(&ss_algs[i].alg.rng)
err
err
crypto_register_rng(&ss_algs[i].alg.rng)
crypto_register_rng
crypto_register_rng
&ss_algs[i].alg.rng
ss_algs[i].alg.rng
ss_algs[i].alg
ss_algs[i]
ss_algs
ss_algs
i
i
alg
rng
if (err) {				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name);			}
err
err
{				dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name);			}
dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name);
dev_err(ss->dev, "Fail to register %s\n",					ss_algs[i].alg.rng.base.cra_name)
dev_err
dev_err
ss->dev
ss
ss
dev
"Fail to register %s\n"
ss_algs[i].alg.rng.base.cra_name
ss_algs[i].alg.rng.base
ss_algs[i].alg.rng
ss_algs[i].alg
ss_algs[i]
ss_algs
ss_algs
i
i
alg
rng
base
cra_name
break;
platform_set_drvdata(pdev, ss);
platform_set_drvdata(pdev, ss)
platform_set_drvdata
platform_set_drvdata
pdev
pdev
ss
ss
return 0;
0
error_alg:	i--;
error_alg
i--;
i--
i
i
for (; i >= 0; i--) {		switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			crypto_unregister_skcipher(&ss_algs[i].alg.crypto);			break;		case CRYPTO_ALG_TYPE_AHASH:			crypto_unregister_ahash(&ss_algs[i].alg.hash);			break;		case CRYPTO_ALG_TYPE_RNG:			crypto_unregister_rng(&ss_algs[i].alg.rng);			break;		}	}
;
i >= 0
i
i
0
i--
i
i
{		switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			crypto_unregister_skcipher(&ss_algs[i].alg.crypto);			break;		case CRYPTO_ALG_TYPE_AHASH:			crypto_unregister_ahash(&ss_algs[i].alg.hash);			break;		case CRYPTO_ALG_TYPE_RNG:			crypto_unregister_rng(&ss_algs[i].alg.rng);			break;		}	}
switch (ss_algs[i].type) {		case CRYPTO_ALG_TYPE_SKCIPHER:			crypto_unregister_skcipher(&ss_algs[i].alg.crypto);			break;		case CRYPTO_ALG_TYPE_AHASH:			crypto_unregister_ahash(&ss_algs[i].alg.hash);			break;		case CRYPTO_ALG_TYPE_RNG:			crypto_unregister_rng(&ss_algs[i].alg.rng);			break;		}
ss_algs[i].type
ss_algs[i]
ss_algs
ss_algs
i
i
type
{		case CRYPTO_ALG_TYPE_SKCIPHER:			crypto_unregister_skcipher(&ss_algs[i].alg.crypto);			break;		case CRYPTO_ALG_TYPE_AHASH:			crypto_unregister_ahash(&ss_algs[i].alg.hash);			break;		case CRYPTO_ALG_TYPE_RNG:			crypto_unregister_rng(&ss_algs[i].alg.rng);			break;		}
case CRYPTO_ALG_TYPE_SKCIPHER:
CRYPTO_ALG_TYPE_SKCIPHER
CRYPTO_ALG_TYPE_SKCIPHER
crypto_unregister_skcipher(&ss_algs[i].alg.crypto);
crypto_unregister_skcipher(&ss_algs[i].alg.crypto)
crypto_unregister_skcipher
crypto_unregister_skcipher
&ss_algs[i].alg.crypto
ss_algs[i].alg.crypto
ss_algs[i].alg
ss_algs[i]
ss_algs
ss_algs
i
i
alg
crypto
break;
case CRYPTO_ALG_TYPE_AHASH:
CRYPTO_ALG_TYPE_AHASH
CRYPTO_ALG_TYPE_AHASH
crypto_unregister_ahash(&ss_algs[i].alg.hash);
crypto_unregister_ahash(&ss_algs[i].alg.hash)
crypto_unregister_ahash
crypto_unregister_ahash
&ss_algs[i].alg.hash
ss_algs[i].alg.hash
ss_algs[i].alg
ss_algs[i]
ss_algs
ss_algs
i
i
alg
hash
break;
case CRYPTO_ALG_TYPE_RNG:
CRYPTO_ALG_TYPE_RNG
CRYPTO_ALG_TYPE_RNG
crypto_unregister_rng(&ss_algs[i].alg.rng);
crypto_unregister_rng(&ss_algs[i].alg.rng)
crypto_unregister_rng
crypto_unregister_rng
&ss_algs[i].alg.rng
ss_algs[i].alg.rng
ss_algs[i].alg
ss_algs[i]
ss_algs
ss_algs
i
i
alg
rng
break;
if (ss->reset)		reset_control_assert(ss->reset);
ss->reset
ss
ss
reset
reset_control_assert(ss->reset);
reset_control_assert(ss->reset)
reset_control_assert
reset_control_assert
ss->reset
ss
ss
reset
error_clk:	clk_disable_unprepare(ss->ssclk);
error_clk
clk_disable_unprepare(ss->ssclk);
clk_disable_unprepare(ss->ssclk)
clk_disable_unprepare
clk_disable_unprepare
ss->ssclk
ss
ss
ssclk
error_ssclk:	clk_disable_unprepare(ss->busclk);
error_ssclk
clk_disable_unprepare(ss->busclk);
clk_disable_unprepare(ss->busclk)
clk_disable_unprepare
clk_disable_unprepare
ss->busclk
ss
ss
busclk
return err;
err
err
-----joern-----
(431,7,0)
(98,57,0)
(367,2,0)
(213,244,0)
(431,9,0)
(163,9,0)
(424,13,0)
(134,60,0)
(180,565,0)
(259,372,0)
(90,187,0)
(218,186,0)
(29,65,0)
(531,60,0)
(510,571,0)
(50,544,0)
(478,436,0)
(420,352,0)
(98,176,0)
(151,485,0)
(390,321,0)
(49,175,0)
(29,518,0)
(181,9,0)
(168,287,0)
(229,482,0)
(11,235,0)
(321,140,0)
(483,217,0)
(201,353,0)
(545,426,0)
(448,298,0)
(34,33,0)
(460,449,0)
(459,9,0)
(235,11,0)
(252,9,0)
(230,95,0)
(525,258,0)
(191,332,0)
(384,244,0)
(261,551,0)
(519,64,0)
(114,436,0)
(383,429,0)
(499,181,0)
(60,345,0)
(470,580,0)
(482,13,0)
(329,249,0)
(290,121,0)
(139,395,0)
(146,175,0)
(222,400,0)
(288,500,0)
(18,140,0)
(143,345,0)
(48,345,0)
(116,9,0)
(198,65,0)
(177,340,0)
(427,11,0)
(446,177,0)
(326,582,0)
(317,311,0)
(437,65,0)
(445,47,0)
(323,479,0)
(188,121,0)
(250,578,0)
(442,436,0)
(493,519,0)
(460,258,0)
(160,290,0)
(373,497,0)
(428,511,0)
(221,494,0)
(483,234,0)
(540,329,0)
(193,9,0)
(65,437,0)
(585,290,0)
(209,436,0)
(399,500,0)
(494,149,0)
(327,23,0)
(170,293,0)
(83,62,0)
(358,320,0)
(206,316,0)
(277,294,0)
(95,345,0)
(82,326,0)
(514,469,0)
(302,11,0)
(582,469,0)
(177,436,0)
(189,396,0)
(370,10,0)
(98,549,0)
(504,63,0)
(436,9,0)
(438,311,0)
(143,9,0)
(21,287,0)
(4,9,0)
(192,313,0)
(551,469,0)
(310,500,0)
(108,378,0)
(350,80,0)
(498,76,0)
(225,326,0)
(516,518,0)
(64,15,0)
(45,72,0)
(339,21,0)
(52,484,0)
(518,231,0)
(296,329,0)
(123,87,0)
(188,153,0)
(452,409,0)
(283,270,0)
(378,436,0)
(96,482,0)
(26,14,0)
(2,345,0)
(194,131,0)
(486,419,0)
(580,9,0)
(505,121,0)
(244,213,0)
(498,436,0)
(39,407,0)
(378,9,0)
(351,521,0)
(19,9,0)
(56,576,0)
(422,287,0)
(438,64,0)
(102,568,0)
(21,339,0)
(353,311,0)
(461,51,0)
(247,9,0)
(447,436,0)
(455,479,0)
(76,498,0)
(122,277,0)
(171,450,0)
(311,282,0)
(282,31,0)
(30,497,0)
(583,450,0)
(158,9,0)
(193,358,0)
(361,118,0)
(511,436,0)
(10,484,0)
(127,9,0)
(236,9,0)
(334,16,0)
(183,574,0)
(475,487,0)
(53,216,0)
(37,170,0)
(235,528,0)
(120,126,0)
(353,16,0)
(167,39,0)
(507,24,0)
(398,223,0)
(269,104,0)
(432,514,0)
(249,329,0)
(154,465,0)
(441,410,0)
(212,339,0)
(487,469,0)
(570,280,0)
(224,501,0)
(458,193,0)
(418,216,0)
(402,9,0)
(401,447,0)
(181,291,0)
(387,64,0)
(310,580,0)
(386,550,0)
(98,122,0)
(175,469,0)
(434,499,0)
(72,417,0)
(73,195,0)
(372,224,0)
(513,9,0)
(425,121,0)
(205,217,0)
(449,9,0)
(479,9,0)
(568,436,0)
(308,88,0)
(535,309,0)
(580,332,0)
(373,352,0)
(10,9,0)
(379,419,0)
(264,217,0)
(187,469,0)
(556,548,0)
(435,370,0)
(166,222,0)
(20,442,0)
(455,436,0)
(101,582,0)
(340,177,0)
(280,165,0)
(12,273,0)
(117,112,0)
(17,438,0)
(391,436,0)
(417,72,0)
(497,181,0)
(64,9,0)
(98,128,0)
(394,236,0)
(91,76,0)
(446,514,0)
(409,404,0)
(552,462,0)
(258,480,0)
(368,483,0)
(103,78,0)
(40,449,0)
(272,469,0)
(456,460,0)
(577,9,0)
(210,379,0)
(337,216,0)
(7,431,0)
(463,409,0)
(103,62,0)
(539,9,0)
(104,436,0)
(65,29,0)
(217,483,0)
(537,261,0)
(559,10,0)
(199,232,0)
(429,135,0)
(231,518,0)
(203,231,0)
(106,337,0)
(332,9,0)
(304,450,0)
(344,114,0)
(196,14,0)
(174,16,0)
(28,375,0)
(544,64,0)
(88,311,0)
(136,450,0)
(80,213,0)
(578,223,0)
(392,391,0)
(141,340,0)
(72,45,0)
(175,146,0)
(319,248,0)
(444,578,0)
(494,221,0)
(569,438,0)
(112,117,0)
(91,410,0)
(321,345,0)
(200,9,0)
(276,582,0)
(46,321,0)
(38,9,0)
(145,313,0)
(253,487,0)
(448,469,0)
(573,521,0)
(176,41,0)
(430,205,0)
(176,315,0)
(342,125,0)
(534,370,0)
(537,366,0)
(501,311,0)
(421,511,0)
(232,85,0)
(584,426,0)
(330,559,0)
(232,131,0)
(278,436,0)
(413,332,0)
(268,411,0)
(132,185,0)
(187,90,0)
(388,501,0)
(176,426,0)
(63,504,0)
(348,176,0)
(574,469,0)
(490,9,0)
(542,258,0)
(176,104,0)
(13,482,0)
(501,64,0)
(482,345,0)
(209,181,0)
(27,9,0)
(248,319,0)
(433,436,0)
(221,450,0)
(355,17,0)
(140,321,0)
(278,125,0)
(147,1,0)
(216,337,0)
(256,459,0)
(216,53,0)
(400,485,0)
(155,353,0)
(201,272,0)
(515,449,0)
(478,242,0)
(471,23,0)
(333,277,0)
(550,131,0)
(362,272,0)
(326,225,0)
(426,436,0)
(153,188,0)
(352,10,0)
(313,345,0)
(395,558,0)
(409,436,0)
(485,400,0)
(240,370,0)
(115,111,0)
(329,429,0)
(238,144,0)
(236,435,0)
(416,438,0)
(512,372,0)
(242,478,0)
(71,9,0)
(256,9,0)
(371,9,0)
(265,25,0)
(208,531,0)
(93,411,0)
(438,416,0)
(184,93,0)
(508,9,0)
(366,9,0)
(173,2,0)
(416,64,0)
(336,3,0)
(45,266,0)
(67,273,0)
(5,447,0)
(22,498,0)
(224,372,0)
(75,395,0)
(268,277,0)
(177,446,0)
(480,24,0)
(440,283,0)
(499,318,0)
(567,352,0)
(271,25,0)
(100,416,0)
(305,396,0)
(283,9,0)
(548,339,0)
(35,9,0)
(442,468,0)
(453,104,0)
(526,548,0)
(90,39,0)
(231,436,0)
(16,64,0)
(291,298,0)
(245,438,0)
(24,469,0)
(543,367,0)
(379,210,0)
(380,258,0)
(404,509,0)
(176,497,0)
(389,244,0)
(347,437,0)
(316,529,0)
(455,575,0)
(185,146,0)
(354,448,0)
(423,431,0)
(553,442,0)
(454,153,0)
(340,141,0)
(559,436,0)
(585,350,0)
(92,462,0)
(492,355,0)
(518,397,0)
(315,404,0)
(148,158,0)
(63,345,0)
(511,366,0)
(565,436,0)
(267,62,0)
(320,469,0)
(234,483,0)
(169,235,0)
(496,24,0)
(211,107,0)
(161,121,0)
(215,320,0)
(205,502,0)
(126,120,0)
(256,188,0)
(329,366,0)
(107,211,0)
(464,416,0)
(256,238,0)
(282,311,0)
(294,277,0)
(294,375,0)
(548,449,0)
(356,286,0)
(465,345,0)
(369,141,0)
(114,205,0)
(195,366,0)
(61,576,0)
(84,121,0)
(111,263,0)
(437,140,0)
(149,494,0)
(467,514,0)
(357,462,0)
(315,436,0)
(566,114,0)
(86,9,0)
(170,469,0)
(343,121,0)
(7,447,0)
(309,345,0)
(118,135,0)
(62,103,0)
(97,355,0)
(414,497,0)
(129,126,0)
(412,501,0)
(246,266,0)
(42,537,0)
(186,9,0)
(447,7,0)
(295,271,0)
(275,502,0)
(373,41,0)
(363,9,0)
(337,345,0)
(131,529,0)
(80,350,0)
(491,107,0)
(131,85,0)
(312,580,0)
(202,469,0)
(576,485,0)
(433,181,0)
(99,544,0)
(532,455,0)
(274,60,0)
(238,249,0)
(514,446,0)
(213,80,0)
(197,213,0)
(146,185,0)
(255,29,0)
(77,195,0)
(575,455,0)
(251,187,0)
(536,2,0)
(511,429,0)
(23,345,0)
(485,576,0)
(58,223,0)
(329,436,0)
(1,311,0)
(318,459,0)
(15,64,0)
(439,7,0)
(533,316,0)
(395,436,0)
(316,479,0)
(113,237,0)
(256,290,0)
(79,31,0)
(341,459,0)
(16,353,0)
(501,544,0)
(69,9,0)
(279,121,0)
(235,409,0)
(332,35,0)
(561,539,0)
(498,366,0)
(298,291,0)
(395,181,0)
(124,53,0)
(426,479,0)
(217,205,0)
(557,35,0)
(280,436,0)
(228,353,0)
(150,209,0)
(35,78,0)
(447,10,0)
(115,487,0)
(272,201,0)
(554,460,0)
(222,469,0)
(411,93,0)
(234,444,0)
(24,480,0)
(266,45,0)
(335,187,0)
(202,138,0)
(466,121,0)
(17,355,0)
(14,469,0)
(495,80,0)
(346,143,0)
(142,485,0)
(178,520,0)
(98,232,0)
(254,280,0)
(378,469,0)
(562,504,0)
(13,149,0)
(396,345,0)
(242,9,0)
(520,263,0)
(152,272,0)
(25,271,0)
(581,381,0)
(370,436,0)
(258,339,0)
(405,568,0)
(563,521,0)
(576,449,0)
(511,472,0)
(375,181,0)
(365,63,0)
(442,10,0)
(375,436,0)
(172,268,0)
(87,57,0)
(6,498,0)
(220,435,0)
(382,33,0)
(300,9,0)
(417,121,0)
(165,280,0)
(400,222,0)
(43,112,0)
(523,135,0)
(268,377,0)
(153,454,0)
(114,404,0)
(182,450,0)
(98,256,0)
(355,469,0)
(211,118,0)
(273,120,0)
(23,3,0)
(248,286,0)
(359,417,0)
(472,511,0)
(92,547,0)
(571,436,0)
(15,433,0)
(408,455,0)
(176,352,0)
(159,34,0)
(374,112,0)
(209,88,0)
(307,345,0)
(156,9,0)
(509,574,0)
(443,121,0)
(66,41,0)
(325,195,0)
(59,149,0)
(503,9,0)
(328,278,0)
(485,339,0)
(376,574,0)
(358,193,0)
(473,345,0)
(298,448,0)
(258,460,0)
(258,449,0)
(88,539,0)
(568,0,0)
(3,23,0)
(44,188,0)
(373,426,0)
(454,271,0)
(8,41,0)
(501,224,0)
(105,353,0)
(176,145,0)
(393,501,0)
(277,377,0)
(580,310,0)
(582,326,0)
(286,248,0)
(34,117,0)
(360,209,0)
(518,29,0)
(403,478,0)
(489,396,0)
(529,131,0)
(47,345,0)
(293,323,0)
(243,473,0)
(366,537,0)
(372,469,0)
(527,565,0)
(338,222,0)
(409,235,0)
(435,236,0)
(474,551,0)
(68,478,0)
(318,499,0)
(522,489,0)
(60,531,0)
(459,318,0)
(549,239,0)
(262,1,0)
(484,10,0)
(287,21,0)
(186,332,0)
(104,429,0)
(436,177,0)
(94,175,0)
(538,444,0)
(353,64,0)
(195,436,0)
(349,433,0)
(1,64,0)
(292,551,0)
(530,309,0)
(427,53,0)
(98,520,0)
(488,436,0)
(39,90,0)
(11,427,0)
(78,35,0)
(76,91,0)
(558,395,0)
(381,465,0)
(524,186,0)
(578,444,0)
(210,450,0)
(205,114,0)
(98,373,0)
(323,293,0)
(149,13,0)
(137,313,0)
(31,282,0)
(266,531,0)
(204,21,0)
(270,14,0)
(575,9,0)
(55,291,0)
(352,436,0)
(546,9,0)
(110,122,0)
(214,550,0)
(233,93,0)
(47,25,0)
(133,238,0)
(468,442,0)
(555,448,0)
(364,202,0)
(311,9,0)
(249,238,0)
(489,419,0)
(89,47,0)
(62,10,0)
(195,73,0)
(40,571,0)
(41,366,0)
(111,115,0)
(411,268,0)
(93,469,0)
(462,436,0)
(500,469,0)
(559,330,0)
(571,479,0)
(484,469,0)
(244,345,0)
(313,145,0)
(573,158,0)
(73,373,0)
(185,239,0)
(531,266,0)
(320,358,0)
(370,435,0)
(119,256,0)
(500,310,0)
(0,568,0)
(480,258,0)
(299,375,0)
(481,465,0)
(465,381,0)
(176,9,0)
(158,573,0)
(571,40,0)
(74,488,0)
(51,128,0)
(549,352,0)
(293,170,0)
(140,437,0)
(517,450,0)
(520,158,0)
(301,234,0)
(290,585,0)
(330,549,0)
(285,438,0)
(406,170,0)
(53,427,0)
(415,559,0)
(126,506,0)
(451,231,0)
(54,268,0)
(457,323,0)
(322,378,0)
(544,501,0)
(314,484,0)
(219,519,0)
(122,377,0)
(331,31,0)
(190,320,0)
(179,397,0)
(223,578,0)
(539,88,0)
(138,202,0)
(286,367,0)
(477,202,0)
(25,47,0)
(404,9,0)
(367,286,0)
(550,85,0)
(284,436,0)
(273,469,0)
(521,573,0)
(227,315,0)
(568,479,0)
(118,211,0)
(564,506,0)
(353,201,0)
(547,92,0)
(231,404,0)
(476,145,0)
(479,323,0)
(112,469,0)
(261,537,0)
(81,337,0)
(241,103,0)
(551,261,0)
(32,282,0)
(433,15,0)
(419,379,0)
(485,449,0)
(550,138,0)
(574,509,0)
(291,181,0)
(529,316,0)
(14,270,0)
(385,433,0)
(138,550,0)
(162,488,0)
(303,427,0)
(107,469,0)
(444,234,0)
(41,436,0)
(2,367,0)
(70,121,0)
(120,273,0)
(572,499,0)
(410,91,0)
(478,181,0)
(509,404,0)
(36,9,0)
(521,436,0)
(164,315,0)
(130,559,0)
(449,40,0)
(280,366,0)
(579,144,0)
(260,177,0)
(324,107,0)
(462,92,0)
(207,407,0)
(257,571,0)
(226,485,0)
(117,34,0)
(319,450,0)
(438,17,0)
(497,436,0)
(78,103,0)
(289,111,0)
(519,311,0)
(499,436,0)
(419,489,0)
(375,294,0)
(256,539,0)
(547,9,0)
(487,115,0)
(521,479,0)
(62,436,0)
(223,345,0)
(316,436,0)
(270,283,0)
(396,489,0)
(88,209,0)
(350,585,0)
(271,454,0)
(339,9,0)
(145,278,0)
(391,436,1)
(176,497,1)
(258,449,1)
(544,99,1)
(433,385,1)
(40,571,1)
(320,215,1)
(138,202,1)
(378,469,1)
(195,77,1)
(169,409,1)
(551,474,1)
(289,115,1)
(296,540,1)
(333,558,1)
(435,370,1)
(491,91,1)
(446,514,1)
(104,436,1)
(63,504,1)
(24,496,1)
(335,560,1)
(269,118,1)
(551,469,1)
(18,321,1)
(213,244,1)
(168,204,1)
(514,432,1)
(455,436,1)
(575,455,1)
(266,246,1)
(297,290,1)
(355,492,1)
(476,313,1)
(103,241,1)
(233,277,1)
(278,328,1)
(360,561,1)
(485,576,1)
(419,489,1)
(449,40,1)
(46,516,1)
(570,366,1)
(216,418,1)
(479,323,1)
(569,245,1)
(489,522,1)
(176,352,1)
(467,284,1)
(265,47,1)
(571,436,1)
(452,109,1)
(372,512,1)
(516,231,1)
(5,423,1)
(187,251,1)
(514,469,1)
(465,345,1)
(89,44,1)
(93,184,1)
(355,469,1)
(88,308,1)
(535,473,1)
(331,32,1)
(553,10,1)
(258,460,1)
(261,551,1)
(151,576,1)
(394,353,1)
(30,414,1)
(3,336,1)
(442,20,1)
(489,396,1)
(498,6,1)
(318,499,1)
(343,235,1)
(436,177,1)
(405,102,1)
(179,518,1)
(270,14,1)
(291,55,1)
(282,31,1)
(6,22,1)
(232,131,1)
(62,10,1)
(461,225,1)
(373,41,1)
(242,478,1)
(537,261,1)
(95,345,1)
(91,76,1)
(548,449,1)
(171,319,1)
(143,345,1)
(351,563,1)
(382,34,1)
(43,374,1)
(42,261,1)
(524,218,1)
(530,535,1)
(45,266,1)
(462,357,1)
(560,238,1)
(52,352,1)
(421,565,1)
(568,436,1)
(477,364,1)
(545,193,1)
(257,515,1)
(301,444,1)
(26,196,1)
(396,189,1)
(268,54,1)
(255,65,1)
(386,214,1)
(176,41,1)
(209,436,1)
(375,299,1)
(554,456,1)
(465,154,1)
(434,341,1)
(114,404,1)
(416,64,1)
(393,412,1)
(34,117,1)
(150,360,1)
(475,253,1)
(313,345,1)
(522,396,1)
(193,358,1)
(340,141,1)
(234,444,1)
(409,436,1)
(472,511,1)
(60,345,1)
(174,228,1)
(442,436,1)
(177,340,1)
(488,436,1)
(280,366,1)
(403,68,1)
(77,325,1)
(497,30,1)
(278,436,1)
(65,437,1)
(114,566,1)
(275,205,1)
(188,153,1)
(101,311,1)
(258,339,1)
(262,519,1)
(130,185,1)
(483,368,1)
(326,82,1)
(294,375,1)
(68,564,1)
(128,51,1)
(431,7,1)
(202,469,1)
(487,475,1)
(8,283,1)
(98,57,1)
(433,181,1)
(550,131,1)
(427,303,1)
(217,483,1)
(164,431,1)
(555,497,1)
(136,221,1)
(99,50,1)
(59,13,1)
(215,190,1)
(515,488,1)
(438,64,1)
(166,338,1)
(37,406,1)
(207,39,1)
(250,223,1)
(343,109,1)
(80,495,1)
(447,10,1)
(167,90,1)
(337,106,1)
(293,170,1)
(104,453,1)
(474,292,1)
(75,139,1)
(559,415,1)
(3,23,1)
(501,64,1)
(438,17,1)
(323,293,1)
(98,232,1)
(58,398,1)
(313,192,1)
(126,120,1)
(394,501,1)
(148,165,1)
(509,574,1)
(143,346,1)
(11,427,1)
(481,278,1)
(432,467,1)
(217,264,1)
(216,337,1)
(367,2,1)
(364,131,1)
(563,148,1)
(305,3,1)
(409,404,1)
(176,104,1)
(510,257,1)
(375,436,1)
(223,345,1)
(518,231,1)
(507,548,1)
(440,270,1)
(286,367,1)
(550,138,1)
(315,227,1)
(98,176,1)
(284,225,1)
(387,485,1)
(576,61,1)
(521,351,1)
(437,347,1)
(172,411,1)
(152,1,1)
(365,345,1)
(511,429,1)
(82,582,1)
(205,114,1)
(387,258,1)
(295,25,1)
(388,544,1)
(62,436,1)
(145,476,1)
(567,391,1)
(272,362,1)
(535,143,1)
(447,401,1)
(299,28,1)
(72,45,1)
(290,585,1)
(497,436,1)
(373,426,1)
(214,138,1)
(512,259,1)
(347,140,1)
(235,11,1)
(357,552,1)
(473,243,1)
(501,224,1)
(94,49,1)
(441,76,1)
(480,24,1)
(412,224,1)
(100,569,1)
(438,285,1)
(439,447,1)
(13,482,1)
(204,212,1)
(315,436,1)
(482,96,1)
(2,345,1)
(378,436,1)
(226,142,1)
(218,332,1)
(149,59,1)
(437,140,1)
(68,565,1)
(349,387,1)
(400,222,1)
(1,311,1)
(334,174,1)
(276,101,1)
(337,345,1)
(165,280,1)
(336,23,1)
(424,482,1)
(10,484,1)
(327,471,1)
(326,582,1)
(438,311,1)
(283,270,1)
(41,436,1)
(145,313,1)
(511,428,1)
(272,469,1)
(11,302,1)
(521,436,1)
(444,538,1)
(420,567,1)
(29,255,1)
(539,88,1)
(356,367,1)
(375,181,1)
(47,445,1)
(7,447,1)
(66,8,1)
(131,529,1)
(230,161,1)
(451,541,1)
(195,366,1)
(345,48,1)
(191,35,1)
(222,469,1)
(332,35,1)
(494,149,1)
(98,520,1)
(280,436,1)
(44,381,1)
(140,18,1)
(427,53,1)
(23,327,1)
(573,521,1)
(170,37,1)
(81,169,1)
(515,560,1)
(366,537,1)
(161,297,1)
(132,146,1)
(48,307,1)
(580,312,1)
(499,181,1)
(448,354,1)
(183,376,1)
(381,465,1)
(329,436,1)
(224,372,1)
(422,168,1)
(353,64,1)
(229,3,1)
(41,66,1)
(556,526,1)
(526,449,1)
(196,0,1)
(57,87,1)
(538,578,1)
(317,339,1)
(210,379,1)
(271,295,1)
(97,1,1)
(98,256,1)
(385,349,1)
(486,489,1)
(53,216,1)
(118,361,1)
(499,436,1)
(471,309,1)
(249,329,1)
(370,534,1)
(98,128,1)
(61,56,1)
(456,525,1)
(287,422,1)
(448,469,1)
(114,436,1)
(578,250,1)
(521,479,1)
(533,194,1)
(362,152,1)
(147,262,1)
(176,315,1)
(142,400,1)
(109,417,1)
(158,573,1)
(332,413,1)
(273,469,1)
(531,208,1)
(537,42,1)
(235,409,1)
(154,481,1)
(225,326,1)
(353,201,1)
(329,296,1)
(329,366,1)
(344,297,1)
(473,345,1)
(291,298,1)
(241,62,1)
(468,442,1)
(258,480,1)
(254,570,1)
(256,119,1)
(353,16,1)
(181,291,1)
(178,111,1)
(531,60,1)
(460,449,1)
(529,316,1)
(406,426,1)
(418,337,1)
(203,451,1)
(562,365,1)
(354,555,1)
(184,233,1)
(543,2,1)
(559,436,1)
(160,381,1)
(463,452,1)
(98,373,1)
(17,355,1)
(55,298,1)
(253,157,1)
(372,469,1)
(35,78,1)
(571,479,1)
(394,438,1)
(98,122,1)
(221,494,1)
(246,531,1)
(259,519,1)
(435,220,1)
(256,290,1)
(129,120,1)
(277,294,1)
(20,553,1)
(176,426,1)
(98,549,1)
(430,114,1)
(504,562,1)
(458,358,1)
(260,340,1)
(122,277,1)
(149,13,1)
(243,583,1)
(404,509,1)
(549,352,1)
(201,272,1)
(564,126,1)
(519,311,1)
(518,29,1)
(322,63,1)
(209,181,1)
(120,273,1)
(256,539,1)
(34,159,1)
(501,311,1)
(582,276,1)
(478,403,1)
(359,381,1)
(105,16,1)
(208,60,1)
(190,558,1)
(231,203,1)
(2,173,1)
(493,64,1)
(478,436,1)
(370,436,1)
(428,421,1)
(53,124,1)
(267,557,1)
(464,100,1)
(271,25,1)
(559,10,1)
(39,90,1)
(64,15,1)
(352,436,1)
(177,260,1)
(298,448,1)
(240,394,1)
(54,172,1)
(361,211,1)
(248,286,1)
(580,332,1)
(308,209,1)
(348,378,1)
(281,539,1)
(381,581,1)
(542,460,1)
(219,493,1)
(453,269,1)
(209,150,1)
(565,436,1)
(462,436,1)
(65,198,1)
(198,437,1)
(173,536,1)
(230,381,1)
(501,388,1)
(50,393,1)
(14,469,1)
(445,89,1)
(268,277,1)
(185,132,1)
(21,287,1)
(93,469,1)
(185,146,1)
(585,350,1)
(482,345,1)
(549,330,1)
(390,46,1)
(319,248,1)
(14,26,1)
(484,314,1)
(186,332,1)
(395,75,1)
(395,436,1)
(307,547,1)
(492,97,1)
(324,491,1)
(444,578,1)
(251,335,1)
(51,461,1)
(139,181,1)
(119,575,1)
(408,532,1)
(352,420,1)
(234,301,1)
(488,162,1)
(330,559,1)
(106,81,1)
(358,320,1)
(374,306,1)
(368,234,1)
(231,436,1)
(389,160,1)
(12,281,1)
(485,400,1)
(286,356,1)
(141,369,1)
(540,133,1)
(292,41,1)
(423,580,1)
(500,469,1)
(310,500,1)
(88,311,1)
(157,158,1)
(227,164,1)
(309,530,1)
(519,219,1)
(367,543,1)
(323,457,1)
(341,157,1)
(238,249,1)
(582,469,1)
(76,498,1)
(380,480,1)
(126,129,1)
(419,486,1)
(92,462,1)
(455,408,1)
(454,271,1)
(373,73,1)
(25,265,1)
(457,293,1)
(558,395,1)
(320,469,1)
(478,181,1)
(581,465,1)
(68,472,1)
(137,63,1)
(243,3,1)
(346,275,1)
(383,104,1)
(187,469,1)
(133,488,1)
(525,380,1)
(568,479,1)
(574,469,1)
(369,446,1)
(552,404,1)
(534,240,1)
(312,470,1)
(376,315,1)
(416,464,1)
(74,281,1)
(110,268,1)
(108,322,1)
(243,171,1)
(365,95,1)
(487,469,1)
(426,584,1)
(532,242,1)
(511,366,1)
(117,112,1)
(78,103,1)
(495,213,1)
(96,229,1)
(309,345,1)
(399,186,1)
(433,436,1)
(95,230,1)
(578,223,1)
(442,10,1)
(321,390,1)
(1,64,1)
(186,524,1)
(140,321,1)
(243,136,1)
(511,436,1)
(547,92,1)
(316,479,1)
(79,331,1)
(15,433,1)
(565,527,1)
(346,179,1)
(519,64,1)
(222,166,1)
(266,531,1)
(111,115,1)
(258,542,1)
(460,554,1)
(202,477,1)
(175,94,1)
(205,217,1)
(373,497,1)
(107,324,1)
(256,188,1)
(409,463,1)
(426,436,1)
(236,435,1)
(303,53,1)
(572,434,1)
(273,67,1)
(197,244,1)
(576,449,1)
(338,548,1)
(379,419,1)
(88,209,1)
(107,469,1)
(103,62,1)
(62,83,1)
(447,436,1)
(112,43,1)
(175,469,1)
(378,108,1)
(268,411,1)
(232,199,1)
(321,345,1)
(1,147,1)
(211,107,1)
(325,91,1)
(83,267,1)
(230,343,1)
(417,72,1)
(223,58,1)
(501,544,1)
(0,568,1)
(32,317,1)
(49,468,1)
(429,383,1)
(484,469,1)
(373,352,1)
(29,65,1)
(544,64,1)
(459,318,1)
(22,165,1)
(411,93,1)
(500,288,1)
(256,238,1)
(329,429,1)
(47,345,1)
(176,348,1)
(350,80,1)
(536,3,1)
(123,391,1)
(87,123,1)
(496,507,1)
(274,134,1)
(280,254,1)
(118,211,1)
(231,404,1)
(199,550,1)
(548,339,1)
(28,333,1)
(84,541,1)
(455,479,1)
(176,145,1)
(339,21,1)
(485,151,1)
(498,366,1)
(483,234,1)
(499,572,1)
(213,197,1)
(23,345,1)
(520,158,1)
(7,439,1)
(527,180,1)
(583,210,1)
(264,483,1)
(498,436,1)
(302,427,1)
(134,359,1)
(67,12,1)
(90,187,1)
(566,344,1)
(398,430,1)
(230,84,1)
(124,216,1)
(561,306,1)
(391,392,1)
(557,236,1)
(73,195,1)
(571,510,1)
(520,178,1)
(384,389,1)
(13,424,1)
(306,459,1)
(288,399,1)
(60,274,1)
(206,533,1)
(485,339,1)
(63,345,1)
(192,137,1)
(410,441,1)
(115,487,1)
(401,5,1)
(31,79,1)
(189,305,1)
(415,130,1)
(194,0,1)
(177,446,1)
(180,309,1)
(111,289,1)
(370,10,1)
(244,345,1)
(568,405,1)
(195,436,1)
(153,454,1)
(574,183,1)
(353,311,1)
(470,310,1)
(584,545,1)
(91,410,1)
(102,479,1)
(112,469,1)
(56,226,1)
(148,429,1)
(392,436,1)
(193,458,1)
(80,213,1)
(316,206,1)
(314,52,1)
(311,282,1)
(39,167,1)
(162,74,1)
(220,370,1)
(24,469,1)
(155,201,1)
(580,310,1)
(353,105,1)
(550,386,1)
(16,334,1)
(396,345,1)
(285,416,1)
(316,436,1)
(328,145,1)
(245,17,1)
(146,175,1)
(244,384,1)
(532,382,1)
(485,449,1)
(438,416,1)
(541,188,1)
(122,110,1)
(16,64,1)
(395,181,1)
(170,469,1)
(68,207,1)
(414,468,1)
(25,47,1)
(256,459,1)
(283,440,1)
(228,155,1)
(159,117,1)
(548,556,1)
(413,191,1)
(482,3,2)
(227,560,2)
(249,488,2)
(376,488,2)
(343,381,2)
(93,558,2)
(584,558,2)
(578,223,2)
(365,381,2)
(151,548,2)
(280,436,2)
(548,449,2)
(316,0,2)
(479,323,2)
(7,560,2)
(404,488,2)
(98,520,2)
(303,109,2)
(507,548,2)
(403,281,2)
(401,560,2)
(542,548,2)
(412,519,2)
(146,468,2)
(145,313,2)
(381,465,2)
(431,7,2)
(581,63,2)
(98,176,2)
(132,468,2)
(230,541,2)
(72,381,2)
(531,60,2)
(514,469,2)
(103,560,2)
(6,165,2)
(190,558,2)
(138,202,2)
(250,297,2)
(98,549,2)
(219,488,2)
(353,201,2)
(78,560,2)
(203,541,2)
(34,306,2)
(218,488,2)
(532,281,2)
(583,3,2)
(313,345,2)
(365,541,2)
(191,488,2)
(504,560,2)
(473,309,2)
(1,311,2)
(180,541,2)
(39,90,2)
(400,222,2)
(5,560,2)
(504,488,2)
(398,297,2)
(209,181,2)
(421,565,2)
(128,225,2)
(478,181,2)
(42,0,2)
(501,311,2)
(551,0,2)
(16,1,2)
(500,469,2)
(521,479,2)
(64,15,2)
(166,548,2)
(209,306,2)
(222,548,2)
(90,560,2)
(183,488,2)
(297,381,2)
(560,488,2)
(161,297,2)
(550,138,2)
(22,165,2)
(17,355,2)
(112,469,2)
(234,297,2)
(511,429,2)
(186,560,2)
(92,488,2)
(320,558,2)
(357,488,2)
(134,381,2)
(23,345,2)
(47,345,2)
(95,297,2)
(80,381,2)
(344,297,2)
(154,63,2)
(367,2,2)
(499,157,2)
(68,541,2)
(13,482,2)
(217,297,2)
(106,109,2)
(126,281,2)
(280,0,2)
(494,3,2)
(242,541,2)
(60,345,2)
(115,157,2)
(122,277,2)
(478,297,2)
(64,560,2)
(446,225,2)
(63,381,2)
(537,0,2)
(431,488,2)
(369,225,2)
(408,541,2)
(550,0,2)
(91,165,2)
(157,91,2)
(206,0,2)
(95,381,2)
(256,188,2)
(248,286,2)
(293,170,2)
(455,306,2)
(185,468,2)
(530,309,2)
(373,352,2)
(110,558,2)
(345,560,2)
(268,411,2)
(431,560,2)
(447,436,2)
(472,565,2)
(557,488,2)
(136,3,2)
(256,459,2)
(521,436,2)
(447,560,2)
(65,541,2)
(260,225,2)
(436,177,2)
(438,64,2)
(120,273,2)
(140,321,2)
(532,306,2)
(509,488,2)
(181,468,2)
(47,381,2)
(395,436,2)
(339,21,2)
(378,436,2)
(352,436,2)
(455,297,2)
(388,519,2)
(258,548,2)
(345,488,2)
(273,469,2)
(340,141,2)
(485,449,2)
(434,157,2)
(522,3,2)
(315,488,2)
(419,3,2)
(256,541,2)
(562,541,2)
(411,558,2)
(291,298,2)
(256,539,2)
(173,3,2)
(123,391,2)
(455,281,2)
(524,488,2)
(374,306,2)
(63,297,2)
(261,551,2)
(189,3,2)
(391,436,2)
(267,560,2)
(362,1,2)
(487,157,2)
(427,53,2)
(188,153,2)
(114,297,2)
(236,488,2)
(315,560,2)
(257,560,2)
(284,225,2)
(290,381,2)
(119,281,2)
(328,63,2)
(373,41,2)
(153,381,2)
(455,436,2)
(312,488,2)
(12,281,2)
(576,449,2)
(103,488,2)
(54,558,2)
(164,488,2)
(481,63,2)
(534,560,2)
(126,120,2)
(361,91,2)
(92,560,2)
(267,488,2)
(57,391,2)
(202,0,2)
(373,426,2)
(558,468,2)
(337,109,2)
(30,468,2)
(258,339,2)
(92,462,2)
(302,109,2)
(549,352,2)
(433,181,2)
(270,14,2)
(205,297,2)
(74,281,2)
(140,541,2)
(35,78,2)
(307,560,2)
(575,541,2)
(435,488,2)
(256,306,2)
(433,436,2)
(209,436,2)
(44,381,2)
(93,469,2)
(575,297,2)
(578,297,2)
(232,0,2)
(453,91,2)
(389,381,2)
(352,391,2)
(504,381,2)
(103,62,2)
(78,488,2)
(462,488,2)
(411,93,2)
(460,449,2)
(164,560,2)
(516,541,2)
(338,548,2)
(0,558,2)
(177,225,2)
(176,145,2)
(519,488,2)
(395,468,2)
(406,558,2)
(242,281,2)
(574,488,2)
(552,488,2)
(399,488,2)
(14,0,2)
(462,436,2)
(60,381,2)
(478,436,2)
(441,165,2)
(353,16,2)
(414,468,2)
(396,345,2)
(231,541,2)
(448,468,2)
(433,488,2)
(191,560,2)
(170,469,2)
(360,306,2)
(272,469,2)
(358,558,2)
(95,345,2)
(265,381,2)
(427,109,2)
(51,225,2)
(323,558,2)
(14,469,2)
(559,10,2)
(142,548,2)
(90,187,2)
(53,216,2)
(63,560,2)
(160,381,2)
(484,469,2)
(241,560,2)
(310,488,2)
(463,109,2)
(572,157,2)
(325,91,2)
(266,531,2)
(228,1,2)
(495,381,2)
(83,560,2)
(514,225,2)
(216,337,2)
(219,560,2)
(350,381,2)
(485,576,2)
(564,281,2)
(562,560,2)
(571,436,2)
(538,297,2)
(346,297,2)
(176,63,2)
(382,306,2)
(409,436,2)
(492,1,2)
(408,281,2)
(295,381,2)
(207,560,2)
(318,157,2)
(223,297,2)
(197,381,2)
(449,488,2)
(497,436,2)
(562,488,2)
(143,297,2)
(423,560,2)
(430,297,2)
(520,158,2)
(68,560,2)
(566,297,2)
(432,225,2)
(557,560,2)
(293,558,2)
(16,64,2)
(565,436,2)
(88,311,2)
(105,1,2)
(244,381,2)
(437,541,2)
(573,521,2)
(454,381,2)
(257,488,2)
(218,560,2)
(376,560,2)
(29,541,2)
(580,310,2)
(498,165,2)
(477,0,2)
(479,558,2)
(324,91,2)
(372,519,2)
(404,560,2)
(580,332,2)
(416,64,2)
(316,436,2)
(573,165,2)
(1,64,2)
(375,181,2)
(449,40,2)
(258,460,2)
(457,558,2)
(329,488,2)
(217,483,2)
(275,297,2)
(447,488,2)
(472,511,2)
(98,57,2)
(235,409,2)
(429,91,2)
(488,436,2)
(370,488,2)
(62,10,2)
(559,436,2)
(5,488,2)
(475,157,2)
(384,381,2)
(341,157,2)
(59,3,2)
(152,1,2)
(558,395,2)
(366,0,2)
(480,548,2)
(262,519,2)
(478,541,2)
(555,468,2)
(159,306,2)
(309,309,2)
(111,115,2)
(199,0,2)
(403,541,2)
(536,3,2)
(543,3,2)
(403,297,2)
(399,560,2)
(565,541,2)
(550,131,2)
(394,488,2)
(76,498,2)
(177,340,2)
(336,309,2)
(515,488,2)
(319,3,2)
(426,558,2)
(68,281,2)
(256,238,2)
(448,469,2)
(582,469,2)
(497,468,2)
(530,297,2)
(15,560,2)
(501,544,2)
(483,234,2)
(202,469,2)
(320,469,2)
(3,23,2)
(169,109,2)
(205,114,2)
(285,1,2)
(258,449,2)
(224,372,2)
(84,541,2)
(580,488,2)
(531,381,2)
(20,391,2)
(273,281,2)
(451,541,2)
(330,468,2)
(56,548,2)
(313,63,2)
(456,548,2)
(532,541,2)
(379,3,2)
(225,326,2)
(306,157,2)
(68,297,2)
(299,558,2)
(534,488,2)
(175,469,2)
(176,104,2)
(88,306,2)
(221,494,2)
(394,560,2)
(554,548,2)
(499,181,2)
(148,165,2)
(585,381,2)
(417,72,2)
(511,565,2)
(493,560,2)
(66,0,2)
(118,211,2)
(124,109,2)
(535,297,2)
(491,91,2)
(321,345,2)
(501,224,2)
(62,560,2)
(220,560,2)
(381,63,2)
(413,560,2)
(253,157,2)
(224,519,2)
(310,560,2)
(537,261,2)
(311,282,2)
(419,489,2)
(176,426,2)
(286,367,2)
(501,64,2)
(319,248,2)
(183,560,2)
(435,370,2)
(455,560,2)
(458,558,2)
(415,468,2)
(118,91,2)
(544,64,2)
(500,488,2)
(229,3,2)
(408,306,2)
(138,0,2)
(107,469,2)
(65,437,2)
(215,558,2)
(358,320,2)
(532,297,2)
(26,0,2)
(519,560,2)
(571,560,2)
(268,558,2)
(195,366,2)
(13,3,2)
(575,306,2)
(370,436,2)
(49,468,2)
(510,488,2)
(487,469,2)
(129,281,2)
(485,400,2)
(195,436,2)
(236,560,2)
(365,297,2)
(474,0,2)
(312,560,2)
(119,560,2)
(2,345,2)
(478,281,2)
(375,558,2)
(46,541,2)
(242,478,2)
(349,560,2)
(98,373,2)
(569,1,2)
(518,231,2)
(476,63,2)
(315,436,2)
(78,103,2)
(167,560,2)
(176,41,2)
(486,3,2)
(198,541,2)
(400,548,2)
(201,272,2)
(366,537,2)
(553,391,2)
(40,560,2)
(576,548,2)
(484,391,2)
(213,381,2)
(213,244,2)
(551,469,2)
(562,297,2)
(498,436,2)
(379,419,2)
(367,3,2)
(143,541,2)
(532,560,2)
(222,469,2)
(242,297,2)
(67,281,2)
(214,0,2)
(351,165,2)
(426,436,2)
(571,488,2)
(232,131,2)
(245,1,2)
(23,309,2)
(465,345,2)
(73,195,2)
(375,436,2)
(230,381,2)
(1,519,2)
(333,558,2)
(25,47,2)
(563,91,2)
(489,3,2)
(488,281,2)
(10,391,2)
(373,91,2)
(291,468,2)
(2,3,2)
(349,488,2)
(95,541,2)
(119,306,2)
(370,560,2)
(525,548,2)
(178,157,2)
(482,345,2)
(500,560,2)
(104,91,2)
(120,281,2)
(444,297,2)
(442,436,2)
(387,488,2)
(112,306,2)
(185,146,2)
(314,391,2)
(256,560,2)
(499,436,2)
(98,122,2)
(211,91,2)
(238,488,2)
(575,455,2)
(176,315,2)
(526,560,2)
(108,63,2)
(332,35,2)
(365,560,2)
(234,444,2)
(172,558,2)
(122,558,2)
(512,519,2)
(563,165,2)
(498,366,2)
(180,297,2)
(231,436,2)
(264,297,2)
(11,109,2)
(158,573,2)
(353,64,2)
(50,519,2)
(521,165,2)
(438,17,2)
(368,297,2)
(25,381,2)
(520,157,2)
(255,541,2)
(568,558,2)
(568,436,2)
(529,316,2)
(221,3,2)
(272,1,2)
(511,366,2)
(261,0,2)
(309,345,2)
(504,541,2)
(533,0,2)
(556,560,2)
(246,381,2)
(139,468,2)
(256,281,2)
(340,225,2)
(277,558,2)
(518,541,2)
(175,468,2)
(511,436,2)
(41,436,2)
(119,297,2)
(62,436,2)
(585,350,2)
(283,0,2)
(529,0,2)
(117,306,2)
(162,281,2)
(459,318,2)
(288,488,2)
(35,488,2)
(316,479,2)
(357,560,2)
(570,0,2)
(501,519,2)
(170,558,2)
(148,91,2)
(355,469,2)
(235,109,2)
(330,559,2)
(348,63,2)
(238,249,2)
(269,91,2)
(478,560,2)
(489,396,2)
(483,297,2)
(470,560,2)
(114,436,2)
(327,309,2)
(445,381,2)
(240,488,2)
(227,488,2)
(174,1,2)
(383,91,2)
(256,290,2)
(544,519,2)
(565,297,2)
(549,468,2)
(575,281,2)
(177,446,2)
(48,488,2)
(359,381,2)
(73,91,2)
(188,381,2)
(568,479,2)
(446,514,2)
(196,0,2)
(63,541,2)
(18,541,2)
(179,541,2)
(370,10,2)
(571,479,2)
(504,297,2)
(145,63,2)
(15,433,2)
(176,497,2)
(91,410,2)
(562,381,2)
(465,63,2)
(230,297,2)
(518,29,2)
(515,560,2)
(243,309,2)
(281,306,2)
(45,266,2)
(155,1,2)
(21,287,2)
(223,345,2)
(410,165,2)
(567,391,2)
(270,0,2)
(80,213,2)
(540,488,2)
(286,3,2)
(309,297,2)
(424,3,2)
(98,256,2)
(8,0,2)
(308,306,2)
(494,149,2)
(15,488,2)
(321,541,2)
(231,404,2)
(423,488,2)
(187,560,2)
(527,541,2)
(176,352,2)
(329,429,2)
(94,468,2)
(561,306,2)
(390,541,2)
(301,297,2)
(271,25,2)
(326,582,2)
(165,0,2)
(417,381,2)
(256,297,2)
(187,469,2)
(403,560,2)
(418,109,2)
(519,64,2)
(307,488,2)
(467,225,2)
(541,381,2)
(53,109,2)
(420,391,2)
(72,45,2)
(378,469,2)
(353,1,2)
(462,560,2)
(63,488,2)
(181,291,2)
(493,488,2)
(372,469,2)
(480,24,2)
(37,558,2)
(192,63,2)
(274,381,2)
(62,488,2)
(439,488,2)
(171,3,2)
(201,1,2)
(378,63,2)
(332,560,2)
(309,541,2)
(236,435,2)
(24,469,2)
(413,488,2)
(387,560,2)
(75,468,2)
(298,468,2)
(63,504,2)
(442,10,2)
(0,568,2)
(452,109,2)
(573,91,2)
(130,468,2)
(91,76,2)
(208,381,2)
(547,560,2)
(114,404,2)
(556,488,2)
(459,157,2)
(396,3,2)
(216,109,2)
(447,10,2)
(115,487,2)
(440,0,2)
(470,488,2)
(552,560,2)
(580,560,2)
(266,381,2)
(559,468,2)
(442,391,2)
(519,311,2)
(334,1,2)
(137,63,2)
(575,560,2)
(539,306,2)
(158,91,2)
(392,225,2)
(364,0,2)
(98,232,2)
(45,381,2)
(294,558,2)
(211,107,2)
(119,541,2)
(194,0,2)
(3,309,2)
(131,529,2)
(323,293,2)
(11,427,2)
(81,109,2)
(96,3,2)
(24,548,2)
(404,509,2)
(226,548,2)
(290,585,2)
(186,488,2)
(7,488,2)
(436,225,2)
(438,416,2)
(444,578,2)
(408,297,2)
(438,311,2)
(438,1,2)
(298,448,2)
(539,88,2)
(530,541,2)
(258,480,2)
(329,366,2)
(77,91,2)
(329,436,2)
(98,128,2)
(133,488,2)
(337,345,2)
(271,381,2)
(473,345,2)
(535,541,2)
(240,560,2)
(64,488,2)
(233,558,2)
(548,560,2)
(58,297,2)
(158,165,2)
(220,488,2)
(395,181,2)
(435,560,2)
(355,1,2)
(157,165,2)
(461,225,2)
(460,548,2)
(428,565,2)
(496,548,2)
(510,560,2)
(526,488,2)
(99,519,2)
(7,447,2)
(439,560,2)
(153,454,2)
(87,391,2)
(521,91,2)
(259,519,2)
(296,488,2)
(100,1,2)
(464,1,2)
(244,345,2)
(332,488,2)
(471,309,2)
(405,558,2)
(242,560,2)
(509,574,2)
(104,436,2)
(150,306,2)
(249,329,2)
(89,381,2)
(107,91,2)
(322,63,2)
(318,499,2)
(353,311,2)
(40,488,2)
(165,280,2)
(524,560,2)
(548,339,2)
(574,469,2)
(455,541,2)
(454,271,2)
(380,548,2)
(251,560,2)
(39,560,2)
(485,339,2)
(184,558,2)
(40,571,2)
(35,560,2)
(294,375,2)
(574,560,2)
(29,65,2)
(347,541,2)
(48,560,2)
(365,488,2)
(117,112,2)
(28,558,2)
(468,442,2)
(310,500,2)
(354,468,2)
(268,277,2)
(385,488,2)
(17,1,2)
(83,488,2)
(289,157,2)
(102,558,2)
(97,1,2)
(386,0,2)
(509,560,2)
(210,3,2)
(373,497,2)
(186,332,2)
(408,560,2)
(34,117,2)
(43,306,2)
(149,3,2)
(350,80,2)
(547,92,2)
(248,3,2)
(193,558,2)
(241,488,2)
(193,358,2)
(278,63,2)
(235,11,2)
(210,379,2)
(282,31,2)
(547,488,2)
(146,175,2)
(548,488,2)
(385,560,2)
(109,381,2)
(149,13,2)
(346,541,2)
(416,1,2)
(527,297,2)
(485,548,2)
(391,225,2)
(63,345,2)
(437,140,2)
(393,519,2)
(277,294,2)
(468,391,2)
(76,165,2)
(449,560,2)
(356,3,2)
(41,0,2)
(305,3,2)
(131,0,2)
(288,560,2)
(143,345,2)
(545,558,2)
(254,0,2)
(55,468,2)
(278,436,2)
(409,109,2)
(141,225,2)
(10,484,2)
(401,488,2)
(409,404,2)
(280,366,2)
(61,548,2)
(147,519,2)
(195,91,2)
(455,479,2)
(205,217,2)
(88,209,2)
(433,560,2)
(111,157,2)
(52,391,2)
(283,270,2)
(335,560,2)
(535,309,2)
(351,91,2)
(292,0,2)
-----------------------------------
(0,IS_ERR(ss->busclk)
(1,cr < cr_mod)
(2,ss_algs[i])
(3,ss_algs[i].type)
(4,if (IS_ERR(ss->ssclk)
(5,ss)
(6,reset)
(7,ss->base + SS_CTL)
(8,ss)
(9,)
(10,ss->base = devm_platform_ioremap_resource(pdev, 0)
(11,ss_algs[i].alg.rng.base.cra_name)
(12,pdev)
(13,ss_algs[i].alg)
(14,pdev->dev)
(15,clk_get_rate(ss->ssclk)
(16,cr / 1000000)
(17,&pdev->dev)
(18,alg)
(19,if (ss->reset)
(20,base)
(21,24 * 1000 * 1000)
(22,ss)
(23,ss_algs[i])
(24,pdev->dev)
(25,ss_algs[i].alg)
(26,dev)
(27,error_alg:)
(28,ss)
(29,ss_algs[i].alg.crypto.base.cra_name)
(30,ssclk)
(31,1000 * 1000)
(32,150)
(33,)
(34,dev_err(&pdev->dev, "Cannot prepare_enable ssclk\\n")
(35,v = readl(ss->base + SS_CTL)
(36,if (err)
(37,dev)
(38,err)
(39,dev_err(&pdev->dev, "Cannot deassert reset control\\n")
(40,clk_get_rate(ss->busclk)
(41,ss->reset)
(42,"ahb")
(43,dev)
(44,err)
(45,&ss_algs[i].alg.rng)
(46,ss_algs)
(47,ss_algs[i])
(48,0)
(49,pdev)
(50,cr)
(51,-ENODEV)
(52,pdev)
(53,ss_algs[i].alg.rng)
(54,err)
(55,"mod")
(56,cr)
(57,return -ENOMEM;)
(58,i)
(59,rng)
(60,ss_algs[i])
(61,1000000)
(62,ss->base)
(63,i < ARRAY_SIZE(ss_algs)
(64,cr = clk_get_rate(ss->ssclk)
(65,ss_algs[i].alg.crypto.base)
(66,reset)
(67,dev)
(68,ss)
(69,if (cr <= cr_mod)
(70,case CRYPTO_ALG_TYPE_AHASH:)
(71,if (err)
(72,crypto_register_rng(&ss_algs[i].alg.rng)
(73,PTR_ERR(ss->reset)
(74,ss)
(75,ssclk)
(76,PTR_ERR(ss->reset)
(77,reset)
(78,readl(ss->base + SS_CTL)
(79,1000)
(80,ss_algs[i].alg.hash)
(81,ss_algs)
(82,of_node)
(83,base)
(84,break;)
(85,)
(86,if (IS_ERR(ss->base)
(87,-ENOMEM)
(88,clk_set_rate(ss->ssclk, cr_mod)
(89,ss_algs)
(90,&pdev->dev)
(91,PTR_ERR(ss->reset)
(92,&ss->slock)
(93,pdev->dev)
(94,dev)
(95,i++)
(96,i)
(97,pdev)
(98,RET)
(99,1000000)
(100,cr)
(101,pdev)
(102,ss)
(103,ss->base + SS_CTL)
(104,ss->reset)
(105,cr_mod)
(106,i)
(107,pdev->dev)
(108,ss)
(109,err)
(110,err)
(111,dev_err(&pdev->dev, "Cannot prepare_enable busclk\\n")
(112,pdev->dev)
(113,switch (ss_algs[i].type)
(114,ss->dev)
(115,&pdev->dev)
(116,if (cr >= cr_ahb)
(117,&pdev->dev)
(118,dev_info(&pdev->dev, "no reset control found\\n")
(119,err)
(120,&pdev->dev)
(121,)
(122,return err;)
(123,ENOMEM)
(124,rng)
(125,)
(126,dev_err(&pdev->dev, "Cannot set clock rate to ssclk\\n")
(127,if (!pdev->dev.of_node)
(128,return -ENODEV;)
(129,"Cannot set clock rate to ssclk\\n")
(130,ss)
(131,err = PTR_ERR(ss->busclk)
(132,"Cannot request MMIO\\n")
(133,err)
(134,ss_algs)
(135,)
(136,break;)
(137,ss_algs)
(138,&pdev->dev)
(139,ss)
(140,ss_algs[i].alg)
(141,*ss)
(142,"Clock bus %lu (%lu MHz)
(143,i--)
(144,)
(145,ss_algs[i].ss)
(146,&pdev->dev)
(147,cr_mod)
(148,err)
(149,ss_algs[i].alg.rng)
(150,ssclk)
(151,cr_ahb)
(152,pdev)
(153,crypto_register_skcipher(&ss_algs[i].alg.crypto)
(154,i)
(155,"Clock ss %lu (%lu MHz)
(156,cr_mod)
(157,err)
(158,err = clk_prepare_enable(ss->busclk)
(159,"Cannot prepare_enable ssclk\\n")
(160,err)
(161,break;)
(162,reset)
(163,if (IS_ERR(ss->busclk)
(164,ss)
(165,IS_ERR(ss->reset)
(166,dev)
(167,"Cannot deassert reset control\\n")
(168,1000)
(169,"Fail to register %s\\n")
(170,pdev->dev)
(171,break;)
(172,"Cannot get SS clock err=%d\\n")
(173,i)
(174,cr)
(175,pdev->dev)
(176,return 0;)
(177,devm_kzalloc(&pdev->dev, sizeof(*ss)
(178,err)
(179,goto error_alg;)
(180,ss)
(181,ss->ssclk = devm_clk_get(&pdev->dev, "mod")
(182,case CRYPTO_ALG_TYPE_AHASH:)
(183,dev)
(184,dev)
(185,dev_err(&pdev->dev, "Cannot request MMIO\\n")
(186,v &= 0x07)
(187,pdev->dev)
(188,err = crypto_register_skcipher(&ss_algs[i].alg.crypto)
(189,i)
(190,pdev)
(191,v)
(192,i)
(193,dev_dbg(&pdev->dev, "clock ss acquired\\n")
(194,err)
(195,ss->reset)
(196,pdev)
(197,alg)
(198,base)
(199,err)
(200,if (!ss)
(201,&pdev->dev)
(202,pdev->dev)
(203,dev)
(204,24)
(205,dev_err(ss->dev, "Fail to register %s\\n",\n\\n\\t\\t\\t\\t\\tss_algs[i].alg.hash.halg.base.cra_name)
(206,busclk)
(207,goto error_clk;)
(208,alg)
(209,ss->ssclk)
(210,crypto_unregister_skcipher(&ss_algs[i].alg.crypto)
(211,&pdev->dev)
(212,cr_ahb)
(213,ss_algs[i].alg)
(214,"Cannot get AHB SS clock err=%d\\n")
(215,dev)
(216,ss_algs[i].alg)
(217,ss_algs[i].alg.hash.halg.base.cra_name)
(218,v)
(219,cr_mod)
(220,SS_CTL)
(221,crypto_unregister_rng(&ss_algs[i].alg.rng)
(222,pdev->dev)
(223,ss_algs[i])
(224,&pdev->dev)
(225,!pdev->dev.of_node)
(226,cr)
(227,dev)
(228,cr)
(229,ss_algs)
(230,i)
(231,ss->dev)
(232,return err;)
(233,pdev)
(234,ss_algs[i].alg.hash.halg)
(235,dev_err(ss->dev, "Fail to register %s\\n",\n\\n\\t\\t\\t\\t\\tss_algs[i].alg.rng.base.cra_name)
(236,writel(SS_ENABLED, ss->base + SS_CTL)
(237,)
(238,err = reset_control_deassert(ss->reset)
(239,)
(240,ss)
(241,SS_CTL)
(242,clk_disable_unprepare(ss->ssclk)
(243,i)
(244,ss_algs[i])
(245,"Clock ss %lu (%lu MHz)
(246,rng)
(247,for (; i >= 0; i--)
(248,&ss_algs[i].alg.hash)
(249,reset_control_deassert(ss->reset)
(250,alg)
(251,dev)
(252,if (ss->reset)
(253,pdev)
(254,reset)
(255,cra_name)
(256,return err;)
(257,ss)
(258,dev_warn(&pdev->dev, "Clock bus %lu (%lu MHz)
(259,pdev)
(260,GFP_KERNEL)
(261,&pdev->dev)
(262,cr)
(263,)
(264,cra_name)
(265,alg)
(266,ss_algs[i].alg.rng)
(267,ss)
(268,dev_err(&pdev->dev, "Cannot get SS clock err=%d\\n", err)
(269,ss)
(270,&pdev->dev)
(271,ss_algs[i].alg.crypto)
(272,pdev->dev)
(273,pdev->dev)
(274,i)
(275,goto error_alg;)
(276,dev)
(277,err = PTR_ERR(ss->ssclk)
(278,ss_algs[i].ss = ss)
(279,if (err)
(280,ss->reset)
(281,err)
(282,150 * 1000 * 1000)
(283,dev_dbg(&pdev->dev, "clock ahb_ss acquired\\n")
(284,ss)
(285,cr_mod)
(286,ss_algs[i].alg.hash)
(287,1000 * 1000)
(288,dev)
(289,"Cannot prepare_enable busclk\\n")
(290,err = crypto_register_ahash(&ss_algs[i].alg.hash)
(291,devm_clk_get(&pdev->dev, "mod")
(292,pdev)
(293,&pdev->dev)
(294,PTR_ERR(ss->ssclk)
(295,crypto)
(296,reset)
(297,err)
(298,&pdev->dev)
(299,ssclk)
(300,ss)
(301,halg)
(302,cra_name)
(303,base)
(304,case CRYPTO_ALG_TYPE_SKCIPHER:)
(305,ss_algs)
(306,err)
(307,i)
(308,cr_mod)
(309,i >= 0)
(310,&pdev->dev)
(311,cr_mod = 150 * 1000 * 1000)
(312,v)
(313,ss_algs[i])
(314,0)
(315,ss->dev)
(316,ss->busclk)
(317,cr_mod)
(318,clk_prepare_enable(ss->ssclk)
(319,crypto_unregister_ahash(&ss_algs[i].alg.hash)
(320,pdev->dev)
(321,ss_algs[i])
(322,pdev)
(323,devm_clk_get(&pdev->dev, "ahb")
(324,dev)
(325,ss)
(326,pdev->dev.of_node)
(327,i)
(328,ss)
(329,ss->reset)
(330,PTR_ERR(ss->base)
(331,1000)
(332,v >>= 16)
(333,err)
(334,1000000)
(335,pdev)
(336,type)
(337,ss_algs[i])
(338,pdev)
(339,cr_ahb = 24 * 1000 * 1000)
(340,sizeof(*ss)
(341,err)
(342,switch (ss_algs[i].type)
(343,break;)
(344,ss)
(345,i = 0)
(346,i)
(347,crypto)
(348,0)
(349,ss)
(350,&ss_algs[i].alg.hash)
(351,busclk)
(352,ss->base)
(353,dev_dbg(&pdev->dev, "Clock ss %lu (%lu MHz)
(354,dev)
(355,pdev->dev)
(356,hash)
(357,slock)
(358,&pdev->dev)
(359,err)
(360,ss)
(361,"no reset control found\\n")
(362,dev)
(363,cr_ahb)
(364,pdev)
(365,i)
(366,ss->reset = devm_reset_control_get_optional(&pdev->dev, "ahb")
(367,ss_algs[i].alg)
(368,base)
(369,ss)
(370,ss->base)
(371,i)
(372,pdev->dev)
(373,return PTR_ERR(ss->reset)
(374,pdev)
(375,ss->ssclk)
(376,pdev)
(377,)
(378,platform_set_drvdata(pdev, ss)
(379,&ss_algs[i].alg.crypto)
(380,"Clock bus %lu (%lu MHz)
(381,ss_algs[i].type)
(382,goto error_ssclk;)
(383,NULL)
(384,i)
(385,ssclk)
(386,err)
(387,cr)
(388,cr_mod)
(389,ss_algs)
(390,i)
(391,!ss)
(392,ss)
(393,cr)
(394,SS_ENABLED)
(395,ss->ssclk)
(396,ss_algs[i])
(397,)
(398,ss_algs)
(399,pdev)
(400,&pdev->dev)
(401,base)
(402,cr)
(403,ssclk)
(404,ss->dev = &pdev->dev)
(405,busclk)
(406,pdev)
(407,)
(408,busclk)
(409,ss->dev)
(410,-EPROBE_DEFER)
(411,&pdev->dev)
(412,"Clock ss is at %lu (%lu MHz)
(413,16)
(414,ss)
(415,base)
(416,cr / 1000000)
(417,err = crypto_register_rng(&ss_algs[i].alg.rng)
(418,alg)
(419,ss_algs[i].alg.crypto)
(420,base)
(421,ss)
(422,1000)
(423,0)
(424,alg)
(425,case CRYPTO_ALG_TYPE_RNG:)
(426,ss->busclk)
(427,ss_algs[i].alg.rng.base)
(428,reset)
(429,ss->reset = NULL)
(430,"Fail to register %s\\n")
(431,writel(0, ss->base + SS_CTL)
(432,dev)
(433,ss->ssclk)
(434,ss)
(435,ss->base + SS_CTL)
(436,ss = devm_kzalloc(&pdev->dev, sizeof(*ss)
(437,ss_algs[i].alg.crypto)
(438,dev_warn(&pdev->dev, "Clock ss %lu (%lu MHz)
(439,SS_CTL)
(440,"clock ahb_ss acquired\\n")
(441,EPROBE_DEFER)
(442,ss->base)
(443,if (err)
(444,ss_algs[i].alg.hash)
(445,i)
(446,&pdev->dev)
(447,ss->base)
(448,pdev->dev)
(449,cr = clk_get_rate(ss->busclk)
(450,)
(451,ss)
(452,ss)
(453,reset)
(454,&ss_algs[i].alg.crypto)
(455,ss->busclk)
(456,cr)
(457,"ahb")
(458,"clock ss acquired\\n")
(459,err = clk_prepare_enable(ss->ssclk)
(460,cr / 1000000)
(461,ENODEV)
(462,ss->slock)
(463,dev)
(464,1000000)
(465,ss_algs[i])
(466,if (err)
(467,pdev)
(468,IS_ERR(ss->base)
(469,struct platform_device *pdev)
(470,"Die ID %d\\n")
(471,ss_algs)
(472,reset_control_assert(ss->reset)
(473,i--)
(474,dev)
(475,dev)
(476,ss)
(477,dev)
(478,ss->ssclk)
(479,ss->busclk = devm_clk_get(&pdev->dev, "ahb")
(480,&pdev->dev)
(481,ss_algs)
(482,ss_algs[i])
(483,ss_algs[i].alg.hash.halg.base)
(484,devm_platform_ioremap_resource(pdev, 0)
(485,dev_dbg(&pdev->dev, "Clock bus %lu (%lu MHz)
(486,crypto)
(487,pdev->dev)
(488,ss->reset)
(489,ss_algs[i].alg)
(490,v)
(491,pdev)
(492,dev)
(493,cr)
(494,&ss_algs[i].alg.rng)
(495,hash)
(496,dev)
(497,ss->ssclk)
(498,ss->reset)
(499,ss->ssclk)
(500,pdev->dev)
(501,dev_warn(&pdev->dev, "Clock ss is at %lu (%lu MHz)
(502,)
(503,if (IS_ERR(ss->reset)
(504,ARRAY_SIZE(ss_algs)
(505,case CRYPTO_ALG_TYPE_SKCIPHER:)
(506,)
(507,pdev)
(508,if (err)
(509,&pdev->dev)
(510,busclk)
(511,ss->reset)
(512,dev)
(513,for (i = 0; i < ARRAY_SIZE(ss_algs)
(514,pdev->dev)
(515,cr)
(516,"Fail to register %s\\n")
(517,case CRYPTO_ALG_TYPE_RNG:)
(518,dev_err(ss->dev, "Fail to register %s\\n",\n\\n\\t\\t\\t\\t\\tss_algs[i].alg.crypto.base.cra_name)
(519,cr <= cr_mod)
(520,return err;)
(521,ss->busclk)
(522,alg)
(523,if (PTR_ERR(ss->reset)
(524,0x07)
(525,cr)
(526,cr)
(527,reset)
(528,)
(529,PTR_ERR(ss->busclk)
(530,0)
(531,ss_algs[i].alg)
(532,ss)
(533,ss)
(534,base)
(535,i)
(536,ss_algs)
(537,devm_reset_control_get_optional(&pdev->dev, "ahb")
(538,hash)
(539,err = clk_set_rate(ss->ssclk, cr_mod)
(540,ss)
(541,err)
(542,cr_ahb)
(543,alg)
(544,cr / 1000000)
(545,ss)
(546,error_clk:)
(547,spin_lock_init(&ss->slock)
(548,cr >= cr_ahb)
(549,return PTR_ERR(ss->base)
(550,dev_err(&pdev->dev, "Cannot get AHB SS clock err=%d\\n", err)
(551,pdev->dev)
(552,ss)
(553,ss)
(554,1000000)
(555,pdev)
(556,cr_ahb)
(557,v)
(558,IS_ERR(ss->ssclk)
(559,ss->base)
(560,err)
(561,err)
(562,ss_algs)
(563,ss)
(564,goto error_clk;)
(565,ss->reset)
(566,dev)
(567,ss)
(568,ss->busclk)
(569,cr)
(570,ss)
(571,ss->busclk)
(572,ssclk)
(573,clk_prepare_enable(ss->busclk)
(574,pdev->dev)
(575,clk_disable_unprepare(ss->busclk)
(576,cr / 1000000)
(577,error_ssclk:)
(578,ss_algs[i].alg)
(579,if (err)
(580,dev_info(&pdev->dev, "Die ID %d\\n", v)
(581,type)
(582,pdev->dev)
(583,break;)
(584,busclk)
(585,crypto_register_ahash(&ss_algs[i].alg.hash)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^