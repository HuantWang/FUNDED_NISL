-----label-----
0
-----code-----
static void acpi_scan_init_hotplug(acpi_handle handle, int type)
{
	struct acpi_device_pnp pnp = {};
	struct acpi_hardware_id *hwid;
	struct acpi_scan_handler *handler;

	INIT_LIST_HEAD(&pnp.ids);
	acpi_set_pnp_ids(handle, &pnp, type);

	if (!pnp.type.hardware_id)
		goto out;

	/*
	 * This relies on the fact that acpi_install_notify_handler() will not
	 * install the same notify handler routine twice for the same handle.
	 */
	list_for_each_entry(hwid, &pnp.ids, list) {
		handler = acpi_scan_match_handler(hwid->id, NULL);
		if (handler) {
			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,
					acpi_hotplug_notify_cb, handler);
			break;
		}
	}

out:
	acpi_free_pnp_ids(&pnp);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
10,11
10,12
12,13
14,15
14,16
14,17
14,18
14,19
14,20
14,21
14,22
14,23
14,24
15,16
16,17
16,18
17,18
19,20
19,21
21,22
23,24
24,25
24,26
25,26
27,28
27,29
30,31
31,32
31,33
32,33
34,35
34,36
37,38
38,39
38,40
39,40
41,42
42,43
42,44
43,44
46,47
47,48
47,49
47,50
47,51
48,49
50,51
52,53
53,54
55,56
57,58
57,59
58,59
59,60
59,61
60,61
60,62
61,62
65,66
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
74,75
74,76
75,76
78,79
80,81
81,82
81,83
82,83
83,84
83,85
84,85
86,87
86,88
86,89
87,88
89,90
89,91
90,91
93,94
95,96
95,97
96,97
98,99
98,100
99,100
100,101
100,102
100,103
100,104
100,105
101,102
103,104
105,106
107,108
109,110
112,113
112,114
114,115
115,116
115,117
116,117
118,119
119,120
-----nextToken-----
2,4,7,9,11,13,18,20,22,26,28,29,33,35,36,40,44,45,49,51,54,56,62,63,64,66,70,72,76,77,79,85,88,91,92,94,97,102,104,106,108,110,111,113,117,120
-----computeFrom-----
83,84
83,85
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ProblemStatement;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
static void acpi_scan_init_hotplug(acpi_handle handle, int type){	struct acpi_device_pnp pnp = {};	struct acpi_hardware_id *hwid;	struct acpi_scan_handler *handler;	INIT_LIST_HEAD(&pnp.ids);	acpi_set_pnp_ids(handle, &pnp, type);	if (!pnp.type.hardware_id)		goto out;	/*	 * This relies on the fact that acpi_install_notify_handler() will not	 * install the same notify handler routine twice for the same handle.	 */	list_for_each_entry(hwid, &pnp.ids, list) {		handler = acpi_scan_match_handler(hwid->id, NULL);		if (handler) {			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}	}out:	acpi_free_pnp_ids(&pnp);}
static void
acpi_scan_init_hotplug(acpi_handle handle, int type)
acpi_scan_init_hotplug
acpi_handle handle
acpi_handle
acpi_handle
handle
handle
int type
int
type
type
{	struct acpi_device_pnp pnp = {};	struct acpi_hardware_id *hwid;	struct acpi_scan_handler *handler;	INIT_LIST_HEAD(&pnp.ids);	acpi_set_pnp_ids(handle, &pnp, type);	if (!pnp.type.hardware_id)		goto out;	/*	 * This relies on the fact that acpi_install_notify_handler() will not	 * install the same notify handler routine twice for the same handle.	 */	list_for_each_entry(hwid, &pnp.ids, list) {		handler = acpi_scan_match_handler(hwid->id, NULL);		if (handler) {			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}	}out:	acpi_free_pnp_ids(&pnp);}
struct acpi_device_pnp pnp = {};
struct acpi_device_pnp pnp = {};
struct acpi_device_pnp
acpi_device_pnp
pnp = {}
pnp
= {}
{}
struct acpi_hardware_id *hwid;
struct acpi_hardware_id *hwid;
struct acpi_hardware_id
acpi_hardware_id
*hwid
*
hwid
struct acpi_scan_handler *handler;
struct acpi_scan_handler *handler;
struct acpi_scan_handler
acpi_scan_handler
*handler
*
handler
INIT_LIST_HEAD(&pnp.ids);
INIT_LIST_HEAD(&pnp.ids)
INIT_LIST_HEAD
INIT_LIST_HEAD
&pnp.ids
pnp.ids
pnp
pnp
ids
acpi_set_pnp_ids(handle, &pnp, type);
acpi_set_pnp_ids(handle, &pnp, type)
acpi_set_pnp_ids
acpi_set_pnp_ids
handle
handle
&pnp
pnp
pnp
type
type
if (!pnp.type.hardware_id)		goto out;
!pnp.type.hardware_id
pnp.type.hardware_id
pnp.type
pnp
pnp
type
hardware_id
goto out;
out
list_for_each_entry(hwid, &pnp.ids, list)
list_for_each_entry(hwid, &pnp.ids, list)
list_for_each_entry
list_for_each_entry
hwid
hwid
&pnp.ids
pnp.ids
pnp
pnp
ids
list
list
)
{		handler = acpi_scan_match_handler(hwid->id, NULL);		if (handler) {			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}	}
handler = acpi_scan_match_handler(hwid->id, NULL);
handler = acpi_scan_match_handler(hwid->id, NULL)
handler
handler
acpi_scan_match_handler(hwid->id, NULL)
acpi_scan_match_handler
acpi_scan_match_handler
hwid->id
hwid
hwid
id
NULL
NULL
if (handler) {			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}
handler
handler
{			acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);			break;		}
acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler);
acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,					acpi_hotplug_notify_cb, handler)
acpi_install_notify_handler
acpi_install_notify_handler
handle
handle
ACPI_SYSTEM_NOTIFY
ACPI_SYSTEM_NOTIFY
acpi_hotplug_notify_cb
acpi_hotplug_notify_cb
handler
handler
break;
out:	acpi_free_pnp_ids(&pnp);
out
acpi_free_pnp_ids(&pnp);
acpi_free_pnp_ids(&pnp)
acpi_free_pnp_ids
acpi_free_pnp_ids
&pnp
pnp
pnp
-----joern-----
(39,11,0)
(12,18,0)
(45,16,0)
(38,10,0)
(43,6,0)
(18,17,0)
(32,38,0)
(42,27,0)
(9,17,0)
(14,30,0)
(23,28,0)
(45,26,0)
(11,39,0)
(7,41,0)
(27,16,0)
(36,16,0)
(18,6,0)
(24,14,0)
(17,27,0)
(29,16,0)
(3,10,0)
(10,38,0)
(8,45,0)
(1,16,0)
(18,0,0)
(31,14,0)
(2,31,0)
(34,11,0)
(45,28,0)
(17,38,0)
(28,45,0)
(40,16,0)
(44,45,0)
(22,16,0)
(41,36,0)
(21,31,0)
(19,34,0)
(14,31,0)
(4,10,0)
(11,34,0)
(45,0,0)
(30,14,0)
(13,18,0)
(15,18,0)
(25,16,0)
(36,41,0)
(39,16,0)
(33,18,0)
(38,17,0)
(20,34,0)
(2,21,1)
(11,34,1)
(7,43,1)
(5,36,1)
(45,28,1)
(15,12,1)
(21,45,1)
(14,31,1)
(10,3,1)
(17,38,1)
(20,19,1)
(32,10,1)
(44,28,1)
(39,11,1)
(7,35,1)
(33,35,1)
(37,30,1)
(41,7,1)
(30,14,1)
(18,13,1)
(24,31,1)
(7,37,1)
(18,17,1)
(4,9,1)
(45,44,1)
(9,30,1)
(8,39,1)
(14,24,1)
(45,0,1)
(18,0,1)
(38,10,1)
(34,20,1)
(23,8,1)
(38,32,1)
(31,2,1)
(28,23,1)
(43,18,1)
(13,15,1)
(35,17,1)
(12,33,1)
(3,4,1)
(45,26,1)
(36,41,1)
(17,38,2)
(18,0,2)
(36,41,2)
(45,26,2)
(13,35,2)
(14,31,2)
(45,28,2)
(32,30,2)
(17,30,2)
(38,10,2)
(39,11,2)
(35,30,2)
(30,14,2)
(18,17,2)
(38,30,2)
(3,30,2)
(18,35,2)
(9,30,2)
(11,34,2)
(15,35,2)
(12,35,2)
(10,30,2)
(43,35,2)
(33,35,2)
(37,30,2)
(4,30,2)
(45,0,2)
-----------------------------------
(0,acpi_handle handle)
(1,out:)
(2,type)
(3,id)
(4,hwid)
(5,RET)
(6,)
(7,pnp)
(8,handle)
(9,handler)
(10,hwid->id)
(11,&pnp.ids)
(12,ACPI_SYSTEM_NOTIFY)
(13,handler)
(14,pnp.type.hardware_id)
(15,acpi_hotplug_notify_cb)
(16,)
(17,handler = acpi_scan_match_handler(hwid->id, NULL)
(18,acpi_install_notify_handler(handle, ACPI_SYSTEM_NOTIFY,\n\\n\\t\\t\\t\\t\\tacpi_hotplug_notify_cb, handler)
(19,pnp)
(20,ids)
(21,pnp)
(22,handler)
(23,pnp)
(24,hardware_id)
(25,hwid)
(26,int type)
(27,)
(28,&pnp)
(29,)
(30,!pnp.type.hardware_id)
(31,pnp.type)
(32,NULL)
(33,handle)
(34,pnp.ids)
(35,handler)
(36,acpi_free_pnp_ids(&pnp)
(37,goto out;)
(38,acpi_scan_match_handler(hwid->id, NULL)
(39,INIT_LIST_HEAD(&pnp.ids)
(40,if (!pnp.type.hardware_id)
(41,&pnp)
(42,if (handler)
(43,break;)
(44,type)
(45,acpi_set_pnp_ids(handle, &pnp, type)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^