-----label-----
1
-----code-----
static int cpu0_cpufreq_probe(struct platform_device *pdev)
{
	struct device_node *np;
	int ret;

	cpu_dev = get_cpu_device(0);
	if (!cpu_dev) {
		pr_err("failed to get cpu0 device\n");
		return -ENODEV;
	}

	np = of_node_get(cpu_dev->of_node);
	if (!np) {
		pr_err("failed to find cpu0 node\n");
		return -ENOENT;
	}

	cpu_reg = regulator_get_optional(cpu_dev, "cpu0");
	if (IS_ERR(cpu_reg)) {
		/*
		 * If cpu0 regulator supply node is present, but regulator is
		 * not yet registered, we should try defering probe.
		 */
		if (PTR_ERR(cpu_reg) == -EPROBE_DEFER) {
			dev_err(cpu_dev, "cpu0 regulator not ready, retry\n");
			ret = -EPROBE_DEFER;
			goto out_put_node;
		}
		pr_warn("failed to get cpu0 regulator: %ld\n",
			PTR_ERR(cpu_reg));
	}

	cpu_clk = clk_get(cpu_dev, NULL);
	if (IS_ERR(cpu_clk)) {
		ret = PTR_ERR(cpu_clk);
		pr_err("failed to get cpu0 clock: %d\n", ret);
		goto out_put_reg;
	}

	ret = of_init_opp_table(cpu_dev);
	if (ret) {
		pr_err("failed to init OPP table: %d\n", ret);
		goto out_put_clk;
	}

	ret = dev_pm_opp_init_cpufreq_table(cpu_dev, &freq_table);
	if (ret) {
		pr_err("failed to init cpufreq table: %d\n", ret);
		goto out_put_clk;
	}

	of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance);

	if (of_property_read_u32(np, "clock-latency", &transition_latency))
		transition_latency = CPUFREQ_ETERNAL;

	if (!IS_ERR(cpu_reg)) {
		struct dev_pm_opp *opp;
		unsigned long min_uV, max_uV;
		int i;

		/*
		 * OPP is maintained in order of increasing frequency, and
		 * freq_table initialised from OPP is therefore sorted in the
		 * same order.
		 */
		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)
			;
		rcu_read_lock();
		opp = dev_pm_opp_find_freq_exact(cpu_dev,
				freq_table[0].frequency * 1000, true);
		min_uV = dev_pm_opp_get_voltage(opp);
		opp = dev_pm_opp_find_freq_exact(cpu_dev,
				freq_table[i-1].frequency * 1000, true);
		max_uV = dev_pm_opp_get_voltage(opp);
		rcu_read_unlock();
		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);
		if (ret > 0)
			transition_latency += ret * 1000;
	}

	ret = cpufreq_register_driver(&cpu0_cpufreq_driver);
	if (ret) {
		pr_err("failed register driver: %d\n", ret);
		goto out_free_table;
	}

	/*
	 * For now, just loading the cooling device;
	 * thermal DT code takes care of matching them.
	 */
	if (of_find_property(np, "#cooling-cells", NULL)) {
		cdev = of_cpufreq_cooling_register(np, cpu_present_mask);
		if (IS_ERR(cdev))
			pr_err("running cpufreq without cooling device: %ld\n",
			       PTR_ERR(cdev));
	}

	of_node_put(np);
	return 0;

out_free_table:
	dev_pm_opp_free_cpufreq_table(cpu_dev, &freq_table);
out_put_clk:
	if (!IS_ERR(cpu_clk))
		clk_put(cpu_clk);
out_put_reg:
	if (!IS_ERR(cpu_reg))
		regulator_put(cpu_reg);
out_put_node:
	of_node_put(np);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
22,23
24,25
25,26
25,27
26,27
28,29
28,30
29,30
32,33
32,34
33,34
34,35
36,37
36,38
37,38
38,39
38,40
39,40
42,43
43,44
44,45
46,47
47,48
47,49
48,49
50,51
50,52
51,52
53,54
53,55
54,55
57,58
57,59
58,59
59,60
61,62
61,63
62,63
63,64
63,65
64,65
67,68
68,69
69,70
71,72
72,73
72,74
73,74
75,76
75,77
75,78
76,77
78,79
81,82
81,83
82,83
82,84
83,84
85,86
86,87
88,89
88,90
89,90
89,91
90,91
90,92
91,92
91,93
92,93
94,95
96,97
97,98
99,100
99,101
99,102
100,101
101,102
101,103
101,104
102,103
104,105
107,108
108,109
108,110
109,110
111,112
112,113
114,115
116,117
117,118
117,119
117,120
118,119
121,122
121,123
122,123
124,125
126,127
127,128
127,129
128,129
130,131
130,132
130,133
131,132
133,134
135,136
137,138
137,139
138,139
138,140
139,140
141,142
142,143
144,145
144,146
144,147
145,146
146,147
146,148
147,148
149,150
149,151
150,151
152,153
154,155
155,156
155,157
155,158
156,157
159,160
161,162
163,164
164,165
164,166
165,166
167,168
167,169
168,169
170,171
172,173
172,174
173,174
175,176
175,177
176,177
177,178
177,179
177,180
178,179
181,182
183,184
185,186
186,187
186,188
187,188
189,190
189,191
189,192
190,191
192,193
194,195
195,196
197,198
197,199
198,199
200,201
200,202
201,202
202,203
202,204
202,205
203,204
206,207
208,209
210,211
211,212
211,213
211,214
211,215
212,213
214,215
217,218
218,219
220,221
220,222
221,222
221,223
221,224
221,225
222,223
224,225
227,228
228,229
230,231
231,232
231,233
232,233
234,235
236,237
236,238
237,238
238,239
238,240
239,240
241,242
243,244
243,245
243,246
243,247
243,248
243,249
243,250
243,251
243,252
243,253
243,254
243,255
244,245
245,246
245,247
246,247
248,249
248,250
251,252
252,253
252,254
252,255
254,255
256,257
258,259
259,260
259,261
261,262
263,264
263,265
263,266
263,267
264,265
265,266
265,267
266,267
269,270
269,271
270,271
270,272
271,272
271,273
272,273
274,275
277,278
279,280
280,281
283,284
284,285
285,286
287,288
288,289
288,290
289,290
291,292
291,293
291,294
291,295
292,293
294,295
296,297
296,298
297,298
297,299
298,299
298,300
299,300
305,306
306,307
306,308
307,308
309,310
309,311
310,311
312,313
314,315
315,316
315,317
316,317
318,319
318,320
318,321
318,322
319,320
321,322
323,324
323,325
324,325
324,326
325,326
325,327
326,327
328,329
328,330
329,330
335,336
336,337
336,338
337,338
339,340
339,341
340,341
342,343
344,345
345,346
346,347
348,349
349,350
349,351
350,351
352,353
352,354
352,355
352,356
353,354
355,356
357,358
359,360
361,362
361,363
362,363
362,364
363,364
366,367
367,368
367,369
368,369
370,371
370,372
371,372
374,375
375,376
375,377
376,377
378,379
378,380
379,380
381,382
382,383
384,385
384,386
385,386
387,388
387,389
388,389
389,390
389,391
389,392
390,391
393,394
395,396
397,398
397,399
398,399
398,400
398,401
398,402
399,400
401,402
404,405
406,407
406,408
407,408
408,409
408,410
409,410
411,412
411,413
411,414
412,413
414,415
416,417
418,419
418,420
419,420
419,421
420,421
422,423
423,424
425,426
426,427
426,428
426,429
427,428
430,431
430,432
431,432
433,434
435,436
436,437
436,438
437,438
439,440
441,442
443,444
443,445
445,446
446,447
446,448
446,449
447,448
449,450
451,452
452,453
454,455
454,456
456,457
456,458
457,458
458,459
458,460
459,460
461,462
463,464
464,465
464,466
465,466
467,468
468,469
470,471
470,472
472,473
472,474
473,474
474,475
474,476
475,476
477,478
479,480
480,481
480,482
481,482
483,484
484,485
486,487
486,488
488,489
489,490
489,491
490,491
492,493
494,495
495,496
-----nextToken-----
2,4,7,9,10,15,17,18,21,23,27,30,31,35,40,41,45,49,52,55,56,60,65,66,70,74,77,79,80,84,87,93,95,98,103,105,106,110,113,115,119,120,123,125,129,132,134,136,140,143,148,151,153,157,158,160,162,166,169,171,174,179,180,182,184,188,191,193,196,199,204,205,207,209,213,215,216,219,223,225,226,229,233,235,240,242,247,249,250,253,255,257,260,262,267,268,273,275,276,278,281,282,286,290,293,295,300,301,302,303,304,308,311,313,317,320,322,327,330,331,332,333,334,338,341,343,347,351,354,356,358,360,364,365,369,372,373,377,380,383,386,391,392,394,396,400,402,403,405,410,413,415,417,421,424,428,429,432,434,438,440,442,444,448,450,453,455,460,462,466,469,471,476,478,482,485,487,491,493,496
-----computeFrom-----
25,26
25,27
47,48
47,49
72,73
72,74
90,91
90,92
108,109
108,110
127,128
127,129
146,147
146,148
164,165
164,166
186,187
186,188
231,232
231,233
265,266
265,267
269,270
269,271
288,289
288,290
296,297
296,298
306,307
306,308
315,316
315,317
323,324
323,325
328,329
328,330
336,337
336,338
349,350
349,351
362,363
362,364
367,368
367,369
370,371
370,372
375,376
375,377
408,409
408,410
-----guardedBy-----
98,113
364,372
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;NullStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;GotoStatement;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LabelStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;LabelStatement;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int cpu0_cpufreq_probe(struct platform_device *pdev){	struct device_node *np;	int ret;	cpu_dev = get_cpu_device(0);	if (!cpu_dev) {		pr_err("failed to get cpu0 device\n");		return -ENODEV;	}	np = of_node_get(cpu_dev->of_node);	if (!np) {		pr_err("failed to find cpu0 node\n");		return -ENOENT;	}	cpu_reg = regulator_get_optional(cpu_dev, "cpu0");	if (IS_ERR(cpu_reg)) {		/*		 * If cpu0 regulator supply node is present, but regulator is		 * not yet registered, we should try defering probe.		 */		if (PTR_ERR(cpu_reg) == -EPROBE_DEFER) {			dev_err(cpu_dev, "cpu0 regulator not ready, retry\n");			ret = -EPROBE_DEFER;			goto out_put_node;		}		pr_warn("failed to get cpu0 regulator: %ld\n",			PTR_ERR(cpu_reg));	}	cpu_clk = clk_get(cpu_dev, NULL);	if (IS_ERR(cpu_clk)) {		ret = PTR_ERR(cpu_clk);		pr_err("failed to get cpu0 clock: %d\n", ret);		goto out_put_reg;	}	ret = of_init_opp_table(cpu_dev);	if (ret) {		pr_err("failed to init OPP table: %d\n", ret);		goto out_put_clk;	}	ret = dev_pm_opp_init_cpufreq_table(cpu_dev, &freq_table);	if (ret) {		pr_err("failed to init cpufreq table: %d\n", ret);		goto out_put_clk;	}	of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance);	if (of_property_read_u32(np, "clock-latency", &transition_latency))		transition_latency = CPUFREQ_ETERNAL;	if (!IS_ERR(cpu_reg)) {		struct dev_pm_opp *opp;		unsigned long min_uV, max_uV;		int i;		/*		 * OPP is maintained in order of increasing frequency, and		 * freq_table initialised from OPP is therefore sorted in the		 * same order.		 */		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;		rcu_read_lock();		opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);		min_uV = dev_pm_opp_get_voltage(opp);		opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);		max_uV = dev_pm_opp_get_voltage(opp);		rcu_read_unlock();		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);		if (ret > 0)			transition_latency += ret * 1000;	}	ret = cpufreq_register_driver(&cpu0_cpufreq_driver);	if (ret) {		pr_err("failed register driver: %d\n", ret);		goto out_free_table;	}	/*	 * For now, just loading the cooling device;	 * thermal DT code takes care of matching them.	 */	if (of_find_property(np, "#cooling-cells", NULL)) {		cdev = of_cpufreq_cooling_register(np, cpu_present_mask);		if (IS_ERR(cdev))			pr_err("running cpufreq without cooling device: %ld\n",			       PTR_ERR(cdev));	}	of_node_put(np);	return 0;out_free_table:	dev_pm_opp_free_cpufreq_table(cpu_dev, &freq_table);out_put_clk:	if (!IS_ERR(cpu_clk))		clk_put(cpu_clk);out_put_reg:	if (!IS_ERR(cpu_reg))		regulator_put(cpu_reg);out_put_node:	of_node_put(np);	return ret;}
static int
cpu0_cpufreq_probe(struct platform_device *pdev)
cpu0_cpufreq_probe
struct platform_device *pdev
struct platform_device
platform_device
*pdev
*
pdev
{	struct device_node *np;	int ret;	cpu_dev = get_cpu_device(0);	if (!cpu_dev) {		pr_err("failed to get cpu0 device\n");		return -ENODEV;	}	np = of_node_get(cpu_dev->of_node);	if (!np) {		pr_err("failed to find cpu0 node\n");		return -ENOENT;	}	cpu_reg = regulator_get_optional(cpu_dev, "cpu0");	if (IS_ERR(cpu_reg)) {		/*		 * If cpu0 regulator supply node is present, but regulator is		 * not yet registered, we should try defering probe.		 */		if (PTR_ERR(cpu_reg) == -EPROBE_DEFER) {			dev_err(cpu_dev, "cpu0 regulator not ready, retry\n");			ret = -EPROBE_DEFER;			goto out_put_node;		}		pr_warn("failed to get cpu0 regulator: %ld\n",			PTR_ERR(cpu_reg));	}	cpu_clk = clk_get(cpu_dev, NULL);	if (IS_ERR(cpu_clk)) {		ret = PTR_ERR(cpu_clk);		pr_err("failed to get cpu0 clock: %d\n", ret);		goto out_put_reg;	}	ret = of_init_opp_table(cpu_dev);	if (ret) {		pr_err("failed to init OPP table: %d\n", ret);		goto out_put_clk;	}	ret = dev_pm_opp_init_cpufreq_table(cpu_dev, &freq_table);	if (ret) {		pr_err("failed to init cpufreq table: %d\n", ret);		goto out_put_clk;	}	of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance);	if (of_property_read_u32(np, "clock-latency", &transition_latency))		transition_latency = CPUFREQ_ETERNAL;	if (!IS_ERR(cpu_reg)) {		struct dev_pm_opp *opp;		unsigned long min_uV, max_uV;		int i;		/*		 * OPP is maintained in order of increasing frequency, and		 * freq_table initialised from OPP is therefore sorted in the		 * same order.		 */		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;		rcu_read_lock();		opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);		min_uV = dev_pm_opp_get_voltage(opp);		opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);		max_uV = dev_pm_opp_get_voltage(opp);		rcu_read_unlock();		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);		if (ret > 0)			transition_latency += ret * 1000;	}	ret = cpufreq_register_driver(&cpu0_cpufreq_driver);	if (ret) {		pr_err("failed register driver: %d\n", ret);		goto out_free_table;	}	/*	 * For now, just loading the cooling device;	 * thermal DT code takes care of matching them.	 */	if (of_find_property(np, "#cooling-cells", NULL)) {		cdev = of_cpufreq_cooling_register(np, cpu_present_mask);		if (IS_ERR(cdev))			pr_err("running cpufreq without cooling device: %ld\n",			       PTR_ERR(cdev));	}	of_node_put(np);	return 0;out_free_table:	dev_pm_opp_free_cpufreq_table(cpu_dev, &freq_table);out_put_clk:	if (!IS_ERR(cpu_clk))		clk_put(cpu_clk);out_put_reg:	if (!IS_ERR(cpu_reg))		regulator_put(cpu_reg);out_put_node:	of_node_put(np);	return ret;}
struct device_node *np;
struct device_node *np;
struct device_node
device_node
*np
*
np
int ret;
int ret;
int
ret
ret
cpu_dev = get_cpu_device(0);
cpu_dev = get_cpu_device(0)
cpu_dev
cpu_dev
get_cpu_device(0)
get_cpu_device
get_cpu_device
0
if (!cpu_dev) {		pr_err("failed to get cpu0 device\n");		return -ENODEV;	}
!cpu_dev
cpu_dev
cpu_dev
{		pr_err("failed to get cpu0 device\n");		return -ENODEV;	}
pr_err("failed to get cpu0 device\n");
pr_err("failed to get cpu0 device\n")
pr_err
pr_err
"failed to get cpu0 device\n"
return -ENODEV;
-ENODEV
ENODEV
ENODEV
np = of_node_get(cpu_dev->of_node);
np = of_node_get(cpu_dev->of_node)
np
np
of_node_get(cpu_dev->of_node)
of_node_get
of_node_get
cpu_dev->of_node
cpu_dev
cpu_dev
of_node
if (!np) {		pr_err("failed to find cpu0 node\n");		return -ENOENT;	}
!np
np
np
{		pr_err("failed to find cpu0 node\n");		return -ENOENT;	}
pr_err("failed to find cpu0 node\n");
pr_err("failed to find cpu0 node\n")
pr_err
pr_err
"failed to find cpu0 node\n"
return -ENOENT;
-ENOENT
ENOENT
ENOENT
cpu_reg = regulator_get_optional(cpu_dev, "cpu0");
cpu_reg = regulator_get_optional(cpu_dev, "cpu0")
cpu_reg
cpu_reg
regulator_get_optional(cpu_dev, "cpu0")
regulator_get_optional
regulator_get_optional
cpu_dev
cpu_dev
"cpu0"
if (IS_ERR(cpu_reg)) {		/*		 * If cpu0 regulator supply node is present, but regulator is		 * not yet registered, we should try defering probe.		 */		if (PTR_ERR(cpu_reg) == -EPROBE_DEFER) {			dev_err(cpu_dev, "cpu0 regulator not ready, retry\n");			ret = -EPROBE_DEFER;			goto out_put_node;		}		pr_warn("failed to get cpu0 regulator: %ld\n",			PTR_ERR(cpu_reg));	}
IS_ERR(cpu_reg)
IS_ERR
IS_ERR
(cpu_reg)
cpu_reg
cpu_reg
{		/*		 * If cpu0 regulator supply node is present, but regulator is		 * not yet registered, we should try defering probe.		 */		if (PTR_ERR(cpu_reg) == -EPROBE_DEFER) {			dev_err(cpu_dev, "cpu0 regulator not ready, retry\n");			ret = -EPROBE_DEFER;			goto out_put_node;		}		pr_warn("failed to get cpu0 regulator: %ld\n",			PTR_ERR(cpu_reg));	}
if (PTR_ERR(cpu_reg) == -EPROBE_DEFER) {			dev_err(cpu_dev, "cpu0 regulator not ready, retry\n");			ret = -EPROBE_DEFER;			goto out_put_node;		}
PTR_ERR(cpu_reg) == -EPROBE_DEFER
PTR_ERR(cpu_reg)
PTR_ERR
PTR_ERR
cpu_reg
cpu_reg
-EPROBE_DEFER
EPROBE_DEFER
EPROBE_DEFER
{			dev_err(cpu_dev, "cpu0 regulator not ready, retry\n");			ret = -EPROBE_DEFER;			goto out_put_node;		}
dev_err(cpu_dev, "cpu0 regulator not ready, retry\n");
dev_err(cpu_dev, "cpu0 regulator not ready, retry\n")
dev_err
dev_err
cpu_dev
cpu_dev
"cpu0 regulator not ready, retry\n"
ret = -EPROBE_DEFER;
ret = -EPROBE_DEFER
ret
ret
-EPROBE_DEFER
EPROBE_DEFER
EPROBE_DEFER
goto out_put_node;
out_put_node
pr_warn("failed to get cpu0 regulator: %ld\n",			PTR_ERR(cpu_reg));
pr_warn("failed to get cpu0 regulator: %ld\n",			PTR_ERR(cpu_reg))
pr_warn
pr_warn
"failed to get cpu0 regulator: %ld\n"
PTR_ERR(cpu_reg)
PTR_ERR
PTR_ERR
cpu_reg
cpu_reg
cpu_clk = clk_get(cpu_dev, NULL);
cpu_clk = clk_get(cpu_dev, NULL)
cpu_clk
cpu_clk
clk_get(cpu_dev, NULL)
clk_get
clk_get
cpu_dev
cpu_dev
NULL
NULL
if (IS_ERR(cpu_clk)) {		ret = PTR_ERR(cpu_clk);		pr_err("failed to get cpu0 clock: %d\n", ret);		goto out_put_reg;	}
IS_ERR(cpu_clk)
IS_ERR
IS_ERR
(cpu_clk)
cpu_clk
cpu_clk
{		ret = PTR_ERR(cpu_clk);		pr_err("failed to get cpu0 clock: %d\n", ret);		goto out_put_reg;	}
ret = PTR_ERR(cpu_clk);
ret = PTR_ERR(cpu_clk)
ret
ret
PTR_ERR(cpu_clk)
PTR_ERR
PTR_ERR
cpu_clk
cpu_clk
pr_err("failed to get cpu0 clock: %d\n", ret);
pr_err("failed to get cpu0 clock: %d\n", ret)
pr_err
pr_err
"failed to get cpu0 clock: %d\n"
ret
ret
goto out_put_reg;
out_put_reg
ret = of_init_opp_table(cpu_dev);
ret = of_init_opp_table(cpu_dev)
ret
ret
of_init_opp_table(cpu_dev)
of_init_opp_table
of_init_opp_table
cpu_dev
cpu_dev
if (ret) {		pr_err("failed to init OPP table: %d\n", ret);		goto out_put_clk;	}
ret
ret
{		pr_err("failed to init OPP table: %d\n", ret);		goto out_put_clk;	}
pr_err("failed to init OPP table: %d\n", ret);
pr_err("failed to init OPP table: %d\n", ret)
pr_err
pr_err
"failed to init OPP table: %d\n"
ret
ret
goto out_put_clk;
out_put_clk
ret = dev_pm_opp_init_cpufreq_table(cpu_dev, &freq_table);
ret = dev_pm_opp_init_cpufreq_table(cpu_dev, &freq_table)
ret
ret
dev_pm_opp_init_cpufreq_table(cpu_dev, &freq_table)
dev_pm_opp_init_cpufreq_table
dev_pm_opp_init_cpufreq_table
cpu_dev
cpu_dev
&freq_table
freq_table
freq_table
if (ret) {		pr_err("failed to init cpufreq table: %d\n", ret);		goto out_put_clk;	}
ret
ret
{		pr_err("failed to init cpufreq table: %d\n", ret);		goto out_put_clk;	}
pr_err("failed to init cpufreq table: %d\n", ret);
pr_err("failed to init cpufreq table: %d\n", ret)
pr_err
pr_err
"failed to init cpufreq table: %d\n"
ret
ret
goto out_put_clk;
out_put_clk
of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance);
of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance)
of_property_read_u32
of_property_read_u32
np
np
"voltage-tolerance"
&voltage_tolerance
voltage_tolerance
voltage_tolerance
if (of_property_read_u32(np, "clock-latency", &transition_latency))		transition_latency = CPUFREQ_ETERNAL;
of_property_read_u32(np, "clock-latency", &transition_latency)
of_property_read_u32
of_property_read_u32
np
np
"clock-latency"
&transition_latency
transition_latency
transition_latency
transition_latency = CPUFREQ_ETERNAL;
transition_latency = CPUFREQ_ETERNAL
transition_latency
transition_latency
CPUFREQ_ETERNAL
CPUFREQ_ETERNAL
if (!IS_ERR(cpu_reg)) {		struct dev_pm_opp *opp;		unsigned long min_uV, max_uV;		int i;		/*		 * OPP is maintained in order of increasing frequency, and		 * freq_table initialised from OPP is therefore sorted in the		 * same order.		 */		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;		rcu_read_lock();		opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);		min_uV = dev_pm_opp_get_voltage(opp);		opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);		max_uV = dev_pm_opp_get_voltage(opp);		rcu_read_unlock();		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);		if (ret > 0)			transition_latency += ret * 1000;	}
!IS_ERR(cpu_reg)
IS_ERR(cpu_reg)
IS_ERR
IS_ERR
cpu_reg
cpu_reg
{		struct dev_pm_opp *opp;		unsigned long min_uV, max_uV;		int i;		/*		 * OPP is maintained in order of increasing frequency, and		 * freq_table initialised from OPP is therefore sorted in the		 * same order.		 */		for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;		rcu_read_lock();		opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);		min_uV = dev_pm_opp_get_voltage(opp);		opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);		max_uV = dev_pm_opp_get_voltage(opp);		rcu_read_unlock();		ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);		if (ret > 0)			transition_latency += ret * 1000;	}
struct dev_pm_opp *opp;
struct dev_pm_opp *opp;
struct dev_pm_opp
dev_pm_opp
*opp
*
opp
unsigned long min_uV, max_uV;
unsigned long min_uV, max_uV;
unsigned long
min_uV
min_uV
max_uV
max_uV
int i;
int i;
int
i
i
for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)			;
i = 0;
i = 0
i
i
0
freq_table[i].frequency != CPUFREQ_TABLE_END
freq_table[i].frequency
freq_table[i]
freq_table
freq_table
i
i
frequency
CPUFREQ_TABLE_END
CPUFREQ_TABLE_END
i++
i
i
;
rcu_read_lock();
rcu_read_lock()
rcu_read_lock
rcu_read_lock
opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true);
opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true)
opp
opp
dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[0].frequency * 1000, true)
dev_pm_opp_find_freq_exact
dev_pm_opp_find_freq_exact
cpu_dev
cpu_dev
freq_table[0].frequency * 1000
freq_table[0].frequency
freq_table[0]
freq_table
freq_table
0
frequency
1000
true
min_uV = dev_pm_opp_get_voltage(opp);
min_uV = dev_pm_opp_get_voltage(opp)
min_uV
min_uV
dev_pm_opp_get_voltage(opp)
dev_pm_opp_get_voltage
dev_pm_opp_get_voltage
opp
opp
opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true);
opp = dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true)
opp
opp
dev_pm_opp_find_freq_exact(cpu_dev,				freq_table[i-1].frequency * 1000, true)
dev_pm_opp_find_freq_exact
dev_pm_opp_find_freq_exact
cpu_dev
cpu_dev
freq_table[i-1].frequency * 1000
freq_table[i-1].frequency
freq_table[i-1]
freq_table
freq_table
i-1
i
i
1
frequency
1000
true
max_uV = dev_pm_opp_get_voltage(opp);
max_uV = dev_pm_opp_get_voltage(opp)
max_uV
max_uV
dev_pm_opp_get_voltage(opp)
dev_pm_opp_get_voltage
dev_pm_opp_get_voltage
opp
opp
rcu_read_unlock();
rcu_read_unlock()
rcu_read_unlock
rcu_read_unlock
ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV);
ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV)
ret
ret
regulator_set_voltage_time(cpu_reg, min_uV, max_uV)
regulator_set_voltage_time
regulator_set_voltage_time
cpu_reg
cpu_reg
min_uV
min_uV
max_uV
max_uV
if (ret > 0)			transition_latency += ret * 1000;
ret > 0
ret
ret
0
transition_latency += ret * 1000;
transition_latency += ret * 1000
transition_latency
transition_latency
ret * 1000
ret
ret
1000
ret = cpufreq_register_driver(&cpu0_cpufreq_driver);
ret = cpufreq_register_driver(&cpu0_cpufreq_driver)
ret
ret
cpufreq_register_driver(&cpu0_cpufreq_driver)
cpufreq_register_driver
cpufreq_register_driver
&cpu0_cpufreq_driver
cpu0_cpufreq_driver
cpu0_cpufreq_driver
if (ret) {		pr_err("failed register driver: %d\n", ret);		goto out_free_table;	}
ret
ret
{		pr_err("failed register driver: %d\n", ret);		goto out_free_table;	}
pr_err("failed register driver: %d\n", ret);
pr_err("failed register driver: %d\n", ret)
pr_err
pr_err
"failed register driver: %d\n"
ret
ret
goto out_free_table;
out_free_table
if (of_find_property(np, "#cooling-cells", NULL)) {		cdev = of_cpufreq_cooling_register(np, cpu_present_mask);		if (IS_ERR(cdev))			pr_err("running cpufreq without cooling device: %ld\n",			       PTR_ERR(cdev));	}
of_find_property(np, "#cooling-cells", NULL)
of_find_property
of_find_property
np
np
"#cooling-cells"
NULL
NULL
{		cdev = of_cpufreq_cooling_register(np, cpu_present_mask);		if (IS_ERR(cdev))			pr_err("running cpufreq without cooling device: %ld\n",			       PTR_ERR(cdev));	}
cdev = of_cpufreq_cooling_register(np, cpu_present_mask);
cdev = of_cpufreq_cooling_register(np, cpu_present_mask)
cdev
cdev
of_cpufreq_cooling_register(np, cpu_present_mask)
of_cpufreq_cooling_register
of_cpufreq_cooling_register
np
np
cpu_present_mask
cpu_present_mask
if (IS_ERR(cdev))			pr_err("running cpufreq without cooling device: %ld\n",			       PTR_ERR(cdev));
IS_ERR(cdev)
IS_ERR
IS_ERR
(cdev)
cdev
cdev
pr_err("running cpufreq without cooling device: %ld\n",			       PTR_ERR(cdev));
pr_err("running cpufreq without cooling device: %ld\n",			       PTR_ERR(cdev))
pr_err
pr_err
"running cpufreq without cooling device: %ld\n"
PTR_ERR(cdev)
PTR_ERR
PTR_ERR
cdev
cdev
of_node_put(np);
of_node_put(np)
of_node_put
of_node_put
np
np
return 0;
0
out_free_table:	dev_pm_opp_free_cpufreq_table(cpu_dev, &freq_table);
out_free_table
dev_pm_opp_free_cpufreq_table(cpu_dev, &freq_table);
dev_pm_opp_free_cpufreq_table(cpu_dev, &freq_table)
dev_pm_opp_free_cpufreq_table
dev_pm_opp_free_cpufreq_table
cpu_dev
cpu_dev
&freq_table
freq_table
freq_table
out_put_clk:	if (!IS_ERR(cpu_clk))		clk_put(cpu_clk);
out_put_clk
if (!IS_ERR(cpu_clk))		clk_put(cpu_clk);
!IS_ERR(cpu_clk)
IS_ERR(cpu_clk)
IS_ERR
IS_ERR
cpu_clk
cpu_clk
clk_put(cpu_clk);
clk_put(cpu_clk);
clk_put
clk_put
(cpu_clk)
cpu_clk
cpu_clk
out_put_reg:	if (!IS_ERR(cpu_reg))		regulator_put(cpu_reg);
out_put_reg
if (!IS_ERR(cpu_reg))		regulator_put(cpu_reg);
!IS_ERR(cpu_reg)
IS_ERR(cpu_reg)
IS_ERR
IS_ERR
cpu_reg
cpu_reg
regulator_put(cpu_reg);
regulator_put(cpu_reg);
regulator_put
regulator_put
(cpu_reg)
cpu_reg
cpu_reg
out_put_node:	of_node_put(np);
out_put_node
of_node_put(np);
of_node_put(np)
of_node_put
of_node_put
np
np
return ret;
ret
ret
-----joern-----
(2,22,0)
(18,178,0)
(162,52,0)
(200,174,0)
(42,173,0)
(183,104,0)
(124,79,0)
(20,220,0)
(18,192,0)
(120,239,0)
(179,24,0)
(33,170,0)
(97,75,0)
(157,22,0)
(84,150,0)
(88,23,0)
(44,226,0)
(9,178,0)
(239,120,0)
(17,92,0)
(24,179,0)
(223,52,0)
(168,42,0)
(151,59,0)
(224,239,0)
(114,134,0)
(191,13,0)
(19,79,0)
(164,118,0)
(10,175,0)
(30,122,0)
(169,224,0)
(122,23,0)
(121,157,0)
(155,234,0)
(92,17,0)
(50,79,0)
(52,166,0)
(173,42,0)
(157,20,0)
(131,47,0)
(76,197,0)
(205,158,0)
(58,23,0)
(162,79,0)
(71,92,0)
(165,92,0)
(162,111,0)
(104,54,0)
(201,79,0)
(38,63,0)
(214,86,0)
(49,234,0)
(86,70,0)
(240,79,0)
(208,116,0)
(189,83,0)
(213,138,0)
(43,70,0)
(175,10,0)
(61,186,0)
(229,23,0)
(171,24,0)
(160,12,0)
(104,82,0)
(192,236,0)
(177,157,0)
(45,210,0)
(77,204,0)
(47,75,0)
(107,78,0)
(64,215,0)
(109,198,0)
(111,79,0)
(184,79,0)
(5,24,0)
(137,166,0)
(144,149,0)
(133,12,0)
(109,122,0)
(36,79,0)
(136,1,0)
(139,24,0)
(168,198,0)
(140,228,0)
(87,23,0)
(67,105,0)
(195,79,0)
(8,150,0)
(93,168,0)
(212,116,0)
(67,54,0)
(180,47,0)
(166,24,0)
(231,168,0)
(162,215,0)
(127,83,0)
(176,24,0)
(65,82,0)
(242,173,0)
(100,54,0)
(209,206,0)
(89,154,0)
(173,242,0)
(230,176,0)
(153,217,0)
(117,242,0)
(17,79,0)
(163,105,0)
(112,97,0)
(123,42,0)
(94,5,0)
(15,75,0)
(29,79,0)
(4,210,0)
(178,17,0)
(145,79,0)
(82,13,0)
(11,105,0)
(232,79,0)
(16,238,0)
(211,186,0)
(68,24,0)
(170,13,0)
(135,35,0)
(41,13,0)
(119,109,0)
(193,103,0)
(69,86,0)
(202,220,0)
(35,79,0)
(198,23,0)
(216,198,0)
(203,79,0)
(35,24,0)
(179,12,0)
(238,90,0)
(27,131,0)
(116,4,0)
(28,172,0)
(14,79,0)
(220,20,0)
(115,79,0)
(31,120,0)
(108,97,0)
(245,61,0)
(92,165,0)
(54,104,0)
(194,173,0)
(110,239,0)
(219,228,0)
(125,204,0)
(37,32,0)
(227,155,0)
(233,190,0)
(187,59,0)
(106,189,0)
(86,204,0)
(218,23,0)
(48,79,0)
(103,35,0)
(171,79,0)
(56,79,0)
(241,82,0)
(146,61,0)
(204,77,0)
(207,5,0)
(47,131,0)
(162,228,0)
(105,87,0)
(167,170,0)
(215,64,0)
(118,48,0)
(35,103,0)
(150,224,0)
(237,68,0)
(162,239,0)
(40,63,0)
(185,138,0)
(82,104,0)
(176,3,0)
(66,176,0)
(206,17,0)
(42,168,0)
(178,47,0)
(178,79,0)
(162,224,0)
(85,20,0)
(178,204,0)
(46,172,0)
(72,13,0)
(206,158,0)
(150,22,0)
(178,4,0)
(77,197,0)
(73,79,0)
(74,67,0)
(224,111,0)
(63,22,0)
(215,79,0)
(98,161,0)
(182,3,0)
(91,215,0)
(97,47,0)
(61,146,0)
(22,157,0)
(53,242,0)
(26,102,0)
(210,4,0)
(57,62,0)
(130,4,0)
(116,154,0)
(147,236,0)
(192,215,0)
(129,111,0)
(83,189,0)
(4,79,0)
(244,41,0)
(25,35,0)
(105,67,0)
(136,170,0)
(12,179,0)
(156,206,0)
(1,136,0)
(166,52,0)
(51,165,0)
(0,79,0)
(159,48,0)
(90,149,0)
(181,157,0)
(141,23,0)
(197,77,0)
(220,87,0)
(101,28,0)
(54,67,0)
(243,21,0)
(198,168,0)
(60,79,0)
(239,79,0)
(128,166,0)
(157,122,0)
(87,105,0)
(196,120,0)
(68,79,0)
(204,79,0)
(126,99,0)
(3,176,0)
(20,23,0)
(6,62,0)
(49,215,0)
(18,162,0)
(22,23,0)
(132,171,0)
(7,10,0)
(224,215,0)
(222,1,0)
(90,238,0)
(221,23,0)
(149,90,0)
(99,192,0)
(81,87,0)
(96,95,0)
(62,111,0)
(80,98,0)
(224,228,0)
(48,118,0)
(143,5,0)
(111,62,0)
(152,162,0)
(170,136,0)
(52,21,0)
(172,32,0)
(39,64,0)
(113,23,0)
(138,213,0)
(188,17,0)
(59,32,0)
(161,98,0)
(24,79,0)
(55,23,0)
(172,28,0)
(142,146,0)
(122,109,0)
(225,147,0)
(199,136,0)
(178,172,0)
(18,49,0)
(190,49,0)
(224,150,0)
(78,24,0)
(143,207,1)
(231,42,1)
(7,89,1)
(105,163,1)
(242,53,1)
(17,92,1)
(13,72,1)
(57,129,1)
(76,125,1)
(77,197,1)
(224,239,1)
(178,204,1)
(64,39,1)
(214,69,1)
(25,34,1)
(204,77,1)
(161,98,1)
(130,217,1)
(49,190,1)
(125,224,1)
(87,105,1)
(63,22,1)
(208,148,1)
(43,86,1)
(69,235,1)
(129,61,1)
(224,111,1)
(177,2,1)
(86,214,1)
(192,215,1)
(54,100,1)
(117,93,1)
(74,54,1)
(28,101,1)
(220,87,1)
(173,194,1)
(97,112,1)
(101,46,1)
(35,24,1)
(164,159,1)
(42,173,1)
(153,111,1)
(133,160,1)
(18,49,1)
(160,139,1)
(151,90,1)
(24,179,1)
(123,173,1)
(80,228,1)
(22,157,1)
(44,239,1)
(132,213,1)
(162,228,1)
(95,96,1)
(209,34,1)
(82,13,1)
(185,95,1)
(157,122,1)
(228,219,1)
(162,215,1)
(187,151,1)
(129,226,1)
(138,185,1)
(114,213,1)
(239,120,1)
(10,7,1)
(202,85,1)
(99,126,1)
(34,17,1)
(33,167,1)
(206,17,1)
(157,181,1)
(152,68,1)
(71,188,1)
(167,41,1)
(127,174,1)
(41,244,1)
(49,215,1)
(109,119,1)
(173,242,1)
(176,24,1)
(18,178,1)
(80,176,1)
(215,64,1)
(6,57,1)
(15,97,1)
(218,20,1)
(162,52,1)
(196,110,1)
(191,161,1)
(146,142,1)
(178,9,1)
(166,24,1)
(93,216,1)
(132,37,1)
(192,99,1)
(144,226,1)
(41,13,1)
(84,169,1)
(150,8,1)
(166,128,1)
(58,1,1)
(172,28,1)
(9,171,1)
(102,26,1)
(185,175,1)
(220,202,1)
(104,82,1)
(18,192,1)
(188,148,1)
(82,65,1)
(90,238,1)
(168,231,1)
(1,136,1)
(103,193,1)
(1,222,1)
(61,146,1)
(100,104,1)
(78,107,1)
(59,187,1)
(68,24,1)
(245,90,1)
(150,22,1)
(11,81,1)
(92,165,1)
(47,131,1)
(178,47,1)
(39,91,1)
(181,121,1)
(111,62,1)
(170,33,1)
(170,13,1)
(224,215,1)
(105,67,1)
(112,108,1)
(178,17,1)
(216,58,1)
(224,150,1)
(237,174,1)
(45,130,1)
(2,218,1)
(212,208,1)
(86,204,1)
(194,242,1)
(157,20,1)
(67,54,1)
(142,245,1)
(200,52,1)
(26,215,1)
(136,199,1)
(128,137,1)
(206,156,1)
(237,83,1)
(90,149,1)
(20,220,1)
(53,117,1)
(131,27,1)
(137,223,1)
(227,102,1)
(171,132,1)
(3,182,1)
(89,116,1)
(140,176,1)
(223,5,1)
(189,106,1)
(233,155,1)
(40,22,1)
(190,233,1)
(12,133,1)
(27,180,1)
(148,4,1)
(30,198,1)
(108,47,1)
(46,59,1)
(37,172,1)
(125,161,1)
(224,228,1)
(198,168,1)
(213,138,1)
(54,104,1)
(222,136,1)
(38,40,1)
(48,118,1)
(7,205,1)
(72,191,1)
(5,94,1)
(42,123,1)
(199,170,1)
(162,152,1)
(132,134,1)
(96,175,1)
(125,63,1)
(176,3,1)
(207,235,1)
(81,122,1)
(149,144,1)
(169,63,1)
(116,212,1)
(178,4,1)
(94,143,1)
(65,241,1)
(174,200,1)
(118,164,1)
(85,87,1)
(35,103,1)
(120,31,1)
(238,16,1)
(62,6,1)
(97,47,1)
(68,237,1)
(98,80,1)
(167,13,1)
(155,227,1)
(156,209,1)
(171,24,1)
(230,66,1)
(217,153,1)
(168,42,1)
(78,24,1)
(63,38,1)
(159,43,1)
(31,196,1)
(162,239,1)
(110,78,1)
(183,11,1)
(162,111,1)
(5,24,1)
(139,102,1)
(182,230,1)
(83,189,1)
(16,149,1)
(136,170,1)
(107,24,1)
(237,5,1)
(162,224,1)
(51,71,1)
(197,76,1)
(122,109,1)
(134,114,1)
(126,147,1)
(116,4,1)
(135,25,1)
(147,225,1)
(244,1,1)
(52,166,1)
(4,210,1)
(106,127,1)
(226,44,1)
(178,172,1)
(185,15,1)
(179,12,1)
(175,10,1)
(109,198,1)
(235,204,1)
(163,67,1)
(180,217,1)
(241,183,1)
(121,177,1)
(193,135,1)
(219,140,1)
(165,51,1)
(67,74,1)
(119,30,1)
(210,45,1)
(225,78,1)
(18,162,1)
(7,48,1)
(8,84,1)
(66,35,1)
(205,206,1)
(205,34,2)
(132,148,2)
(18,49,2)
(109,198,2)
(76,34,2)
(218,161,2)
(15,217,2)
(101,90,2)
(164,235,2)
(175,148,2)
(160,102,2)
(176,3,2)
(199,1,2)
(162,111,2)
(198,161,2)
(122,109,2)
(161,34,2)
(103,34,2)
(33,1,2)
(121,161,2)
(214,235,2)
(49,215,2)
(90,226,2)
(35,24,2)
(9,34,2)
(168,42,2)
(18,178,2)
(16,226,2)
(159,235,2)
(132,235,2)
(77,34,2)
(210,217,2)
(52,5,2)
(95,175,2)
(63,22,2)
(212,148,2)
(108,217,2)
(122,161,2)
(239,120,2)
(77,197,2)
(241,161,2)
(171,24,2)
(171,235,2)
(6,90,2)
(41,13,2)
(238,226,2)
(173,161,2)
(20,161,2)
(188,148,2)
(62,226,2)
(185,217,2)
(153,90,2)
(5,235,2)
(136,1,2)
(220,87,2)
(170,13,2)
(67,54,2)
(18,162,2)
(41,1,2)
(31,78,2)
(239,78,2)
(28,90,2)
(237,235,2)
(51,148,2)
(104,82,2)
(97,47,2)
(169,63,2)
(217,90,2)
(138,235,2)
(224,63,2)
(54,161,2)
(224,239,2)
(24,102,2)
(114,213,2)
(68,235,2)
(222,161,2)
(216,161,2)
(147,78,2)
(38,161,2)
(81,161,2)
(174,5,2)
(111,90,2)
(162,239,2)
(116,148,2)
(53,161,2)
(109,161,2)
(71,148,2)
(142,90,2)
(152,235,2)
(57,226,2)
(213,138,2)
(110,78,2)
(213,148,2)
(17,148,2)
(179,102,2)
(242,161,2)
(178,17,2)
(83,189,2)
(140,176,2)
(10,235,2)
(90,238,2)
(99,78,2)
(7,148,2)
(116,4,2)
(22,161,2)
(7,235,2)
(157,20,2)
(10,148,2)
(156,34,2)
(150,63,2)
(130,217,2)
(59,90,2)
(228,176,2)
(138,34,2)
(226,78,2)
(148,217,2)
(13,161,2)
(162,215,2)
(194,161,2)
(78,24,2)
(11,161,2)
(61,90,2)
(9,235,2)
(61,146,2)
(132,34,2)
(155,102,2)
(162,235,2)
(107,102,2)
(24,179,2)
(225,78,2)
(178,148,2)
(100,161,2)
(199,161,2)
(35,103,2)
(35,34,2)
(1,136,2)
(89,148,2)
(17,92,2)
(86,235,2)
(224,215,2)
(9,90,2)
(181,161,2)
(172,28,2)
(12,102,2)
(125,34,2)
(57,90,2)
(233,102,2)
(182,34,2)
(150,22,2)
(192,215,2)
(136,161,2)
(177,161,2)
(72,161,2)
(132,217,2)
(162,224,2)
(25,34,2)
(22,157,2)
(80,34,2)
(112,217,2)
(33,161,2)
(106,174,2)
(4,217,2)
(2,161,2)
(120,78,2)
(8,63,2)
(42,173,2)
(82,13,2)
(48,118,2)
(20,220,2)
(137,5,2)
(136,170,2)
(175,34,2)
(178,172,2)
(206,34,2)
(111,226,2)
(43,235,2)
(84,63,2)
(129,226,2)
(138,217,2)
(187,90,2)
(105,67,2)
(166,24,2)
(94,235,2)
(132,90,2)
(171,148,2)
(123,161,2)
(191,161,2)
(128,5,2)
(46,90,2)
(168,161,2)
(198,168,2)
(3,34,2)
(118,235,2)
(139,102,2)
(92,165,2)
(165,148,2)
(98,34,2)
(192,78,2)
(219,176,2)
(235,34,2)
(47,131,2)
(178,204,2)
(189,174,2)
(204,77,2)
(104,161,2)
(65,161,2)
(202,161,2)
(30,161,2)
(133,102,2)
(157,122,2)
(224,111,2)
(42,161,2)
(74,161,2)
(175,10,2)
(69,235,2)
(178,47,2)
(90,149,2)
(163,161,2)
(178,4,2)
(171,90,2)
(131,217,2)
(170,161,2)
(146,90,2)
(48,235,2)
(178,217,2)
(78,102,2)
(92,148,2)
(54,104,2)
(170,1,2)
(96,175,2)
(209,34,2)
(138,148,2)
(220,161,2)
(196,78,2)
(197,34,2)
(129,90,2)
(171,217,2)
(10,34,2)
(47,217,2)
(127,174,2)
(149,226,2)
(52,166,2)
(85,161,2)
(34,148,2)
(63,161,2)
(223,5,2)
(222,1,2)
(178,34,2)
(7,34,2)
(40,161,2)
(176,34,2)
(93,161,2)
(45,217,2)
(126,78,2)
(215,64,2)
(244,1,2)
(97,217,2)
(37,90,2)
(9,148,2)
(183,161,2)
(178,235,2)
(224,150,2)
(230,34,2)
(119,161,2)
(18,192,2)
(151,90,2)
(82,161,2)
(206,17,2)
(1,1,2)
(9,217,2)
(204,34,2)
(185,148,2)
(213,34,2)
(66,34,2)
(44,78,2)
(162,52,2)
(166,5,2)
(207,235,2)
(172,90,2)
(175,235,2)
(167,1,2)
(167,161,2)
(143,235,2)
(217,226,2)
(62,90,2)
(135,34,2)
(87,161,2)
(4,210,2)
(87,105,2)
(111,62,2)
(173,242,2)
(193,34,2)
(67,161,2)
(231,161,2)
(153,226,2)
(49,102,2)
(117,161,2)
(213,217,2)
(224,228,2)
(200,5,2)
(208,148,2)
(185,235,2)
(58,161,2)
(227,102,2)
(171,34,2)
(213,235,2)
(185,34,2)
(68,24,2)
(176,24,2)
(162,228,2)
(190,102,2)
(6,226,2)
(5,24,2)
(144,226,2)
(245,90,2)
(134,213,2)
(161,98,2)
(1,161,2)
(83,174,2)
(105,161,2)
(180,217,2)
(179,12,2)
(178,90,2)
(27,217,2)
(86,204,2)
(157,161,2)
-----------------------------------
(0,if (!np)
(1,freq_table[i].frequency != CPUFREQ_TABLE_END)
(2,ret)
(3,&transition_latency)
(4,ret = of_init_opp_table(cpu_dev)
(5,of_find_property(np, "#cooling-cells", NULL)
(6,NULL)
(7,cpu_clk)
(8,1000)
(9,ret)
(10,IS_ERR(cpu_clk)
(11,cpu_dev)
(12,cpu_dev->of_node)
(13,i = 0)
(14,if (ret)
(15,goto out_put_reg;)
(16,EPROBE_DEFER)
(17,ret = dev_pm_opp_init_cpufreq_table(cpu_dev, &freq_table)
(18,RET)
(19,if (ret)
(20,max_uV = dev_pm_opp_get_voltage(opp)
(21,)
(22,ret = regulator_set_voltage_time(cpu_reg, min_uV, max_uV)
(23,)
(24,np = of_node_get(cpu_dev->of_node)
(25,np)
(26,cpu_dev)
(27,cpu_clk)
(28,-EPROBE_DEFER)
(29,if (IS_ERR(cpu_clk)
(30,min_uV)
(31,"cpu0")
(32,)
(33,i)
(34,ret)
(35,of_property_read_u32(np, "voltage-tolerance", &voltage_tolerance)
(36,if (IS_ERR(cpu_reg)
(37,goto out_put_node;)
(38,0)
(39,0)
(40,ret)
(41,i++)
(42,freq_table[0].frequency * 1000)
(43,goto out_free_table;)
(44,cpu_reg)
(45,cpu_dev)
(46,ret)
(47,ret = PTR_ERR(cpu_clk)
(48,dev_pm_opp_free_cpufreq_table(cpu_dev, &freq_table)
(49,return -ENODEV;)
(50,if (!IS_ERR(cpu_clk)
(51,freq_table)
(52,cdev = of_cpufreq_cooling_register(np, cpu_present_mask)
(53,0)
(54,freq_table[i-1].frequency)
(55,for (i = 0; freq_table[i].frequency != CPUFREQ_TABLE_END; i++)
(56,ret)
(57,cpu_dev)
(58,rcu_read_lock()
(59,dev_err(cpu_dev, "cpu0 regulator not ready, retry\\n")
(60,if (of_find_property(np, "#cooling-cells", NULL)
(61,pr_warn("failed to get cpu0 regulator: %ld\\n",\n\\n\\t\\t\\tPTR_ERR(cpu_reg)
(62,clk_get(cpu_dev, NULL)
(63,ret > 0)
(64,get_cpu_device(0)
(65,1)
(66,np)
(67,freq_table[i-1].frequency * 1000)
(68,of_node_put(np)
(69,"failed register driver: %d\\n")
(70,)
(71,cpu_dev)
(72,0)
(73,out_put_reg:)
(74,1000)
(75,)
(76,cpu0_cpufreq_driver)
(77,cpufreq_register_driver(&cpu0_cpufreq_driver)
(78,!np)
(79,)
(80,cpu_reg)
(81,opp)
(82,i-1)
(83,pr_err("running cpufreq without cooling device: %ld\\n",\n\\n\\t\\t\\t       PTR_ERR(cdev)
(84,ret)
(85,max_uV)
(86,pr_err("failed register driver: %d\\n", ret)
(87,opp = dev_pm_opp_find_freq_exact(cpu_dev,\n\\n\\t\\t\\t\\tfreq_table[i-1].frequency * 1000, true)
(88,opp)
(89,goto out_put_clk;)
(90,PTR_ERR(cpu_reg)
(91,cpu_dev)
(92,dev_pm_opp_init_cpufreq_table(cpu_dev, &freq_table)
(93,cpu_dev)
(94,NULL)
(95,clk_put(cpu_clk)
(96,cpu_clk)
(97,pr_err("failed to get cpu0 clock: %d\\n", ret)
(98,IS_ERR(cpu_reg)
(99,-ENOENT)
(100,frequency)
(101,EPROBE_DEFER)
(102,!cpu_dev)
(103,&voltage_tolerance)
(104,freq_table[i-1])
(105,dev_pm_opp_find_freq_exact(cpu_dev,\n\\n\\t\\t\\t\\tfreq_table[i-1].frequency * 1000, true)
(106,cdev)
(107,np)
(108,"failed to get cpu0 clock: %d\\n")
(109,dev_pm_opp_get_voltage(opp)
(110,cpu_reg)
(111,cpu_clk = clk_get(cpu_dev, NULL)
(112,ret)
(113,i)
(114,cpu_reg)
(115,np)
(116,pr_err("failed to init OPP table: %d\\n", ret)
(117,freq_table)
(118,&freq_table)
(119,opp)
(120,regulator_get_optional(cpu_dev, "cpu0")
(121,min_uV)
(122,min_uV = dev_pm_opp_get_voltage(opp)
(123,1000)
(124,out_put_node:)
(125,ret)
(126,ENOENT)
(127,"running cpufreq without cooling device: %ld\\n")
(128,cpu_present_mask)
(129,cpu_clk)
(130,ret)
(131,PTR_ERR(cpu_clk)
(132,np)
(133,of_node)
(134,regulator_put(cpu_reg)
(135,"voltage-tolerance")
(136,freq_table[i].frequency)
(137,np)
(138,IS_ERR(cpu_reg)
(139,np)
(140,transition_latency)
(141,if (ret > 0)
(142,cpu_reg)
(143,"#cooling-cells")
(144,cpu_reg)
(145,out_put_clk:)
(146,PTR_ERR(cpu_reg)
(147,pr_err("failed to find cpu0 node\\n")
(148,ret)
(149,PTR_ERR(cpu_reg)
(150,ret * 1000)
(151,cpu_dev)
(152,0)
(153,cpu_clk)
(154,)
(155,pr_err("failed to get cpu0 device\\n")
(156,ret)
(157,regulator_set_voltage_time(cpu_reg, min_uV, max_uV)
(158,)
(159,cpu_dev)
(160,cpu_dev)
(161,!IS_ERR(cpu_reg)
(162,return 0;)
(163,true)
(164,freq_table)
(165,&freq_table)
(166,of_cpufreq_cooling_register(np, cpu_present_mask)
(167,freq_table)
(168,dev_pm_opp_find_freq_exact(cpu_dev,\n\\n\\t\\t\\t\\tfreq_table[0].frequency * 1000, true)
(169,transition_latency)
(170,freq_table[i])
(171,of_node_put(np)
(172,ret = -EPROBE_DEFER)
(173,freq_table[0].frequency)
(174,IS_ERR(cdev)
(175,!IS_ERR(cpu_clk)
(176,of_property_read_u32(np, "clock-latency", &transition_latency)
(177,cpu_reg)
(178,return ret;)
(179,of_node_get(cpu_dev->of_node)
(180,ret)
(181,max_uV)
(182,transition_latency)
(183,freq_table)
(184,if (ret)
(185,cpu_reg)
(186,)
(187,"cpu0 regulator not ready, retry\\n")
(188,ret)
(189,PTR_ERR(cdev)
(190,-ENODEV)
(191,i)
(192,return -ENOENT;)
(193,voltage_tolerance)
(194,frequency)
(195,if (of_property_read_u32(np, "clock-latency", &transition_latency)
(196,cpu_dev)
(197,&cpu0_cpufreq_driver)
(198,opp = dev_pm_opp_find_freq_exact(cpu_dev,\n\\n\\t\\t\\t\\tfreq_table[0].frequency * 1000, true)
(199,frequency)
(200,cdev)
(201,if (!cpu_dev)
(202,opp)
(203,if (!IS_ERR(cpu_reg)
(204,ret = cpufreq_register_driver(&cpu0_cpufreq_driver)
(205,goto out_put_clk;)
(206,pr_err("failed to init cpufreq table: %d\\n", ret)
(207,np)
(208,"failed to init OPP table: %d\\n")
(209,"failed to init cpufreq table: %d\\n")
(210,of_init_opp_table(cpu_dev)
(211,if (PTR_ERR(cpu_reg)
(212,ret)
(213,!IS_ERR(cpu_reg)
(214,ret)
(215,cpu_dev = get_cpu_device(0)
(216,opp)
(217,IS_ERR(cpu_clk)
(218,rcu_read_unlock()
(219,CPUFREQ_ETERNAL)
(220,dev_pm_opp_get_voltage(opp)
(221,max_uV)
(222,CPUFREQ_TABLE_END)
(223,cdev)
(224,transition_latency += ret * 1000)
(225,"failed to find cpu0 node\\n")
(226,IS_ERR(cpu_reg)
(227,"failed to get cpu0 device\\n")
(228,transition_latency = CPUFREQ_ETERNAL)
(229,min_uV)
(230,"clock-latency")
(231,true)
(232,if (!IS_ERR(cpu_reg)
(233,ENODEV)
(234,)
(235,ret)
(236,)
(237,np)
(238,-EPROBE_DEFER)
(239,cpu_reg = regulator_get_optional(cpu_dev, "cpu0")
(240,out_free_table:)
(241,i)
(242,freq_table[0])
(243,if (IS_ERR(cdev)
(244,i)
(245,"failed to get cpu0 regulator: %ld\\n")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^