-----label-----
1
-----code-----
static void maybe_destroy_workers(struct worker_pool *pool)
{
	while (too_many_workers(pool)) {
		struct worker *worker;
		unsigned long expires;

		worker = list_entry(pool->idle_list.prev, struct worker, entry);
		expires = worker->last_active + IDLE_WORKER_TIMEOUT;

		if (time_before(jiffies, expires)) {
			mod_timer(&pool->idle_timer, expires);
			break;
		}

		destroy_worker(worker);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
13,14
13,15
14,15
16,17
18,19
18,20
18,21
18,22
18,23
18,24
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
29,30
31,32
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
38,39
41,42
43,44
43,45
44,45
44,46
44,47
45,46
47,48
49,50
51,52
51,53
52,53
53,54
53,55
53,56
54,55
56,57
57,58
57,59
58,59
61,62
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,7,9,10,15,17,22,24,25,28,30,35,39,40,42,46,48,50,55,59,60,62,63,67,69
-----computeFrom-----
33,34
33,35
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;WhileStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void maybe_destroy_workers(struct worker_pool *pool){	while (too_many_workers(pool)) {		struct worker *worker;		unsigned long expires;		worker = list_entry(pool->idle_list.prev, struct worker, entry);		expires = worker->last_active + IDLE_WORKER_TIMEOUT;		if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}		destroy_worker(worker);	}}
static void
maybe_destroy_workers(struct worker_pool *pool)
maybe_destroy_workers
struct worker_pool *pool
struct worker_pool
worker_pool
*pool
*
pool
{	while (too_many_workers(pool)) {		struct worker *worker;		unsigned long expires;		worker = list_entry(pool->idle_list.prev, struct worker, entry);		expires = worker->last_active + IDLE_WORKER_TIMEOUT;		if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}		destroy_worker(worker);	}}
while (too_many_workers(pool)) {		struct worker *worker;		unsigned long expires;		worker = list_entry(pool->idle_list.prev, struct worker, entry);		expires = worker->last_active + IDLE_WORKER_TIMEOUT;		if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}		destroy_worker(worker);	}
too_many_workers(pool)
too_many_workers
too_many_workers
pool
pool
{		struct worker *worker;		unsigned long expires;		worker = list_entry(pool->idle_list.prev, struct worker, entry);		expires = worker->last_active + IDLE_WORKER_TIMEOUT;		if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}		destroy_worker(worker);	}
struct worker *worker;
struct worker *worker;
struct worker
worker
*worker
*
worker
unsigned long expires;
unsigned long expires;
unsigned long
expires
expires
worker = list_entry(pool->idle_list.prev, struct worker, entry);
expires = worker->last_active + IDLE_WORKER_TIMEOUT;
expires = worker->last_active + IDLE_WORKER_TIMEOUT
expires
expires
worker->last_active + IDLE_WORKER_TIMEOUT
worker->last_active
worker
worker
last_active
IDLE_WORKER_TIMEOUT
IDLE_WORKER_TIMEOUT
if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}
time_before(jiffies, expires)
time_before
time_before
jiffies
jiffies
expires
expires
{			mod_timer(&pool->idle_timer, expires);			break;		}
mod_timer(&pool->idle_timer, expires);
mod_timer(&pool->idle_timer, expires)
mod_timer
mod_timer
&pool->idle_timer
pool->idle_timer
pool
pool
idle_timer
expires
expires
break;
destroy_worker(worker);
destroy_worker(worker)
destroy_worker
destroy_worker
worker
worker
-----joern-----
(11,8,0)
(17,4,0)
(12,21,0)
(9,24,0)
(20,21,0)
(12,22,0)
(18,24,0)
(21,20,0)
(6,20,0)
(5,8,0)
(16,28,0)
(9,22,0)
(15,8,0)
(27,8,0)
(25,15,0)
(19,9,0)
(28,22,0)
(12,1,0)
(21,12,0)
(2,20,0)
(22,9,0)
(20,3,0)
(0,28,0)
(14,23,0)
(13,1,0)
(10,24,0)
(4,3,0)
(22,8,0)
(26,22,0)
(29,12,0)
(24,9,0)
(22,9,1)
(4,17,1)
(0,22,1)
(20,6,1)
(7,13,1)
(28,22,1)
(29,21,1)
(24,18,1)
(12,29,1)
(12,22,1)
(19,24,1)
(26,4,1)
(20,3,1)
(17,15,1)
(12,21,1)
(13,12,1)
(16,0,1)
(25,28,1)
(15,25,1)
(18,10,1)
(28,16,1)
(21,20,1)
(9,19,1)
(7,4,1)
(4,3,1)
(6,2,1)
(10,26,1)
(9,24,1)
(2,28,1)
(21,28,2)
(24,4,2)
(20,28,2)
(0,4,2)
(19,4,2)
(12,22,2)
(6,28,2)
(4,3,2)
(9,24,2)
(22,9,2)
(17,28,2)
(9,4,2)
(28,22,2)
(26,4,2)
(16,4,2)
(18,4,2)
(29,28,2)
(28,4,2)
(12,21,2)
(4,28,2)
(25,28,2)
(10,4,2)
(12,28,2)
(22,4,2)
(20,3,2)
(13,28,2)
(21,20,2)
(15,28,2)
(2,28,2)
-----------------------------------
(0,jiffies)
(1,)
(2,pool)
(3,struct worker_pool *pool)
(4,too_many_workers(pool)
(5,worker)
(6,idle_timer)
(7,RET)
(8,)
(9,worker->last_active + IDLE_WORKER_TIMEOUT)
(10,worker)
(11,if (time_before(jiffies, expires)
(12,mod_timer(&pool->idle_timer, expires)
(13,break;)
(14,while (too_many_workers(pool)
(15,destroy_worker(worker)
(16,expires)
(17,pool)
(18,last_active)
(19,IDLE_WORKER_TIMEOUT)
(20,pool->idle_timer)
(21,&pool->idle_timer)
(22,expires = worker->last_active + IDLE_WORKER_TIMEOUT)
(23,)
(24,worker->last_active)
(25,worker)
(26,expires)
(27,expires)
(28,time_before(jiffies, expires)
(29,expires)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^