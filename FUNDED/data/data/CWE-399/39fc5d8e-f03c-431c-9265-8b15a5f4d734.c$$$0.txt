-----label-----
0
-----code-----
struct task_struct *ptrace_get_task_struct(pid_t pid)
{
	struct task_struct *child;

	/*
	 * Tracing init is not allowed.
	 */
	if (pid == 1)
		return ERR_PTR(-EPERM);

	read_lock(&tasklist_lock);
	child = find_task_by_pid(pid);
	if (child)
		get_task_struct(child);
	read_unlock(&tasklist_lock);
	if (!child)
		return ERR_PTR(-ESRCH);
	return child;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
12,13
12,14
12,15
12,16
12,17
12,18
12,19
12,20
13,14
14,15
14,16
15,16
17,18
17,19
20,21
20,22
21,22
21,23
22,23
25,26
26,27
26,28
27,28
29,30
30,31
32,33
33,34
33,35
34,35
36,37
37,38
37,39
40,41
41,42
41,43
42,43
44,45
44,46
45,46
47,48
49,50
49,51
50,51
52,53
53,54
53,55
54,55
56,57
58,59
59,60
59,61
60,61
62,63
63,64
65,66
65,67
66,67
67,68
69,70
70,71
70,72
71,72
73,74
74,75
76,77
77,78
-----nextToken-----
3,5,6,9,11,16,18,19,23,24,28,31,35,38,39,43,46,48,51,55,57,61,64,68,72,75,78
-----computeFrom-----
21,22
21,23
41,42
41,43
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
struct task_struct *ptrace_get_task_struct(pid_t pid){	struct task_struct *child;	/*	 * Tracing init is not allowed.	 */	if (pid == 1)		return ERR_PTR(-EPERM);	read_lock(&tasklist_lock);	child = find_task_by_pid(pid);	if (child)		get_task_struct(child);	read_unlock(&tasklist_lock);	if (!child)		return ERR_PTR(-ESRCH);	return child;}
struct task_struct
task_struct
*ptrace_get_task_struct(pid_t pid)
*
ptrace_get_task_struct
pid_t pid
pid_t
pid_t
pid
pid
{	struct task_struct *child;	/*	 * Tracing init is not allowed.	 */	if (pid == 1)		return ERR_PTR(-EPERM);	read_lock(&tasklist_lock);	child = find_task_by_pid(pid);	if (child)		get_task_struct(child);	read_unlock(&tasklist_lock);	if (!child)		return ERR_PTR(-ESRCH);	return child;}
struct task_struct *child;
struct task_struct *child;
struct task_struct
task_struct
*child
*
child
if (pid == 1)		return ERR_PTR(-EPERM);
pid == 1
pid
pid
1
return ERR_PTR(-EPERM);
ERR_PTR(-EPERM)
ERR_PTR
ERR_PTR
-EPERM
EPERM
EPERM
read_lock(&tasklist_lock);
read_lock(&tasklist_lock);
read_lock
read_lock
(&tasklist_lock)
&tasklist_lock
&
tasklist_lock
child = find_task_by_pid(pid);
child = find_task_by_pid(pid)
child
child
find_task_by_pid(pid)
find_task_by_pid
find_task_by_pid
pid
pid
if (child)		get_task_struct(child);
child
child
get_task_struct(child);
get_task_struct(child)
get_task_struct
get_task_struct
child
child
read_unlock(&tasklist_lock);
read_unlock(&tasklist_lock)
read_unlock
read_unlock
&tasklist_lock
tasklist_lock
tasklist_lock
if (!child)		return ERR_PTR(-ESRCH);
!child
child
child
return ERR_PTR(-ESRCH);
ERR_PTR(-ESRCH)
ERR_PTR
ERR_PTR
-ESRCH
ESRCH
ESRCH
return child;
child
child
-----joern-----
(31,29,0)
(25,2,0)
(10,20,0)
(27,25,0)
(2,20,0)
(33,29,0)
(17,31,0)
(26,7,0)
(13,33,0)
(19,29,0)
(23,6,0)
(18,17,0)
(32,29,0)
(22,24,0)
(3,24,0)
(31,6,0)
(12,11,0)
(2,25,0)
(6,1,0)
(4,11,0)
(15,8,0)
(10,33,0)
(30,29,0)
(15,5,0)
(11,12,0)
(14,31,0)
(24,1,0)
(6,31,0)
(34,29,0)
(33,31,0)
(10,5,0)
(0,8,0)
(8,15,0)
(9,28,0)
(12,29,0)
(7,26,0)
(7,29,0)
(16,26,0)
(28,31,0)
(10,5,1)
(2,25,1)
(10,33,1)
(21,31,1)
(0,24,1)
(14,7,1)
(31,6,1)
(22,3,1)
(33,31,1)
(17,31,1)
(26,16,1)
(16,24,1)
(4,17,1)
(17,18,1)
(25,27,1)
(11,4,1)
(23,14,1)
(27,28,1)
(28,9,1)
(10,20,1)
(8,0,1)
(12,11,1)
(24,22,1)
(7,26,1)
(18,21,1)
(20,2,1)
(28,31,1)
(33,13,1)
(6,23,1)
(6,1,1)
(4,21,1)
(9,12,1)
(24,1,1)
(5,15,1)
(15,8,1)
(13,28,1)
(6,24,2)
(28,24,2)
(17,21,2)
(11,24,2)
(12,11,2)
(31,6,2)
(2,25,2)
(14,24,2)
(24,1,2)
(12,24,2)
(33,28,2)
(7,24,2)
(31,24,2)
(28,31,2)
(33,31,2)
(0,24,2)
(4,24,2)
(13,28,2)
(10,33,2)
(7,26,2)
(2,28,2)
(10,5,2)
(20,28,2)
(5,24,2)
(6,1,2)
(21,24,2)
(15,8,2)
(10,20,2)
(8,24,2)
(23,24,2)
(9,24,2)
(26,24,2)
(25,28,2)
(18,21,2)
(27,28,2)
(15,24,2)
(16,24,2)
(17,31,2)
-----------------------------------
(0,EPERM)
(1,pid_t pid)
(2,ERR_PTR(-ESRCH)
(3,pid)
(4,tasklist_lock)
(5,return ERR_PTR(-EPERM)
(6,find_task_by_pid(pid)
(7,read_lock(&tasklist_lock)
(8,-EPERM)
(9,child)
(10,RET)
(11,&tasklist_lock)
(12,read_unlock(&tasklist_lock)
(13,child)
(14,child)
(15,ERR_PTR(-EPERM)
(16,tasklist_lock)
(17,get_task_struct(child)
(18,child)
(19,if (child)
(20,return ERR_PTR(-ESRCH)
(21,child)
(22,1)
(23,pid)
(24,pid == 1)
(25,-ESRCH)
(26,&tasklist_lock)
(27,ESRCH)
(28,!child)
(29,)
(30,if (!child)
(31,child = find_task_by_pid(pid)
(32,child)
(33,return child;)
(34,if (pid == 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^