-----label-----
0
-----code-----
int cpuidle_play_dead(void)
{
	struct cpuidle_device *dev = __this_cpu_read(cpuidle_devices);
	struct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);
	int i;

	if (!drv)
		return -ENODEV;

	/* Find lowest-power state that supports long-term idle */
	for (i = drv->state_count - 1; i >= CPUIDLE_DRIVER_STATE_START; i--)
		if (drv->states[i].enter_dead)
			return drv->states[i].enter_dead(dev, i);

	return -ENODEV;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
18,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
39,40
41,42
41,43
42,43
43,44
45,46
46,47
47,48
49,50
49,51
49,52
49,53
50,51
51,52
51,53
52,53
54,55
54,56
55,56
55,57
56,57
60,61
60,62
61,62
63,64
65,66
66,67
68,69
68,70
69,70
69,71
70,71
70,72
71,72
71,73
72,73
75,76
78,79
79,80
79,81
79,82
80,81
80,82
81,82
81,83
82,83
82,84
83,84
86,87
89,90
91,92
93,94
94,95
95,96
-----nextToken-----
2,4,6,8,13,15,16,20,22,26,28,29,33,35,38,40,44,48,53,57,58,59,62,64,67,73,74,76,77,84,85,87,88,90,92,96
-----computeFrom-----
51,52
51,53
54,55
54,56
60,61
60,62
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ReturnStatement;FunctionCallExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
int cpuidle_play_dead(void){	struct cpuidle_device *dev = __this_cpu_read(cpuidle_devices);	struct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);	int i;	if (!drv)		return -ENODEV;	/* Find lowest-power state that supports long-term idle */	for (i = drv->state_count - 1; i >= CPUIDLE_DRIVER_STATE_START; i--)		if (drv->states[i].enter_dead)			return drv->states[i].enter_dead(dev, i);	return -ENODEV;}
int
cpuidle_play_dead(void)
cpuidle_play_dead
void
void


{	struct cpuidle_device *dev = __this_cpu_read(cpuidle_devices);	struct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);	int i;	if (!drv)		return -ENODEV;	/* Find lowest-power state that supports long-term idle */	for (i = drv->state_count - 1; i >= CPUIDLE_DRIVER_STATE_START; i--)		if (drv->states[i].enter_dead)			return drv->states[i].enter_dead(dev, i);	return -ENODEV;}
struct cpuidle_device *dev = __this_cpu_read(cpuidle_devices);
struct cpuidle_device *dev = __this_cpu_read(cpuidle_devices);
struct cpuidle_device
cpuidle_device
*dev = __this_cpu_read(cpuidle_devices)
*
dev
= __this_cpu_read(cpuidle_devices)
__this_cpu_read(cpuidle_devices)
__this_cpu_read
__this_cpu_read
cpuidle_devices
cpuidle_devices
struct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);
struct cpuidle_driver *drv = cpuidle_get_cpu_driver(dev);
struct cpuidle_driver
cpuidle_driver
*drv = cpuidle_get_cpu_driver(dev)
*
drv
= cpuidle_get_cpu_driver(dev)
cpuidle_get_cpu_driver(dev)
cpuidle_get_cpu_driver
cpuidle_get_cpu_driver
dev
dev
int i;
int i;
int
i
i
if (!drv)		return -ENODEV;
!drv
drv
drv
return -ENODEV;
-ENODEV
ENODEV
ENODEV
for (i = drv->state_count - 1; i >= CPUIDLE_DRIVER_STATE_START; i--)		if (drv->states[i].enter_dead)			return drv->states[i].enter_dead(dev, i);
i = drv->state_count - 1;
i = drv->state_count - 1
i
i
drv->state_count - 1
drv->state_count
drv
drv
state_count
1
i >= CPUIDLE_DRIVER_STATE_START
i
i
CPUIDLE_DRIVER_STATE_START
CPUIDLE_DRIVER_STATE_START
i--
i
i
if (drv->states[i].enter_dead)			return drv->states[i].enter_dead(dev, i);
drv->states[i].enter_dead
drv->states[i]
drv->states
drv
drv
states
i
i
enter_dead
return drv->states[i].enter_dead(dev, i);
drv->states[i].enter_dead(dev, i)
drv->states[i].enter_dead
drv->states[i]
drv->states
drv
drv
states
i
i
enter_dead
dev
dev
i
i
return -ENODEV;
-ENODEV
ENODEV
ENODEV
-----joern-----
(44,33,0)
(10,45,0)
(11,27,0)
(37,44,0)
(15,30,0)
(29,6,0)
(3,45,0)
(9,36,0)
(24,41,0)
(35,1,0)
(13,1,0)
(44,8,0)
(15,45,0)
(4,2,0)
(12,15,0)
(39,34,0)
(9,30,0)
(38,0,0)
(42,0,0)
(34,33,0)
(25,7,0)
(1,45,0)
(31,33,0)
(28,21,0)
(7,8,0)
(26,15,0)
(21,27,0)
(5,45,0)
(33,44,0)
(22,10,0)
(45,10,0)
(17,31,0)
(31,21,0)
(41,36,0)
(8,0,0)
(21,31,0)
(21,45,0)
(36,0,0)
(19,3,0)
(8,7,0)
(10,34,0)
(32,0,0)
(6,20,0)
(33,0,0)
(15,8,0)
(14,33,0)
(18,31,0)
(43,8,0)
(16,0,0)
(27,21,0)
(34,10,0)
(9,20,0)
(40,34,0)
(23,0,0)
(2,33,0)
(10,22,1)
(15,45,1)
(35,13,1)
(13,3,1)
(27,11,1)
(18,1,1)
(8,7,1)
(36,41,1)
(25,43,1)
(34,33,1)
(6,29,1)
(1,45,1)
(28,31,1)
(2,4,1)
(15,8,1)
(21,45,1)
(37,14,1)
(4,33,1)
(26,12,1)
(21,31,1)
(2,33,1)
(19,27,1)
(3,19,1)
(13,45,1)
(24,1,1)
(31,17,1)
(20,6,1)
(44,37,1)
(11,21,1)
(44,8,1)
(10,34,1)
(9,20,1)
(12,27,1)
(15,26,1)
(17,18,1)
(41,24,1)
(5,2,1)
(31,33,1)
(21,28,1)
(34,39,1)
(39,40,1)
(33,44,1)
(40,5,1)
(9,36,1)
(29,2,1)
(1,35,1)
(30,15,1)
(14,8,1)
(3,45,1)
(27,21,1)
(9,30,1)
(22,34,1)
(45,10,1)
(7,25,1)
(2,33,2)
(10,2,2)
(10,34,2)
(22,2,2)
(21,31,2)
(33,44,2)
(8,7,2)
(34,2,2)
(15,45,2)
(27,21,2)
(9,30,2)
(45,10,2)
(15,27,2)
(17,1,2)
(5,2,2)
(31,1,2)
(28,1,2)
(21,1,2)
(15,8,2)
(1,2,2)
(11,1,2)
(13,27,2)
(30,27,2)
(1,27,2)
(39,2,2)
(35,27,2)
(31,33,2)
(6,2,2)
(1,45,2)
(19,27,2)
(34,33,2)
(36,1,2)
(24,1,2)
(29,2,2)
(3,45,2)
(3,27,2)
(40,2,2)
(9,36,2)
(13,2,2)
(21,45,2)
(44,8,2)
(18,1,2)
(35,2,2)
(27,1,2)
(9,20,2)
(20,2,2)
(45,2,2)
(12,27,2)
(41,1,2)
(26,27,2)
-----------------------------------
(0,)
(1,i >= CPUIDLE_DRIVER_STATE_START)
(2,!drv)
(3,i--)
(4,drv)
(5,i)
(6,-ENODEV)
(7,__this_cpu_read(cpuidle_devices)
(8,*dev = __this_cpu_read(cpuidle_devices)
(9,RET)
(10,drv->state_count - 1)
(11,enter_dead)
(12,dev)
(13,i)
(14,drv)
(15,drv->states[i].enter_dead(dev, i)
(16,i)
(17,states)
(18,drv)
(19,i)
(20,return -ENODEV;)
(21,drv->states[i])
(22,1)
(23,if (!drv)
(24,ENODEV)
(25,cpuidle_devices)
(26,i)
(27,drv->states[i].enter_dead)
(28,i)
(29,ENODEV)
(30,return drv->states[i].enter_dead(dev, i)
(31,drv->states)
(32,drv)
(33,*drv = cpuidle_get_cpu_driver(dev)
(34,drv->state_count)
(35,CPUIDLE_DRIVER_STATE_START)
(36,return -ENODEV;)
(37,dev)
(38,for (i = drv->state_count - 1; i >= CPUIDLE_DRIVER_STATE_START; i--)
(39,state_count)
(40,drv)
(41,-ENODEV)
(42,dev)
(43,dev)
(44,cpuidle_get_cpu_driver(dev)
(45,i = drv->state_count - 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^