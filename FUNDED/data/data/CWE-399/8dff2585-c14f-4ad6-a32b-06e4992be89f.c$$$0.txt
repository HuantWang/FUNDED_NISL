-----label-----
0
-----code-----
unsigned long arch_mmap_rnd(void)
{
	unsigned long rnd;

	/* 8 bits of randomness in 20 address space bits */
	rnd = (unsigned long)get_random_int() % (1 << 8);

	return rnd << PAGE_SHIFT;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
10,11
11,12
11,13
13,14
15,16
16,17
16,18
17,18
19,20
19,21
20,21
20,22
21,22
21,23
24,25
25,26
27,28
28,29
28,30
31,32
32,33
32,34
33,34
35,36
-----nextToken-----
2,4,6,8,12,14,18,22,23,26,29,30,34,36
-----computeFrom-----
16,17
16,18
19,20
19,21
28,29
28,30
32,33
32,34
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;FunctionCallExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;ReturnStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
unsigned long arch_mmap_rnd(void){	unsigned long rnd;	/* 8 bits of randomness in 20 address space bits */	rnd = (unsigned long)get_random_int() % (1 << 8);	return rnd << PAGE_SHIFT;}
unsigned long
arch_mmap_rnd(void)
arch_mmap_rnd
void
void


{	unsigned long rnd;	/* 8 bits of randomness in 20 address space bits */	rnd = (unsigned long)get_random_int() % (1 << 8);	return rnd << PAGE_SHIFT;}
unsigned long rnd;
unsigned long rnd;
unsigned long
rnd
rnd
rnd = (unsigned long)get_random_int() % (1 << 8);
rnd = (unsigned long)get_random_int() % (1 << 8)
rnd
rnd
(unsigned long)get_random_int() % (1 << 8)
(unsigned long)get_random_int()
unsigned long
unsigned long

get_random_int()
get_random_int
get_random_int
(1 << 8)
1 << 8
1
8
return rnd << PAGE_SHIFT;
rnd << PAGE_SHIFT
rnd
rnd
PAGE_SHIFT
PAGE_SHIFT
-----joern-----
(13,6,0)
(2,7,0)
(4,0,0)
(9,0,0)
(6,9,0)
(1,8,0)
(12,9,0)
(11,8,0)
(6,15,0)
(10,0,0)
(8,7,0)
(8,12,0)
(3,5,0)
(15,6,0)
(7,5,0)
(9,12,0)
(6,13,0)
(0,9,0)
(14,12,0)
(9,6,0)
(12,5,0)
(9,0,1)
(13,14,1)
(10,6,1)
(11,1,1)
(2,7,1)
(8,12,1)
(12,9,1)
(9,6,1)
(1,12,1)
(0,4,1)
(6,13,1)
(7,8,1)
(8,11,1)
(6,15,1)
(4,10,1)
(8,12,2)
(6,13,2)
(9,0,2)
(9,6,2)
(2,7,2)
(6,15,2)
(12,9,2)
-----------------------------------
(0,1 << 8)
(1,rnd)
(2,RET)
(3,rnd)
(4,8)
(5,)
(6,(unsigned long)
(7,return rnd << PAGE_SHIFT;)
(8,rnd << PAGE_SHIFT)
(9,(unsigned long)
(10,1)
(11,PAGE_SHIFT)
(12,rnd = (unsigned long)
(13,get_random_int()
(14,rnd)
(15,unsigned long)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^