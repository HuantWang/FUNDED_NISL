-----label-----
1
-----code-----
static void ath_tx_txqaddbuf(struct ath_softc *sc, struct ath_txq *txq,
			     struct list_head *head, bool internal)
{
	struct ath_hw *ah = sc->sc_ah;
	struct ath_common *common = ath9k_hw_common(ah);
	struct ath_buf *bf, *bf_last;
	bool puttxbuf = false;
	bool edma;

	/*
	 * Insert the frame on the outbound list and
	 * pass it on to the hardware.
	 */

	if (list_empty(head))
		return;

	edma = !!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA);
	bf = list_first_entry(head, struct ath_buf, list);
	bf_last = list_entry(head->prev, struct ath_buf, list);

	ath_dbg(common, QUEUE, "qnum: %d, txq depth: %d\n",
		txq->axq_qnum, txq->axq_depth);

	if (edma && list_empty(&txq->txq_fifo[txq->txq_headidx])) {
		list_splice_tail_init(head, &txq->txq_fifo[txq->txq_headidx]);
		INCR(txq->txq_headidx, ATH_TXFIFO_DEPTH);
		puttxbuf = true;
	} else {
		list_splice_tail_init(head, &txq->axq_q);

		if (txq->axq_link) {
			ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr);
			ath_dbg(common, XMIT, "link[%u] (%p)=%llx (%p)\n",
				txq->axq_qnum, txq->axq_link,
				ito64(bf->bf_daddr), bf->bf_desc);
		} else if (!edma)
			puttxbuf = true;

		txq->axq_link = bf_last->bf_desc;
	}

	if (puttxbuf) {
		TX_STAT_INC(txq->axq_qnum, puttxbuf);
		ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr);
		ath_dbg(common, XMIT, "TXDP[%u] = %llx (%p)\n",
			txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc);
	}

	if (!edma) {
		TX_STAT_INC(txq->axq_qnum, txstart);
		ath9k_hw_txstart(ah, txq->axq_qnum);
	}

	if (!internal) {
		while (bf) {
			txq->axq_depth++;
			if (bf_is_ampdu_not_probing(bf))
				txq->axq_ampdu_depth++;

			bf_last = bf->bf_lastbf;
			bf = bf_last->bf_next;
			bf_last->bf_next = NULL;
		}
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
20,22
23,24
23,25
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
40,41
41,42
41,43
42,43
44,45
44,46
44,47
47,48
48,49
48,50
49,50
51,52
53,54
54,55
54,56
54,57
55,56
57,58
57,59
60,61
60,62
63,64
64,65
64,66
66,67
66,68
68,69
70,71
71,72
71,73
73,74
75,76
75,77
76,77
76,78
77,78
79,80
82,83
83,84
83,85
84,85
86,87
87,88
88,89
89,90
89,91
90,91
90,92
91,92
91,93
92,93
96,97
98,99
99,100
100,101
101,102
101,103
101,104
101,105
101,106
101,107
102,103
104,105
106,107
109,110
109,111
110,111
113,114
113,115
114,115
117,118
117,119
117,120
118,119
118,120
119,120
121,122
121,123
122,123
124,125
125,126
125,127
126,127
126,128
127,128
130,131
130,132
131,132
134,135
134,136
134,137
135,136
136,137
136,138
136,139
137,138
139,140
141,142
142,143
142,144
143,144
143,145
144,145
147,148
147,149
148,149
151,152
152,153
152,154
152,155
153,154
155,156
155,157
156,157
159,160
161,162
162,163
162,164
163,164
166,167
166,168
166,169
167,168
168,169
168,170
168,171
169,170
171,172
173,174
174,175
174,176
175,176
178,179
178,180
178,181
179,180
179,181
180,181
183,184
183,185
184,185
185,186
185,187
185,188
185,189
186,187
188,189
190,191
190,192
191,192
194,195
194,196
195,196
198,199
199,200
199,201
199,202
199,203
199,204
199,205
199,206
199,207
200,201
202,203
204,205
207,208
207,209
208,209
211,212
211,213
212,213
215,216
215,217
216,217
218,219
218,220
219,220
222,223
222,224
223,224
226,227
226,228
227,228
228,229
230,231
231,232
231,233
232,233
235,236
236,237
236,238
237,238
237,239
238,239
241,242
241,243
242,243
245,246
245,247
246,247
248,249
248,250
248,251
249,250
250,251
250,252
250,253
251,252
253,254
253,255
254,255
257,258
259,260
260,261
260,262
260,263
260,264
261,262
263,264
265,266
265,267
266,267
269,270
269,271
270,271
273,274
274,275
274,276
274,277
274,278
274,279
274,280
274,281
275,276
277,278
279,280
282,283
282,284
283,284
286,287
286,288
287,288
289,290
289,291
290,291
293,294
293,295
294,295
297,298
297,299
298,299
299,300
301,302
301,303
302,303
303,304
303,305
303,306
304,305
306,307
306,308
307,308
310,311
312,313
313,314
313,315
313,316
314,315
316,317
318,319
318,320
319,320
322,323
322,324
323,324
324,325
326,327
327,328
327,329
328,329
330,331
330,332
330,333
330,334
330,335
331,332
332,333
333,334
333,335
334,335
337,338
337,339
338,339
338,340
339,340
341,342
343,344
344,345
345,346
345,347
346,347
349,350
350,351
350,352
351,352
353,354
353,355
354,355
357,358
358,359
358,360
359,360
361,362
361,363
362,363
365,366
366,367
366,368
367,368
367,369
368,369
371,372
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,22,24,26,31,33,34,38,39,43,45,46,50,52,56,58,59,61,62,65,67,69,72,74,78,80,81,85,93,94,95,97,103,105,107,108,111,112,115,116,120,123,128,129,132,133,138,140,145,146,149,150,154,157,158,160,164,165,170,172,176,177,181,182,187,189,192,193,196,197,201,203,205,206,209,210,213,214,217,220,221,224,225,229,233,234,239,240,243,244,247,252,255,256,258,262,264,267,268,271,272,276,278,280,281,284,285,288,291,292,295,296,300,305,308,309,311,315,317,320,321,325,329,335,336,340,342,347,348,352,355,356,360,363,364,369,370,372
-----computeFrom-----
83,84
83,85
89,90
89,91
118,119
118,120
162,163
162,164
231,232
231,233
236,237
236,238
350,351
350,352
358,359
358,360
366,367
366,368
-----guardedBy-----
133,158
132,157
129,146
-----guardedByNegation-----
120,229
132,239
-----lastLexicalUse-----
132,239
-----jump-----
132,239
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ProblemStatement;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;WhileStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static void ath_tx_txqaddbuf(struct ath_softc *sc, struct ath_txq *txq,			     struct list_head *head, bool internal){	struct ath_hw *ah = sc->sc_ah;	struct ath_common *common = ath9k_hw_common(ah);	struct ath_buf *bf, *bf_last;	bool puttxbuf = false;	bool edma;	/*	 * Insert the frame on the outbound list and	 * pass it on to the hardware.	 */	if (list_empty(head))		return;	edma = !!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA);	bf = list_first_entry(head, struct ath_buf, list);	bf_last = list_entry(head->prev, struct ath_buf, list);	ath_dbg(common, QUEUE, "qnum: %d, txq depth: %d\n",		txq->axq_qnum, txq->axq_depth);	if (edma && list_empty(&txq->txq_fifo[txq->txq_headidx])) {		list_splice_tail_init(head, &txq->txq_fifo[txq->txq_headidx]);		INCR(txq->txq_headidx, ATH_TXFIFO_DEPTH);		puttxbuf = true;	} else {		list_splice_tail_init(head, &txq->axq_q);		if (txq->axq_link) {			ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr);			ath_dbg(common, XMIT, "link[%u] (%p)=%llx (%p)\n",				txq->axq_qnum, txq->axq_link,				ito64(bf->bf_daddr), bf->bf_desc);		} else if (!edma)			puttxbuf = true;		txq->axq_link = bf_last->bf_desc;	}	if (puttxbuf) {		TX_STAT_INC(txq->axq_qnum, puttxbuf);		ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr);		ath_dbg(common, XMIT, "TXDP[%u] = %llx (%p)\n",			txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc);	}	if (!edma) {		TX_STAT_INC(txq->axq_qnum, txstart);		ath9k_hw_txstart(ah, txq->axq_qnum);	}	if (!internal) {		while (bf) {			txq->axq_depth++;			if (bf_is_ampdu_not_probing(bf))				txq->axq_ampdu_depth++;			bf_last = bf->bf_lastbf;			bf = bf_last->bf_next;			bf_last->bf_next = NULL;		}	}}
static void
ath_tx_txqaddbuf(struct ath_softc *sc, struct ath_txq *txq,			     struct list_head *head, bool internal)
ath_tx_txqaddbuf
struct ath_softc *sc
struct ath_softc
ath_softc
*sc
*
sc
struct ath_txq *txq
struct ath_txq
ath_txq
*txq
*
txq
struct list_head *head
struct list_head
list_head
*head
*
head
bool internal
bool
internal
internal
{	struct ath_hw *ah = sc->sc_ah;	struct ath_common *common = ath9k_hw_common(ah);	struct ath_buf *bf, *bf_last;	bool puttxbuf = false;	bool edma;	/*	 * Insert the frame on the outbound list and	 * pass it on to the hardware.	 */	if (list_empty(head))		return;	edma = !!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA);	bf = list_first_entry(head, struct ath_buf, list);	bf_last = list_entry(head->prev, struct ath_buf, list);	ath_dbg(common, QUEUE, "qnum: %d, txq depth: %d\n",		txq->axq_qnum, txq->axq_depth);	if (edma && list_empty(&txq->txq_fifo[txq->txq_headidx])) {		list_splice_tail_init(head, &txq->txq_fifo[txq->txq_headidx]);		INCR(txq->txq_headidx, ATH_TXFIFO_DEPTH);		puttxbuf = true;	} else {		list_splice_tail_init(head, &txq->axq_q);		if (txq->axq_link) {			ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr);			ath_dbg(common, XMIT, "link[%u] (%p)=%llx (%p)\n",				txq->axq_qnum, txq->axq_link,				ito64(bf->bf_daddr), bf->bf_desc);		} else if (!edma)			puttxbuf = true;		txq->axq_link = bf_last->bf_desc;	}	if (puttxbuf) {		TX_STAT_INC(txq->axq_qnum, puttxbuf);		ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr);		ath_dbg(common, XMIT, "TXDP[%u] = %llx (%p)\n",			txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc);	}	if (!edma) {		TX_STAT_INC(txq->axq_qnum, txstart);		ath9k_hw_txstart(ah, txq->axq_qnum);	}	if (!internal) {		while (bf) {			txq->axq_depth++;			if (bf_is_ampdu_not_probing(bf))				txq->axq_ampdu_depth++;			bf_last = bf->bf_lastbf;			bf = bf_last->bf_next;			bf_last->bf_next = NULL;		}	}}
struct ath_hw *ah = sc->sc_ah;
struct ath_hw *ah = sc->sc_ah;
struct ath_hw
ath_hw
*ah = sc->sc_ah
*
ah
= sc->sc_ah
sc->sc_ah
sc
sc
sc_ah
struct ath_common *common = ath9k_hw_common(ah);
struct ath_common *common = ath9k_hw_common(ah);
struct ath_common
ath_common
*common = ath9k_hw_common(ah)
*
common
= ath9k_hw_common(ah)
ath9k_hw_common(ah)
ath9k_hw_common
ath9k_hw_common
ah
ah
struct ath_buf *bf, *bf_last;
struct ath_buf *bf, *bf_last;
struct ath_buf
ath_buf
*bf
*
bf
*bf_last
*
bf_last
bool puttxbuf = false;
bool puttxbuf = false;
bool
puttxbuf = false
puttxbuf
= false
false
bool edma;
bool edma;
bool
edma
edma
if (list_empty(head))		return;
list_empty(head)
list_empty
list_empty
head
head
return;
edma = !!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA);
edma = !!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
edma
edma
!!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
ah->caps.hw_caps & ATH9K_HW_CAP_EDMA
ah->caps.hw_caps
ah->caps
ah
ah
caps
hw_caps
ATH9K_HW_CAP_EDMA
ATH9K_HW_CAP_EDMA
bf = list_first_entry(head, struct ath_buf, list);
bf_last = list_entry(head->prev, struct ath_buf, list);
ath_dbg(common, QUEUE, "qnum: %d, txq depth: %d\n",		txq->axq_qnum, txq->axq_depth);
ath_dbg(common, QUEUE, "qnum: %d, txq depth: %d\n",		txq->axq_qnum, txq->axq_depth)
ath_dbg
ath_dbg
common
common
QUEUE
QUEUE
"qnum: %d, txq depth: %d\n"
txq->axq_qnum
txq
txq
axq_qnum
txq->axq_depth
txq
txq
axq_depth
if (edma && list_empty(&txq->txq_fifo[txq->txq_headidx])) {		list_splice_tail_init(head, &txq->txq_fifo[txq->txq_headidx]);		INCR(txq->txq_headidx, ATH_TXFIFO_DEPTH);		puttxbuf = true;	} else {		list_splice_tail_init(head, &txq->axq_q);		if (txq->axq_link) {			ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr);			ath_dbg(common, XMIT, "link[%u] (%p)=%llx (%p)\n",				txq->axq_qnum, txq->axq_link,				ito64(bf->bf_daddr), bf->bf_desc);		} else if (!edma)			puttxbuf = true;		txq->axq_link = bf_last->bf_desc;	}
edma && list_empty(&txq->txq_fifo[txq->txq_headidx])
edma
edma
list_empty(&txq->txq_fifo[txq->txq_headidx])
list_empty
list_empty
&txq->txq_fifo[txq->txq_headidx]
txq->txq_fifo[txq->txq_headidx]
txq->txq_fifo
txq
txq
txq_fifo
txq->txq_headidx
txq
txq
txq_headidx
{		list_splice_tail_init(head, &txq->txq_fifo[txq->txq_headidx]);		INCR(txq->txq_headidx, ATH_TXFIFO_DEPTH);		puttxbuf = true;	}
list_splice_tail_init(head, &txq->txq_fifo[txq->txq_headidx]);
list_splice_tail_init(head, &txq->txq_fifo[txq->txq_headidx])
list_splice_tail_init
list_splice_tail_init
head
head
&txq->txq_fifo[txq->txq_headidx]
txq->txq_fifo[txq->txq_headidx]
txq->txq_fifo
txq
txq
txq_fifo
txq->txq_headidx
txq
txq
txq_headidx
INCR(txq->txq_headidx, ATH_TXFIFO_DEPTH);
INCR(txq->txq_headidx, ATH_TXFIFO_DEPTH)
INCR
INCR
txq->txq_headidx
txq
txq
txq_headidx
ATH_TXFIFO_DEPTH
ATH_TXFIFO_DEPTH
puttxbuf = true;
puttxbuf = true
puttxbuf
puttxbuf
true
{		list_splice_tail_init(head, &txq->axq_q);		if (txq->axq_link) {			ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr);			ath_dbg(common, XMIT, "link[%u] (%p)=%llx (%p)\n",				txq->axq_qnum, txq->axq_link,				ito64(bf->bf_daddr), bf->bf_desc);		} else if (!edma)			puttxbuf = true;		txq->axq_link = bf_last->bf_desc;	}
list_splice_tail_init(head, &txq->axq_q);
list_splice_tail_init(head, &txq->axq_q)
list_splice_tail_init
list_splice_tail_init
head
head
&txq->axq_q
txq->axq_q
txq
txq
axq_q
if (txq->axq_link) {			ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr);			ath_dbg(common, XMIT, "link[%u] (%p)=%llx (%p)\n",				txq->axq_qnum, txq->axq_link,				ito64(bf->bf_daddr), bf->bf_desc);		} else if (!edma)			puttxbuf = true;
txq->axq_link
txq
txq
axq_link
{			ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr);			ath_dbg(common, XMIT, "link[%u] (%p)=%llx (%p)\n",				txq->axq_qnum, txq->axq_link,				ito64(bf->bf_daddr), bf->bf_desc);		}
ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr);
ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr)
ath9k_hw_set_desc_link
ath9k_hw_set_desc_link
ah
ah
txq->axq_link
txq
txq
axq_link
bf->bf_daddr
bf
bf
bf_daddr
ath_dbg(common, XMIT, "link[%u] (%p)=%llx (%p)\n",				txq->axq_qnum, txq->axq_link,				ito64(bf->bf_daddr), bf->bf_desc);
ath_dbg(common, XMIT, "link[%u] (%p)=%llx (%p)\n",				txq->axq_qnum, txq->axq_link,				ito64(bf->bf_daddr), bf->bf_desc)
ath_dbg
ath_dbg
common
common
XMIT
XMIT
"link[%u] (%p)=%llx (%p)\n"
txq->axq_qnum
txq
txq
axq_qnum
txq->axq_link
txq
txq
axq_link
ito64(bf->bf_daddr)
ito64
ito64
bf->bf_daddr
bf
bf
bf_daddr
bf->bf_desc
bf
bf
bf_desc
if (!edma)			puttxbuf = true;
!edma
edma
edma
puttxbuf = true;
puttxbuf = true
puttxbuf
puttxbuf
true
txq->axq_link = bf_last->bf_desc;
txq->axq_link = bf_last->bf_desc
txq->axq_link
txq
txq
axq_link
bf_last->bf_desc
bf_last
bf_last
bf_desc
if (puttxbuf) {		TX_STAT_INC(txq->axq_qnum, puttxbuf);		ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr);		ath_dbg(common, XMIT, "TXDP[%u] = %llx (%p)\n",			txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc);	}
puttxbuf
puttxbuf
{		TX_STAT_INC(txq->axq_qnum, puttxbuf);		ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr);		ath_dbg(common, XMIT, "TXDP[%u] = %llx (%p)\n",			txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc);	}
TX_STAT_INC(txq->axq_qnum, puttxbuf);
TX_STAT_INC(txq->axq_qnum, puttxbuf)
TX_STAT_INC
TX_STAT_INC
txq->axq_qnum
txq
txq
axq_qnum
puttxbuf
puttxbuf
ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr);
ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr)
ath9k_hw_puttxbuf
ath9k_hw_puttxbuf
ah
ah
txq->axq_qnum
txq
txq
axq_qnum
bf->bf_daddr
bf
bf
bf_daddr
ath_dbg(common, XMIT, "TXDP[%u] = %llx (%p)\n",			txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc);
ath_dbg(common, XMIT, "TXDP[%u] = %llx (%p)\n",			txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc)
ath_dbg
ath_dbg
common
common
XMIT
XMIT
"TXDP[%u] = %llx (%p)\n"
txq->axq_qnum
txq
txq
axq_qnum
ito64(bf->bf_daddr)
ito64
ito64
bf->bf_daddr
bf
bf
bf_daddr
bf->bf_desc
bf
bf
bf_desc
if (!edma) {		TX_STAT_INC(txq->axq_qnum, txstart);		ath9k_hw_txstart(ah, txq->axq_qnum);	}
!edma
edma
edma
{		TX_STAT_INC(txq->axq_qnum, txstart);		ath9k_hw_txstart(ah, txq->axq_qnum);	}
TX_STAT_INC(txq->axq_qnum, txstart);
TX_STAT_INC(txq->axq_qnum, txstart)
TX_STAT_INC
TX_STAT_INC
txq->axq_qnum
txq
txq
axq_qnum
txstart
txstart
ath9k_hw_txstart(ah, txq->axq_qnum);
ath9k_hw_txstart(ah, txq->axq_qnum)
ath9k_hw_txstart
ath9k_hw_txstart
ah
ah
txq->axq_qnum
txq
txq
axq_qnum
if (!internal) {		while (bf) {			txq->axq_depth++;			if (bf_is_ampdu_not_probing(bf))				txq->axq_ampdu_depth++;			bf_last = bf->bf_lastbf;			bf = bf_last->bf_next;			bf_last->bf_next = NULL;		}	}
!internal
internal
internal
{		while (bf) {			txq->axq_depth++;			if (bf_is_ampdu_not_probing(bf))				txq->axq_ampdu_depth++;			bf_last = bf->bf_lastbf;			bf = bf_last->bf_next;			bf_last->bf_next = NULL;		}	}
while (bf) {			txq->axq_depth++;			if (bf_is_ampdu_not_probing(bf))				txq->axq_ampdu_depth++;			bf_last = bf->bf_lastbf;			bf = bf_last->bf_next;			bf_last->bf_next = NULL;		}
bf
bf
{			txq->axq_depth++;			if (bf_is_ampdu_not_probing(bf))				txq->axq_ampdu_depth++;			bf_last = bf->bf_lastbf;			bf = bf_last->bf_next;			bf_last->bf_next = NULL;		}
txq->axq_depth++;
txq->axq_depth++
txq->axq_depth
txq
txq
axq_depth
if (bf_is_ampdu_not_probing(bf))				txq->axq_ampdu_depth++;
bf_is_ampdu_not_probing(bf)
bf_is_ampdu_not_probing
bf_is_ampdu_not_probing
bf
bf
txq->axq_ampdu_depth++;
txq->axq_ampdu_depth++
txq->axq_ampdu_depth
txq
txq
axq_ampdu_depth
bf_last = bf->bf_lastbf;
bf_last = bf->bf_lastbf
bf_last
bf_last
bf->bf_lastbf
bf
bf
bf_lastbf
bf = bf_last->bf_next;
bf = bf_last->bf_next
bf
bf
bf_last->bf_next
bf_last
bf_last
bf_next
bf_last->bf_next = NULL;
bf_last->bf_next = NULL
bf_last->bf_next
bf_last
bf_last
bf_next
NULL
NULL
-----joern-----
(53,60,0)
(129,43,0)
(201,35,0)
(76,156,0)
(74,171,0)
(198,110,0)
(45,165,0)
(43,129,0)
(78,1,0)
(4,109,0)
(158,44,0)
(199,7,0)
(45,156,0)
(33,165,0)
(196,46,0)
(166,21,0)
(21,174,0)
(197,29,0)
(94,66,0)
(31,17,0)
(177,161,0)
(111,55,0)
(107,1,0)
(122,153,0)
(174,112,0)
(140,204,0)
(90,23,0)
(188,37,0)
(97,188,0)
(85,74,0)
(49,7,0)
(38,156,0)
(175,82,0)
(17,79,0)
(202,79,0)
(126,24,0)
(93,7,0)
(199,66,0)
(88,123,0)
(182,7,0)
(34,189,0)
(183,105,0)
(193,106,0)
(150,169,0)
(151,169,0)
(47,17,0)
(40,174,0)
(98,204,0)
(55,205,0)
(132,79,0)
(96,171,0)
(174,10,0)
(124,21,0)
(159,199,0)
(92,122,0)
(158,129,0)
(9,79,0)
(30,112,0)
(115,43,0)
(74,189,0)
(105,183,0)
(88,199,0)
(174,199,0)
(64,36,0)
(134,7,0)
(111,73,0)
(101,110,0)
(81,104,0)
(9,105,0)
(119,153,0)
(165,33,0)
(20,88,0)
(176,57,0)
(146,54,0)
(136,69,0)
(164,60,0)
(173,7,0)
(135,155,0)
(167,55,0)
(106,111,0)
(178,79,0)
(140,24,0)
(103,44,0)
(46,79,0)
(43,86,0)
(105,7,0)
(180,112,0)
(48,114,0)
(202,88,0)
(153,15,0)
(204,140,0)
(104,13,0)
(42,88,0)
(188,7,0)
(170,61,0)
(102,179,0)
(155,88,0)
(74,61,0)
(56,2,0)
(172,104,0)
(158,5,0)
(41,130,0)
(189,79,0)
(0,60,0)
(55,111,0)
(6,61,0)
(47,123,0)
(8,88,0)
(12,189,0)
(52,73,0)
(169,79,0)
(18,135,0)
(54,146,0)
(112,174,0)
(22,46,0)
(109,73,0)
(148,72,0)
(88,82,0)
(32,202,0)
(100,29,0)
(100,146,0)
(70,47,0)
(156,45,0)
(200,7,0)
(35,79,0)
(153,188,0)
(62,183,0)
(66,199,0)
(149,202,0)
(205,73,0)
(122,79,0)
(104,79,0)
(53,57,0)
(145,17,0)
(181,2,0)
(129,158,0)
(179,33,0)
(174,163,0)
(102,188,0)
(39,105,0)
(5,158,0)
(155,135,0)
(133,174,0)
(154,7,0)
(91,33,0)
(190,132,0)
(205,106,0)
(74,123,0)
(65,57,0)
(137,9,0)
(139,171,0)
(36,205,0)
(130,156,0)
(1,40,0)
(51,192,0)
(153,122,0)
(58,37,0)
(187,163,0)
(192,87,0)
(125,132,0)
(5,79,0)
(161,79,0)
(183,79,0)
(37,184,0)
(204,79,0)
(71,102,0)
(88,155,0)
(55,109,0)
(23,83,0)
(105,9,0)
(146,100,0)
(65,152,0)
(174,21,0)
(140,188,0)
(63,79,0)
(19,7,0)
(33,179,0)
(174,40,0)
(25,161,0)
(179,102,0)
(147,183,0)
(169,152,0)
(156,7,0)
(143,79,0)
(59,105,0)
(168,13,0)
(195,138,0)
(11,36,0)
(3,143,0)
(47,110,0)
(114,86,0)
(36,109,0)
(89,178,0)
(50,163,0)
(46,54,0)
(74,2,0)
(47,188,0)
(120,65,0)
(67,174,0)
(105,199,0)
(2,7,0)
(163,79,0)
(13,104,0)
(186,204,0)
(203,63,0)
(116,132,0)
(108,82,0)
(17,47,0)
(113,38,0)
(95,135,0)
(75,7,0)
(131,7,0)
(88,202,0)
(152,169,0)
(194,143,0)
(163,174,0)
(54,178,0)
(162,105,0)
(37,188,0)
(40,1,0)
(142,178,0)
(13,15,0)
(178,54,0)
(24,140,0)
(16,73,0)
(44,158,0)
(29,100,0)
(165,45,0)
(68,5,0)
(191,179,0)
(60,53,0)
(152,65,0)
(82,88,0)
(35,53,0)
(144,37,0)
(84,174,0)
(77,35,0)
(27,44,0)
(106,205,0)
(143,52,0)
(80,111,0)
(185,205,0)
(132,116,0)
(157,55,0)
(65,87,0)
(117,106,0)
(160,7,0)
(127,140,0)
(121,102,0)
(189,74,0)
(26,5,0)
(99,9,0)
(54,46,0)
(61,86,0)
(112,79,0)
(140,10,0)
(63,114,0)
(114,63,0)
(29,156,0)
(43,87,0)
(52,143,0)
(69,111,0)
(128,122,0)
(44,79,0)
(141,63,0)
(66,188,0)
(110,47,0)
(118,24,0)
(99,137,1)
(114,63,1)
(150,151,1)
(204,98,1)
(196,22,1)
(105,183,1)
(153,188,1)
(169,79,1)
(56,181,1)
(175,155,1)
(24,126,1)
(13,168,1)
(133,140,1)
(69,111,1)
(64,111,1)
(88,199,1)
(96,139,1)
(90,153,1)
(197,105,1)
(63,203,1)
(77,174,1)
(194,14,1)
(139,130,1)
(9,79,1)
(145,70,1)
(122,79,1)
(199,66,1)
(161,79,1)
(195,23,1)
(155,135,1)
(168,104,1)
(13,104,1)
(105,9,1)
(172,81,1)
(181,199,1)
(114,48,1)
(203,141,1)
(42,20,1)
(8,42,1)
(161,25,1)
(159,188,1)
(74,171,1)
(76,192,1)
(35,201,1)
(140,24,1)
(48,63,1)
(113,28,1)
(153,122,1)
(52,143,1)
(29,100,1)
(46,196,1)
(74,189,1)
(21,124,1)
(165,33,1)
(100,146,1)
(137,59,1)
(37,184,1)
(47,17,1)
(112,180,1)
(61,170,1)
(167,157,1)
(9,99,1)
(110,198,1)
(28,61,1)
(179,102,1)
(186,127,1)
(4,36,1)
(140,188,1)
(151,120,1)
(65,152,1)
(163,50,1)
(88,155,1)
(36,11,1)
(177,65,1)
(158,5,1)
(36,205,1)
(41,161,1)
(188,37,1)
(171,96,1)
(128,92,1)
(44,27,1)
(65,87,1)
(119,13,1)
(105,199,1)
(156,45,1)
(174,40,1)
(162,156,1)
(129,158,1)
(104,172,1)
(11,64,1)
(183,147,1)
(174,112,1)
(28,53,1)
(113,88,1)
(109,4,1)
(205,106,1)
(107,112,1)
(136,52,1)
(138,192,1)
(0,164,1)
(163,79,1)
(180,30,1)
(82,108,1)
(43,87,1)
(157,80,1)
(174,163,1)
(22,178,1)
(143,79,1)
(115,29,1)
(60,0,1)
(127,161,1)
(91,179,1)
(5,68,1)
(58,144,1)
(189,12,1)
(141,43,1)
(89,142,1)
(35,79,1)
(189,79,1)
(69,136,1)
(88,82,1)
(92,119,1)
(117,185,1)
(1,78,1)
(77,130,1)
(70,74,1)
(166,40,1)
(47,110,1)
(46,79,1)
(102,71,1)
(192,51,1)
(106,193,1)
(101,17,1)
(55,167,1)
(37,58,1)
(59,39,1)
(14,23,1)
(88,202,1)
(106,111,1)
(34,28,1)
(143,3,1)
(132,79,1)
(18,202,1)
(204,79,1)
(74,85,1)
(30,163,1)
(202,32,1)
(33,179,1)
(85,189,1)
(45,165,1)
(54,46,1)
(54,178,1)
(71,121,1)
(146,54,1)
(39,162,1)
(102,188,1)
(95,18,1)
(190,69,1)
(178,89,1)
(195,138,1)
(66,94,1)
(191,102,1)
(66,188,1)
(27,103,1)
(185,116,1)
(3,194,1)
(152,169,1)
(17,79,1)
(202,79,1)
(103,115,1)
(108,175,1)
(185,69,1)
(121,76,1)
(94,159,1)
(80,205,1)
(62,9,1)
(149,8,1)
(74,2,1)
(31,145,1)
(17,31,1)
(55,109,1)
(47,188,1)
(170,6,1)
(63,79,1)
(32,149,1)
(112,79,1)
(147,62,1)
(192,87,1)
(130,41,1)
(23,90,1)
(38,113,1)
(2,56,1)
(33,91,1)
(84,133,1)
(178,79,1)
(164,35,1)
(142,197,1)
(26,44,1)
(40,1,1)
(68,26,1)
(116,132,1)
(130,156,1)
(132,125,1)
(122,128,1)
(104,79,1)
(29,197,1)
(140,204,1)
(44,79,1)
(29,156,1)
(20,47,1)
(81,38,1)
(111,55,1)
(51,2,1)
(158,44,1)
(201,77,1)
(187,67,1)
(179,191,1)
(135,95,1)
(43,129,1)
(74,61,1)
(198,101,1)
(174,199,1)
(50,187,1)
(174,21,1)
(144,97,1)
(193,117,1)
(98,186,1)
(38,156,1)
(78,107,1)
(25,177,1)
(126,118,1)
(124,166,1)
(5,79,1)
(55,205,1)
(118,204,1)
(77,171,1)
(183,79,1)
(14,109,1)
(53,60,1)
(120,29,1)
(195,14,1)
(6,114,1)
(67,84,1)
(90,38,1)
(169,150,1)
(23,83,1)
(125,190,1)
(12,34,1)
(88,155,2)
(13,104,2)
(128,38,2)
(112,161,2)
(54,46,2)
(163,79,2)
(158,5,2)
(167,14,2)
(183,79,2)
(98,161,2)
(106,111,2)
(68,29,2)
(25,29,2)
(119,38,2)
(47,110,2)
(161,79,2)
(17,79,2)
(190,69,2)
(32,28,2)
(122,79,2)
(146,197,2)
(166,161,2)
(36,205,2)
(150,29,2)
(11,14,2)
(192,87,2)
(21,161,2)
(45,165,2)
(5,79,2)
(140,204,2)
(153,38,2)
(41,161,2)
(3,14,2)
(140,188,2)
(162,192,2)
(81,38,2)
(103,29,2)
(174,112,2)
(84,161,2)
(205,106,2)
(66,188,2)
(152,29,2)
(155,28,2)
(179,192,2)
(174,21,2)
(52,143,2)
(102,192,2)
(180,161,2)
(145,28,2)
(183,192,2)
(202,79,2)
(142,197,2)
(202,28,2)
(69,14,2)
(47,28,2)
(204,79,2)
(143,79,2)
(105,199,2)
(136,14,2)
(105,183,2)
(29,192,2)
(188,37,2)
(114,29,2)
(108,28,2)
(29,156,2)
(135,28,2)
(6,29,2)
(34,28,2)
(55,205,2)
(62,192,2)
(88,199,2)
(4,14,2)
(14,14,2)
(161,29,2)
(95,28,2)
(195,138,2)
(14,23,2)
(129,158,2)
(194,14,2)
(48,29,2)
(158,29,2)
(46,79,2)
(1,161,2)
(155,135,2)
(112,79,2)
(203,29,2)
(8,28,2)
(89,197,2)
(40,1,2)
(124,161,2)
(31,28,2)
(179,102,2)
(77,29,2)
(140,24,2)
(67,161,2)
(172,38,2)
(47,188,2)
(152,169,2)
(125,69,2)
(132,79,2)
(55,14,2)
(99,192,2)
(65,87,2)
(138,192,2)
(45,192,2)
(141,29,2)
(126,161,2)
(74,2,2)
(82,28,2)
(117,14,2)
(63,29,2)
(165,33,2)
(37,184,2)
(43,87,2)
(29,100,2)
(147,192,2)
(127,161,2)
(39,192,2)
(174,40,2)
(130,156,2)
(28,192,2)
(44,29,2)
(38,192,2)
(204,161,2)
(156,192,2)
(201,29,2)
(189,79,2)
(40,161,2)
(55,109,2)
(143,14,2)
(140,161,2)
(53,29,2)
(118,161,2)
(110,28,2)
(46,197,2)
(146,54,2)
(109,14,2)
(133,161,2)
(100,146,2)
(64,14,2)
(13,38,2)
(92,38,2)
(174,163,2)
(23,192,2)
(122,38,2)
(60,29,2)
(129,29,2)
(22,197,2)
(59,192,2)
(199,66,2)
(178,79,2)
(153,188,2)
(187,161,2)
(104,38,2)
(30,161,2)
(164,29,2)
(205,14,2)
(74,28,2)
(105,9,2)
(106,14,2)
(100,197,2)
(116,132,2)
(191,192,2)
(186,161,2)
(85,28,2)
(43,29,2)
(102,188,2)
(50,161,2)
(12,28,2)
(174,161,2)
(90,192,2)
(175,28,2)
(33,192,2)
(88,202,2)
(38,156,2)
(114,63,2)
(104,79,2)
(33,179,2)
(171,130,2)
(36,14,2)
(24,161,2)
(130,161,2)
(153,122,2)
(178,197,2)
(113,192,2)
(65,29,2)
(5,29,2)
(88,28,2)
(115,29,2)
(139,130,2)
(54,197,2)
(120,29,2)
(65,152,2)
(111,14,2)
(35,79,2)
(91,192,2)
(27,29,2)
(74,189,2)
(105,192,2)
(198,28,2)
(156,45,2)
(80,14,2)
(63,79,2)
(137,192,2)
(149,28,2)
(158,44,2)
(163,161,2)
(189,28,2)
(169,79,2)
(88,82,2)
(69,111,2)
(71,192,2)
(111,55,2)
(165,192,2)
(132,69,2)
(78,161,2)
(101,28,2)
(52,14,2)
(9,192,2)
(168,38,2)
(42,28,2)
(107,161,2)
(169,29,2)
(61,29,2)
(0,29,2)
(174,199,2)
(26,29,2)
(121,192,2)
(76,192,2)
(170,29,2)
(47,17,2)
(17,28,2)
(116,69,2)
(54,178,2)
(193,14,2)
(157,14,2)
(18,28,2)
(74,171,2)
(70,28,2)
(44,79,2)
(35,29,2)
(177,29,2)
(196,197,2)
(43,129,2)
(96,130,2)
(197,192,2)
(53,60,2)
(9,79,2)
(185,14,2)
(23,83,2)
(151,29,2)
(74,61,2)
(20,28,2)
-----------------------------------
(0,bf_desc)
(1,bf->bf_daddr)
(2,puttxbuf = false)
(3,axq_depth)
(4,NULL)
(5,txq->txq_headidx)
(6,puttxbuf)
(7,)
(8,"TXDP[%u] = %llx (%p)
(9,txq->axq_qnum)
(10,)
(11,bf_next)
(12,axq_qnum)
(13,TX_STAT_INC(txq->axq_qnum, txstart)
(14,bf)
(15,)
(16,if (bf_is_ampdu_not_probing(bf)
(17,txq->axq_qnum)
(18,bf)
(19,if (!internal)
(20,common)
(21,bf->bf_desc)
(22,txq)
(23,!internal)
(24,bf->bf_daddr)
(25,axq_link)
(26,txq)
(27,txq_fifo)
(28,puttxbuf)
(29,edma && list_empty(&txq->txq_fifo[txq->txq_headidx])
(30,txq)
(31,axq_qnum)
(32,axq_qnum)
(33,ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
(34,txq)
(35,txq->axq_link)
(36,bf_last->bf_next)
(37,sc->sc_ah)
(38,!edma)
(39,QUEUE)
(40,ito64(bf->bf_daddr)
(41,edma)
(42,XMIT)
(43,list_splice_tail_init(head, &txq->txq_fifo[txq->txq_headidx])
(44,txq->txq_fifo)
(45,!!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
(46,txq->txq_headidx)
(47,ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr)
(48,ATH_TXFIFO_DEPTH)
(49,if (list_empty(head)
(50,axq_qnum)
(51,head)
(52,txq->axq_depth++)
(53,txq->axq_link = bf_last->bf_desc)
(54,txq->txq_fifo[txq->txq_headidx])
(55,bf_last->bf_next)
(56,false)
(57,)
(58,sc_ah)
(59,"qnum: %d, txq depth: %d\\n")
(60,bf_last->bf_desc)
(61,puttxbuf = true)
(62,txq)
(63,txq->txq_headidx)
(64,bf_last)
(65,list_splice_tail_init(head, &txq->axq_q)
(66,ath9k_hw_common(ah)
(67,"link[%u] (%p)
(68,txq_headidx)
(69,bf_is_ampdu_not_probing(bf)
(70,ah)
(71,caps)
(72,)
(73,)
(74,TX_STAT_INC(txq->axq_qnum, puttxbuf)
(75,if (edma && list_empty(&txq->txq_fifo[txq->txq_headidx])
(76,edma)
(77,txq)
(78,bf_daddr)
(79,struct ath_txq *txq)
(80,bf)
(81,txq)
(82,bf->bf_desc)
(83,bool internal)
(84,XMIT)
(85,puttxbuf)
(86,)
(87,struct list_head *head)
(88,ath_dbg(common, XMIT, "TXDP[%u] = %llx (%p)
(89,txq_fifo)
(90,internal)
(91,ATH9K_HW_CAP_EDMA)
(92,txq)
(93,if (puttxbuf)
(94,ah)
(95,bf_daddr)
(96,true)
(97,ah)
(98,axq_link)
(99,axq_qnum)
(100,list_empty(&txq->txq_fifo[txq->txq_headidx])
(101,bf)
(102,ah->caps)
(103,txq)
(104,txq->axq_qnum)
(105,ath_dbg(common, QUEUE, "qnum: %d, txq depth: %d\\n",\n\\n\\t\\ttxq->axq_qnum, txq->axq_depth)
(106,bf->bf_lastbf)
(107,bf)
(108,bf_desc)
(109,bf_last->bf_next = NULL)
(110,bf->bf_daddr)
(111,bf = bf_last->bf_next)
(112,txq->axq_link)
(113,edma)
(114,INCR(txq->txq_headidx, ATH_TXFIFO_DEPTH)
(115,head)
(116,txq->axq_ampdu_depth++)
(117,bf)
(118,bf)
(119,ah)
(120,head)
(121,ah)
(122,txq->axq_qnum)
(123,)
(124,bf_desc)
(125,axq_ampdu_depth)
(126,bf_daddr)
(127,ah)
(128,axq_qnum)
(129,&txq->txq_fifo[txq->txq_headidx])
(130,!edma)
(131,common)
(132,txq->axq_ampdu_depth)
(133,common)
(134,edma)
(135,bf->bf_daddr)
(136,bf)
(137,txq)
(138,return;)
(139,puttxbuf)
(140,ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr)
(141,txq)
(142,txq)
(143,txq->axq_depth)
(144,sc)
(145,txq)
(146,&txq->txq_fifo[txq->txq_headidx])
(147,axq_depth)
(148,while (bf)
(149,txq)
(150,axq_q)
(151,txq)
(152,&txq->axq_q)
(153,ath9k_hw_txstart(ah, txq->axq_qnum)
(154,bf)
(155,ito64(bf->bf_daddr)
(156,edma = !!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
(157,bf_last)
(158,txq->txq_fifo[txq->txq_headidx])
(159,common)
(160,puttxbuf)
(161,txq->axq_link)
(162,common)
(163,txq->axq_qnum)
(164,bf_last)
(165,!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA)
(166,bf)
(167,bf_next)
(168,txstart)
(169,txq->axq_q)
(170,true)
(171,puttxbuf = true)
(172,axq_qnum)
(173,bf_last)
(174,ath_dbg(common, XMIT, "link[%u] (%p)
(175,bf)
(176,if (txq->axq_link)
(177,txq)
(178,txq->txq_fifo)
(179,ah->caps.hw_caps)
(180,axq_link)
(181,puttxbuf)
(182,ah)
(183,txq->axq_depth)
(184,struct ath_softc *sc)
(185,bf_last)
(186,txq)
(187,txq)
(188,*ah = sc->sc_ah)
(189,txq->axq_qnum)
(190,txq)
(191,hw_caps)
(192,list_empty(head)
(193,bf_lastbf)
(194,txq)
(195,RET)
(196,txq_headidx)
(197,edma)
(198,bf_daddr)
(199,*common = ath9k_hw_common(ah)
(200,if (!edma)
(201,axq_link)
(202,txq->axq_qnum)
(203,txq_headidx)
(204,txq->axq_link)
(205,bf_last = bf->bf_lastbf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^