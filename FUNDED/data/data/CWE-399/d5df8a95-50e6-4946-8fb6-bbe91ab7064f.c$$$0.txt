-----label-----
0
-----code-----
static bool manage_workers(struct worker *worker)
{
	struct worker_pool *pool = worker->pool;
	bool ret = false;

	/*
	 * Anyone who successfully grabs manager_arb wins the arbitration
	 * and becomes the manager.  mutex_trylock() on pool->manager_arb
	 * failure while holding pool->lock reliably indicates that someone
	 * else is managing the pool and the worker which failed trylock
	 * can proceed to executing work items.  This means that anyone
	 * grabbing manager_arb is responsible for actually performing
	 * manager duties.  If manager_arb is grabbed and released without
	 * actual management, the pool may stall indefinitely.
	 */
	if (!mutex_trylock(&pool->manager_arb))
		return ret;

	ret |= maybe_create_worker(pool);

	mutex_unlock(&pool->manager_arb);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
27,28
27,29
29,30
31,32
31,33
32,33
33,34
33,35
34,35
36,37
37,38
37,39
38,39
41,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
58,59
58,60
59,60
62,63
63,64
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,26,28,30,35,39,40,43,47,50,52,56,60,61,64
-----computeFrom-----
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static bool manage_workers(struct worker *worker){	struct worker_pool *pool = worker->pool;	bool ret = false;	/*	 * Anyone who successfully grabs manager_arb wins the arbitration	 * and becomes the manager.  mutex_trylock() on pool->manager_arb	 * failure while holding pool->lock reliably indicates that someone	 * else is managing the pool and the worker which failed trylock	 * can proceed to executing work items.  This means that anyone	 * grabbing manager_arb is responsible for actually performing	 * manager duties.  If manager_arb is grabbed and released without	 * actual management, the pool may stall indefinitely.	 */	if (!mutex_trylock(&pool->manager_arb))		return ret;	ret |= maybe_create_worker(pool);	mutex_unlock(&pool->manager_arb);	return ret;}
static bool
manage_workers(struct worker *worker)
manage_workers
struct worker *worker
struct worker
worker
*worker
*
worker
{	struct worker_pool *pool = worker->pool;	bool ret = false;	/*	 * Anyone who successfully grabs manager_arb wins the arbitration	 * and becomes the manager.  mutex_trylock() on pool->manager_arb	 * failure while holding pool->lock reliably indicates that someone	 * else is managing the pool and the worker which failed trylock	 * can proceed to executing work items.  This means that anyone	 * grabbing manager_arb is responsible for actually performing	 * manager duties.  If manager_arb is grabbed and released without	 * actual management, the pool may stall indefinitely.	 */	if (!mutex_trylock(&pool->manager_arb))		return ret;	ret |= maybe_create_worker(pool);	mutex_unlock(&pool->manager_arb);	return ret;}
struct worker_pool *pool = worker->pool;
struct worker_pool *pool = worker->pool;
struct worker_pool
worker_pool
*pool = worker->pool
*
pool
= worker->pool
worker->pool
worker
worker
pool
bool ret = false;
bool ret = false;
bool
ret = false
ret
= false
false
if (!mutex_trylock(&pool->manager_arb))		return ret;
!mutex_trylock(&pool->manager_arb)
mutex_trylock(&pool->manager_arb)
mutex_trylock
mutex_trylock
&pool->manager_arb
pool->manager_arb
pool
pool
manager_arb
return ret;
ret
ret
ret |= maybe_create_worker(pool);
ret |= maybe_create_worker(pool)
ret
ret
maybe_create_worker(pool)
maybe_create_worker
maybe_create_worker
pool
pool
mutex_unlock(&pool->manager_arb);
mutex_unlock(&pool->manager_arb)
mutex_unlock
mutex_unlock
&pool->manager_arb
pool->manager_arb
pool
pool
manager_arb
return ret;
ret
ret
-----joern-----
(17,24,0)
(7,23,0)
(23,3,0)
(19,18,0)
(32,9,0)
(28,21,0)
(18,6,0)
(11,14,0)
(20,27,0)
(6,18,0)
(4,18,0)
(9,24,0)
(23,24,0)
(6,26,0)
(29,24,0)
(30,11,0)
(3,22,0)
(32,12,0)
(31,12,0)
(15,3,0)
(26,24,0)
(14,21,0)
(26,6,0)
(12,27,0)
(21,14,0)
(17,13,0)
(5,24,0)
(0,17,0)
(17,27,0)
(13,17,0)
(16,27,0)
(3,23,0)
(11,30,0)
(8,3,0)
(13,23,0)
(1,13,0)
(10,21,0)
(27,24,0)
(2,9,0)
(25,24,0)
(18,23,0)
(9,17,0)
(14,11,0)
(21,23,0)
(21,23,1)
(9,2,1)
(32,12,1)
(30,11,1)
(0,30,1)
(31,30,1)
(15,8,1)
(18,23,1)
(23,3,1)
(17,13,1)
(6,18,1)
(3,22,1)
(10,28,1)
(12,27,1)
(27,16,1)
(13,1,1)
(4,19,1)
(21,10,1)
(17,27,1)
(1,0,1)
(32,9,1)
(12,31,1)
(3,15,1)
(19,17,1)
(20,23,1)
(13,23,1)
(28,27,1)
(11,14,1)
(26,6,1)
(8,7,1)
(2,26,1)
(18,4,1)
(16,20,1)
(14,21,1)
(9,17,1)
(6,18,2)
(18,23,2)
(31,30,2)
(2,30,2)
(30,11,2)
(13,23,2)
(3,22,2)
(12,30,2)
(17,27,2)
(6,30,2)
(17,30,2)
(9,17,2)
(21,23,2)
(19,30,2)
(26,6,2)
(12,27,2)
(1,30,2)
(11,14,2)
(26,30,2)
(0,30,2)
(32,12,2)
(14,21,2)
(13,30,2)
(18,30,2)
(4,30,2)
(32,9,2)
(23,3,2)
(9,30,2)
(17,13,2)
-----------------------------------
(0,ret)
(1,pool)
(2,ret)
(3,worker->pool)
(4,manager_arb)
(5,ret)
(6,&pool->manager_arb)
(7,pool)
(8,worker)
(9,return ret;)
(10,manager_arb)
(11,mutex_trylock(&pool->manager_arb)
(12,return ret;)
(13,maybe_create_worker(pool)
(14,&pool->manager_arb)
(15,pool)
(16,false)
(17,ret |= maybe_create_worker(pool)
(18,pool->manager_arb)
(19,pool)
(20,ret)
(21,pool->manager_arb)
(22,struct worker *worker)
(23,*pool = worker->pool)
(24,)
(25,pool)
(26,mutex_unlock(&pool->manager_arb)
(27,ret = false)
(28,pool)
(29,if (!mutex_trylock(&pool->manager_arb)
(30,!mutex_trylock(&pool->manager_arb)
(31,ret)
(32,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^