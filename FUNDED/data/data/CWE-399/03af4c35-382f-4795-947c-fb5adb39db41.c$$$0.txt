-----label-----
1
-----code-----
int can_nice(const struct task_struct *p, const int nice)
{
	/* convert nice value [19,-20] to rlimit style value [1,40] */
	int nice_rlim = 20 - nice;

	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||
		capable(CAP_SYS_NICE));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
16,17
17,18
17,19
19,20
19,21
21,22
22,23
22,24
24,25
26,27
27,28
28,29
28,30
29,30
29,31
30,31
32,33
32,34
32,35
33,34
35,36
37,38
39,40
39,41
40,41
42,43
-----nextToken-----
2,4,7,9,10,12,14,18,20,23,25,31,34,36,38,41,43
-----computeFrom-----
22,23
22,24
28,29
28,30
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;BinaryExpression;LiteralExpression;IdExpression;Name;ReturnStatement;UnaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
int can_nice(const struct task_struct *p, const int nice){	/* convert nice value [19,-20] to rlimit style value [1,40] */	int nice_rlim = 20 - nice;	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||		capable(CAP_SYS_NICE));}
int
can_nice(const struct task_struct *p, const int nice)
can_nice
const struct task_struct *p
const struct task_struct
task_struct
*p
*
p
const int nice
const int
nice
nice
{	/* convert nice value [19,-20] to rlimit style value [1,40] */	int nice_rlim = 20 - nice;	return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||		capable(CAP_SYS_NICE));}
int nice_rlim = 20 - nice;
int nice_rlim = 20 - nice;
int
nice_rlim = 20 - nice
nice_rlim
= 20 - nice
20 - nice
20
nice
nice
return (nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||		capable(CAP_SYS_NICE));
(nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||		capable(CAP_SYS_NICE))
nice_rlim <= task_rlimit(p, RLIMIT_NICE) ||		capable(CAP_SYS_NICE)
nice_rlim <= task_rlimit(p, RLIMIT_NICE)
nice_rlim
nice_rlim
task_rlimit(p, RLIMIT_NICE)
task_rlimit
task_rlimit
p
p
RLIMIT_NICE
RLIMIT_NICE
capable(CAP_SYS_NICE)
capable
capable
CAP_SYS_NICE
CAP_SYS_NICE
-----joern-----
(1,0,0)
(7,17,0)
(5,9,0)
(17,9,0)
(6,1,0)
(1,6,0)
(8,9,0)
(13,1,0)
(9,17,0)
(6,17,0)
(3,10,0)
(9,16,0)
(17,10,0)
(6,12,0)
(12,3,0)
(2,10,0)
(11,12,0)
(14,3,0)
(18,6,0)
(4,1,0)
(12,11,0)
(15,11,0)
(12,6,0)
(1,0,1)
(12,11,1)
(14,3,1)
(5,7,1)
(17,9,1)
(6,17,1)
(6,1,1)
(1,13,1)
(9,16,1)
(8,5,1)
(11,15,1)
(9,8,1)
(13,4,1)
(3,12,1)
(15,6,1)
(4,18,1)
(18,17,1)
(12,6,1)
(12,6,2)
(11,6,2)
(1,0,2)
(9,16,2)
(12,11,2)
(17,9,2)
(6,17,2)
(15,6,2)
(14,3,2)
(6,1,2)
-----------------------------------
(0,const struct task_struct *p)
(1,task_rlimit(p, RLIMIT_NICE)
(2,nice_rlim)
(3,return (nice_rlim <= task_rlimit(p, RLIMIT_NICE)
(4,p)
(5,20)
(6,nice_rlim <= task_rlimit(p, RLIMIT_NICE)
(7,nice_rlim)
(8,nice)
(9,20 - nice)
(10,)
(11,capable(CAP_SYS_NICE)
(12,nice_rlim <= task_rlimit(p, RLIMIT_NICE)
(13,RLIMIT_NICE)
(14,RET)
(15,CAP_SYS_NICE)
(16,const int nice)
(17,nice_rlim = 20 - nice)
(18,nice_rlim)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^