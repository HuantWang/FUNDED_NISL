-----label-----
0
-----code-----
static bool manage_workers(struct worker *worker)
{
	struct worker_pool *pool = worker->pool;
	bool ret = false;

	/*
	 * Anyone who successfully grabs manager_arb wins the arbitration
	 * and becomes the manager.  mutex_trylock() on pool->manager_arb
	 * failure while holding pool->lock reliably indicates that someone
	 * else is managing the pool and the worker which failed trylock
	 * can proceed to executing work items.  This means that anyone
	 * grabbing manager_arb is responsible for actually performing
	 * manager duties.  If manager_arb is grabbed and released without
	 * actual management, the pool may stall indefinitely.
	 */
	if (!mutex_trylock(&pool->manager_arb))
		return ret;

	ret |= maybe_create_worker(pool);

	mutex_unlock(&pool->manager_arb);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
27,28
27,29
29,30
31,32
31,33
32,33
33,34
33,35
34,35
36,37
37,38
37,39
38,39
41,42
42,43
44,45
45,46
45,47
46,47
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
58,59
58,60
59,60
62,63
63,64
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,26,28,30,35,39,40,43,47,50,52,56,60,61,64
-----computeFrom-----
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static bool manage_workers(struct worker *worker){	struct worker_pool *pool = worker->pool;	bool ret = false;	/*	 * Anyone who successfully grabs manager_arb wins the arbitration	 * and becomes the manager.  mutex_trylock() on pool->manager_arb	 * failure while holding pool->lock reliably indicates that someone	 * else is managing the pool and the worker which failed trylock	 * can proceed to executing work items.  This means that anyone	 * grabbing manager_arb is responsible for actually performing	 * manager duties.  If manager_arb is grabbed and released without	 * actual management, the pool may stall indefinitely.	 */	if (!mutex_trylock(&pool->manager_arb))		return ret;	ret |= maybe_create_worker(pool);	mutex_unlock(&pool->manager_arb);	return ret;}
static bool
manage_workers(struct worker *worker)
manage_workers
struct worker *worker
struct worker
worker
*worker
*
worker
{	struct worker_pool *pool = worker->pool;	bool ret = false;	/*	 * Anyone who successfully grabs manager_arb wins the arbitration	 * and becomes the manager.  mutex_trylock() on pool->manager_arb	 * failure while holding pool->lock reliably indicates that someone	 * else is managing the pool and the worker which failed trylock	 * can proceed to executing work items.  This means that anyone	 * grabbing manager_arb is responsible for actually performing	 * manager duties.  If manager_arb is grabbed and released without	 * actual management, the pool may stall indefinitely.	 */	if (!mutex_trylock(&pool->manager_arb))		return ret;	ret |= maybe_create_worker(pool);	mutex_unlock(&pool->manager_arb);	return ret;}
struct worker_pool *pool = worker->pool;
struct worker_pool *pool = worker->pool;
struct worker_pool
worker_pool
*pool = worker->pool
*
pool
= worker->pool
worker->pool
worker
worker
pool
bool ret = false;
bool ret = false;
bool
ret = false
ret
= false
false
if (!mutex_trylock(&pool->manager_arb))		return ret;
!mutex_trylock(&pool->manager_arb)
mutex_trylock(&pool->manager_arb)
mutex_trylock
mutex_trylock
&pool->manager_arb
pool->manager_arb
pool
pool
manager_arb
return ret;
ret
ret
ret |= maybe_create_worker(pool);
ret |= maybe_create_worker(pool)
ret
ret
maybe_create_worker(pool)
maybe_create_worker
maybe_create_worker
pool
pool
mutex_unlock(&pool->manager_arb);
mutex_unlock(&pool->manager_arb)
mutex_unlock
mutex_unlock
&pool->manager_arb
pool->manager_arb
pool
pool
manager_arb
return ret;
ret
ret
-----joern-----
(5,0,0)
(6,8,0)
(4,21,0)
(27,23,0)
(14,24,0)
(7,21,0)
(10,30,0)
(26,32,0)
(24,30,0)
(22,8,0)
(14,32,0)
(23,27,0)
(2,30,0)
(18,10,0)
(23,8,0)
(31,6,0)
(31,28,0)
(27,30,0)
(5,30,0)
(32,14,0)
(17,10,0)
(25,5,0)
(20,8,0)
(23,21,0)
(15,24,0)
(24,14,0)
(19,6,0)
(11,27,0)
(16,21,0)
(0,5,0)
(28,21,0)
(16,0,0)
(30,21,0)
(9,24,0)
(8,21,0)
(30,10,0)
(32,26,0)
(28,23,0)
(1,5,0)
(12,23,0)
(29,28,0)
(13,21,0)
(10,3,0)
(0,16,0)
(6,19,1)
(17,18,1)
(23,27,1)
(5,30,1)
(16,0,1)
(24,15,1)
(0,5,1)
(32,14,1)
(15,9,1)
(19,26,1)
(28,23,1)
(25,1,1)
(29,16,1)
(27,30,1)
(28,29,1)
(6,8,1)
(12,26,1)
(22,30,1)
(18,2,1)
(1,23,1)
(5,25,1)
(31,6,1)
(31,28,1)
(26,32,1)
(10,17,1)
(20,22,1)
(30,10,1)
(27,11,1)
(9,8,1)
(8,20,1)
(14,24,1)
(11,12,1)
(23,8,1)
(24,30,1)
(10,3,1)
(26,32,2)
(14,24,2)
(16,0,2)
(23,26,2)
(31,28,2)
(12,26,2)
(1,26,2)
(6,8,2)
(0,5,2)
(32,14,2)
(16,26,2)
(27,26,2)
(19,26,2)
(27,30,2)
(23,27,2)
(31,6,2)
(30,10,2)
(5,30,2)
(29,26,2)
(28,23,2)
(5,26,2)
(28,26,2)
(11,26,2)
(25,26,2)
(0,26,2)
(23,8,2)
(6,26,2)
(24,30,2)
(10,3,2)
-----------------------------------
(0,&pool->manager_arb)
(1,pool)
(2,pool)
(3,struct worker *worker)
(4,ret)
(5,pool->manager_arb)
(6,return ret;)
(7,if (!mutex_trylock(&pool->manager_arb)
(8,ret = false)
(9,pool)
(10,worker->pool)
(11,pool)
(12,ret)
(13,pool)
(14,&pool->manager_arb)
(15,manager_arb)
(16,mutex_unlock(&pool->manager_arb)
(17,pool)
(18,worker)
(19,ret)
(20,false)
(21,)
(22,ret)
(23,ret |= maybe_create_worker(pool)
(24,pool->manager_arb)
(25,manager_arb)
(26,!mutex_trylock(&pool->manager_arb)
(27,maybe_create_worker(pool)
(28,return ret;)
(29,ret)
(30,*pool = worker->pool)
(31,RET)
(32,mutex_trylock(&pool->manager_arb)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^