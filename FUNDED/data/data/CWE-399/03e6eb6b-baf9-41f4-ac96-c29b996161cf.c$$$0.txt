-----label-----
1
-----code-----
static int bnx2fc_l2_rcv_thread(void *arg)
{
	struct fcoe_percpu_s *bg = arg;
	struct sk_buff *skb;

	set_user_nice(current, -20);
	set_current_state(TASK_INTERRUPTIBLE);
	while (!kthread_should_stop()) {
		schedule();
		spin_lock_bh(&bg->fcoe_rx_list.lock);
		while ((skb = __skb_dequeue(&bg->fcoe_rx_list)) != NULL) {
			spin_unlock_bh(&bg->fcoe_rx_list.lock);
			bnx2fc_recv_frame(skb);
			spin_lock_bh(&bg->fcoe_rx_list.lock);
		}
		__set_current_state(TASK_INTERRUPTIBLE);
		spin_unlock_bh(&bg->fcoe_rx_list.lock);
	}
	__set_current_state(TASK_RUNNING);
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
25,27
28,29
29,30
29,31
29,32
30,31
32,33
34,35
36,37
37,38
37,39
38,39
40,41
41,42
43,44
43,45
44,45
45,46
46,47
48,49
48,50
48,51
48,52
48,53
49,50
50,51
51,52
53,54
54,55
54,56
55,56
57,58
58,59
58,60
59,60
59,61
60,61
64,65
64,66
65,66
65,67
66,67
67,68
67,69
68,69
70,71
70,72
71,72
73,74
74,75
74,76
75,76
78,79
80,81
80,82
80,83
81,82
82,83
82,84
83,84
85,86
86,87
86,88
87,88
87,89
88,89
92,93
93,94
93,95
94,95
96,97
98,99
99,100
99,101
100,101
102,103
103,104
103,105
104,105
104,106
105,106
109,110
110,111
110,112
111,112
113,114
115,116
116,117
116,118
117,118
119,120
120,121
120,122
121,122
121,123
122,123
126,127
127,128
127,129
128,129
130,131
131,132
133,134
-----nextToken-----
2,4,6,8,9,14,16,17,20,24,26,27,31,33,35,39,42,47,52,56,61,62,63,69,72,76,77,79,84,89,90,91,95,97,101,106,107,108,112,114,118,123,124,125,129,132,134
-----computeFrom-----
65,66
65,67
67,68
67,69
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;WhileStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;WhileStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int bnx2fc_l2_rcv_thread(void *arg){	struct fcoe_percpu_s *bg = arg;	struct sk_buff *skb;	set_user_nice(current, -20);	set_current_state(TASK_INTERRUPTIBLE);	while (!kthread_should_stop()) {		schedule();		spin_lock_bh(&bg->fcoe_rx_list.lock);		while ((skb = __skb_dequeue(&bg->fcoe_rx_list)) != NULL) {			spin_unlock_bh(&bg->fcoe_rx_list.lock);			bnx2fc_recv_frame(skb);			spin_lock_bh(&bg->fcoe_rx_list.lock);		}		__set_current_state(TASK_INTERRUPTIBLE);		spin_unlock_bh(&bg->fcoe_rx_list.lock);	}	__set_current_state(TASK_RUNNING);	return 0;}
static int
bnx2fc_l2_rcv_thread(void *arg)
bnx2fc_l2_rcv_thread
void *arg
void
*arg
*
arg
{	struct fcoe_percpu_s *bg = arg;	struct sk_buff *skb;	set_user_nice(current, -20);	set_current_state(TASK_INTERRUPTIBLE);	while (!kthread_should_stop()) {		schedule();		spin_lock_bh(&bg->fcoe_rx_list.lock);		while ((skb = __skb_dequeue(&bg->fcoe_rx_list)) != NULL) {			spin_unlock_bh(&bg->fcoe_rx_list.lock);			bnx2fc_recv_frame(skb);			spin_lock_bh(&bg->fcoe_rx_list.lock);		}		__set_current_state(TASK_INTERRUPTIBLE);		spin_unlock_bh(&bg->fcoe_rx_list.lock);	}	__set_current_state(TASK_RUNNING);	return 0;}
struct fcoe_percpu_s *bg = arg;
struct fcoe_percpu_s *bg = arg;
struct fcoe_percpu_s
fcoe_percpu_s
*bg = arg
*
bg
= arg
arg
arg
struct sk_buff *skb;
struct sk_buff *skb;
struct sk_buff
sk_buff
*skb
*
skb
set_user_nice(current, -20);
set_user_nice(current, -20)
set_user_nice
set_user_nice
current
current
-20
20
set_current_state(TASK_INTERRUPTIBLE);
set_current_state(TASK_INTERRUPTIBLE);
set_current_state
set_current_state
(TASK_INTERRUPTIBLE)
TASK_INTERRUPTIBLE
TASK_INTERRUPTIBLE
while (!kthread_should_stop()) {		schedule();		spin_lock_bh(&bg->fcoe_rx_list.lock);		while ((skb = __skb_dequeue(&bg->fcoe_rx_list)) != NULL) {			spin_unlock_bh(&bg->fcoe_rx_list.lock);			bnx2fc_recv_frame(skb);			spin_lock_bh(&bg->fcoe_rx_list.lock);		}		__set_current_state(TASK_INTERRUPTIBLE);		spin_unlock_bh(&bg->fcoe_rx_list.lock);	}
!kthread_should_stop()
kthread_should_stop()
kthread_should_stop
kthread_should_stop
{		schedule();		spin_lock_bh(&bg->fcoe_rx_list.lock);		while ((skb = __skb_dequeue(&bg->fcoe_rx_list)) != NULL) {			spin_unlock_bh(&bg->fcoe_rx_list.lock);			bnx2fc_recv_frame(skb);			spin_lock_bh(&bg->fcoe_rx_list.lock);		}		__set_current_state(TASK_INTERRUPTIBLE);		spin_unlock_bh(&bg->fcoe_rx_list.lock);	}
schedule();
schedule()
schedule
schedule
spin_lock_bh(&bg->fcoe_rx_list.lock);
spin_lock_bh(&bg->fcoe_rx_list.lock)
spin_lock_bh
spin_lock_bh
&bg->fcoe_rx_list.lock
bg->fcoe_rx_list.lock
bg->fcoe_rx_list
bg
bg
fcoe_rx_list
lock
while ((skb = __skb_dequeue(&bg->fcoe_rx_list)) != NULL) {			spin_unlock_bh(&bg->fcoe_rx_list.lock);			bnx2fc_recv_frame(skb);			spin_lock_bh(&bg->fcoe_rx_list.lock);		}
(skb = __skb_dequeue(&bg->fcoe_rx_list)) != NULL
(skb = __skb_dequeue(&bg->fcoe_rx_list))
skb = __skb_dequeue(&bg->fcoe_rx_list)
skb
skb
__skb_dequeue(&bg->fcoe_rx_list)
__skb_dequeue
__skb_dequeue
&bg->fcoe_rx_list
bg->fcoe_rx_list
bg
bg
fcoe_rx_list
NULL
NULL
{			spin_unlock_bh(&bg->fcoe_rx_list.lock);			bnx2fc_recv_frame(skb);			spin_lock_bh(&bg->fcoe_rx_list.lock);		}
spin_unlock_bh(&bg->fcoe_rx_list.lock);
spin_unlock_bh(&bg->fcoe_rx_list.lock)
spin_unlock_bh
spin_unlock_bh
&bg->fcoe_rx_list.lock
bg->fcoe_rx_list.lock
bg->fcoe_rx_list
bg
bg
fcoe_rx_list
lock
bnx2fc_recv_frame(skb);
bnx2fc_recv_frame(skb)
bnx2fc_recv_frame
bnx2fc_recv_frame
skb
skb
spin_lock_bh(&bg->fcoe_rx_list.lock);
spin_lock_bh(&bg->fcoe_rx_list.lock)
spin_lock_bh
spin_lock_bh
&bg->fcoe_rx_list.lock
bg->fcoe_rx_list.lock
bg->fcoe_rx_list
bg
bg
fcoe_rx_list
lock
__set_current_state(TASK_INTERRUPTIBLE);
__set_current_state(TASK_INTERRUPTIBLE)
__set_current_state
__set_current_state
TASK_INTERRUPTIBLE
TASK_INTERRUPTIBLE
spin_unlock_bh(&bg->fcoe_rx_list.lock);
spin_unlock_bh(&bg->fcoe_rx_list.lock)
spin_unlock_bh
spin_unlock_bh
&bg->fcoe_rx_list.lock
bg->fcoe_rx_list.lock
bg->fcoe_rx_list
bg
bg
fcoe_rx_list
lock
__set_current_state(TASK_RUNNING);
__set_current_state(TASK_RUNNING);
__set_current_state
__set_current_state
(TASK_RUNNING)
TASK_RUNNING
TASK_RUNNING
return 0;
0
-----joern-----
(44,29,0)
(45,28,0)
(9,12,0)
(11,9,0)
(51,44,0)
(61,11,0)
(7,10,0)
(29,20,0)
(33,0,0)
(8,38,0)
(23,27,0)
(40,16,0)
(42,26,0)
(56,5,0)
(35,63,0)
(26,32,0)
(53,37,0)
(11,37,0)
(19,43,0)
(62,8,0)
(25,7,0)
(31,44,0)
(3,30,0)
(44,37,0)
(2,10,0)
(54,27,0)
(28,27,0)
(10,7,0)
(21,29,0)
(46,0,0)
(52,43,0)
(19,38,0)
(7,65,0)
(12,17,0)
(10,37,0)
(17,12,0)
(39,65,0)
(15,60,0)
(20,29,0)
(6,8,0)
(34,53,0)
(65,7,0)
(24,10,0)
(12,9,0)
(64,53,0)
(41,50,0)
(37,14,0)
(9,11,0)
(60,15,0)
(18,38,0)
(63,0,0)
(36,37,0)
(4,20,0)
(27,37,0)
(13,45,0)
(45,13,0)
(60,53,0)
(29,44,0)
(65,39,0)
(59,19,0)
(15,26,0)
(27,28,0)
(5,49,0)
(53,60,0)
(22,38,0)
(43,19,0)
(30,3,0)
(57,28,0)
(17,49,0)
(37,38,0)
(26,15,0)
(47,9,0)
(39,0,0)
(5,26,0)
(50,38,0)
(4,0,0)
(32,26,0)
(28,45,0)
(48,11,0)
(13,49,0)
(16,38,0)
(55,37,0)
(58,38,0)
(20,4,0)
(1,32,0)
(34,42,1)
(64,34,1)
(9,47,1)
(37,55,1)
(28,57,1)
(60,53,1)
(5,26,1)
(13,45,1)
(39,65,1)
(24,2,1)
(61,48,1)
(47,11,1)
(11,37,1)
(32,26,1)
(21,44,1)
(40,3,1)
(33,3,1)
(26,15,1)
(1,26,1)
(42,39,1)
(45,28,1)
(59,37,1)
(42,13,1)
(50,41,1)
(43,52,1)
(30,50,1)
(23,54,1)
(35,32,1)
(31,63,1)
(57,27,1)
(29,44,1)
(5,56,1)
(56,17,1)
(17,12,1)
(37,14,1)
(25,10,1)
(29,21,1)
(63,35,1)
(4,20,1)
(44,51,1)
(3,30,1)
(15,60,1)
(52,59,1)
(7,25,1)
(53,37,1)
(48,32,1)
(28,27,1)
(7,10,1)
(53,64,1)
(16,40,1)
(32,1,1)
(19,43,1)
(9,11,1)
(30,4,1)
(65,7,1)
(51,31,1)
(6,16,1)
(27,37,1)
(27,23,1)
(2,33,1)
(54,5,1)
(10,24,1)
(12,9,1)
(62,8,1)
(55,36,1)
(44,37,1)
(11,61,1)
(10,37,1)
(20,29,1)
(41,19,1)
(8,6,1)
(12,32,2)
(17,12,2)
(37,14,2)
(13,45,2)
(45,32,2)
(29,3,2)
(31,3,2)
(54,32,2)
(2,3,2)
(60,32,2)
(65,7,2)
(42,3,2)
(4,20,2)
(3,3,2)
(7,10,2)
(53,32,2)
(1,32,2)
(56,32,2)
(10,37,2)
(60,3,2)
(9,32,2)
(39,65,2)
(5,26,2)
(24,3,2)
(17,32,2)
(29,44,2)
(45,28,2)
(33,3,2)
(47,32,2)
(42,32,2)
(21,3,2)
(20,3,2)
(51,3,2)
(11,37,2)
(25,3,2)
(53,37,2)
(63,3,2)
(15,32,2)
(5,32,2)
(35,3,2)
(19,43,2)
(64,3,2)
(44,3,2)
(62,8,2)
(60,53,2)
(26,3,2)
(26,32,2)
(26,15,2)
(12,9,2)
(11,32,2)
(48,32,2)
(32,26,2)
(10,3,2)
(13,32,2)
(64,32,2)
(23,32,2)
(61,32,2)
(34,32,2)
(53,3,2)
(28,32,2)
(32,32,2)
(32,3,2)
(1,3,2)
(30,3,2)
(20,29,2)
(34,3,2)
(39,3,2)
(9,11,2)
(28,27,2)
(3,30,2)
(57,32,2)
(7,3,2)
(4,3,2)
(15,3,2)
(15,60,2)
(27,37,2)
(65,3,2)
(27,32,2)
(44,37,2)
-----------------------------------
(0,)
(1,NULL)
(2,bg)
(3,!kthread_should_stop()
(4,spin_unlock_bh(&bg->fcoe_rx_list.lock)
(5,bnx2fc_recv_frame(skb)
(6,0)
(7,bg->fcoe_rx_list.lock)
(8,return 0;)
(9,bg->fcoe_rx_list.lock)
(10,bg->fcoe_rx_list)
(11,bg->fcoe_rx_list)
(12,&bg->fcoe_rx_list.lock)
(13,spin_lock_bh(&bg->fcoe_rx_list.lock)
(14,void *arg)
(15,__skb_dequeue(&bg->fcoe_rx_list)
(16,__set_current_state(TASK_RUNNING)
(17,spin_unlock_bh(&bg->fcoe_rx_list.lock)
(18,skb)
(19,set_user_nice(current, -20)
(20,&bg->fcoe_rx_list.lock)
(21,lock)
(22,while (!kthread_should_stop()
(23,fcoe_rx_list)
(24,fcoe_rx_list)
(25,lock)
(26,skb = __skb_dequeue(&bg->fcoe_rx_list)
(27,bg->fcoe_rx_list)
(28,bg->fcoe_rx_list.lock)
(29,bg->fcoe_rx_list.lock)
(30,kthread_should_stop()
(31,bg)
(32,(skb = __skb_dequeue(&bg->fcoe_rx_list)
(33,schedule()
(34,bg)
(35,TASK_INTERRUPTIBLE)
(36,bg)
(37,*bg = arg)
(38,)
(39,spin_lock_bh(&bg->fcoe_rx_list.lock)
(40,TASK_RUNNING)
(41,TASK_INTERRUPTIBLE)
(42,skb)
(43,-20)
(44,bg->fcoe_rx_list)
(45,&bg->fcoe_rx_list.lock)
(46,while ((skb = __skb_dequeue(&bg->fcoe_rx_list)
(47,lock)
(48,bg)
(49,)
(50,set_current_state(TASK_INTERRUPTIBLE)
(51,fcoe_rx_list)
(52,20)
(53,bg->fcoe_rx_list)
(54,bg)
(55,arg)
(56,skb)
(57,lock)
(58,bg)
(59,current)
(60,&bg->fcoe_rx_list)
(61,fcoe_rx_list)
(62,RET)
(63,__set_current_state(TASK_INTERRUPTIBLE)
(64,fcoe_rx_list)
(65,&bg->fcoe_rx_list.lock)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^