-----label-----
0
-----code-----
void dxeRXEventHandler
(
   wpt_msg                 *rxReadyMsg
)
{
   wpt_msg                  *msgContent = (wpt_msg *)rxReadyMsg;
   WLANDXE_CtrlBlkType      *dxeCtxt    = NULL;
   wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;
   wpt_uint32                intSrc     = 0;
   WLANDXE_ChannelCBType    *channelCb  = NULL;
   wpt_uint32                chHighStat = 0;
   wpt_uint32                chLowStat  = 0;
   wpt_uint32                regValue;

   dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext);

   if(eWLAN_PAL_TRUE == dxeCtxt->driverReloadInProcessing)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "RX Ready WLAN Driver re-loading in progress");
      return;
   }

   /* Now try to refill the ring with empty Rx buffers to keep DXE busy */
   dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]);
   dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]);

   dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext);
      
   if((!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled) ||
      (!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled))
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
         "DXE already stopped in RX event handler. Just return");
      return;
   }

   if((WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState) ||
      (WLANDXE_POWER_STATE_DOWN == dxeCtxt->hostPowerState))
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,
         "%s Riva is in %d, Just Pull frames without any register touch ",
           __func__, dxeCtxt->hostPowerState);

      /* Not to touch any register, just pull frame directly from chain ring
       * First high priority */
      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];
      status = dxeRXFrameReady(dxeCtxt,
                               channelCb,
                               chHighStat);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeRXEventHandler Pull from RX high channel fail");        
      }

       /* Second low priority */
      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];
      status = dxeRXFrameReady(dxeCtxt,
                               channelCb,
                               chLowStat);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeRXEventHandler Pull from RX low channel fail");        
      }

      /* Interrupt will not enabled at here, it will be enabled at PS mode change */
      tempDxeCtrlBlk->rxIntDisabledByIMPS = eWLAN_PAL_TRUE;

      return;
   }

   /* Disable device interrupt */
   /* Read whole interrupt mask register and exclusive only this channel int */
   status = wpalReadRegister(WLANDXE_INT_SRC_RAW_ADDRESS,
                             &intSrc);
   if(eWLAN_PAL_STATUS_SUCCESS != status)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeRXEventHandler Read INT_SRC register fail");
      return;         
   }
   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_MED,
            "RX Event Handler INT Source 0x%x", intSrc);

#ifndef WLANDXE_TEST_CHANNEL_ENABLE
   /* Test High Priority Channel interrupt is enabled or not */
   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];
   if(intSrc & (1 << channelCb->assignedDMAChannel))
   {
      status = dxeChannelCleanInt(channelCb, &chHighStat);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeRXEventHandler INT Clean up fail");
         return;         
      }
      if(WLANDXE_CH_STAT_INT_ERR_MASK & chHighStat)
      {
         /* Error Happen during transaction, Handle it */
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,
                  "%11s : 0x%x Error Reported, Reload Driver",
                  channelType[channelCb->channelType], chHighStat);
         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;
         wpalWlanReload();
      }
      else if((WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat) ||
              (WLANDXE_CH_STAT_INT_ED_MASK & chHighStat))
      {
         /* Handle RX Ready for high priority channel */
         status = dxeRXFrameReady(dxeCtxt,
                                  channelCb,
                                  chHighStat);
      }
      else if(WLANDXE_CH_STAT_MASKED_MASK & chHighStat)
      {
         status = dxeRXFrameReady(dxeCtxt,
                                  channelCb,
                                  chHighStat);
      }
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,
               "RX HIGH CH EVNT STAT 0x%x, %d frames handled", chHighStat, channelCb->numFragmentCurrentChain);
      /* Update the Rx DONE histogram */
      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);
      if(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)
      {
         channelCb->rxDoneHistogram |= 1;
      }
      else
      {
         channelCb->rxDoneHistogram &= ~1;
      }
   }
#else
   /* Test H2H Test interrupt is enabled or not */
   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_H2H_TEST_RX];
   if(intSrc & (1 << channelCb->assignedDMAChannel))
   {
      status = dxeChannelCleanInt(channelCb, &chStat);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeRXEventHandler INT Clean up fail");
         return;         
      }

      if(WLANDXE_CH_STAT_INT_ERR_MASK & chStat)
      {
         /* Error Happen during transaction, Handle it */
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,
                  "%11s : 0x%x Error Reported, Reload Driver",
                  channelType[channelCb->channelType], chStat);
         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;
         wpalWlanReload();
      }
      else if(WLANDXE_CH_STAT_INT_ED_MASK & chStat)
      {
         /* Handle RX Ready for high priority channel */
         status = dxeRXFrameReady(dxeCtxt,
                                  channelCb,
                                  chStat);
      }
      /* Update the Rx DONE histogram */
      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);
      if(WLANDXE_CH_STAT_INT_DONE_MASK & chStat)
      {
         channelCb->rxDoneHistogram |= 1;
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,
            "DXE Channel Number %d, Rx DONE Histogram 0x%016llx",
            channelCb->assignedDMAChannel, channelCb->rxDoneHistogram);
      }
      else
      {
         channelCb->rxDoneHistogram &= ~1;
      }
   }
#endif /* WLANDXE_TEST_CHANNEL_ENABLE */

   /* Test Low Priority Channel interrupt is enabled or not */
       channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];
   if(intSrc & (1 << channelCb->assignedDMAChannel))
   {
      status = dxeChannelCleanInt(channelCb, &chLowStat);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeRXEventHandler INT Clean up fail");
         return;         
      }

      if(WLANDXE_CH_STAT_INT_ERR_MASK & chLowStat)
      {
         /* Error Happen during transaction, Handle it */
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,
                  "%11s : 0x%x Error Reported, Reload Driver",
                  channelType[channelCb->channelType], chLowStat);
         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;
         wpalWlanReload();
      }
      else if(WLANDXE_CH_STAT_INT_ED_MASK & chLowStat)
      {
         /* Handle RX Ready for low priority channel */
         status = dxeRXFrameReady(dxeCtxt,
                                  channelCb,
                                  chLowStat);
       }

      /* Update the Rx DONE histogram */
      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);
      if(WLANDXE_CH_STAT_INT_DONE_MASK & chLowStat)
      {
         channelCb->rxDoneHistogram |= 1;
      }
      else
      {
         channelCb->rxDoneHistogram &= ~1;
      }
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,
               "RX LOW CH EVNT STAT 0x%x, %d frames handled", chLowStat, channelCb->numFragmentCurrentChain);
   }
   if(eWLAN_PAL_STATUS_SUCCESS != status)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeRXEventHandler Handle Frame Ready Fail");
      return;         
   }

   /* Prepare Control Register EN Channel */
   if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK))
   {
      HDXE_ASSERT(0);
   }
   wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister.chDXECtrlRegAddr,
                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask);

   /* Prepare Control Register EN Channel */
   if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK))
   {
      HDXE_ASSERT(0);
   }

   wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister.chDXECtrlRegAddr,
                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask);

   /* Clear Interrupt handle processing bit
    * RIVA may power down */
   wpalReadRegister(WLANDXE_INT_MASK_REG_ADDRESS, &regValue);
   regValue &= WLANDXE_RX_INTERRUPT_PRO_UNMASK;
   wpalWriteRegister(WLANDXE_INT_MASK_REG_ADDRESS, regValue);

   /* Enable system level ISR */
   /* Enable RX ready Interrupt at here */
   status = wpalEnableInterrupt(DXE_INTERRUPT_RX_READY);
   if(eWLAN_PAL_STATUS_SUCCESS != status)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeRXEventHandler Enable RX Ready interrupt fail");
      return;
   }

   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "%s Exit", __func__);
   return;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
21,23
22,23
24,25
26,27
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
44,45
45,46
47,48
48,49
48,50
49,50
51,52
51,53
53,54
55,56
56,57
56,58
57,58
59,60
59,61
59,62
62,63
63,64
65,66
66,67
66,68
67,68
69,70
69,71
71,72
73,74
74,75
74,76
75,76
77,78
77,79
79,80
81,82
82,83
82,84
83,84
85,86
87,88
88,89
88,90
89,90
91,92
91,93
92,93
92,94
93,94
95,96
97,98
98,99
98,100
99,100
102,103
102,104
103,104
103,105
104,105
106,107
106,108
107,108
110,111
110,112
111,112
112,113
112,114
112,115
112,116
113,114
115,116
117,118
121,122
122,123
122,124
122,125
123,124
125,126
127,128
128,129
128,130
129,130
129,131
130,131
133,134
135,136
136,137
136,138
136,139
137,138
139,140
141,142
142,143
142,144
143,144
143,145
144,145
147,148
149,150
150,151
150,152
151,152
153,154
153,155
154,155
154,156
155,156
157,158
159,160
160,161
160,162
161,162
164,165
164,166
165,166
165,167
166,167
167,168
168,169
168,170
169,170
169,171
170,171
170,172
171,172
171,173
172,173
175,176
179,180
180,181
181,182
181,183
182,183
182,184
183,184
183,185
184,185
184,186
185,186
188,189
192,193
192,194
193,194
194,195
194,196
194,197
194,198
195,196
197,198
199,200
203,204
203,205
204,205
204,206
205,206
206,207
206,208
207,208
209,210
209,211
210,211
213,214
214,215
214,216
215,216
217,218
217,219
218,219
221,222
221,223
221,224
221,225
221,226
221,227
221,228
221,229
221,230
222,223
223,224
223,225
223,226
223,227
223,228
223,229
224,225
226,227
228,229
231,232
233,234
233,235
234,235
237,238
238,239
238,240
239,240
241,242
242,243
242,244
243,244
243,245
244,245
247,248
249,250
250,251
250,252
251,252
253,254
253,255
253,256
253,257
254,255
256,257
258,259
260,261
262,263
262,264
263,264
263,265
264,265
266,267
268,269
269,270
270,271
270,272
270,273
270,274
271,272
273,274
275,276
278,279
279,280
279,281
280,281
282,283
283,284
283,285
284,285
284,286
285,286
288,289
290,291
291,292
291,293
292,293
294,295
294,296
294,297
294,298
295,296
297,298
299,300
301,302
303,304
303,305
304,305
304,306
305,306
307,308
309,310
310,311
311,312
311,313
311,314
311,315
312,313
314,315
316,317
319,320
320,321
320,322
321,322
321,323
322,323
325,326
328,329
329,330
329,331
330,331
332,333
332,334
332,335
333,334
335,336
337,338
338,339
340,341
340,342
341,342
341,343
342,343
344,345
346,347
346,348
347,348
348,349
348,350
348,351
348,352
349,350
351,352
353,354
357,358
358,359
358,360
358,361
358,362
358,363
359,360
361,362
363,364
366,367
368,369
369,370
369,371
370,371
372,373
373,374
373,375
374,375
374,376
375,376
378,379
380,381
380,382
381,382
381,383
382,383
384,385
385,386
385,387
387,388
387,389
388,389
391,392
391,393
391,394
391,395
391,396
391,397
392,393
393,394
393,395
394,395
396,397
396,398
396,399
397,398
399,400
401,402
402,403
404,405
404,406
405,406
405,407
406,407
408,409
410,411
410,412
411,412
412,413
412,414
412,415
412,416
413,414
415,416
417,418
421,422
421,423
421,424
422,423
422,424
423,424
425,426
427,428
427,429
427,430
428,429
429,430
429,431
429,432
429,433
429,434
429,435
430,431
432,433
434,435
437,438
437,439
438,439
440,441
440,442
441,442
444,445
446,447
447,448
447,449
448,449
448,450
449,450
452,453
454,455
455,456
456,457
458,459
458,460
458,461
459,460
459,461
460,461
461,462
461,463
462,463
464,465
466,467
467,468
467,469
468,469
470,471
472,473
473,474
474,475
474,476
475,476
477,478
477,479
477,480
477,481
478,479
480,481
482,483
484,485
486,487
486,488
487,488
487,489
488,489
490,491
492,493
493,494
494,495
494,496
495,496
497,498
497,499
497,500
497,501
498,499
500,501
502,503
504,505
506,507
507,508
507,509
507,510
507,511
507,512
507,513
508,509
510,511
512,513
515,516
517,518
517,519
518,519
521,522
522,523
522,524
523,524
523,525
524,525
527,528
528,529
528,530
529,530
529,531
530,531
534,535
534,536
534,537
535,536
535,537
536,537
538,539
540,541
541,542
542,543
542,544
543,544
543,545
544,545
548,549
549,550
550,551
550,552
551,552
551,553
552,553
555,556
557,558
558,559
558,560
559,560
561,562
562,563
562,564
563,564
563,565
564,565
567,568
569,570
569,571
570,571
570,572
571,572
573,574
574,575
574,576
576,577
576,578
577,578
580,581
580,582
580,583
580,584
580,585
580,586
581,582
582,583
582,584
583,584
585,586
585,587
585,588
586,587
588,589
590,591
591,592
593,594
593,595
594,595
594,596
595,596
597,598
599,600
599,601
600,601
601,602
601,603
601,604
601,605
602,603
604,605
606,607
610,611
610,612
610,613
611,612
611,613
612,613
614,615
616,617
616,618
616,619
617,618
618,619
618,620
618,621
618,622
618,623
618,624
619,620
621,622
623,624
626,627
626,628
627,628
629,630
629,631
630,631
633,634
635,636
636,637
636,638
637,638
637,639
638,639
641,642
643,644
644,645
645,646
647,648
647,649
648,649
648,650
649,650
651,652
653,654
654,655
655,656
655,657
656,657
658,659
658,660
658,661
658,662
659,660
661,662
663,664
665,666
667,668
668,669
668,670
669,670
669,671
670,671
673,674
674,675
674,676
675,676
675,677
676,677
680,681
680,682
680,683
681,682
681,683
682,683
684,685
686,687
687,688
688,689
688,690
689,690
689,691
690,691
694,695
695,696
696,697
696,698
697,698
697,699
698,699
701,702
703,704
704,705
704,706
704,707
704,708
704,709
704,710
705,706
707,708
709,710
712,713
714,715
714,716
715,716
718,719
718,720
719,720
719,721
720,721
722,723
724,725
724,726
725,726
726,727
726,728
726,729
726,730
727,728
729,730
731,732
735,736
735,737
736,737
737,738
738,739
738,740
739,740
739,741
740,741
740,742
741,742
741,743
742,743
742,744
743,744
746,747
750,751
752,753
753,754
754,755
754,756
755,756
758,759
759,760
759,761
759,762
760,761
762,763
762,764
763,764
763,765
764,765
764,766
765,766
765,767
766,767
769,770
773,774
773,775
774,775
774,776
775,776
775,777
776,777
776,778
777,778
780,781
784,785
784,786
785,786
786,787
787,788
787,789
788,789
788,790
789,790
789,791
790,791
790,792
791,792
791,793
792,793
795,796
799,800
801,802
802,803
803,804
803,805
804,805
807,808
808,809
808,810
808,811
809,810
811,812
811,813
812,813
812,814
813,814
813,815
814,815
814,816
815,816
818,819
822,823
822,824
823,824
823,825
824,825
824,826
825,826
825,827
826,827
829,830
833,834
834,835
834,836
834,837
835,836
837,838
839,840
840,841
842,843
843,844
843,845
844,845
846,847
848,849
849,850
849,851
849,852
850,851
852,853
854,855
856,857
857,858
857,859
858,859
860,861
860,862
861,862
863,864
865,866
865,867
866,867
866,868
867,868
869,870
871,872
871,873
872,873
873,874
873,875
873,876
873,877
874,875
876,877
878,879
882,883
883,884
883,885
883,886
883,887
883,888
884,885
886,887
888,889
891,892
-----nextToken-----

-----computeFrom-----
88,89
88,90
103,104
103,105
150,151
150,152
165,166
165,167
204,205
204,206
206,207
206,208
214,215
214,216
238,239
238,240
250,251
250,252
263,264
263,265
279,280
279,281
291,292
291,293
304,305
304,306
320,321
320,322
329,330
329,331
341,342
341,343
369,370
369,371
381,382
381,383
385,386
385,387
393,394
393,395
405,406
405,407
422,423
422,424
447,448
447,449
459,460
459,461
461,462
461,463
467,468
467,469
474,475
474,476
487,488
487,489
494,495
494,496
522,523
522,524
528,529
528,530
535,536
535,537
542,543
542,544
550,551
550,552
558,559
558,560
570,571
570,572
574,575
574,576
582,583
582,584
594,595
594,596
611,612
611,613
636,637
636,638
648,649
648,650
655,656
655,657
668,669
668,670
674,675
674,676
681,682
681,683
688,689
688,690
696,697
696,698
719,720
719,721
738,739
738,740
787,788
787,789
843,844
843,845
857,858
857,859
866,867
866,868
-----guardedBy-----
219,298
220,236
389,553
426,445
471,485
491,505
578,716
615,634
652,666
-----guardedByNegation-----
426,505
471,505
615,666
-----lastLexicalUse-----
426,505
471,505
615,666
-----jump-----
426,505
471,505
615,666
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;UnaryExpression;UnaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;FieldReference;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;
-----ast_node-----
void dxeRXEventHandler(   wpt_msg                 *rxReadyMsg){   wpt_msg                  *msgContent = (wpt_msg *)rxReadyMsg;   WLANDXE_CtrlBlkType      *dxeCtxt    = NULL;   wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;   wpt_uint32                intSrc     = 0;   WLANDXE_ChannelCBType    *channelCb  = NULL;   wpt_uint32                chHighStat = 0;   wpt_uint32                chLowStat  = 0;   wpt_uint32                regValue;   dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext);   if(eWLAN_PAL_TRUE == dxeCtxt->driverReloadInProcessing)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "RX Ready WLAN Driver re-loading in progress");      return;   }   /* Now try to refill the ring with empty Rx buffers to keep DXE busy */   dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]);   dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]);   dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext);         if((!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled) ||      (!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled))   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,         "DXE already stopped in RX event handler. Just return");      return;   }   if((WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState) ||      (WLANDXE_POWER_STATE_DOWN == dxeCtxt->hostPowerState))   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,         "%s Riva is in %d, Just Pull frames without any register touch ",           __func__, dxeCtxt->hostPowerState);      /* Not to touch any register, just pull frame directly from chain ring       * First high priority */      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];      status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chHighStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX high channel fail");              }       /* Second low priority */      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];      status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chLowStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX low channel fail");              }      /* Interrupt will not enabled at here, it will be enabled at PS mode change */      tempDxeCtrlBlk->rxIntDisabledByIMPS = eWLAN_PAL_TRUE;      return;   }   /* Disable device interrupt */   /* Read whole interrupt mask register and exclusive only this channel int */   status = wpalReadRegister(WLANDXE_INT_SRC_RAW_ADDRESS,                             &intSrc);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Read INT_SRC register fail");      return;            }   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_MED,            "RX Event Handler INT Source 0x%x", intSrc);#ifndef WLANDXE_TEST_CHANNEL_ENABLE   /* Test High Priority Channel interrupt is enabled or not */   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];   if(intSrc & (1 << channelCb->assignedDMAChannel))   {      status = dxeChannelCleanInt(channelCb, &chHighStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chHighStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chHighStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if((WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat) ||              (WLANDXE_CH_STAT_INT_ED_MASK & chHighStat))      {         /* Handle RX Ready for high priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      else if(WLANDXE_CH_STAT_MASKED_MASK & chHighStat)      {         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX HIGH CH EVNT STAT 0x%x, %d frames handled", chHighStat, channelCb->numFragmentCurrentChain);      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }   }#else   /* Test H2H Test interrupt is enabled or not */   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_H2H_TEST_RX];   if(intSrc & (1 << channelCb->assignedDMAChannel))   {      status = dxeChannelCleanInt(channelCb, &chStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if(WLANDXE_CH_STAT_INT_ED_MASK & chStat)      {         /* Handle RX Ready for high priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chStat);      }      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chStat)      {         channelCb->rxDoneHistogram |= 1;         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,            "DXE Channel Number %d, Rx DONE Histogram 0x%016llx",            channelCb->assignedDMAChannel, channelCb->rxDoneHistogram);      }      else      {         channelCb->rxDoneHistogram &= ~1;      }   }#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   /* Test Low Priority Channel interrupt is enabled or not */       channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];   if(intSrc & (1 << channelCb->assignedDMAChannel))   {      status = dxeChannelCleanInt(channelCb, &chLowStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chLowStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chLowStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if(WLANDXE_CH_STAT_INT_ED_MASK & chLowStat)      {         /* Handle RX Ready for low priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat);       }      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chLowStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX LOW CH EVNT STAT 0x%x, %d frames handled", chLowStat, channelCb->numFragmentCurrentChain);   }   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Handle Frame Ready Fail");      return;            }   /* Prepare Control Register EN Channel */   if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK))   {      HDXE_ASSERT(0);   }   wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister.chDXECtrlRegAddr,                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask);   /* Prepare Control Register EN Channel */   if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK))   {      HDXE_ASSERT(0);   }   wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister.chDXECtrlRegAddr,                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask);   /* Clear Interrupt handle processing bit    * RIVA may power down */   wpalReadRegister(WLANDXE_INT_MASK_REG_ADDRESS, &regValue);   regValue &= WLANDXE_RX_INTERRUPT_PRO_UNMASK;   wpalWriteRegister(WLANDXE_INT_MASK_REG_ADDRESS, regValue);   /* Enable system level ISR */   /* Enable RX ready Interrupt at here */   status = wpalEnableInterrupt(DXE_INTERRUPT_RX_READY);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Enable RX Ready interrupt fail");      return;   }   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return;}
void
dxeRXEventHandler(   wpt_msg                 *rxReadyMsg)
dxeRXEventHandler
wpt_msg                 *rxReadyMsg
wpt_msg
wpt_msg
*rxReadyMsg
*
rxReadyMsg
{   wpt_msg                  *msgContent = (wpt_msg *)rxReadyMsg;   WLANDXE_CtrlBlkType      *dxeCtxt    = NULL;   wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;   wpt_uint32                intSrc     = 0;   WLANDXE_ChannelCBType    *channelCb  = NULL;   wpt_uint32                chHighStat = 0;   wpt_uint32                chLowStat  = 0;   wpt_uint32                regValue;   dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext);   if(eWLAN_PAL_TRUE == dxeCtxt->driverReloadInProcessing)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "RX Ready WLAN Driver re-loading in progress");      return;   }   /* Now try to refill the ring with empty Rx buffers to keep DXE busy */   dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]);   dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]);   dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext);         if((!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled) ||      (!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled))   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,         "DXE already stopped in RX event handler. Just return");      return;   }   if((WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState) ||      (WLANDXE_POWER_STATE_DOWN == dxeCtxt->hostPowerState))   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,         "%s Riva is in %d, Just Pull frames without any register touch ",           __func__, dxeCtxt->hostPowerState);      /* Not to touch any register, just pull frame directly from chain ring       * First high priority */      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];      status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chHighStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX high channel fail");              }       /* Second low priority */      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];      status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chLowStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX low channel fail");              }      /* Interrupt will not enabled at here, it will be enabled at PS mode change */      tempDxeCtrlBlk->rxIntDisabledByIMPS = eWLAN_PAL_TRUE;      return;   }   /* Disable device interrupt */   /* Read whole interrupt mask register and exclusive only this channel int */   status = wpalReadRegister(WLANDXE_INT_SRC_RAW_ADDRESS,                             &intSrc);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Read INT_SRC register fail");      return;            }   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_MED,            "RX Event Handler INT Source 0x%x", intSrc);#ifndef WLANDXE_TEST_CHANNEL_ENABLE   /* Test High Priority Channel interrupt is enabled or not */   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];   if(intSrc & (1 << channelCb->assignedDMAChannel))   {      status = dxeChannelCleanInt(channelCb, &chHighStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chHighStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chHighStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if((WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat) ||              (WLANDXE_CH_STAT_INT_ED_MASK & chHighStat))      {         /* Handle RX Ready for high priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      else if(WLANDXE_CH_STAT_MASKED_MASK & chHighStat)      {         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX HIGH CH EVNT STAT 0x%x, %d frames handled", chHighStat, channelCb->numFragmentCurrentChain);      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }   }#else   /* Test H2H Test interrupt is enabled or not */   channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_H2H_TEST_RX];   if(intSrc & (1 << channelCb->assignedDMAChannel))   {      status = dxeChannelCleanInt(channelCb, &chStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if(WLANDXE_CH_STAT_INT_ED_MASK & chStat)      {         /* Handle RX Ready for high priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chStat);      }      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chStat)      {         channelCb->rxDoneHistogram |= 1;         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,            "DXE Channel Number %d, Rx DONE Histogram 0x%016llx",            channelCb->assignedDMAChannel, channelCb->rxDoneHistogram);      }      else      {         channelCb->rxDoneHistogram &= ~1;      }   }#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   /* Test Low Priority Channel interrupt is enabled or not */       channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];   if(intSrc & (1 << channelCb->assignedDMAChannel))   {      status = dxeChannelCleanInt(channelCb, &chLowStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chLowStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chLowStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if(WLANDXE_CH_STAT_INT_ED_MASK & chLowStat)      {         /* Handle RX Ready for low priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat);       }      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chLowStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX LOW CH EVNT STAT 0x%x, %d frames handled", chLowStat, channelCb->numFragmentCurrentChain);   }   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Handle Frame Ready Fail");      return;            }   /* Prepare Control Register EN Channel */   if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK))   {      HDXE_ASSERT(0);   }   wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister.chDXECtrlRegAddr,                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask);   /* Prepare Control Register EN Channel */   if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK))   {      HDXE_ASSERT(0);   }   wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister.chDXECtrlRegAddr,                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask);   /* Clear Interrupt handle processing bit    * RIVA may power down */   wpalReadRegister(WLANDXE_INT_MASK_REG_ADDRESS, &regValue);   regValue &= WLANDXE_RX_INTERRUPT_PRO_UNMASK;   wpalWriteRegister(WLANDXE_INT_MASK_REG_ADDRESS, regValue);   /* Enable system level ISR */   /* Enable RX ready Interrupt at here */   status = wpalEnableInterrupt(DXE_INTERRUPT_RX_READY);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Enable RX Ready interrupt fail");      return;   }   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return;}
wpt_msg                  *msgContent = (wpt_msg *)rxReadyMsg;
wpt_msg                  *msgContent = (wpt_msg *)rxReadyMsg;
wpt_msg
wpt_msg
*msgContent = (wpt_msg *)rxReadyMsg
*
msgContent
= (wpt_msg *)rxReadyMsg
(wpt_msg *)rxReadyMsg
wpt_msg *
wpt_msg
wpt_msg
*
*
rxReadyMsg
rxReadyMsg
WLANDXE_CtrlBlkType      *dxeCtxt    = NULL;
WLANDXE_CtrlBlkType      *dxeCtxt    = NULL;
WLANDXE_CtrlBlkType
WLANDXE_CtrlBlkType
*dxeCtxt    = NULL
*
dxeCtxt
= NULL
NULL
NULL
wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;
wpt_status                status     = eWLAN_PAL_STATUS_SUCCESS;
wpt_status
wpt_status
status     = eWLAN_PAL_STATUS_SUCCESS
status
= eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
wpt_uint32                intSrc     = 0;
wpt_uint32                intSrc     = 0;
wpt_uint32
wpt_uint32
intSrc     = 0
intSrc
= 0
0
WLANDXE_ChannelCBType    *channelCb  = NULL;
WLANDXE_ChannelCBType    *channelCb  = NULL;
WLANDXE_ChannelCBType
WLANDXE_ChannelCBType
*channelCb  = NULL
*
channelCb
= NULL
NULL
NULL
wpt_uint32                chHighStat = 0;
wpt_uint32                chHighStat = 0;
wpt_uint32
wpt_uint32
chHighStat = 0
chHighStat
= 0
0
wpt_uint32                chLowStat  = 0;
wpt_uint32                chLowStat  = 0;
wpt_uint32
wpt_uint32
chLowStat  = 0
chLowStat
= 0
0
wpt_uint32                regValue;
wpt_uint32                regValue;
wpt_uint32
wpt_uint32
regValue
regValue
dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext);
dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext)
dxeCtxt
dxeCtxt
(WLANDXE_CtrlBlkType *)(msgContent->pContext)
WLANDXE_CtrlBlkType *
WLANDXE_CtrlBlkType
WLANDXE_CtrlBlkType
*
*
(msgContent->pContext)
msgContent->pContext
msgContent
msgContent
pContext
if(eWLAN_PAL_TRUE == dxeCtxt->driverReloadInProcessing)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "RX Ready WLAN Driver re-loading in progress");      return;   }
eWLAN_PAL_TRUE == dxeCtxt->driverReloadInProcessing
eWLAN_PAL_TRUE
eWLAN_PAL_TRUE
dxeCtxt->driverReloadInProcessing
dxeCtxt
dxeCtxt
driverReloadInProcessing
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "RX Ready WLAN Driver re-loading in progress");      return;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "RX Ready WLAN Driver re-loading in progress");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "RX Ready WLAN Driver re-loading in progress")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"RX Ready WLAN Driver re-loading in progress"
return;
dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]);
dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
dxeRXFrameRefillRing
dxeRXFrameRefillRing
dxeCtxt
dxeCtxt
&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_LOW_PRI
WDTS_CHANNEL_RX_LOW_PRI
dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]);
dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
dxeRXFrameRefillRing
dxeRXFrameRefillRing
dxeCtxt
dxeCtxt
&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_HIGH_PRI
WDTS_CHANNEL_RX_HIGH_PRI
dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext);
dxeCtxt = (WLANDXE_CtrlBlkType *)(msgContent->pContext)
dxeCtxt
dxeCtxt
(WLANDXE_CtrlBlkType *)(msgContent->pContext)
WLANDXE_CtrlBlkType *
WLANDXE_CtrlBlkType
WLANDXE_CtrlBlkType
*
*
(msgContent->pContext)
msgContent->pContext
msgContent
msgContent
pContext
if((!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled) ||      (!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled))   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,         "DXE already stopped in RX event handler. Just return");      return;   }
(!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled) ||      (!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled)
(!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled)
!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_HIGH_PRI
WDTS_CHANNEL_RX_HIGH_PRI
extraConfig
chEnabled
(!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled)
!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_LOW_PRI
WDTS_CHANNEL_RX_LOW_PRI
extraConfig
chEnabled
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,         "DXE already stopped in RX event handler. Just return");      return;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,         "DXE already stopped in RX event handler. Just return");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,         "DXE already stopped in RX event handler. Just return")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"DXE already stopped in RX event handler. Just return"
return;
if((WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState) ||      (WLANDXE_POWER_STATE_DOWN == dxeCtxt->hostPowerState))   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,         "%s Riva is in %d, Just Pull frames without any register touch ",           __func__, dxeCtxt->hostPowerState);      /* Not to touch any register, just pull frame directly from chain ring       * First high priority */      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];      status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chHighStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX high channel fail");              }       /* Second low priority */      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];      status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chLowStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX low channel fail");              }      /* Interrupt will not enabled at here, it will be enabled at PS mode change */      tempDxeCtrlBlk->rxIntDisabledByIMPS = eWLAN_PAL_TRUE;      return;   }
(WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState) ||      (WLANDXE_POWER_STATE_DOWN == dxeCtxt->hostPowerState)
(WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState)
WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState
WLANDXE_POWER_STATE_IMPS
WLANDXE_POWER_STATE_IMPS
dxeCtxt->hostPowerState
dxeCtxt
dxeCtxt
hostPowerState
(WLANDXE_POWER_STATE_DOWN == dxeCtxt->hostPowerState)
WLANDXE_POWER_STATE_DOWN == dxeCtxt->hostPowerState
WLANDXE_POWER_STATE_DOWN
WLANDXE_POWER_STATE_DOWN
dxeCtxt->hostPowerState
dxeCtxt
dxeCtxt
hostPowerState
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,         "%s Riva is in %d, Just Pull frames without any register touch ",           __func__, dxeCtxt->hostPowerState);      /* Not to touch any register, just pull frame directly from chain ring       * First high priority */      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];      status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chHighStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX high channel fail");              }       /* Second low priority */      channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];      status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chLowStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX low channel fail");              }      /* Interrupt will not enabled at here, it will be enabled at PS mode change */      tempDxeCtrlBlk->rxIntDisabledByIMPS = eWLAN_PAL_TRUE;      return;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,         "%s Riva is in %d, Just Pull frames without any register touch ",           __func__, dxeCtxt->hostPowerState);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,         "%s Riva is in %d, Just Pull frames without any register touch ",           __func__, dxeCtxt->hostPowerState)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_WARN
eWLAN_PAL_TRACE_LEVEL_WARN
"%s Riva is in %d, Just Pull frames without any register touch "
__func__
__func__
dxeCtxt->hostPowerState
dxeCtxt
dxeCtxt
hostPowerState
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
channelCb
channelCb
&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_HIGH_PRI
WDTS_CHANNEL_RX_HIGH_PRI
status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chHighStat);
status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chHighStat)
status
status
dxeRXFrameReady(dxeCtxt,                               channelCb,                               chHighStat)
dxeRXFrameReady
dxeRXFrameReady
dxeCtxt
dxeCtxt
channelCb
channelCb
chHighStat
chHighStat
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX high channel fail");              }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX high channel fail");              }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX high channel fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX high channel fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeRXEventHandler Pull from RX high channel fail"
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
channelCb
channelCb
&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_LOW_PRI
WDTS_CHANNEL_RX_LOW_PRI
status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chLowStat);
status = dxeRXFrameReady(dxeCtxt,                               channelCb,                               chLowStat)
status
status
dxeRXFrameReady(dxeCtxt,                               channelCb,                               chLowStat)
dxeRXFrameReady
dxeRXFrameReady
dxeCtxt
dxeCtxt
channelCb
channelCb
chLowStat
chLowStat
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX low channel fail");              }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX low channel fail");              }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX low channel fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler Pull from RX low channel fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeRXEventHandler Pull from RX low channel fail"
tempDxeCtrlBlk->rxIntDisabledByIMPS = eWLAN_PAL_TRUE;
tempDxeCtrlBlk->rxIntDisabledByIMPS = eWLAN_PAL_TRUE
tempDxeCtrlBlk->rxIntDisabledByIMPS
tempDxeCtrlBlk
tempDxeCtrlBlk
rxIntDisabledByIMPS
eWLAN_PAL_TRUE
eWLAN_PAL_TRUE
return;
status = wpalReadRegister(WLANDXE_INT_SRC_RAW_ADDRESS,                             &intSrc);
status = wpalReadRegister(WLANDXE_INT_SRC_RAW_ADDRESS,                             &intSrc)
status
status
wpalReadRegister(WLANDXE_INT_SRC_RAW_ADDRESS,                             &intSrc)
wpalReadRegister
wpalReadRegister
WLANDXE_INT_SRC_RAW_ADDRESS
WLANDXE_INT_SRC_RAW_ADDRESS
&intSrc
intSrc
intSrc
if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Read INT_SRC register fail");      return;            }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Read INT_SRC register fail");      return;            }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Read INT_SRC register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Read INT_SRC register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeRXEventHandler Read INT_SRC register fail"
return;
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_MED,            "RX Event Handler INT Source 0x%x", intSrc);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_MED,            "RX Event Handler INT Source 0x%x", intSrc)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_MED
eWLAN_PAL_TRACE_LEVEL_INFO_MED
"RX Event Handler INT Source 0x%x"
intSrc
intSrc
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI];
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
channelCb
channelCb
&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_HIGH_PRI
WDTS_CHANNEL_RX_HIGH_PRI
if(intSrc & (1 << channelCb->assignedDMAChannel))   {      status = dxeChannelCleanInt(channelCb, &chHighStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chHighStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chHighStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if((WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat) ||              (WLANDXE_CH_STAT_INT_ED_MASK & chHighStat))      {         /* Handle RX Ready for high priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      else if(WLANDXE_CH_STAT_MASKED_MASK & chHighStat)      {         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX HIGH CH EVNT STAT 0x%x, %d frames handled", chHighStat, channelCb->numFragmentCurrentChain);      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }   }
intSrc & (1 << channelCb->assignedDMAChannel)
intSrc
intSrc
(1 << channelCb->assignedDMAChannel)
1 << channelCb->assignedDMAChannel
1
channelCb->assignedDMAChannel
channelCb
channelCb
assignedDMAChannel
{      status = dxeChannelCleanInt(channelCb, &chHighStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chHighStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chHighStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if((WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat) ||              (WLANDXE_CH_STAT_INT_ED_MASK & chHighStat))      {         /* Handle RX Ready for high priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      else if(WLANDXE_CH_STAT_MASKED_MASK & chHighStat)      {         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX HIGH CH EVNT STAT 0x%x, %d frames handled", chHighStat, channelCb->numFragmentCurrentChain);      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }   }
status = dxeChannelCleanInt(channelCb, &chHighStat);
status = dxeChannelCleanInt(channelCb, &chHighStat)
status
status
dxeChannelCleanInt(channelCb, &chHighStat)
dxeChannelCleanInt
dxeChannelCleanInt
channelCb
channelCb
&chHighStat
chHighStat
chHighStat
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeRXEventHandler INT Clean up fail"
return;
if(WLANDXE_CH_STAT_INT_ERR_MASK & chHighStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chHighStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if((WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat) ||              (WLANDXE_CH_STAT_INT_ED_MASK & chHighStat))      {         /* Handle RX Ready for high priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      else if(WLANDXE_CH_STAT_MASKED_MASK & chHighStat)      {         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }
WLANDXE_CH_STAT_INT_ERR_MASK & chHighStat
WLANDXE_CH_STAT_INT_ERR_MASK
WLANDXE_CH_STAT_INT_ERR_MASK
chHighStat
chHighStat
{         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chHighStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chHighStat);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chHighStat)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_FATAL
eWLAN_PAL_TRACE_LEVEL_FATAL
"%11s : 0x%x Error Reported, Reload Driver"
channelType[channelCb->channelType]
channelType
channelType
channelCb->channelType
channelCb
channelCb
channelType
chHighStat
chHighStat
dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;
dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE
dxeCtxt->driverReloadInProcessing
dxeCtxt
dxeCtxt
driverReloadInProcessing
eWLAN_PAL_TRUE
eWLAN_PAL_TRUE
wpalWlanReload();
wpalWlanReload()
wpalWlanReload
wpalWlanReload
if((WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat) ||              (WLANDXE_CH_STAT_INT_ED_MASK & chHighStat))      {         /* Handle RX Ready for high priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }      else if(WLANDXE_CH_STAT_MASKED_MASK & chHighStat)      {         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }
(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat) ||              (WLANDXE_CH_STAT_INT_ED_MASK & chHighStat)
(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)
WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat
WLANDXE_CH_STAT_INT_DONE_MASK
WLANDXE_CH_STAT_INT_DONE_MASK
chHighStat
chHighStat
(WLANDXE_CH_STAT_INT_ED_MASK & chHighStat)
WLANDXE_CH_STAT_INT_ED_MASK & chHighStat
WLANDXE_CH_STAT_INT_ED_MASK
WLANDXE_CH_STAT_INT_ED_MASK
chHighStat
chHighStat
{         /* Handle RX Ready for high priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }
status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);
status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat)
status
status
dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat)
dxeRXFrameReady
dxeRXFrameReady
dxeCtxt
dxeCtxt
channelCb
channelCb
chHighStat
chHighStat
if(WLANDXE_CH_STAT_MASKED_MASK & chHighStat)      {         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }
WLANDXE_CH_STAT_MASKED_MASK & chHighStat
WLANDXE_CH_STAT_MASKED_MASK
WLANDXE_CH_STAT_MASKED_MASK
chHighStat
chHighStat
{         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);      }
status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat);
status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat)
status
status
dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chHighStat)
dxeRXFrameReady
dxeRXFrameReady
dxeCtxt
dxeCtxt
channelCb
channelCb
chHighStat
chHighStat
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX HIGH CH EVNT STAT 0x%x, %d frames handled", chHighStat, channelCb->numFragmentCurrentChain);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX HIGH CH EVNT STAT 0x%x, %d frames handled", chHighStat, channelCb->numFragmentCurrentChain)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO
eWLAN_PAL_TRACE_LEVEL_INFO
"RX HIGH CH EVNT STAT 0x%x, %d frames handled"
chHighStat
chHighStat
channelCb->numFragmentCurrentChain
channelCb
channelCb
numFragmentCurrentChain
channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);
channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1)
channelCb->rxDoneHistogram
channelCb
channelCb
rxDoneHistogram
(channelCb->rxDoneHistogram << 1)
channelCb->rxDoneHistogram << 1
channelCb->rxDoneHistogram
channelCb
channelCb
rxDoneHistogram
1
if(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }
WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat
WLANDXE_CH_STAT_INT_DONE_MASK
WLANDXE_CH_STAT_INT_DONE_MASK
chHighStat
chHighStat
{         channelCb->rxDoneHistogram |= 1;      }
channelCb->rxDoneHistogram |= 1;
channelCb->rxDoneHistogram |= 1
channelCb->rxDoneHistogram
channelCb
channelCb
rxDoneHistogram
1
{         channelCb->rxDoneHistogram &= ~1;      }
channelCb->rxDoneHistogram &= ~1;
channelCb->rxDoneHistogram &= ~1
channelCb->rxDoneHistogram
channelCb
channelCb
rxDoneHistogram
~1
1
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI];
channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
channelCb
channelCb
&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_LOW_PRI
WDTS_CHANNEL_RX_LOW_PRI
if(intSrc & (1 << channelCb->assignedDMAChannel))   {      status = dxeChannelCleanInt(channelCb, &chLowStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chLowStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chLowStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if(WLANDXE_CH_STAT_INT_ED_MASK & chLowStat)      {         /* Handle RX Ready for low priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat);       }      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chLowStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX LOW CH EVNT STAT 0x%x, %d frames handled", chLowStat, channelCb->numFragmentCurrentChain);   }
intSrc & (1 << channelCb->assignedDMAChannel)
intSrc
intSrc
(1 << channelCb->assignedDMAChannel)
1 << channelCb->assignedDMAChannel
1
channelCb->assignedDMAChannel
channelCb
channelCb
assignedDMAChannel
{      status = dxeChannelCleanInt(channelCb, &chLowStat);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }      if(WLANDXE_CH_STAT_INT_ERR_MASK & chLowStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chLowStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if(WLANDXE_CH_STAT_INT_ED_MASK & chLowStat)      {         /* Handle RX Ready for low priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat);       }      /* Update the Rx DONE histogram */      channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);      if(WLANDXE_CH_STAT_INT_DONE_MASK & chLowStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX LOW CH EVNT STAT 0x%x, %d frames handled", chLowStat, channelCb->numFragmentCurrentChain);   }
status = dxeChannelCleanInt(channelCb, &chLowStat);
status = dxeChannelCleanInt(channelCb, &chLowStat)
status
status
dxeChannelCleanInt(channelCb, &chLowStat)
dxeChannelCleanInt
dxeChannelCleanInt
channelCb
channelCb
&chLowStat
chLowStat
chLowStat
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");         return;               }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeRXEventHandler INT Clean up fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeRXEventHandler INT Clean up fail"
return;
if(WLANDXE_CH_STAT_INT_ERR_MASK & chLowStat)      {         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chLowStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }      else if(WLANDXE_CH_STAT_INT_ED_MASK & chLowStat)      {         /* Handle RX Ready for low priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat);       }
WLANDXE_CH_STAT_INT_ERR_MASK & chLowStat
WLANDXE_CH_STAT_INT_ERR_MASK
WLANDXE_CH_STAT_INT_ERR_MASK
chLowStat
chLowStat
{         /* Error Happen during transaction, Handle it */         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chLowStat);         dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;         wpalWlanReload();      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chLowStat);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,                  "%11s : 0x%x Error Reported, Reload Driver",                  channelType[channelCb->channelType], chLowStat)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_FATAL
eWLAN_PAL_TRACE_LEVEL_FATAL
"%11s : 0x%x Error Reported, Reload Driver"
channelType[channelCb->channelType]
channelType
channelType
channelCb->channelType
channelCb
channelCb
channelType
chLowStat
chLowStat
dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE;
dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE
dxeCtxt->driverReloadInProcessing
dxeCtxt
dxeCtxt
driverReloadInProcessing
eWLAN_PAL_TRUE
eWLAN_PAL_TRUE
wpalWlanReload();
wpalWlanReload()
wpalWlanReload
wpalWlanReload
if(WLANDXE_CH_STAT_INT_ED_MASK & chLowStat)      {         /* Handle RX Ready for low priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat);       }
WLANDXE_CH_STAT_INT_ED_MASK & chLowStat
WLANDXE_CH_STAT_INT_ED_MASK
WLANDXE_CH_STAT_INT_ED_MASK
chLowStat
chLowStat
{         /* Handle RX Ready for low priority channel */         status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat);       }
status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat);
status = dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat)
status
status
dxeRXFrameReady(dxeCtxt,                                  channelCb,                                  chLowStat)
dxeRXFrameReady
dxeRXFrameReady
dxeCtxt
dxeCtxt
channelCb
channelCb
chLowStat
chLowStat
channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1);
channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1)
channelCb->rxDoneHistogram
channelCb
channelCb
rxDoneHistogram
(channelCb->rxDoneHistogram << 1)
channelCb->rxDoneHistogram << 1
channelCb->rxDoneHistogram
channelCb
channelCb
rxDoneHistogram
1
if(WLANDXE_CH_STAT_INT_DONE_MASK & chLowStat)      {         channelCb->rxDoneHistogram |= 1;      }      else      {         channelCb->rxDoneHistogram &= ~1;      }
WLANDXE_CH_STAT_INT_DONE_MASK & chLowStat
WLANDXE_CH_STAT_INT_DONE_MASK
WLANDXE_CH_STAT_INT_DONE_MASK
chLowStat
chLowStat
{         channelCb->rxDoneHistogram |= 1;      }
channelCb->rxDoneHistogram |= 1;
channelCb->rxDoneHistogram |= 1
channelCb->rxDoneHistogram
channelCb
channelCb
rxDoneHistogram
1
{         channelCb->rxDoneHistogram &= ~1;      }
channelCb->rxDoneHistogram &= ~1;
channelCb->rxDoneHistogram &= ~1
channelCb->rxDoneHistogram
channelCb
channelCb
rxDoneHistogram
~1
1
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX LOW CH EVNT STAT 0x%x, %d frames handled", chLowStat, channelCb->numFragmentCurrentChain);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,               "RX LOW CH EVNT STAT 0x%x, %d frames handled", chLowStat, channelCb->numFragmentCurrentChain)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO
eWLAN_PAL_TRACE_LEVEL_INFO
"RX LOW CH EVNT STAT 0x%x, %d frames handled"
chLowStat
chLowStat
channelCb->numFragmentCurrentChain
channelCb
channelCb
numFragmentCurrentChain
if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Handle Frame Ready Fail");      return;            }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Handle Frame Ready Fail");      return;            }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Handle Frame Ready Fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Handle Frame Ready Fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeRXEventHandler Handle Frame Ready Fail"
return;
if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK))   {      HDXE_ASSERT(0);   }
!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_HIGH_PRI
WDTS_CHANNEL_RX_HIGH_PRI
extraConfig
chan_mask
WLANDXE_CH_CTRL_EN_MASK
WLANDXE_CH_CTRL_EN_MASK
{      HDXE_ASSERT(0);   }
HDXE_ASSERT(0);
HDXE_ASSERT(0)
HDXE_ASSERT
HDXE_ASSERT
0
wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister.chDXECtrlRegAddr,                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask);
wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister.chDXECtrlRegAddr,                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask)
wpalWriteRegister
wpalWriteRegister
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister.chDXECtrlRegAddr
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_HIGH_PRI
WDTS_CHANNEL_RX_HIGH_PRI
channelRegister
chDXECtrlRegAddr
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_HIGH_PRI
WDTS_CHANNEL_RX_HIGH_PRI
extraConfig
chan_mask
if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK))   {      HDXE_ASSERT(0);   }
!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_LOW_PRI
WDTS_CHANNEL_RX_LOW_PRI
extraConfig
chan_mask
WLANDXE_CH_CTRL_EN_MASK
WLANDXE_CH_CTRL_EN_MASK
{      HDXE_ASSERT(0);   }
HDXE_ASSERT(0);
HDXE_ASSERT(0)
HDXE_ASSERT
HDXE_ASSERT
0
wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister.chDXECtrlRegAddr,                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask);
wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister.chDXECtrlRegAddr,                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask)
wpalWriteRegister
wpalWriteRegister
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister.chDXECtrlRegAddr
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_LOW_PRI
WDTS_CHANNEL_RX_LOW_PRI
channelRegister
chDXECtrlRegAddr
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig
dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
WDTS_CHANNEL_RX_LOW_PRI
WDTS_CHANNEL_RX_LOW_PRI
extraConfig
chan_mask
wpalReadRegister(WLANDXE_INT_MASK_REG_ADDRESS, &regValue);
wpalReadRegister(WLANDXE_INT_MASK_REG_ADDRESS, &regValue)
wpalReadRegister
wpalReadRegister
WLANDXE_INT_MASK_REG_ADDRESS
WLANDXE_INT_MASK_REG_ADDRESS
&regValue
regValue
regValue
regValue &= WLANDXE_RX_INTERRUPT_PRO_UNMASK;
regValue &= WLANDXE_RX_INTERRUPT_PRO_UNMASK
regValue
regValue
WLANDXE_RX_INTERRUPT_PRO_UNMASK
WLANDXE_RX_INTERRUPT_PRO_UNMASK
wpalWriteRegister(WLANDXE_INT_MASK_REG_ADDRESS, regValue);
wpalWriteRegister(WLANDXE_INT_MASK_REG_ADDRESS, regValue)
wpalWriteRegister
wpalWriteRegister
WLANDXE_INT_MASK_REG_ADDRESS
WLANDXE_INT_MASK_REG_ADDRESS
regValue
regValue
status = wpalEnableInterrupt(DXE_INTERRUPT_RX_READY);
status = wpalEnableInterrupt(DXE_INTERRUPT_RX_READY)
status
status
wpalEnableInterrupt(DXE_INTERRUPT_RX_READY)
wpalEnableInterrupt
wpalEnableInterrupt
DXE_INTERRUPT_RX_READY
DXE_INTERRUPT_RX_READY
if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Enable RX Ready interrupt fail");      return;   }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Enable RX Ready interrupt fail");      return;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Enable RX Ready interrupt fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeRXEventHandler Enable RX Ready interrupt fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeRXEventHandler Enable RX Ready interrupt fail"
return;
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Exit"
__func__
__func__
return;
-----joern-----
(344,64,0)
(2,69,0)
(363,233,0)
(249,256,0)
(268,216,0)
(15,327,0)
(499,86,0)
(252,443,0)
(11,55,0)
(155,148,0)
(7,28,0)
(371,99,0)
(108,86,0)
(280,231,0)
(242,368,0)
(80,400,0)
(199,4,0)
(152,24,0)
(233,87,0)
(340,134,0)
(176,27,0)
(147,338,0)
(417,326,0)
(79,292,0)
(98,327,0)
(347,143,0)
(164,44,0)
(110,441,0)
(276,130,0)
(78,391,0)
(463,371,0)
(243,405,0)
(209,44,0)
(404,33,0)
(329,276,0)
(512,260,0)
(135,381,0)
(466,479,0)
(320,69,0)
(154,327,0)
(360,47,0)
(387,4,0)
(252,68,0)
(377,20,0)
(40,497,0)
(0,327,0)
(288,18,0)
(262,103,0)
(132,327,0)
(315,173,0)
(335,493,0)
(246,50,0)
(285,148,0)
(311,87,0)
(298,121,0)
(323,376,0)
(240,303,0)
(241,339,0)
(188,11,0)
(361,54,0)
(509,145,0)
(156,1,0)
(504,484,0)
(296,86,0)
(189,429,0)
(366,124,0)
(416,307,0)
(479,26,0)
(430,174,0)
(116,426,0)
(356,436,0)
(276,510,0)
(357,368,0)
(223,396,0)
(94,98,0)
(18,465,0)
(327,86,0)
(144,86,0)
(385,130,0)
(13,90,0)
(470,130,0)
(71,427,0)
(389,283,0)
(42,277,0)
(184,100,0)
(211,86,0)
(291,232,0)
(424,100,0)
(136,11,0)
(452,253,0)
(279,132,0)
(33,240,0)
(67,44,0)
(128,435,0)
(445,263,0)
(405,130,0)
(200,270,0)
(429,118,0)
(454,222,0)
(409,103,0)
(400,200,0)
(477,15,0)
(145,25,0)
(73,103,0)
(364,263,0)
(416,127,0)
(252,158,0)
(257,287,0)
(220,424,0)
(313,125,0)
(400,14,0)
(139,0,0)
(495,98,0)
(491,239,0)
(49,435,0)
(508,385,0)
(73,431,0)
(231,130,0)
(23,0,0)
(322,405,0)
(234,118,0)
(158,86,0)
(83,90,0)
(342,86,0)
(201,358,0)
(263,445,0)
(513,338,0)
(84,194,0)
(112,127,0)
(495,411,0)
(384,267,0)
(229,136,0)
(438,132,0)
(44,208,0)
(121,4,0)
(255,285,0)
(389,259,0)
(372,463,0)
(473,118,0)
(119,371,0)
(437,344,0)
(167,132,0)
(497,436,0)
(299,358,0)
(481,225,0)
(230,127,0)
(161,246,0)
(349,303,0)
(55,195,0)
(76,259,0)
(126,86,0)
(214,326,0)
(47,478,0)
(401,86,0)
(123,303,0)
(374,327,0)
(24,101,0)
(118,303,0)
(97,235,0)
(193,270,0)
(456,254,0)
(27,193,0)
(358,299,0)
(169,438,0)
(149,73,0)
(390,380,0)
(9,86,0)
(304,493,0)
(73,429,0)
(232,402,0)
(259,86,0)
(104,130,0)
(140,401,0)
(245,270,0)
(488,25,0)
(250,267,0)
(215,133,0)
(354,246,0)
(441,110,0)
(343,206,0)
(448,117,0)
(334,261,0)
(484,182,0)
(267,363,0)
(53,86,0)
(1,130,0)
(157,403,0)
(411,351,0)
(233,363,0)
(337,504,0)
(324,316,0)
(252,304,0)
(183,344,0)
(19,413,0)
(117,446,0)
(72,208,0)
(213,259,0)
(283,103,0)
(386,323,0)
(491,1,0)
(143,130,0)
(54,264,0)
(58,262,0)
(73,512,0)
(232,19,0)
(33,424,0)
(150,31,0)
(385,225,0)
(11,86,0)
(302,445,0)
(402,232,0)
(39,124,0)
(73,81,0)
(254,130,0)
(236,110,0)
(286,253,0)
(105,35,0)
(380,316,0)
(246,259,0)
(300,206,0)
(219,363,0)
(232,484,0)
(173,231,0)
(317,479,0)
(19,245,0)
(129,323,0)
(137,11,0)
(373,486,0)
(271,33,0)
(151,104,0)
(118,327,0)
(134,253,0)
(224,233,0)
(79,0,0)
(277,130,0)
(359,111,0)
(118,130,0)
(103,283,0)
(143,255,0)
(331,117,0)
(370,499,0)
(246,96,0)
(85,110,0)
(179,254,0)
(315,196,0)
(159,19,0)
(239,491,0)
(465,264,0)
(297,315,0)
(193,27,0)
(388,133,0)
(293,352,0)
(238,424,0)
(501,137,0)
(91,19,0)
(446,415,0)
(30,138,0)
(127,416,0)
(252,289,0)
(195,55,0)
(55,11,0)
(130,86,0)
(422,514,0)
(171,246,0)
(417,264,0)
(446,130,0)
(137,174,0)
(369,138,0)
(8,222,0)
(109,401,0)
(81,15,0)
(160,349,0)
(309,351,0)
(467,401,0)
(20,303,0)
(162,4,0)
(208,349,0)
(446,117,0)
(247,195,0)
(445,215,0)
(192,64,0)
(60,86,0)
(261,334,0)
(455,503,0)
(81,332,0)
(37,262,0)
(170,136,0)
(469,81,0)
(328,311,0)
(44,327,0)
(433,200,0)
(275,173,0)
(305,16,0)
(439,513,0)
(153,128,0)
(148,285,0)
(103,31,0)
(435,128,0)
(503,86,0)
(203,148,0)
(284,162,0)
(394,86,0)
(200,303,0)
(68,122,0)
(395,245,0)
(408,380,0)
(130,446,0)
(267,130,0)
(436,493,0)
(210,486,0)
(303,239,0)
(35,86,0)
(421,54,0)
(414,513,0)
(225,493,0)
(460,292,0)
(399,396,0)
(383,86,0)
(294,18,0)
(138,259,0)
(174,137,0)
(365,118,0)
(458,240,0)
(18,466,0)
(352,493,0)
(265,260,0)
(190,86,0)
(348,99,0)
(240,19,0)
(363,267,0)
(99,371,0)
(277,426,0)
(114,121,0)
(355,28,0)
(253,134,0)
(247,130,0)
(98,495,0)
(136,431,0)
(398,86,0)
(22,225,0)
(403,207,0)
(465,447,0)
(172,344,0)
(253,286,0)
(215,445,0)
(237,283,0)
(412,370,0)
(16,510,0)
(243,493,0)
(479,375,0)
(379,339,0)
(200,400,0)
(36,137,0)
(32,408,0)
(255,143,0)
(177,231,0)
(391,111,0)
(499,196,0)
(514,11,0)
(266,31,0)
(442,255,0)
(252,147,0)
(380,408,0)
(10,86,0)
(178,155,0)
(358,493,0)
(87,311,0)
(199,260,0)
(41,15,0)
(274,405,0)
(26,479,0)
(239,303,0)
(185,420,0)
(405,358,0)
(195,247,0)
(353,240,0)
(101,24,0)
(252,272,0)
(92,254,0)
(4,86,0)
(56,111,0)
(410,44,0)
(3,246,0)
(402,48,0)
(314,10,0)
(346,99,0)
(307,352,0)
(391,16,0)
(134,340,0)
(28,188,0)
(479,466,0)
(151,263,0)
(352,307,0)
(270,193,0)
(19,277,0)
(489,405,0)
(89,86,0)
(91,182,0)
(367,271,0)
(252,192,0)
(440,181,0)
(141,271,0)
(222,454,0)
(396,243,0)
(512,86,0)
(17,101,0)
(111,391,0)
(462,35,0)
(182,91,0)
(264,465,0)
(340,206,0)
(350,431,0)
(495,303,0)
(69,54,0)
(92,412,0)
(206,340,0)
(370,412,0)
(110,130,0)
(75,412,0)
(33,65,0)
(474,339,0)
(218,225,0)
(196,499,0)
(443,376,0)
(6,340,0)
(406,403,0)
(256,411,0)
(107,15,0)
(206,130,0)
(510,16,0)
(427,214,0)
(371,493,0)
(487,1,0)
(120,327,0)
(57,438,0)
(475,504,0)
(472,225,0)
(269,28,0)
(505,497,0)
(333,373,0)
(25,145,0)
(54,69,0)
(260,512,0)
(95,194,0)
(216,2,0)
(405,243,0)
(341,454,0)
(165,92,0)
(146,120,0)
(504,11,0)
(471,143,0)
(434,373,0)
(500,417,0)
(498,195,0)
(204,10,0)
(428,235,0)
(411,495,0)
(290,401,0)
(24,261,0)
(461,86,0)
(244,151,0)
(133,215,0)
(283,389,0)
(420,122,0)
(45,28,0)
(507,50,0)
(273,513,0)
(326,214,0)
(308,381,0)
(99,259,0)
(295,155,0)
(289,382,0)
(69,2,0)
(299,454,0)
(202,194,0)
(272,34,0)
(136,259,0)
(316,133,0)
(127,130,0)
(50,514,0)
(125,86,0)
(63,311,0)
(216,264,0)
(20,298,0)
(132,351,0)
(264,86,0)
(145,86,0)
(499,370,0)
(381,308,0)
(70,188,0)
(136,130,0)
(198,31,0)
(2,216,0)
(27,303,0)
(59,368,0)
(99,352,0)
(252,210,0)
(415,446,0)
(447,465,0)
(449,495,0)
(66,491,0)
(111,359,0)
(163,86,0)
(287,259,0)
(248,182,0)
(62,181,0)
(186,134,0)
(490,351,0)
(345,351,0)
(258,243,0)
(28,259,0)
(283,11,0)
(5,411,0)
(180,88,0)
(450,287,0)
(425,402,0)
(90,128,0)
(74,35,0)
(196,315,0)
(427,86,0)
(438,303,0)
(378,276,0)
(349,208,0)
(270,351,0)
(88,327,0)
(104,151,0)
(33,277,0)
(306,73,0)
(15,303,0)
(148,155,0)
(82,120,0)
(225,385,0)
(175,232,0)
(325,420,0)
(330,136,0)
(459,200,0)
(188,28,0)
(468,349,0)
(16,391,0)
(457,222,0)
(205,125,0)
(292,327,0)
(312,188,0)
(339,382,0)
(292,79,0)
(216,86,0)
(217,88,0)
(311,63,0)
(142,417,0)
(226,381,0)
(28,31,0)
(310,86,0)
(197,373,0)
(260,199,0)
(227,132,0)
(444,27,0)
(381,264,0)
(21,4,0)
(77,247,0)
(212,342,0)
(208,44,0)
(426,38,0)
(418,91,0)
(102,451,0)
(510,276,0)
(423,463,0)
(61,416,0)
(263,151,0)
(301,86,0)
(91,270,0)
(106,323,0)
(397,326,0)
(15,81,0)
(482,86,0)
(43,35,0)
(155,130,0)
(222,130,0)
(506,38,0)
(0,79,0)
(326,417,0)
(441,101,0)
(464,308,0)
(424,130,0)
(298,20,0)
(407,298,0)
(412,92,0)
(431,136,0)
(100,96,0)
(368,34,0)
(432,420,0)
(124,259,0)
(194,281,0)
(173,315,0)
(52,256,0)
(245,303,0)
(261,24,0)
(101,441,0)
(232,11,0)
(336,11,0)
(99,130,0)
(51,91,0)
(12,277,0)
(480,512,0)
(303,86,0)
(29,126,0)
(128,86,0)
(392,493,0)
(221,408,0)
(451,476,0)
(492,199,0)
(484,31,0)
(485,196,0)
(429,511,0)
(132,438,0)
(514,50,0)
(254,92,0)
(181,512,0)
(321,132,0)
(502,403,0)
(431,282,0)
(1,491,0)
(93,247,0)
(278,264,0)
(35,4,0)
(427,264,0)
(453,342,0)
(231,173,0)
(465,18,0)
(454,299,0)
(362,20,0)
(214,427,0)
(494,245,0)
(408,130,0)
(393,503,0)
(285,255,0)
(118,429,0)
(191,104,0)
(166,292,0)
(33,245,0)
(405,327,0)
(286,334,0)
(44,38,0)
(174,162,0)
(271,11,0)
(73,411,0)
(319,514,0)
(168,466,0)
(419,441,0)
(117,466,0)
(466,86,0)
(91,11,0)
(133,316,0)
(187,96,0)
(228,99,0)
(232,270,0)
(334,286,0)
(33,504,0)
(318,104,0)
(87,233,0)
(113,389,0)
(483,126,0)
(251,193,0)
(121,298,0)
(182,484,0)
(515,370,0)
(50,246,0)
(307,416,0)
(46,385,0)
(162,174,0)
(316,380,0)
(496,510,0)
(15,130,0)
(235,327,0)
(115,87,0)
(215,86,0)
(131,86,0)
(196,485,1)
(512,260,1)
(132,438,1)
(231,130,1)
(210,373,1)
(245,494,1)
(153,503,1)
(405,130,1)
(75,92,1)
(235,97,1)
(239,491,1)
(224,363,1)
(416,61,1)
(328,87,1)
(359,111,1)
(316,324,1)
(90,83,1)
(468,160,1)
(489,258,1)
(74,105,1)
(196,315,1)
(423,371,1)
(244,104,1)
(206,343,1)
(158,401,1)
(21,387,1)
(25,488,1)
(200,303,1)
(135,226,1)
(147,513,1)
(363,219,1)
(93,336,1)
(241,379,1)
(195,247,1)
(483,4,1)
(271,141,1)
(39,366,1)
(111,56,1)
(308,381,1)
(272,368,1)
(22,218,1)
(246,3,1)
(113,237,1)
(286,253,1)
(127,130,1)
(430,284,1)
(354,124,1)
(368,59,1)
(99,259,1)
(118,303,1)
(443,323,1)
(73,431,1)
(240,303,1)
(215,445,1)
(226,464,1)
(238,220,1)
(104,130,1)
(178,295,1)
(106,129,1)
(181,62,1)
(121,4,1)
(250,384,1)
(87,115,1)
(267,130,1)
(480,285,1)
(252,192,1)
(47,360,1)
(136,11,1)
(450,484,1)
(27,444,1)
(280,177,1)
(331,470,1)
(385,46,1)
(258,358,1)
(462,74,1)
(121,298,1)
(179,456,1)
(317,168,1)
(330,350,1)
(473,189,1)
(110,236,1)
(402,425,1)
(1,487,1)
(252,147,1)
(400,200,1)
(514,319,1)
(137,36,1)
(350,138,1)
(15,130,1)
(234,473,1)
(399,243,1)
(195,498,1)
(503,393,1)
(358,299,1)
(120,146,1)
(427,264,1)
(69,320,1)
(197,333,1)
(111,391,1)
(463,372,1)
(409,162,1)
(213,327,1)
(185,432,1)
(109,467,1)
(340,206,1)
(406,463,1)
(445,302,1)
(151,104,1)
(76,213,1)
(161,171,1)
(18,294,1)
(206,130,1)
(283,11,1)
(73,81,1)
(72,209,1)
(389,259,1)
(56,391,1)
(193,251,1)
(306,149,1)
(256,249,1)
(107,469,1)
(33,504,1)
(292,166,1)
(271,11,1)
(356,497,1)
(405,274,1)
(141,367,1)
(199,4,1)
(228,346,1)
(189,79,1)
(12,42,1)
(1,130,1)
(380,390,1)
(28,259,1)
(99,228,1)
(216,264,1)
(7,355,1)
(118,365,1)
(502,157,1)
(51,504,1)
(6,206,1)
(24,152,1)
(19,277,1)
(252,304,1)
(91,418,1)
(232,175,1)
(15,303,1)
(69,54,1)
(149,162,1)
(41,107,1)
(402,232,1)
(492,265,1)
(167,227,1)
(11,55,1)
(514,11,1)
(29,483,1)
(336,121,1)
(474,90,1)
(426,116,1)
(314,342,1)
(252,289,1)
(193,27,1)
(57,321,1)
(479,317,1)
(13,128,1)
(71,308,1)
(407,114,1)
(496,276,1)
(435,49,1)
(136,229,1)
(428,256,1)
(349,303,1)
(346,348,1)
(427,214,1)
(429,118,1)
(277,130,1)
(388,316,1)
(494,395,1)
(177,370,1)
(254,179,1)
(504,11,1)
(370,515,1)
(67,208,1)
(212,453,1)
(186,340,1)
(172,262,1)
(124,39,1)
(352,307,1)
(467,140,1)
(174,137,1)
(205,145,1)
(138,259,1)
(475,337,1)
(408,221,1)
(417,142,1)
(488,509,1)
(267,250,1)
(401,109,1)
(132,327,1)
(33,277,1)
(169,57,1)
(319,422,1)
(54,264,1)
(500,71,1)
(456,63,1)
(44,67,1)
(425,232,1)
(27,303,1)
(95,396,1)
(442,148,1)
(510,496,1)
(334,286,1)
(421,361,1)
(499,196,1)
(157,406,1)
(209,410,1)
(70,7,1)
(138,30,1)
(127,112,1)
(273,73,1)
(253,452,1)
(387,10,1)
(188,11,1)
(134,340,1)
(491,66,1)
(316,380,1)
(120,327,1)
(362,407,1)
(365,234,1)
(54,421,1)
(99,352,1)
(487,156,1)
(5,121,1)
(97,428,1)
(333,434,1)
(222,130,1)
(485,315,1)
(33,245,1)
(73,512,1)
(513,439,1)
(43,462,1)
(235,327,1)
(173,275,1)
(77,93,1)
(99,130,1)
(515,412,1)
(63,311,1)
(73,411,1)
(140,290,1)
(20,377,1)
(247,77,1)
(445,263,1)
(361,268,1)
(124,259,1)
(260,199,1)
(182,248,1)
(151,244,1)
(440,512,1)
(42,44,1)
(454,222,1)
(438,169,1)
(259,76,1)
(311,87,1)
(175,291,1)
(439,414,1)
(143,130,1)
(295,203,1)
(227,429,1)
(16,510,1)
(326,417,1)
(364,151,1)
(200,459,1)
(128,435,1)
(33,404,1)
(191,318,1)
(110,130,1)
(223,399,1)
(44,208,1)
(17,441,1)
(246,50,1)
(347,442,1)
(465,18,1)
(92,165,1)
(204,314,1)
(509,499,1)
(327,154,1)
(484,182,1)
(166,460,1)
(231,280,1)
(452,134,1)
(357,334,1)
(397,417,1)
(102,63,1)
(342,212,1)
(285,148,1)
(287,257,1)
(378,73,1)
(253,134,1)
(117,466,1)
(117,448,1)
(275,231,1)
(28,188,1)
(105,181,1)
(372,423,1)
(221,32,1)
(227,120,1)
(432,325,1)
(510,276,1)
(418,51,1)
(118,130,1)
(269,402,1)
(395,132,1)
(156,123,1)
(219,267,1)
(265,480,1)
(20,303,1)
(230,293,1)
(276,329,1)
(341,222,1)
(269,33,1)
(391,78,1)
(408,130,1)
(149,28,1)
(373,197,1)
(457,201,1)
(284,11,1)
(66,1,1)
(245,303,1)
(274,322,1)
(200,270,1)
(261,24,1)
(414,273,1)
(146,82,1)
(263,151,1)
(136,130,1)
(339,241,1)
(164,235,1)
(446,415,1)
(495,303,1)
(37,58,1)
(508,472,1)
(416,127,1)
(100,184,1)
(126,29,1)
(229,170,1)
(456,451,1)
(255,143,1)
(405,358,1)
(298,20,1)
(160,72,1)
(355,45,1)
(437,183,1)
(334,261,1)
(30,369,1)
(459,433,1)
(180,270,1)
(393,455,1)
(80,200,1)
(469,120,1)
(404,271,1)
(220,246,1)
(312,70,1)
(98,327,1)
(400,80,1)
(252,443,1)
(300,130,1)
(385,130,1)
(441,419,1)
(0,327,1)
(248,91,1)
(129,181,1)
(68,420,1)
(10,204,1)
(3,50,1)
(199,492,1)
(170,330,1)
(279,167,1)
(479,26,1)
(326,397,1)
(55,195,1)
(73,429,1)
(438,303,1)
(201,225,1)
(294,288,1)
(287,259,1)
(336,19,1)
(336,400,1)
(87,233,1)
(159,240,1)
(91,270,1)
(302,263,1)
(242,357,1)
(176,245,1)
(288,278,1)
(504,475,1)
(506,426,1)
(236,85,1)
(137,11,1)
(183,172,1)
(252,272,1)
(412,92,1)
(91,19,1)
(44,327,1)
(88,327,1)
(424,130,1)
(94,449,1)
(35,43,1)
(268,427,1)
(318,47,1)
(154,374,1)
(243,405,1)
(463,371,1)
(227,81,1)
(215,133,1)
(218,285,1)
(227,506,1)
(252,68,1)
(323,386,1)
(297,173,1)
(184,424,1)
(181,512,1)
(384,215,1)
(45,269,1)
(40,463,1)
(307,416,1)
(139,23,1)
(363,267,1)
(114,303,1)
(458,353,1)
(367,287,1)
(270,193,1)
(112,230,1)
(454,341,1)
(18,466,1)
(256,411,1)
(90,128,1)
(148,155,1)
(434,256,1)
(58,103,1)
(19,159,1)
(412,75,1)
(366,262,1)
(465,447,1)
(8,457,1)
(411,495,1)
(420,185,1)
(410,164,1)
(472,481,1)
(455,125,1)
(232,11,1)
(353,88,1)
(4,21,1)
(290,90,1)
(155,130,1)
(162,174,1)
(466,479,1)
(50,514,1)
(217,180,1)
(283,389,1)
(263,364,1)
(136,259,1)
(62,440,1)
(315,297,1)
(252,158,1)
(115,233,1)
(325,308,1)
(33,240,1)
(171,354,1)
(92,254,1)
(162,4,1)
(477,41,1)
(73,306,1)
(0,139,1)
(311,328,1)
(446,117,1)
(252,210,1)
(232,270,1)
(293,194,1)
(449,5,1)
(133,316,1)
(391,16,1)
(381,135,1)
(103,283,1)
(396,223,1)
(152,101,1)
(79,292,1)
(247,130,1)
(240,458,1)
(232,484,1)
(321,279,1)
(377,362,1)
(374,126,1)
(380,408,1)
(379,474,1)
(233,363,1)
(507,161,1)
(15,477,1)
(292,327,1)
(52,411,1)
(329,378,1)
(237,409,1)
(471,347,1)
(36,501,1)
(188,312,1)
(277,12,1)
(233,224,1)
(216,2,1)
(470,216,1)
(130,446,1)
(448,331,1)
(285,255,1)
(85,286,1)
(143,471,1)
(451,102,1)
(182,91,1)
(249,52,1)
(403,502,1)
(49,153,1)
(98,94,1)
(386,106,1)
(246,259,1)
(84,202,1)
(322,489,1)
(40,403,1)
(173,231,1)
(405,327,1)
(389,113,1)
(24,101,1)
(192,344,1)
(61,127,1)
(390,408,1)
(23,292,1)
(262,103,1)
(501,430,1)
(91,11,1)
(505,40,1)
(104,191,1)
(304,436,1)
(417,264,1)
(381,264,1)
(481,22,1)
(119,352,1)
(340,6,1)
(419,110,1)
(134,186,1)
(436,356,1)
(35,4,1)
(324,380,1)
(499,370,1)
(441,110,1)
(289,339,1)
(396,243,1)
(337,138,1)
(299,454,1)
(360,359,1)
(59,242,1)
(371,99,1)
(495,98,1)
(313,205,1)
(348,119,1)
(2,69,1)
(214,326,1)
(78,16,1)
(142,500,1)
(123,35,1)
(145,25,1)
(431,136,1)
(479,375,1)
(262,37,1)
(187,100,1)
(73,103,1)
(83,13,1)
(305,510,1)
(251,27,1)
(125,313,1)
(116,277,1)
(349,468,1)
(32,445,1)
(101,17,1)
(165,254,1)
(254,130,1)
(194,84,1)
(369,124,1)
(315,173,1)
(19,245,1)
(497,505,1)
(337,431,1)
(337,187,1)
(225,385,1)
(155,178,1)
(81,15,1)
(88,217,1)
(422,507,1)
(453,466,1)
(276,130,1)
(202,95,1)
(278,259,1)
(264,465,1)
(344,437,1)
(318,359,1)
(16,305,1)
(203,334,1)
(291,287,1)
(15,327,1)
(460,235,1)
(491,1,1)
(424,238,1)
(257,450,1)
(208,349,1)
(133,388,1)
(433,88,1)
(293,396,1)
(498,247,1)
(118,327,1)
(101,441,1)
(79,0,1)
(33,424,1)
(343,300,1)
(444,176,1)
(46,508,1)
(82,79,1)
(370,412,1)
(222,8,1)
(464,264,1)
(320,54,1)
(232,19,1)
(303,239,1)
(61,285,2)
(349,303,2)
(112,285,2)
(242,334,2)
(12,235,2)
(417,308,2)
(300,308,2)
(469,120,2)
(200,270,2)
(45,262,2)
(411,121,2)
(107,120,2)
(270,193,2)
(196,315,2)
(412,92,2)
(435,73,2)
(248,262,2)
(262,103,2)
(161,124,2)
(149,262,2)
(358,299,2)
(350,138,2)
(514,124,2)
(180,256,2)
(427,214,2)
(295,334,2)
(368,334,2)
(193,256,2)
(245,256,2)
(334,261,2)
(472,285,2)
(252,68,2)
(340,206,2)
(451,63,2)
(18,466,2)
(77,121,2)
(441,286,2)
(225,385,2)
(252,210,2)
(158,90,2)
(439,73,2)
(7,262,2)
(380,73,2)
(253,308,2)
(416,127,2)
(262,162,2)
(285,334,2)
(49,73,2)
(227,256,2)
(0,327,2)
(494,256,2)
(384,73,2)
(330,138,2)
(271,11,2)
(402,232,2)
(401,90,2)
(399,285,2)
(315,173,2)
(210,256,2)
(323,181,2)
(68,308,2)
(272,334,2)
(319,124,2)
(87,233,2)
(94,121,2)
(189,79,2)
(188,11,2)
(136,11,2)
(35,4,2)
(280,73,2)
(111,391,2)
(125,73,2)
(91,19,2)
(194,396,2)
(240,303,2)
(88,327,2)
(11,256,2)
(284,121,2)
(28,259,2)
(104,73,2)
(182,262,2)
(261,286,2)
(322,285,2)
(255,148,2)
(143,130,2)
(336,256,2)
(72,235,2)
(371,99,2)
(177,73,2)
(215,133,2)
(16,510,2)
(57,256,2)
(508,285,2)
(13,73,2)
(118,303,2)
(93,256,2)
(202,396,2)
(219,73,2)
(446,415,2)
(331,308,2)
(88,256,2)
(47,359,2)
(214,326,2)
(349,235,2)
(101,441,2)
(136,259,2)
(271,287,2)
(326,308,2)
(389,162,2)
(225,285,2)
(91,11,2)
(402,287,2)
(99,259,2)
(421,308,2)
(103,283,2)
(424,130,2)
(130,446,2)
(220,124,2)
(422,124,2)
(274,285,2)
(200,303,2)
(151,104,2)
(504,11,2)
(299,454,2)
(328,73,2)
(416,285,2)
(137,121,2)
(495,98,2)
(43,181,2)
(63,311,2)
(235,327,2)
(363,73,2)
(412,73,2)
(33,424,2)
(243,285,2)
(373,256,2)
(252,289,2)
(15,303,2)
(99,352,2)
(221,73,2)
(240,88,2)
(136,138,2)
(232,484,2)
(164,235,2)
(182,91,2)
(254,130,2)
(410,235,2)
(479,375,2)
(174,256,2)
(448,308,2)
(159,88,2)
(429,79,2)
(390,73,2)
(249,121,2)
(287,262,2)
(260,199,2)
(181,285,2)
(372,285,2)
(484,262,2)
(388,73,2)
(311,73,2)
(311,87,2)
(28,262,2)
(465,18,2)
(243,405,2)
(33,277,2)
(136,130,2)
(442,148,2)
(449,121,2)
(73,262,2)
(491,181,2)
(134,308,2)
(488,73,2)
(197,256,2)
(471,148,2)
(480,285,2)
(419,286,2)
(3,124,2)
(172,262,2)
(460,235,2)
(454,222,2)
(73,512,2)
(127,285,2)
(417,264,2)
(15,120,2)
(258,285,2)
(39,262,2)
(391,16,2)
(33,504,2)
(20,181,2)
(400,88,2)
(363,267,2)
(256,121,2)
(121,4,2)
(117,308,2)
(405,285,2)
(160,235,2)
(132,438,2)
(236,286,2)
(256,411,2)
(268,308,2)
(355,262,2)
(206,308,2)
(431,138,2)
(222,285,2)
(145,25,2)
(244,73,2)
(263,151,2)
(81,15,2)
(352,307,2)
(515,73,2)
(181,512,2)
(499,73,2)
(407,181,2)
(92,73,2)
(403,463,2)
(162,256,2)
(396,285,2)
(148,155,2)
(239,181,2)
(510,73,2)
(293,285,2)
(153,73,2)
(298,181,2)
(235,256,2)
(466,479,2)
(484,182,2)
(124,259,2)
(174,121,2)
(199,285,2)
(465,447,2)
(377,181,2)
(252,147,2)
(457,285,2)
(185,308,2)
(52,121,2)
(173,73,2)
(192,262,2)
(1,181,2)
(481,285,2)
(425,287,2)
(195,256,2)
(93,121,2)
(59,334,2)
(299,285,2)
(395,256,2)
(215,445,2)
(25,73,2)
(245,303,2)
(138,259,2)
(357,334,2)
(361,308,2)
(459,88,2)
(316,380,2)
(120,327,2)
(95,396,2)
(20,303,2)
(54,308,2)
(58,162,2)
(292,235,2)
(179,73,2)
(73,103,2)
(277,235,2)
(11,55,2)
(287,259,2)
(285,148,2)
(187,124,2)
(438,303,2)
(15,130,2)
(69,308,2)
(429,118,2)
(269,262,2)
(234,79,2)
(502,463,2)
(510,276,2)
(468,235,2)
(206,130,2)
(101,286,2)
(479,26,2)
(265,285,2)
(498,121,2)
(354,124,2)
(167,256,2)
(436,285,2)
(118,79,2)
(71,308,2)
(289,90,2)
(103,162,2)
(75,73,2)
(134,340,2)
(113,162,2)
(378,73,2)
(495,121,2)
(503,73,2)
(431,136,2)
(16,73,2)
(22,285,2)
(66,181,2)
(104,130,2)
(85,286,2)
(196,73,2)
(233,73,2)
(82,79,2)
(139,292,2)
(70,262,2)
(408,73,2)
(438,256,2)
(329,73,2)
(127,130,2)
(73,411,2)
(276,73,2)
(362,181,2)
(98,121,2)
(353,88,2)
(238,124,2)
(434,256,2)
(400,200,2)
(406,463,2)
(334,286,2)
(0,292,2)
(267,130,2)
(437,262,2)
(369,124,2)
(200,88,2)
(231,130,2)
(252,304,2)
(385,130,2)
(364,73,2)
(251,256,2)
(306,262,2)
(169,256,2)
(297,73,2)
(165,73,2)
(315,73,2)
(445,263,2)
(111,73,2)
(42,235,2)
(24,101,2)
(420,308,2)
(132,327,2)
(222,130,2)
(352,285,2)
(137,256,2)
(92,254,2)
(1,130,2)
(90,73,2)
(440,285,2)
(143,148,2)
(115,73,2)
(405,358,2)
(87,73,2)
(241,90,2)
(232,287,2)
(216,264,2)
(54,264,2)
(408,130,2)
(62,285,2)
(458,88,2)
(6,308,2)
(119,285,2)
(137,11,2)
(63,73,2)
(427,308,2)
(358,285,2)
(270,256,2)
(452,308,2)
(501,256,2)
(67,235,2)
(99,285,2)
(333,256,2)
(55,256,2)
(325,308,2)
(146,79,2)
(41,120,2)
(74,181,2)
(326,417,2)
(157,463,2)
(463,371,2)
(302,73,2)
(303,239,2)
(391,73,2)
(2,308,2)
(216,308,2)
(381,264,2)
(252,272,2)
(203,334,2)
(307,416,2)
(446,308,2)
(470,308,2)
(446,117,2)
(121,181,2)
(128,435,2)
(228,285,2)
(36,256,2)
(252,192,2)
(286,253,2)
(91,262,2)
(195,121,2)
(100,124,2)
(404,287,2)
(142,308,2)
(396,243,2)
(473,79,2)
(162,4,2)
(209,235,2)
(79,235,2)
(218,285,2)
(254,73,2)
(260,285,2)
(173,231,2)
(283,389,2)
(246,259,2)
(147,73,2)
(32,73,2)
(138,124,2)
(360,359,2)
(512,260,2)
(133,73,2)
(129,181,2)
(19,245,2)
(19,88,2)
(184,124,2)
(124,262,2)
(110,286,2)
(51,262,2)
(477,120,2)
(284,256,2)
(513,73,2)
(485,73,2)
(496,73,2)
(324,73,2)
(229,138,2)
(208,235,2)
(81,120,2)
(504,262,2)
(247,256,2)
(80,88,2)
(83,73,2)
(50,514,2)
(73,429,2)
(304,285,2)
(462,181,2)
(418,262,2)
(505,285,2)
(110,130,2)
(347,148,2)
(99,130,2)
(121,298,2)
(344,262,2)
(232,270,2)
(298,20,2)
(237,162,2)
(214,308,2)
(90,128,2)
(155,334,2)
(252,158,2)
(230,285,2)
(489,285,2)
(307,285,2)
(73,431,2)
(141,287,2)
(308,381,2)
(145,73,2)
(35,181,2)
(91,270,2)
(445,73,2)
(84,396,2)
(430,121,2)
(250,73,2)
(217,256,2)
(380,408,2)
(117,466,2)
(267,73,2)
(151,73,2)
(28,188,2)
(78,73,2)
(109,90,2)
(253,134,2)
(441,110,2)
(232,19,2)
(46,285,2)
(247,121,2)
(247,130,2)
(450,262,2)
(492,285,2)
(430,256,2)
(17,286,2)
(239,491,2)
(386,181,2)
(292,327,2)
(371,285,2)
(40,285,2)
(24,286,2)
(118,327,2)
(389,259,2)
(77,256,2)
(454,285,2)
(444,256,2)
(366,262,2)
(500,308,2)
(427,264,2)
(8,285,2)
(170,138,2)
(356,285,2)
(171,124,2)
(175,287,2)
(15,327,2)
(397,308,2)
(370,73,2)
(120,79,2)
(36,121,2)
(188,262,2)
(497,285,2)
(276,130,2)
(359,111,2)
(339,90,2)
(405,130,2)
(320,308,2)
(277,130,2)
(23,292,2)
(156,181,2)
(148,334,2)
(264,465,2)
(512,285,2)
(359,73,2)
(2,69,2)
(232,11,2)
(33,245,2)
(336,121,2)
(346,285,2)
(495,303,2)
(133,316,2)
(255,143,2)
(263,73,2)
(193,27,2)
(367,287,2)
(183,262,2)
(409,162,2)
(140,90,2)
(166,235,2)
(312,262,2)
(162,174,2)
(205,73,2)
(393,73,2)
(423,285,2)
(411,495,2)
(321,256,2)
(44,208,2)
(509,73,2)
(216,2,2)
(499,196,2)
(507,124,2)
(105,181,2)
(273,73,2)
(69,54,2)
(337,262,2)
(348,285,2)
(224,73,2)
(286,308,2)
(365,79,2)
(19,277,2)
(132,256,2)
(305,73,2)
(279,256,2)
(506,235,2)
(257,262,2)
(50,124,2)
(11,121,2)
(290,90,2)
(27,256,2)
(306,162,2)
(463,285,2)
(370,412,2)
(275,73,2)
(55,121,2)
(303,181,2)
(318,73,2)
(123,181,2)
(106,181,2)
(414,73,2)
(491,1,2)
(37,162,2)
(283,162,2)
(155,130,2)
(474,90,2)
(44,327,2)
(79,292,2)
(499,370,2)
(341,285,2)
(5,121,2)
(283,11,2)
(405,327,2)
(199,4,2)
(385,285,2)
(33,287,2)
(501,121,2)
(30,124,2)
(149,162,2)
(487,181,2)
(102,63,2)
(44,235,2)
(176,256,2)
(208,349,2)
(285,255,2)
(186,308,2)
(261,24,2)
(33,240,2)
(514,11,2)
(116,235,2)
(443,181,2)
(174,137,2)
(428,256,2)
(215,73,2)
(340,308,2)
(128,73,2)
(118,130,2)
(73,162,2)
(98,327,2)
(432,308,2)
(195,247,2)
(201,285,2)
(27,303,2)
(223,285,2)
(252,443,2)
(231,73,2)
(316,73,2)
(291,287,2)
(343,308,2)
(152,286,2)
(73,81,2)
(455,73,2)
(313,73,2)
(162,121,2)
(426,235,2)
(379,90,2)
(191,73,2)
(233,363,2)
(424,124,2)
(467,90,2)
(56,73,2)
(114,181,2)
(246,124,2)
(55,195,2)
(433,88,2)
(97,256,2)
(130,308,2)
(498,256,2)
(475,262,2)
(456,73,2)
(246,50,2)
(178,334,2)
(334,308,2)
(79,0,2)
-----------------------------------
(0,WLANDXE_CH_STAT_INT_ED_MASK & chHighStat)
(1,dxeCtxt->dxeChannel)
(2,&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(3,chLowStat)
(4,intSrc     = 0)
(5,status)
(6,WDTS_CHANNEL_RX_HIGH_PRI)
(7,chLowStat)
(8,dxeChannel)
(9,if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
(10,status     = eWLAN_PAL_STATUS_SUCCESS)
(11,channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(12,driverReloadInProcessing)
(13,eWLAN_PAL_STATUS_SUCCESS)
(14,)
(15,dxeRXFrameReady(dxeCtxt,\n\\n                                  channelCb,\n\\n                                  chHighStat)
(16,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig)
(17,extraConfig)
(18,msgContent->pContext)
(19,channelCb->rxDoneHistogram |= 1)
(20,channelCb->assignedDMAChannel)
(21,0)
(22,eWLAN_PAL_TRACE_LEVEL_WARN)
(23,WLANDXE_CH_STAT_INT_ED_MASK)
(24,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled)
(25,&regValue)
(26,wpt_msg *)
(27,channelCb->rxDoneHistogram)
(28,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,\n\\n               "RX LOW CH EVNT STAT 0x%x, %d frames handled", chLowStat, channelCb->numFragmentCurrentChain)
(29,NULL)
(30,chLowStat)
(31,)
(32,dxeCtxt)
(33,channelCb->rxDoneHistogram |= 1)
(34,)
(35,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_MED,\n\\n            "RX Event Handler INT Source 0x%x", intSrc)
(36,assignedDMAChannel)
(37,status)
(38,)
(39,chLowStat)
(40,tempDxeCtrlBlk)
(41,channelCb)
(42,dxeCtxt)
(43,intSrc)
(44,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,\n\\n                  "%11s : 0x%x Error Reported, Reload Driver",\n\\n                  channelType[channelCb->channelType], chHighStat)
(45,eWLAN_PAL_TRACE_LEVEL_INFO)
(46,hostPowerState)
(47,HDXE_ASSERT(0)
(48,)
(49,DXE_INTERRUPT_RX_READY)
(50,channelType[channelCb->channelType])
(51,channelCb)
(52,eWLAN_PAL_STATUS_SUCCESS)
(53,if(eWLAN_PAL_STATUS_SUCCESS != status)
(54,dxeCtxt->dxeChannel)
(55,&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(56,WLANDXE_CH_CTRL_EN_MASK)
(57,channelCb)
(58,eWLAN_PAL_STATUS_SUCCESS)
(59,"DXE already stopped in RX event handler. Just return")
(60,status)
(61,WDTS_CHANNEL_RX_LOW_PRI)
(62,status)
(63,!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
(64,)
(65,)
(66,WDTS_CHANNEL_RX_HIGH_PRI)
(67,chHighStat)
(68,return;)
(69,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(70,channelCb)
(71,dxeCtxt)
(72,channelType)
(73,eWLAN_PAL_STATUS_SUCCESS != status)
(74,eWLAN_PAL_TRACE_LEVEL_INFO_MED)
(75,channelRegister)
(76,0)
(77,dxeChannel)
(78,chan_mask)
(79,(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)
(80,~1)
(81,status = dxeRXFrameReady(dxeCtxt,\n\\n                                  channelCb,\n\\n                                  chHighStat)
(82,WLANDXE_CH_STAT_MASKED_MASK)
(83,status)
(84,"dxeRXEventHandler Pull from RX high channel fail")
(85,dxeCtxt)
(86,)
(87,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask)
(88,WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)
(89,intSrc)
(90,eWLAN_PAL_STATUS_SUCCESS != status)
(91,channelCb->rxDoneHistogram)
(92,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(93,dxeCtxt)
(94,chHighStat)
(95,eWLAN_MODULE_DAL_DATA)
(96,)
(97,chHighStat)
(98,&chHighStat)
(99,dxeRXFrameReady(dxeCtxt,\n\\n                               channelCb,\n\\n                               chLowStat)
(100,dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE)
(101,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig)
(102,0)
(103,status = dxeChannelCleanInt(channelCb, &chLowStat)
(104,dxeCtxt->dxeChannel)
(105,eWLAN_MODULE_DAL_DATA)
(106,eWLAN_PAL_TRACE_LEVEL_ERROR)
(107,dxeCtxt)
(108,chLowStat)
(109,__func__)
(110,dxeCtxt->dxeChannel)
(111,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
(112,dxeChannel)
(113,chLowStat)
(114,intSrc)
(115,chan_mask)
(116,eWLAN_PAL_TRUE)
(117,msgContent->pContext)
(118,dxeRXFrameReady(dxeCtxt,\n\\n                                  channelCb,\n\\n                                  chHighStat)
(119,status)
(120,WLANDXE_CH_STAT_MASKED_MASK & chHighStat)
(121,intSrc & (1 << channelCb->assignedDMAChannel)
(122,)
(123,channelCb)
(124,WLANDXE_CH_STAT_INT_ERR_MASK & chLowStat)
(125,regValue &= WLANDXE_RX_INTERRUPT_PRO_UNMASK)
(126,*channelCb  = NULL)
(127,dxeCtxt->dxeChannel)
(128,status = wpalEnableInterrupt(DXE_INTERRUPT_RX_READY)
(129,eWLAN_MODULE_DAL_DATA)
(130,dxeCtxt = (WLANDXE_CtrlBlkType *)
(131,msgContent)
(132,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO,\n\\n               "RX HIGH CH EVNT STAT 0x%x, %d frames handled", chHighStat, channelCb->numFragmentCurrentChain)
(133,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask)
(134,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig)
(135,driverReloadInProcessing)
(136,dxeRXFrameReady(dxeCtxt,\n\\n                                  channelCb,\n\\n                                  chLowStat)
(137,channelCb->assignedDMAChannel)
(138,WLANDXE_CH_STAT_INT_ED_MASK & chLowStat)
(139,chHighStat)
(140,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(141,rxDoneHistogram)
(142,dxeChannel)
(143,dxeCtxt->hostPowerState)
(144,if((WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState)
(145,wpalReadRegister(WLANDXE_INT_MASK_REG_ADDRESS, &regValue)
(146,chHighStat)
(147,return;)
(148,WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState)
(149,eWLAN_PAL_STATUS_SUCCESS)
(150,if(WLANDXE_CH_STAT_INT_DONE_MASK & chLowStat)
(151,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(152,chEnabled)
(153,status)
(154,0)
(155,dxeCtxt->hostPowerState)
(156,dxeCtxt)
(157,eWLAN_PAL_TRACE_LEVEL_ERROR)
(158,return;)
(159,1)
(160,channelCb)
(161,"%11s : 0x%x Error Reported, Reload Driver")
(162,intSrc & (1 << channelCb->assignedDMAChannel)
(163,chHighStat)
(164,eWLAN_MODULE_DAL_DATA)
(165,WDTS_CHANNEL_RX_LOW_PRI)
(166,chHighStat)
(167,eWLAN_PAL_TRACE_LEVEL_INFO)
(168,msgContent)
(169,numFragmentCurrentChain)
(170,channelCb)
(171,eWLAN_PAL_TRACE_LEVEL_FATAL)
(172,eWLAN_MODULE_DAL_DATA)
(173,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(174,1 << channelCb->assignedDMAChannel)
(175,rxDoneHistogram)
(176,channelCb)
(177,dxeCtxt)
(178,hostPowerState)
(179,dxeChannel)
(180,WLANDXE_CH_STAT_INT_DONE_MASK)
(181,eWLAN_PAL_STATUS_SUCCESS != status)
(182,channelCb->rxDoneHistogram << 1)
(183,eWLAN_PAL_TRACE_LEVEL_ERROR)
(184,eWLAN_PAL_TRUE)
(185,"RX Ready WLAN Driver re-loading in progress")
(186,extraConfig)
(187,wpalWlanReload()
(188,channelCb->numFragmentCurrentChain)
(189,status)
(190,if(intSrc & (1 << channelCb->assignedDMAChannel)
(191,dxeChannel)
(192,return;)
(193,channelCb->rxDoneHistogram << 1)
(194,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeRXEventHandler Pull from RX high channel fail")
(195,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(196,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask)
(197,"dxeRXEventHandler INT Clean up fail")
(198,if(eWLAN_PAL_STATUS_SUCCESS != status)
(199,&intSrc)
(200,channelCb->rxDoneHistogram)
(201,channelCb)
(202,eWLAN_PAL_TRACE_LEVEL_ERROR)
(203,WLANDXE_POWER_STATE_IMPS)
(204,eWLAN_PAL_STATUS_SUCCESS)
(205,regValue)
(206,dxeCtxt->dxeChannel)
(207,)
(208,channelType[channelCb->channelType])
(209,"%11s : 0x%x Error Reported, Reload Driver")
(210,return;)
(211,if(eWLAN_PAL_STATUS_SUCCESS != status)
(212,NULL)
(213,chLowStat)
(214,&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(215,wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister.chDXECtrlRegAddr,\n\\n                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask)
(216,dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(217,chHighStat)
(218,eWLAN_MODULE_DAL_DATA)
(219,WDTS_CHANNEL_RX_LOW_PRI)
(220,dxeCtxt)
(221,dxeChannel)
(222,dxeCtxt->dxeChannel)
(223,status)
(224,extraConfig)
(225,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_WARN,\n\\n         "%s Riva is in %d, Just Pull frames without any register touch ",\n\\n           __func__, dxeCtxt->hostPowerState)
(226,dxeCtxt)
(227,eWLAN_MODULE_DAL_DATA)
(228,chLowStat)
(229,chLowStat)
(230,dxeCtxt)
(231,dxeCtxt->dxeChannel)
(232,channelCb->rxDoneHistogram)
(233,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig)
(234,channelCb)
(235,WLANDXE_CH_STAT_INT_ERR_MASK & chHighStat)
(236,dxeChannel)
(237,channelCb)
(238,driverReloadInProcessing)
(239,&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(240,channelCb->rxDoneHistogram)
(241,"dxeRXEventHandler Enable RX Ready interrupt fail")
(242,eWLAN_PAL_TRACE_LEVEL_ERROR)
(243,status = dxeRXFrameReady(dxeCtxt,\n\\n                               channelCb,\n\\n                               chHighStat)
(244,WDTS_CHANNEL_RX_HIGH_PRI)
(245,channelCb->rxDoneHistogram)
(246,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_FATAL,\n\\n                  "%11s : 0x%x Error Reported, Reload Driver",\n\\n                  channelType[channelCb->channelType], chLowStat)
(247,dxeCtxt->dxeChannel)
(248,1)
(249,status)
(250,dxeChannel)
(251,1)
(252,RET)
(253,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled)
(254,dxeCtxt->dxeChannel)
(255,WLANDXE_POWER_STATE_DOWN == dxeCtxt->hostPowerState)
(256,eWLAN_PAL_STATUS_SUCCESS != status)
(257,chLowStat)
(258,status)
(259,chLowStat  = 0)
(260,wpalReadRegister(WLANDXE_INT_SRC_RAW_ADDRESS,\n\\n                             &intSrc)
(261,!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chEnabled)
(262,eWLAN_PAL_STATUS_SUCCESS != status)
(263,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister)
(264,dxeCtxt = (WLANDXE_CtrlBlkType *)
(265,WLANDXE_INT_SRC_RAW_ADDRESS)
(266,if(WLANDXE_CH_STAT_INT_ERR_MASK & chLowStat)
(267,dxeCtxt->dxeChannel)
(268,dxeCtxt)
(269,eWLAN_MODULE_DAL_DATA)
(270,channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1)
(271,channelCb->rxDoneHistogram)
(272,return;)
(273,eWLAN_MODULE_DAL_DATA)
(274,chHighStat)
(275,WDTS_CHANNEL_RX_LOW_PRI)
(276,dxeCtxt->dxeChannel)
(277,dxeCtxt->driverReloadInProcessing)
(278,dxeCtxt)
(279,"RX HIGH CH EVNT STAT 0x%x, %d frames handled")
(280,dxeChannel)
(281,)
(282,)
(283,dxeChannelCleanInt(channelCb, &chLowStat)
(284,intSrc)
(285,(WLANDXE_POWER_STATE_IMPS == dxeCtxt->hostPowerState)
(286,!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled)
(287,WLANDXE_CH_STAT_INT_DONE_MASK & chLowStat)
(288,msgContent)
(289,return;)
(290,eWLAN_MODULE_DAL_DATA)
(291,channelCb)
(292,WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)
(293,channelCb)
(294,pContext)
(295,dxeCtxt)
(296,channelCb)
(297,extraConfig)
(298,1 << channelCb->assignedDMAChannel)
(299,&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(300,dxeCtxt)
(301,if(intSrc & (1 << channelCb->assignedDMAChannel)
(302,chDXECtrlRegAddr)
(303,channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(304,return;)
(305,extraConfig)
(306,status)
(307,&dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(308,eWLAN_PAL_TRUE == dxeCtxt->driverReloadInProcessing)
(309,if(WLANDXE_CH_STAT_INT_DONE_MASK & chHighStat)
(310,if(!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
(311,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
(312,numFragmentCurrentChain)
(313,WLANDXE_RX_INTERRUPT_PRO_UNMASK)
(314,status)
(315,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig)
(316,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig)
(317,rxReadyMsg)
(318,dxeCtxt)
(319,channelType)
(320,WDTS_CHANNEL_RX_HIGH_PRI)
(321,chHighStat)
(322,channelCb)
(323,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeRXEventHandler Read INT_SRC register fail")
(324,extraConfig)
(325,eWLAN_MODULE_DAL_DATA)
(326,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(327,chHighStat = 0)
(328,WLANDXE_CH_CTRL_EN_MASK)
(329,dxeChannel)
(330,dxeCtxt)
(331,msgContent)
(332,)
(333,eWLAN_PAL_TRACE_LEVEL_ERROR)
(334,(!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled)
(335,if(eWLAN_PAL_STATUS_SUCCESS != status)
(336,channelCb)
(337,channelCb)
(338,)
(339,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeRXEventHandler Enable RX Ready interrupt fail")
(340,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(341,WDTS_CHANNEL_RX_HIGH_PRI)
(342,*dxeCtxt    = NULL)
(343,dxeChannel)
(344,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeRXEventHandler INT Clean up fail")
(345,if(WLANDXE_CH_STAT_INT_ERR_MASK & chHighStat)
(346,channelCb)
(347,dxeCtxt)
(348,dxeCtxt)
(349,channelCb->channelType)
(350,status)
(351,)
(352,channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(353,channelCb)
(354,eWLAN_MODULE_DAL_DATA)
(355,"RX LOW CH EVNT STAT 0x%x, %d frames handled")
(356,eWLAN_PAL_TRUE)
(357,eWLAN_MODULE_DAL_DATA)
(358,channelCb = &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(359,!(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask & WLANDXE_CH_CTRL_EN_MASK)
(360,0)
(361,dxeCtxt)
(362,channelCb)
(363,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(364,channelRegister)
(365,chHighStat)
(366,WLANDXE_CH_STAT_INT_ERR_MASK)
(367,channelCb)
(368,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n         "DXE already stopped in RX event handler. Just return")
(369,WLANDXE_CH_STAT_INT_ED_MASK)
(370,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister.chDXECtrlRegAddr)
(371,status = dxeRXFrameReady(dxeCtxt,\n\\n                               channelCb,\n\\n                               chLowStat)
(372,status)
(373,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeRXEventHandler INT Clean up fail")
(374,chHighStat)
(375,wpt_msg                 *rxReadyMsg)
(376,)
(377,assignedDMAChannel)
(378,dxeCtxt)
(379,eWLAN_PAL_TRACE_LEVEL_ERROR)
(380,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(381,dxeCtxt->driverReloadInProcessing)
(382,)
(383,regValue)
(384,dxeCtxt)
(385,dxeCtxt->hostPowerState)
(386,"dxeRXEventHandler Read INT_SRC register fail")
(387,intSrc)
(388,chan_mask)
(389,&chLowStat)
(390,WDTS_CHANNEL_RX_HIGH_PRI)
(391,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chan_mask)
(392,if(eWLAN_PAL_STATUS_SUCCESS != status)
(393,regValue)
(394,dxeCtxt)
(395,channelCb)
(396,eWLAN_PAL_STATUS_SUCCESS != status)
(397,WDTS_CHANNEL_RX_LOW_PRI)
(398,if(eWLAN_PAL_STATUS_SUCCESS != status)
(399,eWLAN_PAL_STATUS_SUCCESS)
(400,channelCb->rxDoneHistogram &= ~1)
(401,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "%s Exit", __func__)
(402,channelCb->rxDoneHistogram &= ~1)
(403,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeRXEventHandler Pull from RX low channel fail")
(404,1)
(405,dxeRXFrameReady(dxeCtxt,\n\\n                               channelCb,\n\\n                               chHighStat)
(406,eWLAN_MODULE_DAL_DATA)
(407,1)
(408,dxeCtxt->dxeChannel)
(409,status)
(410,eWLAN_PAL_TRACE_LEVEL_FATAL)
(411,status = dxeChannelCleanInt(channelCb, &chHighStat)
(412,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister)
(413,)
(414,eWLAN_PAL_TRACE_LEVEL_ERROR)
(415,WLANDXE_CtrlBlkType *)
(416,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(417,dxeCtxt->dxeChannel)
(418,rxDoneHistogram)
(419,WDTS_CHANNEL_RX_LOW_PRI)
(420,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "RX Ready WLAN Driver re-loading in progress")
(421,dxeChannel)
(422,channelCb)
(423,eWLAN_PAL_STATUS_SUCCESS)
(424,dxeCtxt->driverReloadInProcessing)
(425,~1)
(426,dxeCtxt->driverReloadInProcessing = eWLAN_PAL_TRUE)
(427,dxeRXFrameRefillRing(dxeCtxt, &dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(428,WLANDXE_CH_STAT_INT_ERR_MASK)
(429,status = dxeRXFrameReady(dxeCtxt,\n\\n                                  channelCb,\n\\n                                  chHighStat)
(430,1)
(431,status = dxeRXFrameReady(dxeCtxt,\n\\n                                  channelCb,\n\\n                                  chLowStat)
(432,eWLAN_PAL_TRACE_LEVEL_ERROR)
(433,channelCb)
(434,eWLAN_MODULE_DAL_DATA)
(435,wpalEnableInterrupt(DXE_INTERRUPT_RX_READY)
(436,tempDxeCtrlBlk->rxIntDisabledByIMPS = eWLAN_PAL_TRUE)
(437,"dxeRXEventHandler INT Clean up fail")
(438,channelCb->numFragmentCurrentChain)
(439,"dxeRXEventHandler Handle Frame Ready Fail")
(440,eWLAN_PAL_STATUS_SUCCESS)
(441,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI])
(442,WLANDXE_POWER_STATE_DOWN)
(443,return;)
(444,rxDoneHistogram)
(445,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].channelRegister.chDXECtrlRegAddr)
(446,(WLANDXE_CtrlBlkType *)
(447,WLANDXE_CtrlBlkType *)
(448,pContext)
(449,channelCb)
(450,WLANDXE_CH_STAT_INT_DONE_MASK)
(451,HDXE_ASSERT(0)
(452,chEnabled)
(453,dxeCtxt)
(454,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(455,WLANDXE_INT_MASK_REG_ADDRESS)
(456,dxeCtxt)
(457,dxeCtxt)
(458,rxDoneHistogram)
(459,rxDoneHistogram)
(460,WLANDXE_CH_STAT_INT_DONE_MASK)
(461,if(eWLAN_PAL_TRUE == dxeCtxt->driverReloadInProcessing)
(462,"RX Event Handler INT Source 0x%x")
(463,eWLAN_PAL_STATUS_SUCCESS != status)
(464,eWLAN_PAL_TRUE)
(465,(WLANDXE_CtrlBlkType *)
(466,*msgContent = (wpt_msg *)
(467,"%s Exit")
(468,channelType)
(469,status)
(470,dxeCtxt)
(471,hostPowerState)
(472,__func__)
(473,dxeCtxt)
(474,eWLAN_MODULE_DAL_DATA)
(475,rxDoneHistogram)
(476,)
(477,chHighStat)
(478,)
(479,(wpt_msg *)
(480,status)
(481,"%s Riva is in %d, Just Pull frames without any register touch ")
(482,if((!dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI].extraConfig.chEnabled)
(483,channelCb)
(484,channelCb->rxDoneHistogram = (channelCb->rxDoneHistogram << 1)
(485,chan_mask)
(486,)
(487,dxeChannel)
(488,regValue)
(489,dxeCtxt)
(490,if(eWLAN_PAL_STATUS_SUCCESS != status)
(491,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(492,intSrc)
(493,)
(494,rxDoneHistogram)
(495,dxeChannelCleanInt(channelCb, &chHighStat)
(496,WDTS_CHANNEL_RX_HIGH_PRI)
(497,tempDxeCtrlBlk->rxIntDisabledByIMPS)
(498,WDTS_CHANNEL_RX_LOW_PRI)
(499,wpalWriteRegister(dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].channelRegister.chDXECtrlRegAddr,\n\\n                     dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_LOW_PRI].extraConfig.chan_mask)
(500,dxeCtxt)
(501,channelCb)
(502,"dxeRXEventHandler Pull from RX low channel fail")
(503,wpalWriteRegister(WLANDXE_INT_MASK_REG_ADDRESS, regValue)
(504,channelCb->rxDoneHistogram)
(505,rxIntDisabledByIMPS)
(506,wpalWlanReload()
(507,channelType)
(508,dxeCtxt)
(509,WLANDXE_INT_MASK_REG_ADDRESS)
(510,dxeCtxt->dxeChannel[WDTS_CHANNEL_RX_HIGH_PRI])
(511,)
(512,status = wpalReadRegister(WLANDXE_INT_SRC_RAW_ADDRESS,\n\\n                             &intSrc)
(513,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeRXEventHandler Handle Frame Ready Fail")
(514,channelCb->channelType)
(515,chDXECtrlRegAddr)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^