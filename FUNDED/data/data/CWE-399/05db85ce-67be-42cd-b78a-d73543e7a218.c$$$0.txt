-----label-----
1
-----code-----
int be_cmd_get_profile_config(struct be_adapter *adapter,
			      struct be_resources *res, u8 query, u8 domain)
{
	struct be_cmd_resp_get_profile_config *resp;
	struct be_cmd_req_get_profile_config *req;
	struct be_nic_res_desc *vf_res;
	struct be_pcie_res_desc *pcie;
	struct be_port_res_desc *port;
	struct be_nic_res_desc *nic;
	struct be_mcc_wrb wrb = {0};
	struct be_dma_mem cmd;
	u16 desc_count;
	int status;

	memset(&cmd, 0, sizeof(struct be_dma_mem));
	cmd.size = sizeof(struct be_cmd_resp_get_profile_config);
	cmd.va = dma_zalloc_coherent(&adapter->pdev->dev, cmd.size, &cmd.dma,
				     GFP_ATOMIC);
	if (!cmd.va)
		return -ENOMEM;

	req = cmd.va;
	be_wrb_cmd_hdr_prepare(&req->hdr, CMD_SUBSYSTEM_COMMON,
			       OPCODE_COMMON_GET_PROFILE_CONFIG,
			       cmd.size, &wrb, &cmd);

	req->hdr.domain = domain;
	if (!lancer_chip(adapter))
		req->hdr.version = 1;
	req->type = ACTIVE_PROFILE_TYPE;

	/* When QUERY_MODIFIABLE_FIELDS_TYPE bit is set, cmd returns the
	 * descriptors with all bits set to "1" for the fields which can be
	 * modified using SET_PROFILE_CONFIG cmd.
	 */
	if (query == RESOURCE_MODIFIABLE)
		req->type |= QUERY_MODIFIABLE_FIELDS_TYPE;

	status = be_cmd_notify_wait(adapter, &wrb);
	if (status)
		goto err;

	resp = cmd.va;
	desc_count = le16_to_cpu(resp->desc_count);

	pcie = be_get_pcie_desc(adapter->pdev->devfn, resp->func_param,
				desc_count);
	if (pcie)
		res->max_vfs = le16_to_cpu(pcie->num_vfs);

	port = be_get_port_desc(resp->func_param, desc_count);
	if (port)
		adapter->mc_type = port->mc_type;

	nic = be_get_func_nic_desc(resp->func_param, desc_count);
	if (nic)
		be_copy_nic_desc(res, nic);

	vf_res = be_get_vft_desc(resp->func_param, desc_count);
	if (vf_res)
		res->vf_if_cap_flags = vf_res->cap_flags;
err:
	if (cmd.va)
		dma_free_coherent(&adapter->pdev->dev, cmd.size, cmd.va,
				  cmd.dma);
	return status;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
18,19
20,21
22,23
22,24
23,24
25,26
27,28
27,29
27,30
27,31
27,32
27,33
27,34
27,35
27,36
27,37
27,38
27,39
27,40
27,41
27,42
27,43
27,44
27,45
27,46
27,47
27,48
27,49
27,50
27,51
27,52
27,53
27,54
27,55
27,56
27,57
27,58
27,59
27,60
27,61
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
53,55
56,57
57,58
57,59
58,59
60,61
60,62
63,64
64,65
64,66
65,66
67,68
67,69
70,71
71,72
71,73
72,73
74,75
74,76
76,77
77,78
79,80
80,81
80,82
81,82
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
94,95
96,97
97,98
97,99
97,100
97,101
98,99
100,101
101,102
104,105
105,106
105,107
106,107
109,110
110,111
110,112
111,112
111,113
112,113
115,116
116,117
116,118
117,118
120,121
121,122
121,123
122,123
122,124
123,124
126,127
126,128
126,129
126,130
126,131
127,128
129,130
130,131
130,132
131,132
131,133
132,133
136,137
136,138
137,138
140,141
141,142
141,143
142,143
145,146
147,148
147,149
148,149
149,150
149,151
150,151
153,154
154,155
155,156
157,158
158,159
158,160
159,160
161,162
161,163
162,163
165,166
166,167
166,168
166,169
166,170
166,171
166,172
166,173
167,168
169,170
170,171
170,172
171,172
174,175
176,177
178,179
178,180
179,180
182,183
183,184
185,186
186,187
188,189
189,190
189,191
190,191
190,192
191,192
191,193
192,193
196,197
198,199
198,200
199,200
200,201
200,202
201,202
203,204
205,206
206,207
206,208
207,208
207,209
208,209
208,210
209,210
214,215
215,216
215,217
216,217
216,218
217,218
220,221
222,223
222,224
223,224
223,225
224,225
226,227
228,229
229,230
229,231
230,231
230,232
231,232
234,235
236,237
237,238
237,239
238,239
240,241
240,242
240,243
241,242
243,244
245,246
246,247
248,249
248,250
249,250
251,252
253,254
254,255
254,256
255,256
257,258
257,259
258,259
261,262
262,263
262,264
263,264
265,266
265,267
266,267
268,269
268,270
269,270
272,273
273,274
273,275
274,275
276,277
276,278
276,279
276,280
277,278
279,280
279,281
280,281
280,282
281,282
285,286
285,287
286,287
289,290
291,292
291,293
292,293
294,295
295,296
295,297
296,297
296,298
297,298
300,301
300,302
301,302
303,304
303,305
304,305
307,308
308,309
308,310
309,310
311,312
311,313
311,314
312,313
314,315
314,316
315,316
318,319
320,321
320,322
321,322
323,324
324,325
324,326
325,326
325,327
326,327
329,330
329,331
330,331
333,334
334,335
334,336
335,336
337,338
337,339
337,340
338,339
340,341
340,342
341,342
344,345
346,347
346,348
347,348
349,350
350,351
350,352
350,353
351,352
353,354
355,356
357,358
358,359
358,360
359,360
361,362
361,363
361,364
362,363
364,365
364,366
365,366
368,369
370,371
370,372
371,372
373,374
374,375
374,376
375,376
375,377
376,377
379,380
379,381
380,381
383,384
383,385
385,386
385,387
386,387
386,388
387,388
390,391
391,392
391,393
391,394
391,395
391,396
392,393
394,395
395,396
395,397
396,397
396,398
397,398
401,402
401,403
402,403
405,406
405,407
406,407
409,410
409,411
410,411
413,414
414,415
-----nextToken-----
2,4,7,9,10,13,15,16,19,21,24,26,31,33,34,38,40,41,45,47,48,52,54,55,59,61,62,66,68,69,73,75,78,82,84,88,90,93,95,99,102,103,107,108,113,114,118,119,124,125,128,133,134,135,138,139,143,144,146,151,152,156,160,163,164,168,172,173,175,177,180,181,184,187,193,194,195,197,202,204,210,211,212,213,218,219,221,225,227,232,233,235,239,242,244,247,250,252,256,259,260,264,267,270,271,275,278,282,283,284,287,288,290,293,298,299,302,305,306,310,313,316,317,319,322,327,328,331,332,336,339,342,343,345,348,352,354,356,360,363,366,367,369,372,377,378,381,382,384,388,389,393,398,399,400,403,404,407,408,411,412,415
-----computeFrom-----
110,111
110,112
121,122
121,123
158,159
158,160
189,190
189,191
206,207
206,208
215,216
215,217
223,224
223,225
229,230
229,231
237,238
237,239
254,255
254,256
262,263
262,264
273,274
273,275
295,296
295,297
308,309
308,310
324,325
324,326
334,335
334,336
358,359
358,360
374,375
374,376
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;InitializerList;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int be_cmd_get_profile_config(struct be_adapter *adapter,			      struct be_resources *res, u8 query, u8 domain){	struct be_cmd_resp_get_profile_config *resp;	struct be_cmd_req_get_profile_config *req;	struct be_nic_res_desc *vf_res;	struct be_pcie_res_desc *pcie;	struct be_port_res_desc *port;	struct be_nic_res_desc *nic;	struct be_mcc_wrb wrb = {0};	struct be_dma_mem cmd;	u16 desc_count;	int status;	memset(&cmd, 0, sizeof(struct be_dma_mem));	cmd.size = sizeof(struct be_cmd_resp_get_profile_config);	cmd.va = dma_zalloc_coherent(&adapter->pdev->dev, cmd.size, &cmd.dma,				     GFP_ATOMIC);	if (!cmd.va)		return -ENOMEM;	req = cmd.va;	be_wrb_cmd_hdr_prepare(&req->hdr, CMD_SUBSYSTEM_COMMON,			       OPCODE_COMMON_GET_PROFILE_CONFIG,			       cmd.size, &wrb, &cmd);	req->hdr.domain = domain;	if (!lancer_chip(adapter))		req->hdr.version = 1;	req->type = ACTIVE_PROFILE_TYPE;	/* When QUERY_MODIFIABLE_FIELDS_TYPE bit is set, cmd returns the	 * descriptors with all bits set to "1" for the fields which can be	 * modified using SET_PROFILE_CONFIG cmd.	 */	if (query == RESOURCE_MODIFIABLE)		req->type |= QUERY_MODIFIABLE_FIELDS_TYPE;	status = be_cmd_notify_wait(adapter, &wrb);	if (status)		goto err;	resp = cmd.va;	desc_count = le16_to_cpu(resp->desc_count);	pcie = be_get_pcie_desc(adapter->pdev->devfn, resp->func_param,				desc_count);	if (pcie)		res->max_vfs = le16_to_cpu(pcie->num_vfs);	port = be_get_port_desc(resp->func_param, desc_count);	if (port)		adapter->mc_type = port->mc_type;	nic = be_get_func_nic_desc(resp->func_param, desc_count);	if (nic)		be_copy_nic_desc(res, nic);	vf_res = be_get_vft_desc(resp->func_param, desc_count);	if (vf_res)		res->vf_if_cap_flags = vf_res->cap_flags;err:	if (cmd.va)		dma_free_coherent(&adapter->pdev->dev, cmd.size, cmd.va,				  cmd.dma);	return status;}
int
be_cmd_get_profile_config(struct be_adapter *adapter,			      struct be_resources *res, u8 query, u8 domain)
be_cmd_get_profile_config
struct be_adapter *adapter
struct be_adapter
be_adapter
*adapter
*
adapter
struct be_resources *res
struct be_resources
be_resources
*res
*
res
u8 query
u8
u8
query
query
u8 domain
u8
u8
domain
domain
{	struct be_cmd_resp_get_profile_config *resp;	struct be_cmd_req_get_profile_config *req;	struct be_nic_res_desc *vf_res;	struct be_pcie_res_desc *pcie;	struct be_port_res_desc *port;	struct be_nic_res_desc *nic;	struct be_mcc_wrb wrb = {0};	struct be_dma_mem cmd;	u16 desc_count;	int status;	memset(&cmd, 0, sizeof(struct be_dma_mem));	cmd.size = sizeof(struct be_cmd_resp_get_profile_config);	cmd.va = dma_zalloc_coherent(&adapter->pdev->dev, cmd.size, &cmd.dma,				     GFP_ATOMIC);	if (!cmd.va)		return -ENOMEM;	req = cmd.va;	be_wrb_cmd_hdr_prepare(&req->hdr, CMD_SUBSYSTEM_COMMON,			       OPCODE_COMMON_GET_PROFILE_CONFIG,			       cmd.size, &wrb, &cmd);	req->hdr.domain = domain;	if (!lancer_chip(adapter))		req->hdr.version = 1;	req->type = ACTIVE_PROFILE_TYPE;	/* When QUERY_MODIFIABLE_FIELDS_TYPE bit is set, cmd returns the	 * descriptors with all bits set to "1" for the fields which can be	 * modified using SET_PROFILE_CONFIG cmd.	 */	if (query == RESOURCE_MODIFIABLE)		req->type |= QUERY_MODIFIABLE_FIELDS_TYPE;	status = be_cmd_notify_wait(adapter, &wrb);	if (status)		goto err;	resp = cmd.va;	desc_count = le16_to_cpu(resp->desc_count);	pcie = be_get_pcie_desc(adapter->pdev->devfn, resp->func_param,				desc_count);	if (pcie)		res->max_vfs = le16_to_cpu(pcie->num_vfs);	port = be_get_port_desc(resp->func_param, desc_count);	if (port)		adapter->mc_type = port->mc_type;	nic = be_get_func_nic_desc(resp->func_param, desc_count);	if (nic)		be_copy_nic_desc(res, nic);	vf_res = be_get_vft_desc(resp->func_param, desc_count);	if (vf_res)		res->vf_if_cap_flags = vf_res->cap_flags;err:	if (cmd.va)		dma_free_coherent(&adapter->pdev->dev, cmd.size, cmd.va,				  cmd.dma);	return status;}
struct be_cmd_resp_get_profile_config *resp;
struct be_cmd_resp_get_profile_config *resp;
struct be_cmd_resp_get_profile_config
be_cmd_resp_get_profile_config
*resp
*
resp
struct be_cmd_req_get_profile_config *req;
struct be_cmd_req_get_profile_config *req;
struct be_cmd_req_get_profile_config
be_cmd_req_get_profile_config
*req
*
req
struct be_nic_res_desc *vf_res;
struct be_nic_res_desc *vf_res;
struct be_nic_res_desc
be_nic_res_desc
*vf_res
*
vf_res
struct be_pcie_res_desc *pcie;
struct be_pcie_res_desc *pcie;
struct be_pcie_res_desc
be_pcie_res_desc
*pcie
*
pcie
struct be_port_res_desc *port;
struct be_port_res_desc *port;
struct be_port_res_desc
be_port_res_desc
*port
*
port
struct be_nic_res_desc *nic;
struct be_nic_res_desc *nic;
struct be_nic_res_desc
be_nic_res_desc
*nic
*
nic
struct be_mcc_wrb wrb = {0};
struct be_mcc_wrb wrb = {0};
struct be_mcc_wrb
be_mcc_wrb
wrb = {0}
wrb
= {0}
{0}
0
struct be_dma_mem cmd;
struct be_dma_mem cmd;
struct be_dma_mem
be_dma_mem
cmd
cmd
u16 desc_count;
u16 desc_count;
u16
u16
desc_count
desc_count
int status;
int status;
int
status
status
memset(&cmd, 0, sizeof(struct be_dma_mem));
memset(&cmd, 0, sizeof(struct be_dma_mem))
memset
memset
&cmd
cmd
cmd
0
sizeof(struct be_dma_mem)
struct be_dma_mem
struct be_dma_mem
be_dma_mem

cmd.size = sizeof(struct be_cmd_resp_get_profile_config);
cmd.size = sizeof(struct be_cmd_resp_get_profile_config)
cmd.size
cmd
cmd
size
sizeof(struct be_cmd_resp_get_profile_config)
struct be_cmd_resp_get_profile_config
struct be_cmd_resp_get_profile_config
be_cmd_resp_get_profile_config

cmd.va = dma_zalloc_coherent(&adapter->pdev->dev, cmd.size, &cmd.dma,				     GFP_ATOMIC);
cmd.va = dma_zalloc_coherent(&adapter->pdev->dev, cmd.size, &cmd.dma,				     GFP_ATOMIC)
cmd.va
cmd
cmd
va
dma_zalloc_coherent(&adapter->pdev->dev, cmd.size, &cmd.dma,				     GFP_ATOMIC)
dma_zalloc_coherent
dma_zalloc_coherent
&adapter->pdev->dev
adapter->pdev->dev
adapter->pdev
adapter
adapter
pdev
dev
cmd.size
cmd
cmd
size
&cmd.dma
cmd.dma
cmd
cmd
dma
GFP_ATOMIC
GFP_ATOMIC
if (!cmd.va)		return -ENOMEM;
!cmd.va
cmd.va
cmd
cmd
va
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
req = cmd.va;
req = cmd.va
req
req
cmd.va
cmd
cmd
va
be_wrb_cmd_hdr_prepare(&req->hdr, CMD_SUBSYSTEM_COMMON,			       OPCODE_COMMON_GET_PROFILE_CONFIG,			       cmd.size, &wrb, &cmd);
be_wrb_cmd_hdr_prepare(&req->hdr, CMD_SUBSYSTEM_COMMON,			       OPCODE_COMMON_GET_PROFILE_CONFIG,			       cmd.size, &wrb, &cmd)
be_wrb_cmd_hdr_prepare
be_wrb_cmd_hdr_prepare
&req->hdr
req->hdr
req
req
hdr
CMD_SUBSYSTEM_COMMON
CMD_SUBSYSTEM_COMMON
OPCODE_COMMON_GET_PROFILE_CONFIG
OPCODE_COMMON_GET_PROFILE_CONFIG
cmd.size
cmd
cmd
size
&wrb
wrb
wrb
&cmd
cmd
cmd
req->hdr.domain = domain;
req->hdr.domain = domain
req->hdr.domain
req->hdr
req
req
hdr
domain
domain
domain
if (!lancer_chip(adapter))		req->hdr.version = 1;
!lancer_chip(adapter)
lancer_chip(adapter)
lancer_chip
lancer_chip
adapter
adapter
req->hdr.version = 1;
req->hdr.version = 1
req->hdr.version
req->hdr
req
req
hdr
version
1
req->type = ACTIVE_PROFILE_TYPE;
req->type = ACTIVE_PROFILE_TYPE
req->type
req
req
type
ACTIVE_PROFILE_TYPE
ACTIVE_PROFILE_TYPE
if (query == RESOURCE_MODIFIABLE)		req->type |= QUERY_MODIFIABLE_FIELDS_TYPE;
query == RESOURCE_MODIFIABLE
query
query
RESOURCE_MODIFIABLE
RESOURCE_MODIFIABLE
req->type |= QUERY_MODIFIABLE_FIELDS_TYPE;
req->type |= QUERY_MODIFIABLE_FIELDS_TYPE
req->type
req
req
type
QUERY_MODIFIABLE_FIELDS_TYPE
QUERY_MODIFIABLE_FIELDS_TYPE
status = be_cmd_notify_wait(adapter, &wrb);
status = be_cmd_notify_wait(adapter, &wrb)
status
status
be_cmd_notify_wait(adapter, &wrb)
be_cmd_notify_wait
be_cmd_notify_wait
adapter
adapter
&wrb
wrb
wrb
if (status)		goto err;
status
status
goto err;
err
resp = cmd.va;
resp = cmd.va
resp
resp
cmd.va
cmd
cmd
va
desc_count = le16_to_cpu(resp->desc_count);
desc_count = le16_to_cpu(resp->desc_count)
desc_count
desc_count
le16_to_cpu(resp->desc_count)
le16_to_cpu
le16_to_cpu
resp->desc_count
resp
resp
desc_count
pcie = be_get_pcie_desc(adapter->pdev->devfn, resp->func_param,				desc_count);
pcie = be_get_pcie_desc(adapter->pdev->devfn, resp->func_param,				desc_count)
pcie
pcie
be_get_pcie_desc(adapter->pdev->devfn, resp->func_param,				desc_count)
be_get_pcie_desc
be_get_pcie_desc
adapter->pdev->devfn
adapter->pdev
adapter
adapter
pdev
devfn
resp->func_param
resp
resp
func_param
desc_count
desc_count
if (pcie)		res->max_vfs = le16_to_cpu(pcie->num_vfs);
pcie
pcie
res->max_vfs = le16_to_cpu(pcie->num_vfs);
res->max_vfs = le16_to_cpu(pcie->num_vfs)
res->max_vfs
res
res
max_vfs
le16_to_cpu(pcie->num_vfs)
le16_to_cpu
le16_to_cpu
pcie->num_vfs
pcie
pcie
num_vfs
port = be_get_port_desc(resp->func_param, desc_count);
port = be_get_port_desc(resp->func_param, desc_count)
port
port
be_get_port_desc(resp->func_param, desc_count)
be_get_port_desc
be_get_port_desc
resp->func_param
resp
resp
func_param
desc_count
desc_count
if (port)		adapter->mc_type = port->mc_type;
port
port
adapter->mc_type = port->mc_type;
adapter->mc_type = port->mc_type
adapter->mc_type
adapter
adapter
mc_type
port->mc_type
port
port
mc_type
nic = be_get_func_nic_desc(resp->func_param, desc_count);
nic = be_get_func_nic_desc(resp->func_param, desc_count)
nic
nic
be_get_func_nic_desc(resp->func_param, desc_count)
be_get_func_nic_desc
be_get_func_nic_desc
resp->func_param
resp
resp
func_param
desc_count
desc_count
if (nic)		be_copy_nic_desc(res, nic);
nic
nic
be_copy_nic_desc(res, nic);
be_copy_nic_desc(res, nic)
be_copy_nic_desc
be_copy_nic_desc
res
res
nic
nic
vf_res = be_get_vft_desc(resp->func_param, desc_count);
vf_res = be_get_vft_desc(resp->func_param, desc_count)
vf_res
vf_res
be_get_vft_desc(resp->func_param, desc_count)
be_get_vft_desc
be_get_vft_desc
resp->func_param
resp
resp
func_param
desc_count
desc_count
if (vf_res)		res->vf_if_cap_flags = vf_res->cap_flags;
vf_res
vf_res
res->vf_if_cap_flags = vf_res->cap_flags;
res->vf_if_cap_flags = vf_res->cap_flags
res->vf_if_cap_flags
res
res
vf_if_cap_flags
vf_res->cap_flags
vf_res
vf_res
cap_flags
err:	if (cmd.va)		dma_free_coherent(&adapter->pdev->dev, cmd.size, cmd.va,				  cmd.dma);
err
if (cmd.va)		dma_free_coherent(&adapter->pdev->dev, cmd.size, cmd.va,				  cmd.dma);
cmd.va
cmd
cmd
va
dma_free_coherent(&adapter->pdev->dev, cmd.size, cmd.va,				  cmd.dma);
dma_free_coherent(&adapter->pdev->dev, cmd.size, cmd.va,				  cmd.dma)
dma_free_coherent
dma_free_coherent
&adapter->pdev->dev
adapter->pdev->dev
adapter->pdev
adapter
adapter
pdev
dev
cmd.size
cmd
cmd
size
cmd.va
cmd
cmd
va
cmd.dma
cmd
cmd
dma
return status;
status
status
-----joern-----
(165,38,0)
(118,56,0)
(163,111,0)
(150,6,0)
(214,7,0)
(137,175,0)
(211,150,0)
(182,95,0)
(156,145,0)
(184,145,0)
(43,58,0)
(52,35,0)
(168,174,0)
(19,73,0)
(167,104,0)
(62,7,0)
(98,66,0)
(140,116,0)
(8,64,0)
(169,160,0)
(117,7,0)
(55,213,0)
(103,99,0)
(17,213,0)
(208,25,0)
(14,161,0)
(35,161,0)
(199,7,0)
(159,7,0)
(174,111,0)
(146,201,0)
(111,163,0)
(190,154,0)
(92,184,0)
(151,101,0)
(65,55,0)
(210,70,0)
(213,7,0)
(54,132,0)
(200,126,0)
(176,24,0)
(56,25,0)
(133,139,0)
(148,7,0)
(201,182,0)
(89,83,0)
(128,20,0)
(89,70,0)
(20,128,0)
(5,7,0)
(11,7,0)
(84,207,0)
(144,150,0)
(95,182,0)
(155,7,0)
(49,177,0)
(130,54,0)
(152,197,0)
(4,7,0)
(66,53,0)
(78,194,0)
(21,216,0)
(160,8,0)
(86,187,0)
(161,118,0)
(180,163,0)
(119,187,0)
(110,8,0)
(185,216,0)
(59,94,0)
(128,161,0)
(161,7,0)
(82,149,0)
(83,7,0)
(66,155,0)
(59,118,0)
(123,175,0)
(150,7,0)
(154,7,0)
(201,7,0)
(171,132,0)
(52,24,0)
(73,111,0)
(213,88,0)
(127,201,0)
(94,99,0)
(155,66,0)
(204,169,0)
(104,167,0)
(82,83,0)
(24,111,0)
(194,111,0)
(199,63,0)
(96,7,0)
(6,16,0)
(104,119,0)
(55,195,0)
(162,118,0)
(83,89,0)
(66,150,0)
(179,194,0)
(45,98,0)
(143,175,0)
(215,95,0)
(135,86,0)
(32,79,0)
(179,184,0)
(91,144,0)
(171,152,0)
(73,118,0)
(80,70,0)
(16,6,0)
(205,137,0)
(143,184,0)
(79,213,0)
(26,66,0)
(101,132,0)
(136,169,0)
(63,199,0)
(118,59,0)
(125,154,0)
(201,97,0)
(72,52,0)
(179,49,0)
(8,160,0)
(124,131,0)
(120,83,0)
(53,66,0)
(197,37,0)
(51,199,0)
(6,150,0)
(174,201,0)
(46,55,0)
(144,131,0)
(0,97,0)
(191,95,0)
(14,175,0)
(109,119,0)
(149,82,0)
(122,7,0)
(144,79,0)
(24,52,0)
(108,16,0)
(64,195,0)
(52,72,0)
(38,187,0)
(70,213,0)
(52,167,0)
(138,98,0)
(35,52,0)
(197,152,0)
(22,90,0)
(54,149,0)
(10,133,0)
(16,213,0)
(163,180,0)
(184,143,0)
(101,131,0)
(105,178,0)
(74,207,0)
(68,171,0)
(100,7,0)
(15,44,0)
(97,154,0)
(76,53,0)
(47,82,0)
(61,7,0)
(139,194,0)
(115,195,0)
(38,44,0)
(71,199,0)
(22,139,0)
(63,18,0)
(37,155,0)
(29,188,0)
(23,125,0)
(125,38,0)
(181,104,0)
(99,94,0)
(178,7,0)
(87,35,0)
(157,201,0)
(88,213,0)
(79,144,0)
(1,7,0)
(3,16,0)
(216,53,0)
(33,90,0)
(30,7,0)
(118,161,0)
(18,63,0)
(56,118,0)
(172,171,0)
(207,161,0)
(195,150,0)
(167,52,0)
(119,104,0)
(216,187,0)
(64,7,0)
(41,143,0)
(58,175,0)
(42,101,0)
(179,188,0)
(212,194,0)
(158,128,0)
(153,49,0)
(141,94,0)
(81,119,0)
(31,25,0)
(131,144,0)
(201,146,0)
(99,187,0)
(49,175,0)
(93,177,0)
(202,14,0)
(195,64,0)
(177,7,0)
(44,38,0)
(85,79,0)
(48,7,0)
(142,146,0)
(209,179,0)
(131,7,0)
(195,55,0)
(182,201,0)
(39,24,0)
(86,50,0)
(70,89,0)
(106,128,0)
(13,88,0)
(102,8,0)
(179,207,0)
(75,72,0)
(28,82,0)
(89,150,0)
(186,35,0)
(166,49,0)
(90,7,0)
(67,51,0)
(175,14,0)
(116,2,0)
(192,64,0)
(193,126,0)
(44,7,0)
(199,51,0)
(134,89,0)
(188,137,0)
(38,125,0)
(95,175,0)
(34,116,0)
(175,7,0)
(114,54,0)
(60,99,0)
(66,98,0)
(111,7,0)
(88,161,0)
(137,188,0)
(69,88,0)
(90,44,0)
(183,7,0)
(139,207,0)
(170,37,0)
(203,7,0)
(201,174,0)
(178,196,0)
(129,7,0)
(53,216,0)
(58,179,0)
(25,56,0)
(147,7,0)
(164,58,0)
(118,73,0)
(50,86,0)
(37,197,0)
(9,174,0)
(169,187,0)
(57,143,0)
(98,213,0)
(198,73,0)
(40,7,0)
(188,178,0)
(94,59,0)
(107,37,0)
(36,14,0)
(97,201,0)
(189,155,0)
(77,72,0)
(121,137,0)
(97,154,1)
(195,55,1)
(141,99,1)
(179,188,1)
(16,108,1)
(118,59,1)
(52,35,1)
(137,121,1)
(103,207,1)
(76,216,1)
(149,82,1)
(126,193,1)
(124,160,1)
(42,27,1)
(12,44,1)
(195,150,1)
(163,180,1)
(52,167,1)
(37,170,1)
(179,209,1)
(38,187,1)
(178,105,1)
(92,143,1)
(211,213,1)
(22,139,1)
(36,202,1)
(153,145,1)
(98,213,1)
(15,179,1)
(6,16,1)
(102,110,1)
(44,38,1)
(124,206,1)
(23,165,1)
(89,150,1)
(90,44,1)
(10,20,1)
(8,102,1)
(179,184,1)
(201,146,1)
(173,12,1)
(139,207,1)
(199,51,1)
(20,128,1)
(58,164,1)
(70,213,1)
(3,211,1)
(38,125,1)
(161,118,1)
(166,153,1)
(83,89,1)
(175,14,1)
(86,135,1)
(212,199,1)
(143,175,1)
(101,132,1)
(52,24,1)
(84,74,1)
(172,113,1)
(179,49,1)
(118,162,1)
(144,79,1)
(118,73,1)
(41,57,1)
(64,195,1)
(178,196,1)
(208,31,1)
(59,94,1)
(112,83,1)
(108,3,1)
(54,114,1)
(34,177,1)
(184,143,1)
(193,200,1)
(82,28,1)
(94,99,1)
(179,194,1)
(209,58,1)
(82,83,1)
(174,111,1)
(216,187,1)
(35,161,1)
(119,109,1)
(98,45,1)
(120,27,1)
(194,78,1)
(29,137,1)
(77,35,1)
(19,198,1)
(184,92,1)
(91,79,1)
(79,85,1)
(88,69,1)
(201,97,1)
(119,187,1)
(151,42,1)
(109,81,1)
(99,60,1)
(213,88,1)
(169,136,1)
(123,20,1)
(162,56,1)
(27,131,1)
(93,49,1)
(66,26,1)
(73,111,1)
(179,207,1)
(24,39,1)
(185,189,1)
(85,32,1)
(200,149,1)
(135,178,1)
(8,64,1)
(138,53,1)
(17,12,1)
(86,187,1)
(120,101,1)
(9,168,1)
(130,112,1)
(134,70,1)
(50,86,1)
(195,115,1)
(202,123,1)
(87,186,1)
(144,150,1)
(137,175,1)
(104,181,1)
(154,190,1)
(160,8,1)
(37,155,1)
(75,77,1)
(49,175,1)
(171,132,1)
(157,127,1)
(90,33,1)
(176,167,1)
(33,126,1)
(177,93,1)
(198,59,1)
(105,188,1)
(33,52,1)
(110,169,1)
(80,120,1)
(14,161,1)
(88,161,1)
(14,36,1)
(97,0,1)
(136,204,1)
(65,46,1)
(69,13,1)
(53,216,1)
(26,98,1)
(54,132,1)
(163,194,1)
(143,41,1)
(101,151,1)
(205,201,1)
(169,187,1)
(63,71,1)
(71,51,1)
(13,17,1)
(89,134,1)
(121,205,1)
(99,187,1)
(188,137,1)
(94,141,1)
(115,55,1)
(144,91,1)
(89,70,1)
(168,157,1)
(133,10,1)
(28,47,1)
(174,9,1)
(15,116,1)
(140,34,1)
(106,161,1)
(206,64,1)
(51,67,1)
(24,111,1)
(81,126,1)
(66,150,1)
(150,6,1)
(107,171,1)
(131,144,1)
(155,66,1)
(146,142,1)
(114,130,1)
(200,112,1)
(191,215,1)
(215,175,1)
(57,50,1)
(35,87,1)
(70,210,1)
(128,158,1)
(142,97,1)
(53,76,1)
(0,174,1)
(186,24,1)
(189,150,1)
(43,116,1)
(139,133,1)
(125,23,1)
(128,161,1)
(181,119,1)
(192,113,1)
(127,182,1)
(79,213,1)
(63,18,1)
(200,173,1)
(201,182,1)
(73,19,1)
(104,119,1)
(45,138,1)
(21,185,1)
(201,174,1)
(32,124,1)
(22,90,1)
(56,25,1)
(152,197,1)
(116,2,1)
(55,213,1)
(66,53,1)
(16,213,1)
(139,194,1)
(171,68,1)
(210,80,1)
(204,206,1)
(101,131,1)
(66,98,1)
(95,175,1)
(153,50,1)
(197,37,1)
(170,107,1)
(192,152,1)
(199,63,1)
(67,154,1)
(58,175,1)
(158,106,1)
(95,191,1)
(207,84,1)
(49,166,1)
(39,176,1)
(47,54,1)
(60,103,1)
(116,140,1)
(156,184,1)
(46,192,1)
(52,72,1)
(118,56,1)
(125,154,1)
(182,95,1)
(111,163,1)
(216,21,1)
(55,65,1)
(164,43,1)
(188,29,1)
(165,15,1)
(113,155,1)
(74,111,1)
(78,212,1)
(31,73,1)
(167,104,1)
(145,156,1)
(25,208,1)
(68,172,1)
(72,75,1)
(155,12,2)
(213,12,2)
(50,86,2)
(195,150,2)
(149,82,2)
(64,12,2)
(8,206,2)
(110,206,2)
(118,59,2)
(204,206,2)
(201,182,2)
(14,20,2)
(43,116,2)
(47,112,2)
(80,12,2)
(8,64,2)
(63,18,2)
(199,51,2)
(6,12,2)
(76,12,2)
(90,44,2)
(27,12,2)
(37,113,2)
(120,12,2)
(56,25,2)
(186,126,2)
(160,8,2)
(52,167,2)
(149,112,2)
(53,12,2)
(79,213,2)
(52,24,2)
(44,20,2)
(166,20,2)
(75,126,2)
(139,20,2)
(15,20,2)
(68,113,2)
(142,20,2)
(118,56,2)
(127,20,2)
(200,20,2)
(17,12,2)
(119,126,2)
(138,12,2)
(70,12,2)
(179,188,2)
(99,187,2)
(125,154,2)
(38,125,2)
(174,111,2)
(210,12,2)
(216,12,2)
(176,126,2)
(121,20,2)
(182,20,2)
(174,20,2)
(131,144,2)
(70,213,2)
(53,216,2)
(13,12,2)
(197,113,2)
(151,27,2)
(97,20,2)
(83,12,2)
(139,207,2)
(79,12,2)
(164,116,2)
(144,79,2)
(87,126,2)
(9,20,2)
(105,20,2)
(73,111,2)
(144,150,2)
(34,20,2)
(124,12,2)
(134,12,2)
(3,12,2)
(119,187,2)
(59,94,2)
(211,12,2)
(38,187,2)
(175,20,2)
(191,20,2)
(179,116,2)
(125,20,2)
(21,12,2)
(88,12,2)
(58,175,2)
(85,12,2)
(150,6,2)
(37,155,2)
(24,126,2)
(55,213,2)
(178,20,2)
(192,12,2)
(136,206,2)
(26,12,2)
(193,20,2)
(215,20,2)
(29,20,2)
(155,66,2)
(140,20,2)
(172,113,2)
(128,161,2)
(95,20,2)
(72,126,2)
(33,20,2)
(42,27,2)
(36,20,2)
(216,187,2)
(57,50,2)
(179,194,2)
(54,112,2)
(182,95,2)
(52,35,2)
(108,12,2)
(184,143,2)
(64,195,2)
(135,20,2)
(109,126,2)
(171,113,2)
(65,12,2)
(157,20,2)
(89,12,2)
(184,50,2)
(114,112,2)
(38,20,2)
(10,20,2)
(126,20,2)
(32,12,2)
(145,50,2)
(35,126,2)
(143,50,2)
(201,20,2)
(14,161,2)
(167,126,2)
(97,154,2)
(189,12,2)
(52,126,2)
(12,20,2)
(54,132,2)
(113,12,2)
(66,12,2)
(169,206,2)
(167,104,2)
(201,174,2)
(175,14,2)
(81,126,2)
(23,20,2)
(83,89,2)
(101,132,2)
(102,206,2)
(66,150,2)
(206,12,2)
(86,20,2)
(116,20,2)
(163,180,2)
(181,126,2)
(137,20,2)
(116,2,2)
(130,112,2)
(82,112,2)
(69,12,2)
(90,20,2)
(0,20,2)
(118,73,2)
(107,113,2)
(104,119,2)
(179,49,2)
(185,12,2)
(58,116,2)
(169,187,2)
(146,20,2)
(213,88,2)
(179,184,2)
(94,99,2)
(16,213,2)
(39,126,2)
(82,83,2)
(6,16,2)
(131,12,2)
(35,161,2)
(199,63,2)
(50,20,2)
(137,175,2)
(88,161,2)
(188,137,2)
(16,12,2)
(152,113,2)
(24,111,2)
(112,12,2)
(44,38,2)
(123,20,2)
(89,150,2)
(49,175,2)
(98,12,2)
(161,118,2)
(165,20,2)
(45,12,2)
(86,187,2)
(209,116,2)
(139,194,2)
(195,12,2)
(195,55,2)
(201,97,2)
(41,50,2)
(178,196,2)
(205,20,2)
(144,12,2)
(143,175,2)
(22,90,2)
(104,126,2)
(197,37,2)
(22,139,2)
(89,70,2)
(133,20,2)
(28,112,2)
(66,53,2)
(171,132,2)
(179,207,2)
(115,12,2)
(93,20,2)
(95,175,2)
(66,98,2)
(46,12,2)
(101,131,2)
(168,20,2)
(177,20,2)
(156,50,2)
(91,12,2)
(152,197,2)
(77,126,2)
(153,20,2)
(49,20,2)
(173,12,2)
(101,27,2)
(98,213,2)
(150,12,2)
(170,113,2)
(111,163,2)
(55,12,2)
(92,50,2)
(202,20,2)
(52,72,2)
(160,206,2)
(20,128,2)
(188,20,2)
(201,146,2)
-----------------------------------
(0,wrb)
(1,req)
(2,u8 query)
(3,resp)
(4,if (port)
(5,if (nic)
(6,le16_to_cpu(resp->desc_count)
(7,)
(8,port->mc_type)
(9,size)
(10,ENOMEM)
(11,if (vf_res)
(12,status)
(13,cmd)
(14,cmd.va)
(15,status)
(16,resp->desc_count)
(17,resp)
(18,struct be_dma_mem)
(19,size)
(20,!cmd.va)
(21,pdev)
(22,RET)
(23,wrb)
(24,cmd.size)
(25,cmd.dma)
(26,desc_count)
(27,nic)
(28,cap_flags)
(29,domain)
(30,if (pcie)
(31,cmd)
(32,resp)
(33,status)
(34,query)
(35,cmd.va)
(36,va)
(37,pcie->num_vfs)
(38,be_cmd_notify_wait(adapter, &wrb)
(39,size)
(40,if (!lancer_chip(adapter)
(41,hdr)
(42,res)
(43,req)
(44,status = be_cmd_notify_wait(adapter, &wrb)
(45,func_param)
(46,resp)
(47,vf_res)
(48,wrb)
(49,req->type)
(50,!lancer_chip(adapter)
(51,&cmd)
(52,dma_free_coherent(&adapter->pdev->dev, cmd.size, cmd.va,\n\\n\\t\\t\\t\\t  cmd.dma)
(53,adapter->pdev->devfn)
(54,res->vf_if_cap_flags)
(55,resp->func_param)
(56,&cmd.dma)
(57,req)
(58,req->type)
(59,&adapter->pdev->dev)
(60,pdev)
(61,status)
(62,err:)
(63,sizeof(struct be_dma_mem)
(64,port = be_get_port_desc(resp->func_param, desc_count)
(65,func_param)
(66,be_get_pcie_desc(adapter->pdev->devfn, resp->func_param,\n\\n\\t\\t\\t\\tdesc_count)
(67,cmd)
(68,max_vfs)
(69,va)
(70,resp->func_param)
(71,0)
(72,cmd.dma)
(73,cmd.size)
(74,cmd)
(75,dma)
(76,devfn)
(77,cmd)
(78,size)
(79,resp->func_param)
(80,resp)
(81,adapter)
(82,vf_res->cap_flags)
(83,vf_res = be_get_vft_desc(resp->func_param, desc_count)
(84,va)
(85,func_param)
(86,lancer_chip(adapter)
(87,va)
(88,cmd.va)
(89,be_get_vft_desc(resp->func_param, desc_count)
(90,return status;)
(91,desc_count)
(92,version)
(93,ACTIVE_PROFILE_TYPE)
(94,adapter->pdev->dev)
(95,req->hdr)
(96,resp)
(97,&wrb)
(98,resp->func_param)
(99,adapter->pdev)
(100,if (cmd.va)
(101,be_copy_nic_desc(res, nic)
(102,mc_type)
(103,adapter)
(104,adapter->pdev->dev)
(105,domain)
(106,cmd)
(107,pcie)
(108,desc_count)
(109,pdev)
(110,port)
(111,cmd.size = sizeof(struct be_cmd_resp_get_profile_config)
(112,vf_res)
(113,pcie)
(114,vf_if_cap_flags)
(115,desc_count)
(116,query == RESOURCE_MODIFIABLE)
(117,pcie)
(118,dma_zalloc_coherent(&adapter->pdev->dev, cmd.size, &cmd.dma,\n\\n\\t\\t\\t\\t     GFP_ATOMIC)
(119,adapter->pdev)
(120,vf_res)
(121,hdr)
(122,cmd)
(123,req)
(124,nic)
(125,&wrb)
(126,cmd.va)
(127,CMD_SUBSYSTEM_COMMON)
(128,cmd.va)
(129,if (status)
(130,res)
(131,nic = be_get_func_nic_desc(resp->func_param, desc_count)
(132,struct be_resources *res)
(133,-ENOMEM)
(134,desc_count)
(135,adapter)
(136,mc_type)
(137,req->hdr)
(138,resp)
(139,return -ENOMEM;)
(140,RESOURCE_MODIFIABLE)
(141,dev)
(142,cmd)
(143,req->hdr)
(144,be_get_func_nic_desc(resp->func_param, desc_count)
(145,req->hdr.version = 1)
(146,&cmd)
(147,nic)
(148,port)
(149,res->vf_if_cap_flags = vf_res->cap_flags)
(150,desc_count = le16_to_cpu(resp->desc_count)
(151,nic)
(152,res->max_vfs = le16_to_cpu(pcie->num_vfs)
(153,req)
(154,wrb = {0})
(155,pcie = be_get_pcie_desc(adapter->pdev->devfn, resp->func_param,\n\\n\\t\\t\\t\\tdesc_count)
(156,1)
(157,OPCODE_COMMON_GET_PROFILE_CONFIG)
(158,va)
(159,if (!cmd.va)
(160,adapter->mc_type = port->mc_type)
(161,cmd.va = dma_zalloc_coherent(&adapter->pdev->dev, cmd.size, &cmd.dma,\n\\n\\t\\t\\t\\t     GFP_ATOMIC)
(162,GFP_ATOMIC)
(163,sizeof(struct be_cmd_resp_get_profile_config)
(164,type)
(165,adapter)
(166,type)
(167,&adapter->pdev->dev)
(168,cmd)
(169,adapter->mc_type)
(170,num_vfs)
(171,res->max_vfs)
(172,res)
(173,goto err;)
(174,cmd.size)
(175,req = cmd.va)
(176,cmd)
(177,req->type = ACTIVE_PROFILE_TYPE)
(178,req->hdr.domain = domain)
(179,req->type |= QUERY_MODIFIABLE_FIELDS_TYPE)
(180,struct be_cmd_resp_get_profile_config)
(181,dev)
(182,&req->hdr)
(183,if (query == RESOURCE_MODIFIABLE)
(184,req->hdr.version)
(185,adapter)
(186,cmd)
(187,struct be_adapter *adapter)
(188,req->hdr.domain)
(189,pcie)
(190,wrb)
(191,hdr)
(192,port)
(193,va)
(194,cmd.size)
(195,be_get_port_desc(resp->func_param, desc_count)
(196,u8 domain)
(197,le16_to_cpu(pcie->num_vfs)
(198,cmd)
(199,memset(&cmd, 0, sizeof(struct be_dma_mem)
(200,cmd)
(201,be_wrb_cmd_hdr_prepare(&req->hdr, CMD_SUBSYSTEM_COMMON,\n\\n\\t\\t\\t       OPCODE_COMMON_GET_PROFILE_CONFIG,\n\\n\\t\\t\\t       cmd.size, &wrb, &cmd)
(202,cmd)
(203,vf_res)
(204,adapter)
(205,req)
(206,port)
(207,cmd.va)
(208,dma)
(209,QUERY_MODIFIABLE_FIELDS_TYPE)
(210,func_param)
(211,desc_count)
(212,cmd)
(213,resp = cmd.va)
(214,desc_count)
(215,req)
(216,adapter->pdev)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^