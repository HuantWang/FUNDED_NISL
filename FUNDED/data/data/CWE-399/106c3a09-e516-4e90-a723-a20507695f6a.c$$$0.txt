-----label-----
1
-----code-----
static acpi_status pnpacpi_allocated_resource(struct acpi_resource *res,
					      void *data)
{
	struct pnp_dev *dev = data;
	struct acpi_resource_dma *dma;
	struct acpi_resource_vendor_typed *vendor_typed;
	struct resource r;
	int i, flags;

	if (acpi_dev_resource_memory(res, &r)
	    || acpi_dev_resource_io(res, &r)
	    || acpi_dev_resource_address_space(res, &r)
	    || acpi_dev_resource_ext_address_space(res, &r)) {
		pnp_add_resource(dev, &r);
		return AE_OK;
	}

	r.flags = 0;
	if (acpi_dev_resource_interrupt(res, 0, &r)) {
		pnpacpi_add_irqresource(dev, &r);
		for (i = 1; acpi_dev_resource_interrupt(res, i, &r); i++)
			pnpacpi_add_irqresource(dev, &r);

		if (i > 1) {
			/*
			 * The IRQ encoder puts a single interrupt in each
			 * descriptor, so if a _CRS descriptor has more than
			 * one interrupt, we won't be able to re-encode it.
			 */
			if (pnp_can_write(dev)) {
				dev_warn(&dev->dev, "multiple interrupts in "
					 "_CRS descriptor; configuration can't "
					 "be changed\n");
				dev->capabilities &= ~PNP_WRITE;
			}
		}
		return AE_OK;
	} else if (r.flags & IORESOURCE_DISABLED) {
		pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED);
		return AE_OK;
	}

	switch (res->type) {
	case ACPI_RESOURCE_TYPE_DMA:
		dma = &res->data.dma;
		if (dma->channel_count > 0 && dma->channels[0] != (u8) -1)
			flags = dma_flags(dev, dma->type, dma->bus_master,
					  dma->transfer);
		else
			flags = IORESOURCE_DISABLED;
		pnp_add_dma_resource(dev, dma->channels[0], flags);
		break;

	case ACPI_RESOURCE_TYPE_START_DEPENDENT:
	case ACPI_RESOURCE_TYPE_END_DEPENDENT:
		break;

	case ACPI_RESOURCE_TYPE_VENDOR:
		vendor_typed = &res->data.vendor_typed;
		pnpacpi_parse_allocated_vendor(dev, vendor_typed);
		break;

	case ACPI_RESOURCE_TYPE_END_TAG:
		break;

	case ACPI_RESOURCE_TYPE_GENERIC_REGISTER:
		break;

	default:
		dev_warn(&dev->dev, "unknown resource type %d in _CRS\n",
			 res->type);
		return AE_ERROR;
	}

	return AE_OK;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
9,11
12,13
12,14
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
35,36
36,37
36,38
37,38
39,40
39,41
42,43
43,44
43,45
44,45
46,47
48,49
49,50
49,51
49,52
51,52
53,54
55,56
55,57
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
59,62
60,61
62,63
64,65
65,66
67,68
67,69
67,70
68,69
70,71
72,73
73,74
75,76
75,77
75,78
76,77
78,79
80,81
81,82
83,84
83,85
83,86
84,85
86,87
88,89
89,90
91,92
91,93
92,93
93,94
93,95
93,96
94,95
96,97
98,99
99,100
101,102
102,103
104,105
105,106
105,107
106,107
106,108
107,108
111,112
111,113
111,114
112,113
112,114
112,115
112,116
113,114
115,116
118,119
119,120
121,122
121,123
121,124
121,125
122,123
123,124
123,125
123,126
124,125
126,127
128,129
129,130
131,132
131,133
131,134
131,135
132,133
133,134
133,135
134,135
137,138
137,139
137,140
137,141
138,139
140,141
142,143
144,145
145,146
147,148
148,149
150,151
151,152
151,153
151,154
152,153
154,155
156,157
157,158
159,160
159,161
160,161
160,162
161,162
164,165
165,166
165,167
166,167
166,168
167,168
169,170
171,172
171,173
172,173
173,174
173,175
173,176
174,175
176,177
177,178
177,179
178,179
182,183
183,184
183,185
184,185
184,186
185,186
188,189
189,190
191,192
192,193
194,195
194,196
195,196
195,197
196,197
196,198
197,198
200,201
202,203
202,204
203,204
204,205
204,206
204,207
204,208
205,206
207,208
210,211
212,213
213,214
215,216
215,217
216,217
216,218
217,218
220,221
220,222
220,223
220,224
220,225
220,226
220,227
220,228
220,229
220,230
220,231
220,232
220,233
220,234
220,235
220,236
220,237
220,238
220,239
221,222
222,223
224,225
225,226
225,227
226,227
228,229
229,230
229,231
230,231
230,232
231,232
235,236
235,237
235,238
236,237
236,238
237,238
237,239
238,239
238,240
239,240
243,244
243,245
244,245
244,246
245,246
245,247
246,247
250,251
250,252
251,252
252,253
255,256
256,257
256,258
257,258
259,260
259,261
259,262
259,263
259,264
260,261
262,263
264,265
264,266
265,266
268,269
268,270
269,270
272,273
272,274
273,274
276,277
277,278
277,279
278,279
280,281
282,283
283,284
283,285
283,286
283,287
284,285
286,287
288,289
288,290
289,290
289,291
290,291
294,295
297,298
298,299
300,301
301,302
304,305
305,306
307,308
308,309
308,310
309,310
311,312
312,313
312,314
313,314
313,315
314,315
318,319
319,320
319,321
319,322
320,321
322,323
324,325
327,328
328,329
331,332
332,333
336,337
337,338
337,339
337,340
337,341
338,339
340,341
341,342
341,343
342,343
346,347
346,348
347,348
350,351
351,352
353,354
354,355
-----nextToken-----
3,5,8,10,11,13,15,16,21,23,24,27,31,33,34,38,40,41,45,47,50,52,54,61,63,66,69,71,74,77,79,82,85,87,90,95,97,100,103,108,109,110,114,116,117,120,125,127,130,135,136,139,141,143,146,149,153,155,158,162,163,168,170,175,179,180,181,186,187,190,193,198,199,201,206,208,209,211,214,218,219,223,227,232,233,234,240,241,242,247,248,249,253,254,258,261,263,266,267,270,271,274,275,279,281,285,287,291,292,293,295,296,299,302,303,306,310,315,316,317,321,323,325,326,329,330,333,334,335,339,343,344,345,348,349,352,355
-----computeFrom-----
56,57
56,58
57,58
57,59
58,59
58,60
105,106
105,107
133,134
133,135
160,161
160,162
183,184
183,185
195,196
195,197
225,226
225,227
236,237
236,238
237,238
237,239
243,244
243,245
250,251
250,252
256,257
256,258
277,278
277,279
308,309
308,310
-----guardedBy-----
90,100
201,211
247,274
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;IfStatement;BinaryExpression;BinaryExpression;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;CaseStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;BreakStatement;CaseStatement;IdExpression;Name;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static acpi_status pnpacpi_allocated_resource(struct acpi_resource *res,					      void *data){	struct pnp_dev *dev = data;	struct acpi_resource_dma *dma;	struct acpi_resource_vendor_typed *vendor_typed;	struct resource r;	int i, flags;	if (acpi_dev_resource_memory(res, &r)	    || acpi_dev_resource_io(res, &r)	    || acpi_dev_resource_address_space(res, &r)	    || acpi_dev_resource_ext_address_space(res, &r)) {		pnp_add_resource(dev, &r);		return AE_OK;	}	r.flags = 0;	if (acpi_dev_resource_interrupt(res, 0, &r)) {		pnpacpi_add_irqresource(dev, &r);		for (i = 1; acpi_dev_resource_interrupt(res, i, &r); i++)			pnpacpi_add_irqresource(dev, &r);		if (i > 1) {			/*			 * The IRQ encoder puts a single interrupt in each			 * descriptor, so if a _CRS descriptor has more than			 * one interrupt, we won't be able to re-encode it.			 */			if (pnp_can_write(dev)) {				dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n");				dev->capabilities &= ~PNP_WRITE;			}		}		return AE_OK;	} else if (r.flags & IORESOURCE_DISABLED) {		pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED);		return AE_OK;	}	switch (res->type) {	case ACPI_RESOURCE_TYPE_DMA:		dma = &res->data.dma;		if (dma->channel_count > 0 && dma->channels[0] != (u8) -1)			flags = dma_flags(dev, dma->type, dma->bus_master,					  dma->transfer);		else			flags = IORESOURCE_DISABLED;		pnp_add_dma_resource(dev, dma->channels[0], flags);		break;	case ACPI_RESOURCE_TYPE_START_DEPENDENT:	case ACPI_RESOURCE_TYPE_END_DEPENDENT:		break;	case ACPI_RESOURCE_TYPE_VENDOR:		vendor_typed = &res->data.vendor_typed;		pnpacpi_parse_allocated_vendor(dev, vendor_typed);		break;	case ACPI_RESOURCE_TYPE_END_TAG:		break;	case ACPI_RESOURCE_TYPE_GENERIC_REGISTER:		break;	default:		dev_warn(&dev->dev, "unknown resource type %d in _CRS\n",			 res->type);		return AE_ERROR;	}	return AE_OK;}
static acpi_status
acpi_status
pnpacpi_allocated_resource(struct acpi_resource *res,					      void *data)
pnpacpi_allocated_resource
struct acpi_resource *res
struct acpi_resource
acpi_resource
*res
*
res
void *data
void
*data
*
data
{	struct pnp_dev *dev = data;	struct acpi_resource_dma *dma;	struct acpi_resource_vendor_typed *vendor_typed;	struct resource r;	int i, flags;	if (acpi_dev_resource_memory(res, &r)	    || acpi_dev_resource_io(res, &r)	    || acpi_dev_resource_address_space(res, &r)	    || acpi_dev_resource_ext_address_space(res, &r)) {		pnp_add_resource(dev, &r);		return AE_OK;	}	r.flags = 0;	if (acpi_dev_resource_interrupt(res, 0, &r)) {		pnpacpi_add_irqresource(dev, &r);		for (i = 1; acpi_dev_resource_interrupt(res, i, &r); i++)			pnpacpi_add_irqresource(dev, &r);		if (i > 1) {			/*			 * The IRQ encoder puts a single interrupt in each			 * descriptor, so if a _CRS descriptor has more than			 * one interrupt, we won't be able to re-encode it.			 */			if (pnp_can_write(dev)) {				dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n");				dev->capabilities &= ~PNP_WRITE;			}		}		return AE_OK;	} else if (r.flags & IORESOURCE_DISABLED) {		pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED);		return AE_OK;	}	switch (res->type) {	case ACPI_RESOURCE_TYPE_DMA:		dma = &res->data.dma;		if (dma->channel_count > 0 && dma->channels[0] != (u8) -1)			flags = dma_flags(dev, dma->type, dma->bus_master,					  dma->transfer);		else			flags = IORESOURCE_DISABLED;		pnp_add_dma_resource(dev, dma->channels[0], flags);		break;	case ACPI_RESOURCE_TYPE_START_DEPENDENT:	case ACPI_RESOURCE_TYPE_END_DEPENDENT:		break;	case ACPI_RESOURCE_TYPE_VENDOR:		vendor_typed = &res->data.vendor_typed;		pnpacpi_parse_allocated_vendor(dev, vendor_typed);		break;	case ACPI_RESOURCE_TYPE_END_TAG:		break;	case ACPI_RESOURCE_TYPE_GENERIC_REGISTER:		break;	default:		dev_warn(&dev->dev, "unknown resource type %d in _CRS\n",			 res->type);		return AE_ERROR;	}	return AE_OK;}
struct pnp_dev *dev = data;
struct pnp_dev *dev = data;
struct pnp_dev
pnp_dev
*dev = data
*
dev
= data
data
data
struct acpi_resource_dma *dma;
struct acpi_resource_dma *dma;
struct acpi_resource_dma
acpi_resource_dma
*dma
*
dma
struct acpi_resource_vendor_typed *vendor_typed;
struct acpi_resource_vendor_typed *vendor_typed;
struct acpi_resource_vendor_typed
acpi_resource_vendor_typed
*vendor_typed
*
vendor_typed
struct resource r;
struct resource r;
struct resource
resource
r
r
int i, flags;
int i, flags;
int
i
i
flags
flags
if (acpi_dev_resource_memory(res, &r)	    || acpi_dev_resource_io(res, &r)	    || acpi_dev_resource_address_space(res, &r)	    || acpi_dev_resource_ext_address_space(res, &r)) {		pnp_add_resource(dev, &r);		return AE_OK;	}
acpi_dev_resource_memory(res, &r)	    || acpi_dev_resource_io(res, &r)	    || acpi_dev_resource_address_space(res, &r)	    || acpi_dev_resource_ext_address_space(res, &r)
acpi_dev_resource_memory(res, &r)	    || acpi_dev_resource_io(res, &r)	    || acpi_dev_resource_address_space(res, &r)
acpi_dev_resource_memory(res, &r)	    || acpi_dev_resource_io(res, &r)
acpi_dev_resource_memory(res, &r)
acpi_dev_resource_memory
acpi_dev_resource_memory
res
res
&r
r
r
acpi_dev_resource_io(res, &r)
acpi_dev_resource_io
acpi_dev_resource_io
res
res
&r
r
r
acpi_dev_resource_address_space(res, &r)
acpi_dev_resource_address_space
acpi_dev_resource_address_space
res
res
&r
r
r
acpi_dev_resource_ext_address_space(res, &r)
acpi_dev_resource_ext_address_space
acpi_dev_resource_ext_address_space
res
res
&r
r
r
{		pnp_add_resource(dev, &r);		return AE_OK;	}
pnp_add_resource(dev, &r);
pnp_add_resource(dev, &r)
pnp_add_resource
pnp_add_resource
dev
dev
&r
r
r
return AE_OK;
AE_OK
AE_OK
r.flags = 0;
r.flags = 0
r.flags
r
r
flags
0
if (acpi_dev_resource_interrupt(res, 0, &r)) {		pnpacpi_add_irqresource(dev, &r);		for (i = 1; acpi_dev_resource_interrupt(res, i, &r); i++)			pnpacpi_add_irqresource(dev, &r);		if (i > 1) {			/*			 * The IRQ encoder puts a single interrupt in each			 * descriptor, so if a _CRS descriptor has more than			 * one interrupt, we won't be able to re-encode it.			 */			if (pnp_can_write(dev)) {				dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n");				dev->capabilities &= ~PNP_WRITE;			}		}		return AE_OK;	} else if (r.flags & IORESOURCE_DISABLED) {		pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED);		return AE_OK;	}
acpi_dev_resource_interrupt(res, 0, &r)
acpi_dev_resource_interrupt
acpi_dev_resource_interrupt
res
res
0
&r
r
r
{		pnpacpi_add_irqresource(dev, &r);		for (i = 1; acpi_dev_resource_interrupt(res, i, &r); i++)			pnpacpi_add_irqresource(dev, &r);		if (i > 1) {			/*			 * The IRQ encoder puts a single interrupt in each			 * descriptor, so if a _CRS descriptor has more than			 * one interrupt, we won't be able to re-encode it.			 */			if (pnp_can_write(dev)) {				dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n");				dev->capabilities &= ~PNP_WRITE;			}		}		return AE_OK;	}
pnpacpi_add_irqresource(dev, &r);
pnpacpi_add_irqresource(dev, &r)
pnpacpi_add_irqresource
pnpacpi_add_irqresource
dev
dev
&r
r
r
for (i = 1; acpi_dev_resource_interrupt(res, i, &r); i++)			pnpacpi_add_irqresource(dev, &r);
i = 1;
i = 1
i
i
1
acpi_dev_resource_interrupt(res, i, &r)
acpi_dev_resource_interrupt
acpi_dev_resource_interrupt
res
res
i
i
&r
r
r
i++
i
i
pnpacpi_add_irqresource(dev, &r);
pnpacpi_add_irqresource(dev, &r)
pnpacpi_add_irqresource
pnpacpi_add_irqresource
dev
dev
&r
r
r
if (i > 1) {			/*			 * The IRQ encoder puts a single interrupt in each			 * descriptor, so if a _CRS descriptor has more than			 * one interrupt, we won't be able to re-encode it.			 */			if (pnp_can_write(dev)) {				dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n");				dev->capabilities &= ~PNP_WRITE;			}		}
i > 1
i
i
1
{			/*			 * The IRQ encoder puts a single interrupt in each			 * descriptor, so if a _CRS descriptor has more than			 * one interrupt, we won't be able to re-encode it.			 */			if (pnp_can_write(dev)) {				dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n");				dev->capabilities &= ~PNP_WRITE;			}		}
if (pnp_can_write(dev)) {				dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n");				dev->capabilities &= ~PNP_WRITE;			}
pnp_can_write(dev)
pnp_can_write
pnp_can_write
dev
dev
{				dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n");				dev->capabilities &= ~PNP_WRITE;			}
dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n");
dev_warn(&dev->dev, "multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n")
dev_warn
dev_warn
&dev->dev
dev->dev
dev
dev
dev
"multiple interrupts in "					 "_CRS descriptor; configuration can't "					 "be changed\n"
dev->capabilities &= ~PNP_WRITE;
dev->capabilities &= ~PNP_WRITE
dev->capabilities
dev
dev
capabilities
~PNP_WRITE
PNP_WRITE
PNP_WRITE
return AE_OK;
AE_OK
AE_OK
if (r.flags & IORESOURCE_DISABLED) {		pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED);		return AE_OK;	}
r.flags & IORESOURCE_DISABLED
r.flags
r
r
flags
IORESOURCE_DISABLED
IORESOURCE_DISABLED
{		pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED);		return AE_OK;	}
pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED);
pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED)
pnp_add_irq_resource
pnp_add_irq_resource
dev
dev
0
IORESOURCE_DISABLED
IORESOURCE_DISABLED
return AE_OK;
AE_OK
AE_OK
switch (res->type) {	case ACPI_RESOURCE_TYPE_DMA:		dma = &res->data.dma;		if (dma->channel_count > 0 && dma->channels[0] != (u8) -1)			flags = dma_flags(dev, dma->type, dma->bus_master,					  dma->transfer);		else			flags = IORESOURCE_DISABLED;		pnp_add_dma_resource(dev, dma->channels[0], flags);		break;	case ACPI_RESOURCE_TYPE_START_DEPENDENT:	case ACPI_RESOURCE_TYPE_END_DEPENDENT:		break;	case ACPI_RESOURCE_TYPE_VENDOR:		vendor_typed = &res->data.vendor_typed;		pnpacpi_parse_allocated_vendor(dev, vendor_typed);		break;	case ACPI_RESOURCE_TYPE_END_TAG:		break;	case ACPI_RESOURCE_TYPE_GENERIC_REGISTER:		break;	default:		dev_warn(&dev->dev, "unknown resource type %d in _CRS\n",			 res->type);		return AE_ERROR;	}
res->type
res
res
type
{	case ACPI_RESOURCE_TYPE_DMA:		dma = &res->data.dma;		if (dma->channel_count > 0 && dma->channels[0] != (u8) -1)			flags = dma_flags(dev, dma->type, dma->bus_master,					  dma->transfer);		else			flags = IORESOURCE_DISABLED;		pnp_add_dma_resource(dev, dma->channels[0], flags);		break;	case ACPI_RESOURCE_TYPE_START_DEPENDENT:	case ACPI_RESOURCE_TYPE_END_DEPENDENT:		break;	case ACPI_RESOURCE_TYPE_VENDOR:		vendor_typed = &res->data.vendor_typed;		pnpacpi_parse_allocated_vendor(dev, vendor_typed);		break;	case ACPI_RESOURCE_TYPE_END_TAG:		break;	case ACPI_RESOURCE_TYPE_GENERIC_REGISTER:		break;	default:		dev_warn(&dev->dev, "unknown resource type %d in _CRS\n",			 res->type);		return AE_ERROR;	}
case ACPI_RESOURCE_TYPE_DMA:
ACPI_RESOURCE_TYPE_DMA
ACPI_RESOURCE_TYPE_DMA
dma = &res->data.dma;
dma = &res->data.dma
dma
dma
&res->data.dma
res->data.dma
res->data
res
res
data
dma
if (dma->channel_count > 0 && dma->channels[0] != (u8) -1)			flags = dma_flags(dev, dma->type, dma->bus_master,					  dma->transfer);		else			flags = IORESOURCE_DISABLED;
dma->channel_count > 0 && dma->channels[0] != (u8) -1
dma->channel_count > 0
dma->channel_count
dma
dma
channel_count
0
dma->channels[0] != (u8) -1
dma->channels[0]
dma->channels
dma
dma
channels
0
(u8) -1
(u8)
u8
u8
1
flags = dma_flags(dev, dma->type, dma->bus_master,					  dma->transfer);
flags = dma_flags(dev, dma->type, dma->bus_master,					  dma->transfer)
flags
flags
dma_flags(dev, dma->type, dma->bus_master,					  dma->transfer)
dma_flags
dma_flags
dev
dev
dma->type
dma
dma
type
dma->bus_master
dma
dma
bus_master
dma->transfer
dma
dma
transfer
flags = IORESOURCE_DISABLED;
flags = IORESOURCE_DISABLED
flags
flags
IORESOURCE_DISABLED
IORESOURCE_DISABLED
pnp_add_dma_resource(dev, dma->channels[0], flags);
pnp_add_dma_resource(dev, dma->channels[0], flags)
pnp_add_dma_resource
pnp_add_dma_resource
dev
dev
dma->channels[0]
dma->channels
dma
dma
channels
0
flags
flags
break;
case ACPI_RESOURCE_TYPE_START_DEPENDENT:
ACPI_RESOURCE_TYPE_START_DEPENDENT
ACPI_RESOURCE_TYPE_START_DEPENDENT
case ACPI_RESOURCE_TYPE_END_DEPENDENT:
ACPI_RESOURCE_TYPE_END_DEPENDENT
ACPI_RESOURCE_TYPE_END_DEPENDENT
break;
case ACPI_RESOURCE_TYPE_VENDOR:
ACPI_RESOURCE_TYPE_VENDOR
ACPI_RESOURCE_TYPE_VENDOR
vendor_typed = &res->data.vendor_typed;
vendor_typed = &res->data.vendor_typed
vendor_typed
vendor_typed
&res->data.vendor_typed
res->data.vendor_typed
res->data
res
res
data
vendor_typed
pnpacpi_parse_allocated_vendor(dev, vendor_typed);
pnpacpi_parse_allocated_vendor(dev, vendor_typed)
pnpacpi_parse_allocated_vendor
pnpacpi_parse_allocated_vendor
dev
dev
vendor_typed
vendor_typed
break;
case ACPI_RESOURCE_TYPE_END_TAG:
ACPI_RESOURCE_TYPE_END_TAG
ACPI_RESOURCE_TYPE_END_TAG
break;
case ACPI_RESOURCE_TYPE_GENERIC_REGISTER:
ACPI_RESOURCE_TYPE_GENERIC_REGISTER
ACPI_RESOURCE_TYPE_GENERIC_REGISTER
break;
default:
dev_warn(&dev->dev, "unknown resource type %d in _CRS\n",			 res->type);
dev_warn(&dev->dev, "unknown resource type %d in _CRS\n",			 res->type)
dev_warn
dev_warn
&dev->dev
dev->dev
dev
dev
dev
"unknown resource type %d in _CRS\n"
res->type
res
res
type
return AE_ERROR;
AE_ERROR
AE_ERROR
return AE_OK;
AE_OK
AE_OK
-----joern-----
(124,87,0)
(40,190,0)
(128,160,0)
(134,160,0)
(187,108,0)
(65,61,0)
(13,128,0)
(49,129,0)
(185,136,0)
(33,160,0)
(64,1,0)
(133,61,0)
(146,88,0)
(20,40,0)
(32,97,0)
(145,184,0)
(2,185,0)
(67,4,0)
(56,97,0)
(173,35,0)
(150,22,0)
(66,115,0)
(89,51,0)
(142,120,0)
(189,12,0)
(161,184,0)
(25,88,0)
(72,190,0)
(71,165,0)
(158,157,0)
(93,148,0)
(167,1,0)
(98,184,0)
(84,121,0)
(127,97,0)
(163,36,0)
(105,10,0)
(72,102,0)
(51,110,0)
(102,72,0)
(70,113,0)
(193,165,0)
(115,179,0)
(120,165,0)
(51,152,0)
(192,100,0)
(155,16,0)
(55,57,0)
(117,161,0)
(169,28,0)
(166,147,0)
(99,1,0)
(63,103,0)
(111,184,0)
(103,63,0)
(121,102,0)
(90,57,0)
(162,188,0)
(131,157,0)
(76,186,0)
(143,155,0)
(185,107,0)
(101,148,0)
(106,96,0)
(15,42,0)
(104,22,0)
(94,129,0)
(169,113,0)
(88,190,0)
(57,90,0)
(61,65,0)
(188,124,0)
(2,184,0)
(160,1,0)
(106,90,0)
(129,147,0)
(138,163,0)
(28,22,0)
(48,7,0)
(4,97,0)
(103,76,0)
(42,165,0)
(28,80,0)
(31,57,0)
(171,97,0)
(7,122,0)
(104,130,0)
(155,160,0)
(135,89,0)
(112,83,0)
(91,101,0)
(10,97,0)
(41,111,0)
(110,51,0)
(179,139,0)
(92,68,0)
(44,124,0)
(33,37,0)
(90,106,0)
(61,98,0)
(54,35,0)
(168,108,0)
(35,184,0)
(114,72,0)
(6,168,0)
(125,97,0)
(108,63,0)
(126,33,0)
(107,184,0)
(113,1,0)
(63,139,0)
(30,130,0)
(184,98,0)
(181,161,0)
(60,65,0)
(50,106,0)
(73,152,0)
(79,181,0)
(134,136,0)
(102,121,0)
(175,102,0)
(16,155,0)
(164,186,0)
(87,124,0)
(88,146,0)
(174,161,0)
(139,63,0)
(116,160,0)
(185,2,0)
(35,73,0)
(184,97,0)
(134,97,0)
(17,1,0)
(81,49,0)
(40,68,0)
(23,1,0)
(82,111,0)
(21,75,0)
(136,185,0)
(10,84,0)
(4,22,0)
(170,37,0)
(122,103,0)
(45,33,0)
(9,190,0)
(24,1,0)
(59,10,0)
(19,146,0)
(160,58,0)
(95,138,0)
(122,7,0)
(183,128,0)
(169,74,0)
(29,129,0)
(52,73,0)
(153,40,0)
(155,130,0)
(5,107,0)
(152,51,0)
(76,103,0)
(149,134,0)
(26,138,0)
(121,84,0)
(176,9,0)
(100,160,0)
(156,83,0)
(134,157,0)
(177,134,0)
(36,163,0)
(53,97,0)
(122,190,0)
(188,184,0)
(108,168,0)
(111,185,0)
(27,42,0)
(65,190,0)
(139,179,0)
(39,107,0)
(179,190,0)
(83,156,0)
(152,87,0)
(85,130,0)
(101,160,0)
(124,188,0)
(86,156,0)
(123,76,0)
(194,163,0)
(108,190,0)
(76,190,0)
(161,181,0)
(185,160,0)
(181,134,0)
(43,74,0)
(22,147,0)
(73,35,0)
(138,190,0)
(134,181,0)
(163,138,0)
(129,49,0)
(140,84,0)
(68,40,0)
(37,33,0)
(103,122,0)
(69,16,0)
(107,185,0)
(98,61,0)
(147,1,0)
(100,80,0)
(62,88,0)
(34,1,0)
(74,3,0)
(109,9,0)
(118,72,0)
(191,160,0)
(128,36,0)
(172,1,0)
(180,100,0)
(47,104,0)
(38,179,0)
(57,160,0)
(51,89,0)
(154,97,0)
(119,97,0)
(88,165,0)
(10,160,0)
(148,101,0)
(151,97,0)
(11,65,0)
(169,4,0)
(12,160,0)
(152,73,0)
(8,97,0)
(36,128,0)
(185,111,0)
(141,100,0)
(159,122,0)
(179,115,0)
(169,104,0)
(37,96,0)
(144,2,0)
(182,188,0)
(14,22,0)
(186,76,0)
(78,136,0)
(132,97,0)
(83,3,0)
(163,97,0)
(137,1,0)
(113,22,0)
(87,152,0)
(77,97,0)
(46,185,0)
(83,160,0)
(0,2,0)
(18,97,0)
(63,108,0)
(84,97,0)
(178,28,0)
(101,160,1)
(185,111,1)
(40,190,1)
(56,10,1)
(95,194,1)
(54,124,1)
(174,117,1)
(109,49,1)
(66,38,1)
(179,190,1)
(89,135,1)
(88,146,1)
(176,109,1)
(106,90,1)
(177,157,1)
(47,12,1)
(185,107,1)
(83,160,1)
(192,49,1)
(183,13,1)
(57,31,1)
(13,9,1)
(134,149,1)
(26,95,1)
(161,174,1)
(5,2,1)
(93,91,1)
(28,178,1)
(70,119,1)
(86,112,1)
(147,166,1)
(168,6,1)
(41,46,1)
(2,144,1)
(150,139,1)
(108,168,1)
(70,56,1)
(189,42,1)
(76,190,1)
(141,192,1)
(103,122,1)
(12,160,1)
(29,94,1)
(155,160,1)
(42,165,1)
(136,185,1)
(185,160,1)
(77,134,1)
(38,160,1)
(70,77,1)
(126,45,1)
(46,78,1)
(72,114,1)
(111,82,1)
(51,89,1)
(173,54,1)
(68,92,1)
(90,57,1)
(87,152,1)
(59,105,1)
(37,170,1)
(4,22,1)
(106,50,1)
(78,87,1)
(4,67,1)
(44,188,1)
(160,58,1)
(134,157,1)
(92,153,1)
(186,164,1)
(162,184,1)
(166,22,1)
(120,142,1)
(107,184,1)
(37,33,1)
(79,161,1)
(49,81,1)
(169,104,1)
(128,183,1)
(72,190,1)
(187,179,1)
(164,123,1)
(185,2,1)
(142,101,1)
(107,39,1)
(70,32,1)
(73,52,1)
(108,190,1)
(33,126,1)
(115,66,1)
(133,65,1)
(124,188,1)
(65,11,1)
(193,155,1)
(138,26,1)
(112,139,1)
(124,44,1)
(61,133,1)
(184,98,1)
(177,136,1)
(128,160,1)
(169,28,1)
(88,165,1)
(153,20,1)
(131,158,1)
(119,9,1)
(81,129,1)
(40,68,1)
(12,189,1)
(163,138,1)
(122,7,1)
(10,59,1)
(122,190,1)
(61,65,1)
(102,175,1)
(105,84,1)
(50,90,1)
(160,191,1)
(135,73,1)
(104,22,1)
(43,83,1)
(60,145,1)
(113,70,1)
(35,173,1)
(31,55,1)
(169,113,1)
(154,9,1)
(118,140,1)
(194,36,1)
(88,190,1)
(117,177,1)
(188,182,1)
(158,87,1)
(45,106,1)
(103,76,1)
(63,108,1)
(161,184,1)
(169,4,1)
(2,184,1)
(11,60,1)
(170,33,1)
(55,12,1)
(73,35,1)
(152,73,1)
(140,9,1)
(39,5,1)
(76,186,1)
(74,43,1)
(179,115,1)
(156,86,1)
(175,72,1)
(16,69,1)
(178,100,1)
(98,61,1)
(138,190,1)
(100,180,1)
(91,88,1)
(139,179,1)
(52,35,1)
(0,111,1)
(143,40,1)
(181,161,1)
(129,29,1)
(157,131,1)
(36,128,1)
(102,72,1)
(123,108,1)
(10,160,1)
(67,163,1)
(155,16,1)
(33,160,1)
(10,84,1)
(152,51,1)
(148,93,1)
(51,110,1)
(145,9,1)
(6,187,1)
(57,160,1)
(139,63,1)
(7,48,1)
(82,41,1)
(20,147,1)
(100,160,1)
(101,148,1)
(163,36,1)
(22,14,1)
(49,129,1)
(169,74,1)
(144,0,1)
(180,141,1)
(25,165,1)
(121,102,1)
(114,118,1)
(129,147,1)
(65,190,1)
(14,150,1)
(32,9,1)
(15,88,1)
(27,15,1)
(69,143,1)
(48,159,1)
(84,121,1)
(87,124,1)
(94,40,1)
(71,193,1)
(149,181,1)
(35,184,1)
(104,47,1)
(165,71,1)
(19,62,1)
(70,154,1)
(9,176,1)
(63,103,1)
(181,79,1)
(47,37,1)
(134,136,1)
(188,184,1)
(134,181,1)
(120,165,1)
(134,160,1)
(111,184,1)
(62,25,1)
(25,120,1)
(182,162,1)
(83,156,1)
(191,116,1)
(9,190,1)
(146,19,1)
(42,27,1)
(47,42,1)
(113,22,1)
(159,76,1)
(28,22,1)
(152,124,2)
(14,139,2)
(25,40,2)
(62,88,2)
(40,139,2)
(161,184,2)
(184,98,2)
(153,139,2)
(32,9,2)
(74,139,2)
(107,87,2)
(135,124,2)
(78,87,2)
(108,168,2)
(29,40,2)
(169,4,2)
(180,49,2)
(178,49,2)
(188,9,2)
(19,40,2)
(148,88,2)
(138,190,2)
(163,36,2)
(92,139,2)
(36,128,2)
(169,104,2)
(111,184,2)
(134,181,2)
(88,165,2)
(141,49,2)
(102,9,2)
(49,129,2)
(133,9,2)
(164,108,2)
(176,49,2)
(98,61,2)
(77,9,2)
(138,9,2)
(175,9,2)
(71,40,2)
(100,160,2)
(86,139,2)
(87,124,2)
(189,42,2)
(120,88,2)
(9,190,2)
(87,9,2)
(81,40,2)
(87,152,2)
(158,87,2)
(166,139,2)
(41,87,2)
(40,68,2)
(129,40,2)
(4,9,2)
(59,9,2)
(37,33,2)
(103,122,2)
(120,165,2)
(163,9,2)
(177,9,2)
(179,190,2)
(88,88,2)
(160,58,2)
(103,108,2)
(88,146,2)
(107,184,2)
(90,57,2)
(117,9,2)
(147,139,2)
(185,160,2)
(129,147,2)
(106,90,2)
(84,9,2)
(134,160,2)
(154,9,2)
(67,9,2)
(12,42,2)
(51,89,2)
(95,9,2)
(40,190,2)
(168,179,2)
(142,88,2)
(90,12,2)
(108,190,2)
(152,51,2)
(93,88,2)
(70,9,2)
(181,161,2)
(143,40,2)
(27,40,2)
(155,160,2)
(192,49,2)
(88,40,2)
(102,72,2)
(185,87,2)
(169,74,2)
(119,9,2)
(26,9,2)
(183,9,2)
(28,22,2)
(4,22,2)
(13,9,2)
(128,9,2)
(44,9,2)
(150,139,2)
(76,190,2)
(136,87,2)
(5,87,2)
(121,102,2)
(61,65,2)
(6,179,2)
(10,160,2)
(83,156,2)
(62,40,2)
(156,139,2)
(9,49,2)
(170,12,2)
(114,9,2)
(37,12,2)
(101,148,2)
(157,87,2)
(63,108,2)
(174,9,2)
(50,12,2)
(146,40,2)
(108,179,2)
(185,2,2)
(7,76,2)
(169,113,2)
(22,139,2)
(10,9,2)
(152,73,2)
(111,87,2)
(83,160,2)
(55,12,2)
(112,139,2)
(181,9,2)
(182,9,2)
(68,139,2)
(140,9,2)
(169,28,2)
(73,35,2)
(69,40,2)
(45,12,2)
(109,49,2)
(76,108,2)
(159,76,2)
(122,7,2)
(136,185,2)
(91,88,2)
(131,87,2)
(162,9,2)
(122,190,2)
(82,87,2)
(2,87,2)
(42,40,2)
(65,9,2)
(104,40,2)
(101,88,2)
(25,88,2)
(98,9,2)
(35,184,2)
(193,40,2)
(51,124,2)
(65,190,2)
(122,76,2)
(28,49,2)
(52,124,2)
(194,9,2)
(173,124,2)
(123,108,2)
(76,186,2)
(33,12,2)
(155,40,2)
(56,9,2)
(89,124,2)
(103,76,2)
(185,107,2)
(42,165,2)
(39,87,2)
(126,12,2)
(134,9,2)
(51,110,2)
(94,40,2)
(57,160,2)
(12,160,2)
(101,160,2)
(105,9,2)
(31,12,2)
(83,139,2)
(11,9,2)
(187,179,2)
(16,40,2)
(106,12,2)
(72,9,2)
(61,9,2)
(163,138,2)
(113,9,2)
(79,9,2)
(184,9,2)
(63,103,2)
(54,124,2)
(146,88,2)
(139,63,2)
(0,87,2)
(186,108,2)
(134,157,2)
(118,9,2)
(46,87,2)
(57,12,2)
(139,179,2)
(121,9,2)
(144,87,2)
(149,9,2)
(185,111,2)
(100,49,2)
(35,124,2)
(10,84,2)
(134,136,2)
(60,9,2)
(145,9,2)
(124,188,2)
(36,9,2)
(19,88,2)
(48,76,2)
(179,115,2)
(2,184,2)
(63,179,2)
(161,9,2)
(165,40,2)
(113,22,2)
(84,121,2)
(43,139,2)
(128,160,2)
(47,40,2)
(104,22,2)
(20,139,2)
(124,9,2)
(188,184,2)
(155,16,2)
(73,124,2)
(15,40,2)
(49,40,2)
(33,160,2)
(72,190,2)
(88,190,2)
-----------------------------------
(0,dma)
(1,)
(2,dma->bus_master)
(3,)
(4,return AE_ERROR;)
(5,dma)
(6,r)
(7,&r)
(8,case ACPI_RESOURCE_TYPE_GENERIC_REGISTER:)
(9,res->type)
(10,pnpacpi_parse_allocated_vendor(dev, vendor_typed)
(11,data)
(12,pnp_can_write(dev)
(13,dev)
(14,flags)
(15,i)
(16,&r)
(17,dma)
(18,case ACPI_RESOURCE_TYPE_VENDOR:)
(19,r)
(20,res)
(21,if (pnp_can_write(dev)
(22,r.flags)
(23,flags)
(24,switch (res->type)
(25,res)
(26,type)
(27,1)
(28,return AE_OK;)
(29,flags)
(30,if (i > 1)
(31,dev)
(32,break;)
(33,dev->capabilities)
(34,dev)
(35,dma->channels)
(36,&dev->dev)
(37,dev->capabilities &= ~PNP_WRITE)
(38,res)
(39,transfer)
(40,acpi_dev_resource_interrupt(res, 0, &r)
(41,dma)
(42,i > 1)
(43,AE_OK)
(44,0)
(45,dev)
(46,dev)
(47,AE_OK)
(48,r)
(49,r.flags & IORESOURCE_DISABLED)
(50,"multiple interrupts in "\n\\n\\t\\t\\t\\t\\t "_CRS descriptor; configuration can\'t "\n\\n\\t\\t\\t\\t\\t "be changed\\n")
(51,(u8)
(52,0)
(53,case ACPI_RESOURCE_TYPE_END_DEPENDENT:)
(54,dma)
(55,dev)
(56,break;)
(57,dev->dev)
(58,void *data)
(59,vendor_typed)
(60,res)
(61,res->data.dma)
(62,i)
(63,acpi_dev_resource_io(res, &r)
(64,if (acpi_dev_resource_memory(res, &r)
(65,res->data)
(66,r)
(67,AE_ERROR)
(68,&r)
(69,r)
(70,AE_OK)
(71,1)
(72,res->data)
(73,dma->channels[0])
(74,return AE_OK;)
(75,)
(76,acpi_dev_resource_address_space(res, &r)
(77,break;)
(78,flags)
(79,0)
(80,)
(81,IORESOURCE_DISABLED)
(82,type)
(83,pnp_add_resource(dev, &r)
(84,vendor_typed = &res->data.vendor_typed)
(85,for (i = 1; acpi_dev_resource_interrupt(res, i, &r)
(86,r)
(87,dma->channel_count > 0 && dma->channels[0] != (u8)
(88,acpi_dev_resource_interrupt(res, i, &r)
(89,-1)
(90,&dev->dev)
(91,dev)
(92,r)
(93,r)
(94,r)
(95,res)
(96,)
(97,)
(98,&res->data.dma)
(99,r)
(100,pnp_add_irq_resource(dev, 0, IORESOURCE_DISABLED)
(101,pnpacpi_add_irqresource(dev, &r)
(102,res->data.vendor_typed)
(103,acpi_dev_resource_address_space(res, &r)
(104,return AE_OK;)
(105,dev)
(106,dev_warn(&dev->dev, "multiple interrupts in "\n\\n\\t\\t\\t\\t\\t "_CRS descriptor; configuration can\'t "\n\\n\\t\\t\\t\\t\\t "be changed\\n")
(107,dma->transfer)
(108,acpi_dev_resource_io(res, &r)
(109,res)
(110,u8)
(111,dma->type)
(112,dev)
(113,return AE_OK;)
(114,data)
(115,&r)
(116,dev)
(117,dma)
(118,res)
(119,break;)
(120,i++)
(121,&res->data.vendor_typed)
(122,acpi_dev_resource_ext_address_space(res, &r)
(123,res)
(124,dma->channel_count > 0)
(125,case ACPI_RESOURCE_TYPE_START_DEPENDENT:)
(126,capabilities)
(127,default:)
(128,dev->dev)
(129,r.flags)
(130,)
(131,IORESOURCE_DISABLED)
(132,if (dma->channel_count > 0 && dma->channels[0] != (u8)
(133,dma)
(134,pnp_add_dma_resource(dev, dma->channels[0], flags)
(135,1)
(136,flags = dma_flags(dev, dma->type, dma->bus_master,\n\\n\\t\\t\\t\\t\\t  dma->transfer)
(137,if (acpi_dev_resource_interrupt(res, 0, &r)
(138,res->type)
(139,acpi_dev_resource_memory(res, &r)
(140,vendor_typed)
(141,0)
(142,i)
(143,dev)
(144,bus_master)
(145,dma)
(146,&r)
(147,r.flags = 0)
(148,&r)
(149,flags)
(150,r)
(151,case ACPI_RESOURCE_TYPE_END_TAG:)
(152,dma->channels[0] != (u8)
(153,0)
(154,break;)
(155,pnpacpi_add_irqresource(dev, &r)
(156,&r)
(157,flags = IORESOURCE_DISABLED)
(158,flags)
(159,res)
(160,*dev = data)
(161,dma->channels)
(162,dma)
(163,dev_warn(&dev->dev, "unknown resource type %d in _CRS\\n",\n\\n\\t\\t\\t res->type)
(164,r)
(165,i = 1)
(166,0)
(167,i)
(168,&r)
(169,RET)
(170,~PNP_WRITE)
(171,case ACPI_RESOURCE_TYPE_DMA:)
(172,vendor_typed)
(173,channels)
(174,channels)
(175,vendor_typed)
(176,type)
(177,dev)
(178,AE_OK)
(179,acpi_dev_resource_memory(res, &r)
(180,IORESOURCE_DISABLED)
(181,dma->channels[0])
(182,channel_count)
(183,dev)
(184,dma = &res->data.dma)
(185,dma_flags(dev, dma->type, dma->bus_master,\n\\n\\t\\t\\t\\t\\t  dma->transfer)
(186,&r)
(187,res)
(188,dma->channel_count)
(189,dev)
(190,struct acpi_resource *res)
(191,data)
(192,dev)
(193,i)
(194,"unknown resource type %d in _CRS\\n")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^