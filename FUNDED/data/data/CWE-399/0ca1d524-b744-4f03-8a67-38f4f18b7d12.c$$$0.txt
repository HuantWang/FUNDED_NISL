-----label-----
1
-----code-----
static int msm_snd_enable_codec_ext_clk(struct snd_soc_codec *codec, int enable,
					bool dapm)
{
	int ret = 0;
	struct snd_soc_card *card = codec->card;
	struct msm8939_asoc_mach_data *pdata = snd_soc_card_get_drvdata(card);

	pr_debug("%s: enable = %d clk_users = %d\n",
		__func__, enable, clk_users);

	mutex_lock(&pdata->cdc_mclk_mutex);
	if (enable) {
		clk_users++;
		if (clk_users != 1)
			goto exit;
		pr_debug("clock enable\n");
		pdata->digital_cdc_clk.clk_val = 9600000;
		ret = afe_set_digital_codec_core_clock(
			AFE_PORT_ID_PRIMARY_MI2S_RX,
			&pdata->digital_cdc_clk);
		if (ret < 0) {
			pr_err("%s: failed to enable the MCLK\n",
							__func__);
			clk_users--;
			goto exit;
		}
		pdata->msm8939_codec_fn.mclk_enable_fn(codec, 1, dapm);
	} else {
		if (clk_users > 0) {
			clk_users--;
			if (clk_users == 0) {
				pdata->msm8939_codec_fn.mclk_enable_fn(codec,
							0, dapm);
				pdata->digital_cdc_clk.clk_val = 0;
				ret = afe_set_digital_codec_core_clock(
					AFE_PORT_ID_PRIMARY_MI2S_RX,
					&pdata->digital_cdc_clk);
				if (ret < 0)
					pr_err("%s: failed disable the MCLK\n",
								__func__);
			}
		} else {
			pr_err("%s: Error releasing codec MCLK\n", __func__);
			ret = -EINVAL;
			goto exit;
		}
	}
exit:
	mutex_unlock(&pdata->cdc_mclk_mutex);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
19,24
19,25
19,26
19,27
20,21
21,22
21,23
23,24
23,25
25,26
27,28
28,29
28,30
29,30
31,32
31,33
31,34
34,35
35,36
35,37
36,37
39,40
40,41
40,42
41,42
43,44
43,45
43,46
46,47
47,48
47,49
48,49
50,51
52,53
53,54
53,55
53,56
53,57
53,58
54,55
57,58
59,60
61,62
63,64
64,65
64,66
65,66
67,68
68,69
68,70
69,70
72,73
72,74
72,75
73,74
75,76
75,77
75,78
75,79
75,80
75,81
75,82
76,77
77,78
78,79
80,81
80,82
81,82
81,83
82,83
85,86
87,88
88,89
88,90
89,90
92,93
93,94
93,95
94,95
94,96
95,96
95,97
96,97
101,102
102,103
102,104
103,104
105,106
105,107
105,108
106,107
108,109
110,111
111,112
111,113
112,113
115,116
115,117
116,117
116,118
117,118
120,121
120,122
120,123
121,122
122,123
122,124
122,125
123,124
126,127
128,129
129,130
130,131
132,133
134,135
135,136
135,137
135,138
135,139
136,137
136,138
137,138
137,139
138,139
142,143
145,146
147,148
148,149
148,150
148,151
149,150
149,151
150,151
153,154
153,155
154,155
155,156
156,157
158,159
158,160
159,160
159,161
160,161
163,164
163,165
163,166
163,167
164,165
165,166
165,167
165,168
165,169
166,167
166,168
167,168
167,169
168,169
172,173
175,176
177,178
178,179
178,180
179,180
179,181
180,181
180,182
181,182
186,187
187,188
187,189
188,189
190,191
190,192
190,193
191,192
193,194
195,196
196,197
196,198
197,198
200,201
200,202
201,202
201,203
202,203
205,206
206,207
206,208
206,209
207,208
210,211
212,213
212,214
212,215
213,214
214,215
214,216
214,217
215,216
218,219
220,221
221,222
221,223
222,223
224,225
225,226
227,228
229,230
229,231
231,232
232,233
232,234
233,234
235,236
236,237
236,238
237,238
240,241
241,242
-----nextToken-----
2,4,7,9,10,12,14,16,18,22,24,26,30,32,33,37,38,42,44,45,49,51,55,56,58,60,62,66,70,71,74,79,83,84,86,90,91,97,98,99,100,104,107,109,113,114,118,119,124,125,127,131,133,139,140,141,143,144,146,151,152,157,161,162,169,170,171,173,174,176,182,183,184,185,189,192,194,198,199,203,204,208,209,211,216,217,219,223,226,228,230,234,238,239,242
-----computeFrom-----
81,82
81,83
93,94
93,95
102,103
102,104
116,117
116,118
149,150
149,151
159,160
159,161
178,179
178,180
187,188
187,189
201,202
201,203
221,222
221,223
-----guardedBy-----
151,161
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int msm_snd_enable_codec_ext_clk(struct snd_soc_codec *codec, int enable,					bool dapm){	int ret = 0;	struct snd_soc_card *card = codec->card;	struct msm8939_asoc_mach_data *pdata = snd_soc_card_get_drvdata(card);	pr_debug("%s: enable = %d clk_users = %d\n",		__func__, enable, clk_users);	mutex_lock(&pdata->cdc_mclk_mutex);	if (enable) {		clk_users++;		if (clk_users != 1)			goto exit;		pr_debug("clock enable\n");		pdata->digital_cdc_clk.clk_val = 9600000;		ret = afe_set_digital_codec_core_clock(			AFE_PORT_ID_PRIMARY_MI2S_RX,			&pdata->digital_cdc_clk);		if (ret < 0) {			pr_err("%s: failed to enable the MCLK\n",							__func__);			clk_users--;			goto exit;		}		pdata->msm8939_codec_fn.mclk_enable_fn(codec, 1, dapm);	} else {		if (clk_users > 0) {			clk_users--;			if (clk_users == 0) {				pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm);				pdata->digital_cdc_clk.clk_val = 0;				ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk);				if (ret < 0)					pr_err("%s: failed disable the MCLK\n",								__func__);			}		} else {			pr_err("%s: Error releasing codec MCLK\n", __func__);			ret = -EINVAL;			goto exit;		}	}exit:	mutex_unlock(&pdata->cdc_mclk_mutex);	return ret;}
static int
msm_snd_enable_codec_ext_clk(struct snd_soc_codec *codec, int enable,					bool dapm)
msm_snd_enable_codec_ext_clk
struct snd_soc_codec *codec
struct snd_soc_codec
snd_soc_codec
*codec
*
codec
int enable
int
enable
enable
bool dapm
bool
dapm
dapm
{	int ret = 0;	struct snd_soc_card *card = codec->card;	struct msm8939_asoc_mach_data *pdata = snd_soc_card_get_drvdata(card);	pr_debug("%s: enable = %d clk_users = %d\n",		__func__, enable, clk_users);	mutex_lock(&pdata->cdc_mclk_mutex);	if (enable) {		clk_users++;		if (clk_users != 1)			goto exit;		pr_debug("clock enable\n");		pdata->digital_cdc_clk.clk_val = 9600000;		ret = afe_set_digital_codec_core_clock(			AFE_PORT_ID_PRIMARY_MI2S_RX,			&pdata->digital_cdc_clk);		if (ret < 0) {			pr_err("%s: failed to enable the MCLK\n",							__func__);			clk_users--;			goto exit;		}		pdata->msm8939_codec_fn.mclk_enable_fn(codec, 1, dapm);	} else {		if (clk_users > 0) {			clk_users--;			if (clk_users == 0) {				pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm);				pdata->digital_cdc_clk.clk_val = 0;				ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk);				if (ret < 0)					pr_err("%s: failed disable the MCLK\n",								__func__);			}		} else {			pr_err("%s: Error releasing codec MCLK\n", __func__);			ret = -EINVAL;			goto exit;		}	}exit:	mutex_unlock(&pdata->cdc_mclk_mutex);	return ret;}
int ret = 0;
int ret = 0;
int
ret = 0
ret
= 0
0
struct snd_soc_card *card = codec->card;
struct snd_soc_card *card = codec->card;
struct snd_soc_card
snd_soc_card
*card = codec->card
*
card
= codec->card
codec->card
codec
codec
card
struct msm8939_asoc_mach_data *pdata = snd_soc_card_get_drvdata(card);
struct msm8939_asoc_mach_data *pdata = snd_soc_card_get_drvdata(card);
struct msm8939_asoc_mach_data
msm8939_asoc_mach_data
*pdata = snd_soc_card_get_drvdata(card)
*
pdata
= snd_soc_card_get_drvdata(card)
snd_soc_card_get_drvdata(card)
snd_soc_card_get_drvdata
snd_soc_card_get_drvdata
card
card
pr_debug("%s: enable = %d clk_users = %d\n",		__func__, enable, clk_users);
pr_debug("%s: enable = %d clk_users = %d\n",		__func__, enable, clk_users)
pr_debug
pr_debug
"%s: enable = %d clk_users = %d\n"
__func__
__func__
enable
enable
clk_users
clk_users
mutex_lock(&pdata->cdc_mclk_mutex);
mutex_lock(&pdata->cdc_mclk_mutex)
mutex_lock
mutex_lock
&pdata->cdc_mclk_mutex
pdata->cdc_mclk_mutex
pdata
pdata
cdc_mclk_mutex
if (enable) {		clk_users++;		if (clk_users != 1)			goto exit;		pr_debug("clock enable\n");		pdata->digital_cdc_clk.clk_val = 9600000;		ret = afe_set_digital_codec_core_clock(			AFE_PORT_ID_PRIMARY_MI2S_RX,			&pdata->digital_cdc_clk);		if (ret < 0) {			pr_err("%s: failed to enable the MCLK\n",							__func__);			clk_users--;			goto exit;		}		pdata->msm8939_codec_fn.mclk_enable_fn(codec, 1, dapm);	} else {		if (clk_users > 0) {			clk_users--;			if (clk_users == 0) {				pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm);				pdata->digital_cdc_clk.clk_val = 0;				ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk);				if (ret < 0)					pr_err("%s: failed disable the MCLK\n",								__func__);			}		} else {			pr_err("%s: Error releasing codec MCLK\n", __func__);			ret = -EINVAL;			goto exit;		}	}
enable
enable
{		clk_users++;		if (clk_users != 1)			goto exit;		pr_debug("clock enable\n");		pdata->digital_cdc_clk.clk_val = 9600000;		ret = afe_set_digital_codec_core_clock(			AFE_PORT_ID_PRIMARY_MI2S_RX,			&pdata->digital_cdc_clk);		if (ret < 0) {			pr_err("%s: failed to enable the MCLK\n",							__func__);			clk_users--;			goto exit;		}		pdata->msm8939_codec_fn.mclk_enable_fn(codec, 1, dapm);	}
clk_users++;
clk_users++
clk_users
clk_users
if (clk_users != 1)			goto exit;
clk_users != 1
clk_users
clk_users
1
goto exit;
exit
pr_debug("clock enable\n");
pr_debug("clock enable\n")
pr_debug
pr_debug
"clock enable\n"
pdata->digital_cdc_clk.clk_val = 9600000;
pdata->digital_cdc_clk.clk_val = 9600000
pdata->digital_cdc_clk.clk_val
pdata->digital_cdc_clk
pdata
pdata
digital_cdc_clk
clk_val
9600000
ret = afe_set_digital_codec_core_clock(			AFE_PORT_ID_PRIMARY_MI2S_RX,			&pdata->digital_cdc_clk);
ret = afe_set_digital_codec_core_clock(			AFE_PORT_ID_PRIMARY_MI2S_RX,			&pdata->digital_cdc_clk)
ret
ret
afe_set_digital_codec_core_clock(			AFE_PORT_ID_PRIMARY_MI2S_RX,			&pdata->digital_cdc_clk)
afe_set_digital_codec_core_clock
afe_set_digital_codec_core_clock
AFE_PORT_ID_PRIMARY_MI2S_RX
AFE_PORT_ID_PRIMARY_MI2S_RX
&pdata->digital_cdc_clk
pdata->digital_cdc_clk
pdata
pdata
digital_cdc_clk
if (ret < 0) {			pr_err("%s: failed to enable the MCLK\n",							__func__);			clk_users--;			goto exit;		}
ret < 0
ret
ret
0
{			pr_err("%s: failed to enable the MCLK\n",							__func__);			clk_users--;			goto exit;		}
pr_err("%s: failed to enable the MCLK\n",							__func__);
pr_err("%s: failed to enable the MCLK\n",							__func__)
pr_err
pr_err
"%s: failed to enable the MCLK\n"
__func__
__func__
clk_users--;
clk_users--
clk_users
clk_users
goto exit;
exit
pdata->msm8939_codec_fn.mclk_enable_fn(codec, 1, dapm);
pdata->msm8939_codec_fn.mclk_enable_fn(codec, 1, dapm)
pdata->msm8939_codec_fn.mclk_enable_fn
pdata->msm8939_codec_fn
pdata
pdata
msm8939_codec_fn
mclk_enable_fn
codec
codec
1
dapm
dapm
{		if (clk_users > 0) {			clk_users--;			if (clk_users == 0) {				pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm);				pdata->digital_cdc_clk.clk_val = 0;				ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk);				if (ret < 0)					pr_err("%s: failed disable the MCLK\n",								__func__);			}		} else {			pr_err("%s: Error releasing codec MCLK\n", __func__);			ret = -EINVAL;			goto exit;		}	}
if (clk_users > 0) {			clk_users--;			if (clk_users == 0) {				pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm);				pdata->digital_cdc_clk.clk_val = 0;				ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk);				if (ret < 0)					pr_err("%s: failed disable the MCLK\n",								__func__);			}		} else {			pr_err("%s: Error releasing codec MCLK\n", __func__);			ret = -EINVAL;			goto exit;		}
clk_users > 0
clk_users
clk_users
0
{			clk_users--;			if (clk_users == 0) {				pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm);				pdata->digital_cdc_clk.clk_val = 0;				ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk);				if (ret < 0)					pr_err("%s: failed disable the MCLK\n",								__func__);			}		}
clk_users--;
clk_users--
clk_users
clk_users
if (clk_users == 0) {				pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm);				pdata->digital_cdc_clk.clk_val = 0;				ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk);				if (ret < 0)					pr_err("%s: failed disable the MCLK\n",								__func__);			}
clk_users == 0
clk_users
clk_users
0
{				pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm);				pdata->digital_cdc_clk.clk_val = 0;				ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk);				if (ret < 0)					pr_err("%s: failed disable the MCLK\n",								__func__);			}
pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm);
pdata->msm8939_codec_fn.mclk_enable_fn(codec,							0, dapm)
pdata->msm8939_codec_fn.mclk_enable_fn
pdata->msm8939_codec_fn
pdata
pdata
msm8939_codec_fn
mclk_enable_fn
codec
codec
0
dapm
dapm
pdata->digital_cdc_clk.clk_val = 0;
pdata->digital_cdc_clk.clk_val = 0
pdata->digital_cdc_clk.clk_val
pdata->digital_cdc_clk
pdata
pdata
digital_cdc_clk
clk_val
0
ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk);
ret = afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk)
ret
ret
afe_set_digital_codec_core_clock(					AFE_PORT_ID_PRIMARY_MI2S_RX,					&pdata->digital_cdc_clk)
afe_set_digital_codec_core_clock
afe_set_digital_codec_core_clock
AFE_PORT_ID_PRIMARY_MI2S_RX
AFE_PORT_ID_PRIMARY_MI2S_RX
&pdata->digital_cdc_clk
pdata->digital_cdc_clk
pdata
pdata
digital_cdc_clk
if (ret < 0)					pr_err("%s: failed disable the MCLK\n",								__func__);
ret < 0
ret
ret
0
pr_err("%s: failed disable the MCLK\n",								__func__);
pr_err("%s: failed disable the MCLK\n",								__func__)
pr_err
pr_err
"%s: failed disable the MCLK\n"
__func__
__func__
{			pr_err("%s: Error releasing codec MCLK\n", __func__);			ret = -EINVAL;			goto exit;		}
pr_err("%s: Error releasing codec MCLK\n", __func__);
pr_err("%s: Error releasing codec MCLK\n", __func__)
pr_err
pr_err
"%s: Error releasing codec MCLK\n"
__func__
__func__
ret = -EINVAL;
ret = -EINVAL
ret
ret
-EINVAL
EINVAL
EINVAL
goto exit;
exit
exit:	mutex_unlock(&pdata->cdc_mclk_mutex);
exit
mutex_unlock(&pdata->cdc_mclk_mutex);
mutex_unlock(&pdata->cdc_mclk_mutex)
mutex_unlock
mutex_unlock
&pdata->cdc_mclk_mutex
pdata->cdc_mclk_mutex
pdata
pdata
cdc_mclk_mutex
return ret;
ret
ret
-----joern-----
(94,124,0)
(82,121,0)
(1,49,0)
(14,7,0)
(25,108,0)
(97,65,0)
(7,81,0)
(70,53,0)
(70,49,0)
(50,126,0)
(35,61,0)
(60,50,0)
(9,62,0)
(35,119,0)
(4,10,0)
(3,76,0)
(100,70,0)
(41,45,0)
(70,105,0)
(8,103,0)
(87,112,0)
(59,8,0)
(22,69,0)
(126,50,0)
(124,94,0)
(124,61,0)
(46,17,0)
(43,70,0)
(29,109,0)
(112,122,0)
(47,108,0)
(116,121,0)
(61,49,0)
(127,44,0)
(58,42,0)
(79,49,0)
(73,35,0)
(107,22,0)
(11,61,0)
(110,124,0)
(101,92,0)
(53,111,0)
(83,108,0)
(61,12,0)
(29,108,0)
(91,27,0)
(55,26,0)
(29,102,0)
(80,29,0)
(5,22,0)
(115,8,0)
(24,122,0)
(107,56,0)
(14,61,0)
(74,27,0)
(89,35,0)
(18,71,0)
(36,29,0)
(40,83,0)
(6,47,0)
(28,45,0)
(54,75,0)
(118,92,0)
(39,26,0)
(26,105,0)
(75,45,0)
(120,113,0)
(56,61,0)
(50,101,0)
(44,49,0)
(90,56,0)
(37,78,0)
(12,61,0)
(94,113,0)
(45,75,0)
(7,14,0)
(114,65,0)
(123,49,0)
(30,29,0)
(101,50,0)
(104,49,0)
(126,69,0)
(45,61,0)
(84,78,0)
(75,83,0)
(42,108,0)
(56,107,0)
(52,76,0)
(76,77,0)
(10,109,0)
(0,14,0)
(81,49,0)
(64,53,0)
(113,105,0)
(92,101,0)
(95,14,0)
(48,10,0)
(105,113,0)
(99,82,0)
(113,94,0)
(51,17,0)
(53,121,0)
(27,126,0)
(20,107,0)
(2,105,0)
(106,126,0)
(93,76,0)
(68,49,0)
(32,125,0)
(57,44,0)
(33,108,0)
(16,69,0)
(72,111,0)
(67,82,0)
(104,119,0)
(125,63,0)
(19,63,0)
(31,124,0)
(70,44,0)
(105,108,0)
(10,69,0)
(78,122,0)
(86,92,0)
(111,53,0)
(88,15,0)
(119,104,0)
(98,10,0)
(8,102,0)
(85,76,0)
(10,102,0)
(66,49,0)
(76,49,0)
(23,56,0)
(38,62,0)
(34,12,0)
(12,103,0)
(103,49,0)
(81,7,0)
(92,61,0)
(96,71,0)
(70,126,0)
(13,103,0)
(103,8,0)
(119,35,0)
(3,52,1)
(110,120,1)
(72,64,1)
(97,114,1)
(45,28,1)
(87,78,1)
(78,84,1)
(83,40,1)
(43,70,1)
(95,76,1)
(45,61,1)
(124,31,1)
(70,126,1)
(107,20,1)
(12,103,1)
(73,116,1)
(10,102,1)
(8,59,1)
(73,29,1)
(60,106,1)
(91,126,1)
(5,107,1)
(55,105,1)
(103,8,1)
(37,26,1)
(59,115,1)
(38,27,1)
(10,109,1)
(32,65,1)
(75,45,1)
(73,21,1)
(39,55,1)
(11,103,1)
(22,5,1)
(65,97,1)
(73,24,1)
(56,23,1)
(75,54,1)
(29,109,1)
(13,44,1)
(74,91,1)
(53,111,1)
(9,38,1)
(124,61,1)
(70,44,1)
(29,36,1)
(118,60,1)
(104,119,1)
(64,82,1)
(41,42,1)
(46,51,1)
(99,65,1)
(23,90,1)
(112,87,1)
(82,67,1)
(73,17,1)
(94,124,1)
(44,127,1)
(126,50,1)
(26,39,1)
(71,18,1)
(50,101,1)
(105,113,1)
(27,126,1)
(114,117,1)
(14,61,1)
(76,85,1)
(58,71,1)
(70,100,1)
(52,61,1)
(62,9,1)
(120,2,1)
(51,125,1)
(18,96,1)
(111,72,1)
(67,99,1)
(117,81,1)
(98,4,1)
(92,61,1)
(40,75,1)
(6,117,1)
(48,17,1)
(116,53,1)
(12,34,1)
(8,102,1)
(80,30,1)
(84,37,1)
(101,92,1)
(24,112,1)
(47,6,1)
(73,62,1)
(10,98,1)
(85,93,1)
(106,22,1)
(14,0,1)
(35,61,1)
(27,74,1)
(96,47,1)
(42,58,1)
(31,110,1)
(34,11,1)
(81,7,1)
(35,89,1)
(70,53,1)
(115,13,1)
(113,94,1)
(29,102,1)
(93,3,1)
(36,80,1)
(20,56,1)
(73,27,1)
(92,86,1)
(2,83,1)
(90,10,1)
(21,71,1)
(86,118,1)
(119,35,1)
(61,12,1)
(28,41,1)
(0,95,1)
(125,32,1)
(56,61,1)
(70,105,1)
(26,105,1)
(17,46,1)
(100,104,1)
(76,77,1)
(89,73,1)
(107,56,1)
(54,45,1)
(7,14,1)
(127,57,1)
(4,48,1)
(30,26,1)
(72,65,2)
(94,71,2)
(30,26,2)
(17,65,2)
(98,17,2)
(70,126,2)
(53,65,2)
(78,26,2)
(75,45,2)
(22,17,2)
(2,71,2)
(4,17,2)
(7,14,2)
(43,70,2)
(126,50,2)
(27,17,2)
(40,71,2)
(46,65,2)
(99,65,2)
(60,17,2)
(32,65,2)
(118,17,2)
(81,7,2)
(92,17,2)
(50,17,2)
(94,124,2)
(39,71,2)
(28,71,2)
(56,61,2)
(104,119,2)
(21,71,2)
(45,61,2)
(114,117,2)
(70,53,2)
(101,92,2)
(75,71,2)
(119,35,2)
(67,65,2)
(62,27,2)
(29,102,2)
(18,117,2)
(105,71,2)
(10,17,2)
(113,94,2)
(45,71,2)
(14,61,2)
(126,17,2)
(53,111,2)
(55,71,2)
(120,71,2)
(110,71,2)
(116,65,2)
(64,65,2)
(6,117,2)
(54,71,2)
(27,126,2)
(92,61,2)
(8,102,2)
(61,12,2)
(91,17,2)
(74,17,2)
(111,65,2)
(113,71,2)
(105,113,2)
(51,65,2)
(41,71,2)
(70,105,2)
(26,105,2)
(37,26,2)
(107,17,2)
(87,26,2)
(42,71,2)
(35,61,2)
(112,26,2)
(5,17,2)
(84,26,2)
(90,17,2)
(83,71,2)
(58,71,2)
(24,26,2)
(82,65,2)
(36,26,2)
(96,117,2)
(80,26,2)
(50,101,2)
(26,71,2)
(47,117,2)
(125,65,2)
(10,102,2)
(65,117,2)
(31,71,2)
(71,117,2)
(10,109,2)
(124,71,2)
(97,117,2)
(76,77,2)
(107,56,2)
(106,17,2)
(48,17,2)
(23,17,2)
(86,17,2)
(29,26,2)
(101,17,2)
(124,61,2)
(29,109,2)
(70,44,2)
(20,17,2)
(9,27,2)
(38,27,2)
(103,8,2)
(12,103,2)
(56,17,2)
-----------------------------------
(0,cdc_mclk_mutex)
(1,exit:)
(2,ret)
(3,__func__)
(4,0)
(5,0)
(6,clk_users)
(7,&pdata->cdc_mclk_mutex)
(8,codec->card)
(9,__func__)
(10,pdata->msm8939_codec_fn.mclk_enable_fn(codec,\n\\n\\t\\t\\t\\t\\t\\t\\t0, dapm)
(11,pdata)
(12,snd_soc_card_get_drvdata(card)
(13,card)
(14,pdata->cdc_mclk_mutex)
(15,)
(16,if (ret < 0)
(17,clk_users == 0)
(18,1)
(19,if (clk_users == 0)
(20,clk_val)
(21,goto exit;)
(22,pdata->digital_cdc_clk.clk_val = 0)
(23,digital_cdc_clk)
(24,goto exit;)
(25,if (ret < 0)
(26,ret < 0)
(27,ret < 0)
(28,digital_cdc_clk)
(29,pdata->msm8939_codec_fn.mclk_enable_fn(codec, 1, dapm)
(30,codec)
(31,digital_cdc_clk)
(32,clk_users)
(33,if (clk_users != 1)
(34,card)
(35,pdata->cdc_mclk_mutex)
(36,dapm)
(37,"%s: failed to enable the MCLK\\n")
(38,"%s: failed disable the MCLK\\n")
(39,0)
(40,9600000)
(41,pdata)
(42,pr_debug("clock enable\\n")
(43,RET)
(44,ret = 0)
(45,pdata->digital_cdc_clk)
(46,0)
(47,clk_users++)
(48,codec)
(49,)
(50,afe_set_digital_codec_core_clock(\n\\n\\t\\t\\t\\t\\tAFE_PORT_ID_PRIMARY_MI2S_RX,\n\\n\\t\\t\\t\\t\\t&pdata->digital_cdc_clk)
(51,clk_users)
(52,"%s: enable = %d clk_users = %d\\n")
(53,ret = -EINVAL)
(54,clk_val)
(55,ret)
(56,pdata->digital_cdc_clk)
(57,ret)
(58,"clock enable\\n")
(59,card)
(60,AFE_PORT_ID_PRIMARY_MI2S_RX)
(61,*pdata = snd_soc_card_get_drvdata(card)
(62,pr_err("%s: failed disable the MCLK\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t\\t__func__)
(63,)
(64,ret)
(65,clk_users > 0)
(66,card)
(67,__func__)
(68,if (enable)
(69,)
(70,return ret;)
(71,clk_users != 1)
(72,EINVAL)
(73,pdata)
(74,0)
(75,pdata->digital_cdc_clk.clk_val)
(76,pr_debug("%s: enable = %d clk_users = %d\\n",\n\\n\\t\\t__func__, enable, clk_users)
(77,int enable)
(78,pr_err("%s: failed to enable the MCLK\\n",\n\\n\\t\\t\\t\\t\\t\\t\\t__func__)
(79,pdata)
(80,1)
(81,mutex_lock(&pdata->cdc_mclk_mutex)
(82,pr_err("%s: Error releasing codec MCLK\\n", __func__)
(83,pdata->digital_cdc_clk.clk_val = 9600000)
(84,__func__)
(85,clk_users)
(86,digital_cdc_clk)
(87,clk_users)
(88,if (clk_users > 0)
(89,cdc_mclk_mutex)
(90,pdata)
(91,ret)
(92,pdata->digital_cdc_clk)
(93,enable)
(94,&pdata->digital_cdc_clk)
(95,pdata)
(96,clk_users)
(97,0)
(98,dapm)
(99,"%s: Error releasing codec MCLK\\n")
(100,ret)
(101,&pdata->digital_cdc_clk)
(102,struct snd_soc_codec *codec)
(103,*card = codec->card)
(104,mutex_unlock(&pdata->cdc_mclk_mutex)
(105,ret = afe_set_digital_codec_core_clock(\n\\n\\t\\t\\tAFE_PORT_ID_PRIMARY_MI2S_RX,\n\\n\\t\\t\\t&pdata->digital_cdc_clk)
(106,ret)
(107,pdata->digital_cdc_clk.clk_val)
(108,)
(109,bool dapm)
(110,pdata)
(111,-EINVAL)
(112,clk_users--)
(113,afe_set_digital_codec_core_clock(\n\\n\\t\\t\\tAFE_PORT_ID_PRIMARY_MI2S_RX,\n\\n\\t\\t\\t&pdata->digital_cdc_clk)
(114,clk_users)
(115,codec)
(116,goto exit;)
(117,enable)
(118,pdata)
(119,&pdata->cdc_mclk_mutex)
(120,AFE_PORT_ID_PRIMARY_MI2S_RX)
(121,)
(122,)
(123,ret)
(124,pdata->digital_cdc_clk)
(125,clk_users--)
(126,ret = afe_set_digital_codec_core_clock(\n\\n\\t\\t\\t\\t\\tAFE_PORT_ID_PRIMARY_MI2S_RX,\n\\n\\t\\t\\t\\t\\t&pdata->digital_cdc_clk)
(127,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^