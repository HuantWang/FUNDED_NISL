-----label-----
1
-----code-----
static void maybe_destroy_workers(struct worker_pool *pool)
{
	while (too_many_workers(pool)) {
		struct worker *worker;
		unsigned long expires;

		worker = list_entry(pool->idle_list.prev, struct worker, entry);
		expires = worker->last_active + IDLE_WORKER_TIMEOUT;

		if (time_before(jiffies, expires)) {
			mod_timer(&pool->idle_timer, expires);
			break;
		}

		destroy_worker(worker);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
12,13
12,14
13,14
13,15
14,15
16,17
18,19
18,20
18,21
18,22
18,23
18,24
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
29,30
31,32
32,33
33,34
33,35
34,35
36,37
36,38
37,38
37,39
38,39
41,42
43,44
43,45
44,45
44,46
44,47
45,46
47,48
49,50
51,52
51,53
52,53
53,54
53,55
53,56
54,55
56,57
57,58
57,59
58,59
61,62
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,7,9,10,15,17,22,24,25,28,30,35,39,40,42,46,48,50,55,59,60,62,63,67,69
-----computeFrom-----
33,34
33,35
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;WhileStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ProblemStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void maybe_destroy_workers(struct worker_pool *pool){	while (too_many_workers(pool)) {		struct worker *worker;		unsigned long expires;		worker = list_entry(pool->idle_list.prev, struct worker, entry);		expires = worker->last_active + IDLE_WORKER_TIMEOUT;		if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}		destroy_worker(worker);	}}
static void
maybe_destroy_workers(struct worker_pool *pool)
maybe_destroy_workers
struct worker_pool *pool
struct worker_pool
worker_pool
*pool
*
pool
{	while (too_many_workers(pool)) {		struct worker *worker;		unsigned long expires;		worker = list_entry(pool->idle_list.prev, struct worker, entry);		expires = worker->last_active + IDLE_WORKER_TIMEOUT;		if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}		destroy_worker(worker);	}}
while (too_many_workers(pool)) {		struct worker *worker;		unsigned long expires;		worker = list_entry(pool->idle_list.prev, struct worker, entry);		expires = worker->last_active + IDLE_WORKER_TIMEOUT;		if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}		destroy_worker(worker);	}
too_many_workers(pool)
too_many_workers
too_many_workers
pool
pool
{		struct worker *worker;		unsigned long expires;		worker = list_entry(pool->idle_list.prev, struct worker, entry);		expires = worker->last_active + IDLE_WORKER_TIMEOUT;		if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}		destroy_worker(worker);	}
struct worker *worker;
struct worker *worker;
struct worker
worker
*worker
*
worker
unsigned long expires;
unsigned long expires;
unsigned long
expires
expires
worker = list_entry(pool->idle_list.prev, struct worker, entry);
expires = worker->last_active + IDLE_WORKER_TIMEOUT;
expires = worker->last_active + IDLE_WORKER_TIMEOUT
expires
expires
worker->last_active + IDLE_WORKER_TIMEOUT
worker->last_active
worker
worker
last_active
IDLE_WORKER_TIMEOUT
IDLE_WORKER_TIMEOUT
if (time_before(jiffies, expires)) {			mod_timer(&pool->idle_timer, expires);			break;		}
time_before(jiffies, expires)
time_before
time_before
jiffies
jiffies
expires
expires
{			mod_timer(&pool->idle_timer, expires);			break;		}
mod_timer(&pool->idle_timer, expires);
mod_timer(&pool->idle_timer, expires)
mod_timer
mod_timer
&pool->idle_timer
pool->idle_timer
pool
pool
idle_timer
expires
expires
break;
destroy_worker(worker);
destroy_worker(worker)
destroy_worker
destroy_worker
worker
worker
-----joern-----
(18,6,0)
(6,4,0)
(14,4,0)
(12,26,0)
(27,9,0)
(1,9,0)
(19,9,0)
(5,15,0)
(1,26,0)
(21,5,0)
(24,11,0)
(26,1,0)
(4,14,0)
(6,1,0)
(17,10,0)
(3,8,0)
(26,23,0)
(14,15,0)
(29,1,0)
(10,1,0)
(2,9,0)
(7,23,0)
(13,14,0)
(0,14,0)
(6,11,0)
(4,6,0)
(8,9,0)
(25,10,0)
(22,20,0)
(28,23,0)
(23,26,0)
(14,0,1)
(10,25,1)
(16,24,1)
(3,10,1)
(28,7,1)
(13,10,1)
(29,5,1)
(8,3,1)
(26,12,1)
(18,4,1)
(4,14,1)
(23,28,1)
(5,21,1)
(26,23,1)
(7,29,1)
(12,23,1)
(5,15,1)
(0,13,1)
(14,15,1)
(16,5,1)
(17,1,1)
(24,6,1)
(1,26,1)
(6,18,1)
(25,17,1)
(6,4,1)
(21,8,1)
(10,1,1)
(6,1,1)
(5,10,2)
(17,5,2)
(1,5,2)
(21,10,2)
(13,10,2)
(24,10,2)
(25,5,2)
(7,5,2)
(26,23,2)
(6,10,2)
(28,5,2)
(26,5,2)
(5,15,2)
(14,10,2)
(6,4,2)
(4,14,2)
(23,5,2)
(1,26,2)
(10,5,2)
(12,5,2)
(8,10,2)
(29,5,2)
(0,10,2)
(10,1,2)
(6,1,2)
(3,10,2)
(4,10,2)
(18,10,2)
(14,15,2)
-----------------------------------
(0,idle_timer)
(1,expires = worker->last_active + IDLE_WORKER_TIMEOUT)
(2,if (time_before(jiffies, expires)
(3,worker)
(4,&pool->idle_timer)
(5,too_many_workers(pool)
(6,mod_timer(&pool->idle_timer, expires)
(7,worker)
(8,destroy_worker(worker)
(9,)
(10,time_before(jiffies, expires)
(11,)
(12,IDLE_WORKER_TIMEOUT)
(13,pool)
(14,pool->idle_timer)
(15,struct worker_pool *pool)
(16,RET)
(17,jiffies)
(18,expires)
(19,expires)
(20,)
(21,pool)
(22,while (too_many_workers(pool)
(23,worker->last_active)
(24,break;)
(25,expires)
(26,worker->last_active + IDLE_WORKER_TIMEOUT)
(27,worker)
(28,last_active)
(29,expires)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^