-----label-----
1
-----code-----
static void sci_config_port(struct uart_port *port, int flags)
{
	if (flags & UART_CONFIG_TYPE) {
		struct sci_port *sport = to_sci_port(port);

		port->type = sport->cfg->type;
		sci_request_port(port);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
16,17
16,18
17,18
17,19
18,19
20,21
22,23
22,24
22,25
23,24
24,25
24,26
25,26
27,28
27,29
27,30
30,31
31,32
31,33
32,33
34,35
36,37
37,38
37,39
38,39
38,40
39,40
42,43
42,44
43,44
43,45
44,45
48,49
49,50
49,51
50,51
52,53
-----nextToken-----
2,4,7,9,10,12,14,19,21,26,28,29,33,35,40,41,45,46,47,51,53
-----computeFrom-----
17,18
17,19
37,38
37,39
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void sci_config_port(struct uart_port *port, int flags){	if (flags & UART_CONFIG_TYPE) {		struct sci_port *sport = to_sci_port(port);		port->type = sport->cfg->type;		sci_request_port(port);	}}
static void
sci_config_port(struct uart_port *port, int flags)
sci_config_port
struct uart_port *port
struct uart_port
uart_port
*port
*
port
int flags
int
flags
flags
{	if (flags & UART_CONFIG_TYPE) {		struct sci_port *sport = to_sci_port(port);		port->type = sport->cfg->type;		sci_request_port(port);	}}
if (flags & UART_CONFIG_TYPE) {		struct sci_port *sport = to_sci_port(port);		port->type = sport->cfg->type;		sci_request_port(port);	}
flags & UART_CONFIG_TYPE
flags
flags
UART_CONFIG_TYPE
UART_CONFIG_TYPE
{		struct sci_port *sport = to_sci_port(port);		port->type = sport->cfg->type;		sci_request_port(port);	}
struct sci_port *sport = to_sci_port(port);
struct sci_port *sport = to_sci_port(port);
struct sci_port
sci_port
*sport = to_sci_port(port)
*
sport
= to_sci_port(port)
to_sci_port(port)
to_sci_port
to_sci_port
port
port
port->type = sport->cfg->type;
port->type = sport->cfg->type
port->type
port
port
type
sport->cfg->type
sport->cfg
sport
sport
cfg
type
sci_request_port(port);
sci_request_port(port)
sci_request_port
sci_request_port
port
port
-----joern-----
(12,22,0)
(9,8,0)
(0,7,0)
(1,8,0)
(3,7,0)
(1,24,0)
(24,11,0)
(23,22,0)
(16,11,0)
(7,1,0)
(4,8,0)
(20,10,0)
(4,12,0)
(5,10,0)
(11,24,0)
(12,4,0)
(10,6,0)
(24,1,0)
(14,23,0)
(15,4,0)
(11,4,0)
(19,12,0)
(7,22,0)
(23,8,0)
(21,11,0)
(13,24,0)
(2,17,0)
(19,15,1)
(13,11,1)
(18,10,1)
(0,3,1)
(10,5,1)
(11,16,1)
(14,1,1)
(24,11,1)
(24,13,1)
(21,7,1)
(3,4,1)
(23,22,1)
(16,21,1)
(12,22,1)
(23,14,1)
(10,6,1)
(12,19,1)
(15,10,1)
(18,23,1)
(1,24,1)
(5,20,1)
(4,12,1)
(7,0,1)
(11,4,1)
(7,22,1)
(23,22,2)
(14,10,2)
(11,10,2)
(10,6,2)
(13,10,2)
(0,10,2)
(12,22,2)
(24,10,2)
(7,10,2)
(21,10,2)
(4,12,2)
(23,10,2)
(24,11,2)
(11,4,2)
(1,24,2)
(3,10,2)
(15,10,2)
(16,10,2)
(1,10,2)
(12,10,2)
(4,10,2)
(7,22,2)
(19,10,2)
-----------------------------------
(0,type)
(1,port->type = sport->cfg->type)
(2,if (flags & UART_CONFIG_TYPE)
(3,port)
(4,*sport = to_sci_port(port)
(5,UART_CONFIG_TYPE)
(6,int flags)
(7,port->type)
(8,)
(9,sport)
(10,flags & UART_CONFIG_TYPE)
(11,sport->cfg)
(12,to_sci_port(port)
(13,type)
(14,port)
(15,sport)
(16,cfg)
(17,)
(18,RET)
(19,port)
(20,flags)
(21,sport)
(22,struct uart_port *port)
(23,sci_request_port(port)
(24,sport->cfg->type)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^