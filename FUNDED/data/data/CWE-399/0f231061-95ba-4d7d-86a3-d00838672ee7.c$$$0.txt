-----label-----
1
-----code-----
static void __usbhsg_recip_send_status(struct usbhsg_gpriv *gpriv,
				       unsigned short status)
{
	struct usbhsg_uep *dcp = usbhsg_gpriv_to_dcp(gpriv);
	struct usbhs_pipe *pipe = usbhsg_uep_to_pipe(dcp);
	struct device *dev = usbhsg_gpriv_to_dev(gpriv);
	struct usb_request *req;
	__le16 *buf;

	/* alloc new usb_request for recip */
	req = usb_ep_alloc_request(&dcp->ep, GFP_ATOMIC);
	if (!req) {
		dev_err(dev, "recip request allocation fail\n");
		return;
	}

	/* alloc recip data buffer */
	buf = kmalloc(sizeof(*buf), GFP_ATOMIC);
	if (!buf) {
		usb_ep_free_request(&dcp->ep, req);
		return;
	}

	/* recip data is status */
	*buf = cpu_to_le16(status);

	/* allocated usb_request/buffer will be freed */
	req->complete	= __usbhsg_recip_send_complete;
	req->buf	= buf;
	req->length	= sizeof(*buf);
	req->zero	= 0;

	/* push packet */
	pipe->handler = &usbhs_fifo_pio_push_handler;
	usbhsg_queue_push(dcp, usbhsg_req_to_ureq(req));
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
15,26
15,27
15,28
15,29
15,30
15,31
16,17
17,18
17,19
18,19
20,21
20,22
20,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
36,37
37,38
37,39
38,39
40,41
42,43
43,44
43,45
44,45
46,47
46,48
46,49
49,50
50,51
50,52
51,52
53,54
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
66,67
66,68
69,70
70,71
70,72
71,72
73,74
73,75
73,76
74,75
76,77
77,78
77,79
78,79
81,82
83,84
83,85
84,85
85,86
87,88
87,89
88,89
89,90
89,91
89,92
90,91
92,93
96,97
97,98
97,99
98,99
100,101
100,102
100,103
101,102
103,104
104,105
105,106
106,107
108,109
110,111
110,112
111,112
112,113
114,115
114,116
115,116
116,117
116,118
116,119
117,118
119,120
120,121
120,122
121,122
124,125
127,128
128,129
128,130
129,130
130,131
132,133
132,134
133,134
135,136
137,138
138,139
138,140
139,140
139,141
140,141
143,144
145,146
146,147
146,148
147,148
147,149
148,149
151,152
153,154
154,155
154,156
155,156
155,157
156,157
159,160
160,161
161,162
162,163
164,165
165,166
165,167
166,167
166,168
167,168
171,172
172,173
172,174
173,174
173,175
174,175
177,178
178,179
180,181
181,182
181,183
181,184
182,183
184,185
186,187
186,188
187,188
189,190
-----nextToken-----
2,4,7,9,10,12,14,19,21,22,26,28,32,34,35,39,41,45,47,48,52,54,58,60,61,65,67,68,72,75,79,80,82,86,91,93,94,95,99,102,107,109,113,118,122,123,125,126,131,134,136,141,142,144,149,150,152,157,158,163,168,169,170,175,176,179,183,185,188,190
-----computeFrom-----
70,71
70,72
97,98
97,99
128,129
128,130
138,139
138,140
146,147
146,148
154,155
154,156
165,166
165,167
172,173
172,174
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void __usbhsg_recip_send_status(struct usbhsg_gpriv *gpriv,				       unsigned short status){	struct usbhsg_uep *dcp = usbhsg_gpriv_to_dcp(gpriv);	struct usbhs_pipe *pipe = usbhsg_uep_to_pipe(dcp);	struct device *dev = usbhsg_gpriv_to_dev(gpriv);	struct usb_request *req;	__le16 *buf;	/* alloc new usb_request for recip */	req = usb_ep_alloc_request(&dcp->ep, GFP_ATOMIC);	if (!req) {		dev_err(dev, "recip request allocation fail\n");		return;	}	/* alloc recip data buffer */	buf = kmalloc(sizeof(*buf), GFP_ATOMIC);	if (!buf) {		usb_ep_free_request(&dcp->ep, req);		return;	}	/* recip data is status */	*buf = cpu_to_le16(status);	/* allocated usb_request/buffer will be freed */	req->complete	= __usbhsg_recip_send_complete;	req->buf	= buf;	req->length	= sizeof(*buf);	req->zero	= 0;	/* push packet */	pipe->handler = &usbhs_fifo_pio_push_handler;	usbhsg_queue_push(dcp, usbhsg_req_to_ureq(req));}
static void
__usbhsg_recip_send_status(struct usbhsg_gpriv *gpriv,				       unsigned short status)
__usbhsg_recip_send_status
struct usbhsg_gpriv *gpriv
struct usbhsg_gpriv
usbhsg_gpriv
*gpriv
*
gpriv
unsigned short status
unsigned short
status
status
{	struct usbhsg_uep *dcp = usbhsg_gpriv_to_dcp(gpriv);	struct usbhs_pipe *pipe = usbhsg_uep_to_pipe(dcp);	struct device *dev = usbhsg_gpriv_to_dev(gpriv);	struct usb_request *req;	__le16 *buf;	/* alloc new usb_request for recip */	req = usb_ep_alloc_request(&dcp->ep, GFP_ATOMIC);	if (!req) {		dev_err(dev, "recip request allocation fail\n");		return;	}	/* alloc recip data buffer */	buf = kmalloc(sizeof(*buf), GFP_ATOMIC);	if (!buf) {		usb_ep_free_request(&dcp->ep, req);		return;	}	/* recip data is status */	*buf = cpu_to_le16(status);	/* allocated usb_request/buffer will be freed */	req->complete	= __usbhsg_recip_send_complete;	req->buf	= buf;	req->length	= sizeof(*buf);	req->zero	= 0;	/* push packet */	pipe->handler = &usbhs_fifo_pio_push_handler;	usbhsg_queue_push(dcp, usbhsg_req_to_ureq(req));}
struct usbhsg_uep *dcp = usbhsg_gpriv_to_dcp(gpriv);
struct usbhsg_uep *dcp = usbhsg_gpriv_to_dcp(gpriv);
struct usbhsg_uep
usbhsg_uep
*dcp = usbhsg_gpriv_to_dcp(gpriv)
*
dcp
= usbhsg_gpriv_to_dcp(gpriv)
usbhsg_gpriv_to_dcp(gpriv)
usbhsg_gpriv_to_dcp
usbhsg_gpriv_to_dcp
gpriv
gpriv
struct usbhs_pipe *pipe = usbhsg_uep_to_pipe(dcp);
struct usbhs_pipe *pipe = usbhsg_uep_to_pipe(dcp);
struct usbhs_pipe
usbhs_pipe
*pipe = usbhsg_uep_to_pipe(dcp)
*
pipe
= usbhsg_uep_to_pipe(dcp)
usbhsg_uep_to_pipe(dcp)
usbhsg_uep_to_pipe
usbhsg_uep_to_pipe
dcp
dcp
struct device *dev = usbhsg_gpriv_to_dev(gpriv);
struct device *dev = usbhsg_gpriv_to_dev(gpriv);
struct device
device
*dev = usbhsg_gpriv_to_dev(gpriv)
*
dev
= usbhsg_gpriv_to_dev(gpriv)
usbhsg_gpriv_to_dev(gpriv)
usbhsg_gpriv_to_dev
usbhsg_gpriv_to_dev
gpriv
gpriv
struct usb_request *req;
struct usb_request *req;
struct usb_request
usb_request
*req
*
req
__le16 *buf;
__le16 *buf;
__le16
__le16
*buf
*
buf
req = usb_ep_alloc_request(&dcp->ep, GFP_ATOMIC);
req = usb_ep_alloc_request(&dcp->ep, GFP_ATOMIC)
req
req
usb_ep_alloc_request(&dcp->ep, GFP_ATOMIC)
usb_ep_alloc_request
usb_ep_alloc_request
&dcp->ep
dcp->ep
dcp
dcp
ep
GFP_ATOMIC
GFP_ATOMIC
if (!req) {		dev_err(dev, "recip request allocation fail\n");		return;	}
!req
req
req
{		dev_err(dev, "recip request allocation fail\n");		return;	}
dev_err(dev, "recip request allocation fail\n");
dev_err(dev, "recip request allocation fail\n")
dev_err
dev_err
dev
dev
"recip request allocation fail\n"
return;
buf = kmalloc(sizeof(*buf), GFP_ATOMIC);
buf = kmalloc(sizeof(*buf), GFP_ATOMIC)
buf
buf
kmalloc(sizeof(*buf), GFP_ATOMIC)
kmalloc
kmalloc
sizeof(*buf)
(*buf)
*buf
buf
buf
GFP_ATOMIC
GFP_ATOMIC
if (!buf) {		usb_ep_free_request(&dcp->ep, req);		return;	}
!buf
buf
buf
{		usb_ep_free_request(&dcp->ep, req);		return;	}
usb_ep_free_request(&dcp->ep, req);
usb_ep_free_request(&dcp->ep, req)
usb_ep_free_request
usb_ep_free_request
&dcp->ep
dcp->ep
dcp
dcp
ep
req
req
return;
*buf = cpu_to_le16(status);
*buf = cpu_to_le16(status)
*buf
buf
buf
cpu_to_le16(status)
cpu_to_le16
cpu_to_le16
status
status
req->complete	= __usbhsg_recip_send_complete;
req->complete	= __usbhsg_recip_send_complete
req->complete
req
req
complete
__usbhsg_recip_send_complete
__usbhsg_recip_send_complete
req->buf	= buf;
req->buf	= buf
req->buf
req
req
buf
buf
buf
req->length	= sizeof(*buf);
req->length	= sizeof(*buf)
req->length
req
req
length
sizeof(*buf)
(*buf)
*buf
buf
buf
req->zero	= 0;
req->zero	= 0
req->zero
req
req
zero
0
pipe->handler = &usbhs_fifo_pio_push_handler;
pipe->handler = &usbhs_fifo_pio_push_handler
pipe->handler
pipe
pipe
handler
&usbhs_fifo_pio_push_handler
usbhs_fifo_pio_push_handler
usbhs_fifo_pio_push_handler
usbhsg_queue_push(dcp, usbhsg_req_to_ureq(req));
usbhsg_queue_push(dcp, usbhsg_req_to_ureq(req))
usbhsg_queue_push
usbhsg_queue_push
dcp
dcp
usbhsg_req_to_ureq(req)
usbhsg_req_to_ureq
usbhsg_req_to_ureq
req
req
-----joern-----
(66,85,0)
(3,85,0)
(20,24,0)
(67,37,0)
(2,63,0)
(48,76,0)
(48,88,0)
(16,22,0)
(28,64,0)
(81,24,0)
(56,63,0)
(11,35,0)
(67,50,0)
(0,89,0)
(50,74,0)
(35,11,0)
(9,87,0)
(37,80,0)
(89,55,0)
(43,6,0)
(22,84,0)
(6,63,0)
(33,65,0)
(10,53,0)
(32,53,0)
(4,44,0)
(83,11,0)
(16,11,0)
(76,48,0)
(56,11,0)
(21,55,0)
(41,67,0)
(17,10,0)
(72,56,0)
(90,51,0)
(84,15,0)
(29,81,0)
(3,35,0)
(34,49,0)
(22,63,0)
(39,26,0)
(88,11,0)
(53,63,0)
(43,51,0)
(62,65,0)
(74,0,0)
(0,74,0)
(86,89,0)
(25,62,0)
(74,50,0)
(52,91,0)
(11,63,0)
(68,88,0)
(8,81,0)
(40,43,0)
(47,63,0)
(84,22,0)
(34,90,0)
(35,3,0)
(26,39,0)
(64,28,0)
(77,50,0)
(88,22,0)
(76,63,0)
(24,63,0)
(28,55,0)
(60,80,0)
(50,63,0)
(28,63,0)
(69,50,0)
(42,89,0)
(75,6,0)
(57,6,0)
(79,14,0)
(57,18,0)
(89,0,0)
(71,80,0)
(14,50,0)
(59,62,0)
(91,53,0)
(58,45,0)
(30,63,0)
(36,77,0)
(13,63,0)
(80,55,0)
(7,39,0)
(14,76,0)
(91,55,0)
(37,67,0)
(38,63,0)
(80,37,0)
(87,55,0)
(55,63,0)
(44,56,0)
(55,87,0)
(54,63,0)
(64,50,0)
(19,44,0)
(31,64,0)
(1,63,0)
(65,63,0)
(12,28,0)
(62,50,0)
(5,74,0)
(85,3,0)
(27,16,0)
(70,35,0)
(88,48,0)
(67,82,0)
(10,26,0)
(87,18,0)
(78,10,0)
(46,84,0)
(49,82,0)
(81,50,0)
(6,57,0)
(44,50,0)
(26,63,0)
(61,14,0)
(73,43,0)
(53,91,0)
(45,11,0)
(23,57,0)
(67,37,1)
(35,70,1)
(19,24,1)
(6,57,1)
(52,32,1)
(62,59,1)
(68,14,1)
(42,69,1)
(84,15,1)
(40,73,1)
(65,33,1)
(85,66,1)
(80,60,1)
(75,53,1)
(3,85,1)
(87,18,1)
(58,11,1)
(89,86,1)
(0,89,1)
(79,61,1)
(77,36,1)
(73,77,1)
(5,0,1)
(34,49,1)
(64,31,1)
(91,52,1)
(80,55,1)
(59,25,1)
(81,8,1)
(49,67,1)
(4,19,1)
(28,55,1)
(10,78,1)
(22,84,1)
(88,22,1)
(60,71,1)
(41,37,1)
(74,5,1)
(57,18,1)
(45,11,1)
(36,50,1)
(84,46,1)
(34,28,1)
(62,50,1)
(55,87,1)
(7,10,1)
(24,20,1)
(67,50,1)
(28,64,1)
(56,72,1)
(16,27,1)
(72,44,1)
(26,39,1)
(57,23,1)
(44,4,1)
(48,88,1)
(43,6,1)
(9,21,1)
(69,6,1)
(27,45,1)
(77,50,1)
(44,50,1)
(81,50,1)
(16,11,1)
(89,55,1)
(88,68,1)
(12,26,1)
(23,75,1)
(83,77,1)
(50,74,1)
(32,55,1)
(64,50,1)
(45,58,1)
(87,9,1)
(91,55,1)
(10,53,1)
(29,22,1)
(66,83,1)
(11,35,1)
(17,65,1)
(43,40,1)
(34,90,1)
(14,50,1)
(46,16,1)
(70,3,1)
(25,76,1)
(31,12,1)
(74,0,1)
(86,42,1)
(39,7,1)
(20,81,1)
(37,80,1)
(35,3,1)
(76,48,1)
(90,43,1)
(88,11,1)
(61,56,1)
(71,45,1)
(67,41,1)
(14,79,1)
(78,17,1)
(8,29,1)
(53,91,1)
(56,11,1)
(33,62,1)
(79,45,2)
(33,45,2)
(3,77,2)
(60,45,2)
(89,55,2)
(20,45,2)
(34,49,2)
(26,39,2)
(59,45,2)
(46,45,2)
(74,0,2)
(76,45,2)
(67,45,2)
(40,77,2)
(34,90,2)
(43,77,2)
(37,80,2)
(56,11,2)
(61,45,2)
(77,50,2)
(72,45,2)
(67,50,2)
(45,11,2)
(84,45,2)
(16,11,2)
(10,53,2)
(73,77,2)
(88,11,2)
(28,55,2)
(14,50,2)
(85,77,2)
(58,77,2)
(55,87,2)
(76,48,2)
(91,55,2)
(6,57,2)
(17,45,2)
(62,45,2)
(8,45,2)
(12,45,2)
(10,45,2)
(88,45,2)
(65,45,2)
(43,6,2)
(16,45,2)
(87,18,2)
(14,45,2)
(57,18,2)
(41,45,2)
(37,45,2)
(84,15,2)
(88,22,2)
(81,50,2)
(4,45,2)
(25,45,2)
(56,45,2)
(62,50,2)
(3,85,2)
(50,74,2)
(67,37,2)
(78,45,2)
(53,91,2)
(71,45,2)
(64,45,2)
(19,45,2)
(11,77,2)
(83,77,2)
(39,45,2)
(80,45,2)
(28,64,2)
(11,35,2)
(35,77,2)
(81,45,2)
(64,50,2)
(49,45,2)
(7,45,2)
(26,45,2)
(22,45,2)
(29,45,2)
(44,45,2)
(68,45,2)
(31,45,2)
(35,3,2)
(70,77,2)
(90,77,2)
(0,89,2)
(48,45,2)
(80,55,2)
(28,45,2)
(24,45,2)
(27,45,2)
(22,84,2)
(44,50,2)
(66,77,2)
(45,77,2)
(48,88,2)
-----------------------------------
(0,&dcp->ep)
(1,if (!req)
(2,dcp)
(3,sizeof(*buf)
(4,buf)
(5,GFP_ATOMIC)
(6,*dev = usbhsg_gpriv_to_dev(gpriv)
(7,usbhs_fifo_pio_push_handler)
(8,complete)
(9,gpriv)
(10,pipe->handler)
(11,buf = kmalloc(sizeof(*buf)
(12,dcp)
(13,if (!buf)
(14,req->length)
(15,unsigned short status)
(16,*buf)
(17,pipe)
(18,struct usbhsg_gpriv *gpriv)
(19,req)
(20,__usbhsg_recip_send_complete)
(21,dcp)
(22,*buf = cpu_to_le16(status)
(23,gpriv)
(24,req->complete\\t= __usbhsg_recip_send_complete)
(25,req)
(26,pipe->handler = &usbhs_fifo_pio_push_handler)
(27,buf)
(28,usbhsg_queue_push(dcp, usbhsg_req_to_ureq(req)
(29,req)
(30,buf)
(31,req)
(32,pipe)
(33,0)
(34,RET)
(35,kmalloc(sizeof(*buf)
(36,req)
(37,&dcp->ep)
(38,dev)
(39,&usbhs_fifo_pio_push_handler)
(40,"recip request allocation fail\\n")
(41,req)
(42,dcp)
(43,dev_err(dev, "recip request allocation fail\\n")
(44,req->buf)
(45,!buf)
(46,status)
(47,pipe)
(48,sizeof(*buf)
(49,return;)
(50,req = usb_ep_alloc_request(&dcp->ep, GFP_ATOMIC)
(51,)
(52,dcp)
(53,*pipe = usbhsg_uep_to_pipe(dcp)
(54,req)
(55,*dcp = usbhsg_gpriv_to_dcp(gpriv)
(56,req->buf\\t= buf)
(57,usbhsg_gpriv_to_dev(gpriv)
(58,buf)
(59,zero)
(60,ep)
(61,req)
(62,req->zero)
(63,)
(64,usbhsg_req_to_ureq(req)
(65,req->zero\\t= 0)
(66,buf)
(67,usb_ep_free_request(&dcp->ep, req)
(68,buf)
(69,req)
(70,GFP_ATOMIC)
(71,dcp)
(72,buf)
(73,dev)
(74,usb_ep_alloc_request(&dcp->ep, GFP_ATOMIC)
(75,dev)
(76,req->length\\t= sizeof(*buf)
(77,!req)
(78,handler)
(79,length)
(80,dcp->ep)
(81,req->complete)
(82,)
(83,buf)
(84,cpu_to_le16(status)
(85,*buf)
(86,ep)
(87,usbhsg_gpriv_to_dcp(gpriv)
(88,*buf)
(89,dcp->ep)
(90,return;)
(91,usbhsg_uep_to_pipe(dcp)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^