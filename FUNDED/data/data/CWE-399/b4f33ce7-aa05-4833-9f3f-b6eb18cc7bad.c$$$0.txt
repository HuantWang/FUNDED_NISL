-----label-----
0
-----code-----
static void fixup_read_and_payload_sizes(void)
{
	struct pci_dev *dev = NULL;
	int smallest_max_payload = 0x1; /* Tile maxes out at 256 bytes. */
	int max_read_size = 0x2; /* Limit to 512 byte reads. */
	u16 new_values;

	/* Scan for the smallest maximum payload size. */
	for_each_pci_dev(dev) {
		u32 devcap;
		int max_payload;

		if (!pci_is_pcie(dev))
			continue;

		pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &devcap);
		max_payload = devcap & PCI_EXP_DEVCAP_PAYLOAD;
		if (max_payload < smallest_max_payload)
			smallest_max_payload = max_payload;
	}

	/* Now, set the max_payload_size for all devices to that value. */
	new_values = (max_read_size << 12) | (smallest_max_payload << 5);
	for_each_pci_dev(dev)
		pcie_capability_clear_and_set_word(dev, PCI_EXP_DEVCTL,
				PCI_EXP_DEVCTL_PAYLOAD | PCI_EXP_DEVCTL_READRQ,
				new_values);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
9,10
9,11
9,12
9,13
9,14
9,15
9,16
9,17
9,18
9,19
9,20
10,11
11,12
11,13
12,13
14,15
14,16
14,17
17,18
18,19
20,21
21,22
21,23
23,24
23,25
25,26
27,28
28,29
28,30
30,31
30,32
32,33
34,35
35,36
35,37
36,37
38,39
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
47,50
47,51
47,52
47,53
48,49
49,50
49,51
50,51
52,53
54,55
55,56
55,57
57,58
59,60
59,61
60,61
61,62
61,63
62,63
64,65
67,68
68,69
68,70
68,71
68,72
69,70
71,72
73,74
75,76
76,77
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
103,105
104,105
105,106
105,107
106,107
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
118,119
119,120
121,122
122,123
123,124
123,125
123,126
123,127
123,128
124,125
126,127
128,129
130,131
130,132
131,132
133,134
135,136
-----nextToken-----
2,4,6,8,13,15,16,19,22,24,26,29,31,33,37,39,43,45,51,53,56,58,63,65,66,70,72,74,77,81,84,86,90,92,96,98,102,107,108,112,113,117,120,125,127,129,132,134,136
-----computeFrom-----
79,80
79,81
82,83
82,84
88,89
88,90
94,95
94,96
100,101
100,102
103,104
103,105
105,106
105,107
110,111
110,112
130,131
130,132
-----guardedBy-----
90,98
92,96
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ProblemStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ProblemStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void fixup_read_and_payload_sizes(void){	struct pci_dev *dev = NULL;	int smallest_max_payload = 0x1; /* Tile maxes out at 256 bytes. */	int max_read_size = 0x2; /* Limit to 512 byte reads. */	u16 new_values;	/* Scan for the smallest maximum payload size. */	for_each_pci_dev(dev) {		u32 devcap;		int max_payload;		if (!pci_is_pcie(dev))			continue;		pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &devcap);		max_payload = devcap & PCI_EXP_DEVCAP_PAYLOAD;		if (max_payload < smallest_max_payload)			smallest_max_payload = max_payload;	}	/* Now, set the max_payload_size for all devices to that value. */	new_values = (max_read_size << 12) | (smallest_max_payload << 5);	for_each_pci_dev(dev)		pcie_capability_clear_and_set_word(dev, PCI_EXP_DEVCTL,				PCI_EXP_DEVCTL_PAYLOAD | PCI_EXP_DEVCTL_READRQ,				new_values);}
static void
fixup_read_and_payload_sizes(void)
fixup_read_and_payload_sizes
void
void


{	struct pci_dev *dev = NULL;	int smallest_max_payload = 0x1; /* Tile maxes out at 256 bytes. */	int max_read_size = 0x2; /* Limit to 512 byte reads. */	u16 new_values;	/* Scan for the smallest maximum payload size. */	for_each_pci_dev(dev) {		u32 devcap;		int max_payload;		if (!pci_is_pcie(dev))			continue;		pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &devcap);		max_payload = devcap & PCI_EXP_DEVCAP_PAYLOAD;		if (max_payload < smallest_max_payload)			smallest_max_payload = max_payload;	}	/* Now, set the max_payload_size for all devices to that value. */	new_values = (max_read_size << 12) | (smallest_max_payload << 5);	for_each_pci_dev(dev)		pcie_capability_clear_and_set_word(dev, PCI_EXP_DEVCTL,				PCI_EXP_DEVCTL_PAYLOAD | PCI_EXP_DEVCTL_READRQ,				new_values);}
struct pci_dev *dev = NULL;
struct pci_dev *dev = NULL;
struct pci_dev
pci_dev
*dev = NULL
*
dev
= NULL
NULL
NULL
int smallest_max_payload = 0x1;
int smallest_max_payload = 0x1;
int
smallest_max_payload = 0x1
smallest_max_payload
= 0x1
0x1
int max_read_size = 0x2;
int max_read_size = 0x2;
int
max_read_size = 0x2
max_read_size
= 0x2
0x2
u16 new_values;
u16 new_values;
u16
u16
new_values
new_values
for_each_pci_dev(dev)
for_each_pci_dev(dev)
for_each_pci_dev
for_each_pci_dev
dev
dev
)
{		u32 devcap;		int max_payload;		if (!pci_is_pcie(dev))			continue;		pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &devcap);		max_payload = devcap & PCI_EXP_DEVCAP_PAYLOAD;		if (max_payload < smallest_max_payload)			smallest_max_payload = max_payload;	}
u32 devcap;
u32 devcap;
u32
u32
devcap
devcap
int max_payload;
int max_payload;
int
max_payload
max_payload
if (!pci_is_pcie(dev))			continue;
!pci_is_pcie(dev)
pci_is_pcie(dev)
pci_is_pcie
pci_is_pcie
dev
dev
continue;
pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &devcap);
pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &devcap)
pcie_capability_read_dword
pcie_capability_read_dword
dev
dev
PCI_EXP_DEVCAP
PCI_EXP_DEVCAP
&devcap
devcap
devcap
max_payload = devcap & PCI_EXP_DEVCAP_PAYLOAD;
max_payload = devcap & PCI_EXP_DEVCAP_PAYLOAD
max_payload
max_payload
devcap & PCI_EXP_DEVCAP_PAYLOAD
devcap
devcap
PCI_EXP_DEVCAP_PAYLOAD
PCI_EXP_DEVCAP_PAYLOAD
if (max_payload < smallest_max_payload)			smallest_max_payload = max_payload;
max_payload < smallest_max_payload
max_payload
max_payload
smallest_max_payload
smallest_max_payload
smallest_max_payload = max_payload;
smallest_max_payload = max_payload
smallest_max_payload
smallest_max_payload
max_payload
max_payload
new_values = (max_read_size << 12) | (smallest_max_payload << 5);
new_values = (max_read_size << 12) | (smallest_max_payload << 5)
new_values
new_values
(max_read_size << 12) | (smallest_max_payload << 5)
(max_read_size << 12)
max_read_size << 12
max_read_size
max_read_size
12
(smallest_max_payload << 5)
smallest_max_payload << 5
smallest_max_payload
smallest_max_payload
5
for_each_pci_dev(dev)
for_each_pci_dev(dev)
for_each_pci_dev
for_each_pci_dev
(dev)
dev
dev
)
pcie_capability_clear_and_set_word(dev, PCI_EXP_DEVCTL,				PCI_EXP_DEVCTL_PAYLOAD | PCI_EXP_DEVCTL_READRQ,				new_values);
pcie_capability_clear_and_set_word(dev, PCI_EXP_DEVCTL,				PCI_EXP_DEVCTL_PAYLOAD | PCI_EXP_DEVCTL_READRQ,				new_values)
pcie_capability_clear_and_set_word
pcie_capability_clear_and_set_word
dev
dev
PCI_EXP_DEVCTL
PCI_EXP_DEVCTL
PCI_EXP_DEVCTL_PAYLOAD | PCI_EXP_DEVCTL_READRQ
PCI_EXP_DEVCTL_PAYLOAD
PCI_EXP_DEVCTL_PAYLOAD
PCI_EXP_DEVCTL_READRQ
PCI_EXP_DEVCTL_READRQ
new_values
new_values
-----joern-----
(37,21,0)
(9,22,0)
(47,19,0)
(11,49,0)
(5,10,0)
(57,20,0)
(27,15,0)
(52,56,0)
(6,8,0)
(24,6,0)
(24,57,0)
(7,24,0)
(46,20,0)
(26,37,0)
(6,20,0)
(23,24,0)
(29,34,0)
(12,29,0)
(51,20,0)
(0,10,0)
(17,19,0)
(56,19,0)
(29,39,0)
(50,51,0)
(36,57,0)
(4,50,0)
(19,20,0)
(39,10,0)
(34,20,0)
(43,15,0)
(55,22,0)
(45,2,0)
(28,50,0)
(6,24,0)
(45,51,0)
(53,20,0)
(38,29,0)
(37,15,0)
(50,49,0)
(37,34,0)
(1,10,0)
(15,39,0)
(24,51,0)
(41,51,0)
(25,10,0)
(2,45,0)
(56,21,0)
(8,6,0)
(21,56,0)
(21,57,0)
(39,22,0)
(44,34,0)
(42,37,0)
(30,23,0)
(24,23,0)
(16,34,0)
(49,50,0)
(14,24,0)
(10,20,0)
(54,45,0)
(48,20,0)
(22,39,0)
(32,56,0)
(57,21,0)
(13,23,0)
(21,37,0)
(3,39,0)
(35,20,0)
(40,24,0)
(33,51,0)
(50,10,0)
(9,3,1)
(34,16,1)
(16,44,1)
(29,34,1)
(22,55,1)
(42,56,1)
(32,36,1)
(55,9,1)
(11,4,1)
(52,32,1)
(36,15,1)
(28,31,1)
(50,51,1)
(44,51,1)
(51,41,1)
(19,17,1)
(2,45,1)
(45,51,1)
(12,39,1)
(49,11,1)
(18,6,1)
(24,7,1)
(29,38,1)
(37,34,1)
(43,29,1)
(7,23,1)
(47,34,1)
(57,21,1)
(13,30,1)
(24,51,1)
(21,37,1)
(27,43,1)
(28,2,1)
(56,19,1)
(39,22,1)
(29,39,1)
(14,40,1)
(41,33,1)
(15,39,1)
(26,42,1)
(36,29,1)
(30,14,1)
(23,13,1)
(6,24,1)
(56,52,1)
(15,27,1)
(21,56,1)
(37,26,1)
(37,15,1)
(17,47,1)
(3,50,1)
(54,19,1)
(50,49,1)
(6,8,1)
(4,28,1)
(31,2,1)
(38,12,1)
(24,57,1)
(24,23,1)
(40,57,1)
(45,54,1)
(31,2,2)
(24,51,2)
(27,29,2)
(24,57,2)
(39,22,2)
(6,24,2)
(37,15,2)
(29,39,2)
(57,21,2)
(15,29,2)
(15,39,2)
(21,37,2)
(2,45,2)
(50,51,2)
(45,51,2)
(37,34,2)
(43,29,2)
(21,56,2)
(56,19,2)
(24,23,2)
(29,34,2)
(6,8,2)
(50,49,2)
-----------------------------------
(0,devcap)
(1,if (!pci_is_pcie(dev)
(2,!pci_is_pcie(dev)
(3,max_payload)
(4,PCI_EXP_DEVCAP)
(5,if (max_payload < smallest_max_payload)
(6,(dev)
(7,new_values)
(8,dev)
(9,devcap)
(10,)
(11,devcap)
(12,max_payload)
(13,PCI_EXP_DEVCTL_READRQ)
(14,PCI_EXP_DEVCTL)
(15,smallest_max_payload = max_payload)
(16,0x1)
(17,0x2)
(18,RET)
(19,max_read_size = 0x2)
(20,)
(21,(max_read_size << 12)
(22,devcap & PCI_EXP_DEVCAP_PAYLOAD)
(23,PCI_EXP_DEVCTL_PAYLOAD | PCI_EXP_DEVCTL_READRQ)
(24,pcie_capability_clear_and_set_word(dev, PCI_EXP_DEVCTL,\n\\n\\t\\t\\t\\tPCI_EXP_DEVCTL_PAYLOAD | PCI_EXP_DEVCTL_READRQ,\n\\n\\t\\t\\t\\tnew_values)
(25,max_payload)
(26,5)
(27,max_payload)
(28,dev)
(29,max_payload < smallest_max_payload)
(30,PCI_EXP_DEVCTL_PAYLOAD)
(31,continue;)
(32,max_read_size)
(33,dev)
(34,smallest_max_payload = 0x1)
(35,smallest_max_payload)
(36,new_values)
(37,smallest_max_payload << 5)
(38,smallest_max_payload)
(39,max_payload = devcap & PCI_EXP_DEVCAP_PAYLOAD)
(40,dev)
(41,NULL)
(42,smallest_max_payload)
(43,smallest_max_payload)
(44,smallest_max_payload)
(45,pci_is_pcie(dev)
(46,new_values)
(47,max_read_size)
(48,max_read_size)
(49,&devcap)
(50,pcie_capability_read_dword(dev, PCI_EXP_DEVCAP, &devcap)
(51,*dev = NULL)
(52,12)
(53,dev)
(54,dev)
(55,PCI_EXP_DEVCAP_PAYLOAD)
(56,max_read_size << 12)
(57,new_values = (max_read_size << 12)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^