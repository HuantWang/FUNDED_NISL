-----label-----
1
-----code-----
static wpt_status dxeTXPushFrame
(
   WLANDXE_ChannelCBType   *channelEntry,
   wpt_packet              *palPacket
)
{
   wpt_status                  status = eWLAN_PAL_STATUS_SUCCESS;
   WLANDXE_DescCtrlBlkType    *currentCtrlBlk = NULL;
   WLANDXE_DescType           *currentDesc    = NULL;
   WLANDXE_DescType           *firstDesc      = NULL;
   WLANDXE_DescType           *LastDesc       = NULL;
   void                       *sourcePhysicalAddress = NULL;
   wpt_uint32                  xferSize = 0;
#ifdef FEATURE_R33D
   tx_frm_pcie_vector_t        frameVector;
   wpt_uint32                  Va;
   wpt_uint32                  fragCount = 0;
#else
   wpt_iterator                iterator;
#endif /* FEATURE_R33D */
   wpt_uint32                  isEmpty = 0;

   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "%s Enter", __func__);

   tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_FALSE;
   if((0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc) &&
      (0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc))
   {
      isEmpty = 1;
   }

   channelEntry->numFragmentCurrentChain = 0;
   currentCtrlBlk = channelEntry->headCtrlBlk;

   /* Initialize interator, TX is fragmented */
#ifdef FEATURE_R33D
   memset(&frameVector, 0, sizeof(tx_frm_pcie_vector_t));
   status = wpalPrepareTxFrame(palPacket,
                                    &frameVector,
                                    &Va);
#else
   status = wpalLockPacketForTransfer(palPacket);
   if(eWLAN_PAL_STATUS_SUCCESS != status)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeTXPushFrame unable to lock packet");
      return status;
   }

   status = wpalIteratorInit(&iterator, palPacket);
#endif /* FEATURE_R33D */
   if(eWLAN_PAL_STATUS_SUCCESS != status)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeTXPushFrame iterator init fail");
      return status;
   }

   /* !!!! Revisit break condition !!!!!!! */
   while(1)
   {
      /* Get current descriptor pointer from current control block */
      currentDesc = currentCtrlBlk->linkedDesc;
      if(NULL == firstDesc)
      {
         firstDesc = currentCtrlBlk->linkedDesc;
      }
      /* All control block will have same palPacket Pointer
       * to make logic simpler */
      currentCtrlBlk->xfrFrame = palPacket;

      /* Get next fragment physical address and fragment size
       * if this is the first trial, will get first physical address
       * if no more fragment, Descriptor src address will be set as NULL, OK??? */
#ifdef FEATURE_R33D
      if(fragCount == frameVector.num_frg)
      {
         break;
      }
      currentCtrlBlk->shadowBufferVa = frameVector.frg[0].va;
      sourcePhysicalAddress          = (void *)frameVector.frg[fragCount].pa;
      xferSize                       = frameVector.frg[fragCount].size;
      fragCount++;
      HDXE_ASSERT(0 != xferSize);
      HDXE_ASSERT(NULL != sourcePhysicalAddress);
#else
      status = wpalIteratorNext(&iterator,
                                palPacket,
                                &sourcePhysicalAddress,
                                &xferSize);
      if((NULL == sourcePhysicalAddress) ||
         (0    == xferSize))
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
                  "dxeTXPushFrame end of current frame");
         break;
      }
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeTXPushFrame Get next frame fail");
         return status;
      }
#endif /* FEATURE_R33D */

      /* This is the LAST descriptor valid for this transaction */
      LastDesc    = currentCtrlBlk->linkedDesc;

      /* Program DXE descriptor */
      currentDesc->dxedesc.dxe_short_desc.srcMemAddrL =
                               WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)sourcePhysicalAddress);

      /* Just normal data transfer from aCPU Flat Memory to BMU Q */
      if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||
         (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))
      {
         currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =
                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ);
      }
      else
      {
         /* Test specific H2H transfer, destination address already set
          * Do Nothing */
      }
      currentDesc->xfrSize = WLANDXE_U32_SWAP_ENDIAN(xferSize);

      /* Program channel control register */
      /* First frame not set VAL bit, why ??? */
      if(0 == channelEntry->numFragmentCurrentChain)
      {
         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write;
      }
      else
      {
         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;
      }

      /* Update statistics */
      channelEntry->numFragmentCurrentChain++;
      channelEntry->numFreeDesc--;
      channelEntry->numRsvdDesc++;

      /* Get next control block */
      currentCtrlBlk = currentCtrlBlk->nextCtrlBlk;
   }
   channelEntry->numTotalFrame++;
   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "NUM TX FRAG %d, Total Frame %d",
            channelEntry->numFragmentCurrentChain, channelEntry->numTotalFrame);

   /* Program Channel control register
    * Set as end of packet
    * Enable interrupt also for first code lock down
    * performace optimization, this will be revisited */
   if(NULL == LastDesc)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeTXPushFrame NULL Last Descriptor, broken chain");
      return eWLAN_PAL_STATUS_E_FAULT;
   }
   LastDesc->descCtrl.ctrl  = channelEntry->extraConfig.cw_ctrl_write_eop_int;
   /* Now First one also Valid ????
    * this procedure will prevent over handle descriptor from previous
    * TX trigger */
   firstDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;

   /* If in BMPS mode no need to notify the DXE Engine, notify SMSM instead */
   if(WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN == tempDxeCtrlBlk->rivaPowerState)
   {
      /* Update channel head as next avaliable linked slot */
      channelEntry->headCtrlBlk = currentCtrlBlk;
      if(isEmpty)
      {
         tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE;
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
                  "SMSM_ret LO=%d HI=%d",
                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,
                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc );
         dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE);
         tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE;
      }
      return status;
   }

   /* If DXE use external descriptor, registers are not needed to be programmed
    * Just after finish to program descriptor, tirigger to send */
   if(channelEntry->extraConfig.chan_mask & WLANDXE_CH_CTRL_EDEN_MASK)
   {
      /* Issue a dummy read from the DXE descriptor DDR location to
         ensure that any previously posted write to the descriptor
         completes. */
      if(channelEntry->extraConfig.cw_ctrl_write_valid != firstDesc->descCtrl.ctrl)
      {
         //HDXE_ASSERT(0);
      }

      /* Everything is ready
       * Trigger to start DMA */
      status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,
                                      channelEntry->extraConfig.chan_mask);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeTXPushFrame Write Channel Ctrl Register fail");
         return status;
      }

      /* Update channel head as next avaliable linked slot */
      channelEntry->headCtrlBlk = currentCtrlBlk;

      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
               "%s Exit", __func__);
      return status;
   }

   /* If DXE not use external descriptor, program each registers */
   /* Circular buffer handle not need to program DESC register???
    * GEN5 code not programed RING buffer case
    * REVISIT THIS !!!!!! */
   if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||
      (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))
   {
      /* Destination address, assigned Work Q */
      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,
                                      channelEntry->channelConfig.refWQ);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeTXPushFrame Program dest address register fail");
         return status;
      }
      /* If descriptor format is SHORT */
      if(channelEntry->channelConfig.useShortDescFmt)
      {
         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,
                                         0);
         if(eWLAN_PAL_STATUS_SUCCESS != status)
         {
            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                     "dxeTXPushFrame Program dest address register fail");
            return status;
         }
      }
      else
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeTXPushFrame LONG Descriptor Format!!!");
      }
   }
#ifdef WLANDXE_TEST_CHANNEL_ENABLE
   else if(WDTS_CHANNEL_H2H_TEST_TX  == channelEntry->channelType)
   {
      /* Destination address, Physical memory address */
      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,
                                      WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.dstMemAddrL));
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeTXPushFrame Program dest address register fail");
         return status;
      }
      /* If descriptor format is SHORT */
      if(channelEntry->channelConfig.useShortDescFmt)
      {
         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,
                                         0);
         if(eWLAN_PAL_STATUS_SUCCESS != status)
         {
            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                     "dxeTXPushFrame Program dest address register fail");
            return status;
         }
      }
      else
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeTXPushFrame LONG Descriptor Format!!!");
      }
   }
#endif /* WLANDXE_TEST_CHANNEL_ENABLE */

   /* Program Source address register
    * This address is already programmed into DXE Descriptor
    * But register also upadte */
   status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrlRegAddr,
                                   WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL));
   if(eWLAN_PAL_STATUS_SUCCESS != status)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeTXPushFrame Program src address register fail");
      return status;
   }
   /* If descriptor format is SHORT */
   if(channelEntry->channelConfig.useShortDescFmt)
   {
      status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,
                                      0);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeTXPushFrame Program dest address register fail");
         return status;
      }
   }
   else
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeTXPushFrame LONG Descriptor Format!!!");
   }

   /* Linked list Descriptor pointer */
   status = wpalWriteRegister(channelEntry->channelRegister.chDXEDesclRegAddr,
                                   channelEntry->headCtrlBlk->linkedDescPhyAddr);
   if(eWLAN_PAL_STATUS_SUCCESS != status)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeTXPushFrame Write DESC Address register fail");
      return status;
   }
   /* If descriptor format is SHORT */
   if(channelEntry->channelConfig.useShortDescFmt)
   {
      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,
                                      0);
      if(eWLAN_PAL_STATUS_SUCCESS != status)
      {
         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
                  "dxeTXPushFrame Program dest address register fail");
         return status;
      }
   }
   else
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeTXPushFrame LONG Descriptor Format!!!");
   }

   /* Transfer Size */
   xferSize = WLANDXE_U32_SWAP_ENDIAN(firstDesc->xfrSize);
   status = wpalWriteRegister(channelEntry->channelRegister.chDXESzRegAddr,
                                   xferSize);
   if(eWLAN_PAL_STATUS_SUCCESS != status)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeTXPushFrame Write DESC Address register fail");
      return status;
   }

   /* Everything is ready
    * Trigger to start DMA */
   status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,
                                   channelEntry->extraConfig.chan_mask);
   if(eWLAN_PAL_STATUS_SUCCESS != status)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "dxeTXPushFrame Write Channel Ctrl Register fail");
      return status;
   }

   /* Update channel head as next avaliable linked slot */
   channelEntry->headCtrlBlk = currentCtrlBlk;

   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "%s Exit", __func__);
   return status;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
7,8
9,10
9,11
12,13
12,14
13,14
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
18,29
18,30
18,31
18,32
18,33
18,34
18,35
18,36
18,37
18,38
18,39
18,40
18,41
18,42
18,43
18,44
18,45
18,46
18,47
18,48
18,49
18,50
18,51
18,52
18,53
18,54
18,55
18,56
18,57
18,58
18,59
19,20
20,21
20,22
21,22
23,24
23,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
38,39
39,40
39,41
40,41
42,43
42,44
42,45
45,46
46,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
55,56
56,57
58,59
59,60
59,61
60,61
62,63
62,64
62,65
65,66
66,67
68,69
69,70
69,71
71,72
71,73
71,74
74,75
75,76
77,78
78,79
78,80
79,80
81,82
81,83
83,84
85,86
86,87
86,88
87,88
89,90
91,92
92,93
92,94
93,94
95,96
95,97
97,98
99,100
100,101
100,102
100,103
100,104
100,105
101,102
103,104
105,106
108,109
110,111
111,112
111,113
112,113
112,114
113,114
116,117
118,119
118,120
119,120
119,121
120,121
121,122
121,123
123,124
123,125
124,125
124,126
125,126
125,127
126,127
129,130
132,133
133,134
133,135
135,136
135,137
136,137
136,138
137,138
137,139
138,139
141,142
144,145
145,146
146,147
146,148
147,148
150,151
151,152
151,153
152,153
152,154
153,154
157,158
158,159
158,160
159,160
161,162
161,163
162,163
165,166
166,167
166,168
167,168
169,170
169,171
170,171
172,173
174,175
174,176
175,176
175,177
176,177
178,179
180,181
180,182
181,182
182,183
182,184
182,185
182,186
183,184
185,186
187,188
190,191
191,192
193,194
194,195
194,196
195,196
197,198
197,199
197,200
198,199
200,201
201,202
203,204
205,206
205,207
206,207
206,208
207,208
209,210
211,212
211,213
212,213
213,214
213,215
213,216
213,217
214,215
216,217
218,219
221,222
222,223
224,225
224,226
226,227
226,228
226,229
226,230
226,231
226,232
226,233
226,234
226,235
226,236
226,237
226,238
226,239
226,240
226,241
227,228
228,229
228,230
229,230
231,232
231,233
232,233
235,236
235,237
236,237
236,238
237,238
239,240
241,242
242,243
243,244
243,245
244,245
246,247
246,248
247,248
250,251
251,252
251,253
252,253
252,254
253,254
256,257
258,259
259,260
259,261
260,261
262,263
262,264
262,265
262,266
262,267
263,264
265,266
266,267
268,269
270,271
271,272
273,274
274,275
276,277
276,278
277,278
277,279
278,279
279,280
279,281
280,281
282,283
284,285
285,286
285,287
287,288
289,290
289,291
290,291
291,292
291,293
291,294
291,295
292,293
294,295
296,297
300,301
300,302
301,302
301,303
302,303
304,305
306,307
306,308
307,308
308,309
308,310
308,311
308,312
309,310
311,312
313,314
316,317
317,318
319,320
320,321
320,322
321,322
323,324
323,325
324,325
327,328
328,329
328,330
329,330
329,331
330,331
330,332
331,332
331,333
332,333
337,338
337,339
338,339
340,341
340,342
341,342
341,343
342,343
345,346
347,348
347,349
347,350
348,349
348,350
349,350
350,351
350,352
351,352
353,354
353,355
354,355
357,358
358,359
358,360
359,360
361,362
361,363
362,363
365,366
366,367
367,368
367,369
368,369
368,370
369,370
369,371
370,371
370,372
371,372
376,377
376,378
377,378
379,380
379,381
380,381
380,382
381,382
386,387
387,388
387,389
388,389
388,390
389,390
392,393
392,394
393,394
395,396
397,398
397,399
397,400
398,399
398,400
400,401
400,402
401,402
404,405
405,406
406,407
406,408
407,408
407,409
408,409
408,410
409,410
413,414
413,415
414,415
414,416
415,416
419,420
420,421
421,422
421,423
422,423
422,424
423,424
423,425
424,425
428,429
428,430
429,430
429,431
430,431
434,435
435,436
436,437
436,438
437,438
440,441
441,442
442,443
442,444
443,444
446,447
447,448
448,449
448,450
449,450
452,453
453,454
453,455
454,455
456,457
456,458
457,458
460,461
461,462
462,463
462,464
463,464
466,467
467,468
467,469
467,470
467,471
467,472
467,473
468,469
470,471
472,473
475,476
475,477
476,477
479,480
479,481
480,481
483,484
483,485
484,485
484,486
485,486
487,488
489,490
489,491
490,491
491,492
491,493
491,494
491,495
492,493
494,495
496,497
499,500
500,501
502,503
503,504
503,505
504,505
504,506
505,506
505,507
506,507
510,511
510,512
511,512
511,513
512,513
516,517
517,518
517,519
518,519
518,520
519,520
519,521
520,521
524,525
524,526
525,526
525,527
526,527
530,531
530,532
531,532
531,533
532,533
534,535
534,536
535,536
538,539
538,540
538,541
539,540
540,541
540,542
541,542
541,543
542,543
545,546
547,548
547,549
548,549
550,551
550,552
550,553
550,554
551,552
552,553
552,554
553,554
553,555
554,555
557,558
559,560
560,561
560,562
560,563
560,564
560,565
560,566
561,562
563,564
565,566
568,569
568,570
569,570
569,571
570,571
570,572
571,572
574,575
577,578
577,579
578,579
578,580
579,580
579,581
580,581
583,584
586,587
587,588
587,589
587,590
588,589
590,591
592,593
594,595
595,596
595,597
596,597
596,598
597,598
600,601
602,603
603,604
605,606
605,607
606,607
606,608
607,608
607,609
608,609
608,610
609,610
613,614
615,616
615,617
615,618
615,619
615,620
615,621
616,617
616,618
617,618
617,619
618,619
618,620
619,620
619,621
620,621
624,625
624,626
625,626
625,627
626,627
631,632
632,633
632,634
633,634
635,636
635,637
635,638
636,637
638,639
638,640
639,640
639,641
640,641
644,645
644,646
645,646
645,647
646,647
650,651
650,652
651,652
651,653
652,653
654,655
656,657
656,658
657,658
658,659
658,660
658,661
658,662
659,660
661,662
663,664
666,667
667,668
669,670
670,671
670,672
671,672
671,673
672,673
675,676
677,678
678,679
678,680
678,681
678,682
678,683
679,680
681,682
683,684
686,687
688,689
689,690
691,692
691,693
692,693
692,694
693,694
694,695
694,696
695,696
697,698
697,699
698,699
701,702
702,703
702,704
703,704
705,706
705,707
706,707
709,710
709,711
709,712
710,711
711,712
711,713
712,713
714,715
714,716
714,717
715,716
717,718
717,719
718,719
718,720
719,720
723,724
723,725
724,725
724,726
725,726
729,730
729,731
730,731
730,732
731,732
733,734
735,736
735,737
736,737
737,738
737,739
737,740
737,741
738,739
740,741
742,743
745,746
746,747
748,749
748,750
748,751
749,750
749,751
750,751
750,752
751,752
755,756
755,757
756,757
757,758
757,759
758,759
760,761
760,762
760,763
761,762
763,764
763,765
764,765
764,766
765,766
770,771
770,772
771,772
771,773
772,773
774,775
776,777
776,778
777,778
778,779
778,780
778,781
778,782
779,780
781,782
783,784
786,787
787,788
789,790
790,791
791,792
791,793
791,794
791,795
792,793
794,795
796,797
799,800
800,801
800,802
801,802
803,804
803,805
803,806
804,805
806,807
806,808
807,808
807,809
808,809
812,813
812,814
813,814
815,816
815,817
816,817
816,818
817,818
817,819
818,819
823,824
823,825
824,825
824,826
825,826
827,828
829,830
829,831
830,831
831,832
831,833
831,834
831,835
832,833
834,835
836,837
839,840
840,841
842,843
842,844
842,845
843,844
843,845
844,845
844,846
845,846
849,850
849,851
850,851
851,852
851,853
852,853
854,855
854,856
854,857
855,856
857,858
857,859
858,859
858,860
859,860
864,865
864,866
865,866
865,867
866,867
868,869
870,871
870,872
871,872
872,873
872,874
872,875
872,876
873,874
875,876
877,878
880,881
881,882
883,884
884,885
885,886
885,887
885,888
885,889
886,887
888,889
890,891
893,894
894,895
894,896
895,896
897,898
897,899
897,900
898,899
900,901
900,902
901,902
901,903
902,903
906,907
906,908
907,908
907,909
908,909
912,913
912,914
913,914
913,915
914,915
916,917
918,919
918,920
919,920
920,921
920,922
920,923
920,924
921,922
923,924
925,926
928,929
929,930
931,932
931,933
931,934
932,933
932,934
933,934
933,935
934,935
938,939
938,940
939,940
940,941
940,942
941,942
943,944
943,945
943,946
944,945
946,947
946,948
947,948
947,949
948,949
953,954
953,955
954,955
954,956
955,956
957,958
959,960
959,961
960,961
961,962
961,963
961,964
961,965
962,963
964,965
966,967
969,970
970,971
972,973
973,974
974,975
974,976
974,977
974,978
975,976
977,978
979,980
982,983
983,984
983,985
984,985
986,987
986,988
987,988
989,990
989,991
990,991
993,994
994,995
994,996
995,996
997,998
997,999
997,1000
998,999
1000,1001
1000,1002
1001,1002
1001,1003
1002,1003
1006,1007
1008,1009
1008,1010
1009,1010
1009,1011
1010,1011
1012,1013
1014,1015
1014,1016
1015,1016
1016,1017
1016,1018
1016,1019
1016,1020
1017,1018
1019,1020
1021,1022
1024,1025
1025,1026
1027,1028
1028,1029
1028,1030
1029,1030
1031,1032
1031,1033
1031,1034
1032,1033
1034,1035
1034,1036
1035,1036
1035,1037
1036,1037
1040,1041
1040,1042
1041,1042
1041,1043
1042,1043
1046,1047
1046,1048
1047,1048
1047,1049
1048,1049
1050,1051
1052,1053
1052,1054
1053,1054
1054,1055
1054,1056
1054,1057
1054,1058
1055,1056
1057,1058
1059,1060
1062,1063
1063,1064
1065,1066
1066,1067
1066,1068
1067,1068
1067,1069
1068,1069
1071,1072
1073,1074
1074,1075
1074,1076
1074,1077
1074,1078
1074,1079
1075,1076
1077,1078
1079,1080
1082,1083
1084,1085
1085,1086
-----nextToken-----
3,5,8,10,11,14,16,17,22,24,27,31,33,34,37,41,43,44,47,51,53,54,57,61,63,64,67,70,72,73,76,80,82,84,88,90,94,96,98,102,104,106,107,109,114,115,117,122,127,128,130,131,134,139,140,142,143,148,149,154,155,156,160,163,164,168,171,173,177,179,184,186,188,189,192,196,199,202,204,208,210,215,217,219,220,223,225,230,233,234,238,240,245,248,249,254,255,257,261,264,267,269,272,275,281,283,286,288,293,295,297,298,299,303,305,310,312,314,315,318,322,325,326,333,334,335,336,339,343,344,346,352,355,356,360,363,364,372,373,374,375,378,382,383,384,385,390,391,394,396,399,402,403,410,411,412,416,417,418,425,426,427,431,432,433,438,439,444,445,450,451,455,458,459,464,465,469,471,473,474,477,478,481,482,486,488,493,495,497,498,501,507,508,509,513,514,515,521,522,523,527,528,529,533,536,537,543,544,546,549,555,556,558,562,564,566,567,572,573,575,576,581,582,584,585,589,591,593,598,599,601,604,610,611,612,614,621,622,623,627,628,629,630,634,637,641,642,643,647,648,649,653,655,660,662,664,665,668,673,674,676,680,682,684,685,687,690,696,699,700,704,707,708,713,716,720,721,722,726,727,728,732,734,739,741,743,744,747,752,753,754,759,762,766,767,768,769,773,775,780,782,784,785,788,793,795,797,798,802,805,809,810,811,814,819,820,821,822,826,828,833,835,837,838,841,846,847,848,853,856,860,861,862,863,867,869,874,876,878,879,882,887,889,891,892,896,899,903,904,905,909,910,911,915,917,922,924,926,927,930,935,936,937,942,945,949,950,951,952,956,958,963,965,967,968,971,976,978,980,981,985,988,991,992,996,999,1003,1004,1005,1007,1011,1013,1018,1020,1022,1023,1026,1030,1033,1037,1038,1039,1043,1044,1045,1049,1051,1056,1058,1060,1061,1064,1069,1070,1072,1076,1078,1080,1081,1083,1086
-----computeFrom-----
111,112
111,113
119,120
119,121
121,122
121,123
133,134
133,135
146,147
146,148
151,152
151,153
158,159
158,160
166,167
166,168
175,176
175,177
194,195
194,196
206,207
206,208
228,229
228,230
236,237
236,238
243,244
243,245
251,252
251,253
259,260
259,261
277,278
277,279
279,280
279,281
285,286
285,287
301,302
301,303
320,321
320,322
328,329
328,330
348,349
348,350
350,351
350,352
358,359
358,360
367,368
367,369
387,388
387,389
398,399
398,400
406,407
406,408
421,422
421,423
453,454
453,455
484,485
484,486
503,504
503,505
517,518
517,519
531,532
531,533
540,541
540,542
552,553
552,554
595,596
595,597
606,607
606,608
617,618
617,619
632,633
632,634
651,652
651,653
670,671
670,672
692,693
692,694
694,695
694,696
702,703
702,704
711,712
711,713
730,731
730,732
757,758
757,759
771,772
771,773
800,801
800,802
824,825
824,826
851,852
851,853
865,866
865,867
894,895
894,896
913,914
913,915
940,941
940,942
954,955
954,956
983,984
983,985
994,995
994,996
1009,1010
1009,1011
1028,1029
1028,1030
1047,1048
1047,1049
1066,1067
1066,1068
-----guardedBy-----
179,192
210,223
240,245
305,318
363,382
402,416
536,598
611,648
610,673
612,649
655,668
707,766
734,747
775,788
828,841
869,882
917,930
958,971
1013,1026
1051,1064
-----guardedByNegation-----
402,431
-----lastLexicalUse-----
402,431
-----jump-----
402,431
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;UnaryExpression;BinaryExpression;LiteralExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static wpt_status dxeTXPushFrame(   WLANDXE_ChannelCBType   *channelEntry,   wpt_packet              *palPacket){   wpt_status                  status = eWLAN_PAL_STATUS_SUCCESS;   WLANDXE_DescCtrlBlkType    *currentCtrlBlk = NULL;   WLANDXE_DescType           *currentDesc    = NULL;   WLANDXE_DescType           *firstDesc      = NULL;   WLANDXE_DescType           *LastDesc       = NULL;   void                       *sourcePhysicalAddress = NULL;   wpt_uint32                  xferSize = 0;#ifdef FEATURE_R33D   tx_frm_pcie_vector_t        frameVector;   wpt_uint32                  Va;   wpt_uint32                  fragCount = 0;#else   wpt_iterator                iterator;#endif /* FEATURE_R33D */   wpt_uint32                  isEmpty = 0;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);   tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_FALSE;   if((0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc) &&      (0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc))   {      isEmpty = 1;   }   channelEntry->numFragmentCurrentChain = 0;   currentCtrlBlk = channelEntry->headCtrlBlk;   /* Initialize interator, TX is fragmented */#ifdef FEATURE_R33D   memset(&frameVector, 0, sizeof(tx_frm_pcie_vector_t));   status = wpalPrepareTxFrame(palPacket,                                    &frameVector,                                    &Va);#else   status = wpalLockPacketForTransfer(palPacket);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame unable to lock packet");      return status;   }   status = wpalIteratorInit(&iterator, palPacket);#endif /* FEATURE_R33D */   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame iterator init fail");      return status;   }   /* !!!! Revisit break condition !!!!!!! */   while(1)   {      /* Get current descriptor pointer from current control block */      currentDesc = currentCtrlBlk->linkedDesc;      if(NULL == firstDesc)      {         firstDesc = currentCtrlBlk->linkedDesc;      }      /* All control block will have same palPacket Pointer       * to make logic simpler */      currentCtrlBlk->xfrFrame = palPacket;      /* Get next fragment physical address and fragment size       * if this is the first trial, will get first physical address       * if no more fragment, Descriptor src address will be set as NULL, OK??? */#ifdef FEATURE_R33D      if(fragCount == frameVector.num_frg)      {         break;      }      currentCtrlBlk->shadowBufferVa = frameVector.frg[0].va;      sourcePhysicalAddress          = (void *)frameVector.frg[fragCount].pa;      xferSize                       = frameVector.frg[fragCount].size;      fragCount++;      HDXE_ASSERT(0 != xferSize);      HDXE_ASSERT(NULL != sourcePhysicalAddress);#else      status = wpalIteratorNext(&iterator,                                palPacket,                                &sourcePhysicalAddress,                                &xferSize);      if((NULL == sourcePhysicalAddress) ||         (0    == xferSize))      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "dxeTXPushFrame end of current frame");         break;      }      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Get next frame fail");         return status;      }#endif /* FEATURE_R33D */      /* This is the LAST descriptor valid for this transaction */      LastDesc    = currentCtrlBlk->linkedDesc;      /* Program DXE descriptor */      currentDesc->dxedesc.dxe_short_desc.srcMemAddrL =                               WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)sourcePhysicalAddress);      /* Just normal data transfer from aCPU Flat Memory to BMU Q */      if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||         (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))      {         currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ);      }      else      {         /* Test specific H2H transfer, destination address already set          * Do Nothing */      }      currentDesc->xfrSize = WLANDXE_U32_SWAP_ENDIAN(xferSize);      /* Program channel control register */      /* First frame not set VAL bit, why ??? */      if(0 == channelEntry->numFragmentCurrentChain)      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write;      }      else      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;      }      /* Update statistics */      channelEntry->numFragmentCurrentChain++;      channelEntry->numFreeDesc--;      channelEntry->numRsvdDesc++;      /* Get next control block */      currentCtrlBlk = currentCtrlBlk->nextCtrlBlk;   }   channelEntry->numTotalFrame++;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "NUM TX FRAG %d, Total Frame %d",            channelEntry->numFragmentCurrentChain, channelEntry->numTotalFrame);   /* Program Channel control register    * Set as end of packet    * Enable interrupt also for first code lock down    * performace optimization, this will be revisited */   if(NULL == LastDesc)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame NULL Last Descriptor, broken chain");      return eWLAN_PAL_STATUS_E_FAULT;   }   LastDesc->descCtrl.ctrl  = channelEntry->extraConfig.cw_ctrl_write_eop_int;   /* Now First one also Valid ????    * this procedure will prevent over handle descriptor from previous    * TX trigger */   firstDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;   /* If in BMPS mode no need to notify the DXE Engine, notify SMSM instead */   if(WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN == tempDxeCtrlBlk->rivaPowerState)   {      /* Update channel head as next avaliable linked slot */      channelEntry->headCtrlBlk = currentCtrlBlk;      if(isEmpty)      {         tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE;         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "SMSM_ret LO=%d HI=%d",                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc );         dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE);         tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE;      }      return status;   }   /* If DXE use external descriptor, registers are not needed to be programmed    * Just after finish to program descriptor, tirigger to send */   if(channelEntry->extraConfig.chan_mask & WLANDXE_CH_CTRL_EDEN_MASK)   {      /* Issue a dummy read from the DXE descriptor DDR location to         ensure that any previously posted write to the descriptor         completes. */      if(channelEntry->extraConfig.cw_ctrl_write_valid != firstDesc->descCtrl.ctrl)      {         //HDXE_ASSERT(0);      }      /* Everything is ready       * Trigger to start DMA */      status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                      channelEntry->extraConfig.chan_mask);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Write Channel Ctrl Register fail");         return status;      }      /* Update channel head as next avaliable linked slot */      channelEntry->headCtrlBlk = currentCtrlBlk;      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,               "%s Exit", __func__);      return status;   }   /* If DXE not use external descriptor, program each registers */   /* Circular buffer handle not need to program DESC register???    * GEN5 code not programed RING buffer case    * REVISIT THIS !!!!!! */   if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||      (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))   {      /* Destination address, assigned Work Q */      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,                                      channelEntry->channelConfig.refWQ);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }      /* If descriptor format is SHORT */      if(channelEntry->channelConfig.useShortDescFmt)      {         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0);         if(eWLAN_PAL_STATUS_SUCCESS != status)         {            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }      }      else      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!");      }   }#ifdef WLANDXE_TEST_CHANNEL_ENABLE   else if(WDTS_CHANNEL_H2H_TEST_TX  == channelEntry->channelType)   {      /* Destination address, Physical memory address */      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,                                      WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.dstMemAddrL));      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }      /* If descriptor format is SHORT */      if(channelEntry->channelConfig.useShortDescFmt)      {         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0);         if(eWLAN_PAL_STATUS_SUCCESS != status)         {            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }      }      else      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!");      }   }#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   /* Program Source address register    * This address is already programmed into DXE Descriptor    * But register also upadte */   status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrlRegAddr,                                   WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL));   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Program src address register fail");      return status;   }   /* If descriptor format is SHORT */   if(channelEntry->channelConfig.useShortDescFmt)   {      status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,                                      0);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }   }   else   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");   }   /* Linked list Descriptor pointer */   status = wpalWriteRegister(channelEntry->channelRegister.chDXEDesclRegAddr,                                   channelEntry->headCtrlBlk->linkedDescPhyAddr);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");      return status;   }   /* If descriptor format is SHORT */   if(channelEntry->channelConfig.useShortDescFmt)   {      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,                                      0);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }   }   else   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");   }   /* Transfer Size */   xferSize = WLANDXE_U32_SWAP_ENDIAN(firstDesc->xfrSize);   status = wpalWriteRegister(channelEntry->channelRegister.chDXESzRegAddr,                                   xferSize);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");      return status;   }   /* Everything is ready    * Trigger to start DMA */   status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                   channelEntry->extraConfig.chan_mask);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write Channel Ctrl Register fail");      return status;   }   /* Update channel head as next avaliable linked slot */   channelEntry->headCtrlBlk = currentCtrlBlk;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return status;}
static wpt_status
wpt_status
dxeTXPushFrame(   WLANDXE_ChannelCBType   *channelEntry,   wpt_packet              *palPacket)
dxeTXPushFrame
WLANDXE_ChannelCBType   *channelEntry
WLANDXE_ChannelCBType
WLANDXE_ChannelCBType
*channelEntry
*
channelEntry
wpt_packet              *palPacket
wpt_packet
wpt_packet
*palPacket
*
palPacket
{   wpt_status                  status = eWLAN_PAL_STATUS_SUCCESS;   WLANDXE_DescCtrlBlkType    *currentCtrlBlk = NULL;   WLANDXE_DescType           *currentDesc    = NULL;   WLANDXE_DescType           *firstDesc      = NULL;   WLANDXE_DescType           *LastDesc       = NULL;   void                       *sourcePhysicalAddress = NULL;   wpt_uint32                  xferSize = 0;#ifdef FEATURE_R33D   tx_frm_pcie_vector_t        frameVector;   wpt_uint32                  Va;   wpt_uint32                  fragCount = 0;#else   wpt_iterator                iterator;#endif /* FEATURE_R33D */   wpt_uint32                  isEmpty = 0;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);   tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_FALSE;   if((0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc) &&      (0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc))   {      isEmpty = 1;   }   channelEntry->numFragmentCurrentChain = 0;   currentCtrlBlk = channelEntry->headCtrlBlk;   /* Initialize interator, TX is fragmented */#ifdef FEATURE_R33D   memset(&frameVector, 0, sizeof(tx_frm_pcie_vector_t));   status = wpalPrepareTxFrame(palPacket,                                    &frameVector,                                    &Va);#else   status = wpalLockPacketForTransfer(palPacket);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame unable to lock packet");      return status;   }   status = wpalIteratorInit(&iterator, palPacket);#endif /* FEATURE_R33D */   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame iterator init fail");      return status;   }   /* !!!! Revisit break condition !!!!!!! */   while(1)   {      /* Get current descriptor pointer from current control block */      currentDesc = currentCtrlBlk->linkedDesc;      if(NULL == firstDesc)      {         firstDesc = currentCtrlBlk->linkedDesc;      }      /* All control block will have same palPacket Pointer       * to make logic simpler */      currentCtrlBlk->xfrFrame = palPacket;      /* Get next fragment physical address and fragment size       * if this is the first trial, will get first physical address       * if no more fragment, Descriptor src address will be set as NULL, OK??? */#ifdef FEATURE_R33D      if(fragCount == frameVector.num_frg)      {         break;      }      currentCtrlBlk->shadowBufferVa = frameVector.frg[0].va;      sourcePhysicalAddress          = (void *)frameVector.frg[fragCount].pa;      xferSize                       = frameVector.frg[fragCount].size;      fragCount++;      HDXE_ASSERT(0 != xferSize);      HDXE_ASSERT(NULL != sourcePhysicalAddress);#else      status = wpalIteratorNext(&iterator,                                palPacket,                                &sourcePhysicalAddress,                                &xferSize);      if((NULL == sourcePhysicalAddress) ||         (0    == xferSize))      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "dxeTXPushFrame end of current frame");         break;      }      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Get next frame fail");         return status;      }#endif /* FEATURE_R33D */      /* This is the LAST descriptor valid for this transaction */      LastDesc    = currentCtrlBlk->linkedDesc;      /* Program DXE descriptor */      currentDesc->dxedesc.dxe_short_desc.srcMemAddrL =                               WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)sourcePhysicalAddress);      /* Just normal data transfer from aCPU Flat Memory to BMU Q */      if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||         (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))      {         currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ);      }      else      {         /* Test specific H2H transfer, destination address already set          * Do Nothing */      }      currentDesc->xfrSize = WLANDXE_U32_SWAP_ENDIAN(xferSize);      /* Program channel control register */      /* First frame not set VAL bit, why ??? */      if(0 == channelEntry->numFragmentCurrentChain)      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write;      }      else      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;      }      /* Update statistics */      channelEntry->numFragmentCurrentChain++;      channelEntry->numFreeDesc--;      channelEntry->numRsvdDesc++;      /* Get next control block */      currentCtrlBlk = currentCtrlBlk->nextCtrlBlk;   }   channelEntry->numTotalFrame++;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "NUM TX FRAG %d, Total Frame %d",            channelEntry->numFragmentCurrentChain, channelEntry->numTotalFrame);   /* Program Channel control register    * Set as end of packet    * Enable interrupt also for first code lock down    * performace optimization, this will be revisited */   if(NULL == LastDesc)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame NULL Last Descriptor, broken chain");      return eWLAN_PAL_STATUS_E_FAULT;   }   LastDesc->descCtrl.ctrl  = channelEntry->extraConfig.cw_ctrl_write_eop_int;   /* Now First one also Valid ????    * this procedure will prevent over handle descriptor from previous    * TX trigger */   firstDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;   /* If in BMPS mode no need to notify the DXE Engine, notify SMSM instead */   if(WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN == tempDxeCtrlBlk->rivaPowerState)   {      /* Update channel head as next avaliable linked slot */      channelEntry->headCtrlBlk = currentCtrlBlk;      if(isEmpty)      {         tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE;         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "SMSM_ret LO=%d HI=%d",                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc );         dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE);         tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE;      }      return status;   }   /* If DXE use external descriptor, registers are not needed to be programmed    * Just after finish to program descriptor, tirigger to send */   if(channelEntry->extraConfig.chan_mask & WLANDXE_CH_CTRL_EDEN_MASK)   {      /* Issue a dummy read from the DXE descriptor DDR location to         ensure that any previously posted write to the descriptor         completes. */      if(channelEntry->extraConfig.cw_ctrl_write_valid != firstDesc->descCtrl.ctrl)      {         //HDXE_ASSERT(0);      }      /* Everything is ready       * Trigger to start DMA */      status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                      channelEntry->extraConfig.chan_mask);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Write Channel Ctrl Register fail");         return status;      }      /* Update channel head as next avaliable linked slot */      channelEntry->headCtrlBlk = currentCtrlBlk;      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,               "%s Exit", __func__);      return status;   }   /* If DXE not use external descriptor, program each registers */   /* Circular buffer handle not need to program DESC register???    * GEN5 code not programed RING buffer case    * REVISIT THIS !!!!!! */   if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||      (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))   {      /* Destination address, assigned Work Q */      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,                                      channelEntry->channelConfig.refWQ);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }      /* If descriptor format is SHORT */      if(channelEntry->channelConfig.useShortDescFmt)      {         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0);         if(eWLAN_PAL_STATUS_SUCCESS != status)         {            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }      }      else      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!");      }   }#ifdef WLANDXE_TEST_CHANNEL_ENABLE   else if(WDTS_CHANNEL_H2H_TEST_TX  == channelEntry->channelType)   {      /* Destination address, Physical memory address */      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,                                      WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.dstMemAddrL));      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }      /* If descriptor format is SHORT */      if(channelEntry->channelConfig.useShortDescFmt)      {         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0);         if(eWLAN_PAL_STATUS_SUCCESS != status)         {            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }      }      else      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!");      }   }#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   /* Program Source address register    * This address is already programmed into DXE Descriptor    * But register also upadte */   status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrlRegAddr,                                   WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL));   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Program src address register fail");      return status;   }   /* If descriptor format is SHORT */   if(channelEntry->channelConfig.useShortDescFmt)   {      status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,                                      0);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }   }   else   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");   }   /* Linked list Descriptor pointer */   status = wpalWriteRegister(channelEntry->channelRegister.chDXEDesclRegAddr,                                   channelEntry->headCtrlBlk->linkedDescPhyAddr);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");      return status;   }   /* If descriptor format is SHORT */   if(channelEntry->channelConfig.useShortDescFmt)   {      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,                                      0);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }   }   else   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");   }   /* Transfer Size */   xferSize = WLANDXE_U32_SWAP_ENDIAN(firstDesc->xfrSize);   status = wpalWriteRegister(channelEntry->channelRegister.chDXESzRegAddr,                                   xferSize);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");      return status;   }   /* Everything is ready    * Trigger to start DMA */   status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                   channelEntry->extraConfig.chan_mask);   if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write Channel Ctrl Register fail");      return status;   }   /* Update channel head as next avaliable linked slot */   channelEntry->headCtrlBlk = currentCtrlBlk;   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return status;}
wpt_status                  status = eWLAN_PAL_STATUS_SUCCESS;
wpt_status                  status = eWLAN_PAL_STATUS_SUCCESS;
wpt_status
wpt_status
status = eWLAN_PAL_STATUS_SUCCESS
status
= eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
WLANDXE_DescCtrlBlkType    *currentCtrlBlk = NULL;
WLANDXE_DescCtrlBlkType    *currentCtrlBlk = NULL;
WLANDXE_DescCtrlBlkType
WLANDXE_DescCtrlBlkType
*currentCtrlBlk = NULL
*
currentCtrlBlk
= NULL
NULL
NULL
WLANDXE_DescType           *currentDesc    = NULL;
WLANDXE_DescType           *currentDesc    = NULL;
WLANDXE_DescType
WLANDXE_DescType
*currentDesc    = NULL
*
currentDesc
= NULL
NULL
NULL
WLANDXE_DescType           *firstDesc      = NULL;
WLANDXE_DescType           *firstDesc      = NULL;
WLANDXE_DescType
WLANDXE_DescType
*firstDesc      = NULL
*
firstDesc
= NULL
NULL
NULL
WLANDXE_DescType           *LastDesc       = NULL;
WLANDXE_DescType           *LastDesc       = NULL;
WLANDXE_DescType
WLANDXE_DescType
*LastDesc       = NULL
*
LastDesc
= NULL
NULL
NULL
void                       *sourcePhysicalAddress = NULL;
void                       *sourcePhysicalAddress = NULL;
void
*sourcePhysicalAddress = NULL
*
sourcePhysicalAddress
= NULL
NULL
NULL
wpt_uint32                  xferSize = 0;
wpt_uint32                  xferSize = 0;
wpt_uint32
wpt_uint32
xferSize = 0
xferSize
= 0
0
wpt_iterator                iterator;
wpt_iterator                iterator;
wpt_iterator
wpt_iterator
iterator
iterator
wpt_uint32                  isEmpty = 0;
wpt_uint32                  isEmpty = 0;
wpt_uint32
wpt_uint32
isEmpty = 0
isEmpty
= 0
0
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Enter"
__func__
__func__
tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_FALSE;
tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_FALSE
tempDxeCtrlBlk->smsmToggled
tempDxeCtrlBlk
tempDxeCtrlBlk
smsmToggled
eWLAN_PAL_FALSE
eWLAN_PAL_FALSE
if((0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc) &&      (0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc))   {      isEmpty = 1;   }
(0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc) &&      (0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc)
(0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc)
0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc
0
tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc
tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI]
tempDxeCtrlBlk->dxeChannel
tempDxeCtrlBlk
tempDxeCtrlBlk
dxeChannel
WDTS_CHANNEL_TX_LOW_PRI
WDTS_CHANNEL_TX_LOW_PRI
numRsvdDesc
(0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc)
0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc
0
tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc
tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI]
tempDxeCtrlBlk->dxeChannel
tempDxeCtrlBlk
tempDxeCtrlBlk
dxeChannel
WDTS_CHANNEL_TX_HIGH_PRI
WDTS_CHANNEL_TX_HIGH_PRI
numRsvdDesc
{      isEmpty = 1;   }
isEmpty = 1;
isEmpty = 1
isEmpty
isEmpty
1
channelEntry->numFragmentCurrentChain = 0;
channelEntry->numFragmentCurrentChain = 0
channelEntry->numFragmentCurrentChain
channelEntry
channelEntry
numFragmentCurrentChain
0
currentCtrlBlk = channelEntry->headCtrlBlk;
currentCtrlBlk = channelEntry->headCtrlBlk
currentCtrlBlk
currentCtrlBlk
channelEntry->headCtrlBlk
channelEntry
channelEntry
headCtrlBlk
status = wpalLockPacketForTransfer(palPacket);
status = wpalLockPacketForTransfer(palPacket)
status
status
wpalLockPacketForTransfer(palPacket)
wpalLockPacketForTransfer
wpalLockPacketForTransfer
palPacket
palPacket
if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame unable to lock packet");      return status;   }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame unable to lock packet");      return status;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame unable to lock packet");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame unable to lock packet")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame unable to lock packet"
return status;
status
status
status = wpalIteratorInit(&iterator, palPacket);
status = wpalIteratorInit(&iterator, palPacket)
status
status
wpalIteratorInit(&iterator, palPacket)
wpalIteratorInit
wpalIteratorInit
&iterator
iterator
iterator
palPacket
palPacket
if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame iterator init fail");      return status;   }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame iterator init fail");      return status;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame iterator init fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame iterator init fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame iterator init fail"
return status;
status
status
while(1)   {      /* Get current descriptor pointer from current control block */      currentDesc = currentCtrlBlk->linkedDesc;      if(NULL == firstDesc)      {         firstDesc = currentCtrlBlk->linkedDesc;      }      /* All control block will have same palPacket Pointer       * to make logic simpler */      currentCtrlBlk->xfrFrame = palPacket;      /* Get next fragment physical address and fragment size       * if this is the first trial, will get first physical address       * if no more fragment, Descriptor src address will be set as NULL, OK??? */#ifdef FEATURE_R33D      if(fragCount == frameVector.num_frg)      {         break;      }      currentCtrlBlk->shadowBufferVa = frameVector.frg[0].va;      sourcePhysicalAddress          = (void *)frameVector.frg[fragCount].pa;      xferSize                       = frameVector.frg[fragCount].size;      fragCount++;      HDXE_ASSERT(0 != xferSize);      HDXE_ASSERT(NULL != sourcePhysicalAddress);#else      status = wpalIteratorNext(&iterator,                                palPacket,                                &sourcePhysicalAddress,                                &xferSize);      if((NULL == sourcePhysicalAddress) ||         (0    == xferSize))      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "dxeTXPushFrame end of current frame");         break;      }      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Get next frame fail");         return status;      }#endif /* FEATURE_R33D */      /* This is the LAST descriptor valid for this transaction */      LastDesc    = currentCtrlBlk->linkedDesc;      /* Program DXE descriptor */      currentDesc->dxedesc.dxe_short_desc.srcMemAddrL =                               WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)sourcePhysicalAddress);      /* Just normal data transfer from aCPU Flat Memory to BMU Q */      if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||         (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))      {         currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ);      }      else      {         /* Test specific H2H transfer, destination address already set          * Do Nothing */      }      currentDesc->xfrSize = WLANDXE_U32_SWAP_ENDIAN(xferSize);      /* Program channel control register */      /* First frame not set VAL bit, why ??? */      if(0 == channelEntry->numFragmentCurrentChain)      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write;      }      else      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;      }      /* Update statistics */      channelEntry->numFragmentCurrentChain++;      channelEntry->numFreeDesc--;      channelEntry->numRsvdDesc++;      /* Get next control block */      currentCtrlBlk = currentCtrlBlk->nextCtrlBlk;   }
1
{      /* Get current descriptor pointer from current control block */      currentDesc = currentCtrlBlk->linkedDesc;      if(NULL == firstDesc)      {         firstDesc = currentCtrlBlk->linkedDesc;      }      /* All control block will have same palPacket Pointer       * to make logic simpler */      currentCtrlBlk->xfrFrame = palPacket;      /* Get next fragment physical address and fragment size       * if this is the first trial, will get first physical address       * if no more fragment, Descriptor src address will be set as NULL, OK??? */#ifdef FEATURE_R33D      if(fragCount == frameVector.num_frg)      {         break;      }      currentCtrlBlk->shadowBufferVa = frameVector.frg[0].va;      sourcePhysicalAddress          = (void *)frameVector.frg[fragCount].pa;      xferSize                       = frameVector.frg[fragCount].size;      fragCount++;      HDXE_ASSERT(0 != xferSize);      HDXE_ASSERT(NULL != sourcePhysicalAddress);#else      status = wpalIteratorNext(&iterator,                                palPacket,                                &sourcePhysicalAddress,                                &xferSize);      if((NULL == sourcePhysicalAddress) ||         (0    == xferSize))      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "dxeTXPushFrame end of current frame");         break;      }      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Get next frame fail");         return status;      }#endif /* FEATURE_R33D */      /* This is the LAST descriptor valid for this transaction */      LastDesc    = currentCtrlBlk->linkedDesc;      /* Program DXE descriptor */      currentDesc->dxedesc.dxe_short_desc.srcMemAddrL =                               WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)sourcePhysicalAddress);      /* Just normal data transfer from aCPU Flat Memory to BMU Q */      if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||         (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))      {         currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ);      }      else      {         /* Test specific H2H transfer, destination address already set          * Do Nothing */      }      currentDesc->xfrSize = WLANDXE_U32_SWAP_ENDIAN(xferSize);      /* Program channel control register */      /* First frame not set VAL bit, why ??? */      if(0 == channelEntry->numFragmentCurrentChain)      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write;      }      else      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;      }      /* Update statistics */      channelEntry->numFragmentCurrentChain++;      channelEntry->numFreeDesc--;      channelEntry->numRsvdDesc++;      /* Get next control block */      currentCtrlBlk = currentCtrlBlk->nextCtrlBlk;   }
currentDesc = currentCtrlBlk->linkedDesc;
currentDesc = currentCtrlBlk->linkedDesc
currentDesc
currentDesc
currentCtrlBlk->linkedDesc
currentCtrlBlk
currentCtrlBlk
linkedDesc
if(NULL == firstDesc)      {         firstDesc = currentCtrlBlk->linkedDesc;      }
NULL == firstDesc
NULL
NULL
firstDesc
firstDesc
{         firstDesc = currentCtrlBlk->linkedDesc;      }
firstDesc = currentCtrlBlk->linkedDesc;
firstDesc = currentCtrlBlk->linkedDesc
firstDesc
firstDesc
currentCtrlBlk->linkedDesc
currentCtrlBlk
currentCtrlBlk
linkedDesc
currentCtrlBlk->xfrFrame = palPacket;
currentCtrlBlk->xfrFrame = palPacket
currentCtrlBlk->xfrFrame
currentCtrlBlk
currentCtrlBlk
xfrFrame
palPacket
palPacket
status = wpalIteratorNext(&iterator,                                palPacket,                                &sourcePhysicalAddress,                                &xferSize);
status = wpalIteratorNext(&iterator,                                palPacket,                                &sourcePhysicalAddress,                                &xferSize)
status
status
wpalIteratorNext(&iterator,                                palPacket,                                &sourcePhysicalAddress,                                &xferSize)
wpalIteratorNext
wpalIteratorNext
&iterator
iterator
iterator
palPacket
palPacket
&sourcePhysicalAddress
sourcePhysicalAddress
sourcePhysicalAddress
&xferSize
xferSize
xferSize
if((NULL == sourcePhysicalAddress) ||         (0    == xferSize))      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "dxeTXPushFrame end of current frame");         break;      }
(NULL == sourcePhysicalAddress) ||         (0    == xferSize)
(NULL == sourcePhysicalAddress)
NULL == sourcePhysicalAddress
NULL
NULL
sourcePhysicalAddress
sourcePhysicalAddress
(0    == xferSize)
0    == xferSize
0
xferSize
xferSize
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "dxeTXPushFrame end of current frame");         break;      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "dxeTXPushFrame end of current frame");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "dxeTXPushFrame end of current frame")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"dxeTXPushFrame end of current frame"
break;
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Get next frame fail");         return status;      }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Get next frame fail");         return status;      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Get next frame fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Get next frame fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Get next frame fail"
return status;
status
status
LastDesc    = currentCtrlBlk->linkedDesc;
LastDesc    = currentCtrlBlk->linkedDesc
LastDesc
LastDesc
currentCtrlBlk->linkedDesc
currentCtrlBlk
currentCtrlBlk
linkedDesc
currentDesc->dxedesc.dxe_short_desc.srcMemAddrL =                               WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)sourcePhysicalAddress);
currentDesc->dxedesc.dxe_short_desc.srcMemAddrL =                               WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)sourcePhysicalAddress)
currentDesc->dxedesc.dxe_short_desc.srcMemAddrL
currentDesc->dxedesc.dxe_short_desc
currentDesc->dxedesc
currentDesc
currentDesc
dxedesc
dxe_short_desc
srcMemAddrL
WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)sourcePhysicalAddress)
WLANDXE_U32_SWAP_ENDIAN
WLANDXE_U32_SWAP_ENDIAN
(wpt_uint32)sourcePhysicalAddress
wpt_uint32
wpt_uint32
wpt_uint32

sourcePhysicalAddress
sourcePhysicalAddress
if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||         (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))      {         currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ);      }      else      {         /* Test specific H2H transfer, destination address already set          * Do Nothing */      }
(WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||         (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType)
(WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType)
WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType
WDTS_CHANNEL_TX_LOW_PRI
WDTS_CHANNEL_TX_LOW_PRI
channelEntry->channelType
channelEntry
channelEntry
channelType
(WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType)
WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType
WDTS_CHANNEL_TX_HIGH_PRI
WDTS_CHANNEL_TX_HIGH_PRI
channelEntry->channelType
channelEntry
channelEntry
channelType
{         currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ);      }
currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ);
currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ)
currentDesc->dxedesc.dxe_short_desc.dstMemAddrL
currentDesc->dxedesc.dxe_short_desc
currentDesc->dxedesc
currentDesc
currentDesc
dxedesc
dxe_short_desc
dstMemAddrL
WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ)
WLANDXE_U32_SWAP_ENDIAN
WLANDXE_U32_SWAP_ENDIAN
channelEntry->channelConfig.refWQ
channelEntry->channelConfig
channelEntry
channelEntry
channelConfig
refWQ
{         /* Test specific H2H transfer, destination address already set          * Do Nothing */      }
currentDesc->xfrSize = WLANDXE_U32_SWAP_ENDIAN(xferSize);
currentDesc->xfrSize = WLANDXE_U32_SWAP_ENDIAN(xferSize)
currentDesc->xfrSize
currentDesc
currentDesc
xfrSize
WLANDXE_U32_SWAP_ENDIAN(xferSize)
WLANDXE_U32_SWAP_ENDIAN
WLANDXE_U32_SWAP_ENDIAN
xferSize
xferSize
if(0 == channelEntry->numFragmentCurrentChain)      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write;      }      else      {         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;      }
0 == channelEntry->numFragmentCurrentChain
0
channelEntry->numFragmentCurrentChain
channelEntry
channelEntry
numFragmentCurrentChain
{         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write;      }
currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write;
currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write
currentDesc->descCtrl.ctrl
currentDesc->descCtrl
currentDesc
currentDesc
descCtrl
ctrl
channelEntry->extraConfig.cw_ctrl_write
channelEntry->extraConfig
channelEntry
channelEntry
extraConfig
cw_ctrl_write
{         currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;      }
currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;
currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid
currentDesc->descCtrl.ctrl
currentDesc->descCtrl
currentDesc
currentDesc
descCtrl
ctrl
channelEntry->extraConfig.cw_ctrl_write_valid
channelEntry->extraConfig
channelEntry
channelEntry
extraConfig
cw_ctrl_write_valid
channelEntry->numFragmentCurrentChain++;
channelEntry->numFragmentCurrentChain++
channelEntry->numFragmentCurrentChain
channelEntry
channelEntry
numFragmentCurrentChain
channelEntry->numFreeDesc--;
channelEntry->numFreeDesc--
channelEntry->numFreeDesc
channelEntry
channelEntry
numFreeDesc
channelEntry->numRsvdDesc++;
channelEntry->numRsvdDesc++
channelEntry->numRsvdDesc
channelEntry
channelEntry
numRsvdDesc
currentCtrlBlk = currentCtrlBlk->nextCtrlBlk;
currentCtrlBlk = currentCtrlBlk->nextCtrlBlk
currentCtrlBlk
currentCtrlBlk
currentCtrlBlk->nextCtrlBlk
currentCtrlBlk
currentCtrlBlk
nextCtrlBlk
channelEntry->numTotalFrame++;
channelEntry->numTotalFrame++
channelEntry->numTotalFrame
channelEntry
channelEntry
numTotalFrame
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "NUM TX FRAG %d, Total Frame %d",            channelEntry->numFragmentCurrentChain, channelEntry->numTotalFrame);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "NUM TX FRAG %d, Total Frame %d",            channelEntry->numFragmentCurrentChain, channelEntry->numTotalFrame)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"NUM TX FRAG %d, Total Frame %d"
channelEntry->numFragmentCurrentChain
channelEntry
channelEntry
numFragmentCurrentChain
channelEntry->numTotalFrame
channelEntry
channelEntry
numTotalFrame
if(NULL == LastDesc)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame NULL Last Descriptor, broken chain");      return eWLAN_PAL_STATUS_E_FAULT;   }
NULL == LastDesc
NULL
NULL
LastDesc
LastDesc
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame NULL Last Descriptor, broken chain");      return eWLAN_PAL_STATUS_E_FAULT;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame NULL Last Descriptor, broken chain");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame NULL Last Descriptor, broken chain")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame NULL Last Descriptor, broken chain"
return eWLAN_PAL_STATUS_E_FAULT;
eWLAN_PAL_STATUS_E_FAULT
eWLAN_PAL_STATUS_E_FAULT
LastDesc->descCtrl.ctrl  = channelEntry->extraConfig.cw_ctrl_write_eop_int;
LastDesc->descCtrl.ctrl  = channelEntry->extraConfig.cw_ctrl_write_eop_int
LastDesc->descCtrl.ctrl
LastDesc->descCtrl
LastDesc
LastDesc
descCtrl
ctrl
channelEntry->extraConfig.cw_ctrl_write_eop_int
channelEntry->extraConfig
channelEntry
channelEntry
extraConfig
cw_ctrl_write_eop_int
firstDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid;
firstDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid
firstDesc->descCtrl.ctrl
firstDesc->descCtrl
firstDesc
firstDesc
descCtrl
ctrl
channelEntry->extraConfig.cw_ctrl_write_valid
channelEntry->extraConfig
channelEntry
channelEntry
extraConfig
cw_ctrl_write_valid
if(WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN == tempDxeCtrlBlk->rivaPowerState)   {      /* Update channel head as next avaliable linked slot */      channelEntry->headCtrlBlk = currentCtrlBlk;      if(isEmpty)      {         tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE;         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "SMSM_ret LO=%d HI=%d",                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc );         dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE);         tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE;      }      return status;   }
WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN == tempDxeCtrlBlk->rivaPowerState
WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN
WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN
tempDxeCtrlBlk->rivaPowerState
tempDxeCtrlBlk
tempDxeCtrlBlk
rivaPowerState
{      /* Update channel head as next avaliable linked slot */      channelEntry->headCtrlBlk = currentCtrlBlk;      if(isEmpty)      {         tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE;         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "SMSM_ret LO=%d HI=%d",                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc );         dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE);         tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE;      }      return status;   }
channelEntry->headCtrlBlk = currentCtrlBlk;
channelEntry->headCtrlBlk = currentCtrlBlk
channelEntry->headCtrlBlk
channelEntry
channelEntry
headCtrlBlk
currentCtrlBlk
currentCtrlBlk
if(isEmpty)      {         tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE;         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "SMSM_ret LO=%d HI=%d",                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc );         dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE);         tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE;      }
isEmpty
isEmpty
{         tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE;         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "SMSM_ret LO=%d HI=%d",                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc );         dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE);         tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE;      }
tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE;
tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE
tempDxeCtrlBlk->ringNotEmpty
tempDxeCtrlBlk
tempDxeCtrlBlk
ringNotEmpty
eWLAN_PAL_TRUE
eWLAN_PAL_TRUE
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "SMSM_ret LO=%d HI=%d",                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc );
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,                  "SMSM_ret LO=%d HI=%d",                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc )
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"SMSM_ret LO=%d HI=%d"
tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc
tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI]
tempDxeCtrlBlk->dxeChannel
tempDxeCtrlBlk
tempDxeCtrlBlk
dxeChannel
WDTS_CHANNEL_TX_LOW_PRI
WDTS_CHANNEL_TX_LOW_PRI
numRsvdDesc
tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc
tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI]
tempDxeCtrlBlk->dxeChannel
tempDxeCtrlBlk
tempDxeCtrlBlk
dxeChannel
WDTS_CHANNEL_TX_HIGH_PRI
WDTS_CHANNEL_TX_HIGH_PRI
numRsvdDesc
dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE);
dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE)
dxeNotifySmsm
dxeNotifySmsm
eWLAN_PAL_TRUE
eWLAN_PAL_TRUE
eWLAN_PAL_FALSE
eWLAN_PAL_FALSE
tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE;
tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE
tempDxeCtrlBlk->smsmToggled
tempDxeCtrlBlk
tempDxeCtrlBlk
smsmToggled
eWLAN_PAL_TRUE
eWLAN_PAL_TRUE
return status;
status
status
if(channelEntry->extraConfig.chan_mask & WLANDXE_CH_CTRL_EDEN_MASK)   {      /* Issue a dummy read from the DXE descriptor DDR location to         ensure that any previously posted write to the descriptor         completes. */      if(channelEntry->extraConfig.cw_ctrl_write_valid != firstDesc->descCtrl.ctrl)      {         //HDXE_ASSERT(0);      }      /* Everything is ready       * Trigger to start DMA */      status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                      channelEntry->extraConfig.chan_mask);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Write Channel Ctrl Register fail");         return status;      }      /* Update channel head as next avaliable linked slot */      channelEntry->headCtrlBlk = currentCtrlBlk;      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,               "%s Exit", __func__);      return status;   }
channelEntry->extraConfig.chan_mask & WLANDXE_CH_CTRL_EDEN_MASK
channelEntry->extraConfig.chan_mask
channelEntry->extraConfig
channelEntry
channelEntry
extraConfig
chan_mask
WLANDXE_CH_CTRL_EDEN_MASK
WLANDXE_CH_CTRL_EDEN_MASK
{      /* Issue a dummy read from the DXE descriptor DDR location to         ensure that any previously posted write to the descriptor         completes. */      if(channelEntry->extraConfig.cw_ctrl_write_valid != firstDesc->descCtrl.ctrl)      {         //HDXE_ASSERT(0);      }      /* Everything is ready       * Trigger to start DMA */      status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                      channelEntry->extraConfig.chan_mask);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Write Channel Ctrl Register fail");         return status;      }      /* Update channel head as next avaliable linked slot */      channelEntry->headCtrlBlk = currentCtrlBlk;      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,               "%s Exit", __func__);      return status;   }
if(channelEntry->extraConfig.cw_ctrl_write_valid != firstDesc->descCtrl.ctrl)      {         //HDXE_ASSERT(0);      }
channelEntry->extraConfig.cw_ctrl_write_valid != firstDesc->descCtrl.ctrl
channelEntry->extraConfig.cw_ctrl_write_valid
channelEntry->extraConfig
channelEntry
channelEntry
extraConfig
cw_ctrl_write_valid
firstDesc->descCtrl.ctrl
firstDesc->descCtrl
firstDesc
firstDesc
descCtrl
ctrl
{         //HDXE_ASSERT(0);      }
status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                      channelEntry->extraConfig.chan_mask);
status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                      channelEntry->extraConfig.chan_mask)
status
status
wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                      channelEntry->extraConfig.chan_mask)
wpalWriteRegister
wpalWriteRegister
channelEntry->channelRegister.chDXECtrlRegAddr
channelEntry->channelRegister
channelEntry
channelEntry
channelRegister
chDXECtrlRegAddr
channelEntry->extraConfig.chan_mask
channelEntry->extraConfig
channelEntry
channelEntry
extraConfig
chan_mask
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Write Channel Ctrl Register fail");         return status;      }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Write Channel Ctrl Register fail");         return status;      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Write Channel Ctrl Register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Write Channel Ctrl Register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Write Channel Ctrl Register fail"
return status;
status
status
channelEntry->headCtrlBlk = currentCtrlBlk;
channelEntry->headCtrlBlk = currentCtrlBlk
channelEntry->headCtrlBlk
channelEntry
channelEntry
headCtrlBlk
currentCtrlBlk
currentCtrlBlk
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,               "%s Exit", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,               "%s Exit", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Exit"
__func__
__func__
return status;
status
status
if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||      (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType))   {      /* Destination address, assigned Work Q */      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,                                      channelEntry->channelConfig.refWQ);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }      /* If descriptor format is SHORT */      if(channelEntry->channelConfig.useShortDescFmt)      {         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0);         if(eWLAN_PAL_STATUS_SUCCESS != status)         {            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }      }      else      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!");      }   }
(WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType) ||      (WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType)
(WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType)
WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType
WDTS_CHANNEL_TX_LOW_PRI
WDTS_CHANNEL_TX_LOW_PRI
channelEntry->channelType
channelEntry
channelEntry
channelType
(WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType)
WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType
WDTS_CHANNEL_TX_HIGH_PRI
WDTS_CHANNEL_TX_HIGH_PRI
channelEntry->channelType
channelEntry
channelEntry
channelType
{      /* Destination address, assigned Work Q */      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,                                      channelEntry->channelConfig.refWQ);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }      /* If descriptor format is SHORT */      if(channelEntry->channelConfig.useShortDescFmt)      {         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0);         if(eWLAN_PAL_STATUS_SUCCESS != status)         {            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }      }      else      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!");      }   }
status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,                                      channelEntry->channelConfig.refWQ);
status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,                                      channelEntry->channelConfig.refWQ)
status
status
wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,                                      channelEntry->channelConfig.refWQ)
wpalWriteRegister
wpalWriteRegister
channelEntry->channelRegister.chDXEDadrlRegAddr
channelEntry->channelRegister
channelEntry
channelEntry
channelRegister
chDXEDadrlRegAddr
channelEntry->channelConfig.refWQ
channelEntry->channelConfig
channelEntry
channelEntry
channelConfig
refWQ
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Program dest address register fail"
return status;
status
status
if(channelEntry->channelConfig.useShortDescFmt)      {         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0);         if(eWLAN_PAL_STATUS_SUCCESS != status)         {            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }      }      else      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!");      }
channelEntry->channelConfig.useShortDescFmt
channelEntry->channelConfig
channelEntry
channelEntry
channelConfig
useShortDescFmt
{         status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0);         if(eWLAN_PAL_STATUS_SUCCESS != status)         {            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }      }
status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0);
status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0)
status
status
wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,                                         0)
wpalWriteRegister
wpalWriteRegister
channelEntry->channelRegister.chDXEDadrhRegAddr
channelEntry->channelRegister
channelEntry
channelEntry
channelRegister
chDXEDadrhRegAddr
0
if(eWLAN_PAL_STATUS_SUCCESS != status)         {            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{            HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");            return status;         }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                     "dxeTXPushFrame Program dest address register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Program dest address register fail"
return status;
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!");      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame LONG Descriptor Format!!!")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame LONG Descriptor Format!!!"
status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrlRegAddr,                                   WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL));
status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrlRegAddr,                                   WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL))
status
status
wpalWriteRegister(channelEntry->channelRegister.chDXESadrlRegAddr,                                   WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL))
wpalWriteRegister
wpalWriteRegister
channelEntry->channelRegister.chDXESadrlRegAddr
channelEntry->channelRegister
channelEntry
channelEntry
channelRegister
chDXESadrlRegAddr
WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL)
WLANDXE_U32_SWAP_ENDIAN
WLANDXE_U32_SWAP_ENDIAN
firstDesc->dxedesc.dxe_short_desc.srcMemAddrL
firstDesc->dxedesc.dxe_short_desc
firstDesc->dxedesc
firstDesc
firstDesc
dxedesc
dxe_short_desc
srcMemAddrL
if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Program src address register fail");      return status;   }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Program src address register fail");      return status;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Program src address register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Program src address register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Program src address register fail"
return status;
status
status
if(channelEntry->channelConfig.useShortDescFmt)   {      status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,                                      0);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }   }   else   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");   }
channelEntry->channelConfig.useShortDescFmt
channelEntry->channelConfig
channelEntry
channelEntry
channelConfig
useShortDescFmt
{      status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,                                      0);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }   }
status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,                                      0);
status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,                                      0)
status
status
wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,                                      0)
wpalWriteRegister
wpalWriteRegister
channelEntry->channelRegister.chDXESadrhRegAddr
channelEntry->channelRegister
channelEntry
channelEntry
channelRegister
chDXESadrhRegAddr
0
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Program dest address register fail"
return status;
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame LONG Descriptor Format!!!"
status = wpalWriteRegister(channelEntry->channelRegister.chDXEDesclRegAddr,                                   channelEntry->headCtrlBlk->linkedDescPhyAddr);
status = wpalWriteRegister(channelEntry->channelRegister.chDXEDesclRegAddr,                                   channelEntry->headCtrlBlk->linkedDescPhyAddr)
status
status
wpalWriteRegister(channelEntry->channelRegister.chDXEDesclRegAddr,                                   channelEntry->headCtrlBlk->linkedDescPhyAddr)
wpalWriteRegister
wpalWriteRegister
channelEntry->channelRegister.chDXEDesclRegAddr
channelEntry->channelRegister
channelEntry
channelEntry
channelRegister
chDXEDesclRegAddr
channelEntry->headCtrlBlk->linkedDescPhyAddr
channelEntry->headCtrlBlk
channelEntry
channelEntry
headCtrlBlk
linkedDescPhyAddr
if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");      return status;   }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");      return status;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Write DESC Address register fail"
return status;
status
status
if(channelEntry->channelConfig.useShortDescFmt)   {      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,                                      0);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }   }   else   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");   }
channelEntry->channelConfig.useShortDescFmt
channelEntry->channelConfig
channelEntry
channelEntry
channelConfig
useShortDescFmt
{      status = wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,                                      0);      if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }   }
status = wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,                                      0);
status = wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,                                      0)
status
status
wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,                                      0)
wpalWriteRegister
wpalWriteRegister
channelEntry->channelRegister.chDXEDeschRegAddr
channelEntry->channelRegister
channelEntry
channelEntry
channelRegister
chDXEDeschRegAddr
0
if(eWLAN_PAL_STATUS_SUCCESS != status)      {         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{         HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");         return status;      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,                  "dxeTXPushFrame Program dest address register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Program dest address register fail"
return status;
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame LONG Descriptor Format!!!")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame LONG Descriptor Format!!!"
xferSize = WLANDXE_U32_SWAP_ENDIAN(firstDesc->xfrSize);
xferSize = WLANDXE_U32_SWAP_ENDIAN(firstDesc->xfrSize)
xferSize
xferSize
WLANDXE_U32_SWAP_ENDIAN(firstDesc->xfrSize)
WLANDXE_U32_SWAP_ENDIAN
WLANDXE_U32_SWAP_ENDIAN
firstDesc->xfrSize
firstDesc
firstDesc
xfrSize
status = wpalWriteRegister(channelEntry->channelRegister.chDXESzRegAddr,                                   xferSize);
status = wpalWriteRegister(channelEntry->channelRegister.chDXESzRegAddr,                                   xferSize)
status
status
wpalWriteRegister(channelEntry->channelRegister.chDXESzRegAddr,                                   xferSize)
wpalWriteRegister
wpalWriteRegister
channelEntry->channelRegister.chDXESzRegAddr
channelEntry->channelRegister
channelEntry
channelEntry
channelRegister
chDXESzRegAddr
xferSize
xferSize
if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");      return status;   }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");      return status;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write DESC Address register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Write DESC Address register fail"
return status;
status
status
status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                   channelEntry->extraConfig.chan_mask);
status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                   channelEntry->extraConfig.chan_mask)
status
status
wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,                                   channelEntry->extraConfig.chan_mask)
wpalWriteRegister
wpalWriteRegister
channelEntry->channelRegister.chDXECtrlRegAddr
channelEntry->channelRegister
channelEntry
channelEntry
channelRegister
chDXECtrlRegAddr
channelEntry->extraConfig.chan_mask
channelEntry->extraConfig
channelEntry
channelEntry
extraConfig
chan_mask
if(eWLAN_PAL_STATUS_SUCCESS != status)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write Channel Ctrl Register fail");      return status;   }
eWLAN_PAL_STATUS_SUCCESS != status
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
status
status
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write Channel Ctrl Register fail");      return status;   }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write Channel Ctrl Register fail");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "dxeTXPushFrame Write Channel Ctrl Register fail")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"dxeTXPushFrame Write Channel Ctrl Register fail"
return status;
status
status
channelEntry->headCtrlBlk = currentCtrlBlk;
channelEntry->headCtrlBlk = currentCtrlBlk
channelEntry->headCtrlBlk
channelEntry
channelEntry
headCtrlBlk
currentCtrlBlk
currentCtrlBlk
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Exit"
__func__
__func__
return status;
status
status
-----joern-----
(33,541,0)
(669,367,0)
(363,209,0)
(321,741,0)
(400,711,0)
(675,190,0)
(399,595,0)
(30,657,0)
(615,417,0)
(9,420,0)
(67,625,0)
(103,165,0)
(213,741,0)
(453,693,0)
(333,356,0)
(589,657,0)
(598,377,0)
(92,322,0)
(59,340,0)
(733,741,0)
(321,454,0)
(57,226,0)
(480,308,0)
(579,687,0)
(438,741,0)
(213,454,0)
(451,445,0)
(742,198,0)
(579,317,0)
(286,431,0)
(79,654,0)
(650,149,0)
(392,356,0)
(117,687,0)
(421,31,0)
(307,410,0)
(6,170,0)
(601,237,0)
(499,657,0)
(86,603,0)
(570,316,0)
(191,139,0)
(222,43,0)
(103,489,0)
(83,379,0)
(164,512,0)
(675,431,0)
(697,657,0)
(377,657,0)
(300,271,0)
(662,421,0)
(504,238,0)
(273,23,0)
(151,657,0)
(194,227,0)
(112,711,0)
(497,676,0)
(596,344,0)
(349,2,0)
(298,638,0)
(224,698,0)
(424,664,0)
(664,657,0)
(244,562,0)
(24,480,0)
(454,60,0)
(663,248,0)
(333,225,0)
(40,709,0)
(416,741,0)
(495,518,0)
(670,261,0)
(573,305,0)
(347,227,0)
(272,175,0)
(188,404,0)
(257,303,0)
(704,220,0)
(608,498,0)
(681,501,0)
(500,593,0)
(605,211,0)
(72,152,0)
(733,454,0)
(714,70,0)
(83,431,0)
(632,605,0)
(613,253,0)
(47,340,0)
(569,657,0)
(544,429,0)
(466,258,0)
(630,322,0)
(54,693,0)
(243,41,0)
(428,657,0)
(393,293,0)
(614,237,0)
(444,250,0)
(101,152,0)
(463,335,0)
(104,644,0)
(145,643,0)
(641,284,0)
(553,683,0)
(448,556,0)
(166,441,0)
(503,332,0)
(550,356,0)
(119,585,0)
(441,166,0)
(501,50,0)
(631,74,0)
(143,321,0)
(362,146,0)
(591,616,0)
(239,506,0)
(511,72,0)
(704,279,0)
(727,172,0)
(153,472,0)
(178,491,0)
(332,560,0)
(673,32,0)
(302,333,0)
(301,87,0)
(580,149,0)
(361,173,0)
(466,30,0)
(187,9,0)
(176,441,0)
(698,121,0)
(356,514,0)
(283,401,0)
(373,722,0)
(596,490,0)
(317,454,0)
(564,202,0)
(365,659,0)
(731,160,0)
(158,720,0)
(247,239,0)
(49,192,0)
(532,463,0)
(142,632,0)
(26,144,0)
(357,127,0)
(494,617,0)
(465,644,0)
(436,305,0)
(740,579,0)
(5,22,0)
(80,636,0)
(152,101,0)
(77,315,0)
(661,185,0)
(42,399,0)
(514,634,0)
(617,431,0)
(94,13,0)
(566,97,0)
(384,245,0)
(364,60,0)
(87,577,0)
(301,132,0)
(693,453,0)
(197,581,0)
(503,667,0)
(340,321,0)
(551,443,0)
(456,600,0)
(603,86,0)
(10,542,0)
(559,634,0)
(479,379,0)
(445,166,0)
(469,387,0)
(729,657,0)
(542,431,0)
(721,657,0)
(618,676,0)
(651,89,0)
(474,153,0)
(352,550,0)
(512,586,0)
(153,474,0)
(536,170,0)
(593,431,0)
(599,304,0)
(313,38,0)
(114,704,0)
(229,208,0)
(76,119,0)
(376,252,0)
(636,637,0)
(470,558,0)
(474,188,0)
(340,60,0)
(522,702,0)
(202,635,0)
(195,45,0)
(227,222,0)
(152,72,0)
(717,735,0)
(520,472,0)
(234,379,0)
(579,598,0)
(164,364,0)
(617,733,0)
(624,344,0)
(185,539,0)
(643,225,0)
(410,179,0)
(378,431,0)
(409,606,0)
(66,286,0)
(735,431,0)
(449,657,0)
(68,322,0)
(279,226,0)
(637,261,0)
(371,462,0)
(47,357,0)
(404,431,0)
(491,542,0)
(366,297,0)
(481,696,0)
(238,449,0)
(519,354,0)
(723,510,0)
(408,716,0)
(669,594,0)
(335,421,0)
(382,321,0)
(462,467,0)
(265,365,0)
(620,453,0)
(251,171,0)
(319,179,0)
(455,297,0)
(668,573,0)
(96,456,0)
(716,226,0)
(235,657,0)
(253,613,0)
(678,675,0)
(433,657,0)
(585,119,0)
(597,607,0)
(732,618,0)
(579,50,0)
(571,657,0)
(673,622,0)
(162,14,0)
(123,127,0)
(680,580,0)
(441,60,0)
(711,431,0)
(426,431,0)
(276,103,0)
(289,431,0)
(192,103,0)
(204,657,0)
(37,448,0)
(414,554,0)
(736,330,0)
(207,416,0)
(710,495,0)
(168,13,0)
(741,657,0)
(638,431,0)
(254,88,0)
(648,30,0)
(315,546,0)
(627,657,0)
(645,260,0)
(404,188,0)
(21,38,0)
(636,435,0)
(127,357,0)
(154,433,0)
(231,512,0)
(587,377,0)
(545,141,0)
(417,378,0)
(177,404,0)
(73,378,0)
(425,688,0)
(250,60,0)
(616,198,0)
(20,729,0)
(517,193,0)
(699,198,0)
(185,661,0)
(724,228,0)
(468,264,0)
(477,209,0)
(341,508,0)
(416,529,0)
(659,365,0)
(586,202,0)
(611,47,0)
(435,431,0)
(308,60,0)
(534,83,0)
(738,345,0)
(161,720,0)
(613,340,0)
(376,582,0)
(502,593,0)
(304,258,0)
(165,492,0)
(336,104,0)
(564,6,0)
(711,211,0)
(703,598,0)
(32,673,0)
(221,289,0)
(262,448,0)
(136,490,0)
(343,72,0)
(97,649,0)
(1,431,0)
(309,582,0)
(254,74,0)
(359,490,0)
(344,596,0)
(422,404,0)
(457,136,0)
(248,45,0)
(358,669,0)
(286,88,0)
(582,376,0)
(593,492,0)
(189,648,0)
(74,254,0)
(198,616,0)
(629,228,0)
(165,103,0)
(435,636,0)
(277,722,0)
(427,554,0)
(115,657,0)
(556,448,0)
(690,16,0)
(496,445,0)
(42,431,0)
(735,574,0)
(43,222,0)
(126,265,0)
(460,521,0)
(87,676,0)
(505,492,0)
(405,605,0)
(102,456,0)
(607,431,0)
(698,441,0)
(75,13,0)
(265,431,0)
(582,309,0)
(249,369,0)
(512,164,0)
(245,484,0)
(356,345,0)
(609,657,0)
(710,309,0)
(279,429,0)
(7,396,0)
(118,634,0)
(478,542,0)
(70,431,0)
(554,741,0)
(209,101,0)
(615,714,0)
(705,45,0)
(301,497,0)
(707,529,0)
(561,60,0)
(355,526,0)
(41,245,0)
(615,676,0)
(397,518,0)
(140,460,0)
(605,632,0)
(347,600,0)
(301,347,0)
(167,657,0)
(208,74,0)
(132,555,0)
(700,435,0)
(141,523,0)
(306,317,0)
(301,466,0)
(579,245,0)
(354,484,0)
(541,585,0)
(2,209,0)
(328,193,0)
(279,704,0)
(708,347,0)
(676,615,0)
(525,453,0)
(211,711,0)
(733,12,0)
(18,525,0)
(538,657,0)
(521,222,0)
(289,213,0)
(666,213,0)
(360,344,0)
(417,615,0)
(59,522,0)
(575,165,0)
(370,60,0)
(677,429,0)
(368,179,0)
(190,675,0)
(379,264,0)
(730,175,0)
(133,719,0)
(223,315,0)
(473,431,0)
(737,618,0)
(296,369,0)
(472,431,0)
(379,83,0)
(592,716,0)
(458,729,0)
(179,410,0)
(294,9,0)
(23,330,0)
(214,622,0)
(508,467,0)
(701,206,0)
(267,444,0)
(365,265,0)
(369,454,0)
(193,106,0)
(450,669,0)
(17,146,0)
(149,650,0)
(293,354,0)
(493,508,0)
(655,228,0)
(701,16,0)
(124,598,0)
(687,431,0)
(548,526,0)
(174,653,0)
(236,420,0)
(160,431,0)
(471,501,0)
(464,361,0)
(667,101,0)
(305,454,0)
(560,226,0)
(638,201,0)
(274,613,0)
(69,60,0)
(209,657,0)
(15,172,0)
(475,541,0)
(301,255,0)
(201,638,0)
(524,12,0)
(70,714,0)
(584,535,0)
(218,375,0)
(528,387,0)
(671,449,0)
(477,318,0)
(301,97,0)
(203,340,0)
(110,653,0)
(677,54,0)
(460,443,0)
(472,153,0)
(210,710,0)
(739,657,0)
(305,657,0)
(667,503,0)
(442,303,0)
(557,317,0)
(285,59,0)
(219,348,0)
(22,473,0)
(515,376,0)
(535,718,0)
(702,522,0)
(188,474,0)
(476,361,0)
(354,293,0)
(716,443,0)
(453,525,0)
(256,735,0)
(88,254,0)
(56,702,0)
(484,354,0)
(290,550,0)
(572,651,0)
(86,657,0)
(264,431,0)
(429,549,0)
(101,667,0)
(146,344,0)
(138,473,0)
(263,657,0)
(634,559,0)
(350,193,0)
(696,396,0)
(590,607,0)
(97,344,0)
(303,431,0)
(658,275,0)
(281,253,0)
(692,88,0)
(232,539,0)
(506,239,0)
(357,47,0)
(181,661,0)
(329,160,0)
(291,239,0)
(339,503,0)
(540,104,0)
(411,701,0)
(130,211,0)
(418,1,0)
(694,160,0)
(81,366,0)
(316,60,0)
(507,523,0)
(326,32,0)
(688,657,0)
(200,586,0)
(284,431,0)
(43,653,0)
(266,399,0)
(180,594,0)
(63,426,0)
(84,657,0)
(741,438,0)
(41,340,0)
(685,151,0)
(163,190,0)
(560,332,0)
(246,488,0)
(542,491,0)
(683,420,0)
(465,260,0)
(525,431,0)
(574,735,0)
(284,48,0)
(719,429,0)
(48,244,0)
(323,284,0)
(317,741,0)
(391,435,0)
(396,431,0)
(269,664,0)
(264,510,0)
(179,431,0)
(725,574,0)
(99,132,0)
(526,649,0)
(653,431,0)
(492,165,0)
(278,674,0)
(610,1,0)
(603,581,0)
(510,657,0)
(25,87,0)
(121,698,0)
(131,379,0)
(459,595,0)
(713,6,0)
(55,454,0)
(325,236,0)
(271,657,0)
(233,297,0)
(327,42,0)
(120,656,0)
(58,683,0)
(445,496,0)
(260,139,0)
(579,253,0)
(632,625,0)
(650,107,0)
(443,716,0)
(378,417,0)
(581,431,0)
(531,648,0)
(348,657,0)
(85,332,0)
(370,426,0)
(622,673,0)
(579,416,0)
(366,86,0)
(1,16,0)
(213,623,0)
(622,429,0)
(346,438,0)
(335,463,0)
(301,320,0)
(380,173,0)
(579,59,0)
(581,603,0)
(34,151,0)
(407,720,0)
(395,465,0)
(287,335,0)
(310,456,0)
(401,454,0)
(51,172,0)
(447,265,0)
(206,657,0)
(19,585,0)
(492,593,0)
(23,431,0)
(64,2,0)
(735,510,0)
(602,271,0)
(264,379,0)
(242,617,0)
(320,558,0)
(27,638,0)
(461,70,0)
(646,669,0)
(301,380,0)
(486,506,0)
(659,597,0)
(482,657,0)
(547,185,0)
(679,433,0)
(497,12,0)
(13,402,0)
(398,151,0)
(280,657,0)
(252,556,0)
(677,226,0)
(201,657,0)
(573,431,0)
(491,220,0)
(129,83,0)
(116,656,0)
(612,719,0)
(712,378,0)
(529,60,0)
(487,472,0)
(62,470,0)
(222,227,0)
(484,563,0)
(686,237,0)
(137,482,0)
(93,320,0)
(432,688,0)
(105,360,0)
(672,304,0)
(186,741,0)
(437,496,0)
(379,657,0)
(240,613,0)
(608,705,0)
(314,444,0)
(490,136,0)
(452,12,0)
(308,480,0)
(301,465,0)
(311,622,0)
(387,657,0)
(454,554,0)
(429,369,0)
(301,462,0)
(109,623,0)
(430,380,0)
(202,586,0)
(297,729,0)
(669,450,0)
(107,60,0)
(556,252,0)
(332,503,0)
(633,677,0)
(539,185,0)
(6,564,0)
(65,496,0)
(38,657,0)
(720,12,0)
(530,31,0)
(695,170,0)
(595,399,0)
(656,227,0)
(689,149,0)
(301,579,0)
(61,480,0)
(509,260,0)
(155,482,0)
(247,31,0)
(449,238,0)
(303,261,0)
(331,518,0)
(449,709,0)
(292,293,0)
(390,171,0)
(485,559,0)
(412,657,0)
(385,714,0)
(597,659,0)
(147,31,0)
(261,637,0)
(45,248,0)
(226,657,0)
(74,208,0)
(46,196,0)
(439,657,0)
(682,645,0)
(288,581,0)
(652,512,0)
(127,608,0)
(490,596,0)
(270,580,0)
(705,608,0)
(268,508,0)
(299,720,0)
(45,705,0)
(722,196,0)
(665,104,0)
(32,657,0)
(275,594,0)
(374,426,0)
(132,206,0)
(31,421,0)
(211,605,0)
(565,144,0)
(237,718,0)
(426,510,0)
(726,603,0)
(29,348,0)
(54,677,0)
(39,501,0)
(388,59,0)
(473,22,0)
(14,236,0)
(654,632,0)
(0,60,0)
(8,657,0)
(701,32,0)
(622,226,0)
(568,698,0)
(660,497,0)
(554,454,0)
(381,152,0)
(184,304,0)
(220,491,0)
(445,433,0)
(653,43,0)
(480,431,0)
(100,206,0)
(576,264,0)
(535,594,0)
(215,309,0)
(527,657,0)
(416,454,0)
(28,607,0)
(98,361,0)
(342,246,0)
(208,431,0)
(438,431,0)
(440,650,0)
(227,375,0)
(616,433,0)
(297,366,0)
(474,30,0)
(495,710,0)
(166,445,0)
(539,340,0)
(364,164,0)
(108,275,0)
(301,477,0)
(6,433,0)
(217,416,0)
(293,431,0)
(107,650,0)
(301,360,0)
(588,539,0)
(714,615,0)
(53,495,0)
(709,449,0)
(401,741,0)
(172,577,0)
(715,559,0)
(111,226,0)
(619,171,0)
(36,643,0)
(330,596,0)
(413,42,0)
(31,247,0)
(389,31,0)
(261,303,0)
(255,623,0)
(95,688,0)
(543,657,0)
(71,417,0)
(462,632,0)
(594,657,0)
(295,560,0)
(134,188,0)
(676,12,0)
(316,433,0)
(312,47,0)
(596,330,0)
(72,431,0)
(196,722,0)
(301,535,0)
(337,23,0)
(578,166,0)
(684,558,0)
(150,560,0)
(244,48,0)
(255,594,0)
(426,370,0)
(52,248,0)
(35,192,0)
(419,564,0)
(719,226,0)
(82,651,0)
(642,279,0)
(228,318,0)
(169,733,0)
(157,438,0)
(607,597,0)
(443,460,0)
(691,676,0)
(245,41,0)
(661,364,0)
(322,555,0)
(541,431,0)
(635,202,0)
(734,41,0)
(579,661,0)
(594,669,0)
(182,153,0)
(383,514,0)
(595,260,0)
(586,60,0)
(687,510,0)
(220,704,0)
(101,209,0)
(514,356,0)
(338,401,0)
(248,431,0)
(317,107,0)
(16,701,0)
(260,595,0)
(521,460,0)
(403,597,0)
(637,636,0)
(135,315,0)
(344,657,0)
(297,523,0)
(259,375,0)
(216,141,0)
(136,431,0)
(522,60,0)
(406,286,0)
(301,333,0)
(121,60,0)
(669,358,0)
(3,252,0)
(423,687,0)
(222,521,0)
(421,335,0)
(434,358,0)
(321,340,0)
(372,279,0)
(351,30,0)
(125,151,0)
(175,586,0)
(604,674,0)
(583,136,0)
(401,523,0)
(160,329,0)
(559,431,0)
(360,657,0)
(579,127,0)
(513,489,0)
(728,357,0)
(585,541,0)
(305,741,0)
(512,231,0)
(241,654,0)
(91,247,0)
(716,429,0)
(693,657,0)
(706,470,0)
(205,651,0)
(128,208,0)
(369,741,0)
(252,376,0)
(537,645,0)
(446,396,0)
(369,429,0)
(212,43,0)
(399,42,0)
(171,230,0)
(253,244,0)
(634,514,0)
(156,477,0)
(330,23,0)
(558,659,0)
(353,643,0)
(639,525,0)
(206,701,0)
(523,60,0)
(30,474,0)
(144,206,0)
(533,60,0)
(647,466,0)
(31,420,0)
(122,463,0)
(567,506,0)
(704,693,0)
(90,688,0)
(320,230,0)
(640,657,0)
(69,175,0)
(558,674,0)
(48,284,0)
(88,286,0)
(483,70,0)
(78,526,0)
(239,247,0)
(141,729,0)
(415,365,0)
(309,710,0)
(199,289,0)
(516,54,0)
(44,329,0)
(552,450,0)
(523,401,0)
(282,677,0)
(628,573,0)
(4,675,0)
(334,14,0)
(518,495,0)
(148,553,0)
(202,564,0)
(159,48,0)
(702,441,0)
(396,696,0)
(175,69,0)
(149,580,0)
(324,556,0)
(380,103,0)
(394,246,0)
(659,558,0)
(444,431,0)
(560,429,0)
(16,1,0)
(626,553,0)
(170,6,0)
(113,60,0)
(386,473,0)
(621,255,0)
(250,444,0)
(529,367,0)
(560,295,1)
(642,491,1)
(514,634,1)
(424,271,1)
(535,584,1)
(509,190,1)
(685,398,1)
(601,275,1)
(74,208,1)
(116,227,1)
(6,713,1)
(539,340,1)
(265,431,1)
(492,593,1)
(372,642,1)
(131,479,1)
(368,319,1)
(310,102,1)
(466,30,1)
(35,49,1)
(242,618,1)
(23,273,1)
(273,337,1)
(410,179,1)
(194,329,1)
(180,449,1)
(347,708,1)
(585,19,1)
(363,193,1)
(301,347,1)
(323,253,1)
(471,39,1)
(289,431,1)
(350,328,1)
(619,390,1)
(153,472,1)
(585,541,1)
(146,17,1)
(411,16,1)
(554,454,1)
(579,598,1)
(579,740,1)
(687,423,1)
(316,570,1)
(120,116,1)
(669,450,1)
(151,685,1)
(248,431,1)
(141,216,1)
(156,228,1)
(459,399,1)
(553,626,1)
(684,637,1)
(550,352,1)
(26,565,1)
(616,433,1)
(301,87,1)
(149,689,1)
(301,462,1)
(716,592,1)
(556,324,1)
(220,704,1)
(55,308,1)
(245,41,1)
(702,56,1)
(241,79,1)
(211,711,1)
(335,463,1)
(656,227,1)
(409,616,1)
(57,664,1)
(704,693,1)
(101,667,1)
(622,226,1)
(445,433,1)
(450,552,1)
(596,490,1)
(247,91,1)
(220,491,1)
(82,572,1)
(112,400,1)
(118,559,1)
(388,285,1)
(591,529,1)
(208,431,1)
(335,287,1)
(47,340,1)
(643,145,1)
(714,70,1)
(523,401,1)
(236,325,1)
(456,310,1)
(451,496,1)
(595,459,1)
(573,431,1)
(293,431,1)
(64,349,1)
(416,454,1)
(333,302,1)
(71,378,1)
(301,320,1)
(477,209,1)
(5,473,1)
(700,80,1)
(706,558,1)
(284,431,1)
(586,202,1)
(239,506,1)
(735,510,1)
(34,125,1)
(222,521,1)
(698,441,1)
(641,323,1)
(321,454,1)
(468,576,1)
(466,647,1)
(588,232,1)
(658,594,1)
(662,335,1)
(570,441,1)
(449,709,1)
(209,101,1)
(512,652,1)
(104,540,1)
(342,394,1)
(72,431,1)
(41,340,1)
(2,64,1)
(615,417,1)
(23,431,1)
(79,632,1)
(526,78,1)
(521,460,1)
(168,75,1)
(542,478,1)
(603,726,1)
(176,586,1)
(661,181,1)
(514,383,1)
(264,468,1)
(490,136,1)
(691,220,1)
(544,719,1)
(100,32,1)
(296,249,1)
(667,503,1)
(297,729,1)
(717,256,1)
(123,357,1)
(491,178,1)
(617,431,1)
(437,176,1)
(320,93,1)
(137,155,1)
(630,92,1)
(328,517,1)
(560,226,1)
(33,196,1)
(449,238,1)
(76,585,1)
(190,163,1)
(477,156,1)
(298,409,1)
(677,282,1)
(279,372,1)
(22,5,1)
(525,639,1)
(426,431,1)
(87,676,1)
(531,30,1)
(305,436,1)
(184,648,1)
(348,29,1)
(637,261,1)
(579,245,1)
(325,14,1)
(508,341,1)
(266,42,1)
(301,255,1)
(587,598,1)
(202,564,1)
(384,41,1)
(710,210,1)
(358,434,1)
(735,431,1)
(723,687,1)
(724,629,1)
(474,153,1)
(37,515,1)
(465,260,1)
(580,680,1)
(668,628,1)
(719,133,1)
(593,431,1)
(357,47,1)
(579,253,1)
(675,431,1)
(121,698,1)
(1,431,1)
(472,520,1)
(443,716,1)
(311,326,1)
(406,66,1)
(443,551,1)
(710,495,1)
(692,364,1)
(379,264,1)
(332,85,1)
(20,458,1)
(470,62,1)
(681,141,1)
(376,252,1)
(326,645,1)
(377,587,1)
(645,260,1)
(301,466,1)
(632,605,1)
(654,632,1)
(164,512,1)
(560,429,1)
(655,2,1)
(677,429,1)
(281,613,1)
(198,742,1)
(669,358,1)
(264,431,1)
(301,465,1)
(146,344,1)
(646,180,1)
(480,431,1)
(426,374,1)
(740,501,1)
(648,189,1)
(705,45,1)
(365,265,1)
(665,336,1)
(469,528,1)
(704,279,1)
(182,472,1)
(160,431,1)
(52,663,1)
(9,187,1)
(712,73,1)
(475,33,1)
(709,40,1)
(261,303,1)
(63,244,1)
(270,317,1)
(423,117,1)
(621,11,1)
(519,293,1)
(205,696,1)
(197,288,1)
(647,304,1)
(438,346,1)
(75,410,1)
(43,653,1)
(482,137,1)
(535,594,1)
(472,431,1)
(62,706,1)
(434,646,1)
(363,329,1)
(158,733,1)
(253,613,1)
(343,363,1)
(126,447,1)
(42,431,1)
(53,518,1)
(97,344,1)
(272,730,1)
(636,435,1)
(715,485,1)
(440,149,1)
(83,431,1)
(46,693,1)
(386,138,1)
(186,510,1)
(542,431,1)
(58,553,1)
(458,226,1)
(95,432,1)
(554,414,1)
(129,534,1)
(301,535,1)
(564,6,1)
(637,636,1)
(369,454,1)
(687,431,1)
(19,541,1)
(614,686,1)
(134,404,1)
(107,650,1)
(103,165,1)
(425,90,1)
(404,177,1)
(324,448,1)
(380,103,1)
(237,614,1)
(48,284,1)
(399,266,1)
(160,694,1)
(78,355,1)
(183,454,1)
(725,522,1)
(269,424,1)
(187,294,1)
(298,183,1)
(285,254,1)
(615,714,1)
(370,426,1)
(222,43,1)
(45,195,1)
(620,525,1)
(340,321,1)
(737,676,1)
(716,226,1)
(320,558,1)
(703,151,1)
(25,172,1)
(610,418,1)
(497,660,1)
(446,2,1)
(726,581,1)
(312,254,1)
(117,582,1)
(427,55,1)
(381,72,1)
(363,550,1)
(590,365,1)
(65,437,1)
(179,431,1)
(256,725,1)
(401,454,1)
(213,454,1)
(233,455,1)
(85,560,1)
(578,445,1)
(353,36,1)
(397,215,1)
(596,330,1)
(252,3,1)
(486,421,1)
(105,688,1)
(362,344,1)
(678,648,1)
(290,356,1)
(741,438,1)
(99,322,1)
(568,224,1)
(327,509,1)
(292,245,1)
(188,134,1)
(257,442,1)
(378,431,1)
(554,741,1)
(49,103,1)
(672,184,1)
(221,199,1)
(653,431,1)
(297,523,1)
(199,196,1)
(127,357,1)
(556,448,1)
(573,668,1)
(183,275,1)
(545,379,1)
(392,22,1)
(719,226,1)
(190,675,1)
(576,234,1)
(39,681,1)
(517,22,1)
(677,226,1)
(301,97,1)
(265,126,1)
(317,454,1)
(275,594,1)
(548,146,1)
(114,279,1)
(122,532,1)
(495,53,1)
(584,237,1)
(511,343,1)
(419,6,1)
(69,175,1)
(6,433,1)
(405,211,1)
(147,683,1)
(716,429,1)
(559,715,1)
(255,594,1)
(279,429,1)
(304,599,1)
(617,494,1)
(54,677,1)
(690,1,1)
(675,4,1)
(300,602,1)
(495,518,1)
(505,593,1)
(73,691,1)
(613,340,1)
(693,453,1)
(322,630,1)
(698,568,1)
(512,586,1)
(364,164,1)
(331,397,1)
(460,443,1)
(453,620,1)
(307,179,1)
(63,484,1)
(583,457,1)
(464,192,1)
(552,358,1)
(92,68,1)
(500,276,1)
(66,692,1)
(305,454,1)
(618,732,1)
(172,727,1)
(579,661,1)
(252,556,1)
(628,146,1)
(539,588,1)
(132,99,1)
(255,621,1)
(455,141,1)
(460,140,1)
(422,351,1)
(271,300,1)
(559,431,1)
(212,653,1)
(18,54,1)
(447,684,1)
(294,31,1)
(175,272,1)
(540,665,1)
(666,289,1)
(171,251,1)
(528,482,1)
(201,638,1)
(711,431,1)
(485,392,1)
(579,59,1)
(36,550,1)
(702,441,1)
(277,373,1)
(536,695,1)
(704,114,1)
(369,741,1)
(136,583,1)
(349,209,1)
(315,135,1)
(70,483,1)
(534,264,1)
(162,334,1)
(293,393,1)
(518,331,1)
(51,618,1)
(142,696,1)
(83,129,1)
(219,433,1)
(21,313,1)
(414,427,1)
(165,575,1)
(262,37,1)
(445,496,1)
(581,431,1)
(152,72,1)
(244,48,1)
(371,508,1)
(442,670,1)
(341,493,1)
(473,386,1)
(661,185,1)
(87,25,1)
(507,69,1)
(626,148,1)
(380,430,1)
(127,123,1)
(31,247,1)
(254,74,1)
(28,590,1)
(650,440,1)
(110,174,1)
(607,28,1)
(481,396,1)
(503,332,1)
(360,105,1)
(730,121,1)
(445,451,1)
(525,431,1)
(421,662,1)
(297,233,1)
(607,431,1)
(10,119,1)
(224,316,1)
(733,741,1)
(593,502,1)
(132,206,1)
(682,260,1)
(679,387,1)
(694,731,1)
(654,241,1)
(226,111,1)
(148,11,1)
(299,407,1)
(734,574,1)
(119,76,1)
(621,236,1)
(301,477,1)
(321,741,1)
(629,655,1)
(203,183,1)
(537,682,1)
(483,461,1)
(696,396,1)
(374,63,1)
(3,556,1)
(727,15,1)
(246,342,1)
(159,284,1)
(565,206,1)
(359,136,1)
(639,18,1)
(633,86,1)
(211,130,1)
(707,416,1)
(461,417,1)
(192,103,1)
(520,487,1)
(645,537,1)
(592,408,1)
(214,311,1)
(217,719,1)
(301,333,1)
(616,198,1)
(140,443,1)
(660,720,1)
(189,531,1)
(232,523,1)
(558,659,1)
(575,492,1)
(410,307,1)
(413,327,1)
(174,194,1)
(206,701,1)
(354,519,1)
(243,734,1)
(599,672,1)
(144,206,1)
(441,166,1)
(314,370,1)
(356,514,1)
(728,47,1)
(579,687,1)
(124,703,1)
(418,100,1)
(638,431,1)
(338,507,1)
(357,728,1)
(612,340,1)
(94,168,1)
(347,227,1)
(652,661,1)
(279,226,1)
(150,152,1)
(444,431,1)
(117,246,1)
(385,70,1)
(470,558,1)
(403,607,1)
(30,474,1)
(436,573,1)
(432,305,1)
(155,729,1)
(250,444,1)
(671,238,1)
(390,470,1)
(326,315,1)
(81,297,1)
(490,359,1)
(91,239,1)
(185,539,1)
(86,603,1)
(101,152,1)
(152,381,1)
(393,292,1)
(213,741,1)
(597,607,1)
(210,495,1)
(435,391,1)
(708,456,1)
(566,526,1)
(16,690,1)
(166,445,1)
(332,560,1)
(301,579,1)
(605,211,1)
(16,1,1)
(330,736,1)
(27,298,1)
(333,356,1)
(579,317,1)
(97,566,1)
(260,595,1)
(387,469,1)
(491,542,1)
(56,59,1)
(465,395,1)
(417,378,1)
(32,673,1)
(306,557,1)
(496,65,1)
(13,94,1)
(416,741,1)
(433,154,1)
(360,344,1)
(567,486,1)
(337,490,1)
(688,425,1)
(267,314,1)
(366,81,1)
(317,741,1)
(1,610,1)
(389,530,1)
(713,170,1)
(396,7,1)
(504,741,1)
(401,283,1)
(506,567,1)
(729,20,1)
(185,547,1)
(24,250,1)
(253,281,1)
(98,464,1)
(135,77,1)
(651,82,1)
(329,160,1)
(239,291,1)
(308,480,1)
(72,511,1)
(476,98,1)
(285,608,1)
(581,197,1)
(638,27,1)
(564,419,1)
(426,510,1)
(695,200,1)
(59,388,1)
(650,149,1)
(179,368,1)
(289,221,1)
(217,429,1)
(181,185,1)
(136,431,1)
(719,429,1)
(532,389,1)
(670,636,1)
(275,108,1)
(369,296,1)
(742,699,1)
(251,619,1)
(68,144,1)
(736,23,1)
(493,268,1)
(125,348,1)
(735,717,1)
(169,617,1)
(634,118,1)
(399,42,1)
(382,203,1)
(15,51,1)
(141,523,1)
(119,585,1)
(276,410,1)
(613,240,1)
(196,722,1)
(286,431,1)
(247,239,1)
(541,475,1)
(457,624,1)
(80,119,1)
(309,710,1)
(363,192,1)
(582,376,1)
(163,675,1)
(429,369,1)
(282,633,1)
(153,182,1)
(701,16,1)
(41,243,1)
(42,413,1)
(438,431,1)
(462,632,1)
(653,110,1)
(321,143,1)
(200,107,1)
(7,446,1)
(551,716,1)
(70,431,1)
(579,416,1)
(733,169,1)
(238,504,1)
(330,23,1)
(365,415,1)
(207,217,1)
(303,431,1)
(161,299,1)
(454,554,1)
(59,340,1)
(178,542,1)
(177,422,1)
(138,656,1)
(284,641,1)
(648,30,1)
(541,431,1)
(133,612,1)
(264,510,1)
(624,144,1)
(510,723,1)
(227,222,1)
(274,574,1)
(732,737,1)
(249,544,1)
(346,157,1)
(557,616,1)
(143,382,1)
(29,219,1)
(391,700,1)
(61,24,1)
(404,431,1)
(529,367,1)
(287,463,1)
(254,88,1)
(608,705,1)
(594,669,1)
(215,376,1)
(597,403,1)
(288,366,1)
(88,286,1)
(696,481,1)
(547,539,1)
(603,581,1)
(676,615,1)
(379,83,1)
(54,516,1)
(6,170,1)
(699,591,1)
(448,262,1)
(501,471,1)
(195,248,1)
(40,671,1)
(216,545,1)
(444,267,1)
(228,724,1)
(77,223,1)
(96,656,1)
(689,580,1)
(663,127,1)
(2,209,1)
(157,186,1)
(622,429,1)
(416,207,1)
(351,651,1)
(11,213,1)
(208,128,1)
(502,500,1)
(394,582,1)
(361,476,1)
(188,404,1)
(487,188,1)
(408,43,1)
(14,162,1)
(462,371,1)
(165,492,1)
(714,385,1)
(45,248,1)
(352,290,1)
(572,205,1)
(720,161,1)
(303,257,1)
(463,122,1)
(435,431,1)
(421,335,1)
(680,270,1)
(497,676,1)
(336,645,1)
(664,269,1)
(22,473,1)
(479,201,1)
(141,729,1)
(248,52,1)
(722,277,1)
(301,380,1)
(480,61,1)
(166,578,1)
(301,132,1)
(240,274,1)
(395,104,1)
(579,127,1)
(631,88,1)
(245,384,1)
(286,406,1)
(415,265,1)
(492,505,1)
(193,350,1)
(44,637,1)
(373,46,1)
(634,559,1)
(43,212,1)
(595,399,1)
(316,433,1)
(478,10,1)
(494,242,1)
(656,120,1)
(398,34,1)
(366,297,1)
(144,26,1)
(301,497,1)
(355,548,1)
(351,654,1)
(407,158,1)
(598,124,1)
(611,312,1)
(550,356,1)
(378,712,1)
(130,711,1)
(401,741,1)
(344,596,1)
(234,131,1)
(47,611,1)
(295,150,1)
(154,679,1)
(530,147,1)
(93,171,1)
(334,9,1)
(686,601,1)
(319,470,1)
(683,58,1)
(516,677,1)
(673,622,1)
(711,112,1)
(659,597,1)
(618,676,1)
(149,580,1)
(202,635,1)
(339,332,1)
(4,678,1)
(430,361,1)
(108,658,1)
(574,735,1)
(301,360,1)
(192,35,1)
(90,95,1)
(417,71,1)
(701,411,1)
(453,525,1)
(582,309,1)
(659,365,1)
(213,666,1)
(473,431,1)
(145,353,1)
(622,214,1)
(283,338,1)
(522,702,1)
(128,229,1)
(317,306,1)
(302,643,1)
(396,431,1)
(291,506,1)
(529,707,1)
(48,159,1)
(400,142,1)
(229,631,1)
(38,21,1)
(484,354,1)
(605,405,1)
(268,654,1)
(170,536,1)
(354,293,1)
(111,57,1)
(701,32,1)
(474,188,1)
(17,362,1)
(733,454,1)
(669,367,1)
(102,96,1)
(731,44,1)
(31,421,1)
(512,231,1)
(503,339,1)
(602,38,1)
(363,13,1)
(175,586,1)
(383,634,1)
(305,741,1)
(515,377,1)
(223,190,1)
(64,192,2)
(419,616,2)
(392,22,2)
(179,470,2)
(690,190,2)
(701,190,2)
(405,696,2)
(712,119,2)
(607,637,2)
(568,616,2)
(681,141,2)
(466,30,2)
(96,656,2)
(614,275,2)
(478,119,2)
(579,317,2)
(227,329,2)
(720,618,2)
(182,696,2)
(16,1,2)
(514,22,2)
(171,470,2)
(35,410,2)
(656,329,2)
(330,23,2)
(534,275,2)
(329,160,2)
(363,22,2)
(234,275,2)
(174,329,2)
(45,248,2)
(603,141,2)
(202,635,2)
(130,696,2)
(54,677,2)
(101,329,2)
(188,654,2)
(166,445,2)
(182,654,2)
(107,650,2)
(558,659,2)
(255,594,2)
(667,550,2)
(72,410,2)
(379,275,2)
(208,88,2)
(677,226,2)
(58,11,2)
(418,645,2)
(297,141,2)
(216,275,2)
(189,696,2)
(338,616,2)
(378,431,2)
(388,616,2)
(101,550,2)
(633,141,2)
(379,264,2)
(266,190,2)
(541,431,2)
(417,119,2)
(244,48,2)
(351,654,2)
(286,616,2)
(711,696,2)
(541,196,2)
(521,329,2)
(542,119,2)
(695,616,2)
(6,433,2)
(593,431,2)
(70,431,2)
(550,22,2)
(272,616,2)
(23,144,2)
(190,675,2)
(290,22,2)
(85,550,2)
(253,613,2)
(4,648,2)
(66,616,2)
(149,616,2)
(301,320,2)
(441,616,2)
(301,360,2)
(267,616,2)
(316,433,2)
(70,119,2)
(409,616,2)
(581,431,2)
(344,144,2)
(480,431,2)
(539,340,2)
(264,275,2)
(637,261,2)
(503,550,2)
(87,676,2)
(222,43,2)
(406,616,2)
(239,506,2)
(511,22,2)
(322,144,2)
(615,417,2)
(579,598,2)
(188,404,2)
(268,654,2)
(680,616,2)
(630,144,2)
(393,574,2)
(339,550,2)
(152,22,2)
(193,22,2)
(579,59,2)
(201,275,2)
(706,637,2)
(317,454,2)
(248,431,2)
(11,196,2)
(82,696,2)
(100,190,2)
(661,616,2)
(673,645,2)
(292,574,2)
(343,550,2)
(59,616,2)
(730,616,2)
(239,11,2)
(152,192,2)
(648,654,2)
(369,719,2)
(146,344,2)
(396,431,2)
(2,22,2)
(382,183,2)
(473,656,2)
(588,616,2)
(542,431,2)
(445,433,2)
(61,616,2)
(667,410,2)
(127,357,2)
(380,103,2)
(52,254,2)
(289,431,2)
(634,22,2)
(369,741,2)
(326,190,2)
(694,637,2)
(410,470,2)
(422,654,2)
(559,431,2)
(297,729,2)
(100,645,2)
(525,141,2)
(257,636,2)
(260,190,2)
(455,141,2)
(647,648,2)
(737,119,2)
(360,146,2)
(315,190,2)
(281,574,2)
(554,616,2)
(511,550,2)
(520,696,2)
(123,254,2)
(365,265,2)
(511,410,2)
(654,632,2)
(114,119,2)
(102,656,2)
(586,202,2)
(363,192,2)
(152,329,2)
(659,637,2)
(32,190,2)
(454,616,2)
(512,586,2)
(19,196,2)
(183,275,2)
(468,275,2)
(581,141,2)
(512,231,2)
(390,470,2)
(479,275,2)
(654,696,2)
(209,550,2)
(492,410,2)
(592,329,2)
(460,443,2)
(574,735,2)
(700,119,2)
(497,618,2)
(653,431,2)
(169,618,2)
(472,696,2)
(144,190,2)
(142,696,2)
(343,410,2)
(340,183,2)
(196,722,2)
(276,410,2)
(340,321,2)
(150,550,2)
(650,149,2)
(597,637,2)
(732,119,2)
(170,616,2)
(168,410,2)
(553,11,2)
(426,510,2)
(214,190,2)
(312,254,2)
(192,103,2)
(728,254,2)
(144,645,2)
(349,329,2)
(413,190,2)
(304,648,2)
(396,2,2)
(399,42,2)
(350,22,2)
(164,616,2)
(616,183,2)
(378,119,2)
(716,329,2)
(550,356,2)
(692,616,2)
(301,380,2)
(544,719,2)
(301,97,2)
(177,696,2)
(24,616,2)
(631,88,2)
(343,22,2)
(667,329,2)
(351,696,2)
(503,22,2)
(47,340,2)
(42,190,2)
(1,190,2)
(31,11,2)
(2,329,2)
(616,198,2)
(343,192,2)
(572,696,2)
(265,431,2)
(98,192,2)
(208,431,2)
(641,574,2)
(719,226,2)
(688,146,2)
(532,11,2)
(611,254,2)
(363,550,2)
(508,654,2)
(310,656,2)
(251,470,2)
(660,618,2)
(429,719,2)
(596,330,2)
(702,441,2)
(7,2,2)
(564,616,2)
(622,226,2)
(364,616,2)
(429,369,2)
(560,329,2)
(164,512,2)
(460,329,2)
(701,645,2)
(643,550,2)
(411,645,2)
(92,144,2)
(2,410,2)
(334,11,2)
(220,704,2)
(291,11,2)
(359,144,2)
(446,2,2)
(206,190,2)
(323,574,2)
(579,687,2)
(53,376,2)
(597,607,2)
(294,11,2)
(80,119,2)
(316,616,2)
(676,119,2)
(99,144,2)
(179,431,2)
(335,463,2)
(617,431,2)
(22,656,2)
(435,119,2)
(200,616,2)
(264,510,2)
(689,616,2)
(638,431,2)
(309,710,2)
(505,410,2)
(733,454,2)
(370,616,2)
(666,196,2)
(560,410,2)
(554,741,2)
(44,637,2)
(442,636,2)
(55,616,2)
(30,474,2)
(206,645,2)
(691,119,2)
(484,354,2)
(599,648,2)
(389,11,2)
(710,376,2)
(636,435,2)
(250,616,2)
(9,11,2)
(684,637,2)
(121,698,2)
(153,654,2)
(43,653,2)
(46,141,2)
(453,525,2)
(201,638,2)
(254,616,2)
(282,141,2)
(637,119,2)
(621,196,2)
(449,238,2)
(74,208,2)
(314,616,2)
(404,696,2)
(540,645,2)
(465,260,2)
(327,190,2)
(430,192,2)
(185,539,2)
(404,431,2)
(48,574,2)
(295,22,2)
(374,616,2)
(90,146,2)
(165,410,2)
(329,637,2)
(670,636,2)
(437,616,2)
(121,616,2)
(85,192,2)
(698,616,2)
(662,11,2)
(461,119,2)
(418,190,2)
(676,615,2)
(68,144,2)
(132,144,2)
(608,705,2)
(279,429,2)
(339,329,2)
(444,431,2)
(101,192,2)
(470,637,2)
(585,541,2)
(301,579,2)
(18,141,2)
(26,645,2)
(566,146,2)
(481,2,2)
(624,144,2)
(63,616,2)
(110,329,2)
(500,410,2)
(634,559,2)
(2,192,2)
(693,453,2)
(401,616,2)
(175,586,2)
(503,192,2)
(245,574,2)
(65,616,2)
(28,637,2)
(244,574,2)
(48,284,2)
(301,497,2)
(183,616,2)
(213,196,2)
(175,616,2)
(256,616,2)
(27,275,2)
(693,141,2)
(537,190,2)
(97,344,2)
(94,410,2)
(619,470,2)
(470,558,2)
(23,431,2)
(248,254,2)
(72,550,2)
(301,333,2)
(457,144,2)
(404,654,2)
(421,335,2)
(475,196,2)
(51,618,2)
(347,656,2)
(56,616,2)
(190,648,2)
(299,618,2)
(85,22,2)
(103,410,2)
(132,206,2)
(228,2,2)
(560,226,2)
(321,454,2)
(582,309,2)
(311,190,2)
(10,119,2)
(733,618,2)
(583,144,2)
(426,616,2)
(302,550,2)
(283,616,2)
(507,616,2)
(104,645,2)
(656,227,2)
(320,470,2)
(153,472,2)
(411,190,2)
(487,696,2)
(211,696,2)
(726,141,2)
(296,719,2)
(422,696,2)
(301,462,2)
(303,431,2)
(595,399,2)
(490,144,2)
(605,211,2)
(579,127,2)
(76,196,2)
(107,616,2)
(301,466,2)
(212,329,2)
(192,410,2)
(352,22,2)
(156,2,2)
(421,11,2)
(305,146,2)
(512,616,2)
(220,491,2)
(509,190,2)
(719,429,2)
(332,550,2)
(454,554,2)
(41,340,2)
(205,696,2)
(86,603,2)
(349,192,2)
(339,192,2)
(64,410,2)
(368,470,2)
(332,22,2)
(725,616,2)
(2,550,2)
(487,654,2)
(613,574,2)
(357,254,2)
(116,329,2)
(741,438,2)
(83,431,2)
(399,190,2)
(651,696,2)
(5,656,2)
(148,11,2)
(492,593,2)
(594,669,2)
(363,329,2)
(441,166,2)
(705,45,2)
(119,196,2)
(32,645,2)
(565,190,2)
(143,183,2)
(118,22,2)
(160,637,2)
(301,465,2)
(373,141,2)
(223,190,2)
(233,141,2)
(675,648,2)
(159,574,2)
(150,329,2)
(408,329,2)
(465,645,2)
(199,196,2)
(616,433,2)
(33,196,2)
(586,616,2)
(221,196,2)
(645,260,2)
(608,254,2)
(518,376,2)
(71,119,2)
(64,550,2)
(701,16,2)
(158,618,2)
(339,22,2)
(198,183,2)
(612,183,2)
(472,431,2)
(620,141,2)
(516,141,2)
(39,141,2)
(253,574,2)
(88,616,2)
(490,136,2)
(673,190,2)
(101,22,2)
(72,22,2)
(78,146,2)
(665,645,2)
(255,196,2)
(309,376,2)
(740,141,2)
(403,637,2)
(112,696,2)
(502,410,2)
(451,616,2)
(603,581,2)
(414,616,2)
(436,146,2)
(337,144,2)
(704,119,2)
(247,11,2)
(308,616,2)
(101,667,2)
(525,431,2)
(101,410,2)
(372,119,2)
(440,616,2)
(590,637,2)
(514,634,2)
(585,196,2)
(209,329,2)
(254,74,2)
(360,344,2)
(551,329,2)
(605,696,2)
(134,654,2)
(187,11,2)
(696,2,2)
(696,396,2)
(349,550,2)
(425,146,2)
(385,119,2)
(400,696,2)
(326,645,2)
(495,518,2)
(474,696,2)
(293,431,2)
(715,22,2)
(576,275,2)
(332,192,2)
(607,431,2)
(165,492,2)
(717,616,2)
(213,454,2)
(366,141,2)
(166,616,2)
(615,119,2)
(135,190,2)
(354,293,2)
(289,196,2)
(668,146,2)
(73,119,2)
(1,431,2)
(648,696,2)
(417,378,2)
(36,550,2)
(293,574,2)
(317,616,2)
(320,558,2)
(464,192,2)
(347,227,2)
(203,183,2)
(195,254,2)
(462,632,2)
(711,431,2)
(196,141,2)
(629,2,2)
(565,645,2)
(75,410,2)
(410,179,2)
(188,696,2)
(6,616,2)
(493,654,2)
(364,164,2)
(140,329,2)
(134,696,2)
(714,70,2)
(716,226,2)
(252,556,2)
(521,460,2)
(342,582,2)
(189,654,2)
(81,141,2)
(88,286,2)
(45,254,2)
(295,550,2)
(667,22,2)
(172,618,2)
(698,441,2)
(287,11,2)
(560,429,2)
(355,146,2)
(177,654,2)
(349,410,2)
(610,645,2)
(332,560,2)
(530,11,2)
(557,616,2)
(261,636,2)
(127,254,2)
(145,550,2)
(213,741,2)
(523,616,2)
(477,2,2)
(285,616,2)
(297,523,2)
(636,119,2)
(361,192,2)
(632,696,2)
(466,648,2)
(87,618,2)
(152,410,2)
(686,275,2)
(480,616,2)
(582,376,2)
(207,183,2)
(444,616,2)
(642,119,2)
(381,550,2)
(138,656,2)
(42,431,2)
(274,574,2)
(622,429,2)
(264,431,2)
(381,192,2)
(242,618,2)
(529,367,2)
(473,431,2)
(713,616,2)
(699,183,2)
(727,618,2)
(301,87,2)
(162,11,2)
(366,297,2)
(522,702,2)
(150,22,2)
(72,329,2)
(545,275,2)
(344,596,2)
(445,616,2)
(356,22,2)
(416,741,2)
(128,88,2)
(1,645,2)
(655,2,2)
(579,253,2)
(677,429,2)
(194,329,2)
(580,616,2)
(31,247,2)
(386,656,2)
(31,421,2)
(579,661,2)
(376,252,2)
(332,410,2)
(637,636,2)
(659,365,2)
(17,144,2)
(735,431,2)
(72,431,2)
(150,410,2)
(301,255,2)
(273,144,2)
(652,616,2)
(79,696,2)
(369,454,2)
(308,480,2)
(330,144,2)
(209,22,2)
(305,741,2)
(209,192,2)
(529,183,2)
(443,716,2)
(301,535,2)
(356,514,2)
(632,605,2)
(363,410,2)
(556,448,2)
(381,329,2)
(610,190,2)
(101,152,2)
(426,431,2)
(503,329,2)
(222,329,2)
(209,410,2)
(435,431,2)
(16,190,2)
(321,741,2)
(64,329,2)
(595,190,2)
(474,654,2)
(716,429,2)
(661,185,2)
(591,183,2)
(357,47,2)
(144,206,2)
(573,431,2)
(149,580,2)
(370,426,2)
(628,146,2)
(325,11,2)
(161,618,2)
(596,144,2)
(25,618,2)
(704,693,2)
(279,119,2)
(613,340,2)
(307,470,2)
(119,585,2)
(511,329,2)
(62,637,2)
(295,192,2)
(353,550,2)
(710,495,2)
(584,275,2)
(491,542,2)
(301,132,2)
(241,696,2)
(677,141,2)
(163,648,2)
(593,410,2)
(336,645,2)
(574,616,2)
(560,22,2)
(645,190,2)
(77,190,2)
(224,616,2)
(558,637,2)
(714,119,2)
(122,11,2)
(152,550,2)
(669,367,2)
(32,673,2)
(520,654,2)
(6,170,2)
(669,358,2)
(485,22,2)
(74,88,2)
(617,618,2)
(663,254,2)
(415,637,2)
(535,275,2)
(659,597,2)
(575,410,2)
(494,618,2)
(618,676,2)
(13,410,2)
(150,192,2)
(328,22,2)
(270,616,2)
(14,11,2)
(596,490,2)
(217,183,2)
(517,22,2)
(573,146,2)
(701,32,2)
(85,410,2)
(277,141,2)
(332,329,2)
(15,618,2)
(531,696,2)
(474,188,2)
(416,183,2)
(229,88,2)
(564,6,2)
(708,656,2)
(554,454,2)
(331,376,2)
(503,332,2)
(335,11,2)
(215,376,2)
(93,470,2)
(449,709,2)
(30,696,2)
(394,582,2)
(379,83,2)
(265,637,2)
(261,303,2)
(733,741,2)
(401,454,2)
(579,141,2)
(103,165,2)
(722,141,2)
(243,574,2)
(341,654,2)
(683,11,2)
(547,616,2)
(22,473,2)
(181,616,2)
(227,222,2)
(176,616,2)
(286,431,2)
(570,616,2)
(724,2,2)
(483,119,2)
(152,72,2)
(484,574,2)
(383,22,2)
(305,454,2)
(250,444,2)
(678,648,2)
(471,141,2)
(184,648,2)
(559,22,2)
(136,144,2)
(236,11,2)
(185,616,2)
(321,183,2)
(523,401,2)
(147,11,2)
(295,410,2)
(141,275,2)
(362,144,2)
(531,654,2)
(136,431,2)
(129,275,2)
(579,416,2)
(41,574,2)
(306,616,2)
(209,101,2)
(567,11,2)
(141,523,2)
(503,410,2)
(141,729,2)
(298,275,2)
(284,574,2)
(126,637,2)
(178,119,2)
(69,175,2)
(131,275,2)
(445,496,2)
(495,376,2)
(626,11,2)
(133,183,2)
(459,190,2)
(667,503,2)
(384,574,2)
(522,616,2)
(673,622,2)
(622,645,2)
(260,595,2)
(578,616,2)
(536,616,2)
(64,22,2)
(447,637,2)
(47,254,2)
(59,340,2)
(443,329,2)
(560,550,2)
(416,454,2)
(650,616,2)
(26,190,2)
(682,190,2)
(690,645,2)
(381,22,2)
(501,141,2)
(497,676,2)
(245,41,2)
(736,144,2)
(275,594,2)
(30,654,2)
(707,183,2)
(49,410,2)
(197,141,2)
(704,279,2)
(16,645,2)
(247,239,2)
(672,648,2)
(301,347,2)
(491,119,2)
(254,88,2)
(395,645,2)
(401,741,2)
(702,616,2)
(211,711,2)
(638,275,2)
(120,329,2)
(539,616,2)
(511,192,2)
(146,144,2)
(391,119,2)
(232,616,2)
(734,574,2)
(311,645,2)
(284,431,2)
(333,356,2)
(365,637,2)
(519,574,2)
(463,11,2)
(333,550,2)
(476,192,2)
(349,22,2)
(54,141,2)
(319,470,2)
(105,146,2)
(339,410,2)
(83,275,2)
(486,11,2)
(303,636,2)
(214,645,2)
(687,431,2)
(2,209,2)
(432,146,2)
(210,376,2)
(407,618,2)
(343,329,2)
(240,574,2)
(560,192,2)
(653,329,2)
(735,510,2)
(742,183,2)
(526,146,2)
(220,119,2)
(456,656,2)
(496,616,2)
(279,226,2)
(354,574,2)
(618,119,2)
(301,477,2)
(669,450,2)
(85,329,2)
(731,637,2)
(153,696,2)
(735,616,2)
(648,30,2)
(202,616,2)
(474,153,2)
(295,329,2)
(288,141,2)
(317,741,2)
(705,254,2)
(397,376,2)
(427,616,2)
(222,521,2)
(160,431,2)
(86,141,2)
(246,582,2)
(438,431,2)
(472,654,2)
(97,146,2)
(675,431,2)
(91,11,2)
(719,183,2)
(667,192,2)
(206,701,2)
(380,192,2)
(72,192,2)
(601,275,2)
(506,11,2)
(462,654,2)
(95,146,2)
(249,719,2)
(237,275,2)
(202,564,2)
(548,146,2)
(371,654,2)
(615,714,2)
(43,329,2)
(622,190,2)
(477,209,2)
(639,141,2)
(69,616,2)
(579,245,2)
(535,594,2)
(381,410,2)
(453,141,2)
-----------------------------------
(0,if(NULL == firstDesc)
(1,channelEntry->channelRegister)
(2,eWLAN_PAL_STATUS_SUCCESS != status)
(3,numRsvdDesc)
(4,channelConfig)
(5,useShortDescFmt)
(6,frameVector.frg[fragCount])
(7,channelConfig)
(8,if(eWLAN_PAL_STATUS_SUCCESS != status)
(9,dxeNotifySmsm(eWLAN_PAL_TRUE, eWLAN_PAL_FALSE)
(10,channelEntry)
(11,isEmpty)
(12,)
(13,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeTXPushFrame LONG Descriptor Format!!!")
(14,tempDxeCtrlBlk->smsmToggled)
(15,eWLAN_PAL_TRACE_LEVEL_ERROR)
(16,channelEntry->channelRegister.chDXESzRegAddr)
(17,status)
(18,channelEntry)
(19,chan_mask)
(20,NULL)
(21,eWLAN_PAL_STATUS_SUCCESS)
(22,channelEntry->channelConfig.useShortDescFmt)
(23,channelEntry->extraConfig)
(24,channelEntry)
(25,status)
(26,status)
(27,numTotalFrame)
(28,channelConfig)
(29,0)
(30,status = wpalWriteRegister(channelEntry->channelRegister.chDXEDesclRegAddr,\n\\n                                   channelEntry->headCtrlBlk->linkedDescPhyAddr)
(31,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n                  "SMSM_ret LO=%d HI=%d",\n\\n                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc,\n\\n                  tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc )
(32,xferSize = WLANDXE_U32_SWAP_ENDIAN(firstDesc->xfrSize)
(33,channelEntry)
(34,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(35,status)
(36,eWLAN_MODULE_DAL_DATA)
(37,tempDxeCtrlBlk)
(38,status = eWLAN_PAL_STATUS_SUCCESS)
(39,eWLAN_PAL_TRACE_LEVEL_ERROR)
(40,tx_frm_pcie_vector_t)
(41,currentDesc->descCtrl)
(42,channelEntry->channelRegister)
(43,channelEntry->channelRegister.chDXEDadrlRegAddr)
(44,WDTS_CHANNEL_H2H_TEST_TX)
(45,channelEntry->channelConfig.refWQ)
(46,WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN)
(47,currentDesc->dxedesc)
(48,channelEntry->extraConfig.cw_ctrl_write)
(49,eWLAN_PAL_STATUS_SUCCESS)
(50,)
(51,eWLAN_MODULE_DAL_DATA)
(52,channelConfig)
(53,WDTS_CHANNEL_TX_HIGH_PRI)
(54,firstDesc->descCtrl.ctrl)
(55,currentCtrlBlk)
(56,xferSize)
(57,firstDesc)
(58,eWLAN_PAL_TRUE)
(59,currentDesc->xfrSize)
(60,)
(61,numRsvdDesc)
(62,status)
(63,channelEntry)
(64,status)
(65,frg)
(66,channelEntry)
(67,if(eWLAN_PAL_STATUS_SUCCESS != status)
(68,eWLAN_MODULE_DAL_DATA)
(69,HDXE_ASSERT(NULL != sourcePhysicalAddress)
(70,channelEntry->extraConfig)
(71,chDXECtrlRegAddr)
(72,channelEntry->channelRegister)
(73,channelEntry)
(74,WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType)
(75,eWLAN_MODULE_DAL_DATA)
(76,WLANDXE_CH_CTRL_EDEN_MASK)
(77,eWLAN_PAL_TRACE_LEVEL_ERROR)
(78,"dxeTXPushFrame Write Channel Ctrl Register fail")
(79,eWLAN_PAL_STATUS_SUCCESS)
(80,WDTS_CHANNEL_TX_LOW_PRI)
(81,ctrl)
(82,"dxeTXPushFrame LONG Descriptor Format!!!")
(83,channelEntry->numTotalFrame)
(84,LastDesc)
(85,dxe_short_desc)
(86,LastDesc->descCtrl.ctrl  = channelEntry->extraConfig.cw_ctrl_write_eop_int)
(87,return status;)
(88,WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType)
(89,)
(90,"%s Exit")
(91,numRsvdDesc)
(92,eWLAN_PAL_TRACE_LEVEL_ERROR)
(93,status)
(94,"dxeTXPushFrame LONG Descriptor Format!!!")
(95,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(96,eWLAN_MODULE_DAL_DATA)
(97,return status;)
(98,eWLAN_PAL_TRACE_LEVEL_ERROR)
(99,status)
(100,status)
(101,wpalWriteRegister(channelEntry->channelRegister.chDXESadrlRegAddr,\n\\n                                   WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL)
(102,eWLAN_PAL_TRACE_LEVEL_ERROR)
(103,status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,\n\\n                                         0)
(104,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeTXPushFrame Program dest address register fail")
(105,status)
(106,)
(107,currentCtrlBlk->shadowBufferVa = frameVector.frg[0].va)
(108,status)
(109,if(isEmpty)
(110,channelRegister)
(111,NULL)
(112,channelRegister)
(113,if(0 == channelEntry->numFragmentCurrentChain)
(114,ctrl)
(115,if(channelEntry->extraConfig.chan_mask & WLANDXE_CH_CTRL_EDEN_MASK)
(116,eWLAN_PAL_STATUS_SUCCESS)
(117,channelEntry)
(118,chDXEDadrhRegAddr)
(119,channelEntry->extraConfig.chan_mask & WLANDXE_CH_CTRL_EDEN_MASK)
(120,status)
(121,HDXE_ASSERT(0 != xferSize)
(122,dxeChannel)
(123,dstMemAddrL)
(124,smsmToggled)
(125,eWLAN_MODULE_DAL_DATA)
(126,channelRegister)
(127,currentDesc->dxedesc.dxe_short_desc.dstMemAddrL)
(128,channelType)
(129,numTotalFrame)
(130,chDXESadrhRegAddr)
(131,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(132,return status;)
(133,firstDesc)
(134,chDXEDesclRegAddr)
(135,"dxeTXPushFrame LONG Descriptor Format!!!")
(136,channelEntry->channelRegister)
(137,NULL)
(138,channelEntry)
(139,)
(140,dstMemAddrL)
(141,NULL == LastDesc)
(142,status)
(143,linkedDesc)
(144,eWLAN_PAL_STATUS_SUCCESS != status)
(145,"dxeTXPushFrame Program dest address register fail")
(146,eWLAN_PAL_STATUS_SUCCESS != status)
(147,eWLAN_MODULE_DAL_DATA)
(148,tempDxeCtrlBlk)
(149,frameVector.frg[0])
(150,firstDesc)
(151,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "%s Enter", __func__)
(152,channelEntry->channelRegister.chDXESadrlRegAddr)
(153,channelEntry->headCtrlBlk->linkedDescPhyAddr)
(154,0)
(155,sourcePhysicalAddress)
(156,status)
(157,channelEntry)
(158,eWLAN_MODULE_DAL_DATA)
(159,cw_ctrl_write)
(160,channelEntry->channelType)
(161,__func__)
(162,smsmToggled)
(163,useShortDescFmt)
(164,WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)
(165,wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,\n\\n                                         0)
(166,frameVector.frg[fragCount].size)
(167,if(eWLAN_PAL_STATUS_SUCCESS != status)
(168,eWLAN_PAL_TRACE_LEVEL_ERROR)
(169,currentCtrlBlk)
(170,frameVector.frg)
(171,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeTXPushFrame Program dest address register fail")
(172,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeTXPushFrame Write Channel Ctrl Register fail")
(173,)
(174,channelEntry)
(175,NULL != sourcePhysicalAddress)
(176,xferSize)
(177,channelRegister)
(178,cw_ctrl_write_valid)
(179,channelEntry->channelConfig)
(180,status)
(181,srcMemAddrL)
(182,linkedDescPhyAddr)
(183,1)
(184,eWLAN_MODULE_DAL_DATA)
(185,currentDesc->dxedesc.dxe_short_desc)
(186,currentCtrlBlk)
(187,eWLAN_PAL_FALSE)
(188,channelEntry->channelRegister.chDXEDesclRegAddr)
(189,status)
(190,channelEntry->channelConfig.useShortDescFmt)
(191,if(eWLAN_PAL_STATUS_SUCCESS != status)
(192,eWLAN_PAL_STATUS_SUCCESS != status)
(193,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeTXPushFrame LONG Descriptor Format!!!")
(194,status)
(195,refWQ)
(196,WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN == tempDxeCtrlBlk->rivaPowerState)
(197,extraConfig)
(198,frameVector.num_frg)
(199,channelEntry)
(200,sourcePhysicalAddress)
(201,channelEntry->numTotalFrame++)
(202,(void *)
(203,currentDesc)
(204,if(eWLAN_PAL_STATUS_SUCCESS != status)
(205,eWLAN_MODULE_DAL_DATA)
(206,status = wpalWriteRegister(channelEntry->channelRegister.chDXESzRegAddr,\n\\n                                   xferSize)
(207,xfrFrame)
(208,channelEntry->channelType)
(209,status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrlRegAddr,\n\\n                                   WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL)
(210,numRsvdDesc)
(211,channelEntry->channelRegister.chDXESadrhRegAddr)
(212,chDXEDadrlRegAddr)
(213,channelEntry->headCtrlBlk = currentCtrlBlk)
(214,xfrSize)
(215,0)
(216,LastDesc)
(217,currentCtrlBlk)
(218,if(channelEntry->channelConfig.useShortDescFmt)
(219,isEmpty)
(220,channelEntry->extraConfig.cw_ctrl_write_valid != firstDesc->descCtrl.ctrl)
(221,headCtrlBlk)
(222,wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,\n\\n                                      WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.dstMemAddrL)
(223,eWLAN_MODULE_DAL_DATA)
(224,0)
(225,)
(226,*firstDesc      = NULL)
(227,status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,\n\\n                                      WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.dstMemAddrL)
(228,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeTXPushFrame Program src address register fail")
(229,channelEntry)
(230,)
(231,wpt_uint32)
(232,currentDesc)
(233,descCtrl)
(234,"NUM TX FRAG %d, Total Frame %d")
(235,currentDesc)
(236,tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_TRUE)
(237,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeTXPushFrame iterator init fail")
(238,&frameVector)
(239,tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI])
(240,descCtrl)
(241,status)
(242,channelEntry)
(243,descCtrl)
(244,currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write)
(245,currentDesc->descCtrl.ctrl)
(246,isEmpty = 1)
(247,tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc)
(248,channelEntry->channelConfig)
(249,currentCtrlBlk)
(250,channelEntry->numFreeDesc--)
(251,"dxeTXPushFrame Program dest address register fail")
(252,tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc)
(253,currentDesc->descCtrl.ctrl)
(254,(WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType)
(255,return status;)
(256,channelEntry)
(257,channelType)
(258,)
(259,if(eWLAN_PAL_STATUS_SUCCESS != status)
(260,status = wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,\n\\n                                      0)
(261,WDTS_CHANNEL_TX_HIGH_PRI == channelEntry->channelType)
(262,dxeChannel)
(263,if((0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc)
(264,channelEntry->numFragmentCurrentChain)
(265,channelEntry->channelRegister)
(266,chDXEDeschRegAddr)
(267,numFreeDesc)
(268,eWLAN_MODULE_DAL_DATA)
(269,NULL)
(270,frameVector)
(271,*currentCtrlBlk = NULL)
(272,sourcePhysicalAddress)
(273,extraConfig)
(274,currentDesc)
(275,eWLAN_PAL_STATUS_SUCCESS != status)
(276,status)
(277,rivaPowerState)
(278,if(channelEntry->channelConfig.useShortDescFmt)
(279,firstDesc->descCtrl)
(280,while(1)
(281,ctrl)
(282,descCtrl)
(283,linkedDesc)
(284,channelEntry->extraConfig)
(285,currentDesc)
(286,channelEntry->channelType)
(287,WDTS_CHANNEL_TX_LOW_PRI)
(288,channelEntry)
(289,channelEntry->headCtrlBlk)
(290,eWLAN_PAL_STATUS_SUCCESS)
(291,WDTS_CHANNEL_TX_HIGH_PRI)
(292,channelEntry)
(293,channelEntry->extraConfig)
(294,eWLAN_PAL_TRUE)
(295,dxedesc)
(296,linkedDesc)
(297,LastDesc->descCtrl)
(298,channelEntry)
(299,"%s Exit")
(300,NULL)
(301,RET)
(302,status)
(303,channelEntry->channelType)
(304,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeTXPushFrame Write DESC Address register fail")
(305,channelEntry->headCtrlBlk = currentCtrlBlk)
(306,shadowBufferVa)
(307,useShortDescFmt)
(308,channelEntry->numRsvdDesc++)
(309,0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc)
(310,"dxeTXPushFrame Program dest address register fail")
(311,firstDesc)
(312,currentDesc)
(313,status)
(314,channelEntry)
(315,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeTXPushFrame LONG Descriptor Format!!!")
(316,fragCount++)
(317,currentCtrlBlk->shadowBufferVa)
(318,)
(319,channelEntry)
(320,return status;)
(321,currentCtrlBlk->linkedDesc)
(322,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeTXPushFrame Write DESC Address register fail")
(323,channelEntry)
(324,WDTS_CHANNEL_TX_LOW_PRI)
(325,eWLAN_PAL_TRUE)
(326,xferSize)
(327,channelEntry)
(328,eWLAN_PAL_TRACE_LEVEL_ERROR)
(329,WDTS_CHANNEL_H2H_TEST_TX  == channelEntry->channelType)
(330,channelEntry->extraConfig.chan_mask)
(331,dxeChannel)
(332,firstDesc->dxedesc.dxe_short_desc)
(333,return status;)
(334,tempDxeCtrlBlk)
(335,tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI])
(336,eWLAN_MODULE_DAL_DATA)
(337,channelEntry)
(338,currentCtrlBlk)
(339,srcMemAddrL)
(340,currentDesc = currentCtrlBlk->linkedDesc)
(341,"dxeTXPushFrame Program dest address register fail")
(342,1)
(343,channelEntry)
(344,status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,\n\\n                                   channelEntry->extraConfig.chan_mask)
(345,)
(346,headCtrlBlk)
(347,return status;)
(348,isEmpty = 0)
(349,eWLAN_PAL_STATUS_SUCCESS)
(350,"dxeTXPushFrame LONG Descriptor Format!!!")
(351,status)
(352,status)
(353,eWLAN_PAL_TRACE_LEVEL_ERROR)
(354,channelEntry->extraConfig.cw_ctrl_write_valid)
(355,eWLAN_PAL_TRACE_LEVEL_ERROR)
(356,status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,\n\\n                                         0)
(357,currentDesc->dxedesc.dxe_short_desc)
(358,&frameVector)
(359,chDXECtrlRegAddr)
(360,return status;)
(361,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                     "dxeTXPushFrame Program dest address register fail")
(362,eWLAN_PAL_STATUS_SUCCESS)
(363,status)
(364,currentDesc->dxedesc.dxe_short_desc.srcMemAddrL =\n\\n                               WLANDXE_U32_SWAP_ENDIAN((wpt_uint32)
(365,channelEntry->channelRegister.chDXEDadrlRegAddr)
(366,LastDesc->descCtrl.ctrl)
(367,wpt_packet              *palPacket)
(368,channelConfig)
(369,currentCtrlBlk->linkedDesc)
(370,channelEntry->numFragmentCurrentChain++)
(371,status)
(372,descCtrl)
(373,tempDxeCtrlBlk)
(374,numFragmentCurrentChain)
(375,)
(376,0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc)
(377,tempDxeCtrlBlk->smsmToggled = eWLAN_PAL_FALSE)
(378,channelEntry->channelRegister)
(379,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "NUM TX FRAG %d, Total Frame %d",\n\\n            channelEntry->numFragmentCurrentChain, channelEntry->numTotalFrame)
(380,return status;)
(381,chDXESadrlRegAddr)
(382,currentCtrlBlk)
(383,0)
(384,ctrl)
(385,chan_mask)
(386,channelConfig)
(387,xferSize = 0)
(388,xfrSize)
(389,"SMSM_ret LO=%d HI=%d")
(390,eWLAN_MODULE_DAL_DATA)
(391,channelType)
(392,status)
(393,extraConfig)
(394,isEmpty)
(395,status)
(396,channelEntry->channelConfig)
(397,tempDxeCtrlBlk)
(398,"%s Enter")
(399,channelEntry->channelRegister.chDXEDeschRegAddr)
(400,channelEntry)
(401,currentCtrlBlk->linkedDesc)
(402,)
(403,refWQ)
(404,channelEntry->channelRegister)
(405,0)
(406,channelType)
(407,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(408,firstDesc)
(409,break;)
(410,channelEntry->channelConfig.useShortDescFmt)
(411,xferSize)
(412,if(WLANDXE_RIVA_POWER_STATE_BMPS_UNKNOWN == tempDxeCtrlBlk->rivaPowerState)
(413,channelRegister)
(414,nextCtrlBlk)
(415,chDXEDadrlRegAddr)
(416,currentCtrlBlk->xfrFrame)
(417,channelEntry->channelRegister.chDXECtrlRegAddr)
(418,channelEntry)
(419,pa)
(420,)
(421,tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc)
(422,channelEntry)
(423,numFragmentCurrentChain)
(424,currentDesc)
(425,__func__)
(426,channelEntry->numFragmentCurrentChain)
(427,currentCtrlBlk)
(428,if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType)
(429,firstDesc = currentCtrlBlk->linkedDesc)
(430,status)
(431,WLANDXE_ChannelCBType   *channelEntry)
(432,eWLAN_MODULE_DAL_DATA)
(433,fragCount = 0)
(434,frameVector)
(435,channelEntry->channelType)
(436,currentCtrlBlk)
(437,frameVector)
(438,channelEntry->headCtrlBlk)
(439,isEmpty)
(440,va)
(441,xferSize                       = frameVector.frg[fragCount].size)
(442,channelEntry)
(443,firstDesc->dxedesc.dxe_short_desc)
(444,channelEntry->numFreeDesc)
(445,frameVector.frg[fragCount])
(446,channelEntry)
(447,channelEntry)
(448,tempDxeCtrlBlk->dxeChannel)
(449,memset(&frameVector, 0, sizeof(tx_frm_pcie_vector_t)
(450,&Va)
(451,fragCount)
(452,if(channelEntry->extraConfig.cw_ctrl_write_valid != firstDesc->descCtrl.ctrl)
(453,channelEntry->extraConfig.cw_ctrl_write_valid)
(454,currentCtrlBlk = currentCtrlBlk->nextCtrlBlk)
(455,LastDesc)
(456,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeTXPushFrame Program dest address register fail")
(457,channelEntry)
(458,LastDesc)
(459,0)
(460,firstDesc->dxedesc.dxe_short_desc.dstMemAddrL)
(461,channelEntry)
(462,return status;)
(463,tempDxeCtrlBlk->dxeChannel)
(464,eWLAN_MODULE_DAL_DATA)
(465,return status;)
(466,return status;)
(467,)
(468,numFragmentCurrentChain)
(469,0)
(470,eWLAN_PAL_STATUS_SUCCESS != status)
(471,"dxeTXPushFrame NULL Last Descriptor, broken chain")
(472,channelEntry->headCtrlBlk)
(473,channelEntry->channelConfig)
(474,wpalWriteRegister(channelEntry->channelRegister.chDXEDesclRegAddr,\n\\n                                   channelEntry->headCtrlBlk->linkedDescPhyAddr)
(475,extraConfig)
(476,"dxeTXPushFrame Program dest address register fail")
(477,return status;)
(478,extraConfig)
(479,eWLAN_MODULE_DAL_DATA)
(480,channelEntry->numRsvdDesc)
(481,useShortDescFmt)
(482,*sourcePhysicalAddress = NULL)
(483,extraConfig)
(484,currentDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid)
(485,channelEntry)
(486,tempDxeCtrlBlk)
(487,channelEntry)
(488,)
(489,)
(490,channelEntry->channelRegister.chDXECtrlRegAddr)
(491,channelEntry->extraConfig.cw_ctrl_write_valid)
(492,channelEntry->channelRegister.chDXEDadrhRegAddr)
(493,eWLAN_PAL_TRACE_LEVEL_ERROR)
(494,headCtrlBlk)
(495,tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI])
(496,frameVector.frg)
(497,return status;)
(498,)
(499,currentCtrlBlk)
(500,channelEntry)
(501,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeTXPushFrame NULL Last Descriptor, broken chain")
(502,channelRegister)
(503,firstDesc->dxedesc.dxe_short_desc.srcMemAddrL)
(504,frameVector)
(505,chDXEDadrhRegAddr)
(506,tempDxeCtrlBlk->dxeChannel)
(507,LastDesc)
(508,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                  "dxeTXPushFrame Program dest address register fail")
(509,status)
(510,channelEntry->numFragmentCurrentChain = 0)
(511,channelRegister)
(512,(wpt_uint32)
(513,if(eWLAN_PAL_STATUS_SUCCESS != status)
(514,wpalWriteRegister(channelEntry->channelRegister.chDXEDadrhRegAddr,\n\\n                                         0)
(515,0)
(516,ctrl)
(517,eWLAN_MODULE_DAL_DATA)
(518,tempDxeCtrlBlk->dxeChannel)
(519,cw_ctrl_write_valid)
(520,headCtrlBlk)
(521,WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.dstMemAddrL)
(522,currentDesc->xfrSize = WLANDXE_U32_SWAP_ENDIAN(xferSize)
(523,LastDesc    = currentCtrlBlk->linkedDesc)
(524,if(eWLAN_PAL_STATUS_SUCCESS != status)
(525,channelEntry->extraConfig)
(526,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeTXPushFrame Write Channel Ctrl Register fail")
(527,frameVector)
(528,xferSize)
(529,currentCtrlBlk->xfrFrame = palPacket)
(530,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(531,eWLAN_PAL_STATUS_SUCCESS)
(532,tempDxeCtrlBlk)
(533,if((WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType)
(534,channelEntry)
(535,return status;)
(536,frg)
(537,status)
(538,xferSize)
(539,currentDesc->dxedesc)
(540,"dxeTXPushFrame Program dest address register fail")
(541,channelEntry->extraConfig)
(542,channelEntry->extraConfig)
(543,if(NULL == LastDesc)
(544,firstDesc)
(545,NULL)
(546,)
(547,dxe_short_desc)
(548,eWLAN_MODULE_DAL_DATA)
(549,)
(550,eWLAN_PAL_STATUS_SUCCESS != status)
(551,dxe_short_desc)
(552,Va)
(553,tempDxeCtrlBlk->ringNotEmpty)
(554,currentCtrlBlk->nextCtrlBlk)
(555,)
(556,tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI])
(557,currentCtrlBlk)
(558,status = wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,\n\\n                                      channelEntry->channelConfig.refWQ)
(559,channelEntry->channelRegister)
(560,firstDesc->dxedesc)
(561,if(fragCount == frameVector.num_frg)
(562,)
(563,)
(564,frameVector.frg[fragCount].pa)
(565,eWLAN_PAL_STATUS_SUCCESS)
(566,status)
(567,dxeChannel)
(568,xferSize)
(569,sourcePhysicalAddress)
(570,fragCount)
(571,fragCount)
(572,eWLAN_PAL_TRACE_LEVEL_ERROR)
(573,channelEntry->headCtrlBlk)
(574,0 == channelEntry->numFragmentCurrentChain)
(575,0)
(576,channelEntry)
(577,)
(578,size)
(579,return eWLAN_PAL_STATUS_E_FAULT;)
(580,frameVector.frg)
(581,channelEntry->extraConfig)
(582,(0 == tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_LOW_PRI].numRsvdDesc)
(583,channelRegister)
(584,status)
(585,channelEntry->extraConfig.chan_mask)
(586,sourcePhysicalAddress          = (void *)
(587,eWLAN_PAL_FALSE)
(588,dxedesc)
(589,if(eWLAN_PAL_STATUS_SUCCESS != status)
(590,channelEntry)
(591,fragCount)
(592,dxedesc)
(593,channelEntry->channelRegister)
(594,status = wpalPrepareTxFrame(palPacket,\n\\n                                    &frameVector,\n\\n                                    &Va)
(595,wpalWriteRegister(channelEntry->channelRegister.chDXEDeschRegAddr,\n\\n                                      0)
(596,wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,\n\\n                                   channelEntry->extraConfig.chan_mask)
(597,channelEntry->channelConfig.refWQ)
(598,tempDxeCtrlBlk->smsmToggled)
(599,"dxeTXPushFrame Write DESC Address register fail")
(600,)
(601,eWLAN_MODULE_DAL_DATA)
(602,currentCtrlBlk)
(603,channelEntry->extraConfig.cw_ctrl_write_eop_int)
(604,if(eWLAN_PAL_STATUS_SUCCESS != status)
(605,wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,\n\\n                                      0)
(606,)
(607,channelEntry->channelConfig)
(608,currentDesc->dxedesc.dxe_short_desc.dstMemAddrL =\n\\n                                WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ)
(609,if(channelEntry->channelConfig.useShortDescFmt)
(610,channelRegister)
(611,dxedesc)
(612,NULL)
(613,currentDesc->descCtrl)
(614,"dxeTXPushFrame iterator init fail")
(615,wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,\n\\n                                      channelEntry->extraConfig.chan_mask)
(616,fragCount == frameVector.num_frg)
(617,channelEntry->headCtrlBlk)
(618,eWLAN_PAL_STATUS_SUCCESS != status)
(619,eWLAN_PAL_TRACE_LEVEL_ERROR)
(620,cw_ctrl_write_valid)
(621,status)
(622,firstDesc->xfrSize)
(623,)
(624,status)
(625,)
(626,ringNotEmpty)
(627,if(channelEntry->channelConfig.useShortDescFmt)
(628,channelEntry)
(629,eWLAN_PAL_TRACE_LEVEL_ERROR)
(630,"dxeTXPushFrame Write DESC Address register fail")
(631,WDTS_CHANNEL_TX_HIGH_PRI)
(632,status = wpalWriteRegister(channelEntry->channelRegister.chDXESadrhRegAddr,\n\\n                                      0)
(633,firstDesc)
(634,channelEntry->channelRegister.chDXEDadrhRegAddr)
(635,void *)
(636,WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType)
(637,(WDTS_CHANNEL_TX_LOW_PRI  == channelEntry->channelType)
(638,channelEntry->numTotalFrame)
(639,extraConfig)
(640,Va)
(641,extraConfig)
(642,firstDesc)
(643,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n                     "dxeTXPushFrame Program dest address register fail")
(644,)
(645,eWLAN_PAL_STATUS_SUCCESS != status)
(646,palPacket)
(647,status)
(648,eWLAN_PAL_STATUS_SUCCESS != status)
(649,)
(650,frameVector.frg[0].va)
(651,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "dxeTXPushFrame LONG Descriptor Format!!!")
(652,sourcePhysicalAddress)
(653,channelEntry->channelRegister)
(654,eWLAN_PAL_STATUS_SUCCESS != status)
(655,eWLAN_MODULE_DAL_DATA)
(656,eWLAN_PAL_STATUS_SUCCESS != status)
(657,)
(658,eWLAN_PAL_STATUS_SUCCESS)
(659,wpalWriteRegister(channelEntry->channelRegister.chDXEDadrlRegAddr,\n\\n                                      channelEntry->channelConfig.refWQ)
(660,status)
(661,currentDesc->dxedesc.dxe_short_desc.srcMemAddrL)
(662,numRsvdDesc)
(663,channelEntry)
(664,*currentDesc    = NULL)
(665,eWLAN_PAL_TRACE_LEVEL_ERROR)
(666,currentCtrlBlk)
(667,WLANDXE_U32_SWAP_ENDIAN(firstDesc->dxedesc.dxe_short_desc.srcMemAddrL)
(668,headCtrlBlk)
(669,wpalPrepareTxFrame(palPacket,\n\\n                                    &frameVector,\n\\n                                    &Va)
(670,WDTS_CHANNEL_TX_HIGH_PRI)
(671,0)
(672,eWLAN_PAL_TRACE_LEVEL_ERROR)
(673,WLANDXE_U32_SWAP_ENDIAN(firstDesc->xfrSize)
(674,)
(675,channelEntry->channelConfig)
(676,status = wpalWriteRegister(channelEntry->channelRegister.chDXECtrlRegAddr,\n\\n                                      channelEntry->extraConfig.chan_mask)
(677,firstDesc->descCtrl)
(678,channelEntry)
(679,fragCount)
(680,frg)
(681,eWLAN_MODULE_DAL_DATA)
(682,eWLAN_PAL_STATUS_SUCCESS)
(683,tempDxeCtrlBlk->ringNotEmpty = eWLAN_PAL_TRUE)
(684,status)
(685,__func__)
(686,eWLAN_PAL_TRACE_LEVEL_ERROR)
(687,channelEntry->numFragmentCurrentChain)
(688,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "%s Exit", __func__)
(689,0)
(690,chDXESzRegAddr)
(691,status)
(692,WDTS_CHANNEL_TX_LOW_PRI)
(693,firstDesc->descCtrl.ctrl = channelEntry->extraConfig.cw_ctrl_write_valid)
(694,channelType)
(695,frameVector)
(696,channelEntry->channelConfig.useShortDescFmt)
(697,if(eWLAN_PAL_STATUS_SUCCESS != status)
(698,0 != xferSize)
(699,frameVector)
(700,channelEntry)
(701,wpalWriteRegister(channelEntry->channelRegister.chDXESzRegAddr,\n\\n                                   xferSize)
(702,WLANDXE_U32_SWAP_ENDIAN(xferSize)
(703,tempDxeCtrlBlk)
(704,firstDesc->descCtrl.ctrl)
(705,WLANDXE_U32_SWAP_ENDIAN(channelEntry->channelConfig.refWQ)
(706,eWLAN_PAL_STATUS_SUCCESS)
(707,palPacket)
(708,status)
(709,sizeof(tx_frm_pcie_vector_t)
(710,tempDxeCtrlBlk->dxeChannel[WDTS_CHANNEL_TX_HIGH_PRI].numRsvdDesc)
(711,channelEntry->channelRegister)
(712,channelRegister)
(713,fragCount)
(714,channelEntry->extraConfig.chan_mask)
(715,channelRegister)
(716,firstDesc->dxedesc)
(717,numFragmentCurrentChain)
(718,)
(719,NULL == firstDesc)
(720,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n               "%s Exit", __func__)
(721,firstDesc)
(722,tempDxeCtrlBlk->rivaPowerState)
(723,0)
(724,"dxeTXPushFrame Program src address register fail")
(725,0)
(726,cw_ctrl_write_eop_int)
(727,"dxeTXPushFrame Write Channel Ctrl Register fail")
(728,dxe_short_desc)
(729,*LastDesc       = NULL)
(730,NULL)
(731,channelEntry)
(732,status)
(733,channelEntry->headCtrlBlk = currentCtrlBlk)
(734,currentDesc)
(735,channelEntry->numFragmentCurrentChain)
(736,chan_mask)
(737,eWLAN_PAL_STATUS_SUCCESS)
(738,if(eWLAN_PAL_STATUS_SUCCESS != status)
(739,status)
(740,eWLAN_PAL_STATUS_E_FAULT)
(741,currentCtrlBlk = channelEntry->headCtrlBlk)
(742,num_frg)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^