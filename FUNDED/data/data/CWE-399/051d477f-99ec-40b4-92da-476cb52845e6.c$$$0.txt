-----label-----
1
-----code-----
static void pcibios_fixup_device_resources(struct pci_dev *dev)
{
	int idx;

	if (!dev->bus)
		return;

	for (idx = 0; idx < PCI_BRIDGE_RESOURCES; idx++) {
		struct resource *r = &dev->resource[idx];

		if (!r->flags || r->parent || !r->start)
			continue;

		pci_claim_resource(dev, idx);
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
15,16
17,18
17,19
18,19
19,20
19,21
20,21
24,25
24,26
24,27
24,28
25,26
26,27
26,28
27,28
30,31
30,32
31,32
33,34
35,36
36,37
38,39
38,40
38,41
39,40
40,41
40,42
41,42
43,44
43,45
43,46
46,47
47,48
48,49
48,50
49,50
49,51
50,51
53,54
55,56
55,57
56,57
56,58
57,58
57,59
58,59
59,60
59,61
60,61
63,64
63,65
64,65
67,68
68,69
68,70
69,70
73,74
74,75
74,76
74,77
75,76
77,78
79,80
-----nextToken-----
2,4,7,9,10,14,16,21,22,23,28,29,32,34,37,42,44,45,51,52,54,61,62,65,66,70,71,72,76,78,80
-----computeFrom-----
26,27
26,28
30,31
30,32
56,57
56,58
57,58
57,59
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ContinueStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void pcibios_fixup_device_resources(struct pci_dev *dev){	int idx;	if (!dev->bus)		return;	for (idx = 0; idx < PCI_BRIDGE_RESOURCES; idx++) {		struct resource *r = &dev->resource[idx];		if (!r->flags || r->parent || !r->start)			continue;		pci_claim_resource(dev, idx);	}}
static void
pcibios_fixup_device_resources(struct pci_dev *dev)
pcibios_fixup_device_resources
struct pci_dev *dev
struct pci_dev
pci_dev
*dev
*
dev
{	int idx;	if (!dev->bus)		return;	for (idx = 0; idx < PCI_BRIDGE_RESOURCES; idx++) {		struct resource *r = &dev->resource[idx];		if (!r->flags || r->parent || !r->start)			continue;		pci_claim_resource(dev, idx);	}}
int idx;
int idx;
int
idx
idx
if (!dev->bus)		return;
!dev->bus
dev->bus
dev
dev
bus
return;
for (idx = 0; idx < PCI_BRIDGE_RESOURCES; idx++) {		struct resource *r = &dev->resource[idx];		if (!r->flags || r->parent || !r->start)			continue;		pci_claim_resource(dev, idx);	}
idx = 0;
idx = 0
idx
idx
0
idx < PCI_BRIDGE_RESOURCES
idx
idx
PCI_BRIDGE_RESOURCES
PCI_BRIDGE_RESOURCES
idx++
idx
idx
{		struct resource *r = &dev->resource[idx];		if (!r->flags || r->parent || !r->start)			continue;		pci_claim_resource(dev, idx);	}
struct resource *r = &dev->resource[idx];
struct resource *r = &dev->resource[idx];
struct resource
resource
*r = &dev->resource[idx]
*
r
= &dev->resource[idx]
&dev->resource[idx]
dev->resource[idx]
dev->resource
dev
dev
resource
idx
idx
if (!r->flags || r->parent || !r->start)			continue;
!r->flags || r->parent || !r->start
!r->flags || r->parent
!r->flags
r->flags
r
r
flags
r->parent
r
r
parent
!r->start
r->start
r
r
start
continue;
pci_claim_resource(dev, idx);
pci_claim_resource(dev, idx)
pci_claim_resource
pci_claim_resource
dev
dev
idx
idx
-----joern-----
(23,22,0)
(31,13,0)
(28,20,0)
(39,19,0)
(32,43,0)
(20,0,0)
(44,38,0)
(44,34,0)
(13,1,0)
(5,14,0)
(30,39,0)
(13,31,0)
(9,1,0)
(39,30,0)
(13,43,0)
(22,34,0)
(24,15,0)
(20,1,0)
(45,19,0)
(8,1,0)
(15,19,0)
(38,15,0)
(12,0,0)
(46,14,0)
(15,38,0)
(41,20,0)
(34,44,0)
(34,22,0)
(29,1,0)
(20,37,0)
(18,22,0)
(21,33,0)
(27,7,0)
(36,25,0)
(43,13,0)
(30,34,0)
(31,19,0)
(3,39,0)
(4,43,0)
(40,29,0)
(17,25,0)
(6,39,0)
(35,15,0)
(19,31,0)
(7,1,0)
(25,17,0)
(2,7,0)
(16,25,0)
(43,37,0)
(38,44,0)
(26,13,0)
(42,0,0)
(19,0,0)
(25,37,0)
(34,30,0)
(10,14,0)
(22,19,0)
(17,25,1)
(44,38,1)
(22,19,1)
(39,19,1)
(8,17,1)
(6,22,1)
(23,18,1)
(7,2,1)
(27,29,1)
(28,41,1)
(29,40,1)
(40,11,1)
(25,36,1)
(1,9,1)
(36,16,1)
(34,22,1)
(25,37,1)
(27,1,1)
(21,7,1)
(9,8,1)
(32,45,1)
(34,30,1)
(4,32,1)
(13,1,1)
(35,19,1)
(29,1,1)
(43,4,1)
(41,44,1)
(18,38,1)
(22,23,1)
(20,37,1)
(3,6,1)
(20,1,1)
(44,34,1)
(20,28,1)
(38,15,1)
(13,43,1)
(30,39,1)
(2,27,1)
(33,17,1)
(39,3,1)
(15,24,1)
(24,35,1)
(7,1,1)
(40,20,1)
(31,13,1)
(45,7,1)
(26,43,1)
(15,19,1)
(13,26,1)
(43,37,1)
(11,44,1)
(19,31,1)
(21,33,1)
(1,17,2)
(20,44,2)
(23,38,2)
(29,1,2)
(26,7,2)
(44,34,2)
(45,7,2)
(9,17,2)
(34,30,2)
(15,7,2)
(27,7,2)
(2,7,2)
(13,1,2)
(35,7,2)
(15,19,2)
(41,44,2)
(18,38,2)
(32,7,2)
(38,7,2)
(13,43,2)
(27,17,2)
(7,1,2)
(13,7,2)
(21,33,2)
(19,31,2)
(31,13,2)
(3,22,2)
(29,7,2)
(7,17,2)
(34,22,2)
(22,38,2)
(44,7,2)
(2,17,2)
(6,22,2)
(39,22,2)
(30,22,2)
(19,7,2)
(24,7,2)
(20,37,2)
(17,25,2)
(28,44,2)
(11,44,2)
(38,15,2)
(25,37,2)
(43,37,2)
(43,7,2)
(7,7,2)
(33,17,2)
(8,17,2)
(44,38,2)
(40,7,2)
(20,1,2)
(34,38,2)
(30,39,2)
(4,7,2)
(22,19,2)
(39,19,2)
(31,7,2)
-----------------------------------
(0,)
(1,idx = 0)
(2,PCI_BRIDGE_RESOURCES)
(3,start)
(4,resource)
(5,for (idx = 0; idx < PCI_BRIDGE_RESOURCES; idx++)
(6,r)
(7,idx < PCI_BRIDGE_RESOURCES)
(8,idx)
(9,0)
(10,idx)
(11,continue;)
(12,if (!r->flags || r->parent || !r->start)
(13,dev->resource[idx])
(14,)
(15,r->flags)
(16,dev)
(17,!dev->bus)
(18,r)
(19,*r = &dev->resource[idx])
(20,pci_claim_resource(dev, idx)
(21,RET)
(22,r->parent)
(23,parent)
(24,flags)
(25,dev->bus)
(26,idx)
(27,idx)
(28,idx)
(29,idx++)
(30,!r->start)
(31,&dev->resource[idx])
(32,dev)
(33,return;)
(34,r->parent || !r->start)
(35,r)
(36,bus)
(37,struct pci_dev *dev)
(38,!r->flags)
(39,r->start)
(40,idx)
(41,dev)
(42,r)
(43,dev->resource)
(44,!r->flags || r->parent || !r->start)
(45,r)
(46,if (!dev->bus)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^