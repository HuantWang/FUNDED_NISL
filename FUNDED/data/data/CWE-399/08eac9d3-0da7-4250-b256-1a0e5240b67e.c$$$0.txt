-----label-----
1
-----code-----
int mtdram_init_device(struct mtd_info *mtd, void *mapped_address,
		unsigned long size, const char *name)
{
	memset(mtd, 0, sizeof(*mtd));

	/* Setup the MTD structure */
	mtd->name = name;
	mtd->type = MTD_RAM;
	mtd->flags = MTD_CAP_RAM;
	mtd->size = size;
	mtd->writesize = 1;
	mtd->writebufsize = writebuf_size;
	mtd->erasesize = MTDRAM_ERASE_SIZE;
	mtd->priv = mapped_address;

	mtd->owner = THIS_MODULE;
	mtd->_erase = ram_erase;
	mtd->_point = ram_point;
	mtd->_unpoint = ram_unpoint;
	mtd->_read = ram_read;
	mtd->_write = ram_write;

	if (mtd_device_register(mtd, NULL, 0))
		return -EIO;

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
18,19
20,21
20,22
22,23
22,24
25,26
25,27
25,28
25,29
25,30
25,31
25,32
25,33
25,34
25,35
25,36
25,37
25,38
25,39
25,40
25,41
25,42
26,27
27,28
27,29
27,30
27,31
28,29
30,31
33,34
34,35
35,36
36,37
38,39
39,40
39,41
40,41
40,42
41,42
44,45
46,47
47,48
47,49
48,49
48,50
49,50
52,53
54,55
55,56
55,57
56,57
56,58
57,58
60,61
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
71,72
71,73
72,73
72,74
73,74
77,78
78,79
78,80
79,80
79,81
80,81
83,84
85,86
86,87
86,88
87,88
87,89
88,89
91,92
93,94
94,95
94,96
95,96
95,97
96,97
99,100
101,102
102,103
102,104
103,104
103,105
104,105
107,108
109,110
110,111
110,112
111,112
111,113
112,113
115,116
117,118
118,119
118,120
119,120
119,121
120,121
123,124
125,126
126,127
126,128
127,128
127,129
128,129
131,132
133,134
134,135
134,136
135,136
135,137
136,137
139,140
141,142
142,143
142,144
143,144
143,145
144,145
147,148
149,150
149,151
150,151
150,152
150,153
150,154
151,152
153,154
155,156
158,159
159,160
160,161
162,163
-----nextToken-----
2,4,7,9,10,12,14,15,17,19,21,23,24,29,31,32,37,42,43,45,50,51,53,58,59,61,66,67,69,74,75,76,81,82,84,89,90,92,97,98,100,105,106,108,113,114,116,121,122,124,129,130,132,137,138,140,145,146,148,152,154,156,157,161,163
-----computeFrom-----
39,40
39,41
47,48
47,49
55,56
55,57
63,64
63,65
71,72
71,73
78,79
78,80
86,87
86,88
94,95
94,96
102,103
102,104
110,111
110,112
118,119
118,120
126,127
126,128
134,135
134,136
142,143
142,144
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int mtdram_init_device(struct mtd_info *mtd, void *mapped_address,		unsigned long size, const char *name){	memset(mtd, 0, sizeof(*mtd));	/* Setup the MTD structure */	mtd->name = name;	mtd->type = MTD_RAM;	mtd->flags = MTD_CAP_RAM;	mtd->size = size;	mtd->writesize = 1;	mtd->writebufsize = writebuf_size;	mtd->erasesize = MTDRAM_ERASE_SIZE;	mtd->priv = mapped_address;	mtd->owner = THIS_MODULE;	mtd->_erase = ram_erase;	mtd->_point = ram_point;	mtd->_unpoint = ram_unpoint;	mtd->_read = ram_read;	mtd->_write = ram_write;	if (mtd_device_register(mtd, NULL, 0))		return -EIO;	return 0;}
int
mtdram_init_device(struct mtd_info *mtd, void *mapped_address,		unsigned long size, const char *name)
mtdram_init_device
struct mtd_info *mtd
struct mtd_info
mtd_info
*mtd
*
mtd
void *mapped_address
void
*mapped_address
*
mapped_address
unsigned long size
unsigned long
size
size
const char *name
const char
*name
*
name
{	memset(mtd, 0, sizeof(*mtd));	/* Setup the MTD structure */	mtd->name = name;	mtd->type = MTD_RAM;	mtd->flags = MTD_CAP_RAM;	mtd->size = size;	mtd->writesize = 1;	mtd->writebufsize = writebuf_size;	mtd->erasesize = MTDRAM_ERASE_SIZE;	mtd->priv = mapped_address;	mtd->owner = THIS_MODULE;	mtd->_erase = ram_erase;	mtd->_point = ram_point;	mtd->_unpoint = ram_unpoint;	mtd->_read = ram_read;	mtd->_write = ram_write;	if (mtd_device_register(mtd, NULL, 0))		return -EIO;	return 0;}
memset(mtd, 0, sizeof(*mtd));
memset(mtd, 0, sizeof(*mtd))
memset
memset
mtd
mtd
0
sizeof(*mtd)
(*mtd)
*mtd
mtd
mtd
mtd->name = name;
mtd->name = name
mtd->name
mtd
mtd
name
name
name
mtd->type = MTD_RAM;
mtd->type = MTD_RAM
mtd->type
mtd
mtd
type
MTD_RAM
MTD_RAM
mtd->flags = MTD_CAP_RAM;
mtd->flags = MTD_CAP_RAM
mtd->flags
mtd
mtd
flags
MTD_CAP_RAM
MTD_CAP_RAM
mtd->size = size;
mtd->size = size
mtd->size
mtd
mtd
size
size
size
mtd->writesize = 1;
mtd->writesize = 1
mtd->writesize
mtd
mtd
writesize
1
mtd->writebufsize = writebuf_size;
mtd->writebufsize = writebuf_size
mtd->writebufsize
mtd
mtd
writebufsize
writebuf_size
writebuf_size
mtd->erasesize = MTDRAM_ERASE_SIZE;
mtd->erasesize = MTDRAM_ERASE_SIZE
mtd->erasesize
mtd
mtd
erasesize
MTDRAM_ERASE_SIZE
MTDRAM_ERASE_SIZE
mtd->priv = mapped_address;
mtd->priv = mapped_address
mtd->priv
mtd
mtd
priv
mapped_address
mapped_address
mtd->owner = THIS_MODULE;
mtd->owner = THIS_MODULE
mtd->owner
mtd
mtd
owner
THIS_MODULE
THIS_MODULE
mtd->_erase = ram_erase;
mtd->_erase = ram_erase
mtd->_erase
mtd
mtd
_erase
ram_erase
ram_erase
mtd->_point = ram_point;
mtd->_point = ram_point
mtd->_point
mtd
mtd
_point
ram_point
ram_point
mtd->_unpoint = ram_unpoint;
mtd->_unpoint = ram_unpoint
mtd->_unpoint
mtd
mtd
_unpoint
ram_unpoint
ram_unpoint
mtd->_read = ram_read;
mtd->_read = ram_read
mtd->_read
mtd
mtd
_read
ram_read
ram_read
mtd->_write = ram_write;
mtd->_write = ram_write
mtd->_write
mtd
mtd
_write
ram_write
ram_write
if (mtd_device_register(mtd, NULL, 0))		return -EIO;
mtd_device_register(mtd, NULL, 0)
mtd_device_register
mtd_device_register
mtd
mtd
NULL
NULL
0
return -EIO;
-EIO
EIO
EIO
return 0;
0
-----joern-----
(4,32,0)
(59,21,0)
(52,31,0)
(77,21,0)
(2,46,0)
(83,15,0)
(18,12,0)
(91,10,0)
(13,69,0)
(49,19,0)
(4,14,0)
(14,21,0)
(52,74,0)
(20,53,0)
(37,51,0)
(22,12,0)
(70,43,0)
(54,77,0)
(8,73,0)
(37,21,0)
(31,30,0)
(51,73,0)
(76,27,0)
(72,74,0)
(73,32,0)
(54,32,0)
(28,37,0)
(60,77,0)
(26,45,0)
(48,32,0)
(45,21,0)
(89,23,0)
(74,27,0)
(24,20,0)
(82,5,0)
(33,59,0)
(74,23,0)
(74,4,0)
(9,69,0)
(31,24,0)
(3,25,0)
(82,32,0)
(79,59,0)
(73,51,0)
(75,54,0)
(69,32,0)
(23,32,0)
(86,43,0)
(74,82,0)
(71,46,0)
(80,4,0)
(51,37,0)
(30,32,0)
(34,30,0)
(44,48,0)
(90,3,0)
(31,21,0)
(27,32,0)
(74,48,0)
(35,30,0)
(74,30,0)
(31,27,0)
(81,24,0)
(12,32,0)
(56,72,0)
(50,79,0)
(74,78,0)
(1,21,0)
(63,4,0)
(10,32,0)
(74,12,0)
(74,24,0)
(74,43,0)
(31,54,0)
(31,43,0)
(78,45,0)
(24,32,0)
(61,48,0)
(17,31,0)
(43,32,0)
(62,21,0)
(31,4,0)
(74,10,0)
(7,21,0)
(84,14,0)
(15,21,0)
(79,32,0)
(46,32,0)
(31,46,0)
(31,79,0)
(31,23,0)
(12,19,0)
(78,32,0)
(38,7,0)
(59,66,0)
(43,7,0)
(40,21,0)
(46,3,0)
(42,24,0)
(31,12,0)
(47,10,0)
(57,21,0)
(88,57,0)
(67,16,0)
(16,21,0)
(6,78,0)
(30,16,0)
(64,1,0)
(74,79,0)
(74,46,0)
(5,21,0)
(31,78,0)
(3,21,0)
(19,21,0)
(31,48,0)
(68,23,0)
(27,1,0)
(85,5,0)
(55,27,0)
(0,82,0)
(58,69,0)
(65,40,0)
(48,57,0)
(74,54,0)
(31,10,0)
(31,82,0)
(39,54,0)
(36,37,0)
(29,82,0)
(11,20,0)
(23,15,0)
(37,32,0)
(10,40,0)
(87,79,0)
(20,21,0)
(41,78,0)
(54,75,1)
(52,31,1)
(73,8,1)
(3,90,1)
(31,12,1)
(38,43,1)
(31,46,1)
(23,89,1)
(78,32,1)
(47,19,1)
(82,29,1)
(24,32,1)
(5,85,1)
(69,32,1)
(31,82,1)
(12,18,1)
(31,17,1)
(82,32,1)
(13,9,1)
(12,32,1)
(91,47,1)
(79,32,1)
(86,70,1)
(72,56,1)
(56,69,1)
(2,71,1)
(69,58,1)
(31,27,1)
(39,57,1)
(10,32,1)
(0,45,1)
(51,73,1)
(23,32,1)
(7,38,1)
(74,48,1)
(74,46,1)
(57,88,1)
(31,10,1)
(43,32,1)
(48,44,1)
(24,42,1)
(8,36,1)
(29,0,1)
(74,12,1)
(74,43,1)
(9,40,1)
(31,30,1)
(20,11,1)
(27,32,1)
(81,5,1)
(31,23,1)
(84,4,1)
(48,32,1)
(35,1,1)
(30,32,1)
(71,37,1)
(83,23,1)
(27,55,1)
(31,54,1)
(6,15,1)
(42,81,1)
(74,23,1)
(79,87,1)
(44,61,1)
(45,26,1)
(55,76,1)
(74,30,1)
(31,4,1)
(19,49,1)
(17,69,1)
(59,33,1)
(59,66,1)
(74,24,1)
(4,80,1)
(74,79,1)
(4,32,1)
(85,82,1)
(87,50,1)
(40,65,1)
(37,51,1)
(74,4,1)
(64,27,1)
(54,32,1)
(30,34,1)
(63,3,1)
(60,54,1)
(61,16,1)
(74,10,1)
(77,60,1)
(10,91,1)
(89,68,1)
(33,79,1)
(34,35,1)
(73,32,1)
(31,43,1)
(31,79,1)
(18,22,1)
(65,10,1)
(15,83,1)
(26,78,1)
(58,13,1)
(43,86,1)
(75,39,1)
(74,72,1)
(52,74,1)
(31,78,1)
(90,46,1)
(41,6,1)
(3,25,1)
(11,24,1)
(46,32,1)
(76,20,1)
(31,48,1)
(74,82,1)
(88,48,1)
(74,78,1)
(78,41,1)
(37,32,1)
(70,14,1)
(80,63,1)
(1,64,1)
(22,77,1)
(68,59,1)
(14,84,1)
(74,54,1)
(46,2,1)
(20,53,1)
(16,67,1)
(67,30,1)
(74,27,1)
(31,24,1)
(36,28,1)
(50,7,1)
(49,12,1)
(74,4,2)
(48,32,2)
(74,30,2)
(24,32,2)
(37,32,2)
(31,69,2)
(74,27,2)
(27,32,2)
(31,23,2)
(74,82,2)
(3,25,2)
(69,32,2)
(74,54,2)
(52,31,2)
(31,12,2)
(31,48,2)
(31,78,2)
(37,51,2)
(82,32,2)
(31,54,2)
(31,79,2)
(74,69,2)
(74,23,2)
(79,32,2)
(31,27,2)
(31,24,2)
(46,32,2)
(74,79,2)
(30,32,2)
(51,73,2)
(74,24,2)
(73,32,2)
(31,10,2)
(74,10,2)
(31,43,2)
(78,32,2)
(74,78,2)
(10,32,2)
(74,46,2)
(74,43,2)
(31,4,2)
(72,69,2)
(23,32,2)
(31,30,2)
(20,53,2)
(59,66,2)
(17,69,2)
(4,32,2)
(43,32,2)
(31,82,2)
(56,69,2)
(12,32,2)
(31,46,2)
(74,12,2)
(74,48,2)
(54,32,2)
(52,74,2)
-----------------------------------
(0,mtd)
(1,mtd->owner = THIS_MODULE)
(2,name)
(3,mtd->name = name)
(4,mtd->type)
(5,mtd->erasesize = MTDRAM_ERASE_SIZE)
(6,mtd)
(7,mtd->flags = MTD_CAP_RAM)
(8,mtd)
(9,mtd)
(10,mtd->_write)
(11,mapped_address)
(12,mtd->_read)
(13,NULL)
(14,mtd->type = MTD_RAM)
(15,mtd->writesize = 1)
(16,mtd->_erase = ram_erase)
(17,0)
(18,_read)
(19,mtd->_read = ram_read)
(20,mtd->priv = mapped_address)
(21,)
(22,mtd)
(23,mtd->writesize)
(24,mtd->priv)
(25,const char *name)
(26,writebuf_size)
(27,mtd->owner)
(28,mtd)
(29,erasesize)
(30,mtd->_erase)
(31,return 0;)
(32,struct mtd_info *mtd)
(33,size)
(34,_erase)
(35,mtd)
(36,0)
(37,memset(mtd, 0, sizeof(*mtd)
(38,MTD_CAP_RAM)
(39,mtd)
(40,mtd->_write = ram_write)
(41,writebufsize)
(42,priv)
(43,mtd->flags)
(44,_point)
(45,mtd->writebufsize = writebuf_size)
(46,mtd->name)
(47,mtd)
(48,mtd->_point)
(49,ram_read)
(50,mtd)
(51,sizeof(*mtd)
(52,RET)
(53,void *mapped_address)
(54,mtd->_unpoint)
(55,owner)
(56,EIO)
(57,mtd->_point = ram_point)
(58,0)
(59,mtd->size = size)
(60,ram_unpoint)
(61,mtd)
(62,if (mtd_device_register(mtd, NULL, 0)
(63,mtd)
(64,THIS_MODULE)
(65,ram_write)
(66,unsigned long size)
(67,ram_erase)
(68,mtd)
(69,mtd_device_register(mtd, NULL, 0)
(70,mtd)
(71,mtd)
(72,-EIO)
(73,*mtd)
(74,return -EIO;)
(75,_unpoint)
(76,mtd)
(77,mtd->_unpoint = ram_unpoint)
(78,mtd->writebufsize)
(79,mtd->size)
(80,type)
(81,mtd)
(82,mtd->erasesize)
(83,1)
(84,MTD_RAM)
(85,MTDRAM_ERASE_SIZE)
(86,flags)
(87,size)
(88,ram_point)
(89,writesize)
(90,name)
(91,_write)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^