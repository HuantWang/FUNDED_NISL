-----label-----
0
-----code-----
static struct fdtable *alloc_fdtable(int nr)
{
	struct fdtable *fdt = NULL;
	int nfds = 0;
  	fd_set *new_openset = NULL, *new_execset = NULL;
	struct file **new_fds;

	fdt = kzalloc(sizeof(*fdt), GFP_KERNEL);
	if (!fdt)
  		goto out;

	nfds = 8 * L1_CACHE_BYTES;
  	/* Expand to the max in easy steps */
  	while (nfds <= nr) {
		nfds = nfds * 2;
		if (nfds > NR_OPEN)
			nfds = NR_OPEN;
	}

  	new_openset = alloc_fdset(nfds);
  	new_execset = alloc_fdset(nfds);
  	if (!new_openset || !new_execset)
  		goto out;
	fdt->open_fds = new_openset;
	fdt->close_on_exec = new_execset;
	fdt->max_fdset = nfds;

	nfds = NR_OPEN_DEFAULT;
	/*
	 * Expand to the max in easy steps, and keep expanding it until
	 * we have enough for the requested fd array size.
	 */
	do {
#if NR_OPEN_DEFAULT < 256
		if (nfds < 256)
			nfds = 256;
		else
#endif
		if (nfds < (PAGE_SIZE / sizeof(struct file *)))
			nfds = PAGE_SIZE / sizeof(struct file *);
		else {
			nfds = nfds * 2;
			if (nfds > NR_OPEN)
				nfds = NR_OPEN;
  		}
	} while (nfds <= nr);
	new_fds = alloc_fd_array(nfds);
	if (!new_fds)
		goto out2;
	fdt->fd = new_fds;
	fdt->max_fds = nfds;
	fdt->free_files = NULL;
	return fdt;
out2:
	nfds = fdt->max_fdset;
out:
  	if (new_openset)
  		free_fdset(new_openset, nfds);
  	if (new_execset)
  		free_fdset(new_execset, nfds);
	kfree(fdt);
	return NULL;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
9,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
22,23
23,24
23,25
25,26
25,27
27,28
29,30
30,31
30,32
30,33
31,32
33,34
33,35
33,36
36,37
37,38
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
49,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
58,59
60,61
61,62
62,63
63,64
65,66
67,68
67,69
68,69
69,70
71,72
73,74
74,75
74,76
75,76
77,78
77,79
79,80
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
88,89
89,90
89,91
90,91
92,93
92,94
93,94
96,97
96,98
97,98
97,99
98,99
100,101
102,103
103,104
103,105
104,105
106,107
108,109
109,110
109,111
110,111
112,113
112,114
113,114
115,116
117,118
118,119
118,120
119,120
121,122
121,123
122,123
124,125
126,127
126,128
127,128
127,129
128,129
129,130
131,132
132,133
134,135
136,137
137,138
137,139
138,139
138,140
139,140
142,143
144,145
145,146
145,147
146,147
146,148
147,148
150,151
152,153
153,154
153,155
154,155
154,156
155,156
158,159
160,161
161,162
161,163
162,163
164,165
166,167
166,168
167,168
168,169
168,170
168,171
169,170
169,171
170,171
173,174
174,175
174,176
175,176
178,179
178,180
178,181
179,180
179,181
180,181
182,183
183,184
183,185
184,185
186,187
187,188
187,189
188,189
190,191
192,193
193,194
193,195
194,195
196,197
196,198
197,198
199,200
200,201
200,202
201,202
203,204
205,206
205,207
206,207
207,208
207,209
208,209
210,211
210,212
211,212
214,215
214,216
215,216
215,217
216,217
218,219
220,221
221,222
221,223
222,223
224,225
226,227
226,228
227,228
229,230
231,232
232,233
232,234
233,234
235,236
235,237
236,237
238,239
240,241
240,242
241,242
242,243
244,245
246,247
247,248
247,249
248,249
248,250
249,250
252,253
254,255
255,256
255,257
256,257
256,258
257,258
260,261
262,263
263,264
263,265
264,265
264,266
265,266
268,269
270,271
271,272
273,274
273,275
275,276
276,277
276,278
277,278
279,280
279,281
280,281
283,284
283,285
285,286
285,287
286,287
288,289
289,290
289,291
289,292
290,291
292,293
294,295
296,297
296,298
297,298
299,300
300,301
300,302
300,303
301,302
303,304
305,306
307,308
308,309
308,310
309,310
311,312
313,314
314,315
-----nextToken-----
3,5,6,8,10,15,17,18,21,24,26,28,32,34,35,38,40,41,44,48,50,51,52,56,59,64,66,70,72,76,78,80,84,86,91,94,95,99,101,105,107,111,114,116,120,123,125,130,133,135,140,141,143,148,149,151,156,157,159,163,165,171,172,176,177,181,185,189,191,195,198,202,204,209,212,213,217,219,223,225,228,230,234,237,239,243,245,250,251,253,258,259,261,266,267,269,272,274,278,281,282,284,287,291,293,295,298,302,304,306,310,312,315
-----computeFrom-----
54,55
54,56
74,75
74,76
77,78
77,79
82,83
82,84
89,90
89,91
92,93
92,94
97,98
97,99
103,104
103,105
109,110
109,111
118,119
118,120
127,128
127,129
137,138
137,139
145,146
145,147
153,154
153,155
161,162
161,163
169,170
169,171
174,175
174,176
179,180
179,181
183,184
183,185
193,194
193,195
196,197
196,198
207,208
207,209
210,211
210,212
215,216
215,217
221,222
221,223
226,227
226,228
232,233
232,234
247,248
247,249
255,256
255,257
263,264
263,265
276,277
276,278
-----guardedBy-----
99,105
101,107
171,176
189,202
181,195
185,198
217,223
219,225
-----guardedByNegation-----
171,223
181,223
-----lastLexicalUse-----
171,223
181,223
-----jump-----
171,223
181,223
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;WhileStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;DoStatement;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct fdtable *alloc_fdtable(int nr){	struct fdtable *fdt = NULL;	int nfds = 0;  	fd_set *new_openset = NULL, *new_execset = NULL;	struct file **new_fds;	fdt = kzalloc(sizeof(*fdt), GFP_KERNEL);	if (!fdt)  		goto out;	nfds = 8 * L1_CACHE_BYTES;  	/* Expand to the max in easy steps */  	while (nfds <= nr) {		nfds = nfds * 2;		if (nfds > NR_OPEN)			nfds = NR_OPEN;	}  	new_openset = alloc_fdset(nfds);  	new_execset = alloc_fdset(nfds);  	if (!new_openset || !new_execset)  		goto out;	fdt->open_fds = new_openset;	fdt->close_on_exec = new_execset;	fdt->max_fdset = nfds;	nfds = NR_OPEN_DEFAULT;	/*	 * Expand to the max in easy steps, and keep expanding it until	 * we have enough for the requested fd array size.	 */	do {#if NR_OPEN_DEFAULT < 256		if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}	} while (nfds <= nr);	new_fds = alloc_fd_array(nfds);	if (!new_fds)		goto out2;	fdt->fd = new_fds;	fdt->max_fds = nfds;	fdt->free_files = NULL;	return fdt;out2:	nfds = fdt->max_fdset;out:  	if (new_openset)  		free_fdset(new_openset, nfds);  	if (new_execset)  		free_fdset(new_execset, nfds);	kfree(fdt);	return NULL;}
static struct fdtable
fdtable
*alloc_fdtable(int nr)
*
alloc_fdtable
int nr
int
nr
nr
{	struct fdtable *fdt = NULL;	int nfds = 0;  	fd_set *new_openset = NULL, *new_execset = NULL;	struct file **new_fds;	fdt = kzalloc(sizeof(*fdt), GFP_KERNEL);	if (!fdt)  		goto out;	nfds = 8 * L1_CACHE_BYTES;  	/* Expand to the max in easy steps */  	while (nfds <= nr) {		nfds = nfds * 2;		if (nfds > NR_OPEN)			nfds = NR_OPEN;	}  	new_openset = alloc_fdset(nfds);  	new_execset = alloc_fdset(nfds);  	if (!new_openset || !new_execset)  		goto out;	fdt->open_fds = new_openset;	fdt->close_on_exec = new_execset;	fdt->max_fdset = nfds;	nfds = NR_OPEN_DEFAULT;	/*	 * Expand to the max in easy steps, and keep expanding it until	 * we have enough for the requested fd array size.	 */	do {#if NR_OPEN_DEFAULT < 256		if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}	} while (nfds <= nr);	new_fds = alloc_fd_array(nfds);	if (!new_fds)		goto out2;	fdt->fd = new_fds;	fdt->max_fds = nfds;	fdt->free_files = NULL;	return fdt;out2:	nfds = fdt->max_fdset;out:  	if (new_openset)  		free_fdset(new_openset, nfds);  	if (new_execset)  		free_fdset(new_execset, nfds);	kfree(fdt);	return NULL;}
struct fdtable *fdt = NULL;
struct fdtable *fdt = NULL;
struct fdtable
fdtable
*fdt = NULL
*
fdt
= NULL
NULL
NULL
int nfds = 0;
int nfds = 0;
int
nfds = 0
nfds
= 0
0
fd_set *new_openset = NULL, *new_execset = NULL;
fd_set *new_openset = NULL, *new_execset = NULL;
fd_set
fd_set
*new_openset = NULL
*
new_openset
= NULL
NULL
NULL
*new_execset = NULL
*
new_execset
= NULL
NULL
NULL
struct file **new_fds;
struct file **new_fds;
struct file
file
**new_fds
*
*
new_fds
fdt = kzalloc(sizeof(*fdt), GFP_KERNEL);
fdt = kzalloc(sizeof(*fdt), GFP_KERNEL)
fdt
fdt
kzalloc(sizeof(*fdt), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*fdt)
(*fdt)
*fdt
fdt
fdt
GFP_KERNEL
GFP_KERNEL
if (!fdt)  		goto out;
!fdt
fdt
fdt
goto out;
out
nfds = 8 * L1_CACHE_BYTES;
nfds = 8 * L1_CACHE_BYTES
nfds
nfds
8 * L1_CACHE_BYTES
8
L1_CACHE_BYTES
L1_CACHE_BYTES
while (nfds <= nr) {		nfds = nfds * 2;		if (nfds > NR_OPEN)			nfds = NR_OPEN;	}
nfds <= nr
nfds
nfds
nr
nr
{		nfds = nfds * 2;		if (nfds > NR_OPEN)			nfds = NR_OPEN;	}
nfds = nfds * 2;
nfds = nfds * 2
nfds
nfds
nfds * 2
nfds
nfds
2
if (nfds > NR_OPEN)			nfds = NR_OPEN;
nfds > NR_OPEN
nfds
nfds
NR_OPEN
NR_OPEN
nfds = NR_OPEN;
nfds = NR_OPEN
nfds
nfds
NR_OPEN
NR_OPEN
new_openset = alloc_fdset(nfds);
new_openset = alloc_fdset(nfds)
new_openset
new_openset
alloc_fdset(nfds)
alloc_fdset
alloc_fdset
nfds
nfds
new_execset = alloc_fdset(nfds);
new_execset = alloc_fdset(nfds)
new_execset
new_execset
alloc_fdset(nfds)
alloc_fdset
alloc_fdset
nfds
nfds
if (!new_openset || !new_execset)  		goto out;
!new_openset || !new_execset
!new_openset
new_openset
new_openset
!new_execset
new_execset
new_execset
goto out;
out
fdt->open_fds = new_openset;
fdt->open_fds = new_openset
fdt->open_fds
fdt
fdt
open_fds
new_openset
new_openset
fdt->close_on_exec = new_execset;
fdt->close_on_exec = new_execset
fdt->close_on_exec
fdt
fdt
close_on_exec
new_execset
new_execset
fdt->max_fdset = nfds;
fdt->max_fdset = nfds
fdt->max_fdset
fdt
fdt
max_fdset
nfds
nfds
nfds = NR_OPEN_DEFAULT;
nfds = NR_OPEN_DEFAULT
nfds
nfds
NR_OPEN_DEFAULT
NR_OPEN_DEFAULT
do {#if NR_OPEN_DEFAULT < 256		if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}	} while (nfds <= nr);
{#if NR_OPEN_DEFAULT < 256		if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}	}
if (nfds < 256)			nfds = 256;		else#endif		if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}
nfds < 256
nfds
nfds
256
nfds = 256;
nfds = 256
nfds
nfds
256
if (nfds < (PAGE_SIZE / sizeof(struct file *)))			nfds = PAGE_SIZE / sizeof(struct file *);		else {			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}
nfds < (PAGE_SIZE / sizeof(struct file *))
nfds
nfds
(PAGE_SIZE / sizeof(struct file *))
PAGE_SIZE / sizeof(struct file *)
PAGE_SIZE
PAGE_SIZE
sizeof(struct file *)
struct file *
struct file
file
*
*
nfds = PAGE_SIZE / sizeof(struct file *);
nfds = PAGE_SIZE / sizeof(struct file *)
nfds
nfds
PAGE_SIZE / sizeof(struct file *)
PAGE_SIZE
PAGE_SIZE
sizeof(struct file *)
struct file *
struct file
file
*
*
{			nfds = nfds * 2;			if (nfds > NR_OPEN)				nfds = NR_OPEN;  		}
nfds = nfds * 2;
nfds = nfds * 2
nfds
nfds
nfds * 2
nfds
nfds
2
if (nfds > NR_OPEN)				nfds = NR_OPEN;
nfds > NR_OPEN
nfds
nfds
NR_OPEN
NR_OPEN
nfds = NR_OPEN;
nfds = NR_OPEN
nfds
nfds
NR_OPEN
NR_OPEN
nfds <= nr
nfds
nfds
nr
nr
new_fds = alloc_fd_array(nfds);
new_fds = alloc_fd_array(nfds)
new_fds
new_fds
alloc_fd_array(nfds)
alloc_fd_array
alloc_fd_array
nfds
nfds
if (!new_fds)		goto out2;
!new_fds
new_fds
new_fds
goto out2;
out2
fdt->fd = new_fds;
fdt->fd = new_fds
fdt->fd
fdt
fdt
fd
new_fds
new_fds
fdt->max_fds = nfds;
fdt->max_fds = nfds
fdt->max_fds
fdt
fdt
max_fds
nfds
nfds
fdt->free_files = NULL;
fdt->free_files = NULL
fdt->free_files
fdt
fdt
free_files
NULL
NULL
return fdt;
fdt
fdt
out2:	nfds = fdt->max_fdset;
out2
nfds = fdt->max_fdset;
nfds = fdt->max_fdset
nfds
nfds
fdt->max_fdset
fdt
fdt
max_fdset
out:  	if (new_openset)  		free_fdset(new_openset, nfds);
out
if (new_openset)  		free_fdset(new_openset, nfds);
new_openset
new_openset
free_fdset(new_openset, nfds);
free_fdset(new_openset, nfds)
free_fdset
free_fdset
new_openset
new_openset
nfds
nfds
if (new_execset)  		free_fdset(new_execset, nfds);
new_execset
new_execset
free_fdset(new_execset, nfds);
free_fdset(new_execset, nfds)
free_fdset
free_fdset
new_execset
new_execset
nfds
nfds
kfree(fdt);
kfree(fdt)
kfree
kfree
fdt
fdt
return NULL;
NULL
NULL
-----joern-----
(88,140,0)
(11,144,0)
(133,109,0)
(76,140,0)
(48,125,0)
(56,37,0)
(6,149,0)
(50,23,0)
(159,24,0)
(135,92,0)
(139,50,0)
(112,139,0)
(40,109,0)
(143,96,0)
(38,158,0)
(54,125,0)
(126,62,0)
(10,149,0)
(123,82,0)
(7,23,0)
(75,83,0)
(15,75,0)
(64,148,0)
(100,149,0)
(88,6,0)
(24,125,0)
(71,47,0)
(41,131,0)
(1,41,0)
(161,109,0)
(2,143,0)
(64,41,0)
(53,3,0)
(101,122,0)
(111,57,0)
(74,111,0)
(121,166,0)
(159,163,0)
(33,161,0)
(50,139,0)
(96,41,0)
(103,26,0)
(46,125,0)
(83,125,0)
(47,109,0)
(82,13,0)
(153,99,0)
(113,64,0)
(82,140,0)
(59,109,0)
(122,125,0)
(37,24,0)
(85,54,0)
(1,98,0)
(131,118,0)
(72,125,0)
(17,82,0)
(51,133,0)
(3,125,0)
(23,50,0)
(94,128,0)
(28,41,0)
(23,122,0)
(99,53,0)
(93,140,0)
(130,122,0)
(28,155,0)
(115,136,0)
(151,65,0)
(61,140,0)
(127,125,0)
(37,95,0)
(27,125,0)
(65,118,0)
(96,125,0)
(137,93,0)
(82,163,0)
(131,41,0)
(106,53,0)
(95,125,0)
(3,24,0)
(19,163,0)
(58,163,0)
(22,65,0)
(150,148,0)
(43,5,0)
(162,111,0)
(12,95,0)
(21,59,0)
(75,140,0)
(75,57,0)
(47,76,0)
(96,118,0)
(131,26,0)
(120,3,0)
(88,57,0)
(47,136,0)
(104,109,0)
(81,26,0)
(59,54,0)
(0,162,0)
(39,98,0)
(116,103,0)
(52,1,0)
(30,72,0)
(117,59,0)
(104,39,0)
(75,95,0)
(42,143,0)
(79,47,0)
(9,98,0)
(20,125,0)
(99,165,0)
(0,24,0)
(154,155,0)
(111,162,0)
(28,148,0)
(76,125,0)
(75,6,0)
(164,131,0)
(64,26,0)
(107,131,0)
(114,165,0)
(110,125,0)
(143,109,0)
(92,41,0)
(166,128,0)
(161,125,0)
(65,26,0)
(34,95,0)
(168,76,0)
(76,6,0)
(109,139,0)
(142,72,0)
(98,125,0)
(136,47,0)
(37,6,0)
(148,125,0)
(64,155,0)
(24,159,0)
(63,92,0)
(98,1,0)
(66,96,0)
(80,125,0)
(73,125,0)
(8,104,0)
(105,67,0)
(5,109,0)
(131,155,0)
(65,13,0)
(99,5,0)
(159,6,0)
(1,155,0)
(165,109,0)
(68,118,0)
(53,109,0)
(60,148,0)
(65,155,0)
(25,83,0)
(49,57,0)
(16,53,0)
(145,93,0)
(158,98,0)
(153,133,0)
(89,75,0)
(147,0,0)
(18,125,0)
(76,163,0)
(159,140,0)
(14,125,0)
(157,118,0)
(57,88,0)
(146,41,0)
(37,72,0)
(136,125,0)
(86,104,0)
(77,24,0)
(29,37,0)
(70,99,0)
(67,125,0)
(129,64,0)
(138,83,0)
(69,165,0)
(99,125,0)
(132,91,0)
(36,61,0)
(167,109,0)
(102,155,0)
(141,125,0)
(128,94,0)
(57,125,0)
(144,11,0)
(90,125,0)
(165,76,0)
(139,109,0)
(67,57,0)
(131,148,0)
(82,6,0)
(160,140,0)
(26,103,0)
(6,125,0)
(65,41,0)
(61,6,0)
(31,84,0)
(55,6,0)
(97,125,0)
(88,163,0)
(128,166,0)
(5,67,0)
(61,163,0)
(64,118,0)
(41,62,0)
(75,136,0)
(96,155,0)
(166,28,0)
(78,5,0)
(11,103,0)
(28,26,0)
(28,166,0)
(4,28,0)
(1,118,0)
(108,88,0)
(162,0,0)
(140,91,0)
(149,6,0)
(87,167,0)
(37,163,0)
(109,125,0)
(1,26,0)
(45,39,0)
(37,140,0)
(37,136,0)
(133,125,0)
(39,125,0)
(28,118,0)
(103,11,0)
(140,61,0)
(75,163,0)
(119,159,0)
(35,125,0)
(32,61,0)
(96,26,0)
(92,41,1)
(96,66,1)
(23,122,1)
(95,34,1)
(142,30,1)
(131,107,1)
(9,65,1)
(44,167,1)
(153,133,1)
(53,106,1)
(59,21,1)
(145,137,1)
(64,113,1)
(107,164,1)
(165,109,1)
(150,60,1)
(85,59,1)
(34,12,1)
(25,138,1)
(75,95,1)
(37,140,1)
(92,63,1)
(71,115,1)
(28,166,1)
(60,76,1)
(96,41,1)
(28,155,1)
(168,165,1)
(111,57,1)
(131,41,1)
(64,148,1)
(134,44,1)
(75,136,1)
(96,118,1)
(147,57,1)
(162,111,1)
(74,0,1)
(28,148,1)
(72,142,1)
(67,105,1)
(122,130,1)
(42,2,1)
(128,94,1)
(37,136,1)
(99,5,1)
(45,104,1)
(65,41,1)
(83,25,1)
(28,118,1)
(36,160,1)
(81,28,1)
(1,118,1)
(154,64,1)
(143,109,1)
(54,85,1)
(79,71,1)
(0,147,1)
(11,116,1)
(29,56,1)
(157,92,1)
(78,3,1)
(17,93,1)
(161,33,1)
(167,109,1)
(89,15,1)
(3,120,1)
(11,144,1)
(1,52,1)
(153,99,1)
(111,74,1)
(56,134,1)
(123,17,1)
(47,79,1)
(38,98,1)
(43,78,1)
(69,67,1)
(135,41,1)
(61,163,1)
(64,41,1)
(130,101,1)
(88,140,1)
(37,24,1)
(124,37,1)
(104,109,1)
(93,145,1)
(166,128,1)
(10,55,1)
(104,86,1)
(50,23,1)
(39,98,1)
(136,47,1)
(37,6,1)
(139,50,1)
(8,158,1)
(98,1,1)
(149,100,1)
(114,69,1)
(39,45,1)
(148,150,1)
(121,4,1)
(37,95,1)
(75,140,1)
(33,124,1)
(3,24,1)
(129,148,1)
(99,70,1)
(124,134,1)
(67,57,1)
(1,155,1)
(131,148,1)
(15,124,1)
(146,28,1)
(82,6,1)
(75,89,1)
(70,161,1)
(58,19,1)
(76,168,1)
(65,22,1)
(32,36,1)
(16,162,1)
(108,49,1)
(21,117,1)
(52,9,1)
(1,41,1)
(115,156,1)
(17,163,1)
(65,118,1)
(53,109,1)
(165,114,1)
(96,155,1)
(134,136,1)
(75,6,1)
(2,39,1)
(109,139,1)
(75,57,1)
(139,112,1)
(117,96,1)
(40,83,1)
(151,118,1)
(162,0,1)
(55,167,1)
(37,29,1)
(161,109,1)
(64,155,1)
(106,16,1)
(47,109,1)
(65,26,1)
(86,8,1)
(76,6,1)
(99,165,1)
(37,163,1)
(6,149,1)
(59,109,1)
(158,98,1)
(57,88,1)
(28,26,1)
(77,82,1)
(159,119,1)
(158,38,1)
(143,42,1)
(102,154,1)
(61,6,1)
(12,122,1)
(65,13,1)
(119,77,1)
(76,140,1)
(66,143,1)
(93,140,1)
(5,109,1)
(100,10,1)
(7,40,1)
(131,118,1)
(151,26,1)
(88,163,1)
(156,158,1)
(82,123,1)
(75,163,1)
(133,109,1)
(131,26,1)
(137,140,1)
(63,135,1)
(88,6,1)
(164,146,1)
(61,32,1)
(160,82,1)
(23,7,1)
(75,83,1)
(33,75,1)
(167,87,1)
(140,61,1)
(128,121,1)
(82,13,1)
(82,163,1)
(113,129,1)
(30,95,1)
(82,140,1)
(159,163,1)
(87,109,1)
(151,92,1)
(99,53,1)
(120,53,1)
(64,118,1)
(68,157,1)
(37,72,1)
(163,58,1)
(103,11,1)
(151,155,1)
(112,50,1)
(159,140,1)
(105,5,1)
(28,41,1)
(76,163,1)
(129,65,1)
(96,26,1)
(138,72,1)
(47,76,1)
(24,159,1)
(26,103,1)
(49,24,1)
(41,131,1)
(5,43,1)
(1,26,1)
(88,108,1)
(65,155,1)
(61,140,1)
(0,24,1)
(134,152,1)
(152,162,1)
(4,64,1)
(133,51,1)
(118,68,1)
(159,6,1)
(22,151,1)
(17,6,1)
(64,26,1)
(19,93,1)
(155,102,1)
(116,81,1)
(131,155,1)
(51,54,1)
(88,167,2)
(28,64,2)
(88,6,2)
(111,57,2)
(64,148,2)
(131,28,2)
(151,65,2)
(47,158,2)
(136,47,2)
(93,82,2)
(32,82,2)
(143,109,2)
(61,163,2)
(152,162,2)
(149,167,2)
(43,162,2)
(82,13,2)
(116,28,2)
(75,140,2)
(158,162,2)
(131,155,2)
(140,82,2)
(153,99,2)
(123,82,2)
(37,95,2)
(22,162,2)
(118,92,2)
(68,92,2)
(153,133,2)
(76,6,2)
(65,162,2)
(19,93,2)
(129,65,2)
(131,118,2)
(70,162,2)
(124,167,2)
(50,23,2)
(57,167,2)
(1,26,2)
(93,140,2)
(33,162,2)
(70,167,2)
(28,166,2)
(92,28,2)
(49,167,2)
(11,144,2)
(3,24,2)
(79,158,2)
(71,158,2)
(99,158,2)
(88,163,2)
(96,155,2)
(78,162,2)
(41,131,2)
(39,158,2)
(161,109,2)
(70,158,2)
(134,158,2)
(1,118,2)
(23,122,2)
(17,82,2)
(5,109,2)
(129,162,2)
(42,158,2)
(26,103,2)
(75,136,2)
(135,28,2)
(28,148,2)
(99,167,2)
(140,61,2)
(65,13,2)
(28,155,2)
(63,28,2)
(117,158,2)
(57,88,2)
(16,162,2)
(124,162,2)
(99,53,2)
(134,162,2)
(39,98,2)
(143,158,2)
(64,118,2)
(52,162,2)
(157,92,2)
(53,109,2)
(165,162,2)
(109,139,2)
(167,109,2)
(105,162,2)
(82,167,2)
(164,28,2)
(76,163,2)
(1,162,2)
(47,109,2)
(65,118,2)
(168,162,2)
(107,28,2)
(11,28,2)
(76,140,2)
(159,163,2)
(96,41,2)
(103,28,2)
(9,162,2)
(28,41,2)
(165,109,2)
(147,167,2)
(8,158,2)
(65,26,2)
(163,93,2)
(106,162,2)
(0,24,2)
(82,82,2)
(98,162,2)
(22,65,2)
(134,167,2)
(33,158,2)
(24,159,2)
(139,50,2)
(37,24,2)
(81,28,2)
(64,26,2)
(162,111,2)
(114,162,2)
(159,140,2)
(148,162,2)
(65,155,2)
(47,76,2)
(100,167,2)
(56,134,2)
(10,167,2)
(86,158,2)
(99,162,2)
(82,163,2)
(1,155,2)
(15,124,2)
(66,158,2)
(154,64,2)
(99,5,2)
(59,109,2)
(158,98,2)
(75,6,2)
(159,167,2)
(102,64,2)
(128,64,2)
(162,0,2)
(151,162,2)
(37,136,2)
(4,64,2)
(61,82,2)
(5,162,2)
(28,26,2)
(44,167,2)
(37,140,2)
(37,163,2)
(161,167,2)
(41,28,2)
(104,109,2)
(166,128,2)
(96,158,2)
(99,165,2)
(96,26,2)
(64,41,2)
(58,93,2)
(159,6,2)
(88,140,2)
(96,118,2)
(38,162,2)
(133,158,2)
(17,167,2)
(82,140,2)
(75,57,2)
(119,167,2)
(75,124,2)
(33,167,2)
(113,162,2)
(36,82,2)
(28,118,2)
(61,140,2)
(103,11,2)
(131,148,2)
(150,162,2)
(137,82,2)
(37,134,2)
(21,158,2)
(131,41,2)
(61,6,2)
(74,0,2)
(67,57,2)
(92,41,2)
(65,65,2)
(115,158,2)
(26,28,2)
(111,0,2)
(0,167,2)
(166,64,2)
(108,167,2)
(77,167,2)
(120,162,2)
(75,163,2)
(160,82,2)
(123,167,2)
(54,158,2)
(53,162,2)
(51,158,2)
(145,82,2)
(133,109,2)
(136,158,2)
(76,162,2)
(24,167,2)
(59,158,2)
(161,162,2)
(37,6,2)
(64,155,2)
(131,26,2)
(161,158,2)
(45,158,2)
(67,162,2)
(162,167,2)
(75,95,2)
(124,158,2)
(85,158,2)
(113,65,2)
(128,94,2)
(55,167,2)
(1,41,2)
(60,162,2)
(155,64,2)
(6,149,2)
(37,72,2)
(75,83,2)
(64,65,2)
(121,64,2)
(89,124,2)
(65,41,2)
(3,162,2)
(82,6,2)
(6,167,2)
(2,158,2)
(104,158,2)
(98,1,2)
(146,28,2)
(29,134,2)
(69,162,2)
(64,162,2)
(156,158,2)
-----------------------------------
(0,!new_openset)
(1,alloc_fd_array(nfds)
(2,fdt)
(3,fdt->open_fds = new_openset)
(4,nfds)
(5,fdt->close_on_exec)
(6,nfds = 8 * L1_CACHE_BYTES)
(7,fdt)
(8,fdt)
(9,new_fds)
(10,8)
(11,sizeof(struct file *)
(12,nfds)
(13,int nr)
(14,out2:)
(15,new_execset)
(16,fdt)
(17,nfds)
(18,nfds)
(19,nfds)
(20,if (new_execset)
(21,free_files)
(22,nr)
(23,*fdt)
(24,new_openset = alloc_fdset(nfds)
(25,NULL)
(26,nfds = PAGE_SIZE / sizeof(struct file *)
(27,fdt)
(28,nfds < (PAGE_SIZE / sizeof(struct file *)
(29,nfds)
(30,new_openset)
(31,if (nfds < 256)
(32,2)
(33,fdt)
(34,0)
(35,if (!new_openset || !new_execset)
(36,nfds)
(37,free_fdset(new_openset, nfds)
(38,new_fds)
(39,fdt->fd = new_fds)
(40,fdt)
(41,nfds = nfds * 2)
(42,max_fds)
(43,close_on_exec)
(44,goto out;)
(45,new_fds)
(46,if (!fdt)
(47,fdt->max_fdset)
(48,new_fds)
(49,new_execset)
(50,sizeof(*fdt)
(51,fdt)
(52,nfds)
(53,fdt->open_fds)
(54,fdt->free_files = NULL)
(55,nfds)
(56,new_openset)
(57,new_execset = alloc_fdset(nfds)
(58,NR_OPEN)
(59,fdt->free_files)
(60,nfds)
(61,nfds * 2)
(62,)
(63,NR_OPEN)
(64,nfds < 256)
(65,nfds <= nr)
(66,nfds)
(67,fdt->close_on_exec = new_execset)
(68,NR_OPEN)
(69,fdt)
(70,NULL)
(71,fdt)
(72,*new_openset = NULL)
(73,new_execset)
(74,new_execset)
(75,free_fdset(new_execset, nfds)
(76,fdt->max_fdset = nfds)
(77,new_openset)
(78,fdt)
(79,max_fdset)
(80,out:)
(81,nfds)
(82,nfds <= nr)
(83,*new_execset = NULL)
(84,)
(85,NULL)
(86,fd)
(87,fdt)
(88,alloc_fdset(nfds)
(89,nfds)
(90,if (!new_fds)
(91,)
(92,nfds > NR_OPEN)
(93,nfds > NR_OPEN)
(94,struct file *)
(95,nfds = 0)
(96,fdt->max_fds = nfds)
(97,do)
(98,new_fds = alloc_fd_array(nfds)
(99,return NULL;)
(100,L1_CACHE_BYTES)
(101,fdt)
(102,256)
(103,PAGE_SIZE / sizeof(struct file *)
(104,fdt->fd)
(105,new_execset)
(106,open_fds)
(107,2)
(108,nfds)
(109,fdt = kzalloc(sizeof(*fdt)
(110,if (new_openset)
(111,!new_execset)
(112,GFP_KERNEL)
(113,256)
(114,max_fdset)
(115,nfds)
(116,PAGE_SIZE)
(117,fdt)
(118,nfds = NR_OPEN)
(119,nfds)
(120,new_openset)
(121,PAGE_SIZE)
(122,*fdt = NULL)
(123,nr)
(124,new_execset)
(125,)
(126,if (nfds > NR_OPEN)
(127,while (nfds <= nr)
(128,sizeof(struct file *)
(129,nfds)
(130,NULL)
(131,nfds * 2)
(132,if (nfds > NR_OPEN)
(133,return fdt;)
(134,new_openset)
(135,nfds)
(136,nfds = fdt->max_fdset)
(137,nfds)
(138,new_execset)
(139,kzalloc(sizeof(*fdt)
(140,nfds = nfds * 2)
(141,new_openset)
(142,NULL)
(143,fdt->max_fds)
(144,struct file *)
(145,NR_OPEN)
(146,nfds)
(147,new_openset)
(148,nfds = NR_OPEN_DEFAULT)
(149,8 * L1_CACHE_BYTES)
(150,NR_OPEN_DEFAULT)
(151,nfds)
(152,goto out;)
(153,RET)
(154,nfds)
(155,nfds = 256)
(156,goto out2;)
(157,nfds)
(158,!new_fds)
(159,alloc_fdset(nfds)
(160,nfds)
(161,kfree(fdt)
(162,!new_openset || !new_execset)
(163,nfds = NR_OPEN)
(164,nfds)
(165,fdt->max_fdset)
(166,PAGE_SIZE / sizeof(struct file *)
(167,!fdt)
(168,nfds)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^