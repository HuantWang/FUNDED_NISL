-----label-----
0
-----code-----
static void pnp_print_resources(pnp_info_buffer_t *buffer, char *space, struct pnp_resources *res, int dep)
{
	char *s;
	struct pnp_port *port;
	struct pnp_irq *irq;
	struct pnp_dma *dma;
	struct pnp_mem *mem;

	switch (res->priority) {
	case PNP_RES_PRIORITY_PREFERRED:
		s = "preferred";
		break;
	case PNP_RES_PRIORITY_ACCEPTABLE:
		s = "acceptable";
		break;
	case PNP_RES_PRIORITY_FUNCTIONAL:
		s = "functional";
		break;
	default:
		s = "invalid";
	}
	if (dep > 0)
		pnp_printf(buffer, "Dependent: %02i - Priority %s\n",dep, s);
	for (port = res->port; port; port = port->next)
		pnp_print_port(buffer, space, port);
	for (irq = res->irq; irq; irq = irq->next)
		pnp_print_irq(buffer, space, irq);
	for (dma = res->dma; dma; dma = dma->next)
		pnp_print_dma(buffer, space, dma);
	for (mem = res->mem; mem; mem = mem->next)
		pnp_print_mem(buffer, space, mem);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
3,8
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
13,15
16,17
16,18
17,18
19,20
19,21
22,23
22,24
24,25
26,27
26,28
26,29
26,30
26,31
26,32
26,33
26,34
26,35
26,36
26,37
27,28
28,29
28,30
30,31
30,32
33,34
34,35
34,36
35,36
37,38
37,39
40,41
41,42
41,43
42,43
44,45
44,46
47,48
48,49
48,50
49,50
51,52
51,53
54,55
55,56
55,57
56,57
58,59
58,60
61,62
61,63
62,63
62,64
63,64
66,67
66,68
66,69
66,70
66,71
66,72
66,73
66,74
66,75
66,76
66,77
67,68
68,69
70,71
71,72
71,73
72,73
76,77
77,78
79,80
80,81
80,82
81,82
85,86
86,87
88,89
89,90
89,91
90,91
95,96
96,97
96,98
97,98
100,101
100,102
101,102
101,103
102,103
105,106
106,107
106,108
106,109
106,110
106,111
107,108
109,110
112,113
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
121,122
121,123
122,123
125,126
127,128
127,129
128,129
130,131
130,132
131,132
134,135
135,136
135,137
135,138
135,139
136,137
138,139
140,141
142,143
144,145
144,146
144,147
144,148
145,146
146,147
146,148
147,148
149,150
149,151
150,151
153,154
155,156
155,157
156,157
158,159
158,160
159,160
162,163
163,164
163,165
163,166
163,167
164,165
166,167
168,169
170,171
172,173
172,174
172,175
172,176
173,174
174,175
174,176
175,176
177,178
177,179
178,179
181,182
183,184
183,185
184,185
186,187
186,188
187,188
190,191
191,192
191,193
191,194
191,195
192,193
194,195
196,197
198,199
200,201
200,202
200,203
200,204
201,202
202,203
202,204
203,204
205,206
205,207
206,207
209,210
211,212
211,213
212,213
214,215
214,216
215,216
218,219
219,220
219,221
219,222
219,223
220,221
222,223
224,225
226,227
-----nextToken-----
2,4,7,9,10,12,14,15,18,20,21,23,25,29,31,32,36,38,39,43,45,46,50,52,53,57,59,60,64,65,69,73,74,75,78,82,83,84,87,91,92,93,94,98,99,103,104,108,110,111,113,115,120,123,124,126,129,132,133,137,139,141,143,148,151,152,154,157,160,161,165,167,169,171,176,179,180,182,185,188,189,193,195,197,199,204,207,208,210,213,216,217,221,223,225,227
-----computeFrom-----
71,72
71,73
80,81
80,82
89,90
89,91
96,97
96,98
101,102
101,103
118,119
118,120
127,128
127,129
146,147
146,148
155,156
155,157
174,175
174,176
183,184
183,185
202,203
202,204
211,212
211,213
-----guardedBy-----
103,113
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void pnp_print_resources(pnp_info_buffer_t *buffer, char *space, struct pnp_resources *res, int dep){	char *s;	struct pnp_port *port;	struct pnp_irq *irq;	struct pnp_dma *dma;	struct pnp_mem *mem;	switch (res->priority) {	case PNP_RES_PRIORITY_PREFERRED:		s = "preferred";		break;	case PNP_RES_PRIORITY_ACCEPTABLE:		s = "acceptable";		break;	case PNP_RES_PRIORITY_FUNCTIONAL:		s = "functional";		break;	default:		s = "invalid";	}	if (dep > 0)		pnp_printf(buffer, "Dependent: %02i - Priority %s\n",dep, s);	for (port = res->port; port; port = port->next)		pnp_print_port(buffer, space, port);	for (irq = res->irq; irq; irq = irq->next)		pnp_print_irq(buffer, space, irq);	for (dma = res->dma; dma; dma = dma->next)		pnp_print_dma(buffer, space, dma);	for (mem = res->mem; mem; mem = mem->next)		pnp_print_mem(buffer, space, mem);}
static void
pnp_print_resources(pnp_info_buffer_t *buffer, char *space, struct pnp_resources *res, int dep)
pnp_print_resources
pnp_info_buffer_t *buffer
pnp_info_buffer_t
pnp_info_buffer_t
*buffer
*
buffer
char *space
char
*space
*
space
struct pnp_resources *res
struct pnp_resources
pnp_resources
*res
*
res
int dep
int
dep
dep
{	char *s;	struct pnp_port *port;	struct pnp_irq *irq;	struct pnp_dma *dma;	struct pnp_mem *mem;	switch (res->priority) {	case PNP_RES_PRIORITY_PREFERRED:		s = "preferred";		break;	case PNP_RES_PRIORITY_ACCEPTABLE:		s = "acceptable";		break;	case PNP_RES_PRIORITY_FUNCTIONAL:		s = "functional";		break;	default:		s = "invalid";	}	if (dep > 0)		pnp_printf(buffer, "Dependent: %02i - Priority %s\n",dep, s);	for (port = res->port; port; port = port->next)		pnp_print_port(buffer, space, port);	for (irq = res->irq; irq; irq = irq->next)		pnp_print_irq(buffer, space, irq);	for (dma = res->dma; dma; dma = dma->next)		pnp_print_dma(buffer, space, dma);	for (mem = res->mem; mem; mem = mem->next)		pnp_print_mem(buffer, space, mem);}
char *s;
char *s;
char
*s
*
s
struct pnp_port *port;
struct pnp_port *port;
struct pnp_port
pnp_port
*port
*
port
struct pnp_irq *irq;
struct pnp_irq *irq;
struct pnp_irq
pnp_irq
*irq
*
irq
struct pnp_dma *dma;
struct pnp_dma *dma;
struct pnp_dma
pnp_dma
*dma
*
dma
struct pnp_mem *mem;
struct pnp_mem *mem;
struct pnp_mem
pnp_mem
*mem
*
mem
switch (res->priority) {	case PNP_RES_PRIORITY_PREFERRED:		s = "preferred";		break;	case PNP_RES_PRIORITY_ACCEPTABLE:		s = "acceptable";		break;	case PNP_RES_PRIORITY_FUNCTIONAL:		s = "functional";		break;	default:		s = "invalid";	}
res->priority
res
res
priority
{	case PNP_RES_PRIORITY_PREFERRED:		s = "preferred";		break;	case PNP_RES_PRIORITY_ACCEPTABLE:		s = "acceptable";		break;	case PNP_RES_PRIORITY_FUNCTIONAL:		s = "functional";		break;	default:		s = "invalid";	}
case PNP_RES_PRIORITY_PREFERRED:
PNP_RES_PRIORITY_PREFERRED
PNP_RES_PRIORITY_PREFERRED
s = "preferred";
s = "preferred"
s
s
"preferred"
break;
case PNP_RES_PRIORITY_ACCEPTABLE:
PNP_RES_PRIORITY_ACCEPTABLE
PNP_RES_PRIORITY_ACCEPTABLE
s = "acceptable";
s = "acceptable"
s
s
"acceptable"
break;
case PNP_RES_PRIORITY_FUNCTIONAL:
PNP_RES_PRIORITY_FUNCTIONAL
PNP_RES_PRIORITY_FUNCTIONAL
s = "functional";
s = "functional"
s
s
"functional"
break;
default:
s = "invalid";
s = "invalid"
s
s
"invalid"
if (dep > 0)		pnp_printf(buffer, "Dependent: %02i - Priority %s\n",dep, s);
dep > 0
dep
dep
0
pnp_printf(buffer, "Dependent: %02i - Priority %s\n",dep, s);
pnp_printf(buffer, "Dependent: %02i - Priority %s\n",dep, s)
pnp_printf
pnp_printf
buffer
buffer
"Dependent: %02i - Priority %s\n"
dep
dep
s
s
for (port = res->port; port; port = port->next)		pnp_print_port(buffer, space, port);
port = res->port;
port = res->port
port
port
res->port
res
res
port
port
port
port = port->next
port
port
port->next
port
port
next
pnp_print_port(buffer, space, port);
pnp_print_port(buffer, space, port)
pnp_print_port
pnp_print_port
buffer
buffer
space
space
port
port
for (irq = res->irq; irq; irq = irq->next)		pnp_print_irq(buffer, space, irq);
irq = res->irq;
irq = res->irq
irq
irq
res->irq
res
res
irq
irq
irq
irq = irq->next
irq
irq
irq->next
irq
irq
next
pnp_print_irq(buffer, space, irq);
pnp_print_irq(buffer, space, irq)
pnp_print_irq
pnp_print_irq
buffer
buffer
space
space
irq
irq
for (dma = res->dma; dma; dma = dma->next)		pnp_print_dma(buffer, space, dma);
dma = res->dma;
dma = res->dma
dma
dma
res->dma
res
res
dma
dma
dma
dma = dma->next
dma
dma
dma->next
dma
dma
next
pnp_print_dma(buffer, space, dma);
pnp_print_dma(buffer, space, dma)
pnp_print_dma
pnp_print_dma
buffer
buffer
space
space
dma
dma
for (mem = res->mem; mem; mem = mem->next)		pnp_print_mem(buffer, space, mem);
mem = res->mem;
mem = res->mem
mem
mem
res->mem
res
res
mem
mem
mem
mem = mem->next
mem
mem
mem->next
mem
mem
next
pnp_print_mem(buffer, space, mem);
pnp_print_mem(buffer, space, mem)
pnp_print_mem
pnp_print_mem
buffer
buffer
space
space
mem
mem
-----joern-----
(82,84,0)
(92,103,0)
(107,80,0)
(17,101,0)
(80,8,0)
(54,5,0)
(103,35,0)
(50,5,0)
(28,49,0)
(58,49,0)
(98,68,0)
(94,49,0)
(93,101,0)
(15,35,0)
(6,11,0)
(32,49,0)
(83,82,0)
(106,16,0)
(74,49,0)
(29,99,0)
(82,44,0)
(3,56,0)
(45,49,0)
(4,56,0)
(77,100,0)
(47,62,0)
(41,101,0)
(81,19,0)
(19,100,0)
(63,44,0)
(9,101,0)
(48,11,0)
(46,44,0)
(8,80,0)
(5,56,0)
(31,87,0)
(23,95,0)
(69,7,0)
(95,91,0)
(24,107,0)
(72,19,0)
(73,62,0)
(53,54,0)
(2,80,0)
(91,7,0)
(39,99,0)
(105,107,0)
(63,73,0)
(11,86,0)
(13,68,0)
(51,54,0)
(11,84,0)
(99,68,0)
(71,91,0)
(79,49,0)
(99,87,0)
(82,86,0)
(25,24,0)
(104,82,0)
(107,24,0)
(27,10,0)
(70,49,0)
(52,35,0)
(68,101,0)
(99,86,0)
(88,11,0)
(22,106,0)
(95,86,0)
(36,61,0)
(8,16,0)
(35,16,0)
(54,84,0)
(62,73,0)
(1,8,0)
(64,63,0)
(21,10,0)
(59,62,0)
(85,7,0)
(7,16,0)
(10,101,0)
(42,82,0)
(43,95,0)
(34,49,0)
(82,73,0)
(26,106,0)
(19,91,0)
(97,101,0)
(66,101,0)
(57,97,0)
(61,76,0)
(100,19,0)
(18,87,0)
(14,54,0)
(11,24,0)
(0,8,0)
(12,99,0)
(30,95,0)
(99,97,0)
(54,86,0)
(56,103,0)
(7,91,0)
(95,100,0)
(90,63,0)
(54,103,0)
(38,101,0)
(55,97,0)
(99,76,0)
(11,80,0)
(44,63,0)
(75,101,0)
(96,107,0)
(33,99,0)
(99,10,0)
(95,84,0)
(62,16,0)
(40,73,0)
(35,103,0)
(60,49,0)
(102,49,0)
(87,101,0)
(56,5,0)
(37,61,0)
(26,22,1)
(19,81,1)
(56,103,1)
(107,80,1)
(37,68,1)
(99,39,1)
(37,66,1)
(20,80,1)
(87,18,1)
(37,38,1)
(105,25,1)
(90,46,1)
(31,106,1)
(18,31,1)
(64,90,1)
(39,29,1)
(99,10,1)
(67,91,1)
(54,103,1)
(40,61,1)
(100,19,1)
(89,44,1)
(35,16,1)
(81,72,1)
(30,43,1)
(95,84,1)
(106,26,1)
(47,59,1)
(85,71,1)
(13,106,1)
(54,86,1)
(38,87,1)
(56,5,1)
(82,86,1)
(11,48,1)
(11,84,1)
(10,27,1)
(82,44,1)
(25,11,1)
(0,2,1)
(98,13,1)
(11,24,1)
(51,14,1)
(48,88,1)
(72,77,1)
(65,103,1)
(99,68,1)
(82,73,1)
(11,86,1)
(43,23,1)
(99,87,1)
(95,100,1)
(78,65,1)
(2,89,1)
(88,6,1)
(53,51,1)
(5,56,1)
(1,0,1)
(55,57,1)
(106,16,1)
(40,99,1)
(56,3,1)
(3,4,1)
(95,86,1)
(73,62,1)
(15,92,1)
(21,106,1)
(54,53,1)
(103,35,1)
(20,24,1)
(61,36,1)
(99,97,1)
(33,61,1)
(62,16,1)
(44,63,1)
(23,67,1)
(107,24,1)
(46,82,1)
(35,52,1)
(8,16,1)
(9,97,1)
(12,33,1)
(69,85,1)
(95,91,1)
(63,73,1)
(95,30,1)
(59,40,1)
(63,64,1)
(67,100,1)
(99,86,1)
(36,37,1)
(54,5,1)
(37,9,1)
(52,15,1)
(80,8,1)
(11,80,1)
(62,47,1)
(42,89,1)
(27,21,1)
(7,16,1)
(24,107,1)
(19,100,1)
(91,7,1)
(65,5,1)
(97,55,1)
(89,73,1)
(68,98,1)
(77,95,1)
(71,20,1)
(61,76,1)
(14,65,1)
(107,96,1)
(7,69,1)
(54,84,1)
(57,106,1)
(82,84,1)
(92,67,1)
(66,10,1)
(104,42,1)
(6,20,1)
(8,1,1)
(99,76,1)
(19,91,1)
(4,50,1)
(82,83,1)
(29,12,1)
(83,104,1)
(96,105,1)
(50,54,1)
(63,44,1)
(99,68,2)
(100,19,2)
(99,86,2)
(8,16,2)
(50,65,2)
(67,67,2)
(23,67,2)
(11,80,2)
(80,8,2)
(82,84,2)
(83,89,2)
(88,20,2)
(54,103,2)
(11,20,2)
(77,67,2)
(5,65,2)
(95,86,2)
(20,20,2)
(91,7,2)
(42,89,2)
(31,106,2)
(51,65,2)
(96,20,2)
(54,84,2)
(4,65,2)
(35,16,2)
(99,87,2)
(63,89,2)
(18,106,2)
(56,5,2)
(73,62,2)
(99,76,2)
(106,16,2)
(9,106,2)
(25,20,2)
(56,65,2)
(99,61,2)
(87,106,2)
(63,44,2)
(72,67,2)
(44,63,2)
(81,67,2)
(10,106,2)
(107,20,2)
(33,61,2)
(100,67,2)
(95,84,2)
(95,67,2)
(24,107,2)
(98,106,2)
(13,106,2)
(54,86,2)
(30,67,2)
(65,65,2)
(3,65,2)
(95,100,2)
(61,76,2)
(82,44,2)
(105,20,2)
(89,89,2)
(107,80,2)
(82,89,2)
(57,106,2)
(63,73,2)
(55,106,2)
(54,65,2)
(54,5,2)
(27,106,2)
(97,106,2)
(14,65,2)
(19,67,2)
(99,10,2)
(62,16,2)
(44,89,2)
(7,16,2)
(38,106,2)
(29,61,2)
(6,20,2)
(64,89,2)
(46,89,2)
(19,100,2)
(99,97,2)
(24,20,2)
(11,24,2)
(95,91,2)
(19,91,2)
(90,89,2)
(5,56,2)
(103,35,2)
(68,106,2)
(66,106,2)
(12,61,2)
(39,61,2)
(107,24,2)
(104,89,2)
(11,84,2)
(53,65,2)
(11,86,2)
(21,106,2)
(43,67,2)
(56,103,2)
(48,20,2)
(82,73,2)
(82,86,2)
-----------------------------------
(0,res)
(1,irq)
(2,irq)
(3,next)
(4,mem)
(5,mem = mem->next)
(6,buffer)
(7,res->dma)
(8,res->irq)
(9,break;)
(10,s = "preferred")
(11,pnp_print_irq(buffer, space, irq)
(12,"Dependent: %02i - Priority %s\\n")
(13,s)
(14,buffer)
(15,res)
(16,struct pnp_resources *res)
(17,case PNP_RES_PRIORITY_PREFERRED:)
(18,"acceptable")
(19,dma->next)
(20,irq)
(21,s)
(22,res)
(23,buffer)
(24,irq = irq->next)
(25,irq)
(26,priority)
(27,"preferred")
(28,for (dma = res->dma; dma; dma = dma->next)
(29,dep)
(30,dma)
(31,s)
(32,for (port = res->port; port; port = port->next)
(33,buffer)
(34,if (dep > 0)
(35,res->mem)
(36,0)
(37,dep)
(38,break;)
(39,s)
(40,port)
(41,case PNP_RES_PRIORITY_FUNCTIONAL:)
(42,buffer)
(43,space)
(44,port = port->next)
(45,s)
(46,port)
(47,port)
(48,irq)
(49,)
(50,mem)
(51,space)
(52,mem)
(53,mem)
(54,pnp_print_mem(buffer, space, mem)
(55,"functional")
(56,mem->next)
(57,s)
(58,irq)
(59,res)
(60,port)
(61,dep > 0)
(62,res->port)
(63,port->next)
(64,next)
(65,mem)
(66,break;)
(67,dma)
(68,s = "invalid")
(69,dma)
(70,dma)
(71,dma)
(72,dma)
(73,port = res->port)
(74,switch (res->priority)
(75,default:)
(76,int dep)
(77,dma)
(78,RET)
(79,for (irq = res->irq; irq; irq = irq->next)
(80,irq = res->irq)
(81,next)
(82,pnp_print_port(buffer, space, port)
(83,port)
(84,char *space)
(85,res)
(86,pnp_info_buffer_t *buffer)
(87,s = "acceptable")
(88,space)
(89,port)
(90,port)
(91,dma = res->dma)
(92,mem)
(93,case PNP_RES_PRIORITY_ACCEPTABLE:)
(94,for (mem = res->mem; mem; mem = mem->next)
(95,pnp_print_dma(buffer, space, dma)
(96,next)
(97,s = "functional")
(98,"invalid")
(99,pnp_printf(buffer, "Dependent: %02i - Priority %s\\n",dep, s)
(100,dma = dma->next)
(101,)
(102,mem)
(103,mem = res->mem)
(104,space)
(105,irq)
(106,res->priority)
(107,irq->next)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^