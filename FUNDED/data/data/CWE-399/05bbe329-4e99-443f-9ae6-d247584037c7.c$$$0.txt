-----label-----
1
-----code-----
hdd_adapter_t* hdd_wlan_create_ap_dev( hdd_context_t *pHddCtx, tSirMacAddr macAddr, tANI_U8 *iface_name )
{
    struct net_device *pWlanHostapdDev = NULL;
    hdd_adapter_t *pHostapdAdapter = NULL;
    v_CONTEXT_t pVosContext= NULL;

   pWlanHostapdDev = alloc_netdev_mq(sizeof(hdd_adapter_t), iface_name, ether_setup, NUM_TX_QUEUES);

    if (pWlanHostapdDev != NULL)
    {
        pHostapdAdapter = netdev_priv(pWlanHostapdDev);

        //Init the net_device structure
        ether_setup(pWlanHostapdDev);

        //Initialize the adapter context to zeros.
        vos_mem_zero(pHostapdAdapter, sizeof( hdd_adapter_t ));
        pHostapdAdapter->dev = pWlanHostapdDev;
        pHostapdAdapter->pHddCtx = pHddCtx;
        pHostapdAdapter->magic = WLAN_HDD_ADAPTER_MAGIC;

        //Get the Global VOSS context.
        pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);
        //Save the adapter context in global context for future.
        ((VosContextType*)(pVosContext))->pHDDSoftAPContext = (v_VOID_t*)pHostapdAdapter;

        //Init the net_device structure
        strlcpy(pWlanHostapdDev->name, (const char *)iface_name, IFNAMSIZ);

        hdd_set_ap_ops( pHostapdAdapter->dev );

        pWlanHostapdDev->tx_queue_len = NET_DEV_TX_QUEUE_LEN;
        pWlanHostapdDev->watchdog_timeo = HDD_TX_TIMEOUT;
        pWlanHostapdDev->mtu = HDD_DEFAULT_MTU;

        vos_mem_copy(pWlanHostapdDev->dev_addr, (void *)macAddr,sizeof(tSirMacAddr));
        vos_mem_copy(pHostapdAdapter->macAddressCurrent.bytes, (void *)macAddr, sizeof(tSirMacAddr));

        pWlanHostapdDev->destructor = free_netdev;
        pWlanHostapdDev->ieee80211_ptr = &pHostapdAdapter->wdev ;
        pHostapdAdapter->wdev.wiphy = pHddCtx->wiphy;
        pHostapdAdapter->wdev.netdev =  pWlanHostapdDev;
        init_completion(&pHostapdAdapter->tx_action_cnf_event);
        init_completion(&pHostapdAdapter->cancel_rem_on_chan_var);
        init_completion(&pHostapdAdapter->rem_on_chan_ready_event);
#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))
        init_completion(&pHostapdAdapter->offchannel_tx_event);
#endif

        SET_NETDEV_DEV(pWlanHostapdDev, pHddCtx->parent_dev);
    }
    return pHostapdAdapter;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
18,19
18,20
19,20
21,22
21,23
24,25
24,26
24,27
24,28
24,29
24,30
25,26
26,27
26,28
27,28
29,30
29,31
29,32
32,33
33,34
35,36
36,37
36,38
37,38
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
47,48
49,50
49,51
51,52
52,53
54,55
55,56
55,57
56,57
58,59
58,60
58,61
58,62
58,63
59,60
61,62
62,63
62,64
63,64
66,67
68,69
70,71
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
78,81
78,82
78,83
78,84
78,85
78,86
78,87
78,88
78,89
78,90
78,91
78,92
78,93
78,94
78,95
78,96
78,97
78,98
78,99
78,100
78,101
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
89,90
89,91
90,91
92,93
94,95
95,96
95,97
95,98
96,97
98,99
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
111,112
113,114
114,115
114,116
115,116
115,117
116,117
119,120
121,122
122,123
122,124
123,124
123,125
124,125
127,128
129,130
130,131
130,132
131,132
133,134
133,135
133,136
134,135
136,137
138,139
140,141
141,142
141,143
142,143
142,144
143,144
144,145
144,146
145,146
145,147
146,147
148,149
150,151
151,152
154,155
154,156
155,156
155,157
156,157
158,159
160,161
162,163
163,164
163,165
163,166
163,167
164,165
166,167
166,168
167,168
170,171
170,172
171,172
171,173
173,174
175,176
177,178
179,180
180,181
180,182
181,182
183,184
183,185
184,185
187,188
188,189
188,190
189,190
189,191
190,191
193,194
195,196
196,197
196,198
197,198
197,199
198,199
201,202
203,204
204,205
204,206
205,206
205,207
206,207
209,210
211,212
212,213
212,214
212,215
212,216
213,214
215,216
215,217
216,217
219,220
219,221
220,221
220,222
222,223
224,225
226,227
227,228
227,229
228,229
231,232
232,233
232,234
232,235
232,236
233,234
235,236
235,237
236,237
236,238
237,238
241,242
241,243
242,243
242,244
244,245
246,247
248,249
249,250
249,251
250,251
253,254
254,255
254,256
255,256
255,257
256,257
259,260
261,262
262,263
262,264
263,264
263,265
264,265
267,268
268,269
268,270
269,270
272,273
273,274
273,275
274,275
274,276
275,276
275,277
276,277
280,281
280,282
281,282
284,285
285,286
285,287
286,287
286,288
287,288
287,289
288,289
292,293
294,295
295,296
295,297
296,297
298,299
299,300
299,301
300,301
303,304
304,305
304,306
305,306
307,308
308,309
308,310
309,310
312,313
313,314
313,315
314,315
316,317
317,318
317,319
318,319
321,322
322,323
322,324
322,325
323,324
325,326
327,328
327,329
328,329
331,332
332,333
-----nextToken-----
3,5,6,9,11,12,15,17,20,22,23,28,30,31,34,38,40,41,44,48,50,53,57,60,64,65,67,69,71,75,77,82,85,87,91,93,97,99,103,104,109,110,112,117,118,120,125,126,128,132,135,137,139,147,149,152,153,157,159,161,165,168,169,172,174,176,178,182,185,186,191,192,194,199,200,202,207,208,210,214,217,218,221,223,225,229,230,234,238,239,240,243,245,247,251,252,257,258,260,265,266,270,271,277,278,279,282,283,289,290,291,293,297,301,302,306,310,311,315,319,320,324,326,329,330,333
-----computeFrom-----
55,56
55,57
73,74
73,75
80,81
80,82
106,107
106,108
114,115
114,116
122,123
122,124
130,131
130,132
141,142
141,143
188,189
188,190
196,197
196,198
204,205
204,206
254,255
254,256
262,263
262,264
273,274
273,275
285,286
285,287
-----guardedBy-----
77,139
75,326
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;UnaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;UnaryExpression;IdExpression;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;Pointer;IdExpression;Name;TypeIdExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
hdd_adapter_t* hdd_wlan_create_ap_dev( hdd_context_t *pHddCtx, tSirMacAddr macAddr, tANI_U8 *iface_name ){    struct net_device *pWlanHostapdDev = NULL;    hdd_adapter_t *pHostapdAdapter = NULL;    v_CONTEXT_t pVosContext= NULL;   pWlanHostapdDev = alloc_netdev_mq(sizeof(hdd_adapter_t), iface_name, ether_setup, NUM_TX_QUEUES);    if (pWlanHostapdDev != NULL)    {        pHostapdAdapter = netdev_priv(pWlanHostapdDev);        //Init the net_device structure        ether_setup(pWlanHostapdDev);        //Initialize the adapter context to zeros.        vos_mem_zero(pHostapdAdapter, sizeof( hdd_adapter_t ));        pHostapdAdapter->dev = pWlanHostapdDev;        pHostapdAdapter->pHddCtx = pHddCtx;        pHostapdAdapter->magic = WLAN_HDD_ADAPTER_MAGIC;        //Get the Global VOSS context.        pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);        //Save the adapter context in global context for future.        ((VosContextType*)(pVosContext))->pHDDSoftAPContext = (v_VOID_t*)pHostapdAdapter;        //Init the net_device structure        strlcpy(pWlanHostapdDev->name, (const char *)iface_name, IFNAMSIZ);        hdd_set_ap_ops( pHostapdAdapter->dev );        pWlanHostapdDev->tx_queue_len = NET_DEV_TX_QUEUE_LEN;        pWlanHostapdDev->watchdog_timeo = HDD_TX_TIMEOUT;        pWlanHostapdDev->mtu = HDD_DEFAULT_MTU;        vos_mem_copy(pWlanHostapdDev->dev_addr, (void *)macAddr,sizeof(tSirMacAddr));        vos_mem_copy(pHostapdAdapter->macAddressCurrent.bytes, (void *)macAddr, sizeof(tSirMacAddr));        pWlanHostapdDev->destructor = free_netdev;        pWlanHostapdDev->ieee80211_ptr = &pHostapdAdapter->wdev ;        pHostapdAdapter->wdev.wiphy = pHddCtx->wiphy;        pHostapdAdapter->wdev.netdev =  pWlanHostapdDev;        init_completion(&pHostapdAdapter->tx_action_cnf_event);        init_completion(&pHostapdAdapter->cancel_rem_on_chan_var);        init_completion(&pHostapdAdapter->rem_on_chan_ready_event);#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))        init_completion(&pHostapdAdapter->offchannel_tx_event);#endif        SET_NETDEV_DEV(pWlanHostapdDev, pHddCtx->parent_dev);    }    return pHostapdAdapter;}
hdd_adapter_t
hdd_adapter_t
* hdd_wlan_create_ap_dev( hdd_context_t *pHddCtx, tSirMacAddr macAddr, tANI_U8 *iface_name )
*
hdd_wlan_create_ap_dev
hdd_context_t *pHddCtx
hdd_context_t
hdd_context_t
*pHddCtx
*
pHddCtx
tSirMacAddr macAddr
tSirMacAddr
tSirMacAddr
macAddr
macAddr
tANI_U8 *iface_name
tANI_U8
tANI_U8
*iface_name
*
iface_name
{    struct net_device *pWlanHostapdDev = NULL;    hdd_adapter_t *pHostapdAdapter = NULL;    v_CONTEXT_t pVosContext= NULL;   pWlanHostapdDev = alloc_netdev_mq(sizeof(hdd_adapter_t), iface_name, ether_setup, NUM_TX_QUEUES);    if (pWlanHostapdDev != NULL)    {        pHostapdAdapter = netdev_priv(pWlanHostapdDev);        //Init the net_device structure        ether_setup(pWlanHostapdDev);        //Initialize the adapter context to zeros.        vos_mem_zero(pHostapdAdapter, sizeof( hdd_adapter_t ));        pHostapdAdapter->dev = pWlanHostapdDev;        pHostapdAdapter->pHddCtx = pHddCtx;        pHostapdAdapter->magic = WLAN_HDD_ADAPTER_MAGIC;        //Get the Global VOSS context.        pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);        //Save the adapter context in global context for future.        ((VosContextType*)(pVosContext))->pHDDSoftAPContext = (v_VOID_t*)pHostapdAdapter;        //Init the net_device structure        strlcpy(pWlanHostapdDev->name, (const char *)iface_name, IFNAMSIZ);        hdd_set_ap_ops( pHostapdAdapter->dev );        pWlanHostapdDev->tx_queue_len = NET_DEV_TX_QUEUE_LEN;        pWlanHostapdDev->watchdog_timeo = HDD_TX_TIMEOUT;        pWlanHostapdDev->mtu = HDD_DEFAULT_MTU;        vos_mem_copy(pWlanHostapdDev->dev_addr, (void *)macAddr,sizeof(tSirMacAddr));        vos_mem_copy(pHostapdAdapter->macAddressCurrent.bytes, (void *)macAddr, sizeof(tSirMacAddr));        pWlanHostapdDev->destructor = free_netdev;        pWlanHostapdDev->ieee80211_ptr = &pHostapdAdapter->wdev ;        pHostapdAdapter->wdev.wiphy = pHddCtx->wiphy;        pHostapdAdapter->wdev.netdev =  pWlanHostapdDev;        init_completion(&pHostapdAdapter->tx_action_cnf_event);        init_completion(&pHostapdAdapter->cancel_rem_on_chan_var);        init_completion(&pHostapdAdapter->rem_on_chan_ready_event);#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))        init_completion(&pHostapdAdapter->offchannel_tx_event);#endif        SET_NETDEV_DEV(pWlanHostapdDev, pHddCtx->parent_dev);    }    return pHostapdAdapter;}
struct net_device *pWlanHostapdDev = NULL;
struct net_device *pWlanHostapdDev = NULL;
struct net_device
net_device
*pWlanHostapdDev = NULL
*
pWlanHostapdDev
= NULL
NULL
NULL
hdd_adapter_t *pHostapdAdapter = NULL;
hdd_adapter_t *pHostapdAdapter = NULL;
hdd_adapter_t
hdd_adapter_t
*pHostapdAdapter = NULL
*
pHostapdAdapter
= NULL
NULL
NULL
v_CONTEXT_t pVosContext= NULL;
v_CONTEXT_t pVosContext= NULL;
v_CONTEXT_t
v_CONTEXT_t
pVosContext= NULL
pVosContext
= NULL
NULL
NULL
pWlanHostapdDev = alloc_netdev_mq(sizeof(hdd_adapter_t), iface_name, ether_setup, NUM_TX_QUEUES);
pWlanHostapdDev = alloc_netdev_mq(sizeof(hdd_adapter_t), iface_name, ether_setup, NUM_TX_QUEUES)
pWlanHostapdDev
pWlanHostapdDev
alloc_netdev_mq(sizeof(hdd_adapter_t), iface_name, ether_setup, NUM_TX_QUEUES)
alloc_netdev_mq
alloc_netdev_mq
sizeof(hdd_adapter_t)
hdd_adapter_t
hdd_adapter_t
hdd_adapter_t

iface_name
iface_name
ether_setup
ether_setup
NUM_TX_QUEUES
NUM_TX_QUEUES
if (pWlanHostapdDev != NULL)    {        pHostapdAdapter = netdev_priv(pWlanHostapdDev);        //Init the net_device structure        ether_setup(pWlanHostapdDev);        //Initialize the adapter context to zeros.        vos_mem_zero(pHostapdAdapter, sizeof( hdd_adapter_t ));        pHostapdAdapter->dev = pWlanHostapdDev;        pHostapdAdapter->pHddCtx = pHddCtx;        pHostapdAdapter->magic = WLAN_HDD_ADAPTER_MAGIC;        //Get the Global VOSS context.        pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);        //Save the adapter context in global context for future.        ((VosContextType*)(pVosContext))->pHDDSoftAPContext = (v_VOID_t*)pHostapdAdapter;        //Init the net_device structure        strlcpy(pWlanHostapdDev->name, (const char *)iface_name, IFNAMSIZ);        hdd_set_ap_ops( pHostapdAdapter->dev );        pWlanHostapdDev->tx_queue_len = NET_DEV_TX_QUEUE_LEN;        pWlanHostapdDev->watchdog_timeo = HDD_TX_TIMEOUT;        pWlanHostapdDev->mtu = HDD_DEFAULT_MTU;        vos_mem_copy(pWlanHostapdDev->dev_addr, (void *)macAddr,sizeof(tSirMacAddr));        vos_mem_copy(pHostapdAdapter->macAddressCurrent.bytes, (void *)macAddr, sizeof(tSirMacAddr));        pWlanHostapdDev->destructor = free_netdev;        pWlanHostapdDev->ieee80211_ptr = &pHostapdAdapter->wdev ;        pHostapdAdapter->wdev.wiphy = pHddCtx->wiphy;        pHostapdAdapter->wdev.netdev =  pWlanHostapdDev;        init_completion(&pHostapdAdapter->tx_action_cnf_event);        init_completion(&pHostapdAdapter->cancel_rem_on_chan_var);        init_completion(&pHostapdAdapter->rem_on_chan_ready_event);#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))        init_completion(&pHostapdAdapter->offchannel_tx_event);#endif        SET_NETDEV_DEV(pWlanHostapdDev, pHddCtx->parent_dev);    }
pWlanHostapdDev != NULL
pWlanHostapdDev
pWlanHostapdDev
NULL
NULL
{        pHostapdAdapter = netdev_priv(pWlanHostapdDev);        //Init the net_device structure        ether_setup(pWlanHostapdDev);        //Initialize the adapter context to zeros.        vos_mem_zero(pHostapdAdapter, sizeof( hdd_adapter_t ));        pHostapdAdapter->dev = pWlanHostapdDev;        pHostapdAdapter->pHddCtx = pHddCtx;        pHostapdAdapter->magic = WLAN_HDD_ADAPTER_MAGIC;        //Get the Global VOSS context.        pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);        //Save the adapter context in global context for future.        ((VosContextType*)(pVosContext))->pHDDSoftAPContext = (v_VOID_t*)pHostapdAdapter;        //Init the net_device structure        strlcpy(pWlanHostapdDev->name, (const char *)iface_name, IFNAMSIZ);        hdd_set_ap_ops( pHostapdAdapter->dev );        pWlanHostapdDev->tx_queue_len = NET_DEV_TX_QUEUE_LEN;        pWlanHostapdDev->watchdog_timeo = HDD_TX_TIMEOUT;        pWlanHostapdDev->mtu = HDD_DEFAULT_MTU;        vos_mem_copy(pWlanHostapdDev->dev_addr, (void *)macAddr,sizeof(tSirMacAddr));        vos_mem_copy(pHostapdAdapter->macAddressCurrent.bytes, (void *)macAddr, sizeof(tSirMacAddr));        pWlanHostapdDev->destructor = free_netdev;        pWlanHostapdDev->ieee80211_ptr = &pHostapdAdapter->wdev ;        pHostapdAdapter->wdev.wiphy = pHddCtx->wiphy;        pHostapdAdapter->wdev.netdev =  pWlanHostapdDev;        init_completion(&pHostapdAdapter->tx_action_cnf_event);        init_completion(&pHostapdAdapter->cancel_rem_on_chan_var);        init_completion(&pHostapdAdapter->rem_on_chan_ready_event);#if (LINUX_VERSION_CODE >= KERNEL_VERSION(2,6,38))        init_completion(&pHostapdAdapter->offchannel_tx_event);#endif        SET_NETDEV_DEV(pWlanHostapdDev, pHddCtx->parent_dev);    }
pHostapdAdapter = netdev_priv(pWlanHostapdDev);
pHostapdAdapter = netdev_priv(pWlanHostapdDev)
pHostapdAdapter
pHostapdAdapter
netdev_priv(pWlanHostapdDev)
netdev_priv
netdev_priv
pWlanHostapdDev
pWlanHostapdDev
ether_setup(pWlanHostapdDev);
ether_setup(pWlanHostapdDev)
ether_setup
ether_setup
pWlanHostapdDev
pWlanHostapdDev
vos_mem_zero(pHostapdAdapter, sizeof( hdd_adapter_t ));
vos_mem_zero(pHostapdAdapter, sizeof( hdd_adapter_t ))
vos_mem_zero
vos_mem_zero
pHostapdAdapter
pHostapdAdapter
sizeof( hdd_adapter_t )
hdd_adapter_t
hdd_adapter_t
hdd_adapter_t

pHostapdAdapter->dev = pWlanHostapdDev;
pHostapdAdapter->dev = pWlanHostapdDev
pHostapdAdapter->dev
pHostapdAdapter
pHostapdAdapter
dev
pWlanHostapdDev
pWlanHostapdDev
pHostapdAdapter->pHddCtx = pHddCtx;
pHostapdAdapter->pHddCtx = pHddCtx
pHostapdAdapter->pHddCtx
pHostapdAdapter
pHostapdAdapter
pHddCtx
pHddCtx
pHddCtx
pHostapdAdapter->magic = WLAN_HDD_ADAPTER_MAGIC;
pHostapdAdapter->magic = WLAN_HDD_ADAPTER_MAGIC
pHostapdAdapter->magic
pHostapdAdapter
pHostapdAdapter
magic
WLAN_HDD_ADAPTER_MAGIC
WLAN_HDD_ADAPTER_MAGIC
pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL);
pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
pVosContext
pVosContext
vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
vos_get_global_context
vos_get_global_context
VOS_MODULE_ID_SYS
VOS_MODULE_ID_SYS
NULL
NULL
((VosContextType*)(pVosContext))->pHDDSoftAPContext = (v_VOID_t*)pHostapdAdapter;
((VosContextType*)(pVosContext))->pHDDSoftAPContext = (v_VOID_t*)pHostapdAdapter
((VosContextType*)(pVosContext))->pHDDSoftAPContext
((VosContextType*)(pVosContext))
(VosContextType*)(pVosContext)
VosContextType*
VosContextType
VosContextType
*
*
(pVosContext)
pVosContext
pVosContext
pHDDSoftAPContext
(v_VOID_t*)pHostapdAdapter
v_VOID_t*
v_VOID_t
v_VOID_t
*
*
pHostapdAdapter
pHostapdAdapter
strlcpy(pWlanHostapdDev->name, (const char *)iface_name, IFNAMSIZ);
strlcpy(pWlanHostapdDev->name, (const char *)iface_name, IFNAMSIZ)
strlcpy
strlcpy
pWlanHostapdDev->name
pWlanHostapdDev
pWlanHostapdDev
name
(const char *)iface_name
const char *
const char
*
*
iface_name
iface_name
IFNAMSIZ
IFNAMSIZ
hdd_set_ap_ops( pHostapdAdapter->dev );
hdd_set_ap_ops( pHostapdAdapter->dev )
hdd_set_ap_ops
hdd_set_ap_ops
pHostapdAdapter->dev
pHostapdAdapter
pHostapdAdapter
dev
pWlanHostapdDev->tx_queue_len = NET_DEV_TX_QUEUE_LEN;
pWlanHostapdDev->tx_queue_len = NET_DEV_TX_QUEUE_LEN
pWlanHostapdDev->tx_queue_len
pWlanHostapdDev
pWlanHostapdDev
tx_queue_len
NET_DEV_TX_QUEUE_LEN
NET_DEV_TX_QUEUE_LEN
pWlanHostapdDev->watchdog_timeo = HDD_TX_TIMEOUT;
pWlanHostapdDev->watchdog_timeo = HDD_TX_TIMEOUT
pWlanHostapdDev->watchdog_timeo
pWlanHostapdDev
pWlanHostapdDev
watchdog_timeo
HDD_TX_TIMEOUT
HDD_TX_TIMEOUT
pWlanHostapdDev->mtu = HDD_DEFAULT_MTU;
pWlanHostapdDev->mtu = HDD_DEFAULT_MTU
pWlanHostapdDev->mtu
pWlanHostapdDev
pWlanHostapdDev
mtu
HDD_DEFAULT_MTU
HDD_DEFAULT_MTU
vos_mem_copy(pWlanHostapdDev->dev_addr, (void *)macAddr,sizeof(tSirMacAddr));
vos_mem_copy(pWlanHostapdDev->dev_addr, (void *)macAddr,sizeof(tSirMacAddr))
vos_mem_copy
vos_mem_copy
pWlanHostapdDev->dev_addr
pWlanHostapdDev
pWlanHostapdDev
dev_addr
(void *)macAddr
void *
void
*
*
macAddr
macAddr
sizeof(tSirMacAddr)
tSirMacAddr
tSirMacAddr
tSirMacAddr

vos_mem_copy(pHostapdAdapter->macAddressCurrent.bytes, (void *)macAddr, sizeof(tSirMacAddr));
vos_mem_copy(pHostapdAdapter->macAddressCurrent.bytes, (void *)macAddr, sizeof(tSirMacAddr))
vos_mem_copy
vos_mem_copy
pHostapdAdapter->macAddressCurrent.bytes
pHostapdAdapter->macAddressCurrent
pHostapdAdapter
pHostapdAdapter
macAddressCurrent
bytes
(void *)macAddr
void *
void
*
*
macAddr
macAddr
sizeof(tSirMacAddr)
tSirMacAddr
tSirMacAddr
tSirMacAddr

pWlanHostapdDev->destructor = free_netdev;
pWlanHostapdDev->destructor = free_netdev
pWlanHostapdDev->destructor
pWlanHostapdDev
pWlanHostapdDev
destructor
free_netdev
free_netdev
pWlanHostapdDev->ieee80211_ptr = &pHostapdAdapter->wdev ;
pWlanHostapdDev->ieee80211_ptr = &pHostapdAdapter->wdev
pWlanHostapdDev->ieee80211_ptr
pWlanHostapdDev
pWlanHostapdDev
ieee80211_ptr
&pHostapdAdapter->wdev
pHostapdAdapter->wdev
pHostapdAdapter
pHostapdAdapter
wdev
pHostapdAdapter->wdev.wiphy = pHddCtx->wiphy;
pHostapdAdapter->wdev.wiphy = pHddCtx->wiphy
pHostapdAdapter->wdev.wiphy
pHostapdAdapter->wdev
pHostapdAdapter
pHostapdAdapter
wdev
wiphy
pHddCtx->wiphy
pHddCtx
pHddCtx
wiphy
pHostapdAdapter->wdev.netdev =  pWlanHostapdDev;
pHostapdAdapter->wdev.netdev =  pWlanHostapdDev
pHostapdAdapter->wdev.netdev
pHostapdAdapter->wdev
pHostapdAdapter
pHostapdAdapter
wdev
netdev
pWlanHostapdDev
pWlanHostapdDev
init_completion(&pHostapdAdapter->tx_action_cnf_event);
init_completion(&pHostapdAdapter->tx_action_cnf_event)
init_completion
init_completion
&pHostapdAdapter->tx_action_cnf_event
pHostapdAdapter->tx_action_cnf_event
pHostapdAdapter
pHostapdAdapter
tx_action_cnf_event
init_completion(&pHostapdAdapter->cancel_rem_on_chan_var);
init_completion(&pHostapdAdapter->cancel_rem_on_chan_var)
init_completion
init_completion
&pHostapdAdapter->cancel_rem_on_chan_var
pHostapdAdapter->cancel_rem_on_chan_var
pHostapdAdapter
pHostapdAdapter
cancel_rem_on_chan_var
init_completion(&pHostapdAdapter->rem_on_chan_ready_event);
init_completion(&pHostapdAdapter->rem_on_chan_ready_event)
init_completion
init_completion
&pHostapdAdapter->rem_on_chan_ready_event
pHostapdAdapter->rem_on_chan_ready_event
pHostapdAdapter
pHostapdAdapter
rem_on_chan_ready_event
SET_NETDEV_DEV(pWlanHostapdDev, pHddCtx->parent_dev);
SET_NETDEV_DEV(pWlanHostapdDev, pHddCtx->parent_dev)
SET_NETDEV_DEV
SET_NETDEV_DEV
pWlanHostapdDev
pWlanHostapdDev
pHddCtx->parent_dev
pHddCtx
pHddCtx
parent_dev
return pHostapdAdapter;
pHostapdAdapter
pHostapdAdapter
-----joern-----
(159,100,0)
(70,101,0)
(99,155,0)
(64,121,0)
(98,21,0)
(157,68,0)
(36,170,0)
(95,92,0)
(79,39,0)
(120,161,0)
(19,7,0)
(81,37,0)
(138,1,0)
(74,125,0)
(171,144,0)
(93,155,0)
(55,7,0)
(151,158,0)
(39,166,0)
(62,80,0)
(161,2,0)
(74,158,0)
(122,51,0)
(27,163,0)
(37,49,0)
(41,68,0)
(147,10,0)
(32,120,0)
(103,144,0)
(92,158,0)
(120,32,0)
(107,79,0)
(10,166,0)
(143,164,0)
(110,90,0)
(109,150,0)
(28,41,0)
(134,68,0)
(101,148,0)
(100,68,0)
(69,56,0)
(108,32,0)
(17,158,0)
(26,143,0)
(77,93,0)
(86,9,0)
(15,153,0)
(3,110,0)
(14,128,0)
(0,170,0)
(53,110,0)
(85,130,0)
(167,100,0)
(169,68,0)
(130,158,0)
(10,155,0)
(128,68,0)
(47,85,0)
(125,74,0)
(159,121,0)
(13,22,0)
(149,158,0)
(100,158,0)
(88,150,0)
(11,37,0)
(63,134,0)
(102,34,0)
(150,132,0)
(163,166,0)
(156,151,0)
(76,129,0)
(148,166,0)
(29,163,0)
(42,169,0)
(8,158,0)
(120,158,0)
(38,158,0)
(67,54,0)
(134,158,0)
(34,2,0)
(130,15,0)
(90,38,0)
(22,17,0)
(85,165,0)
(146,155,0)
(141,92,0)
(134,170,0)
(87,115,0)
(129,21,0)
(32,68,0)
(118,146,0)
(111,10,0)
(165,166,0)
(121,159,0)
(1,54,0)
(25,22,0)
(123,89,0)
(92,68,0)
(6,76,0)
(89,158,0)
(136,141,0)
(106,34,0)
(164,143,0)
(24,158,0)
(75,139,0)
(145,60,0)
(140,165,0)
(110,166,0)
(22,68,0)
(56,68,0)
(127,115,0)
(68,155,0)
(153,15,0)
(27,158,0)
(139,166,0)
(21,129,0)
(37,132,0)
(117,168,0)
(34,68,0)
(148,101,0)
(33,55,0)
(116,129,0)
(45,48,0)
(129,158,0)
(46,155,0)
(31,155,0)
(12,125,0)
(38,90,0)
(163,27,0)
(154,76,0)
(129,116,0)
(43,161,0)
(84,55,0)
(66,80,0)
(96,8,0)
(164,149,0)
(162,146,0)
(58,60,0)
(169,166,0)
(51,158,0)
(142,24,0)
(49,37,0)
(105,120,0)
(130,48,0)
(161,43,0)
(34,114,0)
(135,158,0)
(112,39,0)
(59,141,0)
(67,158,0)
(139,8,0)
(52,1,0)
(94,165,0)
(168,166,0)
(78,159,0)
(21,91,0)
(163,92,0)
(24,142,0)
(168,57,0)
(37,11,0)
(115,166,0)
(125,133,0)
(166,158,0)
(104,144,0)
(132,150,0)
(20,114,0)
(15,130,0)
(128,9,0)
(23,15,0)
(130,85,0)
(103,158,0)
(49,103,0)
(83,34,0)
(151,133,0)
(141,166,0)
(9,158,0)
(40,139,0)
(18,61,0)
(82,116,0)
(1,166,0)
(149,164,0)
(115,142,0)
(10,146,0)
(39,158,0)
(126,148,0)
(44,128,0)
(15,91,0)
(7,158,0)
(165,85,0)
(65,155,0)
(143,166,0)
(90,110,0)
(54,1,0)
(160,93,0)
(80,166,0)
(5,121,0)
(119,61,0)
(71,168,0)
(50,132,0)
(57,135,0)
(39,79,0)
(97,41,0)
(170,133,0)
(51,68,0)
(21,16,0)
(101,74,0)
(144,103,0)
(16,21,0)
(121,166,0)
(129,76,0)
(30,143,0)
(124,125,0)
(48,130,0)
(54,67,0)
(135,57,0)
(57,168,0)
(144,166,0)
(60,155,0)
(161,120,0)
(35,163,0)
(137,56,0)
(132,158,0)
(144,171,0)
(61,149,0)
(170,134,0)
(61,68,0)
(73,166,0)
(55,68,0)
(114,34,0)
(142,115,0)
(76,68,0)
(68,34,0)
(72,17,0)
(166,169,0)
(4,148,0)
(113,161,0)
(131,49,0)
(80,151,0)
(56,89,0)
(152,32,0)
(151,133,1)
(0,63,1)
(90,110,1)
(151,156,1)
(63,67,1)
(170,133,1)
(70,148,1)
(7,19,1)
(53,135,1)
(39,79,1)
(52,24,1)
(134,68,1)
(3,53,1)
(82,21,1)
(112,51,1)
(170,36,1)
(5,74,1)
(152,103,1)
(105,161,1)
(34,2,1)
(73,41,1)
(130,15,1)
(85,165,1)
(125,12,1)
(62,66,1)
(156,80,1)
(148,166,1)
(58,146,1)
(144,166,1)
(37,11,1)
(121,64,1)
(6,154,1)
(116,82,1)
(56,68,1)
(56,69,1)
(108,152,1)
(97,28,1)
(79,107,1)
(100,167,1)
(89,123,1)
(147,41,1)
(142,115,1)
(93,160,1)
(25,7,1)
(102,83,1)
(103,144,1)
(36,0,1)
(83,114,1)
(117,71,1)
(125,133,1)
(129,21,1)
(118,162,1)
(76,6,1)
(68,34,1)
(61,18,1)
(120,105,1)
(10,166,1)
(50,8,1)
(140,129,1)
(128,14,1)
(161,113,1)
(130,48,1)
(1,138,1)
(101,70,1)
(37,132,1)
(164,143,1)
(94,140,1)
(115,87,1)
(88,50,1)
(110,3,1)
(167,159,1)
(12,124,1)
(139,166,1)
(27,163,1)
(159,78,1)
(13,25,1)
(32,68,1)
(141,59,1)
(143,30,1)
(37,81,1)
(92,95,1)
(21,16,1)
(168,166,1)
(72,22,1)
(75,151,1)
(86,128,1)
(126,149,1)
(143,166,1)
(150,109,1)
(132,150,1)
(15,23,1)
(29,35,1)
(124,101,1)
(44,130,1)
(113,32,1)
(110,166,1)
(59,136,1)
(131,37,1)
(41,68,1)
(18,119,1)
(15,91,1)
(109,88,1)
(162,93,1)
(159,121,1)
(15,153,1)
(30,26,1)
(71,100,1)
(20,157,1)
(106,102,1)
(120,32,1)
(4,126,1)
(74,125,1)
(121,166,1)
(166,169,1)
(67,54,1)
(134,170,1)
(107,112,1)
(100,68,1)
(145,58,1)
(95,141,1)
(129,76,1)
(129,116,1)
(34,106,1)
(55,84,1)
(35,120,1)
(47,165,1)
(80,166,1)
(84,33,1)
(33,89,1)
(64,5,1)
(81,132,1)
(54,1,1)
(24,142,1)
(21,98,1)
(169,68,1)
(32,108,1)
(1,166,1)
(148,4,1)
(139,40,1)
(98,76,1)
(10,147,1)
(115,166,1)
(85,47,1)
(26,61,1)
(128,68,1)
(144,171,1)
(8,96,1)
(57,168,1)
(51,68,1)
(163,92,1)
(66,92,1)
(149,164,1)
(42,73,1)
(123,56,1)
(61,68,1)
(127,38,1)
(137,27,1)
(39,166,1)
(45,15,1)
(69,137,1)
(34,114,1)
(41,97,1)
(76,68,1)
(157,60,1)
(28,68,1)
(161,2,1)
(9,86,1)
(60,145,1)
(136,39,1)
(168,117,1)
(22,13,1)
(92,68,1)
(14,44,1)
(161,43,1)
(49,37,1)
(120,161,1)
(80,62,1)
(49,131,1)
(21,91,1)
(135,57,1)
(22,68,1)
(114,20,1)
(154,17,1)
(19,55,1)
(147,134,1)
(165,94,1)
(165,166,1)
(55,68,1)
(141,166,1)
(169,42,1)
(101,148,1)
(111,10,1)
(40,75,1)
(87,127,1)
(17,72,1)
(48,45,1)
(122,166,1)
(146,118,1)
(104,49,1)
(119,9,1)
(51,122,1)
(160,77,1)
(10,146,1)
(130,85,1)
(78,121,1)
(138,52,1)
(23,85,1)
(163,166,1)
(163,29,1)
(38,90,1)
(144,104,1)
(96,139,1)
(95,41,2)
(22,68,2)
(5,41,2)
(163,92,2)
(37,11,2)
(92,41,2)
(170,41,2)
(39,79,2)
(156,41,2)
(161,43,2)
(85,165,2)
(150,41,2)
(169,68,2)
(124,41,2)
(18,41,2)
(13,41,2)
(75,41,2)
(76,41,2)
(42,41,2)
(21,16,2)
(61,41,2)
(107,41,2)
(17,41,2)
(90,110,2)
(37,41,2)
(151,133,2)
(137,41,2)
(130,85,2)
(24,41,2)
(23,41,2)
(67,41,2)
(140,41,2)
(84,41,2)
(54,41,2)
(90,41,2)
(167,41,2)
(34,114,2)
(139,166,2)
(129,76,2)
(51,41,2)
(144,166,2)
(110,41,2)
(38,90,2)
(55,68,2)
(125,133,2)
(36,41,2)
(66,41,2)
(0,41,2)
(51,68,2)
(76,68,2)
(128,41,2)
(7,41,2)
(26,41,2)
(143,41,2)
(105,41,2)
(45,41,2)
(103,41,2)
(149,41,2)
(120,41,2)
(134,170,2)
(14,41,2)
(110,166,2)
(89,41,2)
(161,2,2)
(130,48,2)
(152,41,2)
(159,41,2)
(121,41,2)
(56,41,2)
(113,41,2)
(3,41,2)
(72,41,2)
(79,41,2)
(101,148,2)
(170,133,2)
(39,41,2)
(144,41,2)
(40,41,2)
(81,41,2)
(87,41,2)
(100,41,2)
(8,41,2)
(163,166,2)
(121,166,2)
(116,41,2)
(15,153,2)
(151,41,2)
(143,166,2)
(135,57,2)
(169,41,2)
(74,125,2)
(163,41,2)
(85,41,2)
(115,41,2)
(120,32,2)
(166,169,2)
(29,41,2)
(103,144,2)
(67,54,2)
(78,41,2)
(68,34,2)
(63,41,2)
(98,41,2)
(148,166,2)
(38,41,2)
(120,161,2)
(165,166,2)
(50,41,2)
(54,1,2)
(164,41,2)
(132,41,2)
(128,68,2)
(139,41,2)
(144,171,2)
(154,41,2)
(96,41,2)
(112,41,2)
(64,41,2)
(129,116,2)
(141,41,2)
(101,41,2)
(164,143,2)
(119,41,2)
(148,41,2)
(69,41,2)
(12,41,2)
(49,41,2)
(27,163,2)
(56,68,2)
(39,166,2)
(122,41,2)
(15,41,2)
(21,41,2)
(166,41,2)
(33,41,2)
(138,41,2)
(132,150,2)
(55,41,2)
(129,41,2)
(35,41,2)
(141,166,2)
(149,164,2)
(22,41,2)
(52,41,2)
(74,41,2)
(62,41,2)
(80,41,2)
(32,41,2)
(9,41,2)
(10,166,2)
(48,41,2)
(61,68,2)
(168,41,2)
(6,41,2)
(25,41,2)
(86,41,2)
(34,2,2)
(47,41,2)
(104,41,2)
(136,41,2)
(134,41,2)
(1,166,2)
(4,41,2)
(37,132,2)
(134,68,2)
(57,168,2)
(82,41,2)
(41,68,2)
(130,15,2)
(126,41,2)
(30,41,2)
(94,41,2)
(115,166,2)
(70,41,2)
(92,68,2)
(111,10,2)
(109,41,2)
(100,68,2)
(24,142,2)
(135,41,2)
(117,41,2)
(1,41,2)
(19,41,2)
(142,41,2)
(49,37,2)
(15,91,2)
(73,41,2)
(159,121,2)
(168,166,2)
(71,41,2)
(142,115,2)
(59,41,2)
(88,41,2)
(44,41,2)
(129,21,2)
(161,41,2)
(108,41,2)
(32,68,2)
(21,91,2)
(10,146,2)
(123,41,2)
(57,41,2)
(131,41,2)
(165,41,2)
(27,41,2)
(53,41,2)
(125,41,2)
(130,41,2)
(80,166,2)
(127,41,2)
-----------------------------------
(0,pHddCtx)
(1,pHostapdAdapter->offchannel_tx_event)
(2,tANI_U8 *iface_name)
(3,cancel_rem_on_chan_var)
(4,wdev)
(5,pHostapdAdapter)
(6,dev_addr)
(7,pWlanHostapdDev->watchdog_timeo = HDD_TX_TIMEOUT)
(8,pHostapdAdapter->magic = WLAN_HDD_ADAPTER_MAGIC)
(9,pWlanHostapdDev->destructor = free_netdev)
(10,return pHostapdAdapter;)
(11,VosContextType*)
(12,wiphy)
(13,mtu)
(14,destructor)
(15,(void *)
(16,void *)
(17,pWlanHostapdDev->mtu = HDD_DEFAULT_MTU)
(18,ieee80211_ptr)
(19,HDD_TX_TIMEOUT)
(20,hdd_adapter_t)
(21,(void *)
(22,pWlanHostapdDev->mtu)
(23,macAddr)
(24,init_completion(&pHostapdAdapter->rem_on_chan_ready_event)
(25,pWlanHostapdDev)
(26,pHostapdAdapter)
(27,hdd_set_ap_ops( pHostapdAdapter->dev )
(28,pWlanHostapdDev)
(29,dev)
(30,wdev)
(31,pWlanHostapdDev)
(32,pWlanHostapdDev->name)
(33,pWlanHostapdDev)
(34,alloc_netdev_mq(sizeof(hdd_adapter_t)
(35,pHostapdAdapter)
(36,parent_dev)
(37,(VosContextType*)
(38,init_completion(&pHostapdAdapter->cancel_rem_on_chan_var)
(39,vos_mem_zero(pHostapdAdapter, sizeof( hdd_adapter_t )
(40,magic)
(41,pWlanHostapdDev != NULL)
(42,pWlanHostapdDev)
(43,const char *)
(44,pWlanHostapdDev)
(45,tSirMacAddr)
(46,pHostapdAdapter)
(47,bytes)
(48,sizeof(tSirMacAddr)
(49,((VosContextType*)
(50,pVosContext)
(51,ether_setup(pWlanHostapdDev)
(52,pHostapdAdapter)
(53,pHostapdAdapter)
(54,&pHostapdAdapter->offchannel_tx_event)
(55,pWlanHostapdDev->watchdog_timeo)
(56,pWlanHostapdDev->tx_queue_len)
(57,&pHostapdAdapter->tx_action_cnf_event)
(58,pVosContext)
(59,dev)
(60,pVosContext= NULL)
(61,pWlanHostapdDev->ieee80211_ptr)
(62,pHddCtx)
(63,pWlanHostapdDev)
(64,wdev)
(65,pVosContext)
(66,pHostapdAdapter)
(67,init_completion(&pHostapdAdapter->offchannel_tx_event)
(68,pWlanHostapdDev = alloc_netdev_mq(sizeof(hdd_adapter_t)
(69,tx_queue_len)
(70,wiphy)
(71,pHostapdAdapter)
(72,HDD_DEFAULT_MTU)
(73,pHostapdAdapter)
(74,pHostapdAdapter->wdev.wiphy = pHddCtx->wiphy)
(75,pHostapdAdapter)
(76,pWlanHostapdDev->dev_addr)
(77,pWlanHostapdDev)
(78,netdev)
(79,sizeof( hdd_adapter_t )
(80,pHostapdAdapter->pHddCtx)
(81,pVosContext)
(82,tSirMacAddr)
(83,iface_name)
(84,watchdog_timeo)
(85,pHostapdAdapter->macAddressCurrent.bytes)
(86,free_netdev)
(87,rem_on_chan_ready_event)
(88,VOS_MODULE_ID_SYS)
(89,pWlanHostapdDev->tx_queue_len = NET_DEV_TX_QUEUE_LEN)
(90,&pHostapdAdapter->cancel_rem_on_chan_var)
(91,tSirMacAddr macAddr)
(92,pHostapdAdapter->dev = pWlanHostapdDev)
(93,*pWlanHostapdDev = NULL)
(94,macAddressCurrent)
(95,pWlanHostapdDev)
(96,WLAN_HDD_ADAPTER_MAGIC)
(97,NULL)
(98,macAddr)
(99,if (pWlanHostapdDev != NULL)
(100,pHostapdAdapter->wdev.netdev =  pWlanHostapdDev)
(101,pHostapdAdapter->wdev.wiphy)
(102,ether_setup)
(103,((VosContextType*)
(104,pHostapdAdapter)
(105,IFNAMSIZ)
(106,NUM_TX_QUEUES)
(107,hdd_adapter_t)
(108,name)
(109,NULL)
(110,pHostapdAdapter->cancel_rem_on_chan_var)
(111,RET)
(112,pHostapdAdapter)
(113,iface_name)
(114,sizeof(hdd_adapter_t)
(115,pHostapdAdapter->rem_on_chan_ready_event)
(116,sizeof(tSirMacAddr)
(117,tx_action_cnf_event)
(118,NULL)
(119,pWlanHostapdDev)
(120,strlcpy(pWlanHostapdDev->name, (const char *)
(121,pHostapdAdapter->wdev)
(122,pWlanHostapdDev)
(123,NET_DEV_TX_QUEUE_LEN)
(124,pHddCtx)
(125,pHddCtx->wiphy)
(126,pHostapdAdapter)
(127,pHostapdAdapter)
(128,pWlanHostapdDev->destructor)
(129,vos_mem_copy(pWlanHostapdDev->dev_addr, (void *)
(130,vos_mem_copy(pHostapdAdapter->macAddressCurrent.bytes, (void *)
(131,pHDDSoftAPContext)
(132,pVosContext = vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
(133,hdd_context_t *pHddCtx)
(134,SET_NETDEV_DEV(pWlanHostapdDev, pHddCtx->parent_dev)
(135,init_completion(&pHostapdAdapter->tx_action_cnf_event)
(136,pHostapdAdapter)
(137,pWlanHostapdDev)
(138,offchannel_tx_event)
(139,pHostapdAdapter->magic)
(140,pHostapdAdapter)
(141,pHostapdAdapter->dev)
(142,&pHostapdAdapter->rem_on_chan_ready_event)
(143,pHostapdAdapter->wdev)
(144,(v_VOID_t*)
(145,NULL)
(146,*pHostapdAdapter = NULL)
(147,pHostapdAdapter)
(148,pHostapdAdapter->wdev)
(149,pWlanHostapdDev->ieee80211_ptr = &pHostapdAdapter->wdev)
(150,vos_get_global_context(VOS_MODULE_ID_SYS, NULL)
(151,pHostapdAdapter->pHddCtx = pHddCtx)
(152,pWlanHostapdDev)
(153,void *)
(154,pWlanHostapdDev)
(155,)
(156,pHddCtx)
(157,pWlanHostapdDev)
(158,)
(159,pHostapdAdapter->wdev.netdev)
(160,NULL)
(161,(const char *)
(162,pHostapdAdapter)
(163,pHostapdAdapter->dev)
(164,&pHostapdAdapter->wdev)
(165,pHostapdAdapter->macAddressCurrent)
(166,pHostapdAdapter = netdev_priv(pWlanHostapdDev)
(167,pWlanHostapdDev)
(168,pHostapdAdapter->tx_action_cnf_event)
(169,netdev_priv(pWlanHostapdDev)
(170,pHddCtx->parent_dev)
(171,v_VOID_t*)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^