-----label-----
0
-----code-----
static inline void platform_do_lowpower(unsigned int cpu, int *spurious)
{
	for (;;) {

		/* make cpu1 to be turned off at next WFI command */
		if (cpu == 1)
			__raw_writel(0, S5P_ARM_CORE1_CONFIGURATION);

		/*
		 * here's the WFI
		 */
		asm(".word	0xe320f003\n"
		    :
		    :
		    : "memory", "cc");

		if (pen_release == cpu_logical_map(cpu)) {
			/*
			 * OK, proper wakeup, we're done
			 */
			break;
		}

		/*
		 * Getting here, means that we have come out of WFI without
		 * having been woken up - this shouldn't happen
		 *
		 * Just note it happening - when we're woken, we can report
		 * its occurrence.
		 */
		(*spurious)++;
	}
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
9,10
9,11
11,12
11,13
14,15
15,16
15,17
17,18
17,19
17,20
17,21
18,19
18,20
19,20
19,21
20,21
23,24
24,25
24,26
24,27
25,26
28,29
30,31
32,33
32,34
33,34
33,35
34,35
36,37
36,38
37,38
39,40
41,42
43,44
44,45
45,46
46,47
47,48
-----nextToken-----
2,4,6,8,10,12,13,16,21,22,26,27,29,31,35,38,40,42,48
-----computeFrom-----
19,20
19,21
33,34
33,35
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;ForStatement;NullStatement;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;DeclarationStatement;ASMDeclaration;IfStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;BreakStatement;ExpressionStatement;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;
-----ast_node-----
static inline void platform_do_lowpower(unsigned int cpu, int *spurious){	for (;;) {		/* make cpu1 to be turned off at next WFI command */		if (cpu == 1)			__raw_writel(0, S5P_ARM_CORE1_CONFIGURATION);		/*		 * here's the WFI		 */		asm(".word	0xe320f003\n"		    :		    :		    : "memory", "cc");		if (pen_release == cpu_logical_map(cpu)) {			/*			 * OK, proper wakeup, we're done			 */			break;		}		/*		 * Getting here, means that we have come out of WFI without		 * having been woken up - this shouldn't happen		 *		 * Just note it happening - when we're woken, we can report		 * its occurrence.		 */		(*spurious)++;	}}
static inline void
platform_do_lowpower(unsigned int cpu, int *spurious)
platform_do_lowpower
unsigned int cpu
unsigned int
cpu
cpu
int *spurious
int
*spurious
*
spurious
{	for (;;) {		/* make cpu1 to be turned off at next WFI command */		if (cpu == 1)			__raw_writel(0, S5P_ARM_CORE1_CONFIGURATION);		/*		 * here's the WFI		 */		asm(".word	0xe320f003\n"		    :		    :		    : "memory", "cc");		if (pen_release == cpu_logical_map(cpu)) {			/*			 * OK, proper wakeup, we're done			 */			break;		}		/*		 * Getting here, means that we have come out of WFI without		 * having been woken up - this shouldn't happen		 *		 * Just note it happening - when we're woken, we can report		 * its occurrence.		 */		(*spurious)++;	}}
for (;;) {		/* make cpu1 to be turned off at next WFI command */		if (cpu == 1)			__raw_writel(0, S5P_ARM_CORE1_CONFIGURATION);		/*		 * here's the WFI		 */		asm(".word	0xe320f003\n"		    :		    :		    : "memory", "cc");		if (pen_release == cpu_logical_map(cpu)) {			/*			 * OK, proper wakeup, we're done			 */			break;		}		/*		 * Getting here, means that we have come out of WFI without		 * having been woken up - this shouldn't happen		 *		 * Just note it happening - when we're woken, we can report		 * its occurrence.		 */		(*spurious)++;	}
;
{		/* make cpu1 to be turned off at next WFI command */		if (cpu == 1)			__raw_writel(0, S5P_ARM_CORE1_CONFIGURATION);		/*		 * here's the WFI		 */		asm(".word	0xe320f003\n"		    :		    :		    : "memory", "cc");		if (pen_release == cpu_logical_map(cpu)) {			/*			 * OK, proper wakeup, we're done			 */			break;		}		/*		 * Getting here, means that we have come out of WFI without		 * having been woken up - this shouldn't happen		 *		 * Just note it happening - when we're woken, we can report		 * its occurrence.		 */		(*spurious)++;	}
if (cpu == 1)			__raw_writel(0, S5P_ARM_CORE1_CONFIGURATION);
cpu == 1
cpu
cpu
1
__raw_writel(0, S5P_ARM_CORE1_CONFIGURATION);
__raw_writel(0, S5P_ARM_CORE1_CONFIGURATION)
__raw_writel
__raw_writel
0
S5P_ARM_CORE1_CONFIGURATION
S5P_ARM_CORE1_CONFIGURATION
asm(".word	0xe320f003\n"		    :		    :		    : "memory", "cc");
asm(".word	0xe320f003\n"		    :		    :		    : "memory", "cc");
if (pen_release == cpu_logical_map(cpu)) {			/*			 * OK, proper wakeup, we're done			 */			break;		}
pen_release == cpu_logical_map(cpu)
pen_release
pen_release
cpu_logical_map(cpu)
cpu_logical_map
cpu_logical_map
cpu
cpu
{			/*			 * OK, proper wakeup, we're done			 */			break;		}
break;
(*spurious)++;
(*spurious)++
(*spurious)
*spurious
spurious
spurious
-----joern-----
(6,3,0)
(7,13,0)
(8,17,0)
(17,8,0)
(16,5,0)
(3,6,0)
(21,6,0)
(2,5,0)
(8,10,0)
(4,14,0)
(9,17,0)
(15,13,0)
(22,11,0)
(0,11,0)
(19,8,0)
(5,10,0)
(3,13,0)
(6,18,0)
(1,12,0)
(16,2,1)
(20,4,1)
(17,8,1)
(0,22,1)
(11,0,1)
(8,19,1)
(8,10,1)
(9,5,1)
(19,9,1)
(4,17,1)
(2,3,1)
(5,10,1)
(6,18,1)
(21,17,1)
(6,21,1)
(22,5,1)
(5,16,1)
(3,6,1)
(9,11,1)
(3,6,2)
(8,10,2)
(8,17,2)
(5,10,2)
(3,17,2)
(2,17,2)
(11,5,2)
(6,17,2)
(21,17,2)
(17,17,2)
(9,17,2)
(19,17,2)
(16,17,2)
(5,17,2)
(6,18,2)
(22,5,2)
(17,8,2)
(0,5,2)
-----------------------------------
(0,S5P_ARM_CORE1_CONFIGURATION)
(1,for (;;)
(2,cpu)
(3,(*spurious)
(4,break;)
(5,cpu == 1)
(6,*spurious)
(7,if (cpu == 1)
(8,cpu_logical_map(cpu)
(9,pen_release)
(10,unsigned int cpu)
(11,__raw_writel(0, S5P_ARM_CORE1_CONFIGURATION)
(12,)
(13,)
(14,)
(15,if (pen_release == cpu_logical_map(cpu)
(16,1)
(17,pen_release == cpu_logical_map(cpu)
(18,int *spurious)
(19,cpu)
(20,RET)
(21,spurious)
(22,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^