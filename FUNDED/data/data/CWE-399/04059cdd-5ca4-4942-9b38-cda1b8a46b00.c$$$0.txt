-----label-----
1
-----code-----
static int sa11x0_pm_enter(suspend_state_t state)
{
	unsigned long gpio, sleep_save[SLEEP_SAVE_COUNT];

	gpio = GPLR;

	/* save vital registers */
	SAVE(GPDR);
	SAVE(GAFR);

	SAVE(PPDR);
	SAVE(PPSR);
	SAVE(PPAR);
	SAVE(PSDR);

	SAVE(Ser1SDCR0);

	/* Clear previous reset status */
	RCSR = RCSR_HWR | RCSR_SWR | RCSR_WDR | RCSR_SMR;

	/* set resume return address */
	PSPR = virt_to_phys(cpu_resume);

	/* go zzz */
	cpu_suspend(0, sa1100_finish_suspend);

	/*
	 * Ensure not to come back here if it wasn't intended
	 */
	PSPR = 0;

	/*
	 * Ensure interrupt sources are disabled; we will re-init
	 * the interrupt subsystem via the device manager.
	 */
	ICLR = 0;
	ICCR = 1;
	ICMR = 0;

	/* restore registers */
	RESTORE(GPDR);
	RESTORE(GAFR);

	RESTORE(PPDR);
	RESTORE(PPSR);
	RESTORE(PPAR);
	RESTORE(PSDR);

	RESTORE(Ser1SDCR0);

	GPSR = gpio;
	GPCR = ~gpio;

	/*
	 * Clear the peripheral sleep-hold bit.
	 */
	PSSR = PSSR_PH;

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
10,18
10,19
10,20
10,21
10,22
10,23
10,24
10,25
10,26
10,27
10,28
10,29
10,30
10,31
10,32
10,33
10,34
10,35
10,36
10,37
11,12
12,13
12,14
12,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
32,33
34,35
35,36
35,37
36,37
38,39
39,40
41,42
42,43
42,44
43,44
45,46
46,47
48,49
49,50
49,51
50,51
52,53
53,54
55,56
56,57
56,58
57,58
59,60
60,61
62,63
63,64
63,65
64,65
66,67
67,68
69,70
70,71
70,72
71,72
73,74
74,75
76,77
77,78
77,79
78,79
80,81
80,82
81,82
81,83
82,83
82,84
83,84
85,86
87,88
89,90
91,92
92,93
92,94
93,94
95,96
95,97
96,97
98,99
100,101
101,102
101,103
101,104
102,103
105,106
107,108
108,109
108,110
109,110
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
122,123
123,124
123,125
124,125
127,128
128,129
128,130
129,130
131,132
133,134
134,135
134,136
135,136
137,138
139,140
140,141
140,142
141,142
143,144
145,146
146,147
146,148
147,148
149,150
151,152
152,153
152,154
153,154
155,156
157,158
158,159
158,160
159,160
161,162
163,164
164,165
164,166
165,166
167,168
169,170
170,171
170,172
171,172
173,174
175,176
176,177
176,178
177,178
179,180
180,181
182,183
183,184
183,185
184,185
186,187
188,189
-----nextToken-----
2,4,7,9,13,15,17,20,24,26,30,33,37,40,44,47,51,54,58,61,65,68,72,75,79,84,86,88,90,94,97,99,103,104,106,110,111,115,116,120,121,125,126,130,132,136,138,142,144,148,150,154,156,160,162,166,168,172,174,178,181,185,187,189
-----computeFrom-----
22,23
22,24
77,78
77,79
80,81
80,82
81,82
81,83
82,83
82,84
92,93
92,94
108,109
108,110
113,114
113,115
118,119
118,120
123,124
123,125
170,171
170,172
176,177
176,178
183,184
183,185
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ArrayDeclarator;Name;ArrayModifier;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int sa11x0_pm_enter(suspend_state_t state){	unsigned long gpio, sleep_save[SLEEP_SAVE_COUNT];	gpio = GPLR;	/* save vital registers */	SAVE(GPDR);	SAVE(GAFR);	SAVE(PPDR);	SAVE(PPSR);	SAVE(PPAR);	SAVE(PSDR);	SAVE(Ser1SDCR0);	/* Clear previous reset status */	RCSR = RCSR_HWR | RCSR_SWR | RCSR_WDR | RCSR_SMR;	/* set resume return address */	PSPR = virt_to_phys(cpu_resume);	/* go zzz */	cpu_suspend(0, sa1100_finish_suspend);	/*	 * Ensure not to come back here if it wasn't intended	 */	PSPR = 0;	/*	 * Ensure interrupt sources are disabled; we will re-init	 * the interrupt subsystem via the device manager.	 */	ICLR = 0;	ICCR = 1;	ICMR = 0;	/* restore registers */	RESTORE(GPDR);	RESTORE(GAFR);	RESTORE(PPDR);	RESTORE(PPSR);	RESTORE(PPAR);	RESTORE(PSDR);	RESTORE(Ser1SDCR0);	GPSR = gpio;	GPCR = ~gpio;	/*	 * Clear the peripheral sleep-hold bit.	 */	PSSR = PSSR_PH;	return 0;}
static int
sa11x0_pm_enter(suspend_state_t state)
sa11x0_pm_enter
suspend_state_t state
suspend_state_t
suspend_state_t
state
state
{	unsigned long gpio, sleep_save[SLEEP_SAVE_COUNT];	gpio = GPLR;	/* save vital registers */	SAVE(GPDR);	SAVE(GAFR);	SAVE(PPDR);	SAVE(PPSR);	SAVE(PPAR);	SAVE(PSDR);	SAVE(Ser1SDCR0);	/* Clear previous reset status */	RCSR = RCSR_HWR | RCSR_SWR | RCSR_WDR | RCSR_SMR;	/* set resume return address */	PSPR = virt_to_phys(cpu_resume);	/* go zzz */	cpu_suspend(0, sa1100_finish_suspend);	/*	 * Ensure not to come back here if it wasn't intended	 */	PSPR = 0;	/*	 * Ensure interrupt sources are disabled; we will re-init	 * the interrupt subsystem via the device manager.	 */	ICLR = 0;	ICCR = 1;	ICMR = 0;	/* restore registers */	RESTORE(GPDR);	RESTORE(GAFR);	RESTORE(PPDR);	RESTORE(PPSR);	RESTORE(PPAR);	RESTORE(PSDR);	RESTORE(Ser1SDCR0);	GPSR = gpio;	GPCR = ~gpio;	/*	 * Clear the peripheral sleep-hold bit.	 */	PSSR = PSSR_PH;	return 0;}
unsigned long gpio, sleep_save[SLEEP_SAVE_COUNT];
unsigned long gpio, sleep_save[SLEEP_SAVE_COUNT];
unsigned long
gpio
gpio
sleep_save[SLEEP_SAVE_COUNT]
sleep_save
[SLEEP_SAVE_COUNT]
SLEEP_SAVE_COUNT
SLEEP_SAVE_COUNT
gpio = GPLR;
gpio = GPLR
gpio
gpio
GPLR
GPLR
SAVE(GPDR);
SAVE(GPDR);
SAVE
SAVE
(GPDR)
GPDR
GPDR
SAVE(GAFR);
SAVE(GAFR);
SAVE
SAVE
(GAFR)
GAFR
GAFR
SAVE(PPDR);
SAVE(PPDR);
SAVE
SAVE
(PPDR)
PPDR
PPDR
SAVE(PPSR);
SAVE(PPSR);
SAVE
SAVE
(PPSR)
PPSR
PPSR
SAVE(PPAR);
SAVE(PPAR);
SAVE
SAVE
(PPAR)
PPAR
PPAR
SAVE(PSDR);
SAVE(PSDR);
SAVE
SAVE
(PSDR)
PSDR
PSDR
SAVE(Ser1SDCR0);
SAVE(Ser1SDCR0);
SAVE
SAVE
(Ser1SDCR0)
Ser1SDCR0
Ser1SDCR0
RCSR = RCSR_HWR | RCSR_SWR | RCSR_WDR | RCSR_SMR;
RCSR = RCSR_HWR | RCSR_SWR | RCSR_WDR | RCSR_SMR
RCSR
RCSR
RCSR_HWR | RCSR_SWR | RCSR_WDR | RCSR_SMR
RCSR_HWR | RCSR_SWR | RCSR_WDR
RCSR_HWR | RCSR_SWR
RCSR_HWR
RCSR_HWR
RCSR_SWR
RCSR_SWR
RCSR_WDR
RCSR_WDR
RCSR_SMR
RCSR_SMR
PSPR = virt_to_phys(cpu_resume);
PSPR = virt_to_phys(cpu_resume)
PSPR
PSPR
virt_to_phys(cpu_resume)
virt_to_phys
virt_to_phys
cpu_resume
cpu_resume
cpu_suspend(0, sa1100_finish_suspend);
cpu_suspend(0, sa1100_finish_suspend)
cpu_suspend
cpu_suspend
0
sa1100_finish_suspend
sa1100_finish_suspend
PSPR = 0;
PSPR = 0
PSPR
PSPR
0
ICLR = 0;
ICLR = 0
ICLR
ICLR
0
ICCR = 1;
ICCR = 1
ICCR
ICCR
1
ICMR = 0;
ICMR = 0
ICMR
ICMR
0
RESTORE(GPDR);
RESTORE(GPDR)
RESTORE
RESTORE
GPDR
GPDR
RESTORE(GAFR);
RESTORE(GAFR)
RESTORE
RESTORE
GAFR
GAFR
RESTORE(PPDR);
RESTORE(PPDR)
RESTORE
RESTORE
PPDR
PPDR
RESTORE(PPSR);
RESTORE(PPSR)
RESTORE
RESTORE
PPSR
PPSR
RESTORE(PPAR);
RESTORE(PPAR)
RESTORE
RESTORE
PPAR
PPAR
RESTORE(PSDR);
RESTORE(PSDR)
RESTORE
RESTORE
PSDR
PSDR
RESTORE(Ser1SDCR0);
RESTORE(Ser1SDCR0)
RESTORE
RESTORE
Ser1SDCR0
Ser1SDCR0
GPSR = gpio;
GPSR = gpio
GPSR
GPSR
gpio
gpio
GPCR = ~gpio;
GPCR = ~gpio
GPCR
GPCR
~gpio
gpio
gpio
PSSR = PSSR_PH;
PSSR = PSSR_PH
PSSR
PSSR
PSSR_PH
PSSR_PH
return 0;
0
-----joern-----
(29,70,0)
(49,5,0)
(13,30,0)
(45,66,0)
(3,19,0)
(52,36,0)
(28,19,0)
(65,19,0)
(67,34,0)
(4,51,0)
(6,18,0)
(23,37,0)
(11,19,0)
(68,19,0)
(15,33,0)
(30,5,0)
(24,19,0)
(60,19,0)
(61,15,0)
(32,11,0)
(72,24,0)
(39,55,0)
(12,53,0)
(35,44,0)
(66,19,0)
(21,73,0)
(47,30,0)
(53,12,0)
(5,19,0)
(30,25,0)
(61,25,0)
(15,61,0)
(14,41,0)
(0,33,0)
(59,42,0)
(7,65,0)
(37,19,0)
(57,19,0)
(55,19,0)
(30,53,0)
(70,19,0)
(36,19,0)
(8,62,0)
(58,66,0)
(66,28,0)
(64,62,0)
(30,41,0)
(25,61,0)
(40,19,0)
(54,19,0)
(30,62,0)
(30,19,0)
(18,19,0)
(30,44,0)
(20,5,0)
(42,19,0)
(2,53,0)
(41,19,0)
(44,19,0)
(16,12,0)
(33,15,0)
(10,36,0)
(25,19,0)
(48,54,0)
(34,19,0)
(30,34,0)
(69,33,0)
(71,57,0)
(51,19,0)
(38,25,0)
(50,15,0)
(73,19,0)
(1,44,0)
(62,19,0)
(43,61,0)
(53,19,0)
(30,66,0)
(56,41,0)
(9,68,0)
(26,28,0)
(46,34,0)
(31,28,0)
(63,65,0)
(22,27,0)
(17,60,0)
(30,36,0)
(27,19,0)
(15,33,1)
(30,44,1)
(30,5,1)
(43,38,1)
(45,73,1)
(47,41,1)
(30,34,1)
(66,28,1)
(21,60,1)
(64,65,1)
(41,14,1)
(7,63,1)
(57,71,1)
(70,29,1)
(11,32,1)
(44,35,1)
(67,46,1)
(58,45,1)
(42,59,1)
(26,31,1)
(39,54,1)
(23,24,1)
(36,10,1)
(46,62,1)
(18,6,1)
(34,67,1)
(33,0,1)
(22,11,1)
(30,36,1)
(13,30,1)
(6,27,1)
(16,2,1)
(52,44,1)
(59,28,1)
(1,34,1)
(56,5,1)
(20,66,1)
(30,53,1)
(51,4,1)
(30,62,1)
(24,72,1)
(71,55,1)
(17,57,1)
(73,21,1)
(4,68,1)
(60,17,1)
(63,53,1)
(65,7,1)
(48,51,1)
(53,12,1)
(61,15,1)
(38,37,1)
(72,70,1)
(50,43,1)
(9,36,1)
(5,49,1)
(27,22,1)
(29,18,1)
(30,41,1)
(12,16,1)
(30,66,1)
(30,47,1)
(30,25,1)
(62,8,1)
(10,52,1)
(32,42,1)
(55,39,1)
(28,26,1)
(37,23,1)
(2,25,1)
(66,58,1)
(49,20,1)
(8,64,1)
(54,48,1)
(14,56,1)
(68,9,1)
(0,69,1)
(69,50,1)
(25,61,1)
(35,1,1)
(25,61,2)
(30,41,2)
(30,62,2)
(30,36,2)
(66,28,2)
(30,66,2)
(13,30,2)
(53,12,2)
(61,15,2)
(30,5,2)
(30,34,2)
(30,53,2)
(30,44,2)
(15,33,2)
(30,25,2)
-----------------------------------
(0,RCSR_SMR)
(1,ICCR)
(2,PSPR)
(3,sleep_save)
(4,GAFR)
(5,GPCR = ~gpio)
(6,PPSR)
(7,sa1100_finish_suspend)
(8,0)
(9,GPDR)
(10,0)
(11,SAVE(GAFR)
(12,virt_to_phys(cpu_resume)
(13,RET)
(14,PSSR_PH)
(15,RCSR_SWR | RCSR_WDR | RCSR_SMR)
(16,cpu_resume)
(17,PSDR)
(18,SAVE(PPSR)
(19,)
(20,GPCR)
(21,Ser1SDCR0)
(22,PPDR)
(23,Ser1SDCR0)
(24,SAVE(PSDR)
(25,RCSR = RCSR_HWR | RCSR_SWR | RCSR_WDR | RCSR_SMR)
(26,GPLR)
(27,SAVE(PPDR)
(28,gpio = GPLR)
(29,PPAR)
(30,return 0;)
(31,gpio)
(32,GAFR)
(33,RCSR_WDR | RCSR_SMR)
(34,ICLR = 0)
(35,1)
(36,ICMR = 0)
(37,SAVE(Ser1SDCR0)
(38,RCSR)
(39,PPSR)
(40,gpio)
(41,PSSR = PSSR_PH)
(42,SAVE(GPDR)
(43,RCSR_HWR)
(44,ICCR = 1)
(45,GPSR)
(46,ICLR)
(47,0)
(48,PPDR)
(49,~gpio)
(50,RCSR_SWR)
(51,RESTORE(GAFR)
(52,ICMR)
(53,PSPR = virt_to_phys(cpu_resume)
(54,RESTORE(PPDR)
(55,RESTORE(PPSR)
(56,PSSR)
(57,RESTORE(PPAR)
(58,gpio)
(59,GPDR)
(60,RESTORE(PSDR)
(61,RCSR_HWR | RCSR_SWR | RCSR_WDR | RCSR_SMR)
(62,PSPR = 0)
(63,0)
(64,PSPR)
(65,cpu_suspend(0, sa1100_finish_suspend)
(66,GPSR = gpio)
(67,0)
(68,RESTORE(GPDR)
(69,RCSR_WDR)
(70,SAVE(PPAR)
(71,PPAR)
(72,PSDR)
(73,RESTORE(Ser1SDCR0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^