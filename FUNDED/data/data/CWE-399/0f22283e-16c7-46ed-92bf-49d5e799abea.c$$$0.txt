-----label-----
1
-----code-----
static struct config_group *gadgets_make(
		struct config_group *group,
		const char *name)
{
	struct gadget_info *gi;

	gi = kzalloc(sizeof(*gi), GFP_KERNEL);
	if (!gi)
		return ERR_PTR(-ENOMEM);

	config_group_init_type_name(&gi->group, name, &gadget_root_type);

	config_group_init_type_name(&gi->functions_group, "functions",
			&functions_type);
	configfs_add_default_group(&gi->functions_group, &gi->group);

	config_group_init_type_name(&gi->configs_group, "configs",
			&config_desc_type);
	configfs_add_default_group(&gi->configs_group, &gi->group);

	config_group_init_type_name(&gi->strings_group, "strings",
			&gadget_strings_strings_type);
	configfs_add_default_group(&gi->strings_group, &gi->group);

	config_group_init_type_name(&gi->os_desc_group, "os_desc",
			&os_desc_type);
	configfs_add_default_group(&gi->os_desc_group, &gi->group);

	gi->composite.bind = configfs_do_nothing;
	gi->composite.unbind = configfs_do_nothing;
	gi->composite.suspend = NULL;
	gi->composite.resume = NULL;
	gi->composite.max_speed = USB_SPEED_SUPER;

	mutex_init(&gi->lock);
	INIT_LIST_HEAD(&gi->string_list);
	INIT_LIST_HEAD(&gi->available_func);

	composite_init_dev(&gi->cdev);
	gi->cdev.desc.bLength = USB_DT_DEVICE_SIZE;
	gi->cdev.desc.bDescriptorType = USB_DT_DEVICE;
	gi->cdev.desc.bcdDevice = cpu_to_le16(get_default_bcdDevice());

	gi->composite.gadget_driver = configfs_driver_template;

	gi->composite.gadget_driver.function = kstrdup(name, GFP_KERNEL);
	gi->composite.name = gi->composite.gadget_driver.function;

	if (!gi->composite.gadget_driver.function)
		goto err;

	return &gi->group;
err:
	kfree(gi);
	return ERR_PTR(-ENOMEM);
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
7,8
7,9
8,9
10,11
10,12
13,14
13,15
15,16
15,17
18,19
18,20
18,21
18,22
18,23
18,24
18,25
18,26
18,27
18,28
18,29
18,30
18,31
18,32
18,33
18,34
18,35
18,36
18,37
18,38
18,39
18,40
18,41
18,42
18,43
18,44
18,45
18,46
18,47
18,48
18,49
19,20
20,21
20,22
21,22
23,24
23,25
26,27
27,28
27,29
28,29
30,31
30,32
30,33
31,32
33,34
34,35
35,36
36,37
38,39
40,41
40,42
41,42
42,43
44,45
45,46
45,47
46,47
48,49
49,50
51,52
52,53
52,54
52,55
52,56
53,54
55,56
56,57
56,58
57,58
60,61
62,63
63,64
65,66
66,67
66,68
66,69
66,70
67,68
69,70
70,71
70,72
71,72
75,76
76,77
78,79
79,80
79,81
79,82
80,81
82,83
83,84
83,85
84,85
87,88
88,89
88,90
89,90
92,93
93,94
93,95
93,96
93,97
94,95
96,97
97,98
97,99
98,99
102,103
103,104
105,106
106,107
106,108
106,109
107,108
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
119,120
120,121
120,122
120,123
120,124
121,122
123,124
124,125
124,126
125,126
129,130
130,131
132,133
133,134
133,135
133,136
134,135
136,137
137,138
137,139
138,139
141,142
142,143
142,144
143,144
146,147
147,148
147,149
147,150
147,151
148,149
150,151
151,152
151,153
152,153
156,157
157,158
159,160
160,161
160,162
160,163
161,162
163,164
164,165
164,166
165,166
168,169
169,170
169,171
170,171
173,174
174,175
174,176
175,176
175,177
176,177
176,178
177,178
181,182
183,184
184,185
184,186
185,186
185,187
186,187
186,188
187,188
191,192
193,194
194,195
194,196
195,196
195,197
196,197
196,198
197,198
201,202
203,204
204,205
204,206
205,206
205,207
206,207
206,208
207,208
211,212
213,214
214,215
214,216
215,216
215,217
216,217
216,218
217,218
221,222
223,224
224,225
224,226
225,226
227,228
228,229
228,230
229,230
232,233
233,234
233,235
234,235
236,237
237,238
237,239
238,239
241,242
242,243
242,244
243,244
245,246
246,247
246,248
247,248
250,251
251,252
251,253
252,253
254,255
255,256
255,257
256,257
259,260
260,261
260,262
261,262
261,263
262,263
262,264
263,264
263,265
264,265
269,270
271,272
272,273
272,274
273,274
273,275
274,275
274,276
275,276
275,277
276,277
281,282
283,284
284,285
284,286
285,286
285,287
286,287
286,288
287,288
287,289
288,289
293,294
293,295
294,295
296,297
297,298
299,300
300,301
300,302
301,302
301,303
302,303
302,304
303,304
307,308
309,310
310,311
310,312
311,312
311,313
312,313
312,314
313,314
313,315
314,315
319,320
319,321
319,322
320,321
322,323
324,325
326,327
327,328
327,329
328,329
328,330
329,330
329,331
330,331
334,335
334,336
335,336
335,337
336,337
336,338
337,338
342,343
342,344
343,344
344,345
344,346
345,346
345,347
346,347
346,348
347,348
352,353
354,355
355,356
356,357
356,358
357,358
360,361
360,362
362,363
363,364
363,365
364,365
366,367
368,369
369,370
369,371
370,371
372,373
373,374
-----nextToken-----
3,5,6,9,11,12,14,16,17,22,24,25,29,32,37,39,43,47,50,54,58,59,61,64,68,72,73,74,77,81,85,86,90,91,95,99,100,101,104,108,112,113,117,118,122,126,127,128,131,135,139,140,144,145,149,153,154,155,158,162,166,167,171,172,178,179,180,182,188,189,190,192,198,199,200,202,208,209,210,212,218,219,220,222,226,230,231,235,239,240,244,248,249,253,257,258,265,266,267,268,270,277,278,279,280,282,289,290,291,292,295,298,304,305,306,308,315,316,317,318,321,323,325,331,332,333,338,339,340,341,348,349,350,351,353,358,359,361,365,367,371,374
-----computeFrom-----
27,28
27,29
174,175
174,176
184,185
184,186
194,195
194,196
204,205
204,206
214,215
214,216
260,261
260,262
272,273
272,274
284,285
284,286
300,301
300,302
310,311
310,312
327,328
327,329
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IfStatement;UnaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;GotoStatement;Name;ReturnStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
static struct config_group *gadgets_make(		struct config_group *group,		const char *name){	struct gadget_info *gi;	gi = kzalloc(sizeof(*gi), GFP_KERNEL);	if (!gi)		return ERR_PTR(-ENOMEM);	config_group_init_type_name(&gi->group, name, &gadget_root_type);	config_group_init_type_name(&gi->functions_group, "functions",			&functions_type);	configfs_add_default_group(&gi->functions_group, &gi->group);	config_group_init_type_name(&gi->configs_group, "configs",			&config_desc_type);	configfs_add_default_group(&gi->configs_group, &gi->group);	config_group_init_type_name(&gi->strings_group, "strings",			&gadget_strings_strings_type);	configfs_add_default_group(&gi->strings_group, &gi->group);	config_group_init_type_name(&gi->os_desc_group, "os_desc",			&os_desc_type);	configfs_add_default_group(&gi->os_desc_group, &gi->group);	gi->composite.bind = configfs_do_nothing;	gi->composite.unbind = configfs_do_nothing;	gi->composite.suspend = NULL;	gi->composite.resume = NULL;	gi->composite.max_speed = USB_SPEED_SUPER;	mutex_init(&gi->lock);	INIT_LIST_HEAD(&gi->string_list);	INIT_LIST_HEAD(&gi->available_func);	composite_init_dev(&gi->cdev);	gi->cdev.desc.bLength = USB_DT_DEVICE_SIZE;	gi->cdev.desc.bDescriptorType = USB_DT_DEVICE;	gi->cdev.desc.bcdDevice = cpu_to_le16(get_default_bcdDevice());	gi->composite.gadget_driver = configfs_driver_template;	gi->composite.gadget_driver.function = kstrdup(name, GFP_KERNEL);	gi->composite.name = gi->composite.gadget_driver.function;	if (!gi->composite.gadget_driver.function)		goto err;	return &gi->group;err:	kfree(gi);	return ERR_PTR(-ENOMEM);}
static struct config_group
config_group
*gadgets_make(		struct config_group *group,		const char *name)
*
gadgets_make
struct config_group *group
struct config_group
config_group
*group
*
group
const char *name
const char
*name
*
name
{	struct gadget_info *gi;	gi = kzalloc(sizeof(*gi), GFP_KERNEL);	if (!gi)		return ERR_PTR(-ENOMEM);	config_group_init_type_name(&gi->group, name, &gadget_root_type);	config_group_init_type_name(&gi->functions_group, "functions",			&functions_type);	configfs_add_default_group(&gi->functions_group, &gi->group);	config_group_init_type_name(&gi->configs_group, "configs",			&config_desc_type);	configfs_add_default_group(&gi->configs_group, &gi->group);	config_group_init_type_name(&gi->strings_group, "strings",			&gadget_strings_strings_type);	configfs_add_default_group(&gi->strings_group, &gi->group);	config_group_init_type_name(&gi->os_desc_group, "os_desc",			&os_desc_type);	configfs_add_default_group(&gi->os_desc_group, &gi->group);	gi->composite.bind = configfs_do_nothing;	gi->composite.unbind = configfs_do_nothing;	gi->composite.suspend = NULL;	gi->composite.resume = NULL;	gi->composite.max_speed = USB_SPEED_SUPER;	mutex_init(&gi->lock);	INIT_LIST_HEAD(&gi->string_list);	INIT_LIST_HEAD(&gi->available_func);	composite_init_dev(&gi->cdev);	gi->cdev.desc.bLength = USB_DT_DEVICE_SIZE;	gi->cdev.desc.bDescriptorType = USB_DT_DEVICE;	gi->cdev.desc.bcdDevice = cpu_to_le16(get_default_bcdDevice());	gi->composite.gadget_driver = configfs_driver_template;	gi->composite.gadget_driver.function = kstrdup(name, GFP_KERNEL);	gi->composite.name = gi->composite.gadget_driver.function;	if (!gi->composite.gadget_driver.function)		goto err;	return &gi->group;err:	kfree(gi);	return ERR_PTR(-ENOMEM);}
struct gadget_info *gi;
struct gadget_info *gi;
struct gadget_info
gadget_info
*gi
*
gi
gi = kzalloc(sizeof(*gi), GFP_KERNEL);
gi = kzalloc(sizeof(*gi), GFP_KERNEL)
gi
gi
kzalloc(sizeof(*gi), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*gi)
(*gi)
*gi
gi
gi
GFP_KERNEL
GFP_KERNEL
if (!gi)		return ERR_PTR(-ENOMEM);
!gi
gi
gi
return ERR_PTR(-ENOMEM);
ERR_PTR(-ENOMEM)
ERR_PTR
ERR_PTR
-ENOMEM
ENOMEM
ENOMEM
config_group_init_type_name(&gi->group, name, &gadget_root_type);
config_group_init_type_name(&gi->group, name, &gadget_root_type)
config_group_init_type_name
config_group_init_type_name
&gi->group
gi->group
gi
gi
group
name
name
&gadget_root_type
gadget_root_type
gadget_root_type
config_group_init_type_name(&gi->functions_group, "functions",			&functions_type);
config_group_init_type_name(&gi->functions_group, "functions",			&functions_type)
config_group_init_type_name
config_group_init_type_name
&gi->functions_group
gi->functions_group
gi
gi
functions_group
"functions"
&functions_type
functions_type
functions_type
configfs_add_default_group(&gi->functions_group, &gi->group);
configfs_add_default_group(&gi->functions_group, &gi->group)
configfs_add_default_group
configfs_add_default_group
&gi->functions_group
gi->functions_group
gi
gi
functions_group
&gi->group
gi->group
gi
gi
group
config_group_init_type_name(&gi->configs_group, "configs",			&config_desc_type);
config_group_init_type_name(&gi->configs_group, "configs",			&config_desc_type)
config_group_init_type_name
config_group_init_type_name
&gi->configs_group
gi->configs_group
gi
gi
configs_group
"configs"
&config_desc_type
config_desc_type
config_desc_type
configfs_add_default_group(&gi->configs_group, &gi->group);
configfs_add_default_group(&gi->configs_group, &gi->group)
configfs_add_default_group
configfs_add_default_group
&gi->configs_group
gi->configs_group
gi
gi
configs_group
&gi->group
gi->group
gi
gi
group
config_group_init_type_name(&gi->strings_group, "strings",			&gadget_strings_strings_type);
config_group_init_type_name(&gi->strings_group, "strings",			&gadget_strings_strings_type)
config_group_init_type_name
config_group_init_type_name
&gi->strings_group
gi->strings_group
gi
gi
strings_group
"strings"
&gadget_strings_strings_type
gadget_strings_strings_type
gadget_strings_strings_type
configfs_add_default_group(&gi->strings_group, &gi->group);
configfs_add_default_group(&gi->strings_group, &gi->group)
configfs_add_default_group
configfs_add_default_group
&gi->strings_group
gi->strings_group
gi
gi
strings_group
&gi->group
gi->group
gi
gi
group
config_group_init_type_name(&gi->os_desc_group, "os_desc",			&os_desc_type);
config_group_init_type_name(&gi->os_desc_group, "os_desc",			&os_desc_type)
config_group_init_type_name
config_group_init_type_name
&gi->os_desc_group
gi->os_desc_group
gi
gi
os_desc_group
"os_desc"
&os_desc_type
os_desc_type
os_desc_type
configfs_add_default_group(&gi->os_desc_group, &gi->group);
configfs_add_default_group(&gi->os_desc_group, &gi->group)
configfs_add_default_group
configfs_add_default_group
&gi->os_desc_group
gi->os_desc_group
gi
gi
os_desc_group
&gi->group
gi->group
gi
gi
group
gi->composite.bind = configfs_do_nothing;
gi->composite.bind = configfs_do_nothing
gi->composite.bind
gi->composite
gi
gi
composite
bind
configfs_do_nothing
configfs_do_nothing
gi->composite.unbind = configfs_do_nothing;
gi->composite.unbind = configfs_do_nothing
gi->composite.unbind
gi->composite
gi
gi
composite
unbind
configfs_do_nothing
configfs_do_nothing
gi->composite.suspend = NULL;
gi->composite.suspend = NULL
gi->composite.suspend
gi->composite
gi
gi
composite
suspend
NULL
NULL
gi->composite.resume = NULL;
gi->composite.resume = NULL
gi->composite.resume
gi->composite
gi
gi
composite
resume
NULL
NULL
gi->composite.max_speed = USB_SPEED_SUPER;
gi->composite.max_speed = USB_SPEED_SUPER
gi->composite.max_speed
gi->composite
gi
gi
composite
max_speed
USB_SPEED_SUPER
USB_SPEED_SUPER
mutex_init(&gi->lock);
mutex_init(&gi->lock)
mutex_init
mutex_init
&gi->lock
gi->lock
gi
gi
lock
INIT_LIST_HEAD(&gi->string_list);
INIT_LIST_HEAD(&gi->string_list)
INIT_LIST_HEAD
INIT_LIST_HEAD
&gi->string_list
gi->string_list
gi
gi
string_list
INIT_LIST_HEAD(&gi->available_func);
INIT_LIST_HEAD(&gi->available_func)
INIT_LIST_HEAD
INIT_LIST_HEAD
&gi->available_func
gi->available_func
gi
gi
available_func
composite_init_dev(&gi->cdev);
composite_init_dev(&gi->cdev)
composite_init_dev
composite_init_dev
&gi->cdev
gi->cdev
gi
gi
cdev
gi->cdev.desc.bLength = USB_DT_DEVICE_SIZE;
gi->cdev.desc.bLength = USB_DT_DEVICE_SIZE
gi->cdev.desc.bLength
gi->cdev.desc
gi->cdev
gi
gi
cdev
desc
bLength
USB_DT_DEVICE_SIZE
USB_DT_DEVICE_SIZE
gi->cdev.desc.bDescriptorType = USB_DT_DEVICE;
gi->cdev.desc.bDescriptorType = USB_DT_DEVICE
gi->cdev.desc.bDescriptorType
gi->cdev.desc
gi->cdev
gi
gi
cdev
desc
bDescriptorType
USB_DT_DEVICE
USB_DT_DEVICE
gi->cdev.desc.bcdDevice = cpu_to_le16(get_default_bcdDevice());
gi->cdev.desc.bcdDevice = cpu_to_le16(get_default_bcdDevice())
gi->cdev.desc.bcdDevice
gi->cdev.desc
gi->cdev
gi
gi
cdev
desc
bcdDevice
cpu_to_le16(get_default_bcdDevice())
cpu_to_le16
cpu_to_le16
get_default_bcdDevice()
get_default_bcdDevice
get_default_bcdDevice
gi->composite.gadget_driver = configfs_driver_template;
gi->composite.gadget_driver = configfs_driver_template
gi->composite.gadget_driver
gi->composite
gi
gi
composite
gadget_driver
configfs_driver_template
configfs_driver_template
gi->composite.gadget_driver.function = kstrdup(name, GFP_KERNEL);
gi->composite.gadget_driver.function = kstrdup(name, GFP_KERNEL)
gi->composite.gadget_driver.function
gi->composite.gadget_driver
gi->composite
gi
gi
composite
gadget_driver
function
kstrdup(name, GFP_KERNEL)
kstrdup
kstrdup
name
name
GFP_KERNEL
GFP_KERNEL
gi->composite.name = gi->composite.gadget_driver.function;
gi->composite.name = gi->composite.gadget_driver.function
gi->composite.name
gi->composite
gi
gi
composite
name
gi->composite.gadget_driver.function
gi->composite.gadget_driver
gi->composite
gi
gi
composite
gadget_driver
function
if (!gi->composite.gadget_driver.function)		goto err;
!gi->composite.gadget_driver.function
gi->composite.gadget_driver.function
gi->composite.gadget_driver
gi->composite
gi
gi
composite
gadget_driver
function
goto err;
err
return &gi->group;
&gi->group
gi->group
gi
gi
group
err:	kfree(gi);
err
kfree(gi);
kfree(gi)
kfree
kfree
gi
gi
return ERR_PTR(-ENOMEM);
ERR_PTR(-ENOMEM)
ERR_PTR
ERR_PTR
-ENOMEM
ENOMEM
ENOMEM
-----joern-----
(66,70,0)
(229,212,0)
(171,152,0)
(127,176,0)
(50,196,0)
(45,18,0)
(206,227,0)
(54,37,0)
(161,19,0)
(148,3,0)
(133,194,0)
(82,61,0)
(227,52,0)
(147,200,0)
(93,211,0)
(72,62,0)
(187,128,0)
(92,141,0)
(82,141,0)
(9,91,0)
(99,76,0)
(95,141,0)
(182,74,0)
(220,229,0)
(145,117,0)
(216,193,0)
(84,121,0)
(31,141,0)
(95,189,0)
(97,89,0)
(216,50,0)
(215,133,0)
(121,84,0)
(34,172,0)
(8,55,0)
(227,185,0)
(85,156,0)
(63,123,0)
(43,194,0)
(178,26,0)
(43,88,0)
(92,177,0)
(5,210,0)
(55,141,0)
(35,220,0)
(29,195,0)
(110,15,0)
(112,205,0)
(83,82,0)
(20,196,0)
(150,68,0)
(41,212,0)
(106,68,0)
(101,147,0)
(62,141,0)
(187,141,0)
(172,117,0)
(151,35,0)
(207,217,0)
(217,141,0)
(102,176,0)
(73,194,0)
(144,16,0)
(133,26,0)
(228,76,0)
(133,52,0)
(21,61,0)
(75,3,0)
(17,194,0)
(220,35,0)
(193,216,0)
(136,141,0)
(133,128,0)
(55,52,0)
(97,194,0)
(206,62,0)
(172,141,0)
(154,111,0)
(155,163,0)
(80,1,0)
(30,3,0)
(179,96,0)
(178,76,0)
(166,56,0)
(84,194,0)
(104,0,0)
(89,19,0)
(61,21,0)
(196,50,0)
(192,22,0)
(173,71,0)
(64,62,0)
(146,103,0)
(133,47,0)
(188,26,0)
(94,141,0)
(140,42,0)
(135,146,0)
(14,184,0)
(107,194,0)
(214,133,0)
(163,221,0)
(185,186,0)
(24,184,0)
(89,97,0)
(180,217,0)
(223,189,0)
(139,194,0)
(115,82,0)
(35,141,0)
(12,180,0)
(227,128,0)
(118,194,0)
(69,55,0)
(71,198,0)
(124,92,0)
(26,50,0)
(133,185,0)
(37,131,0)
(229,194,0)
(178,1,0)
(133,149,0)
(193,1,0)
(91,9,0)
(202,152,0)
(184,141,0)
(147,101,0)
(191,194,0)
(70,194,0)
(128,1,0)
(56,9,0)
(227,223,0)
(52,55,0)
(65,149,0)
(47,31,0)
(6,41,0)
(227,22,0)
(113,141,0)
(174,21,0)
(32,41,0)
(27,221,0)
(196,38,0)
(227,104,0)
(81,0,0)
(10,163,0)
(133,87,0)
(22,70,0)
(141,68,0)
(40,184,0)
(0,104,0)
(127,50,0)
(0,141,0)
(223,46,0)
(205,156,0)
(114,130,0)
(140,101,0)
(63,211,0)
(16,150,0)
(189,223,0)
(33,22,0)
(17,40,0)
(198,71,0)
(85,177,0)
(158,187,0)
(113,121,0)
(131,15,0)
(200,141,0)
(131,37,0)
(96,194,0)
(186,194,0)
(12,194,0)
(213,42,0)
(211,63,0)
(10,130,0)
(217,180,0)
(125,194,0)
(123,63,0)
(1,194,0)
(25,91,0)
(78,217,0)
(22,33,0)
(130,141,0)
(3,148,0)
(77,131,0)
(67,223,0)
(211,141,0)
(152,141,0)
(88,153,0)
(33,141,0)
(3,141,0)
(61,82,0)
(21,194,0)
(139,141,0)
(138,130,0)
(169,139,0)
(216,125,0)
(225,31,0)
(185,152,0)
(31,47,0)
(105,42,0)
(156,205,0)
(218,211,0)
(205,141,0)
(19,141,0)
(51,194,0)
(176,1,0)
(127,57,0)
(53,166,0)
(165,12,0)
(23,136,0)
(84,38,0)
(133,22,0)
(47,73,0)
(21,120,0)
(183,186,0)
(214,74,0)
(176,127,0)
(101,194,0)
(111,141,0)
(227,149,0)
(170,118,0)
(130,10,0)
(210,141,0)
(76,141,0)
(134,189,0)
(12,165,0)
(142,199,0)
(39,187,0)
(168,136,0)
(52,199,0)
(226,103,0)
(58,0,0)
(163,194,0)
(226,194,0)
(160,113,0)
(153,88,0)
(159,205,0)
(17,44,0)
(15,141,0)
(11,148,0)
(117,172,0)
(136,176,0)
(133,223,0)
(36,84,0)
(227,194,0)
(42,141,0)
(7,200,0)
(210,87,0)
(152,185,0)
(190,15,0)
(146,141,0)
(87,118,0)
(227,37,0)
(193,111,0)
(117,149,0)
(129,95,0)
(212,229,0)
(41,141,0)
(219,127,0)
(4,84,0)
(88,43,0)
(68,141,0)
(44,18,0)
(148,11,0)
(9,56,0)
(18,44,0)
(13,172,0)
(195,141,0)
(76,178,0)
(215,28,0)
(74,214,0)
(79,9,0)
(197,185,0)
(167,73,0)
(162,128,0)
(108,104,0)
(133,37,0)
(227,47,0)
(9,194,0)
(2,46,0)
(48,193,0)
(42,140,0)
(40,17,0)
(116,12,0)
(149,117,0)
(208,19,0)
(62,206,0)
(128,187,0)
(111,193,0)
(198,28,0)
(101,140,0)
(141,194,0)
(86,165,0)
(229,220,0)
(163,10,0)
(103,226,0)
(68,150,0)
(11,194,0)
(57,127,0)
(85,194,0)
(56,166,0)
(123,194,0)
(37,96,0)
(150,16,0)
(176,136,0)
(181,35,0)
(103,146,0)
(50,194,0)
(227,26,0)
(49,33,0)
(215,227,0)
(133,104,0)
(59,92,0)
(175,146,0)
(222,210,0)
(122,166,0)
(157,18,0)
(224,33,0)
(87,210,0)
(137,194,0)
(212,41,0)
(143,200,0)
(26,178,0)
(184,40,0)
(204,4,0)
(209,95,0)
(199,194,0)
(132,196,0)
(166,141,0)
(98,52,0)
(126,113,0)
(201,120,0)
(44,17,0)
(125,216,0)
(180,12,0)
(156,85,0)
(60,31,0)
(84,4,0)
(109,178,0)
(177,92,0)
(100,216,0)
(149,43,0)
(119,111,0)
(200,147,0)
(18,141,0)
(90,47,0)
(221,163,0)
(104,125,0)
(164,87,0)
(46,194,0)
(120,21,0)
(177,85,0)
(189,95,0)
(19,89,0)
(121,113,0)
(227,87,0)
(15,131,0)
(180,217,1)
(227,52,1)
(104,108,1)
(193,1,1)
(227,22,1)
(106,150,1)
(35,141,1)
(134,95,1)
(176,136,1)
(104,0,1)
(3,75,1)
(183,185,1)
(11,148,1)
(41,141,1)
(21,120,1)
(45,157,1)
(223,67,1)
(103,146,1)
(227,185,1)
(136,23,1)
(91,25,1)
(26,188,1)
(195,29,1)
(71,173,1)
(176,102,1)
(10,130,1)
(130,141,1)
(222,70,1)
(219,176,1)
(64,72,1)
(97,89,1)
(152,141,1)
(225,60,1)
(120,201,1)
(133,47,1)
(18,45,1)
(184,14,1)
(175,135,1)
(157,12,1)
(50,196,1)
(100,193,1)
(81,50,1)
(121,113,1)
(102,136,1)
(61,82,1)
(14,24,1)
(227,37,1)
(165,86,1)
(178,76,1)
(218,93,1)
(154,119,1)
(8,186,1)
(33,141,1)
(37,131,1)
(133,185,1)
(203,57,1)
(211,141,1)
(187,39,1)
(227,87,1)
(47,90,1)
(68,150,1)
(133,149,1)
(18,141,1)
(74,182,1)
(105,9,1)
(77,15,1)
(23,168,1)
(99,1,1)
(62,64,1)
(110,190,1)
(142,52,1)
(143,7,1)
(90,31,1)
(196,38,1)
(197,152,1)
(63,211,1)
(189,95,1)
(205,159,1)
(139,169,1)
(73,167,1)
(28,198,1)
(153,149,1)
(187,141,1)
(227,149,1)
(221,27,1)
(210,5,1)
(56,166,1)
(227,26,1)
(17,40,1)
(54,131,1)
(88,153,1)
(68,106,1)
(87,164,1)
(210,141,1)
(24,44,1)
(131,77,1)
(84,38,1)
(192,33,1)
(182,139,1)
(145,172,1)
(151,212,1)
(205,141,1)
(216,100,1)
(176,1,1)
(159,112,1)
(177,92,1)
(87,210,1)
(33,224,1)
(130,138,1)
(22,192,1)
(204,36,1)
(199,142,1)
(200,143,1)
(127,219,1)
(114,17,1)
(133,214,1)
(149,65,1)
(164,210,1)
(85,177,1)
(82,141,1)
(133,22,1)
(161,11,1)
(190,46,1)
(141,68,1)
(229,212,1)
(17,44,1)
(66,22,1)
(215,227,1)
(178,1,1)
(65,117,1)
(19,141,1)
(189,134,1)
(170,87,1)
(31,141,1)
(160,126,1)
(163,221,1)
(4,204,1)
(59,21,1)
(67,189,1)
(7,140,1)
(139,141,1)
(0,58,1)
(41,6,1)
(214,74,1)
(185,152,1)
(119,104,1)
(113,141,1)
(2,223,1)
(172,34,1)
(5,222,1)
(75,30,1)
(146,175,1)
(200,141,1)
(215,28,1)
(21,61,1)
(20,132,1)
(95,141,1)
(173,195,1)
(195,141,1)
(55,69,1)
(201,174,1)
(22,33,1)
(215,133,1)
(60,85,1)
(25,79,1)
(152,202,1)
(163,10,1)
(57,127,1)
(224,49,1)
(213,105,1)
(188,178,1)
(172,141,1)
(49,73,1)
(132,26,1)
(179,37,1)
(212,41,1)
(147,200,1)
(226,103,1)
(40,184,1)
(146,141,1)
(52,55,1)
(27,155,1)
(127,176,1)
(208,161,1)
(46,2,1)
(44,18,1)
(135,97,1)
(115,83,1)
(42,141,1)
(34,13,1)
(158,43,1)
(227,104,1)
(19,208,1)
(84,4,1)
(128,187,1)
(12,165,1)
(209,226,1)
(150,16,1)
(196,20,1)
(133,104,1)
(85,156,1)
(133,26,1)
(144,94,1)
(131,15,1)
(207,78,1)
(148,3,1)
(193,111,1)
(220,35,1)
(62,141,1)
(166,122,1)
(13,96,1)
(127,50,1)
(83,229,1)
(113,160,1)
(171,118,1)
(178,109,1)
(95,129,1)
(138,114,1)
(133,87,1)
(101,140,1)
(211,218,1)
(39,158,1)
(118,170,1)
(184,141,1)
(168,125,1)
(93,199,1)
(76,141,1)
(76,228,1)
(174,61,1)
(52,98,1)
(53,84,1)
(42,213,1)
(37,54,1)
(6,32,1)
(55,141,1)
(82,115,1)
(70,66,1)
(117,172,1)
(43,88,1)
(227,223,1)
(185,197,1)
(47,31,1)
(36,121,1)
(133,52,1)
(117,145,1)
(123,63,1)
(128,162,1)
(227,47,1)
(227,128,1)
(35,181,1)
(92,124,1)
(32,163,1)
(181,151,1)
(111,154,1)
(79,56,1)
(29,141,1)
(108,0,1)
(30,123,1)
(217,207,1)
(31,225,1)
(217,141,1)
(111,141,1)
(193,48,1)
(89,19,1)
(227,206,1)
(216,193,1)
(69,8,1)
(198,71,1)
(26,178,1)
(228,99,1)
(86,116,1)
(15,110,1)
(48,111,1)
(166,141,1)
(3,141,1)
(78,101,1)
(149,117,1)
(72,57,1)
(223,189,1)
(206,62,1)
(112,177,1)
(116,180,1)
(216,50,1)
(122,53,1)
(162,187,1)
(12,180,1)
(167,47,1)
(125,216,1)
(133,223,1)
(84,121,1)
(9,91,1)
(1,80,1)
(96,179,1)
(9,56,1)
(101,147,1)
(58,81,1)
(126,195,1)
(129,209,1)
(98,55,1)
(15,141,1)
(229,220,1)
(109,76,1)
(80,128,1)
(169,203,1)
(0,141,1)
(140,42,1)
(16,144,1)
(92,141,1)
(186,183,1)
(202,171,1)
(155,10,1)
(136,141,1)
(133,37,1)
(156,205,1)
(133,128,1)
(124,59,1)
(108,195,2)
(117,172,2)
(73,195,2)
(133,47,2)
(211,141,2)
(217,195,2)
(220,195,2)
(111,195,2)
(130,141,2)
(42,195,2)
(157,195,2)
(216,195,2)
(85,195,2)
(63,211,2)
(56,195,2)
(86,195,2)
(43,88,2)
(72,57,2)
(44,195,2)
(45,195,2)
(12,180,2)
(133,104,2)
(15,141,2)
(227,104,2)
(92,195,2)
(119,195,2)
(136,195,2)
(172,141,2)
(95,141,2)
(210,195,2)
(43,195,2)
(8,195,2)
(181,195,2)
(176,1,2)
(123,195,2)
(227,57,2)
(140,42,2)
(26,195,2)
(124,195,2)
(84,121,2)
(163,195,2)
(215,28,2)
(57,195,2)
(14,195,2)
(27,195,2)
(61,82,2)
(189,195,2)
(55,141,2)
(22,33,2)
(133,52,2)
(152,141,2)
(53,195,2)
(87,210,2)
(227,26,2)
(33,195,2)
(110,195,2)
(201,195,2)
(162,195,2)
(223,189,2)
(176,136,2)
(64,57,2)
(17,44,2)
(25,195,2)
(19,141,2)
(197,195,2)
(118,195,2)
(133,26,2)
(172,195,2)
(52,195,2)
(149,117,2)
(26,178,2)
(56,166,2)
(3,141,2)
(88,195,2)
(35,195,2)
(57,127,2)
(76,141,2)
(227,22,2)
(62,141,2)
(161,195,2)
(21,61,2)
(116,195,2)
(127,195,2)
(128,195,2)
(23,195,2)
(227,37,2)
(174,195,2)
(101,140,2)
(34,195,2)
(193,195,2)
(177,195,2)
(82,195,2)
(13,195,2)
(89,195,2)
(31,195,2)
(173,195,2)
(141,68,2)
(65,195,2)
(219,195,2)
(109,195,2)
(190,195,2)
(186,195,2)
(42,141,2)
(133,87,2)
(36,195,2)
(170,195,2)
(187,141,2)
(4,195,2)
(133,57,2)
(130,195,2)
(104,195,2)
(198,195,2)
(195,141,2)
(117,195,2)
(222,195,2)
(102,195,2)
(156,205,2)
(68,150,2)
(227,185,2)
(226,103,2)
(47,31,2)
(187,195,2)
(193,1,2)
(84,4,2)
(212,195,2)
(48,195,2)
(178,76,2)
(126,195,2)
(22,195,2)
(31,141,2)
(167,195,2)
(71,195,2)
(185,152,2)
(88,153,2)
(180,217,2)
(196,195,2)
(128,187,2)
(183,195,2)
(180,195,2)
(95,195,2)
(203,57,2)
(40,184,2)
(200,195,2)
(228,195,2)
(80,195,2)
(15,195,2)
(139,57,2)
(122,195,2)
(103,195,2)
(134,195,2)
(149,195,2)
(120,195,2)
(210,141,2)
(188,195,2)
(133,128,2)
(9,56,2)
(113,141,2)
(105,195,2)
(184,195,2)
(207,195,2)
(225,195,2)
(100,195,2)
(54,195,2)
(12,195,2)
(33,141,2)
(97,89,2)
(0,195,2)
(81,195,2)
(184,141,2)
(147,200,2)
(115,195,2)
(220,35,2)
(179,195,2)
(133,149,2)
(165,195,2)
(152,195,2)
(151,195,2)
(37,131,2)
(153,195,2)
(154,195,2)
(63,195,2)
(205,141,2)
(178,195,2)
(112,195,2)
(78,195,2)
(142,195,2)
(30,195,2)
(0,141,2)
(127,50,2)
(37,195,2)
(18,141,2)
(2,195,2)
(35,141,2)
(204,195,2)
(199,195,2)
(39,195,2)
(218,195,2)
(21,195,2)
(138,195,2)
(182,57,2)
(111,141,2)
(28,195,2)
(146,195,2)
(79,195,2)
(85,177,2)
(67,195,2)
(227,223,2)
(148,3,2)
(135,195,2)
(200,141,2)
(193,111,2)
(93,195,2)
(221,195,2)
(198,71,2)
(189,95,2)
(66,195,2)
(17,195,2)
(69,195,2)
(163,221,2)
(58,195,2)
(211,195,2)
(10,130,2)
(5,195,2)
(121,113,2)
(216,193,2)
(61,195,2)
(40,195,2)
(83,195,2)
(212,41,2)
(96,195,2)
(129,195,2)
(121,195,2)
(133,185,2)
(229,212,2)
(178,1,2)
(206,57,2)
(166,141,2)
(192,195,2)
(19,195,2)
(171,195,2)
(215,227,2)
(185,195,2)
(98,195,2)
(24,195,2)
(91,195,2)
(176,195,2)
(150,16,2)
(145,195,2)
(208,195,2)
(11,148,2)
(196,38,2)
(217,141,2)
(143,195,2)
(132,195,2)
(125,216,2)
(55,195,2)
(101,195,2)
(209,195,2)
(1,195,2)
(84,38,2)
(216,50,2)
(62,57,2)
(17,40,2)
(214,74,2)
(18,195,2)
(147,195,2)
(52,55,2)
(87,195,2)
(164,195,2)
(32,195,2)
(21,120,2)
(156,195,2)
(92,141,2)
(12,165,2)
(125,195,2)
(104,0,2)
(101,147,2)
(77,195,2)
(224,195,2)
(158,195,2)
(84,195,2)
(133,22,2)
(11,195,2)
(59,195,2)
(82,141,2)
(44,18,2)
(159,195,2)
(41,195,2)
(113,195,2)
(215,133,2)
(76,195,2)
(90,195,2)
(146,141,2)
(3,195,2)
(213,195,2)
(97,195,2)
(227,47,2)
(223,195,2)
(7,195,2)
(9,195,2)
(140,195,2)
(163,10,2)
(49,195,2)
(47,195,2)
(46,195,2)
(175,195,2)
(131,195,2)
(139,141,2)
(10,195,2)
(103,146,2)
(205,195,2)
(227,87,2)
(133,223,2)
(202,195,2)
(227,52,2)
(74,57,2)
(99,195,2)
(50,196,2)
(227,128,2)
(75,195,2)
(133,37,2)
(177,92,2)
(155,195,2)
(226,195,2)
(227,149,2)
(148,195,2)
(6,195,2)
(229,220,2)
(50,195,2)
(229,195,2)
(169,57,2)
(206,62,2)
(20,195,2)
(60,195,2)
(168,195,2)
(70,195,2)
(9,91,2)
(127,176,2)
(160,195,2)
(89,19,2)
(123,63,2)
(41,141,2)
(136,141,2)
(131,15,2)
(114,195,2)
(85,156,2)
(214,57,2)
(166,195,2)
-----------------------------------
(0,gi->composite)
(1,gi->composite.gadget_driver = configfs_driver_template)
(2,USB_DT_DEVICE_SIZE)
(3,gi->string_list)
(4,&gadget_root_type)
(5,composite)
(6,strings_group)
(7,gi)
(8,gi)
(9,config_group_init_type_name(&gi->functions_group, "functions",\n\\n\\t\\t\\t&functions_type)
(10,&gi->strings_group)
(11,INIT_LIST_HEAD(&gi->string_list)
(12,config_group_init_type_name(&gi->configs_group, "configs",\n\\n\\t\\t\\t&config_desc_type)
(13,gi)
(14,group)
(15,gi->cdev)
(16,*gi)
(17,configfs_add_default_group(&gi->configs_group, &gi->group)
(18,gi->configs_group)
(19,gi->available_func)
(20,GFP_KERNEL)
(21,config_group_init_type_name(&gi->os_desc_group, "os_desc",\n\\n\\t\\t\\t&os_desc_type)
(22,gi->composite.unbind)
(23,composite)
(24,gi)
(25,functions_type)
(26,gi->composite.gadget_driver.function)
(27,gadget_strings_strings_type)
(28,return ERR_PTR(-ENOMEM)
(29,gi)
(30,gi)
(31,gi->composite)
(32,gi)
(33,gi->composite)
(34,cdev)
(35,gi->group)
(36,name)
(37,gi->cdev.desc.bDescriptorType)
(38,const char *name)
(39,composite)
(40,&gi->group)
(41,gi->strings_group)
(42,gi->functions_group)
(43,gi->cdev.desc.bcdDevice = cpu_to_le16(get_default_bcdDevice()
(44,&gi->configs_group)
(45,configs_group)
(46,gi->cdev.desc.bLength = USB_DT_DEVICE_SIZE)
(47,gi->composite.bind)
(48,gadget_driver)
(49,gi)
(50,gi->composite.gadget_driver.function = kstrdup(name, GFP_KERNEL)
(51,if (!gi->composite.gadget_driver.function)
(52,gi->composite.max_speed)
(53,gi)
(54,bDescriptorType)
(55,gi->composite)
(56,&gi->functions_group)
(57,!gi->composite.gadget_driver.function)
(58,composite)
(59,gi)
(60,gi)
(61,&gi->os_desc_group)
(62,gi->group)
(63,&gi->lock)
(64,group)
(65,bcdDevice)
(66,configfs_do_nothing)
(67,bLength)
(68,kzalloc(sizeof(*gi)
(69,composite)
(70,gi->composite.unbind = configfs_do_nothing)
(71,-ENOMEM)
(72,gi)
(73,gi->composite.bind = configfs_do_nothing)
(74,-ENOMEM)
(75,string_list)
(76,gi->composite)
(77,desc)
(78,gi)
(79,"functions")
(80,configfs_driver_template)
(81,gi)
(82,gi->os_desc_group)
(83,gi)
(84,config_group_init_type_name(&gi->group, name, &gadget_root_type)
(85,configfs_add_default_group(&gi->os_desc_group, &gi->group)
(86,config_desc_type)
(87,gi->composite.suspend)
(88,cpu_to_le16(get_default_bcdDevice()
(89,&gi->available_func)
(90,bind)
(91,&functions_type)
(92,gi->os_desc_group)
(93,gi)
(94,gi)
(95,gi->cdev)
(96,gi->cdev.desc.bDescriptorType = USB_DT_DEVICE)
(97,INIT_LIST_HEAD(&gi->available_func)
(98,max_speed)
(99,gi)
(100,function)
(101,configfs_add_default_group(&gi->functions_group, &gi->group)
(102,gadget_driver)
(103,&gi->cdev)
(104,gi->composite.name)
(105,gi)
(106,GFP_KERNEL)
(107,gi)
(108,name)
(109,gadget_driver)
(110,cdev)
(111,gi->composite)
(112,gi)
(113,gi->group)
(114,gi)
(115,os_desc_group)
(116,"configs")
(117,gi->cdev.desc)
(118,gi->composite.suspend = NULL)
(119,gi)
(120,&os_desc_type)
(121,&gi->group)
(122,functions_group)
(123,mutex_init(&gi->lock)
(124,os_desc_group)
(125,gi->composite.name = gi->composite.gadget_driver.function)
(126,gi)
(127,gi->composite.gadget_driver.function)
(128,gi->composite.gadget_driver)
(129,cdev)
(130,gi->strings_group)
(131,gi->cdev.desc)
(132,name)
(133,return ERR_PTR(-ENOMEM)
(134,desc)
(135,gi)
(136,gi->composite)
(137,err:)
(138,strings_group)
(139,kfree(gi)
(140,&gi->functions_group)
(141,gi = kzalloc(sizeof(*gi)
(142,USB_SPEED_SUPER)
(143,group)
(144,gi)
(145,desc)
(146,gi->cdev)
(147,&gi->group)
(148,&gi->string_list)
(149,gi->cdev.desc.bcdDevice)
(150,sizeof(*gi)
(151,gi)
(152,gi->composite)
(153,get_default_bcdDevice()
(154,composite)
(155,"strings")
(156,&gi->group)
(157,gi)
(158,gi)
(159,group)
(160,group)
(161,gi)
(162,gadget_driver)
(163,config_group_init_type_name(&gi->strings_group, "strings",\n\\n\\t\\t\\t&gadget_strings_strings_type)
(164,suspend)
(165,&config_desc_type)
(166,gi->functions_group)
(167,configfs_do_nothing)
(168,gi)
(169,gi)
(170,NULL)
(171,gi)
(172,gi->cdev)
(173,ENOMEM)
(174,"os_desc")
(175,cdev)
(176,gi->composite.gadget_driver)
(177,&gi->os_desc_group)
(178,gi->composite.gadget_driver)
(179,USB_DT_DEVICE)
(180,&gi->configs_group)
(181,group)
(182,ENOMEM)
(183,NULL)
(184,gi->group)
(185,gi->composite.resume)
(186,gi->composite.resume = NULL)
(187,gi->composite)
(188,function)
(189,gi->cdev.desc)
(190,gi)
(191,if (!gi)
(192,unbind)
(193,gi->composite.gadget_driver)
(194,)
(195,!gi)
(196,kstrdup(name, GFP_KERNEL)
(197,resume)
(198,ERR_PTR(-ENOMEM)
(199,gi->composite.max_speed = USB_SPEED_SUPER)
(200,gi->group)
(201,os_desc_type)
(202,composite)
(203,goto err;)
(204,gadget_root_type)
(205,gi->group)
(206,&gi->group)
(207,configs_group)
(208,available_func)
(209,gi)
(210,gi->composite)
(211,gi->lock)
(212,&gi->strings_group)
(213,functions_group)
(214,ERR_PTR(-ENOMEM)
(215,RET)
(216,gi->composite.gadget_driver.function)
(217,gi->configs_group)
(218,lock)
(219,function)
(220,&gi->group)
(221,&gadget_strings_strings_type)
(222,gi)
(223,gi->cdev.desc.bLength)
(224,composite)
(225,composite)
(226,composite_init_dev(&gi->cdev)
(227,return &gi->group;)
(228,composite)
(229,configfs_add_default_group(&gi->strings_group, &gi->group)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^