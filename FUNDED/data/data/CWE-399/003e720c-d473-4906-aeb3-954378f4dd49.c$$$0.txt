-----label-----
1
-----code-----
static int max77686_i2c_probe(struct i2c_client *i2c,
			      const struct i2c_device_id *id)
{
	struct max77686_dev *max77686 = NULL;
	struct max77686_platform_data *pdata = dev_get_platdata(&i2c->dev);
	unsigned int data;
	int ret = 0;

	if (i2c->dev.of_node)
		pdata = max77686_i2c_parse_dt_pdata(&i2c->dev);

	if (!pdata) {
		dev_err(&i2c->dev, "No platform data found.\n");
		return -EIO;
	}

	max77686 = devm_kzalloc(&i2c->dev,
				sizeof(struct max77686_dev), GFP_KERNEL);
	if (max77686 == NULL)
		return -ENOMEM;

	i2c_set_clientdata(i2c, max77686);
	max77686->dev = &i2c->dev;
	max77686->i2c = i2c;
	max77686->type = id->driver_data;

	max77686->wakeup = pdata->wakeup;
	max77686->irq_gpio = pdata->irq_gpio;
	max77686->irq = i2c->irq;

	max77686->regmap = regmap_init_i2c(i2c, &max77686_regmap_config);
	if (IS_ERR(max77686->regmap)) {
		ret = PTR_ERR(max77686->regmap);
		dev_err(max77686->dev, "Failed to allocate register map: %d\n",
				ret);
		return ret;
	}

	if (regmap_read(max77686->regmap,
			 MAX77686_REG_DEVICE_ID, &data) < 0) {
		dev_err(max77686->dev,
			"device not found on this channel (this is not an error)\n");
		return -ENODEV;
	} else
		dev_info(max77686->dev, "device found\n");

	max77686->rtc = i2c_new_dummy(i2c->adapter, I2C_ADDR_RTC);
	i2c_set_clientdata(max77686->rtc, max77686);

	max77686_irq_init(max77686);

	ret = mfd_add_devices(max77686->dev, -1, max77686_devs,
			      ARRAY_SIZE(max77686_devs), NULL, 0, NULL);
	if (ret < 0) {
		mfd_remove_devices(max77686->dev);
		i2c_unregister_device(max77686->rtc);
	}

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
28,29
29,30
29,31
30,31
32,33
32,34
32,35
35,36
36,37
36,38
37,38
39,40
40,41
40,42
41,42
44,45
45,46
45,47
47,48
49,50
50,51
50,52
52,53
52,54
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
63,64
64,65
64,66
65,66
67,68
67,69
68,69
70,71
71,72
71,73
72,73
75,76
75,77
76,77
77,78
79,80
79,81
80,81
81,82
81,83
81,84
82,83
84,85
85,86
85,87
86,87
90,91
91,92
92,93
94,95
95,96
95,97
96,97
98,99
98,100
98,101
98,102
99,100
101,102
102,103
102,104
103,104
106,107
107,108
107,109
108,109
111,112
113,114
113,115
114,115
114,116
115,116
117,118
119,120
120,121
121,122
123,124
124,125
124,126
124,127
125,126
127,128
129,130
131,132
132,133
132,134
133,134
133,135
134,135
137,138
138,139
138,140
139,140
142,143
143,144
143,145
144,145
144,146
145,146
148,149
150,151
151,152
151,153
152,153
152,154
153,154
156,157
156,158
157,158
160,161
161,162
161,163
162,163
162,164
163,164
166,167
166,168
167,168
170,171
171,172
171,173
172,173
172,174
173,174
176,177
176,178
177,178
180,181
181,182
181,183
182,183
182,184
183,184
186,187
186,188
187,188
190,191
191,192
191,193
192,193
192,194
193,194
196,197
196,198
196,199
197,198
199,200
201,202
202,203
204,205
204,206
205,206
205,207
206,207
208,209
208,210
209,210
212,213
212,214
212,215
213,214
214,215
214,216
215,216
217,218
217,219
218,219
220,221
220,222
221,222
224,225
225,226
225,227
225,228
225,229
226,227
228,229
228,230
229,230
233,234
235,236
236,237
238,239
238,240
238,241
239,240
239,241
240,241
240,242
240,243
240,244
241,242
243,244
243,245
244,245
247,248
249,250
250,251
253,254
253,255
254,255
255,256
255,257
255,258
256,257
258,259
258,260
259,260
263,264
264,265
265,266
267,268
268,269
268,270
268,271
269,270
271,272
271,273
272,273
276,277
277,278
277,279
278,279
278,280
279,280
282,283
282,284
282,285
283,284
285,286
285,287
286,287
289,290
291,292
292,293
292,294
292,295
293,294
295,296
295,297
296,297
299,300
301,302
302,303
302,304
303,304
305,306
307,308
308,309
308,310
309,310
311,312
311,313
311,314
311,315
311,316
311,317
311,318
311,319
312,313
314,315
314,316
315,316
318,319
320,321
322,323
322,324
323,324
325,326
327,328
330,331
332,333
332,334
333,334
333,335
334,335
337,338
337,339
338,339
339,340
339,341
340,341
342,343
342,344
343,344
346,347
347,348
347,349
348,349
350,351
350,352
351,352
354,355
355,356
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,27,31,33,34,38,42,43,46,48,51,53,55,60,61,62,66,69,73,74,78,83,87,88,89,93,97,100,104,105,109,110,112,116,118,122,126,128,130,135,136,140,141,146,147,149,154,155,158,159,164,165,168,169,174,175,178,179,184,185,188,189,194,195,198,200,203,207,210,211,216,219,222,223,227,230,231,232,234,237,242,245,246,248,251,252,257,260,261,262,266,270,273,274,275,280,281,284,287,288,290,294,297,298,300,304,306,310,313,316,317,319,321,324,326,328,329,331,335,336,341,344,345,349,352,353,356
-----computeFrom-----
64,65
64,66
95,96
95,97
114,115
114,116
132,133
132,134
143,144
143,145
151,152
151,153
161,162
161,163
171,172
171,173
181,182
181,183
191,192
191,193
214,215
214,216
239,240
239,241
277,278
277,279
308,309
308,310
333,334
333,335
-----guardedBy-----
245,260
-----guardedByNegation-----
245,273
-----lastLexicalUse-----
245,273
-----jump-----
245,273
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;LiteralExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int max77686_i2c_probe(struct i2c_client *i2c,			      const struct i2c_device_id *id){	struct max77686_dev *max77686 = NULL;	struct max77686_platform_data *pdata = dev_get_platdata(&i2c->dev);	unsigned int data;	int ret = 0;	if (i2c->dev.of_node)		pdata = max77686_i2c_parse_dt_pdata(&i2c->dev);	if (!pdata) {		dev_err(&i2c->dev, "No platform data found.\n");		return -EIO;	}	max77686 = devm_kzalloc(&i2c->dev,				sizeof(struct max77686_dev), GFP_KERNEL);	if (max77686 == NULL)		return -ENOMEM;	i2c_set_clientdata(i2c, max77686);	max77686->dev = &i2c->dev;	max77686->i2c = i2c;	max77686->type = id->driver_data;	max77686->wakeup = pdata->wakeup;	max77686->irq_gpio = pdata->irq_gpio;	max77686->irq = i2c->irq;	max77686->regmap = regmap_init_i2c(i2c, &max77686_regmap_config);	if (IS_ERR(max77686->regmap)) {		ret = PTR_ERR(max77686->regmap);		dev_err(max77686->dev, "Failed to allocate register map: %d\n",				ret);		return ret;	}	if (regmap_read(max77686->regmap,			 MAX77686_REG_DEVICE_ID, &data) < 0) {		dev_err(max77686->dev,			"device not found on this channel (this is not an error)\n");		return -ENODEV;	} else		dev_info(max77686->dev, "device found\n");	max77686->rtc = i2c_new_dummy(i2c->adapter, I2C_ADDR_RTC);	i2c_set_clientdata(max77686->rtc, max77686);	max77686_irq_init(max77686);	ret = mfd_add_devices(max77686->dev, -1, max77686_devs,			      ARRAY_SIZE(max77686_devs), NULL, 0, NULL);	if (ret < 0) {		mfd_remove_devices(max77686->dev);		i2c_unregister_device(max77686->rtc);	}	return ret;}
static int
max77686_i2c_probe(struct i2c_client *i2c,			      const struct i2c_device_id *id)
max77686_i2c_probe
struct i2c_client *i2c
struct i2c_client
i2c_client
*i2c
*
i2c
const struct i2c_device_id *id
const struct i2c_device_id
i2c_device_id
*id
*
id
{	struct max77686_dev *max77686 = NULL;	struct max77686_platform_data *pdata = dev_get_platdata(&i2c->dev);	unsigned int data;	int ret = 0;	if (i2c->dev.of_node)		pdata = max77686_i2c_parse_dt_pdata(&i2c->dev);	if (!pdata) {		dev_err(&i2c->dev, "No platform data found.\n");		return -EIO;	}	max77686 = devm_kzalloc(&i2c->dev,				sizeof(struct max77686_dev), GFP_KERNEL);	if (max77686 == NULL)		return -ENOMEM;	i2c_set_clientdata(i2c, max77686);	max77686->dev = &i2c->dev;	max77686->i2c = i2c;	max77686->type = id->driver_data;	max77686->wakeup = pdata->wakeup;	max77686->irq_gpio = pdata->irq_gpio;	max77686->irq = i2c->irq;	max77686->regmap = regmap_init_i2c(i2c, &max77686_regmap_config);	if (IS_ERR(max77686->regmap)) {		ret = PTR_ERR(max77686->regmap);		dev_err(max77686->dev, "Failed to allocate register map: %d\n",				ret);		return ret;	}	if (regmap_read(max77686->regmap,			 MAX77686_REG_DEVICE_ID, &data) < 0) {		dev_err(max77686->dev,			"device not found on this channel (this is not an error)\n");		return -ENODEV;	} else		dev_info(max77686->dev, "device found\n");	max77686->rtc = i2c_new_dummy(i2c->adapter, I2C_ADDR_RTC);	i2c_set_clientdata(max77686->rtc, max77686);	max77686_irq_init(max77686);	ret = mfd_add_devices(max77686->dev, -1, max77686_devs,			      ARRAY_SIZE(max77686_devs), NULL, 0, NULL);	if (ret < 0) {		mfd_remove_devices(max77686->dev);		i2c_unregister_device(max77686->rtc);	}	return ret;}
struct max77686_dev *max77686 = NULL;
struct max77686_dev *max77686 = NULL;
struct max77686_dev
max77686_dev
*max77686 = NULL
*
max77686
= NULL
NULL
NULL
struct max77686_platform_data *pdata = dev_get_platdata(&i2c->dev);
struct max77686_platform_data *pdata = dev_get_platdata(&i2c->dev);
struct max77686_platform_data
max77686_platform_data
*pdata = dev_get_platdata(&i2c->dev)
*
pdata
= dev_get_platdata(&i2c->dev)
dev_get_platdata(&i2c->dev)
dev_get_platdata
dev_get_platdata
&i2c->dev
i2c->dev
i2c
i2c
dev
unsigned int data;
unsigned int data;
unsigned int
data
data
int ret = 0;
int ret = 0;
int
ret = 0
ret
= 0
0
if (i2c->dev.of_node)		pdata = max77686_i2c_parse_dt_pdata(&i2c->dev);
i2c->dev.of_node
i2c->dev
i2c
i2c
dev
of_node
pdata = max77686_i2c_parse_dt_pdata(&i2c->dev);
pdata = max77686_i2c_parse_dt_pdata(&i2c->dev)
pdata
pdata
max77686_i2c_parse_dt_pdata(&i2c->dev)
max77686_i2c_parse_dt_pdata
max77686_i2c_parse_dt_pdata
&i2c->dev
i2c->dev
i2c
i2c
dev
if (!pdata) {		dev_err(&i2c->dev, "No platform data found.\n");		return -EIO;	}
!pdata
pdata
pdata
{		dev_err(&i2c->dev, "No platform data found.\n");		return -EIO;	}
dev_err(&i2c->dev, "No platform data found.\n");
dev_err(&i2c->dev, "No platform data found.\n")
dev_err
dev_err
&i2c->dev
i2c->dev
i2c
i2c
dev
"No platform data found.\n"
return -EIO;
-EIO
EIO
EIO
max77686 = devm_kzalloc(&i2c->dev,				sizeof(struct max77686_dev), GFP_KERNEL);
max77686 = devm_kzalloc(&i2c->dev,				sizeof(struct max77686_dev), GFP_KERNEL)
max77686
max77686
devm_kzalloc(&i2c->dev,				sizeof(struct max77686_dev), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
&i2c->dev
i2c->dev
i2c
i2c
dev
sizeof(struct max77686_dev)
struct max77686_dev
struct max77686_dev
max77686_dev

GFP_KERNEL
GFP_KERNEL
if (max77686 == NULL)		return -ENOMEM;
max77686 == NULL
max77686
max77686
NULL
NULL
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
i2c_set_clientdata(i2c, max77686);
i2c_set_clientdata(i2c, max77686)
i2c_set_clientdata
i2c_set_clientdata
i2c
i2c
max77686
max77686
max77686->dev = &i2c->dev;
max77686->dev = &i2c->dev
max77686->dev
max77686
max77686
dev
&i2c->dev
i2c->dev
i2c
i2c
dev
max77686->i2c = i2c;
max77686->i2c = i2c
max77686->i2c
max77686
max77686
i2c
i2c
i2c
max77686->type = id->driver_data;
max77686->type = id->driver_data
max77686->type
max77686
max77686
type
id->driver_data
id
id
driver_data
max77686->wakeup = pdata->wakeup;
max77686->wakeup = pdata->wakeup
max77686->wakeup
max77686
max77686
wakeup
pdata->wakeup
pdata
pdata
wakeup
max77686->irq_gpio = pdata->irq_gpio;
max77686->irq_gpio = pdata->irq_gpio
max77686->irq_gpio
max77686
max77686
irq_gpio
pdata->irq_gpio
pdata
pdata
irq_gpio
max77686->irq = i2c->irq;
max77686->irq = i2c->irq
max77686->irq
max77686
max77686
irq
i2c->irq
i2c
i2c
irq
max77686->regmap = regmap_init_i2c(i2c, &max77686_regmap_config);
max77686->regmap = regmap_init_i2c(i2c, &max77686_regmap_config)
max77686->regmap
max77686
max77686
regmap
regmap_init_i2c(i2c, &max77686_regmap_config)
regmap_init_i2c
regmap_init_i2c
i2c
i2c
&max77686_regmap_config
max77686_regmap_config
max77686_regmap_config
if (IS_ERR(max77686->regmap)) {		ret = PTR_ERR(max77686->regmap);		dev_err(max77686->dev, "Failed to allocate register map: %d\n",				ret);		return ret;	}
IS_ERR(max77686->regmap)
IS_ERR
IS_ERR
max77686->regmap
max77686
max77686
regmap
{		ret = PTR_ERR(max77686->regmap);		dev_err(max77686->dev, "Failed to allocate register map: %d\n",				ret);		return ret;	}
ret = PTR_ERR(max77686->regmap);
ret = PTR_ERR(max77686->regmap)
ret
ret
PTR_ERR(max77686->regmap)
PTR_ERR
PTR_ERR
max77686->regmap
max77686
max77686
regmap
dev_err(max77686->dev, "Failed to allocate register map: %d\n",				ret);
dev_err(max77686->dev, "Failed to allocate register map: %d\n",				ret)
dev_err
dev_err
max77686->dev
max77686
max77686
dev
"Failed to allocate register map: %d\n"
ret
ret
return ret;
ret
ret
if (regmap_read(max77686->regmap,			 MAX77686_REG_DEVICE_ID, &data) < 0) {		dev_err(max77686->dev,			"device not found on this channel (this is not an error)\n");		return -ENODEV;	} else		dev_info(max77686->dev, "device found\n");
regmap_read(max77686->regmap,			 MAX77686_REG_DEVICE_ID, &data) < 0
regmap_read(max77686->regmap,			 MAX77686_REG_DEVICE_ID, &data)
regmap_read
regmap_read
max77686->regmap
max77686
max77686
regmap
MAX77686_REG_DEVICE_ID
MAX77686_REG_DEVICE_ID
&data
data
data
0
{		dev_err(max77686->dev,			"device not found on this channel (this is not an error)\n");		return -ENODEV;	}
dev_err(max77686->dev,			"device not found on this channel (this is not an error)\n");
dev_err(max77686->dev,			"device not found on this channel (this is not an error)\n")
dev_err
dev_err
max77686->dev
max77686
max77686
dev
"device not found on this channel (this is not an error)\n"
return -ENODEV;
-ENODEV
ENODEV
ENODEV
dev_info(max77686->dev, "device found\n");
dev_info(max77686->dev, "device found\n")
dev_info
dev_info
max77686->dev
max77686
max77686
dev
"device found\n"
max77686->rtc = i2c_new_dummy(i2c->adapter, I2C_ADDR_RTC);
max77686->rtc = i2c_new_dummy(i2c->adapter, I2C_ADDR_RTC)
max77686->rtc
max77686
max77686
rtc
i2c_new_dummy(i2c->adapter, I2C_ADDR_RTC)
i2c_new_dummy
i2c_new_dummy
i2c->adapter
i2c
i2c
adapter
I2C_ADDR_RTC
I2C_ADDR_RTC
i2c_set_clientdata(max77686->rtc, max77686);
i2c_set_clientdata(max77686->rtc, max77686)
i2c_set_clientdata
i2c_set_clientdata
max77686->rtc
max77686
max77686
rtc
max77686
max77686
max77686_irq_init(max77686);
max77686_irq_init(max77686)
max77686_irq_init
max77686_irq_init
max77686
max77686
ret = mfd_add_devices(max77686->dev, -1, max77686_devs,			      ARRAY_SIZE(max77686_devs), NULL, 0, NULL);
ret = mfd_add_devices(max77686->dev, -1, max77686_devs,			      ARRAY_SIZE(max77686_devs), NULL, 0, NULL)
ret
ret
mfd_add_devices(max77686->dev, -1, max77686_devs,			      ARRAY_SIZE(max77686_devs), NULL, 0, NULL)
mfd_add_devices
mfd_add_devices
max77686->dev
max77686
max77686
dev
-1
1
max77686_devs
max77686_devs
ARRAY_SIZE(max77686_devs)
ARRAY_SIZE
ARRAY_SIZE
max77686_devs
max77686_devs
NULL
NULL
0
NULL
NULL
if (ret < 0) {		mfd_remove_devices(max77686->dev);		i2c_unregister_device(max77686->rtc);	}
ret < 0
ret
ret
0
{		mfd_remove_devices(max77686->dev);		i2c_unregister_device(max77686->rtc);	}
mfd_remove_devices(max77686->dev);
mfd_remove_devices(max77686->dev)
mfd_remove_devices
mfd_remove_devices
max77686->dev
max77686
max77686
dev
i2c_unregister_device(max77686->rtc);
i2c_unregister_device(max77686->rtc)
i2c_unregister_device
i2c_unregister_device
max77686->rtc
max77686
max77686
rtc
return ret;
ret
ret
-----joern-----
(115,200,0)
(4,17,0)
(108,113,0)
(55,149,0)
(186,53,0)
(127,83,0)
(86,17,0)
(2,197,0)
(53,186,0)
(118,113,0)
(169,159,0)
(166,74,0)
(143,179,0)
(126,113,0)
(17,159,0)
(46,66,0)
(106,161,0)
(100,159,0)
(167,154,0)
(142,108,0)
(104,142,0)
(142,154,0)
(99,145,0)
(115,63,0)
(75,47,0)
(162,159,0)
(85,80,0)
(182,200,0)
(177,188,0)
(70,133,0)
(33,168,0)
(139,193,0)
(19,159,0)
(44,123,0)
(113,126,0)
(5,46,0)
(105,127,0)
(2,47,0)
(13,66,0)
(134,20,0)
(129,32,0)
(138,157,0)
(202,193,0)
(195,84,0)
(183,175,0)
(66,103,0)
(66,80,0)
(188,177,0)
(135,25,0)
(32,47,0)
(87,143,0)
(78,47,0)
(8,130,0)
(90,160,0)
(127,147,0)
(130,154,0)
(131,47,0)
(112,154,0)
(139,141,0)
(31,133,0)
(106,142,0)
(51,154,0)
(31,124,0)
(18,115,0)
(156,59,0)
(102,36,0)
(137,75,0)
(195,123,0)
(162,163,0)
(14,201,0)
(157,47,0)
(173,100,0)
(51,152,0)
(96,27,0)
(128,138,0)
(62,167,0)
(133,47,0)
(25,197,0)
(30,60,0)
(152,51,0)
(100,30,0)
(12,100,0)
(200,193,0)
(11,2,0)
(43,63,0)
(167,159,0)
(49,169,0)
(83,154,0)
(36,60,0)
(95,201,0)
(166,184,0)
(181,74,0)
(93,188,0)
(132,19,0)
(144,154,0)
(191,164,0)
(74,76,0)
(113,108,0)
(196,159,0)
(122,2,0)
(197,25,0)
(47,73,0)
(115,18,0)
(29,139,0)
(166,202,0)
(26,162,0)
(60,154,0)
(40,72,0)
(61,166,0)
(60,30,0)
(113,121,0)
(143,159,0)
(166,78,0)
(84,201,0)
(37,67,0)
(27,154,0)
(81,115,0)
(103,141,0)
(185,162,0)
(131,6,0)
(133,31,0)
(111,196,0)
(146,163,0)
(56,66,0)
(174,96,0)
(188,51,0)
(72,161,0)
(86,33,0)
(151,30,0)
(116,149,0)
(107,130,0)
(38,202,0)
(55,124,0)
(85,103,0)
(198,15,0)
(76,154,0)
(67,169,0)
(88,127,0)
(66,46,0)
(75,51,0)
(125,154,0)
(27,19,0)
(41,131,0)
(190,123,0)
(109,58,0)
(15,52,0)
(28,64,0)
(149,55,0)
(54,131,0)
(113,75,0)
(53,51,0)
(6,131,0)
(121,113,0)
(123,195,0)
(200,115,0)
(92,15,0)
(89,58,0)
(188,47,0)
(120,157,0)
(193,154,0)
(0,186,0)
(149,51,0)
(136,103,0)
(75,113,0)
(25,91,0)
(155,46,0)
(158,154,0)
(96,47,0)
(196,154,0)
(32,196,0)
(90,73,0)
(157,60,0)
(42,78,0)
(58,91,0)
(200,47,0)
(17,86,0)
(178,113,0)
(169,67,0)
(189,17,0)
(194,154,0)
(179,143,0)
(50,53,0)
(138,154,0)
(138,47,0)
(73,47,0)
(98,61,0)
(150,154,0)
(23,95,0)
(9,154,0)
(165,113,0)
(21,78,0)
(131,193,0)
(203,154,0)
(58,76,0)
(180,121,0)
(175,47,0)
(166,20,0)
(77,33,0)
(68,139,0)
(59,159,0)
(146,91,0)
(97,91,0)
(10,149,0)
(106,166,0)
(171,202,0)
(91,146,0)
(73,52,0)
(20,51,0)
(172,18,0)
(47,154,0)
(3,143,0)
(152,59,0)
(160,90,0)
(52,15,0)
(39,157,0)
(22,168,0)
(45,74,0)
(46,47,0)
(114,22,0)
(15,159,0)
(140,85,0)
(48,108,0)
(199,19,0)
(106,22,0)
(95,91,0)
(84,195,0)
(170,47,0)
(157,138,0)
(63,115,0)
(34,36,0)
(79,126,0)
(139,47,0)
(192,145,0)
(59,152,0)
(148,25,0)
(177,184,0)
(36,47,0)
(201,84,0)
(141,103,0)
(64,47,0)
(163,146,0)
(25,201,0)
(117,133,0)
(141,139,0)
(7,113,0)
(166,2,0)
(46,51,0)
(166,96,0)
(24,59,0)
(1,20,0)
(119,96,0)
(76,58,0)
(73,90,0)
(33,86,0)
(110,154,0)
(20,47,0)
(83,127,0)
(30,100,0)
(69,164,0)
(57,167,0)
(133,60,0)
(16,64,0)
(197,154,0)
(101,75,0)
(187,32,0)
(204,179,0)
(35,188,0)
(166,32,0)
(169,193,0)
(202,47,0)
(176,154,0)
(91,154,0)
(53,47,0)
(94,53,0)
(193,169,0)
(163,162,0)
(149,47,0)
(82,114,0)
(164,154,0)
(145,108,0)
(65,200,0)
(19,27,0)
(74,47,0)
(106,85,0)
(52,73,0)
(153,177,0)
(58,201,0)
(175,154,0)
(78,83,0)
(103,80,0)
(108,154,0)
(71,73,0)
(123,159,0)
(167,47,0)
(201,84,1)
(166,202,1)
(200,47,1)
(180,75,1)
(95,91,1)
(88,105,1)
(163,162,1)
(167,159,1)
(149,51,1)
(179,143,1)
(17,159,1)
(30,100,1)
(76,58,1)
(106,142,1)
(200,193,1)
(139,47,1)
(74,47,1)
(136,6,1)
(23,201,1)
(138,128,1)
(48,175,1)
(188,35,1)
(8,91,1)
(113,126,1)
(100,159,1)
(120,60,1)
(171,38,1)
(157,47,1)
(16,28,1)
(106,166,1)
(178,121,1)
(73,52,1)
(81,200,1)
(67,37,1)
(65,6,1)
(202,47,1)
(41,193,1)
(52,15,1)
(6,131,1)
(94,50,1)
(12,36,1)
(91,146,1)
(104,31,1)
(56,46,1)
(170,95,1)
(135,148,1)
(179,204,1)
(101,48,1)
(106,22,1)
(82,33,1)
(193,169,1)
(185,97,1)
(175,47,1)
(42,196,1)
(55,149,1)
(173,12,1)
(127,88,1)
(63,115,1)
(109,74,1)
(130,107,1)
(89,109,1)
(175,183,1)
(188,47,1)
(79,178,1)
(15,198,1)
(27,19,1)
(105,78,1)
(85,103,1)
(102,34,1)
(50,63,1)
(78,47,1)
(169,67,1)
(72,40,1)
(166,78,1)
(134,167,1)
(192,99,1)
(162,159,1)
(90,160,1)
(15,159,1)
(34,186,1)
(143,159,1)
(113,7,1)
(161,72,1)
(115,18,1)
(200,182,1)
(104,145,1)
(61,98,1)
(103,141,1)
(177,188,1)
(39,120,1)
(23,179,1)
(156,24,1)
(75,51,1)
(191,69,1)
(115,200,1)
(188,51,1)
(111,32,1)
(196,111,1)
(13,56,1)
(186,0,1)
(204,143,1)
(33,86,1)
(84,195,1)
(95,201,1)
(64,16,1)
(132,96,1)
(49,202,1)
(78,21,1)
(64,47,1)
(166,2,1)
(149,116,1)
(70,117,1)
(141,139,1)
(66,46,1)
(54,41,1)
(145,192,1)
(38,27,1)
(90,52,1)
(106,85,1)
(164,191,1)
(77,86,1)
(143,3,1)
(182,65,1)
(40,64,1)
(59,159,1)
(157,39,1)
(18,172,1)
(87,130,1)
(29,136,1)
(140,66,1)
(73,71,1)
(151,100,1)
(11,83,1)
(3,87,1)
(31,133,1)
(25,201,1)
(169,159,1)
(142,104,1)
(73,90,1)
(19,159,1)
(98,177,1)
(133,47,1)
(96,119,1)
(129,51,1)
(123,159,1)
(174,76,1)
(113,121,1)
(10,145,1)
(106,161,1)
(195,123,1)
(167,47,1)
(116,10,1)
(25,91,1)
(57,64,1)
(32,187,1)
(127,147,1)
(198,92,1)
(107,8,1)
(97,164,1)
(83,127,1)
(74,45,1)
(139,68,1)
(68,29,1)
(166,61,1)
(51,152,1)
(202,171,1)
(75,47,1)
(196,159,1)
(5,103,1)
(43,115,1)
(58,89,1)
(172,81,1)
(166,32,1)
(62,57,1)
(53,94,1)
(58,91,1)
(37,49,1)
(17,4,1)
(118,165,1)
(59,156,1)
(21,42,1)
(2,47,1)
(133,70,1)
(46,47,1)
(26,185,1)
(22,114,1)
(131,47,1)
(157,60,1)
(46,51,1)
(71,90,1)
(123,190,1)
(128,157,1)
(117,55,1)
(177,153,1)
(20,47,1)
(66,103,1)
(33,77,1)
(126,79,1)
(148,2,1)
(165,126,1)
(142,108,1)
(187,129,1)
(14,179,1)
(86,17,1)
(24,20,1)
(99,108,1)
(66,13,1)
(46,155,1)
(53,47,1)
(131,193,1)
(153,188,1)
(85,140,1)
(95,23,1)
(166,20,1)
(96,47,1)
(63,43,1)
(0,53,1)
(122,11,1)
(121,180,1)
(138,157,1)
(47,73,1)
(162,26,1)
(2,122,1)
(166,74,1)
(138,47,1)
(1,134,1)
(183,138,1)
(114,82,1)
(44,14,1)
(36,47,1)
(30,151,1)
(93,63,1)
(119,174,1)
(4,189,1)
(45,181,1)
(75,137,1)
(152,59,1)
(189,95,1)
(197,25,1)
(139,193,1)
(100,173,1)
(60,30,1)
(108,113,1)
(131,54,1)
(155,5,1)
(20,1,1)
(137,101,1)
(19,199,1)
(58,201,1)
(36,102,1)
(28,47,1)
(166,96,1)
(7,118,1)
(25,135,1)
(145,108,1)
(113,75,1)
(181,197,1)
(53,51,1)
(133,60,1)
(199,132,1)
(186,53,1)
(190,44,1)
(146,163,1)
(149,47,1)
(92,170,1)
(167,62,1)
(32,47,1)
(35,93,1)
(142,108,2)
(63,6,2)
(139,193,2)
(53,63,2)
(95,91,2)
(114,95,2)
(115,200,2)
(86,17,2)
(77,95,2)
(182,6,2)
(48,63,2)
(31,145,2)
(138,63,2)
(126,63,2)
(15,95,2)
(117,145,2)
(73,52,2)
(148,64,2)
(106,142,2)
(169,159,2)
(186,53,2)
(195,123,2)
(78,47,2)
(70,145,2)
(192,63,2)
(166,78,2)
(141,139,2)
(5,6,2)
(166,32,2)
(120,63,2)
(106,161,2)
(6,131,2)
(46,6,2)
(10,145,2)
(115,6,2)
(188,51,2)
(153,63,2)
(90,160,2)
(178,63,2)
(18,6,2)
(79,63,2)
(108,113,2)
(65,6,2)
(54,64,2)
(101,63,2)
(127,64,2)
(33,95,2)
(22,95,2)
(123,159,2)
(145,63,2)
(76,64,2)
(32,64,2)
(166,2,2)
(66,6,2)
(166,74,2)
(167,64,2)
(66,46,2)
(127,147,2)
(177,188,2)
(166,20,2)
(63,115,2)
(173,63,2)
(64,47,2)
(19,159,2)
(31,133,2)
(84,195,2)
(71,95,2)
(166,202,2)
(175,63,2)
(106,85,2)
(106,22,2)
(149,145,2)
(131,193,2)
(59,64,2)
(37,64,2)
(201,179,2)
(6,64,2)
(47,95,2)
(100,159,2)
(2,64,2)
(89,64,2)
(50,63,2)
(25,64,2)
(90,95,2)
(36,47,2)
(135,64,2)
(190,179,2)
(34,63,2)
(52,15,2)
(74,47,2)
(197,64,2)
(128,63,2)
(113,121,2)
(27,64,2)
(20,47,2)
(42,64,2)
(19,64,2)
(17,159,2)
(15,159,2)
(151,63,2)
(33,86,2)
(188,63,2)
(82,95,2)
(131,64,2)
(49,64,2)
(105,64,2)
(53,51,2)
(7,63,2)
(138,157,2)
(169,67,2)
(62,64,2)
(93,63,2)
(195,179,2)
(197,25,2)
(142,63,2)
(83,127,2)
(55,149,2)
(51,152,2)
(45,64,2)
(149,51,2)
(56,6,2)
(104,63,2)
(106,166,2)
(198,95,2)
(2,47,2)
(137,63,2)
(202,47,2)
(13,6,2)
(32,47,2)
(201,84,2)
(172,6,2)
(52,95,2)
(181,64,2)
(175,47,2)
(96,64,2)
(59,159,2)
(162,159,2)
(174,64,2)
(113,75,2)
(60,30,2)
(196,64,2)
(152,64,2)
(81,6,2)
(102,63,2)
(138,47,2)
(119,64,2)
(30,63,2)
(75,51,2)
(165,63,2)
(202,64,2)
(85,103,2)
(29,6,2)
(131,47,2)
(91,146,2)
(61,63,2)
(166,63,2)
(193,169,2)
(75,63,2)
(156,64,2)
(180,63,2)
(84,179,2)
(36,63,2)
(111,64,2)
(103,141,2)
(17,95,2)
(169,64,2)
(58,91,2)
(193,64,2)
(44,179,2)
(167,159,2)
(145,108,2)
(46,47,2)
(116,145,2)
(83,64,2)
(118,63,2)
(113,63,2)
(136,6,2)
(16,95,2)
(58,64,2)
(140,6,2)
(121,63,2)
(200,193,2)
(66,103,2)
(133,145,2)
(141,6,2)
(200,6,2)
(51,64,2)
(20,64,2)
(73,95,2)
(88,64,2)
(177,63,2)
(171,64,2)
(74,64,2)
(86,95,2)
(133,47,2)
(115,18,2)
(55,145,2)
(78,64,2)
(157,63,2)
(25,91,2)
(1,64,2)
(38,64,2)
(41,64,2)
(200,47,2)
(95,201,2)
(187,64,2)
(35,63,2)
(11,64,2)
(60,63,2)
(146,163,2)
(179,143,2)
(27,19,2)
(94,63,2)
(0,63,2)
(186,63,2)
(99,63,2)
(67,64,2)
(103,6,2)
(170,95,2)
(57,64,2)
(43,6,2)
(166,96,2)
(24,64,2)
(73,90,2)
(98,63,2)
(85,6,2)
(143,159,2)
(58,201,2)
(4,95,2)
(155,6,2)
(100,63,2)
(196,159,2)
(163,162,2)
(139,6,2)
(68,6,2)
(157,47,2)
(133,60,2)
(40,64,2)
(157,60,2)
(30,100,2)
(46,51,2)
(132,64,2)
(183,63,2)
(108,63,2)
(28,95,2)
(39,63,2)
(129,64,2)
(134,64,2)
(12,63,2)
(123,179,2)
(109,64,2)
(53,47,2)
(92,95,2)
(47,73,2)
(188,47,2)
(75,47,2)
(189,95,2)
(76,58,2)
(72,64,2)
(139,47,2)
(122,64,2)
(161,64,2)
(113,126,2)
(152,59,2)
(64,95,2)
(14,179,2)
(199,64,2)
(96,47,2)
(167,47,2)
(25,201,2)
(21,64,2)
(149,47,2)
-----------------------------------
(0,"device found\\n")
(1,dev)
(2,max77686->wakeup)
(3,dev)
(4,dev)
(5,max77686)
(6,IS_ERR(max77686->regmap)
(7,NULL)
(8,ret)
(9,if (max77686 == NULL)
(10,max77686)
(11,max77686)
(12,i2c)
(13,ret)
(14,pdata)
(15,i2c->dev)
(16,NULL)
(17,i2c->dev)
(18,&data)
(19,i2c->irq)
(20,max77686->dev)
(21,type)
(22,return -EIO;)
(23,pdata)
(24,i2c)
(25,pdata->wakeup)
(26,dev)
(27,max77686->irq = i2c->irq)
(28,max77686)
(29,max77686)
(30,i2c_new_dummy(i2c->adapter, I2C_ADDR_RTC)
(31,i2c_unregister_device(max77686->rtc)
(32,max77686->i2c)
(33,dev_err(&i2c->dev, "No platform data found.\\n")
(34,max77686)
(35,dev)
(36,max77686->rtc)
(37,max77686_regmap_config)
(38,max77686)
(39,rtc)
(40,ENOMEM)
(41,max77686)
(42,max77686)
(43,0)
(44,i2c)
(45,irq_gpio)
(46,max77686->dev)
(47,max77686 = devm_kzalloc(&i2c->dev,\n\\n\\t\\t\\t\\tsizeof(struct max77686_dev)
(48,ret)
(49,i2c)
(50,max77686)
(51,max77686->dev = &i2c->dev)
(52,&i2c->dev)
(53,max77686->dev)
(54,regmap)
(55,mfd_remove_devices(max77686->dev)
(56,"Failed to allocate register map: %d\\n")
(57,i2c)
(58,pdata->irq_gpio)
(59,i2c->dev)
(60,max77686->rtc = i2c_new_dummy(i2c->adapter, I2C_ADDR_RTC)
(61,-ENODEV)
(62,max77686)
(63,regmap_read(max77686->regmap,\n\\n\\t\\t\\t MAX77686_REG_DEVICE_ID, &data)
(64,max77686 == NULL)
(65,max77686)
(66,dev_err(max77686->dev, "Failed to allocate register map: %d\\n",\n\\n\\t\\t\\t\\tret)
(67,&max77686_regmap_config)
(68,regmap)
(69,max77686)
(70,rtc)
(71,GFP_KERNEL)
(72,-ENOMEM)
(73,devm_kzalloc(&i2c->dev,\n\\n\\t\\t\\t\\tsizeof(struct max77686_dev)
(74,max77686->irq_gpio)
(75,max77686->dev)
(76,max77686->irq_gpio = pdata->irq_gpio)
(77,"No platform data found.\\n")
(78,max77686->type)
(79,max77686_devs)
(80,)
(81,MAX77686_REG_DEVICE_ID)
(82,EIO)
(83,max77686->type = id->driver_data)
(84,max77686_i2c_parse_dt_pdata(&i2c->dev)
(85,return ret;)
(86,&i2c->dev)
(87,i2c)
(88,driver_data)
(89,irq_gpio)
(90,sizeof(struct max77686_dev)
(91,*pdata = dev_get_platdata(&i2c->dev)
(92,i2c)
(93,max77686)
(94,dev)
(95,!pdata)
(96,max77686->irq)
(97,pdata)
(98,ENODEV)
(99,ret)
(100,i2c->adapter)
(101,max77686)
(102,rtc)
(103,ret = PTR_ERR(max77686->regmap)
(104,ret)
(105,id)
(106,RET)
(107,0)
(108,ret = mfd_add_devices(max77686->dev, -1, max77686_devs,\n\\n\\t\\t\\t      ARRAY_SIZE(max77686_devs)
(109,pdata)
(110,pdata)
(111,i2c)
(112,if (IS_ERR(max77686->regmap)
(113,mfd_add_devices(max77686->dev, -1, max77686_devs,\n\\n\\t\\t\\t      ARRAY_SIZE(max77686_devs)
(114,-EIO)
(115,regmap_read(max77686->regmap,\n\\n\\t\\t\\t MAX77686_REG_DEVICE_ID, &data)
(116,dev)
(117,max77686)
(118,0)
(119,irq)
(120,max77686)
(121,-1)
(122,wakeup)
(123,i2c->dev)
(124,)
(125,max77686)
(126,ARRAY_SIZE(max77686_devs)
(127,id->driver_data)
(128,max77686)
(129,max77686)
(130,ret = 0)
(131,max77686->regmap)
(132,i2c)
(133,max77686->rtc)
(134,max77686)
(135,wakeup)
(136,ret)
(137,dev)
(138,i2c_set_clientdata(max77686->rtc, max77686)
(139,max77686->regmap)
(140,ret)
(141,PTR_ERR(max77686->regmap)
(142,return ret;)
(143,i2c->dev)
(144,if (!pdata)
(145,ret < 0)
(146,dev_get_platdata(&i2c->dev)
(147,const struct i2c_device_id *id)
(148,pdata)
(149,max77686->dev)
(150,if (i2c->dev.of_node)
(151,I2C_ADDR_RTC)
(152,&i2c->dev)
(153,"device not found on this channel (this is not an error)
(154,)
(155,dev)
(156,dev)
(157,max77686->rtc)
(158,ret)
(159,struct i2c_client *i2c)
(160,struct max77686_dev)
(161,return -ENOMEM;)
(162,i2c->dev)
(163,&i2c->dev)
(164,*max77686 = NULL)
(165,NULL)
(166,return -ENODEV;)
(167,i2c_set_clientdata(i2c, max77686)
(168,)
(169,regmap_init_i2c(i2c, &max77686_regmap_config)
(170,max77686)
(171,regmap)
(172,data)
(173,adapter)
(174,max77686)
(175,max77686_irq_init(max77686)
(176,if (regmap_read(max77686->regmap,\n\\n\\t\\t\\t MAX77686_REG_DEVICE_ID, &data)
(177,dev_err(max77686->dev,\n\\n\\t\\t\\t"device not found on this channel (this is not an error)
(178,max77686_devs)
(179,i2c->dev.of_node)
(180,1)
(181,max77686)
(182,regmap)
(183,max77686)
(184,)
(185,i2c)
(186,dev_info(max77686->dev, "device found\\n")
(187,i2c)
(188,max77686->dev)
(189,i2c)
(190,dev)
(191,NULL)
(192,0)
(193,max77686->regmap = regmap_init_i2c(i2c, &max77686_regmap_config)
(194,data)
(195,&i2c->dev)
(196,max77686->i2c = i2c)
(197,max77686->wakeup = pdata->wakeup)
(198,dev)
(199,irq)
(200,max77686->regmap)
(201,pdata = max77686_i2c_parse_dt_pdata(&i2c->dev)
(202,max77686->regmap)
(203,if (ret < 0)
(204,of_node)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^