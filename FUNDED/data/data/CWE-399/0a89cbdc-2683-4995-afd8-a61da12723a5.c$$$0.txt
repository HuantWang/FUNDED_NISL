-----label-----
1
-----code-----
void snd_ak4113_reinit(struct ak4113 *chip)
{
	chip->init = 1;
	mb();
	flush_scheduled_work();
	ak4113_init_regs(chip);
	/* bring up statistics / event queing */
	chip->init = 0;
	if (chip->kctls[0])
		schedule_delayed_work(&chip->work, HZ / 10);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
14,16
15,16
19,20
20,21
21,22
23,24
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
34,35
34,36
35,36
35,37
36,37
40,41
40,42
41,42
41,43
42,43
42,44
43,44
47,48
48,49
48,50
48,51
49,50
51,52
52,53
52,54
53,54
56,57
56,58
57,58
-----nextToken-----
2,4,7,9,10,16,17,18,22,26,30,32,37,38,39,44,45,46,50,54,55,58,59
-----computeFrom-----
13,14
13,15
34,35
34,36
56,57
56,58
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void snd_ak4113_reinit(struct ak4113 *chip){	chip->init = 1;	mb();	flush_scheduled_work();	ak4113_init_regs(chip);	/* bring up statistics / event queing */	chip->init = 0;	if (chip->kctls[0])		schedule_delayed_work(&chip->work, HZ / 10);}
void
snd_ak4113_reinit(struct ak4113 *chip)
snd_ak4113_reinit
struct ak4113 *chip
struct ak4113
ak4113
*chip
*
chip
{	chip->init = 1;	mb();	flush_scheduled_work();	ak4113_init_regs(chip);	/* bring up statistics / event queing */	chip->init = 0;	if (chip->kctls[0])		schedule_delayed_work(&chip->work, HZ / 10);}
chip->init = 1;
chip->init = 1
chip->init
chip
chip
init
1
mb();
mb()
mb
mb
flush_scheduled_work();
flush_scheduled_work()
flush_scheduled_work
flush_scheduled_work
ak4113_init_regs(chip);
ak4113_init_regs(chip)
ak4113_init_regs
ak4113_init_regs
chip
chip
chip->init = 0;
chip->init = 0
chip->init
chip
chip
init
0
if (chip->kctls[0])		schedule_delayed_work(&chip->work, HZ / 10);
chip->kctls[0]
chip->kctls
chip
chip
kctls
0
schedule_delayed_work(&chip->work, HZ / 10);
schedule_delayed_work(&chip->work, HZ / 10)
schedule_delayed_work
schedule_delayed_work
&chip->work
chip->work
chip
chip
work
HZ / 10
HZ
HZ
10
-----joern-----
(8,30,0)
(7,13,0)
(17,13,0)
(12,5,0)
(11,24,0)
(26,5,0)
(19,24,0)
(10,9,0)
(14,21,0)
(25,22,0)
(4,2,0)
(3,5,0)
(11,21,0)
(13,2,0)
(16,25,0)
(30,26,0)
(6,14,0)
(30,22,0)
(15,30,0)
(28,26,0)
(24,11,0)
(21,14,0)
(21,11,0)
(1,24,0)
(2,5,0)
(13,22,0)
(18,5,0)
(24,22,0)
(27,12,0)
(9,25,0)
(25,9,0)
(29,25,0)
(12,22,0)
(0,14,0)
(20,5,0)
(10,25,1)
(26,28,1)
(23,21,1)
(7,12,1)
(21,11,1)
(29,16,1)
(30,15,1)
(24,1,1)
(14,0,1)
(11,24,1)
(19,9,1)
(13,17,1)
(4,13,1)
(20,18,1)
(30,22,1)
(15,8,1)
(6,11,1)
(12,27,1)
(17,7,1)
(25,29,1)
(9,25,1)
(13,22,1)
(28,30,1)
(18,26,1)
(12,22,1)
(16,2,1)
(9,10,1)
(0,6,1)
(25,22,1)
(24,22,1)
(23,9,1)
(21,14,1)
(2,4,1)
(1,19,1)
(27,20,1)
(21,14,2)
(14,9,2)
(6,9,2)
(25,22,2)
(19,9,2)
(11,9,2)
(24,9,2)
(21,11,2)
(1,9,2)
(11,24,2)
(21,9,2)
(0,9,2)
(24,22,2)
(30,22,2)
(13,22,2)
(12,22,2)
(9,25,2)
-----------------------------------
(0,10)
(1,work)
(2,chip->init = 0)
(3,if (chip->kctls[0])
(4,0)
(5,)
(6,HZ)
(7,chip)
(8,chip)
(9,chip->kctls[0])
(10,0)
(11,&chip->work)
(12,ak4113_init_regs(chip)
(13,chip->init)
(14,HZ / 10)
(15,init)
(16,chip)
(17,init)
(18,mb()
(19,chip)
(20,flush_scheduled_work()
(21,schedule_delayed_work(&chip->work, HZ / 10)
(22,struct ak4113 *chip)
(23,RET)
(24,chip->work)
(25,chip->kctls)
(26,chip->init = 1)
(27,chip)
(28,1)
(29,kctls)
(30,chip->init)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^