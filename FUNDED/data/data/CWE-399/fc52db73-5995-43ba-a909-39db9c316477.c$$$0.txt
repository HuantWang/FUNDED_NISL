-----label-----
0
-----code-----
static void cx25821_wait_fifo_enable(struct cx25821_dev *dev,
				     struct sram_channel *sram_ch)
{
	int count = 0;
	u32 tmp;

	do {
		/* Wait 10 microsecond before checking to see if the FIFO is
		 * turned ON. */
		udelay(10);

		tmp = cx_read(sram_ch->dma_ctl);

		/* 10 millisecond timeout */
		if (count++ > 1000) {
			pr_err("ERROR: %s() fifo is NOT turned on. Timeout!\n",
				__func__);
			return;
		}

	} while (!(tmp & sram_ch->fld_aud_fifo_en));

}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
18,19
19,20
19,21
21,22
21,23
23,24
25,26
26,27
26,28
27,28
29,30
31,32
31,33
32,33
32,34
32,35
33,34
34,35
34,36
35,36
38,39
39,40
39,41
40,41
42,43
42,44
43,44
45,46
45,47
46,47
49,50
49,51
50,51
50,52
51,52
52,53
55,56
55,57
56,57
57,58
57,59
57,60
58,59
61,62
64,65
65,66
66,67
66,68
67,68
69,70
69,71
70,71
-----nextToken-----
2,4,7,9,10,13,15,16,20,22,24,28,30,36,37,41,44,47,48,53,54,59,60,62,63,68,71,72
-----computeFrom-----
39,40
39,41
50,51
50,52
66,67
66,68
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DoStatement;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;UnaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;
-----ast_node-----
static void cx25821_wait_fifo_enable(struct cx25821_dev *dev,				     struct sram_channel *sram_ch){	int count = 0;	u32 tmp;	do {		/* Wait 10 microsecond before checking to see if the FIFO is		 * turned ON. */		udelay(10);		tmp = cx_read(sram_ch->dma_ctl);		/* 10 millisecond timeout */		if (count++ > 1000) {			pr_err("ERROR: %s() fifo is NOT turned on. Timeout!\n",				__func__);			return;		}	} while (!(tmp & sram_ch->fld_aud_fifo_en));}
static void
cx25821_wait_fifo_enable(struct cx25821_dev *dev,				     struct sram_channel *sram_ch)
cx25821_wait_fifo_enable
struct cx25821_dev *dev
struct cx25821_dev
cx25821_dev
*dev
*
dev
struct sram_channel *sram_ch
struct sram_channel
sram_channel
*sram_ch
*
sram_ch
{	int count = 0;	u32 tmp;	do {		/* Wait 10 microsecond before checking to see if the FIFO is		 * turned ON. */		udelay(10);		tmp = cx_read(sram_ch->dma_ctl);		/* 10 millisecond timeout */		if (count++ > 1000) {			pr_err("ERROR: %s() fifo is NOT turned on. Timeout!\n",				__func__);			return;		}	} while (!(tmp & sram_ch->fld_aud_fifo_en));}
int count = 0;
int count = 0;
int
count = 0
count
= 0
0
u32 tmp;
u32 tmp;
u32
u32
tmp
tmp
do {		/* Wait 10 microsecond before checking to see if the FIFO is		 * turned ON. */		udelay(10);		tmp = cx_read(sram_ch->dma_ctl);		/* 10 millisecond timeout */		if (count++ > 1000) {			pr_err("ERROR: %s() fifo is NOT turned on. Timeout!\n",				__func__);			return;		}	} while (!(tmp & sram_ch->fld_aud_fifo_en));
{		/* Wait 10 microsecond before checking to see if the FIFO is		 * turned ON. */		udelay(10);		tmp = cx_read(sram_ch->dma_ctl);		/* 10 millisecond timeout */		if (count++ > 1000) {			pr_err("ERROR: %s() fifo is NOT turned on. Timeout!\n",				__func__);			return;		}	}
udelay(10);
udelay(10)
udelay
udelay
10
tmp = cx_read(sram_ch->dma_ctl);
tmp = cx_read(sram_ch->dma_ctl)
tmp
tmp
cx_read(sram_ch->dma_ctl)
cx_read
cx_read
sram_ch->dma_ctl
sram_ch
sram_ch
dma_ctl
if (count++ > 1000) {			pr_err("ERROR: %s() fifo is NOT turned on. Timeout!\n",				__func__);			return;		}
count++ > 1000
count++
count
count
1000
{			pr_err("ERROR: %s() fifo is NOT turned on. Timeout!\n",				__func__);			return;		}
pr_err("ERROR: %s() fifo is NOT turned on. Timeout!\n",				__func__);
pr_err("ERROR: %s() fifo is NOT turned on. Timeout!\n",				__func__)
pr_err
pr_err
"ERROR: %s() fifo is NOT turned on. Timeout!\n"
__func__
__func__
return;
!(tmp & sram_ch->fld_aud_fifo_en)
(tmp & sram_ch->fld_aud_fifo_en)
tmp & sram_ch->fld_aud_fifo_en
tmp
tmp
sram_ch->fld_aud_fifo_en
sram_ch
sram_ch
fld_aud_fifo_en
-----joern-----
(31,18,0)
(6,1,0)
(17,0,0)
(21,8,0)
(19,2,0)
(14,9,0)
(9,14,0)
(1,23,0)
(6,26,0)
(7,26,0)
(29,6,0)
(25,12,0)
(26,28,0)
(4,14,0)
(8,28,0)
(0,18,0)
(23,1,0)
(22,2,0)
(33,12,0)
(30,0,0)
(3,1,0)
(13,9,0)
(10,26,0)
(20,31,0)
(15,33,0)
(1,2,0)
(16,12,0)
(5,8,0)
(9,33,0)
(32,33,0)
(6,24,0)
(27,22,0)
(11,12,0)
(26,6,0)
(23,8,0)
(24,6,0)
(8,23,0)
(5,3,1)
(6,26,1)
(9,33,1)
(33,32,1)
(24,6,1)
(7,29,1)
(8,28,1)
(4,9,1)
(3,22,1)
(22,27,1)
(20,31,1)
(0,17,1)
(29,14,1)
(21,5,1)
(9,13,1)
(32,15,1)
(20,24,1)
(8,21,1)
(17,30,1)
(6,1,1)
(30,14,1)
(14,9,1)
(14,4,1)
(26,28,1)
(23,8,1)
(10,7,1)
(31,0,1)
(13,1,1)
(26,10,1)
(27,24,1)
(27,33,1)
(1,23,1)
(4,24,2)
(14,9,2)
(13,24,2)
(26,14,2)
(9,33,2)
(23,8,2)
(9,24,2)
(3,24,2)
(6,1,2)
(29,14,2)
(14,24,2)
(10,14,2)
(24,6,2)
(21,24,2)
(8,24,2)
(27,24,2)
(31,14,2)
(6,26,2)
(24,14,2)
(1,23,2)
(23,24,2)
(26,28,2)
(1,24,2)
(6,14,2)
(22,24,2)
(20,31,2)
(17,14,2)
(8,28,2)
(0,14,2)
(7,14,2)
(30,14,2)
(5,24,2)
-----------------------------------
(0,pr_err("ERROR: %s()
(1,tmp = cx_read(sram_ch->dma_ctl)
(2,)
(3,tmp)
(4,1000)
(5,sram_ch)
(6,tmp & sram_ch->fld_aud_fifo_en)
(7,sram_ch)
(8,sram_ch->dma_ctl)
(9,count++)
(10,fld_aud_fifo_en)
(11,do)
(12,)
(13,count)
(14,count++ > 1000)
(15,count)
(16,tmp)
(17,__func__)
(18,)
(19,if (count++ > 1000)
(20,RET)
(21,dma_ctl)
(22,udelay(10)
(23,cx_read(sram_ch->dma_ctl)
(24,!(tmp & sram_ch->fld_aud_fifo_en)
(25,count)
(26,sram_ch->fld_aud_fifo_en)
(27,10)
(28,struct sram_channel *sram_ch)
(29,tmp)
(30,"ERROR: %s()
(31,return;)
(32,0)
(33,count = 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^