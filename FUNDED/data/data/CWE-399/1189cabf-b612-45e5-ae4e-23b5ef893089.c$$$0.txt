-----label-----
1
-----code-----
static irqreturn_t msm_slim_interrupt(int irq, void *d)
{
	struct msm_slim_ctrl *dev = d;
	u32 pstat;
	u32 stat = readl_relaxed(dev->base + MGR_INT_STAT);

	if (stat & MGR_INT_TX_MSG_SENT || stat & MGR_INT_TX_NACKED_2) {
		if (stat & MGR_INT_TX_MSG_SENT)
			writel_relaxed(MGR_INT_TX_MSG_SENT,
					dev->base + MGR_INT_CLR);
		else {
			u32 mgr_stat = readl_relaxed(dev->base + MGR_STATUS);
			u32 mgr_ie_stat = readl_relaxed(dev->base +
						MGR_IE_STAT);
			u32 frm_stat = readl_relaxed(dev->base + FRM_STAT);
			u32 frm_cfg = readl_relaxed(dev->base + FRM_CFG);
			u32 frm_intr_stat = readl_relaxed(dev->base +
						FRM_INT_STAT);
			u32 frm_ie_stat = readl_relaxed(dev->base +
						FRM_IE_STAT);
			u32 intf_stat = readl_relaxed(dev->base + INTF_STAT);
			u32 intf_intr_stat = readl_relaxed(dev->base +
						INTF_INT_STAT);
			u32 intf_ie_stat = readl_relaxed(dev->base +
						INTF_IE_STAT);

			writel_relaxed(MGR_INT_TX_NACKED_2,
					dev->base + MGR_INT_CLR);
			pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",
					stat, mgr_stat);
			pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat);
			pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",
					frm_intr_stat, frm_stat);
			pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",
					frm_cfg, frm_ie_stat);
			pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",
					intf_intr_stat, intf_stat);
			pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat);

			dev->err = -EIO;
		}
		/*
		 * Guarantee that interrupt clear bit write goes through before
		 * signalling completion/exiting ISR
		 */
		mb();
		if (dev->wr_comp)
			complete(dev->wr_comp);
	}
	if (stat & MGR_INT_RX_MSG_RCVD) {
		u32 rx_buf[10];
		u32 mc, mt;
		u8 len, i;
		rx_buf[0] = readl_relaxed(dev->base + MGR_RX_MSG);
		len = rx_buf[0] & 0x1F;
		for (i = 1; i < ((len + 3) >> 2); i++) {
			rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +
						(4 * i));
			dev_dbg(dev->dev, "reading data: %x\n", rx_buf[i]);
		}
		mt = (rx_buf[0] >> 5) & 0x7;
		mc = (rx_buf[0] >> 8) & 0xff;
		dev_dbg(dev->dev, "MC: %x, MT: %x\n", mc, mt);
		if (mt == SLIM_MSG_MT_DEST_REFERRED_USER ||
				mt == SLIM_MSG_MT_SRC_REFERRED_USER) {
			u8 laddr = (u8)((rx_buf[0] >> 16) & 0xFF);
			struct msm_slim_sat *sat = addr_to_sat(dev, laddr);
			if (sat)
				msm_sat_enqueue(sat, rx_buf, len);
			else
				dev_err(dev->dev, "unknown sat:%d message",
						laddr);
			writel_relaxed(MGR_INT_RX_MSG_RCVD,
					dev->base + MGR_INT_CLR);
			/*
			 * Guarantee that CLR bit write goes through before
			 * queuing work
			 */
			mb();
			if (sat)
				queue_work(sat->wq, &sat->wd);
		} else if (mt == SLIM_MSG_MT_CORE &&
			mc == SLIM_MSG_MC_REPORT_PRESENT) {
			u8 e_addr[6];
			msm_get_eaddr(e_addr, rx_buf);
			msm_slim_rx_enqueue(dev, rx_buf, len);
			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +
						MGR_INT_CLR);
			/*
			 * Guarantee that CLR bit write goes through
			 * before signalling completion
			 */
			mb();
			complete(&dev->rx_msgq_notify);
		} else if (mt == SLIM_MSG_MT_CORE &&
			mc == SLIM_MSG_MC_REPORT_ABSENT) {
			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +
						MGR_INT_CLR);
			/*
			 * Guarantee that CLR bit write goes through
			 * before signalling completion
			 */
			mb();
			complete(&dev->rx_msgq_notify);

		} else if (mc == SLIM_MSG_MC_REPLY_INFORMATION ||
				mc == SLIM_MSG_MC_REPLY_VALUE) {
			msm_slim_rx_enqueue(dev, rx_buf, len);
			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +
						MGR_INT_CLR);
			/*
			 * Guarantee that CLR bit write goes through
			 * before signalling completion
			 */
			mb();
			complete(&dev->rx_msgq_notify);
		} else if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {
			u8 *buf = (u8 *)rx_buf;
			u8 l_addr = buf[2];
			u16 ele = (u16)buf[4] << 4;
			ele |= ((buf[3] & 0xf0) >> 4);
			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",
					l_addr, ele);
			for (i = 0; i < len - 5; i++)
				dev_err(dev->dev, "offset:0x%x:bit mask:%x",
						i, buf[i+5]);
			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +
						MGR_INT_CLR);
			/*
			 * Guarantee that CLR bit write goes through
			 * before exiting
			 */
			mb();
		} else {
			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",
						mc, mt, len);
			for (i = 0; i < ((len + 3) >> 2); i++)
				dev_err(dev->dev, "error msg: %x", rx_buf[i]);
			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +
						MGR_INT_CLR);
			/*
			 * Guarantee that CLR bit write goes through
			 * before exiting
			 */
			mb();
		}
	}
	if (stat & MGR_INT_RECFG_DONE) {
		writel_relaxed(MGR_INT_RECFG_DONE, dev->base + MGR_INT_CLR);
		/*
		 * Guarantee that CLR bit write goes through
		 * before exiting ISR
		 */
		mb();
		complete(&dev->reconf);
	}
	pstat = readl_relaxed(PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver));
	if (pstat != 0) {
		int i = 0;
		for (i = dev->pipe_b; i < MSM_SLIM_NPORTS; i++) {
			if (pstat & 1 << i) {
				u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,
							i, dev->ver));
				if (val & (1 << 19)) {
					dev->ctrl.ports[i].err =
						SLIM_P_DISCONNECT;
					dev->pipes[i-dev->pipe_b].connected =
							false;
					/*
					 * SPS will call completion since
					 * ERROR flags are registered
					 */
				} else if (val & (1 << 2))
					dev->ctrl.ports[i].err =
							SLIM_P_OVERFLOW;
				else if (val & (1 << 3))
					dev->ctrl.ports[i].err =
						SLIM_P_UNDERFLOW;
			}
			writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,
							dev->ver));
		}
		/*
		 * Guarantee that port interrupt bit(s) clearing writes go
		 * through before exiting ISR
		 */
		mb();
	}

	return IRQ_HANDLED;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
6,7
6,8
8,9
10,11
10,12
12,13
12,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
16,17
17,18
17,19
18,19
20,21
20,22
20,23
23,24
24,25
26,27
27,28
27,29
28,29
30,31
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
42,44
43,44
43,45
44,45
47,48
49,50
49,51
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
59,60
61,62
61,63
61,64
62,63
62,64
62,65
63,64
63,65
64,65
66,67
68,69
69,70
69,71
69,72
70,71
72,73
74,75
74,76
75,76
75,77
76,77
79,80
81,82
81,83
81,84
81,85
81,86
81,87
81,88
81,89
81,90
81,91
81,92
81,93
81,94
81,95
81,96
81,97
81,98
82,83
83,84
83,85
84,85
86,87
86,88
88,89
89,90
89,91
90,91
92,93
92,94
93,94
93,95
94,95
97,98
99,100
100,101
100,102
101,102
103,104
103,105
105,106
106,107
106,108
107,108
109,110
109,111
110,111
110,112
111,112
114,115
116,117
117,118
117,119
118,119
120,121
120,122
122,123
123,124
123,125
124,125
126,127
126,128
127,128
127,129
128,129
131,132
133,134
134,135
134,136
135,136
137,138
137,139
139,140
140,141
140,142
141,142
143,144
143,145
144,145
144,146
145,146
148,149
150,151
151,152
151,153
152,153
154,155
154,156
156,157
157,158
157,159
158,159
160,161
160,162
161,162
161,163
162,163
165,166
167,168
168,169
168,170
169,170
171,172
171,173
173,174
174,175
174,176
175,176
177,178
177,179
178,179
178,180
179,180
182,183
184,185
185,186
185,187
186,187
188,189
188,190
190,191
191,192
191,193
192,193
194,195
194,196
195,196
195,197
196,197
199,200
201,202
202,203
202,204
203,204
205,206
205,207
207,208
208,209
208,210
209,210
211,212
211,213
212,213
212,214
213,214
216,217
218,219
219,220
219,221
220,221
222,223
222,224
224,225
225,226
225,227
226,227
228,229
228,230
229,230
229,231
230,231
233,234
235,236
236,237
236,238
236,239
237,238
239,240
241,242
241,243
242,243
242,244
243,244
246,247
248,249
249,250
249,251
249,252
249,253
250,251
253,254
255,256
257,258
258,259
258,260
258,261
259,260
262,263
264,265
265,266
265,267
265,268
265,269
266,267
269,270
271,272
273,274
274,275
274,276
274,277
274,278
275,276
278,279
280,281
282,283
283,284
283,285
283,286
283,287
284,285
287,288
289,290
291,292
292,293
292,294
292,295
293,294
296,297
298,299
299,300
299,301
300,301
300,302
301,302
304,305
305,306
307,308
308,309
309,310
311,312
311,313
312,313
312,314
313,314
316,317
317,318
317,319
318,319
320,321
320,322
321,322
324,325
324,326
325,326
325,327
326,327
328,329
330,331
330,332
330,333
330,334
330,335
330,336
330,337
330,338
330,339
330,340
331,332
332,333
332,334
333,334
335,336
335,337
337,338
339,340
340,341
340,342
340,343
341,342
343,344
345,346
347,348
348,349
348,350
348,351
349,350
351,352
353,354
355,356
356,357
356,358
357,358
357,359
358,359
361,362
361,363
362,363
364,365
364,366
365,366
365,367
366,367
369,370
371,372
372,373
372,374
373,374
375,376
375,377
376,377
376,378
377,378
381,382
381,383
381,384
381,385
382,383
383,384
383,385
384,385
387,388
387,389
388,389
390,391
391,392
391,393
392,393
393,394
393,395
394,395
398,399
399,400
401,402
401,403
402,403
403,404
403,405
404,405
404,406
405,406
407,408
409,410
409,411
410,411
412,413
412,414
413,414
413,415
414,415
414,416
415,416
418,419
420,421
421,422
421,423
423,424
425,426
426,427
426,428
426,429
426,430
427,428
429,430
429,431
430,431
434,435
434,436
435,436
437,438
439,440
440,441
440,442
441,442
443,444
443,445
444,445
445,446
445,447
446,447
446,448
447,448
452,453
453,454
453,455
454,455
456,457
456,458
457,458
458,459
458,460
459,460
459,461
460,461
465,466
466,467
466,468
466,469
466,470
466,471
467,468
469,470
469,471
470,471
474,475
476,477
478,479
478,480
478,481
479,480
479,481
480,481
480,482
481,482
483,484
485,486
485,487
486,487
488,489
490,491
490,492
490,493
490,494
490,495
490,496
491,492
492,493
492,494
493,494
495,496
495,497
497,498
498,499
498,500
499,500
500,501
502,503
502,504
503,504
504,505
504,506
505,506
505,507
506,507
511,512
512,513
512,514
513,514
515,516
515,517
515,518
518,519
519,520
519,521
519,522
520,521
522,523
524,525
526,527
526,528
526,529
527,528
529,530
530,531
530,532
530,533
530,534
531,532
533,534
535,536
537,538
539,540
540,541
540,542
540,543
540,544
541,542
543,544
543,545
544,545
548,549
550,551
551,552
551,553
551,554
552,553
554,555
556,557
556,558
557,558
557,559
558,559
561,562
563,564
564,565
565,566
567,568
567,569
568,569
570,571
571,572
571,573
571,574
572,573
574,575
574,576
575,576
578,579
579,580
579,581
580,581
583,584
583,585
583,586
584,585
584,586
585,586
585,587
586,587
588,589
590,591
590,592
591,592
593,594
595,596
595,597
595,598
595,599
595,600
595,601
596,597
597,598
597,599
598,599
600,601
600,602
602,603
604,605
605,606
605,607
605,608
606,607
608,609
610,611
612,613
613,614
613,615
613,616
613,617
614,615
616,617
618,619
620,621
622,623
623,624
623,625
623,626
624,625
626,627
628,629
628,630
629,630
629,631
630,631
633,634
635,636
636,637
637,638
639,640
640,641
640,642
641,642
643,644
644,645
644,646
645,646
648,649
648,650
648,651
649,650
649,651
650,651
650,652
651,652
653,654
655,656
655,657
656,657
658,659
660,661
660,662
660,663
661,662
662,663
662,664
662,665
663,664
665,666
667,668
667,669
668,669
668,670
669,670
672,673
674,675
675,676
676,677
678,679
679,680
679,681
680,681
682,683
683,684
683,685
684,685
687,688
687,689
687,690
688,689
688,690
689,690
689,691
690,691
692,693
694,695
694,696
695,696
697,698
699,700
699,701
699,702
699,703
700,701
701,702
701,703
701,704
701,705
702,703
704,705
706,707
708,709
710,711
711,712
711,713
711,714
712,713
714,715
716,717
716,718
717,718
717,719
718,719
721,722
723,724
724,725
725,726
727,728
728,729
728,730
729,730
731,732
732,733
732,734
733,734
736,737
736,738
736,739
737,738
737,739
738,739
740,741
742,743
742,744
742,745
742,746
742,747
742,748
742,749
742,750
743,744
744,745
744,746
745,746
747,748
747,749
747,750
750,751
751,752
751,753
752,753
752,754
753,754
755,756
757,758
759,760
760,761
760,762
761,762
763,764
763,765
765,766
766,767
766,768
767,768
770,771
771,772
771,773
772,773
774,775
774,776
776,777
777,778
777,779
778,779
778,780
779,780
779,781
780,781
783,784
783,785
784,785
788,789
789,790
789,791
790,791
792,793
793,794
793,795
794,795
795,796
795,797
796,797
796,798
797,798
802,803
803,804
803,805
803,806
803,807
803,808
804,805
806,807
806,808
807,808
811,812
813,814
815,816
815,817
815,818
815,819
816,817
817,818
817,819
818,819
821,822
821,823
822,823
824,825
824,826
825,826
828,829
829,830
831,832
832,833
832,834
832,835
832,836
832,837
833,834
835,836
835,837
836,837
840,841
842,843
842,844
843,844
845,846
845,847
846,847
849,850
850,851
850,852
850,853
851,852
853,854
855,856
855,857
856,857
856,858
857,858
860,861
862,863
863,864
864,865
866,867
866,868
866,869
866,870
867,868
868,869
868,870
868,871
868,872
868,873
868,874
869,870
871,872
871,873
872,873
876,877
878,879
880,881
882,883
882,884
882,885
882,886
883,884
884,885
884,886
885,886
888,889
888,890
889,890
891,892
892,893
892,894
893,894
894,895
894,896
895,896
899,900
900,901
902,903
903,904
903,905
903,906
903,907
904,905
906,907
906,908
907,908
911,912
911,913
912,913
914,915
916,917
917,918
917,919
917,920
918,919
920,921
922,923
922,924
923,924
923,925
924,925
927,928
929,930
930,931
931,932
933,934
933,935
934,935
934,936
935,936
937,938
939,940
939,941
939,942
940,941
941,942
941,943
941,944
942,943
944,945
946,947
946,948
947,948
947,949
948,949
951,952
953,954
954,955
955,956
957,958
958,959
958,960
959,960
961,962
962,963
962,964
963,964
966,967
967,968
967,969
968,969
970,971
970,972
971,972
973,974
973,975
973,976
974,975
976,977
978,979
978,980
979,980
982,983
982,984
983,984
983,985
984,985
987,988
987,989
987,990
988,989
989,990
989,991
991,992
991,993
993,994
995,996
995,997
995,998
995,999
996,997
997,998
997,999
998,999
1000,1001
1000,1002
1001,1002
1004,1005
1004,1006
1005,1006
1007,1008
1009,1010
1010,1011
1012,1013
1012,1014
1013,1014
1013,1015
1014,1015
1014,1016
1015,1016
1017,1018
1017,1019
1019,1020
1021,1022
1021,1023
1022,1023
1023,1024
1023,1025
1024,1025
1026,1027
1026,1028
1028,1029
1029,1030
1029,1031
1030,1031
1032,1033
1032,1034
1032,1035
1032,1036
1033,1034
1035,1036
1037,1038
1039,1040
1039,1041
1040,1041
1043,1044
1043,1045
1043,1046
1044,1045
1044,1046
1045,1046
1047,1048
1048,1049
1048,1050
1051,1052
1051,1053
1052,1053
1053,1054
1053,1055
1054,1055
1054,1056
1055,1056
1055,1057
1056,1057
1056,1058
1057,1058
1057,1059
1058,1059
1062,1063
1065,1066
1067,1068
1068,1069
1068,1070
1069,1070
1069,1071
1070,1071
1070,1072
1071,1072
1071,1073
1072,1073
1075,1076
1075,1077
1076,1077
1078,1079
1078,1080
1079,1080
1084,1085
1084,1086
1084,1087
1085,1086
1085,1087
1086,1087
1088,1089
1089,1090
1089,1091
1092,1093
1093,1094
1093,1095
1094,1095
1094,1096
1095,1096
1095,1097
1096,1097
1096,1098
1097,1098
1097,1099
1098,1099
1102,1103
1105,1106
1107,1108
1107,1109
1108,1109
1108,1110
1109,1110
1111,1112
1112,1113
1112,1114
1115,1116
1116,1117
1116,1118
1117,1118
1117,1119
1118,1119
1118,1120
1119,1120
1119,1121
1120,1121
1120,1122
1121,1122
1125,1126
1128,1129
1130,1131
1131,1132
1131,1133
1131,1134
1132,1133
1135,1136
1135,1137
1135,1138
1136,1137
1138,1139
1140,1141
1140,1142
1141,1142
1144,1145
1145,1146
1146,1147
1148,1149
1149,1150
-----nextToken-----
3,5,7,9,11,13,14,19,21,22,25,29,31,35,37,41,45,46,48,53,55,58,60,65,67,71,73,77,78,80,85,87,91,95,96,98,102,104,108,112,113,115,119,121,125,129,130,132,136,138,142,146,147,149,153,155,159,163,164,166,170,172,176,180,181,183,187,189,193,197,198,200,204,206,210,214,215,217,221,223,227,231,232,234,238,240,244,245,247,251,252,254,256,260,261,263,267,268,270,272,276,277,279,281,285,286,288,290,294,295,297,302,303,306,310,314,315,319,322,323,327,329,334,336,338,342,344,346,350,352,354,359,360,363,367,368,370,374,378,379,380,385,386,389,395,396,397,400,406,408,411,416,417,419,422,424,428,431,432,433,436,438,442,448,449,450,451,455,461,462,463,464,468,471,472,473,475,477,482,484,487,489,494,496,501,507,508,509,510,514,516,517,521,523,525,528,532,534,536,538,542,545,546,547,549,553,555,559,560,562,566,569,573,576,577,581,582,587,589,592,594,599,601,603,607,609,611,615,617,619,621,625,627,631,632,634,638,642,646,647,652,654,657,659,664,666,670,671,673,677,681,685,686,691,693,696,698,703,705,707,709,713,715,719,720,722,726,730,734,735,739,741,746,748,749,754,756,758,762,764,768,769,773,775,781,782,785,786,787,791,798,799,800,801,805,808,809,810,812,814,819,820,823,826,827,830,834,837,838,839,841,844,847,848,852,854,858,859,861,865,870,873,874,875,877,879,881,886,887,890,896,897,898,901,905,908,909,910,913,915,919,921,925,926,928,932,936,938,943,945,949,950,952,956,960,964,965,969,972,975,977,980,981,985,986,990,992,994,999,1002,1003,1006,1008,1011,1016,1018,1020,1025,1027,1031,1034,1036,1038,1041,1042,1046,1049,1050,1059,1060,1061,1063,1064,1066,1073,1074,1077,1080,1081,1082,1083,1087,1090,1091,1099,1100,1101,1103,1104,1106,1110,1113,1114,1122,1123,1124,1126,1127,1129,1133,1134,1137,1139,1142,1143,1147,1150
-----computeFrom-----
42,43
42,44
50,51
50,52
51,52
51,53
56,57
56,58
63,64
63,65
74,75
74,76
92,93
92,94
109,110
109,111
126,127
126,128
143,144
143,145
160,161
160,162
177,178
177,179
194,195
194,196
211,212
211,213
228,229
228,230
241,242
241,243
299,300
299,301
325,326
325,327
356,357
356,358
364,365
364,366
372,373
372,374
375,376
375,377
383,384
383,385
387,388
387,389
391,392
391,393
393,394
393,395
403,404
403,405
412,413
412,414
413,414
413,415
421,422
421,423
440,441
440,442
443,444
443,445
445,446
445,447
453,454
453,455
456,457
456,458
458,459
458,460
479,480
479,481
480,481
480,482
485,486
485,487
502,503
502,504
504,505
504,506
556,557
556,558
584,585
584,586
585,586
585,587
590,591
590,592
628,629
628,630
649,650
649,651
650,651
650,652
655,656
655,657
667,668
667,669
688,689
688,690
689,690
689,691
694,695
694,696
716,717
716,718
737,738
737,739
777,778
777,779
789,790
789,791
793,794
793,795
795,796
795,797
817,818
817,819
821,822
821,823
824,825
824,826
845,846
845,847
855,856
855,857
884,885
884,886
888,889
888,890
892,893
892,894
894,895
894,896
922,923
922,924
934,935
934,936
946,947
946,948
967,968
967,969
983,984
983,985
997,998
997,999
1004,1005
1004,1006
1014,1015
1014,1016
1017,1018
1017,1019
1044,1045
1044,1046
1048,1049
1048,1050
1053,1054
1053,1055
1068,1069
1068,1070
1075,1076
1075,1077
1085,1086
1085,1087
1089,1090
1089,1091
1093,1094
1093,1095
1108,1109
1108,1110
1112,1113
1112,1114
1116,1117
1116,1118
-----guardedBy-----
58,254
60,240
55,73
67,73
329,921
938,945
985,1016
1020,1126
-----guardedByNegation-----
65,254
487,879
589,654
592,877
587,879
657,877
652,879
696,877
739,877
1046,1110
1087,1110
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;UnaryExpression;IdExpression;Name;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;LiteralExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;IdExpression;Name;BinaryExpression;LiteralExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static irqreturn_t msm_slim_interrupt(int irq, void *d){	struct msm_slim_ctrl *dev = d;	u32 pstat;	u32 stat = readl_relaxed(dev->base + MGR_INT_STAT);	if (stat & MGR_INT_TX_MSG_SENT || stat & MGR_INT_TX_NACKED_2) {		if (stat & MGR_INT_TX_MSG_SENT)			writel_relaxed(MGR_INT_TX_MSG_SENT,					dev->base + MGR_INT_CLR);		else {			u32 mgr_stat = readl_relaxed(dev->base + MGR_STATUS);			u32 mgr_ie_stat = readl_relaxed(dev->base +						MGR_IE_STAT);			u32 frm_stat = readl_relaxed(dev->base + FRM_STAT);			u32 frm_cfg = readl_relaxed(dev->base + FRM_CFG);			u32 frm_intr_stat = readl_relaxed(dev->base +						FRM_INT_STAT);			u32 frm_ie_stat = readl_relaxed(dev->base +						FRM_IE_STAT);			u32 intf_stat = readl_relaxed(dev->base + INTF_STAT);			u32 intf_intr_stat = readl_relaxed(dev->base +						INTF_INT_STAT);			u32 intf_ie_stat = readl_relaxed(dev->base +						INTF_IE_STAT);			writel_relaxed(MGR_INT_TX_NACKED_2,					dev->base + MGR_INT_CLR);			pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",					stat, mgr_stat);			pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat);			pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",					frm_intr_stat, frm_stat);			pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",					frm_cfg, frm_ie_stat);			pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",					intf_intr_stat, intf_stat);			pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat);			dev->err = -EIO;		}		/*		 * Guarantee that interrupt clear bit write goes through before		 * signalling completion/exiting ISR		 */		mb();		if (dev->wr_comp)			complete(dev->wr_comp);	}	if (stat & MGR_INT_RX_MSG_RCVD) {		u32 rx_buf[10];		u32 mc, mt;		u8 len, i;		rx_buf[0] = readl_relaxed(dev->base + MGR_RX_MSG);		len = rx_buf[0] & 0x1F;		for (i = 1; i < ((len + 3) >> 2); i++) {			rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +						(4 * i));			dev_dbg(dev->dev, "reading data: %x\n", rx_buf[i]);		}		mt = (rx_buf[0] >> 5) & 0x7;		mc = (rx_buf[0] >> 8) & 0xff;		dev_dbg(dev->dev, "MC: %x, MT: %x\n", mc, mt);		if (mt == SLIM_MSG_MT_DEST_REFERRED_USER ||				mt == SLIM_MSG_MT_SRC_REFERRED_USER) {			u8 laddr = (u8)((rx_buf[0] >> 16) & 0xFF);			struct msm_slim_sat *sat = addr_to_sat(dev, laddr);			if (sat)				msm_sat_enqueue(sat, rx_buf, len);			else				dev_err(dev->dev, "unknown sat:%d message",						laddr);			writel_relaxed(MGR_INT_RX_MSG_RCVD,					dev->base + MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through before			 * queuing work			 */			mb();			if (sat)				queue_work(sat->wq, &sat->wd);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_PRESENT) {			u8 e_addr[6];			msm_get_eaddr(e_addr, rx_buf);			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_ABSENT) {			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPLY_INFORMATION ||				mc == SLIM_MSG_MC_REPLY_VALUE) {			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		} else {			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}	}	if (stat & MGR_INT_RECFG_DONE) {		writel_relaxed(MGR_INT_RECFG_DONE, dev->base + MGR_INT_CLR);		/*		 * Guarantee that CLR bit write goes through		 * before exiting ISR		 */		mb();		complete(&dev->reconf);	}	pstat = readl_relaxed(PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver));	if (pstat != 0) {		int i = 0;		for (i = dev->pipe_b; i < MSM_SLIM_NPORTS; i++) {			if (pstat & 1 << i) {				u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));				if (val & (1 << 19)) {					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				} else if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;			}			writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,							dev->ver));		}		/*		 * Guarantee that port interrupt bit(s) clearing writes go		 * through before exiting ISR		 */		mb();	}	return IRQ_HANDLED;}
static irqreturn_t
irqreturn_t
msm_slim_interrupt(int irq, void *d)
msm_slim_interrupt
int irq
int
irq
irq
void *d
void
*d
*
d
{	struct msm_slim_ctrl *dev = d;	u32 pstat;	u32 stat = readl_relaxed(dev->base + MGR_INT_STAT);	if (stat & MGR_INT_TX_MSG_SENT || stat & MGR_INT_TX_NACKED_2) {		if (stat & MGR_INT_TX_MSG_SENT)			writel_relaxed(MGR_INT_TX_MSG_SENT,					dev->base + MGR_INT_CLR);		else {			u32 mgr_stat = readl_relaxed(dev->base + MGR_STATUS);			u32 mgr_ie_stat = readl_relaxed(dev->base +						MGR_IE_STAT);			u32 frm_stat = readl_relaxed(dev->base + FRM_STAT);			u32 frm_cfg = readl_relaxed(dev->base + FRM_CFG);			u32 frm_intr_stat = readl_relaxed(dev->base +						FRM_INT_STAT);			u32 frm_ie_stat = readl_relaxed(dev->base +						FRM_IE_STAT);			u32 intf_stat = readl_relaxed(dev->base + INTF_STAT);			u32 intf_intr_stat = readl_relaxed(dev->base +						INTF_INT_STAT);			u32 intf_ie_stat = readl_relaxed(dev->base +						INTF_IE_STAT);			writel_relaxed(MGR_INT_TX_NACKED_2,					dev->base + MGR_INT_CLR);			pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",					stat, mgr_stat);			pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat);			pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",					frm_intr_stat, frm_stat);			pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",					frm_cfg, frm_ie_stat);			pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",					intf_intr_stat, intf_stat);			pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat);			dev->err = -EIO;		}		/*		 * Guarantee that interrupt clear bit write goes through before		 * signalling completion/exiting ISR		 */		mb();		if (dev->wr_comp)			complete(dev->wr_comp);	}	if (stat & MGR_INT_RX_MSG_RCVD) {		u32 rx_buf[10];		u32 mc, mt;		u8 len, i;		rx_buf[0] = readl_relaxed(dev->base + MGR_RX_MSG);		len = rx_buf[0] & 0x1F;		for (i = 1; i < ((len + 3) >> 2); i++) {			rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +						(4 * i));			dev_dbg(dev->dev, "reading data: %x\n", rx_buf[i]);		}		mt = (rx_buf[0] >> 5) & 0x7;		mc = (rx_buf[0] >> 8) & 0xff;		dev_dbg(dev->dev, "MC: %x, MT: %x\n", mc, mt);		if (mt == SLIM_MSG_MT_DEST_REFERRED_USER ||				mt == SLIM_MSG_MT_SRC_REFERRED_USER) {			u8 laddr = (u8)((rx_buf[0] >> 16) & 0xFF);			struct msm_slim_sat *sat = addr_to_sat(dev, laddr);			if (sat)				msm_sat_enqueue(sat, rx_buf, len);			else				dev_err(dev->dev, "unknown sat:%d message",						laddr);			writel_relaxed(MGR_INT_RX_MSG_RCVD,					dev->base + MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through before			 * queuing work			 */			mb();			if (sat)				queue_work(sat->wq, &sat->wd);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_PRESENT) {			u8 e_addr[6];			msm_get_eaddr(e_addr, rx_buf);			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_ABSENT) {			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPLY_INFORMATION ||				mc == SLIM_MSG_MC_REPLY_VALUE) {			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		} else {			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}	}	if (stat & MGR_INT_RECFG_DONE) {		writel_relaxed(MGR_INT_RECFG_DONE, dev->base + MGR_INT_CLR);		/*		 * Guarantee that CLR bit write goes through		 * before exiting ISR		 */		mb();		complete(&dev->reconf);	}	pstat = readl_relaxed(PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver));	if (pstat != 0) {		int i = 0;		for (i = dev->pipe_b; i < MSM_SLIM_NPORTS; i++) {			if (pstat & 1 << i) {				u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));				if (val & (1 << 19)) {					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				} else if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;			}			writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,							dev->ver));		}		/*		 * Guarantee that port interrupt bit(s) clearing writes go		 * through before exiting ISR		 */		mb();	}	return IRQ_HANDLED;}
struct msm_slim_ctrl *dev = d;
struct msm_slim_ctrl *dev = d;
struct msm_slim_ctrl
msm_slim_ctrl
*dev = d
*
dev
= d
d
d
u32 pstat;
u32 pstat;
u32
u32
pstat
pstat
u32 stat = readl_relaxed(dev->base + MGR_INT_STAT);
u32 stat = readl_relaxed(dev->base + MGR_INT_STAT);
u32
u32
stat = readl_relaxed(dev->base + MGR_INT_STAT)
stat
= readl_relaxed(dev->base + MGR_INT_STAT)
readl_relaxed(dev->base + MGR_INT_STAT)
readl_relaxed
readl_relaxed
dev->base + MGR_INT_STAT
dev->base
dev
dev
base
MGR_INT_STAT
MGR_INT_STAT
if (stat & MGR_INT_TX_MSG_SENT || stat & MGR_INT_TX_NACKED_2) {		if (stat & MGR_INT_TX_MSG_SENT)			writel_relaxed(MGR_INT_TX_MSG_SENT,					dev->base + MGR_INT_CLR);		else {			u32 mgr_stat = readl_relaxed(dev->base + MGR_STATUS);			u32 mgr_ie_stat = readl_relaxed(dev->base +						MGR_IE_STAT);			u32 frm_stat = readl_relaxed(dev->base + FRM_STAT);			u32 frm_cfg = readl_relaxed(dev->base + FRM_CFG);			u32 frm_intr_stat = readl_relaxed(dev->base +						FRM_INT_STAT);			u32 frm_ie_stat = readl_relaxed(dev->base +						FRM_IE_STAT);			u32 intf_stat = readl_relaxed(dev->base + INTF_STAT);			u32 intf_intr_stat = readl_relaxed(dev->base +						INTF_INT_STAT);			u32 intf_ie_stat = readl_relaxed(dev->base +						INTF_IE_STAT);			writel_relaxed(MGR_INT_TX_NACKED_2,					dev->base + MGR_INT_CLR);			pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",					stat, mgr_stat);			pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat);			pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",					frm_intr_stat, frm_stat);			pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",					frm_cfg, frm_ie_stat);			pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",					intf_intr_stat, intf_stat);			pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat);			dev->err = -EIO;		}		/*		 * Guarantee that interrupt clear bit write goes through before		 * signalling completion/exiting ISR		 */		mb();		if (dev->wr_comp)			complete(dev->wr_comp);	}
stat & MGR_INT_TX_MSG_SENT || stat & MGR_INT_TX_NACKED_2
stat & MGR_INT_TX_MSG_SENT
stat
stat
MGR_INT_TX_MSG_SENT
MGR_INT_TX_MSG_SENT
stat & MGR_INT_TX_NACKED_2
stat
stat
MGR_INT_TX_NACKED_2
MGR_INT_TX_NACKED_2
{		if (stat & MGR_INT_TX_MSG_SENT)			writel_relaxed(MGR_INT_TX_MSG_SENT,					dev->base + MGR_INT_CLR);		else {			u32 mgr_stat = readl_relaxed(dev->base + MGR_STATUS);			u32 mgr_ie_stat = readl_relaxed(dev->base +						MGR_IE_STAT);			u32 frm_stat = readl_relaxed(dev->base + FRM_STAT);			u32 frm_cfg = readl_relaxed(dev->base + FRM_CFG);			u32 frm_intr_stat = readl_relaxed(dev->base +						FRM_INT_STAT);			u32 frm_ie_stat = readl_relaxed(dev->base +						FRM_IE_STAT);			u32 intf_stat = readl_relaxed(dev->base + INTF_STAT);			u32 intf_intr_stat = readl_relaxed(dev->base +						INTF_INT_STAT);			u32 intf_ie_stat = readl_relaxed(dev->base +						INTF_IE_STAT);			writel_relaxed(MGR_INT_TX_NACKED_2,					dev->base + MGR_INT_CLR);			pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",					stat, mgr_stat);			pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat);			pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",					frm_intr_stat, frm_stat);			pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",					frm_cfg, frm_ie_stat);			pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",					intf_intr_stat, intf_stat);			pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat);			dev->err = -EIO;		}		/*		 * Guarantee that interrupt clear bit write goes through before		 * signalling completion/exiting ISR		 */		mb();		if (dev->wr_comp)			complete(dev->wr_comp);	}
if (stat & MGR_INT_TX_MSG_SENT)			writel_relaxed(MGR_INT_TX_MSG_SENT,					dev->base + MGR_INT_CLR);		else {			u32 mgr_stat = readl_relaxed(dev->base + MGR_STATUS);			u32 mgr_ie_stat = readl_relaxed(dev->base +						MGR_IE_STAT);			u32 frm_stat = readl_relaxed(dev->base + FRM_STAT);			u32 frm_cfg = readl_relaxed(dev->base + FRM_CFG);			u32 frm_intr_stat = readl_relaxed(dev->base +						FRM_INT_STAT);			u32 frm_ie_stat = readl_relaxed(dev->base +						FRM_IE_STAT);			u32 intf_stat = readl_relaxed(dev->base + INTF_STAT);			u32 intf_intr_stat = readl_relaxed(dev->base +						INTF_INT_STAT);			u32 intf_ie_stat = readl_relaxed(dev->base +						INTF_IE_STAT);			writel_relaxed(MGR_INT_TX_NACKED_2,					dev->base + MGR_INT_CLR);			pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",					stat, mgr_stat);			pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat);			pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",					frm_intr_stat, frm_stat);			pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",					frm_cfg, frm_ie_stat);			pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",					intf_intr_stat, intf_stat);			pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat);			dev->err = -EIO;		}
stat & MGR_INT_TX_MSG_SENT
stat
stat
MGR_INT_TX_MSG_SENT
MGR_INT_TX_MSG_SENT
writel_relaxed(MGR_INT_TX_MSG_SENT,					dev->base + MGR_INT_CLR);
writel_relaxed(MGR_INT_TX_MSG_SENT,					dev->base + MGR_INT_CLR)
writel_relaxed
writel_relaxed
MGR_INT_TX_MSG_SENT
MGR_INT_TX_MSG_SENT
dev->base + MGR_INT_CLR
dev->base
dev
dev
base
MGR_INT_CLR
MGR_INT_CLR
{			u32 mgr_stat = readl_relaxed(dev->base + MGR_STATUS);			u32 mgr_ie_stat = readl_relaxed(dev->base +						MGR_IE_STAT);			u32 frm_stat = readl_relaxed(dev->base + FRM_STAT);			u32 frm_cfg = readl_relaxed(dev->base + FRM_CFG);			u32 frm_intr_stat = readl_relaxed(dev->base +						FRM_INT_STAT);			u32 frm_ie_stat = readl_relaxed(dev->base +						FRM_IE_STAT);			u32 intf_stat = readl_relaxed(dev->base + INTF_STAT);			u32 intf_intr_stat = readl_relaxed(dev->base +						INTF_INT_STAT);			u32 intf_ie_stat = readl_relaxed(dev->base +						INTF_IE_STAT);			writel_relaxed(MGR_INT_TX_NACKED_2,					dev->base + MGR_INT_CLR);			pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",					stat, mgr_stat);			pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat);			pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",					frm_intr_stat, frm_stat);			pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",					frm_cfg, frm_ie_stat);			pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",					intf_intr_stat, intf_stat);			pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat);			dev->err = -EIO;		}
u32 mgr_stat = readl_relaxed(dev->base + MGR_STATUS);
u32 mgr_stat = readl_relaxed(dev->base + MGR_STATUS);
u32
u32
mgr_stat = readl_relaxed(dev->base + MGR_STATUS)
mgr_stat
= readl_relaxed(dev->base + MGR_STATUS)
readl_relaxed(dev->base + MGR_STATUS)
readl_relaxed
readl_relaxed
dev->base + MGR_STATUS
dev->base
dev
dev
base
MGR_STATUS
MGR_STATUS
u32 mgr_ie_stat = readl_relaxed(dev->base +						MGR_IE_STAT);
u32 mgr_ie_stat = readl_relaxed(dev->base +						MGR_IE_STAT);
u32
u32
mgr_ie_stat = readl_relaxed(dev->base +						MGR_IE_STAT)
mgr_ie_stat
= readl_relaxed(dev->base +						MGR_IE_STAT)
readl_relaxed(dev->base +						MGR_IE_STAT)
readl_relaxed
readl_relaxed
dev->base +						MGR_IE_STAT
dev->base
dev
dev
base
MGR_IE_STAT
MGR_IE_STAT
u32 frm_stat = readl_relaxed(dev->base + FRM_STAT);
u32 frm_stat = readl_relaxed(dev->base + FRM_STAT);
u32
u32
frm_stat = readl_relaxed(dev->base + FRM_STAT)
frm_stat
= readl_relaxed(dev->base + FRM_STAT)
readl_relaxed(dev->base + FRM_STAT)
readl_relaxed
readl_relaxed
dev->base + FRM_STAT
dev->base
dev
dev
base
FRM_STAT
FRM_STAT
u32 frm_cfg = readl_relaxed(dev->base + FRM_CFG);
u32 frm_cfg = readl_relaxed(dev->base + FRM_CFG);
u32
u32
frm_cfg = readl_relaxed(dev->base + FRM_CFG)
frm_cfg
= readl_relaxed(dev->base + FRM_CFG)
readl_relaxed(dev->base + FRM_CFG)
readl_relaxed
readl_relaxed
dev->base + FRM_CFG
dev->base
dev
dev
base
FRM_CFG
FRM_CFG
u32 frm_intr_stat = readl_relaxed(dev->base +						FRM_INT_STAT);
u32 frm_intr_stat = readl_relaxed(dev->base +						FRM_INT_STAT);
u32
u32
frm_intr_stat = readl_relaxed(dev->base +						FRM_INT_STAT)
frm_intr_stat
= readl_relaxed(dev->base +						FRM_INT_STAT)
readl_relaxed(dev->base +						FRM_INT_STAT)
readl_relaxed
readl_relaxed
dev->base +						FRM_INT_STAT
dev->base
dev
dev
base
FRM_INT_STAT
FRM_INT_STAT
u32 frm_ie_stat = readl_relaxed(dev->base +						FRM_IE_STAT);
u32 frm_ie_stat = readl_relaxed(dev->base +						FRM_IE_STAT);
u32
u32
frm_ie_stat = readl_relaxed(dev->base +						FRM_IE_STAT)
frm_ie_stat
= readl_relaxed(dev->base +						FRM_IE_STAT)
readl_relaxed(dev->base +						FRM_IE_STAT)
readl_relaxed
readl_relaxed
dev->base +						FRM_IE_STAT
dev->base
dev
dev
base
FRM_IE_STAT
FRM_IE_STAT
u32 intf_stat = readl_relaxed(dev->base + INTF_STAT);
u32 intf_stat = readl_relaxed(dev->base + INTF_STAT);
u32
u32
intf_stat = readl_relaxed(dev->base + INTF_STAT)
intf_stat
= readl_relaxed(dev->base + INTF_STAT)
readl_relaxed(dev->base + INTF_STAT)
readl_relaxed
readl_relaxed
dev->base + INTF_STAT
dev->base
dev
dev
base
INTF_STAT
INTF_STAT
u32 intf_intr_stat = readl_relaxed(dev->base +						INTF_INT_STAT);
u32 intf_intr_stat = readl_relaxed(dev->base +						INTF_INT_STAT);
u32
u32
intf_intr_stat = readl_relaxed(dev->base +						INTF_INT_STAT)
intf_intr_stat
= readl_relaxed(dev->base +						INTF_INT_STAT)
readl_relaxed(dev->base +						INTF_INT_STAT)
readl_relaxed
readl_relaxed
dev->base +						INTF_INT_STAT
dev->base
dev
dev
base
INTF_INT_STAT
INTF_INT_STAT
u32 intf_ie_stat = readl_relaxed(dev->base +						INTF_IE_STAT);
u32 intf_ie_stat = readl_relaxed(dev->base +						INTF_IE_STAT);
u32
u32
intf_ie_stat = readl_relaxed(dev->base +						INTF_IE_STAT)
intf_ie_stat
= readl_relaxed(dev->base +						INTF_IE_STAT)
readl_relaxed(dev->base +						INTF_IE_STAT)
readl_relaxed
readl_relaxed
dev->base +						INTF_IE_STAT
dev->base
dev
dev
base
INTF_IE_STAT
INTF_IE_STAT
writel_relaxed(MGR_INT_TX_NACKED_2,					dev->base + MGR_INT_CLR);
writel_relaxed(MGR_INT_TX_NACKED_2,					dev->base + MGR_INT_CLR)
writel_relaxed
writel_relaxed
MGR_INT_TX_NACKED_2
MGR_INT_TX_NACKED_2
dev->base + MGR_INT_CLR
dev->base
dev
dev
base
MGR_INT_CLR
MGR_INT_CLR
pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",					stat, mgr_stat);
pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",					stat, mgr_stat)
pr_err
pr_err
"TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x"
stat
stat
mgr_stat
mgr_stat
pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat);
pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat)
pr_err
pr_err
"TX Nack MGR dump:ie_stat:0x%x"
mgr_ie_stat
mgr_ie_stat
pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",					frm_intr_stat, frm_stat);
pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",					frm_intr_stat, frm_stat)
pr_err
pr_err
"TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x"
frm_intr_stat
frm_intr_stat
frm_stat
frm_stat
pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",					frm_cfg, frm_ie_stat);
pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",					frm_cfg, frm_ie_stat)
pr_err
pr_err
"TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x"
frm_cfg
frm_cfg
frm_ie_stat
frm_ie_stat
pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",					intf_intr_stat, intf_stat);
pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",					intf_intr_stat, intf_stat)
pr_err
pr_err
"TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x"
intf_intr_stat
intf_intr_stat
intf_stat
intf_stat
pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat);
pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat)
pr_err
pr_err
"TX Nack INTF dump:ie_stat:0x%x"
intf_ie_stat
intf_ie_stat
dev->err = -EIO;
dev->err = -EIO
dev->err
dev
dev
err
-EIO
EIO
EIO
mb();
mb()
mb
mb
if (dev->wr_comp)			complete(dev->wr_comp);
dev->wr_comp
dev
dev
wr_comp
complete(dev->wr_comp);
complete(dev->wr_comp)
complete
complete
dev->wr_comp
dev
dev
wr_comp
if (stat & MGR_INT_RX_MSG_RCVD) {		u32 rx_buf[10];		u32 mc, mt;		u8 len, i;		rx_buf[0] = readl_relaxed(dev->base + MGR_RX_MSG);		len = rx_buf[0] & 0x1F;		for (i = 1; i < ((len + 3) >> 2); i++) {			rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +						(4 * i));			dev_dbg(dev->dev, "reading data: %x\n", rx_buf[i]);		}		mt = (rx_buf[0] >> 5) & 0x7;		mc = (rx_buf[0] >> 8) & 0xff;		dev_dbg(dev->dev, "MC: %x, MT: %x\n", mc, mt);		if (mt == SLIM_MSG_MT_DEST_REFERRED_USER ||				mt == SLIM_MSG_MT_SRC_REFERRED_USER) {			u8 laddr = (u8)((rx_buf[0] >> 16) & 0xFF);			struct msm_slim_sat *sat = addr_to_sat(dev, laddr);			if (sat)				msm_sat_enqueue(sat, rx_buf, len);			else				dev_err(dev->dev, "unknown sat:%d message",						laddr);			writel_relaxed(MGR_INT_RX_MSG_RCVD,					dev->base + MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through before			 * queuing work			 */			mb();			if (sat)				queue_work(sat->wq, &sat->wd);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_PRESENT) {			u8 e_addr[6];			msm_get_eaddr(e_addr, rx_buf);			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_ABSENT) {			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPLY_INFORMATION ||				mc == SLIM_MSG_MC_REPLY_VALUE) {			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		} else {			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}	}
stat & MGR_INT_RX_MSG_RCVD
stat
stat
MGR_INT_RX_MSG_RCVD
MGR_INT_RX_MSG_RCVD
{		u32 rx_buf[10];		u32 mc, mt;		u8 len, i;		rx_buf[0] = readl_relaxed(dev->base + MGR_RX_MSG);		len = rx_buf[0] & 0x1F;		for (i = 1; i < ((len + 3) >> 2); i++) {			rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +						(4 * i));			dev_dbg(dev->dev, "reading data: %x\n", rx_buf[i]);		}		mt = (rx_buf[0] >> 5) & 0x7;		mc = (rx_buf[0] >> 8) & 0xff;		dev_dbg(dev->dev, "MC: %x, MT: %x\n", mc, mt);		if (mt == SLIM_MSG_MT_DEST_REFERRED_USER ||				mt == SLIM_MSG_MT_SRC_REFERRED_USER) {			u8 laddr = (u8)((rx_buf[0] >> 16) & 0xFF);			struct msm_slim_sat *sat = addr_to_sat(dev, laddr);			if (sat)				msm_sat_enqueue(sat, rx_buf, len);			else				dev_err(dev->dev, "unknown sat:%d message",						laddr);			writel_relaxed(MGR_INT_RX_MSG_RCVD,					dev->base + MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through before			 * queuing work			 */			mb();			if (sat)				queue_work(sat->wq, &sat->wd);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_PRESENT) {			u8 e_addr[6];			msm_get_eaddr(e_addr, rx_buf);			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_ABSENT) {			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPLY_INFORMATION ||				mc == SLIM_MSG_MC_REPLY_VALUE) {			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		} else {			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}	}
u32 rx_buf[10];
u32 rx_buf[10];
u32
u32
rx_buf[10]
rx_buf
[10]
10
u32 mc, mt;
u32 mc, mt;
u32
u32
mc
mc
mt
mt
u8 len, i;
u8 len, i;
u8
u8
len
len
i
i
rx_buf[0] = readl_relaxed(dev->base + MGR_RX_MSG);
rx_buf[0] = readl_relaxed(dev->base + MGR_RX_MSG)
rx_buf[0]
rx_buf
rx_buf
0
readl_relaxed(dev->base + MGR_RX_MSG)
readl_relaxed
readl_relaxed
dev->base + MGR_RX_MSG
dev->base
dev
dev
base
MGR_RX_MSG
MGR_RX_MSG
len = rx_buf[0] & 0x1F;
len = rx_buf[0] & 0x1F
len
len
rx_buf[0] & 0x1F
rx_buf[0]
rx_buf
rx_buf
0
0x1F
for (i = 1; i < ((len + 3) >> 2); i++) {			rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +						(4 * i));			dev_dbg(dev->dev, "reading data: %x\n", rx_buf[i]);		}
i = 1;
i = 1
i
i
1
i < ((len + 3) >> 2)
i
i
((len + 3) >> 2)
(len + 3) >> 2
(len + 3)
len + 3
len
len
3
2
i++
i
i
{			rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +						(4 * i));			dev_dbg(dev->dev, "reading data: %x\n", rx_buf[i]);		}
rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +						(4 * i));
rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +						(4 * i))
rx_buf[i]
rx_buf
rx_buf
i
i
readl_relaxed(dev->base + MGR_RX_MSG +						(4 * i))
readl_relaxed
readl_relaxed
dev->base + MGR_RX_MSG +						(4 * i)
dev->base + MGR_RX_MSG
dev->base
dev
dev
base
MGR_RX_MSG
MGR_RX_MSG
(4 * i)
4 * i
4
i
i
dev_dbg(dev->dev, "reading data: %x\n", rx_buf[i]);
dev_dbg(dev->dev, "reading data: %x\n", rx_buf[i])
dev_dbg
dev_dbg
dev->dev
dev
dev
dev
"reading data: %x\n"
rx_buf[i]
rx_buf
rx_buf
i
i
mt = (rx_buf[0] >> 5) & 0x7;
mt = (rx_buf[0] >> 5) & 0x7
mt
mt
(rx_buf[0] >> 5) & 0x7
(rx_buf[0] >> 5)
rx_buf[0] >> 5
rx_buf[0]
rx_buf
rx_buf
0
5
0x7
mc = (rx_buf[0] >> 8) & 0xff;
mc = (rx_buf[0] >> 8) & 0xff
mc
mc
(rx_buf[0] >> 8) & 0xff
(rx_buf[0] >> 8)
rx_buf[0] >> 8
rx_buf[0]
rx_buf
rx_buf
0
8
0xff
dev_dbg(dev->dev, "MC: %x, MT: %x\n", mc, mt);
dev_dbg(dev->dev, "MC: %x, MT: %x\n", mc, mt)
dev_dbg
dev_dbg
dev->dev
dev
dev
dev
"MC: %x, MT: %x\n"
mc
mc
mt
mt
if (mt == SLIM_MSG_MT_DEST_REFERRED_USER ||				mt == SLIM_MSG_MT_SRC_REFERRED_USER) {			u8 laddr = (u8)((rx_buf[0] >> 16) & 0xFF);			struct msm_slim_sat *sat = addr_to_sat(dev, laddr);			if (sat)				msm_sat_enqueue(sat, rx_buf, len);			else				dev_err(dev->dev, "unknown sat:%d message",						laddr);			writel_relaxed(MGR_INT_RX_MSG_RCVD,					dev->base + MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through before			 * queuing work			 */			mb();			if (sat)				queue_work(sat->wq, &sat->wd);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_PRESENT) {			u8 e_addr[6];			msm_get_eaddr(e_addr, rx_buf);			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_ABSENT) {			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPLY_INFORMATION ||				mc == SLIM_MSG_MC_REPLY_VALUE) {			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		} else {			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}
mt == SLIM_MSG_MT_DEST_REFERRED_USER ||				mt == SLIM_MSG_MT_SRC_REFERRED_USER
mt == SLIM_MSG_MT_DEST_REFERRED_USER
mt
mt
SLIM_MSG_MT_DEST_REFERRED_USER
SLIM_MSG_MT_DEST_REFERRED_USER
mt == SLIM_MSG_MT_SRC_REFERRED_USER
mt
mt
SLIM_MSG_MT_SRC_REFERRED_USER
SLIM_MSG_MT_SRC_REFERRED_USER
{			u8 laddr = (u8)((rx_buf[0] >> 16) & 0xFF);			struct msm_slim_sat *sat = addr_to_sat(dev, laddr);			if (sat)				msm_sat_enqueue(sat, rx_buf, len);			else				dev_err(dev->dev, "unknown sat:%d message",						laddr);			writel_relaxed(MGR_INT_RX_MSG_RCVD,					dev->base + MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through before			 * queuing work			 */			mb();			if (sat)				queue_work(sat->wq, &sat->wd);		}
u8 laddr = (u8)((rx_buf[0] >> 16) & 0xFF);
u8 laddr = (u8)((rx_buf[0] >> 16) & 0xFF);
u8
u8
laddr = (u8)((rx_buf[0] >> 16) & 0xFF)
laddr
= (u8)((rx_buf[0] >> 16) & 0xFF)
(u8)((rx_buf[0] >> 16) & 0xFF)
(u8)
u8
u8
(rx_buf[0] >> 16) & 0xFF
(rx_buf[0] >> 16)
rx_buf[0] >> 16
rx_buf[0]
rx_buf
rx_buf
0
16
0xFF
struct msm_slim_sat *sat = addr_to_sat(dev, laddr);
struct msm_slim_sat *sat = addr_to_sat(dev, laddr);
struct msm_slim_sat
msm_slim_sat
*sat = addr_to_sat(dev, laddr)
*
sat
= addr_to_sat(dev, laddr)
addr_to_sat(dev, laddr)
addr_to_sat
addr_to_sat
dev
dev
laddr
laddr
if (sat)				msm_sat_enqueue(sat, rx_buf, len);			else				dev_err(dev->dev, "unknown sat:%d message",						laddr);
sat
sat
msm_sat_enqueue(sat, rx_buf, len);
msm_sat_enqueue(sat, rx_buf, len)
msm_sat_enqueue
msm_sat_enqueue
sat
sat
rx_buf
rx_buf
len
len
dev_err(dev->dev, "unknown sat:%d message",						laddr);
dev_err(dev->dev, "unknown sat:%d message",						laddr)
dev_err
dev_err
dev->dev
dev
dev
dev
"unknown sat:%d message"
laddr
laddr
writel_relaxed(MGR_INT_RX_MSG_RCVD,					dev->base + MGR_INT_CLR);
writel_relaxed(MGR_INT_RX_MSG_RCVD,					dev->base + MGR_INT_CLR)
writel_relaxed
writel_relaxed
MGR_INT_RX_MSG_RCVD
MGR_INT_RX_MSG_RCVD
dev->base + MGR_INT_CLR
dev->base
dev
dev
base
MGR_INT_CLR
MGR_INT_CLR
mb();
mb()
mb
mb
if (sat)				queue_work(sat->wq, &sat->wd);
sat
sat
queue_work(sat->wq, &sat->wd);
queue_work(sat->wq, &sat->wd)
queue_work
queue_work
sat->wq
sat
sat
wq
&sat->wd
sat->wd
sat
sat
wd
if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_PRESENT) {			u8 e_addr[6];			msm_get_eaddr(e_addr, rx_buf);			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_ABSENT) {			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPLY_INFORMATION ||				mc == SLIM_MSG_MC_REPLY_VALUE) {			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		} else {			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}
mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_PRESENT
mt == SLIM_MSG_MT_CORE
mt
mt
SLIM_MSG_MT_CORE
SLIM_MSG_MT_CORE
mc == SLIM_MSG_MC_REPORT_PRESENT
mc
mc
SLIM_MSG_MC_REPORT_PRESENT
SLIM_MSG_MC_REPORT_PRESENT
{			u8 e_addr[6];			msm_get_eaddr(e_addr, rx_buf);			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		}
u8 e_addr[6];
u8 e_addr[6];
u8
u8
e_addr[6]
e_addr
[6]
6
msm_get_eaddr(e_addr, rx_buf);
msm_get_eaddr(e_addr, rx_buf)
msm_get_eaddr
msm_get_eaddr
e_addr
e_addr
rx_buf
rx_buf
msm_slim_rx_enqueue(dev, rx_buf, len);
msm_slim_rx_enqueue(dev, rx_buf, len)
msm_slim_rx_enqueue
msm_slim_rx_enqueue
dev
dev
rx_buf
rx_buf
len
len
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR)
writel_relaxed
writel_relaxed
MGR_INT_RX_MSG_RCVD
MGR_INT_RX_MSG_RCVD
dev->base +						MGR_INT_CLR
dev->base
dev
dev
base
MGR_INT_CLR
MGR_INT_CLR
mb();
mb()
mb
mb
complete(&dev->rx_msgq_notify);
complete(&dev->rx_msgq_notify)
complete
complete
&dev->rx_msgq_notify
dev->rx_msgq_notify
dev
dev
rx_msgq_notify
if (mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_ABSENT) {			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPLY_INFORMATION ||				mc == SLIM_MSG_MC_REPLY_VALUE) {			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		} else {			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}
mt == SLIM_MSG_MT_CORE &&			mc == SLIM_MSG_MC_REPORT_ABSENT
mt == SLIM_MSG_MT_CORE
mt
mt
SLIM_MSG_MT_CORE
SLIM_MSG_MT_CORE
mc == SLIM_MSG_MC_REPORT_ABSENT
mc
mc
SLIM_MSG_MC_REPORT_ABSENT
SLIM_MSG_MC_REPORT_ABSENT
{			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		}
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR)
writel_relaxed
writel_relaxed
MGR_INT_RX_MSG_RCVD
MGR_INT_RX_MSG_RCVD
dev->base +						MGR_INT_CLR
dev->base
dev
dev
base
MGR_INT_CLR
MGR_INT_CLR
mb();
mb()
mb
mb
complete(&dev->rx_msgq_notify);
complete(&dev->rx_msgq_notify)
complete
complete
&dev->rx_msgq_notify
dev->rx_msgq_notify
dev
dev
rx_msgq_notify
if (mc == SLIM_MSG_MC_REPLY_INFORMATION ||				mc == SLIM_MSG_MC_REPLY_VALUE) {			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		} else if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		} else {			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}
mc == SLIM_MSG_MC_REPLY_INFORMATION ||				mc == SLIM_MSG_MC_REPLY_VALUE
mc == SLIM_MSG_MC_REPLY_INFORMATION
mc
mc
SLIM_MSG_MC_REPLY_INFORMATION
SLIM_MSG_MC_REPLY_INFORMATION
mc == SLIM_MSG_MC_REPLY_VALUE
mc
mc
SLIM_MSG_MC_REPLY_VALUE
SLIM_MSG_MC_REPLY_VALUE
{			msm_slim_rx_enqueue(dev, rx_buf, len);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before signalling completion			 */			mb();			complete(&dev->rx_msgq_notify);		}
msm_slim_rx_enqueue(dev, rx_buf, len);
msm_slim_rx_enqueue(dev, rx_buf, len)
msm_slim_rx_enqueue
msm_slim_rx_enqueue
dev
dev
rx_buf
rx_buf
len
len
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR)
writel_relaxed
writel_relaxed
MGR_INT_RX_MSG_RCVD
MGR_INT_RX_MSG_RCVD
dev->base +						MGR_INT_CLR
dev->base
dev
dev
base
MGR_INT_CLR
MGR_INT_CLR
mb();
mb()
mb
mb
complete(&dev->rx_msgq_notify);
complete(&dev->rx_msgq_notify)
complete
complete
&dev->rx_msgq_notify
dev->rx_msgq_notify
dev
dev
rx_msgq_notify
if (mc == SLIM_MSG_MC_REPORT_INFORMATION) {			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		} else {			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}
mc == SLIM_MSG_MC_REPORT_INFORMATION
mc
mc
SLIM_MSG_MC_REPORT_INFORMATION
SLIM_MSG_MC_REPORT_INFORMATION
{			u8 *buf = (u8 *)rx_buf;			u8 l_addr = buf[2];			u16 ele = (u16)buf[4] << 4;			ele |= ((buf[3] & 0xf0) >> 4);			dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);			for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}
u8 *buf = (u8 *)rx_buf;
u8 *buf = (u8 *)rx_buf;
u8
u8
*buf = (u8 *)rx_buf
*
buf
= (u8 *)rx_buf
(u8 *)rx_buf
u8 *
u8
u8
*
*
rx_buf
rx_buf
u8 l_addr = buf[2];
u8 l_addr = buf[2];
u8
u8
l_addr = buf[2]
l_addr
= buf[2]
buf[2]
buf
buf
2
u16 ele = (u16)buf[4] << 4;
u16 ele = (u16)buf[4] << 4;
u16
u16
ele = (u16)buf[4] << 4
ele
= (u16)buf[4] << 4
(u16)buf[4] << 4
(u16)buf[4]
u16
u16
u16

buf[4]
buf
buf
4
4
ele |= ((buf[3] & 0xf0) >> 4);
ele |= ((buf[3] & 0xf0) >> 4)
ele
ele
((buf[3] & 0xf0) >> 4)
(buf[3] & 0xf0) >> 4
(buf[3] & 0xf0)
buf[3] & 0xf0
buf[3]
buf
buf
3
0xf0
4
dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele);
dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",					l_addr, ele)
dev_err
dev_err
dev->dev
dev
dev
dev
"Slim-dev:%d report inf element:0x%x"
l_addr
l_addr
ele
ele
for (i = 0; i < len - 5; i++)				dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);
i = 0;
i = 0
i
i
0
i < len - 5
i
i
len - 5
len
len
5
i++
i
i
dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5]);
dev_err(dev->dev, "offset:0x%x:bit mask:%x",						i, buf[i+5])
dev_err
dev_err
dev->dev
dev
dev
dev
"offset:0x%x:bit mask:%x"
i
i
buf[i+5]
buf
buf
i+5
i
i
5
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR)
writel_relaxed
writel_relaxed
MGR_INT_RX_MSG_RCVD
MGR_INT_RX_MSG_RCVD
dev->base +						MGR_INT_CLR
dev->base
dev
dev
base
MGR_INT_CLR
MGR_INT_CLR
mb();
mb()
mb
mb
{			dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);			for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);			writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);			/*			 * Guarantee that CLR bit write goes through			 * before exiting			 */			mb();		}
dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len);
dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",						mc, mt, len)
dev_err
dev_err
dev->dev
dev
dev
dev
"Unexpected MC,%x MT:%x, len:%d"
mc
mc
mt
mt
len
len
for (i = 0; i < ((len + 3) >> 2); i++)				dev_err(dev->dev, "error msg: %x", rx_buf[i]);
i = 0;
i = 0
i
i
0
i < ((len + 3) >> 2)
i
i
((len + 3) >> 2)
(len + 3) >> 2
(len + 3)
len + 3
len
len
3
2
i++
i
i
dev_err(dev->dev, "error msg: %x", rx_buf[i]);
dev_err(dev->dev, "error msg: %x", rx_buf[i])
dev_err
dev_err
dev->dev
dev
dev
dev
"error msg: %x"
rx_buf[i]
rx_buf
rx_buf
i
i
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR);
writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +						MGR_INT_CLR)
writel_relaxed
writel_relaxed
MGR_INT_RX_MSG_RCVD
MGR_INT_RX_MSG_RCVD
dev->base +						MGR_INT_CLR
dev->base
dev
dev
base
MGR_INT_CLR
MGR_INT_CLR
mb();
mb()
mb
mb
if (stat & MGR_INT_RECFG_DONE) {		writel_relaxed(MGR_INT_RECFG_DONE, dev->base + MGR_INT_CLR);		/*		 * Guarantee that CLR bit write goes through		 * before exiting ISR		 */		mb();		complete(&dev->reconf);	}
stat & MGR_INT_RECFG_DONE
stat
stat
MGR_INT_RECFG_DONE
MGR_INT_RECFG_DONE
{		writel_relaxed(MGR_INT_RECFG_DONE, dev->base + MGR_INT_CLR);		/*		 * Guarantee that CLR bit write goes through		 * before exiting ISR		 */		mb();		complete(&dev->reconf);	}
writel_relaxed(MGR_INT_RECFG_DONE, dev->base + MGR_INT_CLR);
writel_relaxed(MGR_INT_RECFG_DONE, dev->base + MGR_INT_CLR)
writel_relaxed
writel_relaxed
MGR_INT_RECFG_DONE
MGR_INT_RECFG_DONE
dev->base + MGR_INT_CLR
dev->base
dev
dev
base
MGR_INT_CLR
MGR_INT_CLR
mb();
mb()
mb
mb
complete(&dev->reconf);
complete(&dev->reconf)
complete
complete
&dev->reconf
dev->reconf
dev
dev
reconf
pstat = readl_relaxed(PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver));
pstat = readl_relaxed(PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver))
pstat
pstat
readl_relaxed(PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver))
readl_relaxed
readl_relaxed
PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver)
PGD_THIS_EE
PGD_THIS_EE
PGD_PORT_INT_ST_EEn
PGD_PORT_INT_ST_EEn
dev->ver
dev
dev
ver
if (pstat != 0) {		int i = 0;		for (i = dev->pipe_b; i < MSM_SLIM_NPORTS; i++) {			if (pstat & 1 << i) {				u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));				if (val & (1 << 19)) {					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				} else if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;			}			writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,							dev->ver));		}		/*		 * Guarantee that port interrupt bit(s) clearing writes go		 * through before exiting ISR		 */		mb();	}
pstat != 0
pstat
pstat
0
{		int i = 0;		for (i = dev->pipe_b; i < MSM_SLIM_NPORTS; i++) {			if (pstat & 1 << i) {				u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));				if (val & (1 << 19)) {					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				} else if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;			}			writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,							dev->ver));		}		/*		 * Guarantee that port interrupt bit(s) clearing writes go		 * through before exiting ISR		 */		mb();	}
int i = 0;
int i = 0;
int
i = 0
i
= 0
0
for (i = dev->pipe_b; i < MSM_SLIM_NPORTS; i++) {			if (pstat & 1 << i) {				u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));				if (val & (1 << 19)) {					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				} else if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;			}			writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,							dev->ver));		}
i = dev->pipe_b;
i = dev->pipe_b
i
i
dev->pipe_b
dev
dev
pipe_b
i < MSM_SLIM_NPORTS
i
i
MSM_SLIM_NPORTS
MSM_SLIM_NPORTS
i++
i
i
{			if (pstat & 1 << i) {				u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));				if (val & (1 << 19)) {					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				} else if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;			}			writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,							dev->ver));		}
if (pstat & 1 << i) {				u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));				if (val & (1 << 19)) {					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				} else if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;			}
pstat & 1 << i
pstat
pstat
1 << i
1
i
i
{				u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));				if (val & (1 << 19)) {					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				} else if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;			}
u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));
u32 val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver));
u32
u32
val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver))
val
= readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver))
readl_relaxed(PGD_PORT(PGD_PORT_STATn,							i, dev->ver))
readl_relaxed
readl_relaxed
PGD_PORT(PGD_PORT_STATn,							i, dev->ver)
PGD_PORT
PGD_PORT
PGD_PORT_STATn
PGD_PORT_STATn
i
i
dev->ver
dev
dev
ver
if (val & (1 << 19)) {					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				} else if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;
val & (1 << 19)
val
val
(1 << 19)
1 << 19
1
19
{					dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;					dev->pipes[i-dev->pipe_b].connected =							false;					/*					 * SPS will call completion since					 * ERROR flags are registered					 */				}
dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT;
dev->ctrl.ports[i].err =						SLIM_P_DISCONNECT
dev->ctrl.ports[i].err
dev->ctrl.ports[i]
dev->ctrl.ports
dev->ctrl
dev
dev
ctrl
ports
i
i
err
SLIM_P_DISCONNECT
SLIM_P_DISCONNECT
dev->pipes[i-dev->pipe_b].connected =							false;
dev->pipes[i-dev->pipe_b].connected =							false
dev->pipes[i-dev->pipe_b].connected
dev->pipes[i-dev->pipe_b]
dev->pipes
dev
dev
pipes
i-dev->pipe_b
i
i
dev->pipe_b
dev
dev
pipe_b
connected
false
if (val & (1 << 2))					dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;				else if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;
val & (1 << 2)
val
val
(1 << 2)
1 << 2
1
2
dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW;
dev->ctrl.ports[i].err =							SLIM_P_OVERFLOW
dev->ctrl.ports[i].err
dev->ctrl.ports[i]
dev->ctrl.ports
dev->ctrl
dev
dev
ctrl
ports
i
i
err
SLIM_P_OVERFLOW
SLIM_P_OVERFLOW
if (val & (1 << 3))					dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;
val & (1 << 3)
val
val
(1 << 3)
1 << 3
1
3
dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW;
dev->ctrl.ports[i].err =						SLIM_P_UNDERFLOW
dev->ctrl.ports[i].err
dev->ctrl.ports[i]
dev->ctrl.ports
dev->ctrl
dev
dev
ctrl
ports
i
i
err
SLIM_P_UNDERFLOW
SLIM_P_UNDERFLOW
writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,							dev->ver));
writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,							dev->ver))
writel_relaxed
writel_relaxed
1
PGD_THIS_EE(PGD_PORT_INT_CL_EEn,							dev->ver)
PGD_THIS_EE
PGD_THIS_EE
PGD_PORT_INT_CL_EEn
PGD_PORT_INT_CL_EEn
dev->ver
dev
dev
ver
mb();
mb()
mb
mb
return IRQ_HANDLED;
IRQ_HANDLED
IRQ_HANDLED
-----joern-----
(131,104,0)
(393,598,0)
(541,109,0)
(145,40,0)
(343,544,0)
(414,62,0)
(166,504,0)
(346,202,0)
(137,401,0)
(231,314,0)
(447,620,0)
(562,506,0)
(48,165,0)
(291,65,0)
(310,552,0)
(208,137,0)
(419,62,0)
(239,243,0)
(45,138,0)
(27,552,0)
(114,63,0)
(308,521,0)
(159,626,0)
(264,558,0)
(232,77,0)
(173,494,0)
(589,543,0)
(228,531,0)
(7,262,0)
(356,62,0)
(32,23,0)
(398,454,0)
(360,266,0)
(135,32,0)
(398,433,0)
(169,539,0)
(266,429,0)
(575,460,0)
(410,349,0)
(299,504,0)
(296,504,0)
(510,161,0)
(60,224,0)
(556,435,0)
(315,7,0)
(1,531,0)
(382,325,0)
(422,18,0)
(186,131,0)
(297,51,0)
(543,446,0)
(366,453,0)
(560,481,0)
(446,543,0)
(513,89,0)
(298,87,0)
(606,98,0)
(181,248,0)
(202,99,0)
(88,256,0)
(17,212,0)
(256,83,0)
(538,619,0)
(525,533,0)
(594,195,0)
(176,620,0)
(593,172,0)
(161,342,0)
(263,491,0)
(111,71,0)
(296,581,0)
(151,77,0)
(534,220,0)
(127,532,0)
(464,291,0)
(599,601,0)
(246,258,0)
(136,201,0)
(386,451,0)
(87,298,0)
(302,504,0)
(262,359,0)
(268,244,0)
(163,227,0)
(214,63,0)
(213,535,0)
(562,504,0)
(79,302,0)
(486,565,0)
(619,521,0)
(610,598,0)
(9,53,0)
(156,118,0)
(407,504,0)
(418,146,0)
(520,581,0)
(323,574,0)
(550,424,0)
(422,566,0)
(532,50,0)
(220,423,0)
(342,161,0)
(345,158,0)
(130,184,0)
(571,411,0)
(333,451,0)
(184,504,0)
(454,69,0)
(81,8,0)
(542,63,0)
(383,62,0)
(164,571,0)
(627,195,0)
(398,248,0)
(406,132,0)
(167,103,0)
(438,305,0)
(484,248,0)
(99,202,0)
(308,285,0)
(405,435,0)
(375,55,0)
(487,50,0)
(395,407,0)
(47,276,0)
(401,137,0)
(339,564,0)
(69,495,0)
(572,590,0)
(26,545,0)
(574,186,0)
(421,329,0)
(270,200,0)
(414,504,0)
(474,314,0)
(285,308,0)
(617,547,0)
(435,521,0)
(184,260,0)
(397,512,0)
(13,40,0)
(199,514,0)
(67,104,0)
(563,329,0)
(2,459,0)
(215,459,0)
(243,40,0)
(535,418,0)
(516,201,0)
(54,328,0)
(451,504,0)
(146,444,0)
(424,550,0)
(53,14,0)
(350,237,0)
(283,521,0)
(106,625,0)
(370,242,0)
(368,172,0)
(596,263,0)
(8,401,0)
(351,387,0)
(428,359,0)
(212,504,0)
(501,170,0)
(555,558,0)
(66,317,0)
(446,138,0)
(550,154,0)
(172,429,0)
(428,479,0)
(557,504,0)
(342,526,0)
(238,243,0)
(581,521,0)
(452,547,0)
(272,23,0)
(577,514,0)
(298,310,0)
(260,184,0)
(352,557,0)
(586,376,0)
(261,498,0)
(314,539,0)
(374,184,0)
(143,528,0)
(490,145,0)
(86,116,0)
(36,577,0)
(384,522,0)
(330,414,0)
(117,151,0)
(334,504,0)
(365,401,0)
(240,502,0)
(595,425,0)
(590,521,0)
(291,504,0)
(326,77,0)
(70,419,0)
(100,422,0)
(152,14,0)
(6,399,0)
(398,66,0)
(95,326,0)
(24,14,0)
(47,185,0)
(317,66,0)
(624,622,0)
(197,9,0)
(252,375,0)
(391,13,0)
(316,9,0)
(149,479,0)
(477,395,0)
(404,14,0)
(465,14,0)
(354,332,0)
(191,189,0)
(8,429,0)
(567,14,0)
(469,165,0)
(267,89,0)
(21,14,0)
(193,521,0)
(10,77,0)
(209,530,0)
(102,328,0)
(435,556,0)
(430,158,0)
(285,363,0)
(540,535,0)
(320,219,0)
(493,50,0)
(326,80,0)
(153,423,0)
(511,317,0)
(414,444,0)
(389,342,0)
(361,63,0)
(372,294,0)
(390,607,0)
(508,14,0)
(281,600,0)
(253,498,0)
(403,522,0)
(312,93,0)
(172,321,0)
(259,557,0)
(620,30,0)
(623,138,0)
(462,14,0)
(161,370,0)
(162,379,0)
(255,11,0)
(493,506,0)
(198,565,0)
(148,574,0)
(629,447,0)
(350,191,0)
(236,165,0)
(459,444,0)
(104,67,0)
(628,310,0)
(559,266,0)
(495,337,0)
(229,299,0)
(99,502,0)
(415,181,0)
(237,14,0)
(620,447,0)
(377,294,0)
(544,118,0)
(443,291,0)
(558,555,0)
(83,43,0)
(524,13,0)
(537,284,0)
(118,544,0)
(251,382,0)
(396,334,0)
(378,32,0)
(439,307,0)
(178,91,0)
(227,504,0)
(250,326,0)
(44,356,0)
(387,561,0)
(515,244,0)
(530,328,0)
(359,262,0)
(308,1,0)
(483,102,0)
(367,629,0)
(393,116,0)
(555,504,0)
(389,504,0)
(569,363,0)
(416,389,0)
(379,533,0)
(220,534,0)
(369,381,0)
(305,504,0)
(495,69,0)
(179,504,0)
(201,150,0)
(305,518,0)
(13,123,0)
(436,131,0)
(427,77,0)
(93,429,0)
(244,74,0)
(412,527,0)
(557,352,0)
(11,219,0)
(527,50,0)
(355,494,0)
(528,77,0)
(256,349,0)
(357,513,0)
(295,381,0)
(94,491,0)
(138,446,0)
(223,479,0)
(518,14,0)
(485,119,0)
(97,269,0)
(51,504,0)
(498,429,0)
(429,63,0)
(529,37,0)
(611,425,0)
(447,248,0)
(241,27,0)
(155,280,0)
(340,27,0)
(265,526,0)
(503,43,0)
(564,91,0)
(337,447,0)
(471,398,0)
(600,220,0)
(581,296,0)
(328,530,0)
(284,91,0)
(449,424,0)
(262,14,0)
(603,158,0)
(43,83,0)
(427,14,0)
(547,504,0)
(43,504,0)
(597,270,0)
(585,9,0)
(33,481,0)
(133,533,0)
(266,321,0)
(198,179,0)
(434,555,0)
(353,40,0)
(52,478,0)
(289,170,0)
(529,119,0)
(77,425,0)
(314,429,0)
(132,53,0)
(37,475,0)
(387,351,0)
(440,285,0)
(206,318,0)
(150,201,0)
(612,375,0)
(186,574,0)
(58,260,0)
(357,349,0)
(506,493,0)
(622,504,0)
(211,284,0)
(461,296,0)
(472,411,0)
(157,537,0)
(275,227,0)
(73,14,0)
(191,350,0)
(534,581,0)
(600,332,0)
(185,47,0)
(1,308,0)
(96,18,0)
(123,504,0)
(408,508,0)
(185,177,0)
(249,481,0)
(154,98,0)
(551,236,0)
(318,158,0)
(336,619,0)
(489,269,0)
(87,27,0)
(456,516,0)
(560,37,0)
(103,62,0)
(102,444,0)
(510,527,0)
(101,103,0)
(615,236,0)
(304,481,0)
(0,504,0)
(558,431,0)
(506,105,0)
(25,7,0)
(399,14,0)
(39,436,0)
(510,489,0)
(618,337,0)
(150,491,0)
(84,362,0)
(553,145,0)
(510,305,0)
(234,398,0)
(514,577,0)
(605,11,0)
(335,334,0)
(287,317,0)
(180,393,0)
(584,65,0)
(152,411,0)
(338,227,0)
(218,489,0)
(177,504,0)
(504,425,0)
(131,436,0)
(576,314,0)
(290,425,0)
(90,299,0)
(212,381,0)
(46,14,0)
(192,248,0)
(280,62,0)
(5,308,0)
(539,504,0)
(522,478,0)
(547,170,0)
(55,375,0)
(134,55,0)
(189,191,0)
(126,96,0)
(13,429,0)
(71,50,0)
(293,508,0)
(98,154,0)
(514,199,0)
(419,245,0)
(454,181,0)
(263,504,0)
(400,493,0)
(498,253,0)
(207,123,0)
(171,427,0)
(479,428,0)
(528,80,0)
(489,543,0)
(554,248,0)
(366,302,0)
(199,399,0)
(227,163,0)
(609,429,0)
(437,566,0)
(56,280,0)
(510,285,0)
(616,581,0)
(300,431,0)
(388,98,0)
(492,14,0)
(473,202,0)
(499,419,0)
(435,327,0)
(332,600,0)
(166,460,0)
(356,504,0)
(160,69,0)
(74,243,0)
(512,526,0)
(16,555,0)
(418,535,0)
(510,96,0)
(604,556,0)
(195,504,0)
(245,419,0)
(401,8,0)
(195,560,0)
(20,527,0)
(314,40,0)
(451,406,0)
(605,18,0)
(381,369,0)
(128,378,0)
(217,444,0)
(253,145,0)
(23,32,0)
(587,427,0)
(9,14,0)
(123,13,0)
(378,91,0)
(145,253,0)
(204,337,0)
(7,14,0)
(526,521,0)
(536,177,0)
(573,530,0)
(470,425,0)
(318,299,0)
(314,545,0)
(385,151,0)
(53,132,0)
(225,442,0)
(235,220,0)
(244,429,0)
(601,387,0)
(200,220,0)
(427,508,0)
(317,447,0)
(491,150,0)
(280,552,0)
(512,504,0)
(329,504,0)
(301,428,0)
(626,424,0)
(629,318,0)
(325,382,0)
(83,256,0)
(402,510,0)
(431,558,0)
(629,625,0)
(119,485,0)
(506,562,0)
(203,332,0)
(116,329,0)
(441,91,0)
(226,498,0)
(189,504,0)
(539,314,0)
(164,494,0)
(565,198,0)
(458,414,0)
(584,598,0)
(424,14,0)
(531,504,0)
(141,433,0)
(552,481,0)
(517,389,0)
(411,571,0)
(66,248,0)
(348,478,0)
(622,327,0)
(356,349,0)
(411,14,0)
(522,384,0)
(431,481,0)
(457,24,0)
(125,63,0)
(482,163,0)
(115,325,0)
(194,533,0)
(139,356,0)
(504,371,0)
(549,158,0)
(121,406,0)
(62,566,0)
(376,62,0)
(30,620,0)
(436,504,0)
(568,625,0)
(409,245,0)
(170,560,0)
(344,362,0)
(417,23,0)
(24,395,0)
(273,119,0)
(9,399,0)
(38,166,0)
(74,244,0)
(491,263,0)
(433,504,0)
(286,378,0)
(205,83,0)
(602,481,0)
(288,177,0)
(575,492,0)
(219,40,0)
(497,248,0)
(27,87,0)
(309,510,0)
(120,189,0)
(18,63,0)
(510,556,0)
(257,270,0)
(154,550,0)
(496,561,0)
(578,414,0)
(3,53,0)
(201,425,0)
(625,158,0)
(59,198,0)
(51,544,0)
(310,298,0)
(179,198,0)
(453,366,0)
(98,504,0)
(32,378,0)
(104,131,0)
(76,528,0)
(448,7,0)
(12,14,0)
(40,63,0)
(556,442,0)
(279,356,0)
(507,444,0)
(450,433,0)
(177,185,0)
(196,43,0)
(146,418,0)
(181,601,0)
(493,67,0)
(362,84,0)
(565,545,0)
(429,8,0)
(590,504,0)
(112,516,0)
(84,469,0)
(341,318,0)
(216,369,0)
(147,154,0)
(278,123,0)
(254,263,0)
(502,99,0)
(307,396,0)
(195,552,0)
(57,232,0)
(574,50,0)
(399,199,0)
(37,560,0)
(513,357,0)
(392,63,0)
(284,537,0)
(303,51,0)
(243,74,0)
(580,191,0)
(476,396,0)
(190,531,0)
(362,504,0)
(75,407,0)
(387,601,0)
(588,427,0)
(138,504,0)
(608,552,0)
(113,85,0)
(546,376,0)
(68,454,0)
(7,492,0)
(420,334,0)
(342,389,0)
(31,13,0)
(480,379,0)
(566,62,0)
(132,406,0)
(327,435,0)
(478,504,0)
(607,77,0)
(277,506,0)
(11,605,0)
(165,469,0)
(467,310,0)
(89,513,0)
(40,219,0)
(124,514,0)
(433,398,0)
(103,537,0)
(118,276,0)
(175,164,0)
(395,24,0)
(187,562,0)
(13,63,0)
(67,105,0)
(454,248,0)
(577,504,0)
(274,460,0)
(29,425,0)
(394,161,0)
(530,504,0)
(579,561,0)
(321,266,0)
(282,296,0)
(119,529,0)
(219,11,0)
(494,504,0)
(89,504,0)
(34,276,0)
(469,84,0)
(107,557,0)
(359,428,0)
(479,504,0)
(358,50,0)
(380,93,0)
(396,307,0)
(188,423,0)
(460,166,0)
(601,181,0)
(237,350,0)
(110,366,0)
(311,283,0)
(376,603,0)
(314,62,0)
(426,137,0)
(55,201,0)
(183,314,0)
(327,622,0)
(137,18,0)
(65,584,0)
(233,425,0)
(200,270,0)
(500,493,0)
(92,495,0)
(78,370,0)
(581,534,0)
(144,398,0)
(129,179,0)
(453,18,0)
(328,102,0)
(509,590,0)
(337,495,0)
(23,504,0)
(582,109,0)
(131,186,0)
(64,502,0)
(463,212,0)
(407,395,0)
(519,425,0)
(408,163,0)
(523,626,0)
(302,366,0)
(384,77,0)
(548,96,0)
(432,492,0)
(182,262,0)
(561,447,0)
(221,485,0)
(413,549,0)
(292,485,0)
(313,447,0)
(535,504,0)
(445,603,0)
(526,342,0)
(41,66,0)
(224,260,0)
(543,489,0)
(455,232,0)
(19,362,0)
(543,521,0)
(583,504,0)
(224,248,0)
(373,577,0)
(322,14,0)
(613,237,0)
(526,512,0)
(621,562,0)
(122,152,0)
(460,575,0)
(505,89,0)
(80,528,0)
(236,14,0)
(364,560,0)
(271,605,0)
(299,318,0)
(72,446,0)
(494,164,0)
(603,376,0)
(488,539,0)
(210,481,0)
(475,37,0)
(247,545,0)
(321,172,0)
(544,51,0)
(347,248,0)
(510,425,0)
(537,103,0)
(222,200,0)
(140,302,0)
(69,454,0)
(109,504,0)
(82,189,0)
(591,305,0)
(492,575,0)
(142,152,0)
(521,590,0)
(37,529,0)
(502,40,0)
(28,407,0)
(42,294,0)
(331,327,0)
(62,63,0)
(80,326,0)
(35,84,0)
(334,396,0)
(307,85,0)
(571,164,0)
(468,166,0)
(168,152,0)
(152,237,0)
(561,387,0)
(306,280,0)
(531,1,0)
(174,325,0)
(508,408,0)
(163,408,0)
(478,522,0)
(165,14,0)
(566,422,0)
(260,224,0)
(71,245,0)
(18,453,0)
(442,242,0)
(258,518,0)
(116,393,0)
(592,529,0)
(485,18,0)
(202,40,0)
(4,1,0)
(375,521,0)
(77,384,0)
(378,67,0)
(65,291,0)
(318,629,0)
(245,71,0)
(329,116,0)
(22,186,0)
(570,436,0)
(382,220,0)
(626,14,0)
(319,607,0)
(518,258,0)
(170,547,0)
(381,212,0)
(324,622,0)
(406,451,0)
(552,195,0)
(527,67,0)
(49,512,0)
(614,422,0)
(625,629,0)
(61,63,0)
(15,179,0)
(466,605,0)
(154,147,1)
(317,447,1)
(608,560,1)
(74,243,1)
(535,504,1)
(117,108,1)
(486,284,1)
(37,475,1)
(469,84,1)
(177,504,1)
(263,254,1)
(147,98,1)
(581,521,1)
(7,25,1)
(87,298,1)
(596,94,1)
(547,504,1)
(72,138,1)
(181,601,1)
(357,513,1)
(283,521,1)
(319,109,1)
(510,402,1)
(623,45,1)
(40,219,1)
(590,509,1)
(299,90,1)
(471,144,1)
(251,220,1)
(208,426,1)
(436,39,1)
(245,409,1)
(512,504,1)
(614,100,1)
(306,155,1)
(180,253,1)
(491,263,1)
(492,575,1)
(458,330,1)
(360,253,1)
(606,449,1)
(558,264,1)
(401,137,1)
(401,365,1)
(128,135,1)
(245,419,1)
(174,115,1)
(175,494,1)
(132,406,1)
(445,549,1)
(442,225,1)
(414,458,1)
(222,600,1)
(156,151,1)
(81,401,1)
(166,38,1)
(32,378,1)
(131,186,1)
(406,121,1)
(146,418,1)
(117,87,1)
(150,491,1)
(302,504,1)
(568,106,1)
(169,93,1)
(145,40,1)
(207,429,1)
(354,203,1)
(301,479,1)
(218,543,1)
(586,546,1)
(345,430,1)
(577,504,1)
(557,504,1)
(504,583,1)
(7,492,1)
(365,137,1)
(518,258,1)
(496,415,1)
(15,129,1)
(7,262,1)
(464,610,1)
(199,514,1)
(510,556,1)
(291,504,1)
(398,234,1)
(504,371,1)
(255,605,1)
(269,97,1)
(321,172,1)
(212,17,1)
(151,77,1)
(97,489,1)
(359,428,1)
(531,190,1)
(583,0,1)
(446,72,1)
(202,473,1)
(56,230,1)
(376,586,1)
(189,504,1)
(620,176,1)
(580,189,1)
(234,471,1)
(111,50,1)
(219,320,1)
(513,89,1)
(152,237,1)
(428,479,1)
(456,112,1)
(543,446,1)
(55,375,1)
(176,313,1)
(220,534,1)
(562,504,1)
(243,40,1)
(410,256,1)
(163,482,1)
(532,50,1)
(32,23,1)
(93,312,1)
(102,328,1)
(135,23,1)
(609,40,1)
(136,151,1)
(448,315,1)
(624,324,1)
(51,303,1)
(96,548,1)
(382,220,1)
(564,339,1)
(477,407,1)
(510,96,1)
(387,561,1)
(381,295,1)
(204,68,1)
(60,603,1)
(334,504,1)
(249,431,1)
(509,572,1)
(539,504,1)
(172,429,1)
(74,244,1)
(23,417,1)
(189,120,1)
(561,447,1)
(589,446,1)
(293,232,1)
(58,184,1)
(571,164,1)
(70,111,1)
(555,434,1)
(198,179,1)
(407,75,1)
(64,13,1)
(23,504,1)
(200,220,1)
(529,119,1)
(377,518,1)
(229,603,1)
(191,580,1)
(265,389,1)
(407,504,1)
(356,504,1)
(489,218,1)
(43,504,1)
(460,166,1)
(551,9,1)
(312,380,1)
(528,76,1)
(99,202,1)
(17,463,1)
(121,451,1)
(510,527,1)
(526,521,1)
(289,501,1)
(195,504,1)
(485,18,1)
(138,504,1)
(603,376,1)
(106,367,1)
(148,323,1)
(622,504,1)
(530,209,1)
(134,619,1)
(272,284,1)
(493,500,1)
(591,236,1)
(579,496,1)
(211,91,1)
(232,57,1)
(526,512,1)
(196,503,1)
(314,62,1)
(451,386,1)
(466,353,1)
(184,504,1)
(279,321,1)
(9,316,1)
(561,579,1)
(182,424,1)
(57,455,1)
(237,350,1)
(356,62,1)
(129,486,1)
(27,340,1)
(83,43,1)
(409,419,1)
(115,251,1)
(285,440,1)
(328,530,1)
(483,414,1)
(62,566,1)
(599,387,1)
(13,429,1)
(511,41,1)
(314,539,1)
(20,71,1)
(18,453,1)
(104,131,1)
(244,429,1)
(119,273,1)
(108,249,1)
(178,314,1)
(524,391,1)
(45,600,1)
(334,420,1)
(556,604,1)
(563,421,1)
(539,488,1)
(284,91,1)
(268,243,1)
(501,547,1)
(89,505,1)
(288,536,1)
(157,103,1)
(19,48,1)
(454,181,1)
(621,187,1)
(126,607,1)
(510,161,1)
(530,504,1)
(339,32,1)
(573,483,1)
(274,166,1)
(123,278,1)
(502,40,1)
(162,480,1)
(277,562,1)
(252,612,1)
(413,318,1)
(212,504,1)
(336,538,1)
(309,510,1)
(155,56,1)
(378,286,1)
(531,504,1)
(25,448,1)
(588,171,1)
(493,50,1)
(16,300,1)
(159,427,1)
(417,272,1)
(179,15,1)
(553,490,1)
(69,495,1)
(299,504,1)
(383,18,1)
(195,560,1)
(601,387,1)
(476,439,1)
(450,454,1)
(440,308,1)
(612,134,1)
(500,400,1)
(284,537,1)
(160,495,1)
(352,557,1)
(281,382,1)
(151,385,1)
(244,515,1)
(439,200,1)
(333,3,1)
(516,201,1)
(344,19,1)
(549,158,1)
(590,504,1)
(305,438,1)
(310,467,1)
(302,79,1)
(429,8,1)
(243,239,1)
(287,511,1)
(419,62,1)
(434,16,1)
(170,560,1)
(479,504,1)
(556,435,1)
(316,197,1)
(329,504,1)
(117,607,1)
(116,86,1)
(453,366,1)
(422,614,1)
(257,597,1)
(369,381,1)
(510,489,1)
(438,591,1)
(130,60,1)
(215,2,1)
(376,62,1)
(330,578,1)
(271,466,1)
(472,262,1)
(495,337,1)
(124,577,1)
(494,504,1)
(572,193,1)
(48,399,1)
(378,91,1)
(569,285,1)
(384,522,1)
(389,504,1)
(152,168,1)
(367,341,1)
(164,175,1)
(326,95,1)
(610,393,1)
(87,27,1)
(427,587,1)
(439,269,1)
(236,165,1)
(253,498,1)
(49,397,1)
(260,184,1)
(366,110,1)
(91,441,1)
(100,383,1)
(396,334,1)
(507,102,1)
(548,126,1)
(605,18,1)
(213,507,1)
(432,411,1)
(158,345,1)
(603,158,1)
(626,523,1)
(94,136,1)
(173,472,1)
(53,132,1)
(54,530,1)
(203,281,1)
(253,145,1)
(51,504,1)
(308,5,1)
(71,50,1)
(474,576,1)
(395,477,1)
(435,521,1)
(433,504,1)
(149,223,1)
(400,277,1)
(461,282,1)
(76,143,1)
(355,173,1)
(184,374,1)
(325,174,1)
(543,521,1)
(617,452,1)
(446,138,1)
(256,83,1)
(282,520,1)
(11,255,1)
(319,80,1)
(331,622,1)
(380,321,1)
(353,71,1)
(43,196,1)
(286,128,1)
(140,96,1)
(298,310,1)
(107,259,1)
(39,570,1)
(562,621,1)
(55,201,1)
(310,552,1)
(510,285,1)
(455,80,1)
(103,167,1)
(95,250,1)
(364,99,1)
(117,357,1)
(566,422,1)
(626,424,1)
(110,302,1)
(170,289,1)
(66,317,1)
(161,342,1)
(618,204,1)
(368,593,1)
(205,43,1)
(555,504,1)
(22,436,1)
(459,215,1)
(574,50,1)
(258,246,1)
(84,362,1)
(103,62,1)
(394,342,1)
(259,109,1)
(273,485,1)
(185,177,1)
(116,329,1)
(408,163,1)
(523,159,1)
(167,101,1)
(575,460,1)
(138,623,1)
(508,408,1)
(416,517,1)
(82,613,1)
(44,279,1)
(117,247,1)
(4,531,1)
(337,618,1)
(451,504,1)
(236,615,1)
(11,605,1)
(427,77,1)
(607,77,1)
(527,50,1)
(262,359,1)
(439,55,1)
(68,181,1)
(402,516,1)
(88,356,1)
(226,145,1)
(209,573,1)
(625,158,1)
(67,104,1)
(512,49,1)
(224,260,1)
(362,344,1)
(346,502,1)
(80,528,1)
(430,398,1)
(179,504,1)
(607,390,1)
(123,504,1)
(219,11,1)
(295,212,1)
(41,447,1)
(296,461,1)
(411,571,1)
(119,485,1)
(317,287,1)
(78,161,1)
(375,252,1)
(605,271,1)
(193,379,1)
(439,363,1)
(84,35,1)
(585,152,1)
(142,7,1)
(221,292,1)
(13,31,1)
(424,550,1)
(584,65,1)
(332,354,1)
(550,154,1)
(343,51,1)
(117,146,1)
(313,93,1)
(228,200,1)
(342,389,1)
(328,54,1)
(300,280,1)
(52,348,1)
(514,577,1)
(71,245,1)
(406,451,1)
(560,37,1)
(163,227,1)
(92,337,1)
(541,377,1)
(267,410,1)
(613,492,1)
(261,226,1)
(112,201,1)
(538,521,1)
(247,565,1)
(363,569,1)
(482,227,1)
(308,521,1)
(35,362,1)
(398,433,1)
(13,40,1)
(566,437,1)
(321,266,1)
(131,436,1)
(327,331,1)
(168,122,1)
(521,590,1)
(202,40,1)
(594,627,1)
(197,585,1)
(405,327,1)
(326,77,1)
(9,399,1)
(239,238,1)
(241,108,1)
(50,358,1)
(10,504,1)
(435,405,1)
(428,301,1)
(13,123,1)
(582,541,1)
(260,58,1)
(398,66,1)
(230,552,1)
(216,232,1)
(77,384,1)
(587,588,1)
(601,599,1)
(320,11,1)
(291,443,1)
(161,394,1)
(505,267,1)
(324,382,1)
(232,77,1)
(75,28,1)
(350,191,1)
(311,307,1)
(47,185,1)
(578,459,1)
(439,370,1)
(190,228,1)
(177,288,1)
(528,77,1)
(338,293,1)
(165,469,1)
(318,629,1)
(254,596,1)
(445,158,1)
(379,162,1)
(488,169,1)
(487,62,1)
(615,551,1)
(393,116,1)
(246,305,1)
(24,395,1)
(435,327,1)
(141,450,1)
(604,435,1)
(285,308,1)
(421,180,1)
(227,275,1)
(522,478,1)
(388,606,1)
(201,150,1)
(479,149,1)
(314,40,1)
(628,27,1)
(468,432,1)
(307,396,1)
(275,338,1)
(235,55,1)
(297,156,1)
(278,207,1)
(198,59,1)
(308,1,1)
(280,552,1)
(378,67,1)
(69,160,1)
(109,504,1)
(122,142,1)
(109,582,1)
(250,528,1)
(34,118,1)
(1,4,1)
(546,445,1)
(329,563,1)
(3,237,1)
(98,388,1)
(340,241,1)
(515,268,1)
(559,360,1)
(414,504,1)
(231,539,1)
(510,305,1)
(263,504,1)
(447,620,1)
(170,547,1)
(494,355,1)
(478,504,1)
(549,413,1)
(552,195,1)
(397,265,1)
(90,229,1)
(187,67,1)
(385,117,1)
(225,556,1)
(342,526,1)
(172,368,1)
(366,302,1)
(576,231,1)
(463,216,1)
(101,211,1)
(422,18,1)
(431,558,1)
(36,373,1)
(327,622,1)
(238,99,1)
(537,103,1)
(164,494,1)
(564,91,1)
(415,66,1)
(266,429,1)
(452,230,1)
(514,124,1)
(292,364,1)
(629,447,1)
(506,493,1)
(597,222,1)
(6,53,1)
(117,347,1)
(137,208,1)
(139,44,1)
(195,594,1)
(627,608,1)
(227,504,1)
(502,240,1)
(89,504,1)
(240,64,1)
(323,22,1)
(498,429,1)
(382,325,1)
(152,411,1)
(264,555,1)
(98,504,1)
(381,212,1)
(37,529,1)
(527,412,1)
(570,527,1)
(86,329,1)
(314,183,1)
(478,52,1)
(9,53,1)
(8,81,1)
(543,589,1)
(616,235,1)
(223,182,1)
(620,30,1)
(489,543,1)
(399,199,1)
(133,619,1)
(403,478,1)
(544,51,1)
(398,454,1)
(419,499,1)
(347,224,1)
(495,92,1)
(318,299,1)
(581,296,1)
(485,221,1)
(540,213,1)
(315,626,1)
(59,179,1)
(2,74,1)
(127,506,1)
(544,343,1)
(547,617,1)
(498,261,1)
(499,70,1)
(211,564,1)
(318,158,1)
(118,544,1)
(374,130,1)
(335,476,1)
(377,369,1)
(300,170,1)
(314,429,1)
(443,464,1)
(629,625,1)
(93,429,1)
(600,220,1)
(436,504,1)
(296,504,1)
(600,332,1)
(386,333,1)
(136,47,1)
(449,508,1)
(154,98,1)
(191,189,1)
(593,266,1)
(370,78,1)
(457,165,1)
(426,609,1)
(389,416,1)
(532,127,1)
(83,205,1)
(574,148,1)
(625,568,1)
(166,504,1)
(280,62,1)
(535,540,1)
(79,140,1)
(522,403,1)
(200,270,1)
(506,562,1)
(348,10,1)
(427,508,1)
(454,69,1)
(319,352,1)
(65,291,1)
(337,447,1)
(387,351,1)
(8,401,1)
(111,532,1)
(577,36,1)
(38,468,1)
(373,6,1)
(145,553,1)
(99,502,1)
(592,119,1)
(143,77,1)
(266,559,1)
(270,257,1)
(283,311,1)
(536,34,1)
(437,422,1)
(619,521,1)
(467,628,1)
(412,20,1)
(356,139,1)
(120,82,1)
(558,555,1)
(490,74,1)
(28,457,1)
(341,206,1)
(1,531,1)
(280,306,1)
(206,299,1)
(183,474,1)
(117,584,1)
(137,18,1)
(305,504,1)
(31,524,1)
(80,326,1)
(5,1,1)
(534,581,1)
(622,624,1)
(480,516,1)
(503,88,1)
(420,335,1)
(529,592,1)
(565,198,1)
(557,107,1)
(441,178,1)
(460,274,1)
(303,297,1)
(171,24,1)
(538,283,1)
(493,67,1)
(402,133,1)
(517,442,1)
(395,407,1)
(433,141,1)
(414,62,1)
(473,346,1)
(27,552,1)
(144,433,1)
(537,157,1)
(391,123,1)
(362,504,1)
(390,319,1)
(619,336,1)
(375,521,1)
(516,456,1)
(520,616,1)
(358,487,1)
(186,574,1)
(418,535,1)
(473,502,2)
(629,625,2)
(20,71,2)
(57,80,2)
(398,66,2)
(74,243,2)
(321,253,2)
(549,158,2)
(116,253,2)
(245,607,2)
(138,600,2)
(157,93,2)
(424,232,2)
(605,607,2)
(285,200,2)
(457,232,2)
(603,158,2)
(591,232,2)
(379,516,2)
(284,93,2)
(578,74,2)
(257,600,2)
(64,607,2)
(440,200,2)
(71,71,2)
(199,232,2)
(551,232,2)
(334,504,2)
(363,200,2)
(298,108,2)
(561,93,2)
(308,1,2)
(501,230,2)
(53,232,2)
(90,603,2)
(317,447,2)
(55,201,2)
(329,504,2)
(206,603,2)
(309,510,2)
(37,475,2)
(238,99,2)
(132,406,2)
(291,253,2)
(529,99,2)
(508,408,2)
(389,504,2)
(503,321,2)
(282,55,2)
(151,77,2)
(451,504,2)
(34,151,2)
(447,93,2)
(549,603,2)
(313,93,2)
(438,232,2)
(375,521,2)
(245,71,2)
(606,232,2)
(320,607,2)
(137,18,2)
(292,99,2)
(557,109,2)
(230,99,2)
(220,55,2)
(476,619,2)
(352,109,2)
(335,619,2)
(262,232,2)
(610,253,2)
(273,99,2)
(219,607,2)
(68,93,2)
(436,71,2)
(399,232,2)
(382,55,2)
(23,504,2)
(267,321,2)
(177,151,2)
(493,67,2)
(228,200,2)
(494,232,2)
(103,93,2)
(393,116,2)
(406,232,2)
(398,93,2)
(83,43,2)
(530,74,2)
(38,232,2)
(283,619,2)
(358,607,2)
(461,55,2)
(496,93,2)
(323,71,2)
(200,220,2)
(234,93,2)
(330,74,2)
(218,600,2)
(111,607,2)
(237,232,2)
(40,607,2)
(287,93,2)
(362,504,2)
(574,71,2)
(123,607,2)
(407,232,2)
(505,321,2)
(107,109,2)
(146,74,2)
(474,93,2)
(142,232,2)
(301,232,2)
(65,291,2)
(324,382,2)
(249,99,2)
(70,607,2)
(274,232,2)
(401,137,2)
(4,200,2)
(201,150,2)
(395,407,2)
(146,418,2)
(536,151,2)
(236,232,2)
(11,605,2)
(65,253,2)
(169,93,2)
(532,50,2)
(441,93,2)
(386,232,2)
(185,177,2)
(9,53,2)
(406,451,2)
(428,232,2)
(28,232,2)
(599,93,2)
(566,422,2)
(305,504,2)
(181,93,2)
(306,230,2)
(262,359,2)
(106,603,2)
(541,80,2)
(60,93,2)
(445,93,2)
(212,232,2)
(370,382,2)
(172,429,2)
(87,27,2)
(270,600,2)
(618,93,2)
(616,55,2)
(120,232,2)
(280,552,2)
(193,516,2)
(593,266,2)
(164,494,2)
(381,232,2)
(97,600,2)
(378,91,2)
(9,399,2)
(268,243,2)
(376,93,2)
(580,232,2)
(557,504,2)
(411,232,2)
(382,220,2)
(243,99,2)
(326,77,2)
(140,607,2)
(614,607,2)
(84,362,2)
(463,232,2)
(543,600,2)
(77,384,2)
(334,619,2)
(436,504,2)
(191,232,2)
(603,603,2)
(180,253,2)
(128,284,2)
(544,151,2)
(247,93,2)
(411,571,2)
(629,447,2)
(398,454,2)
(366,302,2)
(176,93,2)
(24,395,2)
(119,99,2)
(509,516,2)
(154,98,2)
(243,40,2)
(187,71,2)
(479,504,2)
(24,232,2)
(603,93,2)
(460,232,2)
(161,382,2)
(72,600,2)
(571,232,2)
(13,607,2)
(261,145,2)
(253,498,2)
(71,607,2)
(415,93,2)
(83,321,2)
(152,411,2)
(556,382,2)
(555,99,2)
(295,232,2)
(45,600,2)
(369,232,2)
(327,382,2)
(277,71,2)
(47,151,2)
(342,389,2)
(89,504,2)
(314,429,2)
(284,91,2)
(594,99,2)
(364,99,2)
(168,232,2)
(421,253,2)
(314,62,2)
(285,308,2)
(165,469,2)
(609,607,2)
(197,232,2)
(200,600,2)
(553,74,2)
(227,232,2)
(564,284,2)
(156,151,2)
(576,93,2)
(328,530,2)
(288,151,2)
(333,232,2)
(555,504,2)
(314,93,2)
(356,321,2)
(177,504,2)
(99,502,2)
(485,18,2)
(622,504,2)
(244,429,2)
(413,603,2)
(266,253,2)
(447,620,2)
(318,158,2)
(431,99,2)
(166,504,2)
(102,74,2)
(621,71,2)
(36,232,2)
(426,607,2)
(495,337,2)
(280,230,2)
(387,561,2)
(626,424,2)
(522,478,2)
(327,622,2)
(393,253,2)
(298,310,2)
(499,607,2)
(592,99,2)
(302,607,2)
(170,547,2)
(628,108,2)
(216,232,2)
(620,30,2)
(543,521,2)
(427,508,2)
(144,93,2)
(510,285,2)
(416,382,2)
(286,284,2)
(626,232,2)
(586,603,2)
(289,230,2)
(584,253,2)
(308,521,2)
(18,453,2)
(7,262,2)
(556,435,2)
(208,607,2)
(7,232,2)
(546,93,2)
(260,184,2)
(150,491,2)
(460,166,2)
(452,230,2)
(400,71,2)
(318,629,2)
(263,504,2)
(577,232,2)
(93,429,2)
(517,382,2)
(579,93,2)
(51,504,2)
(225,382,2)
(590,516,2)
(357,513,2)
(607,77,2)
(560,37,2)
(314,539,2)
(433,93,2)
(565,93,2)
(495,93,2)
(103,62,2)
(308,200,2)
(47,185,2)
(521,590,2)
(464,253,2)
(570,71,2)
(510,527,2)
(44,321,2)
(510,489,2)
(70,71,2)
(133,516,2)
(451,232,2)
(130,93,2)
(367,603,2)
(487,607,2)
(96,607,2)
(384,522,2)
(195,99,2)
(316,232,2)
(534,55,2)
(179,93,2)
(387,351,2)
(101,93,2)
(492,575,2)
(410,321,2)
(627,99,2)
(154,232,2)
(597,600,2)
(499,71,2)
(356,504,2)
(562,71,2)
(104,71,2)
(198,179,2)
(376,62,2)
(183,93,2)
(162,516,2)
(15,93,2)
(336,619,2)
(251,55,2)
(558,99,2)
(58,93,2)
(431,558,2)
(612,619,2)
(100,607,2)
(469,232,2)
(395,232,2)
(544,51,2)
(458,74,2)
(561,447,2)
(181,601,2)
(329,253,2)
(174,55,2)
(145,74,2)
(256,321,2)
(617,230,2)
(485,99,2)
(108,99,2)
(56,230,2)
(453,366,2)
(3,232,2)
(510,161,2)
(92,93,2)
(560,99,2)
(220,534,2)
(550,154,2)
(419,607,2)
(478,504,2)
(31,607,2)
(80,528,2)
(624,382,2)
(613,232,2)
(80,326,2)
(245,419,2)
(190,200,2)
(86,253,2)
(347,93,2)
(205,321,2)
(419,62,2)
(601,387,2)
(237,350,2)
(129,93,2)
(175,232,2)
(506,493,2)
(511,93,2)
(211,284,2)
(62,607,2)
(437,607,2)
(6,232,2)
(414,74,2)
(222,600,2)
(209,74,2)
(514,232,2)
(279,321,2)
(492,232,2)
(186,71,2)
(123,504,2)
(528,77,2)
(342,382,2)
(79,607,2)
(239,99,2)
(315,232,2)
(498,145,2)
(231,93,2)
(41,93,2)
(109,80,2)
(67,71,2)
(84,232,2)
(450,93,2)
(359,428,2)
(141,93,2)
(365,607,2)
(388,232,2)
(443,253,2)
(299,603,2)
(284,284,2)
(564,91,2)
(547,230,2)
(13,429,2)
(526,512,2)
(191,189,2)
(532,71,2)
(408,232,2)
(278,607,2)
(293,232,2)
(502,40,2)
(69,93,2)
(343,151,2)
(565,198,2)
(138,504,2)
(11,607,2)
(13,40,2)
(223,232,2)
(17,232,2)
(200,270,2)
(539,93,2)
(350,232,2)
(546,603,2)
(366,607,2)
(74,244,2)
(459,74,2)
(581,521,2)
(325,55,2)
(574,50,2)
(160,93,2)
(82,232,2)
(88,321,2)
(604,382,2)
(539,504,2)
(418,535,2)
(124,232,2)
(489,543,2)
(49,382,2)
(521,516,2)
(148,71,2)
(321,266,2)
(299,504,2)
(566,607,2)
(186,574,2)
(355,232,2)
(55,375,2)
(581,296,2)
(623,600,2)
(359,232,2)
(448,232,2)
(454,69,2)
(332,382,2)
(253,74,2)
(629,603,2)
(229,603,2)
(5,200,2)
(389,382,2)
(427,232,2)
(27,108,2)
(500,71,2)
(619,619,2)
(165,232,2)
(493,50,2)
(312,321,2)
(40,219,2)
(535,504,2)
(337,447,2)
(99,202,2)
(575,232,2)
(575,460,2)
(178,93,2)
(382,325,2)
(235,55,2)
(524,607,2)
(435,327,2)
(600,332,2)
(78,382,2)
(98,232,2)
(74,99,2)
(260,93,2)
(339,284,2)
(510,305,2)
(341,603,2)
(202,502,2)
(256,83,2)
(167,284,2)
(401,607,2)
(224,260,2)
(87,108,2)
(283,521,2)
(439,619,2)
(232,77,2)
(163,227,2)
(16,99,2)
(360,253,2)
(166,232,2)
(537,93,2)
(530,504,2)
(32,378,2)
(514,577,2)
(87,298,2)
(258,232,2)
(310,108,2)
(118,151,2)
(137,607,2)
(433,504,2)
(414,62,2)
(221,99,2)
(378,67,2)
(523,232,2)
(37,99,2)
(405,382,2)
(619,521,2)
(412,71,2)
(531,200,2)
(442,382,2)
(131,71,2)
(490,74,2)
(502,607,2)
(338,232,2)
(380,321,2)
(62,566,2)
(2,74,2)
(430,93,2)
(307,619,2)
(369,381,2)
(446,600,2)
(246,232,2)
(537,103,2)
(155,230,2)
(54,74,2)
(331,382,2)
(601,93,2)
(132,232,2)
(8,607,2)
(13,123,2)
(310,552,2)
(357,321,2)
(227,504,2)
(373,232,2)
(414,504,2)
(163,232,2)
(226,145,2)
(196,321,2)
(170,560,2)
(195,560,2)
(311,619,2)
(368,266,2)
(427,77,2)
(22,71,2)
(432,232,2)
(35,232,2)
(212,504,2)
(586,93,2)
(71,245,2)
(139,321,2)
(377,80,2)
(127,71,2)
(518,258,2)
(213,74,2)
(342,526,2)
(600,382,2)
(572,516,2)
(510,556,2)
(297,151,2)
(66,93,2)
(435,521,2)
(454,181,2)
(149,232,2)
(171,232,2)
(488,93,2)
(558,555,2)
(207,607,2)
(232,80,2)
(296,55,2)
(453,607,2)
(252,619,2)
(109,504,2)
(121,232,2)
(271,607,2)
(157,284,2)
(161,342,2)
(224,93,2)
(420,619,2)
(264,99,2)
(605,18,2)
(23,284,2)
(99,607,2)
(147,232,2)
(211,93,2)
(548,607,2)
(454,93,2)
(302,504,2)
(506,562,2)
(269,600,2)
(494,504,2)
(552,195,2)
(344,232,2)
(582,80,2)
(184,504,2)
(552,99,2)
(381,212,2)
(455,80,2)
(590,504,2)
(8,401,2)
(158,93,2)
(244,243,2)
(445,603,2)
(374,93,2)
(589,600,2)
(95,528,2)
(189,504,2)
(600,220,2)
(508,232,2)
(43,321,2)
(1,200,2)
(152,232,2)
(493,71,2)
(55,619,2)
(199,514,2)
(550,232,2)
(326,528,2)
(571,164,2)
(527,71,2)
(362,232,2)
(296,504,2)
(152,237,2)
(434,99,2)
(43,504,2)
(318,603,2)
(512,382,2)
(515,243,2)
(529,119,2)
(378,284,2)
(526,382,2)
(391,607,2)
(419,71,2)
(102,328,2)
(236,165,2)
(449,232,2)
(280,62,2)
(353,607,2)
(185,151,2)
(291,504,2)
(585,232,2)
(255,607,2)
(531,504,2)
(479,232,2)
(300,99,2)
(314,40,2)
(429,607,2)
(219,11,2)
(104,131,2)
(25,232,2)
(250,528,2)
(573,74,2)
(145,40,2)
(516,201,2)
(584,65,2)
(417,284,2)
(429,8,2)
(32,284,2)
(81,607,2)
(284,537,2)
(198,93,2)
(543,446,2)
(48,232,2)
(340,108,2)
(418,74,2)
(281,382,2)
(336,516,2)
(352,557,2)
(375,619,2)
(491,263,2)
(527,50,2)
(241,108,2)
(422,18,2)
(116,329,2)
(480,516,2)
(603,376,2)
(435,382,2)
(126,607,2)
(39,71,2)
(71,50,2)
(562,504,2)
(265,382,2)
(19,232,2)
(397,382,2)
(118,544,2)
(625,158,2)
(563,253,2)
(538,619,2)
(131,186,2)
(398,433,2)
(486,93,2)
(98,504,2)
(305,232,2)
(396,619,2)
(53,132,2)
(526,521,2)
(409,71,2)
(399,199,2)
(189,232,2)
(173,232,2)
(512,504,2)
(27,552,2)
(535,74,2)
(89,321,2)
(32,23,2)
(119,485,2)
(581,55,2)
(356,62,2)
(622,382,2)
(204,93,2)
(513,321,2)
(409,607,2)
(59,93,2)
(625,603,2)
(387,93,2)
(253,145,2)
(275,232,2)
(195,504,2)
(483,74,2)
(446,138,2)
(345,93,2)
(115,55,2)
(467,108,2)
(498,429,2)
(51,151,2)
(122,232,2)
(328,74,2)
(534,581,2)
(203,382,2)
(135,284,2)
(67,104,2)
(469,84,2)
(7,492,2)
(472,232,2)
(101,284,2)
(170,230,2)
(272,284,2)
(569,200,2)
(317,93,2)
(182,232,2)
(69,495,2)
(506,71,2)
(540,74,2)
(394,382,2)
(159,232,2)
(131,436,2)
(167,93,2)
(547,504,2)
(321,172,2)
(468,232,2)
(482,232,2)
(103,284,2)
(510,96,2)
(577,504,2)
(184,93,2)
(407,504,2)
(504,371,2)
(259,109,2)
(489,600,2)
(422,607,2)
(110,607,2)
(559,253,2)
(93,321,2)
(75,232,2)
(307,396,2)
(134,619,2)
(408,163,2)
(1,531,2)
(507,74,2)
(477,232,2)
(303,151,2)
(66,317,2)
(37,529,2)
(466,607,2)
(9,232,2)
(396,334,2)
(587,232,2)
(179,504,2)
(164,232,2)
(513,89,2)
(172,266,2)
(346,502,2)
(354,382,2)
(520,55,2)
(588,232,2)
(337,93,2)
(428,479,2)
(620,93,2)
(350,191,2)
(424,550,2)
(215,74,2)
(376,603,2)
(318,299,2)
(240,607,2)
(568,603,2)
(18,607,2)
(202,40,2)
(518,232,2)
(50,607,2)
(538,516,2)
(383,607,2)
(608,99,2)
(266,429,2)
(615,232,2)
(91,93,2)
(471,93,2)
(537,284,2)
(619,516,2)
(111,71,2)
-----------------------------------
(0,dev)
(1,dev->ctrl.ports)
(2,e_addr)
(3,intf_stat)
(4,ports)
(5,i)
(6,intf_intr_stat)
(7,pr_err("TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x",\n\\n\\t\\t\\t\\t\\tfrm_intr_stat, frm_stat)
(8,(rx_buf[0] >> 8)
(9,pr_err("TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x",\n\\n\\t\\t\\t\\t\\tintf_intr_stat, intf_stat)
(10,stat)
(11,rx_buf[0] >> 5)
(12,mgr_stat)
(13,dev_dbg(dev->dev, "MC: %x, MT: %x\\n", mc, mt)
(14,)
(15,base)
(16,dev)
(17,base)
(18,rx_buf[0] = readl_relaxed(dev->base + MGR_RX_MSG)
(19,dev)
(20,rx_buf)
(21,frm_intr_stat)
(22,MGR_RX_MSG)
(23,dev->dev)
(24,writel_relaxed(MGR_INT_TX_NACKED_2,\n\\n\\t\\t\\t\\t\\tdev->base + MGR_INT_CLR)
(25,frm_stat)
(26,for (i = 0; i < ((len + 3)
(27,sat->wq)
(28,dev)
(29,if (pstat != 0)
(30,u8 *)
(31,mt)
(32,dev_err(dev->dev, "error msg: %x", rx_buf[i])
(33,sat)
(34,mb()
(35,INTF_IE_STAT)
(36,base)
(37,(u8)
(38,base)
(39,base)
(40,mt = (rx_buf[0] >> 5)
(41,l_addr)
(42,if (stat & MGR_INT_TX_MSG_SENT)
(43,dev->base)
(44,rx_buf)
(45,dev)
(46,frm_stat)
(47,complete(&dev->reconf)
(48,intf_ie_stat)
(49,pipe_b)
(50,i = 1)
(51,dev->base)
(52,base)
(53,intf_stat = readl_relaxed(dev->base + INTF_STAT)
(54,MGR_INT_CLR)
(55,pstat & 1 << i)
(56,sat)
(57,MGR_INT_TX_MSG_SENT)
(58,MGR_INT_CLR)
(59,MGR_INT_CLR)
(60,MGR_INT_RX_MSG_RCVD)
(61,mc)
(62,len = rx_buf[0] & 0x1F)
(63,)
(64,mt)
(65,&dev->rx_msgq_notify)
(66,l_addr = buf[2])
(67,rx_buf[i] = readl_relaxed(dev->base + MGR_RX_MSG +\n\\n\\t\\t\\t\\t\\t\\t(4 * i)
(68,ele)
(69,(buf[3] & 0xf0)
(70,len)
(71,i < ((len + 3)
(72,ports)
(73,intf_intr_stat)
(74,mt == SLIM_MSG_MT_CORE &&\n\\n\\t\\t\\tmc == SLIM_MSG_MC_REPORT_PRESENT)
(75,base)
(76,MGR_INT_TX_MSG_SENT)
(77,stat = readl_relaxed(dev->base + MGR_INT_STAT)
(78,false)
(79,base)
(80,stat & MGR_INT_TX_MSG_SENT || stat & MGR_INT_TX_NACKED_2)
(81,0xff)
(82,dev)
(83,dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(84,dev->base +\n\\n\\t\\t\\t\\t\\t\\tINTF_IE_STAT)
(85,)
(86,MGR_INT_CLR)
(87,queue_work(sat->wq, &sat->wd)
(88,MGR_INT_RX_MSG_RCVD)
(89,dev->rx_msgq_notify)
(90,dev)
(91,i = 0)
(92,0xf0)
(93,mc == SLIM_MSG_MC_REPORT_INFORMATION)
(94,PGD_PORT_INT_ST_EEn)
(95,MGR_INT_TX_NACKED_2)
(96,rx_buf[0])
(97,SLIM_P_OVERFLOW)
(98,dev->base)
(99,mt == SLIM_MSG_MT_DEST_REFERRED_USER ||\n\\n\\t\\t\\t\\tmt == SLIM_MSG_MT_SRC_REFERRED_USER)
(100,rx_buf)
(101,len)
(102,writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(103,len + 3)
(104,readl_relaxed(dev->base + MGR_RX_MSG +\n\\n\\t\\t\\t\\t\\t\\t(4 * i)
(105,)
(106,i)
(107,wr_comp)
(108,sat)
(109,dev->wr_comp)
(110,MGR_RX_MSG)
(111,i)
(112,pstat)
(113,if (pstat & 1 << i)
(114,for (i = 1; i < ((len + 3)
(115,1)
(116,dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(117,stat)
(118,writel_relaxed(MGR_INT_RECFG_DONE, dev->base + MGR_INT_CLR)
(119,rx_buf[0] >> 16)
(120,base)
(121,INTF_STAT)
(122,frm_cfg)
(123,dev->dev)
(124,INTF_INT_STAT)
(125,len)
(126,rx_buf)
(127,i)
(128,rx_buf)
(129,dev)
(130,dev)
(131,dev->base + MGR_RX_MSG +\n\\n\\t\\t\\t\\t\\t\\t(4 * i)
(132,readl_relaxed(dev->base + INTF_STAT)
(133,mb()
(134,pstat)
(135,"error msg: %x")
(136,pstat)
(137,rx_buf[0])
(138,dev->ctrl)
(139,len)
(140,dev)
(141,dev)
(142,"TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x")
(143,stat)
(144,"Slim-dev:%d report inf element:0x%x")
(145,mt == SLIM_MSG_MT_CORE)
(146,complete(&dev->rx_msgq_notify)
(147,MGR_IE_STAT)
(148,i)
(149,base)
(150,readl_relaxed(PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver)
(151,stat & MGR_INT_RECFG_DONE)
(152,pr_err("TX Nack FRM dump:frm_cfg:0x%x, ie_stat:0x%x",\n\\n\\t\\t\\t\\t\\tfrm_cfg, frm_ie_stat)
(153,val)
(154,dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_IE_STAT)
(155,rx_buf)
(156,MGR_INT_RECFG_DONE)
(157,2)
(158,i = 0)
(159,"TX Nack MGR dump:ie_stat:0x%x")
(160,4)
(161,dev->pipes[i-dev->pipe_b].connected)
(162,0)
(163,dev->base + MGR_STATUS)
(164,dev->base + FRM_CFG)
(165,intf_ie_stat = readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tINTF_IE_STAT)
(166,dev->base)
(167,3)
(168,frm_ie_stat)
(169,dev)
(170,dev_err(dev->dev, "unknown sat:%d message",\n\\n\\t\\t\\t\\t\\t\\tladdr)
(171,"TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x")
(172,mc == SLIM_MSG_MC_REPLY_VALUE)
(173,dev)
(174,19)
(175,FRM_CFG)
(176,rx_buf)
(177,dev->reconf)
(178,i)
(179,dev->base)
(180,MGR_INT_RX_MSG_RCVD)
(181,ele = (u16)
(182,frm_stat)
(183,len)
(184,dev->base)
(185,&dev->reconf)
(186,MGR_RX_MSG +\n\\n\\t\\t\\t\\t\\t\\t(4 * i)
(187,dev)
(188,if (val & (1 << 19)
(189,dev->base)
(190,ctrl)
(191,dev->base +\n\\n\\t\\t\\t\\t\\t\\tFRM_IE_STAT)
(192,ele)
(193,i)
(194,i)
(195,addr_to_sat(dev, laddr)
(196,base)
(197,intf_intr_stat)
(198,dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(199,readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tINTF_INT_STAT)
(200,val & (1 << 3)
(201,pstat = readl_relaxed(PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver)
(202,mt == SLIM_MSG_MT_SRC_REFERRED_USER)
(203,1)
(204,buf)
(205,MGR_INT_CLR)
(206,"offset:0x%x:bit mask:%x")
(207,dev)
(208,0)
(209,base)
(210,if (sat)
(211,i)
(212,dev->base)
(213,dev)
(214,mt)
(215,rx_buf)
(216,MGR_INT_TX_MSG_SENT)
(217,e_addr)
(218,err)
(219,(rx_buf[0] >> 5)
(220,val = readl_relaxed(PGD_PORT(PGD_PORT_STATn,\n\\n\\t\\t\\t\\t\\t\\t\\ti, dev->ver)
(221,0)
(222,val)
(223,dev)
(224,writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(225,SLIM_P_DISCONNECT)
(226,mc)
(227,dev->base)
(228,dev)
(229,dev)
(230,sat)
(231,"Unexpected MC,%x MT:%x, len:%d")
(232,stat & MGR_INT_TX_MSG_SENT)
(233,if (stat & MGR_INT_RX_MSG_RCVD)
(234,ele)
(235,val)
(236,pr_err("TX Nack INTF dump:ie_stat:0x%x", intf_ie_stat)
(237,frm_ie_stat = readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tFRM_IE_STAT)
(238,mt)
(239,SLIM_MSG_MT_CORE)
(240,SLIM_MSG_MT_DEST_REFERRED_USER)
(241,sat)
(242,)
(243,mt == SLIM_MSG_MT_CORE)
(244,mc == SLIM_MSG_MC_REPORT_PRESENT)
(245,(len + 3)
(246,EIO)
(247,mb()
(248,)
(249,mb()
(250,stat)
(251,val)
(252,i)
(253,mt == SLIM_MSG_MT_CORE &&\n\\n\\t\\t\\tmc == SLIM_MSG_MC_REPORT_ABSENT)
(254,ver)
(255,5)
(256,writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(257,3)
(258,-EIO)
(259,dev)
(260,dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(261,SLIM_MSG_MC_REPORT_ABSENT)
(262,frm_stat = readl_relaxed(dev->base + FRM_STAT)
(263,dev->ver)
(264,MGR_INT_CLR)
(265,i)
(266,mc == SLIM_MSG_MC_REPLY_INFORMATION)
(267,dev)
(268,mc)
(269,dev->ctrl.ports[i].err =\n\\n\\t\\t\\t\\t\\t\\t\\tSLIM_P_OVERFLOW)
(270,1 << 3)
(271,0)
(272,dev)
(273,16)
(274,FRM_INT_STAT)
(275,base)
(276,)
(277,"reading data: %x\\n")
(278,dev)
(279,dev)
(280,msm_sat_enqueue(sat, rx_buf, len)
(281,val)
(282,dev)
(283,i++)
(284,i < ((len + 3)
(285,dev->ctrl.ports[i].err)
(286,i)
(287,2)
(288,reconf)
(289,laddr)
(290,pstat)
(291,dev->rx_msgq_notify)
(292,rx_buf)
(293,mgr_stat)
(294,)
(295,MGR_INT_CLR)
(296,dev->ver)
(297,dev)
(298,&sat->wd)
(299,dev->dev)
(300,MGR_INT_RX_MSG_RCVD)
(301,FRM_STAT)
(302,dev->base)
(303,base)
(304,laddr)
(305,dev->err)
(306,len)
(307,writel_relaxed(1, PGD_THIS_EE(PGD_PORT_INT_CL_EEn,\n\\n\\t\\t\\t\\t\\t\\t\\tdev->ver)
(308,dev->ctrl.ports[i])
(309,RET)
(310,sat->wd)
(311,i)
(312,SLIM_MSG_MC_REPORT_INFORMATION)
(313,buf)
(314,dev_err(dev->dev, "Unexpected MC,%x MT:%x, len:%d",\n\\n\\t\\t\\t\\t\\t\\tmc, mt, len)
(315,"TX Nack FRM dump:int_stat:0x%x, frm_stat:0x%x")
(316,intf_stat)
(317,buf[2])
(318,dev_err(dev->dev, "offset:0x%x:bit mask:%x",\n\\n\\t\\t\\t\\t\\t\\ti, buf[i+5])
(319,stat)
(320,0x7)
(321,mc == SLIM_MSG_MC_REPLY_INFORMATION ||\n\\n\\t\\t\\t\\tmc == SLIM_MSG_MC_REPLY_VALUE)
(322,frm_ie_stat)
(323,4)
(324,dev)
(325,1 << 19)
(326,stat & MGR_INT_TX_NACKED_2)
(327,dev->ctrl.ports)
(328,dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(329,dev->base)
(330,rx_buf)
(331,ports)
(332,1 << 2)
(333,dev)
(334,dev->ver)
(335,dev)
(336,MSM_SLIM_NPORTS)
(337,buf[3])
(338,dev)
(339,i)
(340,wq)
(341,i)
(342,dev->pipes[i-dev->pipe_b])
(343,MGR_INT_CLR)
(344,base)
(345,0)
(346,mt)
(347,mb()
(348,dev)
(349,)
(350,readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tFRM_IE_STAT)
(351,u16)
(352,complete(dev->wr_comp)
(353,mt)
(354,2)
(355,base)
(356,msm_slim_rx_enqueue(dev, rx_buf, len)
(357,complete(&dev->rx_msgq_notify)
(358,1)
(359,readl_relaxed(dev->base + FRM_STAT)
(360,mc)
(361,if (mt == SLIM_MSG_MT_DEST_REFERRED_USER ||\n\\n\\t\\t\\t\\tmt == SLIM_MSG_MT_SRC_REFERRED_USER)
(362,dev->base)
(363,dev->ctrl.ports[i].err =\n\\n\\t\\t\\t\\t\\t\\tSLIM_P_UNDERFLOW)
(364,laddr)
(365,8)
(366,dev->base + MGR_RX_MSG)
(367,buf)
(368,SLIM_MSG_MC_REPLY_VALUE)
(369,writel_relaxed(MGR_INT_TX_MSG_SENT,\n\\n\\t\\t\\t\\t\\tdev->base + MGR_INT_CLR)
(370,dev->pipes[i-dev->pipe_b].connected =\n\\n\\t\\t\\t\\t\\t\\t\\tfalse)
(371,void *d)
(372,if (dev->wr_comp)
(373,dev)
(374,base)
(375,1 << i)
(376,len - 5)
(377,mb()
(378,rx_buf[i])
(379,i = 0)
(380,mc)
(381,dev->base + MGR_INT_CLR)
(382,val & (1 << 19)
(383,len)
(384,readl_relaxed(dev->base + MGR_INT_STAT)
(385,MGR_INT_RECFG_DONE)
(386,base)
(387,(u16)
(388,base)
(389,dev->pipes)
(390,MGR_INT_RX_MSG_RCVD)
(391,"MC: %x, MT: %x\\n")
(392,i)
(393,writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(394,connected)
(395,dev->base + MGR_INT_CLR)
(396,PGD_THIS_EE(PGD_PORT_INT_CL_EEn,\n\\n\\t\\t\\t\\t\\t\\t\\tdev->ver)
(397,dev)
(398,dev_err(dev->dev, "Slim-dev:%d report inf element:0x%x",\n\\n\\t\\t\\t\\t\\tl_addr, ele)
(399,intf_intr_stat = readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tINTF_INT_STAT)
(400,rx_buf)
(401,rx_buf[0] >> 8)
(402,IRQ_HANDLED)
(403,MGR_INT_STAT)
(404,mgr_ie_stat)
(405,i)
(406,dev->base + INTF_STAT)
(407,dev->base)
(408,readl_relaxed(dev->base + MGR_STATUS)
(409,2)
(410,mb()
(411,frm_cfg = readl_relaxed(dev->base + FRM_CFG)
(412,i)
(413,i)
(414,msm_slim_rx_enqueue(dev, rx_buf, len)
(415,ele)
(416,pipes)
(417,dev)
(418,&dev->rx_msgq_notify)
(419,len + 3)
(420,ver)
(421,dev)
(422,rx_buf[0])
(423,)
(424,mgr_ie_stat = readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_IE_STAT)
(425,)
(426,rx_buf)
(427,pr_err("TX Nack MGR dump:int_stat:0x%x, mgr_stat:0x%x",\n\\n\\t\\t\\t\\t\\tstat, mgr_stat)
(428,dev->base + FRM_STAT)
(429,mc = (rx_buf[0] >> 8)
(430,i)
(431,writel_relaxed(MGR_INT_RX_MSG_RCVD,\n\\n\\t\\t\\t\\t\\tdev->base + MGR_INT_CLR)
(432,frm_intr_stat)
(433,dev->dev)
(434,base)
(435,dev->ctrl.ports[i])
(436,dev->base)
(437,0x1F)
(438,err)
(439,1)
(440,err)
(441,0)
(442,dev->ctrl.ports[i].err =\n\\n\\t\\t\\t\\t\\t\\tSLIM_P_DISCONNECT)
(443,rx_msgq_notify)
(444,)
(445,i)
(446,dev->ctrl.ports)
(447,*buf = (u8 *)
(448,frm_intr_stat)
(449,mgr_ie_stat)
(450,dev)
(451,dev->base)
(452,dev)
(453,readl_relaxed(dev->base + MGR_RX_MSG)
(454,ele |= ((buf[3] & 0xf0)
(455,stat)
(456,0)
(457,MGR_INT_TX_NACKED_2)
(458,len)
(459,msm_get_eaddr(e_addr, rx_buf)
(460,dev->base +\n\\n\\t\\t\\t\\t\\t\\tFRM_INT_STAT)
(461,ver)
(462,frm_cfg)
(463,dev)
(464,dev)
(465,intf_ie_stat)
(466,rx_buf)
(467,wd)
(468,dev)
(469,readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tINTF_IE_STAT)
(470,dev)
(471,l_addr)
(472,frm_cfg)
(473,SLIM_MSG_MT_SRC_REFERRED_USER)
(474,mt)
(475,u8)
(476,PGD_PORT_INT_CL_EEn)
(477,MGR_INT_CLR)
(478,dev->base)
(479,dev->base)
(480,i)
(481,)
(482,MGR_STATUS)
(483,MGR_INT_RX_MSG_RCVD)
(484,l_addr)
(485,rx_buf[0])
(486,MGR_INT_RX_MSG_RCVD)
(487,i)
(488,dev)
(489,dev->ctrl.ports[i].err)
(490,mt)
(491,PGD_THIS_EE(PGD_PORT_INT_ST_EEn, dev->ver)
(492,frm_intr_stat = readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tFRM_INT_STAT)
(493,rx_buf[i])
(494,dev->base)
(495,buf[3] & 0xf0)
(496,buf)
(497,buf)
(498,mc == SLIM_MSG_MC_REPORT_ABSENT)
(499,3)
(500,i)
(501,"unknown sat:%d message")
(502,mt == SLIM_MSG_MT_DEST_REFERRED_USER)
(503,dev)
(504,*dev = d)
(505,rx_msgq_notify)
(506,dev_dbg(dev->dev, "reading data: %x\\n", rx_buf[i])
(507,mb()
(508,mgr_stat = readl_relaxed(dev->base + MGR_STATUS)
(509,pipe_b)
(510,return IRQ_HANDLED;)
(511,buf)
(512,dev->pipe_b)
(513,&dev->rx_msgq_notify)
(514,dev->base +\n\\n\\t\\t\\t\\t\\t\\tINTF_INT_STAT)
(515,SLIM_MSG_MC_REPORT_PRESENT)
(516,pstat != 0)
(517,dev)
(518,dev->err = -EIO)
(519,if (stat & MGR_INT_RECFG_DONE)
(520,i)
(521,i = dev->pipe_b)
(522,dev->base + MGR_INT_STAT)
(523,mgr_ie_stat)
(524,mc)
(525,for (i = dev->pipe_b; i < MSM_SLIM_NPORTS; i++)
(526,i-dev->pipe_b)
(527,rx_buf[i])
(528,stat & MGR_INT_TX_MSG_SENT)
(529,(rx_buf[0] >> 16)
(530,dev->base)
(531,dev->ctrl)
(532,i++)
(533,)
(534,readl_relaxed(PGD_PORT(PGD_PORT_STATn,\n\\n\\t\\t\\t\\t\\t\\t\\ti, dev->ver)
(535,dev->rx_msgq_notify)
(536,dev)
(537,(len + 3)
(538,i)
(539,dev->dev)
(540,rx_msgq_notify)
(541,dev)
(542,rx_buf)
(543,dev->ctrl.ports[i])
(544,dev->base + MGR_INT_CLR)
(545,)
(546,len)
(547,dev->dev)
(548,0)
(549,i++)
(550,readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_IE_STAT)
(551,"TX Nack INTF dump:ie_stat:0x%x")
(552,*sat = addr_to_sat(dev, laddr)
(553,SLIM_MSG_MT_CORE)
(554,for (i = 0; i < len - 5; i++)
(555,dev->base)
(556,dev->ctrl.ports[i].err)
(557,dev->wr_comp)
(558,dev->base + MGR_INT_CLR)
(559,SLIM_MSG_MC_REPLY_INFORMATION)
(560,laddr = (u8)
(561,buf[4])
(562,dev->dev)
(563,base)
(564,i++)
(565,writel_relaxed(MGR_INT_RX_MSG_RCVD, dev->base +\n\\n\\t\\t\\t\\t\\t\\tMGR_INT_CLR)
(566,rx_buf[0] & 0x1F)
(567,intf_stat)
(568,5)
(569,SLIM_P_UNDERFLOW)
(570,dev)
(571,readl_relaxed(dev->base + FRM_CFG)
(572,dev)
(573,dev)
(574,4 * i)
(575,readl_relaxed(dev->base +\n\\n\\t\\t\\t\\t\\t\\tFRM_INT_STAT)
(576,mc)
(577,dev->base)
(578,dev)
(579,4)
(580,FRM_IE_STAT)
(581,PGD_PORT(PGD_PORT_STATn,\n\\n\\t\\t\\t\\t\\t\\t\\ti, dev->ver)
(582,wr_comp)
(583,d)
(584,complete(&dev->rx_msgq_notify)
(585,"TX Nack INTF dump:intr_st:0x%x, intf_stat:0x%x")
(586,5)
(587,mgr_stat)
(588,stat)
(589,i)
(590,dev->pipe_b)
(591,dev)
(592,0xFF)
(593,mc)
(594,laddr)
(595,if (stat & MGR_INT_TX_MSG_SENT || stat & MGR_INT_TX_NACKED_2)
(596,dev)
(597,1)
(598,)
(599,4)
(600,val & (1 << 2)
(601,(u16)
(602,if (sat)
(603,i < len - 5)
(604,err)
(605,rx_buf[0])
(606,dev)
(607,stat & MGR_INT_RX_MSG_RCVD)
(608,sat)
(609,mc)
(610,mb()
(611,stat)
(612,1)
(613,frm_ie_stat)
(614,0)
(615,intf_ie_stat)
(616,PGD_PORT_STATn)
(617,dev)
(618,3)
(619,i < MSM_SLIM_NPORTS)
(620,(u8 *)
(621,dev)
(622,dev->ctrl)
(623,ctrl)
(624,ctrl)
(625,i+5)
(626,pr_err("TX Nack MGR dump:ie_stat:0x%x", mgr_ie_stat)
(627,dev)
(628,sat)
(629,buf[i+5])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^