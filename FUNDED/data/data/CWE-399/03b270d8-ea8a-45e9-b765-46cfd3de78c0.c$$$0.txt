-----label-----
1
-----code-----
static void intel_pstate_set_pstate(struct cpudata *cpu, int pstate)
{
	int max_perf, min_perf;
	u64 val;

	intel_pstate_get_min_max(cpu, &min_perf, &max_perf);

	pstate = clamp_t(int, pstate, min_perf, max_perf);

	if (pstate == cpu->pstate.current_pstate)
		return;

	trace_cpu_frequency(pstate * 100000, cpu->cpu);

	cpu->pstate.current_pstate = pstate;
	val = pstate << 8;
	if (limits.no_turbo)
		val |= (u64)1 << 32;

	wrmsrl(MSR_IA32_PERF_CTL, val);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
15,25
16,17
17,18
17,19
17,20
19,20
21,22
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
30,33
30,34
31,32
33,34
35,36
36,37
38,39
39,40
41,42
42,43
42,44
43,44
43,45
44,45
46,47
46,48
47,48
47,49
48,49
53,54
54,55
54,56
54,57
55,56
57,58
57,59
58,59
61,62
61,63
62,63
65,66
66,67
66,68
67,68
67,69
68,69
68,70
69,70
73,74
75,76
76,77
76,78
77,78
79,80
79,81
80,81
83,84
83,85
84,85
84,86
85,86
88,89
89,90
89,91
90,91
92,93
92,94
93,94
93,95
94,95
94,96
95,96
100,101
101,102
101,103
101,104
102,103
104,105
106,107
-----nextToken-----
2,4,7,9,10,12,14,18,20,22,26,28,32,34,37,40,45,49,50,51,52,56,59,60,63,64,70,71,72,74,78,81,82,86,87,91,96,97,98,99,103,105,107
-----computeFrom-----
43,44
43,45
57,58
57,59
66,67
66,68
76,77
76,78
79,80
79,81
89,90
89,91
92,93
92,94
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;ProblemStatement;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;BinaryExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void intel_pstate_set_pstate(struct cpudata *cpu, int pstate){	int max_perf, min_perf;	u64 val;	intel_pstate_get_min_max(cpu, &min_perf, &max_perf);	pstate = clamp_t(int, pstate, min_perf, max_perf);	if (pstate == cpu->pstate.current_pstate)		return;	trace_cpu_frequency(pstate * 100000, cpu->cpu);	cpu->pstate.current_pstate = pstate;	val = pstate << 8;	if (limits.no_turbo)		val |= (u64)1 << 32;	wrmsrl(MSR_IA32_PERF_CTL, val);}
static void
intel_pstate_set_pstate(struct cpudata *cpu, int pstate)
intel_pstate_set_pstate
struct cpudata *cpu
struct cpudata
cpudata
*cpu
*
cpu
int pstate
int
pstate
pstate
{	int max_perf, min_perf;	u64 val;	intel_pstate_get_min_max(cpu, &min_perf, &max_perf);	pstate = clamp_t(int, pstate, min_perf, max_perf);	if (pstate == cpu->pstate.current_pstate)		return;	trace_cpu_frequency(pstate * 100000, cpu->cpu);	cpu->pstate.current_pstate = pstate;	val = pstate << 8;	if (limits.no_turbo)		val |= (u64)1 << 32;	wrmsrl(MSR_IA32_PERF_CTL, val);}
int max_perf, min_perf;
int max_perf, min_perf;
int
max_perf
max_perf
min_perf
min_perf
u64 val;
u64 val;
u64
u64
val
val
intel_pstate_get_min_max(cpu, &min_perf, &max_perf);
intel_pstate_get_min_max(cpu, &min_perf, &max_perf)
intel_pstate_get_min_max
intel_pstate_get_min_max
cpu
cpu
&min_perf
min_perf
min_perf
&max_perf
max_perf
max_perf
pstate = clamp_t(int, pstate, min_perf, max_perf);
if (pstate == cpu->pstate.current_pstate)		return;
pstate == cpu->pstate.current_pstate
pstate
pstate
cpu->pstate.current_pstate
cpu->pstate
cpu
cpu
pstate
current_pstate
return;
trace_cpu_frequency(pstate * 100000, cpu->cpu);
trace_cpu_frequency(pstate * 100000, cpu->cpu)
trace_cpu_frequency
trace_cpu_frequency
pstate * 100000
pstate
pstate
100000
cpu->cpu
cpu
cpu
cpu
cpu->pstate.current_pstate = pstate;
cpu->pstate.current_pstate = pstate
cpu->pstate.current_pstate
cpu->pstate
cpu
cpu
pstate
current_pstate
pstate
pstate
val = pstate << 8;
val = pstate << 8
val
val
pstate << 8
pstate
pstate
8
if (limits.no_turbo)		val |= (u64)1 << 32;
limits.no_turbo
limits
limits
no_turbo
val |= (u64)1 << 32;
val |= (u64)1 << 32
val
val
(u64)1 << 32
(u64)1
u64
u64
u64

1
32
wrmsrl(MSR_IA32_PERF_CTL, val);
wrmsrl(MSR_IA32_PERF_CTL, val)
wrmsrl
wrmsrl
MSR_IA32_PERF_CTL
MSR_IA32_PERF_CTL
val
val
-----joern-----
(32,3,0)
(15,44,0)
(42,13,0)
(60,9,0)
(26,20,0)
(55,52,0)
(4,48,0)
(25,21,0)
(10,6,0)
(22,53,0)
(9,53,0)
(57,53,0)
(52,29,0)
(0,39,0)
(52,58,0)
(60,56,0)
(53,56,0)
(61,60,0)
(36,56,0)
(13,44,0)
(8,58,0)
(7,50,0)
(60,44,0)
(44,60,0)
(28,7,0)
(54,31,0)
(9,56,0)
(44,13,0)
(30,32,0)
(40,50,0)
(39,3,0)
(35,7,0)
(20,58,0)
(13,3,0)
(6,7,0)
(29,52,0)
(41,13,0)
(1,50,0)
(37,0,0)
(23,31,0)
(30,50,0)
(36,50,0)
(16,30,0)
(20,7,0)
(45,50,0)
(5,28,0)
(31,50,0)
(32,30,0)
(43,50,0)
(58,52,0)
(27,9,0)
(2,28,0)
(0,36,0)
(28,20,0)
(31,23,0)
(24,32,0)
(49,36,0)
(11,16,0)
(31,3,0)
(31,48,0)
(17,53,0)
(14,39,0)
(53,9,0)
(46,53,0)
(7,6,0)
(16,56,0)
(12,16,0)
(9,50,0)
(39,0,0)
(47,33,0)
(38,39,0)
(59,6,0)
(16,9,0)
(48,31,0)
(19,50,0)
(51,21,0)
(34,23,0)
(30,16,0)
(6,56,0)
(58,20,0)
(18,32,0)
(28,50,0)
(36,9,0)
(6,9,0)
(12,60,1)
(46,22,1)
(39,38,1)
(36,56,1)
(30,32,1)
(57,17,1)
(49,0,1)
(4,23,1)
(8,52,1)
(48,4,1)
(47,28,1)
(6,9,1)
(22,27,1)
(34,54,1)
(36,9,1)
(32,24,1)
(25,7,1)
(13,41,1)
(20,58,1)
(14,30,1)
(2,20,1)
(11,12,1)
(9,56,1)
(55,26,1)
(30,16,1)
(60,56,1)
(58,8,1)
(23,34,1)
(39,3,1)
(52,55,1)
(52,29,1)
(28,20,1)
(44,13,1)
(60,9,1)
(53,56,1)
(58,52,1)
(10,59,1)
(32,3,1)
(0,39,1)
(35,36,1)
(53,57,1)
(51,25,1)
(28,7,1)
(26,21,1)
(24,18,1)
(33,60,1)
(6,56,1)
(60,44,1)
(44,15,1)
(31,48,1)
(2,21,1)
(37,39,1)
(0,37,1)
(38,14,1)
(36,49,1)
(15,13,1)
(42,61,1)
(18,16,1)
(47,33,1)
(27,31,1)
(16,9,1)
(6,10,1)
(28,5,1)
(7,6,1)
(9,53,1)
(20,7,1)
(41,42,1)
(16,11,1)
(5,2,1)
(31,3,1)
(17,46,1)
(59,35,1)
(16,56,1)
(61,9,1)
(13,3,1)
(21,51,1)
(31,23,1)
(21,60,2)
(58,52,2)
(16,60,2)
(55,21,2)
(53,56,2)
(20,7,2)
(30,16,2)
(60,44,2)
(52,29,2)
(28,60,2)
(7,6,2)
(20,58,2)
(30,32,2)
(18,60,2)
(28,7,2)
(30,60,2)
(8,21,2)
(2,60,2)
(6,56,2)
(58,21,2)
(59,60,2)
(37,60,2)
(31,23,2)
(16,56,2)
(44,13,2)
(60,9,2)
(6,9,2)
(12,60,2)
(31,48,2)
(9,53,2)
(14,60,2)
(6,60,2)
(0,39,2)
(32,60,2)
(60,56,2)
(9,56,2)
(25,60,2)
(13,3,2)
(36,60,2)
(47,33,2)
(35,60,2)
(16,9,2)
(10,60,2)
(36,9,2)
(5,60,2)
(39,60,2)
(32,3,2)
(24,60,2)
(33,60,2)
(52,21,2)
(26,21,2)
(20,21,2)
(38,60,2)
(36,56,2)
(51,60,2)
(31,3,2)
(11,60,2)
(39,3,2)
(49,60,2)
(28,20,2)
(0,60,2)
(7,60,2)
-----------------------------------
(0,cpu->pstate.current_pstate)
(1,val)
(2,MSR_IA32_PERF_CTL)
(3,struct cpudata *cpu)
(4,max_perf)
(5,val)
(6,pstate << 8)
(7,val = pstate << 8)
(8,32)
(9,pstate = clamp_t(int, pstate, min_perf, max_perf)
(10,8)
(11,100000)
(12,pstate)
(13,cpu->pstate)
(14,cpu)
(15,current_pstate)
(16,pstate * 100000)
(17,min_perf)
(18,cpu)
(19,if (pstate == cpu->pstate.current_pstate)
(20,val |= (u64)
(21,limits.no_turbo)
(22,int)
(23,&min_perf)
(24,cpu)
(25,limits)
(26,val)
(27,pstate)
(28,wrmsrl(MSR_IA32_PERF_CTL, val)
(29,u64)
(30,trace_cpu_frequency(pstate * 100000, cpu->cpu)
(31,intel_pstate_get_min_max(cpu, &min_perf, &max_perf)
(32,cpu->cpu)
(33,return;)
(34,min_perf)
(35,val)
(36,cpu->pstate.current_pstate = pstate)
(37,current_pstate)
(38,pstate)
(39,cpu->pstate)
(40,max_perf)
(41,pstate)
(42,cpu)
(43,if (limits.no_turbo)
(44,cpu->pstate.current_pstate)
(45,min_perf)
(46,pstate)
(47,RET)
(48,&max_perf)
(49,pstate)
(50,)
(51,no_turbo)
(52,(u64)
(53,clamp_t(int, pstate, min_perf, max_perf)
(54,cpu)
(55,1)
(56,int pstate)
(57,max_perf)
(58,(u64)
(59,pstate)
(60,pstate == cpu->pstate.current_pstate)
(61,pstate)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^