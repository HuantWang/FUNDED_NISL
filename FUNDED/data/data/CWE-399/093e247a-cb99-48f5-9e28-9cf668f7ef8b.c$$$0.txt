-----label-----
1
-----code-----
static int i40e_config_rss_aq(struct i40e_vsi *vsi, const u8 *seed)
{
	struct i40e_aqc_get_set_rss_key_data rss_key;
	struct i40e_pf *pf = vsi->back;
	struct i40e_hw *hw = &pf->hw;
	bool pf_lut = false;
	u8 *rss_lut;
	int ret, i;

	memset(&rss_key, 0, sizeof(rss_key));
	memcpy(&rss_key, seed, sizeof(rss_key));

	rss_lut = kzalloc(pf->rss_table_size, GFP_KERNEL);
	if (!rss_lut)
		return -ENOMEM;

	/* Populate the LUT with max no. of queues in round robin fashion */
	for (i = 0; i < vsi->rss_table_size; i++)
		rss_lut[i] = i % vsi->rss_size;

	ret = i40e_aq_set_rss_key(hw, vsi->id, &rss_key);
	if (ret) {
		dev_info(&pf->pdev->dev,
			 "Cannot set RSS key, err %s aq_err %s\n",
			 i40e_stat_str(&pf->hw, ret),
			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));
		return ret;
	}

	if (vsi->type == I40E_VSI_MAIN)
		pf_lut = true;

	ret = i40e_aq_set_rss_lut(hw, vsi->id, pf_lut, rss_lut,
				  vsi->rss_table_size);
	if (ret)
		dev_info(&pf->pdev->dev,
			 "Cannot set RSS lut, err %s aq_err %s\n",
			 i40e_stat_str(&pf->hw, ret),
			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
18,19
19,20
19,21
20,21
22,23
24,25
25,26
25,27
26,27
28,29
28,30
28,31
31,32
32,33
32,34
33,34
36,37
37,38
37,39
38,39
40,41
40,42
40,43
43,44
44,45
45,46
45,47
46,47
49,50
50,51
50,52
52,53
52,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
63,64
64,65
64,66
64,67
66,67
68,69
70,71
71,72
71,73
71,74
71,75
72,73
74,75
75,76
78,79
79,80
80,81
82,83
83,84
83,85
83,86
83,87
84,85
86,87
87,88
89,90
91,92
92,93
93,94
95,96
96,97
96,98
97,98
99,100
99,101
99,102
100,101
102,103
102,104
103,104
106,107
108,109
108,110
109,110
110,111
112,113
113,114
114,115
116,117
116,118
116,119
116,120
117,118
118,119
118,120
119,120
122,123
122,124
123,124
125,126
125,127
126,127
129,130
130,131
132,133
133,134
133,135
134,135
134,136
135,136
137,138
139,140
139,141
140,141
142,143
142,144
143,144
146,147
147,148
147,149
148,149
150,151
150,152
150,153
150,154
151,152
153,154
155,156
155,157
156,157
159,160
160,161
162,163
162,164
163,164
165,166
165,167
166,167
167,168
167,169
167,170
167,171
167,172
168,169
170,171
171,172
171,173
172,173
172,174
173,174
178,179
178,180
178,181
179,180
181,182
182,183
182,184
183,184
186,187
188,189
188,190
188,191
189,190
191,192
192,193
192,194
193,194
196,197
196,198
197,198
197,199
198,199
198,200
199,200
204,205
205,206
207,208
207,209
208,209
208,210
209,210
209,211
210,211
213,214
215,216
216,217
216,218
217,218
220,221
221,222
221,223
222,223
224,225
224,226
224,227
224,228
224,229
224,230
225,226
227,228
229,230
229,231
230,231
233,234
235,236
237,238
237,239
238,239
241,242
241,243
242,243
244,245
245,246
245,247
245,248
245,249
245,250
246,247
248,249
249,250
249,251
250,251
250,252
251,252
256,257
256,258
256,259
257,258
259,260
260,261
260,262
261,262
264,265
266,267
266,268
266,269
267,268
269,270
270,271
270,272
271,272
274,275
274,276
275,276
275,277
276,277
276,278
277,278
282,283
283,284
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,27,29,30,34,35,39,41,42,47,48,51,53,55,59,61,62,65,67,69,73,76,77,81,85,88,90,94,98,101,104,105,107,111,115,120,121,124,127,128,131,136,138,141,144,145,149,152,154,157,158,161,164,169,174,175,176,177,180,184,185,187,190,194,195,200,201,202,203,206,211,212,214,218,219,223,226,228,231,232,234,236,239,240,243,247,252,253,254,255,258,262,263,265,268,272,273,278,279,280,281,284
-----computeFrom-----
96,97
96,98
118,119
118,120
122,123
122,124
133,134
133,135
139,140
139,141
147,148
147,149
208,209
208,210
216,217
216,218
221,222
221,223
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int i40e_config_rss_aq(struct i40e_vsi *vsi, const u8 *seed){	struct i40e_aqc_get_set_rss_key_data rss_key;	struct i40e_pf *pf = vsi->back;	struct i40e_hw *hw = &pf->hw;	bool pf_lut = false;	u8 *rss_lut;	int ret, i;	memset(&rss_key, 0, sizeof(rss_key));	memcpy(&rss_key, seed, sizeof(rss_key));	rss_lut = kzalloc(pf->rss_table_size, GFP_KERNEL);	if (!rss_lut)		return -ENOMEM;	/* Populate the LUT with max no. of queues in round robin fashion */	for (i = 0; i < vsi->rss_table_size; i++)		rss_lut[i] = i % vsi->rss_size;	ret = i40e_aq_set_rss_key(hw, vsi->id, &rss_key);	if (ret) {		dev_info(&pf->pdev->dev,			 "Cannot set RSS key, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));		return ret;	}	if (vsi->type == I40E_VSI_MAIN)		pf_lut = true;	ret = i40e_aq_set_rss_lut(hw, vsi->id, pf_lut, rss_lut,				  vsi->rss_table_size);	if (ret)		dev_info(&pf->pdev->dev,			 "Cannot set RSS lut, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));	return ret;}
static int
i40e_config_rss_aq(struct i40e_vsi *vsi, const u8 *seed)
i40e_config_rss_aq
struct i40e_vsi *vsi
struct i40e_vsi
i40e_vsi
*vsi
*
vsi
const u8 *seed
const u8
u8
*seed
*
seed
{	struct i40e_aqc_get_set_rss_key_data rss_key;	struct i40e_pf *pf = vsi->back;	struct i40e_hw *hw = &pf->hw;	bool pf_lut = false;	u8 *rss_lut;	int ret, i;	memset(&rss_key, 0, sizeof(rss_key));	memcpy(&rss_key, seed, sizeof(rss_key));	rss_lut = kzalloc(pf->rss_table_size, GFP_KERNEL);	if (!rss_lut)		return -ENOMEM;	/* Populate the LUT with max no. of queues in round robin fashion */	for (i = 0; i < vsi->rss_table_size; i++)		rss_lut[i] = i % vsi->rss_size;	ret = i40e_aq_set_rss_key(hw, vsi->id, &rss_key);	if (ret) {		dev_info(&pf->pdev->dev,			 "Cannot set RSS key, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));		return ret;	}	if (vsi->type == I40E_VSI_MAIN)		pf_lut = true;	ret = i40e_aq_set_rss_lut(hw, vsi->id, pf_lut, rss_lut,				  vsi->rss_table_size);	if (ret)		dev_info(&pf->pdev->dev,			 "Cannot set RSS lut, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));	return ret;}
struct i40e_aqc_get_set_rss_key_data rss_key;
struct i40e_aqc_get_set_rss_key_data rss_key;
struct i40e_aqc_get_set_rss_key_data
i40e_aqc_get_set_rss_key_data
rss_key
rss_key
struct i40e_pf *pf = vsi->back;
struct i40e_pf *pf = vsi->back;
struct i40e_pf
i40e_pf
*pf = vsi->back
*
pf
= vsi->back
vsi->back
vsi
vsi
back
struct i40e_hw *hw = &pf->hw;
struct i40e_hw *hw = &pf->hw;
struct i40e_hw
i40e_hw
*hw = &pf->hw
*
hw
= &pf->hw
&pf->hw
pf->hw
pf
pf
hw
bool pf_lut = false;
bool pf_lut = false;
bool
pf_lut = false
pf_lut
= false
false
u8 *rss_lut;
u8 *rss_lut;
u8
u8
*rss_lut
*
rss_lut
int ret, i;
int ret, i;
int
ret
ret
i
i
memset(&rss_key, 0, sizeof(rss_key));
memset(&rss_key, 0, sizeof(rss_key))
memset
memset
&rss_key
rss_key
rss_key
0
sizeof(rss_key)
(rss_key)
rss_key
rss_key
memcpy(&rss_key, seed, sizeof(rss_key));
memcpy(&rss_key, seed, sizeof(rss_key))
memcpy
memcpy
&rss_key
rss_key
rss_key
seed
seed
sizeof(rss_key)
(rss_key)
rss_key
rss_key
rss_lut = kzalloc(pf->rss_table_size, GFP_KERNEL);
rss_lut = kzalloc(pf->rss_table_size, GFP_KERNEL)
rss_lut
rss_lut
kzalloc(pf->rss_table_size, GFP_KERNEL)
kzalloc
kzalloc
pf->rss_table_size
pf
pf
rss_table_size
GFP_KERNEL
GFP_KERNEL
if (!rss_lut)		return -ENOMEM;
!rss_lut
rss_lut
rss_lut
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
for (i = 0; i < vsi->rss_table_size; i++)		rss_lut[i] = i % vsi->rss_size;
i = 0;
i = 0
i
i
0
i < vsi->rss_table_size
i
i
vsi->rss_table_size
vsi
vsi
rss_table_size
i++
i
i
rss_lut[i] = i % vsi->rss_size;
rss_lut[i] = i % vsi->rss_size
rss_lut[i]
rss_lut
rss_lut
i
i
i % vsi->rss_size
i
i
vsi->rss_size
vsi
vsi
rss_size
ret = i40e_aq_set_rss_key(hw, vsi->id, &rss_key);
ret = i40e_aq_set_rss_key(hw, vsi->id, &rss_key)
ret
ret
i40e_aq_set_rss_key(hw, vsi->id, &rss_key)
i40e_aq_set_rss_key
i40e_aq_set_rss_key
hw
hw
vsi->id
vsi
vsi
id
&rss_key
rss_key
rss_key
if (ret) {		dev_info(&pf->pdev->dev,			 "Cannot set RSS key, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));		return ret;	}
ret
ret
{		dev_info(&pf->pdev->dev,			 "Cannot set RSS key, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));		return ret;	}
dev_info(&pf->pdev->dev,			 "Cannot set RSS key, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));
dev_info(&pf->pdev->dev,			 "Cannot set RSS key, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status))
dev_info
dev_info
&pf->pdev->dev
pf->pdev->dev
pf->pdev
pf
pf
pdev
dev
"Cannot set RSS key, err %s aq_err %s\n"
i40e_stat_str(&pf->hw, ret)
i40e_stat_str
i40e_stat_str
&pf->hw
pf->hw
pf
pf
hw
ret
ret
i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status)
i40e_aq_str
i40e_aq_str
&pf->hw
pf->hw
pf
pf
hw
pf->hw.aq.asq_last_status
pf->hw.aq
pf->hw
pf
pf
hw
aq
asq_last_status
return ret;
ret
ret
if (vsi->type == I40E_VSI_MAIN)		pf_lut = true;
vsi->type == I40E_VSI_MAIN
vsi->type
vsi
vsi
type
I40E_VSI_MAIN
I40E_VSI_MAIN
pf_lut = true;
pf_lut = true
pf_lut
pf_lut
true
ret = i40e_aq_set_rss_lut(hw, vsi->id, pf_lut, rss_lut,				  vsi->rss_table_size);
ret = i40e_aq_set_rss_lut(hw, vsi->id, pf_lut, rss_lut,				  vsi->rss_table_size)
ret
ret
i40e_aq_set_rss_lut(hw, vsi->id, pf_lut, rss_lut,				  vsi->rss_table_size)
i40e_aq_set_rss_lut
i40e_aq_set_rss_lut
hw
hw
vsi->id
vsi
vsi
id
pf_lut
pf_lut
rss_lut
rss_lut
vsi->rss_table_size
vsi
vsi
rss_table_size
if (ret)		dev_info(&pf->pdev->dev,			 "Cannot set RSS lut, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));
ret
ret
dev_info(&pf->pdev->dev,			 "Cannot set RSS lut, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status));
dev_info(&pf->pdev->dev,			 "Cannot set RSS lut, err %s aq_err %s\n",			 i40e_stat_str(&pf->hw, ret),			 i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status))
dev_info
dev_info
&pf->pdev->dev
pf->pdev->dev
pf->pdev
pf
pf
pdev
dev
"Cannot set RSS lut, err %s aq_err %s\n"
i40e_stat_str(&pf->hw, ret)
i40e_stat_str
i40e_stat_str
&pf->hw
pf->hw
pf
pf
hw
ret
ret
i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status)
i40e_aq_str
i40e_aq_str
&pf->hw
pf->hw
pf
pf
hw
pf->hw.aq.asq_last_status
pf->hw.aq
pf->hw
pf
pf
hw
aq
asq_last_status
return ret;
ret
ret
-----joern-----
(19,73,0)
(63,88,0)
(131,68,0)
(106,107,0)
(9,68,0)
(97,106,0)
(129,70,0)
(87,27,0)
(62,109,0)
(8,12,0)
(5,19,0)
(105,16,0)
(152,2,0)
(35,107,0)
(49,24,0)
(58,148,0)
(44,129,0)
(54,6,0)
(106,132,0)
(90,10,0)
(66,27,0)
(105,19,0)
(1,22,0)
(116,29,0)
(100,15,0)
(38,72,0)
(103,10,0)
(45,139,0)
(52,142,0)
(89,54,0)
(1,102,0)
(30,51,0)
(74,29,0)
(42,131,0)
(19,105,0)
(95,73,0)
(28,15,0)
(143,109,0)
(93,8,0)
(54,16,0)
(77,137,0)
(96,106,0)
(25,114,0)
(114,25,0)
(46,79,0)
(12,8,0)
(37,7,0)
(14,79,0)
(31,19,0)
(72,134,0)
(65,40,0)
(54,124,0)
(54,89,0)
(107,125,0)
(140,105,0)
(1,7,0)
(56,16,0)
(134,41,0)
(125,107,0)
(123,45,0)
(29,78,0)
(41,109,0)
(61,102,0)
(94,24,0)
(3,99,0)
(48,80,0)
(78,88,0)
(7,1,0)
(137,99,0)
(27,120,0)
(24,107,0)
(50,77,0)
(42,151,0)
(88,153,0)
(43,87,0)
(88,78,0)
(133,80,0)
(62,39,0)
(17,64,0)
(113,109,0)
(8,107,0)
(99,137,0)
(142,61,0)
(25,153,0)
(86,16,0)
(19,102,0)
(67,19,0)
(122,129,0)
(138,16,0)
(40,80,0)
(4,2,0)
(109,41,0)
(71,103,0)
(39,62,0)
(129,80,0)
(160,125,0)
(102,16,0)
(149,134,0)
(78,29,0)
(138,105,0)
(39,53,0)
(19,15,0)
(108,22,0)
(2,4,0)
(22,120,0)
(147,16,0)
(159,99,0)
(128,143,0)
(132,9,0)
(1,68,0)
(141,4,0)
(103,16,0)
(27,87,0)
(64,114,0)
(146,151,0)
(92,16,0)
(150,67,0)
(36,148,0)
(127,27,0)
(154,124,0)
(145,9,0)
(129,137,0)
(18,16,0)
(81,117,0)
(42,138,0)
(22,1,0)
(134,72,0)
(87,70,0)
(47,142,0)
(137,16,0)
(13,39,0)
(144,139,0)
(19,137,0)
(103,117,0)
(109,62,0)
(153,25,0)
(159,107,0)
(130,32,0)
(98,89,0)
(110,68,0)
(79,53,0)
(87,80,0)
(91,67,0)
(117,103,0)
(20,4,0)
(82,16,0)
(99,159,0)
(32,130,0)
(131,157,0)
(139,45,0)
(111,16,0)
(73,16,0)
(143,105,0)
(126,22,0)
(59,1,0)
(79,107,0)
(19,67,0)
(41,134,0)
(4,120,0)
(69,143,0)
(84,137,0)
(101,78,0)
(23,138,0)
(104,16,0)
(53,79,0)
(114,64,0)
(67,120,0)
(62,130,0)
(158,159,0)
(61,142,0)
(112,102,0)
(2,80,0)
(153,88,0)
(143,128,0)
(60,8,0)
(118,53,0)
(115,72,0)
(51,64,0)
(121,125,0)
(21,51,0)
(68,16,0)
(25,157,0)
(9,25,0)
(107,16,0)
(130,62,0)
(132,106,0)
(148,19,0)
(12,153,0)
(10,103,0)
(34,16,0)
(64,51,0)
(57,54,0)
(51,107,0)
(155,73,0)
(128,24,0)
(142,107,0)
(85,32,0)
(109,143,0)
(72,107,0)
(9,132,0)
(24,128,0)
(68,1,0)
(0,16,0)
(70,87,0)
(26,146,0)
(45,120,0)
(75,45,0)
(55,19,0)
(83,16,0)
(29,107,0)
(148,120,0)
(125,120,0)
(119,131,0)
(156,32,0)
(124,54,0)
(25,9,0)
(19,148,0)
(32,107,0)
(102,61,0)
(136,159,0)
(33,25,0)
(153,12,0)
(53,39,0)
(76,16,0)
(112,107,1)
(148,58,1)
(88,63,1)
(15,100,1)
(48,133,1)
(139,45,1)
(32,85,1)
(9,68,1)
(74,12,1)
(152,40,1)
(153,88,1)
(88,78,1)
(43,129,1)
(134,72,1)
(19,67,1)
(85,156,1)
(89,98,1)
(143,69,1)
(32,107,1)
(79,14,1)
(87,80,1)
(27,127,1)
(22,126,1)
(114,64,1)
(145,132,1)
(23,135,1)
(21,11,1)
(42,131,1)
(136,84,1)
(95,155,1)
(5,148,1)
(22,120,1)
(28,139,1)
(143,128,1)
(9,132,1)
(65,70,1)
(58,36,1)
(72,115,1)
(129,80,1)
(62,130,1)
(23,109,1)
(33,114,1)
(91,150,1)
(77,137,1)
(3,159,1)
(131,119,1)
(25,153,1)
(80,48,1)
(53,79,1)
(155,102,1)
(90,73,1)
(4,120,1)
(156,143,1)
(99,159,1)
(19,148,1)
(127,66,1)
(24,107,1)
(122,2,1)
(1,102,1)
(140,139,1)
(102,61,1)
(123,75,1)
(37,22,1)
(103,117,1)
(45,123,1)
(130,32,1)
(27,120,1)
(150,31,1)
(11,68,1)
(51,30,1)
(135,105,1)
(129,44,1)
(131,68,1)
(17,51,1)
(54,89,1)
(12,8,1)
(70,87,1)
(105,19,1)
(116,74,1)
(125,120,1)
(93,60,1)
(25,9,1)
(148,120,1)
(39,13,1)
(128,24,1)
(109,62,1)
(106,97,1)
(30,21,1)
(47,112,1)
(67,120,1)
(134,149,1)
(143,105,1)
(24,94,1)
(64,51,1)
(59,110,1)
(142,107,1)
(159,107,1)
(29,116,1)
(154,103,1)
(124,154,1)
(61,142,1)
(75,11,1)
(99,3,1)
(117,81,1)
(125,121,1)
(158,136,1)
(7,37,1)
(106,107,1)
(51,107,1)
(103,10,1)
(19,137,1)
(159,158,1)
(19,73,1)
(64,17,1)
(67,91,1)
(8,93,1)
(1,7,1)
(142,52,1)
(100,28,1)
(40,65,1)
(1,22,1)
(39,53,1)
(140,15,1)
(40,80,1)
(121,160,1)
(36,55,1)
(4,141,1)
(41,134,1)
(160,35,1)
(78,101,1)
(60,9,1)
(139,144,1)
(31,5,1)
(141,20,1)
(20,152,1)
(68,1,1)
(50,137,1)
(81,71,1)
(153,12,1)
(54,124,1)
(19,15,1)
(146,26,1)
(72,107,1)
(2,4,1)
(101,29,1)
(29,107,1)
(94,49,1)
(53,118,1)
(25,114,1)
(63,78,1)
(78,29,1)
(49,113,1)
(54,6,1)
(8,107,1)
(138,105,1)
(84,54,1)
(45,120,1)
(96,33,1)
(118,79,1)
(19,102,1)
(152,80,1)
(57,124,1)
(71,10,1)
(138,23,1)
(107,125,1)
(98,57,1)
(132,106,1)
(115,38,1)
(42,138,1)
(9,145,1)
(2,80,1)
(46,130,1)
(108,59,1)
(62,39,1)
(44,122,1)
(38,135,1)
(73,95,1)
(126,108,1)
(55,140,1)
(109,41,1)
(79,107,1)
(129,137,1)
(77,50,1)
(13,53,1)
(52,47,1)
(144,45,1)
(66,43,1)
(149,72,1)
(97,96,1)
(109,143,1)
(151,146,1)
(137,99,1)
(26,77,1)
(42,151,1)
(119,25,1)
(133,77,1)
(10,90,1)
(110,2,1)
(69,128,1)
(87,27,1)
(113,41,1)
(14,46,1)
(109,41,2)
(128,24,2)
(24,107,2)
(100,139,2)
(152,2,2)
(46,135,2)
(97,11,2)
(64,11,2)
(2,77,2)
(143,128,2)
(58,11,2)
(27,2,2)
(88,78,2)
(134,135,2)
(19,148,2)
(30,11,2)
(25,114,2)
(108,77,2)
(137,99,2)
(21,11,2)
(60,11,2)
(41,135,2)
(141,77,2)
(99,159,2)
(12,8,2)
(1,102,2)
(31,11,2)
(87,2,2)
(152,77,2)
(32,135,2)
(43,2,2)
(103,117,2)
(70,87,2)
(78,29,2)
(131,11,2)
(128,135,2)
(138,11,2)
(53,135,2)
(94,135,2)
(20,2,2)
(159,107,2)
(48,77,2)
(150,11,2)
(54,6,2)
(69,135,2)
(88,11,2)
(33,11,2)
(70,2,2)
(8,11,2)
(23,11,2)
(41,134,2)
(79,107,2)
(42,151,2)
(59,77,2)
(101,11,2)
(25,9,2)
(103,10,2)
(19,73,2)
(9,68,2)
(146,77,2)
(11,77,2)
(141,2,2)
(65,2,2)
(12,11,2)
(148,120,2)
(142,107,2)
(107,125,2)
(40,2,2)
(1,77,2)
(25,11,2)
(132,106,2)
(37,77,2)
(122,2,2)
(134,72,2)
(55,11,2)
(85,135,2)
(151,77,2)
(27,120,2)
(17,11,2)
(109,143,2)
(61,142,2)
(115,135,2)
(32,107,2)
(4,77,2)
(68,1,2)
(13,135,2)
(96,11,2)
(80,77,2)
(118,135,2)
(51,11,2)
(22,120,2)
(36,11,2)
(113,135,2)
(5,11,2)
(153,88,2)
(139,45,2)
(119,11,2)
(114,64,2)
(22,77,2)
(54,124,2)
(79,135,2)
(156,135,2)
(19,11,2)
(105,19,2)
(116,11,2)
(28,139,2)
(78,11,2)
(44,2,2)
(144,11,2)
(7,77,2)
(139,11,2)
(138,105,2)
(29,107,2)
(62,135,2)
(15,139,2)
(140,11,2)
(105,11,2)
(2,4,2)
(2,2,2)
(54,89,2)
(29,11,2)
(26,77,2)
(42,131,2)
(153,12,2)
(49,135,2)
(106,11,2)
(125,120,2)
(110,77,2)
(63,11,2)
(19,102,2)
(1,7,2)
(53,79,2)
(75,11,2)
(42,138,2)
(148,11,2)
(143,135,2)
(129,2,2)
(77,137,2)
(62,39,2)
(93,11,2)
(109,62,2)
(45,11,2)
(2,80,2)
(19,137,2)
(74,11,2)
(145,11,2)
(72,107,2)
(131,68,2)
(87,27,2)
(130,32,2)
(153,11,2)
(40,80,2)
(143,105,2)
(127,2,2)
(91,11,2)
(132,11,2)
(39,135,2)
(102,61,2)
(20,77,2)
(4,120,2)
(130,135,2)
(62,130,2)
(129,137,2)
(106,107,2)
(67,11,2)
(38,135,2)
(114,11,2)
(14,135,2)
(129,80,2)
(72,135,2)
(68,77,2)
(87,80,2)
(66,2,2)
(133,77,2)
(19,15,2)
(39,53,2)
(67,120,2)
(123,11,2)
(9,132,2)
(19,67,2)
(126,77,2)
(1,22,2)
(45,120,2)
(109,135,2)
(135,11,2)
(64,51,2)
(4,2,2)
(25,153,2)
(24,135,2)
(149,135,2)
(9,11,2)
(8,107,2)
(51,107,2)
-----------------------------------
(0,pf_lut)
(1,i40e_aq_set_rss_key(hw, vsi->id, &rss_key)
(2,i < vsi->rss_table_size)
(3,GFP_KERNEL)
(4,vsi->rss_table_size)
(5,pf_lut)
(6,const u8 *seed)
(7,&rss_key)
(8,pf->hw)
(9,i40e_stat_str(&pf->hw, ret)
(10,&rss_key)
(11,ret)
(12,&pf->hw)
(13,asq_last_status)
(14,hw)
(15,pf_lut = true)
(16,)
(17,dev)
(18,hw)
(19,i40e_aq_set_rss_lut(hw, vsi->id, pf_lut, rss_lut,\n\\n\\t\\t\\t\\t  vsi->rss_table_size)
(20,vsi)
(21,pf)
(22,vsi->id)
(23,ret)
(24,pf->hw)
(25,dev_info(&pf->pdev->dev,\n\\n\\t\\t\\t "Cannot set RSS key, err %s aq_err %s\\n",\n\\n\\t\\t\\t i40e_stat_str(&pf->hw, ret)
(26,ENOMEM)
(27,vsi->rss_size)
(28,pf_lut)
(29,pf->hw)
(30,pdev)
(31,rss_lut)
(32,pf->hw)
(33,"Cannot set RSS key, err %s aq_err %s\\n")
(34,for (i = 0; i < vsi->rss_table_size; i++)
(35,pf)
(36,vsi)
(37,rss_key)
(38,pf)
(39,pf->hw.aq.asq_last_status)
(40,i++)
(41,&pf->pdev->dev)
(42,RET)
(43,i)
(44,i)
(45,vsi->type)
(46,pf)
(47,pf)
(48,0)
(49,pf)
(50,rss_lut)
(51,pf->pdev)
(52,hw)
(53,pf->hw.aq)
(54,memcpy(&rss_key, seed, sizeof(rss_key)
(55,hw)
(56,if (ret)
(57,seed)
(58,id)
(59,hw)
(60,pf)
(61,&pf->hw)
(62,i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status)
(63,asq_last_status)
(64,pf->pdev->dev)
(65,i)
(66,vsi)
(67,vsi->rss_table_size)
(68,ret = i40e_aq_set_rss_key(hw, vsi->id, &rss_key)
(69,ret)
(70,rss_lut[i] = i % vsi->rss_size)
(71,0)
(72,pf->pdev)
(73,pf_lut = false)
(74,pf)
(75,vsi)
(76,i)
(77,!rss_lut)
(78,pf->hw.aq)
(79,pf->hw)
(80,i = 0)
(81,rss_key)
(82,rss_key)
(83,if (!rss_lut)
(84,rss_lut)
(85,hw)
(86,pf)
(87,i % vsi->rss_size)
(88,pf->hw.aq.asq_last_status)
(89,sizeof(rss_key)
(90,rss_key)
(91,rss_table_size)
(92,rss_lut)
(93,hw)
(94,hw)
(95,false)
(96,pf)
(97,hw)
(98,rss_key)
(99,kzalloc(pf->rss_table_size, GFP_KERNEL)
(100,true)
(101,aq)
(102,*hw = &pf->hw)
(103,memset(&rss_key, 0, sizeof(rss_key)
(104,if (ret)
(105,ret = i40e_aq_set_rss_lut(hw, vsi->id, pf_lut, rss_lut,\n\\n\\t\\t\\t\\t  vsi->rss_table_size)
(106,pf->hw)
(107,*pf = vsi->back)
(108,vsi)
(109,dev_info(&pf->pdev->dev,\n\\n\\t\\t\\t "Cannot set RSS lut, err %s aq_err %s\\n",\n\\n\\t\\t\\t i40e_stat_str(&pf->hw, ret)
(110,ret)
(111,if (vsi->type == I40E_VSI_MAIN)
(112,hw)
(113,"Cannot set RSS lut, err %s aq_err %s\\n")
(114,&pf->pdev->dev)
(115,pdev)
(116,hw)
(117,sizeof(rss_key)
(118,aq)
(119,ret)
(120,struct i40e_vsi *vsi)
(121,back)
(122,rss_lut)
(123,type)
(124,&rss_key)
(125,vsi->back)
(126,id)
(127,rss_size)
(128,&pf->hw)
(129,rss_lut[i])
(130,&pf->hw)
(131,return ret;)
(132,&pf->hw)
(133,i)
(134,pf->pdev->dev)
(135,ret)
(136,pf)
(137,rss_lut = kzalloc(pf->rss_table_size, GFP_KERNEL)
(138,return ret;)
(139,vsi->type == I40E_VSI_MAIN)
(140,ret)
(141,rss_table_size)
(142,pf->hw)
(143,i40e_stat_str(&pf->hw, ret)
(144,I40E_VSI_MAIN)
(145,ret)
(146,-ENOMEM)
(147,ret)
(148,vsi->id)
(149,dev)
(150,vsi)
(151,return -ENOMEM;)
(152,i)
(153,i40e_aq_str(&pf->hw, pf->hw.aq.asq_last_status)
(154,rss_key)
(155,pf_lut)
(156,pf)
(157,)
(158,rss_table_size)
(159,pf->rss_table_size)
(160,vsi)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^