-----label-----
0
-----code-----
static void corto_setLasterror(char* err) {
    corto_errThreadData *data = corto_getThreadData();
    if (!data->viewed && data->lastError) {
        corto_error("corto: uncatched error (use corto_lasterr): %s%s%s",
          data->lastError, data->backtrace?"\n":"", data->backtrace);
    }
    if (data->lastError) corto_dealloc(data->lastError);
    if (data->backtrace) corto_dealloc(data->backtrace);
    data->lastError = err ? corto_strdup(err) : NULL;
    data->backtrace = corto_backtraceString();
    data->viewed = FALSE;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
10,16
10,17
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
20,21
22,23
22,24
23,24
23,25
24,25
25,26
25,27
26,27
29,30
29,31
30,31
33,34
34,35
35,36
35,37
35,38
35,39
35,40
36,37
39,40
39,41
40,41
43,44
43,45
43,46
44,45
44,46
45,46
50,51
50,52
51,52
54,55
54,56
55,56
55,57
56,57
59,60
60,61
60,62
61,62
63,64
63,65
64,65
67,68
67,69
68,69
68,70
69,70
72,73
73,74
73,75
74,75
76,77
76,78
77,78
80,81
81,82
81,83
82,83
82,84
83,84
86,87
86,88
86,89
87,88
89,90
89,91
90,91
92,93
94,95
96,97
97,98
97,99
98,99
98,100
99,100
102,103
103,104
105,106
106,107
106,108
107,108
107,109
108,109
111,112
-----nextToken-----
2,4,6,8,9,14,16,17,21,27,28,31,32,37,38,41,42,46,47,48,49,52,53,57,58,62,65,66,70,71,75,78,79,84,85,88,91,93,95,100,101,104,109,110,112
-----computeFrom-----
23,24
23,25
81,82
81,83
97,98
97,99
106,107
106,108
-----guardedBy-----
32,42
31,52
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;LiteralExpression;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;ConditionalExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static void corto_setLasterror(char* err) {    corto_errThreadData *data = corto_getThreadData();    if (!data->viewed && data->lastError) {        corto_error("corto: uncatched error (use corto_lasterr): %s%s%s",          data->lastError, data->backtrace?"\n":"", data->backtrace);    }    if (data->lastError) corto_dealloc(data->lastError);    if (data->backtrace) corto_dealloc(data->backtrace);    data->lastError = err ? corto_strdup(err) : NULL;    data->backtrace = corto_backtraceString();    data->viewed = FALSE;}
static void
corto_setLasterror(char* err)
corto_setLasterror
char* err
char
* err
*
err
{    corto_errThreadData *data = corto_getThreadData();    if (!data->viewed && data->lastError) {        corto_error("corto: uncatched error (use corto_lasterr): %s%s%s",          data->lastError, data->backtrace?"\n":"", data->backtrace);    }    if (data->lastError) corto_dealloc(data->lastError);    if (data->backtrace) corto_dealloc(data->backtrace);    data->lastError = err ? corto_strdup(err) : NULL;    data->backtrace = corto_backtraceString();    data->viewed = FALSE;}
corto_errThreadData *data = corto_getThreadData();
corto_errThreadData *data = corto_getThreadData();
corto_errThreadData
corto_errThreadData
*data = corto_getThreadData()
*
data
= corto_getThreadData()
corto_getThreadData()
corto_getThreadData
corto_getThreadData
if (!data->viewed && data->lastError) {        corto_error("corto: uncatched error (use corto_lasterr): %s%s%s",          data->lastError, data->backtrace?"\n":"", data->backtrace);    }
!data->viewed && data->lastError
!data->viewed
data->viewed
data
data
viewed
data->lastError
data
data
lastError
{        corto_error("corto: uncatched error (use corto_lasterr): %s%s%s",          data->lastError, data->backtrace?"\n":"", data->backtrace);    }
corto_error("corto: uncatched error (use corto_lasterr): %s%s%s",          data->lastError, data->backtrace?"\n":"", data->backtrace);
corto_error("corto: uncatched error (use corto_lasterr): %s%s%s",          data->lastError, data->backtrace?"\n":"", data->backtrace)
corto_error
corto_error
"corto: uncatched error (use corto_lasterr): %s%s%s"
data->lastError
data
data
lastError
data->backtrace?"\n":""
data->backtrace
data
data
backtrace
"\n"
""
data->backtrace
data
data
backtrace
if (data->lastError) corto_dealloc(data->lastError);
data->lastError
data
data
lastError
corto_dealloc(data->lastError);
corto_dealloc(data->lastError)
corto_dealloc
corto_dealloc
data->lastError
data
data
lastError
if (data->backtrace) corto_dealloc(data->backtrace);
data->backtrace
data
data
backtrace
corto_dealloc(data->backtrace);
corto_dealloc(data->backtrace)
corto_dealloc
corto_dealloc
data->backtrace
data
data
backtrace
data->lastError = err ? corto_strdup(err) : NULL;
data->lastError = err ? corto_strdup(err) : NULL
data->lastError
data
data
lastError
err ? corto_strdup(err) : NULL
err
err
corto_strdup(err)
corto_strdup
corto_strdup
err
err
NULL
NULL
data->backtrace = corto_backtraceString();
data->backtrace = corto_backtraceString()
data->backtrace
data
data
backtrace
corto_backtraceString()
corto_backtraceString
corto_backtraceString
data->viewed = FALSE;
data->viewed = FALSE
data->viewed
data
data
viewed
FALSE
FALSE
-----joern-----
(62,57,0)
(14,12,0)
(19,54,0)
(11,57,0)
(13,62,0)
(11,5,0)
(21,16,0)
(31,12,0)
(16,21,0)
(22,6,0)
(17,35,0)
(40,6,0)
(17,12,0)
(45,12,0)
(60,57,0)
(36,63,0)
(10,57,0)
(64,14,0)
(43,41,0)
(6,22,0)
(2,26,0)
(52,57,0)
(6,60,0)
(9,25,0)
(65,64,0)
(3,60,0)
(27,53,0)
(58,57,0)
(24,35,0)
(18,64,0)
(53,6,0)
(7,12,0)
(23,52,0)
(46,14,0)
(59,25,0)
(25,19,0)
(64,57,0)
(26,1,0)
(15,57,0)
(33,11,0)
(21,57,0)
(61,58,0)
(51,15,0)
(35,63,0)
(50,41,0)
(54,19,0)
(54,52,0)
(37,15,0)
(57,12,0)
(42,21,0)
(35,17,0)
(5,12,0)
(38,26,0)
(1,26,0)
(57,56,0)
(32,62,0)
(63,35,0)
(5,39,0)
(26,57,0)
(15,17,0)
(35,49,0)
(20,53,0)
(22,57,0)
(55,60,0)
(63,49,0)
(39,5,0)
(53,62,0)
(8,58,0)
(56,57,0)
(29,21,0)
(52,54,0)
(34,11,0)
(19,25,0)
(47,22,0)
(60,6,0)
(25,57,0)
(0,35,0)
(30,52,0)
(48,12,0)
(6,28,0)
(41,57,0)
(62,53,0)
(6,53,0)
(4,22,0)
(32,13,1)
(17,35,1)
(43,6,1)
(2,58,1)
(29,41,1)
(52,57,1)
(11,33,1)
(27,62,1)
(1,26,1)
(21,42,1)
(15,57,1)
(25,57,1)
(47,53,1)
(52,30,1)
(19,54,1)
(20,62,1)
(60,57,1)
(55,3,1)
(11,57,1)
(44,14,1)
(59,9,1)
(64,65,1)
(35,49,1)
(43,19,1)
(62,32,1)
(57,56,1)
(13,60,1)
(8,16,1)
(60,55,1)
(6,22,1)
(26,38,1)
(21,57,1)
(58,57,1)
(15,51,1)
(64,57,1)
(65,18,1)
(33,34,1)
(40,19,1)
(25,59,1)
(34,17,1)
(37,1,1)
(41,57,1)
(36,24,1)
(50,43,1)
(24,15,1)
(3,40,1)
(30,23,1)
(39,11,1)
(37,58,1)
(4,47,1)
(63,49,1)
(22,57,1)
(53,27,1)
(19,25,1)
(6,53,1)
(8,41,1)
(35,63,1)
(53,62,1)
(5,39,1)
(23,57,1)
(6,60,1)
(63,36,1)
(18,5,1)
(16,21,1)
(58,61,1)
(56,10,1)
(38,2,1)
(42,29,1)
(54,52,1)
(22,4,1)
(14,46,1)
(53,20,1)
(51,37,1)
(62,57,1)
(26,57,1)
(0,24,1)
(46,64,1)
(41,50,1)
(61,8,1)
(35,0,1)
(9,54,1)
(63,49,2)
(16,21,2)
(22,57,2)
(0,24,2)
(26,57,2)
(3,19,2)
(6,22,2)
(54,52,2)
(53,19,2)
(41,57,2)
(60,19,2)
(58,57,2)
(25,54,2)
(40,19,2)
(36,24,2)
(15,57,2)
(20,62,2)
(62,19,2)
(2,58,2)
(32,19,2)
(19,54,2)
(62,57,2)
(27,62,2)
(13,19,2)
(11,57,2)
(16,41,2)
(19,25,2)
(64,57,2)
(6,53,2)
(1,58,2)
(1,26,2)
(4,19,2)
(22,19,2)
(9,54,2)
(38,58,2)
(63,24,2)
(26,58,2)
(25,57,2)
(21,57,2)
(6,19,2)
(55,19,2)
(52,57,2)
(29,41,2)
(35,63,2)
(6,60,2)
(17,35,2)
(5,39,2)
(60,57,2)
(59,54,2)
(21,41,2)
(47,19,2)
(53,62,2)
(57,56,2)
(35,49,2)
(42,41,2)
-----------------------------------
(0,NULL)
(1,corto_dealloc(data->backtrace)
(2,data)
(3,data)
(4,backtrace)
(5,data->backtrace = corto_backtraceString()
(6,corto_error("corto: uncatched error (use corto_lasterr)
(7,if (!data->viewed && data->lastError)
(8,data)
(9,data)
(10,data)
(11,data->backtrace)
(12,)
(13,data)
(14,data->viewed = FALSE)
(15,data->lastError)
(16,corto_dealloc(data->lastError)
(17,data->lastError = err ? corto_strdup(err)
(18,data)
(19,!data->viewed && data->lastError)
(20,"\\n")
(21,data->lastError)
(22,data->backtrace)
(23,data)
(24,err)
(25,data->lastError)
(26,data->backtrace)
(27,"")
(28,)
(29,data)
(30,viewed)
(31,if (data->lastError)
(32,backtrace)
(33,backtrace)
(34,data)
(35,err ? corto_strdup(err)
(36,err)
(37,data)
(38,backtrace)
(39,corto_backtraceString()
(40,"corto: uncatched error (use corto_lasterr)
(41,data->lastError)
(42,lastError)
(43,data)
(44,RET)
(45,if (data->backtrace)
(46,FALSE)
(47,data)
(48,data)
(49,char* err)
(50,lastError)
(51,lastError)
(52,data->viewed)
(53,data->backtrace?"\\n":"")
(54,!data->viewed)
(55,lastError)
(56,corto_getThreadData()
(57,*data = corto_getThreadData()
(58,data->backtrace)
(59,lastError)
(60,data->lastError)
(61,backtrace)
(62,data->backtrace)
(63,corto_strdup(err)
(64,data->viewed)
(65,viewed)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^