-----label-----
0
-----code-----
static void css_task_iter_advance(struct css_task_iter *it)
{
	struct list_head *next;

	lockdep_assert_held(&css_set_lock);
repeat:
	/*
	 * Advance iterator to find next entry.  cset->tasks is consumed
	 * first and then ->mg_tasks.  After ->mg_tasks, we move onto the
	 * next cset.
	 */
	next = it->task_pos->next;

	if (next == it->tasks_head)
		next = it->mg_tasks_head->next;

	if (next == it->mg_tasks_head)
		css_task_iter_advance_css_set(it);
	else
		it->task_pos = next;

	/* if PROCS, skip over tasks which aren't group leaders */
	if ((it->flags & CSS_TASK_ITER_PROCS) && it->task_pos &&
	    !thread_group_leader(list_entry(it->task_pos, struct task_struct,
					    cg_list)))
		goto repeat;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
12,13
13,14
13,15
14,15
16,17
16,18
19,20
20,21
20,22
21,22
23,24
24,25
24,26
27,28
27,29
29,30
30,31
30,32
31,32
33,34
33,35
34,35
34,36
35,36
39,40
39,41
40,41
40,42
41,42
43,44
43,45
44,45
47,48
48,49
48,50
49,50
51,52
51,53
52,53
52,54
53,54
57,58
57,59
57,60
58,59
58,60
59,60
61,62
61,63
62,63
65,66
66,67
66,68
67,68
69,70
71,72
72,73
72,74
73,74
73,75
74,75
77,78
79,80
79,81
80,81
81,82
-----nextToken-----
2,4,7,9,10,15,17,18,22,25,26,28,32,36,37,38,42,45,46,50,54,55,56,60,63,64,68,70,75,76,78,82
-----computeFrom-----
30,31
30,32
40,41
40,42
48,49
48,50
58,59
58,60
72,73
72,74
-----guardedBy-----
42,56
45,54
63,70
-----guardedByNegation-----
60,78
63,75
-----lastLexicalUse-----
63,75
-----jump-----
63,75
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;ReferenceOperator;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;ProblemExpression;GotoStatement;Name;
-----ast_node-----
static void css_task_iter_advance(struct css_task_iter *it){	struct list_head *next;	lockdep_assert_held(&css_set_lock);repeat:	/*	 * Advance iterator to find next entry.  cset->tasks is consumed	 * first and then ->mg_tasks.  After ->mg_tasks, we move onto the	 * next cset.	 */	next = it->task_pos->next;	if (next == it->tasks_head)		next = it->mg_tasks_head->next;	if (next == it->mg_tasks_head)		css_task_iter_advance_css_set(it);	else		it->task_pos = next;	/* if PROCS, skip over tasks which aren't group leaders */	if ((it->flags & CSS_TASK_ITER_PROCS) && it->task_pos &&	    !thread_group_leader(list_entry(it->task_pos, struct task_struct,					    cg_list)))		goto repeat;}
static void
css_task_iter_advance(struct css_task_iter *it)
css_task_iter_advance
struct css_task_iter *it
struct css_task_iter
css_task_iter
*it
*
it
{	struct list_head *next;	lockdep_assert_held(&css_set_lock);repeat:	/*	 * Advance iterator to find next entry.  cset->tasks is consumed	 * first and then ->mg_tasks.  After ->mg_tasks, we move onto the	 * next cset.	 */	next = it->task_pos->next;	if (next == it->tasks_head)		next = it->mg_tasks_head->next;	if (next == it->mg_tasks_head)		css_task_iter_advance_css_set(it);	else		it->task_pos = next;	/* if PROCS, skip over tasks which aren't group leaders */	if ((it->flags & CSS_TASK_ITER_PROCS) && it->task_pos &&	    !thread_group_leader(list_entry(it->task_pos, struct task_struct,					    cg_list)))		goto repeat;}
struct list_head *next;
struct list_head *next;
struct list_head
list_head
*next
*
next
lockdep_assert_held(&css_set_lock);
lockdep_assert_held(&css_set_lock);
lockdep_assert_held
lockdep_assert_held
(&css_set_lock)
&css_set_lock
&
css_set_lock
repeat:	/*	 * Advance iterator to find next entry.  cset->tasks is consumed	 * first and then ->mg_tasks.  After ->mg_tasks, we move onto the	 * next cset.	 */	next = it->task_pos->next;
repeat
next = it->task_pos->next;
next = it->task_pos->next
next
next
it->task_pos->next
it->task_pos
it
it
task_pos
next
if (next == it->tasks_head)		next = it->mg_tasks_head->next;
next == it->tasks_head
next
next
it->tasks_head
it
it
tasks_head
next = it->mg_tasks_head->next;
next = it->mg_tasks_head->next
next
next
it->mg_tasks_head->next
it->mg_tasks_head
it
it
mg_tasks_head
next
if (next == it->mg_tasks_head)		css_task_iter_advance_css_set(it);	else		it->task_pos = next;
next == it->mg_tasks_head
next
next
it->mg_tasks_head
it
it
mg_tasks_head
css_task_iter_advance_css_set(it);
css_task_iter_advance_css_set(it)
css_task_iter_advance_css_set
css_task_iter_advance_css_set
it
it
it->task_pos = next;
it->task_pos = next
it->task_pos
it
it
task_pos
next
next
if ((it->flags & CSS_TASK_ITER_PROCS) && it->task_pos &&	    !thread_group_leader(list_entry(it->task_pos, struct task_struct,					    cg_list)))		goto repeat;
(it->flags & CSS_TASK_ITER_PROCS) && it->task_pos &&	    !thread_group_leader(list_entry(it->task_pos, struct task_struct,					    cg_list))
goto repeat;
repeat
-----joern-----
(36,8,0)
(21,30,0)
(2,28,0)
(33,29,0)
(37,29,0)
(18,30,0)
(24,26,0)
(16,19,0)
(29,17,0)
(26,17,0)
(8,17,0)
(32,30,0)
(28,30,0)
(9,39,0)
(22,14,0)
(8,36,0)
(34,4,0)
(12,30,0)
(39,27,0)
(11,27,0)
(14,21,0)
(6,25,0)
(8,19,0)
(13,8,0)
(3,30,0)
(25,28,0)
(40,29,0)
(10,31,0)
(1,25,0)
(27,37,0)
(19,27,0)
(38,1,0)
(4,17,0)
(1,17,0)
(21,14,0)
(23,8,0)
(31,19,0)
(39,28,0)
(26,39,0)
(28,36,0)
(37,27,0)
(20,31,0)
(35,30,0)
(36,28,0)
(39,26,0)
(29,37,0)
(31,17,0)
(25,1,0)
(5,37,0)
(0,36,0)
(19,28,0)
(7,26,0)
(15,1,0)
(33,11,1)
(0,8,1)
(2,35,1)
(8,23,1)
(9,27,1)
(8,19,1)
(27,37,1)
(35,4,1)
(34,39,1)
(21,14,1)
(10,39,1)
(19,28,1)
(29,40,1)
(35,19,1)
(5,29,1)
(1,17,1)
(11,25,1)
(6,28,1)
(19,16,1)
(40,33,1)
(13,2,1)
(36,8,1)
(39,27,1)
(14,22,1)
(26,17,1)
(39,28,1)
(1,38,1)
(25,28,1)
(8,17,1)
(36,0,1)
(31,20,1)
(39,26,1)
(19,27,1)
(38,15,1)
(24,7,1)
(26,24,1)
(25,1,1)
(37,29,1)
(31,17,1)
(37,5,1)
(16,31,1)
(4,17,1)
(7,9,1)
(4,34,1)
(29,17,1)
(20,10,1)
(23,13,1)
(9,25,1)
(2,21,1)
(28,36,1)
(15,6,1)
(19,27,2)
(37,29,2)
(29,17,2)
(8,19,2)
(25,1,2)
(39,26,2)
(36,8,2)
(19,28,2)
(4,17,2)
(27,37,2)
(1,17,2)
(25,28,2)
(8,17,2)
(28,36,2)
(31,17,2)
(26,17,2)
(39,28,2)
(39,27,2)
(21,14,2)
-----------------------------------
(0,next)
(1,it->tasks_head)
(2,next)
(3,if (next == it->tasks_head)
(4,css_task_iter_advance_css_set(it)
(5,next)
(6,next)
(7,it)
(8,it->task_pos)
(9,next)
(10,it)
(11,next)
(12,if (next == it->mg_tasks_head)
(13,it)
(14,&css_set_lock)
(15,it)
(16,next)
(17,struct css_task_iter *it)
(18,next)
(19,it->task_pos = next)
(20,task_pos)
(21,lockdep_assert_held(&css_set_lock)
(22,css_set_lock)
(23,task_pos)
(24,mg_tasks_head)
(25,next == it->tasks_head)
(26,it->mg_tasks_head)
(27,next = it->mg_tasks_head->next)
(28,next = it->task_pos->next)
(29,it->mg_tasks_head)
(30,)
(31,it->task_pos)
(32,repeat:)
(33,it)
(34,it)
(35,goto repeat;)
(36,it->task_pos->next)
(37,it->mg_tasks_head->next)
(38,tasks_head)
(39,next == it->mg_tasks_head)
(40,mg_tasks_head)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^