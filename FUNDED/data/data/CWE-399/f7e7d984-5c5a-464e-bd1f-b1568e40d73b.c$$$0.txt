-----label-----
0
-----code-----
wpt_status WLANDXE_Close
(
   void *pDXEContext
)
{
   wpt_status               status = eWLAN_PAL_STATUS_SUCCESS;
   wpt_uint32                 idx;
   WLANDXE_CtrlBlkType       *dxeCtxt = NULL;
#ifdef WLANDXE_TEST_CHANNEL_ENABLE
   wpt_uint32                 sIdx;
   WLANDXE_ChannelCBType     *channel = NULL;
   WLANDXE_DescCtrlBlkType   *crntDescCB = NULL;
   WLANDXE_DescCtrlBlkType   *nextDescCB = NULL;
#endif /* WLANDXE_TEST_CHANNEL_ENABLE */

   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "%s Enter", __func__);

   /* Sanity */
   if(NULL == pDXEContext)
   {
      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,
               "WLANDXE_Stop Invalid DXE CB");
      return eWLAN_PAL_STATUS_E_INVAL;   
   }

   dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext;

   for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)
   {
      wpalMutexDelete(&dxeCtxt->dxeChannel[idx].dxeChannelLock);
      wpalTimerDelete(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);
      if(NULL != dxeCtxt->dxeChannel[idx].healthMonitorMsg)
      {
         wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg);
      }
      dxeChannelClose(dxeCtxt, &dxeCtxt->dxeChannel[idx]);
#ifdef WLANDXE_TEST_CHANNEL_ENABLE
      channel    = &dxeCtxt->dxeChannel[idx];
      crntDescCB = channel->headCtrlBlk;
      for(sIdx = 0; sIdx < channel->numDesc; sIdx++)
      {
         nextDescCB = (WLANDXE_DescCtrlBlkType *)crntDescCB->nextCtrlBlk;
         wpalMemoryFree((void *)crntDescCB);
         crntDescCB = nextDescCB;
         if(NULL == crntDescCB)
         {
            break;
         }
      }
#endif /* WLANDXE_TEST_CHANNEL_ENABLE */
   }

   if(NULL != dxeCtxt->rxIsrMsg)
   {
      wpalMemoryFree(dxeCtxt->rxIsrMsg);
   }
   if(NULL != dxeCtxt->txIsrMsg)
   {
      wpalMemoryFree(dxeCtxt->txIsrMsg);
   }
   if(NULL != dxeCtxt->rxPktAvailMsg)
   {
      wpalMemoryFree(dxeCtxt->rxPktAvailMsg);
   }

   wpalMemoryFree(pDXEContext);

   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,
            "%s Exit", __func__);
   return status;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
6,7
6,8
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
12,13
13,14
13,15
14,15
16,17
16,18
18,19
19,20
21,22
22,23
22,24
23,24
25,26
27,28
28,29
28,30
29,30
31,32
31,33
31,34
34,35
35,36
37,38
38,39
38,40
38,41
38,42
38,43
39,40
41,42
43,44
46,47
48,49
48,50
49,50
49,51
50,51
52,53
54,55
54,56
55,56
56,57
56,58
56,59
56,60
57,58
59,60
61,62
64,65
65,66
67,68
68,69
68,70
69,70
71,72
71,73
72,73
72,74
73,74
75,76
77,78
79,80
79,81
79,82
79,83
80,81
81,82
81,83
82,83
85,86
85,87
86,87
88,89
90,91
91,92
93,94
93,95
93,96
93,97
94,95
95,96
95,97
96,97
98,99
99,100
99,101
100,101
100,102
101,102
101,103
102,103
105,106
108,109
109,110
109,111
110,111
112,113
113,114
113,115
114,115
114,116
115,116
115,117
116,117
119,120
122,123
122,124
123,124
123,125
124,125
126,127
126,128
127,128
127,129
128,129
128,130
129,130
132,133
135,136
136,137
137,138
137,139
138,139
140,141
140,142
141,142
141,143
142,143
142,144
143,144
146,147
149,150
150,151
150,152
150,153
151,152
153,154
155,156
156,157
156,158
157,158
157,159
158,159
161,162
163,164
163,165
164,165
164,166
165,166
167,168
167,169
168,169
171,172
172,173
173,174
173,175
174,175
176,177
176,178
177,178
180,181
180,182
181,182
181,183
182,183
184,185
184,186
185,186
188,189
189,190
190,191
190,192
191,192
193,194
193,195
194,195
197,198
197,199
198,199
198,200
199,200
201,202
201,203
202,203
205,206
206,207
207,208
207,209
208,209
210,211
210,212
211,212
214,215
215,216
215,217
216,217
218,219
220,221
221,222
221,223
221,224
221,225
221,226
222,223
224,225
226,227
229,230
231,232
232,233
-----nextToken-----
3,5,7,9,10,15,17,20,24,26,30,32,33,36,40,42,44,45,47,51,53,58,60,62,63,66,70,74,76,78,83,84,87,89,92,97,103,104,106,107,111,117,118,120,121,125,130,131,133,134,139,144,145,147,148,152,154,159,160,162,166,169,170,175,178,179,183,186,187,192,195,196,200,203,204,209,212,213,217,219,223,225,227,228,230,233
-----computeFrom-----
49,50
49,51
68,69
68,70
81,82
81,83
85,86
85,87
123,124
123,125
164,165
164,166
181,182
181,183
198,199
198,200
-----guardedBy-----
134,148
130,144
133,147
131,145
170,179
169,178
187,196
186,195
204,213
203,212
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;NamedTypeSpecifier;Name;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;Pointer;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
wpt_status WLANDXE_Close(   void *pDXEContext){   wpt_status               status = eWLAN_PAL_STATUS_SUCCESS;   wpt_uint32                 idx;   WLANDXE_CtrlBlkType       *dxeCtxt = NULL;#ifdef WLANDXE_TEST_CHANNEL_ENABLE   wpt_uint32                 sIdx;   WLANDXE_ChannelCBType     *channel = NULL;   WLANDXE_DescCtrlBlkType   *crntDescCB = NULL;   WLANDXE_DescCtrlBlkType   *nextDescCB = NULL;#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);   /* Sanity */   if(NULL == pDXEContext)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");      return eWLAN_PAL_STATUS_E_INVAL;      }   dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext;   for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)   {      wpalMutexDelete(&dxeCtxt->dxeChannel[idx].dxeChannelLock);      wpalTimerDelete(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      if(NULL != dxeCtxt->dxeChannel[idx].healthMonitorMsg)      {         wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg);      }      dxeChannelClose(dxeCtxt, &dxeCtxt->dxeChannel[idx]);#ifdef WLANDXE_TEST_CHANNEL_ENABLE      channel    = &dxeCtxt->dxeChannel[idx];      crntDescCB = channel->headCtrlBlk;      for(sIdx = 0; sIdx < channel->numDesc; sIdx++)      {         nextDescCB = (WLANDXE_DescCtrlBlkType *)crntDescCB->nextCtrlBlk;         wpalMemoryFree((void *)crntDescCB);         crntDescCB = nextDescCB;         if(NULL == crntDescCB)         {            break;         }      }#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   }   if(NULL != dxeCtxt->rxIsrMsg)   {      wpalMemoryFree(dxeCtxt->rxIsrMsg);   }   if(NULL != dxeCtxt->txIsrMsg)   {      wpalMemoryFree(dxeCtxt->txIsrMsg);   }   if(NULL != dxeCtxt->rxPktAvailMsg)   {      wpalMemoryFree(dxeCtxt->rxPktAvailMsg);   }   wpalMemoryFree(pDXEContext);   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return status;}
wpt_status
wpt_status
WLANDXE_Close(   void *pDXEContext)
WLANDXE_Close
void *pDXEContext
void
*pDXEContext
*
pDXEContext
{   wpt_status               status = eWLAN_PAL_STATUS_SUCCESS;   wpt_uint32                 idx;   WLANDXE_CtrlBlkType       *dxeCtxt = NULL;#ifdef WLANDXE_TEST_CHANNEL_ENABLE   wpt_uint32                 sIdx;   WLANDXE_ChannelCBType     *channel = NULL;   WLANDXE_DescCtrlBlkType   *crntDescCB = NULL;   WLANDXE_DescCtrlBlkType   *nextDescCB = NULL;#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);   /* Sanity */   if(NULL == pDXEContext)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");      return eWLAN_PAL_STATUS_E_INVAL;      }   dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext;   for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)   {      wpalMutexDelete(&dxeCtxt->dxeChannel[idx].dxeChannelLock);      wpalTimerDelete(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      if(NULL != dxeCtxt->dxeChannel[idx].healthMonitorMsg)      {         wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg);      }      dxeChannelClose(dxeCtxt, &dxeCtxt->dxeChannel[idx]);#ifdef WLANDXE_TEST_CHANNEL_ENABLE      channel    = &dxeCtxt->dxeChannel[idx];      crntDescCB = channel->headCtrlBlk;      for(sIdx = 0; sIdx < channel->numDesc; sIdx++)      {         nextDescCB = (WLANDXE_DescCtrlBlkType *)crntDescCB->nextCtrlBlk;         wpalMemoryFree((void *)crntDescCB);         crntDescCB = nextDescCB;         if(NULL == crntDescCB)         {            break;         }      }#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   }   if(NULL != dxeCtxt->rxIsrMsg)   {      wpalMemoryFree(dxeCtxt->rxIsrMsg);   }   if(NULL != dxeCtxt->txIsrMsg)   {      wpalMemoryFree(dxeCtxt->txIsrMsg);   }   if(NULL != dxeCtxt->rxPktAvailMsg)   {      wpalMemoryFree(dxeCtxt->rxPktAvailMsg);   }   wpalMemoryFree(pDXEContext);   HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);   return status;}
wpt_status               status = eWLAN_PAL_STATUS_SUCCESS;
wpt_status               status = eWLAN_PAL_STATUS_SUCCESS;
wpt_status
wpt_status
status = eWLAN_PAL_STATUS_SUCCESS
status
= eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
eWLAN_PAL_STATUS_SUCCESS
wpt_uint32                 idx;
wpt_uint32                 idx;
wpt_uint32
wpt_uint32
idx
idx
WLANDXE_CtrlBlkType       *dxeCtxt = NULL;
WLANDXE_CtrlBlkType       *dxeCtxt = NULL;
WLANDXE_CtrlBlkType
WLANDXE_CtrlBlkType
*dxeCtxt = NULL
*
dxeCtxt
= NULL
NULL
NULL
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Enter", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Enter"
__func__
__func__
if(NULL == pDXEContext)   {      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");      return eWLAN_PAL_STATUS_E_INVAL;      }
NULL == pDXEContext
NULL
NULL
pDXEContext
pDXEContext
{      HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");      return eWLAN_PAL_STATUS_E_INVAL;      }
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB");
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,               "WLANDXE_Stop Invalid DXE CB")
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_ERROR
eWLAN_PAL_TRACE_LEVEL_ERROR
"WLANDXE_Stop Invalid DXE CB"
return eWLAN_PAL_STATUS_E_INVAL;
eWLAN_PAL_STATUS_E_INVAL
eWLAN_PAL_STATUS_E_INVAL
dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext;
dxeCtxt = (WLANDXE_CtrlBlkType *)pDXEContext
dxeCtxt
dxeCtxt
(WLANDXE_CtrlBlkType *)pDXEContext
WLANDXE_CtrlBlkType *
WLANDXE_CtrlBlkType
WLANDXE_CtrlBlkType
*
*
pDXEContext
pDXEContext
for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)   {      wpalMutexDelete(&dxeCtxt->dxeChannel[idx].dxeChannelLock);      wpalTimerDelete(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      if(NULL != dxeCtxt->dxeChannel[idx].healthMonitorMsg)      {         wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg);      }      dxeChannelClose(dxeCtxt, &dxeCtxt->dxeChannel[idx]);#ifdef WLANDXE_TEST_CHANNEL_ENABLE      channel    = &dxeCtxt->dxeChannel[idx];      crntDescCB = channel->headCtrlBlk;      for(sIdx = 0; sIdx < channel->numDesc; sIdx++)      {         nextDescCB = (WLANDXE_DescCtrlBlkType *)crntDescCB->nextCtrlBlk;         wpalMemoryFree((void *)crntDescCB);         crntDescCB = nextDescCB;         if(NULL == crntDescCB)         {            break;         }      }#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   }
idx = 0;
idx = 0
idx
idx
0
idx < WDTS_CHANNEL_MAX
idx
idx
WDTS_CHANNEL_MAX
WDTS_CHANNEL_MAX
idx++
idx
idx
{      wpalMutexDelete(&dxeCtxt->dxeChannel[idx].dxeChannelLock);      wpalTimerDelete(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);      if(NULL != dxeCtxt->dxeChannel[idx].healthMonitorMsg)      {         wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg);      }      dxeChannelClose(dxeCtxt, &dxeCtxt->dxeChannel[idx]);#ifdef WLANDXE_TEST_CHANNEL_ENABLE      channel    = &dxeCtxt->dxeChannel[idx];      crntDescCB = channel->headCtrlBlk;      for(sIdx = 0; sIdx < channel->numDesc; sIdx++)      {         nextDescCB = (WLANDXE_DescCtrlBlkType *)crntDescCB->nextCtrlBlk;         wpalMemoryFree((void *)crntDescCB);         crntDescCB = nextDescCB;         if(NULL == crntDescCB)         {            break;         }      }#endif /* WLANDXE_TEST_CHANNEL_ENABLE */   }
wpalMutexDelete(&dxeCtxt->dxeChannel[idx].dxeChannelLock);
wpalMutexDelete(&dxeCtxt->dxeChannel[idx].dxeChannelLock)
wpalMutexDelete
wpalMutexDelete
&dxeCtxt->dxeChannel[idx].dxeChannelLock
dxeCtxt->dxeChannel[idx].dxeChannelLock
dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
idx
idx
dxeChannelLock
wpalTimerDelete(&dxeCtxt->dxeChannel[idx].healthMonitorTimer);
wpalTimerDelete(&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
wpalTimerDelete
wpalTimerDelete
&dxeCtxt->dxeChannel[idx].healthMonitorTimer
dxeCtxt->dxeChannel[idx].healthMonitorTimer
dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
idx
idx
healthMonitorTimer
if(NULL != dxeCtxt->dxeChannel[idx].healthMonitorMsg)      {         wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg);      }
NULL != dxeCtxt->dxeChannel[idx].healthMonitorMsg
NULL
NULL
dxeCtxt->dxeChannel[idx].healthMonitorMsg
dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
idx
idx
healthMonitorMsg
{         wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg);      }
wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg);
wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg)
wpalMemoryFree
wpalMemoryFree
dxeCtxt->dxeChannel[idx].healthMonitorMsg
dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
idx
idx
healthMonitorMsg
dxeChannelClose(dxeCtxt, &dxeCtxt->dxeChannel[idx]);
dxeChannelClose(dxeCtxt, &dxeCtxt->dxeChannel[idx])
dxeChannelClose
dxeChannelClose
dxeCtxt
dxeCtxt
&dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel[idx]
dxeCtxt->dxeChannel
dxeCtxt
dxeCtxt
dxeChannel
idx
idx
if(NULL != dxeCtxt->rxIsrMsg)   {      wpalMemoryFree(dxeCtxt->rxIsrMsg);   }
NULL != dxeCtxt->rxIsrMsg
NULL
NULL
dxeCtxt->rxIsrMsg
dxeCtxt
dxeCtxt
rxIsrMsg
{      wpalMemoryFree(dxeCtxt->rxIsrMsg);   }
wpalMemoryFree(dxeCtxt->rxIsrMsg);
wpalMemoryFree(dxeCtxt->rxIsrMsg)
wpalMemoryFree
wpalMemoryFree
dxeCtxt->rxIsrMsg
dxeCtxt
dxeCtxt
rxIsrMsg
if(NULL != dxeCtxt->txIsrMsg)   {      wpalMemoryFree(dxeCtxt->txIsrMsg);   }
NULL != dxeCtxt->txIsrMsg
NULL
NULL
dxeCtxt->txIsrMsg
dxeCtxt
dxeCtxt
txIsrMsg
{      wpalMemoryFree(dxeCtxt->txIsrMsg);   }
wpalMemoryFree(dxeCtxt->txIsrMsg);
wpalMemoryFree(dxeCtxt->txIsrMsg)
wpalMemoryFree
wpalMemoryFree
dxeCtxt->txIsrMsg
dxeCtxt
dxeCtxt
txIsrMsg
if(NULL != dxeCtxt->rxPktAvailMsg)   {      wpalMemoryFree(dxeCtxt->rxPktAvailMsg);   }
NULL != dxeCtxt->rxPktAvailMsg
NULL
NULL
dxeCtxt->rxPktAvailMsg
dxeCtxt
dxeCtxt
rxPktAvailMsg
{      wpalMemoryFree(dxeCtxt->rxPktAvailMsg);   }
wpalMemoryFree(dxeCtxt->rxPktAvailMsg);
wpalMemoryFree(dxeCtxt->rxPktAvailMsg)
wpalMemoryFree
wpalMemoryFree
dxeCtxt->rxPktAvailMsg
dxeCtxt
dxeCtxt
rxPktAvailMsg
wpalMemoryFree(pDXEContext);
wpalMemoryFree(pDXEContext)
wpalMemoryFree
wpalMemoryFree
pDXEContext
pDXEContext
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__);
HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,            "%s Exit", __func__)
HDXE_MSG
HDXE_MSG
eWLAN_MODULE_DAL_DATA
eWLAN_MODULE_DAL_DATA
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
eWLAN_PAL_TRACE_LEVEL_INFO_LOW
"%s Exit"
__func__
__func__
return status;
status
status
-----joern-----
(77,177,0)
(48,58,0)
(13,48,0)
(169,186,0)
(178,29,0)
(154,53,0)
(96,126,0)
(62,142,0)
(7,126,0)
(120,164,0)
(85,80,0)
(79,67,0)
(101,27,0)
(164,125,0)
(75,24,0)
(14,10,0)
(169,67,0)
(75,147,0)
(96,179,0)
(53,164,0)
(177,77,0)
(131,27,0)
(41,25,0)
(88,1,0)
(53,86,0)
(5,90,0)
(97,182,0)
(132,115,0)
(25,56,0)
(33,136,0)
(143,99,0)
(11,29,0)
(99,143,0)
(144,33,0)
(11,90,0)
(152,136,0)
(137,43,0)
(130,57,0)
(42,27,0)
(11,107,0)
(147,75,0)
(39,126,0)
(115,130,0)
(47,126,0)
(34,8,0)
(17,143,0)
(26,104,0)
(66,111,0)
(171,1,0)
(72,125,0)
(183,93,0)
(23,34,0)
(184,110,0)
(172,27,0)
(45,67,0)
(71,109,0)
(117,58,0)
(126,170,0)
(80,29,0)
(160,4,0)
(83,104,0)
(7,136,0)
(129,90,0)
(47,110,0)
(130,29,0)
(67,29,0)
(39,66,0)
(2,27,0)
(65,27,0)
(157,170,0)
(102,164,0)
(6,143,0)
(179,96,0)
(1,68,0)
(118,77,0)
(20,158,0)
(181,30,0)
(91,75,0)
(95,27,0)
(81,96,0)
(161,27,0)
(125,114,0)
(94,27,0)
(36,186,0)
(163,12,0)
(90,126,0)
(86,12,0)
(187,140,0)
(113,27,0)
(33,107,0)
(135,89,0)
(22,98,0)
(162,105,0)
(110,47,0)
(15,101,0)
(186,36,0)
(8,34,0)
(31,34,0)
(141,27,0)
(140,27,0)
(149,39,0)
(4,80,0)
(166,85,0)
(166,174,0)
(103,44,0)
(164,114,0)
(116,93,0)
(122,27,0)
(35,68,0)
(92,158,0)
(153,150,0)
(155,27,0)
(90,11,0)
(89,30,0)
(128,98,0)
(32,53,0)
(148,98,0)
(57,7,0)
(3,58,0)
(80,85,0)
(130,115,0)
(61,126,0)
(8,29,0)
(67,79,0)
(121,29,0)
(174,166,0)
(142,29,0)
(150,178,0)
(93,178,0)
(21,47,0)
(180,114,0)
(69,142,0)
(170,145,0)
(52,155,0)
(104,0,0)
(186,169,0)
(66,39,0)
(40,29,0)
(185,169,0)
(86,136,0)
(7,57,0)
(138,96,0)
(158,27,0)
(105,68,0)
(177,175,0)
(151,47,0)
(25,126,0)
(12,86,0)
(79,126,0)
(99,167,0)
(24,75,0)
(28,27,0)
(84,8,0)
(75,164,0)
(124,4,0)
(4,126,0)
(76,178,0)
(46,112,0)
(82,79,0)
(51,127,0)
(93,183,0)
(125,43,0)
(112,164,0)
(43,137,0)
(170,168,0)
(60,39,0)
(63,25,0)
(59,98,0)
(1,171,0)
(43,125,0)
(182,29,0)
(147,114,0)
(133,115,0)
(18,101,0)
(44,27,0)
(174,136,0)
(58,48,0)
(16,80,0)
(156,11,0)
(178,150,0)
(58,126,0)
(98,27,0)
(30,27,0)
(139,12,0)
(134,171,0)
(43,53,0)
(107,11,0)
(109,168,0)
(78,136,0)
(115,126,0)
(34,126,0)
(143,126,0)
(37,158,0)
(173,79,0)
(85,166,0)
(74,109,0)
(49,155,0)
(64,112,0)
(70,7,0)
(50,44,0)
(36,136,0)
(145,170,0)
(106,86,0)
(119,150,0)
(107,33,0)
(89,27,0)
(170,126,0)
(146,56,0)
(38,171,0)
(19,140,0)
(10,0,0)
(75,86,0)
(165,27,0)
(176,183,0)
(126,27,0)
(100,131,0)
(178,93,0)
(57,130,0)
(108,10,0)
(131,168,0)
(80,4,0)
(14,89,0)
(171,33,0)
(8,77,0)
(12,33,0)
(73,68,0)
(56,25,0)
(150,126,0)
(159,85,0)
(55,130,0)
(77,8,0)
(67,169,0)
(9,104,0)
(123,158,0)
(87,30,0)
(179,54,0)
(53,43,0)
(36,186,1)
(34,23,1)
(70,177,1)
(134,38,1)
(148,59,1)
(48,58,1)
(66,39,1)
(29,40,1)
(160,36,1)
(170,157,1)
(22,128,1)
(4,126,1)
(13,66,1)
(26,9,1)
(93,116,1)
(169,67,1)
(93,178,1)
(187,155,1)
(130,115,1)
(75,164,1)
(64,164,1)
(157,61,1)
(104,26,1)
(98,22,1)
(14,89,1)
(102,147,1)
(146,99,1)
(118,8,1)
(128,148,1)
(117,13,1)
(88,105,1)
(4,124,1)
(38,88,1)
(179,96,1)
(8,84,1)
(50,103,1)
(8,29,1)
(67,29,1)
(8,34,1)
(58,3,1)
(105,68,1)
(76,150,1)
(67,45,1)
(133,132,1)
(129,144,1)
(81,138,1)
(1,68,1)
(121,126,1)
(13,56,1)
(144,7,1)
(61,109,1)
(53,86,1)
(80,4,1)
(39,149,1)
(88,68,1)
(178,29,1)
(171,134,1)
(34,126,1)
(185,67,1)
(21,184,1)
(143,17,1)
(184,142,1)
(84,34,1)
(10,108,1)
(177,77,1)
(154,32,1)
(151,21,1)
(85,80,1)
(126,170,1)
(101,18,1)
(143,126,1)
(74,158,1)
(12,33,1)
(33,107,1)
(45,79,1)
(162,112,1)
(73,86,1)
(135,98,1)
(123,37,1)
(89,30,1)
(85,159,1)
(75,86,1)
(72,1,1)
(186,169,1)
(7,57,1)
(20,92,1)
(178,150,1)
(100,48,1)
(43,53,1)
(35,73,1)
(53,154,1)
(103,30,1)
(6,110,1)
(25,63,1)
(100,179,1)
(71,74,1)
(147,75,1)
(138,48,1)
(171,33,1)
(116,178,1)
(11,156,1)
(52,101,1)
(23,31,1)
(158,20,1)
(105,162,1)
(155,49,1)
(55,115,1)
(159,80,1)
(56,25,1)
(178,76,1)
(44,50,1)
(16,4,1)
(1,171,1)
(75,91,1)
(139,163,1)
(83,109,1)
(109,168,1)
(57,130,1)
(58,126,1)
(169,185,1)
(68,35,1)
(31,183,1)
(106,33,1)
(115,126,1)
(67,79,1)
(90,126,1)
(164,125,1)
(153,176,1)
(163,106,1)
(41,146,1)
(97,51,1)
(37,140,1)
(92,123,1)
(97,1,1)
(89,135,1)
(90,5,1)
(11,90,1)
(77,118,1)
(146,110,1)
(3,117,1)
(131,168,1)
(131,100,1)
(125,43,1)
(91,125,1)
(166,85,1)
(19,187,1)
(15,44,1)
(86,12,1)
(130,29,1)
(79,126,1)
(156,90,1)
(51,112,1)
(9,83,1)
(110,47,1)
(12,139,1)
(7,126,1)
(49,52,1)
(40,121,1)
(87,181,1)
(96,126,1)
(39,126,1)
(47,151,1)
(18,15,1)
(69,29,1)
(174,166,1)
(112,164,1)
(149,60,1)
(183,93,1)
(11,29,1)
(130,55,1)
(150,119,1)
(164,120,1)
(14,10,1)
(70,183,1)
(107,11,1)
(43,137,1)
(115,133,1)
(69,182,1)
(47,126,1)
(60,56,1)
(173,142,1)
(96,81,1)
(80,16,1)
(109,71,1)
(120,102,1)
(63,41,1)
(182,97,1)
(59,131,1)
(30,87,1)
(79,82,1)
(132,70,1)
(170,145,1)
(17,6,1)
(182,29,1)
(99,143,1)
(25,126,1)
(32,72,1)
(119,153,1)
(112,46,1)
(80,29,1)
(170,168,1)
(53,164,1)
(142,62,1)
(5,129,1)
(82,173,1)
(77,8,1)
(150,126,1)
(108,104,1)
(62,69,1)
(75,24,1)
(46,64,1)
(124,160,1)
(176,174,1)
(140,19,1)
(142,29,1)
(133,142,2)
(80,142,2)
(159,142,2)
(148,109,2)
(93,142,2)
(11,142,2)
(124,142,2)
(80,29,2)
(105,68,2)
(39,126,2)
(66,56,2)
(108,109,2)
(88,142,2)
(72,1,2)
(117,109,2)
(5,142,2)
(3,109,2)
(154,1,2)
(29,109,2)
(56,25,2)
(43,53,2)
(176,142,2)
(135,109,2)
(1,171,2)
(93,178,2)
(32,1,2)
(48,109,2)
(138,48,2)
(173,142,2)
(139,142,2)
(86,12,2)
(178,150,2)
(112,1,2)
(90,142,2)
(67,79,2)
(177,183,2)
(75,1,2)
(75,24,2)
(130,142,2)
(129,142,2)
(116,142,2)
(48,58,2)
(34,183,2)
(77,183,2)
(125,1,2)
(131,168,2)
(169,142,2)
(38,112,2)
(9,109,2)
(147,1,2)
(1,142,2)
(142,29,2)
(144,142,2)
(105,112,2)
(106,142,2)
(12,33,2)
(11,29,2)
(62,109,2)
(88,112,2)
(112,164,2)
(182,142,2)
(51,112,2)
(11,90,2)
(143,126,2)
(25,126,2)
(147,75,2)
(4,126,2)
(77,8,2)
(33,142,2)
(34,126,2)
(166,142,2)
(14,10,2)
(39,56,2)
(7,57,2)
(97,142,2)
(69,142,2)
(142,142,2)
(43,1,2)
(62,142,2)
(53,86,2)
(79,126,2)
(10,109,2)
(76,142,2)
(47,126,2)
(179,96,2)
(85,80,2)
(164,125,2)
(96,48,2)
(84,183,2)
(17,110,2)
(57,142,2)
(80,4,2)
(63,109,2)
(66,39,2)
(36,142,2)
(100,109,2)
(47,109,2)
(178,29,2)
(64,1,2)
(8,29,2)
(89,30,2)
(82,142,2)
(67,142,2)
(14,89,2)
(110,109,2)
(75,86,2)
(170,109,2)
(115,126,2)
(23,183,2)
(183,93,2)
(8,34,2)
(130,115,2)
(184,109,2)
(36,186,2)
(150,142,2)
(156,142,2)
(169,67,2)
(35,142,2)
(86,142,2)
(164,1,2)
(126,109,2)
(120,1,2)
(13,109,2)
(131,109,2)
(102,1,2)
(40,109,2)
(171,33,2)
(162,112,2)
(170,168,2)
(61,109,2)
(179,48,2)
(73,142,2)
(45,142,2)
(99,143,2)
(130,29,2)
(118,183,2)
(178,142,2)
(7,126,2)
(12,142,2)
(182,29,2)
(134,142,2)
(55,142,2)
(121,109,2)
(57,130,2)
(183,142,2)
(31,183,2)
(43,137,2)
(128,109,2)
(171,112,2)
(125,43,2)
(90,126,2)
(21,109,2)
(99,110,2)
(33,107,2)
(177,77,2)
(110,47,2)
(26,109,2)
(6,110,2)
(22,109,2)
(79,142,2)
(153,142,2)
(126,170,2)
(60,56,2)
(4,142,2)
(107,11,2)
(58,126,2)
(174,142,2)
(25,109,2)
(107,142,2)
(91,1,2)
(69,109,2)
(81,48,2)
(186,142,2)
(85,142,2)
(149,56,2)
(170,145,2)
(134,112,2)
(160,142,2)
(150,126,2)
(53,1,2)
(143,110,2)
(142,109,2)
(163,142,2)
(119,142,2)
(7,142,2)
(96,126,2)
(174,166,2)
(58,109,2)
(16,142,2)
(1,112,2)
(59,109,2)
(38,142,2)
(146,109,2)
(98,109,2)
(115,142,2)
(166,85,2)
(185,142,2)
(70,142,2)
(68,142,2)
(75,164,2)
(1,68,2)
(89,109,2)
(46,1,2)
(186,169,2)
(109,168,2)
(157,109,2)
(83,109,2)
(53,164,2)
(8,183,2)
(56,109,2)
(41,109,2)
(151,109,2)
(67,29,2)
(132,142,2)
(104,109,2)
(171,142,2)
-----------------------------------
(0,)
(1,sIdx < channel->numDesc)
(2,if(NULL != dxeCtxt->rxIsrMsg)
(3,rxPktAvailMsg)
(4,dxeCtxt->dxeChannel)
(5,dxeChannel)
(6,dxeCtxt)
(7,dxeChannelClose(dxeCtxt, &dxeCtxt->dxeChannel[idx])
(8,dxeCtxt->dxeChannel[idx])
(9,eWLAN_PAL_TRACE_LEVEL_ERROR)
(10,return eWLAN_PAL_STATUS_E_INVAL;)
(11,dxeCtxt->dxeChannel[idx])
(12,channel->headCtrlBlk)
(13,NULL)
(14,RET)
(15,channel)
(16,idx)
(17,rxIsrMsg)
(18,NULL)
(19,NULL)
(20,__func__)
(21,dxeCtxt)
(22,__func__)
(23,dxeChannel)
(24,void *)
(25,dxeCtxt->txIsrMsg)
(26,"WLANDXE_Stop Invalid DXE CB")
(27,)
(28,crntDescCB)
(29,idx = 0)
(30,status = eWLAN_PAL_STATUS_SUCCESS)
(31,dxeCtxt)
(32,crntDescCB)
(33,channel    = &dxeCtxt->dxeChannel[idx])
(34,dxeCtxt->dxeChannel)
(35,0)
(36,wpalMutexDelete(&dxeCtxt->dxeChannel[idx].dxeChannelLock)
(37,eWLAN_MODULE_DAL_DATA)
(38,channel)
(39,dxeCtxt->txIsrMsg)
(40,0)
(41,dxeCtxt)
(42,if(NULL != dxeCtxt->rxPktAvailMsg)
(43,(WLANDXE_DescCtrlBlkType *)
(44,*dxeCtxt = NULL)
(45,idx)
(46,crntDescCB)
(47,dxeCtxt->rxIsrMsg)
(48,NULL != dxeCtxt->rxPktAvailMsg)
(49,NULL)
(50,NULL)
(51,break;)
(52,crntDescCB)
(53,crntDescCB->nextCtrlBlk)
(54,)
(55,idx)
(56,NULL != dxeCtxt->txIsrMsg)
(57,&dxeCtxt->dxeChannel[idx])
(58,dxeCtxt->rxPktAvailMsg)
(59,eWLAN_MODULE_DAL_DATA)
(60,dxeCtxt)
(61,dxeCtxt)
(62,WDTS_CHANNEL_MAX)
(63,txIsrMsg)
(64,NULL)
(65,dxeCtxt)
(66,wpalMemoryFree(dxeCtxt->txIsrMsg)
(67,dxeCtxt->dxeChannel[idx])
(68,sIdx = 0)
(69,idx)
(70,dxeCtxt)
(71,pDXEContext)
(72,nextDescCB)
(73,sIdx)
(74,NULL)
(75,(void *)
(76,idx)
(77,dxeCtxt->dxeChannel[idx].healthMonitorMsg)
(78,if(NULL != dxeCtxt->dxeChannel[idx].healthMonitorMsg)
(79,dxeCtxt->dxeChannel)
(80,dxeCtxt->dxeChannel[idx])
(81,rxPktAvailMsg)
(82,dxeChannel)
(83,eWLAN_MODULE_DAL_DATA)
(84,idx)
(85,dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(86,crntDescCB = channel->headCtrlBlk)
(87,eWLAN_PAL_STATUS_SUCCESS)
(88,sIdx)
(89,return status;)
(90,dxeCtxt->dxeChannel)
(91,crntDescCB)
(92,"%s Enter")
(93,dxeCtxt->dxeChannel[idx].healthMonitorMsg)
(94,status)
(95,sIdx)
(96,dxeCtxt->rxPktAvailMsg)
(97,idx)
(98,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "%s Exit", __func__)
(99,wpalMemoryFree(dxeCtxt->rxIsrMsg)
(100,pDXEContext)
(101,*channel = NULL)
(102,crntDescCB)
(103,dxeCtxt)
(104,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_ERROR,\n\\n               "WLANDXE_Stop Invalid DXE CB")
(105,sIdx++)
(106,crntDescCB)
(107,&dxeCtxt->dxeChannel[idx])
(108,eWLAN_PAL_STATUS_E_INVAL)
(109,NULL == pDXEContext)
(110,NULL != dxeCtxt->rxIsrMsg)
(111,)
(112,NULL == crntDescCB)
(113,nextDescCB)
(114,)
(115,dxeCtxt->dxeChannel)
(116,healthMonitorMsg)
(117,dxeCtxt)
(118,healthMonitorMsg)
(119,dxeChannel)
(120,nextDescCB)
(121,idx)
(122,channel)
(123,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(124,dxeChannel)
(125,nextDescCB = (WLANDXE_DescCtrlBlkType *)
(126,dxeCtxt = (WLANDXE_CtrlBlkType *)
(127,)
(128,"%s Exit")
(129,dxeCtxt)
(130,dxeCtxt->dxeChannel[idx])
(131,wpalMemoryFree(pDXEContext)
(132,dxeCtxt)
(133,dxeChannel)
(134,numDesc)
(135,status)
(136,)
(137,WLANDXE_DescCtrlBlkType *)
(138,dxeCtxt)
(139,headCtrlBlk)
(140,*nextDescCB = NULL)
(141,if(NULL != dxeCtxt->txIsrMsg)
(142,idx < WDTS_CHANNEL_MAX)
(143,dxeCtxt->rxIsrMsg)
(144,channel)
(145,WLANDXE_CtrlBlkType *)
(146,NULL)
(147,wpalMemoryFree((void *)
(148,eWLAN_PAL_TRACE_LEVEL_INFO_LOW)
(149,txIsrMsg)
(150,dxeCtxt->dxeChannel)
(151,rxIsrMsg)
(152,for(sIdx = 0; sIdx < channel->numDesc; sIdx++)
(153,dxeCtxt)
(154,nextCtrlBlk)
(155,*crntDescCB = NULL)
(156,idx)
(157,pDXEContext)
(158,HDXE_MSG(eWLAN_MODULE_DAL_DATA, eWLAN_PAL_TRACE_LEVEL_INFO_LOW,\n\\n            "%s Enter", __func__)
(159,healthMonitorTimer)
(160,dxeCtxt)
(161,for(idx = 0; idx < WDTS_CHANNEL_MAX; idx++)
(162,sIdx)
(163,channel)
(164,crntDescCB = nextDescCB)
(165,idx)
(166,&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(167,)
(168,void *pDXEContext)
(169,dxeCtxt->dxeChannel[idx].dxeChannelLock)
(170,(WLANDXE_CtrlBlkType *)
(171,channel->numDesc)
(172,if(NULL == pDXEContext)
(173,dxeCtxt)
(174,wpalTimerDelete(&dxeCtxt->dxeChannel[idx].healthMonitorTimer)
(175,)
(176,NULL)
(177,wpalMemoryFree(dxeCtxt->dxeChannel[idx].healthMonitorMsg)
(178,dxeCtxt->dxeChannel[idx])
(179,wpalMemoryFree(dxeCtxt->rxPktAvailMsg)
(180,if(NULL == crntDescCB)
(181,status)
(182,idx++)
(183,NULL != dxeCtxt->dxeChannel[idx].healthMonitorMsg)
(184,NULL)
(185,dxeChannelLock)
(186,&dxeCtxt->dxeChannel[idx].dxeChannelLock)
(187,nextDescCB)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^