-----label-----
1
-----code-----
static int
mace_pcibrprint(void *aux, const char *pnp)
{
	struct pcibus_attach_args *pba = aux;

	if (pnp)
		printf("%s at %s", pba->pba_busname, pnp);
	printf(" bus %d", pba->pba_bus);
	return (UNCONF);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
7,8
7,9
10,11
10,12
12,13
12,14
15,16
15,17
15,18
15,19
16,17
17,18
17,19
18,19
20,21
20,22
20,23
23,24
24,25
26,27
26,28
27,28
29,30
30,31
30,32
30,33
30,34
31,32
34,35
34,36
35,36
38,39
40,41
41,42
41,43
41,44
42,43
45,46
45,47
46,47
49,50
50,51
51,52
-----nextToken-----
2,4,6,8,9,11,13,14,19,21,22,25,28,32,33,36,37,39,43,44,47,48,52
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;
-----ast_node-----
static intmace_pcibrprint(void *aux, const char *pnp){	struct pcibus_attach_args *pba = aux;	if (pnp)		printf("%s at %s", pba->pba_busname, pnp);	printf(" bus %d", pba->pba_bus);	return (UNCONF);}
static int
mace_pcibrprint(void *aux, const char *pnp)
mace_pcibrprint
void *aux
void
*aux
*
aux
const char *pnp
const char
*pnp
*
pnp
{	struct pcibus_attach_args *pba = aux;	if (pnp)		printf("%s at %s", pba->pba_busname, pnp);	printf(" bus %d", pba->pba_bus);	return (UNCONF);}
struct pcibus_attach_args *pba = aux;
struct pcibus_attach_args *pba = aux;
struct pcibus_attach_args
pcibus_attach_args
*pba = aux
*
pba
= aux
aux
aux
if (pnp)		printf("%s at %s", pba->pba_busname, pnp);
pnp
pnp
printf("%s at %s", pba->pba_busname, pnp);
printf("%s at %s", pba->pba_busname, pnp)
printf
printf
"%s at %s"
pba->pba_busname
pba
pba
pba_busname
pnp
pnp
printf(" bus %d", pba->pba_bus);
printf(" bus %d", pba->pba_bus)
printf
printf
" bus %d"
pba->pba_bus
pba
pba
pba_bus
return (UNCONF);
(UNCONF)
UNCONF
UNCONF
-----joern-----
(21,0,0)
(22,21,0)
(3,7,0)
(10,21,0)
(9,0,0)
(16,1,0)
(4,10,0)
(13,0,0)
(11,19,0)
(14,0,0)
(15,7,0)
(19,18,0)
(21,10,0)
(20,13,0)
(12,1,0)
(7,1,0)
(5,10,0)
(19,0,0)
(7,8,0)
(6,13,0)
(1,19,0)
(1,7,0)
(17,19,0)
(10,19,0)
(3,2,1)
(15,1,1)
(1,19,1)
(12,16,1)
(2,19,1)
(19,11,1)
(1,12,1)
(21,10,1)
(7,8,1)
(7,15,1)
(10,19,1)
(4,22,1)
(6,13,1)
(5,4,1)
(16,3,1)
(10,5,1)
(22,7,1)
(7,1,1)
(11,17,1)
(13,20,1)
(20,21,1)
(19,18,1)
(22,2,1)
(19,18,2)
(7,1,2)
(10,19,2)
(7,8,2)
(21,10,2)
(3,2,2)
(12,2,2)
(6,13,2)
(1,19,2)
(15,2,2)
(1,2,2)
(16,2,2)
(7,2,2)
-----------------------------------
(0,)
(1,pba->pba_busname)
(2,pnp)
(3,"%s at %s")
(4,pba)
(5,pba_bus)
(6,RET)
(7,printf("%s at %s", pba->pba_busname, pnp)
(8,const char *pnp)
(9,pba)
(10,pba->pba_bus)
(11,aux)
(12,pba_busname)
(13,return (UNCONF)
(14,if (pnp)
(15,pnp)
(16,pba)
(17,pba)
(18,void *aux)
(19,*pba = aux)
(20,UNCONF)
(21,printf(" bus %d", pba->pba_bus)
(22," bus %d")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^