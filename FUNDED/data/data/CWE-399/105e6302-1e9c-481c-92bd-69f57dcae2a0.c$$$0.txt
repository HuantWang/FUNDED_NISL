-----label-----
1
-----code-----
static int ibmvscsi_work(void *data)
{
	struct ibmvscsi_host_data *hostdata = data;
	int rc;

	set_user_nice(current, MIN_NICE);

	while (1) {
		rc = wait_event_interruptible(hostdata->work_wait_q,
					      ibmvscsi_work_to_do(hostdata));

		BUG_ON(rc);

		if (kthread_should_stop())
			break;

		ibmvscsi_do_work(hostdata);
	}

	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
7,8
7,9
10,11
10,12
10,13
10,14
10,15
11,12
12,13
12,14
13,14
15,16
15,17
15,18
18,19
19,20
21,22
22,23
22,24
24,25
26,27
27,28
27,29
27,30
28,29
30,31
32,33
34,35
34,36
36,37
36,38
36,39
36,40
37,38
38,39
38,40
39,40
41,42
41,43
41,44
42,43
44,45
44,46
45,46
48,49
48,50
49,50
51,52
53,54
54,55
54,56
55,56
57,58
59,60
59,61
60,61
61,62
64,65
65,66
65,67
66,67
68,69
70,71
-----nextToken-----
2,4,6,8,9,14,16,17,20,23,25,29,31,33,35,40,43,46,47,50,52,56,58,62,63,67,69,71
-----computeFrom-----
38,39
38,40
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
static int ibmvscsi_work(void *data){	struct ibmvscsi_host_data *hostdata = data;	int rc;	set_user_nice(current, MIN_NICE);	while (1) {		rc = wait_event_interruptible(hostdata->work_wait_q,					      ibmvscsi_work_to_do(hostdata));		BUG_ON(rc);		if (kthread_should_stop())			break;		ibmvscsi_do_work(hostdata);	}	return 0;}
static int
ibmvscsi_work(void *data)
ibmvscsi_work
void *data
void
*data
*
data
{	struct ibmvscsi_host_data *hostdata = data;	int rc;	set_user_nice(current, MIN_NICE);	while (1) {		rc = wait_event_interruptible(hostdata->work_wait_q,					      ibmvscsi_work_to_do(hostdata));		BUG_ON(rc);		if (kthread_should_stop())			break;		ibmvscsi_do_work(hostdata);	}	return 0;}
struct ibmvscsi_host_data *hostdata = data;
struct ibmvscsi_host_data *hostdata = data;
struct ibmvscsi_host_data
ibmvscsi_host_data
*hostdata = data
*
hostdata
= data
data
data
int rc;
int rc;
int
rc
rc
set_user_nice(current, MIN_NICE);
set_user_nice(current, MIN_NICE)
set_user_nice
set_user_nice
current
current
MIN_NICE
MIN_NICE
while (1) {		rc = wait_event_interruptible(hostdata->work_wait_q,					      ibmvscsi_work_to_do(hostdata));		BUG_ON(rc);		if (kthread_should_stop())			break;		ibmvscsi_do_work(hostdata);	}
1
{		rc = wait_event_interruptible(hostdata->work_wait_q,					      ibmvscsi_work_to_do(hostdata));		BUG_ON(rc);		if (kthread_should_stop())			break;		ibmvscsi_do_work(hostdata);	}
rc = wait_event_interruptible(hostdata->work_wait_q,					      ibmvscsi_work_to_do(hostdata));
rc = wait_event_interruptible(hostdata->work_wait_q,					      ibmvscsi_work_to_do(hostdata))
rc
rc
wait_event_interruptible(hostdata->work_wait_q,					      ibmvscsi_work_to_do(hostdata))
wait_event_interruptible
wait_event_interruptible
hostdata->work_wait_q
hostdata
hostdata
work_wait_q
ibmvscsi_work_to_do(hostdata)
ibmvscsi_work_to_do
ibmvscsi_work_to_do
hostdata
hostdata
BUG_ON(rc);
BUG_ON(rc)
BUG_ON
BUG_ON
rc
rc
if (kthread_should_stop())			break;
kthread_should_stop()
kthread_should_stop
kthread_should_stop
break;
ibmvscsi_do_work(hostdata);
ibmvscsi_do_work(hostdata)
ibmvscsi_do_work
ibmvscsi_do_work
hostdata
hostdata
return 0;
0
-----joern-----
(3,19,0)
(4,16,0)
(28,18,0)
(19,28,0)
(6,19,0)
(14,24,0)
(29,20,0)
(7,28,0)
(5,20,0)
(1,20,0)
(24,20,0)
(13,16,0)
(13,28,0)
(30,9,0)
(23,28,0)
(0,19,0)
(17,16,0)
(12,4,0)
(6,23,0)
(22,16,0)
(6,4,0)
(26,13,0)
(10,28,0)
(8,9,0)
(19,6,0)
(23,6,0)
(15,24,0)
(4,6,0)
(25,22,0)
(21,23,0)
(28,20,0)
(9,20,0)
(22,4,0)
(27,13,1)
(9,8,1)
(12,27,1)
(22,25,1)
(26,2,1)
(27,24,1)
(14,15,1)
(28,10,1)
(28,18,1)
(23,28,1)
(13,26,1)
(4,6,1)
(25,4,1)
(2,22,1)
(22,4,1)
(13,28,1)
(15,28,1)
(10,7,1)
(8,27,1)
(11,2,1)
(24,14,1)
(6,23,1)
(19,0,1)
(6,19,1)
(21,19,1)
(0,3,1)
(3,12,1)
(19,28,1)
(8,11,1)
(23,21,1)
(30,9,1)
(13,28,2)
(4,6,2)
(11,2,2)
(6,27,2)
(19,28,2)
(19,27,2)
(27,2,2)
(13,2,2)
(21,27,2)
(28,18,2)
(22,4,2)
(26,2,2)
(3,27,2)
(25,27,2)
(23,27,2)
(12,27,2)
(2,27,2)
(6,23,2)
(4,27,2)
(22,27,2)
(0,27,2)
(23,28,2)
(30,9,2)
(6,19,2)
-----------------------------------
(0,work_wait_q)
(1,rc)
(2,kthread_should_stop()
(3,hostdata)
(4,rc = wait_event_interruptible(hostdata->work_wait_q,\n\\n\\t\\t\\t\\t\\t      ibmvscsi_work_to_do(hostdata)
(5,while (1)
(6,wait_event_interruptible(hostdata->work_wait_q,\n\\n\\t\\t\\t\\t\\t      ibmvscsi_work_to_do(hostdata)
(7,hostdata)
(8,0)
(9,return 0;)
(10,data)
(11,break;)
(12,rc)
(13,ibmvscsi_do_work(hostdata)
(14,MIN_NICE)
(15,current)
(16,)
(17,if (kthread_should_stop()
(18,void *data)
(19,hostdata->work_wait_q)
(20,)
(21,hostdata)
(22,BUG_ON(rc)
(23,ibmvscsi_work_to_do(hostdata)
(24,set_user_nice(current, MIN_NICE)
(25,rc)
(26,hostdata)
(27,1)
(28,*hostdata = data)
(29,hostdata)
(30,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^