-----label-----
0
-----code-----
static struct sk_buff *be_xmit_workarounds(struct be_adapter *adapter,
					   struct sk_buff *skb,
					   struct be_wrb_params *wrb_params)
{
	/* Lancer, SH-R ASICs have a bug wherein Packets that are 32 bytes or
	 * less may cause a transmit stall on that port. So the work-around is
	 * to pad short packets (<= 32 bytes) to a 36-byte length.
	 */
	if (unlikely(!BEx_chip(adapter) && skb->len <= 32)) {
		if (skb_put_padto(skb, 36))
			return NULL;
	}

	if (BEx_chip(adapter) || lancer_chip(adapter)) {
		skb = be_lancer_xmit_workarounds(adapter, skb, wrb_params);
		if (!skb)
			return NULL;
	}

	return skb;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
4,8
4,9
7,8
7,9
8,9
10,11
10,12
13,14
13,15
14,15
16,17
16,18
19,20
19,21
20,21
22,23
22,24
25,26
25,27
25,28
26,27
26,28
27,28
27,29
28,29
30,31
30,32
31,32
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
43,44
44,45
44,46
45,46
45,47
45,48
46,47
48,49
51,52
52,53
54,55
54,56
55,56
55,57
56,57
56,58
57,58
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
68,69
68,70
69,70
71,72
71,73
71,74
71,75
72,73
74,75
76,77
78,79
80,81
80,82
81,82
82,83
84,85
85,86
87,88
88,89
-----nextToken-----
3,5,6,9,11,12,15,17,18,21,23,24,29,34,36,40,41,42,47,49,50,53,58,60,63,65,70,73,75,77,79,83,86,89
-----computeFrom-----
30,31
30,32
37,38
37,39
55,56
55,57
68,69
68,70
-----guardedBy-----
65,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CompoundStatement;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct sk_buff *be_xmit_workarounds(struct be_adapter *adapter,					   struct sk_buff *skb,					   struct be_wrb_params *wrb_params){	/* Lancer, SH-R ASICs have a bug wherein Packets that are 32 bytes or	 * less may cause a transmit stall on that port. So the work-around is	 * to pad short packets (<= 32 bytes) to a 36-byte length.	 */	if (unlikely(!BEx_chip(adapter) && skb->len <= 32)) {		if (skb_put_padto(skb, 36))			return NULL;	}	if (BEx_chip(adapter) || lancer_chip(adapter)) {		skb = be_lancer_xmit_workarounds(adapter, skb, wrb_params);		if (!skb)			return NULL;	}	return skb;}
static struct sk_buff
sk_buff
*be_xmit_workarounds(struct be_adapter *adapter,					   struct sk_buff *skb,					   struct be_wrb_params *wrb_params)
*
be_xmit_workarounds
struct be_adapter *adapter
struct be_adapter
be_adapter
*adapter
*
adapter
struct sk_buff *skb
struct sk_buff
sk_buff
*skb
*
skb
struct be_wrb_params *wrb_params
struct be_wrb_params
be_wrb_params
*wrb_params
*
wrb_params
{	/* Lancer, SH-R ASICs have a bug wherein Packets that are 32 bytes or	 * less may cause a transmit stall on that port. So the work-around is	 * to pad short packets (<= 32 bytes) to a 36-byte length.	 */	if (unlikely(!BEx_chip(adapter) && skb->len <= 32)) {		if (skb_put_padto(skb, 36))			return NULL;	}	if (BEx_chip(adapter) || lancer_chip(adapter)) {		skb = be_lancer_xmit_workarounds(adapter, skb, wrb_params);		if (!skb)			return NULL;	}	return skb;}
if (unlikely(!BEx_chip(adapter) && skb->len <= 32)) {		if (skb_put_padto(skb, 36))			return NULL;	}
unlikely(!BEx_chip(adapter) && skb->len <= 32)
unlikely
unlikely
!BEx_chip(adapter) && skb->len <= 32
!BEx_chip(adapter)
BEx_chip(adapter)
BEx_chip
BEx_chip
adapter
adapter
skb->len <= 32
skb->len
skb
skb
len
32
{		if (skb_put_padto(skb, 36))			return NULL;	}
if (skb_put_padto(skb, 36))			return NULL;
skb_put_padto(skb, 36)
skb_put_padto
skb_put_padto
skb
skb
36
return NULL;
NULL
NULL
if (BEx_chip(adapter) || lancer_chip(adapter)) {		skb = be_lancer_xmit_workarounds(adapter, skb, wrb_params);		if (!skb)			return NULL;	}
BEx_chip(adapter) || lancer_chip(adapter)
BEx_chip(adapter)
BEx_chip
BEx_chip
adapter
adapter
lancer_chip(adapter)
lancer_chip
lancer_chip
adapter
adapter
{		skb = be_lancer_xmit_workarounds(adapter, skb, wrb_params);		if (!skb)			return NULL;	}
skb = be_lancer_xmit_workarounds(adapter, skb, wrb_params);
skb = be_lancer_xmit_workarounds(adapter, skb, wrb_params)
skb
skb
be_lancer_xmit_workarounds(adapter, skb, wrb_params)
be_lancer_xmit_workarounds
be_lancer_xmit_workarounds
adapter
adapter
skb
skb
wrb_params
wrb_params
if (!skb)			return NULL;
!skb
skb
skb
return NULL;
NULL
NULL
return skb;
skb
skb
-----joern-----
(42,1,0)
(29,36,0)
(28,35,0)
(3,0,0)
(19,16,0)
(6,0,0)
(30,8,0)
(35,40,0)
(40,1,0)
(28,1,0)
(30,25,0)
(4,0,0)
(0,1,0)
(4,26,0)
(30,24,0)
(31,4,0)
(32,26,0)
(37,23,0)
(15,41,0)
(41,26,0)
(38,7,0)
(42,24,0)
(18,28,0)
(13,9,0)
(8,30,0)
(13,16,0)
(39,40,0)
(41,25,0)
(32,4,0)
(23,26,0)
(40,35,0)
(27,41,0)
(4,36,0)
(13,31,0)
(14,42,0)
(2,9,0)
(24,30,0)
(10,31,0)
(12,23,0)
(17,5,0)
(0,26,0)
(0,33,0)
(25,30,0)
(21,25,0)
(11,4,0)
(25,41,0)
(31,26,0)
(35,28,0)
(0,4,0)
(31,5,0)
(20,32,0)
(34,0,0)
(24,42,0)
(22,5,0)
(23,26,1)
(31,26,1)
(24,42,1)
(27,15,1)
(20,4,1)
(34,11,1)
(0,1,1)
(31,4,1)
(32,26,1)
(6,3,1)
(39,28,1)
(32,4,1)
(35,28,1)
(3,34,1)
(9,2,1)
(0,6,1)
(23,12,1)
(10,35,1)
(41,26,1)
(10,32,1)
(30,24,1)
(30,25,1)
(16,19,1)
(12,37,1)
(2,23,1)
(18,23,1)
(41,27,1)
(8,30,1)
(25,21,1)
(15,24,1)
(0,33,1)
(31,10,1)
(35,40,1)
(13,9,1)
(40,39,1)
(19,32,1)
(42,14,1)
(13,16,1)
(28,1,1)
(18,8,1)
(4,26,1)
(13,31,1)
(25,41,1)
(21,41,1)
(32,20,1)
(37,8,1)
(0,26,1)
(11,35,1)
(40,1,1)
(4,0,1)
(28,18,1)
(42,1,1)
(40,1,2)
(23,8,2)
(16,32,2)
(24,42,2)
(30,24,2)
(39,28,2)
(37,8,2)
(20,35,2)
(25,24,2)
(31,32,2)
(3,35,2)
(31,35,2)
(25,41,2)
(0,35,2)
(4,26,2)
(35,23,2)
(13,9,2)
(18,23,2)
(31,26,2)
(41,24,2)
(15,24,2)
(31,4,2)
(18,8,2)
(0,33,2)
(28,8,2)
(30,25,2)
(23,26,2)
(35,28,2)
(21,24,2)
(42,1,2)
(40,28,2)
(8,30,2)
(13,16,2)
(28,23,2)
(0,26,2)
(2,23,2)
(11,35,2)
(35,8,2)
(13,31,2)
(10,32,2)
(32,4,2)
(27,24,2)
(19,32,2)
(34,35,2)
(12,8,2)
(35,40,2)
(32,35,2)
(4,35,2)
(41,26,2)
(32,26,2)
(28,1,2)
(4,0,2)
(6,35,2)
(10,35,2)
(9,23,2)
(0,1,2)
-----------------------------------
(0,be_lancer_xmit_workarounds(adapter, skb, wrb_params)
(1,struct be_adapter *adapter)
(2,NULL)
(3,skb)
(4,skb = be_lancer_xmit_workarounds(adapter, skb, wrb_params)
(5,)
(6,wrb_params)
(7,)
(8,unlikely(!BEx_chip(adapter)
(9,return NULL;)
(10,skb)
(11,skb)
(12,36)
(13,RET)
(14,adapter)
(15,skb)
(16,return NULL;)
(17,if (BEx_chip(adapter)
(18,adapter)
(19,NULL)
(20,skb)
(21,32)
(22,if (unlikely(!BEx_chip(adapter)
(23,skb_put_padto(skb, 36)
(24,!BEx_chip(adapter)
(25,skb->len <= 32)
(26,struct sk_buff *skb)
(27,len)
(28,BEx_chip(adapter)
(29,if (!skb)
(30,!BEx_chip(adapter)
(31,return skb;)
(32,!skb)
(33,struct be_wrb_params *wrb_params)
(34,adapter)
(35,BEx_chip(adapter)
(36,)
(37,skb)
(38,if (skb_put_padto(skb, 36)
(39,adapter)
(40,lancer_chip(adapter)
(41,skb->len)
(42,BEx_chip(adapter)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^