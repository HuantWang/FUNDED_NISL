-----label-----
1
-----code-----
int pcibios_enable_device(struct pci_dev *dev, int mask)
{
	int err;
	u16 cmd, old_cmd;

	err = pci_enable_resources(dev, mask);
	if (err < 0)
		return err;

	pci_read_config_word(dev, PCI_COMMAND, &cmd);
	old_cmd = cmd;

	cmd |= (PCI_COMMAND_SERR | PCI_COMMAND_PARITY);

#if 0
	/* If bridge/bus controller has FBB enabled, child must too. */
	if (dev->bus->bridge_ctl & PCI_BRIDGE_CTL_FAST_BACK)
		cmd |= PCI_COMMAND_FAST_BACK;
#endif

	if (cmd != old_cmd) {
		dev_info(&dev->dev, "enabling SERR and PARITY (%04x -> %04x)\n",
			old_cmd, cmd);
		pci_write_config_word(dev, PCI_COMMAND, cmd);
	}
	return 0;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
15,18
15,19
15,20
15,21
15,22
15,23
15,24
16,17
17,18
17,19
19,20
21,22
22,23
22,24
22,25
23,24
25,26
27,28
29,30
30,31
30,32
31,32
33,34
33,35
33,36
34,35
36,37
38,39
40,41
40,42
41,42
41,43
42,43
45,46
46,47
48,49
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
57,58
59,60
60,61
60,62
61,62
63,64
65,66
66,67
66,68
67,68
69,70
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
79,80
81,82
81,83
82,83
83,84
83,85
83,86
83,87
83,88
84,85
86,87
87,88
87,89
88,89
92,93
94,95
96,97
97,98
97,99
97,100
97,101
98,99
100,101
102,103
104,105
106,107
-----nextToken-----
2,4,7,9,10,12,14,18,20,24,26,28,32,35,37,39,43,44,47,51,53,55,58,62,64,68,72,74,78,80,85,89,90,91,93,95,99,101,103,105,107
-----computeFrom-----
30,31
30,32
41,42
41,43
60,61
60,62
66,67
66,68
70,71
70,72
76,77
76,78
-----guardedBy-----
43,47
78,105
80,93
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;Declarator;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;
-----ast_node-----
int pcibios_enable_device(struct pci_dev *dev, int mask){	int err;	u16 cmd, old_cmd;	err = pci_enable_resources(dev, mask);	if (err < 0)		return err;	pci_read_config_word(dev, PCI_COMMAND, &cmd);	old_cmd = cmd;	cmd |= (PCI_COMMAND_SERR | PCI_COMMAND_PARITY);#if 0	/* If bridge/bus controller has FBB enabled, child must too. */	if (dev->bus->bridge_ctl & PCI_BRIDGE_CTL_FAST_BACK)		cmd |= PCI_COMMAND_FAST_BACK;#endif	if (cmd != old_cmd) {		dev_info(&dev->dev, "enabling SERR and PARITY (%04x -> %04x)\n",			old_cmd, cmd);		pci_write_config_word(dev, PCI_COMMAND, cmd);	}	return 0;}
int
pcibios_enable_device(struct pci_dev *dev, int mask)
pcibios_enable_device
struct pci_dev *dev
struct pci_dev
pci_dev
*dev
*
dev
int mask
int
mask
mask
{	int err;	u16 cmd, old_cmd;	err = pci_enable_resources(dev, mask);	if (err < 0)		return err;	pci_read_config_word(dev, PCI_COMMAND, &cmd);	old_cmd = cmd;	cmd |= (PCI_COMMAND_SERR | PCI_COMMAND_PARITY);#if 0	/* If bridge/bus controller has FBB enabled, child must too. */	if (dev->bus->bridge_ctl & PCI_BRIDGE_CTL_FAST_BACK)		cmd |= PCI_COMMAND_FAST_BACK;#endif	if (cmd != old_cmd) {		dev_info(&dev->dev, "enabling SERR and PARITY (%04x -> %04x)\n",			old_cmd, cmd);		pci_write_config_word(dev, PCI_COMMAND, cmd);	}	return 0;}
int err;
int err;
int
err
err
u16 cmd, old_cmd;
u16 cmd, old_cmd;
u16
u16
cmd
cmd
old_cmd
old_cmd
err = pci_enable_resources(dev, mask);
err = pci_enable_resources(dev, mask)
err
err
pci_enable_resources(dev, mask)
pci_enable_resources
pci_enable_resources
dev
dev
mask
mask
if (err < 0)		return err;
err < 0
err
err
0
return err;
err
err
pci_read_config_word(dev, PCI_COMMAND, &cmd);
pci_read_config_word(dev, PCI_COMMAND, &cmd)
pci_read_config_word
pci_read_config_word
dev
dev
PCI_COMMAND
PCI_COMMAND
&cmd
cmd
cmd
old_cmd = cmd;
old_cmd = cmd
old_cmd
old_cmd
cmd
cmd
cmd |= (PCI_COMMAND_SERR | PCI_COMMAND_PARITY);
cmd |= (PCI_COMMAND_SERR | PCI_COMMAND_PARITY)
cmd
cmd
(PCI_COMMAND_SERR | PCI_COMMAND_PARITY)
PCI_COMMAND_SERR | PCI_COMMAND_PARITY
PCI_COMMAND_SERR
PCI_COMMAND_SERR
PCI_COMMAND_PARITY
PCI_COMMAND_PARITY
if (cmd != old_cmd) {		dev_info(&dev->dev, "enabling SERR and PARITY (%04x -> %04x)\n",			old_cmd, cmd);		pci_write_config_word(dev, PCI_COMMAND, cmd);	}
cmd != old_cmd
cmd
cmd
old_cmd
old_cmd
{		dev_info(&dev->dev, "enabling SERR and PARITY (%04x -> %04x)\n",			old_cmd, cmd);		pci_write_config_word(dev, PCI_COMMAND, cmd);	}
dev_info(&dev->dev, "enabling SERR and PARITY (%04x -> %04x)\n",			old_cmd, cmd);
dev_info(&dev->dev, "enabling SERR and PARITY (%04x -> %04x)\n",			old_cmd, cmd)
dev_info
dev_info
&dev->dev
dev->dev
dev
dev
dev
"enabling SERR and PARITY (%04x -> %04x)\n"
old_cmd
old_cmd
cmd
cmd
pci_write_config_word(dev, PCI_COMMAND, cmd);
pci_write_config_word(dev, PCI_COMMAND, cmd)
pci_write_config_word
pci_write_config_word
dev
dev
PCI_COMMAND
PCI_COMMAND
cmd
cmd
return 0;
0
-----joern-----
(16,43,0)
(38,59,0)
(23,24,0)
(40,44,0)
(48,57,0)
(16,26,0)
(2,47,0)
(26,16,0)
(8,33,0)
(10,32,0)
(16,50,0)
(57,44,0)
(52,49,0)
(35,16,0)
(46,50,0)
(47,31,0)
(53,16,0)
(24,59,0)
(46,59,0)
(24,25,0)
(6,33,0)
(45,46,0)
(41,15,0)
(16,59,0)
(36,42,0)
(50,58,0)
(3,58,0)
(43,44,0)
(12,59,0)
(37,24,0)
(29,44,0)
(4,58,0)
(16,19,0)
(59,50,0)
(58,50,0)
(24,19,0)
(26,15,0)
(21,46,0)
(15,25,0)
(13,16,0)
(31,44,0)
(15,26,0)
(5,44,0)
(0,44,0)
(56,43,0)
(39,31,0)
(1,54,0)
(32,25,0)
(32,10,0)
(17,32,0)
(14,24,0)
(18,44,0)
(42,5,0)
(24,50,0)
(1,5,0)
(30,5,0)
(9,10,0)
(51,32,0)
(33,5,0)
(11,1,0)
(22,15,0)
(34,1,0)
(31,47,0)
(50,44,0)
(20,57,0)
(7,43,0)
(28,44,0)
(1,25,0)
(49,10,0)
(55,44,0)
(48,42,0)
(5,1,0)
(46,43,0)
(10,49,0)
(27,31,0)
(60,50,0)
(31,25,0)
(38,49,1)
(16,59,1)
(46,50,1)
(16,50,1)
(42,36,1)
(46,21,1)
(48,42,1)
(6,5,1)
(14,37,1)
(33,5,1)
(36,33,1)
(16,43,1)
(32,51,1)
(20,24,1)
(16,35,1)
(4,3,1)
(49,10,1)
(27,39,1)
(59,12,1)
(22,41,1)
(39,33,1)
(59,50,1)
(15,25,1)
(13,26,1)
(2,27,1)
(24,59,1)
(33,8,1)
(34,30,1)
(1,25,1)
(52,10,1)
(42,5,1)
(12,38,1)
(43,56,1)
(35,53,1)
(11,34,1)
(10,32,1)
(17,50,1)
(58,4,1)
(24,14,1)
(49,52,1)
(46,43,1)
(37,23,1)
(9,32,1)
(23,16,1)
(24,25,1)
(48,57,1)
(5,1,1)
(31,47,1)
(16,26,1)
(51,17,1)
(21,45,1)
(24,50,1)
(32,25,1)
(1,11,1)
(56,7,1)
(8,6,1)
(60,43,1)
(3,60,1)
(1,54,1)
(20,46,1)
(50,58,1)
(10,9,1)
(15,22,1)
(53,13,1)
(46,59,1)
(7,31,1)
(31,25,1)
(26,15,1)
(57,20,1)
(45,49,1)
(41,46,1)
(47,2,1)
(45,59,1)
(16,50,2)
(57,33,2)
(38,49,2)
(52,33,2)
(16,26,2)
(36,33,2)
(27,33,2)
(24,59,2)
(4,33,2)
(35,46,2)
(42,33,2)
(16,46,2)
(24,46,2)
(17,33,2)
(32,25,2)
(58,33,2)
(48,57,2)
(24,25,2)
(39,33,2)
(31,33,2)
(12,49,2)
(10,32,2)
(1,25,2)
(31,47,2)
(43,33,2)
(46,43,2)
(56,33,2)
(47,33,2)
(32,33,2)
(3,33,2)
(1,54,2)
(46,50,2)
(41,46,2)
(37,46,2)
(22,46,2)
(23,46,2)
(46,33,2)
(20,33,2)
(26,15,2)
(42,5,2)
(16,43,2)
(5,1,2)
(7,33,2)
(45,33,2)
(46,59,2)
(53,46,2)
(33,5,2)
(49,10,2)
(50,58,2)
(24,50,2)
(49,33,2)
(59,49,2)
(15,25,2)
(59,50,2)
(10,33,2)
(16,59,2)
(9,33,2)
(26,46,2)
(60,33,2)
(15,46,2)
(48,42,2)
(2,33,2)
(21,33,2)
(51,33,2)
(50,33,2)
(13,46,2)
(31,25,2)
(14,46,2)
-----------------------------------
(0,cmd)
(1,pci_enable_resources(dev, mask)
(2,cmd)
(3,PCI_COMMAND_SERR)
(4,PCI_COMMAND_PARITY)
(5,err = pci_enable_resources(dev, mask)
(6,err)
(7,old_cmd)
(8,0)
(9,bridge_ctl)
(10,dev->bus->bridge_ctl)
(11,mask)
(12,PCI_COMMAND_FAST_BACK)
(13,"enabling SERR and PARITY (%04x -> %04x)
(14,cmd)
(15,dev->dev)
(16,dev_info(&dev->dev, "enabling SERR and PARITY (%04x -> %04x)
(17,dev)
(18,err)
(19,)
(20,0)
(21,old_cmd)
(22,dev)
(23,dev)
(24,pci_write_config_word(dev, PCI_COMMAND, cmd)
(25,struct pci_dev *dev)
(26,&dev->dev)
(27,PCI_COMMAND)
(28,old_cmd)
(29,if (cmd != old_cmd)
(30,err)
(31,pci_read_config_word(dev, PCI_COMMAND, &cmd)
(32,dev->bus)
(33,err < 0)
(34,dev)
(35,cmd)
(36,err)
(37,PCI_COMMAND)
(38,cmd)
(39,dev)
(40,if (err < 0)
(41,dev)
(42,return err;)
(43,old_cmd = cmd)
(44,)
(45,cmd)
(46,cmd != old_cmd)
(47,&cmd)
(48,RET)
(49,dev->bus->bridge_ctl & PCI_BRIDGE_CTL_FAST_BACK)
(50,cmd |= (PCI_COMMAND_SERR | PCI_COMMAND_PARITY)
(51,bus)
(52,PCI_BRIDGE_CTL_FAST_BACK)
(53,old_cmd)
(54,int mask)
(55,if (dev->bus->bridge_ctl & PCI_BRIDGE_CTL_FAST_BACK)
(56,cmd)
(57,return 0;)
(58,PCI_COMMAND_SERR | PCI_COMMAND_PARITY)
(59,cmd |= PCI_COMMAND_FAST_BACK)
(60,cmd)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^