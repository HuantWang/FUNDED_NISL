-----label-----
1
-----code-----
static int dwc3_pci_probe(struct pci_dev *pci, const struct pci_device_id *id)
{
	struct property_entry *p = (struct property_entry *)id->driver_data;
	struct dwc3_pci		*dwc;
	struct resource		res[2];
	int			ret;
	struct device		*dev = &pci->dev;

	ret = pcim_enable_device(pci);
	if (ret) {
		dev_err(dev, "failed to enable pci device\n");
		return -ENODEV;
	}

	pci_set_master(pci);

	dwc = devm_kzalloc(dev, sizeof(*dwc), GFP_KERNEL);
	if (!dwc)
		return -ENOMEM;

	dwc->dwc3 = platform_device_alloc("dwc3", PLATFORM_DEVID_AUTO);
	if (!dwc->dwc3)
		return -ENOMEM;

	memset(res, 0x00, sizeof(struct resource) * ARRAY_SIZE(res));

	res[0].start	= pci_resource_start(pci, 0);
	res[0].end	= pci_resource_end(pci, 0);
	res[0].name	= "dwc_usb3";
	res[0].flags	= IORESOURCE_MEM;

	res[1].start	= pci->irq;
	res[1].name	= "dwc_usb3";
	res[1].flags	= IORESOURCE_IRQ;

	ret = platform_device_add_resources(dwc->dwc3, res, ARRAY_SIZE(res));
	if (ret) {
		dev_err(dev, "couldn't add resources to dwc3 device\n");
		goto err;
	}

	dwc->pci = pci;
	dwc->dwc3->dev.parent = dev;
	ACPI_COMPANION_SET(&dwc->dwc3->dev, ACPI_COMPANION(dev));

	ret = platform_device_add_properties(dwc->dwc3, p);
	if (ret < 0)
		return ret;

	ret = dwc3_pci_quirks(dwc);
	if (ret)
		goto err;

	ret = platform_device_add(dwc->dwc3);
	if (ret) {
		dev_err(dev, "failed to register dwc3 device\n");
		goto err;
	}

	device_init_wakeup(dev, true);
	pci_set_drvdata(pci, dwc);
	pm_runtime_put(dev);
#ifdef CONFIG_PM
	INIT_WORK(&dwc->wakeup_work, dwc3_pci_resume_work);
#endif

	return 0;
err:
	platform_device_put(dwc->dwc3);
	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
17,28
17,29
17,30
17,31
17,32
17,33
17,34
17,35
17,36
17,37
17,38
17,39
17,40
17,41
17,42
17,43
17,44
17,45
17,46
17,47
17,48
17,49
17,50
17,51
17,52
17,53
17,54
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
27,29
28,29
30,31
32,33
32,34
33,34
36,37
37,38
37,39
38,39
40,41
40,42
43,44
44,45
44,46
45,46
47,48
47,49
49,50
51,52
52,53
52,54
54,55
56,57
57,58
57,59
58,59
60,61
60,62
60,63
63,64
64,65
65,66
65,67
66,67
69,70
70,71
70,72
71,72
73,74
73,75
74,75
76,77
78,79
78,80
79,80
81,82
81,83
82,83
83,84
83,85
83,86
84,85
86,87
89,90
90,91
91,92
93,94
94,95
94,96
95,96
97,98
99,100
100,101
100,102
101,102
103,104
103,105
103,106
103,107
104,105
106,107
108,109
109,110
110,111
111,112
113,114
115,116
115,117
116,117
117,118
119,120
120,121
121,122
123,124
124,125
124,126
125,126
125,127
126,127
129,130
129,131
129,132
130,131
133,134
135,136
135,137
136,137
137,138
137,139
138,139
141,142
142,143
143,144
145,146
146,147
146,148
146,149
146,150
147,148
149,150
152,153
152,154
153,154
154,155
154,156
155,156
158,159
158,160
159,160
161,162
163,164
164,165
164,166
165,166
165,167
166,167
166,168
167,168
171,172
171,173
171,174
172,173
174,175
177,178
178,179
178,180
179,180
179,181
180,181
180,182
181,182
185,186
185,187
185,188
186,187
188,189
191,192
192,193
192,194
193,194
193,195
194,195
194,196
195,196
200,201
201,202
201,203
202,203
202,204
203,204
203,205
204,205
208,209
210,211
211,212
211,213
212,213
212,214
213,214
213,215
214,215
218,219
218,220
219,220
222,223
223,224
223,225
224,225
224,226
225,226
225,227
226,227
231,232
232,233
232,234
233,234
233,235
234,235
234,236
235,236
239,240
241,242
242,243
242,244
243,244
245,246
245,247
245,248
245,249
246,247
248,249
248,250
249,250
252,253
254,255
254,256
255,256
257,258
259,260
259,261
260,261
262,263
262,264
263,264
264,265
264,266
264,267
265,266
267,268
270,271
272,273
273,274
273,275
274,275
274,276
275,276
278,279
280,281
281,282
281,283
282,283
282,284
283,284
283,285
284,285
284,286
285,286
290,291
292,293
293,294
293,295
293,296
294,295
296,297
297,298
297,299
298,299
298,300
299,300
303,304
303,305
304,305
306,307
308,309
309,310
309,311
310,311
312,313
312,314
312,315
313,314
315,316
315,317
316,317
319,320
321,322
321,323
322,323
322,324
323,324
326,327
327,328
329,330
330,331
330,332
331,332
333,334
333,335
334,335
336,337
338,339
338,340
339,340
341,342
343,344
344,345
344,346
345,346
347,348
347,349
348,349
350,351
350,352
351,352
354,355
354,356
355,356
357,358
357,359
358,359
359,360
359,361
359,362
360,361
362,363
365,366
367,368
368,369
368,370
368,371
369,370
371,372
374,375
375,376
375,377
375,378
376,377
378,379
380,381
382,383
383,384
383,385
384,385
386,387
388,389
390,391
390,392
392,393
393,394
393,395
394,395
396,397
396,398
397,398
400,401
401,402
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,29,31,34,35,39,41,42,46,48,50,53,55,59,61,62,67,68,72,75,77,80,85,87,88,92,96,98,102,105,107,112,114,118,122,127,128,131,132,134,139,140,144,148,150,151,156,157,160,162,168,169,170,173,175,176,182,183,184,187,189,190,196,197,198,199,205,206,207,209,215,216,217,220,221,227,228,229,230,236,237,238,240,244,247,250,251,253,256,258,261,266,268,269,271,276,277,279,286,287,288,289,291,295,300,301,302,305,307,311,314,317,318,320,324,325,328,332,335,337,340,342,346,349,352,353,356,361,363,364,366,370,372,373,377,379,381,385,387,389,391,395,398,399,402
-----computeFrom-----
70,71
70,72
100,101
100,102
124,125
124,126
152,153
152,154
164,165
164,166
178,179
178,180
192,193
192,194
201,202
201,203
211,212
211,213
223,224
223,225
232,233
232,234
242,243
242,244
273,274
273,275
281,282
281,283
309,310
309,311
322,323
322,324
330,331
330,332
344,345
344,346
-----guardedBy-----
324,328
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;CastExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;Pointer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;IdExpression;Name;IfStatement;UnaryExpression;FieldReference;IdExpression;Name;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BinaryExpression;TypeIdExpression;TypeId;ElaboratedTypeSpecifier;Name;Declarator;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;ArraySubscriptExpression;IdExpression;Name;LiteralExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;LiteralExpression;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static int dwc3_pci_probe(struct pci_dev *pci, const struct pci_device_id *id){	struct property_entry *p = (struct property_entry *)id->driver_data;	struct dwc3_pci		*dwc;	struct resource		res[2];	int			ret;	struct device		*dev = &pci->dev;	ret = pcim_enable_device(pci);	if (ret) {		dev_err(dev, "failed to enable pci device\n");		return -ENODEV;	}	pci_set_master(pci);	dwc = devm_kzalloc(dev, sizeof(*dwc), GFP_KERNEL);	if (!dwc)		return -ENOMEM;	dwc->dwc3 = platform_device_alloc("dwc3", PLATFORM_DEVID_AUTO);	if (!dwc->dwc3)		return -ENOMEM;	memset(res, 0x00, sizeof(struct resource) * ARRAY_SIZE(res));	res[0].start	= pci_resource_start(pci, 0);	res[0].end	= pci_resource_end(pci, 0);	res[0].name	= "dwc_usb3";	res[0].flags	= IORESOURCE_MEM;	res[1].start	= pci->irq;	res[1].name	= "dwc_usb3";	res[1].flags	= IORESOURCE_IRQ;	ret = platform_device_add_resources(dwc->dwc3, res, ARRAY_SIZE(res));	if (ret) {		dev_err(dev, "couldn't add resources to dwc3 device\n");		goto err;	}	dwc->pci = pci;	dwc->dwc3->dev.parent = dev;	ACPI_COMPANION_SET(&dwc->dwc3->dev, ACPI_COMPANION(dev));	ret = platform_device_add_properties(dwc->dwc3, p);	if (ret < 0)		return ret;	ret = dwc3_pci_quirks(dwc);	if (ret)		goto err;	ret = platform_device_add(dwc->dwc3);	if (ret) {		dev_err(dev, "failed to register dwc3 device\n");		goto err;	}	device_init_wakeup(dev, true);	pci_set_drvdata(pci, dwc);	pm_runtime_put(dev);#ifdef CONFIG_PM	INIT_WORK(&dwc->wakeup_work, dwc3_pci_resume_work);#endif	return 0;err:	platform_device_put(dwc->dwc3);	return ret;}
static int
dwc3_pci_probe(struct pci_dev *pci, const struct pci_device_id *id)
dwc3_pci_probe
struct pci_dev *pci
struct pci_dev
pci_dev
*pci
*
pci
const struct pci_device_id *id
const struct pci_device_id
pci_device_id
*id
*
id
{	struct property_entry *p = (struct property_entry *)id->driver_data;	struct dwc3_pci		*dwc;	struct resource		res[2];	int			ret;	struct device		*dev = &pci->dev;	ret = pcim_enable_device(pci);	if (ret) {		dev_err(dev, "failed to enable pci device\n");		return -ENODEV;	}	pci_set_master(pci);	dwc = devm_kzalloc(dev, sizeof(*dwc), GFP_KERNEL);	if (!dwc)		return -ENOMEM;	dwc->dwc3 = platform_device_alloc("dwc3", PLATFORM_DEVID_AUTO);	if (!dwc->dwc3)		return -ENOMEM;	memset(res, 0x00, sizeof(struct resource) * ARRAY_SIZE(res));	res[0].start	= pci_resource_start(pci, 0);	res[0].end	= pci_resource_end(pci, 0);	res[0].name	= "dwc_usb3";	res[0].flags	= IORESOURCE_MEM;	res[1].start	= pci->irq;	res[1].name	= "dwc_usb3";	res[1].flags	= IORESOURCE_IRQ;	ret = platform_device_add_resources(dwc->dwc3, res, ARRAY_SIZE(res));	if (ret) {		dev_err(dev, "couldn't add resources to dwc3 device\n");		goto err;	}	dwc->pci = pci;	dwc->dwc3->dev.parent = dev;	ACPI_COMPANION_SET(&dwc->dwc3->dev, ACPI_COMPANION(dev));	ret = platform_device_add_properties(dwc->dwc3, p);	if (ret < 0)		return ret;	ret = dwc3_pci_quirks(dwc);	if (ret)		goto err;	ret = platform_device_add(dwc->dwc3);	if (ret) {		dev_err(dev, "failed to register dwc3 device\n");		goto err;	}	device_init_wakeup(dev, true);	pci_set_drvdata(pci, dwc);	pm_runtime_put(dev);#ifdef CONFIG_PM	INIT_WORK(&dwc->wakeup_work, dwc3_pci_resume_work);#endif	return 0;err:	platform_device_put(dwc->dwc3);	return ret;}
struct property_entry *p = (struct property_entry *)id->driver_data;
struct property_entry *p = (struct property_entry *)id->driver_data;
struct property_entry
property_entry
*p = (struct property_entry *)id->driver_data
*
p
= (struct property_entry *)id->driver_data
(struct property_entry *)id->driver_data
struct property_entry *
struct property_entry
property_entry
*
*
id->driver_data
id
id
driver_data
struct dwc3_pci		*dwc;
struct dwc3_pci		*dwc;
struct dwc3_pci
dwc3_pci
*dwc
*
dwc
struct resource		res[2];
struct resource		res[2];
struct resource
resource
res[2]
res
[2]
2
int			ret;
int			ret;
int
ret
ret
struct device		*dev = &pci->dev;
struct device		*dev = &pci->dev;
struct device
device
*dev = &pci->dev
*
dev
= &pci->dev
&pci->dev
pci->dev
pci
pci
dev
ret = pcim_enable_device(pci);
ret = pcim_enable_device(pci)
ret
ret
pcim_enable_device(pci)
pcim_enable_device
pcim_enable_device
pci
pci
if (ret) {		dev_err(dev, "failed to enable pci device\n");		return -ENODEV;	}
ret
ret
{		dev_err(dev, "failed to enable pci device\n");		return -ENODEV;	}
dev_err(dev, "failed to enable pci device\n");
dev_err(dev, "failed to enable pci device\n")
dev_err
dev_err
dev
dev
"failed to enable pci device\n"
return -ENODEV;
-ENODEV
ENODEV
ENODEV
pci_set_master(pci);
pci_set_master(pci)
pci_set_master
pci_set_master
pci
pci
dwc = devm_kzalloc(dev, sizeof(*dwc), GFP_KERNEL);
dwc = devm_kzalloc(dev, sizeof(*dwc), GFP_KERNEL)
dwc
dwc
devm_kzalloc(dev, sizeof(*dwc), GFP_KERNEL)
devm_kzalloc
devm_kzalloc
dev
dev
sizeof(*dwc)
(*dwc)
*dwc
dwc
dwc
GFP_KERNEL
GFP_KERNEL
if (!dwc)		return -ENOMEM;
!dwc
dwc
dwc
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
dwc->dwc3 = platform_device_alloc("dwc3", PLATFORM_DEVID_AUTO);
dwc->dwc3 = platform_device_alloc("dwc3", PLATFORM_DEVID_AUTO)
dwc->dwc3
dwc
dwc
dwc3
platform_device_alloc("dwc3", PLATFORM_DEVID_AUTO)
platform_device_alloc
platform_device_alloc
"dwc3"
PLATFORM_DEVID_AUTO
PLATFORM_DEVID_AUTO
if (!dwc->dwc3)		return -ENOMEM;
!dwc->dwc3
dwc->dwc3
dwc
dwc
dwc3
return -ENOMEM;
-ENOMEM
ENOMEM
ENOMEM
memset(res, 0x00, sizeof(struct resource) * ARRAY_SIZE(res));
memset(res, 0x00, sizeof(struct resource) * ARRAY_SIZE(res))
memset
memset
res
res
0x00
sizeof(struct resource) * ARRAY_SIZE(res)
sizeof(struct resource)
struct resource
struct resource
resource

ARRAY_SIZE(res)
ARRAY_SIZE
ARRAY_SIZE
res
res
res[0].start	= pci_resource_start(pci, 0);
res[0].start	= pci_resource_start(pci, 0)
res[0].start
res[0]
res
res
0
start
pci_resource_start(pci, 0)
pci_resource_start
pci_resource_start
pci
pci
0
res[0].end	= pci_resource_end(pci, 0);
res[0].end	= pci_resource_end(pci, 0)
res[0].end
res[0]
res
res
0
end
pci_resource_end(pci, 0)
pci_resource_end
pci_resource_end
pci
pci
0
res[0].name	= "dwc_usb3";
res[0].name	= "dwc_usb3"
res[0].name
res[0]
res
res
0
name
"dwc_usb3"
res[0].flags	= IORESOURCE_MEM;
res[0].flags	= IORESOURCE_MEM
res[0].flags
res[0]
res
res
0
flags
IORESOURCE_MEM
IORESOURCE_MEM
res[1].start	= pci->irq;
res[1].start	= pci->irq
res[1].start
res[1]
res
res
1
start
pci->irq
pci
pci
irq
res[1].name	= "dwc_usb3";
res[1].name	= "dwc_usb3"
res[1].name
res[1]
res
res
1
name
"dwc_usb3"
res[1].flags	= IORESOURCE_IRQ;
res[1].flags	= IORESOURCE_IRQ
res[1].flags
res[1]
res
res
1
flags
IORESOURCE_IRQ
IORESOURCE_IRQ
ret = platform_device_add_resources(dwc->dwc3, res, ARRAY_SIZE(res));
ret = platform_device_add_resources(dwc->dwc3, res, ARRAY_SIZE(res))
ret
ret
platform_device_add_resources(dwc->dwc3, res, ARRAY_SIZE(res))
platform_device_add_resources
platform_device_add_resources
dwc->dwc3
dwc
dwc
dwc3
res
res
ARRAY_SIZE(res)
ARRAY_SIZE
ARRAY_SIZE
res
res
if (ret) {		dev_err(dev, "couldn't add resources to dwc3 device\n");		goto err;	}
ret
ret
{		dev_err(dev, "couldn't add resources to dwc3 device\n");		goto err;	}
dev_err(dev, "couldn't add resources to dwc3 device\n");
dev_err(dev, "couldn't add resources to dwc3 device\n")
dev_err
dev_err
dev
dev
"couldn't add resources to dwc3 device\n"
goto err;
err
dwc->pci = pci;
dwc->pci = pci
dwc->pci
dwc
dwc
pci
pci
pci
dwc->dwc3->dev.parent = dev;
dwc->dwc3->dev.parent = dev
dwc->dwc3->dev.parent
dwc->dwc3->dev
dwc->dwc3
dwc
dwc
dwc3
dev
parent
dev
dev
ACPI_COMPANION_SET(&dwc->dwc3->dev, ACPI_COMPANION(dev));
ACPI_COMPANION_SET(&dwc->dwc3->dev, ACPI_COMPANION(dev))
ACPI_COMPANION_SET
ACPI_COMPANION_SET
&dwc->dwc3->dev
dwc->dwc3->dev
dwc->dwc3
dwc
dwc
dwc3
dev
ACPI_COMPANION(dev)
ACPI_COMPANION
ACPI_COMPANION
dev
dev
ret = platform_device_add_properties(dwc->dwc3, p);
ret = platform_device_add_properties(dwc->dwc3, p)
ret
ret
platform_device_add_properties(dwc->dwc3, p)
platform_device_add_properties
platform_device_add_properties
dwc->dwc3
dwc
dwc
dwc3
p
p
if (ret < 0)		return ret;
ret < 0
ret
ret
0
return ret;
ret
ret
ret = dwc3_pci_quirks(dwc);
ret = dwc3_pci_quirks(dwc)
ret
ret
dwc3_pci_quirks(dwc)
dwc3_pci_quirks
dwc3_pci_quirks
dwc
dwc
if (ret)		goto err;
ret
ret
goto err;
err
ret = platform_device_add(dwc->dwc3);
ret = platform_device_add(dwc->dwc3)
ret
ret
platform_device_add(dwc->dwc3)
platform_device_add
platform_device_add
dwc->dwc3
dwc
dwc
dwc3
if (ret) {		dev_err(dev, "failed to register dwc3 device\n");		goto err;	}
ret
ret
{		dev_err(dev, "failed to register dwc3 device\n");		goto err;	}
dev_err(dev, "failed to register dwc3 device\n");
dev_err(dev, "failed to register dwc3 device\n")
dev_err
dev_err
dev
dev
"failed to register dwc3 device\n"
goto err;
err
device_init_wakeup(dev, true);
device_init_wakeup(dev, true)
device_init_wakeup
device_init_wakeup
dev
dev
true
pci_set_drvdata(pci, dwc);
pci_set_drvdata(pci, dwc)
pci_set_drvdata
pci_set_drvdata
pci
pci
dwc
dwc
pm_runtime_put(dev);
pm_runtime_put(dev)
pm_runtime_put
pm_runtime_put
dev
dev
return 0;
0
err:	platform_device_put(dwc->dwc3);
err
platform_device_put(dwc->dwc3);
platform_device_put(dwc->dwc3)
platform_device_put
platform_device_put
dwc->dwc3
dwc
dwc
dwc3
return ret;
ret
ret
-----joern-----
(109,151,0)
(17,102,0)
(198,131,0)
(102,189,0)
(53,9,0)
(138,109,0)
(187,114,0)
(111,59,0)
(214,47,0)
(177,219,0)
(64,131,0)
(93,131,0)
(204,217,0)
(174,194,0)
(97,189,0)
(7,32,0)
(69,41,0)
(166,137,0)
(125,2,0)
(194,209,0)
(122,60,0)
(2,131,0)
(80,137,0)
(180,102,0)
(221,198,0)
(110,149,0)
(151,158,0)
(205,17,0)
(118,175,0)
(197,8,0)
(2,6,0)
(213,55,0)
(210,98,0)
(18,80,0)
(209,194,0)
(57,215,0)
(16,2,0)
(17,131,0)
(130,80,0)
(98,210,0)
(59,137,0)
(160,35,0)
(70,156,0)
(218,192,0)
(24,131,0)
(192,137,0)
(204,131,0)
(198,106,0)
(12,146,0)
(108,213,0)
(36,9,0)
(209,109,0)
(141,32,0)
(178,215,0)
(66,186,0)
(110,137,0)
(151,198,0)
(84,181,0)
(134,28,0)
(40,189,0)
(17,186,0)
(163,198,0)
(80,109,0)
(31,70,0)
(114,187,0)
(78,131,0)
(121,138,0)
(35,65,0)
(5,166,0)
(86,65,0)
(91,217,0)
(8,100,0)
(208,131,0)
(145,131,0)
(154,166,0)
(191,221,0)
(4,175,0)
(169,109,0)
(137,192,0)
(32,109,0)
(188,217,0)
(79,41,0)
(133,131,0)
(219,106,0)
(65,131,0)
(216,128,0)
(189,102,0)
(140,57,0)
(87,125,0)
(3,131,0)
(6,2,0)
(41,144,0)
(56,155,0)
(81,92,0)
(72,86,0)
(157,217,0)
(106,219,0)
(28,183,0)
(178,183,0)
(128,131,0)
(82,68,0)
(157,83,0)
(71,38,0)
(123,109,0)
(181,109,0)
(112,131,0)
(220,196,0)
(129,221,0)
(156,89,0)
(33,131,0)
(54,50,0)
(144,131,0)
(132,167,0)
(49,38,0)
(178,62,0)
(58,50,0)
(50,109,0)
(173,178,0)
(95,158,0)
(23,178,0)
(32,7,0)
(53,22,0)
(83,157,0)
(9,36,0)
(142,48,0)
(150,168,0)
(148,53,0)
(6,193,0)
(146,168,0)
(206,151,0)
(45,40,0)
(80,136,0)
(63,7,0)
(48,223,0)
(170,160,0)
(25,60,0)
(189,40,0)
(102,131,0)
(202,123,0)
(38,98,0)
(106,198,0)
(65,86,0)
(37,131,0)
(85,207,0)
(222,131,0)
(88,103,0)
(29,217,0)
(147,222,0)
(183,28,0)
(194,131,0)
(126,70,0)
(11,131,0)
(61,157,0)
(178,63,0)
(178,155,0)
(74,160,0)
(178,156,0)
(188,128,0)
(32,137,0)
(165,123,0)
(219,217,0)
(44,89,0)
(76,187,0)
(114,222,0)
(9,53,0)
(17,194,0)
(203,110,0)
(21,90,0)
(104,138,0)
(23,17,0)
(123,137,0)
(91,133,0)
(120,29,0)
(107,219,0)
(23,55,0)
(73,91,0)
(137,131,0)
(103,150,0)
(86,217,0)
(99,28,0)
(50,217,0)
(23,0,0)
(13,96,0)
(159,183,0)
(199,60,0)
(182,63,0)
(25,133,0)
(47,214,0)
(26,81,0)
(47,196,0)
(94,92,0)
(153,156,0)
(178,25,0)
(35,160,0)
(215,167,0)
(116,131,0)
(1,114,0)
(7,63,0)
(139,35,0)
(178,35,0)
(68,131,0)
(181,137,0)
(211,81,0)
(33,181,0)
(144,125,0)
(83,131,0)
(138,137,0)
(152,131,0)
(60,25,0)
(186,131,0)
(51,32,0)
(156,70,0)
(196,47,0)
(151,109,0)
(59,109,0)
(38,109,0)
(193,6,0)
(59,125,0)
(62,11,0)
(186,149,0)
(155,109,0)
(39,220,0)
(161,151,0)
(27,148,0)
(162,3,0)
(48,6,0)
(115,192,0)
(143,48,0)
(67,155,0)
(22,53,0)
(158,95,0)
(221,131,0)
(98,38,0)
(136,80,0)
(214,123,0)
(123,214,0)
(189,138,0)
(167,131,0)
(149,110,0)
(181,33,0)
(62,175,0)
(43,59,0)
(52,209,0)
(185,131,0)
(30,188,0)
(149,186,0)
(184,86,0)
(34,22,0)
(42,146,0)
(127,131,0)
(196,131,0)
(176,214,0)
(117,22,0)
(178,114,0)
(166,109,0)
(124,144,0)
(155,204,0)
(183,83,0)
(207,198,0)
(133,91,0)
(146,198,0)
(207,96,0)
(81,198,0)
(77,215,0)
(109,131,0)
(201,204,0)
(50,131,0)
(125,59,0)
(23,150,0)
(22,131,0)
(171,157,0)
(195,11,0)
(110,109,0)
(53,148,0)
(178,166,0)
(128,188,0)
(200,0,0)
(19,25,0)
(210,131,0)
(14,110,0)
(15,207,0)
(164,7,0)
(175,62,0)
(178,131,0)
(138,189,0)
(196,220,0)
(125,144,0)
(10,181,0)
(6,48,0)
(119,187,0)
(215,57,0)
(75,57,0)
(23,100,0)
(89,131,0)
(101,91,0)
(68,198,0)
(46,210,0)
(179,131,0)
(220,198,0)
(0,144,0)
(3,198,0)
(90,109,0)
(55,166,0)
(190,95,0)
(29,131,0)
(105,62,0)
(158,151,0)
(63,68,0)
(91,217,1)
(53,148,1)
(201,155,1)
(176,123,1)
(119,76,1)
(1,187,1)
(86,217,1)
(101,25,1)
(90,21,1)
(0,200,1)
(114,187,1)
(17,205,1)
(110,14,1)
(190,161,1)
(32,137,1)
(23,17,1)
(149,110,1)
(19,60,1)
(75,133,1)
(155,56,1)
(122,199,1)
(84,20,1)
(77,57,1)
(210,98,1)
(23,178,1)
(23,55,1)
(74,170,1)
(41,144,1)
(178,35,1)
(32,51,1)
(102,189,1)
(138,137,1)
(164,32,1)
(66,212,1)
(5,90,1)
(133,91,1)
(2,6,1)
(123,137,1)
(186,149,1)
(110,137,1)
(125,87,1)
(134,65,1)
(23,0,1)
(11,195,1)
(80,18,1)
(62,105,1)
(191,172,1)
(14,203,1)
(35,139,1)
(88,146,1)
(23,100,1)
(206,158,1)
(147,114,1)
(97,138,1)
(184,72,1)
(222,147,1)
(79,69,1)
(166,154,1)
(3,162,1)
(155,109,1)
(83,157,1)
(218,166,1)
(209,109,1)
(123,109,1)
(167,132,1)
(213,108,1)
(150,103,1)
(90,109,1)
(3,198,1)
(144,125,1)
(27,9,1)
(82,63,1)
(67,113,1)
(169,29,1)
(71,49,1)
(126,167,1)
(204,201,1)
(29,217,1)
(204,217,1)
(33,181,1)
(187,119,1)
(197,90,1)
(170,22,1)
(103,88,1)
(115,218,1)
(91,73,1)
(154,5,1)
(189,138,1)
(151,158,1)
(34,136,1)
(98,38,1)
(9,117,1)
(125,2,1)
(50,54,1)
(214,123,1)
(81,211,1)
(143,142,1)
(104,121,1)
(178,183,1)
(196,220,1)
(38,109,1)
(59,43,1)
(137,192,1)
(8,197,1)
(26,113,1)
(175,4,1)
(181,137,1)
(157,217,1)
(55,166,1)
(81,198,1)
(62,175,1)
(156,153,1)
(178,215,1)
(181,109,1)
(80,137,1)
(89,44,1)
(44,156,1)
(192,115,1)
(209,52,1)
(188,30,1)
(207,198,1)
(57,140,1)
(202,165,1)
(100,8,1)
(130,137,1)
(84,94,1)
(142,16,1)
(56,67,1)
(106,219,1)
(178,62,1)
(68,82,1)
(146,198,1)
(221,129,1)
(6,193,1)
(194,209,1)
(95,190,1)
(178,156,1)
(59,109,1)
(135,128,1)
(65,86,1)
(18,130,1)
(10,84,1)
(49,3,1)
(84,13,1)
(189,40,1)
(30,216,1)
(180,89,1)
(120,135,1)
(188,217,1)
(50,109,1)
(105,175,1)
(20,212,1)
(22,53,1)
(215,57,1)
(108,136,1)
(76,83,1)
(50,217,1)
(17,102,1)
(123,202,1)
(54,58,1)
(178,166,1)
(111,124,1)
(205,33,1)
(7,164,1)
(17,194,1)
(178,63,1)
(182,7,1)
(210,46,1)
(41,79,1)
(171,61,1)
(94,81,1)
(25,60,1)
(48,143,1)
(0,144,1)
(138,104,1)
(219,217,1)
(178,114,1)
(73,101,1)
(219,107,1)
(61,183,1)
(199,11,1)
(173,210,1)
(166,109,1)
(4,118,1)
(132,215,1)
(177,163,1)
(174,41,1)
(128,188,1)
(178,155,1)
(63,7,1)
(48,223,1)
(117,34,1)
(6,48,1)
(215,77,1)
(85,172,1)
(13,207,1)
(118,222,1)
(55,213,1)
(165,68,1)
(28,99,1)
(212,194,1)
(148,27,1)
(52,174,1)
(114,1,1)
(109,151,1)
(25,19,1)
(157,171,1)
(87,59,1)
(58,221,1)
(160,74,1)
(110,109,1)
(15,85,1)
(51,141,1)
(31,126,1)
(21,109,1)
(63,182,1)
(47,214,1)
(17,186,1)
(125,59,1)
(23,150,1)
(40,45,1)
(45,97,1)
(113,102,1)
(60,122,1)
(159,28,1)
(162,50,1)
(43,111,1)
(178,25,1)
(158,95,1)
(151,198,1)
(99,134,1)
(140,75,1)
(70,31,1)
(35,160,1)
(163,2,1)
(211,26,1)
(53,9,1)
(138,109,1)
(107,177,1)
(68,198,1)
(196,47,1)
(38,71,1)
(72,35,1)
(214,176,1)
(181,10,1)
(172,186,1)
(151,206,1)
(139,160,1)
(216,198,1)
(221,198,1)
(207,15,1)
(39,47,1)
(86,184,1)
(141,204,1)
(59,137,1)
(9,36,1)
(12,135,1)
(203,66,1)
(220,39,1)
(156,70,1)
(183,28,1)
(161,169,1)
(198,106,1)
(195,62,1)
(42,12,1)
(153,70,1)
(124,196,1)
(121,180,1)
(136,80,1)
(200,41,1)
(80,109,1)
(183,159,1)
(32,109,1)
(69,144,1)
(7,32,1)
(146,42,1)
(220,198,1)
(46,98,1)
(29,120,1)
(129,191,1)
(178,173,1)
(181,113,2)
(55,136,2)
(99,136,2)
(102,189,2)
(34,136,2)
(128,188,2)
(165,113,2)
(207,198,2)
(47,214,2)
(49,172,2)
(75,136,2)
(4,136,2)
(117,136,2)
(40,136,2)
(186,212,2)
(125,2,2)
(133,136,2)
(110,109,2)
(164,113,2)
(50,172,2)
(20,212,2)
(94,113,2)
(80,109,2)
(157,136,2)
(189,40,2)
(196,220,2)
(190,135,2)
(90,135,2)
(146,135,2)
(174,41,2)
(3,172,2)
(178,35,2)
(69,113,2)
(134,136,2)
(81,113,2)
(27,136,2)
(184,136,2)
(5,90,2)
(6,193,2)
(68,198,2)
(32,109,2)
(157,217,2)
(115,90,2)
(167,136,2)
(213,136,2)
(23,150,2)
(137,90,2)
(21,135,2)
(62,175,2)
(170,136,2)
(98,38,2)
(54,172,2)
(178,62,2)
(114,187,2)
(50,217,2)
(97,136,2)
(161,135,2)
(31,136,2)
(23,55,2)
(57,136,2)
(169,135,2)
(151,135,2)
(211,113,2)
(149,212,2)
(183,28,2)
(66,212,2)
(45,136,2)
(13,172,2)
(144,125,2)
(119,136,2)
(85,172,2)
(8,90,2)
(209,41,2)
(126,136,2)
(129,172,2)
(155,109,2)
(41,113,2)
(33,172,2)
(158,95,2)
(150,135,2)
(182,113,2)
(212,41,2)
(181,212,2)
(148,136,2)
(33,113,2)
(203,212,2)
(18,90,2)
(214,123,2)
(147,136,2)
(138,109,2)
(130,90,2)
(44,136,2)
(162,172,2)
(123,137,2)
(155,113,2)
(144,113,2)
(122,136,2)
(86,217,2)
(72,136,2)
(186,149,2)
(109,151,2)
(98,172,2)
(220,198,2)
(53,9,2)
(7,113,2)
(178,166,2)
(59,109,2)
(141,113,2)
(210,172,2)
(156,70,2)
(178,172,2)
(171,136,2)
(17,172,2)
(29,135,2)
(123,109,2)
(139,136,2)
(160,136,2)
(138,136,2)
(22,136,2)
(173,172,2)
(172,212,2)
(91,217,2)
(7,32,2)
(52,41,2)
(43,113,2)
(3,198,2)
(14,212,2)
(32,113,2)
(33,212,2)
(17,194,2)
(178,156,2)
(58,172,2)
(39,113,2)
(1,136,2)
(84,212,2)
(219,217,2)
(200,41,2)
(136,90,2)
(70,136,2)
(181,172,2)
(42,135,2)
(191,172,2)
(175,136,2)
(76,136,2)
(38,172,2)
(38,109,2)
(61,136,2)
(89,136,2)
(6,48,2)
(35,136,2)
(25,136,2)
(109,135,2)
(77,136,2)
(210,98,2)
(159,136,2)
(95,135,2)
(50,109,2)
(215,57,2)
(23,17,2)
(87,113,2)
(80,137,2)
(63,7,2)
(178,114,2)
(222,136,2)
(63,113,2)
(154,90,2)
(0,144,2)
(10,212,2)
(41,144,2)
(81,198,2)
(101,136,2)
(65,86,2)
(221,172,2)
(138,137,2)
(67,113,2)
(195,136,2)
(114,136,2)
(218,90,2)
(137,192,2)
(83,157,2)
(194,41,2)
(32,137,2)
(10,172,2)
(188,217,2)
(10,113,2)
(53,136,2)
(106,219,2)
(47,113,2)
(120,135,2)
(178,63,2)
(178,215,2)
(199,136,2)
(105,136,2)
(110,212,2)
(156,136,2)
(17,102,2)
(65,136,2)
(176,113,2)
(133,91,2)
(192,90,2)
(9,136,2)
(111,113,2)
(9,36,2)
(23,0,2)
(90,109,2)
(88,135,2)
(204,217,2)
(48,223,2)
(17,186,2)
(205,212,2)
(221,198,2)
(33,181,2)
(110,137,2)
(73,136,2)
(83,136,2)
(136,80,2)
(74,136,2)
(189,136,2)
(91,136,2)
(108,136,2)
(113,136,2)
(103,135,2)
(2,6,2)
(206,135,2)
(79,113,2)
(15,172,2)
(121,136,2)
(0,41,2)
(82,113,2)
(59,113,2)
(214,113,2)
(55,166,2)
(22,53,2)
(68,113,2)
(158,135,2)
(183,136,2)
(215,136,2)
(125,113,2)
(149,110,2)
(19,136,2)
(26,113,2)
(196,113,2)
(29,217,2)
(153,136,2)
(104,136,2)
(84,113,2)
(205,113,2)
(204,113,2)
(12,135,2)
(198,106,2)
(23,178,2)
(86,136,2)
(201,113,2)
(17,212,2)
(60,136,2)
(178,25,2)
(220,113,2)
(118,136,2)
(187,136,2)
(124,113,2)
(84,172,2)
(166,109,2)
(53,148,2)
(196,47,2)
(151,158,2)
(100,90,2)
(56,113,2)
(178,155,2)
(35,160,2)
(28,136,2)
(194,209,2)
(205,172,2)
(132,136,2)
(125,59,2)
(51,113,2)
(189,138,2)
(140,136,2)
(25,60,2)
(46,172,2)
(71,172,2)
(181,109,2)
(207,172,2)
(209,109,2)
(166,90,2)
(59,137,2)
(102,136,2)
(197,90,2)
(146,198,2)
(11,136,2)
(180,136,2)
(181,137,2)
(23,100,2)
(178,183,2)
(123,113,2)
(80,90,2)
(202,113,2)
(62,136,2)
(17,113,2)
(151,198,2)
-----------------------------------
(0,return ret;)
(1,name)
(2,*p = (struct property_entry *)
(3,pm_runtime_put(dev)
(4,0)
(5,dwc)
(6,(struct property_entry *)
(7,dwc->dwc3->dev)
(8,-ENOMEM)
(9,sizeof(struct resource)
(10,dwc3)
(11,res[0].flags\\t= IORESOURCE_MEM)
(12,dev)
(13,goto err;)
(14,dwc3)
(15,"failed to register dwc3 device\\n")
(16,p)
(17,return ret;)
(18,dwc3)
(19,start)
(20,goto err;)
(21,dwc)
(22,memset(res, 0x00, sizeof(struct resource)
(23,RET)
(24,dwc)
(25,res[1].start)
(26,dev)
(27,res)
(28,res[0])
(29,pci_set_master(pci)
(30,pci)
(31,1)
(32,dwc->dwc3)
(33,platform_device_put(dwc->dwc3)
(34,res)
(35,res[0].start)
(36,struct resource)
(37,if (!dwc)
(38,dwc->wakeup_work)
(39,dev)
(40,ARRAY_SIZE(res)
(41,ret < 0)
(42,"failed to enable pci device\\n")
(43,dwc3)
(44,IORESOURCE_IRQ)
(45,res)
(46,dwc3_pci_resume_work)
(47,&dwc->dwc3->dev)
(48,id->driver_data)
(49,dwc)
(50,pci_set_drvdata(pci, dwc)
(51,dwc3)
(52,dwc)
(53,sizeof(struct resource)
(54,dwc)
(55,return -ENOMEM;)
(56,pci)
(57,res[1])
(58,pci)
(59,dwc->dwc3)
(60,res[1])
(61,pci)
(62,res[0].flags)
(63,dwc->dwc3->dev.parent)
(64,dev)
(65,res[0].start\\t= pci_resource_start(pci, 0)
(66,ret)
(67,dwc)
(68,dwc->dwc3->dev.parent = dev)
(69,ret)
(70,res[1])
(71,wakeup_work)
(72,pci)
(73,irq)
(74,0)
(75,res)
(76,res)
(77,name)
(78,err:)
(79,0)
(80,dwc->dwc3)
(81,dev_err(dev, "couldn\'t add resources to dwc3 device\\n")
(82,dev)
(83,res[0].end\\t= pci_resource_end(pci, 0)
(84,dwc)
(85,dev)
(86,pci_resource_start(pci, 0)
(87,p)
(88,ENODEV)
(89,res[1].flags\\t= IORESOURCE_IRQ)
(90,!dwc)
(91,pci->irq)
(92,)
(93,if (ret)
(94,goto err;)
(95,*dwc)
(96,)
(97,res)
(98,&dwc->wakeup_work)
(99,0)
(100,return -ENOMEM;)
(101,pci)
(102,ret = platform_device_add_resources(dwc->dwc3, res, ARRAY_SIZE(res)
(103,-ENODEV)
(104,dwc3)
(105,flags)
(106,&pci->dev)
(107,dev)
(108,ENOMEM)
(109,dwc = devm_kzalloc(dev, sizeof(*dwc)
(110,dwc->dwc3)
(111,dwc)
(112,if (ret < 0)
(113,ret)
(114,res[0].name)
(115,PLATFORM_DEVID_AUTO)
(116,p)
(117,0x00)
(118,res)
(119,0)
(120,pci)
(121,dwc)
(122,1)
(123,dwc->dwc3)
(124,ret)
(125,platform_device_add_properties(dwc->dwc3, p)
(126,res)
(127,if (ret)
(128,ret = pcim_enable_device(pci)
(129,true)
(130,dwc)
(131,)
(132,"dwc_usb3")
(133,res[1].start\\t= pci->irq)
(134,res)
(135,ret)
(136,!dwc->dwc3)
(137,dwc->dwc3 = platform_device_alloc("dwc3", PLATFORM_DEVID_AUTO)
(138,dwc->dwc3)
(139,start)
(140,1)
(141,dwc)
(142,id)
(143,driver_data)
(144,ret = platform_device_add_properties(dwc->dwc3, p)
(145,ret)
(146,dev_err(dev, "failed to enable pci device\\n")
(147,"dwc_usb3")
(148,ARRAY_SIZE(res)
(149,platform_device_add(dwc->dwc3)
(150,return -ENODEV;)
(151,devm_kzalloc(dev, sizeof(*dwc)
(152,if (!dwc->dwc3)
(153,flags)
(154,dwc3)
(155,dwc->pci)
(156,res[1].flags)
(157,pci_resource_end(pci, 0)
(158,sizeof(*dwc)
(159,end)
(160,res[0])
(161,dev)
(162,dev)
(163,dev)
(164,dev)
(165,dwc)
(166,dwc->dwc3)
(167,res[1].name\\t= "dwc_usb3")
(168,)
(169,dwc)
(170,res)
(171,0)
(172,ret)
(173,0)
(174,ret)
(175,res[0])
(176,dev)
(177,pci)
(178,return 0;)
(179,if (ret)
(180,ret)
(181,dwc->dwc3)
(182,parent)
(183,res[0].end)
(184,0)
(185,res)
(186,ret = platform_device_add(dwc->dwc3)
(187,res[0])
(188,pcim_enable_device(pci)
(189,platform_device_add_resources(dwc->dwc3, res, ARRAY_SIZE(res)
(190,dwc)
(191,dev)
(192,platform_device_alloc("dwc3", PLATFORM_DEVID_AUTO)
(193,struct property_entry *)
(194,ret = dwc3_pci_quirks(dwc)
(195,IORESOURCE_MEM)
(196,ACPI_COMPANION_SET(&dwc->dwc3->dev, ACPI_COMPANION(dev)
(197,ENOMEM)
(198,*dev = &pci->dev)
(199,res)
(200,ret)
(201,pci)
(202,dwc3)
(203,dwc)
(204,dwc->pci = pci)
(205,ret)
(206,GFP_KERNEL)
(207,dev_err(dev, "failed to register dwc3 device\\n")
(208,if (ret)
(209,dwc3_pci_quirks(dwc)
(210,INIT_WORK(&dwc->wakeup_work, dwc3_pci_resume_work)
(211,"couldn\'t add resources to dwc3 device\\n")
(212,ret)
(213,-ENOMEM)
(214,dwc->dwc3->dev)
(215,res[1].name)
(216,ret)
(217,struct pci_dev *pci)
(218,"dwc3")
(219,pci->dev)
(220,ACPI_COMPANION(dev)
(221,device_init_wakeup(dev, true)
(222,res[0].name\\t= "dwc_usb3")
(223,const struct pci_device_id *id)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^