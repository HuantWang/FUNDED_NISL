-----label-----
1
-----code-----
static int
uec_set_ringparam(struct net_device *netdev,
                    struct ethtool_ringparam *ring)
{
	struct ucc_geth_private *ugeth = netdev_priv(netdev);
	struct ucc_geth_info *ug_info = ugeth->ug_info;
	int queue = 0, ret = 0;

	if (ring->rx_pending < UCC_GETH_RX_BD_RING_SIZE_MIN) {
		netdev_info(netdev, "RxBD ring size must be no smaller than %d\n",
			    UCC_GETH_RX_BD_RING_SIZE_MIN);
		return -EINVAL;
	}
	if (ring->rx_pending % UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT) {
		netdev_info(netdev, "RxBD ring size must be multiple of %d\n",
			    UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT);
		return -EINVAL;
	}
	if (ring->tx_pending < UCC_GETH_TX_BD_RING_SIZE_MIN) {
		netdev_info(netdev, "TxBD ring size must be no smaller than %d\n",
			    UCC_GETH_TX_BD_RING_SIZE_MIN);
		return -EINVAL;
	}

	ug_info->bdRingLenRx[queue] = ring->rx_pending;
	ug_info->bdRingLenTx[queue] = ring->tx_pending;

	if (netif_running(netdev)) {
		/* FIXME: restart automatically */
		netdev_info(netdev, "Please re-open the interface\n");
	}

	return ret;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
17,20
17,21
17,22
17,23
17,24
17,25
17,26
17,27
18,19
19,20
19,21
20,21
22,23
22,24
22,25
25,26
26,27
26,28
27,28
29,30
31,32
32,33
32,34
33,34
35,36
35,37
35,38
38,39
39,40
39,41
40,41
43,44
44,45
44,46
44,47
46,47
46,48
48,49
50,51
50,52
52,53
54,55
54,56
55,56
55,57
56,57
56,58
57,58
60,61
62,63
62,64
63,64
64,65
64,66
64,67
64,68
65,66
67,68
70,71
72,73
73,74
74,75
76,77
76,78
77,78
77,79
78,79
78,80
79,80
82,83
84,85
84,86
85,86
86,87
86,88
86,89
86,90
87,88
89,90
92,93
94,95
95,96
96,97
98,99
98,100
99,100
99,101
100,101
100,102
101,102
104,105
106,107
106,108
107,108
108,109
108,110
108,111
108,112
109,110
111,112
114,115
116,117
117,118
118,119
120,121
121,122
121,123
122,123
122,124
123,124
123,125
124,125
127,128
129,130
129,131
130,131
133,134
134,135
134,136
135,136
135,137
136,137
136,138
137,138
140,141
142,143
142,144
143,144
146,147
146,148
147,148
147,149
148,149
150,151
152,153
153,154
154,155
154,156
154,157
155,156
157,158
160,161
161,162
-----nextToken-----
2,4,7,9,10,13,15,16,21,23,24,28,30,34,36,37,41,42,45,47,49,51,53,58,59,61,66,68,69,71,75,80,81,83,88,90,91,93,97,102,103,105,110,112,113,115,119,125,126,128,131,132,138,139,141,144,145,149,151,156,158,159,162
-----computeFrom-----
55,56
55,57
77,78
77,79
99,100
99,101
121,122
121,123
134,135
134,136
-----guardedBy-----
61,71
83,93
105,115
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;LiteralExpression;Declarator;Name;EqualsInitializer;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;ReturnStatement;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static intuec_set_ringparam(struct net_device *netdev,                    struct ethtool_ringparam *ring){	struct ucc_geth_private *ugeth = netdev_priv(netdev);	struct ucc_geth_info *ug_info = ugeth->ug_info;	int queue = 0, ret = 0;	if (ring->rx_pending < UCC_GETH_RX_BD_RING_SIZE_MIN) {		netdev_info(netdev, "RxBD ring size must be no smaller than %d\n",			    UCC_GETH_RX_BD_RING_SIZE_MIN);		return -EINVAL;	}	if (ring->rx_pending % UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT) {		netdev_info(netdev, "RxBD ring size must be multiple of %d\n",			    UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT);		return -EINVAL;	}	if (ring->tx_pending < UCC_GETH_TX_BD_RING_SIZE_MIN) {		netdev_info(netdev, "TxBD ring size must be no smaller than %d\n",			    UCC_GETH_TX_BD_RING_SIZE_MIN);		return -EINVAL;	}	ug_info->bdRingLenRx[queue] = ring->rx_pending;	ug_info->bdRingLenTx[queue] = ring->tx_pending;	if (netif_running(netdev)) {		/* FIXME: restart automatically */		netdev_info(netdev, "Please re-open the interface\n");	}	return ret;}
static int
uec_set_ringparam(struct net_device *netdev,                    struct ethtool_ringparam *ring)
uec_set_ringparam
struct net_device *netdev
struct net_device
net_device
*netdev
*
netdev
struct ethtool_ringparam *ring
struct ethtool_ringparam
ethtool_ringparam
*ring
*
ring
{	struct ucc_geth_private *ugeth = netdev_priv(netdev);	struct ucc_geth_info *ug_info = ugeth->ug_info;	int queue = 0, ret = 0;	if (ring->rx_pending < UCC_GETH_RX_BD_RING_SIZE_MIN) {		netdev_info(netdev, "RxBD ring size must be no smaller than %d\n",			    UCC_GETH_RX_BD_RING_SIZE_MIN);		return -EINVAL;	}	if (ring->rx_pending % UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT) {		netdev_info(netdev, "RxBD ring size must be multiple of %d\n",			    UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT);		return -EINVAL;	}	if (ring->tx_pending < UCC_GETH_TX_BD_RING_SIZE_MIN) {		netdev_info(netdev, "TxBD ring size must be no smaller than %d\n",			    UCC_GETH_TX_BD_RING_SIZE_MIN);		return -EINVAL;	}	ug_info->bdRingLenRx[queue] = ring->rx_pending;	ug_info->bdRingLenTx[queue] = ring->tx_pending;	if (netif_running(netdev)) {		/* FIXME: restart automatically */		netdev_info(netdev, "Please re-open the interface\n");	}	return ret;}
struct ucc_geth_private *ugeth = netdev_priv(netdev);
struct ucc_geth_private *ugeth = netdev_priv(netdev);
struct ucc_geth_private
ucc_geth_private
*ugeth = netdev_priv(netdev)
*
ugeth
= netdev_priv(netdev)
netdev_priv(netdev)
netdev_priv
netdev_priv
netdev
netdev
struct ucc_geth_info *ug_info = ugeth->ug_info;
struct ucc_geth_info *ug_info = ugeth->ug_info;
struct ucc_geth_info
ucc_geth_info
*ug_info = ugeth->ug_info
*
ug_info
= ugeth->ug_info
ugeth->ug_info
ugeth
ugeth
ug_info
int queue = 0, ret = 0;
int queue = 0, ret = 0;
int
queue = 0
queue
= 0
0
ret = 0
ret
= 0
0
if (ring->rx_pending < UCC_GETH_RX_BD_RING_SIZE_MIN) {		netdev_info(netdev, "RxBD ring size must be no smaller than %d\n",			    UCC_GETH_RX_BD_RING_SIZE_MIN);		return -EINVAL;	}
ring->rx_pending < UCC_GETH_RX_BD_RING_SIZE_MIN
ring->rx_pending
ring
ring
rx_pending
UCC_GETH_RX_BD_RING_SIZE_MIN
UCC_GETH_RX_BD_RING_SIZE_MIN
{		netdev_info(netdev, "RxBD ring size must be no smaller than %d\n",			    UCC_GETH_RX_BD_RING_SIZE_MIN);		return -EINVAL;	}
netdev_info(netdev, "RxBD ring size must be no smaller than %d\n",			    UCC_GETH_RX_BD_RING_SIZE_MIN);
netdev_info(netdev, "RxBD ring size must be no smaller than %d\n",			    UCC_GETH_RX_BD_RING_SIZE_MIN)
netdev_info
netdev_info
netdev
netdev
"RxBD ring size must be no smaller than %d\n"
UCC_GETH_RX_BD_RING_SIZE_MIN
UCC_GETH_RX_BD_RING_SIZE_MIN
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (ring->rx_pending % UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT) {		netdev_info(netdev, "RxBD ring size must be multiple of %d\n",			    UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT);		return -EINVAL;	}
ring->rx_pending % UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT
ring->rx_pending
ring
ring
rx_pending
UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT
UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT
{		netdev_info(netdev, "RxBD ring size must be multiple of %d\n",			    UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT);		return -EINVAL;	}
netdev_info(netdev, "RxBD ring size must be multiple of %d\n",			    UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT);
netdev_info(netdev, "RxBD ring size must be multiple of %d\n",			    UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT)
netdev_info
netdev_info
netdev
netdev
"RxBD ring size must be multiple of %d\n"
UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT
UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT
return -EINVAL;
-EINVAL
EINVAL
EINVAL
if (ring->tx_pending < UCC_GETH_TX_BD_RING_SIZE_MIN) {		netdev_info(netdev, "TxBD ring size must be no smaller than %d\n",			    UCC_GETH_TX_BD_RING_SIZE_MIN);		return -EINVAL;	}
ring->tx_pending < UCC_GETH_TX_BD_RING_SIZE_MIN
ring->tx_pending
ring
ring
tx_pending
UCC_GETH_TX_BD_RING_SIZE_MIN
UCC_GETH_TX_BD_RING_SIZE_MIN
{		netdev_info(netdev, "TxBD ring size must be no smaller than %d\n",			    UCC_GETH_TX_BD_RING_SIZE_MIN);		return -EINVAL;	}
netdev_info(netdev, "TxBD ring size must be no smaller than %d\n",			    UCC_GETH_TX_BD_RING_SIZE_MIN);
netdev_info(netdev, "TxBD ring size must be no smaller than %d\n",			    UCC_GETH_TX_BD_RING_SIZE_MIN)
netdev_info
netdev_info
netdev
netdev
"TxBD ring size must be no smaller than %d\n"
UCC_GETH_TX_BD_RING_SIZE_MIN
UCC_GETH_TX_BD_RING_SIZE_MIN
return -EINVAL;
-EINVAL
EINVAL
EINVAL
ug_info->bdRingLenRx[queue] = ring->rx_pending;
ug_info->bdRingLenRx[queue] = ring->rx_pending
ug_info->bdRingLenRx[queue]
ug_info->bdRingLenRx
ug_info
ug_info
bdRingLenRx
queue
queue
ring->rx_pending
ring
ring
rx_pending
ug_info->bdRingLenTx[queue] = ring->tx_pending;
ug_info->bdRingLenTx[queue] = ring->tx_pending
ug_info->bdRingLenTx[queue]
ug_info->bdRingLenTx
ug_info
ug_info
bdRingLenTx
queue
queue
ring->tx_pending
ring
ring
tx_pending
if (netif_running(netdev)) {		/* FIXME: restart automatically */		netdev_info(netdev, "Please re-open the interface\n");	}
netif_running(netdev)
netif_running
netif_running
netdev
netdev
{		/* FIXME: restart automatically */		netdev_info(netdev, "Please re-open the interface\n");	}
netdev_info(netdev, "Please re-open the interface\n");
netdev_info(netdev, "Please re-open the interface\n")
netdev_info
netdev_info
netdev
netdev
"Please re-open the interface\n"
return ret;
ret
ret
-----joern-----
(44,6,0)
(36,65,0)
(46,65,0)
(74,64,0)
(85,5,0)
(22,86,0)
(77,88,0)
(5,39,0)
(72,58,0)
(1,74,0)
(31,69,0)
(87,84,0)
(90,51,0)
(52,8,0)
(33,71,0)
(64,13,0)
(61,73,0)
(47,6,0)
(29,8,0)
(49,78,0)
(55,71,0)
(88,69,0)
(71,69,0)
(52,46,0)
(59,72,0)
(14,36,0)
(2,88,0)
(33,15,0)
(81,36,0)
(12,87,0)
(20,77,0)
(62,6,0)
(26,74,0)
(18,78,0)
(83,69,0)
(53,66,0)
(78,21,0)
(25,15,0)
(11,3,0)
(50,56,0)
(7,69,0)
(64,69,0)
(60,42,0)
(5,69,0)
(24,29,0)
(28,41,0)
(32,55,0)
(45,64,0)
(51,79,0)
(19,11,0)
(52,5,0)
(38,39,0)
(79,51,0)
(35,69,0)
(6,4,0)
(42,91,0)
(76,86,0)
(16,22,0)
(43,13,0)
(36,4,0)
(42,4,0)
(10,55,0)
(23,87,0)
(51,3,0)
(63,19,0)
(41,66,0)
(84,87,0)
(57,69,0)
(52,72,0)
(41,74,0)
(68,39,0)
(77,4,0)
(15,64,0)
(9,86,0)
(71,55,0)
(15,33,0)
(33,66,0)
(11,19,0)
(0,11,0)
(55,3,0)
(39,69,0)
(86,3,0)
(37,51,0)
(56,46,0)
(41,84,0)
(66,69,0)
(67,36,0)
(88,77,0)
(86,22,0)
(82,69,0)
(54,78,0)
(74,41,0)
(13,64,0)
(27,33,0)
(70,59,0)
(80,15,0)
(17,69,0)
(84,69,0)
(6,58,0)
(40,13,0)
(34,66,0)
(75,11,0)
(89,69,0)
(73,4,0)
(87,3,0)
(48,79,0)
(30,42,0)
(13,88,0)
(78,4,0)
(8,21,0)
(56,50,1)
(73,61,1)
(25,80,1)
(77,4,1)
(5,85,1)
(74,64,1)
(51,3,1)
(13,88,1)
(39,68,1)
(86,9,1)
(5,39,1)
(38,66,1)
(55,3,1)
(54,79,1)
(63,11,1)
(52,8,1)
(79,48,1)
(50,36,1)
(34,53,1)
(0,79,1)
(84,87,1)
(30,60,1)
(11,3,1)
(53,64,1)
(10,33,1)
(74,1,1)
(42,4,1)
(51,90,1)
(70,6,1)
(40,43,1)
(87,3,1)
(23,12,1)
(55,32,1)
(48,51,1)
(77,20,1)
(22,86,1)
(59,70,1)
(66,34,1)
(13,40,1)
(52,72,1)
(44,19,1)
(76,19,1)
(33,66,1)
(15,25,1)
(15,64,1)
(78,49,1)
(86,3,1)
(72,59,1)
(16,86,1)
(52,5,1)
(61,84,1)
(14,67,1)
(37,39,1)
(1,26,1)
(80,22,1)
(6,47,1)
(22,16,1)
(32,10,1)
(81,14,1)
(11,75,1)
(26,71,1)
(18,54,1)
(33,15,1)
(90,37,1)
(75,0,1)
(73,4,1)
(88,77,1)
(36,4,1)
(52,46,1)
(36,81,1)
(49,18,1)
(46,56,1)
(85,42,1)
(19,11,1)
(41,28,1)
(19,63,1)
(67,22,1)
(47,62,1)
(71,55,1)
(29,24,1)
(62,44,1)
(6,4,1)
(33,27,1)
(85,73,1)
(20,2,1)
(78,4,1)
(68,38,1)
(12,41,1)
(79,51,1)
(87,23,1)
(43,45,1)
(45,88,1)
(60,73,1)
(64,13,1)
(28,74,1)
(27,15,1)
(9,76,1)
(8,29,1)
(24,78,1)
(42,30,1)
(41,74,1)
(41,66,1)
(28,22,2)
(41,74,2)
(71,55,2)
(54,79,2)
(75,79,2)
(6,19,2)
(85,22,2)
(36,4,2)
(70,19,2)
(52,72,2)
(56,22,2)
(33,15,2)
(81,22,2)
(63,79,2)
(86,3,2)
(12,22,2)
(84,87,2)
(5,22,2)
(33,22,2)
(16,19,2)
(0,79,2)
(52,46,2)
(84,22,2)
(86,19,2)
(87,3,2)
(24,79,2)
(30,73,2)
(10,22,2)
(42,73,2)
(42,4,2)
(67,22,2)
(41,22,2)
(77,4,2)
(47,19,2)
(8,79,2)
(15,22,2)
(49,79,2)
(59,19,2)
(32,22,2)
(6,4,2)
(78,79,2)
(55,22,2)
(50,22,2)
(55,3,2)
(29,79,2)
(52,8,2)
(74,64,2)
(9,19,2)
(76,19,2)
(22,19,2)
(64,13,2)
(26,22,2)
(60,73,2)
(33,66,2)
(44,19,2)
(87,22,2)
(19,11,2)
(23,22,2)
(14,22,2)
(80,22,2)
(13,88,2)
(74,22,2)
(61,22,2)
(1,22,2)
(18,79,2)
(46,22,2)
(11,3,2)
(41,66,2)
(15,64,2)
(72,19,2)
(5,39,2)
(62,19,2)
(36,22,2)
(27,22,2)
(25,22,2)
(73,4,2)
(78,4,2)
(88,77,2)
(73,22,2)
(11,79,2)
(19,79,2)
(71,22,2)
(79,51,2)
(51,3,2)
(52,5,2)
(22,86,2)
-----------------------------------
(0,ring)
(1,bdRingLenTx)
(2,ugeth)
(3,struct ethtool_ringparam *ring)
(4,struct net_device *netdev)
(5,return ret;)
(6,netdev_info(netdev, "RxBD ring size must be multiple of %d\\n",\n\\n\\t\\t\\t    UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT)
(7,if (netif_running(netdev)
(8,return -EINVAL;)
(9,tx_pending)
(10,ring)
(11,ring->rx_pending)
(12,ring)
(13,ugeth->ug_info)
(14,"TxBD ring size must be no smaller than %d\\n")
(15,ug_info->bdRingLenRx)
(16,UCC_GETH_TX_BD_RING_SIZE_MIN)
(17,if (ring->rx_pending % UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT)
(18,"RxBD ring size must be no smaller than %d\\n")
(19,ring->rx_pending % UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT)
(20,netdev)
(21,)
(22,ring->tx_pending < UCC_GETH_TX_BD_RING_SIZE_MIN)
(23,tx_pending)
(24,EINVAL)
(25,bdRingLenRx)
(26,ug_info)
(27,queue)
(28,queue)
(29,-EINVAL)
(30,"Please re-open the interface\\n")
(31,queue)
(32,rx_pending)
(33,ug_info->bdRingLenRx[queue])
(34,0)
(35,if (ring->tx_pending < UCC_GETH_TX_BD_RING_SIZE_MIN)
(36,netdev_info(netdev, "TxBD ring size must be no smaller than %d\\n",\n\\n\\t\\t\\t    UCC_GETH_TX_BD_RING_SIZE_MIN)
(37,ring)
(38,ret)
(39,ret = 0)
(40,ug_info)
(41,ug_info->bdRingLenTx[queue])
(42,netdev_info(netdev, "Please re-open the interface\\n")
(43,ugeth)
(44,netdev)
(45,ug_info)
(46,return -EINVAL;)
(47,UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT)
(48,UCC_GETH_RX_BD_RING_SIZE_MIN)
(49,UCC_GETH_RX_BD_RING_SIZE_MIN)
(50,EINVAL)
(51,ring->rx_pending)
(52,RET)
(53,queue)
(54,netdev)
(55,ring->rx_pending)
(56,-EINVAL)
(57,if (ring->rx_pending < UCC_GETH_RX_BD_RING_SIZE_MIN)
(58,)
(59,-EINVAL)
(60,netdev)
(61,netdev)
(62,"RxBD ring size must be multiple of %d\\n")
(63,UCC_GETH_RX_BD_RING_SIZE_ALIGNMENT)
(64,*ug_info = ugeth->ug_info)
(65,)
(66,queue = 0)
(67,netdev)
(68,0)
(69,)
(70,EINVAL)
(71,ug_info->bdRingLenRx[queue] = ring->rx_pending)
(72,return -EINVAL;)
(73,netif_running(netdev)
(74,ug_info->bdRingLenTx)
(75,rx_pending)
(76,ring)
(77,netdev_priv(netdev)
(78,netdev_info(netdev, "RxBD ring size must be no smaller than %d\\n",\n\\n\\t\\t\\t    UCC_GETH_RX_BD_RING_SIZE_MIN)
(79,ring->rx_pending < UCC_GETH_RX_BD_RING_SIZE_MIN)
(80,ug_info)
(81,UCC_GETH_TX_BD_RING_SIZE_MIN)
(82,ret)
(83,ug_info)
(84,ug_info->bdRingLenTx[queue] = ring->tx_pending)
(85,ret)
(86,ring->tx_pending)
(87,ring->tx_pending)
(88,*ugeth = netdev_priv(netdev)
(89,ugeth)
(90,rx_pending)
(91,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^