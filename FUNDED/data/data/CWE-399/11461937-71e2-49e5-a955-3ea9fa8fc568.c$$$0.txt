-----label-----
1
-----code-----
static void pci_set_bus_msi_domain(struct pci_bus *bus)
{
	struct irq_domain *d;

	/*
	 * Either bus is the root, and we must obtain it from the
	 * firmware, or we inherit it from the bridge device.
	 */
	if (pci_is_root_bus(bus))
		d = pci_host_bridge_msi_domain(bus);
	else
		d = dev_get_msi_domain(&bus->self->dev);

	dev_set_msi_domain(&bus->dev, d);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
12,13
13,14
13,15
14,15
16,17
16,18
19,20
19,21
19,22
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
30,31
32,33
34,35
35,36
35,37
36,37
38,39
38,40
39,40
41,42
42,43
42,44
43,44
43,45
44,45
48,49
49,50
49,51
49,52
50,51
52,53
53,54
53,55
54,55
57,58
-----nextToken-----
2,4,7,9,10,15,17,18,22,24,28,31,33,37,40,45,46,47,51,55,56,58
-----computeFrom-----
26,27
26,28
35,36
35,37
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;
-----ast_node-----
static void pci_set_bus_msi_domain(struct pci_bus *bus){	struct irq_domain *d;	/*	 * Either bus is the root, and we must obtain it from the	 * firmware, or we inherit it from the bridge device.	 */	if (pci_is_root_bus(bus))		d = pci_host_bridge_msi_domain(bus);	else		d = dev_get_msi_domain(&bus->self->dev);	dev_set_msi_domain(&bus->dev, d);}
static void
pci_set_bus_msi_domain(struct pci_bus *bus)
pci_set_bus_msi_domain
struct pci_bus *bus
struct pci_bus
pci_bus
*bus
*
bus
{	struct irq_domain *d;	/*	 * Either bus is the root, and we must obtain it from the	 * firmware, or we inherit it from the bridge device.	 */	if (pci_is_root_bus(bus))		d = pci_host_bridge_msi_domain(bus);	else		d = dev_get_msi_domain(&bus->self->dev);	dev_set_msi_domain(&bus->dev, d);}
struct irq_domain *d;
struct irq_domain *d;
struct irq_domain
irq_domain
*d
*
d
if (pci_is_root_bus(bus))		d = pci_host_bridge_msi_domain(bus);	else		d = dev_get_msi_domain(&bus->self->dev);
pci_is_root_bus(bus)
pci_is_root_bus
pci_is_root_bus
bus
bus
d = pci_host_bridge_msi_domain(bus);
d = pci_host_bridge_msi_domain(bus)
d
d
pci_host_bridge_msi_domain(bus)
pci_host_bridge_msi_domain
pci_host_bridge_msi_domain
bus
bus
d = dev_get_msi_domain(&bus->self->dev);
d = dev_get_msi_domain(&bus->self->dev)
d
d
dev_get_msi_domain(&bus->self->dev)
dev_get_msi_domain
dev_get_msi_domain
&bus->self->dev
bus->self->dev
bus->self
bus
bus
self
dev
dev_set_msi_domain(&bus->dev, d);
dev_set_msi_domain(&bus->dev, d)
dev_set_msi_domain
dev_set_msi_domain
&bus->dev
bus->dev
bus
bus
dev
d
d
-----joern-----
(14,5,0)
(2,3,0)
(18,4,0)
(1,14,0)
(13,20,0)
(4,19,0)
(0,20,0)
(10,7,0)
(18,3,0)
(24,14,0)
(14,20,0)
(8,25,0)
(3,18,0)
(21,19,0)
(4,18,0)
(19,4,0)
(22,18,0)
(20,0,0)
(0,25,0)
(14,24,0)
(7,25,0)
(23,5,0)
(6,8,0)
(9,0,0)
(7,24,0)
(12,5,0)
(24,7,0)
(14,21,0)
(17,21,0)
(3,25,0)
(16,7,0)
(19,21,0)
(15,3,0)
(11,14,1)
(3,25,1)
(7,25,1)
(13,8,1)
(18,22,1)
(0,9,1)
(4,18,1)
(18,3,1)
(1,24,1)
(19,4,1)
(8,25,1)
(14,21,1)
(8,6,1)
(2,15,1)
(14,24,1)
(3,2,1)
(17,8,1)
(20,0,1)
(14,20,1)
(10,16,1)
(16,20,1)
(7,10,1)
(22,3,1)
(24,7,1)
(21,19,1)
(16,21,1)
(14,1,1)
(9,13,1)
(15,17,1)
(0,25,1)
(4,18,2)
(13,8,2)
(19,8,2)
(2,8,2)
(9,8,2)
(18,8,2)
(24,7,2)
(20,8,2)
(7,25,2)
(18,3,2)
(4,8,2)
(3,25,2)
(0,8,2)
(15,8,2)
(3,8,2)
(21,8,2)
(17,8,2)
(14,20,2)
(14,21,2)
(20,0,2)
(21,19,2)
(0,25,2)
(8,25,2)
(22,8,2)
(14,24,2)
(19,4,2)
-----------------------------------
(0,pci_host_bridge_msi_domain(bus)
(1,d)
(2,self)
(3,bus->self)
(4,&bus->self->dev)
(5,)
(6,bus)
(7,bus->dev)
(8,pci_is_root_bus(bus)
(9,bus)
(10,dev)
(11,RET)
(12,d)
(13,d)
(14,dev_set_msi_domain(&bus->dev, d)
(15,bus)
(16,bus)
(17,d)
(18,bus->self->dev)
(19,dev_get_msi_domain(&bus->self->dev)
(20,d = pci_host_bridge_msi_domain(bus)
(21,d = dev_get_msi_domain(&bus->self->dev)
(22,dev)
(23,if (pci_is_root_bus(bus)
(24,&bus->dev)
(25,struct pci_bus *bus)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^