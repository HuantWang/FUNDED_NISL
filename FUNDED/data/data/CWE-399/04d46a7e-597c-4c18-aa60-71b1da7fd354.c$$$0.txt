-----label-----
1
-----code-----
void flush_cache_range(struct vm_area_struct *vma,
		unsigned long start, unsigned long end)
{
	BUG_ON(!vma->vm_mm->context);

	/* Flush the TLB to avoid speculation if coherency is required. */
	if (parisc_requires_coherency())
		flush_tlb_range(vma, start, end);

	if ((end - start) >= parisc_cache_flush_threshold) {
		flush_cache_all();
		return;
	}

	BUG_ON(vma->vm_mm->context != mfsp(3));

	flush_user_dcache_range_asm(start, end);
	if (vma->vm_flags & VM_EXEC)
		flush_user_icache_range_asm(start, end);
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
13,14
15,16
15,17
17,18
19,20
19,21
19,22
19,23
19,24
19,25
20,21
21,22
21,23
22,23
24,25
25,26
25,27
26,27
26,28
27,28
31,32
31,33
32,33
33,34
35,36
36,37
36,38
36,39
36,40
37,38
39,40
41,42
43,44
45,46
45,47
46,47
46,48
47,48
48,49
48,50
49,50
51,52
53,54
55,56
55,57
56,57
57,58
58,59
61,62
62,63
62,64
63,64
65,66
65,67
66,67
66,68
67,68
67,69
68,69
72,73
72,74
73,74
76,77
77,78
77,79
77,80
78,79
80,81
82,83
84,85
84,86
85,86
85,87
86,87
86,88
87,88
90,91
92,93
93,94
93,95
93,96
94,95
96,97
98,99
-----nextToken-----
2,4,7,9,10,12,14,16,18,23,28,29,30,34,38,40,42,44,50,52,54,59,60,64,69,70,71,74,75,79,81,83,88,89,91,95,97,99
-----computeFrom-----
46,47
46,48
48,49
48,50
65,66
65,67
85,86
85,87
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ReturnStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void flush_cache_range(struct vm_area_struct *vma,		unsigned long start, unsigned long end){	BUG_ON(!vma->vm_mm->context);	/* Flush the TLB to avoid speculation if coherency is required. */	if (parisc_requires_coherency())		flush_tlb_range(vma, start, end);	if ((end - start) >= parisc_cache_flush_threshold) {		flush_cache_all();		return;	}	BUG_ON(vma->vm_mm->context != mfsp(3));	flush_user_dcache_range_asm(start, end);	if (vma->vm_flags & VM_EXEC)		flush_user_icache_range_asm(start, end);}
void
flush_cache_range(struct vm_area_struct *vma,		unsigned long start, unsigned long end)
flush_cache_range
struct vm_area_struct *vma
struct vm_area_struct
vm_area_struct
*vma
*
vma
unsigned long start
unsigned long
start
start
unsigned long end
unsigned long
end
end
{	BUG_ON(!vma->vm_mm->context);	/* Flush the TLB to avoid speculation if coherency is required. */	if (parisc_requires_coherency())		flush_tlb_range(vma, start, end);	if ((end - start) >= parisc_cache_flush_threshold) {		flush_cache_all();		return;	}	BUG_ON(vma->vm_mm->context != mfsp(3));	flush_user_dcache_range_asm(start, end);	if (vma->vm_flags & VM_EXEC)		flush_user_icache_range_asm(start, end);}
BUG_ON(!vma->vm_mm->context);
BUG_ON(!vma->vm_mm->context)
BUG_ON
BUG_ON
!vma->vm_mm->context
vma->vm_mm->context
vma->vm_mm
vma
vma
vm_mm
context
if (parisc_requires_coherency())		flush_tlb_range(vma, start, end);
parisc_requires_coherency()
parisc_requires_coherency
parisc_requires_coherency
flush_tlb_range(vma, start, end);
flush_tlb_range(vma, start, end)
flush_tlb_range
flush_tlb_range
vma
vma
start
start
end
end
if ((end - start) >= parisc_cache_flush_threshold) {		flush_cache_all();		return;	}
(end - start) >= parisc_cache_flush_threshold
(end - start)
end - start
end
end
start
start
parisc_cache_flush_threshold
parisc_cache_flush_threshold
{		flush_cache_all();		return;	}
flush_cache_all();
flush_cache_all()
flush_cache_all
flush_cache_all
return;
BUG_ON(vma->vm_mm->context != mfsp(3));
BUG_ON(vma->vm_mm->context != mfsp(3))
BUG_ON
BUG_ON
vma->vm_mm->context != mfsp(3)
vma->vm_mm->context
vma->vm_mm
vma
vma
vm_mm
context
mfsp(3)
mfsp
mfsp
3
flush_user_dcache_range_asm(start, end);
flush_user_dcache_range_asm(start, end)
flush_user_dcache_range_asm
flush_user_dcache_range_asm
start
start
end
end
if (vma->vm_flags & VM_EXEC)		flush_user_icache_range_asm(start, end);
vma->vm_flags & VM_EXEC
vma->vm_flags
vma
vma
vm_flags
VM_EXEC
VM_EXEC
flush_user_icache_range_asm(start, end);
flush_user_icache_range_asm(start, end)
flush_user_icache_range_asm
flush_user_icache_range_asm
start
start
end
end
-----joern-----
(11,34,0)
(25,29,0)
(17,13,0)
(14,23,0)
(17,15,0)
(23,7,0)
(25,7,0)
(33,47,0)
(19,42,0)
(24,9,0)
(9,29,0)
(13,17,0)
(5,34,0)
(23,41,0)
(47,29,0)
(37,42,0)
(15,29,0)
(32,9,0)
(35,26,0)
(39,21,0)
(3,46,0)
(21,39,0)
(46,13,0)
(47,22,0)
(2,22,0)
(22,47,0)
(44,25,0)
(30,42,0)
(9,24,0)
(6,23,0)
(26,35,0)
(18,25,0)
(34,42,0)
(36,21,0)
(24,35,0)
(43,21,0)
(16,24,0)
(0,17,0)
(25,41,0)
(38,15,0)
(8,27,0)
(26,42,0)
(20,47,0)
(21,7,0)
(12,25,0)
(15,17,0)
(34,7,0)
(10,13,0)
(21,41,0)
(10,42,0)
(1,45,0)
(13,46,0)
(34,41,0)
(27,45,0)
(35,24,0)
(28,15,0)
(13,10,0)
(40,39,0)
(31,9,0)
(23,7,1)
(26,35,1)
(34,7,1)
(24,16,1)
(15,38,1)
(13,46,1)
(23,14,1)
(21,7,1)
(12,44,1)
(1,39,1)
(46,3,1)
(24,9,1)
(23,41,1)
(25,18,1)
(31,32,1)
(17,0,1)
(16,9,1)
(13,17,1)
(25,29,1)
(35,24,1)
(14,6,1)
(8,22,1)
(39,21,1)
(2,47,1)
(34,41,1)
(4,26,1)
(21,43,1)
(36,4,1)
(8,23,1)
(34,11,1)
(18,12,1)
(22,47,1)
(25,7,1)
(9,29,1)
(43,36,1)
(17,15,1)
(15,29,1)
(21,41,1)
(33,20,1)
(44,4,1)
(3,17,1)
(38,28,1)
(25,41,1)
(9,31,1)
(11,5,1)
(47,33,1)
(8,27,1)
(40,21,1)
(0,15,1)
(27,1,1)
(28,39,1)
(20,34,1)
(10,13,1)
(6,22,1)
(5,10,1)
(22,2,1)
(47,29,1)
(39,40,1)
(36,25,1)
(21,7,2)
(2,39,2)
(17,15,2)
(14,22,2)
(6,22,2)
(39,21,2)
(13,46,2)
(17,39,2)
(28,39,2)
(10,13,2)
(12,4,2)
(1,39,2)
(22,47,2)
(26,35,2)
(24,9,2)
(34,7,2)
(23,41,2)
(38,39,2)
(25,29,2)
(5,39,2)
(0,39,2)
(44,4,2)
(3,39,2)
(46,39,2)
(25,41,2)
(18,4,2)
(20,39,2)
(13,39,2)
(47,29,2)
(34,39,2)
(25,7,2)
(35,24,2)
(25,4,2)
(47,39,2)
(21,41,2)
(22,39,2)
(15,39,2)
(23,22,2)
(33,39,2)
(34,41,2)
(15,29,2)
(11,39,2)
(8,27,2)
(9,29,2)
(27,39,2)
(13,17,2)
(10,39,2)
(23,7,2)
-----------------------------------
(0,context)
(1,flush_cache_all()
(2,VM_EXEC)
(3,3)
(4,parisc_requires_coherency()
(5,start)
(6,start)
(7,unsigned long start)
(8,RET)
(9,vma->vm_mm)
(10,BUG_ON(vma->vm_mm->context != mfsp(3)
(11,end)
(12,start)
(13,vma->vm_mm->context != mfsp(3)
(14,end)
(15,vma->vm_mm)
(16,context)
(17,vma->vm_mm->context)
(18,end)
(19,if ((end - start)
(20,vma)
(21,end - start)
(22,vma->vm_flags & VM_EXEC)
(23,flush_user_icache_range_asm(start, end)
(24,vma->vm_mm->context)
(25,flush_tlb_range(vma, start, end)
(26,BUG_ON(!vma->vm_mm->context)
(27,return;)
(28,vma)
(29,struct vm_area_struct *vma)
(30,if (vma->vm_flags & VM_EXEC)
(31,vm_mm)
(32,vma)
(33,vm_flags)
(34,flush_user_dcache_range_asm(start, end)
(35,!vma->vm_mm->context)
(36,end)
(37,if (parisc_requires_coherency()
(38,vm_mm)
(39,(end - start)
(40,parisc_cache_flush_threshold)
(41,unsigned long end)
(42,)
(43,start)
(44,vma)
(45,)
(46,mfsp(3)
(47,vma->vm_flags)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^