-----label-----
1
-----code-----
static void enter_freeze_proper(struct cpuidle_driver *drv,
				struct cpuidle_device *dev, int index)
{
	tick_freeze();
	/*
	 * The state used here cannot be a "coupled" one, because the "coupled"
	 * cpuidle mechanism enables interrupts and doing that with timekeeping
	 * suspended is generally unsafe.
	 */
	drv->states[index].enter_freeze(dev, drv, index);
	WARN_ON(!irqs_disabled());
	/*
	 * timekeeping_resume() that will be called by tick_unfreeze() for the
	 * last CPU executing it calls functions containing RCU read-side
	 * critical sections, so tell RCU about that.
	 */
	RCU_NONIDLE(tick_unfreeze());
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
3,7
5,6
5,7
6,7
8,9
8,10
11,12
11,13
12,13
14,15
14,16
17,18
17,19
19,20
21,22
21,23
21,24
21,25
22,23
23,24
24,25
26,27
27,28
27,29
27,30
27,31
28,29
28,30
29,30
29,31
30,31
30,32
31,32
34,35
37,38
39,40
41,42
43,44
44,45
44,46
45,46
47,48
48,49
49,50
51,52
52,53
52,54
53,54
55,56
56,57
-----nextToken-----
2,4,7,9,10,13,15,16,18,20,25,32,33,35,36,38,40,42,46,50,54,57
-----computeFrom-----
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;FieldReference;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FunctionCallExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;FunctionDeclarator;Name;
-----ast_node-----
static void enter_freeze_proper(struct cpuidle_driver *drv,				struct cpuidle_device *dev, int index){	tick_freeze();	/*	 * The state used here cannot be a "coupled" one, because the "coupled"	 * cpuidle mechanism enables interrupts and doing that with timekeeping	 * suspended is generally unsafe.	 */	drv->states[index].enter_freeze(dev, drv, index);	WARN_ON(!irqs_disabled());	/*	 * timekeeping_resume() that will be called by tick_unfreeze() for the	 * last CPU executing it calls functions containing RCU read-side	 * critical sections, so tell RCU about that.	 */	RCU_NONIDLE(tick_unfreeze());}
static void
enter_freeze_proper(struct cpuidle_driver *drv,				struct cpuidle_device *dev, int index)
enter_freeze_proper
struct cpuidle_driver *drv
struct cpuidle_driver
cpuidle_driver
*drv
*
drv
struct cpuidle_device *dev
struct cpuidle_device
cpuidle_device
*dev
*
dev
int index
int
index
index
{	tick_freeze();	/*	 * The state used here cannot be a "coupled" one, because the "coupled"	 * cpuidle mechanism enables interrupts and doing that with timekeeping	 * suspended is generally unsafe.	 */	drv->states[index].enter_freeze(dev, drv, index);	WARN_ON(!irqs_disabled());	/*	 * timekeeping_resume() that will be called by tick_unfreeze() for the	 * last CPU executing it calls functions containing RCU read-side	 * critical sections, so tell RCU about that.	 */	RCU_NONIDLE(tick_unfreeze());}
tick_freeze();
tick_freeze()
tick_freeze
tick_freeze
drv->states[index].enter_freeze(dev, drv, index);
drv->states[index].enter_freeze(dev, drv, index)
drv->states[index].enter_freeze
drv->states[index]
drv->states
drv
drv
states
index
index
enter_freeze
dev
dev
drv
drv
index
index
WARN_ON(!irqs_disabled());
WARN_ON(!irqs_disabled())
WARN_ON
WARN_ON
!irqs_disabled()
irqs_disabled()
irqs_disabled
irqs_disabled
RCU_NONIDLE(tick_unfreeze());
RCU_NONIDLE(tick_unfreeze());
RCU_NONIDLE
RCU_NONIDLE
(tick_unfreeze())
tick_unfreeze()
tick_unfreeze
-----joern-----
(7,5,0)
(7,4,0)
(10,1,0)
(11,6,0)
(1,13,0)
(14,7,0)
(7,13,0)
(2,13,0)
(11,2,0)
(7,3,0)
(8,13,0)
(2,11,0)
(1,10,0)
(9,7,0)
(6,11,0)
(0,7,0)
(7,4,1)
(2,11,1)
(12,1,1)
(10,2,1)
(9,0,1)
(6,7,1)
(7,3,1)
(7,5,1)
(7,14,1)
(11,6,1)
(1,10,1)
(14,9,1)
(0,8,1)
(11,6,2)
(7,3,2)
(1,10,2)
(2,11,2)
(7,5,2)
(7,4,2)
-----------------------------------
(0,dev)
(1,RCU_NONIDLE(tick_unfreeze()
(2,WARN_ON(!irqs_disabled()
(3,int index)
(4,struct cpuidle_driver *drv)
(5,struct cpuidle_device *dev)
(6,irqs_disabled()
(7,drv->states[index].enter_freeze(dev, drv, index)
(8,tick_freeze()
(9,drv)
(10,tick_unfreeze()
(11,!irqs_disabled()
(12,RET)
(13,)
(14,index)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^