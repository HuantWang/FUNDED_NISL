-----label-----
1
-----code-----
int x86_emulate_insn(struct x86_emulate_ctxt *ctxt)
{
	struct x86_emulate_ops *ops = ctxt->ops;
	int rc = X86EMUL_CONTINUE;
	int saved_dst_type = ctxt->dst.type;

	ctxt->mem_read.pos = 0;

	if (ctxt->mode == X86EMUL_MODE_PROT64 && (ctxt->d & No64)) {
		rc = emulate_ud(ctxt);
		goto done;
	}

	/* LOCK prefix is allowed only with some instructions */
	if (ctxt->lock_prefix && (!(ctxt->d & Lock) || ctxt->dst.type != OP_MEM)) {
		rc = emulate_ud(ctxt);
		goto done;
	}

	if ((ctxt->d & SrcMask) == SrcMemFAddr && ctxt->src.type != OP_MEM) {
		rc = emulate_ud(ctxt);
		goto done;
	}

	if ((ctxt->d & Sse)
	    && ((ops->get_cr(ctxt, 0) & X86_CR0_EM)
		|| !(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))) {
		rc = emulate_ud(ctxt);
		goto done;
	}

	if ((ctxt->d & Sse) && (ops->get_cr(ctxt, 0) & X86_CR0_TS)) {
		rc = emulate_nm(ctxt);
		goto done;
	}

	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {
		rc = emulator_check_intercept(ctxt, ctxt->intercept,
					      X86_ICPT_PRE_EXCEPT);
		if (rc != X86EMUL_CONTINUE)
			goto done;
	}

	/* Privileged instruction can be executed only in CPL=0 */
	if ((ctxt->d & Priv) && ops->cpl(ctxt)) {
		rc = emulate_gp(ctxt, 0);
		goto done;
	}

	/* Instruction can only be executed in protected mode */
	if ((ctxt->d & Prot) && !(ctxt->mode & X86EMUL_MODE_PROT)) {
		rc = emulate_ud(ctxt);
		goto done;
	}

	/* Do instruction specific permission checks */
	if (ctxt->check_perm) {
		rc = ctxt->check_perm(ctxt);
		if (rc != X86EMUL_CONTINUE)
			goto done;
	}

	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {
		rc = emulator_check_intercept(ctxt, ctxt->intercept,
					      X86_ICPT_POST_EXCEPT);
		if (rc != X86EMUL_CONTINUE)
			goto done;
	}

	if (ctxt->rep_prefix && (ctxt->d & String)) {
		/* All REP prefixes have the same first termination condition */
		if (address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX]) == 0) {
			ctxt->eip = ctxt->_eip;
			goto done;
		}
	}

	if ((ctxt->src.type == OP_MEM) && !(ctxt->d & NoAccess)) {
		rc = segmented_read(ctxt, ctxt->src.addr.mem,
				    ctxt->src.valptr, ctxt->src.bytes);
		if (rc != X86EMUL_CONTINUE)
			goto done;
		ctxt->src.orig_val64 = ctxt->src.val64;
	}

	if (ctxt->src2.type == OP_MEM) {
		rc = segmented_read(ctxt, ctxt->src2.addr.mem,
				    &ctxt->src2.val, ctxt->src2.bytes);
		if (rc != X86EMUL_CONTINUE)
			goto done;
	}

	if ((ctxt->d & DstMask) == ImplicitOps)
		goto special_insn;


	if ((ctxt->dst.type == OP_MEM) && !(ctxt->d & Mov)) {
		/* optimisation - avoid slow emulated read if Mov */
		rc = segmented_read(ctxt, ctxt->dst.addr.mem,
				   &ctxt->dst.val, ctxt->dst.bytes);
		if (rc != X86EMUL_CONTINUE)
			goto done;
	}
	ctxt->dst.orig_val = ctxt->dst.val;

special_insn:

	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {
		rc = emulator_check_intercept(ctxt, ctxt->intercept,
					      X86_ICPT_POST_MEMACCESS);
		if (rc != X86EMUL_CONTINUE)
			goto done;
	}

	if (ctxt->execute) {
		rc = ctxt->execute(ctxt);
		if (rc != X86EMUL_CONTINUE)
			goto done;
		goto writeback;
	}

	if (ctxt->twobyte)
		goto twobyte_insn;

	switch (ctxt->b) {
	case 0x40 ... 0x47: /* inc r16/r32 */
		emulate_1op(ctxt, "inc");
		break;
	case 0x48 ... 0x4f: /* dec r16/r32 */
		emulate_1op(ctxt, "dec");
		break;
	case 0x63:		/* movsxd */
		if (ctxt->mode != X86EMUL_MODE_PROT64)
			goto cannot_emulate;
		ctxt->dst.val = (s32) ctxt->src.val;
		break;
	case 0x70 ... 0x7f: /* jcc (short) */
		if (test_cc(ctxt->b, ctxt->eflags))
			rc = jmp_rel(ctxt, ctxt->src.val);
		break;
	case 0x8d: /* lea r16/r32, m */
		ctxt->dst.val = ctxt->src.addr.mem.ea;
		break;
	case 0x90 ... 0x97: /* nop / xchg reg, rax */
		if (ctxt->dst.addr.reg == &ctxt->regs[VCPU_REGS_RAX])
			break;
		rc = em_xchg(ctxt);
		break;
	case 0x98: /* cbw/cwde/cdqe */
		switch (ctxt->op_bytes) {
		case 2: ctxt->dst.val = (s8)ctxt->dst.val; break;
		case 4: ctxt->dst.val = (s16)ctxt->dst.val; break;
		case 8: ctxt->dst.val = (s32)ctxt->dst.val; break;
		}
		break;
	case 0xc0 ... 0xc1:
		rc = em_grp2(ctxt);
		break;
	case 0xcc:		/* int3 */
		rc = emulate_int(ctxt, 3);
		break;
	case 0xcd:		/* int n */
		rc = emulate_int(ctxt, ctxt->src.val);
		break;
	case 0xce:		/* into */
		if (ctxt->eflags & EFLG_OF)
			rc = emulate_int(ctxt, 4);
		break;
	case 0xd0 ... 0xd1:	/* Grp2 */
		rc = em_grp2(ctxt);
		break;
	case 0xd2 ... 0xd3:	/* Grp2 */
		ctxt->src.val = ctxt->regs[VCPU_REGS_RCX];
		rc = em_grp2(ctxt);
		break;
	case 0xe9: /* jmp rel */
	case 0xeb: /* jmp rel short */
		rc = jmp_rel(ctxt, ctxt->src.val);
		ctxt->dst.type = OP_NONE; /* Disable writeback. */
		break;
	case 0xf4:              /* hlt */
		ctxt->ops->halt(ctxt);
		break;
	case 0xf5:	/* cmc */
		/* complement carry flag from eflags reg */
		ctxt->eflags ^= EFLG_CF;
		break;
	case 0xf8: /* clc */
		ctxt->eflags &= ~EFLG_CF;
		break;
	case 0xf9: /* stc */
		ctxt->eflags |= EFLG_CF;
		break;
	case 0xfc: /* cld */
		ctxt->eflags &= ~EFLG_DF;
		break;
	case 0xfd: /* std */
		ctxt->eflags |= EFLG_DF;
		break;
	default:
		goto cannot_emulate;
	}

	if (rc != X86EMUL_CONTINUE)
		goto done;

writeback:
	rc = writeback(ctxt);
	if (rc != X86EMUL_CONTINUE)
		goto done;

	/*
	 * restore dst type in case the decoding will be reused
	 * (happens for string instruction )
	 */
	ctxt->dst.type = saved_dst_type;

	if ((ctxt->d & SrcMask) == SrcSI)
		string_addr_inc(ctxt, seg_override(ctxt),
				VCPU_REGS_RSI, &ctxt->src);

	if ((ctxt->d & DstMask) == DstDI)
		string_addr_inc(ctxt, VCPU_SREG_ES, VCPU_REGS_RDI,
				&ctxt->dst);

	if (ctxt->rep_prefix && (ctxt->d & String)) {
		struct read_cache *r = &ctxt->io_read;
		register_address_increment(ctxt, &ctxt->regs[VCPU_REGS_RCX], -1);

		if (!string_insn_completed(ctxt)) {
			/*
			 * Re-enter guest when pio read ahead buffer is empty
			 * or, if it is not used, after each 1024 iteration.
			 */
			if ((r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff) &&
			    (r->end == 0 || r->end != r->pos)) {
				/*
				 * Reset read cache. Usually happens before
				 * decode, but since instruction is restarted
				 * we have to do it here.
				 */
				ctxt->mem_read.end = 0;
				return EMULATION_RESTART;
			}
			goto done; /* skip rip writeback */
		}
	}

	ctxt->eip = ctxt->_eip;

done:
	if (rc == X86EMUL_PROPAGATE_FAULT)
		ctxt->have_exception = true;
	if (rc == X86EMUL_INTERCEPTED)
		return EMULATION_INTERCEPTED;

	return (rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK;

twobyte_insn:
	switch (ctxt->b) {
	case 0x09:		/* wbinvd */
		(ctxt->ops->wbinvd)(ctxt);
		break;
	case 0x08:		/* invd */
	case 0x0d:		/* GrpP (prefetch) */
	case 0x18:		/* Grp16 (prefetch/nop) */
		break;
	case 0x20: /* mov cr, reg */
		ctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg);
		break;
	case 0x21: /* mov from dr to reg */
		ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val);
		break;
	case 0x40 ... 0x4f:	/* cmov */
		ctxt->dst.val = ctxt->dst.orig_val = ctxt->src.val;
		if (!test_cc(ctxt->b, ctxt->eflags))
			ctxt->dst.type = OP_NONE; /* no writeback */
		break;
	case 0x80 ... 0x8f: /* jnz rel, etc*/
		if (test_cc(ctxt->b, ctxt->eflags))
			rc = jmp_rel(ctxt, ctxt->src.val);
		break;
	case 0x90 ... 0x9f:     /* setcc r/m8 */
		ctxt->dst.val = test_cc(ctxt->b, ctxt->eflags);
		break;
	case 0xa4: /* shld imm8, r, r/m */
	case 0xa5: /* shld cl, r, r/m */
		emulate_2op_cl(ctxt, "shld");
		break;
	case 0xac: /* shrd imm8, r, r/m */
	case 0xad: /* shrd cl, r, r/m */
		emulate_2op_cl(ctxt, "shrd");
		break;
	case 0xae:              /* clflush */
		break;
	case 0xb6 ... 0xb7:	/* movzx */
		ctxt->dst.bytes = ctxt->op_bytes;
		ctxt->dst.val = (ctxt->d & ByteOp) ? (u8) ctxt->src.val
						       : (u16) ctxt->src.val;
		break;
	case 0xbe ... 0xbf:	/* movsx */
		ctxt->dst.bytes = ctxt->op_bytes;
		ctxt->dst.val = (ctxt->d & ByteOp) ? (s8) ctxt->src.val :
							(s16) ctxt->src.val;
		break;
	case 0xc0 ... 0xc1:	/* xadd */
		emulate_2op_SrcV(ctxt, "add");
		/* Write back the register source. */
		ctxt->src.val = ctxt->dst.orig_val;
		write_register_operand(&ctxt->src);
		break;
	case 0xc3:		/* movnti */
		ctxt->dst.bytes = ctxt->op_bytes;
		ctxt->dst.val = (ctxt->op_bytes == 4) ? (u32) ctxt->src.val :
							(u64) ctxt->src.val;
		break;
	default:
		goto cannot_emulate;
	}

	if (rc != X86EMUL_CONTINUE)
		goto done;

	goto writeback;

cannot_emulate:
	return EMULATION_FAILED;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
5,6
5,7
6,7
8,9
8,10
11,12
11,13
11,14
11,15
11,16
11,17
11,18
11,19
11,20
11,21
11,22
11,23
11,24
11,25
11,26
11,27
11,28
11,29
11,30
11,31
11,32
11,33
11,34
11,35
11,36
11,37
11,38
11,39
11,40
11,41
11,42
11,43
11,44
11,45
11,46
11,47
11,48
11,49
11,50
12,13
13,14
13,15
14,15
16,17
16,18
16,19
19,20
20,21
20,22
21,22
24,25
25,26
25,27
27,28
27,29
29,30
30,31
32,33
33,34
33,35
35,36
35,37
37,38
38,39
38,40
39,40
39,41
40,41
44,45
45,46
45,47
46,47
46,48
47,48
47,49
48,49
53,54
53,55
54,55
54,56
55,56
55,57
56,57
56,58
57,58
60,61
62,63
63,64
63,65
64,65
64,66
65,66
68,69
70,71
70,72
71,72
72,73
72,74
73,74
75,76
75,77
76,77
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
89,90
89,91
90,91
91,92
92,93
92,94
93,94
93,95
94,95
97,98
99,100
99,101
100,101
100,102
101,102
101,103
102,103
106,107
108,109
108,110
109,110
110,111
110,112
111,112
113,114
113,115
114,115
116,117
118,119
120,121
120,122
121,122
121,123
122,123
122,124
123,124
124,125
124,126
125,126
125,127
126,127
129,130
131,132
133,134
133,135
134,135
134,136
135,136
135,137
136,137
140,141
142,143
142,144
143,144
144,145
144,146
145,146
147,148
147,149
148,149
150,151
152,153
154,155
154,156
155,156
155,157
156,157
157,158
157,159
158,159
158,160
159,160
162,163
164,165
165,166
165,167
166,167
167,168
167,169
168,169
168,170
168,171
169,170
169,171
170,171
173,174
176,177
178,179
179,180
180,181
180,182
181,182
181,183
181,184
182,183
182,184
183,184
186,187
189,190
191,192
191,193
192,193
193,194
193,195
194,195
196,197
196,198
197,198
199,200
201,202
203,204
203,205
204,205
204,206
205,206
206,207
206,208
207,208
207,209
208,209
211,212
213,214
214,215
214,216
215,216
215,217
215,218
216,217
216,218
217,218
220,221
223,224
225,226
225,227
226,227
227,228
227,229
228,229
230,231
230,232
231,232
233,234
235,236
237,238
237,239
238,239
238,240
239,240
239,241
240,241
242,243
242,244
243,244
246,247
246,248
247,248
250,251
250,252
251,252
252,253
252,254
253,254
255,256
255,257
255,258
255,259
256,257
258,259
260,261
260,262
261,262
264,265
266,267
266,268
267,268
267,269
268,269
270,271
272,273
274,275
274,276
275,276
275,277
276,277
277,278
277,279
278,279
278,280
279,280
282,283
284,285
284,286
285,286
285,287
286,287
289,290
291,292
291,293
292,293
293,294
293,295
294,295
296,297
296,298
296,299
297,298
299,300
302,303
304,305
304,306
305,306
305,307
306,307
307,308
307,309
308,309
308,310
309,310
312,313
314,315
315,316
316,317
316,318
317,318
317,319
318,319
321,322
323,324
323,325
324,325
325,326
325,327
326,327
328,329
328,330
329,330
331,332
333,334
335,336
335,337
336,337
336,338
337,338
340,341
340,342
341,342
342,343
342,344
343,344
345,346
345,347
346,347
346,348
347,348
350,351
352,353
352,354
353,354
353,355
354,355
356,357
358,359
360,361
360,362
361,362
361,363
362,363
362,364
363,364
365,366
365,367
366,367
369,370
369,371
370,371
373,374
373,375
374,375
375,376
375,377
376,377
378,379
378,380
378,381
378,382
379,380
381,382
383,384
383,385
384,385
387,388
389,390
389,391
390,391
390,392
391,392
393,394
395,396
397,398
397,399
398,399
398,400
399,400
399,401
400,401
403,404
404,405
404,406
405,406
405,407
406,407
409,410
411,412
412,413
412,414
413,414
413,415
414,415
414,416
414,417
415,416
417,418
419,420
419,421
420,421
420,422
421,422
424,425
427,428
427,429
428,429
429,430
429,431
430,431
430,432
431,432
434,435
434,436
435,436
438,439
440,441
440,442
441,442
441,443
442,443
443,444
443,445
444,445
444,446
445,446
445,447
446,447
450,451
452,453
453,454
454,455
454,456
455,456
455,457
456,457
459,460
461,462
461,463
461,464
462,463
463,464
463,465
464,465
466,467
466,468
466,469
466,470
466,471
467,468
469,470
471,472
471,473
472,473
472,474
473,474
473,475
474,475
479,480
479,481
480,481
480,482
481,482
485,486
485,487
486,487
486,488
487,488
491,492
491,493
492,493
492,494
493,494
495,496
497,498
499,500
500,501
500,502
501,502
501,503
502,503
502,504
503,504
507,508
507,509
508,509
508,510
509,510
513,514
513,515
514,515
514,516
515,516
515,517
516,517
516,518
517,518
521,522
523,524
523,525
524,525
525,526
525,527
526,527
528,529
528,530
528,531
528,532
528,533
529,530
531,532
533,534
533,535
534,535
534,536
535,536
535,537
536,537
541,542
542,543
542,544
543,544
543,545
544,545
548,549
548,550
549,550
549,551
550,551
554,555
554,556
555,556
555,557
556,557
558,559
560,561
562,563
562,564
563,564
563,565
564,565
565,566
565,567
566,567
566,568
567,568
570,571
572,573
574,575
576,577
576,578
577,578
577,579
578,579
579,580
579,581
580,581
580,582
581,582
581,583
582,583
586,587
588,589
589,590
590,591
590,592
591,592
591,593
592,593
595,596
597,598
597,599
598,599
599,600
599,601
600,601
602,603
602,604
602,605
602,606
602,607
603,604
605,606
607,608
607,609
608,609
608,610
609,610
609,611
610,611
615,616
616,617
616,618
617,618
617,619
618,619
622,623
622,624
623,624
623,625
624,625
628,629
628,630
629,630
629,631
630,631
632,633
634,635
636,637
637,638
637,639
638,639
638,640
639,640
639,641
640,641
644,645
644,646
645,646
645,647
646,647
650,651
650,652
652,653
652,654
653,654
653,655
654,655
654,656
655,656
657,658
657,659
658,659
661,662
661,663
662,663
665,666
665,667
666,667
667,668
667,669
668,669
670,671
670,672
670,673
670,674
671,672
673,674
675,676
675,677
676,677
679,680
681,682
681,683
682,683
682,684
683,684
685,686
687,688
689,690
689,691
690,691
690,692
691,692
694,695
694,696
694,697
695,696
696,697
696,698
697,698
699,700
699,701
700,701
700,702
701,702
704,705
706,707
706,708
707,708
707,709
708,709
710,711
712,713
714,715
716,717
716,718
717,718
717,719
718,719
721,722
723,724
723,725
724,725
724,726
725,726
728,729
728,730
728,731
728,732
728,733
728,734
728,735
728,736
728,737
728,738
728,739
728,740
728,741
728,742
728,743
728,744
728,745
728,746
728,747
728,748
728,749
728,750
728,751
728,752
728,753
728,754
728,755
728,756
728,757
728,758
728,759
728,760
728,761
728,762
728,763
728,764
728,765
728,766
728,767
728,768
728,769
728,770
728,771
728,772
728,773
728,774
728,775
728,776
728,777
728,778
728,779
728,780
728,781
728,782
728,783
728,784
728,785
728,786
728,787
728,788
728,789
728,790
728,791
728,792
728,793
728,794
728,795
729,730
730,731
730,732
733,734
734,735
734,736
734,737
735,736
737,738
741,742
742,743
742,744
745,746
746,747
746,748
746,749
747,748
749,750
753,754
755,756
755,757
756,757
756,758
757,758
757,759
758,759
761,762
763,764
765,766
766,767
766,768
767,768
767,769
768,769
768,770
769,770
773,774
773,775
774,775
774,776
775,776
778,779
778,780
779,780
779,781
780,781
785,786
786,787
786,788
789,790
789,791
790,791
790,792
790,793
791,792
793,794
793,795
794,795
797,798
797,799
798,799
801,802
802,803
802,804
803,804
805,806
805,807
805,808
806,807
808,809
810,811
810,812
811,812
811,813
812,813
817,818
819,820
820,821
820,822
821,822
821,823
822,823
822,824
823,824
827,828
827,829
828,829
828,830
829,830
829,831
830,831
830,832
831,832
838,839
839,840
839,841
842,843
842,844
843,844
843,845
844,845
844,846
845,846
845,847
846,847
846,848
847,848
852,853
853,854
853,855
854,855
854,856
855,856
858,859
861,862
862,863
862,864
863,864
865,866
865,867
866,867
868,869
871,872
873,874
873,875
874,875
874,876
875,876
878,879
878,880
878,881
878,882
878,883
878,884
878,885
878,886
878,887
879,880
881,882
882,883
882,884
883,884
883,885
884,885
884,886
885,886
889,890
889,891
890,891
890,892
891,892
894,895
894,896
895,896
895,897
896,897
901,902
903,904
904,905
904,906
905,906
905,907
906,907
906,908
907,908
911,912
911,913
912,913
912,914
913,914
916,917
916,918
917,918
917,919
918,919
923,924
925,926
926,927
926,928
927,928
927,929
928,929
928,930
929,930
933,934
933,935
934,935
934,936
935,936
938,939
938,940
939,940
939,941
940,941
946,947
947,948
947,949
950,951
951,952
951,953
952,953
954,955
954,956
955,956
957,958
960,961
962,963
963,964
963,965
964,965
966,967
966,968
966,969
967,968
969,970
973,974
975,976
976,977
976,978
977,978
979,980
979,981
979,982
980,981
982,983
984,985
984,986
985,986
985,987
986,987
991,992
993,994
993,995
994,995
994,996
995,996
995,997
996,997
999,1000
1001,1002
1002,1003
1002,1004
1003,1004
1005,1006
1005,1007
1005,1008
1006,1007
1008,1009
1012,1013
1013,1014
1013,1015
1016,1017
1017,1018
1017,1019
1018,1019
1020,1021
1020,1022
1021,1022
1023,1024
1026,1027
1027,1028
1027,1029
1030,1031
1031,1032
1031,1033
1032,1033
1032,1034
1033,1034
1033,1035
1034,1035
1038,1039
1038,1040
1039,1040
1039,1041
1040,1041
1043,1044
1045,1046
1046,1047
1046,1048
1047,1048
1049,1050
1049,1051
1050,1051
1052,1053
1055,1056
1057,1058
1059,1060
1060,1061
1060,1062
1061,1062
1063,1064
1063,1065
1063,1066
1064,1065
1066,1067
1068,1069
1068,1070
1069,1070
1069,1071
1070,1071
1074,1075
1075,1076
1075,1077
1076,1077
1076,1078
1077,1078
1077,1079
1078,1079
1082,1083
1085,1086
1087,1088
1088,1089
1088,1090
1089,1090
1089,1091
1090,1091
1090,1092
1091,1092
1095,1096
1098,1099
1100,1101
1101,1102
1101,1103
1102,1103
1102,1104
1103,1104
1106,1107
1109,1110
1111,1112
1112,1113
1112,1114
1113,1114
1113,1115
1114,1115
1117,1118
1118,1119
1121,1122
1123,1124
1124,1125
1124,1126
1125,1126
1125,1127
1126,1127
1129,1130
1132,1133
1134,1135
1135,1136
1135,1137
1136,1137
1136,1138
1137,1138
1140,1141
1141,1142
1144,1145
1146,1147
1147,1148
1147,1149
1148,1149
1148,1150
1149,1150
1152,1153
1156,1157
1158,1159
1158,1160
1159,1160
1159,1161
1160,1161
1162,1163
1164,1165
1166,1167
1166,1168
1168,1169
1169,1170
1169,1171
1170,1171
1172,1173
1172,1174
1173,1174
1175,1176
1177,1178
1177,1179
1178,1179
1178,1180
1179,1180
1181,1182
1183,1184
1185,1186
1186,1187
1186,1188
1187,1188
1187,1189
1188,1189
1188,1190
1189,1190
1193,1194
1195,1196
1195,1197
1196,1197
1196,1198
1197,1198
1198,1199
1198,1200
1199,1200
1199,1201
1200,1201
1203,1204
1205,1206
1207,1208
1208,1209
1208,1210
1208,1211
1208,1212
1208,1213
1209,1210
1211,1212
1213,1214
1213,1215
1214,1215
1216,1217
1218,1219
1220,1221
1221,1222
1221,1223
1222,1223
1225,1226
1225,1227
1226,1227
1226,1228
1227,1228
1228,1229
1228,1230
1229,1230
1229,1231
1230,1231
1233,1234
1235,1236
1237,1238
1238,1239
1238,1240
1238,1241
1238,1242
1238,1243
1239,1240
1241,1242
1243,1244
1245,1246
1247,1248
1248,1249
1248,1250
1249,1250
1252,1253
1252,1254
1253,1254
1253,1255
1254,1255
1254,1256
1255,1256
1258,1259
1259,1260
1259,1261
1260,1261
1260,1262
1261,1262
1264,1265
1266,1267
1266,1268
1266,1269
1267,1268
1268,1269
1268,1270
1269,1270
1271,1272
1271,1273
1271,1274
1274,1275
1275,1276
1276,1277
1276,1278
1277,1278
1280,1281
1281,1282
1281,1283
1281,1284
1281,1285
1282,1283
1284,1285
1286,1287
1287,1288
1287,1289
1288,1289
1288,1290
1289,1290
1292,1293
1294,1295
1296,1297
1296,1298
1297,1298
1298,1299
1298,1300
1299,1300
1301,1302
1303,1304
1303,1305
1304,1305
1304,1306
1305,1306
1305,1307
1306,1307
1307,1308
1307,1309
1308,1309
1308,1310
1309,1310
1309,1311
1310,1311
1314,1315
1314,1316
1315,1316
1315,1317
1316,1317
1316,1318
1317,1318
1320,1321
1323,1324
1324,1325
1324,1326
1325,1326
1325,1327
1326,1327
1326,1328
1327,1328
1331,1332
1331,1333
1332,1333
1332,1334
1333,1334
1336,1337
1336,1338
1337,1338
1340,1341
1340,1342
1341,1342
1342,1343
1342,1344
1343,1344
1343,1345
1344,1345
1344,1346
1345,1346
1350,1351
1351,1352
1353,1354
1355,1356
1356,1357
1356,1358
1357,1358
1357,1359
1358,1359
1361,1362
1361,1363
1362,1363
1365,1366
1365,1367
1367,1368
1367,1369
1368,1369
1368,1370
1369,1370
1371,1372
1373,1374
1374,1375
1374,1376
1375,1376
1375,1377
1376,1377
1380,1381
1380,1382
1381,1382
1381,1383
1382,1383
1384,1385
1386,1387
1387,1388
1389,1390
1390,1391
1390,1392
1390,1393
1391,1392
1392,1393
1392,1394
1393,1394
1395,1396
1397,1398
1399,1400
1401,1402
1401,1403
1403,1404
1403,1405
1404,1405
1404,1406
1405,1406
1408,1409
1408,1410
1408,1411
1408,1412
1408,1413
1408,1414
1408,1415
1408,1416
1408,1417
1408,1418
1408,1419
1408,1420
1408,1421
1408,1422
1408,1423
1408,1424
1408,1425
1408,1426
1408,1427
1408,1428
1408,1429
1408,1430
1408,1431
1408,1432
1408,1433
1408,1434
1408,1435
1408,1436
1408,1437
1408,1438
1408,1439
1408,1440
1408,1441
1408,1442
1408,1443
1408,1444
1408,1445
1408,1446
1408,1447
1408,1448
1408,1449
1408,1450
1408,1451
1408,1452
1408,1453
1408,1454
1408,1455
1408,1456
1408,1457
1408,1458
1408,1459
1408,1460
1409,1410
1411,1412
1412,1413
1412,1414
1413,1414
1414,1415
1414,1416
1415,1416
1415,1417
1416,1417
1420,1421
1423,1424
1425,1426
1427,1428
1430,1431
1432,1433
1433,1434
1433,1435
1434,1435
1434,1436
1435,1436
1435,1437
1436,1437
1440,1441
1440,1442
1440,1443
1441,1442
1441,1443
1442,1443
1445,1446
1447,1448
1447,1449
1448,1449
1452,1453
1454,1455
1455,1456
1455,1457
1455,1458
1455,1459
1456,1457
1456,1458
1457,1458
1460,1461
1462,1463
1462,1464
1463,1464
1466,1467
1467,1468
1467,1469
1468,1469
1468,1470
1469,1470
1474,1475
1475,1476
1475,1477
1478,1479
1479,1480
1479,1481
1480,1481
1480,1482
1481,1482
1481,1483
1482,1483
1486,1487
1486,1488
1487,1488
1487,1489
1488,1489
1488,1490
1489,1490
1493,1494
1493,1495
1494,1495
1494,1496
1495,1496
1499,1500
1499,1501
1500,1501
1501,1502
1501,1503
1501,1504
1502,1503
1504,1505
1504,1506
1505,1506
1508,1509
1508,1510
1509,1510
1512,1513
1513,1514
1513,1515
1514,1515
1514,1516
1515,1516
1515,1517
1516,1517
1520,1521
1523,1524
1524,1525
1524,1526
1527,1528
1527,1529
1528,1529
1528,1530
1528,1531
1529,1530
1531,1532
1531,1533
1532,1533
1535,1536
1535,1537
1536,1537
1539,1540
1540,1541
1540,1542
1541,1542
1543,1544
1543,1545
1543,1546
1544,1545
1546,1547
1548,1549
1548,1550
1549,1550
1549,1551
1550,1551
1555,1556
1556,1557
1556,1558
1559,1560
1560,1561
1560,1562
1561,1562
1561,1563
1562,1563
1562,1564
1563,1564
1567,1568
1567,1569
1567,1570
1568,1569
1570,1571
1570,1572
1571,1572
1574,1575
1574,1576
1575,1576
1579,1580
1581,1582
1583,1584
1584,1585
1584,1586
1584,1587
1585,1586
1587,1588
1591,1592
1593,1594
1595,1596
1596,1597
1596,1598
1596,1599
1597,1598
1599,1600
1603,1604
1606,1607
1607,1608
1607,1609
1610,1611
1611,1612
1611,1613
1612,1613
1612,1614
1613,1614
1613,1615
1614,1615
1618,1619
1618,1620
1619,1620
1622,1623
1623,1624
1623,1625
1624,1625
1624,1626
1625,1626
1625,1627
1626,1627
1630,1631
1630,1632
1630,1633
1631,1632
1632,1633
1632,1634
1633,1634
1633,1635
1634,1635
1637,1638
1639,1640
1639,1641
1640,1641
1640,1642
1641,1642
1644,1645
1644,1646
1645,1646
1645,1647
1646,1647
1650,1651
1650,1652
1651,1652
1651,1653
1652,1653
1655,1656
1655,1657
1656,1657
1656,1658
1657,1658
1662,1663
1663,1664
1663,1665
1666,1667
1667,1668
1667,1669
1668,1669
1668,1670
1669,1670
1669,1671
1670,1671
1674,1675
1674,1676
1675,1676
1678,1679
1679,1680
1679,1681
1680,1681
1680,1682
1681,1682
1681,1683
1682,1683
1686,1687
1686,1688
1686,1689
1687,1688
1688,1689
1688,1690
1689,1690
1689,1691
1690,1691
1693,1694
1695,1696
1695,1697
1696,1697
1696,1698
1697,1698
1700,1701
1700,1702
1701,1702
1701,1703
1702,1703
1706,1707
1706,1708
1707,1708
1707,1709
1708,1709
1711,1712
1711,1713
1712,1713
1712,1714
1713,1714
1718,1719
1719,1720
1719,1721
1722,1723
1723,1724
1723,1725
1723,1726
1724,1725
1726,1727
1729,1730
1730,1731
1730,1732
1731,1732
1731,1733
1732,1733
1732,1734
1733,1734
1737,1738
1737,1739
1738,1739
1738,1740
1739,1740
1743,1744
1744,1745
1744,1746
1745,1746
1747,1748
1748,1749
1748,1750
1749,1750
1753,1754
1755,1756
1756,1757
1756,1758
1757,1758
1757,1759
1758,1759
1758,1760
1759,1760
1763,1764
1763,1765
1764,1765
1767,1768
1768,1769
1768,1770
1769,1770
1769,1771
1770,1771
1770,1772
1771,1772
1775,1776
1775,1777
1775,1778
1776,1777
1777,1778
1777,1779
1778,1779
1778,1780
1779,1780
1783,1784
1783,1785
1784,1785
1784,1786
1785,1786
1788,1789
1788,1790
1789,1790
1789,1791
1790,1791
1794,1795
1794,1796
1795,1796
1795,1797
1796,1797
1799,1800
1799,1801
1800,1801
1800,1802
1801,1802
1807,1808
1809,1810
1809,1811
1810,1811
1810,1812
1811,1812
1813,1814
1815,1816
1817,1818
1819,1820
1819,1821
1821,1822
1822,1823
-----nextToken-----
2,4,7,9,10,15,17,18,22,23,26,28,31,34,36,41,42,43,49,50,51,52,58,59,61,66,67,69,74,77,79,81,86,87,95,96,98,103,104,105,107,112,115,117,119,127,128,130,132,137,138,139,141,146,149,151,153,160,161,163,171,172,174,175,177,184,185,187,188,190,195,198,200,202,209,210,212,218,219,221,222,224,229,232,234,236,241,244,245,248,249,254,257,259,262,263,265,269,271,273,280,281,283,287,288,290,295,298,300,301,303,310,311,313,319,320,322,327,330,332,334,338,339,344,348,349,351,355,357,359,364,367,368,371,372,377,380,382,385,386,388,392,394,396,401,402,407,408,410,416,418,422,423,425,426,432,433,436,437,439,447,448,449,451,457,458,460,465,468,470,475,476,477,478,482,483,484,488,489,490,494,496,498,504,505,506,510,511,512,518,519,520,522,527,530,532,537,538,539,540,545,546,547,551,552,553,557,559,561,568,569,571,573,575,583,584,585,587,593,594,596,601,604,606,611,612,613,614,619,620,621,625,626,627,631,633,635,641,642,643,647,648,649,651,656,659,660,663,664,669,672,674,677,678,680,684,686,688,692,693,698,702,703,705,709,711,713,715,719,720,722,726,727,731,732,736,738,739,740,743,744,748,750,751,752,754,759,760,762,764,770,771,772,776,777,781,782,783,784,787,788,792,795,796,799,800,804,807,809,813,814,815,816,818,824,825,826,832,833,834,835,836,837,840,841,848,849,850,851,856,857,859,860,864,867,869,870,872,876,877,880,886,887,888,892,893,897,898,899,900,902,908,909,910,914,915,919,920,921,922,924,930,931,932,936,937,941,942,943,944,945,948,949,953,956,958,959,961,965,968,970,971,972,974,978,981,983,987,988,989,990,992,997,998,1000,1004,1007,1009,1010,1011,1014,1015,1019,1022,1024,1025,1028,1029,1035,1036,1037,1041,1042,1044,1048,1051,1053,1054,1056,1058,1062,1065,1067,1071,1072,1073,1079,1080,1081,1083,1084,1086,1092,1093,1094,1096,1097,1099,1104,1105,1107,1108,1110,1115,1116,1119,1120,1122,1127,1128,1130,1131,1133,1138,1139,1142,1143,1145,1150,1151,1153,1154,1155,1157,1161,1163,1165,1167,1171,1174,1176,1180,1182,1184,1190,1191,1192,1194,1201,1202,1204,1206,1210,1212,1215,1217,1219,1223,1224,1231,1232,1234,1236,1240,1242,1244,1246,1250,1251,1256,1257,1262,1263,1265,1270,1272,1273,1278,1279,1283,1285,1290,1291,1293,1295,1300,1302,1311,1312,1313,1318,1319,1321,1322,1328,1329,1330,1334,1335,1338,1339,1346,1347,1348,1349,1352,1354,1359,1360,1363,1364,1366,1370,1372,1377,1378,1379,1383,1385,1388,1394,1396,1398,1400,1402,1406,1407,1410,1417,1418,1419,1421,1422,1424,1426,1428,1429,1431,1437,1438,1439,1443,1444,1446,1449,1450,1451,1453,1458,1459,1461,1464,1465,1470,1471,1472,1473,1476,1477,1483,1484,1485,1490,1491,1492,1496,1497,1498,1503,1506,1507,1510,1511,1517,1518,1519,1521,1522,1525,1526,1530,1533,1534,1537,1538,1542,1545,1547,1551,1552,1553,1554,1557,1558,1564,1565,1566,1569,1572,1573,1576,1577,1578,1580,1582,1586,1588,1589,1590,1592,1594,1598,1600,1601,1602,1604,1605,1608,1609,1615,1616,1617,1620,1621,1627,1628,1629,1635,1636,1638,1642,1643,1647,1648,1649,1653,1654,1658,1659,1660,1661,1664,1665,1671,1672,1673,1676,1677,1683,1684,1685,1691,1692,1694,1698,1699,1703,1704,1705,1709,1710,1714,1715,1716,1717,1720,1721,1725,1727,1728,1734,1735,1736,1740,1741,1742,1746,1750,1751,1752,1754,1760,1761,1762,1765,1766,1772,1773,1774,1780,1781,1782,1786,1787,1791,1792,1793,1797,1798,1802,1803,1804,1805,1806,1808,1812,1814,1816,1818,1820,1823
-----computeFrom-----
45,46
45,47
54,55
54,56
55,56
55,57
63,64
63,65
72,73
72,74
83,84
83,85
89,90
89,91
92,93
92,94
99,100
99,101
110,111
110,112
121,122
121,123
122,123
122,124
124,125
124,126
133,134
133,135
144,145
144,146
155,156
155,157
157,158
157,159
165,166
165,167
167,168
167,169
180,181
180,182
193,194
193,195
204,205
204,206
206,207
206,208
214,215
214,216
227,228
227,229
238,239
238,240
252,253
252,254
267,268
267,269
275,276
275,277
277,278
277,279
293,294
293,295
305,306
305,307
307,308
307,309
316,317
316,318
325,326
325,327
342,343
342,344
353,354
353,355
361,362
361,363
375,376
375,377
390,391
390,392
398,399
398,400
404,405
404,406
413,414
413,415
429,430
429,431
441,442
441,443
443,444
443,445
454,455
454,456
463,464
463,465
492,493
492,494
500,501
500,502
514,515
514,516
525,526
525,527
555,556
555,557
563,564
563,565
565,566
565,567
577,578
577,579
579,580
579,581
590,591
590,592
599,600
599,601
629,630
629,631
637,638
637,639
653,654
653,655
667,668
667,669
682,683
682,684
696,697
696,698
707,708
707,709
730,731
730,732
742,743
742,744
756,757
756,758
766,767
766,768
786,787
786,788
802,803
802,804
820,821
820,822
839,840
839,841
843,844
843,845
862,863
862,864
882,883
882,884
904,905
904,906
926,927
926,928
947,948
947,949
951,952
951,953
963,964
963,965
976,977
976,978
994,995
994,996
1002,1003
1002,1004
1013,1014
1013,1015
1017,1018
1017,1019
1027,1028
1027,1029
1031,1032
1031,1033
1046,1047
1046,1048
1060,1061
1060,1062
1075,1076
1075,1077
1101,1102
1101,1103
1112,1113
1112,1114
1124,1125
1124,1126
1135,1136
1135,1137
1147,1148
1147,1149
1159,1160
1159,1161
1169,1170
1169,1171
1178,1179
1178,1180
1186,1187
1186,1188
1196,1197
1196,1198
1198,1199
1198,1200
1226,1227
1226,1228
1228,1229
1228,1230
1253,1254
1253,1255
1259,1260
1259,1261
1305,1306
1305,1307
1307,1308
1307,1309
1308,1309
1308,1310
1314,1315
1314,1316
1324,1325
1324,1326
1325,1326
1325,1327
1331,1332
1331,1333
1342,1343
1342,1344
1356,1357
1356,1358
1368,1369
1368,1370
1374,1375
1374,1376
1381,1382
1381,1383
1392,1393
1392,1394
1433,1434
1433,1435
1475,1476
1475,1477
1479,1480
1479,1481
1486,1487
1486,1488
1513,1514
1513,1515
1524,1525
1524,1526
1540,1541
1540,1542
1556,1557
1556,1558
1560,1561
1560,1562
1607,1608
1607,1609
1611,1612
1611,1613
1623,1624
1623,1625
1632,1633
1632,1634
1663,1664
1663,1665
1667,1668
1667,1669
1679,1680
1679,1681
1688,1689
1688,1690
1719,1720
1719,1721
1730,1731
1730,1732
1756,1757
1756,1758
1768,1769
1768,1770
1777,1778
1777,1779
1810,1811
1810,1812
-----guardedBy-----
66,79
103,117
137,151
187,200
221,234
248,262
249,263
290,300
319,332
371,385
372,386
407,436
422,436
457,510
448,511
518,551
519,552
593,625
584,626
663,677
664,678
997,1009
1201,1223
1231,1250
1262,1346
1318,1346
1335,1348
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;EqualsInitializer;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;IfStatement;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;BinaryExpression;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;UnaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;LabelStatement;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;GotoStatement;Name;IfStatement;FieldReference;IdExpression;Name;Name;GotoStatement;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;Name;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;BinaryExpression;FieldReference;FieldReference;FieldReference;IdExpression;Name;Name;Name;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;LiteralExpression;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;BreakStatement;DefaultStatement;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;UnaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;UnaryExpression;LiteralExpression;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;LiteralExpression;UnaryExpression;BinaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;CompoundStatement;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;LiteralExpression;ReturnStatement;IdExpression;Name;GotoStatement;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;LabelStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;ReturnStatement;ConditionalExpression;UnaryExpression;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;LabelStatement;Name;SwitchStatement;FieldReference;IdExpression;Name;Name;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;FieldReference;IdExpression;Name;Name;UnaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;IfStatement;UnaryExpression;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;IdExpression;Name;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;IfStatement;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FunctionCallExpression;IdExpression;Name;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CaseStatement;LiteralExpression;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;CaseStatement;BinaryExpression;LiteralExpression;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;FieldReference;IdExpression;Name;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;FieldReference;IdExpression;Name;Name;BreakStatement;CaseStatement;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;FieldReference;IdExpression;Name;Name;Name;ConditionalExpression;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;CastExpression;TypeId;NamedTypeSpecifier;Name;Declarator;FieldReference;FieldReference;IdExpression;Name;Name;Name;BreakStatement;DefaultStatement;GotoStatement;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;GotoStatement;Name;LabelStatement;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
int x86_emulate_insn(struct x86_emulate_ctxt *ctxt){	struct x86_emulate_ops *ops = ctxt->ops;	int rc = X86EMUL_CONTINUE;	int saved_dst_type = ctxt->dst.type;	ctxt->mem_read.pos = 0;	if (ctxt->mode == X86EMUL_MODE_PROT64 && (ctxt->d & No64)) {		rc = emulate_ud(ctxt);		goto done;	}	/* LOCK prefix is allowed only with some instructions */	if (ctxt->lock_prefix && (!(ctxt->d & Lock) || ctxt->dst.type != OP_MEM)) {		rc = emulate_ud(ctxt);		goto done;	}	if ((ctxt->d & SrcMask) == SrcMemFAddr && ctxt->src.type != OP_MEM) {		rc = emulate_ud(ctxt);		goto done;	}	if ((ctxt->d & Sse)	    && ((ops->get_cr(ctxt, 0) & X86_CR0_EM)		|| !(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))) {		rc = emulate_ud(ctxt);		goto done;	}	if ((ctxt->d & Sse) && (ops->get_cr(ctxt, 0) & X86_CR0_TS)) {		rc = emulate_nm(ctxt);		goto done;	}	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_PRE_EXCEPT);		if (rc != X86EMUL_CONTINUE)			goto done;	}	/* Privileged instruction can be executed only in CPL=0 */	if ((ctxt->d & Priv) && ops->cpl(ctxt)) {		rc = emulate_gp(ctxt, 0);		goto done;	}	/* Instruction can only be executed in protected mode */	if ((ctxt->d & Prot) && !(ctxt->mode & X86EMUL_MODE_PROT)) {		rc = emulate_ud(ctxt);		goto done;	}	/* Do instruction specific permission checks */	if (ctxt->check_perm) {		rc = ctxt->check_perm(ctxt);		if (rc != X86EMUL_CONTINUE)			goto done;	}	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_EXCEPT);		if (rc != X86EMUL_CONTINUE)			goto done;	}	if (ctxt->rep_prefix && (ctxt->d & String)) {		/* All REP prefixes have the same first termination condition */		if (address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX]) == 0) {			ctxt->eip = ctxt->_eip;			goto done;		}	}	if ((ctxt->src.type == OP_MEM) && !(ctxt->d & NoAccess)) {		rc = segmented_read(ctxt, ctxt->src.addr.mem,				    ctxt->src.valptr, ctxt->src.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;		ctxt->src.orig_val64 = ctxt->src.val64;	}	if (ctxt->src2.type == OP_MEM) {		rc = segmented_read(ctxt, ctxt->src2.addr.mem,				    &ctxt->src2.val, ctxt->src2.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;	}	if ((ctxt->d & DstMask) == ImplicitOps)		goto special_insn;	if ((ctxt->dst.type == OP_MEM) && !(ctxt->d & Mov)) {		/* optimisation - avoid slow emulated read if Mov */		rc = segmented_read(ctxt, ctxt->dst.addr.mem,				   &ctxt->dst.val, ctxt->dst.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;	}	ctxt->dst.orig_val = ctxt->dst.val;special_insn:	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_MEMACCESS);		if (rc != X86EMUL_CONTINUE)			goto done;	}	if (ctxt->execute) {		rc = ctxt->execute(ctxt);		if (rc != X86EMUL_CONTINUE)			goto done;		goto writeback;	}	if (ctxt->twobyte)		goto twobyte_insn;	switch (ctxt->b) {	case 0x40 ... 0x47: /* inc r16/r32 */		emulate_1op(ctxt, "inc");		break;	case 0x48 ... 0x4f: /* dec r16/r32 */		emulate_1op(ctxt, "dec");		break;	case 0x63:		/* movsxd */		if (ctxt->mode != X86EMUL_MODE_PROT64)			goto cannot_emulate;		ctxt->dst.val = (s32) ctxt->src.val;		break;	case 0x70 ... 0x7f: /* jcc (short) */		if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);		break;	case 0x8d: /* lea r16/r32, m */		ctxt->dst.val = ctxt->src.addr.mem.ea;		break;	case 0x90 ... 0x97: /* nop / xchg reg, rax */		if (ctxt->dst.addr.reg == &ctxt->regs[VCPU_REGS_RAX])			break;		rc = em_xchg(ctxt);		break;	case 0x98: /* cbw/cwde/cdqe */		switch (ctxt->op_bytes) {		case 2: ctxt->dst.val = (s8)ctxt->dst.val; break;		case 4: ctxt->dst.val = (s16)ctxt->dst.val; break;		case 8: ctxt->dst.val = (s32)ctxt->dst.val; break;		}		break;	case 0xc0 ... 0xc1:		rc = em_grp2(ctxt);		break;	case 0xcc:		/* int3 */		rc = emulate_int(ctxt, 3);		break;	case 0xcd:		/* int n */		rc = emulate_int(ctxt, ctxt->src.val);		break;	case 0xce:		/* into */		if (ctxt->eflags & EFLG_OF)			rc = emulate_int(ctxt, 4);		break;	case 0xd0 ... 0xd1:	/* Grp2 */		rc = em_grp2(ctxt);		break;	case 0xd2 ... 0xd3:	/* Grp2 */		ctxt->src.val = ctxt->regs[VCPU_REGS_RCX];		rc = em_grp2(ctxt);		break;	case 0xe9: /* jmp rel */	case 0xeb: /* jmp rel short */		rc = jmp_rel(ctxt, ctxt->src.val);		ctxt->dst.type = OP_NONE; /* Disable writeback. */		break;	case 0xf4:              /* hlt */		ctxt->ops->halt(ctxt);		break;	case 0xf5:	/* cmc */		/* complement carry flag from eflags reg */		ctxt->eflags ^= EFLG_CF;		break;	case 0xf8: /* clc */		ctxt->eflags &= ~EFLG_CF;		break;	case 0xf9: /* stc */		ctxt->eflags |= EFLG_CF;		break;	case 0xfc: /* cld */		ctxt->eflags &= ~EFLG_DF;		break;	case 0xfd: /* std */		ctxt->eflags |= EFLG_DF;		break;	default:		goto cannot_emulate;	}	if (rc != X86EMUL_CONTINUE)		goto done;writeback:	rc = writeback(ctxt);	if (rc != X86EMUL_CONTINUE)		goto done;	/*	 * restore dst type in case the decoding will be reused	 * (happens for string instruction )	 */	ctxt->dst.type = saved_dst_type;	if ((ctxt->d & SrcMask) == SrcSI)		string_addr_inc(ctxt, seg_override(ctxt),				VCPU_REGS_RSI, &ctxt->src);	if ((ctxt->d & DstMask) == DstDI)		string_addr_inc(ctxt, VCPU_SREG_ES, VCPU_REGS_RDI,				&ctxt->dst);	if (ctxt->rep_prefix && (ctxt->d & String)) {		struct read_cache *r = &ctxt->io_read;		register_address_increment(ctxt, &ctxt->regs[VCPU_REGS_RCX], -1);		if (!string_insn_completed(ctxt)) {			/*			 * Re-enter guest when pio read ahead buffer is empty			 * or, if it is not used, after each 1024 iteration.			 */			if ((r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff) &&			    (r->end == 0 || r->end != r->pos)) {				/*				 * Reset read cache. Usually happens before				 * decode, but since instruction is restarted				 * we have to do it here.				 */				ctxt->mem_read.end = 0;				return EMULATION_RESTART;			}			goto done; /* skip rip writeback */		}	}	ctxt->eip = ctxt->_eip;done:	if (rc == X86EMUL_PROPAGATE_FAULT)		ctxt->have_exception = true;	if (rc == X86EMUL_INTERCEPTED)		return EMULATION_INTERCEPTED;	return (rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK;twobyte_insn:	switch (ctxt->b) {	case 0x09:		/* wbinvd */		(ctxt->ops->wbinvd)(ctxt);		break;	case 0x08:		/* invd */	case 0x0d:		/* GrpP (prefetch) */	case 0x18:		/* Grp16 (prefetch/nop) */		break;	case 0x20: /* mov cr, reg */		ctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg);		break;	case 0x21: /* mov from dr to reg */		ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val);		break;	case 0x40 ... 0x4f:	/* cmov */		ctxt->dst.val = ctxt->dst.orig_val = ctxt->src.val;		if (!test_cc(ctxt->b, ctxt->eflags))			ctxt->dst.type = OP_NONE; /* no writeback */		break;	case 0x80 ... 0x8f: /* jnz rel, etc*/		if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);		break;	case 0x90 ... 0x9f:     /* setcc r/m8 */		ctxt->dst.val = test_cc(ctxt->b, ctxt->eflags);		break;	case 0xa4: /* shld imm8, r, r/m */	case 0xa5: /* shld cl, r, r/m */		emulate_2op_cl(ctxt, "shld");		break;	case 0xac: /* shrd imm8, r, r/m */	case 0xad: /* shrd cl, r, r/m */		emulate_2op_cl(ctxt, "shrd");		break;	case 0xae:              /* clflush */		break;	case 0xb6 ... 0xb7:	/* movzx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (u8) ctxt->src.val						       : (u16) ctxt->src.val;		break;	case 0xbe ... 0xbf:	/* movsx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (s8) ctxt->src.val :							(s16) ctxt->src.val;		break;	case 0xc0 ... 0xc1:	/* xadd */		emulate_2op_SrcV(ctxt, "add");		/* Write back the register source. */		ctxt->src.val = ctxt->dst.orig_val;		write_register_operand(&ctxt->src);		break;	case 0xc3:		/* movnti */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->op_bytes == 4) ? (u32) ctxt->src.val :							(u64) ctxt->src.val;		break;	default:		goto cannot_emulate;	}	if (rc != X86EMUL_CONTINUE)		goto done;	goto writeback;cannot_emulate:	return EMULATION_FAILED;}
int
x86_emulate_insn(struct x86_emulate_ctxt *ctxt)
x86_emulate_insn
struct x86_emulate_ctxt *ctxt
struct x86_emulate_ctxt
x86_emulate_ctxt
*ctxt
*
ctxt
{	struct x86_emulate_ops *ops = ctxt->ops;	int rc = X86EMUL_CONTINUE;	int saved_dst_type = ctxt->dst.type;	ctxt->mem_read.pos = 0;	if (ctxt->mode == X86EMUL_MODE_PROT64 && (ctxt->d & No64)) {		rc = emulate_ud(ctxt);		goto done;	}	/* LOCK prefix is allowed only with some instructions */	if (ctxt->lock_prefix && (!(ctxt->d & Lock) || ctxt->dst.type != OP_MEM)) {		rc = emulate_ud(ctxt);		goto done;	}	if ((ctxt->d & SrcMask) == SrcMemFAddr && ctxt->src.type != OP_MEM) {		rc = emulate_ud(ctxt);		goto done;	}	if ((ctxt->d & Sse)	    && ((ops->get_cr(ctxt, 0) & X86_CR0_EM)		|| !(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))) {		rc = emulate_ud(ctxt);		goto done;	}	if ((ctxt->d & Sse) && (ops->get_cr(ctxt, 0) & X86_CR0_TS)) {		rc = emulate_nm(ctxt);		goto done;	}	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_PRE_EXCEPT);		if (rc != X86EMUL_CONTINUE)			goto done;	}	/* Privileged instruction can be executed only in CPL=0 */	if ((ctxt->d & Priv) && ops->cpl(ctxt)) {		rc = emulate_gp(ctxt, 0);		goto done;	}	/* Instruction can only be executed in protected mode */	if ((ctxt->d & Prot) && !(ctxt->mode & X86EMUL_MODE_PROT)) {		rc = emulate_ud(ctxt);		goto done;	}	/* Do instruction specific permission checks */	if (ctxt->check_perm) {		rc = ctxt->check_perm(ctxt);		if (rc != X86EMUL_CONTINUE)			goto done;	}	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_EXCEPT);		if (rc != X86EMUL_CONTINUE)			goto done;	}	if (ctxt->rep_prefix && (ctxt->d & String)) {		/* All REP prefixes have the same first termination condition */		if (address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX]) == 0) {			ctxt->eip = ctxt->_eip;			goto done;		}	}	if ((ctxt->src.type == OP_MEM) && !(ctxt->d & NoAccess)) {		rc = segmented_read(ctxt, ctxt->src.addr.mem,				    ctxt->src.valptr, ctxt->src.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;		ctxt->src.orig_val64 = ctxt->src.val64;	}	if (ctxt->src2.type == OP_MEM) {		rc = segmented_read(ctxt, ctxt->src2.addr.mem,				    &ctxt->src2.val, ctxt->src2.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;	}	if ((ctxt->d & DstMask) == ImplicitOps)		goto special_insn;	if ((ctxt->dst.type == OP_MEM) && !(ctxt->d & Mov)) {		/* optimisation - avoid slow emulated read if Mov */		rc = segmented_read(ctxt, ctxt->dst.addr.mem,				   &ctxt->dst.val, ctxt->dst.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;	}	ctxt->dst.orig_val = ctxt->dst.val;special_insn:	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_MEMACCESS);		if (rc != X86EMUL_CONTINUE)			goto done;	}	if (ctxt->execute) {		rc = ctxt->execute(ctxt);		if (rc != X86EMUL_CONTINUE)			goto done;		goto writeback;	}	if (ctxt->twobyte)		goto twobyte_insn;	switch (ctxt->b) {	case 0x40 ... 0x47: /* inc r16/r32 */		emulate_1op(ctxt, "inc");		break;	case 0x48 ... 0x4f: /* dec r16/r32 */		emulate_1op(ctxt, "dec");		break;	case 0x63:		/* movsxd */		if (ctxt->mode != X86EMUL_MODE_PROT64)			goto cannot_emulate;		ctxt->dst.val = (s32) ctxt->src.val;		break;	case 0x70 ... 0x7f: /* jcc (short) */		if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);		break;	case 0x8d: /* lea r16/r32, m */		ctxt->dst.val = ctxt->src.addr.mem.ea;		break;	case 0x90 ... 0x97: /* nop / xchg reg, rax */		if (ctxt->dst.addr.reg == &ctxt->regs[VCPU_REGS_RAX])			break;		rc = em_xchg(ctxt);		break;	case 0x98: /* cbw/cwde/cdqe */		switch (ctxt->op_bytes) {		case 2: ctxt->dst.val = (s8)ctxt->dst.val; break;		case 4: ctxt->dst.val = (s16)ctxt->dst.val; break;		case 8: ctxt->dst.val = (s32)ctxt->dst.val; break;		}		break;	case 0xc0 ... 0xc1:		rc = em_grp2(ctxt);		break;	case 0xcc:		/* int3 */		rc = emulate_int(ctxt, 3);		break;	case 0xcd:		/* int n */		rc = emulate_int(ctxt, ctxt->src.val);		break;	case 0xce:		/* into */		if (ctxt->eflags & EFLG_OF)			rc = emulate_int(ctxt, 4);		break;	case 0xd0 ... 0xd1:	/* Grp2 */		rc = em_grp2(ctxt);		break;	case 0xd2 ... 0xd3:	/* Grp2 */		ctxt->src.val = ctxt->regs[VCPU_REGS_RCX];		rc = em_grp2(ctxt);		break;	case 0xe9: /* jmp rel */	case 0xeb: /* jmp rel short */		rc = jmp_rel(ctxt, ctxt->src.val);		ctxt->dst.type = OP_NONE; /* Disable writeback. */		break;	case 0xf4:              /* hlt */		ctxt->ops->halt(ctxt);		break;	case 0xf5:	/* cmc */		/* complement carry flag from eflags reg */		ctxt->eflags ^= EFLG_CF;		break;	case 0xf8: /* clc */		ctxt->eflags &= ~EFLG_CF;		break;	case 0xf9: /* stc */		ctxt->eflags |= EFLG_CF;		break;	case 0xfc: /* cld */		ctxt->eflags &= ~EFLG_DF;		break;	case 0xfd: /* std */		ctxt->eflags |= EFLG_DF;		break;	default:		goto cannot_emulate;	}	if (rc != X86EMUL_CONTINUE)		goto done;writeback:	rc = writeback(ctxt);	if (rc != X86EMUL_CONTINUE)		goto done;	/*	 * restore dst type in case the decoding will be reused	 * (happens for string instruction )	 */	ctxt->dst.type = saved_dst_type;	if ((ctxt->d & SrcMask) == SrcSI)		string_addr_inc(ctxt, seg_override(ctxt),				VCPU_REGS_RSI, &ctxt->src);	if ((ctxt->d & DstMask) == DstDI)		string_addr_inc(ctxt, VCPU_SREG_ES, VCPU_REGS_RDI,				&ctxt->dst);	if (ctxt->rep_prefix && (ctxt->d & String)) {		struct read_cache *r = &ctxt->io_read;		register_address_increment(ctxt, &ctxt->regs[VCPU_REGS_RCX], -1);		if (!string_insn_completed(ctxt)) {			/*			 * Re-enter guest when pio read ahead buffer is empty			 * or, if it is not used, after each 1024 iteration.			 */			if ((r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff) &&			    (r->end == 0 || r->end != r->pos)) {				/*				 * Reset read cache. Usually happens before				 * decode, but since instruction is restarted				 * we have to do it here.				 */				ctxt->mem_read.end = 0;				return EMULATION_RESTART;			}			goto done; /* skip rip writeback */		}	}	ctxt->eip = ctxt->_eip;done:	if (rc == X86EMUL_PROPAGATE_FAULT)		ctxt->have_exception = true;	if (rc == X86EMUL_INTERCEPTED)		return EMULATION_INTERCEPTED;	return (rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK;twobyte_insn:	switch (ctxt->b) {	case 0x09:		/* wbinvd */		(ctxt->ops->wbinvd)(ctxt);		break;	case 0x08:		/* invd */	case 0x0d:		/* GrpP (prefetch) */	case 0x18:		/* Grp16 (prefetch/nop) */		break;	case 0x20: /* mov cr, reg */		ctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg);		break;	case 0x21: /* mov from dr to reg */		ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val);		break;	case 0x40 ... 0x4f:	/* cmov */		ctxt->dst.val = ctxt->dst.orig_val = ctxt->src.val;		if (!test_cc(ctxt->b, ctxt->eflags))			ctxt->dst.type = OP_NONE; /* no writeback */		break;	case 0x80 ... 0x8f: /* jnz rel, etc*/		if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);		break;	case 0x90 ... 0x9f:     /* setcc r/m8 */		ctxt->dst.val = test_cc(ctxt->b, ctxt->eflags);		break;	case 0xa4: /* shld imm8, r, r/m */	case 0xa5: /* shld cl, r, r/m */		emulate_2op_cl(ctxt, "shld");		break;	case 0xac: /* shrd imm8, r, r/m */	case 0xad: /* shrd cl, r, r/m */		emulate_2op_cl(ctxt, "shrd");		break;	case 0xae:              /* clflush */		break;	case 0xb6 ... 0xb7:	/* movzx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (u8) ctxt->src.val						       : (u16) ctxt->src.val;		break;	case 0xbe ... 0xbf:	/* movsx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (s8) ctxt->src.val :							(s16) ctxt->src.val;		break;	case 0xc0 ... 0xc1:	/* xadd */		emulate_2op_SrcV(ctxt, "add");		/* Write back the register source. */		ctxt->src.val = ctxt->dst.orig_val;		write_register_operand(&ctxt->src);		break;	case 0xc3:		/* movnti */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->op_bytes == 4) ? (u32) ctxt->src.val :							(u64) ctxt->src.val;		break;	default:		goto cannot_emulate;	}	if (rc != X86EMUL_CONTINUE)		goto done;	goto writeback;cannot_emulate:	return EMULATION_FAILED;}
struct x86_emulate_ops *ops = ctxt->ops;
struct x86_emulate_ops *ops = ctxt->ops;
struct x86_emulate_ops
x86_emulate_ops
*ops = ctxt->ops
*
ops
= ctxt->ops
ctxt->ops
ctxt
ctxt
ops
int rc = X86EMUL_CONTINUE;
int rc = X86EMUL_CONTINUE;
int
rc = X86EMUL_CONTINUE
rc
= X86EMUL_CONTINUE
X86EMUL_CONTINUE
X86EMUL_CONTINUE
int saved_dst_type = ctxt->dst.type;
int saved_dst_type = ctxt->dst.type;
int
saved_dst_type = ctxt->dst.type
saved_dst_type
= ctxt->dst.type
ctxt->dst.type
ctxt->dst
ctxt
ctxt
dst
type
ctxt->mem_read.pos = 0;
ctxt->mem_read.pos = 0
ctxt->mem_read.pos
ctxt->mem_read
ctxt
ctxt
mem_read
pos
0
if (ctxt->mode == X86EMUL_MODE_PROT64 && (ctxt->d & No64)) {		rc = emulate_ud(ctxt);		goto done;	}
ctxt->mode == X86EMUL_MODE_PROT64 && (ctxt->d & No64)
ctxt->mode == X86EMUL_MODE_PROT64
ctxt->mode
ctxt
ctxt
mode
X86EMUL_MODE_PROT64
X86EMUL_MODE_PROT64
(ctxt->d & No64)
ctxt->d & No64
ctxt->d
ctxt
ctxt
d
No64
No64
{		rc = emulate_ud(ctxt);		goto done;	}
rc = emulate_ud(ctxt);
rc = emulate_ud(ctxt)
rc
rc
emulate_ud(ctxt)
emulate_ud
emulate_ud
ctxt
ctxt
goto done;
done
if (ctxt->lock_prefix && (!(ctxt->d & Lock) || ctxt->dst.type != OP_MEM)) {		rc = emulate_ud(ctxt);		goto done;	}
ctxt->lock_prefix && (!(ctxt->d & Lock) || ctxt->dst.type != OP_MEM)
ctxt->lock_prefix
ctxt
ctxt
lock_prefix
(!(ctxt->d & Lock) || ctxt->dst.type != OP_MEM)
!(ctxt->d & Lock) || ctxt->dst.type != OP_MEM
!(ctxt->d & Lock)
(ctxt->d & Lock)
ctxt->d & Lock
ctxt->d
ctxt
ctxt
d
Lock
Lock
ctxt->dst.type != OP_MEM
ctxt->dst.type
ctxt->dst
ctxt
ctxt
dst
type
OP_MEM
OP_MEM
{		rc = emulate_ud(ctxt);		goto done;	}
rc = emulate_ud(ctxt);
rc = emulate_ud(ctxt)
rc
rc
emulate_ud(ctxt)
emulate_ud
emulate_ud
ctxt
ctxt
goto done;
done
if ((ctxt->d & SrcMask) == SrcMemFAddr && ctxt->src.type != OP_MEM) {		rc = emulate_ud(ctxt);		goto done;	}
(ctxt->d & SrcMask) == SrcMemFAddr && ctxt->src.type != OP_MEM
(ctxt->d & SrcMask) == SrcMemFAddr
(ctxt->d & SrcMask)
ctxt->d & SrcMask
ctxt->d
ctxt
ctxt
d
SrcMask
SrcMask
SrcMemFAddr
SrcMemFAddr
ctxt->src.type != OP_MEM
ctxt->src.type
ctxt->src
ctxt
ctxt
src
type
OP_MEM
OP_MEM
{		rc = emulate_ud(ctxt);		goto done;	}
rc = emulate_ud(ctxt);
rc = emulate_ud(ctxt)
rc
rc
emulate_ud(ctxt)
emulate_ud
emulate_ud
ctxt
ctxt
goto done;
done
if ((ctxt->d & Sse)	    && ((ops->get_cr(ctxt, 0) & X86_CR0_EM)		|| !(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))) {		rc = emulate_ud(ctxt);		goto done;	}
(ctxt->d & Sse)	    && ((ops->get_cr(ctxt, 0) & X86_CR0_EM)		|| !(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))
(ctxt->d & Sse)
ctxt->d & Sse
ctxt->d
ctxt
ctxt
d
Sse
Sse
((ops->get_cr(ctxt, 0) & X86_CR0_EM)		|| !(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR))
(ops->get_cr(ctxt, 0) & X86_CR0_EM)		|| !(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR)
(ops->get_cr(ctxt, 0) & X86_CR0_EM)
ops->get_cr(ctxt, 0) & X86_CR0_EM
ops->get_cr(ctxt, 0)
ops->get_cr
ops
ops
get_cr
ctxt
ctxt
0
X86_CR0_EM
X86_CR0_EM
!(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR)
(ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR)
ops->get_cr(ctxt, 4) & X86_CR4_OSFXSR
ops->get_cr(ctxt, 4)
ops->get_cr
ops
ops
get_cr
ctxt
ctxt
4
X86_CR4_OSFXSR
X86_CR4_OSFXSR
{		rc = emulate_ud(ctxt);		goto done;	}
rc = emulate_ud(ctxt);
rc = emulate_ud(ctxt)
rc
rc
emulate_ud(ctxt)
emulate_ud
emulate_ud
ctxt
ctxt
goto done;
done
if ((ctxt->d & Sse) && (ops->get_cr(ctxt, 0) & X86_CR0_TS)) {		rc = emulate_nm(ctxt);		goto done;	}
(ctxt->d & Sse) && (ops->get_cr(ctxt, 0) & X86_CR0_TS)
(ctxt->d & Sse)
ctxt->d & Sse
ctxt->d
ctxt
ctxt
d
Sse
Sse
(ops->get_cr(ctxt, 0) & X86_CR0_TS)
ops->get_cr(ctxt, 0) & X86_CR0_TS
ops->get_cr(ctxt, 0)
ops->get_cr
ops
ops
get_cr
ctxt
ctxt
0
X86_CR0_TS
X86_CR0_TS
{		rc = emulate_nm(ctxt);		goto done;	}
rc = emulate_nm(ctxt);
rc = emulate_nm(ctxt)
rc
rc
emulate_nm(ctxt)
emulate_nm
emulate_nm
ctxt
ctxt
goto done;
done
if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_PRE_EXCEPT);		if (rc != X86EMUL_CONTINUE)			goto done;	}
unlikely(ctxt->guest_mode) && ctxt->intercept
unlikely(ctxt->guest_mode)
unlikely
unlikely
ctxt->guest_mode
ctxt
ctxt
guest_mode
ctxt->intercept
ctxt
ctxt
intercept
{		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_PRE_EXCEPT);		if (rc != X86EMUL_CONTINUE)			goto done;	}
rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_PRE_EXCEPT);
rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_PRE_EXCEPT)
rc
rc
emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_PRE_EXCEPT)
emulator_check_intercept
emulator_check_intercept
ctxt
ctxt
ctxt->intercept
ctxt
ctxt
intercept
X86_ICPT_PRE_EXCEPT
X86_ICPT_PRE_EXCEPT
if (rc != X86EMUL_CONTINUE)			goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
if ((ctxt->d & Priv) && ops->cpl(ctxt)) {		rc = emulate_gp(ctxt, 0);		goto done;	}
(ctxt->d & Priv) && ops->cpl(ctxt)
(ctxt->d & Priv)
ctxt->d & Priv
ctxt->d
ctxt
ctxt
d
Priv
Priv
ops->cpl(ctxt)
ops->cpl
ops
ops
cpl
ctxt
ctxt
{		rc = emulate_gp(ctxt, 0);		goto done;	}
rc = emulate_gp(ctxt, 0);
rc = emulate_gp(ctxt, 0)
rc
rc
emulate_gp(ctxt, 0)
emulate_gp
emulate_gp
ctxt
ctxt
0
goto done;
done
if ((ctxt->d & Prot) && !(ctxt->mode & X86EMUL_MODE_PROT)) {		rc = emulate_ud(ctxt);		goto done;	}
(ctxt->d & Prot) && !(ctxt->mode & X86EMUL_MODE_PROT)
(ctxt->d & Prot)
ctxt->d & Prot
ctxt->d
ctxt
ctxt
d
Prot
Prot
!(ctxt->mode & X86EMUL_MODE_PROT)
(ctxt->mode & X86EMUL_MODE_PROT)
ctxt->mode & X86EMUL_MODE_PROT
ctxt->mode
ctxt
ctxt
mode
X86EMUL_MODE_PROT
X86EMUL_MODE_PROT
{		rc = emulate_ud(ctxt);		goto done;	}
rc = emulate_ud(ctxt);
rc = emulate_ud(ctxt)
rc
rc
emulate_ud(ctxt)
emulate_ud
emulate_ud
ctxt
ctxt
goto done;
done
if (ctxt->check_perm) {		rc = ctxt->check_perm(ctxt);		if (rc != X86EMUL_CONTINUE)			goto done;	}
ctxt->check_perm
ctxt
ctxt
check_perm
{		rc = ctxt->check_perm(ctxt);		if (rc != X86EMUL_CONTINUE)			goto done;	}
rc = ctxt->check_perm(ctxt);
rc = ctxt->check_perm(ctxt)
rc
rc
ctxt->check_perm(ctxt)
ctxt->check_perm
ctxt
ctxt
check_perm
ctxt
ctxt
if (rc != X86EMUL_CONTINUE)			goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_EXCEPT);		if (rc != X86EMUL_CONTINUE)			goto done;	}
unlikely(ctxt->guest_mode) && ctxt->intercept
unlikely(ctxt->guest_mode)
unlikely
unlikely
ctxt->guest_mode
ctxt
ctxt
guest_mode
ctxt->intercept
ctxt
ctxt
intercept
{		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_EXCEPT);		if (rc != X86EMUL_CONTINUE)			goto done;	}
rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_EXCEPT);
rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_EXCEPT)
rc
rc
emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_EXCEPT)
emulator_check_intercept
emulator_check_intercept
ctxt
ctxt
ctxt->intercept
ctxt
ctxt
intercept
X86_ICPT_POST_EXCEPT
X86_ICPT_POST_EXCEPT
if (rc != X86EMUL_CONTINUE)			goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
if (ctxt->rep_prefix && (ctxt->d & String)) {		/* All REP prefixes have the same first termination condition */		if (address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX]) == 0) {			ctxt->eip = ctxt->_eip;			goto done;		}	}
ctxt->rep_prefix && (ctxt->d & String)
ctxt->rep_prefix
ctxt
ctxt
rep_prefix
(ctxt->d & String)
ctxt->d & String
ctxt->d
ctxt
ctxt
d
String
String
{		/* All REP prefixes have the same first termination condition */		if (address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX]) == 0) {			ctxt->eip = ctxt->_eip;			goto done;		}	}
if (address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX]) == 0) {			ctxt->eip = ctxt->_eip;			goto done;		}
address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX]) == 0
address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX])
address_mask
address_mask
ctxt
ctxt
ctxt->regs[VCPU_REGS_RCX]
ctxt->regs
ctxt
ctxt
regs
VCPU_REGS_RCX
VCPU_REGS_RCX
0
{			ctxt->eip = ctxt->_eip;			goto done;		}
ctxt->eip = ctxt->_eip;
ctxt->eip = ctxt->_eip
ctxt->eip
ctxt
ctxt
eip
ctxt->_eip
ctxt
ctxt
_eip
goto done;
done
if ((ctxt->src.type == OP_MEM) && !(ctxt->d & NoAccess)) {		rc = segmented_read(ctxt, ctxt->src.addr.mem,				    ctxt->src.valptr, ctxt->src.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;		ctxt->src.orig_val64 = ctxt->src.val64;	}
(ctxt->src.type == OP_MEM) && !(ctxt->d & NoAccess)
(ctxt->src.type == OP_MEM)
ctxt->src.type == OP_MEM
ctxt->src.type
ctxt->src
ctxt
ctxt
src
type
OP_MEM
OP_MEM
!(ctxt->d & NoAccess)
(ctxt->d & NoAccess)
ctxt->d & NoAccess
ctxt->d
ctxt
ctxt
d
NoAccess
NoAccess
{		rc = segmented_read(ctxt, ctxt->src.addr.mem,				    ctxt->src.valptr, ctxt->src.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;		ctxt->src.orig_val64 = ctxt->src.val64;	}
rc = segmented_read(ctxt, ctxt->src.addr.mem,				    ctxt->src.valptr, ctxt->src.bytes);
rc = segmented_read(ctxt, ctxt->src.addr.mem,				    ctxt->src.valptr, ctxt->src.bytes)
rc
rc
segmented_read(ctxt, ctxt->src.addr.mem,				    ctxt->src.valptr, ctxt->src.bytes)
segmented_read
segmented_read
ctxt
ctxt
ctxt->src.addr.mem
ctxt->src.addr
ctxt->src
ctxt
ctxt
src
addr
mem
ctxt->src.valptr
ctxt->src
ctxt
ctxt
src
valptr
ctxt->src.bytes
ctxt->src
ctxt
ctxt
src
bytes
if (rc != X86EMUL_CONTINUE)			goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
ctxt->src.orig_val64 = ctxt->src.val64;
ctxt->src.orig_val64 = ctxt->src.val64
ctxt->src.orig_val64
ctxt->src
ctxt
ctxt
src
orig_val64
ctxt->src.val64
ctxt->src
ctxt
ctxt
src
val64
if (ctxt->src2.type == OP_MEM) {		rc = segmented_read(ctxt, ctxt->src2.addr.mem,				    &ctxt->src2.val, ctxt->src2.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;	}
ctxt->src2.type == OP_MEM
ctxt->src2.type
ctxt->src2
ctxt
ctxt
src2
type
OP_MEM
OP_MEM
{		rc = segmented_read(ctxt, ctxt->src2.addr.mem,				    &ctxt->src2.val, ctxt->src2.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;	}
rc = segmented_read(ctxt, ctxt->src2.addr.mem,				    &ctxt->src2.val, ctxt->src2.bytes);
rc = segmented_read(ctxt, ctxt->src2.addr.mem,				    &ctxt->src2.val, ctxt->src2.bytes)
rc
rc
segmented_read(ctxt, ctxt->src2.addr.mem,				    &ctxt->src2.val, ctxt->src2.bytes)
segmented_read
segmented_read
ctxt
ctxt
ctxt->src2.addr.mem
ctxt->src2.addr
ctxt->src2
ctxt
ctxt
src2
addr
mem
&ctxt->src2.val
ctxt->src2.val
ctxt->src2
ctxt
ctxt
src2
val
ctxt->src2.bytes
ctxt->src2
ctxt
ctxt
src2
bytes
if (rc != X86EMUL_CONTINUE)			goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
if ((ctxt->d & DstMask) == ImplicitOps)		goto special_insn;
(ctxt->d & DstMask) == ImplicitOps
(ctxt->d & DstMask)
ctxt->d & DstMask
ctxt->d
ctxt
ctxt
d
DstMask
DstMask
ImplicitOps
ImplicitOps
goto special_insn;
special_insn
if ((ctxt->dst.type == OP_MEM) && !(ctxt->d & Mov)) {		/* optimisation - avoid slow emulated read if Mov */		rc = segmented_read(ctxt, ctxt->dst.addr.mem,				   &ctxt->dst.val, ctxt->dst.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;	}
(ctxt->dst.type == OP_MEM) && !(ctxt->d & Mov)
(ctxt->dst.type == OP_MEM)
ctxt->dst.type == OP_MEM
ctxt->dst.type
ctxt->dst
ctxt
ctxt
dst
type
OP_MEM
OP_MEM
!(ctxt->d & Mov)
(ctxt->d & Mov)
ctxt->d & Mov
ctxt->d
ctxt
ctxt
d
Mov
Mov
{		/* optimisation - avoid slow emulated read if Mov */		rc = segmented_read(ctxt, ctxt->dst.addr.mem,				   &ctxt->dst.val, ctxt->dst.bytes);		if (rc != X86EMUL_CONTINUE)			goto done;	}
rc = segmented_read(ctxt, ctxt->dst.addr.mem,				   &ctxt->dst.val, ctxt->dst.bytes);
rc = segmented_read(ctxt, ctxt->dst.addr.mem,				   &ctxt->dst.val, ctxt->dst.bytes)
rc
rc
segmented_read(ctxt, ctxt->dst.addr.mem,				   &ctxt->dst.val, ctxt->dst.bytes)
segmented_read
segmented_read
ctxt
ctxt
ctxt->dst.addr.mem
ctxt->dst.addr
ctxt->dst
ctxt
ctxt
dst
addr
mem
&ctxt->dst.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
ctxt->dst.bytes
ctxt->dst
ctxt
ctxt
dst
bytes
if (rc != X86EMUL_CONTINUE)			goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
ctxt->dst.orig_val = ctxt->dst.val;
ctxt->dst.orig_val = ctxt->dst.val
ctxt->dst.orig_val
ctxt->dst
ctxt
ctxt
dst
orig_val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
special_insn:	if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_MEMACCESS);		if (rc != X86EMUL_CONTINUE)			goto done;	}
special_insn
if (unlikely(ctxt->guest_mode) && ctxt->intercept) {		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_MEMACCESS);		if (rc != X86EMUL_CONTINUE)			goto done;	}
unlikely(ctxt->guest_mode) && ctxt->intercept
unlikely(ctxt->guest_mode)
unlikely
unlikely
ctxt->guest_mode
ctxt
ctxt
guest_mode
ctxt->intercept
ctxt
ctxt
intercept
{		rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_MEMACCESS);		if (rc != X86EMUL_CONTINUE)			goto done;	}
rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_MEMACCESS);
rc = emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_MEMACCESS)
rc
rc
emulator_check_intercept(ctxt, ctxt->intercept,					      X86_ICPT_POST_MEMACCESS)
emulator_check_intercept
emulator_check_intercept
ctxt
ctxt
ctxt->intercept
ctxt
ctxt
intercept
X86_ICPT_POST_MEMACCESS
X86_ICPT_POST_MEMACCESS
if (rc != X86EMUL_CONTINUE)			goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
if (ctxt->execute) {		rc = ctxt->execute(ctxt);		if (rc != X86EMUL_CONTINUE)			goto done;		goto writeback;	}
ctxt->execute
ctxt
ctxt
execute
{		rc = ctxt->execute(ctxt);		if (rc != X86EMUL_CONTINUE)			goto done;		goto writeback;	}
rc = ctxt->execute(ctxt);
rc = ctxt->execute(ctxt)
rc
rc
ctxt->execute(ctxt)
ctxt->execute
ctxt
ctxt
execute
ctxt
ctxt
if (rc != X86EMUL_CONTINUE)			goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
goto writeback;
writeback
if (ctxt->twobyte)		goto twobyte_insn;
ctxt->twobyte
ctxt
ctxt
twobyte
goto twobyte_insn;
twobyte_insn
switch (ctxt->b) {	case 0x40 ... 0x47: /* inc r16/r32 */		emulate_1op(ctxt, "inc");		break;	case 0x48 ... 0x4f: /* dec r16/r32 */		emulate_1op(ctxt, "dec");		break;	case 0x63:		/* movsxd */		if (ctxt->mode != X86EMUL_MODE_PROT64)			goto cannot_emulate;		ctxt->dst.val = (s32) ctxt->src.val;		break;	case 0x70 ... 0x7f: /* jcc (short) */		if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);		break;	case 0x8d: /* lea r16/r32, m */		ctxt->dst.val = ctxt->src.addr.mem.ea;		break;	case 0x90 ... 0x97: /* nop / xchg reg, rax */		if (ctxt->dst.addr.reg == &ctxt->regs[VCPU_REGS_RAX])			break;		rc = em_xchg(ctxt);		break;	case 0x98: /* cbw/cwde/cdqe */		switch (ctxt->op_bytes) {		case 2: ctxt->dst.val = (s8)ctxt->dst.val; break;		case 4: ctxt->dst.val = (s16)ctxt->dst.val; break;		case 8: ctxt->dst.val = (s32)ctxt->dst.val; break;		}		break;	case 0xc0 ... 0xc1:		rc = em_grp2(ctxt);		break;	case 0xcc:		/* int3 */		rc = emulate_int(ctxt, 3);		break;	case 0xcd:		/* int n */		rc = emulate_int(ctxt, ctxt->src.val);		break;	case 0xce:		/* into */		if (ctxt->eflags & EFLG_OF)			rc = emulate_int(ctxt, 4);		break;	case 0xd0 ... 0xd1:	/* Grp2 */		rc = em_grp2(ctxt);		break;	case 0xd2 ... 0xd3:	/* Grp2 */		ctxt->src.val = ctxt->regs[VCPU_REGS_RCX];		rc = em_grp2(ctxt);		break;	case 0xe9: /* jmp rel */	case 0xeb: /* jmp rel short */		rc = jmp_rel(ctxt, ctxt->src.val);		ctxt->dst.type = OP_NONE; /* Disable writeback. */		break;	case 0xf4:              /* hlt */		ctxt->ops->halt(ctxt);		break;	case 0xf5:	/* cmc */		/* complement carry flag from eflags reg */		ctxt->eflags ^= EFLG_CF;		break;	case 0xf8: /* clc */		ctxt->eflags &= ~EFLG_CF;		break;	case 0xf9: /* stc */		ctxt->eflags |= EFLG_CF;		break;	case 0xfc: /* cld */		ctxt->eflags &= ~EFLG_DF;		break;	case 0xfd: /* std */		ctxt->eflags |= EFLG_DF;		break;	default:		goto cannot_emulate;	}
ctxt->b
ctxt
ctxt
b
{	case 0x40 ... 0x47: /* inc r16/r32 */		emulate_1op(ctxt, "inc");		break;	case 0x48 ... 0x4f: /* dec r16/r32 */		emulate_1op(ctxt, "dec");		break;	case 0x63:		/* movsxd */		if (ctxt->mode != X86EMUL_MODE_PROT64)			goto cannot_emulate;		ctxt->dst.val = (s32) ctxt->src.val;		break;	case 0x70 ... 0x7f: /* jcc (short) */		if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);		break;	case 0x8d: /* lea r16/r32, m */		ctxt->dst.val = ctxt->src.addr.mem.ea;		break;	case 0x90 ... 0x97: /* nop / xchg reg, rax */		if (ctxt->dst.addr.reg == &ctxt->regs[VCPU_REGS_RAX])			break;		rc = em_xchg(ctxt);		break;	case 0x98: /* cbw/cwde/cdqe */		switch (ctxt->op_bytes) {		case 2: ctxt->dst.val = (s8)ctxt->dst.val; break;		case 4: ctxt->dst.val = (s16)ctxt->dst.val; break;		case 8: ctxt->dst.val = (s32)ctxt->dst.val; break;		}		break;	case 0xc0 ... 0xc1:		rc = em_grp2(ctxt);		break;	case 0xcc:		/* int3 */		rc = emulate_int(ctxt, 3);		break;	case 0xcd:		/* int n */		rc = emulate_int(ctxt, ctxt->src.val);		break;	case 0xce:		/* into */		if (ctxt->eflags & EFLG_OF)			rc = emulate_int(ctxt, 4);		break;	case 0xd0 ... 0xd1:	/* Grp2 */		rc = em_grp2(ctxt);		break;	case 0xd2 ... 0xd3:	/* Grp2 */		ctxt->src.val = ctxt->regs[VCPU_REGS_RCX];		rc = em_grp2(ctxt);		break;	case 0xe9: /* jmp rel */	case 0xeb: /* jmp rel short */		rc = jmp_rel(ctxt, ctxt->src.val);		ctxt->dst.type = OP_NONE; /* Disable writeback. */		break;	case 0xf4:              /* hlt */		ctxt->ops->halt(ctxt);		break;	case 0xf5:	/* cmc */		/* complement carry flag from eflags reg */		ctxt->eflags ^= EFLG_CF;		break;	case 0xf8: /* clc */		ctxt->eflags &= ~EFLG_CF;		break;	case 0xf9: /* stc */		ctxt->eflags |= EFLG_CF;		break;	case 0xfc: /* cld */		ctxt->eflags &= ~EFLG_DF;		break;	case 0xfd: /* std */		ctxt->eflags |= EFLG_DF;		break;	default:		goto cannot_emulate;	}
case 0x40 ... 0x47:
0x40 ... 0x47
0x40
0x47
emulate_1op(ctxt, "inc");
emulate_1op(ctxt, "inc")
emulate_1op
emulate_1op
ctxt
ctxt
"inc"
break;
case 0x48 ... 0x4f:
0x48 ... 0x4f
0x48
0x4f
emulate_1op(ctxt, "dec");
emulate_1op(ctxt, "dec")
emulate_1op
emulate_1op
ctxt
ctxt
"dec"
break;
case 0x63:
0x63
if (ctxt->mode != X86EMUL_MODE_PROT64)			goto cannot_emulate;
ctxt->mode != X86EMUL_MODE_PROT64
ctxt->mode
ctxt
ctxt
mode
X86EMUL_MODE_PROT64
X86EMUL_MODE_PROT64
goto cannot_emulate;
cannot_emulate
ctxt->dst.val = (s32) ctxt->src.val;
ctxt->dst.val = (s32) ctxt->src.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
(s32) ctxt->src.val
s32
s32
s32

ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
break;
case 0x70 ... 0x7f:
0x70 ... 0x7f
0x70
0x7f
if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);
test_cc(ctxt->b, ctxt->eflags)
test_cc
test_cc
ctxt->b
ctxt
ctxt
b
ctxt->eflags
ctxt
ctxt
eflags
rc = jmp_rel(ctxt, ctxt->src.val);
rc = jmp_rel(ctxt, ctxt->src.val)
rc
rc
jmp_rel(ctxt, ctxt->src.val)
jmp_rel
jmp_rel
ctxt
ctxt
ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
break;
case 0x8d:
0x8d
ctxt->dst.val = ctxt->src.addr.mem.ea;
ctxt->dst.val = ctxt->src.addr.mem.ea
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
ctxt->src.addr.mem.ea
ctxt->src.addr.mem
ctxt->src.addr
ctxt->src
ctxt
ctxt
src
addr
mem
ea
break;
case 0x90 ... 0x97:
0x90 ... 0x97
0x90
0x97
if (ctxt->dst.addr.reg == &ctxt->regs[VCPU_REGS_RAX])			break;
ctxt->dst.addr.reg == &ctxt->regs[VCPU_REGS_RAX]
ctxt->dst.addr.reg
ctxt->dst.addr
ctxt->dst
ctxt
ctxt
dst
addr
reg
&ctxt->regs[VCPU_REGS_RAX]
ctxt->regs[VCPU_REGS_RAX]
ctxt->regs
ctxt
ctxt
regs
VCPU_REGS_RAX
VCPU_REGS_RAX
break;
rc = em_xchg(ctxt);
rc = em_xchg(ctxt)
rc
rc
em_xchg(ctxt)
em_xchg
em_xchg
ctxt
ctxt
break;
case 0x98:
0x98
switch (ctxt->op_bytes) {		case 2: ctxt->dst.val = (s8)ctxt->dst.val; break;		case 4: ctxt->dst.val = (s16)ctxt->dst.val; break;		case 8: ctxt->dst.val = (s32)ctxt->dst.val; break;		}
ctxt->op_bytes
ctxt
ctxt
op_bytes
{		case 2: ctxt->dst.val = (s8)ctxt->dst.val; break;		case 4: ctxt->dst.val = (s16)ctxt->dst.val; break;		case 8: ctxt->dst.val = (s32)ctxt->dst.val; break;		}
case 2:
2
ctxt->dst.val = (s8)ctxt->dst.val;
ctxt->dst.val = (s8)ctxt->dst.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
(s8)ctxt->dst.val
s8
s8
s8

ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
break;
case 4:
4
ctxt->dst.val = (s16)ctxt->dst.val;
ctxt->dst.val = (s16)ctxt->dst.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
(s16)ctxt->dst.val
s16
s16
s16

ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
break;
case 8:
8
ctxt->dst.val = (s32)ctxt->dst.val;
ctxt->dst.val = (s32)ctxt->dst.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
(s32)ctxt->dst.val
s32
s32
s32

ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
break;
break;
case 0xc0 ... 0xc1:
0xc0 ... 0xc1
0xc0
0xc1
rc = em_grp2(ctxt);
rc = em_grp2(ctxt)
rc
rc
em_grp2(ctxt)
em_grp2
em_grp2
ctxt
ctxt
break;
case 0xcc:
0xcc
rc = emulate_int(ctxt, 3);
rc = emulate_int(ctxt, 3)
rc
rc
emulate_int(ctxt, 3)
emulate_int
emulate_int
ctxt
ctxt
3
break;
case 0xcd:
0xcd
rc = emulate_int(ctxt, ctxt->src.val);
rc = emulate_int(ctxt, ctxt->src.val)
rc
rc
emulate_int(ctxt, ctxt->src.val)
emulate_int
emulate_int
ctxt
ctxt
ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
break;
case 0xce:
0xce
if (ctxt->eflags & EFLG_OF)			rc = emulate_int(ctxt, 4);
ctxt->eflags & EFLG_OF
ctxt->eflags
ctxt
ctxt
eflags
EFLG_OF
EFLG_OF
rc = emulate_int(ctxt, 4);
rc = emulate_int(ctxt, 4)
rc
rc
emulate_int(ctxt, 4)
emulate_int
emulate_int
ctxt
ctxt
4
break;
case 0xd0 ... 0xd1:
0xd0 ... 0xd1
0xd0
0xd1
rc = em_grp2(ctxt);
rc = em_grp2(ctxt)
rc
rc
em_grp2(ctxt)
em_grp2
em_grp2
ctxt
ctxt
break;
case 0xd2 ... 0xd3:
0xd2 ... 0xd3
0xd2
0xd3
ctxt->src.val = ctxt->regs[VCPU_REGS_RCX];
ctxt->src.val = ctxt->regs[VCPU_REGS_RCX]
ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
ctxt->regs[VCPU_REGS_RCX]
ctxt->regs
ctxt
ctxt
regs
VCPU_REGS_RCX
VCPU_REGS_RCX
rc = em_grp2(ctxt);
rc = em_grp2(ctxt)
rc
rc
em_grp2(ctxt)
em_grp2
em_grp2
ctxt
ctxt
break;
case 0xe9:
0xe9
case 0xeb:
0xeb
rc = jmp_rel(ctxt, ctxt->src.val);
rc = jmp_rel(ctxt, ctxt->src.val)
rc
rc
jmp_rel(ctxt, ctxt->src.val)
jmp_rel
jmp_rel
ctxt
ctxt
ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
ctxt->dst.type = OP_NONE;
ctxt->dst.type = OP_NONE
ctxt->dst.type
ctxt->dst
ctxt
ctxt
dst
type
OP_NONE
OP_NONE
break;
case 0xf4:
0xf4
ctxt->ops->halt(ctxt);
ctxt->ops->halt(ctxt)
ctxt->ops->halt
ctxt->ops
ctxt
ctxt
ops
halt
ctxt
ctxt
break;
case 0xf5:
0xf5
ctxt->eflags ^= EFLG_CF;
ctxt->eflags ^= EFLG_CF
ctxt->eflags
ctxt
ctxt
eflags
EFLG_CF
EFLG_CF
break;
case 0xf8:
0xf8
ctxt->eflags &= ~EFLG_CF;
ctxt->eflags &= ~EFLG_CF
ctxt->eflags
ctxt
ctxt
eflags
~EFLG_CF
EFLG_CF
EFLG_CF
break;
case 0xf9:
0xf9
ctxt->eflags |= EFLG_CF;
ctxt->eflags |= EFLG_CF
ctxt->eflags
ctxt
ctxt
eflags
EFLG_CF
EFLG_CF
break;
case 0xfc:
0xfc
ctxt->eflags &= ~EFLG_DF;
ctxt->eflags &= ~EFLG_DF
ctxt->eflags
ctxt
ctxt
eflags
~EFLG_DF
EFLG_DF
EFLG_DF
break;
case 0xfd:
0xfd
ctxt->eflags |= EFLG_DF;
ctxt->eflags |= EFLG_DF
ctxt->eflags
ctxt
ctxt
eflags
EFLG_DF
EFLG_DF
break;
default:
goto cannot_emulate;
cannot_emulate
if (rc != X86EMUL_CONTINUE)		goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
writeback:	rc = writeback(ctxt);
writeback
rc = writeback(ctxt);
rc = writeback(ctxt)
rc
rc
writeback(ctxt)
writeback
writeback
ctxt
ctxt
if (rc != X86EMUL_CONTINUE)		goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
ctxt->dst.type = saved_dst_type;
ctxt->dst.type = saved_dst_type
ctxt->dst.type
ctxt->dst
ctxt
ctxt
dst
type
saved_dst_type
saved_dst_type
if ((ctxt->d & SrcMask) == SrcSI)		string_addr_inc(ctxt, seg_override(ctxt),				VCPU_REGS_RSI, &ctxt->src);
(ctxt->d & SrcMask) == SrcSI
(ctxt->d & SrcMask)
ctxt->d & SrcMask
ctxt->d
ctxt
ctxt
d
SrcMask
SrcMask
SrcSI
SrcSI
string_addr_inc(ctxt, seg_override(ctxt),				VCPU_REGS_RSI, &ctxt->src);
string_addr_inc(ctxt, seg_override(ctxt),				VCPU_REGS_RSI, &ctxt->src)
string_addr_inc
string_addr_inc
ctxt
ctxt
seg_override(ctxt)
seg_override
seg_override
ctxt
ctxt
VCPU_REGS_RSI
VCPU_REGS_RSI
&ctxt->src
ctxt->src
ctxt
ctxt
src
if ((ctxt->d & DstMask) == DstDI)		string_addr_inc(ctxt, VCPU_SREG_ES, VCPU_REGS_RDI,				&ctxt->dst);
(ctxt->d & DstMask) == DstDI
(ctxt->d & DstMask)
ctxt->d & DstMask
ctxt->d
ctxt
ctxt
d
DstMask
DstMask
DstDI
DstDI
string_addr_inc(ctxt, VCPU_SREG_ES, VCPU_REGS_RDI,				&ctxt->dst);
string_addr_inc(ctxt, VCPU_SREG_ES, VCPU_REGS_RDI,				&ctxt->dst)
string_addr_inc
string_addr_inc
ctxt
ctxt
VCPU_SREG_ES
VCPU_SREG_ES
VCPU_REGS_RDI
VCPU_REGS_RDI
&ctxt->dst
ctxt->dst
ctxt
ctxt
dst
if (ctxt->rep_prefix && (ctxt->d & String)) {		struct read_cache *r = &ctxt->io_read;		register_address_increment(ctxt, &ctxt->regs[VCPU_REGS_RCX], -1);		if (!string_insn_completed(ctxt)) {			/*			 * Re-enter guest when pio read ahead buffer is empty			 * or, if it is not used, after each 1024 iteration.			 */			if ((r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff) &&			    (r->end == 0 || r->end != r->pos)) {				/*				 * Reset read cache. Usually happens before				 * decode, but since instruction is restarted				 * we have to do it here.				 */				ctxt->mem_read.end = 0;				return EMULATION_RESTART;			}			goto done; /* skip rip writeback */		}	}
ctxt->rep_prefix && (ctxt->d & String)
ctxt->rep_prefix
ctxt
ctxt
rep_prefix
(ctxt->d & String)
ctxt->d & String
ctxt->d
ctxt
ctxt
d
String
String
{		struct read_cache *r = &ctxt->io_read;		register_address_increment(ctxt, &ctxt->regs[VCPU_REGS_RCX], -1);		if (!string_insn_completed(ctxt)) {			/*			 * Re-enter guest when pio read ahead buffer is empty			 * or, if it is not used, after each 1024 iteration.			 */			if ((r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff) &&			    (r->end == 0 || r->end != r->pos)) {				/*				 * Reset read cache. Usually happens before				 * decode, but since instruction is restarted				 * we have to do it here.				 */				ctxt->mem_read.end = 0;				return EMULATION_RESTART;			}			goto done; /* skip rip writeback */		}	}
struct read_cache *r = &ctxt->io_read;
struct read_cache *r = &ctxt->io_read;
struct read_cache
read_cache
*r = &ctxt->io_read
*
r
= &ctxt->io_read
&ctxt->io_read
ctxt->io_read
ctxt
ctxt
io_read
register_address_increment(ctxt, &ctxt->regs[VCPU_REGS_RCX], -1);
register_address_increment(ctxt, &ctxt->regs[VCPU_REGS_RCX], -1)
register_address_increment
register_address_increment
ctxt
ctxt
&ctxt->regs[VCPU_REGS_RCX]
ctxt->regs[VCPU_REGS_RCX]
ctxt->regs
ctxt
ctxt
regs
VCPU_REGS_RCX
VCPU_REGS_RCX
-1
1
if (!string_insn_completed(ctxt)) {			/*			 * Re-enter guest when pio read ahead buffer is empty			 * or, if it is not used, after each 1024 iteration.			 */			if ((r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff) &&			    (r->end == 0 || r->end != r->pos)) {				/*				 * Reset read cache. Usually happens before				 * decode, but since instruction is restarted				 * we have to do it here.				 */				ctxt->mem_read.end = 0;				return EMULATION_RESTART;			}			goto done; /* skip rip writeback */		}
!string_insn_completed(ctxt)
string_insn_completed(ctxt)
string_insn_completed
string_insn_completed
ctxt
ctxt
{			/*			 * Re-enter guest when pio read ahead buffer is empty			 * or, if it is not used, after each 1024 iteration.			 */			if ((r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff) &&			    (r->end == 0 || r->end != r->pos)) {				/*				 * Reset read cache. Usually happens before				 * decode, but since instruction is restarted				 * we have to do it here.				 */				ctxt->mem_read.end = 0;				return EMULATION_RESTART;			}			goto done; /* skip rip writeback */		}
if ((r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff) &&			    (r->end == 0 || r->end != r->pos)) {				/*				 * Reset read cache. Usually happens before				 * decode, but since instruction is restarted				 * we have to do it here.				 */				ctxt->mem_read.end = 0;				return EMULATION_RESTART;			}
(r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff) &&			    (r->end == 0 || r->end != r->pos)
(r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff)
r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff
r->end != 0
r->end
r
r
end
0
ctxt->regs[VCPU_REGS_RCX] & 0x3ff
ctxt->regs[VCPU_REGS_RCX]
ctxt->regs
ctxt
ctxt
regs
VCPU_REGS_RCX
VCPU_REGS_RCX
0x3ff
(r->end == 0 || r->end != r->pos)
r->end == 0 || r->end != r->pos
r->end == 0
r->end
r
r
end
0
r->end != r->pos
r->end
r
r
end
r->pos
r
r
pos
{				/*				 * Reset read cache. Usually happens before				 * decode, but since instruction is restarted				 * we have to do it here.				 */				ctxt->mem_read.end = 0;				return EMULATION_RESTART;			}
ctxt->mem_read.end = 0;
ctxt->mem_read.end = 0
ctxt->mem_read.end
ctxt->mem_read
ctxt
ctxt
mem_read
end
0
return EMULATION_RESTART;
EMULATION_RESTART
EMULATION_RESTART
goto done;
done
ctxt->eip = ctxt->_eip;
ctxt->eip = ctxt->_eip
ctxt->eip
ctxt
ctxt
eip
ctxt->_eip
ctxt
ctxt
_eip
done:	if (rc == X86EMUL_PROPAGATE_FAULT)		ctxt->have_exception = true;
done
if (rc == X86EMUL_PROPAGATE_FAULT)		ctxt->have_exception = true;
rc == X86EMUL_PROPAGATE_FAULT
rc
rc
X86EMUL_PROPAGATE_FAULT
X86EMUL_PROPAGATE_FAULT
ctxt->have_exception = true;
ctxt->have_exception = true
ctxt->have_exception
ctxt
ctxt
have_exception
true
if (rc == X86EMUL_INTERCEPTED)		return EMULATION_INTERCEPTED;
rc == X86EMUL_INTERCEPTED
rc
rc
X86EMUL_INTERCEPTED
X86EMUL_INTERCEPTED
return EMULATION_INTERCEPTED;
EMULATION_INTERCEPTED
EMULATION_INTERCEPTED
return (rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK;
(rc == X86EMUL_UNHANDLEABLE) ? EMULATION_FAILED : EMULATION_OK
(rc == X86EMUL_UNHANDLEABLE)
rc == X86EMUL_UNHANDLEABLE
rc
rc
X86EMUL_UNHANDLEABLE
X86EMUL_UNHANDLEABLE
EMULATION_FAILED
EMULATION_FAILED
EMULATION_OK
EMULATION_OK
twobyte_insn:	switch (ctxt->b) {	case 0x09:		/* wbinvd */		(ctxt->ops->wbinvd)(ctxt);		break;	case 0x08:		/* invd */	case 0x0d:		/* GrpP (prefetch) */	case 0x18:		/* Grp16 (prefetch/nop) */		break;	case 0x20: /* mov cr, reg */		ctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg);		break;	case 0x21: /* mov from dr to reg */		ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val);		break;	case 0x40 ... 0x4f:	/* cmov */		ctxt->dst.val = ctxt->dst.orig_val = ctxt->src.val;		if (!test_cc(ctxt->b, ctxt->eflags))			ctxt->dst.type = OP_NONE; /* no writeback */		break;	case 0x80 ... 0x8f: /* jnz rel, etc*/		if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);		break;	case 0x90 ... 0x9f:     /* setcc r/m8 */		ctxt->dst.val = test_cc(ctxt->b, ctxt->eflags);		break;	case 0xa4: /* shld imm8, r, r/m */	case 0xa5: /* shld cl, r, r/m */		emulate_2op_cl(ctxt, "shld");		break;	case 0xac: /* shrd imm8, r, r/m */	case 0xad: /* shrd cl, r, r/m */		emulate_2op_cl(ctxt, "shrd");		break;	case 0xae:              /* clflush */		break;	case 0xb6 ... 0xb7:	/* movzx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (u8) ctxt->src.val						       : (u16) ctxt->src.val;		break;	case 0xbe ... 0xbf:	/* movsx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (s8) ctxt->src.val :							(s16) ctxt->src.val;		break;	case 0xc0 ... 0xc1:	/* xadd */		emulate_2op_SrcV(ctxt, "add");		/* Write back the register source. */		ctxt->src.val = ctxt->dst.orig_val;		write_register_operand(&ctxt->src);		break;	case 0xc3:		/* movnti */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->op_bytes == 4) ? (u32) ctxt->src.val :							(u64) ctxt->src.val;		break;	default:		goto cannot_emulate;	}
twobyte_insn
switch (ctxt->b) {	case 0x09:		/* wbinvd */		(ctxt->ops->wbinvd)(ctxt);		break;	case 0x08:		/* invd */	case 0x0d:		/* GrpP (prefetch) */	case 0x18:		/* Grp16 (prefetch/nop) */		break;	case 0x20: /* mov cr, reg */		ctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg);		break;	case 0x21: /* mov from dr to reg */		ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val);		break;	case 0x40 ... 0x4f:	/* cmov */		ctxt->dst.val = ctxt->dst.orig_val = ctxt->src.val;		if (!test_cc(ctxt->b, ctxt->eflags))			ctxt->dst.type = OP_NONE; /* no writeback */		break;	case 0x80 ... 0x8f: /* jnz rel, etc*/		if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);		break;	case 0x90 ... 0x9f:     /* setcc r/m8 */		ctxt->dst.val = test_cc(ctxt->b, ctxt->eflags);		break;	case 0xa4: /* shld imm8, r, r/m */	case 0xa5: /* shld cl, r, r/m */		emulate_2op_cl(ctxt, "shld");		break;	case 0xac: /* shrd imm8, r, r/m */	case 0xad: /* shrd cl, r, r/m */		emulate_2op_cl(ctxt, "shrd");		break;	case 0xae:              /* clflush */		break;	case 0xb6 ... 0xb7:	/* movzx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (u8) ctxt->src.val						       : (u16) ctxt->src.val;		break;	case 0xbe ... 0xbf:	/* movsx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (s8) ctxt->src.val :							(s16) ctxt->src.val;		break;	case 0xc0 ... 0xc1:	/* xadd */		emulate_2op_SrcV(ctxt, "add");		/* Write back the register source. */		ctxt->src.val = ctxt->dst.orig_val;		write_register_operand(&ctxt->src);		break;	case 0xc3:		/* movnti */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->op_bytes == 4) ? (u32) ctxt->src.val :							(u64) ctxt->src.val;		break;	default:		goto cannot_emulate;	}
ctxt->b
ctxt
ctxt
b
{	case 0x09:		/* wbinvd */		(ctxt->ops->wbinvd)(ctxt);		break;	case 0x08:		/* invd */	case 0x0d:		/* GrpP (prefetch) */	case 0x18:		/* Grp16 (prefetch/nop) */		break;	case 0x20: /* mov cr, reg */		ctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg);		break;	case 0x21: /* mov from dr to reg */		ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val);		break;	case 0x40 ... 0x4f:	/* cmov */		ctxt->dst.val = ctxt->dst.orig_val = ctxt->src.val;		if (!test_cc(ctxt->b, ctxt->eflags))			ctxt->dst.type = OP_NONE; /* no writeback */		break;	case 0x80 ... 0x8f: /* jnz rel, etc*/		if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);		break;	case 0x90 ... 0x9f:     /* setcc r/m8 */		ctxt->dst.val = test_cc(ctxt->b, ctxt->eflags);		break;	case 0xa4: /* shld imm8, r, r/m */	case 0xa5: /* shld cl, r, r/m */		emulate_2op_cl(ctxt, "shld");		break;	case 0xac: /* shrd imm8, r, r/m */	case 0xad: /* shrd cl, r, r/m */		emulate_2op_cl(ctxt, "shrd");		break;	case 0xae:              /* clflush */		break;	case 0xb6 ... 0xb7:	/* movzx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (u8) ctxt->src.val						       : (u16) ctxt->src.val;		break;	case 0xbe ... 0xbf:	/* movsx */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->d & ByteOp) ? (s8) ctxt->src.val :							(s16) ctxt->src.val;		break;	case 0xc0 ... 0xc1:	/* xadd */		emulate_2op_SrcV(ctxt, "add");		/* Write back the register source. */		ctxt->src.val = ctxt->dst.orig_val;		write_register_operand(&ctxt->src);		break;	case 0xc3:		/* movnti */		ctxt->dst.bytes = ctxt->op_bytes;		ctxt->dst.val = (ctxt->op_bytes == 4) ? (u32) ctxt->src.val :							(u64) ctxt->src.val;		break;	default:		goto cannot_emulate;	}
case 0x09:
0x09
(ctxt->ops->wbinvd)(ctxt);
(ctxt->ops->wbinvd)(ctxt)
(ctxt->ops->wbinvd)
ctxt->ops->wbinvd
ctxt->ops
ctxt
ctxt
ops
wbinvd
ctxt
ctxt
break;
case 0x08:
0x08
case 0x0d:
0x0d
case 0x18:
0x18
break;
case 0x20:
0x20
ctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg);
ctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg)
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
ops->get_cr(ctxt, ctxt->modrm_reg)
ops->get_cr
ops
ops
get_cr
ctxt
ctxt
ctxt->modrm_reg
ctxt
ctxt
modrm_reg
break;
case 0x21:
0x21
ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val);
ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val)
ops->get_dr
ops
ops
get_dr
ctxt
ctxt
ctxt->modrm_reg
ctxt
ctxt
modrm_reg
&ctxt->dst.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
break;
case 0x40 ... 0x4f:
0x40 ... 0x4f
0x40
0x4f
ctxt->dst.val = ctxt->dst.orig_val = ctxt->src.val;
ctxt->dst.val = ctxt->dst.orig_val = ctxt->src.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
ctxt->dst.orig_val = ctxt->src.val
ctxt->dst.orig_val
ctxt->dst
ctxt
ctxt
dst
orig_val
ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
if (!test_cc(ctxt->b, ctxt->eflags))			ctxt->dst.type = OP_NONE;
!test_cc(ctxt->b, ctxt->eflags)
test_cc(ctxt->b, ctxt->eflags)
test_cc
test_cc
ctxt->b
ctxt
ctxt
b
ctxt->eflags
ctxt
ctxt
eflags
ctxt->dst.type = OP_NONE;
ctxt->dst.type = OP_NONE
ctxt->dst.type
ctxt->dst
ctxt
ctxt
dst
type
OP_NONE
OP_NONE
break;
case 0x80 ... 0x8f:
0x80 ... 0x8f
0x80
0x8f
if (test_cc(ctxt->b, ctxt->eflags))			rc = jmp_rel(ctxt, ctxt->src.val);
test_cc(ctxt->b, ctxt->eflags)
test_cc
test_cc
ctxt->b
ctxt
ctxt
b
ctxt->eflags
ctxt
ctxt
eflags
rc = jmp_rel(ctxt, ctxt->src.val);
rc = jmp_rel(ctxt, ctxt->src.val)
rc
rc
jmp_rel(ctxt, ctxt->src.val)
jmp_rel
jmp_rel
ctxt
ctxt
ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
break;
case 0x90 ... 0x9f:
0x90 ... 0x9f
0x90
0x9f
ctxt->dst.val = test_cc(ctxt->b, ctxt->eflags);
ctxt->dst.val = test_cc(ctxt->b, ctxt->eflags)
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
test_cc(ctxt->b, ctxt->eflags)
test_cc
test_cc
ctxt->b
ctxt
ctxt
b
ctxt->eflags
ctxt
ctxt
eflags
break;
case 0xa4:
0xa4
case 0xa5:
0xa5
emulate_2op_cl(ctxt, "shld");
emulate_2op_cl(ctxt, "shld")
emulate_2op_cl
emulate_2op_cl
ctxt
ctxt
"shld"
break;
case 0xac:
0xac
case 0xad:
0xad
emulate_2op_cl(ctxt, "shrd");
emulate_2op_cl(ctxt, "shrd")
emulate_2op_cl
emulate_2op_cl
ctxt
ctxt
"shrd"
break;
case 0xae:
0xae
break;
case 0xb6 ... 0xb7:
0xb6 ... 0xb7
0xb6
0xb7
ctxt->dst.bytes = ctxt->op_bytes;
ctxt->dst.bytes = ctxt->op_bytes
ctxt->dst.bytes
ctxt->dst
ctxt
ctxt
dst
bytes
ctxt->op_bytes
ctxt
ctxt
op_bytes
ctxt->dst.val = (ctxt->d & ByteOp) ? (u8) ctxt->src.val						       : (u16) ctxt->src.val;
ctxt->dst.val = (ctxt->d & ByteOp) ? (u8) ctxt->src.val						       : (u16) ctxt->src.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
(ctxt->d & ByteOp) ? (u8) ctxt->src.val						       : (u16) ctxt->src.val
(ctxt->d & ByteOp)
ctxt->d & ByteOp
ctxt->d
ctxt
ctxt
d
ByteOp
ByteOp
(u8) ctxt->src.val
u8
u8
u8

ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
(u16) ctxt->src.val
u16
u16
u16

ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
break;
case 0xbe ... 0xbf:
0xbe ... 0xbf
0xbe
0xbf
ctxt->dst.bytes = ctxt->op_bytes;
ctxt->dst.bytes = ctxt->op_bytes
ctxt->dst.bytes
ctxt->dst
ctxt
ctxt
dst
bytes
ctxt->op_bytes
ctxt
ctxt
op_bytes
ctxt->dst.val = (ctxt->d & ByteOp) ? (s8) ctxt->src.val :							(s16) ctxt->src.val;
ctxt->dst.val = (ctxt->d & ByteOp) ? (s8) ctxt->src.val :							(s16) ctxt->src.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
(ctxt->d & ByteOp) ? (s8) ctxt->src.val :							(s16) ctxt->src.val
(ctxt->d & ByteOp)
ctxt->d & ByteOp
ctxt->d
ctxt
ctxt
d
ByteOp
ByteOp
(s8) ctxt->src.val
s8
s8
s8

ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
(s16) ctxt->src.val
s16
s16
s16

ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
break;
case 0xc0 ... 0xc1:
0xc0 ... 0xc1
0xc0
0xc1
emulate_2op_SrcV(ctxt, "add");
emulate_2op_SrcV(ctxt, "add")
emulate_2op_SrcV
emulate_2op_SrcV
ctxt
ctxt
"add"
ctxt->src.val = ctxt->dst.orig_val;
ctxt->src.val = ctxt->dst.orig_val
ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
ctxt->dst.orig_val
ctxt->dst
ctxt
ctxt
dst
orig_val
write_register_operand(&ctxt->src);
write_register_operand(&ctxt->src)
write_register_operand
write_register_operand
&ctxt->src
ctxt->src
ctxt
ctxt
src
break;
case 0xc3:
0xc3
ctxt->dst.bytes = ctxt->op_bytes;
ctxt->dst.bytes = ctxt->op_bytes
ctxt->dst.bytes
ctxt->dst
ctxt
ctxt
dst
bytes
ctxt->op_bytes
ctxt
ctxt
op_bytes
ctxt->dst.val = (ctxt->op_bytes == 4) ? (u32) ctxt->src.val :							(u64) ctxt->src.val;
ctxt->dst.val = (ctxt->op_bytes == 4) ? (u32) ctxt->src.val :							(u64) ctxt->src.val
ctxt->dst.val
ctxt->dst
ctxt
ctxt
dst
val
(ctxt->op_bytes == 4) ? (u32) ctxt->src.val :							(u64) ctxt->src.val
(ctxt->op_bytes == 4)
ctxt->op_bytes == 4
ctxt->op_bytes
ctxt
ctxt
op_bytes
4
(u32) ctxt->src.val
u32
u32
u32

ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
(u64) ctxt->src.val
u64
u64
u64

ctxt->src.val
ctxt->src
ctxt
ctxt
src
val
break;
default:
goto cannot_emulate;
cannot_emulate
if (rc != X86EMUL_CONTINUE)		goto done;
rc != X86EMUL_CONTINUE
rc
rc
X86EMUL_CONTINUE
X86EMUL_CONTINUE
goto done;
done
goto writeback;
writeback
cannot_emulate:	return EMULATION_FAILED;
cannot_emulate
return EMULATION_FAILED;
EMULATION_FAILED
EMULATION_FAILED
-----joern-----
(260,190,0)
(230,243,0)
(726,1089,0)
(226,896,0)
(833,757,0)
(127,288,0)
(145,329,0)
(161,329,0)
(9,944,0)
(551,245,0)
(930,795,0)
(215,795,0)
(1139,169,0)
(467,374,0)
(489,848,0)
(333,329,0)
(694,93,0)
(219,329,0)
(153,308,0)
(537,456,0)
(1135,470,0)
(793,516,0)
(649,670,0)
(769,736,0)
(898,329,0)
(860,557,0)
(719,434,0)
(880,620,0)
(849,623,0)
(1086,329,0)
(500,329,0)
(1037,145,0)
(125,795,0)
(356,418,0)
(1010,213,0)
(726,329,0)
(451,304,0)
(883,329,0)
(750,578,0)
(460,763,0)
(652,111,0)
(376,906,0)
(447,695,0)
(1076,329,0)
(875,686,0)
(123,1104,0)
(288,329,0)
(454,93,0)
(79,345,0)
(840,931,0)
(796,314,0)
(338,641,0)
(961,986,0)
(1129,93,0)
(653,329,0)
(771,329,0)
(835,1086,0)
(721,190,0)
(278,611,0)
(274,329,0)
(42,8,0)
(975,208,0)
(969,329,0)
(8,329,0)
(1102,795,0)
(695,447,0)
(968,936,0)
(785,1104,0)
(517,43,0)
(966,522,0)
(879,93,0)
(617,329,0)
(399,341,0)
(842,795,0)
(155,349,0)
(192,28,0)
(68,330,0)
(1056,608,0)
(743,802,0)
(52,963,0)
(478,1067,0)
(268,329,0)
(422,369,0)
(1075,447,0)
(363,329,0)
(1061,825,0)
(312,6,0)
(863,736,0)
(965,795,0)
(169,1139,0)
(182,488,0)
(283,795,0)
(604,456,0)
(354,800,0)
(251,485,0)
(55,93,0)
(803,121,0)
(13,499,0)
(863,517,0)
(769,936,0)
(393,273,0)
(1093,1140,0)
(10,795,0)
(1082,93,0)
(291,864,0)
(1092,939,0)
(993,676,0)
(1090,197,0)
(434,719,0)
(924,645,0)
(155,510,0)
(589,164,0)
(291,944,0)
(790,329,0)
(840,670,0)
(971,329,0)
(836,220,0)
(153,780,0)
(699,329,0)
(555,342,0)
(661,281,0)
(602,329,0)
(491,512,0)
(291,1053,0)
(1070,958,0)
(258,329,0)
(1010,197,0)
(360,1052,0)
(49,279,0)
(359,1065,0)
(623,232,0)
(65,769,0)
(840,21,0)
(1130,1004,0)
(88,1100,0)
(308,153,0)
(628,190,0)
(1010,442,0)
(622,504,0)
(297,756,0)
(240,718,0)
(927,191,0)
(709,147,0)
(301,753,0)
(211,301,0)
(555,270,0)
(596,141,0)
(872,517,0)
(1039,832,0)
(952,199,0)
(1007,262,0)
(921,136,0)
(1113,795,0)
(1028,1031,0)
(1084,795,0)
(918,24,0)
(840,68,0)
(772,912,0)
(751,767,0)
(171,434,0)
(36,204,0)
(1128,468,0)
(417,329,0)
(838,791,0)
(868,121,0)
(789,93,0)
(133,1103,0)
(14,731,0)
(775,795,0)
(627,418,0)
(992,668,0)
(916,994,0)
(347,677,0)
(602,867,0)
(825,1061,0)
(429,795,0)
(896,93,0)
(555,243,0)
(862,329,0)
(761,1131,0)
(532,793,0)
(798,1076,0)
(25,1064,0)
(410,64,0)
(863,160,0)
(420,717,0)
(111,225,0)
(559,26,0)
(1089,726,0)
(352,463,0)
(292,642,0)
(1090,342,0)
(769,518,0)
(291,342,0)
(100,724,0)
(728,936,0)
(1047,196,0)
(1028,1068,0)
(538,273,0)
(76,986,0)
(1036,363,0)
(840,109,0)
(818,675,0)
(510,155,0)
(655,617,0)
(262,329,0)
(772,542,0)
(607,347,0)
(338,64,0)
(246,135,0)
(177,729,0)
(863,384,0)
(1069,168,0)
(1014,938,0)
(313,190,0)
(149,862,0)
(323,114,0)
(997,37,0)
(957,695,0)
(555,864,0)
(555,409,0)
(565,500,0)
(615,501,0)
(817,564,0)
(886,329,0)
(1006,160,0)
(541,329,0)
(291,671,0)
(1112,434,0)
(929,957,0)
(857,795,0)
(472,718,0)
(336,93,0)
(770,671,0)
(396,96,0)
(969,457,0)
(58,329,0)
(668,992,0)
(933,190,0)
(593,13,0)
(446,1064,0)
(829,653,0)
(418,527,0)
(739,757,0)
(598,93,0)
(195,64,0)
(928,582,0)
(934,710,0)
(582,329,0)
(204,329,0)
(349,329,0)
(1010,301,0)
(614,795,0)
(397,183,0)
(971,270,0)
(291,773,0)
(690,753,0)
(863,347,0)
(588,291,0)
(809,706,0)
(574,1019,0)
(863,393,0)
(480,571,0)
(915,329,0)
(963,190,0)
(550,617,0)
(989,770,0)
(1090,779,0)
(1105,1013,0)
(1084,689,0)
(1055,190,0)
(1028,409,0)
(812,349,0)
(287,325,0)
(832,467,0)
(1066,867,0)
(280,579,0)
(623,208,0)
(575,995,0)
(462,610,0)
(941,1028,0)
(219,372,0)
(606,581,0)
(568,629,0)
(840,800,0)
(863,190,0)
(736,139,0)
(231,795,0)
(270,971,0)
(821,1021,0)
(463,352,0)
(649,470,0)
(769,582,0)
(337,304,0)
(109,815,0)
(641,338,0)
(166,329,0)
(792,482,0)
(1090,442,0)
(779,128,0)
(458,779,0)
(89,93,0)
(1012,198,0)
(609,190,0)
(820,795,0)
(317,43,0)
(1028,270,0)
(352,412,0)
(499,284,0)
(1115,76,0)
(581,329,0)
(412,352,0)
(211,329,0)
(1137,330,0)
(555,362,0)
(100,579,0)
(18,68,0)
(1127,725,0)
(279,49,0)
(56,665,0)
(222,969,0)
(374,467,0)
(388,1072,0)
(443,216,0)
(776,485,0)
(710,93,0)
(115,345,0)
(493,1053,0)
(727,988,0)
(689,1084,0)
(43,190,0)
(576,725,0)
(760,190,0)
(621,190,0)
(823,549,0)
(343,190,0)
(520,190,0)
(440,585,0)
(64,338,0)
(169,1023,0)
(706,329,0)
(815,329,0)
(925,691,0)
(676,993,0)
(542,271,0)
(1041,1119,0)
(35,1090,0)
(452,805,0)
(535,808,0)
(778,329,0)
(793,329,0)
(77,69,0)
(613,500,0)
(28,164,0)
(366,795,0)
(103,301,0)
(769,761,0)
(470,657,0)
(639,606,0)
(111,38,0)
(204,36,0)
(564,630,0)
(998,36,0)
(625,714,0)
(256,374,0)
(848,362,0)
(304,451,0)
(782,232,0)
(1004,1130,0)
(731,329,0)
(458,97,0)
(320,931,0)
(1050,802,0)
(1062,780,0)
(353,268,0)
(840,393,0)
(3,616,0)
(655,329,0)
(394,500,0)
(370,1128,0)
(69,563,0)
(827,108,0)
(547,518,0)
(529,808,0)
(49,54,0)
(679,98,0)
(724,398,0)
(585,93,0)
(1031,59,0)
(670,898,0)
(555,963,0)
(48,1082,0)
(769,457,0)
(689,145,0)
(486,497,0)
(742,142,0)
(531,450,0)
(1080,168,0)
(1098,817,0)
(1136,795,0)
(846,906,0)
(790,761,0)
(1045,778,0)
(863,451,0)
(543,848,0)
(845,526,0)
(62,699,0)
(224,757,0)
(626,824,0)
(871,190,0)
(769,610,0)
(767,751,0)
(954,616,0)
(1028,362,0)
(213,655,0)
(291,270,0)
(863,457,0)
(1028,623,0)
(979,315,0)
(331,458,0)
(181,329,0)
(8,42,0)
(1132,316,0)
(752,96,0)
(405,329,0)
(608,84,0)
(23,795,0)
(877,6,0)
(351,666,0)
(1134,372,0)
(840,497,0)
(1074,98,0)
(906,575,0)
(863,68,0)
(385,795,0)
(1143,636,0)
(1142,706,0)
(81,1142,0)
(746,274,0)
(169,1119,0)
(349,155,0)
(431,164,0)
(344,1013,0)
(1083,792,0)
(863,333,0)
(203,1010,0)
(242,329,0)
(988,727,0)
(736,930,0)
(505,166,0)
(511,329,0)
(1085,756,0)
(1124,1082,0)
(516,793,0)
(837,450,0)
(1021,329,0)
(769,109,0)
(592,1045,0)
(114,329,0)
(549,1042,0)
(116,354,0)
(863,21,0)
(1004,334,0)
(1028,301,0)
(357,720,0)
(1015,68,0)
(92,139,0)
(692,795,0)
(616,3,0)
(444,749,0)
(1119,1041,0)
(930,778,0)
(986,76,0)
(386,511,0)
(1042,549,0)
(544,1071,0)
(759,235,0)
(1021,1088,0)
(22,605,0)
(1017,637,0)
(470,665,0)
(114,1023,0)
(718,329,0)
(405,563,0)
(794,602,0)
(53,16,0)
(685,329,0)
(1008,707,0)
(57,526,0)
(585,329,0)
(1067,251,0)
(274,746,0)
(587,740,0)
(314,329,0)
(121,329,0)
(131,433,0)
(69,921,0)
(665,470,0)
(174,665,0)
(601,1128,0)
(328,1006,0)
(938,301,0)
(978,719,0)
(290,510,0)
(177,93,0)
(88,499,0)
(372,84,0)
(887,271,0)
(501,615,0)
(687,190,0)
(936,329,0)
(193,915,0)
(1142,463,0)
(649,93,0)
(1034,268,0)
(769,1088,0)
(403,93,0)
(640,685,0)
(646,314,0)
(84,608,0)
(863,642,0)
(919,329,0)
(912,772,0)
(153,414,0)
(840,736,0)
(120,88,0)
(891,726,0)
(659,412,0)
(946,986,0)
(671,1072,0)
(1081,242,0)
(291,963,0)
(895,83,0)
(1028,779,0)
(249,225,0)
(160,1006,0)
(1089,93,0)
(544,329,0)
(436,304,0)
(525,1087,0)
(322,824,0)
(840,347,0)
(895,677,0)
(1090,301,0)
(86,751,0)
(950,504,0)
(863,497,0)
(769,451,0)
(574,95,0)
(1053,190,0)
(4,1009,0)
(374,329,0)
(778,1045,0)
(1088,1021,0)
(1090,270,0)
(1060,322,0)
(572,1132,0)
(409,924,0)
(651,398,0)
(96,524,0)
(883,533,0)
(1073,815,0)
(530,729,0)
(384,329,0)
(1038,140,0)
(451,614,0)
(135,860,0)
(28,192,0)
(187,1019,0)
(291,243,0)
(70,825,0)
(22,355,0)
(209,1068,0)
(840,470,0)
(1118,793,0)
(697,329,0)
(123,329,0)
(555,1104,0)
(159,670,0)
(605,805,0)
(157,580,0)
(769,670,0)
(291,501,0)
(430,1091,0)
(463,1142,0)
(931,587,0)
(363,1036,0)
(399,741,0)
(984,211,0)
(800,108,0)
(82,992,0)
(452,166,0)
(305,1114,0)
(618,1086,0)
(469,93,0)
(1101,707,0)
(557,860,0)
(345,329,0)
(955,790,0)
(32,176,0)
(1121,697,0)
(1090,243,0)
(703,329,0)
(824,322,0)
(800,354,0)
(33,329,0)
(957,329,0)
(464,1031,0)
(263,112,0)
(503,291,0)
(913,307,0)
(499,88,0)
(866,896,0)
(822,457,0)
(1052,903,0)
(575,204,0)
(921,69,0)
(737,815,0)
(271,329,0)
(179,190,0)
(1100,1111,0)
(1090,362,0)
(555,197,0)
(142,541,0)
(734,741,0)
(412,33,0)
(66,190,0)
(311,93,0)
(1028,671,0)
(485,251,0)
(949,685,0)
(482,792,0)
(26,1061,0)
(255,1021,0)
(299,37,0)
(555,501,0)
(703,916,0)
(168,329,0)
(557,878,0)
(765,93,0)
(528,357,0)
(1028,290,0)
(985,719,0)
(664,155,0)
(494,657,0)
(17,263,0)
(138,675,0)
(140,689,0)
(834,883,0)
(840,517,0)
(857,329,0)
(882,537,0)
(291,1031,0)
(243,93,0)
(445,547,0)
(982,278,0)
(769,800,0)
(1005,138,0)
(606,123,0)
(63,442,0)
(611,537,0)
(175,93,0)
(876,93,0)
(126,300,0)
(208,623,0)
(730,898,0)
(326,795,0)
(722,190,0)
(936,516,0)
(855,333,0)
(932,192,0)
(864,584,0)
(395,160,0)
(939,27,0)
(152,274,0)
(696,773,0)
(571,823,0)
(870,844,0)
(768,746,0)
(273,329,0)
(832,329,0)
(839,916,0)
(1109,333,0)
(141,596,0)
(840,740,0)
(1110,329,0)
(42,31,0)
(341,468,0)
(840,333,0)
(513,778,0)
(658,360,0)
(1025,984,0)
(1049,468,0)
(1119,169,0)
(324,93,0)
(257,93,0)
(643,547,0)
(681,118,0)
(199,308,0)
(805,795,0)
(243,230,0)
(767,53,0)
(301,211,0)
(712,93,0)
(298,102,0)
(355,329,0)
(596,113,0)
(926,253,0)
(369,329,0)
(769,333,0)
(364,37,0)
(1002,190,0)
(261,795,0)
(218,1079,0)
(246,242,0)
(567,514,0)
(637,197,0)
(34,779,0)
(198,614,0)
(571,819,0)
(555,1089,0)
(854,93,0)
(64,329,0)
(252,1110,0)
(707,329,0)
(885,190,0)
(801,314,0)
(309,802,0)
(723,575,0)
(735,616,0)
(118,329,0)
(542,772,0)
(1122,800,0)
(284,551,0)
(347,718,0)
(649,518,0)
(512,329,0)
(527,974,0)
(967,825,0)
(1120,452,0)
(296,795,0)
(284,499,0)
(986,329,0)
(72,113,0)
(657,190,0)
(825,1100,0)
(707,212,0)
(798,751,0)
(411,925,0)
(373,1110,0)
(147,268,0)
(500,613,0)
(819,571,0)
(1130,432,0)
(527,418,0)
(362,307,0)
(636,918,0)
(27,939,0)
(991,1090,0)
(418,329,0)
(920,795,0)
(248,761,0)
(471,196,0)
(268,147,0)
(976,582,0)
(1057,128,0)
(200,984,0)
(316,329,0)
(960,819,0)
(904,533,0)
(648,725,0)
(907,134,0)
(251,1067,0)
(1028,773,0)
(959,93,0)
(141,749,0)
(168,220,0)
(660,1089,0)
(415,190,0)
(333,649,0)
(204,575,0)
(455,795,0)
(459,541,0)
(20,791,0)
(180,141,0)
(1094,964,0)
(264,790,0)
(194,934,0)
(1066,904,0)
(612,795,0)
(1141,488,0)
(510,329,0)
(1010,779,0)
(675,138,0)
(840,610,0)
(40,918,0)
(291,301,0)
(382,1094,0)
(847,1061,0)
(510,290,0)
(841,181,0)
(506,384,0)
(1111,1100,0)
(137,190,0)
(948,795,0)
(1117,220,0)
(300,134,0)
(631,1023,0)
(150,213,0)
(485,1132,0)
(372,329,0)
(138,329,0)
(966,795,0)
(683,93,0)
(426,212,0)
(167,62,0)
(1044,629,0)
(1011,243,0)
(509,795,0)
(1110,185,0)
(903,1052,0)
(1078,27,0)
(85,512,0)
(705,322,0)
(569,1076,0)
(65,840,0)
(1032,316,0)
(717,827,0)
(711,625,0)
(863,670,0)
(964,670,0)
(779,458,0)
(863,1088,0)
(355,22,0)
(1090,575,0)
(458,329,0)
(281,915,0)
(389,329,0)
(1030,749,0)
(875,315,0)
(1028,1053,0)
(897,95,0)
(185,668,0)
(988,329,0)
(555,623,0)
(527,756,0)
(553,8,0)
(65,863,0)
(674,995,0)
(437,703,0)
(1,309,0)
(65,621,0)
(729,177,0)
(584,329,0)
(148,795,0)
(494,216,0)
(284,595,0)
(325,1111,0)
(176,666,0)
(485,197,0)
(861,835,0)
(784,306,0)
(228,190,0)
(684,835,0)
(485,776,0)
(497,577,0)
(310,736,0)
(183,329,0)
(449,190,0)
(346,971,0)
(399,329,0)
(348,1096,0)
(508,113,0)
(1082,329,0)
(554,863,0)
(1028,575,0)
(282,775,0)
(132,1065,0)
(201,642,0)
(714,625,0)
(108,827,0)
(974,527,0)
(112,329,0)
(474,258,0)
(904,1066,0)
(708,741,0)
(413,374,0)
(769,246,0)
(746,705,0)
(769,21,0)
(867,1066,0)
(74,883,0)
(945,817,0)
(1006,329,0)
(516,813,0)
(549,823,0)
(38,329,0)
(1090,1053,0)
(840,451,0)
(279,629,0)
(555,671,0)
(161,21,0)
(758,919,0)
(1091,717,0)
(996,878,0)
(130,329,0)
(964,93,0)
(863,518,0)
(739,920,0)
(293,554,0)
(380,190,0)
(448,791,0)
(788,771,0)
(83,895,0)
(11,186,0)
(931,258,0)
(657,494,0)
(533,904,0)
(769,497,0)
(325,329,0)
(605,22,0)
(423,93,0)
(1029,150,0)
(1019,329,0)
(482,329,0)
(145,689,0)
(990,83,0)
(745,655,0)
(555,710,0)
(213,406,0)
(1048,201,0)
(1040,190,0)
(1131,253,0)
(233,544,0)
(71,355,0)
(517,808,0)
(267,1053,0)
(605,1004,0)
(1028,944,0)
(288,625,0)
(102,864,0)
(808,517,0)
(584,864,0)
(33,412,0)
(1135,670,0)
(806,384,0)
(87,964,0)
(555,575,0)
(207,113,0)
(99,1076,0)
(198,329,0)
(555,442,0)
(247,580,0)
(970,389,0)
(1028,1089,0)
(751,86,0)
(220,168,0)
(184,522,0)
(691,54,0)
(163,649,0)
(724,100,0)
(146,8,0)
(488,497,0)
(677,895,0)
(123,606,0)
(964,470,0)
(713,522,0)
(202,938,0)
(7,998,0)
(956,329,0)
(309,714,0)
(792,559,0)
(515,895,0)
(39,363,0)
(319,190,0)
(526,57,0)
(210,139,0)
(1128,329,0)
(547,329,0)
(642,201,0)
(725,1127,0)
(815,109,0)
(702,28,0)
(595,26,0)
(227,93,0)
(364,1115,0)
(630,795,0)
(599,539,0)
(814,21,0)
(91,274,0)
(856,912,0)
(322,705,0)
(647,860,0)
(1013,1105,0)
(321,190,0)
(840,160,0)
(475,886,0)
(831,827,0)
(281,767,0)
(756,527,0)
(197,235,0)
(253,1131,0)
(665,329,0)
(136,1105,0)
(958,329,0)
(315,98,0)
(705,746,0)
(341,399,0)
(915,281,0)
(138,3,0)
(608,1009,0)
(518,275,0)
(863,936,0)
(634,242,0)
(204,676,0)
(1041,795,0)
(26,595,0)
(318,795,0)
(1108,915,0)
(1087,329,0)
(632,76,0)
(956,773,0)
(419,1105,0)
(840,246,0)
(112,263,0)
(461,1036,0)
(97,458,0)
(577,795,0)
(196,963,0)
(1144,190,0)
(797,417,0)
(1126,181,0)
(185,1110,0)
(487,93,0)
(270,93,0)
(698,555,0)
(524,96,0)
(718,347,0)
(769,452,0)
(524,190,0)
(253,329,0)
(44,544,0)
(1146,213,0)
(942,845,0)
(275,803,0)
(37,329,0)
(1065,359,0)
(1087,83,0)
(786,273,0)
(672,288,0)
(859,731,0)
(60,617,0)
(669,93,0)
(908,844,0)
(719,329,0)
(769,470,0)
(733,226,0)
(840,147,0)
(466,31,0)
(1099,699,0)
(1036,190,0)
(416,646,0)
(863,452,0)
(994,329,0)
(597,329,0)
(139,329,0)
(75,622,0)
(239,1067,0)
(300,458,0)
(935,13,0)
(170,190,0)
(863,109,0)
(556,579,0)
(259,49,0)
(564,817,0)
(340,485,0)
(291,213,0)
(775,282,0)
(225,458,0)
(980,38,0)
(1107,857,0)
(614,198,0)
(1058,541,0)
(230,329,0)
(863,470,0)
(117,1087,0)
(773,93,0)
(1090,213,0)
(147,89,0)
(441,190,0)
(27,329,0)
(458,300,0)
(555,944,0)
(134,329,0)
(655,213,0)
(473,109,0)
(828,447,0)
(38,111,0)
(541,142,0)
(761,790,0)
(750,605,0)
(670,449,0)
(332,1009,0)
(225,111,0)
(863,147,0)
(554,1028,0)
(780,727,0)
(262,645,0)
(890,186,0)
(1090,1089,0)
(306,263,0)
(1045,329,0)
(867,602,0)
(447,329,0)
(939,359,0)
(477,121,0)
(105,1086,0)
(258,931,0)
(404,671,0)
(861,204,0)
(1079,944,0)
(534,432,0)
(377,93,0)
(605,750,0)
(650,518,0)
(96,329,0)
(384,524,0)
(1046,551,0)
(276,563,0)
(504,622,0)
(387,470,0)
(348,389,0)
(919,963,0)
(5,511,0)
(802,309,0)
(107,112,0)
(171,686,0)
(522,966,0)
(476,393,0)
(1028,962,0)
(769,384,0)
(90,325,0)
(361,88,0)
(863,761,0)
(141,180,0)
(372,219,0)
(390,615,0)
(456,537,0)
(559,792,0)
(289,924,0)
(160,282,0)
(677,113,0)
(662,166,0)
(1004,605,0)
(840,642,0)
(776,1114,0)
(586,795,0)
(3,138,0)
(1052,360,0)
(703,1068,0)
(863,731,0)
(641,869,0)
(769,309,0)
(1071,544,0)
(119,1045,0)
(646,442,0)
(808,329,0)
(43,306,0)
(432,1130,0)
(699,62,0)
(273,393,0)
(666,176,0)
(858,405,0)
(269,992,0)
(101,962,0)
(1019,574,0)
(350,167,0)
(401,93,0)
(518,547,0)
(392,93,0)
(217,245,0)
(853,93,0)
(570,957,0)
(563,405,0)
(295,584,0)
(402,93,0)
(291,197,0)
(272,93,0)
(1022,1100,0)
(767,281,0)
(485,329,0)
(840,731,0)
(1117,862,0)
(244,219,0)
(697,795,0)
(121,803,0)
(435,190,0)
(57,463,0)
(265,349,0)
(835,861,0)
(863,800,0)
(563,69,0)
(1028,554,0)
(158,1015,0)
(555,290,0)
(291,1089,0)
(183,993,0)
(878,557,0)
(20,282,0)
(947,533,0)
(1028,197,0)
(1071,750,0)
(899,93,0)
(999,771,0)
(457,775,0)
(263,306,0)
(840,457,0)
(468,341,0)
(905,190,0)
(1131,795,0)
(1090,773,0)
(862,1117,0)
(104,539,0)
(981,409,0)
(680,795,0)
(583,123,0)
(944,514,0)
(83,1087,0)
(206,653,0)
(1090,1068,0)
(555,773,0)
(191,1091,0)
(1020,573,0)
(303,190,0)
(53,767,0)
(80,861,0)
(710,934,0)
(666,653,0)
(840,452,0)
(444,329,0)
(747,597,0)
(558,637,0)
(594,6,0)
(912,329,0)
(725,329,0)
(523,279,0)
(717,1091,0)
(84,372,0)
(1023,114,0)
(581,606,0)
(693,645,0)
(407,504,0)
(573,329,0)
(595,284,0)
(1135,93,0)
(488,329,0)
(591,211,0)
(26,559,0)
(432,329,0)
(306,190,0)
(1096,348,0)
(438,399,0)
(805,605,0)
(216,494,0)
(315,875,0)
(238,33,0)
(110,1019,0)
(896,226,0)
(1091,191,0)
(555,301,0)
(501,763,0)
(863,246,0)
(335,501,0)
(271,542,0)
(36,998,0)
(282,20,0)
(108,93,0)
(577,767,0)
(186,329,0)
(450,779,0)
(1090,1104,0)
(1016,444,0)
(211,984,0)
(924,409,0)
(656,114,0)
(467,832,0)
(1097,729,0)
(582,433,0)
(621,670,0)
(653,666,0)
(465,444,0)
(129,338,0)
(399,1140,0)
(749,444,0)
(29,1006,0)
(1067,329,0)
(144,621,0)
(1028,243,0)
(787,581,0)
(1028,864,0)
(1009,608,0)
(1061,26,0)
(902,22,0)
(154,190,0)
(777,102,0)
(50,776,0)
(1103,329,0)
(686,171,0)
(579,329,0)
(840,1094,0)
(1145,246,0)
(522,329,0)
(555,213,0)
(316,1132,0)
(291,290,0)
(1001,406,0)
(555,779,0)
(286,1088,0)
(769,731,0)
(143,526,0)
(490,795,0)
(773,956,0)
(830,348,0)
(939,329,0)
(611,278,0)
(540,697,0)
(164,329,0)
(369,422,0)
(748,364,0)
(507,190,0)
(881,832,0)
(1028,442,0)
(130,342,0)
(1010,575,0)
(645,924,0)
(678,840,0)
(555,1068,0)
(863,610,0)
(1028,501,0)
(944,1079,0)
(381,710,0)
(546,360,0)
(993,183,0)
(923,803,0)
(1010,362,0)
(291,710,0)
(756,329,0)
(95,574,0)
(1119,1127,0)
(1135,518,0)
(400,161,0)
(893,862,0)
(221,795,0)
(1027,253,0)
(769,147,0)
(53,212,0)
(502,587,0)
(629,329,0)
(511,93,0)
(497,488,0)
(774,769,0)
(819,329,0)
(1042,622,0)
(294,130,0)
(241,377,0)
(863,582,0)
(645,262,0)
(495,878,0)
(342,130,0)
(408,1127,0)
(874,190,0)
(54,49,0)
(205,93,0)
(780,153,0)
(1115,364,0)
(54,691,0)
(278,329,0)
(1132,485,0)
(843,559,0)
(188,1096,0)
(526,845,0)
(124,113,0)
(398,724,0)
(901,290,0)
(173,573,0)
(803,275,0)
(1079,329,0)
(391,31,0)
(617,655,0)
(379,211,0)
(548,93,0)
(962,851,0)
(21,161,0)
(676,204,0)
(167,958,0)
(136,921,0)
(291,962,0)
(863,309,0)
(701,190,0)
(245,551,0)
(140,329,0)
(226,329,0)
(204,861,0)
(663,597,0)
(1043,1052,0)
(1114,186,0)
(45,93,0)
(1104,123,0)
(178,204,0)
(1077,197,0)
(339,190,0)
(619,813,0)
(840,309,0)
(291,623,0)
(0,795,0)
(97,142,0)
(951,819,0)
(983,93,0)
(1051,1028,0)
(844,610,0)
(714,93,0)
(781,362,0)
(720,329,0)
(496,555,0)
(810,93,0)
(1133,216,0)
(151,278,0)
(457,969,0)
(421,93,0)
(799,389,0)
(1015,329,0)
(78,219,0)
(1068,703,0)
(291,779,0)
(984,329,0)
(689,140,0)
(757,329,0)
(1010,409,0)
(769,642,0)
(778,930,0)
(1103,1031,0)
(695,957,0)
(442,1125,0)
(994,916,0)
(638,451,0)
(220,1117,0)
(19,602,0)
(603,36,0)
(428,557,0)
(98,329,0)
(492,183,0)
(987,823,0)
(156,998,0)
(732,727,0)
(1028,710,0)
(398,329,0)
(826,646,0)
(266,24,0)
(920,739,0)
(367,1094,0)
(878,329,0)
(635,93,0)
(6,329,0)
(21,1084,0)
(552,857,0)
(1140,399,0)
(425,1130,0)
(164,28,0)
(958,167,0)
(375,795,0)
(633,449,0)
(354,329,0)
(762,845,0)
(545,201,0)
(600,190,0)
(1114,776,0)
(688,93,0)
(616,329,0)
(1028,342,0)
(783,494,0)
(308,199,0)
(621,470,0)
(644,554,0)
(791,329,0)
(372,795,0)
(1111,325,0)
(537,611,0)
(89,641,0)
(199,329,0)
(1028,1104,0)
(1013,329,0)
(963,919,0)
(1123,230,0)
(630,564,0)
(827,717,0)
(769,347,0)
(934,329,0)
(727,780,0)
(555,962,0)
(892,270,0)
(720,357,0)
(769,68,0)
(1010,1053,0)
(816,993,0)
(62,167,0)
(61,33,0)
(964,518,0)
(122,58,0)
(1028,918,0)
(442,646,0)
(201,329,0)
(291,409,0)
(769,1094,0)
(417,362,0)
(414,153,0)
(291,442,0)
(358,150,0)
(579,100,0)
(613,414,0)
(953,898,0)
(484,38,0)
(865,20,0)
(212,53,0)
(972,354,0)
(1033,369,0)
(766,912,0)
(16,53,0)
(186,1114,0)
(277,93,0)
(850,93,0)
(817,329,0)
(992,329,0)
(886,795,0)
(767,577,0)
(1086,835,0)
(439,1015,0)
(1088,377,0)
(458,225,0)
(378,934,0)
(840,518,0)
(468,1128,0)
(622,1042,0)
(234,903,0)
(1090,710,0)
(536,432,0)
(1028,213,0)
(334,1004,0)
(479,1135,0)
(802,329,0)
(590,161,0)
(291,362,0)
(731,1135,0)
(291,1068,0)
(216,329,0)
(30,130,0)
(166,452,0)
(1106,262,0)
(769,160,0)
(1028,963,0)
(192,932,0)
(824,329,0)
(840,761,0)
(214,969,0)
(483,1010,0)
(302,1065,0)
(383,191,0)
(521,864,0)
(371,1125,0)
(671,770,0)
(769,393,0)
(914,93,0)
(1138,798,0)
(716,851,0)
(673,363,0)
(1000,1071,0)
(807,93,0)
(610,596,0)
(291,1104,0)
(212,707,0)
(191,329,0)
(1104,93,0)
(291,575,0)
(1009,329,0)
(519,198,0)
(290,93,0)
(73,355,0)
(68,1015,0)
(162,112,0)
(840,1088,0)
(566,93,0)
(895,515,0)
(555,1031,0)
(750,1071,0)
(58,962,0)
(304,329,0)
(889,316,0)
(94,720,0)
(578,750,0)
(691,925,0)
(456,329,0)
(629,279,0)
(291,918,0)
(682,398,0)
(744,795,0)
(1100,741,0)
(667,258,0)
(37,364,0)
(738,271,0)
(900,994,0)
(1023,169,0)
(229,482,0)
(937,118,0)
(242,246,0)
(46,510,0)
(641,89,0)
(918,636,0)
(844,329,0)
(646,329,0)
(754,795,0)
(560,456,0)
(668,185,0)
(499,13,0)
(654,226,0)
(393,966,0)
(804,720,0)
(165,93,0)
(1090,290,0)
(1105,136,0)
(223,574,0)
(250,581,0)
(2,113,0)
(134,300,0)
(863,1094,0)
(368,93,0)
(860,647,0)
(434,171,0)
(98,315,0)
(555,1053,0)
(13,1100,0)
(47,140,0)
(962,58,0)
(172,177,0)
(555,918,0)
(1063,3,0)
(1119,192,0)
(498,875,0)
(916,703,0)
(884,956,0)
(757,739,0)
(463,57,0)
(940,245,0)
(642,630,0)
(704,190,0)
(359,939,0)
(770,329,0)
(898,670,0)
(624,958,0)
(621,518,0)
(362,417,0)
(729,329,0)
(977,93,0)
(139,736,0)
(764,824,0)
(1003,795,0)
(208,329,0)
(1094,329,0)
(192,1119,0)
(327,251,0)
(610,844,0)
(142,97,0)
(1065,329,0)
(636,329,0)
(512,795,0)
(254,93,0)
(791,20,0)
(910,447,0)
(561,594,0)
(1095,706,0)
(580,442,0)
(845,329,0)
(31,329,0)
(686,875,0)
(1127,1119,0)
(1076,798,0)
(860,135,0)
(1018,134,0)
(864,539,0)
(360,329,0)
(869,641,0)
(109,1041,0)
(427,145,0)
(533,883,0)
(76,1115,0)
(888,867,0)
(197,485,0)
(389,348,0)
(31,42,0)
(700,93,0)
(414,613,0)
(625,288,0)
(769,517,0)
(597,925,0)
(917,113,0)
(106,405,0)
(41,988,0)
(285,482,0)
(67,795,0)
(504,329,0)
(15,655,0)
(314,646,0)
(6,594,0)
(823,571,0)
(481,795,0)
(1026,939,0)
(135,113,0)
(755,1013,0)
(706,1142,0)
(925,597,0)
(551,284,0)
(924,329,0)
(275,235,0)
(998,329,0)
(922,59,0)
(424,342,0)
(894,136,0)
(365,636,0)
(562,199,0)
(1031,1103,0)
(245,1100,0)
(1059,564,0)
(909,988,0)
(751,798,0)
(749,141,0)
(1024,613,0)
(615,329,0)
(12,994,0)
(840,109,1)
(262,329,1)
(693,262,1)
(503,1035,1)
(364,748,1)
(1006,329,1)
(632,986,1)
(840,21,1)
(1061,847,1)
(395,1006,1)
(666,653,1)
(390,335,1)
(958,329,1)
(551,245,1)
(1010,203,1)
(769,333,1)
(805,605,1)
(770,989,1)
(681,937,1)
(272,377,1)
(1018,907,1)
(316,889,1)
(211,329,1)
(132,1092,1)
(823,571,1)
(957,570,1)
(863,21,1)
(140,47,1)
(767,281,1)
(360,658,1)
(521,118,1)
(961,364,1)
(503,922,1)
(177,729,1)
(278,329,1)
(987,571,1)
(604,278,1)
(642,292,1)
(838,448,1)
(788,999,1)
(970,799,1)
(896,226,1)
(88,1100,1)
(828,176,1)
(162,107,1)
(345,329,1)
(946,961,1)
(890,340,1)
(787,583,1)
(252,668,1)
(220,168,1)
(35,324,1)
(493,1036,1)
(483,296,1)
(489,543,1)
(1090,1053,1)
(910,1075,1)
(185,668,1)
(921,69,1)
(769,642,1)
(376,575,1)
(503,1116,1)
(1122,354,1)
(485,1132,1)
(238,1142,1)
(468,1128,1)
(503,460,1)
(10,886,1)
(655,617,1)
(168,1080,1)
(361,120,1)
(996,495,1)
(21,814,1)
(912,329,1)
(1010,213,1)
(365,40,1)
(747,663,1)
(846,376,1)
(853,896,1)
(438,1100,1)
(1021,329,1)
(1132,316,1)
(928,291,1)
(136,1105,1)
(485,251,1)
(985,875,1)
(191,329,1)
(573,329,1)
(54,49,1)
(613,1024,1)
(964,670,1)
(968,728,1)
(51,1090,1)
(168,329,1)
(1063,616,1)
(863,582,1)
(83,990,1)
(85,491,1)
(1071,544,1)
(964,87,1)
(98,329,1)
(769,774,1)
(769,21,1)
(863,109,1)
(1033,399,1)
(1013,755,1)
(922,1031,1)
(1140,1093,1)
(1059,817,1)
(335,308,1)
(1034,353,1)
(1038,145,1)
(491,771,1)
(457,822,1)
(144,715,1)
(774,555,1)
(230,1123,1)
(424,594,1)
(325,329,1)
(1029,213,1)
(571,480,1)
(145,329,1)
(791,838,1)
(769,1088,1)
(203,483,1)
(888,602,1)
(717,420,1)
(115,79,1)
(22,355,1)
(971,346,1)
(8,553,1)
(746,768,1)
(629,568,1)
(222,214,1)
(1092,27,1)
(937,772,1)
(555,1053,1)
(863,731,1)
(1114,186,1)
(771,329,1)
(559,843,1)
(840,761,1)
(466,8,1)
(1068,703,1)
(261,330,1)
(1015,329,1)
(724,398,1)
(915,329,1)
(605,22,1)
(176,32,1)
(17,112,1)
(1070,185,1)
(1137,68,1)
(540,1121,1)
(769,347,1)
(579,329,1)
(617,550,1)
(503,811,1)
(468,1049,1)
(333,1109,1)
(177,172,1)
(503,453,1)
(245,217,1)
(1098,945,1)
(496,433,1)
(510,329,1)
(372,329,1)
(563,276,1)
(994,900,1)
(503,237,1)
(840,147,1)
(1135,518,1)
(991,35,1)
(169,1139,1)
(1024,500,1)
(50,1114,1)
(249,111,1)
(336,342,1)
(879,710,1)
(52,104,1)
(58,329,1)
(1119,1127,1)
(315,979,1)
(288,127,1)
(1136,467,1)
(340,1077,1)
(916,994,1)
(62,167,1)
(555,342,1)
(780,1062,1)
(471,1047,1)
(756,329,1)
(266,918,1)
(909,414,1)
(769,451,1)
(948,771,1)
(894,1105,1)
(679,611,1)
(572,316,1)
(631,114,1)
(904,533,1)
(357,528,1)
(139,329,1)
(116,972,1)
(354,329,1)
(705,746,1)
(432,534,1)
(101,921,1)
(581,329,1)
(288,329,1)
(666,351,1)
(831,717,1)
(506,1117,1)
(290,510,1)
(716,962,1)
(291,442,1)
(1115,76,1)
(936,329,1)
(1085,297,1)
(555,270,1)
(863,384,1)
(597,329,1)
(729,1097,1)
(718,329,1)
(516,793,1)
(503,388,1)
(291,575,1)
(1116,450,1)
(749,444,1)
(645,693,1)
(594,561,1)
(184,713,1)
(503,25,1)
(370,438,1)
(738,1054,1)
(414,613,1)
(986,329,1)
(326,1041,1)
(769,309,1)
(574,223,1)
(643,637,1)
(399,329,1)
(317,517,1)
(291,710,1)
(646,329,1)
(206,829,1)
(278,151,1)
(861,80,1)
(153,414,1)
(1146,185,1)
(1097,530,1)
(92,771,1)
(1141,966,1)
(529,196,1)
(936,968,1)
(534,536,1)
(806,506,1)
(769,761,1)
(518,547,1)
(986,946,1)
(255,821,1)
(1130,425,1)
(1075,828,1)
(825,1100,1)
(82,705,1)
(374,256,1)
(895,83,1)
(943,196,1)
(863,68,1)
(34,549,1)
(979,98,1)
(555,501,1)
(39,673,1)
(938,1014,1)
(1136,409,1)
(396,752,1)
(1129,685,1)
(399,1140,1)
(824,626,1)
(1028,290,1)
(926,761,1)
(804,685,1)
(53,212,1)
(840,517,1)
(323,656,1)
(188,348,1)
(1008,1101,1)
(1028,409,1)
(781,345,1)
(90,287,1)
(664,349,1)
(247,442,1)
(728,675,1)
(379,103,1)
(484,980,1)
(555,362,1)
(698,496,1)
(314,329,1)
(872,808,1)
(832,881,1)
(840,731,1)
(5,386,1)
(694,108,1)
(1021,255,1)
(299,997,1)
(506,422,1)
(1091,430,1)
(245,1100,1)
(61,238,1)
(251,1067,1)
(799,906,1)
(526,845,1)
(134,1018,1)
(616,954,1)
(88,361,1)
(451,638,1)
(706,329,1)
(1101,281,1)
(870,908,1)
(167,350,1)
(191,927,1)
(503,266,1)
(434,719,1)
(636,329,1)
(503,973,1)
(488,329,1)
(524,96,1)
(1023,631,1)
(840,1088,1)
(1110,373,1)
(906,846,1)
(293,1028,1)
(423,243,1)
(816,183,1)
(306,263,1)
(559,792,1)
(1082,329,1)
(999,911,1)
(270,971,1)
(1012,519,1)
(930,778,1)
(903,1052,1)
(224,833,1)
(391,466,1)
(790,955,1)
(931,258,1)
(778,1045,1)
(641,869,1)
(1025,379,1)
(166,505,1)
(499,88,1)
(219,244,1)
(606,639,1)
(291,1053,1)
(679,675,1)
(226,329,1)
(182,1141,1)
(939,329,1)
(1004,334,1)
(727,988,1)
(363,39,1)
(642,201,1)
(611,278,1)
(199,329,1)
(62,699,1)
(993,816,1)
(279,629,1)
(988,329,1)
(689,140,1)
(36,603,1)
(63,100,1)
(291,501,1)
(980,331,1)
(937,938,1)
(445,643,1)
(1087,329,1)
(621,518,1)
(699,1099,1)
(819,329,1)
(861,835,1)
(460,501,1)
(527,418,1)
(304,329,1)
(347,718,1)
(993,183,1)
(452,1120,1)
(751,798,1)
(629,329,1)
(817,1098,1)
(483,385,1)
(3,616,1)
(648,109,1)
(622,504,1)
(907,97,1)
(131,582,1)
(358,1029,1)
(230,329,1)
(102,777,1)
(209,42,1)
(840,347,1)
(953,306,1)
(1135,670,1)
(1142,706,1)
(825,967,1)
(863,1088,1)
(769,457,1)
(857,329,1)
(388,671,1)
(212,707,1)
(215,512,1)
(966,522,1)
(751,86,1)
(919,329,1)
(563,405,1)
(621,144,1)
(1010,301,1)
(697,540,1)
(37,299,1)
(504,329,1)
(322,824,1)
(726,891,1)
(291,773,1)
(296,771,1)
(863,642,1)
(1017,558,1)
(1117,862,1)
(920,739,1)
(71,73,1)
(1096,188,1)
(840,642,1)
(364,37,1)
(52,154,1)
(1058,225,1)
(915,1108,1)
(393,273,1)
(467,832,1)
(988,41,1)
(657,494,1)
(809,526,1)
(476,273,1)
(7,676,1)
(1099,167,1)
(416,63,1)
(863,1094,1)
(68,18,1)
(960,951,1)
(377,241,1)
(437,209,1)
(757,224,1)
(1010,779,1)
(494,216,1)
(592,513,1)
(739,757,1)
(649,670,1)
(49,279,1)
(420,1091,1)
(3,1063,1)
(1000,544,1)
(138,3,1)
(279,523,1)
(630,564,1)
(956,329,1)
(140,329,1)
(651,345,1)
(552,1107,1)
(110,275,1)
(645,262,1)
(499,13,1)
(80,835,1)
(612,372,1)
(622,75,1)
(769,452,1)
(640,573,1)
(1071,1000,1)
(105,178,1)
(114,329,1)
(1103,329,1)
(106,136,1)
(503,567,1)
(89,641,1)
(1019,329,1)
(1028,944,1)
(111,652,1)
(941,1051,1)
(1118,936,1)
(1030,444,1)
(808,329,1)
(467,374,1)
(626,764,1)
(840,451,1)
(1133,470,1)
(204,861,1)
(15,617,1)
(208,329,1)
(1028,342,1)
(705,322,1)
(840,497,1)
(602,329,1)
(797,781,1)
(761,790,1)
(675,138,1)
(46,901,1)
(1090,270,1)
(291,342,1)
(428,878,1)
(154,1010,1)
(151,982,1)
(478,239,1)
(503,51,1)
(38,329,1)
(1045,119,1)
(829,939,1)
(509,577,1)
(1028,864,1)
(835,1086,1)
(663,49,1)
(1066,904,1)
(202,301,1)
(198,1012,1)
(561,6,1)
(513,736,1)
(261,974,1)
(67,1084,1)
(769,109,1)
(541,459,1)
(6,329,1)
(6,877,1)
(962,58,1)
(350,958,1)
(637,1017,1)
(96,329,1)
(1077,686,1)
(161,329,1)
(537,882,1)
(848,489,1)
(878,996,1)
(585,329,1)
(345,115,1)
(291,963,1)
(225,249,1)
(297,418,1)
(1073,737,1)
(36,998,1)
(150,213,1)
(409,924,1)
(328,29,1)
(107,784,1)
(837,531,1)
(530,685,1)
(35,257,1)
(352,412,1)
(9,1066,1)
(348,389,1)
(231,771,1)
(769,1094,1)
(483,231,1)
(310,139,1)
(477,518,1)
(1090,1089,1)
(591,984,1)
(189,906,1)
(1009,332,1)
(602,794,1)
(785,685,1)
(867,888,1)
(196,471,1)
(830,389,1)
(1109,855,1)
(542,271,1)
(237,1010,1)
(20,865,1)
(40,62,1)
(518,650,1)
(1090,243,1)
(253,1027,1)
(819,960,1)
(555,1089,1)
(616,329,1)
(1028,1089,1)
(653,206,1)
(64,195,1)
(381,685,1)
(863,309,1)
(269,82,1)
(564,817,1)
(827,831,1)
(483,326,1)
(840,678,1)
(670,898,1)
(998,329,1)
(1010,362,1)
(811,848,1)
(555,671,1)
(1020,118,1)
(344,308,1)
(159,898,1)
(503,852,1)
(603,998,1)
(114,323,1)
(843,792,1)
(119,592,1)
(1043,360,1)
(673,461,1)
(372,84,1)
(503,619,1)
(682,651,1)
(923,121,1)
(1079,329,1)
(164,589,1)
(750,578,1)
(27,1078,1)
(1010,197,1)
(35,879,1)
(977,585,1)
(229,285,1)
(769,800,1)
(769,497,1)
(958,624,1)
(213,655,1)
(605,1004,1)
(134,329,1)
(1061,825,1)
(772,542,1)
(285,1061,1)
(35,669,1)
(777,298,1)
(950,407,1)
(654,685,1)
(782,623,1)
(703,329,1)
(212,426,1)
(1135,479,1)
(840,931,1)
(558,197,1)
(955,264,1)
(840,670,1)
(243,230,1)
(1093,341,1)
(1048,545,1)
(917,677,1)
(1115,364,1)
(644,1028,1)
(863,518,1)
(653,329,1)
(494,783,1)
(746,274,1)
(1107,771,1)
(863,393,1)
(761,248,1)
(689,145,1)
(248,790,1)
(525,117,1)
(315,98,1)
(35,392,1)
(43,306,1)
(583,785,1)
(26,1061,1)
(710,934,1)
(483,490,1)
(169,1023,1)
(291,290,1)
(295,521,1)
(450,779,1)
(236,938,1)
(569,99,1)
(291,864,1)
(783,216,1)
(263,112,1)
(8,329,1)
(844,870,1)
(480,819,1)
(378,194,1)
(172,729,1)
(402,773,1)
(570,929,1)
(504,950,1)
(501,615,1)
(702,164,1)
(433,131,1)
(186,11,1)
(883,74,1)
(100,579,1)
(349,265,1)
(281,661,1)
(935,88,1)
(517,808,1)
(749,1030,1)
(348,830,1)
(70,422,1)
(28,702,1)
(743,1050,1)
(887,738,1)
(426,707,1)
(1090,773,1)
(886,475,1)
(725,329,1)
(858,106,1)
(1022,1117,1)
(250,787,1)
(112,162,1)
(579,280,1)
(978,985,1)
(158,974,1)
(474,595,1)
(560,604,1)
(769,147,1)
(32,666,1)
(863,761,1)
(281,915,1)
(555,213,1)
(1028,779,1)
(192,932,1)
(199,952,1)
(258,329,1)
(896,866,1)
(408,725,1)
(87,1094,1)
(267,493,1)
(1091,191,1)
(1013,329,1)
(655,15,1)
(284,551,1)
(875,315,1)
(533,947,1)
(1060,824,1)
(860,647,1)
(42,8,1)
(582,976,1)
(580,442,1)
(959,1089,1)
(387,665,1)
(167,958,1)
(1127,725,1)
(458,97,1)
(990,1087,1)
(1032,251,1)
(29,457,1)
(567,944,1)
(13,1100,1)
(555,1104,1)
(975,849,1)
(274,91,1)
(779,458,1)
(1010,442,1)
(192,28,1)
(810,290,1)
(803,923,1)
(554,1028,1)
(502,931,1)
(149,447,1)
(738,657,1)
(204,36,1)
(31,391,1)
(94,804,1)
(793,532,1)
(547,445,1)
(706,1095,1)
(623,208,1)
(510,155,1)
(549,1042,1)
(155,349,1)
(347,607,1)
(1123,1011,1)
(554,644,1)
(597,747,1)
(152,57,1)
(1086,329,1)
(20,791,1)
(127,672,1)
(778,329,1)
(459,1058,1)
(322,1060,1)
(801,416,1)
(873,54,1)
(764,746,1)
(649,518,1)
(485,776,1)
(1084,689,1)
(575,204,1)
(1110,329,1)
(555,698,1)
(218,9,1)
(1031,1103,1)
(605,750,1)
(667,474,1)
(98,1074,1)
(417,797,1)
(833,630,1)
(1120,166,1)
(1094,367,1)
(957,329,1)
(1039,374,1)
(1028,1031,1)
(362,417,1)
(557,878,1)
(64,329,1)
(79,1066,1)
(399,341,1)
(246,1145,1)
(767,53,1)
(528,720,1)
(615,390,1)
(1067,329,1)
(144,948,1)
(889,1032,1)
(686,171,1)
(1052,360,1)
(898,730,1)
(911,573,1)
(367,382,1)
(138,329,1)
(451,304,1)
(1065,329,1)
(756,1085,1)
(273,329,1)
(808,535,1)
(482,229,1)
(337,436,1)
(353,357,1)
(1114,305,1)
(35,959,1)
(291,1031,1)
(130,329,1)
(369,329,1)
(389,970,1)
(1019,187,1)
(555,243,1)
(360,329,1)
(964,470,1)
(1028,918,1)
(969,329,1)
(309,1,1)
(464,1115,1)
(1051,555,1)
(646,826,1)
(298,864,1)
(304,337,1)
(139,210,1)
(458,329,1)
(776,50,1)
(695,957,1)
(1028,962,1)
(331,34,1)
(292,201,1)
(286,1021,1)
(444,329,1)
(18,1015,1)
(470,665,1)
(1088,286,1)
(475,771,1)
(1090,442,1)
(4,219,1)
(195,410,1)
(916,839,1)
(619,516,1)
(1078,1026,1)
(143,845,1)
(43,317,1)
(25,595,1)
(840,246,1)
(308,199,1)
(291,301,1)
(449,633,1)
(178,723,1)
(596,141,1)
(866,226,1)
(173,1020,1)
(483,215,1)
(220,836,1)
(841,1126,1)
(171,434,1)
(356,775,1)
(1028,773,1)
(927,383,1)
(847,825,1)
(1036,363,1)
(108,827,1)
(385,857,1)
(538,786,1)
(242,329,1)
(742,541,1)
(185,1110,1)
(735,1005,1)
(863,147,1)
(972,685,1)
(338,129,1)
(769,68,1)
(483,125,1)
(532,1118,1)
(483,261,1)
(384,329,1)
(678,587,1)
(669,207,1)
(398,682,1)
(884,696,1)
(300,134,1)
(240,181,1)
(30,294,1)
(1090,991,1)
(555,773,1)
(967,70,1)
(103,772,1)
(427,21,1)
(713,393,1)
(758,52,1)
(633,670,1)
(149,176,1)
(767,751,1)
(625,288,1)
(812,46,1)
(840,393,1)
(900,12,1)
(627,356,1)
(443,1133,1)
(618,105,1)
(271,329,1)
(41,909,1)
(617,329,1)
(160,395,1)
(1054,1096,1)
(1028,963,1)
(924,329,1)
(373,252,1)
(848,362,1)
(291,944,1)
(718,472,1)
(397,861,1)
(291,1068,1)
(832,329,1)
(194,381,1)
(38,484,1)
(1028,623,1)
(35,694,1)
(99,281,1)
(398,329,1)
(545,697,1)
(208,975,1)
(109,815,1)
(259,279,1)
(714,625,1)
(12,437,1)
(22,902,1)
(1041,1119,1)
(826,314,1)
(1004,1130,1)
(878,329,1)
(210,92,1)
(316,329,1)
(1028,301,1)
(571,819,1)
(163,333,1)
(769,670,1)
(686,875,1)
(490,920,1)
(1062,727,1)
(585,440,1)
(500,329,1)
(852,637,1)
(462,844,1)
(587,502,1)
(503,236,1)
(845,762,1)
(287,1022,1)
(118,681,1)
(355,71,1)
(327,1067,1)
(766,542,1)
(912,856,1)
(135,860,1)
(35,598,1)
(234,1052,1)
(1119,192,1)
(483,318,1)
(796,801,1)
(1103,133,1)
(84,608,1)
(500,394,1)
(198,329,1)
(517,872,1)
(496,291,1)
(144,1129,1)
(483,10,1)
(757,329,1)
(581,250,1)
(1088,1021,1)
(793,329,1)
(463,1142,1)
(836,168,1)
(551,1046,1)
(166,329,1)
(1079,218,1)
(1010,1053,1)
(291,362,1)
(456,329,1)
(225,111,1)
(120,551,1)
(142,742,1)
(568,1044,1)
(419,1013,1)
(216,443,1)
(947,883,1)
(1126,685,1)
(200,1025,1)
(952,562,1)
(544,329,1)
(715,357,1)
(392,511,1)
(357,720,1)
(35,402,1)
(1009,329,1)
(153,780,1)
(669,2,1)
(886,329,1)
(58,122,1)
(699,329,1)
(898,329,1)
(717,1091,1)
(730,953,1)
(503,524,1)
(223,1019,1)
(183,492,1)
(305,186,1)
(984,200,1)
(665,174,1)
(669,181,1)
(901,685,1)
(201,1048,1)
(1105,1013,1)
(485,329,1)
(207,135,1)
(488,182,1)
(769,610,1)
(35,566,1)
(1089,726,1)
(541,329,1)
(769,517,1)
(142,541,1)
(1090,213,1)
(37,329,1)
(141,180,1)
(291,671,1)
(770,329,1)
(835,684,1)
(584,329,1)
(439,158,1)
(856,766,1)
(363,329,1)
(332,4,1)
(27,329,1)
(458,300,1)
(164,329,1)
(1,802,1)
(1028,671,1)
(1028,197,1)
(588,503,1)
(35,205,1)
(543,362,1)
(863,736,1)
(555,918,1)
(527,756,1)
(110,686,1)
(799,95,1)
(65,840,1)
(393,476,1)
(555,197,1)
(800,354,1)
(193,497,1)
(349,329,1)
(450,837,1)
(665,329,1)
(33,61,1)
(52,1090,1)
(453,102,1)
(57,463,1)
(492,397,1)
(555,779,1)
(650,547,1)
(239,776,1)
(1090,1068,1)
(655,329,1)
(407,823,1)
(447,695,1)
(593,935,1)
(301,211,1)
(44,22,1)
(1028,213,1)
(863,451,1)
(126,134,1)
(1090,575,1)
(584,295,1)
(762,942,1)
(1143,365,1)
(1069,862,1)
(1100,1111,1)
(914,1068,1)
(576,648,1)
(522,184,1)
(330,1137,1)
(383,800,1)
(775,282,1)
(897,574,1)
(824,329,1)
(1090,1104,1)
(732,988,1)
(498,315,1)
(1119,169,1)
(150,358,1)
(268,1034,1)
(555,409,1)
(482,329,1)
(641,338,1)
(1014,202,1)
(418,627,1)
(65,621,1)
(533,883,1)
(607,718,1)
(1124,48,1)
(1090,779,1)
(555,575,1)
(731,329,1)
(555,623,1)
(251,327,1)
(33,329,1)
(1065,302,1)
(829,903,1)
(422,369,1)
(610,844,1)
(56,450,1)
(918,636,1)
(908,181,1)
(1047,963,1)
(65,769,1)
(155,664,1)
(444,1016,1)
(863,457,1)
(1095,809,1)
(355,329,1)
(815,1073,1)
(1111,325,1)
(1090,362,1)
(1016,465,1)
(555,1068,1)
(555,301,1)
(1028,270,1)
(268,329,1)
(1094,329,1)
(613,500,1)
(145,1037,1)
(769,518,1)
(28,164,1)
(434,1112,1)
(291,918,1)
(384,806,1)
(769,736,1)
(556,724,1)
(405,329,1)
(174,56,1)
(822,969,1)
(219,329,1)
(54,691,1)
(555,963,1)
(118,329,1)
(840,457,1)
(860,557,1)
(621,670,1)
(844,329,1)
(646,314,1)
(982,580,1)
(111,38,1)
(121,868,1)
(769,582,1)
(369,1033,1)
(31,329,1)
(863,497,1)
(711,288,1)
(984,329,1)
(606,581,1)
(956,884,1)
(982,100,1)
(840,736,1)
(526,143,1)
(136,894,1)
(483,67,1)
(964,518,1)
(486,488,1)
(555,1031,1)
(483,612,1)
(56,549,1)
(121,329,1)
(1134,771,1)
(729,329,1)
(1028,941,1)
(658,546,1)
(659,33,1)
(35,853,1)
(555,710,1)
(442,646,1)
(994,329,1)
(346,892,1)
(291,1089,1)
(608,1056,1)
(291,1104,1)
(845,329,1)
(750,1071,1)
(479,731,1)
(684,1086,1)
(1128,329,1)
(503,189,1)
(21,161,1)
(707,1008,1)
(276,405,1)
(736,139,1)
(863,470,1)
(891,660,1)
(254,177,1)
(410,147,1)
(859,14,1)
(544,233,1)
(535,529,1)
(465,610,1)
(840,309,1)
(244,78,1)
(893,149,1)
(418,329,1)
(265,812,1)
(1049,1128,1)
(974,527,1)
(83,1087,1)
(780,727,1)
(863,800,1)
(577,767,1)
(555,290,1)
(57,526,1)
(981,467,1)
(906,575,1)
(258,667,1)
(13,593,1)
(881,1039,1)
(938,301,1)
(902,355,1)
(614,198,1)
(814,161,1)
(78,1134,1)
(197,485,1)
(857,552,1)
(372,219,1)
(109,473,1)
(256,413,1)
(404,705,1)
(123,606,1)
(1028,442,1)
(703,916,1)
(1027,926,1)
(161,400,1)
(547,329,1)
(181,841,1)
(1117,220,1)
(291,197,1)
(187,110,1)
(895,515,1)
(1130,432,1)
(470,387,1)
(976,928,1)
(875,498,1)
(73,452,1)
(973,580,1)
(1028,501,1)
(784,1053,1)
(394,565,1)
(625,711,1)
(862,329,1)
(611,537,1)
(595,284,1)
(1076,569,1)
(546,43,1)
(1105,419,1)
(725,576,1)
(130,30,1)
(769,246,1)
(1127,408,1)
(573,173,1)
(992,329,1)
(748,37,1)
(1035,150,1)
(638,304,1)
(963,919,1)
(511,5,1)
(598,270,1)
(519,451,1)
(855,685,1)
(284,499,1)
(637,197,1)
(382,685,1)
(425,432,1)
(291,409,1)
(341,468,1)
(257,1082,1)
(497,488,1)
(939,27,1)
(1006,328,1)
(291,779,1)
(772,912,1)
(670,159,1)
(649,470,1)
(707,329,1)
(1037,427,1)
(430,191,1)
(1042,622,1)
(1056,1009,1)
(892,54,1)
(205,1135,1)
(798,1138,1)
(35,423,1)
(289,981,1)
(483,1136,1)
(656,1127,1)
(447,329,1)
(309,802,1)
(610,462,1)
(95,574,1)
(840,68,1)
(755,344,1)
(840,800,1)
(291,243,1)
(242,634,1)
(794,19,1)
(555,962,1)
(233,44,1)
(925,411,1)
(503,943,1)
(211,984,1)
(566,649,1)
(555,442,1)
(432,329,1)
(934,329,1)
(821,1104,1)
(863,246,1)
(201,329,1)
(921,136,1)
(562,1115,1)
(652,38,1)
(1028,1053,1)
(840,470,1)
(865,791,1)
(800,1122,1)
(122,101,1)
(503,782,1)
(945,642,1)
(503,716,1)
(1081,181,1)
(35,810,1)
(463,352,1)
(204,329,1)
(300,126,1)
(291,962,1)
(769,470,1)
(294,424,1)
(792,482,1)
(639,581,1)
(1082,1124,1)
(550,60,1)
(186,329,1)
(954,735,1)
(685,949,1)
(291,623,1)
(863,452,1)
(76,632,1)
(624,1070,1)
(769,936,1)
(1108,193,1)
(903,234,1)
(374,329,1)
(549,823,1)
(69,77,1)
(839,994,1)
(97,142,1)
(883,329,1)
(123,329,1)
(661,915,1)
(1010,409,1)
(129,64,1)
(274,329,1)
(1053,267,1)
(662,1131,1)
(863,610,1)
(1007,289,1)
(35,421,1)
(1083,482,1)
(35,977,1)
(557,428,1)
(1046,245,1)
(176,666,1)
(275,803,1)
(336,594,1)
(411,597,1)
(100,724,1)
(291,588,1)
(1096,348,1)
(709,268,1)
(554,293,1)
(621,470,1)
(840,518,1)
(1070,150,1)
(320,258,1)
(141,749,1)
(555,944,1)
(723,95,1)
(49,259,1)
(483,509,1)
(989,404,1)
(951,1096,1)
(75,504,1)
(405,858,1)
(769,160,1)
(117,347,1)
(271,887,1)
(840,333,1)
(924,645,1)
(931,320,1)
(651,848,1)
(737,614,1)
(183,329,1)
(1132,572,1)
(102,864,1)
(615,329,1)
(291,270,1)
(263,17,1)
(47,1038,1)
(1086,618,1)
(1104,123,1)
(157,247,1)
(431,1127,1)
(147,268,1)
(1106,1007,1)
(944,1079,1)
(216,329,1)
(934,378,1)
(925,597,1)
(580,157,1)
(359,1065,1)
(457,969,1)
(863,517,1)
(35,336,1)
(35,254,1)
(1028,1068,1)
(594,6,1)
(840,610,1)
(862,893,1)
(882,456,1)
(282,20,1)
(1010,575,1)
(2,596,1)
(156,7,1)
(691,925,1)
(1067,478,1)
(719,978,1)
(342,130,1)
(35,873,1)
(668,992,1)
(942,921,1)
(803,121,1)
(1090,342,1)
(531,779,1)
(582,329,1)
(495,246,1)
(253,329,1)
(863,670,1)
(1023,114,1)
(863,936,1)
(226,733,1)
(147,709,1)
(1026,903,1)
(815,329,1)
(262,1106,1)
(42,31,1)
(96,396,1)
(595,26,1)
(26,559,1)
(217,940,1)
(776,1114,1)
(939,359,1)
(1090,290,1)
(68,1015,1)
(868,477,1)
(291,213,1)
(452,166,1)
(1142,81,1)
(823,987,1)
(19,62,1)
(771,788,1)
(675,818,1)
(840,160,1)
(512,329,1)
(412,33,1)
(318,805,1)
(400,590,1)
(840,452,1)
(790,329,1)
(671,770,1)
(1045,329,1)
(412,659,1)
(863,347,1)
(308,153,1)
(505,662,1)
(589,431,1)
(1080,1069,1)
(672,309,1)
(792,1083,1)
(1028,362,1)
(768,274,1)
(733,654,1)
(204,676,1)
(840,1094,1)
(1087,525,1)
(773,956,1)
(241,1088,1)
(867,602,1)
(649,163,1)
(697,329,1)
(608,1009,1)
(456,560,1)
(421,964,1)
(14,685,1)
(1028,1104,1)
(65,863,1)
(389,329,1)
(863,333,1)
(877,312,1)
(863,160,1)
(998,156,1)
(74,834,1)
(1076,329,1)
(81,706,1)
(536,22,1)
(77,563,1)
(802,743,1)
(91,152,1)
(769,384,1)
(11,890,1)
(448,160,1)
(440,685,1)
(685,329,1)
(997,449,1)
(727,732,1)
(634,1081,1)
(731,859,1)
(537,456,1)
(497,486,1)
(35,914,1)
(1074,679,1)
(677,895,1)
(76,986,1)
(512,85,1)
(863,554,1)
(1028,575,1)
(553,146,1)
(35,272,1)
(696,714,1)
(1135,470,1)
(181,329,1)
(798,1076,1)
(1131,253,1)
(769,393,1)
(565,199,1)
(1138,1076,1)
(720,329,1)
(280,556,1)
(914,42,1)
(160,1006,1)
(324,89,1)
(1090,710,1)
(1112,719,1)
(302,132,1)
(354,116,1)
(196,963,1)
(574,1019,1)
(95,897,1)
(676,993,1)
(720,94,1)
(769,731,1)
(523,629,1)
(1052,1043,1)
(273,538,1)
(104,102,1)
(919,758,1)
(745,1146,1)
(417,329,1)
(133,464,1)
(458,225,1)
(849,57,1)
(314,796,1)
(211,591,1)
(969,222,1)
(1015,439,1)
(511,329,1)
(601,370,1)
(940,26,1)
(312,685,1)
(636,1143,1)
(246,242,1)
(325,90,1)
(473,815,1)
(736,310,1)
(791,329,1)
(1028,710,1)
(1128,601,1)
(351,653,1)
(971,329,1)
(1028,243,1)
(264,771,1)
(1145,242,1)
(752,384,1)
(827,717,1)
(69,563,1)
(864,584,1)
(333,329,1)
(992,269,1)
(669,917,1)
(53,16,1)
(1090,197,1)
(564,1059,1)
(1066,867,1)
(1005,611,1)
(112,329,1)
(555,864,1)
(726,329,1)
(125,930,1)
(472,240,1)
(818,138,1)
(522,329,1)
(834,867,1)
(338,64,1)
(817,329,1)
(1090,301,1)
(949,640,1)
(719,329,1)
(802,329,1)
(929,910,1)
(60,745,1)
(503,848,2)
(707,281,2)
(717,685,2)
(736,771,2)
(551,26,2)
(1093,1117,2)
(698,150,2)
(584,118,2)
(510,155,2)
(410,357,2)
(189,906,2)
(498,675,2)
(863,582,2)
(824,329,2)
(317,196,2)
(1008,281,2)
(291,595,2)
(1084,689,2)
(123,606,2)
(291,963,2)
(585,329,2)
(325,1117,2)
(1047,102,2)
(314,329,2)
(450,549,2)
(845,329,2)
(1132,686,2)
(231,771,2)
(769,497,2)
(555,1068,2)
(291,196,2)
(374,329,2)
(187,637,2)
(909,414,2)
(749,444,2)
(835,95,2)
(9,1066,2)
(555,918,2)
(396,422,2)
(434,719,2)
(989,705,2)
(646,329,2)
(636,329,2)
(240,181,2)
(88,551,2)
(768,57,2)
(937,772,2)
(278,100,2)
(211,329,2)
(503,450,2)
(643,637,2)
(949,573,2)
(973,580,2)
(1115,76,2)
(668,992,2)
(530,685,2)
(857,329,2)
(382,685,2)
(641,869,2)
(40,62,2)
(555,675,2)
(291,1066,2)
(640,573,2)
(919,1010,2)
(886,771,2)
(1071,22,2)
(485,776,2)
(592,771,2)
(698,675,2)
(766,542,2)
(557,181,2)
(860,181,2)
(163,685,2)
(555,944,2)
(963,1090,2)
(861,835,2)
(771,329,2)
(978,875,2)
(769,109,2)
(291,1115,2)
(769,1088,2)
(97,549,2)
(496,1117,2)
(197,686,2)
(840,470,2)
(197,485,2)
(496,308,2)
(817,329,2)
(551,245,2)
(82,705,2)
(291,301,2)
(588,450,2)
(204,676,2)
(95,574,2)
(291,921,2)
(1096,348,2)
(135,860,2)
(1027,771,2)
(698,1010,2)
(286,685,2)
(612,771,2)
(1076,329,2)
(969,329,2)
(458,549,2)
(433,291,2)
(1116,450,2)
(480,1096,2)
(887,549,2)
(212,281,2)
(205,685,2)
(496,580,2)
(1133,549,2)
(211,772,2)
(1074,611,2)
(492,95,2)
(703,42,2)
(608,771,2)
(655,185,2)
(1028,623,2)
(315,611,2)
(405,136,2)
(863,518,2)
(1028,962,2)
(65,840,2)
(1071,544,2)
(358,185,2)
(98,675,2)
(505,771,2)
(419,308,2)
(345,1066,2)
(809,526,2)
(1010,442,2)
(57,463,2)
(862,196,2)
(112,329,2)
(974,527,2)
(246,181,2)
(291,290,2)
(939,27,2)
(479,685,2)
(416,100,2)
(76,986,2)
(496,196,2)
(555,938,2)
(964,670,2)
(117,181,2)
(769,68,2)
(322,746,2)
(291,1010,2)
(271,329,2)
(503,1066,2)
(526,845,2)
(1033,1117,2)
(686,875,2)
(792,1061,2)
(332,771,2)
(1068,703,2)
(522,329,2)
(963,919,2)
(677,181,2)
(50,686,2)
(827,685,2)
(618,95,2)
(924,645,2)
(62,185,2)
(755,308,2)
(863,109,2)
(363,329,2)
(617,185,2)
(710,934,2)
(291,1031,2)
(164,329,2)
(291,409,2)
(878,329,2)
(289,467,2)
(1090,442,2)
(938,301,2)
(596,181,2)
(641,357,2)
(588,1117,2)
(431,1127,2)
(955,771,2)
(1021,329,2)
(1028,442,2)
(858,136,2)
(158,974,2)
(892,54,2)
(772,912,2)
(769,309,2)
(460,308,2)
(1091,685,2)
(1128,329,2)
(840,109,2)
(770,705,2)
(291,944,2)
(298,118,2)
(964,518,2)
(840,800,2)
(118,329,2)
(458,97,2)
(957,176,2)
(1029,185,2)
(1103,329,2)
(291,671,2)
(132,903,2)
(360,329,2)
(890,686,2)
(645,467,2)
(271,549,2)
(52,1090,2)
(291,270,2)
(389,906,2)
(95,686,2)
(284,551,2)
(1082,329,2)
(840,497,2)
(252,668,2)
(1079,1066,2)
(771,573,2)
(120,551,2)
(925,597,2)
(818,611,2)
(362,417,2)
(998,329,2)
(830,906,2)
(904,867,2)
(291,580,2)
(353,357,2)
(837,549,2)
(223,637,2)
(756,329,2)
(588,150,2)
(510,329,2)
(291,1053,2)
(87,685,2)
(631,1127,2)
(596,141,2)
(606,581,2)
(803,637,2)
(1061,422,2)
(264,771,2)
(503,580,2)
(1028,779,2)
(140,329,2)
(887,450,2)
(863,642,2)
(1066,62,2)
(769,457,2)
(305,686,2)
(503,62,2)
(451,304,2)
(144,771,2)
(1028,301,2)
(494,450,2)
(1131,771,2)
(1119,1127,2)
(1063,611,2)
(797,345,2)
(171,875,2)
(588,422,2)
(341,468,2)
(1066,867,2)
(346,54,2)
(772,542,2)
(1065,903,2)
(555,501,2)
(529,196,2)
(907,549,2)
(940,26,2)
(605,771,2)
(750,1071,2)
(185,1110,2)
(845,921,2)
(555,921,2)
(208,57,2)
(258,329,2)
(147,357,2)
(910,176,2)
(966,522,2)
(1094,329,2)
(242,329,2)
(503,595,2)
(524,96,2)
(201,329,2)
(840,68,2)
(617,329,2)
(478,686,2)
(359,903,2)
(769,393,2)
(867,62,2)
(204,36,2)
(571,819,2)
(130,329,2)
(852,637,2)
(485,251,2)
(167,958,2)
(986,364,2)
(274,57,2)
(954,611,2)
(958,329,2)
(116,685,2)
(458,300,2)
(911,573,2)
(383,685,2)
(853,685,2)
(496,906,2)
(542,450,2)
(555,301,2)
(935,551,2)
(57,526,2)
(1090,362,2)
(555,1066,2)
(769,333,2)
(309,802,2)
(18,974,2)
(438,1117,2)
(863,1088,2)
(604,278,2)
(990,181,2)
(70,422,2)
(73,771,2)
(587,595,2)
(621,771,2)
(322,824,2)
(219,329,2)
(556,724,2)
(1100,1117,2)
(659,1142,2)
(750,578,2)
(265,685,2)
(439,974,2)
(603,95,2)
(859,685,2)
(621,518,2)
(192,1127,2)
(269,705,2)
(210,771,2)
(624,150,2)
(901,685,2)
(251,1067,2)
(767,53,2)
(123,329,2)
(81,526,2)
(273,329,2)
(861,95,2)
(547,637,2)
(698,921,2)
(30,594,2)
(33,329,2)
(668,705,2)
(136,1105,2)
(793,329,2)
(1041,1119,2)
(387,549,2)
(1019,637,2)
(384,1117,2)
(512,329,2)
(654,685,2)
(773,956,2)
(883,329,2)
(769,517,2)
(1034,357,2)
(705,322,2)
(738,450,2)
(1023,1127,2)
(614,198,2)
(840,670,2)
(296,771,2)
(762,921,2)
(1087,329,2)
(1089,726,2)
(348,389,2)
(412,33,2)
(141,180,2)
(393,273,2)
(559,792,2)
(750,22,2)
(102,118,2)
(1111,1117,2)
(963,1010,2)
(1031,1103,2)
(863,497,2)
(1088,685,2)
(906,575,2)
(118,772,2)
(597,329,2)
(824,746,2)
(719,875,2)
(863,670,2)
(1103,1115,2)
(555,422,2)
(399,1117,2)
(1142,706,2)
(470,665,2)
(912,542,2)
(840,610,2)
(316,686,2)
(764,746,2)
(8,329,2)
(151,100,2)
(555,575,2)
(362,345,2)
(61,1142,2)
(414,613,2)
(698,906,2)
(482,329,2)
(943,196,2)
(385,771,2)
(927,685,2)
(377,685,2)
(685,329,2)
(458,329,2)
(1028,290,2)
(698,196,2)
(637,686,2)
(57,921,2)
(796,100,2)
(1086,329,2)
(308,199,2)
(541,329,2)
(785,685,2)
(782,57,2)
(588,921,2)
(421,685,2)
(503,938,2)
(588,62,2)
(717,1091,2)
(863,731,2)
(1010,213,2)
(216,329,2)
(882,278,2)
(109,815,2)
(470,450,2)
(676,95,2)
(1066,904,2)
(682,848,2)
(532,675,2)
(698,1115,2)
(22,771,2)
(698,62,2)
(1122,685,2)
(718,181,2)
(1087,181,2)
(779,549,2)
(53,16,2)
(895,515,2)
(810,685,2)
(555,308,2)
(992,329,2)
(641,338,2)
(3,611,2)
(351,196,2)
(1090,1104,2)
(769,800,2)
(1028,270,2)
(669,685,2)
(348,95,2)
(856,542,2)
(4,771,2)
(535,196,2)
(921,308,2)
(615,308,2)
(931,258,2)
(161,329,2)
(344,308,2)
(477,637,2)
(610,181,2)
(912,329,2)
(611,580,2)
(1137,974,2)
(544,22,2)
(1090,779,2)
(613,199,2)
(991,685,2)
(994,42,2)
(630,564,2)
(769,582,2)
(534,22,2)
(96,329,2)
(794,62,2)
(1076,281,2)
(575,204,2)
(558,686,2)
(863,147,2)
(908,181,2)
(136,308,2)
(1065,329,2)
(167,150,2)
(695,176,2)
(1026,903,2)
(566,685,2)
(2,181,2)
(1091,191,2)
(791,329,2)
(291,637,2)
(465,181,2)
(1010,575,2)
(815,329,2)
(99,281,2)
(365,62,2)
(595,284,2)
(944,1066,2)
(1129,685,2)
(133,1115,2)
(167,185,2)
(679,675,2)
(778,1045,2)
(653,196,2)
(372,219,2)
(372,329,2)
(88,1100,2)
(94,685,2)
(474,595,2)
(1135,518,2)
(65,863,2)
(187,686,2)
(1119,169,2)
(270,54,2)
(919,102,2)
(888,62,2)
(28,164,2)
(800,685,2)
(555,1053,2)
(254,685,2)
(1010,197,2)
(6,329,2)
(879,685,2)
(1068,42,2)
(826,100,2)
(863,246,2)
(832,329,2)
(937,938,2)
(1004,1130,2)
(245,26,2)
(918,62,2)
(541,549,2)
(397,95,2)
(1004,22,2)
(769,347,2)
(325,329,2)
(1142,526,2)
(501,308,2)
(987,1096,2)
(60,185,2)
(239,686,2)
(863,347,2)
(678,595,2)
(503,906,2)
(761,771,2)
(335,308,2)
(1028,1053,2)
(975,57,2)
(249,549,2)
(174,549,2)
(1028,197,2)
(758,102,2)
(555,342,2)
(1028,671,2)
(819,1096,2)
(1112,875,2)
(731,329,2)
(982,100,2)
(293,1028,2)
(12,42,2)
(720,329,2)
(686,611,2)
(291,962,2)
(1019,686,2)
(444,181,2)
(503,1090,2)
(731,685,2)
(318,771,2)
(543,345,2)
(835,1086,2)
(867,602,2)
(156,95,2)
(863,393,2)
(44,22,2)
(62,150,2)
(287,1117,2)
(108,827,2)
(780,414,2)
(263,112,2)
(761,790,2)
(3,616,2)
(863,800,2)
(290,510,2)
(840,160,2)
(658,196,2)
(496,921,2)
(176,666,2)
(417,345,2)
(840,147,2)
(447,176,2)
(244,771,2)
(90,1117,2)
(191,685,2)
(379,772,2)
(121,329,2)
(988,414,2)
(769,1094,2)
(141,749,2)
(799,95,2)
(516,793,2)
(38,329,2)
(593,551,2)
(555,213,2)
(349,685,2)
(555,409,2)
(703,329,2)
(1010,409,2)
(922,1115,2)
(679,611,2)
(877,685,2)
(295,118,2)
(195,357,2)
(675,138,2)
(565,199,2)
(151,580,2)
(752,1117,2)
(840,518,2)
(894,308,2)
(504,823,2)
(443,450,2)
(952,1115,2)
(457,969,2)
(512,771,2)
(125,771,2)
(248,771,2)
(118,938,2)
(769,21,2)
(1090,710,2)
(863,384,2)
(767,751,2)
(903,196,2)
(1010,301,2)
(155,349,2)
(1077,686,2)
(389,95,2)
(291,710,2)
(503,196,2)
(555,62,2)
(598,54,2)
(742,549,2)
(15,185,2)
(574,686,2)
(314,100,2)
(499,13,2)
(1106,467,2)
(622,504,2)
(682,345,2)
(28,1127,2)
(840,457,2)
(58,329,2)
(993,183,2)
(1075,176,2)
(634,181,2)
(848,345,2)
(939,329,2)
(724,345,2)
(196,963,2)
(138,329,2)
(776,686,2)
(291,779,2)
(1126,685,2)
(36,998,2)
(226,685,2)
(496,62,2)
(196,1090,2)
(930,771,2)
(444,329,2)
(564,817,2)
(897,637,2)
(398,329,2)
(65,769,2)
(694,685,2)
(220,862,2)
(74,867,2)
(510,685,2)
(291,450,2)
(772,549,2)
(840,731,2)
(1105,308,2)
(727,988,2)
(986,329,2)
(470,549,2)
(291,422,2)
(1017,686,2)
(467,832,2)
(245,1100,2)
(919,1090,2)
(341,1117,2)
(37,329,2)
(258,595,2)
(49,279,2)
(555,580,2)
(629,329,2)
(499,551,2)
(172,685,2)
(360,196,2)
(602,329,2)
(844,329,2)
(840,333,2)
(667,595,2)
(76,364,2)
(384,422,2)
(1140,1117,2)
(378,685,2)
(103,772,2)
(376,95,2)
(724,848,2)
(468,1128,2)
(142,549,2)
(496,150,2)
(153,199,2)
(636,62,2)
(1028,963,2)
(1013,308,2)
(695,957,2)
(191,329,2)
(951,1096,2)
(152,57,2)
(1067,329,2)
(387,450,2)
(619,675,2)
(841,685,2)
(767,281,2)
(863,761,2)
(234,196,2)
(412,1142,2)
(733,685,2)
(560,278,2)
(947,867,2)
(1096,906,2)
(588,308,2)
(467,374,2)
(798,1076,2)
(702,1127,2)
(665,329,2)
(525,181,2)
(958,150,2)
(506,422,2)
(698,102,2)
(396,1117,2)
(1110,668,2)
(150,213,2)
(738,1096,2)
(216,450,2)
(781,345,2)
(921,136,2)
(213,655,2)
(546,196,2)
(825,1100,2)
(563,136,2)
(719,329,2)
(85,771,2)
(896,226,2)
(1025,772,2)
(1028,773,2)
(100,848,2)
(153,780,2)
(923,637,2)
(840,931,2)
(616,611,2)
(418,329,2)
(1028,1089,2)
(38,549,2)
(970,95,2)
(372,84,2)
(349,329,2)
(588,906,2)
(291,442,2)
(347,181,2)
(218,1066,2)
(588,705,2)
(1105,1013,2)
(516,675,2)
(895,83,2)
(657,494,2)
(819,329,2)
(53,212,2)
(806,422,2)
(68,1015,2)
(602,62,2)
(1090,773,2)
(769,246,2)
(354,329,2)
(549,823,2)
(1095,526,2)
(216,549,2)
(315,98,2)
(779,458,2)
(1130,22,2)
(7,95,2)
(554,1028,2)
(291,623,2)
(863,736,2)
(939,359,2)
(686,171,2)
(848,362,2)
(698,1066,2)
(610,844,2)
(471,1090,2)
(141,181,2)
(472,181,2)
(192,932,2)
(931,595,2)
(870,181,2)
(830,95,2)
(934,329,2)
(864,584,2)
(1088,1021,2)
(938,772,2)
(367,685,2)
(503,705,2)
(503,1117,2)
(1028,362,2)
(64,357,2)
(333,329,2)
(698,705,2)
(897,686,2)
(208,329,2)
(80,95,2)
(458,225,2)
(51,1090,2)
(1049,1117,2)
(176,196,2)
(895,181,2)
(1107,771,2)
(46,685,2)
(970,906,2)
(1013,329,2)
(524,1117,2)
(555,623,2)
(863,610,2)
(863,517,2)
(503,102,2)
(948,771,2)
(836,862,2)
(405,329,2)
(1078,903,2)
(1090,270,2)
(134,549,2)
(354,685,2)
(188,906,2)
(980,549,2)
(646,314,2)
(181,329,2)
(440,685,2)
(976,291,2)
(666,653,2)
(173,118,2)
(1099,167,2)
(588,848,2)
(105,95,2)
(207,181,2)
(825,422,2)
(611,537,2)
(961,364,2)
(496,1090,2)
(555,442,2)
(114,1127,2)
(547,329,2)
(575,95,2)
(157,100,2)
(840,761,2)
(1109,685,2)
(555,450,2)
(220,168,2)
(1090,342,2)
(83,1087,2)
(352,1142,2)
(381,685,2)
(361,551,2)
(544,329,2)
(1006,329,2)
(291,62,2)
(625,288,2)
(1042,622,2)
(250,685,2)
(1138,281,2)
(488,329,2)
(552,771,2)
(160,1006,2)
(580,442,2)
(1028,918,2)
(291,906,2)
(359,1065,2)
(291,938,2)
(1117,862,2)
(769,761,2)
(1028,864,2)
(921,69,2)
(35,357,2)
(496,450,2)
(671,705,2)
(816,95,2)
(52,102,2)
(306,263,2)
(110,686,2)
(186,686,2)
(178,95,2)
(291,848,2)
(847,422,2)
(999,573,2)
(121,637,2)
(291,1104,2)
(646,100,2)
(251,686,2)
(549,1042,2)
(399,1140,2)
(893,196,2)
(1090,1053,2)
(253,771,2)
(840,595,2)
(1036,363,2)
(119,771,2)
(108,685,2)
(153,414,2)
(138,611,2)
(79,1066,2)
(517,808,2)
(53,281,2)
(684,95,2)
(650,637,2)
(130,594,2)
(769,555,2)
(20,791,2)
(555,595,2)
(664,685,2)
(291,705,2)
(840,347,2)
(192,28,2)
(896,685,2)
(78,771,2)
(1104,685,2)
(752,422,2)
(42,8,2)
(41,414,2)
(147,268,2)
(774,555,2)
(496,1010,2)
(13,1100,2)
(1134,771,2)
(562,1115,2)
(840,452,2)
(939,903,2)
(972,685,2)
(863,936,2)
(255,685,2)
(154,1010,2)
(33,1142,2)
(389,329,2)
(350,150,2)
(338,64,2)
(533,883,2)
(26,1061,2)
(676,993,2)
(262,467,2)
(496,102,2)
(840,1088,2)
(1020,118,2)
(150,185,2)
(581,685,2)
(864,118,2)
(555,102,2)
(1070,150,2)
(863,68,2)
(555,1089,2)
(1015,974,2)
(716,921,2)
(594,685,2)
(181,685,2)
(985,875,2)
(300,134,2)
(698,938,2)
(499,88,2)
(579,329,2)
(622,823,2)
(872,196,2)
(301,211,2)
(588,675,2)
(282,20,2)
(1079,329,2)
(430,685,2)
(804,685,2)
(357,685,2)
(69,563,2)
(666,196,2)
(971,54,2)
(591,772,2)
(1119,192,2)
(290,685,2)
(83,181,2)
(971,329,2)
(993,95,2)
(1042,823,2)
(185,705,2)
(769,936,2)
(778,329,2)
(657,450,2)
(291,1068,2)
(398,345,2)
(860,557,2)
(25,595,2)
(35,685,2)
(301,772,2)
(582,329,2)
(886,329,2)
(1090,575,2)
(223,686,2)
(169,1023,2)
(746,274,2)
(675,611,2)
(459,549,2)
(183,329,2)
(62,699,2)
(944,1079,2)
(916,42,2)
(958,185,2)
(555,773,2)
(808,329,2)
(624,185,2)
(811,848,2)
(651,848,2)
(639,685,2)
(300,549,2)
(902,771,2)
(964,470,2)
(588,938,2)
(471,102,2)
(1010,779,2)
(798,281,2)
(342,594,2)
(1046,26,2)
(503,637,2)
(772,450,2)
(645,262,2)
(485,686,2)
(573,329,2)
(805,605,2)
(14,685,2)
(1016,181,2)
(196,102,2)
(32,196,2)
(1028,1031,2)
(453,102,2)
(456,278,2)
(1007,467,2)
(632,364,2)
(524,422,2)
(607,181,2)
(1009,771,2)
(561,685,2)
(456,329,2)
(1045,329,2)
(699,329,2)
(657,549,2)
(928,291,2)
(715,357,2)
(384,329,2)
(364,37,2)
(336,685,2)
(1060,746,2)
(169,1127,2)
(1074,675,2)
(280,724,2)
(144,357,2)
(198,329,2)
(471,1010,2)
(728,675,2)
(284,26,2)
(924,329,2)
(496,938,2)
(1018,549,2)
(963,102,2)
(595,422,2)
(769,160,2)
(936,329,2)
(649,685,2)
(1047,1010,2)
(166,329,2)
(138,3,2)
(291,864,2)
(284,499,2)
(746,57,2)
(919,329,2)
(1031,1115,2)
(496,637,2)
(727,414,2)
(452,771,2)
(555,1104,2)
(271,1096,2)
(323,1127,2)
(503,57,2)
(1118,675,2)
(588,1010,2)
(863,21,2)
(21,161,2)
(304,329,2)
(97,142,2)
(279,629,2)
(58,921,2)
(979,675,2)
(511,329,2)
(34,549,2)
(463,352,2)
(698,450,2)
(500,199,2)
(496,1115,2)
(769,451,2)
(1047,1090,2)
(706,526,2)
(588,637,2)
(352,412,2)
(200,772,2)
(56,549,2)
(278,329,2)
(1028,409,2)
(268,329,2)
(291,213,2)
(821,685,2)
(605,1004,2)
(555,57,2)
(783,549,2)
(623,57,2)
(709,357,2)
(1028,710,2)
(496,675,2)
(498,611,2)
(681,938,2)
(75,823,2)
(803,121,2)
(649,670,2)
(866,685,2)
(537,278,2)
(823,571,2)
(751,86,2)
(372,771,2)
(199,329,2)
(1014,772,2)
(1111,325,2)
(1143,62,2)
(926,771,2)
(792,482,2)
(555,963,2)
(183,95,2)
(464,1115,2)
(1081,181,2)
(977,685,2)
(1032,686,2)
(571,1096,2)
(291,918,2)
(56,450,2)
(555,1090,2)
(589,1127,2)
(518,637,2)
(536,22,2)
(588,57,2)
(579,724,2)
(320,595,2)
(1094,685,2)
(324,357,2)
(812,685,2)
(308,153,2)
(671,770,2)
(611,100,2)
(166,771,2)
(1056,771,2)
(735,611,2)
(772,1096,2)
(149,196,2)
(942,921,2)
(1022,1117,2)
(52,1010,2)
(432,22,2)
(291,1089,2)
(769,147,2)
(84,771,2)
(89,641,2)
(399,341,2)
(241,685,2)
(1146,185,2)
(450,779,2)
(542,549,2)
(211,984,2)
(652,549,2)
(489,345,2)
(77,136,2)
(355,329,2)
(1010,771,2)
(1045,771,2)
(145,329,2)
(863,452,2)
(555,290,2)
(903,1052,2)
(54,691,2)
(572,686,2)
(868,637,2)
(1010,1053,2)
(930,778,2)
(588,196,2)
(1090,357,2)
(769,452,2)
(950,823,2)
(1104,123,2)
(19,62,2)
(790,771,2)
(992,705,2)
(776,1114,2)
(739,757,2)
(428,181,2)
(1024,199,2)
(503,150,2)
(482,1061,2)
(749,181,2)
(291,362,2)
(243,230,2)
(177,685,2)
(143,921,2)
(588,102,2)
(689,145,2)
(703,916,2)
(272,685,2)
(213,185,2)
(139,771,2)
(484,549,2)
(698,1090,2)
(1069,862,2)
(42,31,2)
(285,1061,2)
(452,166,2)
(27,903,2)
(1132,316,2)
(91,57,2)
(253,329,2)
(106,136,2)
(369,329,2)
(500,329,2)
(583,685,2)
(863,1094,2)
(1090,1089,2)
(642,201,2)
(501,615,2)
(828,176,2)
(1028,342,2)
(164,1127,2)
(769,384,2)
(215,771,2)
(697,329,2)
(129,357,2)
(802,329,2)
(934,685,2)
(1117,196,2)
(808,196,2)
(291,1090,2)
(1117,220,2)
(1054,1096,2)
(312,685,2)
(308,1115,2)
(278,580,2)
(219,771,2)
(653,329,2)
(981,467,2)
(941,555,2)
(863,451,2)
(26,422,2)
(65,621,2)
(1028,555,2)
(168,862,2)
(769,731,2)
(204,329,2)
(1019,329,2)
(409,924,2)
(705,57,2)
(707,329,2)
(84,608,2)
(533,867,2)
(769,518,2)
(595,26,2)
(979,611,2)
(291,197,2)
(780,727,2)
(242,181,2)
(43,196,2)
(206,196,2)
(1028,1104,2)
(1110,329,2)
(1114,686,2)
(271,450,2)
(840,736,2)
(577,767,2)
(1028,213,2)
(291,57,2)
(621,470,2)
(685,573,2)
(723,95,2)
(1030,181,2)
(315,675,2)
(840,246,2)
(390,308,2)
(917,181,2)
(615,329,2)
(1097,685,2)
(1028,575,2)
(555,705,2)
(503,675,2)
(247,100,2)
(555,362,2)
(202,772,2)
(340,686,2)
(1043,196,2)
(345,329,2)
(399,329,2)
(347,718,2)
(294,594,2)
(194,685,2)
(1005,611,2)
(559,1061,2)
(225,549,2)
(54,49,2)
(605,22,2)
(698,308,2)
(555,1115,2)
(670,898,2)
(550,185,2)
(957,329,2)
(110,637,2)
(422,369,2)
(1090,301,2)
(555,710,2)
(863,470,2)
(437,42,2)
(904,533,2)
(778,771,2)
(875,315,2)
(555,779,2)
(424,594,2)
(588,580,2)
(994,329,2)
(236,938,2)
(584,329,2)
(718,329,2)
(875,611,2)
(1000,22,2)
(601,1117,2)
(417,329,2)
(555,196,2)
(662,771,2)
(691,925,2)
(554,555,2)
(217,26,2)
(537,456,2)
(291,1117,2)
(863,160,2)
(1145,181,2)
(177,729,2)
(769,670,2)
(485,1132,2)
(526,921,2)
(111,38,2)
(588,595,2)
(706,329,2)
(409,467,2)
(1090,197,2)
(988,329,2)
(330,974,2)
(463,526,2)
(521,118,2)
(1130,432,2)
(495,181,2)
(698,57,2)
(698,637,2)
(503,921,2)
(555,1031,2)
(860,647,2)
(846,95,2)
(777,118,2)
(1090,213,2)
(31,329,2)
(729,329,2)
(209,42,2)
(1067,686,2)
(101,921,2)
(991,357,2)
(889,686,2)
(1028,944,2)
(62,167,2)
(769,736,2)
(616,329,2)
(355,771,2)
(388,705,2)
(291,243,2)
(1028,501,2)
(555,150,2)
(982,580,2)
(677,895,2)
(69,136,2)
(1128,1117,2)
(434,875,2)
(96,422,2)
(738,549,2)
(422,1117,2)
(542,1096,2)
(196,1010,2)
(407,823,2)
(936,675,2)
(710,685,2)
(555,864,2)
(806,1117,2)
(621,685,2)
(698,848,2)
(447,695,2)
(310,771,2)
(770,329,2)
(840,1094,2)
(655,329,2)
(626,746,2)
(1090,685,2)
(506,1117,2)
(686,675,2)
(787,685,2)
(736,139,2)
(960,1096,2)
(432,329,2)
(342,130,2)
(790,329,2)
(98,329,2)
(1051,555,2)
(570,176,2)
(665,450,2)
(996,181,2)
(203,771,2)
(36,95,2)
(333,685,2)
(144,685,2)
(1135,470,2)
(649,518,2)
(291,150,2)
(720,685,2)
(863,309,2)
(621,357,2)
(1028,243,2)
(1100,1111,2)
(962,58,2)
(582,291,2)
(496,595,2)
(185,668,2)
(844,181,2)
(698,1117,2)
(302,903,2)
(1023,114,2)
(878,181,2)
(915,329,2)
(665,549,2)
(225,111,2)
(758,1010,2)
(637,197,2)
(1052,196,2)
(63,100,2)
(1052,360,2)
(22,355,2)
(139,329,2)
(799,906,2)
(68,974,2)
(563,405,2)
(698,580,2)
(834,867,2)
(531,549,2)
(404,705,2)
(1009,329,2)
(840,309,2)
(580,100,2)
(291,342,2)
(502,595,2)
(1062,414,2)
(758,1090,2)
(11,686,2)
(898,329,2)
(275,637,2)
(918,636,2)
(447,329,2)
(769,642,2)
(956,329,2)
(887,1096,2)
(96,1117,2)
(732,414,2)
(1135,685,2)
(585,685,2)
(783,450,2)
(726,329,2)
(348,906,2)
(714,625,2)
(350,185,2)
(503,308,2)
(1021,685,2)
(266,62,2)
(555,848,2)
(968,675,2)
(443,549,2)
(849,57,2)
(462,181,2)
(1010,362,2)
(134,329,2)
(71,771,2)
(699,167,2)
(1115,364,2)
(567,1066,2)
(588,1066,2)
(528,685,2)
(724,398,2)
(270,971,2)
(555,197,2)
(142,541,2)
(475,771,2)
(496,705,2)
(370,1117,2)
(291,102,2)
(188,95,2)
(369,1117,2)
(95,637,2)
(468,1117,2)
(555,671,2)
(984,772,2)
(769,470,2)
(613,500,2)
(644,1028,2)
(698,422,2)
(1090,290,2)
(1061,825,2)
(964,685,2)
(288,329,2)
(135,181,2)
(169,1139,2)
(204,95,2)
(606,685,2)
(557,878,2)
(527,756,2)
(605,750,2)
(246,242,2)
(115,1066,2)
(920,739,2)
(504,329,2)
(751,281,2)
(831,685,2)
(357,720,2)
(1058,549,2)
(420,685,2)
(769,610,2)
(26,559,2)
(855,685,2)
(275,803,2)
(226,329,2)
(555,1010,2)
(1090,243,2)
(496,848,2)
(1090,1068,2)
(863,555,2)
(757,329,2)
(268,357,2)
(793,675,2)
(1092,903,2)
(291,575,2)
(555,962,2)
(10,771,2)
(496,1066,2)
(13,551,2)
(503,1115,2)
(281,915,2)
(394,199,2)
(839,42,2)
(555,906,2)
(291,773,2)
(238,1142,2)
(513,771,2)
(494,549,2)
(549,1096,2)
(425,22,2)
(27,329,2)
(573,118,2)
(883,867,2)
(463,1142,2)
(398,848,2)
(100,579,2)
(291,308,2)
(698,595,2)
(327,686,2)
(92,771,2)
(98,611,2)
(100,724,2)
(689,140,2)
(900,42,2)
(840,642,2)
(623,208,2)
(373,668,2)
(840,451,2)
(496,422,2)
(527,418,2)
(555,243,2)
(725,329,2)
(655,617,2)
(316,329,2)
(745,185,2)
(1114,186,2)
(788,573,2)
(555,1117,2)
(693,467,2)
(1096,95,2)
(840,517,2)
(233,22,2)
(1028,1068,2)
(998,95,2)
(122,921,2)
(906,95,2)
(862,329,2)
(1101,281,2)
(827,717,2)
(414,199,2)
(123,685,2)
(611,278,2)
(445,637,2)
(594,6,2)
(574,1019,2)
(1015,329,2)
(857,771,2)
(155,685,2)
(1035,150,2)
(237,1010,2)
(608,1009,2)
(229,1061,2)
(338,357,2)
(1135,670,2)
(800,354,2)
(656,1127,2)
(104,102,2)
(569,281,2)
(775,282,2)
(491,771,2)
(64,329,2)
(967,422,2)
(494,216,2)
(801,100,2)
(114,329,2)
(542,271,2)
(1133,450,2)
(485,329,2)
(276,136,2)
(705,746,2)
(863,333,2)
(805,771,2)
(131,291,2)
(291,675,2)
(174,450,2)
(331,549,2)
(1080,862,2)
(924,467,2)
(89,357,2)
(171,434,2)
(518,547,2)
(262,329,2)
(621,670,2)
(681,772,2)
(497,488,2)
(1083,1061,2)
(962,921,2)
(829,196,2)
(1127,725,2)
(840,21,2)
(823,1096,2)
(102,864,2)
(574,637,2)
(111,549,2)
(984,329,2)
(186,329,2)
(843,1061,2)
(588,1090,2)
(230,329,2)
(517,196,2)
(581,329,2)
(588,1115,2)
(946,364,2)
(204,861,2)
(212,707,2)
(43,306,2)
(863,457,2)
(916,994,2)
(649,470,2)
(1070,185,2)
(840,393,2)
(6,685,2)
(503,1010,2)
(291,501,2)
(555,637,2)
(1086,95,2)
(274,329,2)
(426,281,2)
(442,646,2)
(483,771,2)
(199,1115,2)
(555,270,2)
(875,675,2)
(1131,253,2)
(751,798,2)
(503,422,2)
(729,685,2)
(442,100,2)
(100,345,2)
(651,345,2)
(496,57,2)
(168,329,2)
(873,54,2)
(929,176,2)
(1004,334,2)
(126,549,2)
(1120,771,2)
-----------------------------------
(0,0x8f:)
(1,val)
(2,break;)
(3,ctxt->regs[VCPU_REGS_RCX])
(4,ctxt)
(5,"inc")
(6,ctxt->eflags)
(7,ctxt)
(8,ctxt->b)
(9,rc)
(10,break;)
(11,src)
(12,ctxt)
(13,r->pos)
(14,ctxt)
(15,X86_ICPT_PRE_EXCEPT)
(16,s16)
(17,type)
(18,type)
(19,ctxt)
(20,ctxt->src.val)
(21,ctxt->dst.val)
(22,ctxt->op_bytes == 4)
(23,case 0x08:)
(24,)
(25,goto done;)
(26,r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff)
(27,seg_override(ctxt)
(28,ctxt->src.val)
(29,ctxt)
(30,4)
(31,ctxt->eflags)
(32,DstDI)
(33,ops->get_cr(ctxt, 4)
(34,rc)
(35,rc)
(36,ctxt->src2.bytes)
(37,ctxt->mode)
(38,ctxt->dst)
(39,ops)
(40,rc)
(41,dst)
(42,test_cc(ctxt->b, ctxt->eflags)
(43,ctxt->dst.type = saved_dst_type)
(44,ctxt)
(45,switch (ctxt->op_bytes)
(46,ctxt)
(47,eflags)
(48,ctxt)
(49,ctxt->dst.addr.reg)
(50,mem)
(51,goto done;)
(52,rc)
(53,(s16)
(54,ctxt->dst.addr.reg == &ctxt->regs[VCPU_REGS_RAX])
(55,case 0xf5:)
(56,ctxt)
(57,(ctxt->d & Sse)
(58,emulate_ud(ctxt)
(59,)
(60,ctxt)
(61,4)
(62,(ctxt->d & Priv)
(63,rc)
(64,ctxt->src)
(65,RET)
(66,if (rc != X86EMUL_CONTINUE)
(67,break;)
(68,ctxt->dst.type)
(69,ctxt->src.type != OP_MEM)
(70,r)
(71,op_bytes)
(72,case 2:)
(73,ctxt)
(74,mode)
(75,Mov)
(76,ctxt->d & No64)
(77,OP_MEM)
(78,ctxt)
(79,ctxt)
(80,mem)
(81,X86_CR0_EM)
(82,ctxt)
(83,ctxt->dst.val)
(84,&ctxt->dst.val)
(85,"shrd")
(86,s8)
(87,EFLG_DF)
(88,r->end)
(89,ctxt->dst.val = (s32)
(90,io_read)
(91,d)
(92,ctxt)
(93,)
(94,mode)
(95,ctxt->src2.type == OP_MEM)
(96,ctxt->_eip)
(97,&ctxt->dst.val)
(98,ctxt->src)
(99,ctxt)
(100,unlikely(ctxt->guest_mode)
(101,rc)
(102,rc != X86EMUL_CONTINUE)
(103,rc)
(104,goto writeback;)
(105,ctxt)
(106,ctxt)
(107,ctxt)
(108,ctxt->dst.val = ctxt->src.addr.mem.ea)
(109,ctxt->dst.val)
(110,ctxt)
(111,ctxt->dst.addr)
(112,ctxt->dst)
(113,)
(114,ctxt->src)
(115,check_perm)
(116,dst)
(117,ctxt)
(118,ctxt->execute)
(119,modrm_reg)
(120,r)
(121,ctxt->src)
(122,ctxt)
(123,jmp_rel(ctxt, ctxt->src.val)
(124,case 8:)
(125,break;)
(126,bytes)
(127,regs)
(128,)
(129,val)
(130,emulate_int(ctxt, 4)
(131,true)
(132,ctxt)
(133,ctxt)
(134,ctxt->dst)
(135,ctxt->dst.val = (s16)
(136,(ctxt->d & SrcMask)
(137,if (rc == X86EMUL_INTERCEPTED)
(138,address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX])
(139,ctxt->dst)
(140,ctxt->eflags)
(141,(s8)
(142,ctxt->dst.val)
(143,Sse)
(144,EMULATION_FAILED)
(145,ctxt->b)
(146,ctxt)
(147,ctxt->dst.val)
(148,case 0x18:)
(149,ctxt)
(150,rc != X86EMUL_CONTINUE)
(151,rep_prefix)
(152,ctxt)
(153,!(ctxt->d & Lock)
(154,goto writeback;)
(155,ctxt->src.val)
(156,src2)
(157,X86EMUL_CONTINUE)
(158,ctxt)
(159,pos)
(160,ctxt->dst.orig_val)
(161,ctxt->dst)
(162,dst)
(163,EFLG_CF)
(164,ctxt->src)
(165,case 0xf4:)
(166,ctxt->dst)
(167,ctxt->d & Priv)
(168,ctxt->d)
(169,(u8)
(170,cannot_emulate:)
(171,!(ctxt->d & NoAccess)
(172,~EFLG_DF)
(173,twobyte)
(174,dst)
(175,case 0xfc:)
(176,(ctxt->d & DstMask)
(177,ctxt->eflags &= ~EFLG_DF)
(178,ctxt)
(179,if ((ctxt->d & Sse)
(180,s8)
(181,ctxt->op_bytes)
(182,dst)
(183,ctxt->src2)
(184,op_bytes)
(185,unlikely(ctxt->guest_mode)
(186,ctxt->src)
(187,src2)
(188,ImplicitOps)
(189,goto done;)
(190,)
(191,ctxt->src)
(192,(u16)
(193,ctxt)
(194,ctxt)
(195,src)
(196,rc != X86EMUL_CONTINUE)
(197,rc = segmented_read(ctxt, ctxt->src.addr.mem,\n\\n\\t\\t\\t\\t    ctxt->src.valptr, ctxt->src.bytes)
(198,ctxt->op_bytes)
(199,ctxt->lock_prefix)
(200,intercept)
(201,ctxt->src)
(202,rc)
(203,X86EMUL_CONTINUE)
(204,segmented_read(ctxt, ctxt->src2.addr.mem,\n\\n\\t\\t\\t\\t    &ctxt->src2.val, ctxt->src2.bytes)
(205,break;)
(206,d)
(207,break;)
(208,emulate_ud(ctxt)
(209,rc)
(210,dst)
(211,emulator_check_intercept(ctxt, ctxt->intercept,\n\\n\\t\\t\\t\\t\\t      X86_ICPT_POST_MEMACCESS)
(212,ctxt->src.val)
(213,rc = emulator_check_intercept(ctxt, ctxt->intercept,\n\\n\\t\\t\\t\\t\\t      X86_ICPT_PRE_EXCEPT)
(214,ctxt)
(215,break;)
(216,ctxt->dst)
(217,end)
(218,ctxt)
(219,ctxt->modrm_reg)
(220,ctxt->d & String)
(221,case 0xc3:)
(222,dst)
(223,type)
(224,src)
(225,ctxt->dst.addr.mem)
(226,ctxt->eflags)
(227,if (ctxt->mode != X86EMUL_MODE_PROT64)
(228,saved_dst_type)
(229,regs)
(230,em_grp2(ctxt)
(231,break;)
(232,)
(233,src)
(234,SrcSI)
(235,)
(236,goto done;)
(237,goto done;)
(238,ctxt)
(239,ctxt)
(240,ctxt)
(241,OP_NONE)
(242,ctxt->dst)
(243,rc = em_grp2(ctxt)
(244,modrm_reg)
(245,r->end)
(246,ctxt->dst.val)
(247,rc)
(248,bytes)
(249,mem)
(250,src)
(251,ctxt->src.valptr)
(252,ctxt)
(253,ctxt->op_bytes)
(254,break;)
(255,dst)
(256,b)
(257,break;)
(258,ctxt->mem_read)
(259,reg)
(260,if (ctxt->rep_prefix && (ctxt->d & String)
(261,break;)
(262,ctxt->src)
(263,ctxt->dst.type)
(264,ctxt)
(265,src)
(266,goto done;)
(267,X86EMUL_CONTINUE)
(268,ctxt->dst)
(269,guest_mode)
(270,rc = em_xchg(ctxt)
(271,ctxt->guest_mode)
(272,break;)
(273,ctxt->dst)
(274,ctxt->d)
(275,ctxt->src.orig_val64 = ctxt->src.val64)
(276,type)
(277,0x47:)
(278,ctxt->rep_prefix)
(279,ctxt->dst.addr)
(280,intercept)
(281,ctxt->d & ByteOp)
(282,ctxt->dst.orig_val = ctxt->src.val)
(283,0xc1:)
(284,r->end == 0 || r->end != r->pos)
(285,ctxt)
(286,type)
(287,ctxt)
(288,ctxt->regs)
(289,ctxt)
(290,rc = emulate_int(ctxt, ctxt->src.val)
(291,rc == X86EMUL_PROPAGATE_FAULT)
(292,val)
(293,EMULATION_FAILED)
(294,ctxt)
(295,ctxt)
(296,break;)
(297,ctxt)
(298,rc)
(299,mode)
(300,ctxt->dst.bytes)
(301,rc = emulator_check_intercept(ctxt, ctxt->intercept,\n\\n\\t\\t\\t\\t\\t      X86_ICPT_POST_MEMACCESS)
(302,src)
(303,if (unlikely(ctxt->guest_mode)
(304,ctxt->dst)
(305,addr)
(306,saved_dst_type = ctxt->dst.type)
(307,)
(308,ctxt->lock_prefix && (!(ctxt->d & Lock)
(309,ctxt->src.val)
(310,val)
(311,if (test_cc(ctxt->b, ctxt->eflags)
(312,ctxt)
(313,if ((ctxt->d & SrcMask)
(314,ctxt->intercept)
(315,ctxt->src.type)
(316,ctxt->src)
(317,saved_dst_type)
(318,break;)
(319,if ((ctxt->dst.type == OP_MEM)
(320,end)
(321,if (unlikely(ctxt->guest_mode)
(322,ops->get_cr(ctxt, 0)
(323,src)
(324,break;)
(325,ctxt->io_read)
(326,break;)
(327,valptr)
(328,dst)
(329,struct x86_emulate_ctxt *ctxt)
(330,ctxt->dst.type = OP_NONE)
(331,ctxt)
(332,dst)
(333,ctxt->eflags)
(334,u32)
(335,rc)
(336,break;)
(337,dst)
(338,ctxt->src.val)
(339,if ((ctxt->d & SrcMask)
(340,ctxt)
(341,&ctxt->regs[VCPU_REGS_RCX])
(342,rc = emulate_int(ctxt, 4)
(343,if (ctxt->src2.type == OP_MEM)
(344,ctxt)
(345,ctxt->check_perm)
(346,ctxt)
(347,ctxt->dst.val)
(348,ctxt->d & DstMask)
(349,ctxt->src)
(350,Priv)
(351,DstMask)
(352,!(ops->get_cr(ctxt, 4)
(353,ctxt)
(354,ctxt->dst)
(355,ctxt->op_bytes)
(356,ctxt)
(357,ctxt->mode != X86EMUL_MODE_PROT64)
(358,X86EMUL_CONTINUE)
(359,&ctxt->src)
(360,ctxt->d)
(361,end)
(362,rc = ctxt->check_perm(ctxt)
(363,ctxt->ops)
(364,ctxt->mode == X86EMUL_MODE_PROT64)
(365,ctxt)
(366,case 0x20:)
(367,eflags)
(368,case 0xeb:)
(369,string_insn_completed(ctxt)
(370,ctxt)
(371,if (rc != X86EMUL_CONTINUE)
(372,ops->get_dr(ctxt, ctxt->modrm_reg, &ctxt->dst.val)
(373,intercept)
(374,ctxt->b)
(375,0xbf:)
(376,rc)
(377,ctxt->dst.type = OP_NONE)
(378,3)
(379,ctxt)
(380,twobyte_insn:)
(381,rc)
(382,ctxt)
(383,ctxt)
(384,ctxt->eip)
(385,break;)
(386,ctxt)
(387,orig_val)
(388,goto done;)
(389,ctxt->d)
(390,ctxt)
(391,eflags)
(392,break;)
(393,ctxt->dst.bytes)
(394,d)
(395,orig_val)
(396,_eip)
(397,ctxt)
(398,ctxt->guest_mode)
(399,register_address_increment(ctxt, &ctxt->regs[VCPU_REGS_RCX], -1)
(400,dst)
(401,0x4f:)
(402,break;)
(403,case 0x98:)
(404,rc)
(405,ctxt->src)
(406,)
(407,ctxt)
(408,ByteOp)
(409,rc = jmp_rel(ctxt, ctxt->src.val)
(410,ctxt)
(411,VCPU_REGS_RAX)
(412,ops->get_cr(ctxt, 4)
(413,ctxt)
(414,!(ctxt->d & Lock)
(415,if ((ctxt->d & Priv)
(416,ctxt)
(417,ctxt->check_perm(ctxt)
(418,ctxt->b)
(419,SrcMask)
(420,mem)
(421,break;)
(422,!string_insn_completed(ctxt)
(423,break;)
(424,rc)
(425,val)
(426,val)
(427,ctxt)
(428,val)
(429,default:)
(430,addr)
(431,ctxt)
(432,ctxt->src)
(433,ctxt->have_exception = true)
(434,ctxt->d & NoAccess)
(435,if (ctxt->mode == X86EMUL_MODE_PROT64 && (ctxt->d & No64)
(436,ctxt)
(437,ctxt)
(438,ctxt)
(439,dst)
(440,ctxt)
(441,if (rc != X86EMUL_CONTINUE)
(442,rc = emulator_check_intercept(ctxt, ctxt->intercept,\n\\n\\t\\t\\t\\t\\t      X86_ICPT_POST_EXCEPT)
(443,dst)
(444,ctxt->dst)
(445,src)
(446,if ((r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff)
(447,string_addr_inc(ctxt, VCPU_SREG_ES, VCPU_REGS_RDI,\n\\n\\t\\t\\t\\t&ctxt->dst)
(448,ctxt)
(449,ctxt->mem_read.pos = 0)
(450,rc != X86EMUL_CONTINUE)
(451,ctxt->dst.bytes)
(452,ctxt->dst.val)
(453,goto done;)
(454,case 0xf9:)
(455,case 0x09:)
(456,ctxt->d)
(457,ctxt->dst.val)
(458,segmented_read(ctxt, ctxt->dst.addr.mem,\n\\n\\t\\t\\t\\t   &ctxt->dst.val, ctxt->dst.bytes)
(459,dst)
(460,goto done;)
(461,ops)
(462,val)
(463,(ops->get_cr(ctxt, 0)
(464,rc)
(465,ctxt)
(466,ctxt)
(467,test_cc(ctxt->b, ctxt->eflags)
(468,ctxt->regs[VCPU_REGS_RCX])
(469,default:)
(470,ctxt->dst.orig_val)
(471,X86EMUL_CONTINUE)
(472,dst)
(473,val)
(474,ctxt)
(475,ctxt)
(476,bytes)
(477,ctxt)
(478,src)
(479,EFLG_CF)
(480,type)
(481,if (test_cc(ctxt->b, ctxt->eflags)
(482,ctxt->regs)
(483,rc)
(484,dst)
(485,segmented_read(ctxt, ctxt->src.addr.mem,\n\\n\\t\\t\\t\\t    ctxt->src.valptr, ctxt->src.bytes)
(486,val)
(487,0xd3:)
(488,ctxt->dst)
(489,X86EMUL_CONTINUE)
(490,break;)
(491,ctxt)
(492,src2)
(493,rc)
(494,ctxt->dst.val)
(495,ctxt)
(496,rc)
(497,ctxt->dst.val)
(498,OP_MEM)
(499,r->end != r->pos)
(500,ctxt->d)
(501,rc = emulate_ud(ctxt)
(502,0)
(503,rc)
(504,ctxt->d)
(505,dst)
(506,ctxt)
(507,if ((ctxt->d & Prot)
(508,case 4:)
(509,break;)
(510,emulate_int(ctxt, ctxt->src.val)
(511,emulate_1op(ctxt, "inc")
(512,emulate_2op_cl(ctxt, "shrd")
(513,ctxt)
(514,)
(515,s32)
(516,ctxt->eip = ctxt->_eip)
(517,ctxt->dst.type)
(518,ctxt->src.orig_val64)
(519,ctxt)
(520,special_insn:)
(521,rc)
(522,ctxt->op_bytes)
(523,addr)
(524,ctxt->eip = ctxt->_eip)
(525,dst)
(526,ctxt->d & Sse)
(527,test_cc(ctxt->b, ctxt->eflags)
(528,X86EMUL_MODE_PROT64)
(529,ctxt)
(530,ctxt)
(531,rc)
(532,_eip)
(533,ctxt->mode & X86EMUL_MODE_PROT)
(534,src)
(535,dst)
(536,ctxt)
(537,ctxt->d & String)
(538,dst)
(539,)
(540,"add")
(541,ctxt->dst)
(542,unlikely(ctxt->guest_mode)
(543,rc)
(544,ctxt->src)
(545,ctxt)
(546,ctxt)
(547,ctxt->src)
(548,case 0xce:)
(549,(ctxt->dst.type == OP_MEM)
(550,intercept)
(551,r->end == 0)
(552,"shld")
(553,b)
(554,(rc == X86EMUL_UNHANDLEABLE)
(555,rc == X86EMUL_INTERCEPTED)
(556,ctxt)
(557,ctxt->dst.val)
(558,rc)
(559,ctxt->regs[VCPU_REGS_RCX] & 0x3ff)
(560,d)
(561,EFLG_OF)
(562,ctxt)
(563,ctxt->src.type)
(564,ctxt->dst.orig_val)
(565,ctxt)
(566,break;)
(567,goto done;)
(568,dst)
(569,src)
(570,dst)
(571,ctxt->dst.type)
(572,bytes)
(573,ctxt->twobyte)
(574,ctxt->src2.type)
(575,rc = segmented_read(ctxt, ctxt->src2.addr.mem,\n\\n\\t\\t\\t\\t    &ctxt->src2.val, ctxt->src2.bytes)
(576,d)
(577,ctxt->dst.val = (ctxt->d & ByteOp)
(578,u64)
(579,ctxt->intercept)
(580,rc != X86EMUL_CONTINUE)
(581,ctxt->src)
(582,ctxt->have_exception)
(583,ctxt)
(584,ctxt->execute(ctxt)
(585,ctxt->ops->halt(ctxt)
(586,case 0x21:)
(587,ctxt->mem_read.end = 0)
(588,X86EMUL_PROPAGATE_FAULT)
(589,src)
(590,ctxt)
(591,X86_ICPT_POST_MEMACCESS)
(592,ctxt)
(593,pos)
(594,ctxt->eflags & EFLG_OF)
(595,(r->end != 0 || ctxt->regs[VCPU_REGS_RCX] & 0x3ff)
(596,ctxt->dst.val = (s8)
(597,ctxt->regs)
(598,break;)
(599,if (rc != X86EMUL_CONTINUE)
(600,if (ctxt->check_perm)
(601,regs)
(602,ctxt->d)
(603,bytes)
(604,ctxt)
(605,(ctxt->op_bytes == 4)
(606,ctxt->src.val)
(607,val)
(608,ctxt->dst.val)
(609,if (ctxt->lock_prefix && (!(ctxt->d & Lock)
(610,ctxt->dst.val)
(611,ctxt->rep_prefix && (ctxt->d & String)
(612,break;)
(613,ctxt->d & Lock)
(614,ctxt->dst.bytes = ctxt->op_bytes)
(615,emulate_ud(ctxt)
(616,ctxt->regs)
(617,ctxt->intercept)
(618,src2)
(619,goto done;)
(620,)
(621,return EMULATION_FAILED;)
(622,ctxt->d & Mov)
(623,rc = emulate_ud(ctxt)
(624,d)
(625,ctxt->regs[VCPU_REGS_RCX])
(626,0)
(627,b)
(628,if (ctxt->execute)
(629,ctxt->dst)
(630,ctxt->src.val = ctxt->dst.orig_val)
(631,val)
(632,No64)
(633,0)
(634,dst)
(635,case 0xe9:)
(636,emulate_gp(ctxt, 0)
(637,rc != X86EMUL_CONTINUE)
(638,bytes)
(639,val)
(640,ctxt)
(641,(s32)
(642,ctxt->src.val)
(643,ctxt)
(644,EMULATION_OK)
(645,ctxt->src.val)
(646,emulator_check_intercept(ctxt, ctxt->intercept,\n\\n\\t\\t\\t\\t\\t      X86_ICPT_POST_EXCEPT)
(647,s16)
(648,ctxt)
(649,ctxt->eflags |= EFLG_CF)
(650,orig_val64)
(651,ctxt)
(652,addr)
(653,ctxt->d)
(654,ctxt)
(655,emulator_check_intercept(ctxt, ctxt->intercept,\n\\n\\t\\t\\t\\t\\t      X86_ICPT_PRE_EXCEPT)
(656,ctxt)
(657,ctxt->dst.orig_val = ctxt->dst.val)
(658,d)
(659,X86_CR4_OSFXSR)
(660,rc)
(661,ByteOp)
(662,ctxt)
(663,ctxt)
(664,val)
(665,ctxt->dst)
(666,ctxt->d & DstMask)
(667,mem_read)
(668,unlikely(ctxt->guest_mode)
(669,break;)
(670,ctxt->mem_read.pos)
(671,rc = emulate_nm(ctxt)
(672,ctxt)
(673,ctxt)
(674,if (rc != X86EMUL_CONTINUE)
(675,address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX])
(676,&ctxt->src2.val)
(677,ctxt->dst.val = (s32)
(678,EMULATION_RESTART)
(679,ctxt)
(680,0xb7:)
(681,execute)
(682,guest_mode)
(683,case 0xfd:)
(684,addr)
(685,ctxt->b)
(686,(ctxt->src.type == OP_MEM)
(687,if (rc != X86EMUL_CONTINUE)
(688,if (ctxt->dst.addr.reg == &ctxt->regs[VCPU_REGS_RAX])
(689,test_cc(ctxt->b, ctxt->eflags)
(690,if (rc != X86EMUL_CONTINUE)
(691,&ctxt->regs[VCPU_REGS_RAX])
(692,case 0xad:)
(693,val)
(694,break;)
(695,&ctxt->dst)
(696,rc)
(697,emulate_2op_SrcV(ctxt, "add")
(698,X86EMUL_INTERCEPTED)
(699,ops->cpl(ctxt)
(700,case 0xf8:)
(701,done:)
(702,val)
(703,jmp_rel(ctxt, ctxt->src.val)
(704,if (rc == X86EMUL_PROPAGATE_FAULT)
(705,(ctxt->d & Sse)
(706,ops->get_cr(ctxt, 0)
(707,ctxt->src)
(708,r)
(709,val)
(710,rc = emulate_int(ctxt, 3)
(711,VCPU_REGS_RCX)
(712,0x7f:)
(713,ctxt)
(714,ctxt->src.val = ctxt->regs[VCPU_REGS_RCX])
(715,goto cannot_emulate;)
(716,goto done;)
(717,ctxt->src.addr.mem)
(718,ctxt->dst)
(719,ctxt->d)
(720,ctxt->mode)
(721,if ((ctxt->d & DstMask)
(722,if (ctxt->twobyte)
(723,rc)
(724,unlikely(ctxt->guest_mode)
(725,ctxt->d)
(726,em_grp2(ctxt)
(727,ctxt->dst.type)
(728,ctxt)
(729,ctxt->eflags)
(730,mem_read)
(731,ctxt->eflags)
(732,type)
(733,eflags)
(734,if (!string_insn_completed(ctxt)
(735,ctxt)
(736,ctxt->dst.val)
(737,ctxt)
(738,ctxt)
(739,&ctxt->src)
(740,)
(741,)
(742,val)
(743,src)
(744,0x9f:)
(745,ctxt)
(746,ctxt->d & Sse)
(747,regs)
(748,X86EMUL_MODE_PROT64)
(749,ctxt->dst.val)
(750,(u64)
(751,(s8)
(752,ctxt)
(753,)
(754,case 0xac:)
(755,d)
(756,ctxt->eflags)
(757,ctxt->src)
(758,ctxt)
(759,if (rc != X86EMUL_CONTINUE)
(760,if ((ctxt->d & Sse)
(761,ctxt->dst.bytes)
(762,d)
(763,)
(764,ctxt)
(765,case 0xcc:)
(766,ctxt)
(767,(ctxt->d & ByteOp)
(768,Sse)
(769,return EMULATION_INTERCEPTED;)
(770,emulate_nm(ctxt)
(771,ctxt->b)
(772,unlikely(ctxt->guest_mode)
(773,rc = em_grp2(ctxt)
(774,EMULATION_INTERCEPTED)
(775,ctxt->dst.val = ctxt->dst.orig_val = ctxt->src.val)
(776,ctxt->src.addr.mem)
(777,X86EMUL_CONTINUE)
(778,ops->get_cr(ctxt, ctxt->modrm_reg)
(779,rc = segmented_read(ctxt, ctxt->dst.addr.mem,\n\\n\\t\\t\\t\\t   &ctxt->dst.val, ctxt->dst.bytes)
(780,ctxt->dst.type != OP_MEM)
(781,rc)
(782,goto done;)
(783,val)
(784,saved_dst_type)
(785,rc)
(786,ctxt)
(787,ctxt)
(788,b)
(789,case 0xcd:)
(790,ctxt->dst)
(791,ctxt->src)
(792,ctxt->regs[VCPU_REGS_RCX])
(793,ctxt->_eip)
(794,d)
(795,)
(796,intercept)
(797,ctxt)
(798,ctxt->src.val)
(799,ctxt)
(800,ctxt->dst.val)
(801,ctxt)
(802,ctxt->src)
(803,ctxt->src.val64)
(804,ctxt)
(805,ctxt->dst.val = (ctxt->op_bytes == 4)
(806,eip)
(807,0xd1:)
(808,ctxt->dst)
(809,ctxt)
(810,break;)
(811,goto done;)
(812,ctxt)
(813,)
(814,val)
(815,ctxt->dst)
(816,val)
(817,ctxt->dst)
(818,0)
(819,ctxt->dst)
(820,0x4f:)
(821,ctxt)
(822,val)
(823,ctxt->dst.type == OP_MEM)
(824,ops->get_cr(ctxt, 0)
(825,r->end)
(826,X86_ICPT_POST_EXCEPT)
(827,ctxt->src.addr.mem.ea)
(828,ctxt)
(829,ctxt)
(830,DstMask)
(831,ea)
(832,ctxt->eflags)
(833,ctxt)
(834,ctxt)
(835,ctxt->src2.addr)
(836,String)
(837,X86EMUL_CONTINUE)
(838,src)
(839,val)
(840,return EMULATION_RESTART;)
(841,op_bytes)
(842,case 0xa4:)
(843,0x3ff)
(844,ctxt->dst)
(845,ctxt->d)
(846,X86EMUL_CONTINUE)
(847,0)
(848,rc != X86EMUL_CONTINUE)
(849,rc)
(850,case 0x63:)
(851,)
(852,goto done;)
(853,break;)
(854,0x97:)
(855,ctxt)
(856,intercept)
(857,emulate_2op_cl(ctxt, "shld")
(858,src)
(859,eflags)
(860,(s16)
(861,ctxt->src2.addr.mem)
(862,ctxt->rep_prefix)
(863,return (rc == X86EMUL_UNHANDLEABLE)
(864,rc = ctxt->execute(ctxt)
(865,val)
(866,~EFLG_CF)
(867,ctxt->d & Prot)
(868,src)
(869,s32)
(870,dst)
(871,writeback:)
(872,type)
(873,break;)
(874,if ((ctxt->d & DstMask)
(875,ctxt->src.type == OP_MEM)
(876,case 0x8d:)
(877,eflags)
(878,ctxt->dst)
(879,break;)
(880,if (address_mask(ctxt, ctxt->regs[VCPU_REGS_RCX])
(881,eflags)
(882,String)
(883,ctxt->mode)
(884,ctxt)
(885,switch (ctxt->b)
(886,(ctxt->ops->wbinvd)
(887,guest_mode)
(888,Prot)
(889,src)
(890,ctxt)
(891,ctxt)
(892,rc)
(893,rep_prefix)
(894,SrcMemFAddr)
(895,(s32)
(896,ctxt->eflags &= ~EFLG_CF)
(897,OP_MEM)
(898,ctxt->mem_read)
(899,if (ctxt->eflags & EFLG_OF)
(900,src)
(901,rc)
(902,4)
(903,(ctxt->d & SrcMask)
(904,!(ctxt->mode & X86EMUL_MODE_PROT)
(905,switch (ctxt->b)
(906,rc != X86EMUL_CONTINUE)
(907,ctxt)
(908,ctxt)
(909,ctxt)
(910,VCPU_REGS_RDI)
(911,goto twobyte_insn;)
(912,ctxt->intercept)
(913,if (rc != X86EMUL_CONTINUE)
(914,break;)
(915,ctxt->d)
(916,ctxt->src.val)
(917,break;)
(918,rc = emulate_gp(ctxt, 0)
(919,writeback(ctxt)
(920,write_register_operand(&ctxt->src)
(921,(ctxt->d & SrcMask)
(922,goto done;)
(923,val64)
(924,jmp_rel(ctxt, ctxt->src.val)
(925,ctxt->regs[VCPU_REGS_RAX])
(926,ctxt)
(927,src)
(928,ctxt)
(929,ctxt)
(930,ctxt->dst.val = ops->get_cr(ctxt, ctxt->modrm_reg)
(931,ctxt->mem_read.end)
(932,u16)
(933,if (unlikely(ctxt->guest_mode)
(934,emulate_int(ctxt, 3)
(935,r)
(936,ctxt->eip)
(937,ctxt)
(938,rc != X86EMUL_CONTINUE)
(939,string_addr_inc(ctxt, seg_override(ctxt)
(940,r)
(941,X86EMUL_UNHANDLEABLE)
(942,ctxt)
(943,goto done;)
(944,rc = emulate_ud(ctxt)
(945,ctxt)
(946,d)
(947,X86EMUL_MODE_PROT)
(948,goto cannot_emulate;)
(949,b)
(950,d)
(951,ctxt)
(952,lock_prefix)
(953,ctxt)
(954,regs)
(955,dst)
(956,em_grp2(ctxt)
(957,ctxt->dst)
(958,ctxt->d)
(959,break;)
(960,dst)
(961,ctxt)
(962,rc = emulate_ud(ctxt)
(963,rc = writeback(ctxt)
(964,ctxt->eflags |= EFLG_DF)
(965,case 0xae:)
(966,ctxt->dst.bytes = ctxt->op_bytes)
(967,end)
(968,eip)
(969,ctxt->dst)
(970,d)
(971,em_xchg(ctxt)
(972,ctxt)
(973,goto done;)
(974,!test_cc(ctxt->b, ctxt->eflags)
(975,ctxt)
(976,have_exception)
(977,break;)
(978,d)
(979,type)
(980,ctxt)
(981,rc)
(982,ctxt)
(983,0xc1:)
(984,ctxt->intercept)
(985,ctxt)
(986,ctxt->d)
(987,OP_MEM)
(988,ctxt->dst)
(989,ctxt)
(990,val)
(991,X86EMUL_CONTINUE)
(992,ctxt->guest_mode)
(993,ctxt->src2.val)
(994,ctxt->src)
(995,)
(996,dst)
(997,ctxt)
(998,ctxt->src2)
(999,ctxt)
(1000,val)
(1001,if (rc != X86EMUL_CONTINUE)
(1002,if ((ctxt->src.type == OP_MEM)
(1003,case 0x0d:)
(1004,(u32)
(1005,ctxt)
(1006,ctxt->dst)
(1007,ctxt)
(1008,src)
(1009,ctxt->dst)
(1010,rc != X86EMUL_CONTINUE)
(1011,rc)
(1012,op_bytes)
(1013,ctxt->d)
(1014,X86EMUL_CONTINUE)
(1015,ctxt->dst)
(1016,dst)
(1017,X86EMUL_CONTINUE)
(1018,dst)
(1019,ctxt->src2)
(1020,ctxt)
(1021,ctxt->dst)
(1022,r)
(1023,ctxt->src.val)
(1024,Lock)
(1025,ctxt)
(1026,ctxt)
(1027,op_bytes)
(1028,rc == X86EMUL_UNHANDLEABLE)
(1029,rc)
(1030,val)
(1031,rc = emulate_ud(ctxt)
(1032,ctxt)
(1033,ctxt)
(1034,dst)
(1035,goto done;)
(1036,*ops = ctxt->ops)
(1037,b)
(1038,ctxt)
(1039,ctxt)
(1040,ops)
(1041,ctxt->dst.val = (ctxt->d & ByteOp)
(1042,!(ctxt->d & Mov)
(1043,SrcMask)
(1044,ctxt)
(1045,ctxt->modrm_reg)
(1046,0)
(1047,rc)
(1048,src)
(1049,VCPU_REGS_RCX)
(1050,ctxt)
(1051,rc)
(1052,ctxt->d & SrcMask)
(1053,rc = X86EMUL_CONTINUE)
(1054,goto special_insn;)
(1055,rc)
(1056,val)
(1057,if (rc != X86EMUL_CONTINUE)
(1058,ctxt)
(1059,orig_val)
(1060,X86_CR0_TS)
(1061,r->end != 0)
(1062,OP_MEM)
(1063,VCPU_REGS_RCX)
(1064,)
(1065,ctxt->src)
(1066,(ctxt->d & Prot)
(1067,ctxt->src)
(1068,rc = jmp_rel(ctxt, ctxt->src.val)
(1069,ctxt)
(1070,ctxt)
(1071,ctxt->src.val)
(1072,)
(1073,dst)
(1074,src)
(1075,VCPU_SREG_ES)
(1076,ctxt->src)
(1077,rc)
(1078,ctxt)
(1079,emulate_ud(ctxt)
(1080,d)
(1081,ctxt)
(1082,emulate_1op(ctxt, "dec")
(1083,VCPU_REGS_RCX)
(1084,ctxt->dst.val = test_cc(ctxt->b, ctxt->eflags)
(1085,eflags)
(1086,ctxt->src2)
(1087,ctxt->dst)
(1088,ctxt->dst.type)
(1089,rc = em_grp2(ctxt)
(1090,rc != X86EMUL_CONTINUE)
(1091,ctxt->src.addr)
(1092,VCPU_REGS_RSI)
(1093,1)
(1094,ctxt->eflags)
(1095,0)
(1096,(ctxt->d & DstMask)
(1097,eflags)
(1098,dst)
(1099,ctxt)
(1100,*r = &ctxt->io_read)
(1101,ctxt)
(1102,case 0xa5:)
(1103,emulate_ud(ctxt)
(1104,rc = jmp_rel(ctxt, ctxt->src.val)
(1105,ctxt->d & SrcMask)
(1106,src)
(1107,ctxt)
(1108,d)
(1109,eflags)
(1110,ctxt->intercept)
(1111,&ctxt->io_read)
(1112,NoAccess)
(1113,if (!test_cc(ctxt->b, ctxt->eflags)
(1114,ctxt->src.addr)
(1115,ctxt->mode == X86EMUL_MODE_PROT64 && (ctxt->d & No64)
(1116,goto done;)
(1117,ctxt->rep_prefix && (ctxt->d & String)
(1118,ctxt)
(1119,(ctxt->d & ByteOp)
(1120,val)
(1121,ctxt)
(1122,val)
(1123,ctxt)
(1124,"dec")
(1125,)
(1126,ctxt)
(1127,ctxt->d & ByteOp)
(1128,ctxt->regs)
(1129,goto cannot_emulate;)
(1130,ctxt->src.val)
(1131,ctxt->dst.bytes = ctxt->op_bytes)
(1132,ctxt->src.bytes)
(1133,ctxt)
(1134,ctxt)
(1135,ctxt->eflags ^= EFLG_CF)
(1136,break;)
(1137,OP_NONE)
(1138,val)
(1139,u8)
(1140,-1)
(1141,ctxt)
(1142,ops->get_cr(ctxt, 0)
(1143,0)
(1144,if (ctxt->rep_prefix && (ctxt->d & String)
(1145,val)
(1146,rc)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^