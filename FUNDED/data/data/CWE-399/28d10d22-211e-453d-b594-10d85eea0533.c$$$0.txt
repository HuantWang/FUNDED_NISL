-----label-----
0
-----code-----
static struct mtd_info *map_ram_probe(struct map_info *map)
{
	struct mtd_info *mtd;

	/* Check the first byte is RAM */
#if 0
	map_write8(map, 0x55, 0);
	if (map_read8(map, 0) != 0x55)
		return NULL;

	map_write8(map, 0xAA, 0);
	if (map_read8(map, 0) != 0xAA)
		return NULL;

	/* Check the last byte is RAM */
	map_write8(map, 0x55, map->size-1);
	if (map_read8(map, map->size-1) != 0x55)
		return NULL;

	map_write8(map, 0xAA, map->size-1);
	if (map_read8(map, map->size-1) != 0xAA)
		return NULL;
#endif
	/* OK. It seems to be RAM. */

	mtd = kzalloc(sizeof(*mtd), GFP_KERNEL);
	if (!mtd)
		return NULL;

	map->fldrv = &mapram_chipdrv;
	mtd->priv = map;
	mtd->name = map->name;
	mtd->type = MTD_RAM;
	mtd->size = map->size;
	mtd->_erase = mapram_erase;
	mtd->_get_unmapped_area = mapram_unmapped_area;
	mtd->_read = mapram_read;
	mtd->_write = mapram_write;
	mtd->_panic_write = mapram_write;
	mtd->_sync = mapram_nop;
	mtd->flags = MTD_CAP_RAM;
	mtd->writesize = 1;

	mtd->erasesize = PAGE_SIZE;
 	while(mtd->size & (mtd->erasesize - 1))
		mtd->erasesize >>= 1;

	__module_get(THIS_MODULE);
	return mtd;
}
-----children-----
1,2
1,3
1,4
2,3
4,5
4,6
4,7
7,8
7,9
8,9
10,11
10,12
13,14
13,15
13,16
13,17
13,18
13,19
13,20
13,21
13,22
13,23
13,24
13,25
13,26
13,27
13,28
13,29
13,30
13,31
13,32
13,33
14,15
15,16
15,17
16,17
18,19
18,20
21,22
22,23
22,24
23,24
25,26
25,27
25,28
26,27
28,29
29,30
30,31
31,32
33,34
35,36
35,37
36,37
37,38
39,40
40,41
42,43
43,44
43,45
44,45
44,46
45,46
48,49
49,50
51,52
52,53
52,54
53,54
53,55
54,55
57,58
59,60
60,61
60,62
61,62
61,63
62,63
65,66
65,67
66,67
69,70
70,71
70,72
71,72
71,73
72,73
75,76
77,78
78,79
78,80
79,80
79,81
80,81
83,84
83,85
84,85
87,88
88,89
88,90
89,90
89,91
90,91
93,94
95,96
96,97
96,98
97,98
97,99
98,99
101,102
103,104
104,105
104,106
105,106
105,107
106,107
109,110
111,112
112,113
112,114
113,114
113,115
114,115
117,118
119,120
120,121
120,122
121,122
121,123
122,123
125,126
127,128
128,129
128,130
129,130
129,131
130,131
133,134
135,136
136,137
136,138
137,138
137,139
138,139
141,142
143,144
144,145
144,146
145,146
145,147
146,147
150,151
151,152
151,153
152,153
152,154
153,154
156,157
158,159
158,160
159,160
159,161
160,161
160,162
161,162
164,165
165,166
165,167
166,167
166,168
167,168
171,172
172,173
172,174
173,174
173,175
174,175
178,179
179,180
179,181
180,181
182,183
183,184
185,186
186,187
-----nextToken-----
3,5,6,9,11,12,17,19,20,24,27,32,34,38,41,46,47,50,55,56,58,63,64,67,68,73,74,76,81,82,85,86,91,92,94,99,100,102,107,108,110,115,116,118,123,124,126,131,132,134,139,140,142,147,148,149,154,155,157,162,163,168,169,170,175,176,177,181,184,187
-----computeFrom-----
22,23
22,24
43,44
43,45
52,53
52,54
60,61
60,62
70,71
70,72
78,79
78,80
88,89
88,90
96,97
96,98
104,105
104,106
112,113
112,114
120,121
120,122
128,129
128,130
136,137
136,138
144,145
144,146
151,152
151,153
159,160
159,161
165,166
165,167
172,173
172,174
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;ElaboratedTypeSpecifier;Name;FunctionDeclarator;Pointer;Name;ParameterDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;ElaboratedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;UnaryExpression;UnaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;UnaryExpression;IdExpression;Name;ReturnStatement;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;FieldReference;IdExpression;Name;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;WhileStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;UnaryExpression;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;LiteralExpression;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Declarator;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static struct mtd_info *map_ram_probe(struct map_info *map){	struct mtd_info *mtd;	/* Check the first byte is RAM */#if 0	map_write8(map, 0x55, 0);	if (map_read8(map, 0) != 0x55)		return NULL;	map_write8(map, 0xAA, 0);	if (map_read8(map, 0) != 0xAA)		return NULL;	/* Check the last byte is RAM */	map_write8(map, 0x55, map->size-1);	if (map_read8(map, map->size-1) != 0x55)		return NULL;	map_write8(map, 0xAA, map->size-1);	if (map_read8(map, map->size-1) != 0xAA)		return NULL;#endif	/* OK. It seems to be RAM. */	mtd = kzalloc(sizeof(*mtd), GFP_KERNEL);	if (!mtd)		return NULL;	map->fldrv = &mapram_chipdrv;	mtd->priv = map;	mtd->name = map->name;	mtd->type = MTD_RAM;	mtd->size = map->size;	mtd->_erase = mapram_erase;	mtd->_get_unmapped_area = mapram_unmapped_area;	mtd->_read = mapram_read;	mtd->_write = mapram_write;	mtd->_panic_write = mapram_write;	mtd->_sync = mapram_nop;	mtd->flags = MTD_CAP_RAM;	mtd->writesize = 1;	mtd->erasesize = PAGE_SIZE; 	while(mtd->size & (mtd->erasesize - 1))		mtd->erasesize >>= 1;	__module_get(THIS_MODULE);	return mtd;}
static struct mtd_info
mtd_info
*map_ram_probe(struct map_info *map)
*
map_ram_probe
struct map_info *map
struct map_info
map_info
*map
*
map
{	struct mtd_info *mtd;	/* Check the first byte is RAM */#if 0	map_write8(map, 0x55, 0);	if (map_read8(map, 0) != 0x55)		return NULL;	map_write8(map, 0xAA, 0);	if (map_read8(map, 0) != 0xAA)		return NULL;	/* Check the last byte is RAM */	map_write8(map, 0x55, map->size-1);	if (map_read8(map, map->size-1) != 0x55)		return NULL;	map_write8(map, 0xAA, map->size-1);	if (map_read8(map, map->size-1) != 0xAA)		return NULL;#endif	/* OK. It seems to be RAM. */	mtd = kzalloc(sizeof(*mtd), GFP_KERNEL);	if (!mtd)		return NULL;	map->fldrv = &mapram_chipdrv;	mtd->priv = map;	mtd->name = map->name;	mtd->type = MTD_RAM;	mtd->size = map->size;	mtd->_erase = mapram_erase;	mtd->_get_unmapped_area = mapram_unmapped_area;	mtd->_read = mapram_read;	mtd->_write = mapram_write;	mtd->_panic_write = mapram_write;	mtd->_sync = mapram_nop;	mtd->flags = MTD_CAP_RAM;	mtd->writesize = 1;	mtd->erasesize = PAGE_SIZE; 	while(mtd->size & (mtd->erasesize - 1))		mtd->erasesize >>= 1;	__module_get(THIS_MODULE);	return mtd;}
struct mtd_info *mtd;
struct mtd_info *mtd;
struct mtd_info
mtd_info
*mtd
*
mtd
mtd = kzalloc(sizeof(*mtd), GFP_KERNEL);
mtd = kzalloc(sizeof(*mtd), GFP_KERNEL)
mtd
mtd
kzalloc(sizeof(*mtd), GFP_KERNEL)
kzalloc
kzalloc
sizeof(*mtd)
(*mtd)
*mtd
mtd
mtd
GFP_KERNEL
GFP_KERNEL
if (!mtd)		return NULL;
!mtd
mtd
mtd
return NULL;
NULL
NULL
map->fldrv = &mapram_chipdrv;
map->fldrv = &mapram_chipdrv
map->fldrv
map
map
fldrv
&mapram_chipdrv
mapram_chipdrv
mapram_chipdrv
mtd->priv = map;
mtd->priv = map
mtd->priv
mtd
mtd
priv
map
map
mtd->name = map->name;
mtd->name = map->name
mtd->name
mtd
mtd
name
map->name
map
map
name
mtd->type = MTD_RAM;
mtd->type = MTD_RAM
mtd->type
mtd
mtd
type
MTD_RAM
MTD_RAM
mtd->size = map->size;
mtd->size = map->size
mtd->size
mtd
mtd
size
map->size
map
map
size
mtd->_erase = mapram_erase;
mtd->_erase = mapram_erase
mtd->_erase
mtd
mtd
_erase
mapram_erase
mapram_erase
mtd->_get_unmapped_area = mapram_unmapped_area;
mtd->_get_unmapped_area = mapram_unmapped_area
mtd->_get_unmapped_area
mtd
mtd
_get_unmapped_area
mapram_unmapped_area
mapram_unmapped_area
mtd->_read = mapram_read;
mtd->_read = mapram_read
mtd->_read
mtd
mtd
_read
mapram_read
mapram_read
mtd->_write = mapram_write;
mtd->_write = mapram_write
mtd->_write
mtd
mtd
_write
mapram_write
mapram_write
mtd->_panic_write = mapram_write;
mtd->_panic_write = mapram_write
mtd->_panic_write
mtd
mtd
_panic_write
mapram_write
mapram_write
mtd->_sync = mapram_nop;
mtd->_sync = mapram_nop
mtd->_sync
mtd
mtd
_sync
mapram_nop
mapram_nop
mtd->flags = MTD_CAP_RAM;
mtd->flags = MTD_CAP_RAM
mtd->flags
mtd
mtd
flags
MTD_CAP_RAM
MTD_CAP_RAM
mtd->writesize = 1;
mtd->writesize = 1
mtd->writesize
mtd
mtd
writesize
1
mtd->erasesize = PAGE_SIZE;
mtd->erasesize = PAGE_SIZE
mtd->erasesize
mtd
mtd
erasesize
PAGE_SIZE
PAGE_SIZE
while(mtd->size & (mtd->erasesize - 1))		mtd->erasesize >>= 1;
mtd->size & (mtd->erasesize - 1)
mtd->size
mtd
mtd
size
(mtd->erasesize - 1)
mtd->erasesize - 1
mtd->erasesize
mtd
mtd
erasesize
1
mtd->erasesize >>= 1;
mtd->erasesize >>= 1
mtd->erasesize
mtd
mtd
erasesize
1
__module_get(THIS_MODULE);
__module_get(THIS_MODULE);
__module_get
__module_get
(THIS_MODULE)
THIS_MODULE
THIS_MODULE
return mtd;
mtd
mtd
-----joern-----
(125,130,0)
(4,94,0)
(161,91,0)
(30,10,0)
(27,159,0)
(162,70,0)
(8,93,0)
(166,30,0)
(90,94,0)
(101,129,0)
(106,44,0)
(110,159,0)
(16,159,0)
(105,118,0)
(90,56,0)
(6,94,0)
(124,23,0)
(81,109,0)
(95,10,0)
(78,30,0)
(18,66,0)
(42,21,0)
(91,94,0)
(24,145,0)
(165,145,0)
(93,159,0)
(141,145,0)
(84,172,0)
(102,110,0)
(167,94,0)
(112,159,0)
(156,145,0)
(162,145,0)
(22,70,0)
(98,52,0)
(130,68,0)
(64,170,0)
(173,71,0)
(82,91,0)
(7,145,0)
(152,118,0)
(75,159,0)
(12,161,0)
(49,173,0)
(21,83,0)
(31,167,0)
(136,110,0)
(163,162,0)
(137,145,0)
(44,53,0)
(133,166,0)
(113,47,0)
(146,94,0)
(92,5,0)
(168,145,0)
(68,113,0)
(172,168,0)
(151,27,0)
(54,148,0)
(33,119,0)
(159,145,0)
(56,90,0)
(169,145,0)
(68,172,0)
(15,129,0)
(164,162,0)
(51,146,0)
(76,118,0)
(63,17,0)
(73,145,0)
(73,146,0)
(70,162,0)
(123,169,0)
(23,99,0)
(150,6,0)
(99,145,0)
(68,23,0)
(72,145,0)
(33,57,0)
(107,173,0)
(33,149,0)
(69,91,0)
(52,159,0)
(157,90,0)
(56,86,0)
(68,6,0)
(139,112,0)
(34,55,0)
(30,166,0)
(90,36,0)
(135,99,0)
(147,37,0)
(87,23,0)
(5,92,0)
(100,62,0)
(33,141,0)
(27,47,0)
(29,110,0)
(166,94,0)
(2,115,0)
(158,86,0)
(112,72,0)
(13,27,0)
(121,47,0)
(68,112,0)
(32,172,0)
(113,159,0)
(74,130,0)
(80,137,0)
(83,94,0)
(68,66,0)
(171,154,0)
(25,168,0)
(3,2,0)
(33,35,0)
(167,109,0)
(53,145,0)
(143,4,0)
(161,129,0)
(115,145,0)
(0,55,0)
(68,17,0)
(77,53,0)
(134,16,0)
(37,147,0)
(60,113,0)
(6,115,0)
(116,6,0)
(83,21,0)
(28,156,0)
(68,44,0)
(17,159,0)
(155,13,0)
(14,10,0)
(39,83,0)
(27,13,0)
(68,16,0)
(118,145,0)
(44,159,0)
(79,66,0)
(66,159,0)
(37,144,0)
(154,73,0)
(68,52,0)
(88,86,0)
(108,154,0)
(117,141,0)
(120,145,0)
(132,16,0)
(38,35,0)
(110,5,0)
(129,145,0)
(10,30,0)
(173,159,0)
(141,159,0)
(110,136,0)
(142,9,0)
(122,147,0)
(131,75,0)
(170,166,0)
(140,146,0)
(41,52,0)
(61,145,0)
(75,5,0)
(43,145,0)
(127,68,0)
(103,57,0)
(144,159,0)
(154,159,0)
(172,159,0)
(55,59,0)
(162,94,0)
(58,113,0)
(11,137,0)
(144,37,0)
(45,149,0)
(46,36,0)
(5,145,0)
(33,148,0)
(159,144,0)
(146,73,0)
(10,94,0)
(50,144,0)
(118,94,0)
(68,173,0)
(4,70,0)
(48,44,0)
(68,154,0)
(97,92,0)
(68,55,0)
(23,159,0)
(129,161,0)
(27,68,0)
(17,62,0)
(71,145,0)
(91,161,0)
(126,56,0)
(136,13,0)
(153,4,0)
(109,167,0)
(115,2,0)
(9,145,0)
(40,119,0)
(137,94,0)
(1,75,0)
(59,145,0)
(138,165,0)
(86,56,0)
(111,27,0)
(47,145,0)
(19,72,0)
(86,94,0)
(55,159,0)
(20,137,0)
(67,92,0)
(26,59,0)
(16,156,0)
(104,112,0)
(128,167,0)
(68,75,0)
(13,136,0)
(160,71,0)
(36,90,0)
(65,159,0)
(68,130,0)
(62,145,0)
(129,94,0)
(130,159,0)
(85,83,0)
(166,170,0)
(70,4,0)
(92,94,0)
(114,145,0)
(169,94,0)
(66,9,0)
(52,169,0)
(96,145,0)
(89,17,0)
(106,9,1)
(100,17,1)
(169,94,1)
(56,126,1)
(63,59,1)
(4,143,1)
(50,37,1)
(90,56,1)
(68,6,1)
(10,14,1)
(9,142,1)
(85,39,1)
(36,90,1)
(75,131,1)
(110,159,1)
(90,94,1)
(167,94,1)
(81,167,1)
(119,40,1)
(155,27,1)
(126,86,1)
(70,22,1)
(153,163,1)
(68,44,1)
(167,128,1)
(68,173,1)
(172,84,1)
(80,20,1)
(156,28,1)
(125,136,1)
(33,119,1)
(3,6,1)
(30,10,1)
(6,116,1)
(15,101,1)
(16,132,1)
(21,42,1)
(131,1,1)
(135,23,1)
(118,105,1)
(12,91,1)
(68,66,1)
(16,159,1)
(68,112,1)
(91,94,1)
(33,57,1)
(95,133,1)
(51,154,1)
(33,149,1)
(110,29,1)
(52,159,1)
(0,34,1)
(34,99,1)
(97,75,1)
(116,150,1)
(35,38,1)
(42,83,1)
(136,13,1)
(173,159,1)
(68,113,1)
(67,97,1)
(164,21,1)
(10,94,1)
(27,47,1)
(161,12,1)
(48,106,1)
(172,159,1)
(129,161,1)
(23,159,1)
(158,88,1)
(71,160,1)
(141,117,1)
(147,122,1)
(103,93,1)
(148,54,1)
(160,173,1)
(93,159,1)
(36,46,1)
(68,52,1)
(66,159,1)
(88,157,1)
(144,37,1)
(108,169,1)
(157,162,1)
(102,47,1)
(74,125,1)
(14,95,1)
(45,109,1)
(60,58,1)
(144,50,1)
(112,104,1)
(32,62,1)
(166,94,1)
(18,5,1)
(2,3,1)
(149,45,1)
(54,21,1)
(68,23,1)
(83,94,1)
(76,152,1)
(137,80,1)
(27,151,1)
(115,2,1)
(23,124,1)
(52,98,1)
(171,108,1)
(86,94,1)
(104,139,1)
(99,135,1)
(141,159,1)
(84,32,1)
(66,79,1)
(44,48,1)
(154,171,1)
(146,140,1)
(55,0,1)
(46,90,1)
(130,74,1)
(31,118,1)
(136,110,1)
(166,30,1)
(151,111,1)
(138,136,1)
(123,52,1)
(170,64,1)
(132,134,1)
(111,110,1)
(134,71,1)
(53,77,1)
(102,68,1)
(73,146,1)
(159,144,1)
(124,87,1)
(11,109,1)
(68,55,1)
(78,10,1)
(68,154,1)
(82,15,1)
(25,172,1)
(162,94,1)
(27,68,1)
(6,94,1)
(20,11,1)
(44,159,1)
(112,159,1)
(79,18,1)
(70,4,1)
(38,36,1)
(65,170,1)
(4,94,1)
(146,94,1)
(59,26,1)
(121,113,1)
(8,159,1)
(1,72,1)
(39,137,1)
(113,60,1)
(109,167,1)
(118,94,1)
(69,82,1)
(93,8,1)
(68,16,1)
(58,156,1)
(101,36,1)
(68,17,1)
(56,86,1)
(161,91,1)
(133,129,1)
(170,166,1)
(75,159,1)
(33,141,1)
(17,89,1)
(77,44,1)
(30,78,1)
(27,159,1)
(40,170,1)
(21,83,1)
(163,164,1)
(140,51,1)
(107,49,1)
(68,172,1)
(62,100,1)
(37,147,1)
(117,165,1)
(29,102,1)
(113,159,1)
(109,81,1)
(64,166,1)
(105,76,1)
(49,168,1)
(19,112,1)
(33,35,1)
(68,75,1)
(165,138,1)
(162,70,1)
(68,127,1)
(28,16,1)
(83,85,1)
(110,5,1)
(17,159,1)
(41,115,1)
(92,94,1)
(72,19,1)
(22,4,1)
(13,155,1)
(5,92,1)
(129,94,1)
(150,93,1)
(26,55,1)
(86,158,1)
(68,130,1)
(122,65,1)
(47,121,1)
(92,67,1)
(98,41,1)
(169,123,1)
(91,69,1)
(139,73,1)
(173,107,1)
(130,159,1)
(87,53,1)
(13,27,1)
(127,130,1)
(89,63,1)
(57,103,1)
(143,153,1)
(33,148,1)
(168,25,1)
(154,159,1)
(137,94,1)
(55,159,1)
(142,66,1)
(128,31,1)
(68,172,2)
(4,94,2)
(164,21,2)
(46,21,2)
(4,21,2)
(68,154,2)
(97,93,2)
(160,93,2)
(68,6,2)
(27,136,2)
(90,56,2)
(9,93,2)
(169,94,2)
(68,113,2)
(3,93,2)
(57,93,2)
(66,93,2)
(136,13,2)
(102,93,2)
(134,93,2)
(17,93,2)
(156,93,2)
(83,94,2)
(79,93,2)
(172,93,2)
(110,93,2)
(68,52,2)
(41,93,2)
(69,36,2)
(106,93,2)
(149,109,2)
(26,93,2)
(14,36,2)
(39,109,2)
(73,93,2)
(115,2,2)
(68,75,2)
(141,159,2)
(88,21,2)
(112,159,2)
(144,170,2)
(161,91,2)
(33,141,2)
(136,110,2)
(123,93,2)
(143,21,2)
(108,93,2)
(90,94,2)
(93,170,2)
(121,93,2)
(87,93,2)
(111,93,2)
(75,93,2)
(148,21,2)
(127,136,2)
(5,92,2)
(48,93,2)
(104,93,2)
(51,93,2)
(159,144,2)
(5,93,2)
(146,93,2)
(30,36,2)
(113,93,2)
(52,159,2)
(33,57,2)
(167,94,2)
(36,21,2)
(65,170,2)
(91,94,2)
(33,149,2)
(157,21,2)
(52,93,2)
(74,136,2)
(21,109,2)
(130,136,2)
(21,83,2)
(78,36,2)
(27,159,2)
(135,93,2)
(44,93,2)
(89,93,2)
(155,93,2)
(68,66,2)
(44,159,2)
(162,94,2)
(151,136,2)
(62,93,2)
(27,47,2)
(137,94,2)
(166,30,2)
(110,136,2)
(23,93,2)
(82,36,2)
(119,170,2)
(20,109,2)
(130,159,2)
(115,93,2)
(16,93,2)
(93,159,2)
(129,94,2)
(67,93,2)
(91,36,2)
(173,159,2)
(137,109,2)
(153,21,2)
(55,159,2)
(110,5,2)
(68,173,2)
(49,93,2)
(100,93,2)
(42,109,2)
(102,136,2)
(133,36,2)
(35,36,2)
(173,93,2)
(37,170,2)
(19,93,2)
(118,94,2)
(68,44,2)
(45,109,2)
(99,93,2)
(111,136,2)
(141,93,2)
(162,70,2)
(68,16,2)
(58,93,2)
(54,21,2)
(64,36,2)
(6,94,2)
(159,170,2)
(139,93,2)
(83,109,2)
(146,94,2)
(144,37,2)
(72,93,2)
(112,93,2)
(68,130,2)
(10,36,2)
(166,36,2)
(56,21,2)
(29,136,2)
(27,68,2)
(158,21,2)
(17,159,2)
(71,93,2)
(1,93,2)
(136,136,2)
(129,36,2)
(163,21,2)
(55,93,2)
(68,17,2)
(165,93,2)
(30,10,2)
(25,93,2)
(29,93,2)
(122,170,2)
(53,93,2)
(34,93,2)
(15,36,2)
(136,93,2)
(95,36,2)
(98,93,2)
(32,93,2)
(47,93,2)
(12,36,2)
(169,93,2)
(126,21,2)
(33,148,2)
(125,136,2)
(2,93,2)
(85,109,2)
(6,93,2)
(13,27,2)
(33,119,2)
(68,112,2)
(73,146,2)
(68,55,2)
(77,93,2)
(155,136,2)
(170,36,2)
(8,170,2)
(166,94,2)
(117,93,2)
(151,93,2)
(107,93,2)
(70,4,2)
(40,170,2)
(132,93,2)
(63,93,2)
(90,21,2)
(92,93,2)
(86,21,2)
(101,36,2)
(75,159,2)
(103,93,2)
(70,21,2)
(142,93,2)
(150,93,2)
(172,159,2)
(59,93,2)
(37,147,2)
(38,36,2)
(131,93,2)
(171,93,2)
(113,159,2)
(138,93,2)
(92,94,2)
(129,161,2)
(170,166,2)
(28,93,2)
(10,94,2)
(13,93,2)
(27,93,2)
(18,93,2)
(109,167,2)
(162,21,2)
(36,90,2)
(56,86,2)
(33,35,2)
(60,93,2)
(68,23,2)
(124,93,2)
(13,136,2)
(66,159,2)
(168,93,2)
(147,170,2)
(154,159,2)
(80,109,2)
(11,109,2)
(154,93,2)
(116,93,2)
(0,93,2)
(140,93,2)
(161,36,2)
(16,159,2)
(86,94,2)
(110,159,2)
(22,21,2)
(50,170,2)
(23,159,2)
(84,93,2)
(68,136,2)
-----------------------------------
(0,_write)
(1,mtd)
(2,&mapram_chipdrv)
(3,mapram_chipdrv)
(4,map->size)
(5,mtd->size = map->size)
(6,map->fldrv)
(7,if (map_read8(map, 0)
(8,mtd)
(9,mtd->_erase = mapram_erase)
(10,map->size)
(11,map)
(12,1)
(13,mtd->erasesize - 1)
(14,size)
(15,0xAA)
(16,mtd->writesize)
(17,mtd->_panic_write)
(18,mtd)
(19,MTD_RAM)
(20,0xAA)
(21,map_read8(map, 0)
(22,1)
(23,mtd->_read)
(24,if (map_read8(map, map->size-1)
(25,mapram_nop)
(26,mapram_write)
(27,mtd->erasesize)
(28,1)
(29,size)
(30,map->size-1)
(31,map)
(32,mtd)
(33,RET)
(34,mtd)
(35,return NULL;)
(36,map_read8(map, map->size-1)
(37,sizeof(*mtd)
(38,NULL)
(39,map)
(40,NULL)
(41,mtd)
(42,0xAA)
(43,while(mtd->size & (mtd->erasesize - 1)
(44,mtd->_get_unmapped_area)
(45,NULL)
(46,0x55)
(47,mtd->erasesize = PAGE_SIZE)
(48,_get_unmapped_area)
(49,mtd)
(50,GFP_KERNEL)
(51,map)
(52,mtd->priv)
(53,mtd->_get_unmapped_area = mapram_unmapped_area)
(54,NULL)
(55,mtd->_write)
(56,map->size-1)
(57,return NULL;)
(58,mtd)
(59,mtd->_write = mapram_write)
(60,erasesize)
(61,if (!mtd)
(62,mtd->_panic_write = mapram_write)
(63,mtd)
(64,0xAA)
(65,mtd)
(66,mtd->_erase)
(67,size)
(68,mtd->erasesize >>= 1)
(69,size)
(70,map->size-1)
(71,mtd->flags = MTD_CAP_RAM)
(72,mtd->type = MTD_RAM)
(73,mtd->name = map->name)
(74,erasesize)
(75,mtd->size)
(76,0x55)
(77,mapram_unmapped_area)
(78,1)
(79,_erase)
(80,0)
(81,0x55)
(82,map)
(83,map_read8(map, 0)
(84,_sync)
(85,0)
(86,map->size)
(87,mtd)
(88,map)
(89,_panic_write)
(90,map_read8(map, map->size-1)
(91,map->size)
(92,map->size)
(93,!mtd)
(94,struct map_info *map)
(95,map)
(96,mtd)
(97,map)
(98,priv)
(99,mtd->_read = mapram_read)
(100,mapram_write)
(101,map)
(102,mtd)
(103,NULL)
(104,type)
(105,0)
(106,mtd)
(107,flags)
(108,mtd)
(109,map_read8(map, 0)
(110,mtd->size)
(111,mtd)
(112,mtd->type)
(113,mtd->erasesize)
(114,if (map_read8(map, map->size-1)
(115,map->fldrv = &mapram_chipdrv)
(116,fldrv)
(117,mtd)
(118,map_write8(map, 0x55, 0)
(119,return NULL;)
(120,if (map_read8(map, 0)
(121,PAGE_SIZE)
(122,mtd)
(123,map)
(124,_read)
(125,mtd)
(126,1)
(127,1)
(128,0)
(129,map_write8(map, 0xAA, map->size-1)
(130,mtd->erasesize)
(131,size)
(132,writesize)
(133,map)
(134,mtd)
(135,mapram_read)
(136,mtd->size & (mtd->erasesize - 1)
(137,map_write8(map, 0xAA, 0)
(138,THIS_MODULE)
(139,mtd)
(140,name)
(141,return mtd;)
(142,mapram_erase)
(143,size)
(144,kzalloc(sizeof(*mtd)
(145,)
(146,map->name)
(147,*mtd)
(148,return NULL;)
(149,return NULL;)
(150,map)
(151,erasesize)
(152,map)
(153,map)
(154,mtd->name)
(155,1)
(156,mtd->writesize = 1)
(157,map)
(158,size)
(159,mtd = kzalloc(sizeof(*mtd)
(160,MTD_CAP_RAM)
(161,map->size-1)
(162,map_write8(map, 0x55, map->size-1)
(163,0x55)
(164,map)
(165,__module_get(THIS_MODULE)
(166,map_read8(map, map->size-1)
(167,map_read8(map, 0)
(168,mtd->_sync = mapram_nop)
(169,mtd->priv = map)
(170,map_read8(map, map->size-1)
(171,name)
(172,mtd->_sync)
(173,mtd->flags)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^