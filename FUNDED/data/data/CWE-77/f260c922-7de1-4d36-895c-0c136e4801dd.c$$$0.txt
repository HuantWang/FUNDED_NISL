-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    {
        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* wexecv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECV(COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
54,56
55,56
56,57
56,58
58,59
58,60
58,61
58,62
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,57,59,60,61,65,67,69,71,75,77,79
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wexecv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
static void
goodG2B()
goodG2B
{    int h;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wexecv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
int h;
int h;
int
h
h
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
{        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wexecv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(3,13,0)
(5,1,0)
(15,18,0)
(4,6,0)
(10,19,0)
(18,21,0)
(23,5,0)
(17,22,0)
(19,1,0)
(12,1,0)
(13,1,0)
(18,13,0)
(24,5,0)
(8,11,0)
(2,1,0)
(11,6,0)
(22,6,0)
(14,11,0)
(0,1,0)
(25,6,0)
(5,19,0)
(7,21,0)
(26,1,0)
(9,18,0)
(20,19,0)
(21,13,0)
(5,19,1)
(23,24,1)
(17,11,1)
(18,9,1)
(24,19,1)
(16,18,1)
(4,5,1)
(9,15,1)
(21,7,1)
(20,10,1)
(14,6,1)
(5,23,1)
(22,6,1)
(18,21,1)
(19,20,1)
(8,14,1)
(15,21,1)
(7,11,1)
(11,8,1)
(6,25,1)
(14,22,1)
(25,4,1)
(22,17,1)
(11,6,1)
(14,11,2)
(5,19,2)
(18,21,2)
(22,6,2)
(8,11,2)
(22,11,2)
(11,6,2)
(17,11,2)
(11,11,2)
-----------------------------------
(0,for(h = 0; h < 1; h++)
(1,)
(2,dataBuffer)
(3,args)
(4,h)
(5,data = dataBuffer)
(6,h = 0)
(7,args)
(8,1)
(9,args)
(10,dataBuffer)
(11,h < 1)
(12,h)
(13,)
(14,h)
(15,COMMAND_INT_PATH)
(16,RET)
(17,h)
(18,EXECV(COMMAND_INT_PATH, args)
(19,dataBuffer[100] = COMMAND_ARG2)
(20,COMMAND_ARG2)
(21,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(22,h++)
(23,dataBuffer)
(24,data)
(25,0)
(26,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
