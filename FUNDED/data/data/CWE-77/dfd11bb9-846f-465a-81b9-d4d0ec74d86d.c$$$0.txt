-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_53_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_53_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32spawnl_53_bad()
CWE78_OS_Command_Injection__char_console_w32spawnl_53_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink
CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink
data
data
-----joern-----
(36,68,0)
(24,49,0)
(5,14,0)
(21,46,0)
(6,45,0)
(61,14,0)
(21,36,0)
(15,18,0)
(41,66,0)
(20,65,0)
(41,54,0)
(16,65,0)
(31,58,0)
(53,34,0)
(52,54,0)
(68,3,0)
(14,54,0)
(29,15,0)
(66,34,0)
(47,66,0)
(14,61,0)
(45,47,0)
(50,68,0)
(66,47,0)
(50,54,0)
(39,10,0)
(69,11,0)
(38,24,0)
(56,2,0)
(24,54,0)
(48,57,0)
(52,18,0)
(67,8,0)
(30,36,0)
(54,65,0)
(9,68,0)
(1,3,0)
(22,54,0)
(54,18,0)
(49,64,0)
(55,18,0)
(66,41,0)
(17,15,0)
(34,66,0)
(69,61,0)
(23,36,0)
(11,69,0)
(68,50,0)
(42,21,0)
(36,21,0)
(10,54,0)
(70,50,0)
(60,69,0)
(10,2,0)
(10,58,0)
(4,47,0)
(32,49,0)
(35,24,0)
(43,12,0)
(37,69,0)
(47,4,0)
(65,18,0)
(19,57,0)
(45,61,0)
(21,54,0)
(26,18,0)
(47,45,0)
(2,56,0)
(12,64,0)
(56,57,0)
(59,54,0)
(28,2,0)
(0,66,0)
(61,15,0)
(40,46,0)
(46,51,0)
(25,41,0)
(41,61,0)
(7,52,0)
(27,41,0)
(62,61,0)
(13,11,0)
(58,10,0)
(57,68,0)
(44,45,0)
(24,61,0)
(2,10,0)
(57,56,0)
(63,58,0)
(58,68,0)
(59,22,1)
(58,31,1)
(58,68,1)
(61,14,1)
(21,36,1)
(56,57,1)
(37,61,1)
(30,23,1)
(32,24,1)
(33,52,1)
(70,9,1)
(47,45,1)
(34,53,1)
(49,32,1)
(65,16,1)
(66,41,1)
(34,66,1)
(21,54,1)
(44,6,1)
(68,50,1)
(43,34,1)
(66,0,1)
(2,10,1)
(40,21,1)
(36,68,1)
(25,11,1)
(45,61,1)
(38,35,1)
(36,30,1)
(7,49,1)
(57,48,1)
(41,61,1)
(12,43,1)
(22,65,1)
(69,60,1)
(7,46,1)
(7,56,1)
(52,54,1)
(47,4,1)
(28,10,1)
(54,59,1)
(66,47,1)
(5,62,1)
(14,5,1)
(39,57,1)
(57,68,1)
(48,19,1)
(62,54,1)
(10,58,1)
(50,70,1)
(52,7,1)
(35,12,1)
(31,63,1)
(24,61,1)
(41,54,1)
(27,25,1)
(7,11,1)
(56,2,1)
(9,34,1)
(42,56,1)
(45,44,1)
(16,20,1)
(13,69,1)
(11,69,1)
(41,27,1)
(53,66,1)
(19,68,1)
(0,47,1)
(54,65,1)
(2,28,1)
(24,54,1)
(23,42,1)
(14,54,1)
(24,38,1)
(10,54,1)
(46,40,1)
(50,54,1)
(11,13,1)
(63,39,1)
(60,37,1)
(6,41,1)
(69,61,1)
(2,57,2)
(54,65,2)
(40,56,2)
(21,56,2)
(57,34,2)
(19,34,2)
(34,11,2)
(32,34,2)
(70,34,2)
(45,11,2)
(63,57,2)
(41,11,2)
(10,57,2)
(66,41,2)
(24,54,2)
(68,34,2)
(25,11,2)
(43,34,2)
(66,11,2)
(21,54,2)
(69,61,2)
(21,36,2)
(48,34,2)
(58,57,2)
(68,50,2)
(24,34,2)
(0,11,2)
(56,2,2)
(23,56,2)
(24,61,2)
(47,4,2)
(47,45,2)
(42,56,2)
(30,56,2)
(49,34,2)
(9,34,2)
(38,34,2)
(35,34,2)
(56,57,2)
(36,56,2)
(12,34,2)
(6,11,2)
(57,68,2)
(11,69,2)
(56,34,2)
(10,58,2)
(52,54,2)
(27,11,2)
(39,57,2)
(41,61,2)
(46,56,2)
(47,11,2)
(41,54,2)
(53,11,2)
(34,66,2)
(2,10,2)
(50,54,2)
(44,11,2)
(66,47,2)
(14,54,2)
(10,54,2)
(31,57,2)
(50,34,2)
(36,68,2)
(58,68,2)
(28,57,2)
(61,14,2)
(45,61,2)
-----------------------------------
(0,stdin)
(1,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(2,data[dataLen-1] == \\\'\\\\n\\\')
(3,)
(4,int)
(5,data)
(6,100)
(7,data)
(8,)
(9,dataLen)
(10,data[dataLen-1])
(11,100-dataLen > 1)
(12,printLine("fgets()
(13,1)
(14,strlen(data)
(15,)
(16,COMMAND_ARG2)
(17,dataLen)
(18,)
(19,dataLen)
(20,dataBuffer)
(21,data[dataLen-1])
(22,data)
(23,dataLen)
(24,data[dataLen])
(25,data)
(26,dataBuffer)
(27,dataLen)
(28,\\\'\\\\n\\\')
(29,if (100-dataLen > 1)
(30,1)
(31,1)
(32,\\\'\\\\0\\\')
(33,RET)
(34,fgets(data+dataLen, (int)
(35,data)
(36,dataLen-1)
(37,100)
(38,dataLen)
(39,data)
(40,\\\'\\\\0\\\')
(41,data+dataLen)
(42,data)
(43,"fgets()
(44,dataLen)
(45,100-dataLen)
(46,data[dataLen-1] = \\\'\\\\0\\\')
(47,(int)
(48,0)
(49,data[dataLen] = \\\'\\\\0\\\')
(50,strlen(data)
(51,)
(52,CWE78_OS_Command_Injection__char_console_w32spawnl_53b_badSink(data)
(53,NULL)
(54,data = dataBuffer)
(55,data)
(56,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(57,dataLen > 0)
(58,dataLen-1)
(59,dataBuffer)
(60,dataLen)
(61,dataLen = strlen(data)
(62,dataLen)
(63,dataLen)
(64,)
(65,dataBuffer[100] = COMMAND_ARG2)
(66,fgets(data+dataLen, (int)
(67,if (fgets(data+dataLen, (int)
(68,dataLen = strlen(data)
(69,100-dataLen)
(70,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
