-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* spawnl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
55,58
55,59
55,60
55,61
55,62
56,57
58,59
60,61
62,63
64,65
66,67
68,69
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,57,59,61,63,65,67,69
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B()
goodG2B
{    int h;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
int h;
int h;
int
h
h
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnl
_spawnl
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(25,9,0)
(19,12,0)
(1,30,0)
(16,30,0)
(26,12,0)
(5,12,0)
(3,12,0)
(24,20,0)
(27,9,0)
(10,12,0)
(22,20,0)
(12,30,0)
(29,6,0)
(0,7,0)
(13,18,0)
(9,6,0)
(23,6,0)
(15,21,0)
(8,18,0)
(21,14,0)
(11,30,0)
(2,12,0)
(17,21,0)
(7,18,0)
(9,30,0)
(28,30,0)
(6,30,0)
(21,9,0)
(20,18,0)
(9,6,1)
(8,13,1)
(20,24,1)
(18,8,1)
(2,3,1)
(13,9,1)
(17,20,1)
(7,18,1)
(9,25,1)
(10,5,1)
(26,20,1)
(4,12,1)
(21,15,1)
(27,6,1)
(19,2,1)
(21,9,1)
(24,22,1)
(20,18,1)
(15,17,1)
(0,21,1)
(22,18,1)
(22,7,1)
(25,27,1)
(12,10,1)
(5,19,1)
(3,26,1)
(29,23,1)
(6,29,1)
(7,0,1)
(20,18,2)
(7,20,2)
(0,20,2)
(9,6,2)
(22,20,2)
(21,20,2)
(21,9,2)
(7,18,2)
(20,20,2)
(15,20,2)
(24,20,2)
(17,20,2)
-----------------------------------
(0,h)
(1,h)
(2,COMMAND_INT_PATH)
(3,COMMAND_INT_PATH)
(4,RET)
(5,COMMAND_ARG3)
(6,dataBuffer[100] = COMMAND_ARG2)
(7,h++)
(8,0)
(9,data = dataBuffer)
(10,NULL)
(11,for(h = 0; h < 1; h++)
(12,_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(13,h)
(14,)
(15,"*.*")
(16,dataBuffer)
(17,data)
(18,h = 0)
(19,COMMAND_ARG1)
(20,h < 1)
(21,strcat(data, "*.*")
(22,h)
(23,dataBuffer)
(24,1)
(25,dataBuffer)
(26,_P_WAIT)
(27,data)
(28,data)
(29,COMMAND_ARG2)
(30,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
