-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_52_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execvp_52b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_52_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_52b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_52_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_52_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_52b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execvp_52b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_execvp_52b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_execvp_52b_badSink
CWE78_OS_Command_Injection__char_console_w32_execvp_52b_badSink
data
data
-----joern-----
(44,62,0)
(21,1,0)
(38,41,0)
(28,62,0)
(1,17,0)
(34,17,0)
(67,25,0)
(68,57,0)
(12,1,0)
(12,13,0)
(40,11,0)
(29,16,0)
(27,1,0)
(62,68,0)
(32,16,0)
(54,62,0)
(8,57,0)
(43,27,0)
(17,57,0)
(29,11,0)
(31,1,0)
(23,14,0)
(14,41,0)
(16,0,0)
(54,67,0)
(22,56,0)
(70,54,0)
(12,62,0)
(7,57,0)
(47,46,0)
(3,67,0)
(64,29,0)
(9,20,0)
(36,41,0)
(62,28,0)
(69,20,0)
(10,12,0)
(28,1,0)
(2,44,0)
(58,53,0)
(27,16,0)
(1,57,0)
(20,9,0)
(55,2,0)
(11,20,0)
(47,1,0)
(16,27,0)
(53,25,0)
(41,14,0)
(61,68,0)
(20,11,0)
(14,23,0)
(6,9,0)
(26,54,0)
(47,39,0)
(9,6,0)
(13,12,0)
(6,16,0)
(45,44,0)
(18,46,0)
(35,13,0)
(41,62,0)
(30,39,0)
(60,0,0)
(24,44,0)
(63,6,0)
(51,28,0)
(15,57,0)
(49,47,0)
(33,62,0)
(54,1,0)
(48,17,0)
(13,14,0)
(37,13,0)
(59,12,0)
(46,16,0)
(39,66,0)
(46,47,0)
(42,29,0)
(44,2,0)
(50,8,0)
(5,68,0)
(4,6,0)
(11,29,0)
(65,46,0)
(8,1,0)
(52,35,0)
(11,1,0)
(13,35,0)
(14,13,0)
(1,31,1)
(21,17,1)
(70,53,1)
(19,8,1)
(62,28,1)
(35,13,1)
(37,14,1)
(28,51,1)
(44,62,1)
(59,10,1)
(29,64,1)
(47,46,1)
(13,37,1)
(52,13,1)
(44,45,1)
(53,58,1)
(16,27,1)
(8,1,1)
(48,34,1)
(35,52,1)
(26,70,1)
(2,55,1)
(24,62,1)
(47,1,1)
(67,3,1)
(49,9,1)
(27,1,1)
(46,18,1)
(40,6,1)
(63,4,1)
(20,11,1)
(51,33,1)
(9,6,1)
(58,35,1)
(54,1,1)
(65,49,1)
(4,16,1)
(6,63,1)
(31,21,1)
(69,11,1)
(28,1,1)
(39,30,1)
(50,67,1)
(8,50,1)
(1,17,1)
(64,42,1)
(10,2,1)
(38,36,1)
(50,2,1)
(13,14,1)
(43,32,1)
(36,12,1)
(20,69,1)
(13,12,1)
(41,38,1)
(30,47,1)
(18,65,1)
(32,35,1)
(50,9,1)
(2,44,1)
(54,62,1)
(6,16,1)
(29,16,1)
(45,24,1)
(3,54,1)
(33,1,1)
(55,44,1)
(42,40,1)
(50,39,1)
(11,1,1)
(54,26,1)
(46,16,1)
(27,43,1)
(11,29,1)
(41,62,1)
(14,41,1)
(17,48,1)
(12,59,1)
(14,23,1)
(9,20,1)
(12,1,1)
(12,62,1)
(16,27,2)
(46,9,2)
(70,35,2)
(67,35,2)
(11,1,2)
(14,2,2)
(40,6,2)
(8,1,2)
(41,2,2)
(18,9,2)
(9,6,2)
(20,6,2)
(65,9,2)
(49,9,2)
(13,14,2)
(10,2,2)
(32,35,2)
(6,16,2)
(69,6,2)
(63,35,2)
(47,46,2)
(47,1,2)
(14,41,2)
(27,1,2)
(47,9,2)
(1,17,2)
(29,6,2)
(62,28,2)
(35,2,2)
(54,62,2)
(9,35,2)
(39,9,2)
(30,9,2)
(59,2,2)
(38,2,2)
(58,35,2)
(28,1,2)
(35,13,2)
(6,35,2)
(9,20,2)
(53,35,2)
(11,29,2)
(2,44,2)
(41,62,2)
(26,35,2)
(64,6,2)
(3,35,2)
(37,2,2)
(16,35,2)
(20,11,2)
(29,16,2)
(11,6,2)
(13,12,2)
(13,2,2)
(44,62,2)
(12,62,2)
(27,35,2)
(42,6,2)
(46,16,2)
(36,2,2)
(54,35,2)
(52,2,2)
(4,35,2)
(12,2,2)
(12,1,2)
(43,35,2)
(54,1,2)
(14,23,2)
-----------------------------------
(0,)
(1,data = dataBuffer)
(2,100-dataLen > 1)
(3,\\\'\\\\0\\\')
(4,dataLen)
(5,dataLen)
(6,dataLen > 0)
(7,data)
(8,CWE78_OS_Command_Injection__char_console_w32_execvp_52b_badSink(data)
(9,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(10,data)
(11,data[dataLen-1])
(12,data+dataLen)
(13,fgets(data+dataLen, (int)
(14,(int)
(15,dataBuffer)
(16,dataLen = strlen(data)
(17,dataBuffer[100] = COMMAND_ARG2)
(18,1)
(19,RET)
(20,data[dataLen-1] == \\\'\\\\n\\\')
(21,data)
(22,if (fgets(data+dataLen, (int)
(23,int)
(24,100)
(25,)
(26,dataLen)
(27,strlen(data)
(28,strlen(data)
(29,dataLen-1)
(30,\\\'\\\\0\\\')
(31,dataBuffer)
(32,dataLen)
(33,dataLen)
(34,dataBuffer)
(35,fgets(data+dataLen, (int)
(36,100)
(37,stdin)
(38,dataLen)
(39,data[dataLen-1] = \\\'\\\\0\\\')
(40,data)
(41,100-dataLen)
(42,dataLen)
(43,data)
(44,100-dataLen)
(45,dataLen)
(46,dataLen-1)
(47,data[dataLen-1])
(48,COMMAND_ARG2)
(49,data)
(50,data)
(51,data)
(52,NULL)
(53,printLine("fgets()
(54,data[dataLen])
(55,1)
(56,)
(57,)
(58,"fgets()
(59,dataLen)
(60,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(61,if (100-dataLen > 1)
(62,dataLen = strlen(data)
(63,0)
(64,1)
(65,dataLen)
(66,)
(67,data[dataLen] = \\\'\\\\0\\\')
(68,)
(69,\\\'\\\\n\\\')
(70,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
