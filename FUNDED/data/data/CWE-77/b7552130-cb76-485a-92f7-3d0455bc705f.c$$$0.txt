-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
32,34
32,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
49,52
49,53
50,51
52,53
52,54
53,54
55,56
57,58
59,60
59,61
60,61
60,62
62,63
65,66
66,67
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,31,33,34,38,40,44,46,51,54,56,58,61,63,64,67
-----computeFrom-----
42,43
42,44
52,53
52,54
59,60
59,61
60,61
60,62
-----guardedBy-----
44,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    return data;}
if(badStatic)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
badStatic
badStatic
{        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
return data;
data
data
-----joern-----
(10,31,0)
(13,28,0)
(8,14,0)
(12,32,0)
(21,29,0)
(32,28,0)
(16,33,0)
(29,21,0)
(17,31,0)
(19,3,0)
(28,15,0)
(22,24,0)
(7,19,0)
(16,32,0)
(24,29,0)
(26,3,0)
(5,32,0)
(11,21,0)
(9,5,0)
(21,32,0)
(3,26,0)
(4,29,0)
(5,24,0)
(23,26,0)
(3,28,0)
(24,18,0)
(2,19,0)
(1,5,0)
(0,21,0)
(24,3,0)
(20,28,0)
(6,28,0)
(5,33,0)
(31,14,0)
(29,24,0)
(30,16,0)
(27,3,0)
(31,33,0)
(32,16,0)
(24,5,0)
(17,24,1)
(4,22,1)
(24,29,1)
(31,33,1)
(3,26,1)
(5,1,1)
(19,3,1)
(24,5,1)
(7,3,1)
(19,2,1)
(17,25,1)
(1,9,1)
(16,33,1)
(12,25,1)
(10,31,1)
(9,19,1)
(26,23,1)
(32,16,1)
(27,32,1)
(23,27,1)
(21,32,1)
(21,11,1)
(5,32,1)
(2,7,1)
(16,30,1)
(0,4,1)
(29,21,1)
(11,0,1)
(24,3,1)
(17,19,1)
(30,12,1)
(5,33,1)
(31,17,1)
(22,5,1)
(2,25,2)
(24,19,2)
(7,25,2)
(22,19,2)
(5,19,2)
(23,25,2)
(26,25,2)
(3,25,2)
(16,33,2)
(24,5,2)
(31,33,2)
(24,3,2)
(30,25,2)
(32,25,2)
(29,19,2)
(29,21,2)
(5,32,2)
(24,29,2)
(27,25,2)
(9,19,2)
(12,25,2)
(21,19,2)
(0,19,2)
(32,16,2)
(16,25,2)
(10,31,2)
(21,32,2)
(3,26,2)
(4,19,2)
(1,19,2)
(19,3,2)
(19,25,2)
(5,33,2)
(11,19,2)
-----------------------------------
(0,dataLen)
(1,dataLen)
(2,NULL)
(3,* environment = GETENV(ENV_VARIABLE)
(4,100)
(5,data+dataLen)
(6,if (environment != NULL)
(7,environment)
(8,if(badStatic)
(9,data)
(10,RET)
(11,1)
(12,dataLen)
(13,dataLen)
(14,)
(15,)
(16,strlen(data)
(17,data)
(18,)
(19,environment != NULL)
(20,environment)
(21,dataLen-1)
(22,environment)
(23,ENV_VARIABLE)
(24,strncat(data+dataLen, environment, 100-dataLen-1)
(25,badStatic)
(26,GETENV(ENV_VARIABLE)
(27,environment)
(28,)
(29,100-dataLen-1)
(30,data)
(31,return data;)
(32,dataLen = strlen(data)
(33,char * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
