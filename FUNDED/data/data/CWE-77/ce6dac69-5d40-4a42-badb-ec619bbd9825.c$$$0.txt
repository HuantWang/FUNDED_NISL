-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_34_bad()
{
    char * data;
    CWE78_OS_Command_Injection__char_console_system_34_unionType myUnion;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
49,50
49,51
51,52
54,55
55,56
55,57
55,58
56,57
56,58
57,58
57,59
57,60
57,61
58,59
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
70,71
70,72
72,73
74,75
76,77
78,79
78,80
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
103,104
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
110,111
114,115
114,116
115,116
116,117
116,118
117,118
120,121
121,122
121,123
122,123
122,124
123,124
125,126
128,129
129,130
129,131
130,131
130,132
131,132
134,135
136,137
136,138
137,138
138,139
138,140
140,141
140,142
140,143
143,144
144,145
144,146
145,146
148,149
148,150
149,150
149,151
150,151
150,152
151,152
153,154
156,157
156,158
157,158
158,159
158,160
159,160
162,163
163,164
163,165
164,165
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,38,40,44,46,50,52,53,59,62,64,67,68,71,73,75,77,82,85,87,92,93,97,100,101,102,108,111,112,113,118,119,124,126,127,132,133,135,139,141,142,146,147,152,154,155,160,161,165,166
-----computeFrom-----
29,30
29,31
48,49
48,50
49,50
49,51
56,57
56,58
60,61
60,62
70,71
70,72
80,81
80,82
89,90
89,91
90,91
90,92
94,95
94,96
98,99
98,100
105,106
105,107
109,110
109,111
121,122
121,123
129,130
129,131
149,150
149,151
-----guardedBy-----
52,126
62,108
73,111
97,108
100,111
-----guardedByNegation-----
62,124
73,126
-----lastLexicalUse-----
62,124
73,126
-----jump-----
62,124
73,126
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_34_bad(){    char * data;    CWE78_OS_Command_Injection__char_console_system_34_unionType myUnion;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
void
CWE78_OS_Command_Injection__char_console_system_34_bad()
CWE78_OS_Command_Injection__char_console_system_34_bad
{    char * data;    CWE78_OS_Command_Injection__char_console_system_34_unionType myUnion;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
char * data;
char * data;
char
* data
*
data
CWE78_OS_Command_Injection__char_console_system_34_unionType myUnion;
CWE78_OS_Command_Injection__char_console_system_34_unionType myUnion;
CWE78_OS_Command_Injection__char_console_system_34_unionType
CWE78_OS_Command_Injection__char_console_system_34_unionType
myUnion
myUnion
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(70,82,0)
(88,9,0)
(67,26,0)
(13,82,0)
(58,71,0)
(33,72,0)
(81,43,0)
(36,39,0)
(0,13,0)
(25,51,0)
(49,82,0)
(75,67,0)
(51,59,0)
(38,73,0)
(47,80,0)
(71,58,0)
(64,48,0)
(57,82,0)
(89,71,0)
(67,59,0)
(69,2,0)
(13,63,0)
(38,34,0)
(61,38,0)
(27,79,0)
(9,22,0)
(5,84,0)
(26,67,0)
(82,72,0)
(60,53,0)
(34,82,0)
(26,48,0)
(40,59,0)
(82,80,0)
(84,25,0)
(3,28,0)
(20,9,0)
(15,30,0)
(46,28,0)
(8,42,0)
(38,27,0)
(34,38,0)
(84,49,0)
(6,51,0)
(2,27,0)
(78,73,0)
(65,67,0)
(68,80,0)
(74,24,0)
(49,84,0)
(49,24,0)
(24,49,0)
(10,46,0)
(37,28,0)
(55,39,0)
(18,51,0)
(46,39,0)
(28,72,0)
(9,20,0)
(24,59,0)
(71,9,0)
(45,24,0)
(34,9,0)
(59,70,0)
(77,49,0)
(73,38,0)
(21,72,0)
(63,12,0)
(52,70,0)
(26,82,0)
(44,87,0)
(53,33,0)
(83,34,0)
(1,4,0)
(70,59,0)
(62,10,0)
(30,12,0)
(80,72,0)
(20,82,0)
(10,62,0)
(41,58,0)
(85,62,0)
(35,72,0)
(86,44,0)
(54,22,0)
(43,87,0)
(27,2,0)
(59,42,0)
(39,46,0)
(66,2,0)
(50,46,0)
(48,19,0)
(7,82,0)
(22,72,0)
(23,10,0)
(2,9,0)
(13,9,0)
(90,34,0)
(33,82,0)
(51,25,0)
(56,26,0)
(29,13,0)
(14,63,0)
(16,22,0)
(91,53,0)
(11,71,0)
(31,33,0)
(79,27,0)
(27,38,0)
(17,72,0)
(76,20,0)
(25,84,0)
(53,91,1)
(83,90,1)
(73,38,1)
(90,58,1)
(38,34,1)
(38,61,1)
(33,82,1)
(18,6,1)
(60,58,1)
(64,26,1)
(81,44,1)
(34,83,1)
(69,34,1)
(60,25,1)
(31,53,1)
(29,30,1)
(75,56,1)
(55,36,1)
(78,38,1)
(0,29,1)
(70,82,1)
(85,10,1)
(26,67,1)
(56,25,1)
(76,88,1)
(62,10,1)
(10,23,1)
(13,82,1)
(60,63,1)
(70,52,1)
(27,2,1)
(77,51,1)
(84,49,1)
(5,49,1)
(41,71,1)
(14,13,1)
(89,11,1)
(34,9,1)
(32,43,1)
(26,82,1)
(43,81,1)
(59,70,1)
(7,57,1)
(49,82,1)
(82,80,1)
(34,82,1)
(32,62,1)
(61,27,1)
(63,14,1)
(49,24,1)
(91,60,1)
(39,55,1)
(67,59,1)
(58,71,1)
(20,82,1)
(80,68,1)
(13,9,1)
(24,74,1)
(50,33,1)
(58,41,1)
(6,59,1)
(51,59,1)
(73,78,1)
(82,7,1)
(52,40,1)
(25,84,1)
(88,82,1)
(38,27,1)
(9,20,1)
(20,76,1)
(71,9,1)
(13,0,1)
(60,48,1)
(2,66,1)
(10,46,1)
(57,80,1)
(36,50,1)
(71,89,1)
(40,73,1)
(74,45,1)
(68,47,1)
(86,62,1)
(27,79,1)
(2,9,1)
(84,5,1)
(23,46,1)
(15,73,1)
(67,65,1)
(65,75,1)
(44,86,1)
(24,59,1)
(33,31,1)
(46,39,1)
(45,77,1)
(30,15,1)
(48,64,1)
(62,85,1)
(25,51,1)
(51,18,1)
(11,9,1)
(66,69,1)
(75,25,2)
(48,25,2)
(56,25,2)
(73,58,2)
(27,2,2)
(30,73,2)
(81,62,2)
(25,51,2)
(2,9,2)
(86,62,2)
(9,20,2)
(49,82,2)
(43,62,2)
(45,51,2)
(13,9,2)
(38,27,2)
(14,73,2)
(38,58,2)
(44,62,2)
(82,80,2)
(34,82,2)
(33,82,2)
(84,49,2)
(83,58,2)
(90,58,2)
(65,25,2)
(66,58,2)
(73,38,2)
(46,39,2)
(61,58,2)
(49,24,2)
(78,58,2)
(2,58,2)
(63,73,2)
(13,73,2)
(0,73,2)
(25,84,2)
(25,73,2)
(10,46,2)
(70,82,2)
(69,58,2)
(70,73,2)
(18,73,2)
(71,9,2)
(15,73,2)
(62,10,2)
(20,82,2)
(59,70,2)
(49,51,2)
(51,59,2)
(29,73,2)
(26,67,2)
(67,59,2)
(58,71,2)
(24,59,2)
(74,51,2)
(24,51,2)
(52,73,2)
(59,73,2)
(26,82,2)
(6,73,2)
(77,51,2)
(27,79,2)
(5,51,2)
(84,51,2)
(27,58,2)
(40,73,2)
(64,25,2)
(51,73,2)
(13,82,2)
(26,25,2)
(34,9,2)
(67,25,2)
(34,58,2)
(38,34,2)
-----------------------------------
(0,dataLen)
(1,if (fgets(data+dataLen, (int)
(2,100-dataLen)
(3,if (SYSTEM(data)
(4,)
(5,\\\'\\\\n\\\')
(6,dataLen)
(7,data_buf)
(8,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(9,dataLen = strlen(data)
(10,SYSTEM(data)
(11,100)
(12,)
(13,data[dataLen])
(14,\\\'\\\\0\\\')
(15,"fgets()
(16,if (100-dataLen > 1)
(17,data)
(18,0)
(19,)
(20,strlen(data)
(21,myUnion)
(22,)
(23,data)
(24,dataLen-1)
(25,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(26,data[dataLen-1])
(27,(int)
(28,)
(29,data)
(30,printLine("fgets()
(31,data)
(32,RET)
(33,myUnion.unionFirst = data)
(34,data+dataLen)
(35,data_buf)
(36,myUnion)
(37,data)
(38,fgets(data+dataLen, (int)
(39,myUnion.unionSecond)
(40,dataLen)
(41,1)
(42,)
(43,exit(1)
(44,printLine("command execution failed!")
(45,dataLen)
(46,* data = myUnion.unionSecond)
(47,data_buf)
(48,data[dataLen-1] = \\\'\\\\0\\\')
(49,data[dataLen-1])
(50,data)
(51,dataLen > 0)
(52,data)
(53,myUnion.unionFirst)
(54,dataLen)
(55,unionSecond)
(56,data)
(57,data)
(58,100-dataLen > 1)
(59,dataLen = strlen(data)
(60,myUnion)
(61,stdin)
(62,SYSTEM(data)
(63,data[dataLen] = \\\'\\\\0\\\')
(64,\\\'\\\\0\\\')
(65,1)
(66,dataLen)
(67,dataLen-1)
(68,FULL_COMMAND)
(69,100)
(70,strlen(data)
(71,100-dataLen)
(72,)
(73,fgets(data+dataLen, (int)
(74,1)
(75,dataLen)
(76,data)
(77,data)
(78,NULL)
(79,int)
(80,data_buf[100] = FULL_COMMAND)
(81,1)
(82,data = data_buf)
(83,dataLen)
(84,data[dataLen-1] == \\\'\\\\n\\\')
(85,0)
(86,"command execution failed!")
(87,)
(88,dataLen)
(89,dataLen)
(90,data)
(91,unionFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
