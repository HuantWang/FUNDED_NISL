-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(33,40,0)
(27,25,0)
(54,63,0)
(21,47,0)
(19,23,0)
(9,3,0)
(25,27,0)
(40,33,0)
(59,10,0)
(20,63,0)
(13,44,0)
(49,0,0)
(48,19,0)
(52,21,0)
(30,21,0)
(2,36,0)
(22,63,0)
(8,19,0)
(0,46,0)
(45,0,0)
(23,42,0)
(19,46,0)
(12,3,0)
(55,22,0)
(18,10,0)
(0,59,0)
(34,10,0)
(2,42,0)
(9,22,0)
(34,57,0)
(36,2,0)
(41,10,0)
(1,63,0)
(57,24,0)
(63,21,0)
(56,29,0)
(32,50,0)
(31,9,0)
(42,23,0)
(43,23,0)
(9,33,0)
(37,20,0)
(62,36,0)
(39,25,0)
(11,18,0)
(63,54,0)
(20,33,0)
(7,6,0)
(33,20,0)
(34,63,0)
(44,24,0)
(58,34,0)
(53,42,0)
(46,50,0)
(41,46,0)
(15,7,0)
(17,46,0)
(3,9,0)
(16,20,0)
(33,9,0)
(23,10,0)
(59,0,0)
(61,57,0)
(26,36,0)
(23,19,0)
(5,41,0)
(22,9,0)
(46,41,0)
(59,7,0)
(38,18,0)
(28,59,0)
(36,46,0)
(35,27,0)
(51,22,0)
(60,34,0)
(42,2,0)
(54,10,0)
(27,63,0)
(14,54,0)
(22,10,0)
(18,47,0)
(4,27,0)
(18,11,1)
(22,63,1)
(0,45,1)
(13,3,1)
(23,19,1)
(31,33,1)
(19,48,1)
(42,53,1)
(14,1,1)
(37,16,1)
(20,63,1)
(58,44,1)
(9,33,1)
(53,23,1)
(38,18,1)
(57,61,1)
(33,20,1)
(22,51,1)
(39,27,1)
(0,46,1)
(34,63,1)
(43,36,1)
(59,0,1)
(49,28,1)
(44,13,1)
(35,4,1)
(33,40,1)
(59,10,1)
(27,35,1)
(55,25,1)
(3,12,1)
(36,62,1)
(41,10,1)
(36,46,1)
(9,22,1)
(5,17,1)
(18,10,1)
(28,2,1)
(23,10,1)
(4,63,1)
(11,25,1)
(51,55,1)
(3,9,1)
(11,2,1)
(20,37,1)
(17,3,1)
(8,43,1)
(54,10,1)
(22,10,1)
(25,39,1)
(2,42,1)
(7,15,1)
(62,26,1)
(11,7,1)
(16,22,1)
(45,49,1)
(60,58,1)
(54,14,1)
(61,34,1)
(48,8,1)
(15,59,1)
(63,54,1)
(11,57,1)
(27,63,1)
(19,46,1)
(41,5,1)
(34,10,1)
(34,60,1)
(2,36,1)
(9,31,1)
(46,41,1)
(42,23,1)
(12,9,1)
(26,46,1)
(25,27,1)
(22,10,2)
(31,25,2)
(57,3,2)
(55,25,2)
(34,10,2)
(43,36,2)
(27,63,2)
(42,23,2)
(46,3,2)
(41,10,2)
(9,22,2)
(53,36,2)
(41,3,2)
(42,36,2)
(62,3,2)
(19,36,2)
(38,18,2)
(58,3,2)
(13,3,2)
(7,2,2)
(17,3,2)
(26,3,2)
(28,2,2)
(36,46,2)
(37,25,2)
(59,0,2)
(54,10,2)
(5,3,2)
(0,2,2)
(0,46,2)
(36,3,2)
(2,36,2)
(16,25,2)
(44,3,2)
(18,10,2)
(51,25,2)
(59,10,2)
(15,2,2)
(59,2,2)
(22,25,2)
(3,9,2)
(34,63,2)
(2,42,2)
(46,41,2)
(25,27,2)
(33,20,2)
(34,3,2)
(63,54,2)
(23,10,2)
(33,40,2)
(8,36,2)
(23,36,2)
(49,2,2)
(12,25,2)
(3,25,2)
(33,25,2)
(2,3,2)
(19,46,2)
(22,63,2)
(61,3,2)
(9,25,2)
(23,19,2)
(20,63,2)
(48,36,2)
(45,2,2)
(9,33,2)
(20,25,2)
(60,3,2)
-----------------------------------
(0,dataLen-1)
(1,dataLen)
(2,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(3,fgets(data+dataLen, (int)
(4,100)
(5,data)
(6,)
(7,data[dataLen-1] = \\\'\\\\0\\\')
(8,dataLen)
(9,fgets(data+dataLen, (int)
(10,char * data)
(11,data)
(12,NULL)
(13,"fgets()
(14,data)
(15,\\\'\\\\0\\\')
(16,100)
(17,dataLen)
(18,return data;)
(19,dataLen-1)
(20,100-dataLen)
(21,)
(22,data+dataLen)
(23,data[dataLen-1])
(24,)
(25,100-dataLen > 1)
(26,dataLen)
(27,100-dataLen)
(28,data)
(29,)
(30,dataLen)
(31,stdin)
(32,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(33,(int)
(34,data[dataLen])
(35,dataLen)
(36,dataLen > 0)
(37,dataLen)
(38,RET)
(39,1)
(40,int)
(41,strlen(data)
(42,data[dataLen-1] == \\\'\\\\n\\\')
(43,data)
(44,printLine("fgets()
(45,1)
(46,dataLen = strlen(data)
(47,)
(48,1)
(49,dataLen)
(50,)
(51,dataLen)
(52,if (100-dataLen > 1)
(53,\\\'\\\\n\\\')
(54,strlen(data)
(55,data)
(56,if (fgets(data+dataLen, (int)
(57,data[dataLen] = \\\'\\\\0\\\')
(58,data)
(59,data[dataLen-1])
(60,dataLen)
(61,\\\'\\\\0\\\')
(62,0)
(63,dataLen = strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
