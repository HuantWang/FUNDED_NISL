-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_popen_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        char * data = *dataPtr1;
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            FILE *pipe;
            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
            pipe = POPEN(data, "w");
            if (pipe != NULL)
            {
                PCLOSE(pipe);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
94,97
94,98
95,96
97,98
97,99
98,99
100,101
102,103
104,105
104,106
105,106
105,107
107,108
110,111
111,112
111,113
112,113
113,114
115,116
117,118
117,119
118,119
119,120
119,121
121,122
121,123
121,124
124,125
125,126
126,127
128,129
128,130
128,131
129,130
130,131
130,132
131,132
133,134
133,135
136,137
137,138
137,139
138,139
140,141
140,142
140,143
141,142
143,144
146,147
146,148
147,148
147,149
148,149
150,151
152,153
153,154
154,155
154,156
155,156
157,158
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,76,78,79,83,85,89,91,96,99,101,103,106,108,109,114,116,120,122,123,127,132,134,135,139,142,144,145,149,151,156,158
-----computeFrom-----
45,46
45,47
87,88
87,89
97,98
97,99
104,105
104,106
105,106
105,107
111,112
111,113
137,138
137,139
147,148
147,149
-----guardedBy-----
89,103
149,158
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_popen_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
void
CWE78_OS_Command_Injection__char_environment_popen_32_bad()
CWE78_OS_Command_Injection__char_environment_popen_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)            {                PCLOSE(pipe);            }
pipe != NULL
pipe
pipe
NULL
NULL
{                PCLOSE(pipe);            }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(70,54,0)
(15,10,0)
(6,19,0)
(68,26,0)
(32,60,0)
(30,67,0)
(73,52,0)
(60,44,0)
(67,27,0)
(22,21,0)
(39,67,0)
(3,50,0)
(4,67,0)
(71,20,0)
(23,59,0)
(44,20,0)
(10,70,0)
(70,10,0)
(28,3,0)
(26,19,0)
(1,27,0)
(53,63,0)
(2,57,0)
(7,27,0)
(18,53,0)
(55,33,0)
(74,12,0)
(53,3,0)
(5,57,0)
(0,54,0)
(48,27,0)
(25,6,0)
(57,5,0)
(57,34,0)
(10,52,0)
(63,53,0)
(19,27,0)
(36,4,0)
(57,44,0)
(56,30,0)
(54,22,0)
(40,53,0)
(49,44,0)
(69,27,0)
(19,6,0)
(41,59,0)
(57,63,0)
(50,12,0)
(17,5,0)
(12,67,0)
(31,21,0)
(3,30,0)
(44,30,0)
(59,10,0)
(63,57,0)
(45,22,0)
(21,27,0)
(62,30,0)
(11,29,0)
(51,55,0)
(66,10,0)
(14,50,0)
(20,44,0)
(5,3,0)
(33,27,0)
(5,12,0)
(24,52,0)
(15,43,0)
(9,31,0)
(26,4,0)
(16,30,0)
(29,19,0)
(55,27,0)
(22,54,0)
(8,70,0)
(4,12,0)
(46,19,0)
(61,21,0)
(47,60,0)
(64,15,0)
(50,3,0)
(42,69,0)
(52,69,0)
(37,5,0)
(13,33,0)
(54,69,0)
(29,12,0)
(35,55,0)
(75,70,0)
(12,29,0)
(58,33,0)
(38,63,0)
(21,31,0)
(65,27,0)
(29,19,1)
(72,59,1)
(44,20,1)
(47,32,1)
(4,36,1)
(60,44,1)
(21,31,1)
(36,26,1)
(64,59,1)
(14,28,1)
(74,55,1)
(31,9,1)
(5,37,1)
(58,21,1)
(0,4,1)
(68,60,1)
(55,51,1)
(22,45,1)
(70,54,1)
(9,61,1)
(4,12,1)
(26,68,1)
(11,74,1)
(28,12,1)
(12,29,1)
(38,2,1)
(57,63,1)
(57,44,1)
(68,57,1)
(55,33,1)
(72,15,1)
(37,17,1)
(70,8,1)
(2,5,1)
(17,60,1)
(57,5,1)
(51,35,1)
(60,47,1)
(53,18,1)
(45,0,1)
(5,12,1)
(75,66,1)
(20,71,1)
(59,10,1)
(66,54,1)
(10,70,1)
(26,19,1)
(59,23,1)
(5,3,1)
(25,46,1)
(8,75,1)
(50,14,1)
(61,19,1)
(13,58,1)
(29,11,1)
(19,6,1)
(15,10,1)
(33,13,1)
(35,33,1)
(40,38,1)
(3,50,1)
(22,21,1)
(49,3,1)
(6,25,1)
(32,44,1)
(50,12,1)
(54,22,1)
(71,49,1)
(15,64,1)
(23,41,1)
(53,3,1)
(63,53,1)
(41,10,1)
(18,40,1)
(17,60,2)
(19,6,2)
(57,60,2)
(21,31,2)
(64,59,2)
(60,44,2)
(59,10,2)
(70,54,2)
(10,70,2)
(29,19,2)
(22,21,2)
(57,5,2)
(2,60,2)
(44,20,2)
(50,12,2)
(53,60,2)
(57,63,2)
(5,12,2)
(54,22,2)
(5,60,2)
(38,60,2)
(63,53,2)
(55,33,2)
(26,19,2)
(5,3,2)
(53,3,2)
(40,60,2)
(57,44,2)
(4,12,2)
(12,29,2)
(37,60,2)
(15,10,2)
(15,59,2)
(63,60,2)
(18,60,2)
(3,50,2)
-----------------------------------
(0,data)
(1,dataPtr1)
(2,environment)
(3,dataLen = strlen(data)
(4,*dataPtr1 = data)
(5,data+dataLen)
(6,&data)
(7,data)
(8,"w")
(9,data)
(10,pipe = POPEN(data, "w")
(11,dataPtr1)
(12,* data = *dataPtr1)
(13,FULL_COMMAND)
(14,data)
(15,PCLOSE(pipe)
(16,environment)
(17,data)
(18,1)
(19,* *dataPtr1 = &data)
(20,GETENV(ENV_VARIABLE)
(21,* *dataPtr2 = &data)
(22,*dataPtr2)
(23,NULL)
(24,pipe)
(25,data)
(26,*dataPtr1)
(27,)
(28,dataLen)
(29,*dataPtr1)
(30,)
(31,&data)
(32,environment)
(33,data_buf[100] = FULL_COMMAND)
(34,)
(35,data)
(36,data)
(37,dataLen)
(38,100)
(39,data)
(40,dataLen)
(41,pipe)
(42,data)
(43,)
(44,* environment = GETENV(ENV_VARIABLE)
(45,dataPtr2)
(46,dataPtr1)
(47,NULL)
(48,dataPtr2)
(49,environment)
(50,strlen(data)
(51,data_buf)
(52,)
(53,dataLen-1)
(54,* data = *dataPtr2)
(55,data = data_buf)
(56,dataLen)
(57,strncat(data+dataLen, environment, 100-dataLen-1)
(58,data_buf)
(59,pipe != NULL)
(60,environment != NULL)
(61,dataPtr2)
(62,if (environment != NULL)
(63,100-dataLen-1)
(64,pipe)
(65,data_buf)
(66,pipe)
(67,)
(68,dataPtr1)
(69,)
(70,POPEN(data, "w")
(71,ENV_VARIABLE)
(72,RET)
(73,if (pipe != NULL)
(74,data)
(75,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
