-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_execlp_01_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    /* execlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
75,78
75,79
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
87,88
88,89
88,90
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
117,120
117,121
117,122
117,123
118,119
120,121
122,123
124,125
126,127
128,129
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,51,53,54,59,62,64,65,69,71,77,80,82,85,86,89,91,93,95,100,101,106,108,109,113,115,119,121,123,125,127,129
-----computeFrom-----
23,24
23,25
49,50
49,51
50,51
50,52
57,58
57,59
67,68
67,69
74,75
74,76
78,79
78,80
88,89
88,90
103,104
103,105
-----guardedBy-----
53,108
71,95
69,115
80,106
91,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_execlp_01_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    /* execlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__char_file_execlp_01_bad()
CWE78_OS_Command_Injection__char_file_execlp_01_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    /* execlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECLP
EXECLP
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(18,59,0)
(43,39,0)
(23,25,0)
(30,39,0)
(58,53,0)
(12,14,0)
(44,6,0)
(48,23,0)
(15,48,0)
(56,48,0)
(20,62,0)
(9,4,0)
(54,25,0)
(29,13,0)
(20,23,0)
(61,23,0)
(36,49,0)
(2,33,0)
(29,53,0)
(19,15,0)
(44,33,0)
(32,14,0)
(44,16,0)
(42,29,0)
(34,6,0)
(4,9,0)
(13,29,0)
(27,49,0)
(41,49,0)
(45,6,0)
(8,62,0)
(62,46,0)
(15,59,0)
(23,39,0)
(33,44,0)
(33,15,0)
(7,9,0)
(51,23,0)
(50,59,0)
(10,49,0)
(4,15,0)
(1,32,0)
(45,23,0)
(6,35,0)
(20,15,0)
(59,39,0)
(24,20,0)
(22,25,0)
(55,59,0)
(45,15,0)
(26,20,0)
(28,60,0)
(25,39,0)
(31,13,0)
(6,45,0)
(6,29,0)
(48,15,0)
(17,46,0)
(6,44,0)
(38,45,0)
(47,33,0)
(16,44,0)
(60,29,0)
(35,6,0)
(32,29,0)
(11,35,0)
(3,13,0)
(21,45,0)
(40,4,0)
(57,49,0)
(52,60,0)
(5,4,0)
(49,39,0)
(37,17,0)
(60,29,1)
(0,49,1)
(21,38,1)
(54,22,1)
(56,19,1)
(45,23,1)
(2,45,1)
(57,36,1)
(13,3,1)
(6,44,1)
(1,62,1)
(60,52,1)
(40,5,1)
(20,24,1)
(9,7,1)
(6,29,1)
(9,4,1)
(27,9,1)
(8,20,1)
(45,21,1)
(31,42,1)
(44,16,1)
(19,23,1)
(17,37,1)
(20,15,1)
(33,47,1)
(25,54,1)
(6,34,1)
(27,32,1)
(28,29,1)
(49,41,1)
(15,48,1)
(26,17,1)
(24,26,1)
(32,29,1)
(38,60,1)
(5,15,1)
(3,31,1)
(51,25,1)
(6,45,1)
(47,2,1)
(4,40,1)
(35,11,1)
(23,61,1)
(33,15,1)
(11,6,1)
(45,15,1)
(34,44,1)
(29,13,1)
(4,15,1)
(1,35,1)
(36,27,1)
(48,23,1)
(7,4,1)
(44,33,1)
(62,8,1)
(48,56,1)
(52,28,1)
(41,10,1)
(37,35,1)
(42,9,1)
(20,23,1)
(61,51,1)
(23,25,1)
(27,60,1)
(32,1,1)
(35,6,1)
(10,57,1)
(6,45,2)
(29,13,2)
(20,23,2)
(62,35,2)
(3,9,2)
(9,4,2)
(6,60,2)
(35,6,2)
(52,9,2)
(33,60,2)
(20,35,2)
(21,60,2)
(60,9,2)
(2,60,2)
(11,60,2)
(32,60,2)
(37,35,2)
(60,29,2)
(4,15,2)
(8,35,2)
(28,9,2)
(45,23,2)
(29,9,2)
(45,60,2)
(13,9,2)
(23,25,2)
(44,16,2)
(26,35,2)
(6,44,2)
(38,60,2)
(17,35,2)
(31,9,2)
(15,48,2)
(24,35,2)
(47,60,2)
(45,15,2)
(6,29,2)
(1,60,2)
(32,29,2)
(44,60,2)
(33,15,2)
(35,60,2)
(48,23,2)
(42,9,2)
(34,60,2)
(20,15,2)
(44,33,2)
-----------------------------------
(0,RET)
(1,pFile)
(2,100)
(3,"r")
(4,100-dataLen)
(5,100)
(6,fgets(data+dataLen, (int)
(7,1)
(8,\\\'\\\\0\\\')
(9,100-dataLen > 1)
(10,COMMAND_ARG3)
(11,NULL)
(12,if (fgets(data+dataLen, (int)
(13,fopen(FILENAME, "r")
(14,)
(15,dataLen = strlen(data)
(16,int)
(17,printLine("fgets()
(18,pFile)
(19,dataLen)
(20,data[dataLen])
(21,dataLen)
(22,dataBuffer)
(23,data = dataBuffer)
(24,dataLen)
(25,dataBuffer[100] = COMMAND_ARG2)
(26,data)
(27,COMMAND_INT)
(28,pFile)
(29,pFile = fopen(FILENAME, "r")
(30,data)
(31,FILENAME)
(32,fclose(pFile)
(33,100-dataLen)
(34,pFile)
(35,fgets(data+dataLen, (int)
(36,COMMAND_INT)
(37,"fgets()
(38,data)
(39,)
(40,dataLen)
(41,NULL)
(42,pFile)
(43,dataBuffer)
(44,(int)
(45,data+dataLen)
(46,)
(47,dataLen)
(48,strlen(data)
(49,EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(50,if (100-dataLen > 1)
(51,data)
(52,NULL)
(53,)
(54,COMMAND_ARG2)
(55,dataLen)
(56,data)
(57,COMMAND_ARG1)
(58,if (pFile != NULL)
(59,)
(60,pFile != NULL)
(61,dataBuffer)
(62,data[dataLen] = \\\'\\\\0\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
