-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_41_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_popen_41_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_41_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_41_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_popen_41_bad()
CWE78_OS_Command_Injection__char_console_popen_41_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_41_badSink(data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_popen_41_badSink(data);
CWE78_OS_Command_Injection__char_console_popen_41_badSink(data)
CWE78_OS_Command_Injection__char_console_popen_41_badSink
CWE78_OS_Command_Injection__char_console_popen_41_badSink
data
data
-----joern-----
(62,36,0)
(25,29,0)
(26,8,0)
(17,41,0)
(0,18,0)
(11,60,0)
(30,60,0)
(20,60,0)
(32,65,0)
(8,10,0)
(6,50,0)
(19,22,0)
(21,25,0)
(36,29,0)
(24,38,0)
(38,31,0)
(68,6,0)
(68,23,0)
(65,3,0)
(65,32,0)
(60,30,0)
(60,20,0)
(15,29,0)
(12,17,0)
(66,38,0)
(70,32,0)
(9,51,0)
(6,36,0)
(28,31,0)
(51,48,0)
(41,6,0)
(27,18,0)
(69,52,0)
(54,29,0)
(1,59,0)
(44,50,0)
(41,17,0)
(10,52,0)
(39,59,0)
(33,68,0)
(47,16,0)
(3,65,0)
(38,10,0)
(40,56,0)
(42,68,0)
(31,19,0)
(68,25,0)
(64,10,0)
(18,25,0)
(25,56,0)
(61,41,0)
(32,18,0)
(23,48,0)
(57,43,0)
(4,30,0)
(16,32,0)
(20,43,0)
(18,32,0)
(59,65,0)
(58,56,0)
(8,30,0)
(5,36,0)
(56,29,0)
(43,20,0)
(30,8,0)
(65,59,0)
(18,6,0)
(14,10,0)
(45,19,0)
(50,25,0)
(31,38,0)
(34,25,0)
(31,25,0)
(54,25,0)
(37,64,0)
(7,41,0)
(13,35,0)
(50,6,0)
(10,64,0)
(43,10,0)
(59,6,0)
(64,25,0)
(49,29,0)
(67,54,0)
(32,16,0)
(55,23,0)
(46,43,0)
(53,8,0)
(30,25,0)
(63,6,0)
(47,32,1)
(38,24,1)
(18,0,1)
(20,60,1)
(43,10,1)
(6,50,1)
(67,17,1)
(53,26,1)
(20,43,1)
(25,56,1)
(60,30,1)
(8,53,1)
(67,19,1)
(32,70,1)
(41,61,1)
(65,59,1)
(0,27,1)
(65,3,1)
(41,6,1)
(32,18,1)
(59,39,1)
(64,37,1)
(51,9,1)
(31,38,1)
(59,6,1)
(17,41,1)
(57,10,1)
(37,14,1)
(28,20,1)
(10,64,1)
(50,44,1)
(25,21,1)
(61,7,1)
(63,25,1)
(4,43,1)
(34,56,1)
(44,63,1)
(54,67,1)
(67,20,1)
(1,18,1)
(54,25,1)
(18,6,1)
(14,16,1)
(17,12,1)
(42,51,1)
(40,58,1)
(8,10,1)
(7,6,1)
(60,11,1)
(32,65,1)
(2,54,1)
(67,23,1)
(55,68,1)
(68,33,1)
(45,31,1)
(16,47,1)
(9,16,1)
(38,10,1)
(11,30,1)
(43,46,1)
(56,40,1)
(12,41,1)
(24,66,1)
(31,25,1)
(30,8,1)
(70,65,1)
(16,32,1)
(19,45,1)
(21,34,1)
(66,28,1)
(26,4,1)
(39,1,1)
(46,57,1)
(68,6,1)
(18,25,1)
(50,25,1)
(23,55,1)
(27,17,1)
(33,42,1)
(68,25,1)
(30,25,1)
(64,25,1)
(39,17,2)
(16,32,2)
(65,59,2)
(11,43,2)
(64,25,2)
(20,60,2)
(20,43,2)
(16,17,2)
(33,16,2)
(59,6,2)
(60,43,2)
(19,20,2)
(8,43,2)
(57,16,2)
(64,16,2)
(68,25,2)
(18,6,2)
(60,30,2)
(42,16,2)
(26,43,2)
(25,56,2)
(55,16,2)
(6,50,2)
(23,16,2)
(31,20,2)
(46,16,2)
(30,25,2)
(53,43,2)
(45,20,2)
(65,3,2)
(14,16,2)
(28,20,2)
(37,16,2)
(8,10,2)
(1,17,2)
(38,10,2)
(43,16,2)
(31,38,2)
(30,8,2)
(32,18,2)
(70,17,2)
(50,25,2)
(18,25,2)
(32,17,2)
(51,16,2)
(47,17,2)
(17,41,2)
(9,16,2)
(10,64,2)
(30,43,2)
(65,17,2)
(18,17,2)
(0,17,2)
(4,43,2)
(66,20,2)
(20,16,2)
(68,16,2)
(32,65,2)
(38,20,2)
(41,6,2)
(24,20,2)
(31,25,2)
(59,17,2)
(68,6,2)
(10,16,2)
(43,10,2)
(27,17,2)
(54,25,2)
-----------------------------------
(0,dataLen)
(1,100)
(2,RET)
(3,int)
(4,data)
(5,if (100-dataLen > 1)
(6,dataLen = strlen(data)
(7,100)
(8,dataLen-1)
(9,"fgets()
(10,dataLen = strlen(data)
(11,\\\'\\\\n\\\')
(12,1)
(13,if (fgets(data+dataLen, (int)
(14,dataLen)
(15,data)
(16,fgets(data+dataLen, (int)
(17,100-dataLen > 1)
(18,data+dataLen)
(19,data[dataLen-1] = \\\'\\\\0\\\')
(20,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(21,data_buf)
(22,)
(23,data[dataLen] = \\\'\\\\0\\\')
(24,1)
(25,data = data_buf)
(26,dataLen)
(27,data)
(28,data)
(29,)
(30,data[dataLen-1])
(31,data[dataLen-1])
(32,fgets(data+dataLen, (int)
(33,dataLen)
(34,data)
(35,)
(36,)
(37,data)
(38,dataLen-1)
(39,dataLen)
(40,FULL_COMMAND)
(41,100-dataLen)
(42,data)
(43,dataLen > 0)
(44,data)
(45,\\\'\\\\0\\\')
(46,0)
(47,NULL)
(48,)
(49,data_buf)
(50,strlen(data)
(51,printLine("fgets()
(52,)
(53,1)
(54,CWE78_OS_Command_Injection__char_console_popen_41_badSink(data)
(55,\\\'\\\\0\\\')
(56,data_buf[100] = FULL_COMMAND)
(57,dataLen)
(58,data_buf)
(59,100-dataLen)
(60,data[dataLen-1] == \\\'\\\\n\\\')
(61,dataLen)
(62,dataLen)
(63,dataLen)
(64,strlen(data)
(65,(int)
(66,dataLen)
(67,data)
(68,data[dataLen])
(69,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(70,stdin)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
