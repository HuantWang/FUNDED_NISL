-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    /* FIX: Append a fixed string to data (not user / external input) */
    strcat(data, "*.*");
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            FILE *pipe;
            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
            pipe = POPEN(data, "w");
            if (pipe != NULL)
            {
                PCLOSE(pipe);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
35,38
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
54,55
54,56
54,57
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,38,40,41,44,47,49,50,53,58,60,61,65,68,70,71,75,77,82,84
-----computeFrom-----
23,24
23,25
63,64
63,65
73,74
73,75
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char * dataCopy = data;        char * data = dataCopy;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
static void
goodG2B()
goodG2B
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char * dataCopy = data;        char * data = dataCopy;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char * dataCopy = data;        char * data = dataCopy;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)            {                PCLOSE(pipe);            }
pipe != NULL
pipe
pipe
NULL
NULL
{                PCLOSE(pipe);            }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(0,19,0)
(11,19,0)
(27,19,0)
(30,19,0)
(6,4,0)
(7,4,0)
(1,2,0)
(35,2,0)
(20,5,0)
(20,31,0)
(27,11,0)
(10,5,0)
(25,26,0)
(23,12,0)
(9,35,0)
(32,20,0)
(16,9,0)
(26,20,0)
(4,27,0)
(29,27,0)
(24,31,0)
(33,20,0)
(21,35,0)
(5,31,0)
(11,20,0)
(8,11,0)
(19,31,0)
(28,12,0)
(34,26,0)
(2,19,0)
(12,35,0)
(15,27,0)
(22,11,0)
(26,31,0)
(4,35,0)
(35,4,0)
(3,31,0)
(9,13,0)
(14,5,0)
(17,2,0)
(4,27,1)
(6,7,1)
(14,10,1)
(11,8,1)
(12,28,1)
(23,35,1)
(34,25,1)
(15,11,1)
(26,34,1)
(12,35,1)
(8,22,1)
(25,20,1)
(18,12,1)
(32,5,1)
(7,21,1)
(18,9,1)
(26,20,1)
(20,33,1)
(11,20,1)
(5,14,1)
(29,15,1)
(35,4,1)
(16,12,1)
(22,26,1)
(9,35,1)
(9,16,1)
(27,11,1)
(33,32,1)
(21,27,1)
(27,29,1)
(28,23,1)
(4,6,1)
(20,5,1)
(9,12,2)
(9,35,2)
(4,27,2)
(16,12,2)
(11,20,2)
(26,20,2)
(20,5,2)
(12,35,2)
(35,4,2)
(27,11,2)
-----------------------------------
(0,dataCopy)
(1,if (pipe != NULL)
(2,)
(3,data)
(4,POPEN(data, "w")
(5,data_buf[100] = FULL_COMMAND)
(6,"w")
(7,data)
(8,data)
(9,PCLOSE(pipe)
(10,data_buf)
(11,* dataCopy = data)
(12,pipe != NULL)
(13,)
(14,FULL_COMMAND)
(15,data)
(16,pipe)
(17,pipe)
(18,RET)
(19,)
(20,data = data_buf)
(21,pipe)
(22,dataCopy)
(23,pipe)
(24,data_buf)
(25,data)
(26,strcat(data, "*.*")
(27,* data = dataCopy)
(28,NULL)
(29,dataCopy)
(30,data)
(31,)
(32,data)
(33,data_buf)
(34,"*.*")
(35,pipe = POPEN(data, "w")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
