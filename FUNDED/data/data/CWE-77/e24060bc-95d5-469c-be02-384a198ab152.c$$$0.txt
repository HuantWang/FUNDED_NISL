-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
29,31
32,33
33,34
34,35
34,36
35,36
38,39
39,40
40,41
40,42
40,43
41,42
43,44
46,47
46,48
47,48
47,49
48,49
48,50
49,50
51,52
54,55
54,56
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,31,36,37,42,44,45,50,52,53,58,59,63,64
-----computeFrom-----
23,24
23,25
29,30
29,31
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(0,14,0)
(4,1,0)
(20,22,0)
(20,26,0)
(24,8,0)
(29,1,0)
(18,19,0)
(28,0,0)
(14,0,0)
(16,15,0)
(14,26,0)
(9,18,0)
(13,1,0)
(2,26,0)
(15,3,0)
(26,1,0)
(23,20,0)
(8,19,0)
(30,1,0)
(12,6,0)
(5,20,0)
(17,26,0)
(25,30,0)
(7,1,0)
(21,14,0)
(26,30,0)
(27,30,0)
(10,6,0)
(26,30,1)
(8,24,1)
(14,26,1)
(10,26,1)
(21,20,1)
(15,16,1)
(5,23,1)
(17,2,1)
(11,0,1)
(9,8,1)
(30,27,1)
(20,26,1)
(14,21,1)
(6,12,1)
(28,14,1)
(0,14,1)
(11,18,1)
(21,15,1)
(18,9,1)
(27,25,1)
(20,5,1)
(26,17,1)
(0,28,1)
(16,6,1)
(24,0,1)
(2,30,1)
(23,6,1)
(12,10,1)
(15,6,2)
(23,6,2)
(26,30,2)
(20,26,2)
(20,6,2)
(8,0,2)
(24,0,2)
(0,14,2)
(16,6,2)
(14,26,2)
(9,0,2)
(18,0,2)
(5,6,2)
-----------------------------------
(0,SYSTEM(data)
(1,)
(2,data)
(3,)
(4,data_buf)
(5,"*.*")
(6,5!=5)
(7,data)
(8,printLine("command execution failed!")
(9,1)
(10,5)
(11,RET)
(12,5)
(13,if (SYSTEM(data)
(14,SYSTEM(data)
(15,printLine("Benign, fixed string")
(16,"Benign, fixed string")
(17,data_buf)
(18,exit(1)
(19,)
(20,strcat(data, "*.*")
(21,data)
(22,)
(23,data)
(24,"command execution failed!")
(25,data_buf)
(26,data = data_buf)
(27,FULL_COMMAND)
(28,0)
(29,if(5!=5)
(30,data_buf[100] = FULL_COMMAND)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
