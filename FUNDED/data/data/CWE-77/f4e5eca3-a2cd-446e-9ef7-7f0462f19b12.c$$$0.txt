-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    while(1)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
        break;
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnvp(_P_WAIT, COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
31,32
32,33
32,34
32,35
33,34
35,36
39,40
39,41
40,41
41,42
41,43
43,44
43,45
43,46
43,47
47,48
48,49
48,50
48,51
48,52
49,50
51,52
53,54
55,56
57,58
58,59
58,60
58,61
58,62
59,60
61,62
63,64
65,66
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,36,37,38,42,44,45,46,50,52,54,56,60,62,64,66
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    while(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    while(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
while(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }
1
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
break;
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnvp(_P_WAIT, COMMAND_INT, args);
_spawnvp(_P_WAIT, COMMAND_INT, args)
_spawnvp
_spawnvp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(8,4,0)
(1,22,0)
(24,11,0)
(10,3,0)
(2,3,0)
(17,3,0)
(10,15,0)
(22,11,0)
(21,3,0)
(7,6,0)
(4,21,0)
(18,21,0)
(23,4,0)
(6,21,0)
(12,3,0)
(5,4,0)
(15,3,0)
(20,10,0)
(9,15,0)
(13,22,0)
(14,15,0)
(4,6,0)
(22,10,0)
(19,10,0)
(6,7,1)
(4,6,1)
(7,16,1)
(13,1,1)
(9,14,1)
(19,15,1)
(0,4,1)
(24,22,1)
(23,8,1)
(16,10,1)
(20,19,1)
(22,13,1)
(5,6,1)
(8,5,1)
(4,23,1)
(7,24,1)
(10,15,1)
(1,16,1)
(10,20,1)
(15,9,1)
(22,10,1)
(13,16,2)
(22,16,2)
(10,15,2)
(1,16,2)
(22,10,2)
(24,16,2)
(4,6,2)
-----------------------------------
(0,RET)
(1,data)
(2,data)
(3,)
(4,_spawnvp(_P_WAIT, COMMAND_INT, args)
(5,_P_WAIT)
(6,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(7,args)
(8,COMMAND_INT)
(9,COMMAND_ARG2)
(10,data = dataBuffer)
(11,)
(12,dataBuffer)
(13,"*.*")
(14,dataBuffer)
(15,dataBuffer[100] = COMMAND_ARG2)
(16,1)
(17,while(1)
(18,args)
(19,data)
(20,dataBuffer)
(21,)
(22,strcat(data, "*.*")
(23,args)
(24,break;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
