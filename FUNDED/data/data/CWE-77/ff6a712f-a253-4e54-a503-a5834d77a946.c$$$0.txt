-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execlp_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execlp_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execlp_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_execlp_45_bad()
CWE78_OS_Command_Injection__char_console_execlp_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execlp_45_badData = data;
CWE78_OS_Command_Injection__char_console_execlp_45_badData = data
CWE78_OS_Command_Injection__char_console_execlp_45_badData
CWE78_OS_Command_Injection__char_console_execlp_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(33,3,0)
(59,67,0)
(15,66,0)
(63,27,0)
(20,57,0)
(62,9,0)
(70,40,0)
(2,58,0)
(31,42,0)
(9,48,0)
(19,24,0)
(25,24,0)
(60,5,0)
(5,70,0)
(14,9,0)
(6,11,0)
(29,40,0)
(23,27,0)
(54,43,0)
(13,10,0)
(47,11,0)
(42,11,0)
(40,69,0)
(28,21,0)
(9,57,0)
(55,14,0)
(27,64,0)
(24,9,0)
(1,8,0)
(21,52,0)
(24,27,0)
(4,64,0)
(48,27,0)
(58,42,0)
(5,9,0)
(64,3,0)
(34,5,0)
(10,27,0)
(41,43,0)
(70,71,0)
(67,41,0)
(53,3,0)
(43,56,0)
(10,2,0)
(48,9,0)
(37,27,0)
(44,3,0)
(16,69,0)
(69,40,0)
(36,62,0)
(41,27,0)
(10,66,0)
(14,40,0)
(67,11,0)
(50,49,0)
(8,62,0)
(35,37,0)
(24,18,0)
(57,3,0)
(72,6,0)
(61,66,0)
(66,11,0)
(66,10,0)
(65,64,0)
(40,14,0)
(26,37,0)
(71,70,0)
(40,70,0)
(45,42,0)
(12,9,0)
(14,27,0)
(32,30,0)
(51,57,0)
(0,41,0)
(2,10,0)
(46,14,0)
(22,62,0)
(11,6,0)
(18,52,0)
(42,58,0)
(41,67,0)
(11,30,0)
(7,18,0)
(70,5,0)
(62,8,0)
(39,2,0)
(27,3,0)
(17,48,0)
(37,3,0)
(6,27,0)
(68,67,0)
(58,2,0)
(29,70,1)
(21,28,1)
(8,62,1)
(58,42,1)
(55,46,1)
(58,2,1)
(2,10,1)
(5,9,1)
(6,72,1)
(26,43,1)
(46,8,1)
(67,68,1)
(23,64,1)
(42,31,1)
(40,14,1)
(70,5,1)
(12,27,1)
(65,4,1)
(22,9,1)
(14,55,1)
(31,45,1)
(66,11,1)
(18,7,1)
(9,48,1)
(10,66,1)
(68,59,1)
(37,35,1)
(28,69,1)
(47,69,1)
(27,63,1)
(35,26,1)
(44,37,1)
(34,60,1)
(63,23,1)
(38,44,1)
(13,42,1)
(17,12,1)
(1,62,1)
(39,10,1)
(11,6,1)
(40,70,1)
(25,21,1)
(45,11,1)
(70,71,1)
(41,67,1)
(26,18,1)
(8,1,1)
(26,58,1)
(69,16,1)
(43,54,1)
(62,36,1)
(72,47,1)
(6,27,1)
(27,64,1)
(10,27,1)
(36,22,1)
(41,27,1)
(67,11,1)
(7,24,1)
(2,39,1)
(26,8,1)
(24,27,1)
(62,9,1)
(48,27,1)
(5,34,1)
(14,9,1)
(61,15,1)
(24,19,1)
(66,61,1)
(48,17,1)
(40,29,1)
(19,25,1)
(42,11,1)
(24,9,1)
(69,40,1)
(14,27,1)
(54,41,1)
(0,58,1)
(16,40,1)
(15,13,1)
(64,65,1)
(60,14,1)
(59,0,1)
(37,27,1)
(0,58,2)
(24,27,2)
(11,69,2)
(70,5,2)
(14,9,2)
(41,27,2)
(19,69,2)
(31,69,2)
(2,42,2)
(18,69,2)
(34,8,2)
(8,62,2)
(28,69,2)
(67,11,2)
(46,8,2)
(62,9,2)
(72,69,2)
(67,58,2)
(70,8,2)
(6,69,2)
(66,11,2)
(69,8,2)
(40,14,2)
(61,42,2)
(2,10,2)
(58,2,2)
(58,69,2)
(10,27,2)
(40,70,2)
(27,64,2)
(54,58,2)
(43,58,2)
(66,42,2)
(25,69,2)
(10,66,2)
(45,69,2)
(9,48,2)
(13,42,2)
(16,8,2)
(29,8,2)
(69,40,2)
(58,42,2)
(68,58,2)
(7,69,2)
(42,11,2)
(59,58,2)
(6,27,2)
(5,8,2)
(39,42,2)
(21,69,2)
(41,58,2)
(15,42,2)
(5,9,2)
(70,71,2)
(41,67,2)
(24,69,2)
(42,69,2)
(55,8,2)
(10,42,2)
(48,27,2)
(14,8,2)
(40,8,2)
(47,69,2)
(11,6,2)
(37,27,2)
(60,8,2)
(14,27,2)
(24,9,2)
-----------------------------------
(0,data)
(1,1)
(2,data[dataLen-1] == \\\'\\\\n\\\')
(3,)
(4,dataBuffer)
(5,100-dataLen)
(6,strlen(data)
(7,\\\'\\\\0\\\')
(8,100-dataLen > 1)
(9,dataLen = strlen(data)
(10,data[dataLen-1])
(11,dataLen = strlen(data)
(12,dataLen)
(13,data)
(14,data+dataLen)
(15,dataLen)
(16,NULL)
(17,data)
(18,data[dataLen] = \\\'\\\\0\\\')
(19,dataLen)
(20,if (100-dataLen > 1)
(21,printLine("fgets()
(22,100)
(23,data)
(24,data[dataLen])
(25,data)
(26,CWE78_OS_Command_Injection__char_console_execlp_45_badData)
(27,data = dataBuffer)
(28,"fgets()
(29,stdin)
(30,)
(31,0)
(32,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(33,data)
(34,dataLen)
(35,data)
(36,dataLen)
(37,CWE78_OS_Command_Injection__char_console_execlp_45_badData = data)
(38,RET)
(39,\\\'\\\\n\\\')
(40,fgets(data+dataLen, (int)
(41,data[dataLen-1])
(42,dataLen > 0)
(43,data[dataLen-1] = \\\'\\\\0\\\')
(44,badSink()
(45,dataLen)
(46,data)
(47,dataLen)
(48,strlen(data)
(49,)
(50,if (fgets(data+dataLen, (int)
(51,dataLen)
(52,)
(53,dataBuffer)
(54,\\\'\\\\0\\\')
(55,dataLen)
(56,)
(57,)
(58,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,dataLen)
(60,100)
(61,1)
(62,100-dataLen)
(63,dataBuffer)
(64,dataBuffer[100] = COMMAND_ARG2)
(65,COMMAND_ARG2)
(66,dataLen-1)
(67,dataLen-1)
(68,1)
(69,fgets(data+dataLen, (int)
(70,(int)
(71,int)
(72,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
