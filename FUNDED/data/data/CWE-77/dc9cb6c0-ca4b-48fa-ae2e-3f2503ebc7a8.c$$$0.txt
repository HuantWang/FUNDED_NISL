-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* execl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
55,58
55,59
55,60
55,61
56,57
58,59
60,61
62,63
64,65
66,67
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,57,59,61,63,65,67
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* execl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B()
goodG2B
{    int h;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* execl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
int h;
int h;
int
h
h
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(3,18,0)
(14,22,0)
(0,22,0)
(12,24,0)
(5,22,0)
(21,22,0)
(4,1,0)
(22,18,0)
(11,1,0)
(6,11,0)
(8,3,0)
(29,22,0)
(1,3,0)
(28,12,0)
(10,12,0)
(1,18,0)
(17,20,0)
(2,18,0)
(20,24,0)
(25,3,0)
(7,24,0)
(23,18,0)
(11,27,0)
(16,24,0)
(13,18,0)
(15,18,0)
(9,1,0)
(26,11,0)
(28,20,1)
(19,22,1)
(0,14,1)
(24,7,1)
(4,9,1)
(7,16,1)
(3,8,1)
(14,21,1)
(22,29,1)
(5,0,1)
(17,11,1)
(12,10,1)
(20,24,1)
(12,24,1)
(1,3,1)
(26,12,1)
(20,17,1)
(21,12,1)
(9,3,1)
(16,1,1)
(1,4,1)
(10,28,1)
(11,6,1)
(28,24,1)
(6,26,1)
(29,5,1)
(8,25,1)
(11,1,1)
(20,12,2)
(12,12,2)
(6,12,2)
(11,12,2)
(10,12,2)
(12,24,2)
(26,12,2)
(17,12,2)
(28,12,2)
(11,1,2)
(20,24,2)
(1,3,2)
-----------------------------------
(0,COMMAND_ARG1)
(1,data = dataBuffer)
(2,for(h = 0; h < 1; h++)
(3,dataBuffer[100] = COMMAND_ARG2)
(4,dataBuffer)
(5,COMMAND_ARG3)
(6,"*.*")
(7,0)
(8,COMMAND_ARG2)
(9,data)
(10,1)
(11,strcat(data, "*.*")
(12,h < 1)
(13,data)
(14,COMMAND_INT_PATH)
(15,dataBuffer)
(16,h)
(17,h)
(18,)
(19,RET)
(20,h++)
(21,COMMAND_INT_PATH)
(22,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(23,h)
(24,h = 0)
(25,dataBuffer)
(26,data)
(27,)
(28,h)
(29,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
