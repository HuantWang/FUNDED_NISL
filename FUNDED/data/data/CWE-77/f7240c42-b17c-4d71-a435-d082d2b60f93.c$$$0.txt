-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
30,31
31,32
32,33
32,34
33,34
36,37
37,38
38,39
38,40
38,41
39,40
41,42
44,45
44,46
45,46
45,47
46,47
46,48
47,48
49,50
52,53
52,54
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,35,40,42,43,48,50,51,56,57,61,62
-----computeFrom-----
23,24
23,25
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(17,20,0)
(10,11,0)
(28,11,0)
(15,4,0)
(14,4,0)
(23,22,0)
(24,25,0)
(21,16,0)
(8,26,0)
(12,21,0)
(27,22,0)
(20,22,0)
(2,11,0)
(21,11,0)
(11,20,0)
(3,20,0)
(25,28,0)
(1,22,0)
(11,22,0)
(13,22,0)
(28,25,0)
(9,28,0)
(18,21,0)
(19,15,0)
(26,0,0)
(6,14,0)
(11,10,1)
(14,6,1)
(26,8,1)
(6,25,1)
(18,12,1)
(17,3,1)
(5,15,1)
(12,7,1)
(9,21,1)
(10,2,1)
(8,7,1)
(25,28,1)
(28,11,1)
(15,19,1)
(21,11,1)
(24,28,1)
(11,20,1)
(20,17,1)
(21,18,1)
(19,14,1)
(5,25,1)
(9,26,1)
(25,24,1)
(7,11,1)
(28,9,1)
(2,20,1)
(28,11,2)
(25,28,2)
(21,7,2)
(18,7,2)
(6,25,2)
(12,7,2)
(21,11,2)
(15,25,2)
(26,7,2)
(8,7,2)
(14,25,2)
(19,25,2)
(11,20,2)
-----------------------------------
(0,)
(1,if (SYSTEM(data)
(2,data)
(3,data_buf)
(4,)
(5,RET)
(6,"command execution failed!")
(7,0)
(8,"Benign, fixed string")
(9,data)
(10,data_buf)
(11,data = data_buf)
(12,data)
(13,data_buf)
(14,printLine("command execution failed!")
(15,exit(1)
(16,)
(17,FULL_COMMAND)
(18,"*.*")
(19,1)
(20,data_buf[100] = FULL_COMMAND)
(21,strcat(data, "*.*")
(22,)
(23,if(0)
(24,0)
(25,SYSTEM(data)
(26,printLine("Benign, fixed string")
(27,data)
(28,SYSTEM(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
