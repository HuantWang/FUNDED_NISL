-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execv_51_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execv_51b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execv_51_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_51b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_execv_51_bad()
CWE78_OS_Command_Injection__char_console_w32_execv_51_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_51b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execv_51b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_execv_51b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_execv_51b_badSink
CWE78_OS_Command_Injection__char_console_w32_execv_51b_badSink
data
data
-----joern-----
(68,48,0)
(29,45,0)
(60,47,0)
(63,31,0)
(50,31,0)
(56,59,0)
(5,60,0)
(36,28,0)
(69,59,0)
(12,65,0)
(7,45,0)
(67,30,0)
(40,58,0)
(20,39,0)
(34,27,0)
(13,23,0)
(35,0,0)
(18,30,0)
(48,44,0)
(58,30,0)
(48,38,0)
(13,7,0)
(54,65,0)
(32,14,0)
(56,14,0)
(33,23,0)
(8,7,0)
(7,13,0)
(28,45,0)
(26,51,0)
(39,45,0)
(15,28,0)
(55,10,0)
(59,69,0)
(25,23,0)
(37,39,0)
(43,44,0)
(16,33,0)
(13,27,0)
(24,12,0)
(19,25,0)
(38,48,0)
(44,39,0)
(21,50,0)
(3,53,0)
(17,25,0)
(4,61,0)
(66,67,0)
(41,65,0)
(23,12,0)
(23,65,0)
(11,23,0)
(53,23,0)
(9,23,0)
(62,58,0)
(44,48,0)
(57,7,0)
(56,53,0)
(2,54,0)
(52,54,0)
(1,13,0)
(31,50,0)
(61,23,0)
(28,38,0)
(42,56,0)
(27,46,0)
(44,23,0)
(30,67,0)
(53,56,0)
(67,23,0)
(58,59,0)
(70,12,0)
(53,30,0)
(59,56,0)
(25,30,0)
(59,58,0)
(51,47,0)
(39,44,0)
(30,54,0)
(38,28,0)
(45,33,0)
(61,65,0)
(31,30,0)
(45,0,0)
(14,56,0)
(49,31,0)
(6,65,0)
(64,53,0)
(25,60,0)
(33,45,0)
(12,24,1)
(11,12,1)
(20,37,1)
(51,26,1)
(50,31,1)
(23,12,1)
(60,5,1)
(50,21,1)
(33,16,1)
(38,28,1)
(59,69,1)
(68,44,1)
(14,56,1)
(25,23,1)
(48,68,1)
(64,3,1)
(56,53,1)
(37,43,1)
(44,39,1)
(53,64,1)
(61,4,1)
(5,25,1)
(13,23,1)
(7,45,1)
(57,8,1)
(22,61,1)
(4,50,1)
(40,53,1)
(19,51,1)
(25,30,1)
(17,19,1)
(4,27,1)
(44,23,1)
(15,45,1)
(9,11,1)
(3,50,1)
(4,60,1)
(53,30,1)
(49,30,1)
(31,30,1)
(63,49,1)
(25,17,1)
(58,62,1)
(45,33,1)
(33,23,1)
(61,23,1)
(56,59,1)
(62,40,1)
(67,66,1)
(8,1,1)
(42,59,1)
(31,63,1)
(27,34,1)
(38,48,1)
(34,13,1)
(48,44,1)
(39,20,1)
(59,58,1)
(43,28,1)
(30,67,1)
(13,7,1)
(67,23,1)
(7,57,1)
(56,42,1)
(53,23,1)
(29,14,1)
(14,32,1)
(21,31,1)
(18,23,1)
(4,38,1)
(16,29,1)
(66,18,1)
(39,45,1)
(23,9,1)
(28,36,1)
(1,38,1)
(26,14,1)
(32,56,1)
(36,15,1)
(28,45,1)
(58,30,1)
(24,70,1)
(64,50,2)
(56,59,2)
(45,14,2)
(28,45,2)
(38,48,2)
(13,7,2)
(53,50,2)
(15,14,2)
(53,23,2)
(48,44,2)
(33,14,2)
(25,30,2)
(60,14,2)
(59,69,2)
(13,23,2)
(51,14,2)
(37,28,2)
(27,38,2)
(56,53,2)
(25,23,2)
(57,38,2)
(32,50,2)
(38,28,2)
(20,28,2)
(44,39,2)
(33,23,2)
(13,38,2)
(45,33,2)
(23,12,2)
(30,67,2)
(34,38,2)
(28,14,2)
(42,50,2)
(14,50,2)
(44,28,2)
(59,50,2)
(38,14,2)
(36,14,2)
(19,14,2)
(7,45,2)
(40,50,2)
(14,56,2)
(3,50,2)
(53,30,2)
(61,23,2)
(39,28,2)
(39,45,2)
(26,14,2)
(67,23,2)
(58,30,2)
(1,38,2)
(44,23,2)
(58,50,2)
(48,28,2)
(31,30,2)
(50,31,2)
(5,14,2)
(25,14,2)
(17,14,2)
(68,28,2)
(62,50,2)
(43,28,2)
(29,14,2)
(56,50,2)
(16,14,2)
(59,58,2)
(8,38,2)
(7,38,2)
-----------------------------------
(0,)
(1,data)
(2,if (100-dataLen > 1)
(3,data)
(4,data)
(5,\\\'\\\\0\\\')
(6,dataBuffer)
(7,dataLen-1)
(8,dataLen)
(9,dataBuffer)
(10,)
(11,data)
(12,dataBuffer[100] = COMMAND_ARG2)
(13,data[dataLen-1])
(14,fgets(data+dataLen, (int)
(15,dataLen)
(16,data)
(17,dataLen)
(18,dataLen)
(19,data)
(20,1)
(21,1)
(22,RET)
(23,data = dataBuffer)
(24,COMMAND_ARG2)
(25,data[dataLen])
(26,"fgets()
(27,data[dataLen-1] = \\\'\\\\0\\\')
(28,dataLen > 0)
(29,dataLen)
(30,dataLen = strlen(data)
(31,100-dataLen)
(32,NULL)
(33,strlen(data)
(34,\\\'\\\\0\\\')
(35,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(36,0)
(37,dataLen)
(38,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(39,dataLen-1)
(40,100)
(41,data)
(42,stdin)
(43,data)
(44,data[dataLen-1])
(45,dataLen = strlen(data)
(46,)
(47,)
(48,data[dataLen-1] == \\\'\\\\n\\\')
(49,100)
(50,100-dataLen > 1)
(51,printLine("fgets()
(52,dataLen)
(53,data+dataLen)
(54,)
(55,if (fgets(data+dataLen, (int)
(56,fgets(data+dataLen, (int)
(57,1)
(58,100-dataLen)
(59,(int)
(60,data[dataLen] = \\\'\\\\0\\\')
(61,CWE78_OS_Command_Injection__char_console_w32_execv_51b_badSink(data)
(62,dataLen)
(63,dataLen)
(64,dataLen)
(65,)
(66,data)
(67,strlen(data)
(68,\\\'\\\\n\\\')
(69,int)
(70,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
