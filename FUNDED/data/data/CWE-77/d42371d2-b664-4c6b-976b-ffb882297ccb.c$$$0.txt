-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal
CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(0,36,0)
(27,56,0)
(43,32,0)
(29,65,0)
(56,6,0)
(54,42,0)
(6,61,0)
(24,60,0)
(35,36,0)
(65,28,0)
(13,8,0)
(50,59,0)
(42,6,0)
(44,31,0)
(19,22,0)
(42,44,0)
(34,43,0)
(33,23,0)
(16,29,0)
(23,36,0)
(65,17,0)
(2,12,0)
(21,41,0)
(59,6,0)
(23,33,0)
(59,9,0)
(6,64,0)
(51,0,0)
(12,6,0)
(28,65,0)
(30,29,0)
(18,44,0)
(29,35,0)
(23,41,0)
(57,23,0)
(63,28,0)
(64,36,0)
(66,56,0)
(66,9,0)
(25,47,0)
(41,40,0)
(35,8,0)
(53,12,0)
(49,53,0)
(14,61,0)
(37,61,0)
(39,6,0)
(22,66,0)
(12,53,0)
(66,22,0)
(55,35,0)
(56,36,0)
(9,15,0)
(61,58,0)
(32,43,0)
(10,0,0)
(11,31,0)
(3,17,0)
(56,66,0)
(48,64,0)
(33,65,0)
(8,35,0)
(64,6,0)
(8,32,0)
(45,59,0)
(5,66,0)
(9,59,0)
(38,33,0)
(28,36,0)
(42,36,0)
(35,29,0)
(15,9,0)
(32,8,0)
(46,56,0)
(20,42,0)
(0,47,0)
(43,65,0)
(52,12,0)
(1,43,0)
(9,66,0)
(26,11,0)
(7,33,0)
(4,65,0)
(55,43,1)
(29,30,1)
(59,6,1)
(9,15,1)
(22,66,1)
(8,35,1)
(51,0,1)
(64,36,1)
(49,12,1)
(2,52,1)
(21,23,1)
(29,65,1)
(33,65,1)
(12,2,1)
(10,62,1)
(0,36,1)
(39,62,1)
(11,26,1)
(48,39,1)
(54,20,1)
(20,11,1)
(26,22,1)
(63,4,1)
(43,34,1)
(5,9,1)
(35,36,1)
(64,48,1)
(18,42,1)
(56,6,1)
(42,54,1)
(44,18,1)
(42,36,1)
(52,6,1)
(28,63,1)
(8,13,1)
(33,7,1)
(32,43,1)
(10,41,1)
(53,12,1)
(7,38,1)
(56,36,1)
(45,50,1)
(32,8,1)
(12,6,1)
(66,56,1)
(35,29,1)
(38,57,1)
(65,28,1)
(10,53,1)
(22,19,1)
(10,44,1)
(66,9,1)
(16,55,1)
(4,22,1)
(6,64,1)
(19,66,1)
(10,32,1)
(28,36,1)
(57,32,1)
(43,65,1)
(1,65,1)
(23,33,1)
(23,36,1)
(13,35,1)
(59,45,1)
(56,27,1)
(66,5,1)
(34,1,1)
(30,16,1)
(53,49,1)
(9,59,1)
(41,21,1)
(27,46,1)
(50,56,1)
(42,6,1)
(0,10,1)
(46,53,1)
(7,32,2)
(52,62,2)
(42,6,2)
(5,53,2)
(59,53,2)
(33,65,2)
(64,62,2)
(45,53,2)
(53,62,2)
(22,53,2)
(26,22,2)
(6,64,2)
(13,43,2)
(29,65,2)
(27,53,2)
(22,66,2)
(56,36,2)
(56,6,2)
(33,32,2)
(65,28,2)
(35,29,2)
(29,43,2)
(39,62,2)
(38,32,2)
(12,62,2)
(21,32,2)
(2,62,2)
(53,12,2)
(42,22,2)
(50,53,2)
(64,36,2)
(8,35,2)
(66,53,2)
(42,36,2)
(43,65,2)
(9,59,2)
(55,43,2)
(23,36,2)
(18,22,2)
(51,0,2)
(6,62,2)
(9,53,2)
(30,43,2)
(35,36,2)
(66,9,2)
(63,22,2)
(9,15,2)
(20,22,2)
(49,62,2)
(23,33,2)
(65,22,2)
(59,6,2)
(11,22,2)
(28,36,2)
(32,22,2)
(44,22,2)
(12,6,2)
(35,43,2)
(43,22,2)
(8,43,2)
(46,53,2)
(19,53,2)
(48,62,2)
(1,22,2)
(66,56,2)
(56,53,2)
(0,36,2)
(34,22,2)
(32,43,2)
(57,32,2)
(28,22,2)
(32,8,2)
(16,43,2)
(4,22,2)
(23,32,2)
(41,32,2)
(54,22,2)
-----------------------------------
(0,return data;)
(1,dataLen)
(2,dataLen)
(3,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(4,dataLen)
(5,stdin)
(6,dataLen = strlen(data)
(7,1)
(8,data[dataLen-1] == \\\'\\\\n\\\')
(9,(int)
(10,data)
(11,printLine("fgets()
(12,100-dataLen)
(13,\\\'\\\\n\\\')
(14,dataLen)
(15,int)
(16,dataLen)
(17,)
(18,\\\'\\\\0\\\')
(19,NULL)
(20,data)
(21,\\\'\\\\0\\\')
(22,fgets(data+dataLen, (int)
(23,data[dataLen-1])
(24,if (fgets(data+dataLen, (int)
(25,if(CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)
(26,"fgets()
(27,dataLen)
(28,strlen(data)
(29,dataLen-1)
(30,1)
(31,)
(32,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(33,dataLen-1)
(34,0)
(35,data[dataLen-1])
(36,char * data)
(37,if (100-dataLen > 1)
(38,dataLen)
(39,dataLen)
(40,)
(41,data[dataLen-1] = \\\'\\\\0\\\')
(42,data[dataLen])
(43,dataLen > 0)
(44,data[dataLen] = \\\'\\\\0\\\')
(45,dataLen)
(46,data)
(47,)
(48,data)
(49,1)
(50,100)
(51,RET)
(52,100)
(53,100-dataLen > 1)
(54,dataLen)
(55,data)
(56,data+dataLen)
(57,data)
(58,)
(59,100-dataLen)
(60,)
(61,)
(62,CWE78_OS_Command_Injection__char_console_w32_spawnvp_22_badGlobal)
(63,data)
(64,strlen(data)
(65,dataLen = strlen(data)
(66,fgets(data+dataLen, (int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
