-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
30,31
31,32
32,33
32,34
33,34
36,37
37,38
38,39
38,40
38,41
39,40
41,42
44,45
44,46
44,47
45,46
46,47
46,48
47,48
49,50
49,51
52,53
53,54
53,55
54,55
56,57
56,58
56,59
57,58
59,60
62,63
62,64
63,64
63,65
64,65
66,67
68,69
69,70
70,71
70,72
71,72
73,74
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,35,40,42,43,48,50,51,55,58,60,61,65,67,72,74
-----computeFrom-----
23,24
23,25
53,54
53,55
63,64
63,65
-----guardedBy-----
65,74
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(8,27,0)
(4,8,0)
(19,0,0)
(12,14,0)
(13,16,0)
(30,29,0)
(14,16,0)
(32,29,0)
(8,0,0)
(6,31,0)
(2,8,0)
(16,31,0)
(16,23,0)
(28,22,0)
(17,26,0)
(9,23,0)
(0,24,0)
(25,24,0)
(23,24,0)
(22,16,0)
(10,22,0)
(14,7,0)
(3,17,0)
(11,31,0)
(20,24,0)
(29,24,0)
(1,0,0)
(15,24,0)
(0,29,0)
(21,23,0)
(31,0,0)
(31,16,0)
(18,14,1)
(6,11,1)
(28,10,1)
(31,6,1)
(5,0,1)
(14,16,1)
(13,17,1)
(10,16,1)
(4,5,1)
(12,22,1)
(13,8,1)
(1,19,1)
(19,29,1)
(17,3,1)
(14,12,1)
(3,5,1)
(31,0,1)
(0,1,1)
(2,4,1)
(22,16,1)
(8,2,1)
(8,0,1)
(32,30,1)
(18,22,1)
(11,13,1)
(16,31,1)
(0,29,1)
(22,28,1)
(29,32,1)
(8,0,2)
(17,5,2)
(8,5,2)
(14,22,2)
(16,31,2)
(14,16,2)
(0,29,2)
(2,5,2)
(12,22,2)
(31,0,2)
(4,5,2)
(22,16,2)
(3,5,2)
-----------------------------------
(0,data = data_buf)
(1,data_buf)
(2,"*.*")
(3,"Benign, fixed string")
(4,data)
(5,0)
(6,"w")
(7,)
(8,strcat(data, "*.*")
(9,if (pipe != NULL)
(10,pipe)
(11,data)
(12,pipe)
(13,pipe)
(14,PCLOSE(pipe)
(15,data)
(16,pipe = POPEN(data, "w")
(17,printLine("Benign, fixed string")
(18,RET)
(19,data)
(20,if(0)
(21,pipe)
(22,pipe != NULL)
(23,)
(24,)
(25,data_buf)
(26,)
(27,)
(28,NULL)
(29,data_buf[100] = FULL_COMMAND)
(30,data_buf)
(31,POPEN(data, "w")
(32,FULL_COMMAND)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
