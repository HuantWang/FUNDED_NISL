-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_34_bad()
{
    char * data;
    CWE78_OS_Command_Injection__char_console_w32spawnl_34_unionType myUnion;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* spawnl - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
49,50
49,51
51,52
54,55
55,56
55,57
55,58
56,57
56,58
57,58
57,59
57,60
57,61
58,59
60,61
60,62
61,62
63,64
65,66
65,67
66,67
66,68
69,70
70,71
70,72
72,73
74,75
76,77
78,79
78,80
79,80
80,81
80,82
81,82
83,84
83,85
84,85
86,87
88,89
88,90
89,90
89,91
90,91
90,92
91,92
94,95
94,96
95,96
95,97
96,97
98,99
98,100
99,100
103,104
104,105
105,106
105,107
106,107
106,108
107,108
109,110
109,111
110,111
114,115
114,116
115,116
116,117
116,118
117,118
120,121
121,122
121,123
122,123
122,124
123,124
125,126
128,129
129,130
129,131
130,131
130,132
131,132
134,135
136,137
136,138
137,138
138,139
138,140
140,141
140,142
140,143
143,144
144,145
144,146
145,146
148,149
149,150
149,151
149,152
149,153
149,154
149,155
149,156
150,151
152,153
154,155
156,157
158,159
160,161
162,163
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,38,40,44,46,50,52,53,59,62,64,67,68,71,73,75,77,82,85,87,92,93,97,100,101,102,108,111,112,113,118,119,124,126,127,132,133,135,139,141,142,146,147,151,153,155,157,159,161,163
-----computeFrom-----
29,30
29,31
48,49
48,50
49,50
49,51
56,57
56,58
60,61
60,62
70,71
70,72
80,81
80,82
89,90
89,91
90,91
90,92
94,95
94,96
98,99
98,100
105,106
105,107
109,110
109,111
121,122
121,123
129,130
129,131
-----guardedBy-----
52,126
62,108
73,111
97,108
100,111
-----guardedByNegation-----
62,124
73,126
-----lastLexicalUse-----
62,124
73,126
-----jump-----
62,124
73,126
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_34_bad(){    char * data;    CWE78_OS_Command_Injection__char_console_w32spawnl_34_unionType myUnion;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* spawnl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
void
CWE78_OS_Command_Injection__char_console_w32spawnl_34_bad()
CWE78_OS_Command_Injection__char_console_w32spawnl_34_bad
{    char * data;    CWE78_OS_Command_Injection__char_console_w32spawnl_34_unionType myUnion;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* spawnl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
char * data;
char * data;
char
* data
*
data
CWE78_OS_Command_Injection__char_console_w32spawnl_34_unionType myUnion;
CWE78_OS_Command_Injection__char_console_w32spawnl_34_unionType myUnion;
CWE78_OS_Command_Injection__char_console_w32spawnl_34_unionType
CWE78_OS_Command_Injection__char_console_w32spawnl_34_unionType
myUnion
myUnion
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* spawnl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnl
_spawnl
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(37,68,0)
(32,75,0)
(34,27,0)
(55,9,0)
(68,37,0)
(4,57,0)
(76,3,0)
(60,15,0)
(45,3,0)
(54,7,0)
(50,27,0)
(79,27,0)
(80,67,0)
(9,55,0)
(53,47,0)
(52,37,0)
(69,83,0)
(26,15,0)
(52,23,0)
(15,26,0)
(86,37,0)
(74,67,0)
(4,18,0)
(78,57,0)
(64,30,0)
(68,61,0)
(18,4,0)
(39,0,0)
(0,61,0)
(31,33,0)
(75,14,0)
(6,8,0)
(23,52,0)
(15,13,0)
(7,75,0)
(36,33,0)
(88,9,0)
(58,55,0)
(81,84,0)
(29,40,0)
(22,8,0)
(72,22,0)
(47,8,0)
(12,2,0)
(57,0,0)
(82,47,0)
(40,14,0)
(9,57,0)
(7,8,0)
(83,19,0)
(21,67,0)
(55,83,0)
(61,80,0)
(30,64,0)
(3,67,0)
(8,3,0)
(77,47,0)
(42,61,0)
(18,64,0)
(20,68,0)
(30,84,0)
(56,4,0)
(55,61,0)
(18,61,0)
(28,4,0)
(37,52,0)
(8,6,0)
(61,67,0)
(52,22,0)
(27,13,0)
(84,30,0)
(73,7,0)
(85,27,0)
(35,26,0)
(22,52,0)
(6,61,0)
(38,22,0)
(33,74,0)
(87,84,0)
(41,27,0)
(71,8,0)
(13,67,0)
(11,68,0)
(7,61,0)
(16,74,0)
(47,82,0)
(70,67,0)
(10,80,0)
(2,37,0)
(62,44,0)
(63,61,0)
(24,26,0)
(49,82,0)
(17,67,0)
(51,6,0)
(37,2,0)
(0,57,0)
(68,8,0)
(84,57,0)
(64,18,0)
(43,9,0)
(25,80,0)
(66,5,0)
(74,61,0)
(59,13,0)
(57,44,0)
(65,27,0)
(46,64,0)
(48,18,0)
(56,28,1)
(8,6,1)
(0,39,1)
(48,84,1)
(42,80,1)
(75,32,1)
(11,20,1)
(77,8,1)
(87,57,1)
(9,43,1)
(29,2,1)
(2,37,1)
(68,8,1)
(84,81,1)
(64,18,1)
(50,79,1)
(57,0,1)
(31,36,1)
(27,50,1)
(54,40,1)
(69,55,1)
(55,9,1)
(78,2,1)
(36,83,1)
(22,72,1)
(61,80,1)
(79,65,1)
(28,48,1)
(36,75,1)
(46,18,1)
(84,57,1)
(9,57,1)
(12,37,1)
(36,30,1)
(88,58,1)
(52,23,1)
(39,78,1)
(74,16,1)
(33,31,1)
(61,63,1)
(38,68,1)
(2,12,1)
(4,56,1)
(86,52,1)
(80,25,1)
(1,27,1)
(82,49,1)
(73,54,1)
(0,61,1)
(82,47,1)
(72,38,1)
(49,47,1)
(7,61,1)
(63,42,1)
(15,26,1)
(20,82,1)
(40,29,1)
(51,71,1)
(7,8,1)
(81,87,1)
(35,60,1)
(30,64,1)
(16,33,1)
(26,24,1)
(52,22,1)
(25,10,1)
(74,61,1)
(24,35,1)
(47,8,1)
(34,41,1)
(68,61,1)
(58,30,1)
(53,77,1)
(71,61,1)
(85,34,1)
(18,61,1)
(37,52,1)
(65,85,1)
(36,82,1)
(4,57,1)
(30,84,1)
(83,69,1)
(22,8,1)
(32,7,1)
(55,61,1)
(68,11,1)
(47,53,1)
(60,74,1)
(7,73,1)
(43,88,1)
(37,86,1)
(6,61,1)
(41,15,1)
(18,4,1)
(64,46,1)
(37,68,1)
(6,51,1)
(18,4,2)
(58,30,2)
(0,2,2)
(54,2,2)
(56,84,2)
(29,2,2)
(73,2,2)
(47,8,2)
(22,82,2)
(2,82,2)
(69,30,2)
(68,8,2)
(43,30,2)
(81,2,2)
(18,84,2)
(38,82,2)
(7,61,2)
(2,37,2)
(22,8,2)
(30,84,2)
(11,82,2)
(52,82,2)
(84,2,2)
(12,82,2)
(0,61,2)
(32,2,2)
(48,84,2)
(84,57,2)
(30,64,2)
(7,8,2)
(83,30,2)
(15,26,2)
(72,82,2)
(68,61,2)
(37,68,2)
(68,82,2)
(86,82,2)
(28,84,2)
(4,84,2)
(30,2,2)
(64,84,2)
(55,61,2)
(55,9,2)
(74,61,2)
(7,2,2)
(61,80,2)
(57,2,2)
(18,61,2)
(88,30,2)
(52,23,2)
(64,18,2)
(8,6,2)
(87,2,2)
(4,57,2)
(9,57,2)
(46,84,2)
(57,0,2)
(52,22,2)
(40,2,2)
(55,30,2)
(37,52,2)
(78,2,2)
(9,30,2)
(37,82,2)
(82,47,2)
(20,82,2)
(6,61,2)
(75,2,2)
(39,2,2)
-----------------------------------
(0,strlen(data)
(1,RET)
(2,fgets(data+dataLen, (int)
(3,)
(4,dataLen-1)
(5,)
(6,strlen(data)
(7,data[dataLen])
(8,dataLen = strlen(data)
(9,dataLen-1)
(10,dataBuffer)
(11,dataLen)
(12,NULL)
(13,)
(14,)
(15,* data = myUnion.unionSecond)
(16,data)
(17,myUnion)
(18,data[dataLen-1])
(19,)
(20,data)
(21,dataBuffer)
(22,100-dataLen)
(23,int)
(24,unionSecond)
(25,COMMAND_ARG2)
(26,myUnion.unionSecond)
(27,_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(28,dataLen)
(29,"fgets()
(30,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(31,unionFirst)
(32,\\\'\\\\0\\\')
(33,myUnion.unionFirst)
(34,COMMAND_INT_PATH)
(35,myUnion)
(36,myUnion)
(37,fgets(data+dataLen, (int)
(38,100)
(39,data)
(40,printLine("fgets()
(41,_P_WAIT)
(42,data)
(43,1)
(44,)
(45,dataLen)
(46,\\\'\\\\n\\\')
(47,100-dataLen)
(48,data)
(49,1)
(50,NULL)
(51,data)
(52,(int)
(53,dataLen)
(54,data)
(55,data[dataLen-1])
(56,1)
(57,dataLen = strlen(data)
(58,data)
(59,data)
(60,data)
(61,data = dataBuffer)
(62,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(63,dataBuffer)
(64,data[dataLen-1] == \\\'\\\\n\\\')
(65,COMMAND_ARG1)
(66,if (fgets(data+dataLen, (int)
(67,)
(68,data+dataLen)
(69,\\\'\\\\0\\\')
(70,data)
(71,dataLen)
(72,dataLen)
(73,dataLen)
(74,myUnion.unionFirst = data)
(75,data[dataLen] = \\\'\\\\0\\\')
(76,if (100-dataLen > 1)
(77,100)
(78,dataLen)
(79,COMMAND_ARG3)
(80,dataBuffer[100] = COMMAND_ARG2)
(81,0)
(82,100-dataLen > 1)
(83,data[dataLen-1] = \\\'\\\\0\\\')
(84,dataLen > 0)
(85,COMMAND_INT_PATH)
(86,stdin)
(87,dataLen)
(88,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
