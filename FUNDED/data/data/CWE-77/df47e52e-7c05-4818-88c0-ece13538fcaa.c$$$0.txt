-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
30,31
31,32
32,33
32,34
33,34
36,37
37,38
38,39
38,40
38,41
39,40
41,42
44,45
44,46
45,46
45,47
46,47
46,48
47,48
49,50
52,53
52,54
53,54
54,55
54,56
55,56
58,59
59,60
59,61
60,61
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,35,40,42,43,48,50,51,56,57,61,62
-----computeFrom-----
23,24
23,25
45,46
45,47
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(28,16,0)
(16,28,0)
(6,16,0)
(3,10,0)
(9,0,0)
(27,9,0)
(2,9,0)
(7,28,0)
(0,22,0)
(25,22,0)
(28,0,0)
(9,23,0)
(12,0,0)
(8,22,0)
(13,15,0)
(24,22,0)
(17,21,0)
(19,11,0)
(21,22,0)
(1,3,0)
(11,5,0)
(20,22,0)
(0,21,0)
(14,0,0)
(15,5,0)
(18,21,0)
(9,0,1)
(7,3,1)
(0,14,1)
(16,6,1)
(13,11,1)
(11,19,1)
(7,9,1)
(3,1,1)
(19,16,1)
(4,15,1)
(12,21,1)
(4,16,1)
(28,0,1)
(28,7,1)
(0,21,1)
(14,12,1)
(6,28,1)
(16,28,1)
(21,18,1)
(26,0,1)
(9,27,1)
(18,17,1)
(27,2,1)
(1,26,1)
(2,26,1)
(15,13,1)
(28,0,2)
(1,26,2)
(0,21,2)
(9,26,2)
(19,16,2)
(2,26,2)
(11,16,2)
(27,26,2)
(16,28,2)
(15,16,2)
(9,0,2)
(3,26,2)
(13,16,2)
-----------------------------------
(0,data = data_buf)
(1,"Benign, fixed string")
(2,data)
(3,printLine("Benign, fixed string")
(4,RET)
(5,)
(6,0)
(7,data)
(8,if (SYSTEM(data)
(9,strcat(data, "*.*")
(10,)
(11,printLine("command execution failed!")
(12,data)
(13,1)
(14,data_buf)
(15,exit(1)
(16,SYSTEM(data)
(17,data_buf)
(18,FULL_COMMAND)
(19,"command execution failed!")
(20,data_buf)
(21,data_buf[100] = FULL_COMMAND)
(22,)
(23,)
(24,data)
(25,if(0)
(26,0)
(27,"*.*")
(28,SYSTEM(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
