-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    /* FIX: Append a fixed string to data (not user / external input) */
    strcat(data, "*.*");
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
36,37
37,38
37,39
39,40
39,41
39,42
39,43
43,44
44,45
44,46
44,47
44,48
45,46
47,48
49,50
51,52
53,54
54,55
54,56
54,57
54,58
55,56
57,58
59,60
61,62
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,38,40,41,42,46,48,50,52,56,58,60,62
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(3,11,0)
(7,19,0)
(13,18,0)
(11,18,0)
(4,6,0)
(9,11,0)
(2,18,0)
(9,18,0)
(8,11,0)
(12,2,0)
(19,18,0)
(15,18,0)
(6,2,0)
(14,17,0)
(1,9,0)
(10,6,0)
(17,2,0)
(20,6,0)
(6,17,0)
(16,9,0)
(0,19,0)
(19,9,0)
(11,3,1)
(0,7,1)
(10,4,1)
(19,9,1)
(20,17,1)
(3,8,1)
(6,17,1)
(7,9,1)
(9,1,1)
(14,19,1)
(1,16,1)
(5,6,1)
(17,14,1)
(6,10,1)
(16,11,1)
(9,11,1)
(19,0,1)
(4,20,1)
(19,9,2)
(9,11,2)
(6,17,2)
-----------------------------------
(0,"*.*")
(1,dataBuffer)
(2,)
(3,COMMAND_ARG2)
(4,COMMAND_INT_PATH)
(5,RET)
(6,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(7,data)
(8,dataBuffer)
(9,data = dataBuffer)
(10,args)
(11,dataBuffer[100] = COMMAND_ARG2)
(12,args)
(13,data)
(14,args)
(15,dataBuffer)
(16,data)
(17,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(18,)
(19,strcat(data, "*.*")
(20,_P_WAIT)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
