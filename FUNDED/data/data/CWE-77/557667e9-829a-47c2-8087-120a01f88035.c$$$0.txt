-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_execl_45_bad()
CWE78_OS_Command_Injection__char_console_execl_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_45_badData = data;
CWE78_OS_Command_Injection__char_console_execl_45_badData = data
CWE78_OS_Command_Injection__char_console_execl_45_badData
CWE78_OS_Command_Injection__char_console_execl_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(4,23,0)
(25,27,0)
(27,39,0)
(44,32,0)
(46,57,0)
(61,18,0)
(49,61,0)
(9,19,0)
(51,42,0)
(55,67,0)
(54,23,0)
(48,45,0)
(41,23,0)
(30,18,0)
(52,67,0)
(64,59,0)
(6,44,0)
(65,17,0)
(29,42,0)
(42,18,0)
(28,0,0)
(15,19,0)
(71,55,0)
(58,67,0)
(62,47,0)
(59,64,0)
(47,58,0)
(24,58,0)
(64,19,0)
(68,55,0)
(61,47,0)
(63,32,0)
(23,0,0)
(52,18,0)
(38,47,0)
(26,37,0)
(21,46,0)
(34,52,0)
(23,41,0)
(41,46,0)
(36,0,0)
(60,35,0)
(0,56,0)
(40,62,0)
(61,44,0)
(27,0,0)
(35,64,0)
(2,15,0)
(42,28,0)
(45,3,0)
(66,41,0)
(5,67,0)
(8,37,0)
(19,37,0)
(28,42,0)
(22,70,0)
(37,18,0)
(62,18,0)
(10,58,0)
(45,47,0)
(53,61,0)
(56,0,0)
(13,67,0)
(7,63,0)
(42,29,0)
(3,45,0)
(43,3,0)
(19,15,0)
(18,67,0)
(64,35,0)
(35,47,0)
(33,56,0)
(1,52,0)
(0,70,0)
(69,28,0)
(37,47,0)
(39,29,0)
(16,28,0)
(19,64,0)
(56,18,0)
(39,27,0)
(20,29,0)
(11,35,0)
(31,18,0)
(37,19,0)
(47,62,0)
(14,45,0)
(50,27,0)
(72,67,0)
(18,55,0)
(41,18,0)
(29,39,0)
(21,41,1)
(14,48,1)
(38,18,1)
(19,9,1)
(20,42,1)
(42,28,1)
(27,50,1)
(37,47,1)
(56,18,1)
(19,64,1)
(8,3,1)
(69,51,1)
(25,0,1)
(64,59,1)
(61,49,1)
(47,62,1)
(35,47,1)
(26,8,1)
(12,13,1)
(1,46,1)
(63,7,1)
(3,45,1)
(54,66,1)
(61,47,1)
(18,55,1)
(19,37,1)
(9,64,1)
(15,19,1)
(71,68,1)
(7,15,1)
(29,42,1)
(28,16,1)
(37,26,1)
(0,56,1)
(44,6,1)
(41,18,1)
(46,21,1)
(50,25,1)
(45,14,1)
(64,35,1)
(28,0,1)
(23,4,1)
(41,23,1)
(42,18,1)
(45,47,1)
(1,44,1)
(29,20,1)
(31,30,1)
(43,45,1)
(35,11,1)
(60,37,1)
(3,43,1)
(61,18,1)
(55,71,1)
(49,53,1)
(27,0,1)
(37,18,1)
(48,47,1)
(1,39,1)
(6,61,1)
(40,38,1)
(15,2,1)
(18,31,1)
(51,27,1)
(52,34,1)
(39,27,1)
(13,52,1)
(16,69,1)
(52,18,1)
(39,29,1)
(62,18,1)
(33,36,1)
(11,60,1)
(53,63,1)
(2,19,1)
(30,55,1)
(4,54,1)
(36,15,1)
(23,0,1)
(62,40,1)
(56,33,1)
(34,1,1)
(66,39,1)
(1,3,1)
(6,15,2)
(0,15,2)
(28,0,2)
(37,3,2)
(20,27,2)
(53,15,2)
(64,3,2)
(15,3,2)
(64,35,2)
(21,39,2)
(61,47,2)
(36,15,2)
(26,3,2)
(41,18,2)
(66,39,2)
(35,3,2)
(39,27,2)
(35,47,2)
(37,47,2)
(0,56,2)
(46,39,2)
(62,18,2)
(27,0,2)
(63,15,2)
(39,29,2)
(42,28,2)
(60,3,2)
(44,15,2)
(28,27,2)
(29,42,2)
(16,27,2)
(23,0,2)
(11,3,2)
(25,15,2)
(23,39,2)
(19,64,2)
(27,15,2)
(41,23,2)
(41,39,2)
(3,45,2)
(42,18,2)
(50,15,2)
(61,18,2)
(33,15,2)
(56,18,2)
(51,27,2)
(8,3,2)
(47,62,2)
(4,39,2)
(18,55,2)
(42,27,2)
(7,15,2)
(19,3,2)
(64,59,2)
(9,3,2)
(69,27,2)
(2,3,2)
(61,15,2)
(54,39,2)
(56,15,2)
(15,19,2)
(37,18,2)
(19,37,2)
(49,15,2)
(29,27,2)
(39,15,2)
(45,47,2)
(52,18,2)
-----------------------------------
(0,dataLen = strlen(data)
(1,CWE78_OS_Command_Injection__char_console_execl_45_badData)
(2,NULL)
(3,100-dataLen > 1)
(4,1)
(5,data)
(6,\\\'\\\\0\\\')
(7,"fgets()
(8,data)
(9,stdin)
(10,dataLen)
(11,dataLen)
(12,RET)
(13,badSink()
(14,dataLen)
(15,fgets(data+dataLen, (int)
(16,1)
(17,)
(18,data = dataBuffer)
(19,fgets(data+dataLen, (int)
(20,\\\'\\\\n\\\')
(21,\\\'\\\\0\\\')
(22,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(23,dataLen-1)
(24,if (100-dataLen > 1)
(25,dataLen)
(26,dataLen)
(27,dataLen > 0)
(28,dataLen-1)
(29,data[dataLen-1] == \\\'\\\\n\\\')
(30,data)
(31,dataBuffer)
(32,)
(33,data)
(34,data)
(35,100-dataLen)
(36,dataLen)
(37,data+dataLen)
(38,dataLen)
(39,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(40,data)
(41,data[dataLen-1])
(42,data[dataLen-1])
(43,1)
(44,data[dataLen] = \\\'\\\\0\\\')
(45,100-dataLen)
(46,data[dataLen-1] = \\\'\\\\0\\\')
(47,dataLen = strlen(data)
(48,100)
(49,dataLen)
(50,0)
(51,data)
(52,CWE78_OS_Command_Injection__char_console_execl_45_badData = data)
(53,data)
(54,dataLen)
(55,dataBuffer[100] = COMMAND_ARG2)
(56,strlen(data)
(57,)
(58,)
(59,int)
(60,100)
(61,data[dataLen])
(62,strlen(data)
(63,printLine("fgets()
(64,(int)
(65,if (fgets(data+dataLen, (int)
(66,data)
(67,)
(68,dataBuffer)
(69,dataLen)
(70,)
(71,COMMAND_ARG2)
(72,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
