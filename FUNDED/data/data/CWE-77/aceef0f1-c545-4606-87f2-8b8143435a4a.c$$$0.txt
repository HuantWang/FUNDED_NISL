-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_45_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_popen_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_45_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_popen_45_bad()
CWE78_OS_Command_Injection__char_console_popen_45_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_popen_45_badData = data;
CWE78_OS_Command_Injection__char_console_popen_45_badData = data
CWE78_OS_Command_Injection__char_console_popen_45_badData
CWE78_OS_Command_Injection__char_console_popen_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(27,45,0)
(41,40,0)
(15,45,0)
(50,6,0)
(13,53,0)
(11,61,0)
(28,58,0)
(66,23,0)
(25,10,0)
(25,36,0)
(69,15,0)
(44,13,0)
(44,49,0)
(52,8,0)
(58,45,0)
(66,47,0)
(57,48,0)
(10,4,0)
(45,15,0)
(23,66,0)
(45,58,0)
(4,36,0)
(15,10,0)
(2,66,0)
(35,13,0)
(33,25,0)
(21,49,0)
(20,58,0)
(31,20,0)
(56,71,0)
(51,14,0)
(7,36,0)
(18,10,0)
(64,12,0)
(17,39,0)
(52,57,0)
(9,13,0)
(5,57,0)
(37,25,0)
(34,4,0)
(68,45,0)
(66,10,0)
(53,29,0)
(8,12,0)
(20,8,0)
(13,44,0)
(63,7,0)
(39,8,0)
(53,61,0)
(12,8,0)
(19,68,0)
(45,68,0)
(32,15,0)
(54,36,0)
(22,40,0)
(38,53,0)
(12,10,0)
(15,8,0)
(3,39,0)
(16,29,0)
(42,7,0)
(8,7,0)
(1,8,0)
(47,62,0)
(29,10,0)
(30,36,0)
(40,41,0)
(24,52,0)
(41,49,0)
(58,28,0)
(49,41,0)
(46,10,0)
(0,52,0)
(49,44,0)
(67,41,0)
(29,53,0)
(41,10,0)
(52,10,0)
(70,23,0)
(65,4,0)
(26,40,0)
(23,53,0)
(43,36,0)
(55,23,0)
(39,6,0)
(10,36,0)
(58,20,0)
(40,53,0)
(72,20,0)
(6,39,0)
(71,48,0)
(59,47,0)
(64,1,1)
(69,32,1)
(60,30,1)
(0,71,1)
(17,3,1)
(15,10,1)
(20,8,1)
(20,31,1)
(38,68,1)
(9,53,1)
(25,33,1)
(45,58,1)
(3,8,1)
(10,4,1)
(46,18,1)
(25,10,1)
(66,23,1)
(32,6,1)
(6,50,1)
(37,44,1)
(10,46,1)
(44,13,1)
(15,69,1)
(30,25,1)
(72,15,1)
(44,49,1)
(23,70,1)
(50,39,1)
(52,10,1)
(15,8,1)
(52,8,1)
(4,34,1)
(40,26,1)
(41,10,1)
(67,13,1)
(68,19,1)
(12,64,1)
(13,35,1)
(24,0,1)
(37,57,1)
(5,52,1)
(37,47,1)
(70,55,1)
(33,37,1)
(12,10,1)
(29,16,1)
(68,45,1)
(56,68,1)
(2,44,1)
(6,39,1)
(8,12,1)
(29,10,1)
(18,4,1)
(41,40,1)
(49,21,1)
(27,58,1)
(52,24,1)
(16,38,1)
(37,6,1)
(55,2,1)
(21,41,1)
(57,5,1)
(66,10,1)
(39,17,1)
(45,27,1)
(47,59,1)
(45,15,1)
(53,29,1)
(1,10,1)
(35,9,1)
(40,53,1)
(23,53,1)
(19,45,1)
(59,66,1)
(22,67,1)
(49,41,1)
(58,20,1)
(34,65,1)
(26,22,1)
(13,53,1)
(58,28,1)
(31,72,1)
(39,8,1)
(71,56,1)
(58,6,2)
(66,23,2)
(52,8,2)
(0,68,2)
(45,58,2)
(29,10,2)
(12,10,2)
(58,28,2)
(24,68,2)
(38,68,2)
(22,13,2)
(66,44,2)
(21,13,2)
(8,12,2)
(45,15,2)
(44,49,2)
(53,68,2)
(52,10,2)
(67,13,2)
(69,6,2)
(26,13,2)
(41,40,2)
(52,68,2)
(45,6,2)
(44,68,2)
(49,41,2)
(23,53,2)
(71,68,2)
(16,68,2)
(27,6,2)
(10,4,2)
(68,45,2)
(15,8,2)
(32,6,2)
(13,68,2)
(13,53,2)
(56,68,2)
(20,6,2)
(41,10,2)
(2,44,2)
(15,6,2)
(23,44,2)
(19,6,2)
(5,68,2)
(59,44,2)
(29,68,2)
(15,10,2)
(72,6,2)
(41,13,2)
(58,20,2)
(9,68,2)
(49,13,2)
(31,6,2)
(44,13,2)
(70,44,2)
(53,29,2)
(25,10,2)
(39,8,2)
(20,8,2)
(66,10,2)
(55,44,2)
(68,6,2)
(57,68,2)
(35,68,2)
(6,39,2)
(40,13,2)
(40,53,2)
(47,44,2)
-----------------------------------
(0,data)
(1,dataLen)
(2,data)
(3,100)
(4,data_buf[100] = FULL_COMMAND)
(5,\\\'\\\\0\\\')
(6,100-dataLen > 1)
(7,)
(8,dataLen = strlen(data)
(9,dataLen)
(10,data = data_buf)
(11,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(12,strlen(data)
(13,dataLen > 0)
(14,)
(15,data+dataLen)
(16,data)
(17,dataLen)
(18,data)
(19,NULL)
(20,100-dataLen)
(21,\\\'\\\\n\\\')
(22,dataLen)
(23,dataLen-1)
(24,dataLen)
(25,CWE78_OS_Command_Injection__char_console_popen_45_badData = data)
(26,1)
(27,stdin)
(28,int)
(29,strlen(data)
(30,badSink()
(31,dataLen)
(32,data)
(33,data)
(34,FULL_COMMAND)
(35,0)
(36,)
(37,CWE78_OS_Command_Injection__char_console_popen_45_badData)
(38,dataLen)
(39,100-dataLen)
(40,dataLen-1)
(41,data[dataLen-1])
(42,if (100-dataLen > 1)
(43,data_buf)
(44,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(45,fgets(data+dataLen, (int)
(46,data_buf)
(47,data[dataLen-1] = \\\'\\\\0\\\')
(48,)
(49,data[dataLen-1] == \\\'\\\\n\\\')
(50,1)
(51,if (fgets(data+dataLen, (int)
(52,data[dataLen])
(53,dataLen = strlen(data)
(54,data)
(55,dataLen)
(56,"fgets()
(57,data[dataLen] = \\\'\\\\0\\\')
(58,(int)
(59,\\\'\\\\0\\\')
(60,RET)
(61,)
(62,)
(63,dataLen)
(64,data)
(65,data_buf)
(66,data[dataLen-1])
(67,data)
(68,fgets(data+dataLen, (int)
(69,dataLen)
(70,1)
(71,printLine("fgets()
(72,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
