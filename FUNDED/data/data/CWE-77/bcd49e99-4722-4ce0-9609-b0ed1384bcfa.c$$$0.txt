-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_68_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execvp_68_badData = data;
    CWE78_OS_Command_Injection__char_console_w32_execvp_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_68_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_execvp_68b_badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_68_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_68_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_execvp_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execvp_68_badData = data;
CWE78_OS_Command_Injection__char_console_w32_execvp_68_badData = data
CWE78_OS_Command_Injection__char_console_w32_execvp_68_badData
CWE78_OS_Command_Injection__char_console_w32_execvp_68_badData
data
data
CWE78_OS_Command_Injection__char_console_w32_execvp_68b_badSink();
CWE78_OS_Command_Injection__char_console_w32_execvp_68b_badSink()
CWE78_OS_Command_Injection__char_console_w32_execvp_68b_badSink
CWE78_OS_Command_Injection__char_console_w32_execvp_68b_badSink
-----joern-----
(36,64,0)
(5,56,0)
(25,15,0)
(59,56,0)
(56,65,0)
(13,56,0)
(47,45,0)
(11,28,0)
(37,44,0)
(43,36,0)
(2,0,0)
(48,35,0)
(24,44,0)
(72,0,0)
(72,43,0)
(2,59,0)
(55,70,0)
(58,60,0)
(29,65,0)
(21,14,0)
(64,36,0)
(14,21,0)
(46,2,0)
(26,72,0)
(2,44,0)
(21,44,0)
(62,39,0)
(19,71,0)
(50,72,0)
(15,60,0)
(39,65,0)
(1,54,0)
(59,54,0)
(54,0,0)
(71,3,0)
(44,2,0)
(36,43,0)
(19,15,0)
(18,10,0)
(68,19,0)
(66,2,0)
(21,32,0)
(43,72,0)
(35,0,0)
(40,35,0)
(34,71,0)
(4,28,0)
(57,19,0)
(12,32,0)
(72,50,0)
(54,59,0)
(63,50,0)
(52,28,0)
(28,11,0)
(22,11,0)
(30,51,0)
(41,43,0)
(0,65,0)
(23,30,0)
(8,59,0)
(34,0,0)
(64,71,0)
(71,34,0)
(0,39,0)
(67,65,0)
(70,0,0)
(60,9,0)
(53,0,0)
(27,50,0)
(32,59,0)
(16,64,0)
(17,39,0)
(44,37,0)
(32,21,0)
(61,3,0)
(35,59,0)
(38,34,0)
(70,65,0)
(6,65,0)
(45,51,0)
(44,21,0)
(15,0,0)
(35,45,0)
(50,71,0)
(31,71,0)
(42,37,0)
(20,0,0)
(15,19,0)
(28,59,0)
(33,70,0)
(7,64,0)
(69,32,0)
(29,70,1)
(27,26,1)
(55,33,1)
(43,41,1)
(40,30,1)
(33,60,1)
(44,24,1)
(7,16,1)
(46,66,1)
(2,0,1)
(28,4,1)
(57,25,1)
(42,44,1)
(44,21,1)
(8,0,1)
(70,55,1)
(33,45,1)
(4,52,1)
(70,0,1)
(53,20,1)
(47,35,1)
(17,62,1)
(35,59,1)
(12,69,1)
(43,72,1)
(2,46,1)
(34,0,1)
(36,64,1)
(23,37,1)
(21,32,1)
(54,0,1)
(72,0,1)
(49,29,1)
(1,8,1)
(58,15,1)
(37,42,1)
(15,0,1)
(31,37,1)
(50,63,1)
(19,71,1)
(54,1,1)
(22,28,1)
(0,53,1)
(25,36,1)
(68,57,1)
(64,71,1)
(48,40,1)
(71,34,1)
(50,71,1)
(63,27,1)
(35,0,1)
(0,39,1)
(35,48,1)
(30,23,1)
(2,59,1)
(19,68,1)
(33,36,1)
(11,28,1)
(44,2,1)
(72,50,1)
(39,17,1)
(21,14,1)
(34,38,1)
(26,64,1)
(33,11,1)
(32,12,1)
(15,19,1)
(37,44,1)
(32,59,1)
(28,59,1)
(52,59,1)
(41,72,1)
(38,31,1)
(20,39,1)
(24,21,1)
(66,11,1)
(59,54,1)
(69,2,1)
(36,43,1)
(60,58,1)
(64,7,1)
(45,47,1)
(16,71,1)
(11,22,1)
(28,59,2)
(24,11,2)
(35,59,2)
(26,64,2)
(15,0,2)
(44,11,2)
(37,44,2)
(44,2,2)
(64,71,2)
(0,39,2)
(70,0,2)
(2,59,2)
(69,11,2)
(2,0,2)
(35,0,2)
(34,37,2)
(54,0,2)
(37,11,2)
(31,37,2)
(50,64,2)
(71,34,2)
(63,64,2)
(45,37,2)
(68,36,2)
(50,71,2)
(43,64,2)
(34,0,2)
(16,37,2)
(32,11,2)
(71,37,2)
(15,36,2)
(64,37,2)
(42,11,2)
(19,36,2)
(32,59,2)
(59,54,2)
(41,64,2)
(25,36,2)
(21,11,2)
(47,37,2)
(21,14,2)
(46,11,2)
(58,36,2)
(36,37,2)
(15,19,2)
(48,37,2)
(38,37,2)
(36,43,2)
(2,11,2)
(30,37,2)
(44,21,2)
(43,72,2)
(66,11,2)
(11,28,2)
(23,37,2)
(19,71,2)
(35,37,2)
(12,11,2)
(7,37,2)
(40,37,2)
(72,50,2)
(21,32,2)
(72,0,2)
(57,36,2)
(72,64,2)
(60,36,2)
(27,64,2)
(36,64,2)
-----------------------------------
(0,data = dataBuffer)
(1,data)
(2,data+dataLen)
(3,)
(4,dataLen)
(5,if (100-dataLen > 1)
(6,data)
(7,0)
(8,dataLen)
(9,)
(10,)
(11,100-dataLen > 1)
(12,dataLen)
(13,dataLen)
(14,int)
(15,data[dataLen-1])
(16,dataLen)
(17,COMMAND_ARG2)
(18,if (fgets(data+dataLen, (int)
(19,dataLen-1)
(20,data)
(21,(int)
(22,1)
(23,"fgets()
(24,stdin)
(25,data)
(26,data)
(27,dataLen)
(28,100-dataLen)
(29,CWE78_OS_Command_Injection__char_console_w32_execvp_68b_badSink()
(30,printLine("fgets()
(31,dataLen)
(32,100-dataLen)
(33,CWE78_OS_Command_Injection__char_console_w32_execvp_68_badData)
(34,strlen(data)
(35,data[dataLen])
(36,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(37,fgets(data+dataLen, (int)
(38,data)
(39,dataBuffer[100] = COMMAND_ARG2)
(40,data)
(41,\\\'\\\\n\\\')
(42,NULL)
(43,data[dataLen-1] == \\\'\\\\n\\\')
(44,fgets(data+dataLen, (int)
(45,data[dataLen] = \\\'\\\\0\\\')
(46,dataLen)
(47,\\\'\\\\0\\\')
(48,dataLen)
(49,RET)
(50,dataLen-1)
(51,)
(52,100)
(53,dataBuffer)
(54,strlen(data)
(55,data)
(56,)
(57,dataLen)
(58,\\\'\\\\0\\\')
(59,dataLen = strlen(data)
(60,data[dataLen-1] = \\\'\\\\0\\\')
(61,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(62,dataBuffer)
(63,1)
(64,dataLen > 0)
(65,)
(66,data)
(67,dataBuffer)
(68,1)
(69,100)
(70,CWE78_OS_Command_Injection__char_console_w32_execvp_68_badData = data)
(71,dataLen = strlen(data)
(72,data[dataLen-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
