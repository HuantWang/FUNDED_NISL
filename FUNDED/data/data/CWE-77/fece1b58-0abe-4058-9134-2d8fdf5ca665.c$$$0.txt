-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_execl_01_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    /* execl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
42,43
42,44
43,44
45,46
45,47
48,49
48,50
49,50
49,51
50,51
50,52
52,53
55,56
55,57
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
72,74
73,74
73,75
74,75
74,76
75,76
75,77
75,78
75,79
76,77
78,79
78,80
79,80
81,82
83,84
83,85
84,85
84,86
87,88
88,89
88,90
90,91
92,93
94,95
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
111,113
112,113
114,115
116,117
117,118
117,119
117,120
117,121
117,122
117,123
118,119
120,121
122,123
124,125
126,127
128,129
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,51,53,54,59,62,64,65,69,71,77,80,82,85,86,89,91,93,95,100,101,106,108,109,113,115,119,121,123,125,127,129
-----computeFrom-----
23,24
23,25
49,50
49,51
50,51
50,52
57,58
57,59
67,68
67,69
74,75
74,76
78,79
78,80
88,89
88,90
103,104
103,105
-----guardedBy-----
53,108
71,95
69,115
80,106
91,108
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_execl_01_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    /* execl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__char_file_execl_01_bad()
CWE78_OS_Command_Injection__char_file_execl_01_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    /* execl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(37,30,0)
(45,28,0)
(7,57,0)
(31,56,0)
(48,42,0)
(40,9,0)
(10,26,0)
(38,24,0)
(25,55,0)
(51,15,0)
(15,19,0)
(28,39,0)
(29,43,0)
(44,39,0)
(3,26,0)
(6,57,0)
(9,7,0)
(41,19,0)
(7,46,0)
(16,56,0)
(17,46,0)
(32,56,0)
(26,10,0)
(23,57,0)
(43,52,0)
(35,3,0)
(19,24,0)
(34,58,0)
(44,59,0)
(10,15,0)
(2,56,0)
(12,59,0)
(57,7,0)
(55,24,0)
(42,46,0)
(57,15,0)
(36,44,0)
(27,5,0)
(3,5,0)
(21,26,0)
(61,54,0)
(33,58,0)
(47,10,0)
(11,43,0)
(56,24,0)
(53,24,0)
(52,43,0)
(46,7,0)
(39,28,0)
(15,24,0)
(4,55,0)
(46,17,0)
(13,56,0)
(26,55,0)
(43,26,0)
(62,39,0)
(50,55,0)
(54,49,0)
(8,28,0)
(20,7,0)
(1,42,0)
(7,39,0)
(60,3,0)
(57,26,0)
(3,15,0)
(22,52,0)
(5,49,0)
(58,39,0)
(0,19,0)
(14,15,0)
(39,30,0)
(7,9,0)
(42,26,0)
(46,42,0)
(39,28,1)
(21,15,1)
(43,26,1)
(46,17,1)
(31,16,1)
(43,11,1)
(7,39,1)
(15,51,1)
(44,39,1)
(42,1,1)
(51,14,1)
(0,41,1)
(60,35,1)
(6,23,1)
(34,39,1)
(48,57,1)
(27,3,1)
(32,58,1)
(32,44,1)
(20,46,1)
(28,8,1)
(7,46,1)
(23,58,1)
(32,52,1)
(19,0,1)
(35,54,1)
(58,39,1)
(1,48,1)
(8,45,1)
(47,21,1)
(7,20,1)
(14,19,1)
(11,29,1)
(26,10,1)
(61,9,1)
(16,2,1)
(40,7,1)
(44,36,1)
(52,43,1)
(57,26,1)
(9,40,1)
(33,34,1)
(58,33,1)
(3,26,1)
(36,5,1)
(57,15,1)
(52,22,1)
(29,26,1)
(46,42,1)
(10,47,1)
(2,32,1)
(7,57,1)
(22,43,1)
(36,9,1)
(54,61,1)
(18,56,1)
(13,31,1)
(10,15,1)
(62,52,1)
(9,7,1)
(42,26,1)
(56,13,1)
(45,62,1)
(5,27,1)
(57,6,1)
(3,60,1)
(3,15,1)
(15,19,1)
(62,52,2)
(44,39,2)
(15,19,2)
(40,58,2)
(35,9,2)
(3,26,2)
(57,15,2)
(3,9,2)
(57,26,2)
(7,57,2)
(6,58,2)
(26,10,2)
(44,58,2)
(3,15,2)
(58,39,2)
(10,15,2)
(57,58,2)
(8,52,2)
(39,52,2)
(1,58,2)
(9,7,2)
(46,42,2)
(42,58,2)
(9,58,2)
(46,17,2)
(20,58,2)
(42,26,2)
(36,58,2)
(54,9,2)
(34,52,2)
(52,43,2)
(61,9,2)
(7,58,2)
(39,28,2)
(33,52,2)
(58,52,2)
(7,46,2)
(5,9,2)
(43,26,2)
(7,39,2)
(60,9,2)
(28,52,2)
(27,9,2)
(46,58,2)
(45,52,2)
(48,58,2)
(23,58,2)
-----------------------------------
(0,COMMAND_ARG2)
(1,dataLen)
(2,COMMAND_INT_PATH)
(3,data[dataLen])
(4,if (100-dataLen > 1)
(5,data[dataLen] = \\\'\\\\0\\\')
(6,dataLen)
(7,fgets(data+dataLen, (int)
(8,"r")
(9,fgets(data+dataLen, (int)
(10,strlen(data)
(11,dataLen)
(12,if (fgets(data+dataLen, (int)
(13,NULL)
(14,data)
(15,data = dataBuffer)
(16,COMMAND_ARG1)
(17,int)
(18,RET)
(19,dataBuffer[100] = COMMAND_ARG2)
(20,pFile)
(21,dataLen)
(22,1)
(23,data)
(24,)
(25,pFile)
(26,dataLen = strlen(data)
(27,\\\'\\\\0\\\')
(28,fopen(FILENAME, "r")
(29,100)
(30,)
(31,COMMAND_ARG3)
(32,COMMAND_INT_PATH)
(33,NULL)
(34,pFile)
(35,data)
(36,pFile)
(37,if (pFile != NULL)
(38,data)
(39,pFile = fopen(FILENAME, "r")
(40,NULL)
(41,dataBuffer)
(42,100-dataLen)
(43,100-dataLen)
(44,fclose(pFile)
(45,FILENAME)
(46,(int)
(47,data)
(48,100)
(49,)
(50,dataLen)
(51,dataBuffer)
(52,100-dataLen > 1)
(53,dataBuffer)
(54,printLine("fgets()
(55,)
(56,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(57,data+dataLen)
(58,pFile != NULL)
(59,)
(60,dataLen)
(61,"fgets()
(62,pFile)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
