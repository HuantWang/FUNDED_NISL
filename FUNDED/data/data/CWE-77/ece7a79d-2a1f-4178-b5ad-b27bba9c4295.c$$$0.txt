-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_spawnv_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(7,35,0)
(39,38,0)
(4,33,0)
(31,17,0)
(41,46,0)
(55,21,0)
(29,28,0)
(48,50,0)
(38,16,0)
(53,6,0)
(4,43,0)
(4,42,0)
(42,13,0)
(41,33,0)
(2,25,0)
(21,42,0)
(60,50,0)
(34,48,0)
(48,17,0)
(36,35,0)
(46,41,0)
(63,38,0)
(11,33,0)
(5,16,0)
(33,23,0)
(47,13,0)
(58,23,0)
(12,20,0)
(28,33,0)
(50,24,0)
(35,38,0)
(30,42,0)
(32,55,0)
(25,33,0)
(49,4,0)
(28,43,0)
(37,28,0)
(38,6,0)
(52,14,0)
(42,21,0)
(0,55,0)
(24,63,0)
(55,33,0)
(8,7,0)
(23,14,0)
(19,18,0)
(59,52,0)
(52,43,0)
(28,44,0)
(44,18,0)
(42,4,0)
(24,50,0)
(51,23,0)
(9,41,0)
(21,55,0)
(21,10,0)
(7,43,0)
(50,48,0)
(17,48,0)
(27,63,0)
(22,19,0)
(7,12,0)
(54,52,0)
(48,43,0)
(17,38,0)
(62,44,0)
(56,17,0)
(61,63,0)
(16,43,0)
(3,12,0)
(25,43,0)
(57,41,0)
(16,38,0)
(1,4,0)
(40,15,0)
(13,42,0)
(35,7,0)
(10,21,0)
(26,46,0)
(45,35,0)
(33,25,0)
(63,24,0)
(54,24,1)
(21,10,1)
(63,38,1)
(59,52,1)
(27,38,1)
(4,49,1)
(55,33,1)
(29,19,1)
(52,54,1)
(41,33,1)
(45,8,1)
(35,38,1)
(26,41,1)
(28,37,1)
(42,21,1)
(54,46,1)
(5,39,1)
(4,33,1)
(42,4,1)
(1,46,1)
(48,43,1)
(13,47,1)
(31,56,1)
(16,5,1)
(7,35,1)
(21,55,1)
(39,13,1)
(34,63,1)
(2,11,1)
(57,9,1)
(50,48,1)
(44,62,1)
(55,0,1)
(60,48,1)
(37,29,1)
(61,27,1)
(28,43,1)
(0,32,1)
(35,36,1)
(48,17,1)
(38,16,1)
(13,42,1)
(7,43,1)
(54,12,1)
(24,63,1)
(32,4,1)
(3,7,1)
(4,43,1)
(19,22,1)
(46,26,1)
(12,3,1)
(30,21,1)
(49,1,1)
(17,38,1)
(42,30,1)
(50,60,1)
(52,43,1)
(24,50,1)
(9,33,1)
(41,57,1)
(54,44,1)
(8,24,1)
(28,33,1)
(56,34,1)
(47,42,1)
(25,2,1)
(63,61,1)
(36,45,1)
(46,41,1)
(33,25,1)
(22,13,1)
(17,31,1)
(62,28,1)
(16,43,1)
(25,43,1)
(48,17,2)
(42,4,2)
(1,46,2)
(44,13,2)
(38,16,2)
(35,38,2)
(28,13,2)
(28,43,2)
(52,43,2)
(19,13,2)
(12,24,2)
(50,63,2)
(37,13,2)
(16,13,2)
(59,52,2)
(60,63,2)
(31,63,2)
(55,33,2)
(49,46,2)
(0,46,2)
(21,46,2)
(8,24,2)
(47,46,2)
(63,13,2)
(16,43,2)
(48,43,2)
(39,13,2)
(22,13,2)
(7,43,2)
(33,25,2)
(42,21,2)
(36,24,2)
(56,63,2)
(30,46,2)
(7,35,2)
(17,38,2)
(24,63,2)
(28,33,2)
(48,63,2)
(13,46,2)
(45,24,2)
(55,46,2)
(42,46,2)
(4,43,2)
(5,13,2)
(34,63,2)
(32,46,2)
(21,10,2)
(21,55,2)
(13,42,2)
(50,48,2)
(27,13,2)
(63,38,2)
(7,24,2)
(46,41,2)
(24,50,2)
(38,13,2)
(24,13,2)
(3,24,2)
(35,24,2)
(29,13,2)
(4,33,2)
(25,43,2)
(4,46,2)
(17,63,2)
(61,13,2)
(41,33,2)
(62,13,2)
-----------------------------------
(0,dataLen)
(1,data)
(2,data)
(3,\\\'\\\\0\\\')
(4,data+dataLen)
(5,data)
(6,)
(7,data[dataLen-1])
(8,data)
(9,100)
(10,int)
(11,dataLen)
(12,data[dataLen-1] = \\\'\\\\0\\\')
(13,fgets(data+dataLen, (int)
(14,)
(15,)
(16,strlen(data)
(17,dataLen-1)
(18,)
(19,printLine("fgets()
(20,)
(21,(int)
(22,"fgets()
(23,)
(24,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(25,strlen(data)
(26,1)
(27,dataLen)
(28,data[dataLen])
(29,data)
(30,stdin)
(31,1)
(32,100)
(33,dataLen = strlen(data)
(34,data)
(35,dataLen-1)
(36,1)
(37,dataLen)
(38,dataLen = strlen(data)
(39,dataLen)
(40,if (fgets(data+dataLen, (int)
(41,100-dataLen)
(42,fgets(data+dataLen, (int)
(43,char * data)
(44,data[dataLen] = \\\'\\\\0\\\')
(45,dataLen)
(46,100-dataLen > 1)
(47,NULL)
(48,data[dataLen-1])
(49,dataLen)
(50,data[dataLen-1] == \\\'\\\\n\\\')
(51,if (100-dataLen > 1)
(52,return data;)
(53,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(54,data)
(55,100-dataLen)
(56,dataLen)
(57,dataLen)
(58,dataLen)
(59,RET)
(60,\\\'\\\\n\\\')
(61,0)
(62,\\\'\\\\0\\\')
(63,dataLen > 0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
