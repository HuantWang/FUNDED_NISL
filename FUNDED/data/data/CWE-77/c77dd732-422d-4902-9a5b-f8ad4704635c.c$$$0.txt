-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(39,14,0)
(51,18,0)
(50,20,0)
(17,6,0)
(8,26,0)
(4,43,0)
(21,23,0)
(15,29,0)
(57,3,0)
(0,28,0)
(36,12,0)
(52,9,0)
(32,39,0)
(11,40,0)
(2,17,0)
(30,63,0)
(47,30,0)
(49,39,0)
(19,23,0)
(7,14,0)
(39,0,0)
(41,58,0)
(40,39,0)
(18,60,0)
(33,0,0)
(17,30,0)
(38,5,0)
(26,42,0)
(60,18,0)
(63,30,0)
(29,15,0)
(49,46,0)
(22,10,0)
(31,6,0)
(43,15,0)
(42,46,0)
(35,63,0)
(20,45,0)
(58,26,0)
(43,26,0)
(16,43,0)
(27,49,0)
(12,28,0)
(3,40,0)
(42,26,0)
(15,46,0)
(12,46,0)
(34,22,0)
(18,26,0)
(14,39,0)
(63,39,0)
(37,49,0)
(1,55,0)
(60,22,0)
(54,58,0)
(60,46,0)
(49,5,0)
(23,39,0)
(6,17,0)
(5,45,0)
(23,46,0)
(15,43,0)
(25,42,0)
(40,3,0)
(53,63,0)
(48,40,0)
(61,0,0)
(62,29,0)
(29,62,0)
(44,18,0)
(30,17,0)
(13,12,0)
(30,47,0)
(58,62,0)
(17,23,0)
(23,17,0)
(56,29,0)
(24,15,0)
(62,58,0)
(59,60,0)
(26,9,0)
(14,46,0)
(63,53,1)
(13,62,1)
(62,29,1)
(15,46,1)
(63,39,1)
(53,35,1)
(24,58,1)
(12,13,1)
(17,2,1)
(23,39,1)
(8,6,1)
(3,57,1)
(60,18,1)
(51,59,1)
(34,60,1)
(20,50,1)
(26,42,1)
(40,39,1)
(11,48,1)
(6,31,1)
(21,3,1)
(50,6,1)
(13,22,1)
(12,46,1)
(37,27,1)
(19,21,1)
(60,46,1)
(42,25,1)
(36,12,1)
(44,51,1)
(39,14,1)
(58,54,1)
(22,34,1)
(23,46,1)
(13,3,1)
(14,7,1)
(27,20,1)
(43,26,1)
(7,32,1)
(49,39,1)
(49,46,1)
(18,44,1)
(17,30,1)
(48,39,1)
(62,58,1)
(18,26,1)
(29,15,1)
(4,16,1)
(42,46,1)
(16,24,1)
(35,23,1)
(15,43,1)
(40,11,1)
(59,62,1)
(6,17,1)
(31,17,1)
(56,15,1)
(23,19,1)
(58,26,1)
(14,46,1)
(49,37,1)
(57,40,1)
(30,47,1)
(54,41,1)
(17,23,1)
(41,26,1)
(3,40,1)
(29,56,1)
(25,8,1)
(13,5,1)
(30,63,1)
(43,4,1)
(38,49,1)
(5,38,1)
(2,30,1)
(39,14,2)
(44,62,2)
(41,6,2)
(30,63,2)
(53,3,2)
(4,58,2)
(54,6,2)
(49,46,2)
(30,47,2)
(6,3,2)
(51,62,2)
(40,39,2)
(35,3,2)
(50,6,2)
(16,58,2)
(59,62,2)
(26,42,2)
(8,6,2)
(15,43,2)
(12,46,2)
(29,15,2)
(60,18,2)
(60,46,2)
(14,46,2)
(23,39,2)
(25,6,2)
(5,6,2)
(62,29,2)
(3,40,2)
(24,58,2)
(2,3,2)
(43,26,2)
(38,6,2)
(62,6,2)
(17,30,2)
(49,39,2)
(15,58,2)
(21,3,2)
(18,62,2)
(6,17,2)
(34,62,2)
(36,12,2)
(42,46,2)
(22,62,2)
(62,58,2)
(58,6,2)
(19,3,2)
(56,58,2)
(23,46,2)
(30,3,2)
(17,23,2)
(58,26,2)
(42,6,2)
(31,3,2)
(27,6,2)
(26,6,2)
(29,58,2)
(63,39,2)
(37,6,2)
(18,26,2)
(43,58,2)
(20,6,2)
(23,3,2)
(63,3,2)
(60,62,2)
(15,46,2)
(17,3,2)
(49,6,2)
-----------------------------------
(0,)
(1,if (fgets(data+dataLen, (int)
(2,stdin)
(3,100-dataLen > 1)
(4,1)
(5,data[dataLen] = \\\'\\\\0\\\')
(6,fgets(data+dataLen, (int)
(7,data)
(8,dataLen)
(9,)
(10,)
(11,dataLen)
(12,return data;)
(13,data)
(14,strlen(data)
(15,data[dataLen-1])
(16,dataLen)
(17,fgets(data+dataLen, (int)
(18,dataLen-1)
(19,dataLen)
(20,printLine("fgets()
(21,data)
(22,data[dataLen-1] = \\\'\\\\0\\\')
(23,data+dataLen)
(24,data)
(25,data)
(26,dataLen = strlen(data)
(27,data)
(28,)
(29,data[dataLen-1] == \\\'\\\\n\\\')
(30,(int)
(31,NULL)
(32,dataLen)
(33,dataLen)
(34,\\\'\\\\0\\\')
(35,100)
(36,RET)
(37,dataLen)
(38,\\\'\\\\0\\\')
(39,dataLen = strlen(data)
(40,100-dataLen)
(41,dataLen)
(42,strlen(data)
(43,dataLen-1)
(44,1)
(45,)
(46,char * data)
(47,int)
(48,100)
(49,data[dataLen])
(50,"fgets()
(51,dataLen)
(52,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(53,dataLen)
(54,0)
(55,)
(56,\\\'\\\\n\\\')
(57,1)
(58,dataLen > 0)
(59,data)
(60,data[dataLen-1])
(61,if (100-dataLen > 1)
(62,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(63,100-dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
