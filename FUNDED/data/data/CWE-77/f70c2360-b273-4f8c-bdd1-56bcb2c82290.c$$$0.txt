-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_console_system_15_bad()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    switch(6)
    {
    case 6:
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
129,130
130,131
130,132
131,132
135,136
135,137
136,137
136,138
137,138
137,139
138,139
140,141
143,144
143,145
144,145
145,146
145,147
146,147
149,150
150,151
150,152
151,152
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,127,128,132,133,134,139,141,142,147,148,152,153
-----computeFrom-----
23,24
23,25
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
136,137
136,138
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_console_system_15_bad(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
void
CWE78_OS_Command_Injection__wchar_t_console_system_15_bad()
CWE78_OS_Command_Injection__wchar_t_console_system_15_bad
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
switch(6)    {    case 6:    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(24,26,0)
(3,27,0)
(64,25,0)
(4,29,0)
(29,62,0)
(21,41,0)
(1,27,0)
(55,17,0)
(59,12,0)
(44,7,0)
(35,50,0)
(58,43,0)
(2,13,0)
(8,21,0)
(63,28,0)
(34,46,0)
(12,27,0)
(42,13,0)
(48,29,0)
(20,50,0)
(48,27,0)
(60,6,0)
(40,25,0)
(33,41,0)
(37,50,0)
(39,21,0)
(16,7,0)
(53,6,0)
(23,30,0)
(12,7,0)
(28,6,0)
(44,27,0)
(14,13,0)
(13,42,0)
(21,8,0)
(15,27,0)
(5,12,0)
(38,31,0)
(12,41,0)
(41,31,0)
(7,44,0)
(0,50,0)
(29,48,0)
(10,15,0)
(54,6,0)
(22,46,0)
(27,6,0)
(32,51,0)
(8,7,0)
(11,6,0)
(15,10,0)
(52,8,0)
(17,56,0)
(13,7,0)
(30,62,0)
(45,44,0)
(18,42,0)
(41,12,0)
(43,56,0)
(65,10,0)
(27,28,0)
(46,50,0)
(61,28,0)
(41,21,0)
(57,8,0)
(47,48,0)
(36,64,0)
(49,15,0)
(51,50,0)
(7,46,0)
(21,39,0)
(31,41,0)
(21,39,1)
(20,23,1)
(9,27,1)
(12,27,1)
(1,3,1)
(14,2,1)
(52,12,1)
(41,21,1)
(19,43,1)
(45,16,1)
(21,8,1)
(37,51,1)
(59,42,1)
(65,15,1)
(27,1,1)
(48,47,1)
(18,13,1)
(33,21,1)
(42,18,1)
(48,27,1)
(41,33,1)
(42,13,1)
(41,12,1)
(44,45,1)
(36,31,1)
(29,48,1)
(28,63,1)
(58,17,1)
(4,31,1)
(5,59,1)
(27,28,1)
(51,32,1)
(40,64,1)
(20,42,1)
(32,9,1)
(12,7,1)
(13,14,1)
(57,52,1)
(10,65,1)
(8,7,1)
(43,58,1)
(38,41,1)
(16,9,1)
(12,5,1)
(8,57,1)
(13,7,1)
(10,15,1)
(15,49,1)
(64,36,1)
(3,28,1)
(20,40,1)
(23,29,1)
(31,38,1)
(44,27,1)
(55,10,1)
(17,55,1)
(7,44,1)
(2,7,1)
(49,37,1)
(63,61,1)
(31,41,1)
(15,27,1)
(49,20,1)
(19,10,1)
(47,4,1)
(44,9,2)
(51,9,2)
(29,31,2)
(59,42,2)
(13,7,2)
(21,42,2)
(44,27,2)
(33,42,2)
(41,42,2)
(40,31,2)
(27,28,2)
(37,9,2)
(2,9,2)
(7,44,2)
(21,8,2)
(12,7,2)
(36,31,2)
(48,31,2)
(23,31,2)
(8,7,2)
(43,10,2)
(17,10,2)
(29,48,2)
(52,42,2)
(48,27,2)
(20,9,2)
(32,9,2)
(42,9,2)
(15,27,2)
(7,9,2)
(31,42,2)
(5,42,2)
(38,42,2)
(45,9,2)
(14,9,2)
(10,15,2)
(12,27,2)
(8,42,2)
(47,31,2)
(42,13,2)
(4,31,2)
(16,9,2)
(41,12,2)
(55,10,2)
(12,42,2)
(21,39,2)
(18,9,2)
(31,41,2)
(64,31,2)
(13,9,2)
(57,42,2)
(58,10,2)
(41,21,2)
-----------------------------------
(0,case 6:)
(1,data_buf)
(2,100)
(3,data)
(4,dataLen)
(5,dataLen)
(6,)
(7,dataLen = wcslen(data)
(8,100-dataLen)
(9,6)
(10,SYSTEM(data)
(11,data_buf)
(12,data+dataLen)
(13,100-dataLen)
(14,dataLen)
(15,SYSTEM(data)
(16,dataLen)
(17,printLine("command execution failed!")
(18,1)
(19,RET)
(20,break;)
(21,(int)
(22,dataLen)
(23,\\\'\\\\0\\\')
(24,if (fgetws(data+dataLen, (int)
(25,)
(26,)
(27,data = data_buf)
(28,data_buf[100] = FULL_COMMAND)
(29,dataLen = wcslen(data)
(30,)
(31,fgetws(data+dataLen, (int)
(32,"Benign, fixed string")
(33,stdin)
(34,if (100-dataLen > 1)
(35,default:)
(36,"fgetws()
(37,break;)
(38,NULL)
(39,int)
(40,\\\'\\\\0\\\')
(41,fgetws(data+dataLen, (int)
(42,100-dataLen > 1)
(43,exit(1)
(44,wcslen(data)
(45,data)
(46,)
(47,data)
(48,wcslen(data)
(49,data)
(50,)
(51,printLine("Benign, fixed string")
(52,100)
(53,switch(6)
(54,if (SYSTEM(data)
(55,"command execution failed!")
(56,)
(57,dataLen)
(58,1)
(59,data)
(60,data)
(61,data_buf)
(62,)
(63,FULL_COMMAND)
(64,printLine("fgetws()
(65,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
