-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_w32_spawnvp_16_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    while(1)
    {
        {
            /* Read input from a file */
            size_t dataLen = strlen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgets() failed");
                        /* Restore NUL terminator if fgets fails */
                        data[dataLen] = '\0';
                    }
                    fclose(pFile);
                }
            }
        }
        break;
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnvp(_P_WAIT, COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
31,32
31,33
31,34
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
53,55
55,56
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
63,66
64,65
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
78,81
78,82
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
90,91
91,92
91,93
93,94
95,96
97,98
99,100
99,101
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
110,111
113,114
114,115
114,116
115,116
117,118
120,121
120,122
121,122
122,123
122,124
124,125
124,126
124,127
124,128
128,129
129,130
129,131
129,132
129,133
130,131
132,133
134,135
136,137
138,139
139,140
139,141
139,142
139,143
140,141
142,143
144,145
146,147
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,35,37,41,43,47,49,50,54,56,57,62,65,67,68,72,74,80,83,85,88,89,92,94,96,98,103,104,109,111,112,116,118,119,123,125,126,127,131,133,135,137,141,143,145,147
-----computeFrom-----
23,24
23,25
52,53
52,54
53,54
53,55
60,61
60,62
70,71
70,72
77,78
77,79
81,82
81,83
91,92
91,93
106,107
106,108
-----guardedBy-----
56,111
74,98
72,118
83,109
94,111
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_w32_spawnvp_16_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    while(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
void
CWE78_OS_Command_Injection__char_file_w32_spawnvp_16_bad()
CWE78_OS_Command_Injection__char_file_w32_spawnvp_16_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    while(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
while(1)    {        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }
1
{        {            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }        break;    }
{            /* Read input from a file */            size_t dataLen = strlen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }                    fclose(pFile);                }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgets() failed");                        /* Restore NUL terminator if fgets fails */                        data[dataLen] = '\0';                    }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnvp(_P_WAIT, COMMAND_INT, args);
_spawnvp(_P_WAIT, COMMAND_INT, args)
_spawnvp
_spawnvp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(39,67,0)
(51,59,0)
(30,57,0)
(63,0,0)
(9,53,0)
(48,1,0)
(15,0,0)
(17,52,0)
(60,61,0)
(66,67,0)
(14,67,0)
(22,43,0)
(53,20,0)
(20,53,0)
(40,48,0)
(35,22,0)
(50,43,0)
(47,22,0)
(32,46,0)
(26,0,0)
(22,21,0)
(9,14,0)
(55,30,0)
(37,51,0)
(14,43,0)
(11,12,0)
(12,43,0)
(56,23,0)
(30,46,0)
(45,57,0)
(4,51,0)
(7,24,0)
(8,48,0)
(25,0,0)
(6,15,0)
(67,25,0)
(53,9,0)
(10,25,0)
(12,67,0)
(18,50,0)
(49,25,0)
(29,23,0)
(41,65,0)
(14,9,0)
(43,12,0)
(59,15,0)
(9,57,0)
(64,65,0)
(65,57,0)
(53,50,0)
(23,57,0)
(61,28,0)
(38,61,0)
(21,22,0)
(62,14,0)
(13,43,0)
(67,0,0)
(50,53,0)
(34,51,0)
(31,50,0)
(9,24,0)
(51,15,0)
(33,9,0)
(16,21,0)
(54,60,0)
(58,60,0)
(3,1,0)
(60,67,0)
(5,68,0)
(24,9,0)
(68,28,0)
(27,59,0)
(36,14,0)
(19,48,0)
(57,23,0)
(43,48,0)
(60,43,0)
(44,0,0)
(57,52,0)
(59,27,1)
(38,60,1)
(22,35,1)
(53,20,1)
(22,43,1)
(5,24,1)
(33,53,1)
(67,66,1)
(67,25,1)
(34,37,1)
(7,9,1)
(53,50,1)
(56,45,1)
(43,12,1)
(31,14,1)
(18,31,1)
(21,16,1)
(16,22,1)
(9,53,1)
(54,68,1)
(39,25,1)
(36,62,1)
(60,67,1)
(14,36,1)
(35,47,1)
(29,56,1)
(65,57,1)
(66,39,1)
(68,5,1)
(25,49,1)
(12,11,1)
(57,23,1)
(27,3,1)
(41,57,1)
(60,58,1)
(12,67,1)
(51,59,1)
(23,29,1)
(27,42,1)
(14,67,1)
(65,64,1)
(62,65,1)
(11,13,1)
(61,38,1)
(37,59,1)
(50,18,1)
(30,55,1)
(2,51,1)
(51,4,1)
(14,43,1)
(9,57,1)
(30,57,1)
(42,67,1)
(60,43,1)
(24,7,1)
(64,41,1)
(55,61,1)
(47,43,1)
(9,33,1)
(13,42,1)
(45,21,1)
(49,10,1)
(21,22,1)
(9,14,1)
(4,34,1)
(3,30,1)
(58,54,1)
(3,65,1)
(24,9,1)
(3,21,1)
(50,43,1)
(55,24,1)
(53,50,2)
(54,24,2)
(57,23,2)
(65,57,2)
(35,42,2)
(38,24,2)
(31,65,2)
(12,67,2)
(18,65,2)
(60,43,2)
(12,42,2)
(43,42,2)
(57,21,2)
(11,42,2)
(13,42,2)
(30,57,2)
(50,65,2)
(9,53,2)
(5,24,2)
(64,21,2)
(23,21,2)
(7,65,2)
(50,43,2)
(14,65,2)
(24,9,2)
(60,24,2)
(9,65,2)
(33,65,2)
(36,65,2)
(16,42,2)
(65,21,2)
(30,65,2)
(14,67,2)
(62,65,2)
(43,12,2)
(53,20,2)
(22,43,2)
(41,21,2)
(53,65,2)
(55,65,2)
(68,24,2)
(14,43,2)
(9,57,2)
(22,42,2)
(29,21,2)
(56,21,2)
(67,25,2)
(60,67,2)
(58,24,2)
(47,42,2)
(45,21,2)
(51,59,2)
(3,42,2)
(9,14,2)
(61,24,2)
(21,22,2)
(21,42,2)
(24,65,2)
-----------------------------------
(0,)
(1,)
(2,RET)
(3,break;)
(4,args)
(5,"fgets()
(6,args)
(7,NULL)
(8,dataLen)
(9,fgets(data+dataLen, (int)
(10,dataBuffer)
(11,data)
(12,strlen(data)
(13,dataLen)
(14,data+dataLen)
(15,)
(16,1)
(17,if (pFile != NULL)
(18,dataLen)
(19,pFile)
(20,int)
(21,100-dataLen > 1)
(22,100-dataLen)
(23,fopen(FILENAME, "r")
(24,fgets(data+dataLen, (int)
(25,dataBuffer[100] = COMMAND_ARG2)
(26,data)
(27,args)
(28,)
(29,"r")
(30,fclose(pFile)
(31,100)
(32,if (fgets(data+dataLen, (int)
(33,pFile)
(34,COMMAND_INT)
(35,dataLen)
(36,dataLen)
(37,_P_WAIT)
(38,\\\'\\\\0\\\')
(39,data)
(40,if (100-dataLen > 1)
(41,pFile)
(42,1)
(43,dataLen = strlen(data)
(44,dataBuffer)
(45,pFile)
(46,)
(47,100)
(48,)
(49,COMMAND_ARG2)
(50,100-dataLen)
(51,_spawnvp(_P_WAIT, COMMAND_INT, args)
(52,)
(53,(int)
(54,data)
(55,pFile)
(56,FILENAME)
(57,pFile = fopen(FILENAME, "r")
(58,dataLen)
(59,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(60,data[dataLen])
(61,data[dataLen] = \\\'\\\\0\\\')
(62,data)
(63,while(1)
(64,NULL)
(65,pFile != NULL)
(66,dataBuffer)
(67,data = dataBuffer)
(68,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
