-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_54_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_54_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_54_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_54_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink
data
data
-----joern-----
(13,8,0)
(14,49,0)
(69,32,0)
(60,70,0)
(8,70,0)
(0,2,0)
(32,13,0)
(51,56,0)
(6,58,0)
(56,67,0)
(16,67,0)
(24,16,0)
(52,29,0)
(14,29,0)
(59,27,0)
(47,9,0)
(30,46,0)
(4,16,0)
(28,38,0)
(5,34,0)
(68,13,0)
(31,65,0)
(7,37,0)
(10,30,0)
(9,46,0)
(11,26,0)
(3,5,0)
(37,13,0)
(12,30,0)
(39,7,0)
(29,52,0)
(58,65,0)
(64,32,0)
(67,38,0)
(14,16,0)
(18,13,0)
(29,14,0)
(16,14,0)
(65,67,0)
(5,37,0)
(66,8,0)
(21,38,0)
(61,29,0)
(41,46,0)
(50,46,0)
(45,7,0)
(46,63,0)
(9,34,0)
(67,18,0)
(60,13,0)
(26,27,0)
(56,13,0)
(1,19,0)
(34,5,0)
(7,46,0)
(35,37,0)
(42,9,0)
(50,13,0)
(62,52,0)
(40,67,0)
(46,50,0)
(2,43,0)
(32,59,0)
(36,56,0)
(15,65,0)
(65,58,0)
(17,30,0)
(55,60,0)
(54,8,0)
(48,50,0)
(56,29,0)
(37,5,0)
(33,59,0)
(38,70,0)
(57,70,0)
(12,2,0)
(23,12,0)
(53,13,0)
(37,7,0)
(44,18,0)
(49,14,0)
(18,67,0)
(25,70,0)
(29,56,0)
(34,9,0)
(12,13,0)
(22,63,0)
(13,70,0)
(30,12,0)
(32,67,0)
(16,67,1)
(55,58,1)
(46,50,1)
(29,56,1)
(55,34,1)
(17,23,1)
(3,37,1)
(42,47,1)
(34,9,1)
(34,5,1)
(13,8,1)
(52,29,1)
(60,13,1)
(14,16,1)
(14,49,1)
(56,67,1)
(16,24,1)
(37,7,1)
(48,41,1)
(36,58,1)
(55,2,1)
(69,64,1)
(58,65,1)
(60,55,1)
(0,12,1)
(54,66,1)
(58,6,1)
(41,52,1)
(29,61,1)
(18,13,1)
(56,51,1)
(24,4,1)
(11,52,1)
(52,62,1)
(10,17,1)
(39,45,1)
(2,0,1)
(26,11,1)
(51,36,1)
(50,48,1)
(12,13,1)
(64,26,1)
(62,29,1)
(7,39,1)
(37,13,1)
(31,67,1)
(40,13,1)
(6,65,1)
(53,8,1)
(68,53,1)
(61,14,1)
(35,9,1)
(32,69,1)
(13,68,1)
(32,13,1)
(7,46,1)
(65,67,1)
(5,37,1)
(12,30,1)
(59,33,1)
(20,60,1)
(50,13,1)
(15,31,1)
(67,18,1)
(9,42,1)
(18,44,1)
(5,3,1)
(65,15,1)
(33,32,1)
(55,59,1)
(30,10,1)
(4,56,1)
(30,46,1)
(32,67,1)
(56,13,1)
(29,14,1)
(45,35,1)
(8,54,1)
(9,46,1)
(23,34,1)
(44,40,1)
(47,46,1)
(61,58,2)
(32,13,2)
(52,29,2)
(17,34,2)
(7,9,2)
(59,52,2)
(14,16,2)
(9,52,2)
(5,37,2)
(11,52,2)
(64,52,2)
(2,34,2)
(52,58,2)
(69,52,2)
(23,34,2)
(30,34,2)
(37,7,2)
(42,52,2)
(50,52,2)
(37,9,2)
(56,58,2)
(26,52,2)
(29,14,2)
(29,58,2)
(46,50,2)
(12,30,2)
(4,58,2)
(56,13,2)
(29,56,2)
(3,9,2)
(60,13,2)
(48,52,2)
(35,9,2)
(34,52,2)
(16,67,2)
(37,13,2)
(24,58,2)
(39,9,2)
(14,58,2)
(12,13,2)
(62,58,2)
(32,67,2)
(36,58,2)
(45,9,2)
(47,52,2)
(65,67,2)
(5,9,2)
(56,67,2)
(16,58,2)
(9,46,2)
(50,13,2)
(41,52,2)
(7,46,2)
(33,52,2)
(34,9,2)
(13,8,2)
(18,13,2)
(58,65,2)
(46,52,2)
(67,18,2)
(51,58,2)
(34,5,2)
(12,34,2)
(10,34,2)
(14,49,2)
(32,52,2)
(30,46,2)
(0,34,2)
-----------------------------------
(0,\\\'\\\\0\\\')
(1,if (fgets(data+dataLen, (int)
(2,data[dataLen-1] = \\\'\\\\0\\\')
(3,\\\'\\\\n\\\')
(4,100)
(5,data[dataLen-1] == \\\'\\\\n\\\')
(6,1)
(7,dataLen-1)
(8,dataBuffer[100] = COMMAND_ARG2)
(9,dataLen > 0)
(10,1)
(11,"fgets()
(12,data[dataLen-1])
(13,data = dataBuffer)
(14,(int)
(15,dataLen)
(16,100-dataLen)
(17,dataLen)
(18,strlen(data)
(19,)
(20,RET)
(21,if (100-dataLen > 1)
(22,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(23,data)
(24,dataLen)
(25,dataBuffer)
(26,printLine("fgets()
(27,)
(28,dataLen)
(29,fgets(data+dataLen, (int)
(30,dataLen-1)
(31,100)
(32,data[dataLen])
(33,\\\'\\\\0\\\')
(34,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(35,data)
(36,data)
(37,data[dataLen-1])
(38,)
(39,1)
(40,dataLen)
(41,dataLen)
(42,0)
(43,)
(44,data)
(45,dataLen)
(46,dataLen = strlen(data)
(47,dataLen)
(48,data)
(49,int)
(50,strlen(data)
(51,dataLen)
(52,fgets(data+dataLen, (int)
(53,data)
(54,COMMAND_ARG2)
(55,data)
(56,data+dataLen)
(57,data)
(58,100-dataLen > 1)
(59,data[dataLen] = \\\'\\\\0\\\')
(60,CWE78_OS_Command_Injection__char_console_w32_spawnv_54b_badSink(data)
(61,stdin)
(62,NULL)
(63,)
(64,data)
(65,100-dataLen)
(66,dataBuffer)
(67,dataLen = strlen(data)
(68,dataBuffer)
(69,dataLen)
(70,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
