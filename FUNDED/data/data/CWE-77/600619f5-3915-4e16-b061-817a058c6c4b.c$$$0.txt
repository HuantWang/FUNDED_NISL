-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_64_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_64_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink
&data
data
data
-----joern-----
(63,28,0)
(5,67,0)
(1,49,0)
(34,14,0)
(71,62,0)
(16,4,0)
(44,28,0)
(59,6,0)
(14,34,0)
(37,41,0)
(23,30,0)
(70,4,0)
(37,71,0)
(7,38,0)
(27,26,0)
(35,71,0)
(5,71,0)
(19,48,0)
(43,62,0)
(70,35,0)
(14,3,0)
(3,39,0)
(64,8,0)
(26,3,0)
(44,67,0)
(55,3,0)
(52,29,0)
(41,37,0)
(69,31,0)
(13,5,0)
(5,57,0)
(9,14,0)
(48,8,0)
(24,48,0)
(53,62,0)
(17,28,0)
(38,71,0)
(8,48,0)
(65,40,0)
(33,29,0)
(30,22,0)
(71,4,0)
(3,49,0)
(42,4,0)
(67,5,0)
(60,12,0)
(48,26,0)
(21,71,0)
(28,44,0)
(57,41,0)
(40,10,0)
(26,71,0)
(32,38,0)
(57,5,0)
(67,44,0)
(12,65,0)
(6,22,0)
(65,71,0)
(18,37,0)
(47,67,0)
(45,14,0)
(26,48,0)
(29,3,0)
(50,65,0)
(36,35,0)
(68,57,0)
(25,19,0)
(20,49,0)
(2,34,0)
(61,12,0)
(54,57,0)
(39,3,0)
(66,39,0)
(15,26,0)
(48,19,0)
(51,40,0)
(65,12,0)
(49,4,0)
(62,4,0)
(29,8,0)
(8,29,0)
(8,64,0)
(28,41,0)
(11,56,0)
(41,56,0)
(38,30,0)
(39,71,0)
(35,70,0)
(58,41,0)
(38,3,0)
(46,71,0)
(12,41,0)
(41,37,1)
(43,53,1)
(59,19,1)
(48,26,1)
(36,40,1)
(71,46,1)
(35,36,1)
(8,64,1)
(19,25,1)
(12,60,1)
(46,21,1)
(66,55,1)
(54,13,1)
(18,58,1)
(29,3,1)
(5,71,1)
(5,57,1)
(57,41,1)
(28,41,1)
(37,71,1)
(70,35,1)
(60,61,1)
(62,43,1)
(17,63,1)
(40,51,1)
(8,29,1)
(61,50,1)
(58,19,1)
(44,67,1)
(71,62,1)
(25,48,1)
(63,41,1)
(15,27,1)
(24,8,1)
(50,44,1)
(32,6,1)
(35,71,1)
(68,54,1)
(36,44,1)
(23,38,1)
(2,14,1)
(48,8,1)
(13,28,1)
(38,7,1)
(55,71,1)
(52,26,1)
(36,30,1)
(14,45,1)
(34,14,1)
(67,5,1)
(51,65,1)
(28,17,1)
(67,47,1)
(48,24,1)
(38,71,1)
(0,70,1)
(26,71,1)
(21,62,1)
(26,3,1)
(19,48,1)
(44,28,1)
(37,18,1)
(6,59,1)
(33,52,1)
(34,2,1)
(30,23,1)
(38,3,1)
(39,71,1)
(57,68,1)
(36,34,1)
(9,3,1)
(27,34,1)
(47,5,1)
(12,41,1)
(65,71,1)
(29,33,1)
(14,3,1)
(26,15,1)
(65,12,1)
(7,32,1)
(45,9,1)
(39,66,1)
(3,39,1)
(44,19,2)
(8,34,2)
(37,71,2)
(29,34,2)
(5,57,2)
(61,44,2)
(26,71,2)
(60,44,2)
(38,71,2)
(29,3,2)
(28,41,2)
(39,71,2)
(15,34,2)
(38,3,2)
(57,41,2)
(26,34,2)
(7,19,2)
(17,19,2)
(59,19,2)
(3,39,2)
(54,28,2)
(28,19,2)
(34,14,2)
(5,28,2)
(58,19,2)
(44,67,2)
(23,19,2)
(48,34,2)
(30,19,2)
(5,71,2)
(68,28,2)
(26,3,2)
(6,19,2)
(50,44,2)
(44,28,2)
(48,26,2)
(14,3,2)
(18,19,2)
(41,37,2)
(25,34,2)
(13,28,2)
(57,28,2)
(12,41,2)
(51,44,2)
(65,44,2)
(19,34,2)
(27,34,2)
(32,19,2)
(71,62,2)
(41,19,2)
(63,19,2)
(19,48,2)
(65,71,2)
(65,12,2)
(38,19,2)
(33,34,2)
(24,34,2)
(67,28,2)
(40,44,2)
(12,44,2)
(8,64,2)
(70,35,2)
(47,28,2)
(37,19,2)
(67,5,2)
(52,34,2)
(48,8,2)
(8,29,2)
(35,71,2)
-----------------------------------
(0,RET)
(1,dataLen)
(2,1)
(3,dataLen = strlen(data)
(4,)
(5,data[dataLen-1])
(6,printLine("fgets()
(7,dataLen)
(8,(int)
(9,100)
(10,)
(11,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(12,dataLen-1)
(13,data)
(14,100-dataLen)
(15,dataLen)
(16,data)
(17,0)
(18,data)
(19,fgets(data+dataLen, (int)
(20,if (100-dataLen > 1)
(21,data)
(22,)
(23,\\\'\\\\0\\\')
(24,stdin)
(25,NULL)
(26,data+dataLen)
(27,data)
(28,dataLen > 0)
(29,100-dataLen)
(30,data[dataLen] = \\\'\\\\0\\\')
(31,)
(32,data)
(33,dataLen)
(34,100-dataLen > 1)
(35,&data)
(36,data)
(37,strlen(data)
(38,data[dataLen])
(39,strlen(data)
(40,data[dataLen-1] = \\\'\\\\0\\\')
(41,dataLen = strlen(data)
(42,dataBuffer)
(43,COMMAND_ARG2)
(44,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(45,dataLen)
(46,dataBuffer)
(47,\\\'\\\\n\\\')
(48,fgets(data+dataLen, (int)
(49,)
(50,data)
(51,\\\'\\\\0\\\')
(52,100)
(53,dataBuffer)
(54,dataLen)
(55,dataLen)
(56,)
(57,dataLen-1)
(58,dataLen)
(59,"fgets()
(60,1)
(61,dataLen)
(62,dataBuffer[100] = COMMAND_ARG2)
(63,dataLen)
(64,int)
(65,data[dataLen-1])
(66,data)
(67,data[dataLen-1] == \\\'\\\\n\\\')
(68,1)
(69,if (fgets(data+dataLen, (int)
(70,CWE78_OS_Command_Injection__char_console_w32_spawnlp_64b_badSink(&data)
(71,data = dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
