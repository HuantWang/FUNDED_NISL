-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(1)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* execl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
31,32
32,33
32,34
32,35
33,34
35,36
38,39
39,40
39,41
39,42
39,43
39,44
39,45
40,41
42,43
44,45
46,47
48,49
50,51
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,36,37,41,43,45,47,49,51
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* execl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B2()
goodG2B2
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* execl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
1
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(5,2,0)
(18,9,0)
(15,4,0)
(11,5,0)
(17,4,0)
(7,2,0)
(6,9,0)
(9,2,0)
(1,12,0)
(21,1,0)
(20,2,0)
(5,9,0)
(3,2,0)
(4,2,0)
(0,4,0)
(16,1,0)
(8,4,0)
(14,5,0)
(19,4,0)
(1,5,0)
(19,15,1)
(11,9,1)
(14,11,1)
(1,16,1)
(15,8,1)
(8,13,1)
(4,0,1)
(10,4,1)
(1,5,1)
(18,6,1)
(5,9,1)
(5,14,1)
(17,19,1)
(21,13,1)
(13,5,1)
(16,21,1)
(9,18,1)
(0,17,1)
(8,1,1)
(16,13,2)
(5,9,2)
(1,5,2)
(21,13,2)
(1,13,2)
-----------------------------------
(0,NULL)
(1,strcat(data, "*.*")
(2,)
(3,data)
(4,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(5,data = dataBuffer)
(6,dataBuffer)
(7,if(1)
(8,COMMAND_INT_PATH)
(9,dataBuffer[100] = COMMAND_ARG2)
(10,RET)
(11,data)
(12,)
(13,1)
(14,dataBuffer)
(15,COMMAND_INT_PATH)
(16,"*.*")
(17,COMMAND_ARG3)
(18,COMMAND_ARG2)
(19,COMMAND_ARG1)
(20,dataBuffer)
(21,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
