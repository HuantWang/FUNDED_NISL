-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    /* FIX: Append a fixed string to data (not user / external input) */
    strcat(data, "*.*");
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
36,37
36,38
37,38
37,39
38,39
40,41
43,44
43,45
44,45
45,46
45,47
46,47
49,50
50,51
50,52
51,52
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,39,41,42,47,48,52,53
-----computeFrom-----
23,24
23,25
36,37
36,38
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B()
goodG2B
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(3,8,0)
(18,4,0)
(10,8,0)
(6,2,0)
(11,4,0)
(17,8,0)
(7,17,0)
(16,17,0)
(21,8,0)
(19,17,0)
(1,8,0)
(10,17,0)
(17,4,0)
(15,16,0)
(13,2,0)
(14,10,0)
(22,16,0)
(9,15,0)
(20,6,0)
(16,15,0)
(5,13,0)
(4,8,0)
(12,10,0)
(17,4,1)
(15,9,1)
(20,13,1)
(0,15,1)
(18,11,1)
(4,18,1)
(9,16,1)
(7,4,1)
(12,17,1)
(19,7,1)
(16,22,1)
(10,17,1)
(10,14,1)
(15,16,1)
(13,5,1)
(22,10,1)
(14,12,1)
(17,19,1)
(16,17,1)
(0,6,1)
(6,20,1)
(5,15,1)
(20,15,2)
(15,16,2)
(16,17,2)
(5,15,2)
(6,15,2)
(13,15,2)
(17,4,2)
(10,17,2)
-----------------------------------
(0,RET)
(1,if (SYSTEM(data)
(2,)
(3,data_buf)
(4,data_buf[100] = FULL_COMMAND)
(5,"command execution failed!")
(6,exit(1)
(7,data)
(8,)
(9,0)
(10,strcat(data, "*.*")
(11,data_buf)
(12,data)
(13,printLine("command execution failed!")
(14,"*.*")
(15,SYSTEM(data)
(16,SYSTEM(data)
(17,data = data_buf)
(18,FULL_COMMAND)
(19,data_buf)
(20,1)
(21,data)
(22,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
