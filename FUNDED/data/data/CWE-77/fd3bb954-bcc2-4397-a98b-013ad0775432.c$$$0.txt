-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* spawnl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
49,52
49,53
49,54
49,55
49,56
50,51
52,53
54,55
56,57
58,59
60,61
62,63
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,38,39,44,46,47,51,53,55,57,59,61,63
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnl
_spawnl
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(13,18,0)
(18,0,0)
(12,8,0)
(2,18,0)
(24,0,0)
(20,12,0)
(17,6,0)
(12,25,0)
(5,18,0)
(8,14,0)
(10,6,0)
(3,12,0)
(7,18,0)
(9,8,0)
(14,0,0)
(19,14,0)
(16,8,0)
(23,0,0)
(6,1,0)
(6,8,0)
(15,18,0)
(21,18,0)
(26,14,0)
(8,0,0)
(22,0,0)
(5,6,1)
(20,4,1)
(19,26,1)
(6,17,1)
(8,16,1)
(15,2,1)
(18,21,1)
(11,18,1)
(7,13,1)
(12,3,1)
(4,8,1)
(3,20,1)
(21,7,1)
(14,19,1)
(6,8,1)
(12,8,1)
(8,14,1)
(13,15,1)
(9,14,1)
(5,12,1)
(2,5,1)
(16,9,1)
(10,4,1)
(17,10,1)
(10,4,2)
(8,14,2)
(6,4,2)
(17,4,2)
(20,4,2)
(3,4,2)
(12,8,2)
(6,8,2)
(12,4,2)
-----------------------------------
(0,)
(1,)
(2,COMMAND_INT_PATH)
(3,"*.*")
(4,globalReturnsTrueOrFalse()
(5,_P_WAIT)
(6,strcat(data, "*.*")
(7,COMMAND_ARG3)
(8,data = dataBuffer)
(9,data)
(10,data)
(11,RET)
(12,strcat(data, "*.*")
(13,COMMAND_ARG1)
(14,dataBuffer[100] = COMMAND_ARG2)
(15,COMMAND_INT_PATH)
(16,dataBuffer)
(17,"*.*")
(18,_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(19,COMMAND_ARG2)
(20,data)
(21,NULL)
(22,data)
(23,dataBuffer)
(24,if(globalReturnsTrueOrFalse()
(25,)
(26,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
