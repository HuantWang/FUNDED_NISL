-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_64_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execvp_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_64_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_64_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_64_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execvp_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_execvp_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_execvp_64b_badSink
CWE78_OS_Command_Injection__char_console_w32_execvp_64b_badSink
&data
data
data
-----joern-----
(50,18,0)
(13,61,0)
(55,60,0)
(57,47,0)
(18,51,0)
(53,50,0)
(47,51,0)
(52,4,0)
(32,64,0)
(5,16,0)
(68,62,0)
(31,39,0)
(33,21,0)
(54,67,0)
(23,62,0)
(27,31,0)
(62,4,0)
(30,51,0)
(45,5,0)
(56,51,0)
(38,18,0)
(21,55,0)
(63,35,0)
(70,39,0)
(64,29,0)
(63,67,0)
(68,55,0)
(65,46,0)
(58,18,0)
(46,36,0)
(44,31,0)
(46,27,0)
(31,27,0)
(48,32,0)
(40,2,0)
(68,3,0)
(43,64,0)
(6,14,0)
(17,36,0)
(4,47,0)
(16,4,0)
(27,46,0)
(67,39,0)
(20,49,0)
(22,35,0)
(41,25,0)
(15,3,0)
(66,16,0)
(67,63,0)
(39,61,0)
(3,68,0)
(7,51,0)
(37,68,0)
(49,18,0)
(4,50,0)
(30,25,0)
(36,18,0)
(9,62,0)
(39,49,0)
(16,5,0)
(21,4,0)
(63,18,0)
(59,16,0)
(25,18,0)
(12,67,0)
(55,68,0)
(62,68,0)
(36,70,0)
(70,36,0)
(18,24,0)
(50,4,0)
(60,55,0)
(36,46,0)
(32,18,0)
(10,70,0)
(32,4,0)
(55,21,0)
(42,70,0)
(11,21,0)
(19,32,0)
(35,1,0)
(71,24,0)
(24,51,0)
(14,29,0)
(62,18,0)
(69,24,0)
(25,30,0)
(0,47,0)
(26,31,0)
(8,63,0)
(49,39,0)
(34,39,0)
(39,49,1)
(27,46,1)
(9,5,1)
(3,68,1)
(37,55,1)
(23,9,1)
(10,17,1)
(68,62,1)
(43,32,1)
(18,38,1)
(41,5,1)
(31,44,1)
(55,21,1)
(32,18,1)
(15,68,1)
(12,54,1)
(26,39,1)
(68,55,1)
(46,65,1)
(59,66,1)
(50,53,1)
(16,59,1)
(3,15,1)
(71,69,1)
(55,60,1)
(41,27,1)
(11,62,1)
(36,70,1)
(42,10,1)
(16,4,1)
(66,4,1)
(21,4,1)
(49,20,1)
(52,18,1)
(24,71,1)
(28,30,1)
(62,23,1)
(27,31,1)
(44,26,1)
(17,31,1)
(46,36,1)
(35,22,1)
(64,43,1)
(63,18,1)
(31,39,1)
(25,18,1)
(68,37,1)
(36,18,1)
(20,34,1)
(4,50,1)
(34,3,1)
(67,39,1)
(65,36,1)
(6,3,1)
(48,14,1)
(62,18,1)
(30,25,1)
(67,12,1)
(5,45,1)
(22,63,1)
(70,39,1)
(54,8,1)
(25,41,1)
(14,6,1)
(50,18,1)
(63,67,1)
(18,24,1)
(70,42,1)
(33,11,1)
(5,16,1)
(19,48,1)
(62,4,1)
(41,64,1)
(58,24,1)
(45,16,1)
(32,4,1)
(21,33,1)
(53,52,1)
(41,35,1)
(38,58,1)
(49,18,1)
(32,19,1)
(8,27,1)
(3,5,2)
(55,21,2)
(4,50,2)
(32,4,2)
(43,3,2)
(20,3,2)
(11,5,2)
(16,4,2)
(64,3,2)
(5,16,2)
(70,39,2)
(27,3,2)
(32,3,2)
(63,67,2)
(8,27,2)
(30,25,2)
(23,5,2)
(50,18,2)
(62,18,2)
(27,46,2)
(68,62,2)
(31,39,2)
(31,3,2)
(44,3,2)
(48,3,2)
(68,55,2)
(36,70,2)
(67,27,2)
(62,5,2)
(10,31,2)
(49,3,2)
(25,18,2)
(65,31,2)
(55,5,2)
(63,18,2)
(15,5,2)
(70,31,2)
(46,31,2)
(46,36,2)
(36,31,2)
(26,3,2)
(55,60,2)
(68,5,2)
(22,27,2)
(67,39,2)
(17,31,2)
(27,31,2)
(39,3,2)
(12,27,2)
(9,5,2)
(37,5,2)
(42,31,2)
(18,24,2)
(39,49,2)
(49,18,2)
(34,3,2)
(21,5,2)
(54,27,2)
(21,4,2)
(3,68,2)
(19,3,2)
(35,27,2)
(14,3,2)
(63,27,2)
(32,18,2)
(62,4,2)
(33,5,2)
(6,3,2)
(36,18,2)
-----------------------------------
(0,dataLen)
(1,)
(2,)
(3,fgets(data+dataLen, (int)
(4,dataLen = strlen(data)
(5,100-dataLen > 1)
(6,"fgets()
(7,dataBuffer)
(8,data)
(9,data)
(10,dataLen)
(11,100)
(12,1)
(13,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(14,printLine("fgets()
(15,NULL)
(16,100-dataLen)
(17,data)
(18,data = dataBuffer)
(19,dataLen)
(20,data)
(21,100-dataLen)
(22,\\\'\\\\0\\\')
(23,dataLen)
(24,dataBuffer[100] = COMMAND_ARG2)
(25,&data)
(26,dataLen)
(27,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(28,RET)
(29,)
(30,CWE78_OS_Command_Injection__char_console_w32_execvp_64b_badSink(&data)
(31,dataLen > 0)
(32,data[dataLen])
(33,dataLen)
(34,dataLen)
(35,data[dataLen-1] = \\\'\\\\0\\\')
(36,data[dataLen-1])
(37,stdin)
(38,dataBuffer)
(39,dataLen = strlen(data)
(40,if (fgets(data+dataLen, (int)
(41,data)
(42,1)
(43,\\\'\\\\0\\\')
(44,0)
(45,1)
(46,data[dataLen-1] == \\\'\\\\n\\\')
(47,)
(48,data)
(49,strlen(data)
(50,strlen(data)
(51,)
(52,dataLen)
(53,data)
(54,dataLen)
(55,(int)
(56,data)
(57,if (100-dataLen > 1)
(58,data)
(59,dataLen)
(60,int)
(61,)
(62,data+dataLen)
(63,data[dataLen-1])
(64,data[dataLen] = \\\'\\\\0\\\')
(65,\\\'\\\\n\\\')
(66,100)
(67,dataLen-1)
(68,fgets(data+dataLen, (int)
(69,dataBuffer)
(70,dataLen-1)
(71,COMMAND_ARG2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
