-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    switch(6)
    {
    case 6:
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* wspawnlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
34,35
34,36
34,37
35,36
37,38
42,43
43,44
43,45
44,45
48,49
49,50
49,51
49,52
49,53
49,54
49,55
49,56
50,51
52,53
54,55
56,57
58,59
60,61
62,63
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,36,38,39,40,41,45,46,47,51,53,55,57,59,61,63
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* wspawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* wspawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_wspawnlp
_wspawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(8,18,0)
(10,11,0)
(3,6,0)
(4,18,0)
(9,11,0)
(14,1,0)
(1,18,0)
(15,8,0)
(16,6,0)
(12,6,0)
(23,5,0)
(0,11,0)
(19,6,0)
(21,18,0)
(22,18,0)
(7,8,0)
(5,11,0)
(24,6,0)
(17,6,0)
(13,1,0)
(6,18,0)
(20,11,0)
(1,8,0)
(0,5,1)
(17,3,1)
(5,23,1)
(20,2,1)
(6,24,1)
(12,19,1)
(14,13,1)
(1,14,1)
(1,8,1)
(23,2,1)
(13,8,1)
(3,20,1)
(25,6,1)
(2,1,1)
(15,7,1)
(16,12,1)
(19,17,1)
(3,0,1)
(24,16,1)
(8,15,1)
(0,2,2)
(20,2,2)
(1,8,2)
(23,2,2)
(5,2,2)
-----------------------------------
(0,break;)
(1,data = dataBuffer)
(2,6)
(3,_P_WAIT)
(4,dataBuffer)
(5,printLine("Benign, fixed string")
(6,_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(7,dataBuffer)
(8,dataBuffer[100] = COMMAND_ARG2)
(9,case 6:)
(10,default:)
(11,)
(12,COMMAND_ARG1)
(13,data)
(14,dataBuffer)
(15,COMMAND_ARG2)
(16,COMMAND_ARG3)
(17,COMMAND_INT)
(18,)
(19,COMMAND_INT)
(20,break;)
(21,switch(6)
(22,data)
(23,"Benign, fixed string")
(24,NULL)
(25,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
