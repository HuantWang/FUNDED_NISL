-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_execlp_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_execlp_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_execlp_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_execlp_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(12,30,0)
(54,61,0)
(40,23,0)
(14,59,0)
(63,23,0)
(52,40,0)
(24,52,0)
(22,44,0)
(7,59,0)
(9,20,0)
(35,28,0)
(31,42,0)
(42,31,0)
(36,23,0)
(42,38,0)
(44,59,0)
(58,16,0)
(37,5,0)
(42,23,0)
(5,37,0)
(2,36,0)
(5,61,0)
(55,43,0)
(49,17,0)
(44,46,0)
(8,31,0)
(44,39,0)
(45,16,0)
(1,38,0)
(63,34,0)
(39,44,0)
(36,61,0)
(46,44,0)
(0,52,0)
(57,12,0)
(46,41,0)
(26,61,0)
(10,42,0)
(53,37,0)
(28,49,0)
(54,23,0)
(11,49,0)
(3,47,0)
(16,49,0)
(50,18,0)
(48,16,0)
(38,49,0)
(58,31,0)
(27,50,0)
(60,5,0)
(6,39,0)
(62,18,0)
(25,36,0)
(4,20,0)
(41,46,0)
(36,50,0)
(61,20,0)
(59,61,0)
(40,12,0)
(40,52,0)
(43,46,0)
(61,54,0)
(52,49,0)
(59,44,0)
(29,40,0)
(20,34,0)
(21,63,0)
(46,43,0)
(19,63,0)
(16,58,0)
(43,61,0)
(56,43,0)
(51,17,0)
(49,28,0)
(15,38,0)
(31,58,0)
(38,42,0)
(32,62,0)
(59,23,0)
(28,23,0)
(33,5,0)
(13,54,0)
(53,5,1)
(63,23,1)
(59,61,1)
(19,12,1)
(2,62,1)
(42,23,1)
(11,39,1)
(8,42,1)
(28,35,1)
(54,13,1)
(44,22,1)
(62,32,1)
(21,63,1)
(5,61,1)
(36,61,1)
(59,23,1)
(43,61,1)
(27,36,1)
(44,59,1)
(55,59,1)
(14,7,1)
(33,60,1)
(46,41,1)
(39,44,1)
(54,23,1)
(5,33,1)
(63,19,1)
(35,11,1)
(31,8,1)
(7,37,1)
(16,49,1)
(32,39,1)
(56,55,1)
(0,29,1)
(40,23,1)
(43,56,1)
(61,54,1)
(19,58,1)
(58,16,1)
(40,52,1)
(13,26,1)
(31,42,1)
(10,16,1)
(60,61,1)
(12,57,1)
(28,23,1)
(42,38,1)
(6,44,1)
(52,49,1)
(38,15,1)
(24,0,1)
(22,46,1)
(52,24,1)
(38,49,1)
(37,53,1)
(1,10,1)
(39,6,1)
(25,2,1)
(50,27,1)
(59,14,1)
(49,28,1)
(36,23,1)
(19,37,1)
(58,31,1)
(19,50,1)
(37,5,1)
(45,49,1)
(29,58,1)
(15,1,1)
(48,45,1)
(16,48,1)
(44,46,1)
(46,43,1)
(36,25,1)
(57,40,1)
(42,38,2)
(59,37,2)
(12,58,2)
(27,39,2)
(24,58,2)
(44,46,2)
(52,58,2)
(37,5,2)
(59,23,2)
(28,39,2)
(35,39,2)
(44,59,2)
(46,41,2)
(2,39,2)
(49,28,2)
(62,39,2)
(58,16,2)
(40,23,2)
(38,16,2)
(48,39,2)
(57,58,2)
(5,61,2)
(0,58,2)
(40,58,2)
(32,39,2)
(61,54,2)
(44,37,2)
(36,39,2)
(11,39,2)
(16,39,2)
(49,39,2)
(50,39,2)
(1,16,2)
(31,42,2)
(43,37,2)
(39,37,2)
(29,58,2)
(58,39,2)
(55,37,2)
(38,49,2)
(15,16,2)
(59,61,2)
(52,49,2)
(21,63,2)
(45,39,2)
(22,37,2)
(14,37,2)
(54,23,2)
(25,39,2)
(31,16,2)
(43,61,2)
(36,61,2)
(42,23,2)
(40,52,2)
(46,37,2)
(8,16,2)
(63,23,2)
(7,37,2)
(46,43,2)
(6,37,2)
(28,23,2)
(36,23,2)
(10,16,2)
(56,37,2)
(42,16,2)
(16,49,2)
(58,31,2)
(39,44,2)
-----------------------------------
(0,dataLen)
(1,dataLen)
(2,data)
(3,if (fgets(data+dataLen, (int)
(4,if (100-dataLen > 1)
(5,100-dataLen)
(6,NULL)
(7,data)
(8,\\\'\\\\n\\\')
(9,dataLen)
(10,data)
(11,dataLen)
(12,data[dataLen-1] = \\\'\\\\0\\\')
(13,data)
(14,dataLen)
(15,1)
(16,dataLen > 0)
(17,)
(18,)
(19,data)
(20,)
(21,RET)
(22,stdin)
(23,char * data)
(24,1)
(25,dataLen)
(26,dataLen)
(27,\\\'\\\\0\\\')
(28,strlen(data)
(29,data)
(30,)
(31,data[dataLen-1] == \\\'\\\\n\\\')
(32,"fgets()
(33,dataLen)
(34,)
(35,data)
(36,data[dataLen])
(37,100-dataLen > 1)
(38,dataLen-1)
(39,fgets(data+dataLen, (int)
(40,data[dataLen-1])
(41,int)
(42,data[dataLen-1])
(43,100-dataLen)
(44,fgets(data+dataLen, (int)
(45,dataLen)
(46,(int)
(47,)
(48,0)
(49,dataLen = strlen(data)
(50,data[dataLen] = \\\'\\\\0\\\')
(51,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(52,dataLen-1)
(53,1)
(54,strlen(data)
(55,100)
(56,dataLen)
(57,\\\'\\\\0\\\')
(58,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,data+dataLen)
(60,100)
(61,dataLen = strlen(data)
(62,printLine("fgets()
(63,return data;)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
