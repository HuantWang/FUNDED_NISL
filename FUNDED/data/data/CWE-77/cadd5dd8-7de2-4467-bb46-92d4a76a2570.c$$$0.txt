-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    {
        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* wspawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
54,56
55,56
56,57
56,58
58,59
58,60
58,61
58,62
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
72,73
73,74
73,75
73,76
73,77
74,75
76,77
78,79
80,81
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,57,59,60,61,65,67,69,71,75,77,79,81
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
static void
goodG2B()
goodG2B
{    int h;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
int h;
int h;
int
h
h
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
{        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
_wspawnv
_wspawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(8,25,0)
(13,5,0)
(1,22,0)
(6,3,0)
(27,25,0)
(2,22,0)
(15,27,0)
(26,3,0)
(11,22,0)
(20,26,0)
(5,27,0)
(10,27,0)
(7,26,0)
(5,25,0)
(14,12,0)
(18,5,0)
(24,26,0)
(23,25,0)
(17,22,0)
(26,12,0)
(3,12,0)
(9,11,0)
(21,25,0)
(12,25,0)
(16,25,0)
(19,11,0)
(0,1,0)
(26,20,1)
(20,7,1)
(26,3,1)
(19,22,1)
(11,9,1)
(0,11,1)
(10,15,1)
(1,0,1)
(5,18,1)
(19,1,1)
(24,3,1)
(5,27,1)
(27,10,1)
(13,27,1)
(4,26,1)
(1,22,1)
(2,5,1)
(18,13,1)
(17,2,1)
(9,19,1)
(7,24,1)
(11,22,1)
(6,11,1)
(22,17,1)
(3,6,1)
(1,22,2)
(26,3,2)
(5,27,2)
(9,11,2)
(0,11,2)
(11,11,2)
(11,22,2)
(19,11,2)
(1,11,2)
-----------------------------------
(0,h)
(1,h++)
(2,h)
(3,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(4,RET)
(5,data = dataBuffer)
(6,args)
(7,COMMAND_INT_PATH)
(8,for(h = 0; h < 1; h++)
(9,1)
(10,COMMAND_ARG2)
(11,h < 1)
(12,)
(13,data)
(14,args)
(15,dataBuffer)
(16,data)
(17,0)
(18,dataBuffer)
(19,h)
(20,args)
(21,h)
(22,h = 0)
(23,dataBuffer)
(24,_P_WAIT)
(25,)
(26,_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
(27,dataBuffer[100] = COMMAND_ARG2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
