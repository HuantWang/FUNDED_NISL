-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    goodG2B2Static = 1; /* true */
    data = goodG2B2Source(data);
    /* wexecl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
43,44
43,45
43,46
43,47
43,48
43,49
44,45
46,47
48,49
50,51
52,53
54,55
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,36,39,41,45,47,49,51,53,55
-----computeFrom-----
23,24
23,25
29,30
29,31
34,35
34,36
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goodG2B2Static = 1; /* true */    data = goodG2B2Source(data);    /* wexecl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goodG2B2Static = 1; /* true */    data = goodG2B2Source(data);    /* wexecl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goodG2B2Static = 1;
goodG2B2Static = 1
goodG2B2Static
goodG2B2Static
1
data = goodG2B2Source(data);
data = goodG2B2Source(data)
data
data
goodG2B2Source(data)
goodG2B2Source
goodG2B2Source
data
data
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(8,16,0)
(21,2,0)
(1,13,0)
(6,5,0)
(7,3,0)
(13,12,0)
(16,2,0)
(0,20,0)
(11,5,0)
(5,20,0)
(12,2,0)
(20,2,0)
(5,2,0)
(12,13,0)
(19,16,0)
(17,20,0)
(13,5,0)
(3,2,0)
(9,3,0)
(10,2,0)
(4,16,0)
(14,16,0)
(15,12,0)
(18,16,0)
(5,20,1)
(16,14,1)
(8,12,1)
(13,1,1)
(13,5,1)
(19,8,1)
(1,15,1)
(14,4,1)
(6,20,1)
(22,16,1)
(4,18,1)
(7,5,1)
(0,17,1)
(9,7,1)
(5,11,1)
(18,19,1)
(12,13,1)
(11,6,1)
(3,9,1)
(15,3,1)
(20,0,1)
(13,5,2)
(5,20,2)
(12,13,2)
-----------------------------------
(0,COMMAND_ARG2)
(1,data)
(2,)
(3,goodG2B2Static = 1)
(4,COMMAND_ARG3)
(5,data = dataBuffer)
(6,data)
(7,goodG2B2Static)
(8,COMMAND_INT_PATH)
(9,1)
(10,data)
(11,dataBuffer)
(12,data = goodG2B2Source(data)
(13,goodG2B2Source(data)
(14,NULL)
(15,data)
(16,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(17,dataBuffer)
(18,COMMAND_ARG1)
(19,COMMAND_INT_PATH)
(20,dataBuffer[100] = COMMAND_ARG2)
(21,dataBuffer)
(22,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
