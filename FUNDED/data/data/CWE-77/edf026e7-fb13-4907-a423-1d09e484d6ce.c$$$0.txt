-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(staticFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
33,34
34,35
35,36
35,37
36,37
39,40
40,41
41,42
41,43
41,44
42,43
44,45
47,48
47,49
48,49
48,50
49,50
49,51
50,51
52,53
55,56
55,57
56,57
57,58
57,59
58,59
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,38,43,45,46,51,53,54,59,60,64,65
-----computeFrom-----
23,24
23,25
29,30
29,31
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(staticFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
staticFive!=5
staticFive
staticFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(25,10,0)
(8,30,0)
(1,4,0)
(17,30,0)
(13,4,0)
(6,19,0)
(9,6,0)
(16,2,0)
(20,30,0)
(27,12,0)
(8,3,0)
(18,2,0)
(23,8,0)
(28,4,0)
(14,0,0)
(2,18,0)
(11,14,0)
(30,28,0)
(30,4,0)
(18,30,0)
(21,4,0)
(15,28,0)
(7,4,0)
(12,19,0)
(24,8,0)
(5,18,0)
(22,28,0)
(29,10,0)
(27,2,1)
(10,29,1)
(28,22,1)
(8,30,1)
(30,20,1)
(9,12,1)
(23,24,1)
(20,17,1)
(8,23,1)
(16,18,1)
(29,25,1)
(18,5,1)
(18,30,1)
(26,2,1)
(30,28,1)
(26,6,1)
(2,16,1)
(24,10,1)
(17,28,1)
(14,11,1)
(5,8,1)
(25,30,1)
(11,10,1)
(12,27,1)
(6,9,1)
(5,14,1)
(22,15,1)
(2,18,1)
(23,10,2)
(11,10,2)
(8,10,2)
(12,2,2)
(2,18,2)
(6,2,2)
(18,30,2)
(27,2,2)
(9,2,2)
(30,28,2)
(8,30,2)
(14,10,2)
(24,10,2)
-----------------------------------
(0,)
(1,data)
(2,SYSTEM(data)
(3,)
(4,)
(5,data)
(6,exit(1)
(7,if (SYSTEM(data)
(8,strcat(data, "*.*")
(9,1)
(10,staticFive!=5)
(11,"Benign, fixed string")
(12,printLine("command execution failed!")
(13,if(staticFive!=5)
(14,printLine("Benign, fixed string")
(15,data_buf)
(16,0)
(17,data)
(18,SYSTEM(data)
(19,)
(20,data_buf)
(21,data_buf)
(22,FULL_COMMAND)
(23,"*.*")
(24,data)
(25,staticFive)
(26,RET)
(27,"command execution failed!")
(28,data_buf[100] = FULL_COMMAND)
(29,5)
(30,data = data_buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
