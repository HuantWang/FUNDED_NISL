-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* spawnlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
55,58
55,59
55,60
55,61
55,62
56,57
58,59
60,61
62,63
64,65
66,67
68,69
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,57,59,61,63,65,67,69
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B()
goodG2B
{    int h;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
int h;
int h;
int
h
h
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnlp
_spawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(26,18,0)
(15,16,0)
(29,0,0)
(3,16,0)
(19,16,0)
(4,18,0)
(24,18,0)
(2,0,0)
(21,0,0)
(25,22,0)
(12,0,0)
(6,16,0)
(17,27,0)
(23,2,0)
(8,11,0)
(1,22,0)
(30,11,0)
(13,27,0)
(27,18,0)
(11,27,0)
(11,18,0)
(5,16,0)
(22,7,0)
(9,18,0)
(14,16,0)
(10,29,0)
(16,18,0)
(22,11,0)
(28,2,0)
(29,0,1)
(8,30,1)
(3,19,1)
(22,11,1)
(19,2,1)
(11,8,1)
(16,5,1)
(12,21,1)
(11,27,1)
(28,29,1)
(22,25,1)
(29,10,1)
(17,13,1)
(23,28,1)
(20,16,1)
(21,11,1)
(25,1,1)
(6,3,1)
(15,14,1)
(14,6,1)
(2,23,1)
(30,27,1)
(1,2,1)
(27,17,1)
(0,12,1)
(2,0,1)
(28,0,1)
(10,22,1)
(5,15,1)
(29,0,2)
(29,2,2)
(28,2,2)
(2,2,2)
(25,2,2)
(22,11,2)
(22,2,2)
(10,2,2)
(2,0,2)
(11,27,2)
(1,2,2)
(23,2,2)
-----------------------------------
(0,h = 0)
(1,data)
(2,h < 1)
(3,COMMAND_INT)
(4,h)
(5,NULL)
(6,COMMAND_INT)
(7,)
(8,dataBuffer)
(9,data)
(10,h)
(11,data = dataBuffer)
(12,0)
(13,dataBuffer)
(14,COMMAND_ARG1)
(15,COMMAND_ARG3)
(16,_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(17,COMMAND_ARG2)
(18,)
(19,_P_WAIT)
(20,RET)
(21,h)
(22,strcat(data, "*.*")
(23,1)
(24,for(h = 0; h < 1; h++)
(25,"*.*")
(26,dataBuffer)
(27,dataBuffer[100] = COMMAND_ARG2)
(28,h)
(29,h++)
(30,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
