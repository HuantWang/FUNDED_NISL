-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_16_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    while(1)
    {
        {
            /* Read input from a file */
            size_t dataLen = wcslen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgetws() failed");
                        /* Restore NUL terminator if fgetws fails */
                        data[dataLen] = L'\0';
                    }
                    fclose(pFile);
                }
            }
        }
        break;
    }
    /* wspawnlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
31,32
31,33
31,34
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
46,47
48,49
48,50
51,52
51,53
52,53
52,54
53,54
53,55
55,56
58,59
58,60
59,60
60,61
60,62
61,62
63,64
63,65
63,66
64,65
66,67
69,70
69,71
70,71
70,72
71,72
73,74
75,76
75,77
76,77
76,78
77,78
77,79
78,79
78,80
78,81
78,82
79,80
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
90,91
91,92
91,93
93,94
95,96
97,98
99,100
99,101
100,101
101,102
101,103
102,103
105,106
106,107
106,108
107,108
107,109
108,109
110,111
113,114
114,115
114,116
115,116
117,118
120,121
121,122
121,123
121,124
121,125
121,126
121,127
121,128
122,123
124,125
126,127
128,129
130,131
132,133
134,135
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,35,37,41,43,47,49,50,54,56,57,62,65,67,68,72,74,80,83,85,88,89,92,94,96,98,103,104,109,111,112,116,118,119,123,125,127,129,131,133,135
-----computeFrom-----
23,24
23,25
52,53
52,54
53,54
53,55
60,61
60,62
70,71
70,72
77,78
77,79
81,82
81,83
91,92
91,93
106,107
106,108
-----guardedBy-----
56,111
74,98
72,118
83,109
94,111
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_16_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    while(1)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        break;    }    /* wspawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
void
CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_16_bad()
CWE78_OS_Command_Injection__wchar_t_file_w32_spawnlp_16_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    while(1)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        break;    }    /* wspawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
while(1)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        break;    }
1
{        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }        break;    }
{            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
break;
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_wspawnlp
_wspawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(63,28,0)
(47,39,0)
(1,13,0)
(39,18,0)
(39,20,0)
(45,5,0)
(20,19,0)
(22,19,0)
(26,56,0)
(0,46,0)
(59,42,0)
(42,18,0)
(12,35,0)
(24,18,0)
(15,44,0)
(60,19,0)
(8,14,0)
(35,5,0)
(18,42,0)
(37,18,0)
(16,61,0)
(14,20,0)
(2,48,0)
(10,35,0)
(39,45,0)
(58,33,0)
(42,14,0)
(46,63,0)
(50,14,0)
(44,13,0)
(41,46,0)
(40,63,0)
(18,39,0)
(34,20,0)
(17,28,0)
(6,56,0)
(49,36,0)
(62,63,0)
(21,37,0)
(20,61,0)
(14,42,0)
(43,45,0)
(52,34,0)
(29,5,0)
(34,33,0)
(3,20,0)
(63,46,0)
(31,62,0)
(11,62,0)
(7,45,0)
(56,5,0)
(61,20,0)
(61,45,0)
(33,34,0)
(54,5,0)
(36,48,0)
(38,30,0)
(25,5,0)
(19,30,0)
(36,63,0)
(42,59,0)
(51,56,0)
(4,56,0)
(53,19,0)
(32,56,0)
(18,63,0)
(55,39,0)
(45,35,0)
(9,34,0)
(18,37,0)
(23,56,0)
(39,20,1)
(37,18,1)
(57,45,1)
(32,57,1)
(36,49,1)
(41,40,1)
(10,12,1)
(18,24,1)
(35,10,1)
(56,6,1)
(38,62,1)
(61,16,1)
(24,42,1)
(26,32,1)
(15,37,1)
(62,63,1)
(42,14,1)
(61,45,1)
(40,33,1)
(39,55,1)
(36,63,1)
(45,35,1)
(27,56,1)
(44,15,1)
(51,4,1)
(39,45,1)
(9,20,1)
(55,47,1)
(0,41,1)
(7,43,1)
(20,61,1)
(45,7,1)
(14,50,1)
(37,21,1)
(38,33,1)
(3,57,1)
(62,31,1)
(63,46,1)
(52,9,1)
(14,20,1)
(38,36,1)
(31,11,1)
(8,39,1)
(18,39,1)
(46,0,1)
(58,34,1)
(42,59,1)
(34,52,1)
(23,26,1)
(50,8,1)
(18,42,1)
(49,37,1)
(49,1,1)
(4,23,1)
(16,3,1)
(33,58,1)
(21,18,1)
(43,35,1)
(11,63,1)
(18,63,1)
(33,34,1)
(32,38,1)
(47,62,1)
(6,51,1)
(1,44,1)
(34,20,1)
(0,33,2)
(37,18,2)
(8,62,2)
(24,62,2)
(39,20,2)
(33,34,2)
(3,57,2)
(9,57,2)
(63,46,2)
(44,37,2)
(20,61,2)
(46,33,2)
(14,20,2)
(18,63,2)
(58,57,2)
(18,39,2)
(61,57,2)
(36,63,2)
(20,57,2)
(42,62,2)
(50,62,2)
(11,33,2)
(55,62,2)
(18,62,2)
(31,33,2)
(15,37,2)
(41,33,2)
(34,20,2)
(37,62,2)
(39,62,2)
(42,14,2)
(36,62,2)
(52,57,2)
(62,63,2)
(18,42,2)
(63,33,2)
(14,62,2)
(61,45,2)
(33,57,2)
(38,57,2)
(40,33,2)
(39,45,2)
(16,57,2)
(34,57,2)
(21,62,2)
(42,59,2)
(62,33,2)
(49,62,2)
(47,62,2)
(45,35,2)
(1,37,2)
-----------------------------------
(0,"r")
(1,\\\'\\\\0\\\')
(2,if (fgetws(data+dataLen, (int)
(3,dataLen)
(4,COMMAND_ARG1)
(5,)
(6,NULL)
(7,dataBuffer)
(8,100)
(9,100)
(10,COMMAND_ARG2)
(11,pFile)
(12,dataBuffer)
(13,)
(14,100-dataLen)
(15,"fgetws()
(16,data)
(17,if (pFile != NULL)
(18,fgetws(data+dataLen, (int)
(19,)
(20,dataLen = wcslen(data)
(21,NULL)
(22,if (100-dataLen > 1)
(23,COMMAND_INT)
(24,pFile)
(25,dataBuffer)
(26,COMMAND_INT)
(27,RET)
(28,)
(29,data)
(30,)
(31,NULL)
(32,_P_WAIT)
(33,100-dataLen > 1)
(34,100-dataLen)
(35,dataBuffer[100] = COMMAND_ARG2)
(36,fclose(pFile)
(37,fgetws(data+dataLen, (int)
(38,break;)
(39,data+dataLen)
(40,pFile)
(41,FILENAME)
(42,(int)
(43,data)
(44,printLine("fgetws()
(45,data = dataBuffer)
(46,fopen(FILENAME, "r")
(47,data)
(48,)
(49,pFile)
(50,dataLen)
(51,COMMAND_ARG3)
(52,dataLen)
(53,pFile)
(54,while(1)
(55,dataLen)
(56,_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(57,1)
(58,1)
(59,int)
(60,dataLen)
(61,wcslen(data)
(62,pFile != NULL)
(63,pFile = fopen(FILENAME, "r")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
