-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_execv_02_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(1)
    {
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECV(COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
31,32
31,33
31,34
32,33
33,34
33,35
34,35
36,37
36,38
38,39
39,40
39,41
40,41
42,43
44,45
45,46
45,47
47,48
47,49
47,50
50,51
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
64,67
64,68
65,66
67,68
67,69
68,69
70,71
72,73
74,75
74,76
75,76
75,77
77,78
80,81
80,82
81,82
82,83
82,84
84,85
84,86
84,87
84,88
88,89
89,90
89,91
89,92
89,93
90,91
92,93
94,95
96,97
98,99
99,100
99,101
99,102
100,101
102,103
104,105
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,35,37,41,43,46,48,49,53,55,59,61,66,69,71,73,76,78,79,83,85,86,87,91,93,95,97,101,103,105
-----computeFrom-----
23,24
23,25
57,58
57,59
67,68
67,69
74,75
74,76
75,76
75,77
-----guardedBy-----
59,73
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_execv_02_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(1)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_environment_w32_execv_02_bad()
CWE78_OS_Command_Injection__char_environment_w32_execv_02_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(1)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(1)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
1
{        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(3,22,0)
(17,1,0)
(6,34,0)
(24,36,0)
(33,26,0)
(26,24,0)
(36,42,0)
(36,1,0)
(12,39,0)
(30,42,0)
(1,45,0)
(0,34,0)
(15,26,0)
(25,21,0)
(20,23,0)
(24,0,0)
(24,26,0)
(21,34,0)
(7,1,0)
(4,39,0)
(39,22,0)
(11,23,0)
(34,10,0)
(0,17,0)
(18,43,0)
(28,0,0)
(21,17,0)
(42,36,0)
(43,36,0)
(2,1,0)
(27,23,0)
(24,5,0)
(31,34,0)
(38,15,0)
(44,10,0)
(16,36,0)
(37,23,0)
(32,10,0)
(40,1,0)
(26,15,0)
(0,24,0)
(29,24,0)
(19,15,0)
(34,23,0)
(17,21,0)
(22,37,0)
(10,23,0)
(14,37,0)
(13,43,0)
(8,17,0)
(15,17,0)
(41,0,0)
(39,37,0)
(24,26,1)
(17,21,1)
(18,13,1)
(22,3,1)
(8,9,1)
(34,10,1)
(43,36,1)
(34,6,1)
(21,34,1)
(12,4,1)
(31,10,1)
(4,22,1)
(19,33,1)
(38,19,1)
(3,24,1)
(41,43,1)
(44,32,1)
(30,16,1)
(39,22,1)
(16,17,1)
(28,41,1)
(6,31,1)
(3,43,1)
(26,15,1)
(0,28,1)
(9,34,1)
(43,18,1)
(39,12,1)
(35,39,1)
(24,0,1)
(15,17,1)
(0,17,1)
(10,44,1)
(24,36,1)
(29,0,1)
(33,29,1)
(3,9,1)
(36,42,1)
(21,25,1)
(25,8,1)
(42,30,1)
(13,36,1)
(0,34,1)
(15,38,1)
(21,9,2)
(19,43,2)
(29,43,2)
(24,43,2)
(42,9,2)
(33,43,2)
(43,9,2)
(36,42,2)
(16,9,2)
(38,43,2)
(41,43,2)
(18,9,2)
(39,22,2)
(17,21,2)
(24,36,2)
(0,34,2)
(36,9,2)
(30,9,2)
(15,43,2)
(24,26,2)
(26,15,2)
(21,34,2)
(28,43,2)
(0,43,2)
(0,17,2)
(17,9,2)
(25,9,2)
(34,10,2)
(26,43,2)
(43,36,2)
(13,9,2)
(8,9,2)
(24,0,2)
(15,17,2)
-----------------------------------
(0,data+dataLen)
(1,)
(2,environment)
(3,args)
(4,COMMAND_INT_PATH)
(5,)
(6,dataBuffer)
(7,if (environment != NULL)
(8,dataLen)
(9,1)
(10,dataBuffer[100] = COMMAND_ARG2)
(11,dataBuffer)
(12,args)
(13,environment)
(14,args)
(15,dataLen-1)
(16,environment)
(17,dataLen = strlen(data)
(18,NULL)
(19,dataLen)
(20,if(1)
(21,strlen(data)
(22,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(23,)
(24,strncat(data+dataLen, environment, 100-dataLen-1)
(25,data)
(26,100-dataLen-1)
(27,data)
(28,dataLen)
(29,environment)
(30,ENV_VARIABLE)
(31,data)
(32,dataBuffer)
(33,100)
(34,data = dataBuffer)
(35,RET)
(36,* environment = GETENV(ENV_VARIABLE)
(37,)
(38,1)
(39,EXECV(COMMAND_INT_PATH, args)
(40,dataLen)
(41,data)
(42,GETENV(ENV_VARIABLE)
(43,environment != NULL)
(44,COMMAND_ARG2)
(45,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
