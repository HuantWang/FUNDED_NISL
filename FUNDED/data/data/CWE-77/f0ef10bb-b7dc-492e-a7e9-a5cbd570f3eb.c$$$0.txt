-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(1)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, L"w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
31,32
32,33
32,34
32,35
33,34
35,36
38,39
38,40
38,41
39,40
40,41
40,42
41,42
43,44
43,45
46,47
47,48
47,49
48,49
50,51
50,52
50,53
51,52
53,54
56,57
56,58
57,58
57,59
58,59
60,61
62,63
63,64
64,65
64,66
65,66
67,68
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,36,37,42,44,45,49,52,54,55,59,61,66,68
-----computeFrom-----
23,24
23,25
47,48
47,49
57,58
57,59
-----guardedBy-----
59,68
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
1
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, L"w");
pipe = POPEN(data, L"w")
pipe
pipe
POPEN(data, L"w")
POPEN
POPEN
data
data
L"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(7,20,0)
(8,18,0)
(3,18,0)
(6,13,0)
(0,12,0)
(19,3,0)
(13,18,0)
(2,13,0)
(10,19,0)
(12,4,0)
(17,19,0)
(5,3,0)
(14,18,0)
(19,18,0)
(9,18,0)
(15,3,0)
(1,20,0)
(20,1,1)
(0,20,1)
(5,15,1)
(3,5,1)
(11,20,1)
(7,16,1)
(1,7,1)
(10,17,1)
(12,0,1)
(19,10,1)
(19,3,1)
(16,19,1)
(17,3,1)
(11,12,1)
(19,3,2)
(12,20,2)
(0,20,2)
-----------------------------------
(0,pipe)
(1,NULL)
(2,pipe)
(3,data_buf[100] = FULL_COMMAND)
(4,)
(5,FULL_COMMAND)
(6,if (pipe != NULL)
(7,pipe)
(8,data_buf)
(9,data)
(10,data_buf)
(11,RET)
(12,PCLOSE(pipe)
(13,)
(14,if(1)
(15,data_buf)
(16,1)
(17,data)
(18,)
(19,data = data_buf)
(20,pipe != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
