-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(0)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
30,31
31,32
32,33
32,34
33,34
36,37
37,38
38,39
38,40
38,41
39,40
41,42
44,45
44,46
45,46
46,47
46,48
48,49
48,50
48,51
48,52
52,53
53,54
53,55
53,56
53,57
54,55
56,57
58,59
60,61
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,35,40,42,43,47,49,50,51,55,57,59,61,65,67,69,71
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B1(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(0)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
0
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(19,8,0)
(19,18,0)
(12,25,0)
(8,18,0)
(24,12,0)
(3,25,0)
(4,8,0)
(23,26,0)
(7,19,0)
(24,20,0)
(0,19,0)
(12,26,0)
(14,9,0)
(17,24,0)
(16,25,0)
(18,25,0)
(26,25,0)
(1,18,0)
(2,24,0)
(13,25,0)
(6,26,0)
(5,19,0)
(15,12,0)
(9,10,0)
(22,12,0)
(17,2,1)
(19,7,1)
(11,19,1)
(4,9,1)
(12,22,1)
(24,12,1)
(4,24,1)
(12,26,1)
(8,4,1)
(21,12,1)
(19,8,1)
(5,0,1)
(9,14,1)
(24,17,1)
(14,21,1)
(26,23,1)
(0,8,1)
(22,15,1)
(15,26,1)
(23,6,1)
(7,5,1)
(2,21,1)
(9,21,2)
(19,8,2)
(24,21,2)
(14,21,2)
(12,26,2)
(17,21,2)
(24,12,2)
(2,21,2)
-----------------------------------
(0,_P_WAIT)
(1,args)
(2,data)
(3,if(0)
(4,args)
(5,COMMAND_INT_PATH)
(6,dataBuffer)
(7,args)
(8,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(9,printLine("Benign, fixed string")
(10,)
(11,RET)
(12,data = dataBuffer)
(13,data)
(14,"Benign, fixed string")
(15,data)
(16,dataBuffer)
(17,"*.*")
(18,)
(19,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(20,)
(21,0)
(22,dataBuffer)
(23,COMMAND_ARG2)
(24,strcat(data, "*.*")
(25,)
(26,dataBuffer[100] = COMMAND_ARG2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
