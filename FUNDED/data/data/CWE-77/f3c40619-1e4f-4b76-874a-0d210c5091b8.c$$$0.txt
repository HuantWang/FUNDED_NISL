-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(STATIC_CONST_TRUE)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
32,33
33,34
33,35
33,36
34,35
36,37
39,40
39,41
39,42
40,41
41,42
41,43
42,43
44,45
44,46
47,48
48,49
48,50
49,50
51,52
51,53
51,54
52,53
54,55
57,58
57,59
58,59
58,60
59,60
61,62
63,64
64,65
65,66
65,67
66,67
68,69
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,35,37,38,43,45,46,50,53,55,56,60,62,67,69
-----computeFrom-----
23,24
23,25
48,49
48,50
58,59
58,60
-----guardedBy-----
60,69
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(STATIC_CONST_TRUE)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(STATIC_CONST_TRUE)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(STATIC_CONST_TRUE)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
STATIC_CONST_TRUE
STATIC_CONST_TRUE
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(23,1,0)
(10,1,0)
(8,7,0)
(26,5,0)
(9,19,0)
(25,13,0)
(10,28,0)
(14,11,0)
(1,19,0)
(26,1,0)
(22,21,0)
(24,7,0)
(19,7,0)
(20,10,0)
(6,13,0)
(11,28,0)
(4,26,0)
(0,10,0)
(1,7,0)
(28,21,0)
(2,19,0)
(17,7,0)
(27,21,0)
(18,1,0)
(21,7,0)
(12,26,0)
(28,10,0)
(15,28,0)
(13,28,0)
(11,29,0)
(13,28,1)
(19,2,1)
(1,19,1)
(11,28,1)
(15,26,1)
(10,20,1)
(10,1,1)
(12,4,1)
(2,9,1)
(16,11,1)
(11,14,1)
(15,3,1)
(28,10,1)
(14,13,1)
(16,13,1)
(4,3,1)
(26,12,1)
(3,1,1)
(0,15,1)
(20,0,1)
(23,19,1)
(6,28,1)
(25,6,1)
(18,23,1)
(1,18,1)
(26,1,1)
(13,25,1)
(28,10,2)
(11,28,2)
(11,13,2)
(1,19,2)
(14,13,2)
(26,1,2)
(10,1,2)
(12,3,2)
(4,3,2)
(26,3,2)
(13,28,2)
-----------------------------------
(0,data)
(1,data = data_buf)
(2,FULL_COMMAND)
(3,STATIC_CONST_TRUE)
(4,data)
(5,)
(6,pipe)
(7,)
(8,if(STATIC_CONST_TRUE)
(9,data_buf)
(10,POPEN(data, "w")
(11,PCLOSE(pipe)
(12,"*.*")
(13,pipe != NULL)
(14,pipe)
(15,pipe)
(16,RET)
(17,data)
(18,data_buf)
(19,data_buf[100] = FULL_COMMAND)
(20,"w")
(21,)
(22,pipe)
(23,data)
(24,data_buf)
(25,NULL)
(26,strcat(data, "*.*")
(27,if (pipe != NULL)
(28,pipe = POPEN(data, "w")
(29,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
