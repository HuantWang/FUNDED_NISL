-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalFive==5)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
35,36
35,37
35,38
36,37
38,39
41,42
41,43
41,44
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,39,40,45,47,48,52,55,57,58,62,64,69,71
-----computeFrom-----
23,24
23,25
29,30
29,31
50,51
50,52
60,61
60,62
-----guardedBy-----
62,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalFive==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(6,4,0)
(14,4,0)
(5,12,0)
(9,11,0)
(13,19,0)
(11,8,0)
(26,31,0)
(17,28,0)
(0,13,0)
(7,28,0)
(15,24,0)
(13,24,0)
(4,12,0)
(28,4,0)
(20,22,0)
(12,24,0)
(16,19,0)
(2,19,0)
(4,22,0)
(3,11,0)
(29,24,0)
(21,31,0)
(19,24,0)
(22,4,0)
(10,24,0)
(30,12,0)
(22,13,0)
(25,14,0)
(11,13,0)
(1,13,0)
(14,23,0)
(18,22,0)
(9,3,1)
(19,2,1)
(27,14,1)
(11,9,1)
(26,21,1)
(14,4,1)
(27,28,1)
(20,6,1)
(2,16,1)
(4,22,1)
(18,20,1)
(7,17,1)
(28,4,1)
(22,13,1)
(3,31,1)
(6,31,1)
(13,19,1)
(21,13,1)
(22,18,1)
(0,1,1)
(13,0,1)
(1,19,1)
(14,25,1)
(11,13,1)
(28,7,1)
(17,4,1)
(31,26,1)
(6,11,1)
(25,28,1)
(3,31,2)
(13,19,2)
(14,28,2)
(11,13,2)
(11,31,2)
(28,4,2)
(4,22,2)
(9,31,2)
(25,28,2)
(14,4,2)
(22,13,2)
-----------------------------------
(0,data_buf)
(1,data)
(2,FULL_COMMAND)
(3,data)
(4,pipe = POPEN(data, "w")
(5,if (pipe != NULL)
(6,pipe)
(7,NULL)
(8,)
(9,"*.*")
(10,if(globalFive==5)
(11,strcat(data, "*.*")
(12,)
(13,data = data_buf)
(14,PCLOSE(pipe)
(15,data_buf)
(16,data_buf)
(17,pipe)
(18,"w")
(19,data_buf[100] = FULL_COMMAND)
(20,data)
(21,globalFive)
(22,POPEN(data, "w")
(23,)
(24,)
(25,pipe)
(26,5)
(27,RET)
(28,pipe != NULL)
(29,data)
(30,pipe)
(31,globalFive==5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
