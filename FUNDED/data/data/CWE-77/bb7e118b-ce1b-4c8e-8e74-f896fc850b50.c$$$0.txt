-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_w32spawnl_45_bad()
CWE78_OS_Command_Injection__char_console_w32spawnl_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data;
CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data
CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData
CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(27,65,0)
(12,49,0)
(44,64,0)
(56,8,0)
(38,59,0)
(71,25,0)
(33,22,0)
(22,8,0)
(63,62,0)
(35,21,0)
(45,72,0)
(63,30,0)
(63,24,0)
(72,62,0)
(65,12,0)
(13,66,0)
(24,1,0)
(11,1,0)
(5,66,0)
(7,72,0)
(43,65,0)
(55,25,0)
(25,24,0)
(59,24,0)
(70,63,0)
(21,35,0)
(49,12,0)
(16,36,0)
(10,15,0)
(30,0,0)
(8,17,0)
(9,19,0)
(42,45,0)
(64,60,0)
(8,29,0)
(41,24,0)
(65,8,0)
(57,29,0)
(49,72,0)
(1,19,0)
(26,30,0)
(47,59,0)
(72,45,0)
(31,68,0)
(6,63,0)
(50,60,0)
(48,41,0)
(66,5,0)
(59,62,0)
(31,62,0)
(3,5,0)
(54,22,0)
(35,60,0)
(51,17,0)
(68,61,0)
(66,24,0)
(69,45,0)
(24,41,0)
(15,19,0)
(59,60,0)
(60,35,0)
(60,59,0)
(22,31,0)
(39,24,0)
(18,19,0)
(31,22,0)
(34,0,0)
(14,15,0)
(41,62,0)
(29,62,0)
(62,19,0)
(53,62,0)
(28,49,0)
(12,65,0)
(62,40,0)
(37,34,0)
(25,35,0)
(23,19,0)
(45,8,0)
(52,31,0)
(72,49,0)
(15,62,0)
(46,68,0)
(60,64,0)
(32,1,0)
(2,66,0)
(35,25,0)
(58,62,0)
(20,40,0)
(40,19,0)
(67,40,0)
(29,8,0)
(43,27,1)
(59,38,1)
(65,43,1)
(72,62,1)
(60,50,1)
(42,7,1)
(6,70,1)
(4,18,1)
(22,8,1)
(2,24,1)
(58,40,1)
(46,31,1)
(45,69,1)
(52,12,1)
(38,47,1)
(10,68,1)
(37,64,1)
(29,62,1)
(56,64,1)
(7,65,1)
(12,49,1)
(57,56,1)
(69,42,1)
(40,20,1)
(59,24,1)
(59,62,1)
(62,40,1)
(22,54,1)
(65,8,1)
(50,35,1)
(41,62,1)
(20,67,1)
(30,26,1)
(49,72,1)
(33,52,1)
(64,60,1)
(15,62,1)
(13,2,1)
(35,25,1)
(64,44,1)
(18,15,1)
(44,60,1)
(10,5,1)
(66,24,1)
(68,46,1)
(14,10,1)
(54,33,1)
(48,39,1)
(66,13,1)
(70,34,1)
(31,62,1)
(60,59,1)
(45,8,1)
(55,71,1)
(5,3,1)
(34,37,1)
(26,63,1)
(71,59,1)
(63,62,1)
(12,65,1)
(31,22,1)
(62,53,1)
(8,29,1)
(27,8,1)
(41,48,1)
(25,55,1)
(53,58,1)
(10,12,1)
(29,57,1)
(47,5,1)
(49,28,1)
(28,72,1)
(63,6,1)
(3,66,1)
(39,62,1)
(10,30,1)
(24,41,1)
(35,21,1)
(72,45,1)
(15,14,1)
(63,24,1)
(60,35,1)
(5,66,1)
(25,24,1)
(72,62,2)
(57,64,2)
(50,5,2)
(30,64,2)
(65,64,2)
(44,5,2)
(46,12,2)
(54,12,2)
(41,62,2)
(22,8,2)
(37,64,2)
(63,64,2)
(22,12,2)
(72,65,2)
(24,41,2)
(66,24,2)
(60,5,2)
(59,5,2)
(12,49,2)
(25,24,2)
(28,65,2)
(34,64,2)
(38,5,2)
(29,62,2)
(47,5,2)
(5,66,2)
(62,40,2)
(31,62,2)
(49,72,2)
(29,64,2)
(8,64,2)
(6,64,2)
(43,64,2)
(63,24,2)
(31,12,2)
(49,65,2)
(55,5,2)
(59,24,2)
(64,60,2)
(31,22,2)
(27,64,2)
(59,62,2)
(35,5,2)
(15,62,2)
(12,65,2)
(42,65,2)
(45,65,2)
(70,64,2)
(56,64,2)
(69,65,2)
(72,45,2)
(45,8,2)
(52,12,2)
(64,5,2)
(63,62,2)
(65,8,2)
(12,64,2)
(60,59,2)
(35,25,2)
(25,5,2)
(7,65,2)
(33,12,2)
(35,21,2)
(71,5,2)
(26,64,2)
(8,29,2)
(60,35,2)
(68,12,2)
-----------------------------------
(0,)
(1,)
(2,100)
(3,1)
(4,RET)
(5,100-dataLen > 1)
(6,dataLen)
(7,data)
(8,dataLen = strlen(data)
(9,data)
(10,CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData)
(11,if (100-dataLen > 1)
(12,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(13,dataLen)
(14,data)
(15,CWE78_OS_Command_Injection__char_console_w32spawnl_45_badData = data)
(16,if (fgets(data+dataLen, (int)
(17,)
(18,badSink()
(19,)
(20,COMMAND_ARG2)
(21,int)
(22,dataLen-1)
(23,dataBuffer)
(24,dataLen = strlen(data)
(25,100-dataLen)
(26,\\\'\\\\0\\\')
(27,dataLen)
(28,\\\'\\\\n\\\')
(29,strlen(data)
(30,data[dataLen] = \\\'\\\\0\\\')
(31,data[dataLen-1])
(32,dataLen)
(33,dataLen)
(34,printLine("fgets()
(35,(int)
(36,)
(37,"fgets()
(38,dataLen)
(39,dataLen)
(40,dataBuffer[100] = COMMAND_ARG2)
(41,strlen(data)
(42,dataLen)
(43,0)
(44,NULL)
(45,dataLen-1)
(46,\\\'\\\\0\\\')
(47,data)
(48,data)
(49,data[dataLen-1] == \\\'\\\\n\\\')
(50,stdin)
(51,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(52,data)
(53,dataBuffer)
(54,1)
(55,dataLen)
(56,dataLen)
(57,data)
(58,data)
(59,data+dataLen)
(60,fgets(data+dataLen, (int)
(61,)
(62,data = dataBuffer)
(63,data[dataLen])
(64,fgets(data+dataLen, (int)
(65,dataLen > 0)
(66,100-dataLen)
(67,dataBuffer)
(68,data[dataLen-1] = \\\'\\\\0\\\')
(69,1)
(70,data)
(71,100)
(72,data[dataLen-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
