-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_environment_w32_spawnv_15_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    switch(6)
    {
    case 6:
    {
        /* Append input from an environment variable to data */
        size_t dataLen = wcslen(data);
        wchar_t * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            wcsncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* wspawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
66,69
66,70
67,68
69,70
69,71
70,71
72,73
74,75
76,77
76,78
77,78
77,79
79,80
84,85
85,86
85,87
86,87
90,91
90,92
91,92
92,93
92,94
94,95
94,96
94,97
94,98
98,99
99,100
99,101
99,102
99,103
100,101
102,103
104,105
106,107
108,109
109,110
109,111
109,112
109,113
110,111
112,113
114,115
116,117
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,37,39,43,45,48,50,51,55,57,61,63,68,71,73,75,78,80,81,82,83,87,88,89,93,95,96,97,101,103,105,107,111,113,115,117
-----computeFrom-----
23,24
23,25
59,60
59,61
69,70
69,71
76,77
76,78
77,78
77,79
-----guardedBy-----
61,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_environment_w32_spawnv_15_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(6)    {    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__wchar_t_environment_w32_spawnv_15_bad()
CWE78_OS_Command_Injection__wchar_t_environment_w32_spawnv_15_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(6)    {    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        /* Append input from an environment variable to data */        size_t dataLen = wcslen(data);        wchar_t * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
wchar_t * environment = GETENV(ENV_VARIABLE);
wchar_t * environment = GETENV(ENV_VARIABLE);
wchar_t
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            wcsncat(data+dataLen, environment, 100-dataLen-1);        }
wcsncat(data+dataLen, environment, 100-dataLen-1);
wcsncat(data+dataLen, environment, 100-dataLen-1)
wcsncat
wcsncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* wspawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
_wspawnv
_wspawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(43,47,0)
(49,17,0)
(42,47,0)
(47,52,0)
(52,47,0)
(22,33,0)
(14,2,0)
(0,2,0)
(6,24,0)
(44,49,0)
(7,24,0)
(42,20,0)
(50,17,0)
(52,12,0)
(12,33,0)
(39,40,0)
(45,17,0)
(18,7,0)
(27,23,0)
(16,39,0)
(35,23,0)
(51,21,0)
(12,49,0)
(26,42,0)
(36,23,0)
(42,2,0)
(29,7,0)
(30,46,0)
(41,39,0)
(1,7,0)
(4,40,0)
(40,23,0)
(48,49,0)
(2,49,0)
(13,14,0)
(38,14,0)
(21,2,0)
(9,52,0)
(40,36,0)
(3,17,0)
(42,39,0)
(33,40,0)
(39,12,0)
(10,12,0)
(34,36,0)
(11,17,0)
(33,12,0)
(37,5,0)
(5,17,0)
(47,42,0)
(8,36,0)
(19,49,0)
(31,40,0)
(28,23,0)
(39,42,0)
(46,24,0)
(7,46,0)
(32,52,0)
(2,21,0)
(24,23,0)
(42,39,1)
(0,12,1)
(22,10,1)
(12,33,1)
(18,1,1)
(10,25,1)
(40,4,1)
(31,36,1)
(39,41,1)
(37,25,1)
(33,40,1)
(5,37,1)
(43,26,1)
(4,31,1)
(33,22,1)
(2,21,1)
(47,52,1)
(52,12,1)
(45,5,1)
(50,42,1)
(39,40,1)
(13,2,1)
(21,51,1)
(52,32,1)
(38,13,1)
(1,46,1)
(9,43,1)
(42,2,1)
(40,36,1)
(39,12,1)
(26,39,1)
(15,7,1)
(42,47,1)
(30,45,1)
(36,8,1)
(46,30,1)
(7,29,1)
(7,46,1)
(30,50,1)
(16,14,1)
(25,40,1)
(50,14,1)
(29,18,1)
(32,9,1)
(14,38,1)
(51,0,1)
(41,16,1)
(14,2,1)
(8,34,1)
(14,25,2)
(12,33,2)
(32,14,2)
(42,14,2)
(33,25,2)
(16,14,2)
(47,52,2)
(2,21,2)
(42,47,2)
(2,25,2)
(51,25,2)
(50,25,2)
(38,25,2)
(13,25,2)
(41,14,2)
(39,12,2)
(43,14,2)
(47,14,2)
(7,46,2)
(39,40,2)
(33,40,2)
(37,25,2)
(52,12,2)
(40,36,2)
(21,25,2)
(14,2,2)
(45,25,2)
(0,25,2)
(26,14,2)
(10,25,2)
(52,14,2)
(5,25,2)
(42,2,2)
(12,25,2)
(42,39,2)
(22,25,2)
(9,14,2)
(39,14,2)
-----------------------------------
(0,environment)
(1,_P_WAIT)
(2,* environment = GETENV(ENV_VARIABLE)
(3,default:)
(4,dataBuffer)
(5,printLine("Benign, fixed string")
(6,args)
(7,_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
(8,COMMAND_ARG2)
(9,dataLen)
(10,dataLen)
(11,case 6:)
(12,dataLen = wcslen(data)
(13,environment)
(14,environment != NULL)
(15,RET)
(16,data)
(17,)
(18,COMMAND_INT_PATH)
(19,dataLen)
(20,)
(21,GETENV(ENV_VARIABLE)
(22,data)
(23,)
(24,)
(25,6)
(26,environment)
(27,dataBuffer)
(28,switch(6)
(29,args)
(30,args)
(31,data)
(32,1)
(33,wcslen(data)
(34,dataBuffer)
(35,data)
(36,dataBuffer[100] = COMMAND_ARG2)
(37,"Benign, fixed string")
(38,NULL)
(39,data+dataLen)
(40,data = dataBuffer)
(41,dataLen)
(42,wcsncat(data+dataLen, environment, 100-dataLen-1)
(43,100)
(44,environment)
(45,break;)
(46,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(47,100-dataLen-1)
(48,if (environment != NULL)
(49,)
(50,break;)
(51,ENV_VARIABLE)
(52,dataLen-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
