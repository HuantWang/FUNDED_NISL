-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(GLOBAL_CONST_FALSE)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
31,32
32,33
33,34
33,35
34,35
37,38
38,39
39,40
39,41
39,42
40,41
42,43
45,46
45,47
46,47
46,48
47,48
47,49
48,49
50,51
53,54
53,55
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,35,36,41,43,44,49,51,52,57,58,62,63
-----computeFrom-----
23,24
23,25
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(GLOBAL_CONST_FALSE)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
GLOBAL_CONST_FALSE
GLOBAL_CONST_FALSE
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(19,12,0)
(9,4,0)
(22,18,0)
(18,26,0)
(5,18,0)
(13,28,0)
(12,19,0)
(14,1,0)
(24,5,0)
(28,25,0)
(2,28,0)
(23,3,0)
(21,26,0)
(15,19,0)
(6,18,0)
(7,12,0)
(4,10,0)
(12,5,0)
(5,26,0)
(17,26,0)
(27,26,0)
(0,26,0)
(28,5,0)
(1,20,0)
(8,5,0)
(3,20,0)
(19,12,1)
(9,16,1)
(3,23,1)
(8,24,1)
(18,22,1)
(22,6,1)
(7,4,1)
(28,2,1)
(5,8,1)
(2,13,1)
(14,3,1)
(7,28,1)
(28,5,1)
(16,5,1)
(12,5,1)
(24,18,1)
(4,9,1)
(12,7,1)
(19,15,1)
(23,19,1)
(1,14,1)
(13,16,1)
(5,18,1)
(11,19,1)
(11,1,1)
(15,12,1)
(3,19,2)
(19,12,2)
(2,16,2)
(28,16,2)
(14,19,2)
(13,16,2)
(9,16,2)
(5,18,2)
(1,19,2)
(28,5,2)
(12,5,2)
(4,16,2)
(23,19,2)
-----------------------------------
(0,data_buf)
(1,exit(1)
(2,"*.*")
(3,printLine("command execution failed!")
(4,printLine("Benign, fixed string")
(5,data = data_buf)
(6,data_buf)
(7,data)
(8,data_buf)
(9,"Benign, fixed string")
(10,)
(11,RET)
(12,SYSTEM(data)
(13,data)
(14,1)
(15,0)
(16,GLOBAL_CONST_FALSE)
(17,if(GLOBAL_CONST_FALSE)
(18,data_buf[100] = FULL_COMMAND)
(19,SYSTEM(data)
(20,)
(21,data)
(22,FULL_COMMAND)
(23,"command execution failed!")
(24,data)
(25,)
(26,)
(27,if (SYSTEM(data)
(28,strcat(data, "*.*")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
