-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
31,32
32,33
33,34
33,35
34,35
37,38
38,39
39,40
39,41
39,42
40,41
42,43
45,46
45,47
46,47
46,48
47,48
47,49
48,49
50,51
53,54
53,55
54,55
55,56
55,57
56,57
59,60
60,61
60,62
61,62
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,35,36,41,43,44,49,51,52,57,58,62,63
-----computeFrom-----
23,24
23,25
46,47
46,48
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalFalse
globalFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(27,5,0)
(23,19,0)
(7,16,0)
(18,7,0)
(25,7,0)
(5,24,0)
(0,15,0)
(13,15,0)
(19,7,0)
(1,10,0)
(19,11,0)
(2,21,0)
(9,21,0)
(15,7,0)
(8,12,0)
(4,21,0)
(28,16,0)
(16,21,0)
(10,12,0)
(6,21,0)
(7,21,0)
(15,13,0)
(3,19,0)
(14,16,0)
(22,8,0)
(26,13,0)
(0,5,1)
(19,23,1)
(10,1,1)
(13,26,1)
(16,14,1)
(23,3,1)
(7,16,1)
(1,13,1)
(7,25,1)
(5,27,1)
(17,13,1)
(0,19,1)
(15,0,1)
(3,20,1)
(22,10,1)
(20,7,1)
(17,8,1)
(25,18,1)
(27,20,1)
(19,7,1)
(13,15,1)
(8,22,1)
(18,16,1)
(26,15,1)
(15,7,1)
(14,28,1)
(13,15,2)
(10,13,2)
(22,13,2)
(27,20,2)
(19,7,2)
(8,13,2)
(7,16,2)
(15,7,2)
(19,20,2)
(1,13,2)
(5,20,2)
(3,20,2)
(23,20,2)
-----------------------------------
(0,data)
(1,"command execution failed!")
(2,data_buf)
(3,data)
(4,data)
(5,printLine("Benign, fixed string")
(6,if (SYSTEM(data)
(7,data = data_buf)
(8,exit(1)
(9,if(globalFalse)
(10,printLine("command execution failed!")
(11,)
(12,)
(13,SYSTEM(data)
(14,FULL_COMMAND)
(15,SYSTEM(data)
(16,data_buf[100] = FULL_COMMAND)
(17,RET)
(18,data)
(19,strcat(data, "*.*")
(20,globalFalse)
(21,)
(22,1)
(23,"*.*")
(24,)
(25,data_buf)
(26,0)
(27,"Benign, fixed string")
(28,data_buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
