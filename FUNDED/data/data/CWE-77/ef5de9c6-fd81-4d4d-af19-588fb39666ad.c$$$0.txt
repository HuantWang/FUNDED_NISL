-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_system_34_bad()
{
    char * data;
    CWE78_OS_Command_Injection__char_file_system_34_unionType myUnion;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    myUnion.unionFirst = data;
    {
        char * data = myUnion.unionSecond;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
34,36
34,37
35,36
36,37
36,38
37,38
39,40
39,41
41,42
42,43
42,44
43,44
45,46
47,48
48,49
48,50
49,50
51,52
51,53
54,55
54,56
55,56
55,57
56,57
56,58
58,59
61,62
61,63
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
80,81
80,82
81,82
81,83
81,84
81,85
82,83
84,85
84,86
85,86
87,88
89,90
89,91
90,91
90,92
93,94
94,95
94,96
96,97
98,99
100,101
102,103
102,104
103,104
104,105
104,106
105,106
108,109
109,110
109,111
110,111
110,112
111,112
113,114
116,117
117,118
117,119
118,119
120,121
122,123
123,124
123,125
124,125
124,126
125,126
128,129
130,131
130,132
131,132
132,133
132,134
134,135
134,136
134,137
137,138
138,139
138,140
139,140
142,143
142,144
143,144
143,145
144,145
144,146
145,146
147,148
150,151
150,152
151,152
152,153
152,154
153,154
156,157
157,158
157,159
158,159
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,38,40,44,46,50,52,53,57,59,60,65,68,70,71,75,77,83,86,88,91,92,95,97,99,101,106,107,112,114,115,119,121,126,127,129,133,135,136,140,141,146,148,149,154,155,159,160
-----computeFrom-----
29,30
29,31
55,56
55,57
56,57
56,58
63,64
63,65
73,74
73,75
80,81
80,82
84,85
84,86
94,95
94,96
109,110
109,111
123,124
123,125
143,144
143,145
-----guardedBy-----
59,114
77,101
75,121
86,112
97,114
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_system_34_bad(){    char * data;    CWE78_OS_Command_Injection__char_file_system_34_unionType myUnion;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
void
CWE78_OS_Command_Injection__char_file_system_34_bad()
CWE78_OS_Command_Injection__char_file_system_34_bad
{    char * data;    CWE78_OS_Command_Injection__char_file_system_34_unionType myUnion;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    myUnion.unionFirst = data;    {        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
char * data;
char * data;
char
* data
*
data
CWE78_OS_Command_Injection__char_file_system_34_unionType myUnion;
CWE78_OS_Command_Injection__char_file_system_34_unionType myUnion;
CWE78_OS_Command_Injection__char_file_system_34_unionType
CWE78_OS_Command_Injection__char_file_system_34_unionType
myUnion
myUnion
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        char * data = myUnion.unionSecond;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
char * data = myUnion.unionSecond;
char * data = myUnion.unionSecond;
char
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(70,10,0)
(9,56,0)
(66,60,0)
(68,39,0)
(38,54,0)
(69,30,0)
(10,43,0)
(73,27,0)
(26,43,0)
(78,14,0)
(60,58,0)
(8,77,0)
(53,30,0)
(35,63,0)
(14,15,0)
(61,0,0)
(9,13,0)
(44,13,0)
(40,10,0)
(4,70,0)
(13,9,0)
(76,36,0)
(21,53,0)
(72,77,0)
(70,74,0)
(22,9,0)
(32,2,0)
(20,74,0)
(18,63,0)
(19,9,0)
(75,52,0)
(57,43,0)
(77,79,0)
(14,10,0)
(79,77,0)
(2,45,0)
(64,39,0)
(41,15,0)
(13,44,0)
(15,52,0)
(63,35,0)
(56,10,0)
(5,51,0)
(33,24,0)
(60,79,0)
(10,74,0)
(16,74,0)
(30,27,0)
(48,7,0)
(23,14,0)
(43,74,0)
(14,30,0)
(13,0,0)
(39,71,0)
(9,79,0)
(56,30,0)
(51,74,0)
(17,68,0)
(54,70,0)
(28,27,0)
(0,13,0)
(53,10,0)
(30,53,0)
(55,0,0)
(65,19,0)
(39,51,0)
(47,71,0)
(25,29,0)
(42,10,0)
(56,9,0)
(31,58,0)
(49,79,0)
(3,75,0)
(63,30,0)
(1,74,0)
(29,79,0)
(12,56,0)
(34,71,0)
(6,35,0)
(27,74,0)
(79,36,0)
(24,68,0)
(0,30,0)
(67,29,0)
(9,19,0)
(7,45,0)
(11,51,0)
(71,39,0)
(59,27,0)
(68,24,0)
(62,54,0)
(50,63,0)
(37,56,0)
(10,42,1)
(9,79,1)
(41,14,1)
(39,71,1)
(2,32,1)
(24,33,1)
(14,78,1)
(35,6,1)
(61,56,1)
(42,40,1)
(3,19,1)
(19,9,1)
(4,54,1)
(14,30,1)
(38,35,1)
(13,44,1)
(60,79,1)
(6,63,1)
(69,10,1)
(9,13,1)
(17,39,1)
(53,21,1)
(68,17,1)
(8,49,1)
(68,39,1)
(46,24,1)
(23,75,1)
(66,19,1)
(34,64,1)
(43,57,1)
(72,8,1)
(46,2,1)
(70,10,1)
(29,79,1)
(37,29,1)
(32,7,1)
(79,77,1)
(70,4,1)
(0,55,1)
(66,15,1)
(56,30,1)
(7,48,1)
(75,3,1)
(33,68,1)
(30,53,1)
(65,9,1)
(0,30,1)
(21,69,1)
(22,13,1)
(54,62,1)
(55,61,1)
(60,66,1)
(29,25,1)
(9,22,1)
(13,0,1)
(78,23,1)
(15,41,1)
(24,68,1)
(38,29,1)
(47,34,1)
(63,30,1)
(56,10,1)
(71,47,1)
(77,72,1)
(35,63,1)
(40,43,1)
(62,38,1)
(56,12,1)
(63,50,1)
(64,70,1)
(9,56,1)
(67,79,1)
(38,60,1)
(18,30,1)
(53,10,1)
(49,35,1)
(10,43,1)
(14,10,1)
(57,26,1)
(25,67,1)
(48,24,1)
(19,65,1)
(12,37,1)
(50,18,1)
(15,19,2)
(60,29,2)
(67,35,2)
(24,68,2)
(77,35,2)
(56,29,2)
(72,35,2)
(25,35,2)
(79,77,2)
(66,29,2)
(14,10,2)
(13,0,2)
(49,35,2)
(14,19,2)
(37,29,2)
(9,56,2)
(65,29,2)
(53,10,2)
(68,39,2)
(29,79,2)
(7,24,2)
(79,35,2)
(2,24,2)
(9,79,2)
(19,9,2)
(70,10,2)
(0,29,2)
(55,29,2)
(29,35,2)
(32,24,2)
(22,29,2)
(14,30,2)
(78,19,2)
(35,63,2)
(10,43,2)
(41,19,2)
(61,29,2)
(13,29,2)
(12,29,2)
(56,30,2)
(60,79,2)
(75,19,2)
(0,30,2)
(56,10,2)
(39,71,2)
(30,53,2)
(48,24,2)
(8,35,2)
(3,19,2)
(63,30,2)
(13,44,2)
(19,29,2)
(9,13,2)
(9,29,2)
(23,19,2)
-----------------------------------
(0,100-dataLen)
(1,data)
(2,exit(1)
(3,"fgets()
(4,data)
(5,if (SYSTEM(data)
(6,1)
(7,printLine("command execution failed!")
(8,FILENAME)
(9,fgets(data+dataLen, (int)
(10,data = data_buf)
(11,data)
(12,dataLen)
(13,(int)
(14,data[dataLen])
(15,data[dataLen] = \\\'\\\\0\\\')
(16,myUnion)
(17,data)
(18,100)
(19,fgets(data+dataLen, (int)
(20,data_buf)
(21,data)
(22,pFile)
(23,data)
(24,SYSTEM(data)
(25,NULL)
(26,data_buf)
(27,)
(28,pFile)
(29,pFile != NULL)
(30,dataLen = strlen(data)
(31,if (fgets(data+dataLen, (int)
(32,1)
(33,0)
(34,myUnion)
(35,100-dataLen > 1)
(36,)
(37,data)
(38,myUnion)
(39,* data = myUnion.unionSecond)
(40,data)
(41,\\\'\\\\0\\\')
(42,data_buf)
(43,data_buf[100] = FULL_COMMAND)
(44,int)
(45,)
(46,RET)
(47,unionSecond)
(48,"command execution failed!")
(49,pFile)
(50,dataLen)
(51,)
(52,)
(53,strlen(data)
(54,myUnion.unionFirst)
(55,dataLen)
(56,data+dataLen)
(57,FULL_COMMAND)
(58,)
(59,if (100-dataLen > 1)
(60,fclose(pFile)
(61,100)
(62,unionFirst)
(63,100-dataLen)
(64,data)
(65,NULL)
(66,pFile)
(67,pFile)
(68,SYSTEM(data)
(69,dataLen)
(70,myUnion.unionFirst = data)
(71,myUnion.unionSecond)
(72,"r")
(73,dataLen)
(74,)
(75,printLine("fgets()
(76,if (pFile != NULL)
(77,fopen(FILENAME, "r")
(78,dataLen)
(79,pFile = fopen(FILENAME, "r")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
