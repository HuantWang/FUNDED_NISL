-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
32,34
33,34
33,35
34,35
34,36
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
45,46
47,48
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
72,74
74,75
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,35,37,38,43,46,48,49,53,55,61,64,66,69,70,73,75,77,79,84,85,90,92,93,97,99,102
-----computeFrom-----
33,34
33,35
34,35
34,36
41,42
41,43
51,52
51,53
58,59
58,60
62,63
62,64
72,73
72,74
87,88
87,89
-----guardedBy-----
37,92
55,79
53,99
64,90
75,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(38,50,0)
(48,49,0)
(16,33,0)
(47,2,0)
(22,50,0)
(34,46,0)
(6,37,0)
(12,26,0)
(43,1,0)
(50,28,0)
(10,3,0)
(6,24,0)
(37,6,0)
(28,12,0)
(0,5,0)
(13,12,0)
(23,5,0)
(42,38,0)
(39,18,0)
(19,29,0)
(18,8,0)
(24,28,0)
(19,26,0)
(49,51,0)
(49,33,0)
(27,28,0)
(1,8,0)
(24,6,0)
(20,21,0)
(51,28,0)
(46,29,0)
(15,51,0)
(30,19,0)
(35,14,0)
(17,24,0)
(41,2,0)
(2,3,0)
(49,3,0)
(50,38,0)
(44,46,0)
(3,25,0)
(5,3,0)
(32,27,0)
(45,24,0)
(31,12,0)
(46,28,0)
(27,29,0)
(33,49,0)
(36,51,0)
(51,49,0)
(3,2,0)
(9,50,0)
(40,25,0)
(4,12,0)
(51,29,0)
(49,6,0)
(6,49,0)
(14,21,0)
(11,19,0)
(14,3,0)
(28,27,0)
(7,28,0)
(46,1,0)
(38,42,1)
(38,50,1)
(28,27,1)
(1,43,1)
(30,5,1)
(24,17,1)
(50,9,1)
(14,35,1)
(51,28,1)
(49,6,1)
(39,33,1)
(46,44,1)
(18,39,1)
(35,33,1)
(46,29,1)
(24,28,1)
(14,3,1)
(27,32,1)
(49,51,1)
(43,46,1)
(32,7,1)
(19,29,1)
(6,37,1)
(48,6,1)
(51,29,1)
(11,19,1)
(0,23,1)
(33,16,1)
(35,1,1)
(27,29,1)
(47,41,1)
(36,15,1)
(46,28,1)
(33,49,1)
(5,3,1)
(10,38,1)
(41,10,1)
(6,24,1)
(51,36,1)
(15,5,1)
(49,48,1)
(50,28,1)
(23,3,1)
(9,22,1)
(34,18,1)
(5,0,1)
(45,51,1)
(16,49,1)
(3,2,1)
(30,38,1)
(42,50,1)
(49,3,1)
(22,28,1)
(17,45,1)
(30,14,1)
(19,30,1)
(2,47,1)
(44,34,1)
(3,2,2)
(36,5,2)
(39,33,2)
(16,5,2)
(50,28,2)
(5,38,2)
(17,5,2)
(0,38,2)
(19,29,2)
(11,19,2)
(27,29,2)
(33,49,2)
(35,5,2)
(38,50,2)
(45,5,2)
(24,28,2)
(43,33,2)
(49,6,2)
(44,33,2)
(33,5,2)
(49,51,2)
(51,29,2)
(5,3,2)
(1,33,2)
(28,27,2)
(48,5,2)
(15,5,2)
(14,5,2)
(41,38,2)
(2,38,2)
(46,33,2)
(46,28,2)
(6,5,2)
(49,5,2)
(46,29,2)
(18,33,2)
(3,38,2)
(6,37,2)
(49,3,2)
(14,3,2)
(47,38,2)
(10,38,2)
(23,38,2)
(51,5,2)
(6,24,2)
(24,5,2)
(51,28,2)
(34,33,2)
-----------------------------------
(0,NULL)
(1,data[dataLen] = \\\'\\\\0\\\')
(2,fopen(FILENAME, "r")
(3,pFile = fopen(FILENAME, "r")
(4,dataLen)
(5,pFile != NULL)
(6,(int)
(7,dataLen)
(8,)
(9,dataLen)
(10,pFile)
(11,RET)
(12,)
(13,if (100-dataLen > 1)
(14,fclose(pFile)
(15,data)
(16,NULL)
(17,dataLen)
(18,printLine("fgets()
(19,return data;)
(20,if (fgets(data+dataLen, (int)
(21,)
(22,100)
(23,pFile)
(24,100-dataLen)
(25,)
(26,)
(27,strlen(data)
(28,dataLen = strlen(data)
(29,char * data)
(30,data)
(31,pFile)
(32,data)
(33,fgets(data+dataLen, (int)
(34,data)
(35,pFile)
(36,dataLen)
(37,int)
(38,100-dataLen > 1)
(39,"fgets()
(40,if (pFile != NULL)
(41,FILENAME)
(42,1)
(43,\\\'\\\\0\\\')
(44,dataLen)
(45,100)
(46,data[dataLen])
(47,"r")
(48,pFile)
(49,fgets(data+dataLen, (int)
(50,100-dataLen)
(51,data+dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
