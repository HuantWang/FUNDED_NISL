-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(5==5)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnvp(_P_WAIT, COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
32,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
44,47
44,48
48,49
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
59,60
59,61
59,62
59,63
60,61
62,63
64,65
66,67
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,31,36,38,39,43,45,46,47,51,53,55,57,61,63,65,67
-----computeFrom-----
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(5==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(5==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(5==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
5==5
5
5
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnvp(_P_WAIT, COMMAND_INT, args);
_spawnvp(_P_WAIT, COMMAND_INT, args)
_spawnvp
_spawnvp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(8,7,0)
(1,0,0)
(3,22,0)
(1,17,0)
(17,0,0)
(13,23,0)
(9,1,0)
(24,20,0)
(7,0,0)
(11,7,0)
(14,20,0)
(2,17,0)
(25,17,0)
(20,8,0)
(5,1,0)
(4,0,0)
(15,23,0)
(22,10,0)
(6,20,0)
(21,0,0)
(22,1,0)
(12,0,0)
(20,7,0)
(16,22,0)
(19,8,0)
(19,22,1)
(2,25,1)
(18,20,1)
(19,23,1)
(24,14,1)
(5,17,1)
(1,9,1)
(1,17,1)
(9,5,1)
(8,19,1)
(15,13,1)
(14,8,1)
(3,23,1)
(22,1,1)
(13,1,1)
(6,24,1)
(22,16,1)
(20,8,1)
(23,15,1)
(17,2,1)
(16,3,1)
(20,6,1)
(22,1,2)
(20,8,2)
(1,17,2)
(16,23,2)
(3,23,2)
(22,23,2)
-----------------------------------
(0,)
(1,data = dataBuffer)
(2,COMMAND_ARG2)
(3,data)
(4,dataBuffer)
(5,data)
(6,args)
(7,)
(8,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(9,dataBuffer)
(10,)
(11,args)
(12,data)
(13,5)
(14,_P_WAIT)
(15,5)
(16,"*.*")
(17,dataBuffer[100] = COMMAND_ARG2)
(18,RET)
(19,args)
(20,_spawnvp(_P_WAIT, COMMAND_INT, args)
(21,if(5==5)
(22,strcat(data, "*.*")
(23,5==5)
(24,COMMAND_INT)
(25,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
