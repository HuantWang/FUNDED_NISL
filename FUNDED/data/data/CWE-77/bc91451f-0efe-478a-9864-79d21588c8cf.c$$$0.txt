-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_badData = data;
    CWE78_OS_Command_Injection__char_console_w32_spawnvp_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_spawnvp_68b_badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_spawnvp_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_badData = data;
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_badData = data
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_badData
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_badData
data
data
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68b_badSink();
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68b_badSink()
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnvp_68b_badSink
-----joern-----
(22,11,0)
(13,17,0)
(29,67,0)
(16,59,0)
(48,59,0)
(2,47,0)
(54,48,0)
(49,31,0)
(33,47,0)
(6,7,0)
(63,31,0)
(7,6,0)
(64,67,0)
(36,49,0)
(8,51,0)
(21,61,0)
(19,46,0)
(14,50,0)
(41,34,0)
(31,54,0)
(36,42,0)
(59,46,0)
(26,3,0)
(49,36,0)
(35,54,0)
(7,2,0)
(66,49,0)
(45,29,0)
(62,2,0)
(42,36,0)
(37,54,0)
(40,36,0)
(55,11,0)
(24,59,0)
(17,54,0)
(4,59,0)
(17,59,0)
(2,43,0)
(31,49,0)
(5,55,0)
(58,34,0)
(53,59,0)
(65,62,0)
(60,43,0)
(12,48,0)
(1,35,0)
(35,61,0)
(11,59,0)
(71,7,0)
(20,35,0)
(61,15,0)
(17,36,0)
(46,34,0)
(35,59,0)
(9,24,0)
(27,15,0)
(43,59,0)
(69,46,0)
(48,54,0)
(72,4,0)
(4,62,0)
(10,26,0)
(38,31,0)
(70,27,0)
(68,62,0)
(55,2,0)
(50,34,0)
(67,54,0)
(25,34,0)
(43,2,0)
(6,51,0)
(30,55,0)
(67,29,0)
(28,7,0)
(24,34,0)
(54,50,0)
(39,2,0)
(51,4,0)
(0,57,0)
(52,24,0)
(49,66,0)
(4,51,0)
(44,17,0)
(51,6,0)
(36,17,0)
(59,34,0)
(23,50,0)
(32,67,0)
(11,55,0)
(11,26,0)
(56,42,0)
(62,4,0)
(26,10,1)
(13,29,1)
(24,52,1)
(62,68,1)
(48,12,1)
(51,4,1)
(69,19,1)
(4,59,1)
(43,59,1)
(67,54,1)
(60,39,1)
(41,24,1)
(56,36,1)
(49,66,1)
(22,6,1)
(59,53,1)
(28,71,1)
(9,61,1)
(20,1,1)
(63,38,1)
(17,44,1)
(16,46,1)
(53,16,1)
(29,67,1)
(62,2,1)
(48,59,1)
(4,62,1)
(67,64,1)
(24,59,1)
(9,29,1)
(65,72,1)
(46,69,1)
(49,31,1)
(35,59,1)
(8,4,1)
(61,21,1)
(11,55,1)
(55,5,1)
(7,2,1)
(70,42,1)
(42,36,1)
(45,67,1)
(11,59,1)
(40,49,1)
(35,20,1)
(59,46,1)
(54,48,1)
(17,59,1)
(72,7,1)
(29,45,1)
(9,6,1)
(31,54,1)
(51,8,1)
(10,11,1)
(55,2,1)
(38,17,1)
(43,60,1)
(30,22,1)
(36,17,1)
(32,54,1)
(2,43,1)
(7,28,1)
(37,59,1)
(39,42,1)
(44,13,1)
(52,9,1)
(9,26,1)
(36,49,1)
(64,32,1)
(68,65,1)
(21,35,1)
(1,27,1)
(42,56,1)
(71,2,1)
(5,30,1)
(35,54,1)
(36,40,1)
(6,51,1)
(17,54,1)
(18,41,1)
(6,7,1)
(31,63,1)
(27,70,1)
(12,37,1)
(31,54,2)
(44,29,2)
(63,29,2)
(2,43,2)
(20,42,2)
(7,2,2)
(6,7,2)
(6,42,2)
(51,4,2)
(13,29,2)
(11,6,2)
(61,42,2)
(38,29,2)
(24,59,2)
(59,46,2)
(43,59,2)
(17,59,2)
(55,2,2)
(55,6,2)
(7,42,2)
(36,29,2)
(27,42,2)
(51,7,2)
(1,42,2)
(17,54,2)
(54,48,2)
(42,36,2)
(8,7,2)
(72,7,2)
(40,29,2)
(42,29,2)
(60,42,2)
(30,6,2)
(49,31,2)
(11,55,2)
(36,49,2)
(35,42,2)
(21,42,2)
(4,59,2)
(62,7,2)
(35,59,2)
(26,6,2)
(10,6,2)
(29,67,2)
(62,2,2)
(22,6,2)
(11,59,2)
(70,42,2)
(67,54,2)
(5,6,2)
(28,42,2)
(68,7,2)
(35,54,2)
(65,7,2)
(6,51,2)
(39,42,2)
(71,42,2)
(4,62,2)
(2,42,2)
(48,59,2)
(43,42,2)
(49,66,2)
(31,29,2)
(17,29,2)
(56,29,2)
(36,17,2)
(49,29,2)
(4,7,2)
-----------------------------------
(0,if (fgets(data+dataLen, (int)
(1,data)
(2,dataLen = strlen(data)
(3,)
(4,data[dataLen-1])
(5,1)
(6,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(7,dataLen > 0)
(8,\\\'\\\\n\\\')
(9,CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_badData)
(10,\\\'\\\\0\\\')
(11,data[dataLen-1])
(12,data)
(13,data)
(14,dataLen)
(15,)
(16,data)
(17,data+dataLen)
(18,RET)
(19,dataBuffer)
(20,dataLen)
(21,\\\'\\\\0\\\')
(22,data)
(23,if (100-dataLen > 1)
(24,CWE78_OS_Command_Injection__char_console_w32_spawnvp_68_badData = data)
(25,dataBuffer)
(26,data[dataLen-1] = \\\'\\\\0\\\')
(27,printLine("fgets()
(28,0)
(29,100-dataLen > 1)
(30,dataLen)
(31,100-dataLen)
(32,100)
(33,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(34,)
(35,data[dataLen])
(36,fgets(data+dataLen, (int)
(37,dataLen)
(38,100)
(39,dataLen)
(40,stdin)
(41,CWE78_OS_Command_Injection__char_console_w32_spawnvp_68b_badSink()
(42,fgets(data+dataLen, (int)
(43,strlen(data)
(44,dataLen)
(45,1)
(46,dataBuffer[100] = COMMAND_ARG2)
(47,)
(48,strlen(data)
(49,(int)
(50,)
(51,data[dataLen-1] == \\\'\\\\n\\\')
(52,data)
(53,dataBuffer)
(54,dataLen = strlen(data)
(55,dataLen-1)
(56,NULL)
(57,)
(58,data)
(59,data = dataBuffer)
(60,data)
(61,data[dataLen] = \\\'\\\\0\\\')
(62,dataLen-1)
(63,dataLen)
(64,dataLen)
(65,dataLen)
(66,int)
(67,100-dataLen)
(68,1)
(69,COMMAND_ARG2)
(70,"fgets()
(71,dataLen)
(72,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
