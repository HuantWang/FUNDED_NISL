-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;
    CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;    CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data;
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData
CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData
data
data
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink();
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink()
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink
-----joern-----
(44,32,0)
(0,62,0)
(12,40,0)
(31,38,0)
(50,31,0)
(71,4,0)
(69,31,0)
(38,37,0)
(20,40,0)
(58,60,0)
(70,42,0)
(37,38,0)
(48,42,0)
(19,62,0)
(50,62,0)
(42,70,0)
(16,38,0)
(61,2,0)
(17,4,0)
(47,69,0)
(67,30,0)
(22,32,0)
(29,16,0)
(32,22,0)
(65,61,0)
(6,62,0)
(22,62,0)
(2,61,0)
(19,13,0)
(25,4,0)
(34,16,0)
(21,50,0)
(38,16,0)
(40,11,0)
(40,20,0)
(50,11,0)
(49,57,0)
(72,45,0)
(35,9,0)
(57,6,0)
(36,22,0)
(59,9,0)
(62,4,0)
(26,31,0)
(52,55,0)
(51,65,0)
(11,45,0)
(54,11,0)
(16,11,0)
(6,57,0)
(41,53,0)
(45,62,0)
(17,62,0)
(24,4,0)
(11,9,0)
(70,1,0)
(18,17,0)
(31,69,0)
(3,32,0)
(65,57,0)
(22,2,0)
(60,4,0)
(70,62,0)
(9,4,0)
(33,60,0)
(15,19,0)
(10,17,0)
(63,19,0)
(66,20,0)
(61,65,0)
(13,39,0)
(53,39,0)
(62,60,0)
(23,1,0)
(2,22,0)
(8,6,0)
(31,50,0)
(56,70,0)
(32,57,0)
(1,28,0)
(57,55,0)
(42,57,0)
(46,65,0)
(64,40,0)
(68,50,0)
(5,13,0)
(19,11,0)
(7,2,0)
(45,11,0)
(38,31,0)
(43,42,0)
(14,62,0)
(54,62,1)
(17,62,1)
(18,1,1)
(16,11,1)
(8,49,1)
(17,10,1)
(16,29,1)
(38,37,1)
(3,36,1)
(61,2,1)
(45,62,1)
(47,31,1)
(65,57,1)
(50,21,1)
(31,26,1)
(56,61,1)
(31,38,1)
(20,66,1)
(72,54,1)
(62,60,1)
(42,43,1)
(19,11,1)
(6,8,1)
(14,0,1)
(50,11,1)
(57,6,1)
(19,62,1)
(33,58,1)
(6,62,1)
(41,69,1)
(66,40,1)
(42,57,1)
(62,14,1)
(38,16,1)
(15,63,1)
(50,62,1)
(32,44,1)
(18,20,1)
(18,13,1)
(60,33,1)
(26,38,1)
(12,11,1)
(22,62,1)
(70,42,1)
(49,69,1)
(27,25,1)
(61,65,1)
(21,68,1)
(40,64,1)
(32,57,1)
(40,11,1)
(5,19,1)
(63,53,1)
(1,23,1)
(13,5,1)
(25,17,1)
(7,22,1)
(68,20,1)
(43,48,1)
(46,57,1)
(36,65,1)
(19,15,1)
(2,7,1)
(69,31,1)
(20,40,1)
(0,60,1)
(48,56,1)
(10,18,1)
(22,32,1)
(2,22,1)
(70,62,1)
(31,50,1)
(69,47,1)
(53,41,1)
(34,50,1)
(45,72,1)
(23,70,1)
(51,46,1)
(11,45,1)
(18,61,1)
(44,3,1)
(65,51,1)
(29,34,1)
(64,12,1)
(69,20,2)
(13,69,2)
(38,16,2)
(50,11,2)
(2,65,2)
(46,69,2)
(38,37,2)
(29,20,2)
(1,61,2)
(70,42,2)
(48,61,2)
(57,69,2)
(22,32,2)
(38,20,2)
(40,11,2)
(31,50,2)
(3,65,2)
(19,62,2)
(41,69,2)
(42,61,2)
(16,20,2)
(23,61,2)
(65,57,2)
(36,65,2)
(34,20,2)
(50,20,2)
(6,62,2)
(5,69,2)
(32,65,2)
(7,65,2)
(31,38,2)
(42,57,2)
(31,20,2)
(22,65,2)
(22,62,2)
(19,69,2)
(61,69,2)
(61,65,2)
(65,69,2)
(6,69,2)
(51,69,2)
(11,45,2)
(15,69,2)
(32,57,2)
(56,61,2)
(16,11,2)
(70,62,2)
(47,20,2)
(26,20,2)
(20,40,2)
(63,69,2)
(50,62,2)
(61,2,2)
(8,69,2)
(19,11,2)
(70,61,2)
(43,61,2)
(69,31,2)
(2,22,2)
(21,20,2)
(62,60,2)
(45,62,2)
(68,20,2)
(44,65,2)
(53,69,2)
(49,69,2)
(57,6,2)
(17,62,2)
-----------------------------------
(0,data)
(1,data[dataLen-1] = \\\'\\\\0\\\')
(2,data[dataLen-1] == \\\'\\\\n\\\')
(3,dataLen)
(4,)
(5,\\\'\\\\0\\\')
(6,strlen(data)
(7,\\\'\\\\n\\\')
(8,data)
(9,)
(10,data)
(11,dataLen = strlen(data)
(12,100)
(13,data[dataLen] = \\\'\\\\0\\\')
(14,dataBuffer)
(15,dataLen)
(16,100-dataLen)
(17,CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData = data)
(18,CWE78_OS_Command_Injection__char_console_w32_spawnv_68_badData)
(19,data[dataLen])
(20,100-dataLen > 1)
(21,dataLen)
(22,data[dataLen-1])
(23,\\\'\\\\0\\\')
(24,dataBuffer)
(25,CWE78_OS_Command_Injection__char_console_w32_spawnv_68b_badSink()
(26,stdin)
(27,RET)
(28,)
(29,dataLen)
(30,)
(31,fgets(data+dataLen, (int)
(32,dataLen-1)
(33,COMMAND_ARG2)
(34,100)
(35,dataLen)
(36,data)
(37,int)
(38,(int)
(39,)
(40,100-dataLen)
(41,"fgets()
(42,dataLen-1)
(43,1)
(44,1)
(45,strlen(data)
(46,dataLen)
(47,NULL)
(48,dataLen)
(49,dataLen)
(50,data+dataLen)
(51,0)
(52,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(53,printLine("fgets()
(54,dataLen)
(55,)
(56,data)
(57,dataLen = strlen(data)
(58,dataBuffer)
(59,if (100-dataLen > 1)
(60,dataBuffer[100] = COMMAND_ARG2)
(61,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(62,data = dataBuffer)
(63,data)
(64,dataLen)
(65,dataLen > 0)
(66,1)
(67,if (fgets(data+dataLen, (int)
(68,data)
(69,fgets(data+dataLen, (int)
(70,data[dataLen-1])
(71,data)
(72,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
