-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    /* wexecl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
55,56
55,57
55,58
55,59
55,60
55,61
56,57
58,59
60,61
62,63
64,65
66,67
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,57,59,61,63,65,67
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* wexecl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B()
goodG2B
{    int h;    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* wexecl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
int h;
int h;
int
h
h
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(8,16,0)
(21,8,0)
(9,11,0)
(24,3,0)
(20,3,0)
(13,3,0)
(23,4,0)
(18,14,0)
(0,4,0)
(15,4,0)
(6,4,0)
(17,16,0)
(7,11,0)
(25,16,0)
(14,11,0)
(11,4,0)
(14,4,0)
(12,14,0)
(1,3,0)
(22,17,0)
(10,17,0)
(3,4,0)
(2,3,0)
(5,16,0)
(10,22,1)
(25,5,1)
(13,20,1)
(16,25,1)
(14,11,1)
(22,16,1)
(17,10,1)
(21,17,1)
(22,8,1)
(11,7,1)
(24,2,1)
(18,11,1)
(20,1,1)
(8,21,1)
(2,17,1)
(3,13,1)
(12,18,1)
(5,14,1)
(14,12,1)
(17,16,1)
(19,3,1)
(8,16,1)
(1,24,1)
(7,9,1)
(21,17,2)
(10,17,2)
(17,17,2)
(17,16,2)
(22,17,2)
(8,16,2)
(14,11,2)
(8,17,2)
-----------------------------------
(0,dataBuffer)
(1,COMMAND_ARG1)
(2,COMMAND_INT_PATH)
(3,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(4,)
(5,h)
(6,h)
(7,COMMAND_ARG2)
(8,h++)
(9,dataBuffer)
(10,1)
(11,dataBuffer[100] = COMMAND_ARG2)
(12,dataBuffer)
(13,NULL)
(14,data = dataBuffer)
(15,for(h = 0; h < 1; h++)
(16,h = 0)
(17,h < 1)
(18,data)
(19,RET)
(20,COMMAND_ARG3)
(21,h)
(22,h)
(23,data)
(24,COMMAND_INT_PATH)
(25,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
