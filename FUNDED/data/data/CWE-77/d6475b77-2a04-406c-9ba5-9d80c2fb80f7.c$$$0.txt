-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* spawnl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
33,34
34,35
35,36
35,37
36,37
39,40
40,41
41,42
41,43
41,44
42,43
44,45
47,48
48,49
48,50
48,51
48,52
48,53
48,54
48,55
49,50
51,52
53,54
55,56
57,58
59,60
61,62
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,38,43,45,46,50,52,54,56,58,60,62
-----computeFrom-----
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B1(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B1()
goodG2B1
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalFive!=5
globalFive
globalFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnl
_spawnl
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(7,27,0)
(17,27,0)
(21,27,0)
(4,14,0)
(23,9,0)
(24,14,0)
(2,24,0)
(25,27,0)
(9,5,0)
(11,10,0)
(14,5,0)
(0,5,0)
(24,20,0)
(18,27,0)
(19,5,0)
(12,16,0)
(22,14,0)
(14,9,0)
(27,5,0)
(8,5,0)
(16,6,0)
(15,27,0)
(1,9,0)
(3,24,0)
(13,10,0)
(4,22,1)
(17,25,1)
(22,9,1)
(12,10,1)
(24,3,1)
(16,12,1)
(2,10,1)
(14,9,1)
(7,21,1)
(27,18,1)
(15,16,1)
(3,2,1)
(24,14,1)
(14,4,1)
(26,27,1)
(13,14,1)
(21,15,1)
(9,23,1)
(23,1,1)
(10,11,1)
(11,13,1)
(25,7,1)
(18,17,1)
(15,24,1)
(14,9,2)
(3,10,2)
(2,10,2)
(24,10,2)
(12,10,2)
(24,14,2)
(16,10,2)
-----------------------------------
(0,data)
(1,dataBuffer)
(2,data)
(3,"*.*")
(4,dataBuffer)
(5,)
(6,)
(7,COMMAND_INT_PATH)
(8,if(globalFive!=5)
(9,dataBuffer[100] = COMMAND_ARG2)
(10,globalFive!=5)
(11,5)
(12,"Benign, fixed string")
(13,globalFive)
(14,data = dataBuffer)
(15,_P_WAIT)
(16,printLine("Benign, fixed string")
(17,COMMAND_ARG3)
(18,NULL)
(19,dataBuffer)
(20,)
(21,COMMAND_INT_PATH)
(22,data)
(23,COMMAND_ARG2)
(24,strcat(data, "*.*")
(25,COMMAND_ARG1)
(26,RET)
(27,_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
