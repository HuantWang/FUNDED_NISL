-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_execvp_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_execvp_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_execvp_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_execvp_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(54,45,0)
(8,48,0)
(46,1,0)
(38,42,0)
(4,7,0)
(16,22,0)
(3,32,0)
(13,51,0)
(32,9,0)
(33,58,0)
(22,62,0)
(39,63,0)
(27,49,0)
(10,31,0)
(0,45,0)
(19,42,0)
(6,0,0)
(11,30,0)
(50,0,0)
(31,21,0)
(8,61,0)
(2,9,0)
(42,58,0)
(42,9,0)
(17,39,0)
(58,22,0)
(23,48,0)
(5,8,0)
(37,2,0)
(34,32,0)
(51,58,0)
(15,8,0)
(18,30,0)
(28,7,0)
(47,9,0)
(61,50,0)
(43,21,0)
(53,45,0)
(32,31,0)
(58,47,0)
(50,61,0)
(12,49,0)
(1,63,0)
(0,9,0)
(20,31,0)
(48,60,0)
(7,62,0)
(20,44,0)
(25,22,0)
(61,8,0)
(55,59,0)
(12,36,0)
(29,57,0)
(45,0,0)
(36,12,0)
(41,36,0)
(26,12,0)
(32,58,0)
(45,48,0)
(12,9,0)
(31,20,0)
(24,47,0)
(21,31,0)
(40,50,0)
(35,60,0)
(49,56,0)
(30,57,0)
(14,36,0)
(30,58,0)
(47,58,0)
(42,39,0)
(57,30,0)
(48,2,0)
(36,48,0)
(44,20,0)
(2,48,0)
(52,51,0)
(20,51,0)
(7,9,0)
(31,32,0)
(0,50,0)
(51,20,0)
(12,36,1)
(50,40,1)
(27,12,1)
(34,57,1)
(2,37,1)
(23,21,1)
(10,20,1)
(18,58,1)
(31,32,1)
(31,20,1)
(31,10,1)
(4,61,1)
(51,13,1)
(38,19,1)
(32,9,1)
(7,4,1)
(20,44,1)
(30,11,1)
(1,46,1)
(58,47,1)
(24,33,1)
(32,3,1)
(32,58,1)
(48,2,1)
(8,48,1)
(29,30,1)
(36,14,1)
(40,0,1)
(61,8,1)
(2,9,1)
(3,34,1)
(4,57,1)
(51,58,1)
(39,17,1)
(53,6,1)
(52,32,1)
(21,31,1)
(11,18,1)
(0,9,1)
(13,52,1)
(20,51,1)
(47,9,1)
(54,53,1)
(14,41,1)
(42,38,1)
(61,50,1)
(46,21,1)
(50,0,1)
(4,39,1)
(42,58,1)
(37,23,1)
(41,26,1)
(12,9,1)
(57,29,1)
(28,7,1)
(4,49,1)
(7,9,1)
(8,5,1)
(15,48,1)
(45,54,1)
(36,48,1)
(49,27,1)
(47,24,1)
(45,48,1)
(19,1,1)
(17,42,1)
(26,61,1)
(21,43,1)
(5,15,1)
(0,45,1)
(43,31,1)
(30,58,1)
(57,30,1)
(6,8,1)
(42,9,1)
(20,44,2)
(41,61,2)
(36,61,2)
(53,8,2)
(38,21,2)
(10,57,2)
(36,48,2)
(30,58,2)
(50,0,2)
(12,9,2)
(51,57,2)
(31,20,2)
(47,9,2)
(27,61,2)
(32,58,2)
(54,8,2)
(0,8,2)
(42,9,2)
(48,2,2)
(8,21,2)
(42,21,2)
(48,21,2)
(20,51,2)
(7,9,2)
(61,8,2)
(0,45,2)
(21,31,2)
(57,30,2)
(61,50,2)
(31,57,2)
(28,7,2)
(12,61,2)
(50,8,2)
(13,57,2)
(6,8,2)
(37,21,2)
(26,61,2)
(17,21,2)
(14,61,2)
(0,9,2)
(58,47,2)
(42,58,2)
(34,57,2)
(61,21,2)
(32,9,2)
(15,21,2)
(46,21,2)
(39,21,2)
(23,21,2)
(8,48,2)
(43,57,2)
(21,57,2)
(20,57,2)
(19,21,2)
(2,21,2)
(40,8,2)
(3,57,2)
(45,8,2)
(1,21,2)
(52,57,2)
(12,36,2)
(51,58,2)
(45,48,2)
(32,57,2)
(31,32,2)
(2,9,2)
(49,61,2)
(5,21,2)
-----------------------------------
(0,data[dataLen-1])
(1,printLine("fgets()
(2,strlen(data)
(3,dataLen)
(4,data)
(5,0)
(6,data)
(7,return data;)
(8,dataLen > 0)
(9,char * data)
(10,stdin)
(11,dataLen)
(12,data[dataLen-1])
(13,dataLen)
(14,1)
(15,dataLen)
(16,dataLen)
(17,\\\'\\\\0\\\')
(18,100)
(19,data)
(20,(int)
(21,fgets(data+dataLen, (int)
(22,)
(23,dataLen)
(24,data)
(25,if (100-dataLen > 1)
(26,data)
(27,\\\'\\\\0\\\')
(28,RET)
(29,1)
(30,100-dataLen)
(31,fgets(data+dataLen, (int)
(32,data+dataLen)
(33,dataLen)
(34,data)
(35,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(36,dataLen-1)
(37,data)
(38,dataLen)
(39,data[dataLen] = \\\'\\\\0\\\')
(40,\\\'\\\\n\\\')
(41,dataLen)
(42,data[dataLen])
(43,NULL)
(44,int)
(45,dataLen-1)
(46,"fgets()
(47,strlen(data)
(48,dataLen = strlen(data)
(49,data[dataLen-1] = \\\'\\\\0\\\')
(50,data[dataLen-1] == \\\'\\\\n\\\')
(51,100-dataLen)
(52,100)
(53,dataLen)
(54,1)
(55,if (fgets(data+dataLen, (int)
(56,)
(57,100-dataLen > 1)
(58,dataLen = strlen(data)
(59,)
(60,)
(61,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(62,)
(63,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
