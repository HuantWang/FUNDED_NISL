-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execv_52_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execv_52_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_execv_52_bad()
CWE78_OS_Command_Injection__char_console_w32_execv_52_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink
CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink
data
data
-----joern-----
(60,58,0)
(22,40,0)
(6,2,0)
(3,64,0)
(38,40,0)
(49,9,0)
(61,26,0)
(58,1,0)
(1,31,0)
(32,56,0)
(12,27,0)
(25,2,0)
(57,17,0)
(33,47,0)
(19,44,0)
(16,63,0)
(51,28,0)
(15,22,0)
(6,31,0)
(4,2,0)
(7,4,0)
(52,17,0)
(69,28,0)
(62,70,0)
(21,9,0)
(35,43,0)
(51,31,0)
(17,62,0)
(24,31,0)
(0,55,0)
(48,62,0)
(26,40,0)
(47,19,0)
(42,0,0)
(43,35,0)
(30,50,0)
(47,63,0)
(70,31,0)
(14,65,0)
(63,9,0)
(17,65,0)
(55,40,0)
(62,27,0)
(13,0,0)
(63,47,0)
(11,67,0)
(55,0,0)
(29,70,0)
(53,31,0)
(40,55,0)
(1,58,0)
(65,20,0)
(68,1,0)
(26,31,0)
(44,58,0)
(55,37,0)
(40,26,0)
(31,4,0)
(70,62,0)
(31,2,0)
(67,58,0)
(45,6,0)
(41,35,0)
(8,27,0)
(19,47,0)
(17,31,0)
(59,4,0)
(23,44,0)
(28,34,0)
(58,56,0)
(27,2,0)
(39,2,0)
(26,62,0)
(43,62,0)
(63,31,0)
(51,67,0)
(9,58,0)
(9,63,0)
(54,26,0)
(46,43,0)
(67,51,0)
(5,51,0)
(37,55,0)
(10,43,0)
(44,19,0)
(0,62,0)
(40,22,0)
(64,20,0)
(18,44,0)
(36,67,0)
(48,31,1)
(9,58,1)
(45,65,1)
(44,58,1)
(41,43,1)
(22,15,1)
(33,63,1)
(19,44,1)
(14,17,1)
(53,24,1)
(21,49,1)
(0,62,1)
(59,7,1)
(58,1,1)
(40,26,1)
(6,31,1)
(49,16,1)
(29,48,1)
(40,55,1)
(46,62,1)
(70,31,1)
(4,59,1)
(55,37,1)
(1,68,1)
(45,28,1)
(23,58,1)
(45,35,1)
(11,5,1)
(44,18,1)
(47,63,1)
(35,43,1)
(17,31,1)
(35,41,1)
(52,64,1)
(28,69,1)
(13,26,1)
(1,31,1)
(51,31,1)
(68,60,1)
(16,44,1)
(3,22,1)
(19,47,1)
(22,40,1)
(15,40,1)
(66,6,1)
(17,62,1)
(62,70,1)
(5,19,1)
(70,29,1)
(43,10,1)
(18,23,1)
(63,9,1)
(0,42,1)
(57,52,1)
(42,13,1)
(24,4,1)
(9,21,1)
(63,31,1)
(65,14,1)
(64,3,1)
(51,67,1)
(43,62,1)
(45,19,1)
(10,46,1)
(38,55,1)
(26,31,1)
(69,51,1)
(31,53,1)
(17,57,1)
(6,45,1)
(26,62,1)
(67,36,1)
(36,11,1)
(47,33,1)
(61,54,1)
(67,58,1)
(55,0,1)
(60,22,1)
(54,35,1)
(40,38,1)
(31,4,1)
(26,61,1)
(19,44,2)
(15,35,2)
(70,31,2)
(55,37,2)
(9,44,2)
(22,35,2)
(1,22,2)
(28,19,2)
(26,31,2)
(61,35,2)
(47,44,2)
(33,44,2)
(63,9,2)
(54,35,2)
(11,19,2)
(17,62,2)
(57,22,2)
(1,31,2)
(47,63,2)
(51,67,2)
(35,43,2)
(18,22,2)
(68,22,2)
(55,0,2)
(36,19,2)
(0,35,2)
(5,19,2)
(63,31,2)
(0,62,2)
(63,44,2)
(17,31,2)
(49,44,2)
(51,31,2)
(65,22,2)
(51,19,2)
(44,22,2)
(67,19,2)
(40,55,2)
(60,22,2)
(21,44,2)
(64,22,2)
(17,22,2)
(9,58,2)
(19,47,2)
(42,35,2)
(26,35,2)
(69,19,2)
(13,35,2)
(55,35,2)
(67,58,2)
(40,35,2)
(14,22,2)
(58,22,2)
(38,35,2)
(6,31,2)
(58,1,2)
(3,22,2)
(22,40,2)
(43,62,2)
(23,22,2)
(40,26,2)
(16,44,2)
(44,58,2)
(62,70,2)
(31,4,2)
(26,62,2)
(19,22,2)
(52,22,2)
-----------------------------------
(0,100-dataLen)
(1,strlen(data)
(2,)
(3,"fgets()
(4,dataBuffer[100] = COMMAND_ARG2)
(5,data)
(6,CWE78_OS_Command_Injection__char_console_w32_execv_52b_badSink(data)
(7,dataBuffer)
(8,dataLen)
(9,dataLen-1)
(10,dataLen)
(11,dataLen)
(12,if (100-dataLen > 1)
(13,100)
(14,\\\'\\\\0\\\')
(15,NULL)
(16,data)
(17,data[dataLen])
(18,0)
(19,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(20,)
(21,1)
(22,fgets(data+dataLen, (int)
(23,dataLen)
(24,data)
(25,data)
(26,data+dataLen)
(27,)
(28,data[dataLen-1] = \\\'\\\\0\\\')
(29,data)
(30,if (fgets(data+dataLen, (int)
(31,data = dataBuffer)
(32,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(33,\\\'\\\\n\\\')
(34,)
(35,100-dataLen > 1)
(36,1)
(37,int)
(38,stdin)
(39,dataBuffer)
(40,fgets(data+dataLen, (int)
(41,1)
(42,dataLen)
(43,100-dataLen)
(44,dataLen > 0)
(45,data)
(46,100)
(47,data[dataLen-1] == \\\'\\\\n\\\')
(48,dataLen)
(49,dataLen)
(50,)
(51,data[dataLen-1])
(52,data)
(53,dataBuffer)
(54,data)
(55,(int)
(56,)
(57,dataLen)
(58,dataLen = strlen(data)
(59,COMMAND_ARG2)
(60,dataLen)
(61,dataLen)
(62,dataLen = strlen(data)
(63,data[dataLen-1])
(64,printLine("fgets()
(65,data[dataLen] = \\\'\\\\0\\\')
(66,RET)
(67,dataLen-1)
(68,data)
(69,\\\'\\\\0\\\')
(70,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
