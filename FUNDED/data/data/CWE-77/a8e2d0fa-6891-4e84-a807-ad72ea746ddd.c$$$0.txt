-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_file_w32_spawnv_65_bad()
{
    char * data;
    /* define a function pointer */
    void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    /* use the function pointer */
    funcPtr(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
16,17
16,18
19,20
19,21
21,22
21,23
24,25
25,26
27,28
28,29
28,30
30,31
30,32
30,33
32,33
34,35
35,36
37,38
38,39
38,40
39,40
41,42
43,44
43,45
43,46
44,45
45,46
45,47
46,47
48,49
48,50
50,51
51,52
51,53
52,53
54,55
56,57
57,58
57,59
58,59
60,61
60,62
63,64
63,65
64,65
64,66
65,66
65,67
67,68
70,71
70,72
71,72
72,73
72,74
73,74
75,76
75,77
75,78
76,77
78,79
81,82
81,83
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
90,92
90,93
90,94
91,92
93,94
93,95
94,95
96,97
98,99
98,100
99,100
99,101
102,103
103,104
103,105
105,106
107,108
109,110
111,112
111,113
112,113
113,114
113,115
114,115
117,118
118,119
118,120
119,120
119,121
120,121
122,123
125,126
126,127
126,128
127,128
129,130
131,132
132,133
132,134
133,134
135,136
-----nextToken-----
2,4,8,10,11,14,17,18,20,22,23,26,29,31,33,36,40,42,47,49,53,55,59,61,62,66,68,69,74,77,79,80,84,86,92,95,97,100,101,104,106,108,110,115,116,121,123,124,128,130,134,136
-----computeFrom-----
38,39
38,40
64,65
64,66
65,66
65,67
72,73
72,74
82,83
82,84
89,90
89,91
93,94
93,95
103,104
103,105
118,119
118,120
-----guardedBy-----
68,123
86,110
84,130
95,121
106,123
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;FunctionDeclarator;Declarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_file_w32_spawnv_65_bad(){    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    /* use the function pointer */    funcPtr(data);}
void
CWE78_OS_Command_Injection__char_file_w32_spawnv_65_bad()
CWE78_OS_Command_Injection__char_file_w32_spawnv_65_bad
{    char * data;    /* define a function pointer */    void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    /* use the function pointer */    funcPtr(data);}
char * data;
char * data;
char
* data
*
data
void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink;
void (*funcPtr) (char *) = CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink;
void
(*funcPtr) (char *) = CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink
*funcPtr
*
funcPtr
char *
char
*
*

= CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink
CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink
CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
funcPtr(data);
funcPtr(data)
funcPtr
funcPtr
data
data
-----joern-----
(35,4,0)
(25,1,0)
(51,48,0)
(44,31,0)
(22,30,0)
(0,31,0)
(54,30,0)
(8,58,0)
(13,34,0)
(26,35,0)
(48,47,0)
(33,50,0)
(17,18,0)
(56,0,0)
(47,14,0)
(36,30,0)
(60,21,0)
(20,22,0)
(14,58,0)
(10,58,0)
(30,58,0)
(39,28,0)
(43,45,0)
(49,14,0)
(31,0,0)
(53,47,0)
(9,4,0)
(35,47,0)
(62,44,0)
(46,48,0)
(22,58,0)
(19,47,0)
(4,35,0)
(27,14,0)
(35,30,0)
(31,1,0)
(47,19,0)
(42,50,0)
(48,34,0)
(6,24,0)
(32,14,0)
(34,48,0)
(16,9,0)
(15,58,0)
(41,28,0)
(57,44,0)
(24,30,0)
(23,19,0)
(59,31,0)
(4,9,0)
(18,58,0)
(24,42,0)
(11,24,0)
(40,4,0)
(19,30,0)
(21,58,0)
(52,21,0)
(7,33,0)
(40,61,0)
(40,28,0)
(28,40,0)
(45,31,0)
(28,47,0)
(29,4,0)
(61,40,0)
(4,40,0)
(30,21,0)
(37,18,0)
(3,42,0)
(55,35,0)
(45,2,0)
(4,31,0)
(38,0,0)
(12,2,0)
(24,47,0)
(33,7,1)
(47,19,1)
(53,30,1)
(20,44,1)
(57,31,1)
(6,33,1)
(59,34,1)
(0,56,1)
(34,48,1)
(23,53,1)
(51,47,1)
(40,61,1)
(44,31,1)
(62,57,1)
(36,54,1)
(29,40,1)
(46,51,1)
(21,60,1)
(19,23,1)
(43,42,1)
(45,31,1)
(20,45,1)
(39,35,1)
(24,11,1)
(4,40,1)
(41,39,1)
(16,4,1)
(22,20,1)
(48,47,1)
(31,0,1)
(5,22,1)
(35,30,1)
(30,21,1)
(37,17,1)
(56,38,1)
(34,13,1)
(30,36,1)
(35,55,1)
(9,4,1)
(52,18,1)
(20,34,1)
(4,31,1)
(18,37,1)
(7,9,1)
(19,30,1)
(43,9,1)
(4,35,1)
(26,44,1)
(48,46,1)
(40,28,1)
(35,47,1)
(4,29,1)
(54,21,1)
(24,47,1)
(11,6,1)
(24,30,1)
(28,47,1)
(55,26,1)
(45,43,1)
(22,30,1)
(44,62,1)
(42,3,1)
(3,24,1)
(28,41,1)
(38,59,1)
(13,48,1)
(60,52,1)
(9,16,1)
(62,34,2)
(29,44,2)
(33,9,2)
(57,34,2)
(40,44,2)
(28,44,2)
(4,31,2)
(31,0,2)
(0,34,2)
(24,30,2)
(41,44,2)
(16,44,2)
(42,9,2)
(59,34,2)
(24,9,2)
(22,30,2)
(31,34,2)
(28,47,2)
(40,28,2)
(45,44,2)
(24,47,2)
(19,30,2)
(11,9,2)
(4,35,2)
(30,21,2)
(39,44,2)
(26,44,2)
(45,31,2)
(44,31,2)
(35,44,2)
(55,44,2)
(35,30,2)
(48,47,2)
(3,9,2)
(56,34,2)
(7,9,2)
(4,40,2)
(34,48,2)
(43,44,2)
(9,44,2)
(9,4,2)
(44,34,2)
(38,34,2)
(35,47,2)
(4,44,2)
(6,9,2)
(40,61,2)
(47,19,2)
-----------------------------------
(0,fopen(FILENAME, "r")
(1,)
(2,)
(3,\\\'\\\\0\\\')
(4,fgets(data+dataLen, (int)
(5,RET)
(6,data)
(7,"fgets()
(8,data)
(9,fgets(data+dataLen, (int)
(10,funcPtr)
(11,dataLen)
(12,if (fgets(data+dataLen, (int)
(13,1)
(14,)
(15,dataBuffer)
(16,NULL)
(17,funcPtr)
(18,(*funcPtr)
(19,strlen(data)
(20,data)
(21,dataBuffer[100] = COMMAND_ARG2)
(22,funcPtr(data)
(23,data)
(24,data[dataLen])
(25,if (pFile != NULL)
(26,data)
(27,if (100-dataLen > 1)
(28,100-dataLen)
(29,pFile)
(30,data = dataBuffer)
(31,pFile = fopen(FILENAME, "r")
(32,dataLen)
(33,printLine("fgets()
(34,100-dataLen > 1)
(35,data+dataLen)
(36,dataBuffer)
(37,CWE78_OS_Command_Injection__char_file_w32_spawnv_65b_badSink)
(38,FILENAME)
(39,100)
(40,(int)
(41,dataLen)
(42,data[dataLen] = \\\'\\\\0\\\')
(43,pFile)
(44,pFile != NULL)
(45,fclose(pFile)
(46,dataLen)
(47,dataLen = strlen(data)
(48,100-dataLen)
(49,pFile)
(50,)
(51,100)
(52,dataBuffer)
(53,dataLen)
(54,data)
(55,dataLen)
(56,"r")
(57,pFile)
(58,)
(59,pFile)
(60,COMMAND_ARG2)
(61,int)
(62,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
