-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    /* FIX: Append a fixed string to data (not user / external input) */
    strcat(data, "*.*");
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* spawnl - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
35,38
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
54,55
55,56
55,57
55,58
55,59
55,60
55,61
55,62
56,57
58,59
60,61
62,63
64,65
66,67
68,69
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,38,40,41,44,47,49,50,53,57,59,61,63,65,67,69
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char * dataCopy = data;        char * data = dataCopy;        /* spawnl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char * dataCopy = data;        char * data = dataCopy;        /* spawnl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char * dataCopy = data;        char * data = dataCopy;        /* spawnl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnl
_spawnl
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(26,20,0)
(25,24,0)
(4,26,0)
(1,6,0)
(23,6,0)
(0,24,0)
(16,6,0)
(17,1,0)
(28,1,0)
(10,24,0)
(11,9,0)
(18,24,0)
(16,20,0)
(21,5,0)
(1,16,0)
(12,16,0)
(20,9,0)
(27,16,0)
(26,9,0)
(14,6,0)
(2,24,0)
(6,9,0)
(13,24,0)
(20,5,0)
(19,9,0)
(22,20,0)
(24,6,0)
(5,9,0)
(3,26,0)
(7,5,0)
(15,20,0)
(25,13,1)
(13,1,1)
(1,16,1)
(20,22,1)
(16,20,1)
(20,5,1)
(26,20,1)
(17,16,1)
(16,12,1)
(8,24,1)
(3,20,1)
(27,26,1)
(5,21,1)
(21,7,1)
(12,27,1)
(22,15,1)
(15,5,1)
(28,17,1)
(2,25,1)
(4,3,1)
(10,18,1)
(26,4,1)
(1,28,1)
(18,0,1)
(0,2,1)
(24,10,1)
(20,5,2)
(1,16,2)
(16,20,2)
(26,20,2)
-----------------------------------
(0,COMMAND_ARG1)
(1,* data = dataCopy)
(2,COMMAND_INT_PATH)
(3,data)
(4,"*.*")
(5,dataBuffer[100] = COMMAND_ARG2)
(6,)
(7,dataBuffer)
(8,RET)
(9,)
(10,NULL)
(11,dataBuffer)
(12,data)
(13,_P_WAIT)
(14,data)
(15,data)
(16,* dataCopy = data)
(17,data)
(18,COMMAND_ARG3)
(19,data)
(20,data = dataBuffer)
(21,COMMAND_ARG2)
(22,dataBuffer)
(23,dataCopy)
(24,_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(25,COMMAND_INT_PATH)
(26,strcat(data, "*.*")
(27,dataCopy)
(28,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
