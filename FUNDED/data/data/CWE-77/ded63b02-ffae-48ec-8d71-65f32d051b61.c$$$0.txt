-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        char * data = *dataPtr1;
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* spawnv - specify the path where the command is located */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
71,72
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
84,85
86,87
86,88
87,88
88,89
88,90
90,91
90,92
90,93
90,94
94,95
95,96
95,97
95,98
95,99
96,97
98,99
100,101
102,103
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,67,72,74,78,80,81,85,89,91,92,93,97,99,101,103,107,109,111,113
-----computeFrom-----
45,46
45,47
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
static void
goodG2B()
goodG2B
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(8,35,0)
(12,19,0)
(0,13,0)
(24,0,0)
(19,36,0)
(2,27,0)
(29,45,0)
(8,28,0)
(7,35,0)
(33,38,0)
(45,36,0)
(33,45,0)
(18,8,0)
(31,38,0)
(35,36,0)
(29,31,0)
(25,12,0)
(22,1,0)
(28,8,0)
(23,1,0)
(10,13,0)
(43,13,0)
(12,38,0)
(1,32,0)
(3,31,0)
(9,45,0)
(46,29,0)
(28,27,0)
(15,0,0)
(1,36,0)
(26,28,0)
(27,36,0)
(37,38,0)
(41,35,0)
(40,10,0)
(4,36,0)
(20,5,0)
(45,5,0)
(34,12,0)
(38,19,0)
(31,19,0)
(39,36,0)
(30,32,0)
(16,19,0)
(42,32,0)
(35,41,0)
(32,36,0)
(13,27,0)
(17,33,0)
(0,10,0)
(38,33,0)
(21,36,0)
(14,0,0)
(6,41,0)
(5,45,0)
(44,36,0)
(6,7,1)
(29,46,1)
(33,17,1)
(22,32,1)
(0,10,1)
(46,12,1)
(40,28,1)
(33,45,1)
(15,24,1)
(5,20,1)
(3,29,1)
(12,38,1)
(18,26,1)
(28,8,1)
(8,35,1)
(34,38,1)
(35,41,1)
(14,10,1)
(29,45,1)
(0,15,1)
(32,30,1)
(38,33,1)
(1,32,1)
(24,14,1)
(1,23,1)
(37,1,1)
(10,40,1)
(11,0,1)
(20,9,1)
(30,42,1)
(45,5,1)
(26,31,1)
(41,6,1)
(12,25,1)
(23,22,1)
(31,3,1)
(8,18,1)
(42,35,1)
(25,34,1)
(17,37,1)
(31,38,1)
(7,45,1)
(45,5,2)
(29,45,2)
(35,41,2)
(33,45,2)
(12,38,2)
(31,38,2)
(1,32,2)
(28,8,2)
(0,10,2)
(38,33,2)
(8,35,2)
-----------------------------------
(0,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(1,data = dataBuffer)
(2,data)
(3,data)
(4,data)
(5,&data)
(6,data)
(7,dataPtr2)
(8,*dataPtr2)
(9,dataPtr1)
(10,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(11,RET)
(12,strcat(data, "*.*")
(13,)
(14,_P_WAIT)
(15,args)
(16,data)
(17,dataPtr1)
(18,dataPtr2)
(19,)
(20,data)
(21,dataPtr2)
(22,data)
(23,dataBuffer)
(24,COMMAND_INT_PATH)
(25,"*.*")
(26,data)
(27,)
(28,* data = *dataPtr2)
(29,*dataPtr1)
(30,COMMAND_ARG2)
(31,*dataPtr1 = data)
(32,dataBuffer[100] = COMMAND_ARG2)
(33,*dataPtr1)
(34,data)
(35,* *dataPtr2 = &data)
(36,)
(37,data)
(38,* data = *dataPtr1)
(39,dataPtr1)
(40,args)
(41,&data)
(42,dataBuffer)
(43,args)
(44,dataBuffer)
(45,* *dataPtr1 = &data)
(46,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
