-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(5==5)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
32,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
40,42
40,43
41,42
42,43
42,44
43,44
45,46
45,47
48,49
49,50
49,51
50,51
52,53
52,54
52,55
53,54
55,56
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
67,68
69,70
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,31,36,38,39,44,46,47,51,54,56,57,61,63,68,70
-----computeFrom-----
23,24
23,25
29,30
29,31
49,50
49,51
59,60
59,61
-----guardedBy-----
61,70
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(5==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(5==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(5==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
5==5
5
5
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(29,12,0)
(9,12,0)
(12,7,0)
(30,7,0)
(0,3,0)
(19,25,0)
(24,4,0)
(21,3,0)
(28,3,0)
(17,7,0)
(5,0,0)
(25,3,0)
(14,10,0)
(1,24,0)
(12,0,0)
(10,3,0)
(26,25,0)
(24,12,0)
(20,27,0)
(6,29,0)
(25,10,0)
(11,0,0)
(2,29,0)
(22,27,0)
(18,10,0)
(31,25,0)
(15,31,0)
(7,12,0)
(8,31,0)
(31,13,0)
(7,25,0)
(16,3,0)
(25,26,1)
(22,20,1)
(29,12,1)
(7,25,1)
(9,27,1)
(24,12,1)
(30,9,1)
(1,29,1)
(14,18,1)
(9,31,1)
(24,1,1)
(23,29,1)
(31,15,1)
(12,7,1)
(7,17,1)
(31,25,1)
(10,14,1)
(19,10,1)
(15,8,1)
(26,19,1)
(29,2,1)
(8,27,1)
(6,12,1)
(17,30,1)
(2,6,1)
(23,24,1)
(20,25,1)
(25,10,1)
(27,22,1)
(8,27,2)
(7,25,2)
(24,29,2)
(15,27,2)
(24,12,2)
(12,7,2)
(31,25,2)
(25,10,2)
(29,12,2)
(31,27,2)
(1,29,2)
-----------------------------------
(0,)
(1,pipe)
(2,NULL)
(3,)
(4,)
(5,pipe)
(6,pipe)
(7,POPEN(data, "w")
(8,data)
(9,pipe)
(10,data_buf[100] = FULL_COMMAND)
(11,if (pipe != NULL)
(12,pipe = POPEN(data, "w")
(13,)
(14,FULL_COMMAND)
(15,"*.*")
(16,if(5==5)
(17,"w")
(18,data_buf)
(19,data)
(20,5)
(21,data)
(22,5)
(23,RET)
(24,PCLOSE(pipe)
(25,data = data_buf)
(26,data_buf)
(27,5==5)
(28,data_buf)
(29,pipe != NULL)
(30,data)
(31,strcat(data, "*.*")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
