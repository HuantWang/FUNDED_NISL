-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_68_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_popen_68_badData = data;
    CWE78_OS_Command_Injection__char_console_popen_68b_badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_68_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_68_badData = data;    CWE78_OS_Command_Injection__char_console_popen_68b_badSink();}
void
CWE78_OS_Command_Injection__char_console_popen_68_bad()
CWE78_OS_Command_Injection__char_console_popen_68_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_68_badData = data;    CWE78_OS_Command_Injection__char_console_popen_68b_badSink();}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_popen_68_badData = data;
CWE78_OS_Command_Injection__char_console_popen_68_badData = data
CWE78_OS_Command_Injection__char_console_popen_68_badData
CWE78_OS_Command_Injection__char_console_popen_68_badData
data
data
CWE78_OS_Command_Injection__char_console_popen_68b_badSink();
CWE78_OS_Command_Injection__char_console_popen_68b_badSink()
CWE78_OS_Command_Injection__char_console_popen_68b_badSink
CWE78_OS_Command_Injection__char_console_popen_68b_badSink
-----joern-----
(14,16,0)
(24,50,0)
(57,54,0)
(62,42,0)
(13,21,0)
(42,45,0)
(35,47,0)
(60,7,0)
(71,45,0)
(53,58,0)
(6,0,0)
(44,69,0)
(59,65,0)
(12,57,0)
(4,57,0)
(10,69,0)
(21,25,0)
(70,37,0)
(57,66,0)
(25,21,0)
(20,57,0)
(72,37,0)
(65,69,0)
(45,42,0)
(44,45,0)
(50,69,0)
(40,13,0)
(30,29,0)
(47,45,0)
(1,44,0)
(22,27,0)
(72,69,0)
(7,69,0)
(32,69,0)
(13,71,0)
(28,4,0)
(69,14,0)
(29,65,0)
(66,57,0)
(66,69,0)
(63,33,0)
(5,71,0)
(26,71,0)
(49,14,0)
(13,40,0)
(8,72,0)
(34,48,0)
(36,72,0)
(71,13,0)
(41,7,0)
(55,47,0)
(31,0,0)
(2,16,0)
(65,29,0)
(68,43,0)
(69,16,0)
(42,69,0)
(27,47,0)
(50,68,0)
(9,14,0)
(12,50,0)
(38,12,0)
(46,12,0)
(23,16,0)
(64,66,0)
(67,21,0)
(56,4,0)
(17,53,0)
(50,12,0)
(48,57,0)
(21,44,0)
(29,15,0)
(0,16,0)
(11,25,0)
(48,15,0)
(51,44,0)
(37,58,0)
(52,54,0)
(72,45,0)
(19,16,0)
(3,48,0)
(44,21,0)
(7,16,0)
(47,27,0)
(15,29,0)
(65,4,0)
(4,65,0)
(15,48,0)
(45,0,0)
(21,13,0)
(18,45,0)
(39,68,0)
(71,26,1)
(32,10,1)
(3,34,1)
(59,48,1)
(10,14,1)
(56,59,1)
(24,15,1)
(37,70,1)
(44,51,1)
(44,45,1)
(62,18,1)
(49,9,1)
(23,7,1)
(50,69,1)
(27,22,1)
(12,57,1)
(5,44,1)
(69,32,1)
(42,62,1)
(67,13,1)
(4,57,1)
(25,11,1)
(42,69,1)
(53,17,1)
(1,27,1)
(55,45,1)
(8,53,1)
(61,23,1)
(65,69,1)
(13,40,1)
(60,27,1)
(47,35,1)
(46,38,1)
(65,4,1)
(30,65,1)
(26,5,1)
(39,50,1)
(72,69,1)
(48,3,1)
(7,41,1)
(71,45,1)
(60,15,1)
(36,8,1)
(13,71,1)
(21,13,1)
(7,69,1)
(70,72,1)
(29,30,1)
(21,44,1)
(28,56,1)
(20,25,1)
(17,25,1)
(18,69,1)
(44,69,1)
(4,28,1)
(50,12,1)
(45,42,1)
(64,20,1)
(68,39,1)
(25,21,1)
(15,29,1)
(27,47,1)
(60,68,1)
(15,48,1)
(57,66,1)
(22,47,1)
(48,57,1)
(41,60,1)
(66,64,1)
(38,24,1)
(66,69,1)
(72,36,1)
(69,14,1)
(72,45,1)
(12,46,1)
(21,67,1)
(35,55,1)
(51,1,1)
(29,65,1)
(11,21,1)
(60,37,1)
(14,49,1)
(47,45,1)
(34,57,1)
(50,12,2)
(66,69,2)
(71,27,2)
(38,15,2)
(15,25,2)
(65,4,2)
(67,27,2)
(21,13,2)
(27,47,2)
(48,57,2)
(12,15,2)
(72,25,2)
(72,45,2)
(36,25,2)
(25,27,2)
(56,48,2)
(20,25,2)
(48,25,2)
(8,25,2)
(13,71,2)
(53,25,2)
(65,69,2)
(68,15,2)
(57,66,2)
(7,69,2)
(13,27,2)
(70,25,2)
(15,29,2)
(4,48,2)
(30,48,2)
(72,69,2)
(1,27,2)
(29,48,2)
(69,14,2)
(46,15,2)
(24,15,2)
(25,21,2)
(51,27,2)
(71,45,2)
(66,25,2)
(28,48,2)
(50,15,2)
(39,15,2)
(13,40,2)
(37,25,2)
(47,45,2)
(29,65,2)
(21,27,2)
(11,27,2)
(15,48,2)
(17,25,2)
(3,25,2)
(64,25,2)
(34,25,2)
(4,57,2)
(42,69,2)
(44,69,2)
(57,25,2)
(12,57,2)
(21,44,2)
(59,48,2)
(44,27,2)
(5,27,2)
(26,27,2)
(45,42,2)
(50,69,2)
(44,45,2)
(65,48,2)
-----------------------------------
(0,)
(1,data)
(2,data_buf)
(3,0)
(4,dataLen-1)
(5,100)
(6,dataLen)
(7,CWE78_OS_Command_Injection__char_console_popen_68_badData = data)
(8,data)
(9,data_buf)
(10,data)
(11,NULL)
(12,dataLen-1)
(13,(int)
(14,data_buf[100] = FULL_COMMAND)
(15,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(16,)
(17,"fgets()
(18,dataLen)
(19,data)
(20,dataLen)
(21,fgets(data+dataLen, (int)
(22,1)
(23,CWE78_OS_Command_Injection__char_console_popen_68b_badSink()
(24,data)
(25,fgets(data+dataLen, (int)
(26,dataLen)
(27,100-dataLen > 1)
(28,1)
(29,data[dataLen-1] == \\\'\\\\n\\\')
(30,\\\'\\\\n\\\')
(31,if (100-dataLen > 1)
(32,data_buf)
(33,)
(34,dataLen)
(35,dataLen)
(36,dataLen)
(37,data[dataLen] = \\\'\\\\0\\\')
(38,dataLen)
(39,\\\'\\\\0\\\')
(40,int)
(41,data)
(42,strlen(data)
(43,)
(44,data+dataLen)
(45,dataLen = strlen(data)
(46,1)
(47,100-dataLen)
(48,dataLen > 0)
(49,FULL_COMMAND)
(50,data[dataLen-1])
(51,dataLen)
(52,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(53,printLine("fgets()
(54,)
(55,100)
(56,dataLen)
(57,dataLen = strlen(data)
(58,)
(59,data)
(60,CWE78_OS_Command_Injection__char_console_popen_68_badData)
(61,RET)
(62,data)
(63,if (fgets(data+dataLen, (int)
(64,data)
(65,data[dataLen-1])
(66,strlen(data)
(67,stdin)
(68,data[dataLen-1] = \\\'\\\\0\\\')
(69,data = data_buf)
(70,\\\'\\\\0\\\')
(71,100-dataLen)
(72,data[dataLen])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
