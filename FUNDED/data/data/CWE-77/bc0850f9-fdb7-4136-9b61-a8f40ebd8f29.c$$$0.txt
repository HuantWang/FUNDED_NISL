-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_45_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data;
CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data
CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData
CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(72,34,0)
(22,25,0)
(3,17,0)
(24,67,0)
(21,65,0)
(48,24,0)
(35,58,0)
(28,40,0)
(8,33,0)
(70,66,0)
(2,3,0)
(37,11,0)
(0,19,0)
(58,35,0)
(17,34,0)
(12,17,0)
(36,40,0)
(53,51,0)
(25,22,0)
(4,65,0)
(40,65,0)
(61,40,0)
(66,51,0)
(9,59,0)
(10,70,0)
(5,57,0)
(23,60,0)
(49,58,0)
(68,55,0)
(3,51,0)
(62,66,0)
(56,3,0)
(60,36,0)
(13,4,0)
(27,60,0)
(38,35,0)
(66,70,0)
(41,66,0)
(6,58,0)
(18,67,0)
(65,20,0)
(51,67,0)
(19,46,0)
(30,4,0)
(60,50,0)
(60,27,0)
(19,22,0)
(27,65,0)
(27,51,0)
(55,51,0)
(35,37,0)
(52,55,0)
(22,1,0)
(71,72,0)
(15,25,0)
(69,19,0)
(40,36,0)
(25,51,0)
(42,41,0)
(31,50,0)
(3,65,0)
(7,24,0)
(16,1,0)
(43,67,0)
(66,41,0)
(64,27,0)
(14,37,0)
(70,46,0)
(58,22,0)
(41,22,0)
(46,70,0)
(50,60,0)
(44,57,0)
(57,67,0)
(36,60,0)
(39,20,0)
(20,65,0)
(26,51,0)
(45,22,0)
(65,24,0)
(32,36,0)
(47,67,0)
(51,57,0)
(35,51,0)
(20,51,0)
(36,32,0)
(4,33,0)
(63,41,0)
(46,19,0)
(55,67,0)
(33,4,0)
(29,27,0)
(40,65,1)
(19,22,1)
(50,60,1)
(40,61,1)
(28,27,1)
(54,47,1)
(4,65,1)
(36,32,1)
(66,41,1)
(12,3,1)
(66,51,1)
(58,22,1)
(58,6,1)
(47,55,1)
(26,53,1)
(70,66,1)
(52,46,1)
(46,19,1)
(46,70,1)
(6,49,1)
(50,31,1)
(21,51,1)
(33,8,1)
(25,15,1)
(36,40,1)
(4,30,1)
(52,37,1)
(14,35,1)
(35,58,1)
(64,33,1)
(41,63,1)
(20,51,1)
(19,69,1)
(0,22,1)
(55,51,1)
(61,28,1)
(13,65,1)
(70,10,1)
(8,4,1)
(53,57,1)
(27,29,1)
(17,12,1)
(63,42,1)
(69,0,1)
(22,25,1)
(51,26,1)
(52,33,1)
(44,5,1)
(29,64,1)
(2,72,1)
(57,44,1)
(31,60,1)
(41,22,1)
(60,27,1)
(3,65,1)
(45,50,1)
(25,51,1)
(38,46,1)
(30,13,1)
(68,52,1)
(42,62,1)
(27,51,1)
(56,2,1)
(49,38,1)
(60,23,1)
(55,68,1)
(60,36,1)
(71,50,1)
(52,17,1)
(65,20,1)
(23,36,1)
(20,39,1)
(3,56,1)
(10,66,1)
(35,51,1)
(27,65,1)
(39,21,1)
(51,57,1)
(15,45,1)
(3,51,1)
(62,19,1)
(72,71,1)
(37,14,1)
(33,4,1)
(36,32,2)
(6,46,2)
(25,51,2)
(37,46,2)
(35,58,2)
(23,33,2)
(3,50,2)
(69,50,2)
(66,41,2)
(17,50,2)
(60,33,2)
(70,19,2)
(61,33,2)
(41,19,2)
(41,22,2)
(64,33,2)
(50,33,2)
(60,27,2)
(27,65,2)
(58,22,2)
(46,19,2)
(36,33,2)
(49,46,2)
(27,33,2)
(36,40,2)
(27,51,2)
(10,19,2)
(25,50,2)
(38,46,2)
(66,51,2)
(20,51,2)
(12,50,2)
(3,65,2)
(0,50,2)
(63,19,2)
(65,20,2)
(22,25,2)
(40,65,2)
(22,50,2)
(31,33,2)
(62,19,2)
(58,46,2)
(35,46,2)
(15,50,2)
(56,50,2)
(45,50,2)
(14,46,2)
(66,19,2)
(35,51,2)
(71,50,2)
(60,36,2)
(42,19,2)
(4,65,2)
(28,33,2)
(19,22,2)
(33,4,2)
(46,70,2)
(70,66,2)
(72,50,2)
(29,33,2)
(55,51,2)
(50,60,2)
(51,57,2)
(46,50,2)
(3,51,2)
(19,50,2)
(40,33,2)
(2,50,2)
-----------------------------------
(0,dataLen)
(1,)
(2,data)
(3,data[dataLen])
(4,100-dataLen)
(5,dataBuffer)
(6,1)
(7,dataLen)
(8,1)
(9,if (fgets(data+dataLen, (int)
(10,\\\'\\\\n\\\')
(11,)
(12,\\\'\\\\0\\\')
(13,100)
(14,\\\'\\\\0\\\')
(15,data)
(16,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(17,data[dataLen] = \\\'\\\\0\\\')
(18,data)
(19,dataLen > 0)
(20,strlen(data)
(21,dataLen)
(22,dataLen = strlen(data)
(23,stdin)
(24,)
(25,strlen(data)
(26,dataBuffer)
(27,data+dataLen)
(28,100)
(29,dataLen)
(30,dataLen)
(31,NULL)
(32,int)
(33,100-dataLen > 1)
(34,)
(35,data[dataLen-1])
(36,(int)
(37,data[dataLen-1] = \\\'\\\\0\\\')
(38,data)
(39,data)
(40,100-dataLen)
(41,dataLen-1)
(42,dataLen)
(43,dataBuffer)
(44,COMMAND_ARG2)
(45,dataLen)
(46,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(47,badSink()
(48,if (100-dataLen > 1)
(49,dataLen)
(50,fgets(data+dataLen, (int)
(51,data = dataBuffer)
(52,CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData)
(53,data)
(54,RET)
(55,CWE78_OS_Command_Injection__char_console_w32_execvp_45_badData = data)
(56,dataLen)
(57,dataBuffer[100] = COMMAND_ARG2)
(58,dataLen-1)
(59,)
(60,fgets(data+dataLen, (int)
(61,dataLen)
(62,data)
(63,1)
(64,data)
(65,dataLen = strlen(data)
(66,data[dataLen-1])
(67,)
(68,data)
(69,0)
(70,data[dataLen-1] == \\\'\\\\n\\\')
(71,"fgets()
(72,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
