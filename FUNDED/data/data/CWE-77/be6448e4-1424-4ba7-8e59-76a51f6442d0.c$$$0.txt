-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECVP(COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
54,56
55,56
56,57
56,58
58,59
58,60
58,61
58,62
62,63
63,64
63,65
63,66
63,67
64,65
66,67
68,69
70,71
72,73
73,74
73,75
73,76
74,75
76,77
78,79
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,57,59,60,61,65,67,69,71,75,77,79
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
static void
goodG2B()
goodG2B
{    int h;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
int h;
int h;
int
h
h
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECVP(COMMAND_INT, args);
EXECVP(COMMAND_INT, args)
EXECVP
EXECVP
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(18,5,0)
(7,10,0)
(6,7,0)
(8,19,0)
(14,25,0)
(24,27,0)
(15,1,0)
(25,5,0)
(2,24,0)
(3,19,0)
(5,19,0)
(11,7,0)
(22,10,0)
(21,11,0)
(12,7,0)
(0,19,0)
(9,18,0)
(13,27,0)
(10,19,0)
(18,25,0)
(1,27,0)
(20,18,0)
(7,19,0)
(17,11,0)
(4,10,0)
(28,1,0)
(23,27,0)
(11,29,0)
(16,5,0)
(30,19,0)
(18,20,1)
(9,25,1)
(22,4,1)
(25,14,1)
(10,22,1)
(23,13,1)
(7,10,1)
(18,25,1)
(24,2,1)
(12,10,1)
(2,11,1)
(17,21,1)
(6,12,1)
(28,27,1)
(1,15,1)
(11,17,1)
(14,1,1)
(7,6,1)
(24,27,1)
(28,24,1)
(20,9,1)
(15,28,1)
(13,7,1)
(11,7,1)
(27,23,1)
(26,18,1)
(21,1,1)
(1,27,1)
(1,27,2)
(11,1,2)
(28,1,2)
(24,27,2)
(18,25,2)
(1,1,2)
(2,1,2)
(21,1,2)
(11,7,2)
(7,10,2)
(15,1,2)
(17,1,2)
(24,1,2)
-----------------------------------
(0,h)
(1,h < 1)
(2,h)
(3,data)
(4,dataBuffer)
(5,)
(6,dataBuffer)
(7,data = dataBuffer)
(8,for(h = 0; h < 1; h++)
(9,COMMAND_INT)
(10,dataBuffer[100] = COMMAND_ARG2)
(11,strcat(data, "*.*")
(12,data)
(13,h)
(14,args)
(15,1)
(16,args)
(17,"*.*")
(18,EXECVP(COMMAND_INT, args)
(19,)
(20,args)
(21,data)
(22,COMMAND_ARG2)
(23,0)
(24,h++)
(25,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(26,RET)
(27,h = 0)
(28,h)
(29,)
(30,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
