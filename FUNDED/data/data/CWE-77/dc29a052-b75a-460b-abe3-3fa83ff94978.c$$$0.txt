-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execl_52_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execl_52b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execl_52_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_52b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_execl_52_bad()
CWE78_OS_Command_Injection__char_console_execl_52_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execl_52b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execl_52b_badSink(data);
CWE78_OS_Command_Injection__char_console_execl_52b_badSink(data)
CWE78_OS_Command_Injection__char_console_execl_52b_badSink
CWE78_OS_Command_Injection__char_console_execl_52b_badSink
data
data
-----joern-----
(51,40,0)
(2,11,0)
(28,26,0)
(19,11,0)
(18,45,0)
(6,63,0)
(17,50,0)
(29,22,0)
(23,45,0)
(21,40,0)
(44,37,0)
(12,17,0)
(5,18,0)
(35,26,0)
(50,17,0)
(27,26,0)
(8,0,0)
(49,50,0)
(14,3,0)
(34,56,0)
(45,63,0)
(33,3,0)
(26,65,0)
(20,50,0)
(3,50,0)
(41,18,0)
(29,49,0)
(68,69,0)
(3,28,0)
(22,0,0)
(25,32,0)
(35,45,0)
(46,26,0)
(4,65,0)
(55,26,0)
(28,67,0)
(38,2,0)
(0,20,0)
(49,29,0)
(27,65,0)
(70,51,0)
(0,22,0)
(35,44,0)
(17,26,0)
(63,65,0)
(40,21,0)
(11,45,0)
(31,67,0)
(45,53,0)
(15,32,0)
(61,51,0)
(51,70,0)
(62,64,0)
(0,26,0)
(64,65,0)
(42,65,0)
(48,50,0)
(53,45,0)
(54,20,0)
(43,49,0)
(28,3,0)
(67,66,0)
(59,63,0)
(22,29,0)
(11,2,0)
(7,70,0)
(52,30,0)
(30,37,0)
(57,44,0)
(58,35,0)
(50,69,0)
(32,26,0)
(32,51,0)
(1,53,0)
(26,64,0)
(40,18,0)
(47,27,0)
(53,26,0)
(32,45,0)
(40,51,0)
(20,0,0)
(9,49,0)
(24,22,0)
(60,35,0)
(39,28,0)
(18,40,0)
(51,32,0)
(16,64,0)
(13,11,0)
(10,20,0)
(70,7,1)
(27,47,1)
(64,16,1)
(30,52,1)
(47,67,1)
(26,64,1)
(67,31,1)
(10,8,1)
(3,50,1)
(35,60,1)
(48,70,1)
(50,17,1)
(20,54,1)
(22,24,1)
(43,50,1)
(35,45,1)
(32,15,1)
(53,26,1)
(18,41,1)
(52,70,1)
(19,13,1)
(41,5,1)
(25,2,1)
(11,19,1)
(55,64,1)
(33,39,1)
(29,22,1)
(47,44,1)
(16,62,1)
(9,43,1)
(38,11,1)
(32,45,1)
(51,32,1)
(1,23,1)
(57,35,1)
(27,26,1)
(22,0,1)
(31,28,1)
(49,50,1)
(51,61,1)
(54,10,1)
(32,26,1)
(0,20,1)
(28,26,1)
(40,18,1)
(45,53,1)
(47,29,1)
(60,58,1)
(29,49,1)
(24,0,1)
(35,26,1)
(11,45,1)
(17,26,1)
(13,45,1)
(8,49,1)
(49,9,1)
(14,33,1)
(28,3,1)
(7,51,1)
(47,2,1)
(20,50,1)
(26,46,1)
(70,51,1)
(46,55,1)
(2,38,1)
(51,40,1)
(23,26,1)
(36,27,1)
(61,40,1)
(17,12,1)
(44,57,1)
(0,26,1)
(2,11,1)
(58,30,1)
(18,45,1)
(15,25,1)
(5,32,1)
(3,14,1)
(40,21,1)
(39,29,1)
(53,1,1)
(12,48,1)
(20,49,2)
(18,45,2)
(29,70,2)
(51,40,2)
(50,70,2)
(27,26,2)
(70,51,2)
(41,2,2)
(40,18,2)
(35,45,2)
(49,50,2)
(33,29,2)
(35,26,2)
(8,49,2)
(22,0,2)
(3,50,2)
(28,3,2)
(40,21,2)
(61,2,2)
(15,2,2)
(31,29,2)
(5,2,2)
(22,49,2)
(52,70,2)
(30,70,2)
(26,64,2)
(51,32,2)
(20,50,2)
(12,70,2)
(53,26,2)
(18,2,2)
(70,2,2)
(57,70,2)
(28,26,2)
(9,70,2)
(49,70,2)
(44,70,2)
(0,49,2)
(67,29,2)
(51,2,2)
(24,49,2)
(2,11,2)
(29,22,2)
(32,45,2)
(3,29,2)
(39,29,2)
(14,29,2)
(0,20,2)
(17,26,2)
(11,45,2)
(40,2,2)
(54,49,2)
(60,70,2)
(10,49,2)
(45,53,2)
(0,26,2)
(17,70,2)
(25,2,2)
(32,26,2)
(7,2,2)
(58,70,2)
(29,49,2)
(28,29,2)
(50,17,2)
(35,70,2)
(48,70,2)
(43,70,2)
(32,2,2)
-----------------------------------
(0,data[dataLen-1])
(1,data)
(2,100-dataLen > 1)
(3,dataLen-1)
(4,dataBuffer)
(5,100)
(6,dataLen)
(7,NULL)
(8,data)
(9,0)
(10,dataLen)
(11,100-dataLen)
(12,data)
(13,100)
(14,1)
(15,dataLen)
(16,COMMAND_ARG2)
(17,strlen(data)
(18,100-dataLen)
(19,dataLen)
(20,dataLen-1)
(21,int)
(22,data[dataLen-1] == \\\'\\\\n\\\')
(23,dataLen)
(24,\\\'\\\\n\\\')
(25,data)
(26,data = dataBuffer)
(27,CWE78_OS_Command_Injection__char_console_execl_52b_badSink(data)
(28,data[dataLen-1])
(29,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(30,printLine("fgets()
(31,\\\'\\\\0\\\')
(32,data+dataLen)
(33,dataLen)
(34,if (fgets(data+dataLen, (int)
(35,data[dataLen])
(36,RET)
(37,)
(38,1)
(39,data)
(40,(int)
(41,dataLen)
(42,data)
(43,dataLen)
(44,data[dataLen] = \\\'\\\\0\\\')
(45,dataLen = strlen(data)
(46,dataBuffer)
(47,data)
(48,dataLen)
(49,dataLen > 0)
(50,dataLen = strlen(data)
(51,fgets(data+dataLen, (int)
(52,"fgets()
(53,strlen(data)
(54,1)
(55,data)
(56,)
(57,\\\'\\\\0\\\')
(58,data)
(59,if (100-dataLen > 1)
(60,dataLen)
(61,stdin)
(62,dataBuffer)
(63,)
(64,dataBuffer[100] = COMMAND_ARG2)
(65,)
(66,)
(67,data[dataLen-1] = \\\'\\\\0\\\')
(68,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(69,)
(70,fgets(data+dataLen, (int)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
