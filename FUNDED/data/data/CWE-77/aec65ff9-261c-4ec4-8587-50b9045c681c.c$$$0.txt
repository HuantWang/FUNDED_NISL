-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
32,34
33,34
33,35
34,35
34,36
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
45,46
47,48
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
72,74
74,75
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,35,37,38,43,46,48,49,53,55,61,64,66,69,70,73,75,77,79,84,85,90,92,93,97,99,102
-----computeFrom-----
33,34
33,35
34,35
34,36
41,42
41,43
51,52
51,53
58,59
58,60
62,63
62,64
72,73
72,74
87,88
87,89
-----guardedBy-----
37,92
55,79
53,99
64,90
75,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(24,4,0)
(30,11,0)
(17,3,0)
(4,24,0)
(6,28,0)
(5,38,0)
(49,5,0)
(25,47,0)
(14,12,0)
(9,22,0)
(35,42,0)
(11,2,0)
(13,10,0)
(25,39,0)
(34,28,0)
(38,40,0)
(18,37,0)
(41,6,0)
(26,36,0)
(45,34,0)
(38,24,0)
(33,5,0)
(27,42,0)
(37,24,0)
(42,3,0)
(46,39,0)
(42,47,0)
(39,17,0)
(29,17,0)
(40,38,0)
(22,2,0)
(32,12,0)
(24,37,0)
(31,2,0)
(38,2,0)
(39,25,0)
(45,47,0)
(5,39,0)
(5,47,0)
(0,40,0)
(38,5,0)
(19,17,0)
(8,37,0)
(23,44,0)
(10,2,0)
(7,45,0)
(22,44,0)
(1,32,0)
(2,36,0)
(21,34,0)
(16,25,0)
(24,38,0)
(2,10,0)
(12,32,0)
(51,17,0)
(50,38,0)
(48,45,0)
(45,39,0)
(20,11,0)
(12,39,0)
(37,39,0)
(43,12,0)
(15,10,0)
(38,24,1)
(42,47,1)
(38,5,1)
(32,1,1)
(9,34,1)
(45,48,1)
(30,2,1)
(27,11,1)
(42,27,1)
(37,8,1)
(37,39,1)
(5,33,1)
(2,10,1)
(38,2,1)
(22,2,1)
(48,7,1)
(49,11,1)
(21,45,1)
(20,30,1)
(35,42,1)
(10,15,1)
(39,25,1)
(0,38,1)
(32,12,1)
(16,46,1)
(5,47,1)
(40,38,1)
(45,39,1)
(31,32,1)
(6,41,1)
(40,0,1)
(27,22,1)
(12,39,1)
(15,13,1)
(9,40,1)
(5,39,1)
(25,16,1)
(8,18,1)
(24,4,1)
(24,37,1)
(45,47,1)
(27,32,1)
(38,50,1)
(7,6,1)
(41,40,1)
(13,31,1)
(22,9,1)
(11,20,1)
(43,14,1)
(33,49,1)
(14,39,1)
(12,43,1)
(1,12,1)
(11,2,1)
(50,24,1)
(25,47,1)
(34,21,1)
(18,5,1)
(42,47,2)
(22,2,2)
(48,40,2)
(2,10,2)
(11,2,2)
(38,24,2)
(9,11,2)
(24,37,2)
(18,11,2)
(20,32,2)
(45,40,2)
(32,12,2)
(25,47,2)
(41,40,2)
(35,42,2)
(11,32,2)
(5,39,2)
(49,11,2)
(38,2,2)
(12,39,2)
(5,11,2)
(8,11,2)
(21,40,2)
(6,40,2)
(45,47,2)
(24,4,2)
(40,11,2)
(50,11,2)
(15,32,2)
(31,32,2)
(24,11,2)
(40,38,2)
(33,11,2)
(34,40,2)
(7,40,2)
(30,32,2)
(2,32,2)
(39,25,2)
(5,47,2)
(38,11,2)
(10,32,2)
(0,11,2)
(45,39,2)
(38,5,2)
(37,11,2)
(37,39,2)
(13,32,2)
(22,11,2)
-----------------------------------
(0,NULL)
(1,1)
(2,pFile = fopen(FILENAME, "r")
(3,)
(4,int)
(5,data+dataLen)
(6,printLine("fgets()
(7,data)
(8,dataLen)
(9,pFile)
(10,fopen(FILENAME, "r")
(11,pFile != NULL)
(12,100-dataLen)
(13,FILENAME)
(14,100)
(15,"r")
(16,data)
(17,)
(18,100)
(19,pFile)
(20,NULL)
(21,\\\'\\\\0\\\')
(22,fclose(pFile)
(23,if (fgets(data+dataLen, (int)
(24,(int)
(25,strlen(data)
(26,if (pFile != NULL)
(27,data)
(28,)
(29,dataLen)
(30,pFile)
(31,pFile)
(32,100-dataLen > 1)
(33,dataLen)
(34,data[dataLen] = \\\'\\\\0\\\')
(35,RET)
(36,)
(37,100-dataLen)
(38,fgets(data+dataLen, (int)
(39,dataLen = strlen(data)
(40,fgets(data+dataLen, (int)
(41,"fgets()
(42,return data;)
(43,dataLen)
(44,)
(45,data[dataLen])
(46,dataLen)
(47,char * data)
(48,dataLen)
(49,data)
(50,pFile)
(51,if (100-dataLen > 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
