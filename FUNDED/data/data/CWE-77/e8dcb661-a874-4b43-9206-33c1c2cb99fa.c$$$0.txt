-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    /* FIX: Append a fixed string to data (not user / external input) */
    wcscat(data, L"*.*");
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
35,38
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
54,55
54,56
55,56
55,57
56,57
56,58
57,58
59,60
62,63
62,64
63,64
64,65
64,66
65,66
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,38,40,41,44,47,49,50,53,58,60,61,66,67,71,72
-----computeFrom-----
23,24
23,25
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(9,27,0)
(16,5,0)
(19,11,0)
(4,23,0)
(27,26,0)
(18,26,0)
(24,2,0)
(7,13,0)
(11,23,0)
(8,15,0)
(13,15,0)
(22,7,0)
(7,5,0)
(25,15,0)
(2,15,0)
(28,5,0)
(17,13,0)
(2,8,0)
(1,18,0)
(14,2,0)
(12,15,0)
(20,13,0)
(5,2,0)
(5,13,0)
(23,11,0)
(3,8,0)
(6,7,0)
(11,7,0)
(0,8,0)
(21,13,0)
(14,24,1)
(9,23,1)
(6,22,1)
(1,27,1)
(22,5,1)
(28,2,1)
(7,5,1)
(18,1,1)
(5,16,1)
(2,14,1)
(16,28,1)
(5,2,1)
(23,4,1)
(7,6,1)
(8,0,1)
(19,7,1)
(0,3,1)
(4,11,1)
(11,19,1)
(11,7,1)
(2,8,1)
(24,8,1)
(23,11,1)
(10,18,1)
(10,23,1)
(27,9,1)
(1,23,2)
(11,7,2)
(23,11,2)
(7,5,2)
(9,23,2)
(5,2,2)
(27,23,2)
(2,8,2)
(18,23,2)
-----------------------------------
(0,FULL_COMMAND)
(1,1)
(2,data = data_buf)
(3,data_buf)
(4,0)
(5,* dataCopy = data)
(6,dataCopy)
(7,* data = dataCopy)
(8,data_buf[100] = FULL_COMMAND)
(9,"command execution failed!")
(10,RET)
(11,SYSTEM(data)
(12,data_buf)
(13,)
(14,data_buf)
(15,)
(16,data)
(17,data)
(18,exit(1)
(19,data)
(20,if (SYSTEM(data)
(21,dataCopy)
(22,data)
(23,SYSTEM(data)
(24,data)
(25,data)
(26,)
(27,printLine("command execution failed!")
(28,dataCopy)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
