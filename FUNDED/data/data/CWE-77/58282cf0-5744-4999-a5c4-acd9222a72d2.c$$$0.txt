-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_popen_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_popen_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_popen_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_popen_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(44,50,0)
(50,35,0)
(9,28,0)
(21,38,0)
(55,34,0)
(18,35,0)
(4,55,0)
(24,35,0)
(52,28,0)
(35,37,0)
(29,32,0)
(24,46,0)
(22,3,0)
(54,37,0)
(35,0,0)
(17,12,0)
(19,25,0)
(39,5,0)
(12,7,0)
(11,58,0)
(1,31,0)
(50,12,0)
(33,34,0)
(59,27,0)
(34,55,0)
(22,39,0)
(31,41,0)
(14,38,0)
(45,22,0)
(2,21,0)
(37,46,0)
(11,25,0)
(32,39,0)
(24,22,0)
(51,0,0)
(25,61,0)
(39,32,0)
(3,22,0)
(13,61,0)
(50,46,0)
(49,3,0)
(30,63,0)
(53,7,0)
(10,50,0)
(39,22,0)
(61,23,0)
(31,46,0)
(55,46,0)
(26,24,0)
(5,39,0)
(48,23,0)
(38,21,0)
(34,61,0)
(11,46,0)
(8,28,0)
(22,24,0)
(6,31,0)
(57,34,0)
(56,24,0)
(16,53,0)
(55,4,0)
(15,11,0)
(58,36,0)
(47,55,0)
(62,25,0)
(40,58,0)
(27,61,0)
(9,4,0)
(27,46,0)
(37,35,0)
(28,61,0)
(43,21,0)
(42,4,0)
(60,0,0)
(21,35,0)
(20,32,0)
(32,35,0)
(61,27,0)
(0,41,0)
(4,9,0)
(25,11,0)
(28,9,0)
(50,44,1)
(6,12,1)
(55,34,1)
(55,46,1)
(16,3,1)
(12,17,1)
(37,54,1)
(3,49,1)
(27,59,1)
(6,9,1)
(26,56,1)
(40,11,1)
(31,6,1)
(24,35,1)
(47,28,1)
(6,58,1)
(28,8,1)
(58,40,1)
(15,9,1)
(34,61,1)
(1,31,1)
(11,25,1)
(56,38,1)
(21,35,1)
(11,46,1)
(50,46,1)
(28,61,1)
(22,39,1)
(6,38,1)
(8,52,1)
(44,10,1)
(22,45,1)
(21,43,1)
(35,37,1)
(24,26,1)
(50,35,1)
(53,16,1)
(33,57,1)
(39,32,1)
(27,46,1)
(24,46,1)
(61,27,1)
(17,50,1)
(4,55,1)
(13,3,1)
(52,61,1)
(20,24,1)
(57,47,1)
(3,22,1)
(9,4,1)
(9,28,1)
(31,46,1)
(29,20,1)
(49,22,1)
(25,61,1)
(25,19,1)
(32,29,1)
(4,42,1)
(38,14,1)
(59,13,1)
(62,15,1)
(34,33,1)
(38,21,1)
(42,55,1)
(45,39,1)
(14,21,1)
(54,18,1)
(43,2,1)
(39,5,1)
(37,46,1)
(2,35,1)
(22,24,1)
(19,62,1)
(10,53,1)
(32,35,1)
(34,61,2)
(61,27,2)
(33,28,2)
(15,9,2)
(28,3,2)
(50,35,2)
(26,38,2)
(25,61,2)
(39,32,2)
(20,38,2)
(24,46,2)
(24,35,2)
(1,31,2)
(47,28,2)
(59,3,2)
(55,28,2)
(29,38,2)
(40,9,2)
(8,3,2)
(11,9,2)
(22,38,2)
(28,61,2)
(25,9,2)
(22,24,2)
(57,28,2)
(19,9,2)
(22,39,2)
(24,38,2)
(27,3,2)
(58,9,2)
(37,46,2)
(35,37,2)
(11,46,2)
(10,3,2)
(13,3,2)
(32,38,2)
(17,3,2)
(55,46,2)
(39,38,2)
(9,3,2)
(50,46,2)
(38,21,2)
(61,3,2)
(52,3,2)
(53,3,2)
(4,55,2)
(9,28,2)
(9,4,2)
(50,3,2)
(31,46,2)
(34,28,2)
(44,3,2)
(12,3,2)
(42,28,2)
(56,38,2)
(4,28,2)
(55,34,2)
(16,3,2)
(32,35,2)
(3,38,2)
(3,22,2)
(45,38,2)
(21,35,2)
(39,5,2)
(11,25,2)
(62,9,2)
(49,38,2)
(27,46,2)
-----------------------------------
(0,)
(1,RET)
(2,100)
(3,fgets(data+dataLen, (int)
(4,data[dataLen-1] == \\\'\\\\n\\\')
(5,int)
(6,data)
(7,)
(8,0)
(9,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(10,data)
(11,data[dataLen-1])
(12,data[dataLen] = \\\'\\\\0\\\')
(13,dataLen)
(14,1)
(15,data)
(16,"fgets()
(17,\\\'\\\\0\\\')
(18,dataLen)
(19,1)
(20,100)
(21,100-dataLen)
(22,fgets(data+dataLen, (int)
(23,)
(24,data+dataLen)
(25,dataLen-1)
(26,dataLen)
(27,strlen(data)
(28,dataLen > 0)
(29,dataLen)
(30,if (fgets(data+dataLen, (int)
(31,return data;)
(32,100-dataLen)
(33,1)
(34,dataLen-1)
(35,dataLen = strlen(data)
(36,)
(37,strlen(data)
(38,100-dataLen > 1)
(39,(int)
(40,\\\'\\\\0\\\')
(41,)
(42,\\\'\\\\n\\\')
(43,dataLen)
(44,dataLen)
(45,stdin)
(46,char * data)
(47,data)
(48,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(49,NULL)
(50,data[dataLen])
(51,if (100-dataLen > 1)
(52,dataLen)
(53,printLine("fgets()
(54,data)
(55,data[dataLen-1])
(56,data)
(57,dataLen)
(58,data[dataLen-1] = \\\'\\\\0\\\')
(59,data)
(60,dataLen)
(61,dataLen = strlen(data)
(62,dataLen)
(63,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
