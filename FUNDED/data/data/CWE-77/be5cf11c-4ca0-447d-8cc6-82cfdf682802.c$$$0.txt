-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalFive!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
33,34
34,35
35,36
35,37
36,37
39,40
40,41
41,42
41,43
41,44
42,43
44,45
47,48
47,49
48,49
48,50
49,50
49,51
50,51
52,53
55,56
55,57
56,57
57,58
57,59
58,59
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,38,43,45,46,51,53,54,59,60,64,65
-----computeFrom-----
23,24
23,25
29,30
29,31
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalFive!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalFive!=5
globalFive
globalFive
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(28,27,0)
(14,28,0)
(18,27,0)
(29,30,0)
(26,28,0)
(6,8,0)
(0,6,0)
(14,25,0)
(10,27,0)
(20,14,0)
(7,27,0)
(22,12,0)
(16,29,0)
(19,8,0)
(28,7,0)
(4,7,0)
(9,14,0)
(5,21,0)
(1,13,0)
(8,6,0)
(2,28,0)
(12,24,0)
(23,27,0)
(17,21,0)
(13,30,0)
(6,28,0)
(11,7,0)
(3,27,0)
(0,12,1)
(20,9,1)
(8,19,1)
(9,21,1)
(5,28,1)
(2,26,1)
(15,13,1)
(16,8,1)
(22,21,1)
(6,0,1)
(11,4,1)
(28,7,1)
(14,20,1)
(1,29,1)
(15,8,1)
(6,28,1)
(29,16,1)
(12,22,1)
(17,5,1)
(8,6,1)
(21,17,1)
(28,2,1)
(13,1,1)
(26,7,1)
(14,28,1)
(0,14,1)
(19,6,1)
(7,11,1)
(28,7,2)
(9,21,2)
(8,6,2)
(14,21,2)
(16,8,2)
(22,21,2)
(14,28,2)
(1,8,2)
(29,8,2)
(20,21,2)
(12,21,2)
(6,28,2)
(13,8,2)
-----------------------------------
(0,data)
(1,1)
(2,data_buf)
(3,if(globalFive!=5)
(4,data_buf)
(5,globalFive)
(6,SYSTEM(data)
(7,data_buf[100] = FULL_COMMAND)
(8,SYSTEM(data)
(9,data)
(10,data)
(11,FULL_COMMAND)
(12,printLine("Benign, fixed string")
(13,exit(1)
(14,strcat(data, "*.*")
(15,RET)
(16,"command execution failed!")
(17,5)
(18,data_buf)
(19,0)
(20,"*.*")
(21,globalFive!=5)
(22,"Benign, fixed string")
(23,if (SYSTEM(data)
(24,)
(25,)
(26,data)
(27,)
(28,data = data_buf)
(29,printLine("command execution failed!")
(30,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
