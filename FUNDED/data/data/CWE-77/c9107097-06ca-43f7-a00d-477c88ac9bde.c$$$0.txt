-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnvp(_P_WAIT, COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
41,42
42,43
42,44
42,45
43,44
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
52,55
52,56
56,57
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,38,39,44,46,47,51,53,54,55,59,61,63,65,69,71,73,75
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnvp(_P_WAIT, COMMAND_INT, args);
_spawnvp(_P_WAIT, COMMAND_INT, args)
_spawnvp
_spawnvp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(20,19,0)
(10,21,0)
(18,19,0)
(16,13,0)
(5,25,0)
(25,13,0)
(22,16,0)
(1,16,0)
(19,1,0)
(5,15,0)
(10,25,0)
(17,13,0)
(6,27,0)
(0,5,0)
(25,27,0)
(9,25,0)
(11,13,0)
(3,10,0)
(19,16,0)
(26,19,0)
(4,10,0)
(23,25,0)
(24,13,0)
(27,13,0)
(12,5,0)
(2,27,0)
(8,1,0)
(25,9,1)
(19,1,1)
(10,3,1)
(25,27,1)
(9,23,1)
(18,26,1)
(14,19,1)
(1,8,1)
(26,20,1)
(8,10,1)
(0,7,1)
(20,1,1)
(19,18,1)
(27,6,1)
(23,27,1)
(3,4,1)
(5,12,1)
(4,7,1)
(12,0,1)
(6,2,1)
(7,25,1)
(10,25,1)
(5,25,1)
(8,5,1)
(4,7,2)
(5,7,2)
(10,25,2)
(25,27,2)
(19,1,2)
(10,7,2)
(5,25,2)
(12,7,2)
(3,7,2)
(0,7,2)
-----------------------------------
(0,data)
(1,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(2,dataBuffer)
(3,"*.*")
(4,data)
(5,strcat(data, "*.*")
(6,COMMAND_ARG2)
(7,globalReturnsTrueOrFalse()
(8,args)
(9,dataBuffer)
(10,strcat(data, "*.*")
(11,data)
(12,"*.*")
(13,)
(14,RET)
(15,)
(16,)
(17,if(globalReturnsTrueOrFalse()
(18,args)
(19,_spawnvp(_P_WAIT, COMMAND_INT, args)
(20,_P_WAIT)
(21,)
(22,args)
(23,data)
(24,dataBuffer)
(25,data = dataBuffer)
(26,COMMAND_INT)
(27,dataBuffer[100] = COMMAND_ARG2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
