-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(STATIC_CONST_FIVE==5)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
35,36
35,37
35,38
36,37
38,39
41,42
41,43
41,44
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,39,40,45,47,48,52,55,57,58,62,64,69,71
-----computeFrom-----
23,24
23,25
29,30
29,31
50,51
50,52
60,61
60,62
-----guardedBy-----
62,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(STATIC_CONST_FIVE==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(19,9,0)
(31,9,0)
(30,17,0)
(17,25,0)
(25,14,0)
(18,6,0)
(21,10,0)
(29,9,0)
(8,2,0)
(13,29,0)
(22,7,0)
(0,14,0)
(26,31,0)
(9,6,0)
(1,9,0)
(11,29,0)
(23,17,0)
(15,6,0)
(16,25,0)
(8,25,0)
(14,6,0)
(5,6,0)
(20,31,0)
(28,7,0)
(27,14,0)
(24,8,0)
(31,25,0)
(12,10,0)
(29,4,0)
(9,7,0)
(7,6,0)
(25,31,0)
(16,10,1)
(31,20,1)
(17,30,1)
(25,31,1)
(16,29,1)
(9,7,1)
(26,16,1)
(3,8,1)
(7,28,1)
(13,11,1)
(29,9,1)
(31,9,1)
(17,25,1)
(29,13,1)
(1,7,1)
(8,24,1)
(23,25,1)
(21,9,1)
(12,21,1)
(19,1,1)
(20,26,1)
(24,17,1)
(28,22,1)
(3,17,1)
(11,10,1)
(10,12,1)
(30,23,1)
(8,25,1)
(9,19,1)
(17,25,2)
(11,10,2)
(25,31,2)
(29,10,2)
(8,17,2)
(13,10,2)
(24,17,2)
(29,9,2)
(9,7,2)
(8,25,2)
(31,9,2)
-----------------------------------
(0,if (pipe != NULL)
(1,data)
(2,)
(3,RET)
(4,)
(5,if(STATIC_CONST_FIVE==5)
(6,)
(7,data_buf[100] = FULL_COMMAND)
(8,PCLOSE(pipe)
(9,data = data_buf)
(10,STATIC_CONST_FIVE==5)
(11,data)
(12,5)
(13,"*.*")
(14,)
(15,data)
(16,pipe)
(17,pipe != NULL)
(18,data_buf)
(19,data_buf)
(20,"w")
(21,STATIC_CONST_FIVE)
(22,data_buf)
(23,pipe)
(24,pipe)
(25,pipe = POPEN(data, "w")
(26,data)
(27,pipe)
(28,FULL_COMMAND)
(29,strcat(data, "*.*")
(30,NULL)
(31,POPEN(data, "w")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
