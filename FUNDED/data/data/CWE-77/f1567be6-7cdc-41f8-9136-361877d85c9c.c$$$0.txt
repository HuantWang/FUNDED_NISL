-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(STATIC_CONST_FIVE==5)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    /* wspawnl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
35,36
35,37
35,38
36,37
38,39
41,42
42,43
42,44
42,45
42,46
42,47
42,48
42,49
43,44
45,46
47,48
49,50
51,52
53,54
55,56
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,39,40,44,46,48,50,52,54,56
-----computeFrom-----
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* wspawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* wspawnl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_FIVE==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
_wspawnl
_wspawnl
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(12,14,0)
(8,3,0)
(13,1,0)
(7,3,0)
(18,19,0)
(10,14,0)
(5,3,0)
(20,16,0)
(6,19,0)
(15,3,0)
(4,3,0)
(11,3,0)
(2,16,0)
(19,16,0)
(19,1,0)
(17,16,0)
(1,16,0)
(9,1,0)
(3,16,0)
(12,19,1)
(7,11,1)
(4,7,1)
(15,5,1)
(6,1,1)
(19,18,1)
(10,12,1)
(1,9,1)
(11,14,1)
(5,8,1)
(19,1,1)
(9,13,1)
(8,4,1)
(0,3,1)
(3,15,1)
(14,10,1)
(18,6,1)
(19,1,2)
-----------------------------------
(0,RET)
(1,dataBuffer[100] = COMMAND_ARG2)
(2,if(STATIC_CONST_FIVE==5)
(3,_wspawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(4,COMMAND_INT_PATH)
(5,COMMAND_ARG3)
(6,data)
(7,COMMAND_INT_PATH)
(8,COMMAND_ARG1)
(9,COMMAND_ARG2)
(10,5)
(11,_P_WAIT)
(12,STATIC_CONST_FIVE)
(13,dataBuffer)
(14,STATIC_CONST_FIVE==5)
(15,NULL)
(16,)
(17,data)
(18,dataBuffer)
(19,data = dataBuffer)
(20,dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
