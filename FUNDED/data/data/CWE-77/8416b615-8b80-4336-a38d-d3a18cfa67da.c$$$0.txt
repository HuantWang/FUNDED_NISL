-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54_bad()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = wcslen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgetws() */
                dataLen = wcslen(data);
                if (dataLen > 0 && data[dataLen-1] == L'\n')
                {
                    data[dataLen-1] = L'\0';
                }
            }
            else
            {
                printLine("fgetws() failed");
                /* Restore NUL terminator if fgetws fails */
                data[dataLen] = L'\0';
            }
        }
    }
    CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54_bad(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54b_badSink(data);}
void
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54_bad()
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54_bad
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }    CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54b_badSink(data);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = wcslen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }    }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }        }
if (fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }            else            {                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
fgetws(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgetws(data+dataLen, (int)(100-dataLen), stdin)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgetws() */                dataLen = wcslen(data);                if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }            }
dataLen = wcslen(data);
dataLen = wcslen(data)
dataLen
dataLen
wcslen(data)
wcslen
wcslen
data
data
if (dataLen > 0 && data[dataLen-1] == L'\n')                {                    data[dataLen-1] = L'\0';                }
dataLen > 0 && data[dataLen-1] == L'\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == L'\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\n'
{                    data[dataLen-1] = L'\0';                }
data[dataLen-1] = L'\0';
data[dataLen-1] = L'\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
L'\0'
{                printLine("fgetws() failed");                /* Restore NUL terminator if fgetws fails */                data[dataLen] = L'\0';            }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54b_badSink(data);
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54b_badSink(data)
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54b_badSink
CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54b_badSink
data
data
-----joern-----
(6,4,0)
(19,4,0)
(48,15,0)
(9,7,0)
(44,11,0)
(26,36,0)
(19,45,0)
(31,6,0)
(38,46,0)
(39,14,0)
(13,14,0)
(45,36,0)
(41,44,0)
(18,21,0)
(45,19,0)
(8,24,0)
(20,36,0)
(15,41,0)
(47,41,0)
(0,44,0)
(40,45,0)
(4,6,0)
(2,19,0)
(4,19,0)
(15,7,0)
(24,8,0)
(23,44,0)
(12,11,0)
(4,29,0)
(14,11,0)
(6,41,0)
(34,6,0)
(3,24,0)
(37,12,0)
(21,19,0)
(33,45,0)
(17,16,0)
(30,27,0)
(45,41,0)
(25,16,0)
(8,36,0)
(43,36,0)
(36,11,0)
(29,4,0)
(36,14,0)
(42,26,0)
(26,41,0)
(1,15,0)
(32,11,0)
(41,26,0)
(10,8,0)
(19,21,0)
(7,15,0)
(28,17,0)
(22,11,0)
(24,46,0)
(35,38,0)
(12,36,0)
(33,40,1)
(26,36,1)
(37,7,1)
(9,15,1)
(1,48,1)
(45,33,1)
(19,4,1)
(8,10,1)
(41,26,1)
(6,31,1)
(36,14,1)
(13,39,1)
(26,42,1)
(7,9,1)
(34,45,1)
(15,1,1)
(45,41,1)
(7,15,1)
(43,14,1)
(47,36,1)
(18,19,1)
(10,3,1)
(4,29,1)
(37,35,1)
(12,36,1)
(45,36,1)
(19,2,1)
(19,45,1)
(5,12,1)
(21,19,1)
(17,28,1)
(25,17,1)
(20,43,1)
(6,41,1)
(3,21,1)
(24,8,1)
(14,13,1)
(21,18,1)
(37,25,1)
(12,37,1)
(42,47,1)
(8,36,1)
(35,24,1)
(31,34,1)
(15,41,1)
(48,41,1)
(36,20,1)
(40,7,1)
(28,21,1)
(4,6,1)
(2,4,1)
(40,7,2)
(6,41,2)
(41,26,2)
(31,7,2)
(24,8,2)
(18,7,2)
(45,7,2)
(19,4,2)
(24,21,2)
(15,41,2)
(34,7,2)
(19,7,2)
(6,7,2)
(17,21,2)
(7,15,2)
(4,7,2)
(2,7,2)
(21,19,2)
(25,21,2)
(21,7,2)
(10,21,2)
(8,36,2)
(36,14,2)
(19,45,2)
(35,21,2)
(26,36,2)
(45,41,2)
(28,21,2)
(4,6,2)
(4,29,2)
(12,36,2)
(8,21,2)
(45,36,2)
(33,7,2)
(3,21,2)
-----------------------------------
(0,if (100-dataLen > 1)
(1,dataLen)
(2,stdin)
(3,dataLen)
(4,(int)
(5,RET)
(6,100-dataLen)
(7,100-dataLen > 1)
(8,wcslen(data)
(9,1)
(10,data)
(11,)
(12,CWE78_OS_Command_Injection__wchar_t_console_w32_execvp_54b_badSink(data)
(13,COMMAND_ARG2)
(14,dataBuffer[100] = COMMAND_ARG2)
(15,100-dataLen)
(16,)
(17,printLine("fgetws()
(18,NULL)
(19,fgetws(data+dataLen, (int)
(20,dataBuffer)
(21,fgetws(data+dataLen, (int)
(22,dataBuffer)
(23,dataLen)
(24,dataLen = wcslen(data)
(25,\\\'\\\\0\\\')
(26,wcslen(data)
(27,)
(28,"fgetws()
(29,int)
(30,if (fgetws(data+dataLen, (int)
(31,dataLen)
(32,data)
(33,dataLen)
(34,100)
(35,\\\'\\\\0\\\')
(36,data = dataBuffer)
(37,data)
(38,)
(39,dataBuffer)
(40,data)
(41,dataLen = wcslen(data)
(42,data)
(43,data)
(44,)
(45,data+dataLen)
(46,)
(47,dataLen)
(48,100)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
