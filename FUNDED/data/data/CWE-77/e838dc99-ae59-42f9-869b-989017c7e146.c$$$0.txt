-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        char * data = *dataPtr1;
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* spawnl - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
71,72
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
84,85
86,87
87,88
87,89
87,90
87,91
87,92
87,93
87,94
88,89
90,91
92,93
94,95
96,97
98,99
100,101
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,67,72,74,78,80,81,85,89,91,93,95,97,99,101
-----computeFrom-----
45,46
45,47
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* spawnl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
static void
goodG2B()
goodG2B
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* spawnl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* spawnl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnl
_spawnl
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(30,20,0)
(4,38,0)
(14,20,0)
(16,11,0)
(11,16,0)
(41,16,0)
(13,20,0)
(29,20,0)
(0,25,0)
(33,3,0)
(44,38,0)
(9,12,0)
(42,0,0)
(12,38,0)
(40,23,0)
(19,34,0)
(26,12,0)
(40,33,0)
(43,40,0)
(39,4,0)
(16,45,0)
(27,45,0)
(22,36,0)
(24,28,0)
(17,38,0)
(33,25,0)
(28,38,0)
(6,33,0)
(31,11,0)
(12,4,0)
(15,38,0)
(20,28,0)
(36,45,0)
(23,34,0)
(10,0,0)
(35,38,0)
(1,20,0)
(45,36,0)
(2,4,0)
(3,25,0)
(7,23,0)
(21,23,0)
(23,38,0)
(3,7,0)
(45,38,0)
(32,25,0)
(7,3,0)
(37,3,0)
(5,7,0)
(8,20,0)
(34,23,0)
(0,3,0)
(11,28,0)
(25,38,0)
(42,3,1)
(26,4,1)
(30,11,1)
(1,13,1)
(20,8,1)
(12,4,1)
(45,36,1)
(18,20,1)
(22,27,1)
(27,23,1)
(29,30,1)
(2,39,1)
(39,45,1)
(9,26,1)
(5,37,1)
(40,43,1)
(16,41,1)
(14,29,1)
(7,5,1)
(16,45,1)
(8,1,1)
(33,6,1)
(41,31,1)
(0,3,1)
(33,3,1)
(43,0,1)
(6,40,1)
(23,34,1)
(0,10,1)
(3,7,1)
(34,19,1)
(36,22,1)
(10,42,1)
(11,16,1)
(40,23,1)
(13,14,1)
(31,33,1)
(7,23,1)
(12,9,1)
(4,2,1)
(37,12,1)
(19,21,1)
(3,7,2)
(33,3,2)
(16,45,2)
(7,23,2)
(45,36,2)
(23,34,2)
(12,4,2)
(40,23,2)
(11,16,2)
(0,3,2)
-----------------------------------
(0,strcat(data, "*.*")
(1,COMMAND_ARG3)
(2,COMMAND_ARG2)
(3,* data = *dataPtr1)
(4,dataBuffer[100] = COMMAND_ARG2)
(5,dataPtr1)
(6,data)
(7,*dataPtr1)
(8,NULL)
(9,dataBuffer)
(10,"*.*")
(11,* data = *dataPtr2)
(12,data = dataBuffer)
(13,COMMAND_ARG1)
(14,COMMAND_INT_PATH)
(15,dataPtr2)
(16,*dataPtr2)
(17,dataPtr1)
(18,RET)
(19,data)
(20,_spawnl(_P_WAIT, COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(21,dataPtr1)
(22,data)
(23,* *dataPtr1 = &data)
(24,data)
(25,)
(26,data)
(27,dataPtr2)
(28,)
(29,COMMAND_INT_PATH)
(30,_P_WAIT)
(31,data)
(32,data)
(33,*dataPtr1 = data)
(34,&data)
(35,dataBuffer)
(36,&data)
(37,data)
(38,)
(39,dataBuffer)
(40,*dataPtr1)
(41,dataPtr2)
(42,data)
(43,dataPtr1)
(44,data)
(45,* *dataPtr2 = &data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
