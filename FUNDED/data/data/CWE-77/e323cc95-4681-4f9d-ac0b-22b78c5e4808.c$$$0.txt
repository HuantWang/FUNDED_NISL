-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
39,40
40,41
40,42
40,43
41,42
43,44
46,47
46,48
46,49
47,48
48,49
48,50
49,50
51,52
51,53
54,55
55,56
55,57
56,57
58,59
58,60
58,61
59,60
61,62
64,65
64,66
65,66
65,67
66,67
68,69
70,71
71,72
72,73
72,74
73,74
75,76
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,37,42,44,45,50,52,53,57,60,62,63,67,69,74,76
-----computeFrom-----
23,24
23,25
55,56
55,57
65,66
65,67
-----guardedBy-----
67,76
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(0,5,0)
(13,9,0)
(26,27,0)
(6,10,0)
(30,10,0)
(5,17,0)
(4,6,0)
(27,10,0)
(16,25,0)
(9,12,0)
(8,29,0)
(15,25,0)
(28,8,0)
(1,14,0)
(22,29,0)
(14,10,0)
(29,8,0)
(25,8,0)
(14,27,0)
(29,14,0)
(23,28,0)
(31,9,0)
(3,8,0)
(2,14,0)
(32,10,0)
(9,14,0)
(8,6,0)
(7,6,0)
(24,27,0)
(28,18,0)
(19,10,0)
(20,29,0)
(22,3,1)
(16,8,1)
(15,16,1)
(13,31,1)
(2,1,1)
(5,0,1)
(3,9,1)
(29,14,1)
(20,22,1)
(26,24,1)
(11,28,1)
(25,15,1)
(1,27,1)
(28,23,1)
(8,29,1)
(25,8,1)
(27,26,1)
(31,21,1)
(9,14,1)
(21,14,1)
(14,2,1)
(9,13,1)
(0,21,1)
(28,8,1)
(11,25,1)
(3,5,1)
(23,25,1)
(14,27,1)
(29,20,1)
(8,29,2)
(13,21,2)
(23,25,2)
(31,21,2)
(0,21,2)
(28,25,2)
(9,14,2)
(29,14,2)
(28,8,2)
(14,27,2)
(25,8,2)
(9,21,2)
(5,21,2)
-----------------------------------
(0,"Benign, fixed string")
(1,data)
(2,data_buf)
(3,pipe)
(4,pipe)
(5,printLine("Benign, fixed string")
(6,)
(7,if (pipe != NULL)
(8,pipe = POPEN(data, "w")
(9,strcat(data, "*.*")
(10,)
(11,RET)
(12,)
(13,"*.*")
(14,data = data_buf)
(15,NULL)
(16,pipe)
(17,)
(18,)
(19,data_buf)
(20,"w")
(21,globalReturnsFalse()
(22,data)
(23,pipe)
(24,data_buf)
(25,pipe != NULL)
(26,FULL_COMMAND)
(27,data_buf[100] = FULL_COMMAND)
(28,PCLOSE(pipe)
(29,POPEN(data, "w")
(30,data)
(31,data)
(32,if(globalReturnsFalse()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
