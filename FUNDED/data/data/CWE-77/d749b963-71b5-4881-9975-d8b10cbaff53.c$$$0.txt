-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    switch(5)
    {
    case 6:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    default:
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
        break;
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnvp(_P_WAIT, COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
34,35
34,36
35,36
40,41
41,42
41,43
41,44
42,43
44,45
48,49
48,50
49,50
50,51
50,52
52,53
52,54
52,55
52,56
56,57
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
67,68
67,69
67,70
67,71
68,69
70,71
72,73
74,75
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,36,37,38,39,43,45,46,47,51,53,54,55,59,61,63,65,69,71,73,75
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B1(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(5)    {    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }
5
{    case 6:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    default:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }
case 6:
6
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
default:
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
break;
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnvp(_P_WAIT, COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnvp(_P_WAIT, COMMAND_INT, args);
_spawnvp(_P_WAIT, COMMAND_INT, args)
_spawnvp
_spawnvp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(3,21,0)
(6,5,0)
(2,27,0)
(26,21,0)
(16,19,0)
(29,7,0)
(9,0,0)
(17,21,0)
(12,0,0)
(1,5,0)
(18,20,0)
(11,7,0)
(27,21,0)
(14,5,0)
(20,0,0)
(20,7,0)
(27,20,0)
(23,27,0)
(10,17,0)
(15,21,0)
(0,7,0)
(25,20,0)
(5,19,0)
(4,19,0)
(24,16,0)
(19,7,0)
(8,21,0)
(5,16,0)
(22,7,0)
(0,12,1)
(10,28,1)
(14,1,1)
(6,14,1)
(26,27,1)
(1,16,1)
(24,15,1)
(27,20,1)
(20,25,1)
(12,9,1)
(28,20,1)
(15,17,1)
(13,5,1)
(27,2,1)
(25,18,1)
(18,0,1)
(24,26,1)
(20,0,1)
(5,16,1)
(23,28,1)
(17,10,1)
(2,23,1)
(5,6,1)
(16,24,1)
(2,28,2)
(23,28,2)
(15,28,2)
(17,28,2)
(10,28,2)
(5,16,2)
(20,0,2)
(27,28,2)
(26,28,2)
(27,20,2)
-----------------------------------
(0,dataBuffer[100] = COMMAND_ARG2)
(1,_P_WAIT)
(2,"*.*")
(3,case 6:)
(4,args)
(5,_spawnvp(_P_WAIT, COMMAND_INT, args)
(6,args)
(7,)
(8,default:)
(9,dataBuffer)
(10,"Benign, fixed string")
(11,dataBuffer)
(12,COMMAND_ARG2)
(13,RET)
(14,COMMAND_INT)
(15,break;)
(16,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(17,printLine("Benign, fixed string")
(18,data)
(19,)
(20,data = dataBuffer)
(21,)
(22,data)
(23,data)
(24,args)
(25,dataBuffer)
(26,break;)
(27,strcat(data, "*.*")
(28,5)
(29,switch(5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
