-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        wchar_t * data = *dataPtr1;
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* wexecl - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
71,72
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
84,85
86,87
87,88
87,89
87,90
87,91
87,92
87,93
88,89
90,91
92,93
94,95
96,97
98,99
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,67,72,74,78,80,81,85,89,91,93,95,97,99
-----computeFrom-----
45,46
45,47
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* wexecl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* wexecl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* wexecl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(28,8,0)
(37,9,0)
(2,41,0)
(0,11,0)
(0,18,0)
(9,34,0)
(19,24,0)
(36,34,0)
(14,15,0)
(15,7,0)
(38,18,0)
(23,9,0)
(41,34,0)
(22,18,0)
(27,1,0)
(16,7,0)
(18,29,0)
(11,0,0)
(39,18,0)
(31,24,0)
(24,8,0)
(13,0,0)
(1,33,0)
(21,29,0)
(34,29,0)
(1,29,0)
(5,33,0)
(6,39,0)
(8,29,0)
(40,29,0)
(33,1,0)
(25,9,0)
(32,1,0)
(39,15,0)
(27,41,0)
(24,29,0)
(7,29,0)
(4,8,0)
(30,9,0)
(3,9,0)
(15,11,0)
(12,11,0)
(11,7,0)
(17,27,0)
(18,38,0)
(41,27,0)
(20,38,0)
(10,29,0)
(35,29,0)
(4,28,1)
(15,14,1)
(20,22,1)
(32,18,1)
(6,11,1)
(28,1,1)
(0,13,1)
(14,39,1)
(19,8,1)
(8,4,1)
(37,3,1)
(27,1,1)
(1,33,1)
(24,8,1)
(2,15,1)
(9,37,1)
(0,18,1)
(24,31,1)
(31,19,1)
(5,32,1)
(13,12,1)
(12,24,1)
(38,20,1)
(30,25,1)
(33,5,1)
(41,27,1)
(39,18,1)
(17,2,1)
(23,41,1)
(25,23,1)
(15,11,1)
(18,38,1)
(39,6,1)
(3,30,1)
(27,17,1)
(26,9,1)
(11,0,1)
(0,18,2)
(15,11,2)
(41,27,2)
(27,1,2)
(11,0,2)
(24,8,2)
(18,38,2)
(1,33,2)
(39,18,2)
-----------------------------------
(0,*dataPtr1)
(1,* *dataPtr2 = &data)
(2,data)
(3,COMMAND_ARG3)
(4,COMMAND_ARG2)
(5,data)
(6,dataPtr1)
(7,)
(8,dataBuffer[100] = COMMAND_ARG2)
(9,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(10,data)
(11,* data = *dataPtr1)
(12,data)
(13,dataPtr1)
(14,data)
(15,*dataPtr1 = data)
(16,data)
(17,dataPtr2)
(18,* *dataPtr1 = &data)
(19,data)
(20,data)
(21,dataPtr2)
(22,dataPtr1)
(23,COMMAND_INT_PATH)
(24,data = dataBuffer)
(25,COMMAND_INT_PATH)
(26,RET)
(27,*dataPtr2)
(28,dataBuffer)
(29,)
(30,COMMAND_ARG1)
(31,dataBuffer)
(32,dataPtr2)
(33,&data)
(34,)
(35,dataBuffer)
(36,data)
(37,NULL)
(38,&data)
(39,*dataPtr1)
(40,dataPtr1)
(41,* data = *dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
