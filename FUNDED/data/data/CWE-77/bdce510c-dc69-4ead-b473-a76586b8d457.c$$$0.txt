-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execv_64_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execv_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execv_64_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_execv_64_bad()
CWE78_OS_Command_Injection__char_console_w32_execv_64_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execv_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_execv_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_execv_64b_badSink
CWE78_OS_Command_Injection__char_console_w32_execv_64b_badSink
&data
data
data
-----joern-----
(9,30,0)
(63,54,0)
(1,60,0)
(33,43,0)
(55,16,0)
(3,25,0)
(31,62,0)
(68,17,0)
(69,56,0)
(13,62,0)
(38,55,0)
(53,51,0)
(29,44,0)
(65,62,0)
(44,29,0)
(36,43,0)
(57,51,0)
(4,16,0)
(70,43,0)
(35,62,0)
(67,38,0)
(54,63,0)
(12,48,0)
(52,70,0)
(25,53,0)
(25,3,0)
(51,53,0)
(32,3,0)
(40,48,0)
(53,17,0)
(26,49,0)
(42,7,0)
(31,34,0)
(31,54,0)
(2,35,0)
(62,70,0)
(54,31,0)
(35,38,0)
(62,43,0)
(7,38,0)
(44,62,0)
(35,53,0)
(55,38,0)
(30,62,0)
(55,64,0)
(66,31,0)
(28,12,0)
(64,55,0)
(34,19,0)
(5,25,0)
(21,62,0)
(12,62,0)
(34,31,0)
(16,53,0)
(47,17,0)
(16,55,0)
(48,49,0)
(18,16,0)
(71,19,0)
(6,24,0)
(17,43,0)
(29,43,0)
(41,25,0)
(38,35,0)
(59,34,0)
(56,10,0)
(38,7,0)
(11,65,0)
(20,70,0)
(19,30,0)
(65,71,0)
(14,12,0)
(60,19,0)
(22,26,0)
(58,71,0)
(51,62,0)
(46,19,0)
(61,60,0)
(63,60,0)
(30,19,0)
(27,54,0)
(50,35,0)
(8,34,0)
(45,44,0)
(15,53,0)
(0,37,0)
(19,24,0)
(23,71,0)
(60,63,0)
(65,56,0)
(12,53,0)
(71,65,0)
(23,11,1)
(31,34,1)
(12,53,1)
(62,21,1)
(48,40,1)
(38,35,1)
(5,53,1)
(35,62,1)
(29,44,1)
(71,58,1)
(63,54,1)
(19,30,1)
(15,62,1)
(35,50,1)
(18,4,1)
(60,1,1)
(14,26,1)
(67,55,1)
(51,62,1)
(46,7,1)
(30,62,1)
(39,29,1)
(16,53,1)
(35,53,1)
(27,31,1)
(12,28,1)
(65,71,1)
(53,51,1)
(31,62,1)
(61,19,1)
(70,20,1)
(3,25,1)
(16,18,1)
(45,3,1)
(25,53,1)
(45,63,1)
(3,32,1)
(57,15,1)
(34,19,1)
(63,60,1)
(1,61,1)
(2,3,1)
(69,65,1)
(22,7,1)
(32,25,1)
(8,59,1)
(58,23,1)
(7,42,1)
(20,52,1)
(34,8,1)
(56,69,1)
(65,62,1)
(44,62,1)
(44,45,1)
(11,63,1)
(54,27,1)
(71,19,1)
(21,13,1)
(30,9,1)
(9,46,1)
(50,2,1)
(41,5,1)
(66,60,1)
(40,12,1)
(54,31,1)
(4,35,1)
(60,19,1)
(26,22,1)
(62,70,1)
(38,67,1)
(38,55,1)
(25,41,1)
(13,70,1)
(45,56,1)
(42,38,1)
(51,57,1)
(12,62,1)
(59,66,1)
(55,64,1)
(28,14,1)
(7,38,1)
(45,48,1)
(55,16,1)
(35,3,2)
(51,62,2)
(8,60,2)
(38,35,2)
(56,63,2)
(54,60,2)
(55,16,2)
(63,7,2)
(60,19,2)
(50,3,2)
(54,31,2)
(60,7,2)
(65,63,2)
(48,7,2)
(12,53,2)
(63,60,2)
(2,3,2)
(3,25,2)
(42,3,2)
(31,62,2)
(30,62,2)
(14,7,2)
(1,7,2)
(55,64,2)
(28,7,2)
(46,7,2)
(27,60,2)
(38,3,2)
(7,3,2)
(23,63,2)
(18,3,2)
(63,54,2)
(26,7,2)
(66,60,2)
(61,7,2)
(40,7,2)
(69,63,2)
(44,62,2)
(67,3,2)
(71,19,2)
(16,3,2)
(22,7,2)
(19,30,2)
(71,63,2)
(9,7,2)
(65,71,2)
(31,60,2)
(16,53,2)
(29,44,2)
(30,7,2)
(53,51,2)
(55,3,2)
(11,63,2)
(35,62,2)
(7,38,2)
(34,19,2)
(58,63,2)
(34,60,2)
(35,53,2)
(31,34,2)
(62,70,2)
(59,60,2)
(38,55,2)
(4,3,2)
(19,7,2)
(25,53,2)
(65,62,2)
(12,7,2)
(12,62,2)
-----------------------------------
(0,if (fgets(data+dataLen, (int)
(1,0)
(2,data)
(3,100-dataLen > 1)
(4,100)
(5,100)
(6,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(7,fgets(data+dataLen, (int)
(8,1)
(9,data)
(10,)
(11,data)
(12,data[dataLen])
(13,data)
(14,data)
(15,dataLen)
(16,100-dataLen)
(17,)
(18,dataLen)
(19,dataLen = strlen(data)
(20,COMMAND_ARG2)
(21,dataBuffer)
(22,"fgets()
(23,dataLen)
(24,)
(25,100-dataLen)
(26,printLine("fgets()
(27,\\\'\\\\n\\\')
(28,dataLen)
(29,CWE78_OS_Command_Injection__char_console_w32_execv_64b_badSink(&data)
(30,strlen(data)
(31,data[dataLen-1])
(32,1)
(33,data)
(34,dataLen-1)
(35,data+dataLen)
(36,dataBuffer)
(37,)
(38,fgets(data+dataLen, (int)
(39,RET)
(40,\\\'\\\\0\\\')
(41,dataLen)
(42,NULL)
(43,)
(44,&data)
(45,data)
(46,dataLen)
(47,if (100-dataLen > 1)
(48,data[dataLen] = \\\'\\\\0\\\')
(49,)
(50,dataLen)
(51,strlen(data)
(52,dataBuffer)
(53,dataLen = strlen(data)
(54,data[dataLen-1] == \\\'\\\\n\\\')
(55,(int)
(56,data[dataLen-1] = \\\'\\\\0\\\')
(57,data)
(58,1)
(59,dataLen)
(60,dataLen > 0)
(61,dataLen)
(62,data = dataBuffer)
(63,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(64,int)
(65,data[dataLen-1])
(66,data)
(67,stdin)
(68,dataLen)
(69,\\\'\\\\0\\\')
(70,dataBuffer[100] = COMMAND_ARG2)
(71,dataLen-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
