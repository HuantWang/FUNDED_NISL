-----label-----
0
-----code-----
static void goodG2B1()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(5!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
29,31
32,33
33,34
34,35
34,36
35,36
38,39
39,40
40,41
40,42
40,43
41,42
43,44
46,47
46,48
47,48
47,49
48,49
48,50
49,50
51,52
54,55
54,56
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,31,36,37,42,44,45,50,52,53,58,59,63,64
-----computeFrom-----
23,24
23,25
29,30
29,31
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(5!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
5!=5
5
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(25,22,0)
(26,1,0)
(8,12,0)
(4,21,0)
(17,16,0)
(23,16,0)
(5,16,0)
(0,16,0)
(18,22,0)
(21,11,0)
(13,18,0)
(9,19,0)
(20,16,0)
(7,14,0)
(12,16,0)
(24,1,0)
(2,12,0)
(14,19,0)
(22,5,0)
(10,9,0)
(5,12,0)
(15,5,0)
(22,18,0)
(6,5,0)
(2,8,1)
(18,13,1)
(22,5,1)
(15,12,1)
(3,18,1)
(5,12,1)
(13,22,1)
(18,22,1)
(12,2,1)
(26,5,1)
(24,26,1)
(3,9,1)
(4,1,1)
(5,6,1)
(9,10,1)
(1,24,1)
(25,1,1)
(21,4,1)
(25,21,1)
(6,15,1)
(14,7,1)
(22,25,1)
(7,18,1)
(10,14,1)
(9,18,2)
(18,22,2)
(14,18,2)
(21,1,2)
(22,5,2)
(10,18,2)
(5,12,2)
(4,1,2)
(7,18,2)
-----------------------------------
(0,if(5!=5)
(1,5!=5)
(2,FULL_COMMAND)
(3,RET)
(4,"Benign, fixed string")
(5,data = data_buf)
(6,data_buf)
(7,"command execution failed!")
(8,data_buf)
(9,exit(1)
(10,1)
(11,)
(12,data_buf[100] = FULL_COMMAND)
(13,0)
(14,printLine("command execution failed!")
(15,data)
(16,)
(17,data_buf)
(18,SYSTEM(data)
(19,)
(20,data)
(21,printLine("Benign, fixed string")
(22,SYSTEM(data)
(23,if (SYSTEM(data)
(24,5)
(25,data)
(26,5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
