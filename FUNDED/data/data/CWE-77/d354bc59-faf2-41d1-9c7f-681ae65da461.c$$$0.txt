-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    /* FIX: Append a fixed string to data (not user / external input) */
    wcscat(data, L"*.*");
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* wexeclp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
35,38
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
54,55
55,56
55,57
55,58
55,59
55,60
55,61
56,57
58,59
60,61
62,63
64,65
66,67
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,38,40,41,44,47,49,50,53,57,59,61,63,65,67
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* wexeclp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* wexeclp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* wexeclp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECLP
EXECLP
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(20,21,0)
(3,21,0)
(9,11,0)
(23,20,0)
(14,13,0)
(21,12,0)
(15,19,0)
(6,21,0)
(11,21,0)
(5,12,0)
(22,20,0)
(13,11,0)
(4,20,0)
(18,10,0)
(19,10,0)
(11,19,0)
(16,19,0)
(10,12,0)
(7,20,0)
(24,13,0)
(8,12,0)
(2,20,0)
(19,12,0)
(0,11,0)
(1,10,0)
(13,21,0)
(10,1,1)
(0,9,1)
(20,23,1)
(19,16,1)
(11,0,1)
(13,14,1)
(19,10,1)
(14,24,1)
(11,19,1)
(4,13,1)
(24,11,1)
(13,11,1)
(15,10,1)
(7,22,1)
(16,15,1)
(23,7,1)
(9,19,1)
(22,2,1)
(1,18,1)
(2,4,1)
(17,20,1)
(13,11,2)
(11,19,2)
(19,10,2)
-----------------------------------
(0,data)
(1,COMMAND_ARG2)
(2,COMMAND_INT)
(3,data)
(4,COMMAND_INT)
(5,data)
(6,dataCopy)
(7,COMMAND_ARG3)
(8,dataBuffer)
(9,dataCopy)
(10,dataBuffer[100] = COMMAND_ARG2)
(11,* dataCopy = data)
(12,)
(13,* data = dataCopy)
(14,dataCopy)
(15,data)
(16,dataBuffer)
(17,RET)
(18,dataBuffer)
(19,data = dataBuffer)
(20,EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(21,)
(22,COMMAND_ARG1)
(23,NULL)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
