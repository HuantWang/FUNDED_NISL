-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    /* FIX: Append a fixed string to data (not user / external input) */
    wcscat(data, L"*.*");
    {
        wchar_t * dataCopy = data;
        wchar_t * data = dataCopy;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
35,38
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
54,55
54,56
55,56
55,57
56,57
56,58
57,58
59,60
62,63
62,64
63,64
64,65
64,66
65,66
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,38,40,41,44,47,49,50,53,58,60,61,66,67,71,72
-----computeFrom-----
23,24
23,25
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    {        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
{        wchar_t * dataCopy = data;        wchar_t * data = dataCopy;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
wchar_t * dataCopy = data;
wchar_t * dataCopy = data;
wchar_t
* dataCopy = data
*
dataCopy
= data
data
data
wchar_t * data = dataCopy;
wchar_t * data = dataCopy;
wchar_t
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(5,0,0)
(22,0,0)
(28,18,0)
(4,20,0)
(9,3,0)
(2,23,0)
(27,9,0)
(16,24,0)
(17,9,0)
(13,8,0)
(4,3,0)
(14,9,0)
(26,3,0)
(20,3,0)
(11,23,0)
(0,9,0)
(22,8,0)
(23,4,0)
(19,3,0)
(7,4,0)
(23,9,0)
(25,22,0)
(10,20,0)
(0,23,0)
(1,0,0)
(6,20,0)
(8,22,0)
(18,24,0)
(21,16,0)
(15,4,0)
(11,2,1)
(8,13,1)
(28,16,1)
(15,7,1)
(21,8,1)
(4,15,1)
(0,5,1)
(22,0,1)
(8,22,1)
(5,1,1)
(22,25,1)
(25,0,1)
(4,20,1)
(12,18,1)
(0,23,1)
(10,6,1)
(7,20,1)
(16,21,1)
(18,28,1)
(12,8,1)
(1,23,1)
(20,10,1)
(2,4,1)
(13,22,1)
(23,4,1)
(23,11,1)
(22,0,2)
(8,22,2)
(4,20,2)
(0,23,2)
(18,8,2)
(21,8,2)
(28,8,2)
(23,4,2)
(16,8,2)
-----------------------------------
(0,* data = dataCopy)
(1,data)
(2,dataCopy)
(3,)
(4,data = data_buf)
(5,dataCopy)
(6,data_buf)
(7,data)
(8,SYSTEM(data)
(9,)
(10,FULL_COMMAND)
(11,data)
(12,RET)
(13,0)
(14,if (SYSTEM(data)
(15,data_buf)
(16,printLine("command execution failed!")
(17,data)
(18,exit(1)
(19,data)
(20,data_buf[100] = FULL_COMMAND)
(21,"command execution failed!")
(22,SYSTEM(data)
(23,* dataCopy = data)
(24,)
(25,data)
(26,data_buf)
(27,dataCopy)
(28,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
