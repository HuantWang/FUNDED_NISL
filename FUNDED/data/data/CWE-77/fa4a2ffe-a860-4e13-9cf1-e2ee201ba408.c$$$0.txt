-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    switch(6)
    {
    case 6:
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, L"w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
34,35
34,36
34,37
35,36
37,38
42,43
43,44
43,45
44,45
48,49
48,50
48,51
49,50
50,51
50,52
51,52
53,54
53,55
56,57
57,58
57,59
58,59
60,61
60,62
60,63
61,62
63,64
66,67
66,68
67,68
67,69
68,69
70,71
72,73
73,74
74,75
74,76
75,76
77,78
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,36,38,39,40,41,45,46,47,52,54,55,59,62,64,65,69,71,76,78
-----computeFrom-----
23,24
23,25
57,58
57,59
67,68
67,69
-----guardedBy-----
69,78
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, L"w");
pipe = POPEN(data, L"w")
pipe
pipe
POPEN(data, L"w")
POPEN
POPEN
data
data
L"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(24,2,0)
(15,21,0)
(26,18,0)
(18,21,0)
(9,1,0)
(11,4,0)
(0,8,0)
(3,21,0)
(22,21,0)
(27,21,0)
(20,15,0)
(17,1,0)
(25,18,0)
(13,8,0)
(19,15,0)
(7,2,0)
(15,18,0)
(8,21,0)
(6,2,0)
(10,6,0)
(12,2,0)
(5,2,0)
(4,23,0)
(7,6,1)
(20,19,1)
(14,4,1)
(17,7,1)
(16,15,1)
(19,18,1)
(11,1,1)
(1,9,1)
(5,16,1)
(15,18,1)
(4,11,1)
(14,1,1)
(15,20,1)
(17,5,1)
(10,16,1)
(9,17,1)
(25,26,1)
(6,10,1)
(18,25,1)
(4,1,2)
(6,16,2)
(7,16,2)
(10,16,2)
(11,1,2)
(15,18,2)
(5,16,2)
-----------------------------------
(0,pipe)
(1,pipe != NULL)
(2,)
(3,switch(6)
(4,PCLOSE(pipe)
(5,break;)
(6,printLine("Benign, fixed string")
(7,break;)
(8,)
(9,NULL)
(10,"Benign, fixed string")
(11,pipe)
(12,default:)
(13,if (pipe != NULL)
(14,RET)
(15,data = data_buf)
(16,6)
(17,pipe)
(18,data_buf[100] = FULL_COMMAND)
(19,data)
(20,data_buf)
(21,)
(22,data_buf)
(23,)
(24,case 6:)
(25,FULL_COMMAND)
(26,data_buf)
(27,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
