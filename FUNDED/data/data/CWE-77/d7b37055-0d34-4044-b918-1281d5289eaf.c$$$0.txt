-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_64_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32spawnl_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_64_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32spawnl_64_bad()
CWE78_OS_Command_Injection__char_console_w32spawnl_64_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32spawnl_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32spawnl_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32spawnl_64b_badSink
CWE78_OS_Command_Injection__char_console_w32spawnl_64b_badSink
&data
data
data
-----joern-----
(10,57,0)
(24,19,0)
(71,68,0)
(3,30,0)
(6,19,0)
(19,20,0)
(64,62,0)
(33,40,0)
(63,41,0)
(36,37,0)
(45,17,0)
(0,64,0)
(55,19,0)
(67,52,0)
(24,5,0)
(24,43,0)
(52,43,0)
(11,26,0)
(13,40,0)
(64,40,0)
(25,32,0)
(39,42,0)
(40,19,0)
(37,64,0)
(50,71,0)
(32,6,0)
(6,32,0)
(35,60,0)
(17,2,0)
(31,24,0)
(7,10,0)
(69,2,0)
(6,42,0)
(21,29,0)
(62,64,0)
(37,36,0)
(37,52,0)
(4,6,0)
(22,15,0)
(40,43,0)
(53,46,0)
(44,52,0)
(9,42,0)
(16,30,0)
(51,60,0)
(38,60,0)
(19,60,0)
(42,2,0)
(49,17,0)
(35,15,0)
(30,16,0)
(66,24,0)
(54,55,0)
(1,20,0)
(70,43,0)
(26,43,0)
(20,60,0)
(28,19,0)
(42,6,0)
(5,68,0)
(52,37,0)
(8,38,0)
(28,17,0)
(43,26,0)
(43,38,0)
(47,5,0)
(12,60,0)
(15,35,0)
(17,28,0)
(15,19,0)
(32,25,0)
(59,19,0)
(64,37,0)
(18,20,0)
(58,19,0)
(29,2,0)
(27,38,0)
(40,64,0)
(55,2,0)
(48,32,0)
(26,19,0)
(29,25,0)
(56,16,0)
(28,10,0)
(2,46,0)
(14,62,0)
(23,28,0)
(25,29,0)
(30,43,0)
(2,55,0)
(61,30,0)
(34,29,0)
(56,30,1)
(29,34,1)
(6,19,1)
(19,20,1)
(11,70,1)
(30,61,1)
(49,23,1)
(67,44,1)
(15,22,1)
(47,24,1)
(16,56,1)
(40,43,1)
(24,43,1)
(24,31,1)
(7,28,1)
(65,35,1)
(62,14,1)
(52,67,1)
(62,64,1)
(6,42,1)
(22,16,1)
(20,18,1)
(45,49,1)
(42,2,1)
(64,37,1)
(22,5,1)
(69,62,1)
(70,19,1)
(31,66,1)
(0,37,1)
(17,45,1)
(28,19,1)
(29,2,1)
(24,19,1)
(14,64,1)
(32,6,1)
(18,1,1)
(10,7,1)
(2,55,1)
(37,36,1)
(66,71,1)
(25,32,1)
(52,43,1)
(17,2,1)
(32,48,1)
(54,69,1)
(64,0,1)
(19,58,1)
(23,25,1)
(22,25,1)
(35,15,1)
(21,2,1)
(48,6,1)
(44,40,1)
(26,11,1)
(43,26,1)
(55,54,1)
(26,19,1)
(50,62,1)
(39,4,1)
(33,13,1)
(40,19,1)
(64,40,1)
(37,52,1)
(34,21,1)
(4,29,1)
(25,29,1)
(13,16,1)
(42,9,1)
(22,10,1)
(58,59,1)
(30,43,1)
(16,30,1)
(28,17,1)
(9,39,1)
(15,19,1)
(61,3,1)
(5,47,1)
(59,20,1)
(55,19,1)
(71,50,1)
(3,43,1)
(40,33,1)
(16,30,2)
(55,19,2)
(26,19,2)
(14,16,2)
(40,19,2)
(42,29,2)
(64,40,2)
(62,64,2)
(6,42,2)
(29,62,2)
(40,16,2)
(21,62,2)
(34,62,2)
(25,62,2)
(2,55,2)
(45,25,2)
(52,43,2)
(48,29,2)
(28,19,2)
(37,36,2)
(62,16,2)
(28,17,2)
(28,25,2)
(0,16,2)
(6,19,2)
(52,16,2)
(30,43,2)
(9,29,2)
(25,32,2)
(43,26,2)
(64,16,2)
(32,6,2)
(64,37,2)
(67,16,2)
(31,62,2)
(17,25,2)
(40,43,2)
(24,62,2)
(50,62,2)
(19,20,2)
(29,2,2)
(2,62,2)
(39,29,2)
(24,43,2)
(54,62,2)
(66,62,2)
(37,52,2)
(24,19,2)
(6,29,2)
(23,25,2)
(7,25,2)
(10,25,2)
(17,2,2)
(15,19,2)
(37,16,2)
(5,62,2)
(69,62,2)
(49,25,2)
(4,29,2)
(32,29,2)
(25,29,2)
(35,15,2)
(47,62,2)
(71,62,2)
(44,16,2)
(13,16,2)
(42,2,2)
(55,62,2)
(33,16,2)
-----------------------------------
(0,stdin)
(1,dataBuffer)
(2,dataLen = strlen(data)
(3,100)
(4,data)
(5,data[dataLen] = \\\'\\\\0\\\')
(6,data[dataLen-1])
(7,\\\'\\\\0\\\')
(8,dataLen)
(9,1)
(10,data[dataLen-1] = \\\'\\\\0\\\')
(11,data)
(12,data)
(13,data)
(14,NULL)
(15,&data)
(16,100-dataLen > 1)
(17,dataLen-1)
(18,COMMAND_ARG2)
(19,data = dataBuffer)
(20,dataBuffer[100] = COMMAND_ARG2)
(21,dataLen)
(22,data)
(23,data)
(24,data[dataLen])
(25,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(26,strlen(data)
(27,if (100-dataLen > 1)
(28,data[dataLen-1])
(29,dataLen > 0)
(30,100-dataLen)
(31,dataLen)
(32,data[dataLen-1] == \\\'\\\\n\\\')
(33,dataLen)
(34,0)
(35,CWE78_OS_Command_Injection__char_console_w32spawnl_64b_badSink(&data)
(36,int)
(37,(int)
(38,)
(39,dataLen)
(40,data+dataLen)
(41,)
(42,dataLen-1)
(43,dataLen = strlen(data)
(44,100)
(45,1)
(46,)
(47,\\\'\\\\0\\\')
(48,\\\'\\\\n\\\')
(49,dataLen)
(50,"fgets()
(51,dataBuffer)
(52,100-dataLen)
(53,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(54,data)
(55,strlen(data)
(56,1)
(57,)
(58,dataBuffer)
(59,data)
(60,)
(61,dataLen)
(62,fgets(data+dataLen, (int)
(63,if (fgets(data+dataLen, (int)
(64,fgets(data+dataLen, (int)
(65,RET)
(66,data)
(67,dataLen)
(68,)
(69,dataLen)
(70,dataLen)
(71,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
