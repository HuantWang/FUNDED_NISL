-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_51_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_popen_51b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_51_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_51b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_popen_51_bad()
CWE78_OS_Command_Injection__char_console_popen_51_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_51b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_popen_51b_badSink(data);
CWE78_OS_Command_Injection__char_console_popen_51b_badSink(data)
CWE78_OS_Command_Injection__char_console_popen_51b_badSink
CWE78_OS_Command_Injection__char_console_popen_51b_badSink
data
data
-----joern-----
(53,59,0)
(18,8,0)
(9,47,0)
(48,33,0)
(57,55,0)
(69,52,0)
(44,8,0)
(62,44,0)
(5,27,0)
(53,60,0)
(50,47,0)
(11,23,0)
(60,53,0)
(18,23,0)
(69,41,0)
(56,43,0)
(39,35,0)
(16,8,0)
(17,55,0)
(52,69,0)
(51,47,0)
(56,32,0)
(40,8,0)
(34,35,0)
(31,56,0)
(37,59,0)
(8,4,0)
(42,4,0)
(32,56,0)
(25,51,0)
(1,43,0)
(67,18,0)
(53,8,0)
(46,64,0)
(24,47,0)
(54,42,0)
(6,36,0)
(32,8,0)
(41,8,0)
(14,53,0)
(55,47,0)
(58,27,0)
(51,48,0)
(47,24,0)
(22,31,0)
(9,33,0)
(59,68,0)
(10,55,0)
(3,9,0)
(70,41,0)
(18,47,0)
(63,48,0)
(29,4,0)
(26,42,0)
(23,66,0)
(52,35,0)
(35,56,0)
(45,69,0)
(28,13,0)
(61,57,0)
(8,42,0)
(41,31,0)
(15,33,0)
(31,41,0)
(44,4,0)
(33,48,0)
(48,51,0)
(21,56,0)
(12,18,0)
(24,8,0)
(2,60,0)
(36,48,0)
(0,60,0)
(41,69,0)
(19,9,0)
(65,4,0)
(48,36,0)
(51,8,0)
(27,4,0)
(35,52,0)
(33,9,0)
(49,24,0)
(33,15,0)
(55,57,0)
(38,51,0)
(20,31,0)
(60,56,0)
(13,66,0)
(47,27,0)
(7,32,0)
(8,42,1)
(8,16,1)
(38,57,1)
(7,21,1)
(53,60,1)
(51,8,1)
(55,47,1)
(36,48,1)
(59,37,1)
(35,56,1)
(32,8,1)
(11,18,1)
(21,36,1)
(13,28,1)
(62,59,1)
(49,50,1)
(6,48,1)
(52,69,1)
(62,52,1)
(30,44,1)
(48,63,1)
(33,15,1)
(35,34,1)
(9,47,1)
(18,12,1)
(62,57,1)
(10,17,1)
(51,25,1)
(17,47,1)
(39,56,1)
(48,51,1)
(16,40,1)
(3,51,1)
(55,10,1)
(19,3,1)
(41,31,1)
(50,8,1)
(70,35,1)
(23,11,1)
(42,26,1)
(26,54,1)
(31,22,1)
(33,9,1)
(52,35,1)
(56,32,1)
(57,61,1)
(18,47,1)
(2,14,1)
(60,0,1)
(57,55,1)
(62,23,1)
(34,39,1)
(48,33,1)
(32,7,1)
(40,42,1)
(61,55,1)
(36,6,1)
(53,8,1)
(0,2,1)
(45,41,1)
(51,47,1)
(69,41,1)
(69,45,1)
(47,24,1)
(44,62,1)
(20,70,1)
(9,19,1)
(41,8,1)
(28,36,1)
(25,38,1)
(44,8,1)
(18,8,1)
(14,52,1)
(24,49,1)
(22,20,1)
(63,33,1)
(67,13,1)
(12,67,1)
(31,56,1)
(37,53,1)
(60,56,1)
(24,8,1)
(31,56,2)
(32,8,2)
(25,57,2)
(13,36,2)
(36,57,2)
(45,35,2)
(48,51,2)
(52,35,2)
(48,57,2)
(47,24,2)
(52,69,2)
(7,36,2)
(19,57,2)
(53,52,2)
(8,42,2)
(39,36,2)
(70,35,2)
(6,57,2)
(23,36,2)
(51,8,2)
(33,15,2)
(52,36,2)
(18,47,2)
(41,8,2)
(34,36,2)
(21,36,2)
(38,57,2)
(18,36,2)
(48,33,2)
(9,57,2)
(51,47,2)
(35,36,2)
(18,8,2)
(9,47,2)
(37,52,2)
(36,48,2)
(44,8,2)
(67,36,2)
(59,52,2)
(0,52,2)
(69,41,2)
(56,32,2)
(63,57,2)
(14,52,2)
(33,9,2)
(24,8,2)
(22,35,2)
(2,52,2)
(3,57,2)
(41,35,2)
(32,36,2)
(12,36,2)
(60,52,2)
(35,56,2)
(53,60,2)
(56,36,2)
(53,8,2)
(57,55,2)
(33,57,2)
(20,35,2)
(31,35,2)
(60,56,2)
(28,36,2)
(55,47,2)
(69,35,2)
(51,57,2)
(11,36,2)
(41,31,2)
-----------------------------------
(0,1)
(1,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(2,dataLen)
(3,100)
(4,)
(5,if (100-dataLen > 1)
(6,NULL)
(7,data)
(8,data = data_buf)
(9,100-dataLen)
(10,dataLen)
(11,\\\'\\\\0\\\')
(12,dataLen)
(13,printLine("fgets()
(14,data)
(15,int)
(16,data_buf)
(17,100)
(18,data[dataLen])
(19,dataLen)
(20,dataLen)
(21,dataLen)
(22,1)
(23,data[dataLen] = \\\'\\\\0\\\')
(24,strlen(data)
(25,dataLen)
(26,FULL_COMMAND)
(27,)
(28,"fgets()
(29,data)
(30,RET)
(31,dataLen-1)
(32,strlen(data)
(33,(int)
(34,0)
(35,dataLen > 0)
(36,fgets(data+dataLen, (int)
(37,\\\'\\\\0\\\')
(38,data)
(39,dataLen)
(40,data)
(41,data[dataLen-1])
(42,data_buf[100] = FULL_COMMAND)
(43,)
(44,CWE78_OS_Command_Injection__char_console_popen_51b_badSink(data)
(45,\\\'\\\\n\\\')
(46,if (fgets(data+dataLen, (int)
(47,dataLen = strlen(data)
(48,fgets(data+dataLen, (int)
(49,data)
(50,dataLen)
(51,data+dataLen)
(52,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(53,data[dataLen-1])
(54,data_buf)
(55,100-dataLen)
(56,dataLen = strlen(data)
(57,100-dataLen > 1)
(58,dataLen)
(59,data[dataLen-1] = \\\'\\\\0\\\')
(60,dataLen-1)
(61,1)
(62,data)
(63,stdin)
(64,)
(65,data_buf)
(66,)
(67,data)
(68,)
(69,data[dataLen-1] == \\\'\\\\n\\\')
(70,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
