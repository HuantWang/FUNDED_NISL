-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    goodG2B1Static = 0; /* false */
    data = goodG2B1Source(data);
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
30,31
33,34
34,35
34,36
35,36
37,38
37,39
38,39
40,41
42,43
42,44
42,45
43,44
44,45
44,46
45,46
47,48
47,49
50,51
51,52
51,53
52,53
54,55
54,56
54,57
55,56
57,58
60,61
60,62
61,62
61,63
62,63
64,65
66,67
67,68
68,69
68,70
69,70
71,72
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,36,39,41,46,48,49,53,56,58,59,63,65,70,72
-----computeFrom-----
23,24
23,25
29,30
29,31
34,35
34,36
51,52
51,53
61,62
61,63
-----guardedBy-----
63,72
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    goodG2B1Static = 0; /* false */    data = goodG2B1Source(data);    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    goodG2B1Static = 0; /* false */    data = goodG2B1Source(data);    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
goodG2B1Static = 0;
goodG2B1Static = 0
goodG2B1Static
goodG2B1Static
0
data = goodG2B1Source(data);
data = goodG2B1Source(data)
data
data
goodG2B1Source(data)
goodG2B1Source
goodG2B1Source
data
data
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(10,13,0)
(19,13,0)
(12,28,0)
(7,10,0)
(4,1,0)
(16,8,0)
(23,8,0)
(18,13,0)
(9,13,0)
(27,18,0)
(26,20,0)
(19,7,0)
(22,16,0)
(16,19,0)
(14,10,0)
(20,13,0)
(21,13,0)
(8,16,0)
(11,16,0)
(28,6,0)
(15,19,0)
(30,8,0)
(3,10,0)
(10,1,0)
(28,8,0)
(24,20,0)
(29,18,0)
(0,1,0)
(2,30,0)
(25,30,0)
(8,20,0)
(7,19,0)
(1,13,0)
(17,7,0)
(29,10,1)
(25,2,1)
(1,4,1)
(16,11,1)
(5,28,1)
(27,29,1)
(17,15,1)
(16,19,1)
(2,8,1)
(7,10,1)
(3,14,1)
(19,7,1)
(12,30,1)
(8,16,1)
(4,0,1)
(18,27,1)
(5,30,1)
(30,8,1)
(11,22,1)
(28,12,1)
(15,18,1)
(14,1,1)
(10,1,1)
(23,19,1)
(10,3,1)
(30,25,1)
(28,8,1)
(22,23,1)
(7,17,1)
(30,8,2)
(16,19,2)
(8,16,2)
(19,7,2)
(12,30,2)
(7,10,2)
(10,1,2)
(28,30,2)
(28,8,2)
-----------------------------------
(0,data_buf)
(1,data_buf[100] = FULL_COMMAND)
(2,pipe)
(3,data_buf)
(4,FULL_COMMAND)
(5,RET)
(6,)
(7,goodG2B1Source(data)
(8,pipe = POPEN(data, "w")
(9,data_buf)
(10,data = data_buf)
(11,"w")
(12,pipe)
(13,)
(14,data)
(15,data)
(16,POPEN(data, "w")
(17,data)
(18,goodG2B1Static = 0)
(19,data = goodG2B1Source(data)
(20,)
(21,data)
(22,data)
(23,pipe)
(24,pipe)
(25,NULL)
(26,if (pipe != NULL)
(27,0)
(28,PCLOSE(pipe)
(29,goodG2B1Static)
(30,pipe != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
