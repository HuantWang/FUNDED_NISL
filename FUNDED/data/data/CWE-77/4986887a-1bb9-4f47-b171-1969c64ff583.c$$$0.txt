-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_execvp_12_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrueOrFalse())
    {
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECVP(COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
66,69
66,70
67,68
69,70
69,71
70,71
72,73
74,75
76,77
76,78
77,78
77,79
79,80
82,83
83,84
84,85
84,86
84,87
85,86
87,88
90,91
90,92
91,92
92,93
92,94
94,95
94,96
94,97
94,98
98,99
99,100
99,101
99,102
99,103
100,101
102,103
104,105
106,107
108,109
109,110
109,111
109,112
110,111
112,113
114,115
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,37,39,43,45,48,50,51,55,57,61,63,68,71,73,75,78,80,81,86,88,89,93,95,96,97,101,103,105,107,111,113,115
-----computeFrom-----
23,24
23,25
59,60
59,61
69,70
69,71
76,77
76,78
77,78
77,79
-----guardedBy-----
61,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_execvp_12_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
void
CWE78_OS_Command_Injection__char_environment_w32_execvp_12_bad()
CWE78_OS_Command_Injection__char_environment_w32_execvp_12_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrueOrFalse())    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECVP(COMMAND_INT, args);
EXECVP(COMMAND_INT, args)
EXECVP
EXECVP
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(10,37,0)
(17,45,0)
(38,29,0)
(47,34,0)
(36,30,0)
(20,10,0)
(18,37,0)
(40,25,0)
(45,17,0)
(48,2,0)
(3,49,0)
(17,38,0)
(17,48,0)
(18,35,0)
(44,49,0)
(28,17,0)
(37,34,0)
(29,38,0)
(33,30,0)
(4,37,0)
(46,48,0)
(12,34,0)
(8,24,0)
(25,12,0)
(42,34,0)
(9,49,0)
(6,18,0)
(40,12,0)
(38,49,0)
(41,12,0)
(31,45,0)
(2,20,0)
(37,24,0)
(10,20,0)
(43,2,0)
(15,29,0)
(13,45,0)
(17,14,0)
(26,24,0)
(24,34,0)
(7,20,0)
(30,38,0)
(45,20,0)
(2,48,0)
(48,17,0)
(45,37,0)
(49,27,0)
(1,37,0)
(19,40,0)
(23,25,0)
(20,49,0)
(11,18,0)
(16,40,0)
(0,2,0)
(5,38,0)
(22,34,0)
(21,10,0)
(24,26,1)
(40,16,1)
(17,38,1)
(2,43,1)
(4,24,1)
(17,45,1)
(2,20,1)
(28,45,1)
(17,48,1)
(31,30,1)
(0,46,1)
(15,5,1)
(32,37,1)
(16,19,1)
(25,23,1)
(38,29,1)
(5,20,1)
(45,37,1)
(10,37,1)
(29,15,1)
(39,40,1)
(37,1,1)
(30,38,1)
(40,25,1)
(46,28,1)
(45,20,1)
(13,31,1)
(19,25,1)
(6,11,1)
(10,21,1)
(18,6,1)
(23,30,1)
(20,10,1)
(21,7,1)
(18,37,1)
(23,18,1)
(37,24,1)
(7,32,1)
(23,17,1)
(45,13,1)
(26,8,1)
(11,32,1)
(43,0,1)
(30,33,1)
(48,2,1)
(36,38,1)
(33,36,1)
(1,4,1)
(10,32,2)
(20,32,2)
(0,30,2)
(17,48,2)
(17,30,2)
(45,20,2)
(2,20,2)
(30,38,2)
(45,30,2)
(46,30,2)
(17,38,2)
(13,30,2)
(28,30,2)
(45,37,2)
(17,45,2)
(38,29,2)
(31,30,2)
(10,37,2)
(30,32,2)
(38,32,2)
(11,32,2)
(33,32,2)
(48,2,2)
(7,32,2)
(2,30,2)
(21,32,2)
(37,24,2)
(15,32,2)
(36,32,2)
(29,32,2)
(5,32,2)
(18,37,2)
(48,30,2)
(6,32,2)
(20,10,2)
(18,32,2)
(43,30,2)
(40,25,2)
-----------------------------------
(0,dataLen)
(1,dataBuffer)
(2,dataLen-1)
(3,dataLen)
(4,data)
(5,environment)
(6,"*.*")
(7,dataLen)
(8,dataBuffer)
(9,environment)
(10,strlen(data)
(11,data)
(12,)
(13,dataLen)
(14,)
(15,ENV_VARIABLE)
(16,args)
(17,strncat(data+dataLen, environment, 100-dataLen-1)
(18,strcat(data, "*.*")
(19,COMMAND_INT)
(20,dataLen = strlen(data)
(21,data)
(22,if(globalReturnsTrueOrFalse()
(23,args)
(24,dataBuffer[100] = COMMAND_ARG2)
(25,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(26,COMMAND_ARG2)
(27,)
(28,environment)
(29,GETENV(ENV_VARIABLE)
(30,environment != NULL)
(31,data)
(32,globalReturnsTrueOrFalse()
(33,NULL)
(34,)
(35,)
(36,environment)
(37,data = dataBuffer)
(38,* environment = GETENV(ENV_VARIABLE)
(39,RET)
(40,EXECVP(COMMAND_INT, args)
(41,args)
(42,data)
(43,1)
(44,if (environment != NULL)
(45,data+dataLen)
(46,100)
(47,dataBuffer)
(48,100-dataLen-1)
(49,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
