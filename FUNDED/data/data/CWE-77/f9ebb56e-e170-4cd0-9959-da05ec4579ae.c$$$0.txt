-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        wchar_t * data = *dataPtr1;
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
71,72
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
91,92
94,95
94,96
95,96
96,97
96,98
97,98
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,67,72,74,78,80,81,85,90,92,93,98,99,103,104
-----computeFrom-----
45,46
45,47
69,70
69,71
87,88
87,89
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(25,40,0)
(28,10,0)
(27,28,0)
(27,14,0)
(28,19,0)
(31,11,0)
(16,10,0)
(19,28,0)
(11,31,0)
(11,28,0)
(17,24,0)
(14,16,0)
(33,42,0)
(37,40,0)
(4,3,0)
(41,18,0)
(21,41,0)
(23,10,0)
(6,10,0)
(40,25,0)
(44,15,0)
(35,18,0)
(18,10,0)
(37,15,0)
(13,25,0)
(0,17,0)
(41,10,0)
(38,19,0)
(31,16,0)
(8,44,0)
(22,27,0)
(45,11,0)
(40,10,0)
(15,3,0)
(42,24,0)
(20,9,0)
(3,10,0)
(34,15,0)
(32,3,0)
(1,31,0)
(36,16,0)
(30,10,0)
(7,10,0)
(26,18,0)
(14,31,0)
(9,44,0)
(5,28,0)
(44,9,0)
(15,37,0)
(12,14,0)
(43,37,0)
(2,40,0)
(39,41,0)
(45,1,1)
(35,40,1)
(41,21,1)
(33,9,1)
(13,2,1)
(14,12,1)
(29,9,1)
(15,37,1)
(41,18,1)
(9,20,1)
(20,44,1)
(27,22,1)
(1,41,1)
(0,42,1)
(2,28,1)
(11,45,1)
(12,27,1)
(27,28,1)
(34,14,1)
(25,13,1)
(29,17,1)
(43,34,1)
(40,25,1)
(11,28,1)
(21,39,1)
(22,31,1)
(19,38,1)
(28,19,1)
(14,31,1)
(39,18,1)
(8,15,1)
(44,15,1)
(37,40,1)
(18,26,1)
(31,11,1)
(44,8,1)
(26,35,1)
(37,43,1)
(9,44,1)
(38,5,1)
(42,33,1)
(17,0,1)
(28,19,2)
(42,9,2)
(27,28,2)
(14,31,2)
(40,25,2)
(9,44,2)
(31,11,2)
(41,18,2)
(44,15,2)
(11,28,2)
(0,9,2)
(33,9,2)
(37,40,2)
(17,9,2)
(15,37,2)
-----------------------------------
(0,1)
(1,data)
(2,dataPtr2)
(3,)
(4,data)
(5,dataPtr1)
(6,dataPtr2)
(7,dataPtr1)
(8,data)
(9,SYSTEM(data)
(10,)
(11,*dataPtr1)
(12,data)
(13,data)
(14,*dataPtr1 = data)
(15,* data = *dataPtr2)
(16,)
(17,exit(1)
(18,data_buf[100] = FULL_COMMAND)
(19,&data)
(20,0)
(21,data_buf)
(22,dataPtr1)
(23,data_buf)
(24,)
(25,&data)
(26,FULL_COMMAND)
(27,*dataPtr1)
(28,* *dataPtr1 = &data)
(29,RET)
(30,data)
(31,* data = *dataPtr1)
(32,if (SYSTEM(data)
(33,"command execution failed!")
(34,data)
(35,data_buf)
(36,data)
(37,*dataPtr2)
(38,data)
(39,data)
(40,* *dataPtr2 = &data)
(41,data = data_buf)
(42,printLine("command execution failed!")
(43,dataPtr2)
(44,SYSTEM(data)
(45,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
