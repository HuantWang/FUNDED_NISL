-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
39,40
40,41
40,42
40,43
41,42
43,44
46,47
46,48
47,48
47,49
48,49
48,50
49,50
51,52
54,55
54,56
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,37,42,44,45,50,52,53,58,59,63,64
-----computeFrom-----
23,24
23,25
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalReturnsFalse()
globalReturnsFalse
globalReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(5,8,0)
(23,18,0)
(7,1,0)
(4,23,0)
(6,11,0)
(25,11,0)
(16,27,0)
(12,13,0)
(22,27,0)
(13,8,0)
(14,20,0)
(1,3,0)
(19,3,0)
(26,3,0)
(8,11,0)
(11,1,0)
(2,1,0)
(8,13,0)
(10,14,0)
(21,3,0)
(24,3,0)
(14,11,0)
(0,16,0)
(15,14,0)
(11,3,0)
(28,22,0)
(8,11,1)
(8,5,1)
(14,15,1)
(13,12,1)
(14,11,1)
(12,8,1)
(17,22,1)
(5,14,1)
(11,6,1)
(4,9,1)
(25,1,1)
(17,13,1)
(23,4,1)
(11,1,1)
(0,13,1)
(1,7,1)
(15,10,1)
(7,2,1)
(28,16,1)
(10,9,1)
(6,25,1)
(13,8,1)
(22,28,1)
(5,23,1)
(9,11,1)
(16,0,1)
(4,9,2)
(28,13,2)
(14,11,2)
(10,9,2)
(15,9,2)
(8,11,2)
(11,1,2)
(13,8,2)
(14,9,2)
(0,13,2)
(22,13,2)
(16,13,2)
(23,9,2)
-----------------------------------
(0,"command execution failed!")
(1,data_buf[100] = FULL_COMMAND)
(2,data_buf)
(3,)
(4,"Benign, fixed string")
(5,data)
(6,data_buf)
(7,FULL_COMMAND)
(8,SYSTEM(data)
(9,globalReturnsFalse()
(10,data)
(11,data = data_buf)
(12,0)
(13,SYSTEM(data)
(14,strcat(data, "*.*")
(15,"*.*")
(16,printLine("command execution failed!")
(17,RET)
(18,)
(19,if(globalReturnsFalse()
(20,)
(21,data_buf)
(22,exit(1)
(23,printLine("Benign, fixed string")
(24,if (SYSTEM(data)
(25,data)
(26,data)
(27,)
(28,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
