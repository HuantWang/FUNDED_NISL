-----label-----
0
-----code-----
static void goodG2B1()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(STATIC_CONST_FIVE!=5)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
29,31
30,31
33,34
34,35
35,36
35,37
36,37
39,40
40,41
41,42
41,43
41,44
42,43
44,45
47,48
47,49
48,49
48,50
49,50
49,51
50,51
52,53
55,56
55,57
56,57
57,58
57,59
58,59
61,62
62,63
62,64
63,64
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,38,43,45,46,51,53,54,59,60,64,65
-----computeFrom-----
23,24
23,25
29,30
29,31
48,49
48,50
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(STATIC_CONST_FIVE!=5)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
STATIC_CONST_FIVE!=5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(20,26,0)
(13,22,0)
(18,19,0)
(2,22,0)
(1,0,0)
(15,0,0)
(11,22,0)
(25,14,0)
(24,26,0)
(9,25,0)
(7,18,0)
(5,14,0)
(17,19,0)
(10,3,0)
(12,22,0)
(16,18,0)
(3,6,0)
(14,25,0)
(18,22,0)
(14,18,0)
(21,19,0)
(4,15,0)
(19,22,0)
(8,1,0)
(4,25,1)
(26,20,1)
(14,5,1)
(14,18,1)
(10,26,1)
(25,9,1)
(24,18,1)
(23,25,1)
(19,17,1)
(18,16,1)
(25,14,1)
(7,19,1)
(16,7,1)
(5,26,1)
(1,8,1)
(3,10,1)
(15,4,1)
(8,15,1)
(5,3,1)
(17,21,1)
(20,24,1)
(23,1,1)
(9,14,1)
(18,19,1)
(15,25,2)
(3,26,2)
(18,19,2)
(1,25,2)
(25,14,2)
(4,25,2)
(14,18,2)
(8,25,2)
(10,26,2)
-----------------------------------
(0,)
(1,exit(1)
(2,data_buf)
(3,printLine("Benign, fixed string")
(4,"command execution failed!")
(5,data)
(6,)
(7,data)
(8,1)
(9,0)
(10,"Benign, fixed string")
(11,data)
(12,if (SYSTEM(data)
(13,if(STATIC_CONST_FIVE!=5)
(14,SYSTEM(data)
(15,printLine("command execution failed!")
(16,data_buf)
(17,FULL_COMMAND)
(18,data = data_buf)
(19,data_buf[100] = FULL_COMMAND)
(20,5)
(21,data_buf)
(22,)
(23,RET)
(24,STATIC_CONST_FIVE)
(25,SYSTEM(data)
(26,STATIC_CONST_FIVE!=5)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
