-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execlp_63_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execlp_63_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_execlp_63_bad()
CWE78_OS_Command_Injection__char_console_execlp_63_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_execlp_63b_badSink
CWE78_OS_Command_Injection__char_console_execlp_63b_badSink
&data
data
data
-----joern-----
(14,53,0)
(49,10,0)
(7,5,0)
(71,17,0)
(32,23,0)
(60,68,0)
(30,15,0)
(67,30,0)
(32,5,0)
(11,25,0)
(50,32,0)
(30,23,0)
(23,21,0)
(39,21,0)
(37,11,0)
(68,17,0)
(53,23,0)
(11,5,0)
(55,18,0)
(46,53,0)
(20,43,0)
(51,3,0)
(63,23,0)
(18,15,0)
(41,23,0)
(16,32,0)
(5,64,0)
(3,24,0)
(57,5,0)
(4,16,0)
(25,10,0)
(42,64,0)
(41,18,0)
(44,57,0)
(43,20,0)
(23,47,0)
(58,15,0)
(29,45,0)
(71,23,0)
(28,60,0)
(22,41,0)
(45,13,0)
(6,64,0)
(27,25,0)
(47,21,0)
(36,18,0)
(48,7,0)
(62,58,0)
(3,5,0)
(5,7,0)
(38,24,0)
(19,16,0)
(17,68,0)
(70,11,0)
(43,57,0)
(57,43,0)
(14,21,0)
(59,23,0)
(43,16,0)
(56,54,0)
(34,5,0)
(16,4,0)
(2,15,0)
(41,45,0)
(58,71,0)
(8,35,0)
(52,58,0)
(26,60,0)
(31,4,0)
(1,49,0)
(33,71,0)
(64,21,0)
(60,15,0)
(12,17,0)
(16,43,0)
(24,3,0)
(65,3,0)
(7,23,0)
(53,14,0)
(66,57,0)
(32,16,0)
(9,47,0)
(61,21,0)
(17,71,0)
(40,47,0)
(71,58,0)
(11,23,0)
(15,54,0)
(0,32,0)
(68,60,0)
(15,30,0)
(18,41,0)
(4,31,1)
(36,22,1)
(71,23,1)
(15,30,1)
(50,0,1)
(41,23,1)
(3,5,1)
(28,15,1)
(48,34,1)
(31,16,1)
(68,60,1)
(67,2,1)
(46,45,1)
(17,71,1)
(33,60,1)
(3,51,1)
(51,65,1)
(55,36,1)
(68,17,1)
(2,4,1)
(30,23,1)
(38,3,1)
(7,48,1)
(29,41,1)
(32,50,1)
(4,16,1)
(16,43,1)
(58,52,1)
(58,15,1)
(63,59,1)
(16,19,1)
(62,33,1)
(18,55,1)
(60,15,1)
(23,47,1)
(11,23,1)
(60,26,1)
(71,58,1)
(53,23,1)
(43,20,1)
(22,68,1)
(7,23,1)
(34,23,1)
(70,37,1)
(23,63,1)
(69,14,1)
(44,66,1)
(53,46,1)
(43,57,1)
(57,5,1)
(11,70,1)
(16,32,1)
(45,29,1)
(0,24,1)
(24,38,1)
(59,47,1)
(11,5,1)
(5,7,1)
(12,71,1)
(17,12,1)
(47,40,1)
(46,25,1)
(46,68,1)
(30,67,1)
(32,23,1)
(27,11,1)
(19,43,1)
(65,5,1)
(25,27,1)
(37,49,1)
(26,28,1)
(40,9,1)
(49,1,1)
(46,24,1)
(52,62,1)
(41,18,1)
(32,5,1)
(18,15,1)
(1,4,1)
(66,32,1)
(14,53,1)
(24,3,1)
(57,44,1)
(18,15,2)
(4,16,2)
(28,4,2)
(30,23,2)
(52,60,2)
(17,60,2)
(57,5,2)
(68,4,2)
(7,23,2)
(41,68,2)
(44,24,2)
(60,15,2)
(22,68,2)
(30,4,2)
(11,5,2)
(68,17,2)
(17,71,2)
(29,68,2)
(24,3,2)
(26,4,2)
(67,4,2)
(33,60,2)
(16,24,2)
(32,5,2)
(41,23,2)
(5,7,2)
(32,23,2)
(43,57,2)
(70,4,2)
(4,24,2)
(49,4,2)
(41,18,2)
(15,4,2)
(37,4,2)
(71,58,2)
(19,24,2)
(66,24,2)
(2,4,2)
(27,4,2)
(11,4,2)
(62,60,2)
(11,23,2)
(18,68,2)
(25,4,2)
(43,20,2)
(57,24,2)
(53,23,2)
(43,24,2)
(1,4,2)
(3,5,2)
(31,24,2)
(32,24,2)
(55,68,2)
(68,60,2)
(14,53,2)
(71,23,2)
(71,60,2)
(58,60,2)
(58,15,2)
(16,32,2)
(36,68,2)
(45,68,2)
(16,43,2)
(12,60,2)
(15,30,2)
(23,47,2)
(0,24,2)
(50,24,2)
(60,4,2)
-----------------------------------
(0,data)
(1,"fgets()
(2,dataLen)
(3,100-dataLen)
(4,fgets(data+dataLen, (int)
(5,dataLen = strlen(data)
(6,if (100-dataLen > 1)
(7,strlen(data)
(8,if (fgets(data+dataLen, (int)
(9,dataBuffer)
(10,)
(11,data[dataLen])
(12,\\\'\\\\n\\\')
(13,)
(14,CWE78_OS_Command_Injection__char_console_execlp_63b_badSink(&data)
(15,dataLen = strlen(data)
(16,fgets(data+dataLen, (int)
(17,data[dataLen-1] == \\\'\\\\n\\\')
(18,dataLen-1)
(19,stdin)
(20,int)
(21,)
(22,data)
(23,data = dataBuffer)
(24,100-dataLen > 1)
(25,data[dataLen] = \\\'\\\\0\\\')
(26,0)
(27,\\\'\\\\0\\\')
(28,dataLen)
(29,\\\'\\\\0\\\')
(30,strlen(data)
(31,NULL)
(32,data+dataLen)
(33,data)
(34,dataLen)
(35,)
(36,dataLen)
(37,data)
(38,1)
(39,data)
(40,COMMAND_ARG2)
(41,data[dataLen-1])
(42,dataLen)
(43,(int)
(44,dataLen)
(45,data[dataLen-1] = \\\'\\\\0\\\')
(46,data)
(47,dataBuffer[100] = COMMAND_ARG2)
(48,data)
(49,printLine("fgets()
(50,dataLen)
(51,dataLen)
(52,1)
(53,&data)
(54,)
(55,1)
(56,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(57,100-dataLen)
(58,dataLen-1)
(59,data)
(60,dataLen > 0)
(61,dataBuffer)
(62,dataLen)
(63,dataBuffer)
(64,)
(65,100)
(66,100)
(67,data)
(68,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(69,RET)
(70,dataLen)
(71,data[dataLen-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
