-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(staticFive==5)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
35,36
35,37
35,38
36,37
38,39
41,42
41,43
41,44
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,39,40,45,47,48,52,55,57,58,62,64,69,71
-----computeFrom-----
23,24
23,25
29,30
29,31
50,51
50,52
60,61
60,62
-----guardedBy-----
62,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticFive==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticFive==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(staticFive==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
staticFive==5
staticFive
staticFive
5
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(9,31,0)
(7,31,0)
(18,21,0)
(5,0,0)
(14,29,0)
(1,15,0)
(17,29,0)
(11,0,0)
(24,17,0)
(21,15,0)
(4,9,0)
(29,9,0)
(12,28,0)
(8,1,0)
(10,1,0)
(3,9,0)
(29,21,0)
(9,29,0)
(16,21,0)
(20,15,0)
(25,31,0)
(23,22,0)
(30,22,0)
(28,29,0)
(19,15,0)
(13,15,0)
(31,1,0)
(17,2,0)
(31,15,0)
(0,31,0)
(0,27,0)
(26,28,0)
(9,4,1)
(22,30,1)
(11,5,1)
(17,29,1)
(12,26,1)
(23,31,1)
(9,31,1)
(31,1,1)
(24,28,1)
(28,29,1)
(17,24,1)
(25,1,1)
(7,25,1)
(6,28,1)
(26,29,1)
(4,3,1)
(14,22,1)
(5,22,1)
(1,8,1)
(3,14,1)
(8,10,1)
(0,31,1)
(31,7,1)
(30,23,1)
(28,12,1)
(29,9,1)
(14,0,1)
(6,17,1)
(0,11,1)
(28,29,2)
(24,28,2)
(0,22,2)
(17,28,2)
(5,22,2)
(17,29,2)
(31,1,2)
(0,31,2)
(29,9,2)
(9,31,2)
(11,22,2)
-----------------------------------
(0,strcat(data, "*.*")
(1,data_buf[100] = FULL_COMMAND)
(2,)
(3,data)
(4,"w")
(5,data)
(6,RET)
(7,data_buf)
(8,FULL_COMMAND)
(9,POPEN(data, "w")
(10,data_buf)
(11,"*.*")
(12,NULL)
(13,data_buf)
(14,pipe)
(15,)
(16,if (pipe != NULL)
(17,PCLOSE(pipe)
(18,pipe)
(19,if(staticFive==5)
(20,data)
(21,)
(22,staticFive==5)
(23,staticFive)
(24,pipe)
(25,data)
(26,pipe)
(27,)
(28,pipe != NULL)
(29,pipe = POPEN(data, "w")
(30,5)
(31,data = data_buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
