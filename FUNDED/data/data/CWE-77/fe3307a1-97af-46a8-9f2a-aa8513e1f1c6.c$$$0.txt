-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
54,56
54,57
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,58,60,61,65,68,70,71,75,77,82,84
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
63,64
63,65
73,74
73,75
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B()
goodG2B
{    int h;    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
int h;
int h;
int
h
h
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(21,22,0)
(14,23,0)
(33,14,0)
(36,37,0)
(4,23,0)
(13,6,0)
(3,16,0)
(23,31,0)
(31,23,0)
(22,12,0)
(35,24,0)
(30,23,0)
(26,22,0)
(34,7,0)
(0,28,0)
(10,31,0)
(11,4,0)
(20,31,0)
(9,12,0)
(1,12,0)
(27,12,0)
(31,22,0)
(37,24,0)
(29,12,0)
(25,6,0)
(19,28,0)
(6,12,0)
(16,24,0)
(28,22,0)
(4,8,0)
(28,18,0)
(2,24,0)
(15,37,0)
(23,6,0)
(22,7,0)
(7,12,0)
(17,7,0)
(32,14,0)
(22,26,1)
(31,10,1)
(31,22,1)
(16,24,1)
(24,2,1)
(4,23,1)
(32,23,1)
(16,3,1)
(19,37,1)
(23,31,1)
(10,20,1)
(30,37,1)
(2,35,1)
(7,34,1)
(15,16,1)
(5,4,1)
(35,22,1)
(22,7,1)
(36,15,1)
(26,21,1)
(20,30,1)
(14,33,1)
(28,22,1)
(37,36,1)
(21,7,1)
(15,24,1)
(14,23,1)
(34,17,1)
(11,14,1)
(37,24,1)
(3,28,1)
(33,32,1)
(4,11,1)
(5,14,1)
(0,19,1)
(28,0,1)
(11,14,2)
(14,23,2)
(28,22,2)
(37,24,2)
(16,24,2)
(3,37,2)
(37,37,2)
(15,37,2)
(4,14,2)
(4,23,2)
(36,37,2)
(23,31,2)
(0,37,2)
(19,37,2)
(31,22,2)
(28,37,2)
(16,37,2)
(22,7,2)
-----------------------------------
(0,"*.*")
(1,for(h = 0; h < 1; h++)
(2,0)
(3,h)
(4,PCLOSE(pipe)
(5,RET)
(6,)
(7,data_buf[100] = FULL_COMMAND)
(8,)
(9,data)
(10,"w")
(11,pipe)
(12,)
(13,pipe)
(14,pipe != NULL)
(15,h)
(16,h++)
(17,data_buf)
(18,)
(19,data)
(20,data)
(21,data)
(22,data = data_buf)
(23,pipe = POPEN(data, "w")
(24,h = 0)
(25,if (pipe != NULL)
(26,data_buf)
(27,h)
(28,strcat(data, "*.*")
(29,data_buf)
(30,pipe)
(31,POPEN(data, "w")
(32,pipe)
(33,NULL)
(34,FULL_COMMAND)
(35,h)
(36,1)
(37,h < 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
