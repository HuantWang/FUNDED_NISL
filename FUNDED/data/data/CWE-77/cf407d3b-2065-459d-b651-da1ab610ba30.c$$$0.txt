-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    while(1)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
        break;
    }
    /* execlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
31,32
32,33
32,34
32,35
33,34
35,36
39,40
40,41
40,42
40,43
40,44
40,45
40,46
41,42
43,44
45,46
47,48
49,50
51,52
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,36,37,38,42,44,46,48,50,52
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    while(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }    /* execlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    while(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }    /* execlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
while(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }
1
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
break;
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECLP
EXECLP
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(3,8,0)
(9,14,0)
(4,7,0)
(0,17,0)
(15,0,0)
(13,7,0)
(8,7,0)
(22,10,0)
(10,7,0)
(21,17,0)
(1,10,0)
(0,14,0)
(20,8,0)
(2,17,0)
(17,7,0)
(16,10,0)
(6,10,0)
(18,0,0)
(17,8,0)
(11,7,0)
(19,10,0)
(15,12,1)
(20,3,1)
(1,9,1)
(2,8,1)
(1,12,1)
(10,6,1)
(16,1,1)
(18,15,1)
(8,20,1)
(17,8,1)
(22,19,1)
(9,0,1)
(0,17,1)
(0,18,1)
(5,10,1)
(12,17,1)
(19,16,1)
(21,2,1)
(17,21,1)
(6,22,1)
(18,12,2)
(0,17,2)
(17,8,2)
(0,12,2)
(9,12,2)
(15,12,2)
-----------------------------------
(0,strcat(data, "*.*")
(1,COMMAND_INT)
(2,data)
(3,dataBuffer)
(4,data)
(5,RET)
(6,NULL)
(7,)
(8,dataBuffer[100] = COMMAND_ARG2)
(9,break;)
(10,EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(11,while(1)
(12,1)
(13,dataBuffer)
(14,)
(15,data)
(16,COMMAND_INT)
(17,data = dataBuffer)
(18,"*.*")
(19,COMMAND_ARG1)
(20,COMMAND_ARG2)
(21,dataBuffer)
(22,COMMAND_ARG3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
