-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    switch(6)
    {
    case 6:
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
34,35
34,36
34,37
35,36
37,38
42,43
43,44
43,45
44,45
48,49
48,50
49,50
49,51
50,51
50,52
51,52
53,54
56,57
56,58
57,58
58,59
58,60
59,60
62,63
63,64
63,65
64,65
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,36,38,39,40,41,45,46,47,52,54,55,60,61,65,66
-----computeFrom-----
23,24
23,25
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(28,31,0)
(0,2,0)
(14,13,0)
(31,4,0)
(2,7,0)
(2,9,0)
(10,3,0)
(24,9,0)
(15,13,0)
(5,6,0)
(29,3,0)
(6,3,0)
(7,2,0)
(12,4,0)
(6,9,0)
(11,3,0)
(1,12,0)
(22,11,0)
(20,7,0)
(16,6,0)
(21,13,0)
(8,13,0)
(18,9,0)
(25,3,0)
(23,15,0)
(17,15,0)
(30,13,0)
(26,3,0)
(9,13,0)
(9,15,0)
(18,24,1)
(26,6,1)
(0,25,1)
(17,23,1)
(9,15,1)
(6,9,1)
(24,15,1)
(11,22,1)
(5,27,1)
(27,9,1)
(0,26,1)
(19,7,1)
(9,18,1)
(7,2,1)
(12,1,1)
(1,7,1)
(28,12,1)
(6,16,1)
(15,17,1)
(22,27,1)
(2,9,1)
(16,5,1)
(31,28,1)
(25,11,1)
(2,0,1)
(19,31,1)
(7,20,1)
(20,2,1)
(25,27,2)
(22,27,2)
(7,2,2)
(9,15,2)
(6,27,2)
(12,7,2)
(11,27,2)
(1,7,2)
(31,7,2)
(5,27,2)
(16,27,2)
(26,27,2)
(6,9,2)
(28,7,2)
(2,9,2)
-----------------------------------
(0,data)
(1,"command execution failed!")
(2,SYSTEM(data)
(3,)
(4,)
(5,data)
(6,strcat(data, "*.*")
(7,SYSTEM(data)
(8,switch(6)
(9,data = data_buf)
(10,case 6:)
(11,printLine("Benign, fixed string")
(12,printLine("command execution failed!")
(13,)
(14,if (SYSTEM(data)
(15,data_buf[100] = FULL_COMMAND)
(16,"*.*")
(17,FULL_COMMAND)
(18,data_buf)
(19,RET)
(20,0)
(21,data_buf)
(22,"Benign, fixed string")
(23,data_buf)
(24,data)
(25,break;)
(26,break;)
(27,6)
(28,1)
(29,default:)
(30,data)
(31,exit(1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
