-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_63_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnlp_63_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink
&data
data
data
-----joern-----
(34,12,0)
(34,46,0)
(18,50,0)
(32,59,0)
(33,30,0)
(44,59,0)
(18,12,0)
(38,50,0)
(69,61,0)
(25,16,0)
(56,0,0)
(26,62,0)
(6,32,0)
(63,46,0)
(51,7,0)
(38,12,0)
(52,30,0)
(40,42,0)
(59,52,0)
(9,27,0)
(22,42,0)
(28,0,0)
(15,14,0)
(32,6,0)
(17,50,0)
(57,45,0)
(40,38,0)
(14,12,0)
(71,55,0)
(14,42,0)
(45,24,0)
(11,62,0)
(4,34,0)
(48,55,0)
(12,18,0)
(26,12,0)
(21,14,0)
(57,55,0)
(57,50,0)
(12,54,0)
(2,32,0)
(13,49,0)
(43,5,0)
(30,25,0)
(68,16,0)
(46,27,0)
(65,38,0)
(7,40,0)
(64,34,0)
(38,40,0)
(10,50,0)
(1,26,0)
(6,25,0)
(36,12,0)
(42,40,0)
(32,50,0)
(59,32,0)
(34,50,0)
(41,25,0)
(60,9,0)
(70,30,0)
(50,20,0)
(31,45,0)
(49,25,0)
(52,59,0)
(58,57,0)
(35,38,0)
(19,20,0)
(53,54,0)
(42,22,0)
(29,20,0)
(5,43,0)
(49,50,0)
(62,26,0)
(23,43,0)
(30,52,0)
(42,14,0)
(0,20,0)
(47,54,0)
(5,20,0)
(43,50,0)
(40,7,0)
(39,6,0)
(55,57,0)
(3,40,0)
(25,49,0)
(66,18,0)
(55,25,0)
(37,26,0)
(50,0,0)
(8,6,0)
(54,20,0)
(64,9,1)
(39,2,1)
(40,3,1)
(9,60,1)
(43,50,1)
(3,42,1)
(70,33,1)
(38,35,1)
(14,15,1)
(30,70,1)
(62,11,1)
(48,58,1)
(66,36,1)
(60,7,1)
(50,0,1)
(23,62,1)
(34,50,1)
(49,13,1)
(41,7,1)
(37,12,1)
(50,17,1)
(65,62,1)
(30,25,1)
(55,25,1)
(32,50,1)
(23,46,1)
(7,51,1)
(67,5,1)
(57,55,1)
(38,50,1)
(52,30,1)
(45,31,1)
(38,12,1)
(6,25,1)
(31,57,1)
(2,30,1)
(14,12,1)
(40,42,1)
(8,39,1)
(1,37,1)
(26,12,1)
(23,52,1)
(15,21,1)
(0,28,1)
(10,0,1)
(32,6,1)
(34,12,1)
(18,50,1)
(71,48,1)
(43,23,1)
(11,26,1)
(34,4,1)
(40,38,1)
(49,50,1)
(52,59,1)
(23,45,1)
(21,38,1)
(57,50,1)
(55,71,1)
(12,18,1)
(44,32,1)
(46,63,1)
(28,56,1)
(36,50,1)
(6,8,1)
(18,66,1)
(51,40,1)
(26,1,1)
(35,65,1)
(25,49,1)
(13,41,1)
(59,32,1)
(4,64,1)
(58,52,1)
(42,14,1)
(17,10,1)
(42,22,1)
(33,25,1)
(63,34,1)
(59,44,1)
(5,43,1)
(7,40,1)
(62,26,1)
(40,42,2)
(65,62,2)
(25,7,2)
(7,40,2)
(46,7,2)
(55,25,2)
(32,50,2)
(40,38,2)
(52,7,2)
(4,7,2)
(12,18,2)
(60,7,2)
(2,30,2)
(43,50,2)
(57,50,2)
(41,7,2)
(32,6,2)
(44,30,2)
(39,30,2)
(6,30,2)
(48,52,2)
(57,55,2)
(14,12,2)
(9,7,2)
(6,25,2)
(34,50,2)
(49,50,2)
(38,62,2)
(63,7,2)
(59,32,2)
(33,7,2)
(38,12,2)
(32,30,2)
(42,14,2)
(52,59,2)
(50,0,2)
(70,7,2)
(30,25,2)
(71,52,2)
(25,49,2)
(26,12,2)
(62,26,2)
(30,7,2)
(21,62,2)
(42,22,2)
(15,62,2)
(34,7,2)
(51,62,2)
(14,62,2)
(34,12,2)
(31,52,2)
(64,7,2)
(13,7,2)
(5,43,2)
(52,30,2)
(35,62,2)
(49,7,2)
(40,62,2)
(3,62,2)
(38,50,2)
(7,62,2)
(8,30,2)
(59,30,2)
(42,62,2)
(45,52,2)
(55,52,2)
(18,50,2)
(58,52,2)
(57,52,2)
-----------------------------------
(0,dataBuffer[100] = COMMAND_ARG2)
(1,dataLen)
(2,data)
(3,stdin)
(4,dataLen)
(5,CWE78_OS_Command_Injection__char_console_w32_spawnlp_63b_badSink(&data)
(6,dataLen-1)
(7,fgets(data+dataLen, (int)
(8,1)
(9,printLine("fgets()
(10,data)
(11,1)
(12,dataLen = strlen(data)
(13,data)
(14,100-dataLen)
(15,dataLen)
(16,)
(17,dataBuffer)
(18,strlen(data)
(19,data)
(20,)
(21,100)
(22,int)
(23,data)
(24,)
(25,dataLen = strlen(data)
(26,100-dataLen)
(27,)
(28,COMMAND_ARG2)
(29,dataBuffer)
(30,dataLen > 0)
(31,\\\'\\\\0\\\')
(32,data[dataLen-1])
(33,dataLen)
(34,data[dataLen])
(35,dataLen)
(36,dataLen)
(37,100)
(38,data+dataLen)
(39,dataLen)
(40,fgets(data+dataLen, (int)
(41,dataLen)
(42,(int)
(43,&data)
(44,\\\'\\\\n\\\')
(45,data[dataLen-1] = \\\'\\\\0\\\')
(46,data[dataLen] = \\\'\\\\0\\\')
(47,if (100-dataLen > 1)
(48,dataLen)
(49,strlen(data)
(50,data = dataBuffer)
(51,NULL)
(52,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(53,dataLen)
(54,)
(55,dataLen-1)
(56,dataBuffer)
(57,data[dataLen-1])
(58,data)
(59,data[dataLen-1] == \\\'\\\\n\\\')
(60,"fgets()
(61,)
(62,100-dataLen > 1)
(63,\\\'\\\\0\\\')
(64,data)
(65,data)
(66,data)
(67,RET)
(68,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(69,if (fgets(data+dataLen, (int)
(70,0)
(71,1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
