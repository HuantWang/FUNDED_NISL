-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_53_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnvp_53b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnvp_53_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_53b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnvp_53_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnvp_53_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnvp_53b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnvp_53b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_spawnvp_53b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_spawnvp_53b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnvp_53b_badSink
data
data
-----joern-----
(51,22,0)
(29,39,0)
(51,15,0)
(47,61,0)
(38,60,0)
(54,3,0)
(27,23,0)
(24,8,0)
(14,21,0)
(13,21,0)
(39,61,0)
(12,16,0)
(26,65,0)
(5,1,0)
(19,65,0)
(8,53,0)
(40,37,0)
(56,55,0)
(0,34,0)
(65,24,0)
(22,51,0)
(15,14,0)
(21,56,0)
(52,8,0)
(53,25,0)
(30,55,0)
(34,21,0)
(47,55,0)
(1,54,0)
(1,38,0)
(39,21,0)
(61,37,0)
(6,56,0)
(7,61,0)
(54,1,0)
(64,56,0)
(70,13,0)
(25,53,0)
(33,62,0)
(34,61,0)
(49,15,0)
(10,22,0)
(42,41,0)
(17,3,0)
(34,51,0)
(45,34,0)
(18,24,0)
(24,61,0)
(15,49,0)
(59,61,0)
(48,54,0)
(36,25,0)
(15,51,0)
(44,14,0)
(38,16,0)
(11,14,0)
(57,58,0)
(51,34,0)
(66,1,0)
(13,61,0)
(14,15,0)
(53,8,0)
(2,62,0)
(21,39,0)
(23,63,0)
(4,60,0)
(37,55,0)
(41,63,0)
(67,62,0)
(16,61,0)
(43,37,0)
(54,61,0)
(68,21,0)
(69,33,0)
(32,38,0)
(50,25,0)
(13,23,0)
(28,55,0)
(16,38,0)
(9,13,0)
(3,35,0)
(20,51,0)
(65,38,0)
(25,38,0)
(62,21,0)
(8,24,0)
(61,55,0)
(24,65,0)
(46,47,0)
(62,33,0)
(38,16,1)
(13,21,1)
(53,25,1)
(62,67,1)
(22,10,1)
(46,33,1)
(33,62,1)
(15,49,1)
(47,46,1)
(16,61,1)
(34,61,1)
(48,53,1)
(51,20,1)
(21,39,1)
(13,61,1)
(25,38,1)
(51,15,1)
(34,21,1)
(39,61,1)
(0,33,1)
(59,37,1)
(42,22,1)
(17,54,1)
(13,70,1)
(54,61,1)
(34,45,1)
(65,19,1)
(31,47,1)
(10,51,1)
(22,51,1)
(46,23,1)
(43,40,1)
(65,38,1)
(27,13,1)
(7,59,1)
(69,62,1)
(54,1,1)
(41,42,1)
(32,22,1)
(36,38,1)
(24,61,1)
(8,24,1)
(18,25,1)
(14,21,1)
(44,11,1)
(15,14,1)
(14,44,1)
(12,32,1)
(61,37,1)
(25,50,1)
(46,53,1)
(66,48,1)
(1,38,1)
(47,61,1)
(16,12,1)
(11,34,1)
(70,9,1)
(9,41,1)
(39,29,1)
(1,5,1)
(5,66,1)
(61,7,1)
(19,26,1)
(46,3,1)
(26,18,1)
(45,0,1)
(23,27,1)
(8,52,1)
(20,15,1)
(68,61,1)
(53,8,1)
(67,2,1)
(29,68,1)
(52,24,1)
(50,36,1)
(37,43,1)
(51,34,1)
(2,21,1)
(3,17,1)
(33,69,1)
(24,65,1)
(62,21,1)
(45,33,2)
(50,22,2)
(48,53,2)
(33,62,2)
(24,65,2)
(13,21,2)
(42,22,2)
(65,25,2)
(54,61,2)
(14,33,2)
(53,8,2)
(65,38,2)
(53,25,2)
(24,25,2)
(26,25,2)
(61,37,2)
(70,22,2)
(18,25,2)
(25,38,2)
(17,53,2)
(27,22,2)
(34,61,2)
(20,33,2)
(1,38,2)
(47,61,2)
(38,16,2)
(51,33,2)
(1,53,2)
(11,33,2)
(24,61,2)
(52,25,2)
(54,1,2)
(0,33,2)
(15,49,2)
(9,22,2)
(54,53,2)
(44,33,2)
(51,34,2)
(3,53,2)
(62,21,2)
(66,53,2)
(25,22,2)
(23,22,2)
(19,25,2)
(39,61,2)
(38,22,2)
(34,33,2)
(5,53,2)
(21,39,2)
(22,51,2)
(10,33,2)
(22,33,2)
(15,33,2)
(51,15,2)
(32,22,2)
(34,21,2)
(36,22,2)
(16,61,2)
(12,22,2)
(13,61,2)
(53,22,2)
(8,24,2)
(41,22,2)
(15,14,2)
(14,21,2)
(13,22,2)
(16,22,2)
(8,25,2)
-----------------------------------
(0,data)
(1,dataLen-1)
(2,100)
(3,data[dataLen-1] = \\\'\\\\0\\\')
(4,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(5,1)
(6,dataLen)
(7,dataBuffer)
(8,data[dataLen-1] == \\\'\\\\n\\\')
(9,data)
(10,NULL)
(11,100)
(12,data)
(13,data[dataLen])
(14,100-dataLen)
(15,(int)
(16,strlen(data)
(17,\\\'\\\\0\\\')
(18,data)
(19,1)
(20,stdin)
(21,dataLen = strlen(data)
(22,fgets(data+dataLen, (int)
(23,data[dataLen] = \\\'\\\\0\\\')
(24,data[dataLen-1])
(25,dataLen > 0)
(26,dataLen)
(27,\\\'\\\\0\\\')
(28,data)
(29,data)
(30,dataBuffer)
(31,RET)
(32,dataLen)
(33,100-dataLen > 1)
(34,data+dataLen)
(35,)
(36,dataLen)
(37,dataBuffer[100] = COMMAND_ARG2)
(38,dataLen = strlen(data)
(39,strlen(data)
(40,dataBuffer)
(41,printLine("fgets()
(42,"fgets()
(43,COMMAND_ARG2)
(44,dataLen)
(45,dataLen)
(46,data)
(47,CWE78_OS_Command_Injection__char_console_w32_spawnvp_53b_badSink(data)
(48,data)
(49,int)
(50,0)
(51,fgets(data+dataLen, (int)
(52,\\\'\\\\n\\\')
(53,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(54,data[dataLen-1])
(55,)
(56,)
(57,if (fgets(data+dataLen, (int)
(58,)
(59,data)
(60,)
(61,data = dataBuffer)
(62,100-dataLen)
(63,)
(64,if (100-dataLen > 1)
(65,dataLen-1)
(66,dataLen)
(67,dataLen)
(68,dataLen)
(69,1)
(70,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
