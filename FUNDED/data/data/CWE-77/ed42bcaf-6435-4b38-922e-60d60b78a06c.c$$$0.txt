-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        char * data = *dataPtr1;
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        if (SYSTEM(data) != 0)
        {
            printLine("command execution failed!");
            exit(1);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
71,72
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
84,85
86,87
86,88
87,88
87,89
88,89
88,90
89,90
91,92
94,95
94,96
95,96
96,97
96,98
97,98
100,101
101,102
101,103
102,103
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,67,72,74,78,80,81,85,90,92,93,98,99,103,104
-----computeFrom-----
45,46
45,47
69,70
69,71
87,88
87,89
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
static void
goodG2B()
goodG2B
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
if (SYSTEM(data) != 0)        {            printLine("command execution failed!");            exit(1);        }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{            printLine("command execution failed!");            exit(1);        }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(24,47,0)
(36,39,0)
(0,2,0)
(6,14,0)
(32,47,0)
(43,1,0)
(7,2,0)
(11,18,0)
(4,21,0)
(30,1,0)
(33,34,0)
(45,48,0)
(20,36,0)
(5,26,0)
(16,3,0)
(13,2,0)
(1,26,0)
(7,34,0)
(27,10,0)
(3,7,0)
(10,26,0)
(15,7,0)
(19,26,0)
(28,5,0)
(10,48,0)
(37,12,0)
(21,14,0)
(34,26,0)
(21,26,0)
(17,10,0)
(24,21,0)
(35,11,0)
(25,26,0)
(3,5,0)
(22,26,0)
(31,26,0)
(14,21,0)
(38,40,0)
(23,18,0)
(41,40,0)
(2,13,0)
(12,5,0)
(47,24,0)
(13,5,0)
(46,48,0)
(47,1,0)
(40,34,0)
(39,36,0)
(5,12,0)
(48,26,0)
(2,34,0)
(29,13,0)
(44,39,0)
(36,47,0)
(9,23,0)
(8,24,0)
(40,2,0)
(24,21,1)
(11,35,1)
(13,5,1)
(3,16,1)
(4,5,1)
(5,12,1)
(9,11,1)
(13,29,1)
(46,45,1)
(10,27,1)
(7,2,1)
(2,13,1)
(41,38,1)
(21,14,1)
(24,8,1)
(42,39,1)
(45,21,1)
(7,15,1)
(32,7,1)
(8,32,1)
(12,37,1)
(47,24,1)
(39,36,1)
(27,17,1)
(17,48,1)
(42,23,1)
(35,39,1)
(44,36,1)
(14,6,1)
(3,5,1)
(20,47,1)
(37,28,1)
(48,46,1)
(36,47,1)
(23,9,1)
(0,10,1)
(6,4,1)
(40,2,1)
(40,41,1)
(39,44,1)
(29,0,1)
(36,20,1)
(10,48,1)
(15,3,1)
(38,2,1)
(16,40,1)
(2,13,2)
(36,47,2)
(47,24,2)
(39,36,2)
(7,2,2)
(11,39,2)
(3,5,2)
(5,12,2)
(23,39,2)
(40,2,2)
(35,39,2)
(24,21,2)
(13,5,2)
(21,14,2)
(10,48,2)
(9,39,2)
-----------------------------------
(0,data)
(1,)
(2,* data = *dataPtr1)
(3,*dataPtr1)
(4,dataPtr2)
(5,* *dataPtr1 = &data)
(6,data)
(7,*dataPtr1 = data)
(8,dataPtr2)
(9,1)
(10,data = data_buf)
(11,printLine("command execution failed!")
(12,&data)
(13,*dataPtr1)
(14,&data)
(15,data)
(16,dataPtr1)
(17,data)
(18,)
(19,dataPtr1)
(20,data)
(21,* *dataPtr2 = &data)
(22,data)
(23,exit(1)
(24,*dataPtr2)
(25,dataPtr2)
(26,)
(27,data_buf)
(28,dataPtr1)
(29,dataPtr1)
(30,if (SYSTEM(data)
(31,data_buf)
(32,data)
(33,data)
(34,)
(35,"command execution failed!")
(36,SYSTEM(data)
(37,data)
(38,data)
(39,SYSTEM(data)
(40,strcat(data, "*.*")
(41,"*.*")
(42,RET)
(43,data)
(44,0)
(45,data_buf)
(46,FULL_COMMAND)
(47,* data = *dataPtr2)
(48,data_buf[100] = FULL_COMMAND)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
