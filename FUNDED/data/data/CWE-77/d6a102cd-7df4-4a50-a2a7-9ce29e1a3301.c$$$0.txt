-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* spawnlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
41,42
42,43
42,44
42,45
43,44
45,46
48,49
49,50
49,51
49,52
49,53
49,54
49,55
49,56
50,51
52,53
54,55
56,57
58,59
60,61
62,63
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,38,39,44,46,47,51,53,55,57,59,61,63
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* spawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_spawnlp
_spawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(17,16,0)
(10,1,0)
(8,2,0)
(5,14,0)
(11,21,0)
(6,1,0)
(0,21,0)
(16,24,0)
(2,9,0)
(23,1,0)
(9,1,0)
(21,1,0)
(12,21,0)
(22,2,0)
(13,21,0)
(16,2,0)
(25,9,0)
(5,2,0)
(4,21,0)
(15,5,0)
(19,16,0)
(26,5,0)
(7,9,0)
(2,1,0)
(20,21,0)
(4,5,1)
(2,9,1)
(7,25,1)
(3,21,1)
(26,15,1)
(9,7,1)
(18,2,1)
(17,19,1)
(13,12,1)
(8,9,1)
(16,17,1)
(2,22,1)
(4,16,1)
(11,13,1)
(15,18,1)
(16,2,1)
(21,11,1)
(0,20,1)
(19,18,1)
(5,2,1)
(12,0,1)
(22,8,1)
(20,4,1)
(5,26,1)
(26,18,2)
(5,2,2)
(16,2,2)
(2,9,2)
(5,18,2)
(19,18,2)
(16,18,2)
(17,18,2)
(15,18,2)
-----------------------------------
(0,COMMAND_INT)
(1,)
(2,data = dataBuffer)
(3,RET)
(4,_P_WAIT)
(5,strcat(data, "*.*")
(6,dataBuffer)
(7,COMMAND_ARG2)
(8,data)
(9,dataBuffer[100] = COMMAND_ARG2)
(10,if(globalReturnsTrueOrFalse()
(11,NULL)
(12,COMMAND_ARG1)
(13,COMMAND_ARG3)
(14,)
(15,data)
(16,strcat(data, "*.*")
(17,"*.*")
(18,globalReturnsTrueOrFalse()
(19,data)
(20,COMMAND_INT)
(21,_spawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(22,dataBuffer)
(23,data)
(24,)
(25,dataBuffer)
(26,"*.*")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
