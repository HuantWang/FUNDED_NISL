-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(11,1,0)
(59,28,0)
(6,40,0)
(17,31,0)
(51,10,0)
(34,40,0)
(14,3,0)
(56,29,0)
(7,1,0)
(30,40,0)
(47,28,0)
(44,34,0)
(48,54,0)
(41,30,0)
(48,13,0)
(21,23,0)
(49,16,0)
(18,37,0)
(33,9,0)
(10,51,0)
(0,40,0)
(0,21,0)
(24,32,0)
(6,42,0)
(61,37,0)
(36,53,0)
(55,54,0)
(15,54,0)
(34,45,0)
(26,42,0)
(48,16,0)
(54,55,0)
(12,46,0)
(18,40,0)
(43,45,0)
(62,29,0)
(27,26,0)
(32,51,0)
(46,26,0)
(1,53,0)
(60,6,0)
(54,48,0)
(47,40,0)
(29,0,0)
(46,30,0)
(38,0,0)
(1,46,0)
(47,46,0)
(53,1,0)
(32,45,0)
(12,54,0)
(58,37,0)
(22,10,0)
(8,21,0)
(4,47,0)
(25,55,0)
(0,29,0)
(52,33,0)
(51,32,0)
(28,9,0)
(16,48,0)
(54,12,0)
(57,18,0)
(45,34,0)
(29,45,0)
(13,48,0)
(39,32,0)
(20,12,0)
(5,16,0)
(12,40,0)
(63,46,0)
(37,45,0)
(50,12,0)
(16,46,0)
(45,31,0)
(18,10,0)
(30,46,0)
(10,18,0)
(2,47,0)
(35,26,0)
(19,6,0)
(37,18,0)
(20,50,1)
(6,19,1)
(30,41,1)
(19,51,1)
(5,49,1)
(10,22,1)
(54,12,1)
(62,38,1)
(34,40,1)
(33,52,1)
(61,57,1)
(37,58,1)
(53,1,1)
(51,32,1)
(48,13,1)
(11,46,1)
(29,56,1)
(25,54,1)
(56,62,1)
(34,44,1)
(51,10,1)
(45,34,1)
(0,40,1)
(24,39,1)
(38,51,1)
(32,24,1)
(60,6,1)
(58,61,1)
(30,40,1)
(21,8,1)
(22,18,1)
(8,0,1)
(57,32,1)
(54,48,1)
(18,37,1)
(46,30,1)
(54,15,1)
(16,46,1)
(39,45,1)
(44,43,1)
(59,47,1)
(53,36,1)
(47,46,1)
(50,53,1)
(10,18,1)
(47,40,1)
(12,46,1)
(2,33,1)
(7,11,1)
(19,53,1)
(55,54,1)
(41,63,1)
(52,55,1)
(43,55,1)
(28,59,1)
(12,40,1)
(37,45,1)
(19,28,1)
(1,46,1)
(49,12,1)
(0,29,1)
(16,5,1)
(12,20,1)
(4,2,1)
(29,45,1)
(48,16,1)
(6,40,1)
(19,21,1)
(32,45,1)
(36,1,1)
(55,25,1)
(1,7,1)
(15,48,1)
(18,40,1)
(47,4,1)
(16,53,2)
(32,55,2)
(18,40,2)
(34,40,2)
(4,55,2)
(61,32,2)
(60,6,2)
(48,16,2)
(5,53,2)
(54,12,2)
(25,53,2)
(57,32,2)
(51,55,2)
(33,55,2)
(55,53,2)
(21,51,2)
(52,55,2)
(32,45,2)
(0,29,2)
(8,51,2)
(30,40,2)
(16,46,2)
(1,46,2)
(51,32,2)
(47,55,2)
(15,53,2)
(44,55,2)
(48,13,2)
(48,53,2)
(50,53,2)
(53,1,2)
(29,45,2)
(38,51,2)
(2,55,2)
(55,54,2)
(43,55,2)
(6,40,2)
(37,45,2)
(59,55,2)
(45,55,2)
(22,32,2)
(10,18,2)
(54,48,2)
(47,46,2)
(29,51,2)
(58,32,2)
(12,40,2)
(37,32,2)
(49,53,2)
(34,55,2)
(47,40,2)
(28,55,2)
(18,32,2)
(18,37,2)
(56,51,2)
(12,53,2)
(24,55,2)
(39,55,2)
(54,53,2)
(46,30,2)
(45,34,2)
(10,32,2)
(12,46,2)
(51,10,2)
(20,53,2)
(0,51,2)
(0,40,2)
(62,51,2)
-----------------------------------
(0,data[dataLen-1])
(1,100-dataLen)
(2,data)
(3,)
(4,dataLen)
(5,dataLen)
(6,return data;)
(7,dataLen)
(8,\\\'\\\\0\\\')
(9,)
(10,data[dataLen-1] == \\\'\\\\n\\\')
(11,100)
(12,data+dataLen)
(13,int)
(14,if (fgets(data+dataLen, (int)
(15,stdin)
(16,100-dataLen)
(17,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(18,data[dataLen-1])
(19,data)
(20,dataLen)
(21,data[dataLen-1] = \\\'\\\\0\\\')
(22,\\\'\\\\n\\\')
(23,)
(24,0)
(25,NULL)
(26,)
(27,dataLen)
(28,data[dataLen] = \\\'\\\\0\\\')
(29,dataLen-1)
(30,strlen(data)
(31,)
(32,dataLen > 0)
(33,printLine("fgets()
(34,strlen(data)
(35,if (100-dataLen > 1)
(36,1)
(37,dataLen-1)
(38,data)
(39,dataLen)
(40,char * data)
(41,data)
(42,)
(43,dataLen)
(44,data)
(45,dataLen = strlen(data)
(46,dataLen = strlen(data)
(47,data[dataLen])
(48,(int)
(49,100)
(50,data)
(51,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(52,"fgets()
(53,100-dataLen > 1)
(54,fgets(data+dataLen, (int)
(55,fgets(data+dataLen, (int)
(56,1)
(57,data)
(58,1)
(59,\\\'\\\\0\\\')
(60,RET)
(61,dataLen)
(62,dataLen)
(63,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
