-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(GLOBAL_CONST_TRUE)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECV(COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
31,32
32,33
33,34
33,35
33,36
34,35
36,37
39,40
39,41
40,41
41,42
41,43
43,44
43,45
43,46
43,47
47,48
48,49
48,50
48,51
48,52
49,50
51,52
53,54
55,56
57,58
58,59
58,60
58,61
59,60
61,62
63,64
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,35,37,38,42,44,45,46,50,52,54,56,60,62,64
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(GLOBAL_CONST_TRUE)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(GLOBAL_CONST_TRUE)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
GLOBAL_CONST_TRUE
GLOBAL_CONST_TRUE
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(11,15,0)
(4,17,0)
(22,6,0)
(16,10,0)
(11,8,0)
(6,10,0)
(15,8,0)
(18,6,0)
(5,15,0)
(12,10,0)
(1,11,0)
(8,14,0)
(20,14,0)
(3,11,0)
(21,14,0)
(2,14,0)
(0,8,0)
(19,4,0)
(6,14,0)
(4,6,0)
(10,14,0)
(7,4,0)
(3,1,1)
(6,10,1)
(11,3,1)
(5,4,1)
(18,22,1)
(13,11,1)
(9,6,1)
(6,18,1)
(11,15,1)
(19,9,1)
(12,16,1)
(1,15,1)
(5,9,1)
(10,12,1)
(4,6,1)
(15,5,1)
(4,7,1)
(7,19,1)
(22,10,1)
(4,6,2)
(4,9,2)
(19,9,2)
(7,9,2)
(6,10,2)
(11,15,2)
-----------------------------------
(0,args)
(1,COMMAND_INT_PATH)
(2,dataBuffer)
(3,args)
(4,strcat(data, "*.*")
(5,args)
(6,data = dataBuffer)
(7,"*.*")
(8,)
(9,GLOBAL_CONST_TRUE)
(10,dataBuffer[100] = COMMAND_ARG2)
(11,EXECV(COMMAND_INT_PATH, args)
(12,COMMAND_ARG2)
(13,RET)
(14,)
(15,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(16,dataBuffer)
(17,)
(18,dataBuffer)
(19,data)
(20,data)
(21,if(GLOBAL_CONST_TRUE)
(22,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
