-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrue())
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECVP(COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
32,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
40,42
41,42
42,43
42,44
44,45
44,46
44,47
44,48
48,49
49,50
49,51
49,52
49,53
50,51
52,53
54,55
56,57
58,59
59,60
59,61
59,62
60,61
62,63
64,65
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,38,39,43,45,46,47,51,53,55,57,61,63,65
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrue())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrue())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalReturnsTrue()
globalReturnsTrue
globalReturnsTrue
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECVP(COMMAND_INT, args);
EXECVP(COMMAND_INT, args)
EXECVP
EXECVP
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(14,15,0)
(2,15,0)
(18,9,0)
(17,2,0)
(10,2,0)
(7,20,0)
(20,21,0)
(1,15,0)
(12,17,0)
(9,15,0)
(4,15,0)
(11,10,0)
(19,10,0)
(4,9,0)
(16,15,0)
(20,4,0)
(0,9,0)
(5,4,0)
(3,2,0)
(13,4,0)
(6,20,0)
(10,17,0)
(10,17,1)
(17,12,1)
(20,4,1)
(13,5,1)
(20,6,1)
(18,0,1)
(5,9,1)
(12,8,1)
(4,13,1)
(10,19,1)
(4,9,1)
(8,4,1)
(19,11,1)
(7,8,1)
(12,20,1)
(11,17,1)
(6,7,1)
(9,18,1)
(22,10,1)
(10,17,2)
(20,8,2)
(6,8,2)
(4,9,2)
(7,8,2)
(20,4,2)
-----------------------------------
(0,dataBuffer)
(1,if(globalReturnsTrue()
(2,)
(3,args)
(4,data = dataBuffer)
(5,data)
(6,"*.*")
(7,data)
(8,globalReturnsTrue()
(9,dataBuffer[100] = COMMAND_ARG2)
(10,EXECVP(COMMAND_INT, args)
(11,COMMAND_INT)
(12,args)
(13,dataBuffer)
(14,dataBuffer)
(15,)
(16,data)
(17,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(18,COMMAND_ARG2)
(19,args)
(20,strcat(data, "*.*")
(21,)
(22,RET)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
