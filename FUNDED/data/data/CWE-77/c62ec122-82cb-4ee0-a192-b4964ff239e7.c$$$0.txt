-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    while(1)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
        break;
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
31,32
32,33
32,34
32,35
33,34
35,36
39,40
39,41
40,41
40,42
41,42
41,43
42,43
44,45
47,48
47,49
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,34,36,37,38,43,45,46,51,52,56,57
-----computeFrom-----
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;WhileStatement;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    while(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    while(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
while(1)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    }
1
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        break;    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
break;
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(10,6,0)
(23,12,0)
(14,15,0)
(17,6,0)
(15,8,0)
(21,13,0)
(11,23,0)
(22,17,0)
(9,8,0)
(2,9,0)
(1,6,0)
(7,13,0)
(23,13,0)
(0,12,0)
(12,23,0)
(13,6,0)
(3,6,0)
(16,6,0)
(13,17,0)
(5,19,0)
(20,17,0)
(22,20,1)
(12,0,1)
(11,5,1)
(13,21,1)
(9,2,1)
(5,18,1)
(14,12,1)
(0,23,1)
(7,17,1)
(21,7,1)
(12,23,1)
(23,11,1)
(17,22,1)
(4,12,1)
(4,9,1)
(18,13,1)
(13,17,1)
(2,15,1)
(11,18,1)
(15,14,1)
(23,13,1)
(13,17,2)
(23,13,2)
(5,18,2)
(2,12,2)
(9,12,2)
(15,12,2)
(14,12,2)
(12,23,2)
-----------------------------------
(0,0)
(1,data_buf)
(2,1)
(3,while(1)
(4,RET)
(5,break;)
(6,)
(7,data)
(8,)
(9,exit(1)
(10,if (SYSTEM(data)
(11,data)
(12,SYSTEM(data)
(13,data = data_buf)
(14,"command execution failed!")
(15,printLine("command execution failed!")
(16,data)
(17,data_buf[100] = FULL_COMMAND)
(18,1)
(19,)
(20,data_buf)
(21,data_buf)
(22,FULL_COMMAND)
(23,SYSTEM(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
