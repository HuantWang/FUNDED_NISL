-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_system_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_system_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_system_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_system_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_system_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_system_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_system_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_system_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_system_22_badGlobal
CWE78_OS_Command_Injection__char_console_system_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(32,19,0)
(1,57,0)
(35,52,0)
(45,0,0)
(30,64,0)
(52,19,0)
(38,60,0)
(62,46,0)
(49,52,0)
(56,13,0)
(42,63,0)
(63,64,0)
(26,43,0)
(33,34,0)
(55,64,0)
(3,15,0)
(63,11,0)
(0,50,0)
(3,64,0)
(11,63,0)
(53,28,0)
(36,55,0)
(11,38,0)
(50,25,0)
(55,46,0)
(28,43,0)
(20,14,0)
(12,64,0)
(57,12,0)
(19,7,0)
(13,64,0)
(39,55,0)
(47,19,0)
(63,50,0)
(18,25,0)
(30,19,0)
(50,13,0)
(65,50,0)
(66,3,0)
(0,2,0)
(21,14,0)
(10,57,0)
(17,2,0)
(13,50,0)
(54,58,0)
(32,10,0)
(44,15,0)
(25,37,0)
(23,22,0)
(58,11,0)
(28,64,0)
(12,14,0)
(11,58,0)
(34,16,0)
(5,12,0)
(6,0,0)
(8,63,0)
(51,31,0)
(24,25,0)
(27,22,0)
(60,38,0)
(22,50,0)
(55,50,0)
(46,16,0)
(28,52,0)
(59,11,0)
(41,32,0)
(43,4,0)
(14,19,0)
(9,3,0)
(38,22,0)
(14,12,0)
(40,7,0)
(10,32,0)
(38,11,0)
(29,30,0)
(57,10,0)
(22,38,0)
(52,28,0)
(2,0,0)
(48,32,0)
(19,30,0)
(12,57,0)
(63,42,1)
(27,63,1)
(59,38,1)
(2,17,1)
(66,2,1)
(22,50,1)
(41,19,1)
(5,32,1)
(28,52,1)
(63,64,1)
(38,60,1)
(10,32,1)
(55,64,1)
(6,50,1)
(30,29,1)
(17,0,1)
(42,8,1)
(32,48,1)
(28,64,1)
(9,3,1)
(11,38,1)
(11,63,1)
(34,33,1)
(53,10,1)
(0,45,1)
(38,22,1)
(39,36,1)
(0,50,1)
(13,64,1)
(58,11,1)
(56,65,1)
(1,12,1)
(62,55,1)
(10,57,1)
(55,50,1)
(54,11,1)
(66,46,1)
(66,10,1)
(8,2,1)
(3,66,1)
(22,23,1)
(63,50,1)
(50,13,1)
(52,35,1)
(14,21,1)
(65,61,1)
(12,14,1)
(52,19,1)
(58,54,1)
(23,27,1)
(2,0,1)
(12,64,1)
(49,53,1)
(66,43,1)
(48,41,1)
(33,58,1)
(45,6,1)
(57,12,1)
(3,64,1)
(14,19,1)
(57,1,1)
(29,47,1)
(66,61,1)
(26,28,1)
(13,56,1)
(32,19,1)
(19,30,1)
(35,49,1)
(20,5,1)
(21,20,1)
(30,64,1)
(36,34,1)
(55,39,1)
(47,58,1)
(43,26,1)
(46,62,1)
(11,59,1)
(34,58,2)
(12,64,2)
(38,2,2)
(28,10,2)
(2,0,2)
(56,61,2)
(38,60,2)
(28,64,2)
(29,58,2)
(11,63,2)
(42,2,2)
(28,52,2)
(13,61,2)
(27,2,2)
(58,11,2)
(0,50,2)
(12,14,2)
(59,2,2)
(3,64,2)
(0,61,2)
(2,61,2)
(50,61,2)
(55,58,2)
(43,10,2)
(47,58,2)
(19,30,2)
(48,58,2)
(22,2,2)
(65,61,2)
(57,32,2)
(10,57,2)
(36,58,2)
(8,2,2)
(32,58,2)
(6,61,2)
(13,64,2)
(35,10,2)
(33,58,2)
(26,10,2)
(50,13,2)
(53,10,2)
(9,3,2)
(52,19,2)
(45,61,2)
(49,10,2)
(20,32,2)
(55,64,2)
(63,64,2)
(30,58,2)
(46,58,2)
(41,58,2)
(62,58,2)
(11,2,2)
(22,50,2)
(32,19,2)
(63,50,2)
(11,38,2)
(17,61,2)
(10,58,2)
(14,19,2)
(10,32,2)
(14,32,2)
(52,10,2)
(1,32,2)
(39,58,2)
(30,64,2)
(38,22,2)
(19,58,2)
(21,32,2)
(54,2,2)
(57,12,2)
(55,50,2)
(23,2,2)
(12,32,2)
(58,2,2)
(5,32,2)
(63,2,2)
-----------------------------------
(0,100-dataLen)
(1,\\\'\\\\n\\\')
(2,100-dataLen > 1)
(3,return data;)
(4,)
(5,data)
(6,100)
(7,)
(8,data)
(9,RET)
(10,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(11,fgets(data+dataLen, (int)
(12,data[dataLen-1])
(13,strlen(data)
(14,dataLen-1)
(15,)
(16,)
(17,1)
(18,dataLen)
(19,dataLen = strlen(data)
(20,dataLen)
(21,1)
(22,100-dataLen)
(23,dataLen)
(24,if (100-dataLen > 1)
(25,)
(26,\\\'\\\\0\\\')
(27,100)
(28,data[dataLen-1])
(29,data)
(30,strlen(data)
(31,)
(32,dataLen > 0)
(33,"fgets()
(34,printLine("fgets()
(35,1)
(36,data)
(37,)
(38,(int)
(39,dataLen)
(40,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(41,dataLen)
(42,dataLen)
(43,data[dataLen-1] = \\\'\\\\0\\\')
(44,if(CWE78_OS_Command_Injection__char_console_system_22_badGlobal)
(45,dataLen)
(46,data[dataLen] = \\\'\\\\0\\\')
(47,dataLen)
(48,0)
(49,dataLen)
(50,dataLen = strlen(data)
(51,if (fgets(data+dataLen, (int)
(52,dataLen-1)
(53,data)
(54,NULL)
(55,data[dataLen])
(56,data)
(57,data[dataLen-1] == \\\'\\\\n\\\')
(58,fgets(data+dataLen, (int)
(59,stdin)
(60,int)
(61,CWE78_OS_Command_Injection__char_console_system_22_badGlobal)
(62,\\\'\\\\0\\\')
(63,data+dataLen)
(64,char * data)
(65,dataLen)
(66,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
