-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(STATIC_CONST_FIVE==5)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
35,36
35,37
35,38
36,37
38,39
41,42
41,43
42,43
43,44
43,45
45,46
45,47
45,48
45,49
49,50
50,51
50,52
50,53
50,54
51,52
53,54
55,56
57,58
59,60
60,61
60,62
60,63
60,64
61,62
63,64
65,66
67,68
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,39,40,44,46,47,48,52,54,56,58,62,64,66,68
-----computeFrom-----
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(STATIC_CONST_FIVE==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(STATIC_CONST_FIVE==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
STATIC_CONST_FIVE==5
STATIC_CONST_FIVE
STATIC_CONST_FIVE
5
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(10,1,0)
(17,5,0)
(6,13,0)
(0,6,0)
(11,1,0)
(14,13,0)
(9,24,0)
(11,12,0)
(15,11,0)
(18,5,0)
(23,13,0)
(16,24,0)
(21,23,0)
(20,23,0)
(5,0,0)
(7,0,0)
(22,1,0)
(1,13,0)
(4,13,0)
(19,6,0)
(1,23,0)
(2,11,0)
(5,6,0)
(25,5,0)
(3,13,0)
(15,2,1)
(17,0,1)
(23,21,1)
(7,11,1)
(9,16,1)
(5,0,1)
(10,23,1)
(1,23,1)
(16,1,1)
(11,15,1)
(8,5,1)
(18,25,1)
(1,22,1)
(24,9,1)
(0,7,1)
(21,20,1)
(11,1,1)
(5,18,1)
(2,24,1)
(25,17,1)
(7,24,1)
(22,10,1)
(11,1,2)
(5,0,2)
(1,23,2)
(2,24,2)
(15,24,2)
(11,24,2)
-----------------------------------
(0,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(1,data = dataBuffer)
(2,data)
(3,if(STATIC_CONST_FIVE==5)
(4,data)
(5,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(6,)
(7,args)
(8,RET)
(9,5)
(10,data)
(11,strcat(data, "*.*")
(12,)
(13,)
(14,dataBuffer)
(15,"*.*")
(16,STATIC_CONST_FIVE)
(17,_P_WAIT)
(18,args)
(19,args)
(20,dataBuffer)
(21,COMMAND_ARG2)
(22,dataBuffer)
(23,dataBuffer[100] = COMMAND_ARG2)
(24,STATIC_CONST_FIVE==5)
(25,COMMAND_INT_PATH)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
