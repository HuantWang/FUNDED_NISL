-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        wchar_t * data = *dataPtr1;
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            FILE *pipe;
            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
            pipe = POPEN(data, L"w");
            if (pipe != NULL)
            {
                PCLOSE(pipe);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
71,72
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
84,85
86,87
86,88
86,89
87,88
88,89
88,90
89,90
91,92
91,93
94,95
95,96
95,97
96,97
98,99
98,100
98,101
99,100
101,102
104,105
104,106
105,106
105,107
106,107
108,109
110,111
111,112
112,113
112,114
113,114
115,116
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,67,72,74,78,80,81,85,90,92,93,97,100,102,103,107,109,114,116
-----computeFrom-----
45,46
45,47
69,70
69,71
95,96
95,97
105,106
105,107
-----guardedBy-----
107,116
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, L"w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, L"w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, L"w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, L"w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, L"w");
pipe = POPEN(data, L"w")
pipe
pipe
POPEN(data, L"w")
POPEN
POPEN
data
data
L"w"
if (pipe != NULL)            {                PCLOSE(pipe);            }
pipe != NULL
pipe
pipe
NULL
NULL
{                PCLOSE(pipe);            }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(15,21,0)
(10,24,0)
(9,20,0)
(21,12,0)
(41,9,0)
(39,20,0)
(33,18,0)
(36,20,0)
(19,12,0)
(38,29,0)
(6,39,0)
(1,9,0)
(12,20,0)
(43,13,0)
(34,19,0)
(16,5,0)
(31,29,0)
(0,41,0)
(5,36,0)
(3,20,0)
(17,9,0)
(22,39,0)
(21,19,0)
(30,34,0)
(23,33,0)
(24,4,0)
(9,41,0)
(7,22,0)
(25,36,0)
(40,33,0)
(19,34,0)
(14,18,0)
(39,32,0)
(1,21,0)
(44,12,0)
(37,32,0)
(18,20,0)
(13,22,0)
(42,20,0)
(2,18,0)
(34,9,0)
(32,39,0)
(33,20,0)
(35,19,0)
(11,1,0)
(26,5,0)
(27,20,0)
(8,20,0)
(22,13,0)
(13,36,0)
(9,41,1)
(18,14,1)
(11,19,1)
(33,18,1)
(28,24,1)
(31,38,1)
(14,2,1)
(10,29,1)
(28,29,1)
(34,30,1)
(2,39,1)
(37,6,1)
(40,23,1)
(1,9,1)
(39,32,1)
(22,7,1)
(7,43,1)
(0,17,1)
(13,22,1)
(21,15,1)
(19,34,1)
(41,0,1)
(29,31,1)
(24,10,1)
(21,19,1)
(22,39,1)
(6,9,1)
(43,21,1)
(33,40,1)
(23,18,1)
(15,1,1)
(32,37,1)
(38,13,1)
(35,33,1)
(34,9,1)
(1,11,1)
(30,35,1)
(13,22,2)
(21,19,2)
(10,29,2)
(39,32,2)
(1,9,2)
(34,9,2)
(24,29,2)
(22,39,2)
(9,41,2)
(33,18,2)
(19,34,2)
-----------------------------------
(0,data)
(1,*dataPtr1)
(2,data_buf)
(3,dataPtr2)
(4,)
(5,)
(6,dataPtr2)
(7,dataPtr2)
(8,data_buf)
(9,* *dataPtr1 = &data)
(10,pipe)
(11,dataPtr1)
(12,)
(13,* data = *dataPtr2)
(14,FULL_COMMAND)
(15,data)
(16,pipe)
(17,dataPtr1)
(18,data_buf[100] = FULL_COMMAND)
(19,* data = *dataPtr1)
(20,)
(21,*dataPtr1 = data)
(22,*dataPtr2)
(23,data)
(24,PCLOSE(pipe)
(25,data)
(26,if (pipe != NULL)
(27,data)
(28,RET)
(29,pipe != NULL)
(30,dataPtr1)
(31,NULL)
(32,&data)
(33,data = data_buf)
(34,*dataPtr1)
(35,data)
(36,)
(37,data)
(38,pipe)
(39,* *dataPtr2 = &data)
(40,data_buf)
(41,&data)
(42,dataPtr1)
(43,data)
(44,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
