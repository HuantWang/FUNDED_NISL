-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_63_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_spawnv_63_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_w32_spawnv_63_bad()
CWE78_OS_Command_Injection__char_console_w32_spawnv_63_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data);
CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data)
CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink
CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink
&data
data
data
-----joern-----
(15,35,0)
(4,54,0)
(5,63,0)
(45,54,0)
(61,62,0)
(2,54,0)
(59,68,0)
(63,54,0)
(35,49,0)
(13,23,0)
(42,54,0)
(2,50,0)
(32,43,0)
(31,54,0)
(54,0,0)
(70,54,0)
(45,38,0)
(47,35,0)
(14,40,0)
(66,23,0)
(35,14,0)
(70,49,0)
(1,31,0)
(43,7,0)
(54,69,0)
(60,0,0)
(14,16,0)
(66,36,0)
(25,49,0)
(29,0,0)
(45,68,0)
(21,33,0)
(31,49,0)
(31,16,0)
(9,16,0)
(49,29,0)
(23,55,0)
(14,35,0)
(69,0,0)
(34,45,0)
(16,62,0)
(57,2,0)
(11,21,0)
(48,66,0)
(17,10,0)
(20,66,0)
(68,45,0)
(19,13,0)
(22,10,0)
(56,69,0)
(46,31,0)
(51,29,0)
(3,13,0)
(40,14,0)
(50,67,0)
(18,50,0)
(10,49,0)
(12,0,0)
(37,10,0)
(36,66,0)
(36,38,0)
(41,26,0)
(6,69,0)
(38,45,0)
(70,43,0)
(58,22,0)
(30,27,0)
(10,22,0)
(63,49,0)
(33,0,0)
(23,42,0)
(8,38,0)
(44,70,0)
(68,23,0)
(28,54,0)
(52,29,0)
(2,13,0)
(49,63,0)
(65,70,0)
(26,7,0)
(24,68,0)
(62,16,0)
(64,23,0)
(33,21,0)
(16,14,0)
(38,36,0)
(13,2,0)
(16,31,0)
(21,54,0)
(53,55,0)
(71,42,0)
(42,23,0)
(43,32,1)
(41,62,1)
(38,8,1)
(21,11,1)
(11,22,1)
(68,23,1)
(69,56,1)
(66,23,1)
(16,31,1)
(61,16,1)
(11,43,1)
(70,54,1)
(13,23,1)
(14,35,1)
(64,62,1)
(45,68,1)
(5,25,1)
(32,70,1)
(36,66,1)
(1,46,1)
(31,1,1)
(37,49,1)
(31,54,1)
(49,63,1)
(25,54,1)
(23,42,1)
(44,65,1)
(10,17,1)
(45,54,1)
(54,4,1)
(15,31,1)
(28,69,1)
(42,54,1)
(9,14,1)
(24,34,1)
(22,10,1)
(36,38,1)
(19,3,1)
(8,45,1)
(62,16,1)
(35,47,1)
(2,13,1)
(63,54,1)
(3,57,1)
(2,54,1)
(54,69,1)
(42,71,1)
(71,64,1)
(46,22,1)
(16,9,1)
(70,49,1)
(31,49,1)
(48,23,1)
(35,49,1)
(34,66,1)
(17,37,1)
(50,18,1)
(21,54,1)
(70,44,1)
(18,2,1)
(16,14,1)
(65,26,1)
(38,45,1)
(39,33,1)
(26,41,1)
(63,5,1)
(66,20,1)
(11,50,1)
(20,48,1)
(22,58,1)
(62,61,1)
(4,28,1)
(59,24,1)
(13,19,1)
(11,36,1)
(14,40,1)
(68,59,1)
(33,21,1)
(47,15,1)
(10,49,1)
(58,10,1)
(56,6,1)
(57,36,1)
(14,40,2)
(62,22,2)
(34,66,2)
(2,54,2)
(62,16,2)
(43,62,2)
(42,62,2)
(66,23,2)
(14,35,2)
(47,22,2)
(42,54,2)
(9,22,2)
(19,36,2)
(10,49,2)
(36,62,2)
(38,45,2)
(41,62,2)
(1,22,2)
(15,22,2)
(36,66,2)
(38,66,2)
(18,36,2)
(64,62,2)
(66,62,2)
(31,22,2)
(13,23,2)
(35,49,2)
(32,62,2)
(14,22,2)
(57,36,2)
(16,31,2)
(44,62,2)
(68,23,2)
(20,62,2)
(63,54,2)
(35,22,2)
(23,62,2)
(16,22,2)
(36,38,2)
(71,62,2)
(2,36,2)
(13,36,2)
(22,10,2)
(16,14,2)
(31,54,2)
(23,42,2)
(21,54,2)
(61,22,2)
(54,69,2)
(70,54,2)
(70,49,2)
(45,54,2)
(46,22,2)
(2,13,2)
(65,62,2)
(70,62,2)
(3,36,2)
(24,66,2)
(48,62,2)
(59,66,2)
(8,66,2)
(26,62,2)
(31,49,2)
(49,63,2)
(45,68,2)
(33,21,2)
(50,36,2)
(68,66,2)
(45,66,2)
-----------------------------------
(0,)
(1,dataLen)
(2,data[dataLen-1])
(3,dataLen)
(4,dataBuffer)
(5,data)
(6,dataBuffer)
(7,)
(8,\\\'\\\\n\\\')
(9,stdin)
(10,100-dataLen)
(11,data)
(12,data)
(13,dataLen-1)
(14,(int)
(15,100)
(16,fgets(data+dataLen, (int)
(17,dataLen)
(18,\\\'\\\\0\\\')
(19,1)
(20,0)
(21,&data)
(22,100-dataLen > 1)
(23,dataLen = strlen(data)
(24,dataLen)
(25,dataLen)
(26,printLine("fgets()
(27,)
(28,data)
(29,)
(30,if (fgets(data+dataLen, (int)
(31,data+dataLen)
(32,\\\'\\\\0\\\')
(33,CWE78_OS_Command_Injection__char_console_w32_spawnv_63b_badSink(&data)
(34,data)
(35,100-dataLen)
(36,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(37,100)
(38,data[dataLen-1] == \\\'\\\\n\\\')
(39,RET)
(40,int)
(41,"fgets()
(42,strlen(data)
(43,data[dataLen] = \\\'\\\\0\\\')
(44,dataLen)
(45,data[dataLen-1])
(46,data)
(47,dataLen)
(48,dataLen)
(49,dataLen = strlen(data)
(50,data[dataLen-1] = \\\'\\\\0\\\')
(51,dataLen)
(52,if (100-dataLen > 1)
(53,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(54,data = dataBuffer)
(55,)
(56,COMMAND_ARG2)
(57,data)
(58,1)
(59,1)
(60,dataBuffer)
(61,NULL)
(62,fgets(data+dataLen, (int)
(63,strlen(data)
(64,dataLen)
(65,data)
(66,dataLen > 0)
(67,)
(68,dataLen-1)
(69,dataBuffer[100] = COMMAND_ARG2)
(70,data[dataLen])
(71,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
