-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    goto source;
source:
    /* FIX: Append a fixed string to data (not user / external input) */
    strcat(data, "*.*");
    /* execlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
30,31
30,32
32,33
33,34
33,35
33,36
34,35
36,37
39,40
40,41
40,42
40,43
40,44
40,45
40,46
41,42
43,44
45,46
47,48
49,50
51,52
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,31,35,37,38,42,44,46,48,50,52
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    /* execlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    /* execlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goto source;
source
source:    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");
source
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECLP
EXECLP
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(18,4,0)
(4,1,0)
(5,4,0)
(14,13,0)
(16,9,0)
(3,1,0)
(2,1,0)
(10,1,0)
(7,9,0)
(13,1,0)
(9,4,0)
(0,20,0)
(8,1,0)
(6,20,0)
(9,1,0)
(20,9,0)
(15,13,0)
(17,13,0)
(11,13,0)
(20,1,0)
(12,13,0)
(0,2,1)
(4,18,1)
(13,15,1)
(15,17,1)
(2,9,1)
(12,11,1)
(9,16,1)
(20,6,1)
(11,20,1)
(16,7,1)
(20,9,1)
(14,12,1)
(18,5,1)
(7,4,1)
(19,13,1)
(6,0,1)
(17,14,1)
(9,4,1)
(9,4,2)
(20,9,2)
-----------------------------------
(0,data)
(1,)
(2,goto source;)
(3,source:)
(4,dataBuffer[100] = COMMAND_ARG2)
(5,dataBuffer)
(6,"*.*")
(7,data)
(8,data)
(9,data = dataBuffer)
(10,dataBuffer)
(11,COMMAND_INT)
(12,COMMAND_INT)
(13,EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(14,COMMAND_ARG1)
(15,NULL)
(16,dataBuffer)
(17,COMMAND_ARG3)
(18,COMMAND_ARG2)
(19,RET)
(20,strcat(data, "*.*")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
