-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(staticFalse)
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
31,32
32,33
33,34
33,35
34,35
37,38
38,39
39,40
39,41
39,42
40,41
42,43
45,46
45,47
45,48
46,47
47,48
47,49
48,49
50,51
50,52
53,54
54,55
54,56
55,56
57,58
57,59
57,60
58,59
60,61
63,64
63,65
64,65
64,66
65,66
67,68
69,70
70,71
71,72
71,73
72,73
74,75
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,35,36,41,43,44,49,51,52,56,59,61,62,66,68,73,75
-----computeFrom-----
23,24
23,25
54,55
54,56
64,65
64,66
-----guardedBy-----
66,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(staticFalse)    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
staticFalse
staticFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(30,8,0)
(2,29,0)
(12,1,0)
(8,9,0)
(1,7,0)
(4,1,0)
(17,0,0)
(19,0,0)
(7,17,0)
(21,25,0)
(15,0,0)
(22,15,0)
(8,6,0)
(24,17,0)
(11,25,0)
(29,23,0)
(25,9,0)
(18,5,0)
(25,7,0)
(3,0,0)
(5,7,0)
(16,9,0)
(9,15,0)
(7,25,0)
(10,9,0)
(27,0,0)
(9,0,0)
(5,20,0)
(14,17,0)
(26,15,0)
(28,8,0)
(31,7,0)
(12,4,1)
(8,9,1)
(31,8,1)
(9,10,1)
(15,22,1)
(16,15,1)
(8,28,1)
(4,7,1)
(10,16,1)
(11,21,1)
(22,26,1)
(21,31,1)
(9,15,1)
(32,9,1)
(29,2,1)
(5,7,1)
(25,9,1)
(13,5,1)
(7,25,1)
(1,7,1)
(13,1,1)
(1,12,1)
(2,32,1)
(18,1,1)
(25,11,1)
(30,32,1)
(31,29,1)
(5,18,1)
(28,30,1)
(29,32,2)
(2,32,2)
(25,9,2)
(18,1,2)
(7,25,2)
(5,7,2)
(8,32,2)
(30,32,2)
(5,1,2)
(9,15,2)
(1,7,2)
(28,32,2)
(8,9,2)
-----------------------------------
(0,)
(1,pipe != NULL)
(2,"Benign, fixed string")
(3,data)
(4,pipe)
(5,PCLOSE(pipe)
(6,)
(7,pipe = POPEN(data, "w")
(8,strcat(data, "*.*")
(9,data = data_buf)
(10,data_buf)
(11,"w")
(12,NULL)
(13,RET)
(14,pipe)
(15,data_buf[100] = FULL_COMMAND)
(16,data)
(17,)
(18,pipe)
(19,if(staticFalse)
(20,)
(21,data)
(22,FULL_COMMAND)
(23,)
(24,if (pipe != NULL)
(25,POPEN(data, "w")
(26,data_buf)
(27,data_buf)
(28,"*.*")
(29,printLine("Benign, fixed string")
(30,data)
(31,pipe)
(32,staticFalse)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
