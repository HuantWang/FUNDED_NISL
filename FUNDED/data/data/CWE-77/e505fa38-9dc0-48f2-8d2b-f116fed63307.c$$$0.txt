-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    /* FIX: Append a fixed string to data (not user / external input) */
    wcscat(data, L"*.*");
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, L"w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
35,38
36,37
37,38
37,39
38,39
40,41
40,42
43,44
44,45
44,46
45,46
47,48
47,49
47,50
48,49
50,51
53,54
53,55
54,55
54,56
55,56
57,58
59,60
60,61
61,62
61,63
62,63
64,65
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,39,41,42,46,49,51,52,56,58,63,65
-----computeFrom-----
23,24
23,25
44,45
44,46
54,55
54,56
-----guardedBy-----
56,65
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, L"w");
pipe = POPEN(data, L"w")
pipe
pipe
POPEN(data, L"w")
POPEN
POPEN
data
data
L"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(7,15,0)
(6,4,0)
(18,6,0)
(6,8,0)
(11,4,0)
(13,7,0)
(12,8,0)
(8,4,0)
(3,6,0)
(16,8,0)
(1,4,0)
(5,11,0)
(2,0,0)
(10,0,0)
(9,4,0)
(17,11,0)
(16,12,1)
(2,6,1)
(0,10,1)
(13,0,1)
(8,16,1)
(18,8,1)
(7,13,1)
(6,3,1)
(14,0,1)
(3,18,1)
(6,8,1)
(10,2,1)
(14,7,1)
(6,8,2)
(7,0,2)
(13,0,2)
-----------------------------------
(0,pipe != NULL)
(1,data_buf)
(2,pipe)
(3,data_buf)
(4,)
(5,pipe)
(6,data = data_buf)
(7,PCLOSE(pipe)
(8,data_buf[100] = FULL_COMMAND)
(9,data)
(10,NULL)
(11,)
(12,data_buf)
(13,pipe)
(14,RET)
(15,)
(16,FULL_COMMAND)
(17,if (pipe != NULL)
(18,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
