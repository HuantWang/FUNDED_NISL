-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32_execv_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32_execv_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32_execv_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32_execv_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(61,13,0)
(18,3,0)
(10,26,0)
(38,13,0)
(6,45,0)
(15,27,0)
(63,24,0)
(44,58,0)
(4,42,0)
(34,50,0)
(0,7,0)
(33,56,0)
(7,44,0)
(45,22,0)
(11,60,0)
(32,15,0)
(2,42,0)
(20,43,0)
(39,54,0)
(44,54,0)
(53,15,0)
(61,22,0)
(10,22,0)
(13,49,0)
(54,44,0)
(57,7,0)
(23,48,0)
(46,50,0)
(29,34,0)
(3,54,0)
(25,30,0)
(17,38,0)
(36,26,0)
(34,22,0)
(14,35,0)
(43,27,0)
(30,60,0)
(4,22,0)
(31,29,0)
(55,30,0)
(28,24,0)
(56,54,0)
(12,49,0)
(26,15,0)
(34,29,0)
(52,61,0)
(62,10,0)
(7,26,0)
(3,26,0)
(50,34,0)
(16,50,0)
(43,22,0)
(24,4,0)
(50,13,0)
(47,1,0)
(10,1,0)
(40,43,0)
(29,5,0)
(59,13,0)
(24,13,0)
(1,35,0)
(54,3,0)
(54,56,0)
(4,24,0)
(9,4,0)
(41,3,0)
(42,37,0)
(60,30,0)
(5,38,0)
(8,10,0)
(5,29,0)
(38,5,0)
(21,14,0)
(45,26,0)
(51,38,0)
(30,26,0)
(44,7,0)
(19,34,0)
(26,45,0)
(58,44,0)
(13,61,0)
(3,22,0)
(63,9,1)
(25,55,1)
(13,61,1)
(39,44,1)
(2,4,1)
(4,22,1)
(44,7,1)
(34,22,1)
(17,51,1)
(8,62,1)
(16,19,1)
(10,22,1)
(43,20,1)
(34,50,1)
(61,22,1)
(5,29,1)
(7,26,1)
(19,38,1)
(3,22,1)
(20,5,1)
(59,56,1)
(26,45,1)
(1,47,1)
(10,26,1)
(29,34,1)
(9,5,1)
(3,18,1)
(10,8,1)
(38,13,1)
(42,2,1)
(4,24,1)
(56,54,1)
(60,30,1)
(31,34,1)
(20,42,1)
(46,16,1)
(43,22,1)
(55,26,1)
(18,41,1)
(24,13,1)
(0,57,1)
(61,52,1)
(20,1,1)
(41,60,1)
(60,11,1)
(56,33,1)
(50,13,1)
(3,26,1)
(14,21,1)
(44,58,1)
(20,60,1)
(5,38,1)
(28,63,1)
(24,28,1)
(54,3,1)
(45,6,1)
(21,56,1)
(51,13,1)
(52,59,1)
(30,25,1)
(57,3,1)
(62,14,1)
(47,10,1)
(7,0,1)
(6,36,1)
(33,54,1)
(54,39,1)
(29,31,1)
(45,22,1)
(50,46,1)
(30,26,1)
(38,17,1)
(11,30,1)
(54,44,1)
(40,43,1)
(18,60,2)
(60,30,2)
(44,58,2)
(5,56,2)
(51,56,2)
(1,56,2)
(31,38,2)
(46,38,2)
(3,22,2)
(26,45,2)
(34,22,2)
(33,60,2)
(17,56,2)
(10,56,2)
(29,34,2)
(2,5,2)
(42,5,2)
(54,3,2)
(44,7,2)
(7,60,2)
(9,5,2)
(24,5,2)
(61,56,2)
(13,61,2)
(38,13,2)
(39,60,2)
(29,38,2)
(54,60,2)
(4,5,2)
(0,60,2)
(8,56,2)
(19,38,2)
(62,56,2)
(30,26,2)
(14,56,2)
(52,56,2)
(43,22,2)
(21,56,2)
(10,26,2)
(38,56,2)
(3,60,2)
(24,13,2)
(5,29,2)
(16,38,2)
(40,43,2)
(5,38,2)
(45,22,2)
(57,60,2)
(41,60,2)
(56,54,2)
(50,13,2)
(54,44,2)
(34,50,2)
(34,38,2)
(3,26,2)
(61,22,2)
(10,22,2)
(44,60,2)
(56,60,2)
(47,56,2)
(13,56,2)
(28,5,2)
(59,56,2)
(63,5,2)
(7,26,2)
(4,24,2)
(50,38,2)
(4,22,2)
-----------------------------------
(0,dataLen)
(1,data[dataLen] = \\\'\\\\0\\\')
(2,\\\'\\\\0\\\')
(3,data+dataLen)
(4,data[dataLen-1])
(5,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(6,data)
(7,100-dataLen)
(8,dataLen)
(9,data)
(10,data[dataLen])
(11,1)
(12,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(13,dataLen = strlen(data)
(14,printLine("fgets()
(15,)
(16,dataLen)
(17,0)
(18,dataLen)
(19,data)
(20,data)
(21,"fgets()
(22,char * data)
(23,if (fgets(data+dataLen, (int)
(24,dataLen-1)
(25,dataLen)
(26,dataLen = strlen(data)
(27,)
(28,1)
(29,data[dataLen-1] == \\\'\\\\n\\\')
(30,100-dataLen)
(31,\\\'\\\\n\\\')
(32,if (100-dataLen > 1)
(33,NULL)
(34,data[dataLen-1])
(35,)
(36,dataLen)
(37,)
(38,dataLen > 0)
(39,stdin)
(40,RET)
(41,data)
(42,data[dataLen-1] = \\\'\\\\0\\\')
(43,return data;)
(44,(int)
(45,strlen(data)
(46,1)
(47,\\\'\\\\0\\\')
(48,)
(49,)
(50,dataLen-1)
(51,dataLen)
(52,data)
(53,dataLen)
(54,fgets(data+dataLen, (int)
(55,100)
(56,fgets(data+dataLen, (int)
(57,100)
(58,int)
(59,dataLen)
(60,100-dataLen > 1)
(61,strlen(data)
(62,data)
(63,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
