-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalFive==5)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, L"w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
30,31
33,34
34,35
35,36
35,37
35,38
36,37
38,39
41,42
41,43
41,44
42,43
43,44
43,45
44,45
46,47
46,48
49,50
50,51
50,52
51,52
53,54
53,55
53,56
54,55
56,57
59,60
59,61
60,61
60,62
61,62
63,64
65,66
66,67
67,68
67,69
68,69
70,71
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,32,37,39,40,45,47,48,52,55,57,58,62,64,69,71
-----computeFrom-----
23,24
23,25
29,30
29,31
50,51
50,52
60,61
60,62
-----guardedBy-----
62,71
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalFive==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalFive==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
globalFive==5
globalFive
globalFive
5
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, L"w");
pipe = POPEN(data, L"w")
pipe
pipe
POPEN(data, L"w")
POPEN
POPEN
data
data
L"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(18,16,0)
(22,3,0)
(13,7,0)
(8,2,0)
(3,16,0)
(1,16,0)
(9,7,0)
(19,16,0)
(21,1,0)
(17,16,0)
(15,16,0)
(4,15,0)
(12,20,0)
(14,1,0)
(15,1,0)
(6,3,0)
(10,15,0)
(11,2,0)
(5,12,0)
(15,4,1)
(4,10,1)
(10,1,1)
(0,12,1)
(8,11,1)
(15,1,1)
(11,15,1)
(5,7,1)
(13,9,1)
(12,5,1)
(1,14,1)
(9,2,1)
(14,21,1)
(0,7,1)
(7,13,1)
(2,8,1)
(12,7,2)
(5,7,2)
(15,1,2)
-----------------------------------
(0,RET)
(1,data_buf[100] = FULL_COMMAND)
(2,globalFive==5)
(3,)
(4,data_buf)
(5,pipe)
(6,pipe)
(7,pipe != NULL)
(8,5)
(9,pipe)
(10,data)
(11,globalFive)
(12,PCLOSE(pipe)
(13,NULL)
(14,FULL_COMMAND)
(15,data = data_buf)
(16,)
(17,data)
(18,if(globalFive==5)
(19,data_buf)
(20,)
(21,data_buf)
(22,if (pipe != NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
