-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_54_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32spawnl_54b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32spawnl_54_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_54b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32spawnl_54_bad()
CWE78_OS_Command_Injection__char_console_w32spawnl_54_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32spawnl_54b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32spawnl_54b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32spawnl_54b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32spawnl_54b_badSink
CWE78_OS_Command_Injection__char_console_w32spawnl_54b_badSink
data
data
-----joern-----
(41,46,0)
(60,46,0)
(7,46,0)
(8,19,0)
(63,38,0)
(44,19,0)
(23,53,0)
(15,5,0)
(47,16,0)
(57,66,0)
(43,66,0)
(35,54,0)
(64,13,0)
(44,65,0)
(70,54,0)
(60,33,0)
(53,66,0)
(28,65,0)
(2,8,0)
(27,5,0)
(16,19,0)
(29,51,0)
(66,13,0)
(4,33,0)
(12,66,0)
(56,36,0)
(59,38,0)
(28,16,0)
(17,15,0)
(37,57,0)
(62,43,0)
(52,27,0)
(38,66,0)
(15,54,0)
(22,60,0)
(30,2,0)
(61,13,0)
(25,65,0)
(34,65,0)
(45,66,0)
(53,51,0)
(46,60,0)
(70,26,0)
(13,51,0)
(16,28,0)
(5,15,0)
(10,8,0)
(44,66,0)
(6,67,0)
(65,34,0)
(20,70,0)
(66,51,0)
(14,28,0)
(57,19,0)
(38,19,0)
(69,18,0)
(54,43,0)
(18,31,0)
(3,29,0)
(19,57,0)
(67,31,0)
(43,54,0)
(65,44,0)
(19,29,0)
(28,14,0)
(21,44,0)
(46,54,0)
(9,8,0)
(68,55,0)
(32,26,0)
(65,28,0)
(38,67,0)
(24,34,0)
(33,48,0)
(26,27,0)
(54,55,0)
(1,16,0)
(60,66,0)
(40,44,0)
(11,51,0)
(50,70,0)
(49,19,0)
(42,29,0)
(26,70,0)
(5,27,0)
(39,15,0)
(8,2,0)
(27,26,0)
(26,66,0)
(0,51,0)
(65,25,1)
(16,1,1)
(38,66,1)
(23,67,1)
(6,38,1)
(62,35,1)
(9,10,1)
(63,18,1)
(53,23,1)
(32,15,1)
(52,26,1)
(37,49,1)
(65,44,1)
(19,57,1)
(44,66,1)
(57,66,1)
(26,66,1)
(38,59,1)
(53,66,1)
(43,62,1)
(65,28,1)
(34,24,1)
(20,32,1)
(35,34,1)
(66,13,1)
(21,40,1)
(23,2,1)
(70,50,1)
(2,30,1)
(60,66,1)
(28,16,1)
(70,54,1)
(4,60,1)
(5,15,1)
(15,39,1)
(15,54,1)
(28,14,1)
(13,64,1)
(44,21,1)
(66,12,1)
(33,4,1)
(54,43,1)
(16,19,1)
(18,69,1)
(30,8,1)
(22,5,1)
(23,5,1)
(43,66,1)
(17,54,1)
(38,19,1)
(64,61,1)
(46,41,1)
(46,54,1)
(25,28,1)
(45,13,1)
(27,26,1)
(40,2,1)
(10,19,1)
(8,19,1)
(12,45,1)
(5,27,1)
(1,47,1)
(59,63,1)
(60,46,1)
(69,34,1)
(49,66,1)
(39,17,1)
(44,19,1)
(27,52,1)
(2,8,1)
(7,22,1)
(41,7,1)
(67,6,1)
(58,53,1)
(57,37,1)
(34,65,1)
(50,20,1)
(24,65,1)
(23,33,1)
(26,70,1)
(8,9,1)
(47,44,1)
(38,19,2)
(57,66,2)
(22,5,2)
(21,2,2)
(7,5,2)
(24,2,2)
(32,15,2)
(65,28,2)
(26,15,2)
(34,2,2)
(18,34,2)
(1,2,2)
(70,54,2)
(59,34,2)
(17,34,2)
(33,5,2)
(54,34,2)
(40,2,2)
(16,2,2)
(44,66,2)
(27,15,2)
(65,2,2)
(27,26,2)
(39,34,2)
(2,8,2)
(60,46,2)
(70,15,2)
(19,57,2)
(44,19,2)
(60,66,2)
(20,15,2)
(60,5,2)
(52,15,2)
(15,54,2)
(46,5,2)
(4,5,2)
(63,34,2)
(43,66,2)
(41,5,2)
(38,34,2)
(5,34,2)
(26,66,2)
(43,34,2)
(38,66,2)
(28,14,2)
(50,15,2)
(28,16,2)
(54,43,2)
(5,27,2)
(44,2,2)
(65,44,2)
(8,19,2)
(34,65,2)
(26,70,2)
(28,2,2)
(25,2,2)
(15,34,2)
(16,19,2)
(69,34,2)
(35,34,2)
(5,15,2)
(67,34,2)
(62,34,2)
(53,66,2)
(6,34,2)
(46,54,2)
(66,13,2)
(47,2,2)
-----------------------------------
(0,data)
(1,dataLen)
(2,100-dataLen > 1)
(3,dataLen)
(4,\\\'\\\\0\\\')
(5,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(6,\\\'\\\\0\\\')
(7,dataLen)
(8,100-dataLen)
(9,dataLen)
(10,100)
(11,dataBuffer)
(12,dataBuffer)
(13,dataBuffer[100] = COMMAND_ARG2)
(14,int)
(15,dataLen > 0)
(16,100-dataLen)
(17,dataLen)
(18,printLine("fgets()
(19,dataLen = strlen(data)
(20,dataLen)
(21,dataLen)
(22,data)
(23,data)
(24,NULL)
(25,stdin)
(26,data[dataLen-1])
(27,data[dataLen-1] == \\\'\\\\n\\\')
(28,(int)
(29,)
(30,1)
(31,)
(32,data)
(33,data[dataLen-1] = \\\'\\\\0\\\')
(34,fgets(data+dataLen, (int)
(35,dataLen)
(36,)
(37,data)
(38,data[dataLen])
(39,0)
(40,data)
(41,1)
(42,if (100-dataLen > 1)
(43,strlen(data)
(44,data+dataLen)
(45,data)
(46,dataLen-1)
(47,100)
(48,)
(49,dataLen)
(50,1)
(51,)
(52,\\\'\\\\n\\\')
(53,CWE78_OS_Command_Injection__char_console_w32spawnl_54b_badSink(data)
(54,dataLen = strlen(data)
(55,)
(56,if (fgets(data+dataLen, (int)
(57,strlen(data)
(58,RET)
(59,dataLen)
(60,data[dataLen-1])
(61,dataBuffer)
(62,data)
(63,data)
(64,COMMAND_ARG2)
(65,fgets(data+dataLen, (int)
(66,data = dataBuffer)
(67,data[dataLen] = \\\'\\\\0\\\')
(68,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(69,"fgets()
(70,dataLen-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
