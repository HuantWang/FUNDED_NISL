-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_52_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_popen_52b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_52_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_52b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_popen_52_bad()
CWE78_OS_Command_Injection__char_console_popen_52_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_52b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_popen_52b_badSink(data);
CWE78_OS_Command_Injection__char_console_popen_52b_badSink(data)
CWE78_OS_Command_Injection__char_console_popen_52b_badSink
CWE78_OS_Command_Injection__char_console_popen_52b_badSink
data
data
-----joern-----
(13,45,0)
(9,49,0)
(62,37,0)
(4,25,0)
(10,2,0)
(49,45,0)
(28,39,0)
(50,34,0)
(35,49,0)
(44,54,0)
(32,39,0)
(24,16,0)
(45,49,0)
(5,36,0)
(17,11,0)
(42,57,0)
(27,32,0)
(25,4,0)
(35,23,0)
(15,16,0)
(49,35,0)
(46,63,0)
(58,57,0)
(50,11,0)
(67,35,0)
(39,53,0)
(33,42,0)
(4,50,0)
(7,45,0)
(57,3,0)
(4,8,0)
(25,51,0)
(69,34,0)
(48,36,0)
(47,51,0)
(42,39,0)
(38,2,0)
(56,65,0)
(42,50,0)
(65,51,0)
(26,53,0)
(22,50,0)
(14,10,0)
(6,10,0)
(65,23,0)
(39,36,0)
(43,15,0)
(63,39,0)
(10,32,0)
(32,50,0)
(19,25,0)
(41,8,0)
(2,63,0)
(37,50,0)
(59,69,0)
(11,34,0)
(68,34,0)
(55,11,0)
(20,0,0)
(32,10,0)
(16,15,0)
(23,65,0)
(52,65,0)
(69,50,0)
(36,34,0)
(64,31,0)
(51,37,0)
(45,51,0)
(21,42,0)
(23,35,0)
(2,38,0)
(30,63,0)
(63,2,0)
(8,18,0)
(53,39,0)
(16,39,0)
(49,50,0)
(51,0,0)
(10,14,0)
(2,10,0)
(37,51,0)
(31,3,0)
(70,50,0)
(1,34,0)
(12,32,0)
(29,25,0)
(40,4,0)
(61,16,0)
(53,50,0)
(60,14,0)
(35,49,1)
(59,23,1)
(30,32,1)
(55,17,1)
(35,67,1)
(23,35,1)
(62,47,1)
(61,24,1)
(59,57,1)
(63,46,1)
(32,50,1)
(27,15,1)
(39,53,1)
(13,9,1)
(4,25,1)
(14,10,1)
(28,50,1)
(16,61,1)
(60,10,1)
(6,2,1)
(41,4,1)
(8,41,1)
(42,39,1)
(16,39,1)
(59,15,1)
(51,37,1)
(2,38,1)
(45,51,1)
(43,16,1)
(65,51,1)
(7,13,1)
(49,45,1)
(4,50,1)
(12,27,1)
(37,62,1)
(53,50,1)
(19,40,1)
(50,70,1)
(29,19,1)
(22,11,1)
(23,65,1)
(21,33,1)
(69,59,1)
(58,42,1)
(63,39,1)
(32,12,1)
(50,11,1)
(67,49,1)
(26,28,1)
(57,58,1)
(32,39,1)
(46,30,1)
(49,50,1)
(59,8,1)
(10,32,1)
(52,56,1)
(65,52,1)
(33,31,1)
(25,51,1)
(24,39,1)
(47,14,1)
(10,6,1)
(66,69,1)
(14,60,1)
(31,64,1)
(42,50,1)
(42,21,1)
(10,2,1)
(25,29,1)
(11,55,1)
(15,16,1)
(70,22,1)
(2,63,1)
(15,43,1)
(37,50,1)
(40,23,1)
(64,14,1)
(69,50,1)
(9,65,1)
(53,26,1)
(56,51,1)
(45,7,1)
(42,50,2)
(32,15,2)
(23,35,2)
(10,2,2)
(57,14,2)
(31,14,2)
(64,14,2)
(45,65,2)
(69,50,2)
(21,14,2)
(46,15,2)
(58,14,2)
(2,15,2)
(49,50,2)
(65,51,2)
(2,38,2)
(8,23,2)
(9,65,2)
(16,39,2)
(30,15,2)
(63,39,2)
(10,15,2)
(35,49,2)
(2,63,2)
(60,15,2)
(67,65,2)
(14,15,2)
(10,32,2)
(33,14,2)
(4,23,2)
(13,65,2)
(52,14,2)
(15,16,2)
(41,23,2)
(19,23,2)
(47,14,2)
(56,14,2)
(45,51,2)
(49,45,2)
(32,39,2)
(23,65,2)
(7,65,2)
(63,15,2)
(25,23,2)
(50,11,2)
(27,15,2)
(23,14,2)
(53,50,2)
(42,14,2)
(14,10,2)
(51,37,2)
(35,65,2)
(6,15,2)
(25,51,2)
(37,50,2)
(4,25,2)
(62,14,2)
(40,23,2)
(51,14,2)
(37,14,2)
(32,50,2)
(39,53,2)
(29,23,2)
(65,14,2)
(42,39,2)
(4,50,2)
(12,15,2)
(49,65,2)
-----------------------------------
(0,)
(1,data_buf)
(2,(int)
(3,)
(4,data[dataLen-1])
(5,if (100-dataLen > 1)
(6,stdin)
(7,1)
(8,data[dataLen-1] = \\\'\\\\0\\\')
(9,data)
(10,fgets(data+dataLen, (int)
(11,data_buf[100] = FULL_COMMAND)
(12,dataLen)
(13,dataLen)
(14,fgets(data+dataLen, (int)
(15,100-dataLen > 1)
(16,100-dataLen)
(17,data_buf)
(18,)
(19,dataLen)
(20,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(21,dataLen)
(22,data)
(23,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(24,100)
(25,dataLen-1)
(26,data)
(27,data)
(28,dataLen)
(29,1)
(30,100)
(31,printLine("fgets()
(32,data+dataLen)
(33,data)
(34,)
(35,data[dataLen-1] == \\\'\\\\n\\\')
(36,)
(37,strlen(data)
(38,int)
(39,dataLen = strlen(data)
(40,data)
(41,\\\'\\\\0\\\')
(42,data[dataLen])
(43,1)
(44,if (fgets(data+dataLen, (int)
(45,dataLen-1)
(46,dataLen)
(47,dataLen)
(48,dataLen)
(49,data[dataLen-1])
(50,data = data_buf)
(51,dataLen = strlen(data)
(52,0)
(53,strlen(data)
(54,)
(55,FULL_COMMAND)
(56,dataLen)
(57,data[dataLen] = \\\'\\\\0\\\')
(58,\\\'\\\\0\\\')
(59,data)
(60,NULL)
(61,dataLen)
(62,data)
(63,100-dataLen)
(64,"fgets()
(65,dataLen > 0)
(66,RET)
(67,\\\'\\\\n\\\')
(68,data)
(69,CWE78_OS_Command_Injection__char_console_popen_52b_badSink(data)
(70,data_buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
