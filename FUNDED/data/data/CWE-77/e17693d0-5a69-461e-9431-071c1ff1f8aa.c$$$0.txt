-----label-----
0
-----code-----
static void goodG2B1()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(staticReturnsFalse())
    {
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
34,35
34,36
35,36
38,39
39,40
40,41
40,42
40,43
41,42
43,44
46,47
46,48
47,48
47,49
48,49
48,50
49,50
51,52
54,55
54,56
55,56
56,57
56,58
57,58
60,61
61,62
61,63
62,63
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,37,42,44,45,50,52,53,58,59,63,64
-----computeFrom-----
23,24
23,25
47,48
47,49
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B1(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B1()
goodG2B1
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(staticReturnsFalse())    {        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
staticReturnsFalse()
staticReturnsFalse
staticReturnsFalse
{        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");    }
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(24,18,0)
(19,22,0)
(14,28,0)
(11,18,0)
(2,11,0)
(4,18,0)
(9,13,0)
(6,21,0)
(10,11,0)
(12,7,0)
(28,0,0)
(3,12,0)
(1,18,0)
(26,19,0)
(0,2,0)
(21,7,0)
(0,28,0)
(16,2,0)
(23,9,0)
(20,2,0)
(19,2,0)
(2,18,0)
(27,18,0)
(15,11,0)
(17,19,0)
(25,0,0)
(2,16,1)
(0,25,1)
(16,20,1)
(11,10,1)
(25,19,1)
(21,6,1)
(19,26,1)
(5,21,1)
(25,9,1)
(17,8,1)
(20,11,1)
(19,2,1)
(26,17,1)
(3,28,1)
(14,0,1)
(0,2,1)
(2,11,1)
(10,15,1)
(5,28,1)
(23,8,1)
(9,23,1)
(6,12,1)
(28,14,1)
(8,2,1)
(28,0,1)
(12,3,1)
(21,28,2)
(19,2,2)
(6,28,2)
(12,28,2)
(23,8,2)
(9,8,2)
(19,8,2)
(2,11,2)
(26,8,2)
(28,0,2)
(0,2,2)
(17,8,2)
(3,28,2)
-----------------------------------
(0,SYSTEM(data)
(1,if (SYSTEM(data)
(2,data = data_buf)
(3,"command execution failed!")
(4,if(staticReturnsFalse()
(5,RET)
(6,1)
(7,)
(8,staticReturnsFalse()
(9,printLine("Benign, fixed string")
(10,FULL_COMMAND)
(11,data_buf[100] = FULL_COMMAND)
(12,printLine("command execution failed!")
(13,)
(14,0)
(15,data_buf)
(16,data_buf)
(17,data)
(18,)
(19,strcat(data, "*.*")
(20,data)
(21,exit(1)
(22,)
(23,"Benign, fixed string")
(24,data)
(25,data)
(26,"*.*")
(27,data_buf)
(28,SYSTEM(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
