-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, L"w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
54,56
54,57
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,58,60,61,65,68,70,71,75,77,82,84
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
63,64
63,65
73,74
73,75
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B()
goodG2B
{    int h;    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
int h;
int h;
int
h
h
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, L"w");
pipe = POPEN(data, L"w")
pipe
pipe
POPEN(data, L"w")
POPEN
POPEN
data
data
L"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(7,21,0)
(3,14,0)
(27,17,0)
(25,9,0)
(11,9,0)
(10,14,0)
(2,26,0)
(1,17,0)
(22,5,0)
(18,25,0)
(13,9,0)
(26,20,0)
(4,9,0)
(18,9,0)
(8,25,0)
(24,27,0)
(23,18,0)
(19,21,0)
(28,17,0)
(16,9,0)
(15,27,0)
(5,17,0)
(6,18,0)
(0,25,0)
(21,9,0)
(27,17,1)
(3,27,1)
(6,25,1)
(1,18,1)
(2,14,1)
(22,27,1)
(5,22,1)
(12,14,1)
(0,8,1)
(23,6,1)
(17,28,1)
(18,25,1)
(5,17,1)
(14,10,1)
(15,24,1)
(10,3,1)
(24,5,1)
(27,15,1)
(18,23,1)
(12,26,1)
(24,17,1)
(28,1,1)
(26,2,1)
(25,0,1)
(22,27,2)
(5,17,2)
(18,25,2)
(15,27,2)
(26,14,2)
(2,14,2)
(27,27,2)
(5,27,2)
(27,17,2)
(24,27,2)
-----------------------------------
(0,FULL_COMMAND)
(1,h)
(2,pipe)
(3,pipe)
(4,for(h = 0; h < 1; h++)
(5,h++)
(6,data)
(7,pipe)
(8,data_buf)
(9,)
(10,NULL)
(11,h)
(12,RET)
(13,data_buf)
(14,pipe != NULL)
(15,1)
(16,data)
(17,h = 0)
(18,data = data_buf)
(19,if (pipe != NULL)
(20,)
(21,)
(22,h)
(23,data_buf)
(24,h)
(25,data_buf[100] = FULL_COMMAND)
(26,PCLOSE(pipe)
(27,h < 1)
(28,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
