-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnv_15_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    switch(6)
    {
    case 6:
    {
        /* Append input from an environment variable to data */
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* spawnv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
33,35
33,36
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
47,48
47,49
49,50
49,51
49,52
52,53
53,54
53,55
54,55
56,57
58,59
58,60
59,60
59,61
60,61
62,63
64,65
65,66
66,67
66,68
66,69
66,70
67,68
69,70
69,71
70,71
72,73
74,75
76,77
76,78
77,78
77,79
79,80
84,85
85,86
85,87
86,87
90,91
90,92
91,92
92,93
92,94
94,95
94,96
94,97
94,98
98,99
99,100
99,101
99,102
99,103
100,101
102,103
104,105
106,107
108,109
109,110
109,111
109,112
109,113
110,111
112,113
114,115
116,117
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,37,39,43,45,48,50,51,55,57,61,63,68,71,73,75,78,80,81,82,83,87,88,89,93,95,96,97,101,103,105,107,111,113,115,117
-----computeFrom-----
23,24
23,25
59,60
59,61
69,70
69,71
76,77
76,78
77,78
77,79
-----guardedBy-----
61,75
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnv_15_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(6)    {    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
void
CWE78_OS_Command_Injection__char_environment_w32_spawnv_15_bad()
CWE78_OS_Command_Injection__char_environment_w32_spawnv_15_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    switch(6)    {    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
switch(6)    {    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* spawnv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        _spawnv(_P_WAIT, COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(7,37,0)
(36,13,0)
(31,15,0)
(25,49,0)
(49,48,0)
(13,36,0)
(17,18,0)
(13,49,0)
(52,0,0)
(35,4,0)
(39,4,0)
(39,49,0)
(3,23,0)
(4,45,0)
(4,15,0)
(51,0,0)
(30,23,0)
(34,17,0)
(43,17,0)
(32,18,0)
(15,48,0)
(49,25,0)
(37,15,0)
(1,23,0)
(18,0,0)
(21,39,0)
(4,36,0)
(5,1,0)
(28,48,0)
(4,39,0)
(40,31,0)
(19,36,0)
(8,0,0)
(26,44,0)
(20,44,0)
(6,23,0)
(33,48,0)
(44,10,0)
(25,17,0)
(44,51,0)
(12,44,0)
(17,0,0)
(24,0,0)
(22,18,0)
(16,51,0)
(29,39,0)
(15,37,0)
(47,10,0)
(38,13,0)
(27,25,0)
(50,13,0)
(9,23,0)
(36,4,0)
(42,15,0)
(46,49,0)
(14,48,0)
(39,17,0)
(10,51,0)
(48,23,0)
(41,31,0)
(4,15,1)
(12,10,1)
(3,31,1)
(34,18,1)
(18,32,1)
(4,39,1)
(44,20,1)
(44,10,1)
(42,49,1)
(31,41,1)
(49,25,1)
(3,4,1)
(41,40,1)
(11,44,1)
(40,15,1)
(7,42,1)
(25,27,1)
(30,1,1)
(25,17,1)
(47,30,1)
(4,36,1)
(13,49,1)
(46,2,1)
(39,29,1)
(39,49,1)
(1,5,1)
(17,43,1)
(29,21,1)
(47,3,1)
(36,13,1)
(43,34,1)
(20,26,1)
(21,31,1)
(32,22,1)
(17,18,1)
(19,35,1)
(50,38,1)
(10,47,1)
(5,2,1)
(37,7,1)
(26,12,1)
(27,46,1)
(15,37,1)
(35,39,1)
(2,17,1)
(13,50,1)
(39,17,1)
(31,15,1)
(38,19,1)
(44,10,2)
(31,2,2)
(13,49,2)
(25,17,2)
(30,2,2)
(38,31,2)
(50,31,2)
(31,15,2)
(40,2,2)
(36,31,2)
(37,2,2)
(35,31,2)
(4,36,2)
(15,2,2)
(39,17,2)
(17,18,2)
(1,2,2)
(25,2,2)
(19,31,2)
(39,49,2)
(5,2,2)
(41,2,2)
(39,31,2)
(4,39,2)
(29,31,2)
(36,13,2)
(27,2,2)
(49,2,2)
(4,31,2)
(13,31,2)
(4,15,2)
(3,2,2)
(15,37,2)
(46,2,2)
(21,31,2)
(7,2,2)
(49,25,2)
(42,2,2)
-----------------------------------
(0,)
(1,printLine("Benign, fixed string")
(2,6)
(3,break;)
(4,strncat(data+dataLen, environment, 100-dataLen-1)
(5,"Benign, fixed string")
(6,case 6:)
(7,ENV_VARIABLE)
(8,dataBuffer)
(9,default:)
(10,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(11,RET)
(12,_P_WAIT)
(13,dataLen-1)
(14,dataLen)
(15,* environment = GETENV(ENV_VARIABLE)
(16,args)
(17,data = dataBuffer)
(18,dataBuffer[100] = COMMAND_ARG2)
(19,100)
(20,args)
(21,data)
(22,dataBuffer)
(23,)
(24,data)
(25,strlen(data)
(26,COMMAND_INT_PATH)
(27,data)
(28,environment)
(29,dataLen)
(30,break;)
(31,environment != NULL)
(32,COMMAND_ARG2)
(33,if (environment != NULL)
(34,data)
(35,environment)
(36,100-dataLen-1)
(37,GETENV(ENV_VARIABLE)
(38,dataLen)
(39,data+dataLen)
(40,environment)
(41,NULL)
(42,environment)
(43,dataBuffer)
(44,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(45,)
(46,dataLen)
(47,args)
(48,)
(49,dataLen = strlen(data)
(50,1)
(51,)
(52,switch(6)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
