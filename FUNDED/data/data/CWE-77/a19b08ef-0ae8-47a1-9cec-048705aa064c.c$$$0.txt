-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(59,9,0)
(32,49,0)
(49,32,0)
(17,45,0)
(12,10,0)
(25,26,0)
(5,26,0)
(51,18,0)
(13,40,0)
(3,1,0)
(53,17,0)
(14,57,0)
(12,60,0)
(8,5,0)
(36,12,0)
(15,36,0)
(63,5,0)
(44,35,0)
(40,48,0)
(49,12,0)
(32,48,0)
(13,15,0)
(22,35,0)
(7,10,0)
(62,6,0)
(35,9,0)
(46,40,0)
(57,48,0)
(11,62,0)
(18,45,0)
(58,32,0)
(0,2,0)
(38,20,0)
(44,39,0)
(34,39,0)
(57,9,0)
(41,62,0)
(43,46,0)
(42,13,0)
(27,24,0)
(55,6,0)
(6,44,0)
(29,49,0)
(26,5,0)
(31,35,0)
(56,27,0)
(19,40,0)
(15,13,0)
(47,3,0)
(50,57,0)
(46,12,0)
(5,9,0)
(52,49,0)
(44,6,0)
(9,16,0)
(9,3,0)
(6,55,0)
(61,12,0)
(33,20,0)
(37,16,0)
(30,60,0)
(20,48,0)
(40,46,0)
(35,48,0)
(40,13,0)
(16,9,0)
(4,44,0)
(35,44,0)
(28,3,0)
(62,9,0)
(60,12,0)
(20,1,0)
(54,36,0)
(60,48,0)
(6,62,0)
(23,46,0)
(57,17,0)
(16,48,0)
(36,15,0)
(39,44,0)
(21,36,0)
(32,27,0)
(20,33,1)
(51,39,1)
(44,35,1)
(6,55,1)
(8,9,1)
(6,62,1)
(49,12,1)
(25,5,1)
(16,48,1)
(5,63,1)
(37,59,1)
(62,9,1)
(53,57,1)
(42,40,1)
(62,41,1)
(13,42,1)
(57,50,1)
(30,61,1)
(36,54,1)
(61,39,1)
(26,25,1)
(44,6,1)
(43,19,1)
(5,9,1)
(40,48,1)
(33,15,1)
(60,48,1)
(41,11,1)
(44,4,1)
(23,43,1)
(18,51,1)
(20,48,1)
(40,46,1)
(35,48,1)
(50,14,1)
(38,20,1)
(29,58,1)
(57,9,1)
(9,16,1)
(32,48,1)
(16,37,1)
(15,36,1)
(22,31,1)
(35,22,1)
(33,17,1)
(12,60,1)
(4,6,1)
(33,27,1)
(49,52,1)
(36,12,1)
(35,9,1)
(32,49,1)
(11,35,1)
(56,32,1)
(52,29,1)
(63,8,1)
(60,30,1)
(39,44,1)
(31,26,1)
(46,23,1)
(33,26,1)
(58,15,1)
(21,12,1)
(46,12,1)
(27,56,1)
(26,5,1)
(15,13,1)
(34,44,1)
(57,48,1)
(39,34,1)
(17,53,1)
(19,36,1)
(54,21,1)
(14,18,1)
(13,40,1)
(12,60,2)
(29,15,2)
(36,39,2)
(57,48,2)
(35,48,2)
(12,39,2)
(54,39,2)
(15,13,2)
(44,6,2)
(21,39,2)
(43,36,2)
(60,48,2)
(51,39,2)
(6,26,2)
(20,48,2)
(40,36,2)
(57,39,2)
(35,9,2)
(44,26,2)
(36,12,2)
(40,48,2)
(18,39,2)
(9,16,2)
(44,35,2)
(52,15,2)
(16,48,2)
(32,15,2)
(49,12,2)
(11,26,2)
(27,15,2)
(62,26,2)
(26,5,2)
(19,36,2)
(39,26,2)
(32,49,2)
(56,15,2)
(14,39,2)
(4,26,2)
(6,62,2)
(46,12,2)
(53,39,2)
(31,26,2)
(40,46,2)
(35,26,2)
(61,39,2)
(62,9,2)
(42,36,2)
(38,20,2)
(23,36,2)
(34,26,2)
(41,26,2)
(15,39,2)
(17,39,2)
(46,36,2)
(15,36,2)
(5,9,2)
(60,39,2)
(13,40,2)
(30,39,2)
(49,15,2)
(22,26,2)
(13,36,2)
(32,48,2)
(58,15,2)
(6,55,2)
(50,39,2)
(57,9,2)
(39,44,2)
-----------------------------------
(0,if (fgets(data+dataLen, (int)
(1,)
(2,)
(3,)
(4,stdin)
(5,100-dataLen)
(6,(int)
(7,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(8,100)
(9,dataLen = strlen(data)
(10,)
(11,100)
(12,dataLen = strlen(data)
(13,data[dataLen-1] == \\\'\\\\n\\\')
(14,data)
(15,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(16,strlen(data)
(17,data[dataLen] = \\\'\\\\0\\\')
(18,printLine("fgets()
(19,data)
(20,return data;)
(21,dataLen)
(22,dataLen)
(23,1)
(24,)
(25,1)
(26,100-dataLen > 1)
(27,data[dataLen-1] = \\\'\\\\0\\\')
(28,dataLen)
(29,dataLen)
(30,data)
(31,data)
(32,data[dataLen-1])
(33,data)
(34,NULL)
(35,data+dataLen)
(36,dataLen > 0)
(37,data)
(38,RET)
(39,fgets(data+dataLen, (int)
(40,data[dataLen-1])
(41,dataLen)
(42,\\\'\\\\n\\\')
(43,dataLen)
(44,fgets(data+dataLen, (int)
(45,)
(46,dataLen-1)
(47,if (100-dataLen > 1)
(48,char * data)
(49,dataLen-1)
(50,dataLen)
(51,"fgets()
(52,1)
(53,\\\'\\\\0\\\')
(54,0)
(55,int)
(56,\\\'\\\\0\\\')
(57,data[dataLen])
(58,data)
(59,dataLen)
(60,strlen(data)
(61,dataLen)
(62,100-dataLen)
(63,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
