-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Append input from an environment variable to data */
        size_t dataLen = strlen(data);
        char * environment = GETENV(ENV_VARIABLE);
        /* If there is data in the environment variable */
        if (environment != NULL)
        {
            /* POTENTIAL FLAW: Read data from an environment variable */
            strncat(data+dataLen, environment, 100-dataLen-1);
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
28,29
28,30
28,31
31,32
32,33
32,34
33,34
35,36
37,38
37,39
38,39
38,40
39,40
41,42
43,44
44,45
45,46
45,47
45,48
45,49
46,47
48,49
48,50
49,50
51,52
53,54
55,56
55,57
56,57
56,58
58,59
61,62
62,63
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,27,29,30,34,36,40,42,47,50,52,54,57,59,60,63
-----computeFrom-----
38,39
38,40
48,49
48,50
55,56
55,57
56,57
56,58
-----guardedBy-----
40,54
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }    return data;}
{        /* Append input from an environment variable to data */        size_t dataLen = strlen(data);        char * environment = GETENV(ENV_VARIABLE);        /* If there is data in the environment variable */        if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)        {            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
environment != NULL
environment
environment
NULL
NULL
{            /* POTENTIAL FLAW: Read data from an environment variable */            strncat(data+dataLen, environment, 100-dataLen-1);        }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
return data;
data
data
-----joern-----
(29,3,0)
(22,21,0)
(3,0,0)
(7,23,0)
(24,23,0)
(30,18,0)
(23,21,0)
(12,18,0)
(9,26,0)
(13,15,0)
(15,30,0)
(28,21,0)
(4,5,0)
(1,27,0)
(6,30,0)
(2,7,0)
(23,7,0)
(27,0,0)
(27,7,0)
(21,0,0)
(19,5,0)
(21,17,0)
(25,26,0)
(14,0,0)
(26,17,0)
(20,15,0)
(30,5,0)
(5,8,0)
(26,8,0)
(0,3,0)
(18,30,0)
(0,5,0)
(3,17,0)
(23,10,0)
(23,30,0)
(7,27,0)
(11,27,0)
(16,5,0)
(21,23,0)
(11,1,1)
(2,24,1)
(22,15,1)
(21,0,1)
(23,21,1)
(21,28,1)
(26,25,1)
(28,22,1)
(15,13,1)
(3,29,1)
(23,7,1)
(25,15,1)
(20,30,1)
(13,20,1)
(30,18,1)
(9,26,1)
(7,27,1)
(23,30,1)
(3,17,1)
(6,0,1)
(1,2,1)
(29,14,1)
(25,23,1)
(26,17,1)
(12,6,1)
(18,12,1)
(21,17,1)
(27,11,1)
(15,30,1)
(27,0,1)
(24,21,1)
(0,3,1)
(0,3,2)
(21,15,2)
(15,30,2)
(23,15,2)
(27,15,2)
(21,0,2)
(1,15,2)
(26,17,2)
(27,0,2)
(24,15,2)
(7,15,2)
(21,17,2)
(28,15,2)
(11,15,2)
(9,26,2)
(23,21,2)
(7,27,2)
(3,17,2)
(2,15,2)
(23,7,2)
(30,18,2)
(23,30,2)
(22,15,2)
-----------------------------------
(0,dataLen = strlen(data)
(1,dataLen)
(2,100)
(3,strlen(data)
(4,dataLen)
(5,)
(6,environment)
(7,100-dataLen-1)
(8,)
(9,RET)
(10,)
(11,1)
(12,ENV_VARIABLE)
(13,NULL)
(14,dataLen)
(15,environment != NULL)
(16,if (environment != NULL)
(17,char * data)
(18,GETENV(ENV_VARIABLE)
(19,environment)
(20,environment)
(21,data+dataLen)
(22,data)
(23,strncat(data+dataLen, environment, 100-dataLen-1)
(24,environment)
(25,data)
(26,return data;)
(27,dataLen-1)
(28,dataLen)
(29,data)
(30,* environment = GETENV(ENV_VARIABLE)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
