-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    goto source;
source:
    /* FIX: Append a fixed string to data (not user / external input) */
    wcscat(data, L"*.*");
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
30,31
30,32
32,33
33,34
33,35
33,36
34,35
36,37
39,40
39,41
40,41
40,42
41,42
41,43
42,43
44,45
47,48
47,49
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,31,35,37,38,43,45,46,51,52,56,57
-----computeFrom-----
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    goto source;source:    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    goto source;source:    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
goto source;
source
source:    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");
source
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(0,17,0)
(20,8,0)
(2,3,0)
(10,15,0)
(2,5,0)
(8,2,0)
(15,8,0)
(4,5,0)
(21,0,0)
(14,5,0)
(19,5,0)
(12,2,0)
(16,2,0)
(6,5,0)
(1,3,0)
(11,9,0)
(7,3,0)
(3,5,0)
(18,5,0)
(8,15,0)
(9,17,0)
(12,16,1)
(15,8,1)
(3,1,1)
(15,10,1)
(11,0,1)
(2,12,1)
(20,14,1)
(10,8,1)
(1,7,1)
(16,3,1)
(8,20,1)
(14,2,1)
(13,15,1)
(0,21,1)
(9,11,1)
(8,2,1)
(2,3,1)
(21,15,1)
(13,9,1)
(9,15,2)
(15,8,2)
(8,2,2)
(2,3,2)
(0,15,2)
(21,15,2)
(11,15,2)
-----------------------------------
(0,printLine("command execution failed!")
(1,FULL_COMMAND)
(2,data = data_buf)
(3,data_buf[100] = FULL_COMMAND)
(4,data)
(5,)
(6,source:)
(7,data_buf)
(8,SYSTEM(data)
(9,exit(1)
(10,0)
(11,1)
(12,data_buf)
(13,RET)
(14,goto source;)
(15,SYSTEM(data)
(16,data)
(17,)
(18,if (SYSTEM(data)
(19,data_buf)
(20,data)
(21,"command execution failed!")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
