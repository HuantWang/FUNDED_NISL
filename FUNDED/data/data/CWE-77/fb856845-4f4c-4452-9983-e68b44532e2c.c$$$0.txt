-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
54,56
55,56
55,57
56,57
56,58
57,58
59,60
62,63
62,64
63,64
64,65
64,66
65,66
68,69
69,70
69,71
70,71
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,58,60,61,66,67,71,72
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
55,56
55,57
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    int h;    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B()
goodG2B
{    int h;    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
int h;
int h;
int
h
h
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(30,27,0)
(28,13,0)
(6,9,0)
(25,5,0)
(16,13,0)
(12,25,0)
(11,13,0)
(31,13,0)
(29,28,0)
(14,7,0)
(27,30,0)
(26,9,0)
(27,28,0)
(1,27,0)
(4,10,0)
(33,13,0)
(32,20,0)
(9,28,0)
(28,15,0)
(0,10,0)
(21,28,0)
(22,10,0)
(3,13,0)
(18,4,0)
(15,13,0)
(23,15,0)
(24,30,0)
(9,8,0)
(19,20,0)
(17,15,0)
(7,5,0)
(20,10,0)
(22,0,1)
(26,20,1)
(27,1,1)
(23,17,1)
(9,28,1)
(18,9,1)
(4,10,1)
(2,25,1)
(19,32,1)
(14,30,1)
(32,4,1)
(15,23,1)
(10,22,1)
(9,6,1)
(12,7,1)
(7,14,1)
(1,20,1)
(28,21,1)
(30,24,1)
(25,12,1)
(24,27,1)
(27,28,1)
(20,10,1)
(30,27,1)
(20,19,1)
(2,30,1)
(28,15,1)
(29,15,1)
(21,29,1)
(4,18,1)
(0,28,1)
(32,10,1)
(6,26,1)
(4,20,2)
(20,20,2)
(18,20,2)
(14,30,2)
(12,30,2)
(28,15,2)
(9,28,2)
(9,20,2)
(32,20,2)
(6,20,2)
(27,28,2)
(20,10,2)
(19,20,2)
(25,30,2)
(4,10,2)
(7,30,2)
(30,27,2)
(26,20,2)
-----------------------------------
(0,h)
(1,data)
(2,RET)
(3,data_buf)
(4,h++)
(5,)
(6,"*.*")
(7,printLine("command execution failed!")
(8,)
(9,strcat(data, "*.*")
(10,h = 0)
(11,if (SYSTEM(data)
(12,1)
(13,)
(14,"command execution failed!")
(15,data_buf[100] = FULL_COMMAND)
(16,data)
(17,data_buf)
(18,h)
(19,1)
(20,h < 1)
(21,data_buf)
(22,0)
(23,FULL_COMMAND)
(24,0)
(25,exit(1)
(26,data)
(27,SYSTEM(data)
(28,data = data_buf)
(29,data)
(30,SYSTEM(data)
(31,h)
(32,h)
(33,for(h = 0; h < 1; h++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
