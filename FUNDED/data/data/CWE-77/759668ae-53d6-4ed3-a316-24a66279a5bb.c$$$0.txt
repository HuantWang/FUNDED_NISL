-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_15_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    switch(6)
    {
    case 6:
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
33,35
34,35
35,36
35,37
36,37
38,39
38,40
40,41
41,42
41,43
42,43
44,45
46,47
46,48
47,48
47,49
48,49
48,50
50,51
53,54
54,55
54,56
54,57
55,56
55,57
56,57
56,58
56,59
56,60
57,58
59,60
59,61
60,61
62,63
64,65
64,66
65,66
65,67
68,69
69,70
69,71
71,72
73,74
75,76
77,78
77,79
78,79
79,80
79,81
80,81
82,83
82,84
83,84
85,86
87,88
87,89
88,89
88,90
89,90
89,91
90,91
93,94
93,95
94,95
94,96
95,96
97,98
97,99
98,99
102,103
103,104
104,105
104,106
105,106
105,107
106,107
108,109
108,110
109,110
113,114
113,115
114,115
115,116
115,117
116,117
119,120
120,121
120,122
121,122
121,123
122,123
124,125
129,130
130,131
130,132
131,132
135,136
135,137
135,138
136,137
137,138
137,139
138,139
140,141
140,142
143,144
144,145
144,146
145,146
147,148
147,149
147,150
148,149
150,151
153,154
153,155
154,155
154,156
155,156
157,158
159,160
160,161
161,162
161,163
162,163
164,165
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,37,39,43,45,49,51,52,58,61,63,66,67,70,72,74,76,81,84,86,91,92,96,99,100,101,107,110,111,112,117,118,123,125,126,127,128,132,133,134,139,141,142,146,149,151,152,156,158,163,165
-----computeFrom-----
23,24
23,25
47,48
47,49
48,49
48,50
55,56
55,57
59,60
59,61
69,70
69,71
79,80
79,81
88,89
88,90
89,90
89,91
93,94
93,95
97,98
97,99
104,105
104,106
108,109
108,110
120,121
120,122
144,145
144,146
154,155
154,156
-----guardedBy-----
51,125
61,107
72,110
96,107
99,110
156,165
-----guardedByNegation-----
61,123
72,125
-----lastLexicalUse-----
61,123
72,125
-----jump-----
61,123
72,125
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_15_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
void
CWE78_OS_Command_Injection__char_console_popen_15_bad()
CWE78_OS_Command_Injection__char_console_popen_15_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
switch(6)    {    case 6:    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(27,32,0)
(39,28,0)
(0,66,0)
(52,20,0)
(16,30,0)
(20,12,0)
(75,68,0)
(80,25,0)
(15,28,0)
(22,81,0)
(91,25,0)
(49,45,0)
(54,61,0)
(78,53,0)
(56,89,0)
(87,44,0)
(73,44,0)
(70,32,0)
(44,4,0)
(38,59,0)
(25,61,0)
(20,67,0)
(66,0,0)
(51,65,0)
(59,12,0)
(58,51,0)
(82,65,0)
(83,0,0)
(60,30,0)
(35,7,0)
(53,67,0)
(12,91,0)
(8,61,0)
(24,61,0)
(32,51,0)
(23,20,0)
(32,27,0)
(48,61,0)
(0,51,0)
(28,72,0)
(12,60,0)
(4,44,0)
(45,72,0)
(11,12,0)
(46,77,0)
(59,25,0)
(47,30,0)
(88,60,0)
(6,66,0)
(65,25,0)
(2,25,0)
(84,30,0)
(4,6,0)
(43,48,0)
(22,12,0)
(29,72,0)
(53,78,0)
(72,48,0)
(86,53,0)
(71,61,0)
(67,20,0)
(10,54,0)
(33,22,0)
(18,48,0)
(50,6,0)
(65,51,0)
(1,30,0)
(63,78,0)
(59,77,0)
(13,30,0)
(69,55,0)
(74,85,0)
(5,60,0)
(77,64,0)
(72,28,0)
(17,54,0)
(66,25,0)
(27,85,0)
(41,91,0)
(25,54,0)
(89,53,0)
(7,64,0)
(89,25,0)
(26,27,0)
(28,25,0)
(36,81,0)
(53,89,0)
(81,22,0)
(27,25,0)
(40,67,0)
(51,68,0)
(79,22,0)
(44,51,0)
(67,40,0)
(91,12,0)
(89,12,0)
(6,4,0)
(31,47,0)
(76,59,0)
(66,6,0)
(14,89,0)
(21,0,0)
(37,32,0)
(19,29,0)
(57,66,0)
(67,53,0)
(42,29,0)
(90,72,0)
(45,62,0)
(85,3,0)
(63,53,1)
(42,72,1)
(12,91,1)
(14,56,1)
(67,40,1)
(59,25,1)
(89,14,1)
(16,47,1)
(91,25,1)
(53,67,1)
(83,57,1)
(85,74,1)
(65,82,1)
(0,21,1)
(66,0,1)
(38,7,1)
(53,86,1)
(6,66,1)
(4,44,1)
(22,33,1)
(20,12,1)
(81,22,1)
(17,10,1)
(25,54,1)
(74,27,1)
(22,12,1)
(34,45,1)
(29,72,1)
(23,52,1)
(58,78,1)
(44,51,1)
(41,11,1)
(32,37,1)
(27,32,1)
(15,39,1)
(28,25,1)
(56,81,1)
(19,42,1)
(32,51,1)
(20,23,1)
(7,35,1)
(91,41,1)
(44,73,1)
(4,6,1)
(25,2,1)
(33,79,1)
(72,28,1)
(89,25,1)
(82,58,1)
(27,25,1)
(2,80,1)
(80,54,1)
(31,9,1)
(45,49,1)
(46,59,1)
(73,87,1)
(84,77,1)
(67,20,1)
(66,25,1)
(76,38,1)
(90,16,1)
(81,36,1)
(36,22,1)
(70,26,1)
(65,25,1)
(78,53,1)
(11,9,1)
(9,25,1)
(87,51,1)
(49,29,1)
(29,19,1)
(59,76,1)
(59,12,1)
(35,78,1)
(57,44,1)
(79,12,1)
(0,51,1)
(26,4,1)
(21,83,1)
(89,12,1)
(37,70,1)
(84,4,1)
(52,89,1)
(53,89,1)
(77,46,1)
(51,65,1)
(34,29,1)
(86,67,1)
(84,85,1)
(90,84,1)
(78,63,1)
(28,15,1)
(50,66,1)
(47,31,1)
(6,50,1)
(39,90,1)
(84,81,1)
(45,72,1)
(54,17,1)
(53,67,2)
(89,81,2)
(32,51,2)
(44,51,2)
(26,4,2)
(83,44,2)
(29,72,2)
(66,44,2)
(67,20,2)
(32,4,2)
(82,78,2)
(89,25,2)
(6,66,2)
(12,9,2)
(77,78,2)
(51,78,2)
(91,25,2)
(89,12,2)
(59,78,2)
(47,9,2)
(45,72,2)
(31,9,2)
(72,28,2)
(0,51,2)
(37,4,2)
(20,12,2)
(14,81,2)
(12,91,2)
(85,4,2)
(87,78,2)
(6,44,2)
(22,12,2)
(66,25,2)
(35,78,2)
(36,9,2)
(78,53,2)
(65,78,2)
(67,81,2)
(91,9,2)
(27,4,2)
(23,81,2)
(4,44,2)
(27,25,2)
(67,40,2)
(59,12,2)
(27,32,2)
(4,78,2)
(57,44,2)
(59,25,2)
(81,9,2)
(44,78,2)
(74,4,2)
(33,9,2)
(51,65,2)
(41,9,2)
(28,25,2)
(84,9,2)
(53,89,2)
(25,54,2)
(49,29,2)
(50,44,2)
(46,78,2)
(81,22,2)
(63,81,2)
(70,4,2)
(22,9,2)
(76,78,2)
(86,81,2)
(53,81,2)
(73,78,2)
(11,9,2)
(20,81,2)
(58,78,2)
(56,81,2)
(0,44,2)
(65,25,2)
(45,29,2)
(78,81,2)
(21,44,2)
(66,0,2)
(16,9,2)
(38,78,2)
(4,6,2)
(7,78,2)
(79,9,2)
(52,81,2)
-----------------------------------
(0,dataLen-1)
(1,case 6:)
(2,data_buf)
(3,)
(4,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(5,dataLen)
(6,data[dataLen-1] == \\\'\\\\n\\\')
(7,printLine("fgets()
(8,data)
(9,6)
(10,data_buf)
(11,dataLen)
(12,dataLen = strlen(data)
(13,default:)
(14,dataLen)
(15,"w")
(16,break;)
(17,FULL_COMMAND)
(18,if (pipe != NULL)
(19,NULL)
(20,100-dataLen)
(21,1)
(22,100-dataLen)
(23,dataLen)
(24,data_buf)
(25,data = data_buf)
(26,data)
(27,data[dataLen-1])
(28,POPEN(data, "w")
(29,pipe != NULL)
(30,)
(31,"Benign, fixed string")
(32,dataLen-1)
(33,dataLen)
(34,RET)
(35,"fgets()
(36,1)
(37,1)
(38,data)
(39,data)
(40,int)
(41,data)
(42,pipe)
(43,pipe)
(44,dataLen > 0)
(45,PCLOSE(pipe)
(46,\\\'\\\\0\\\')
(47,printLine("Benign, fixed string")
(48,)
(49,pipe)
(50,\\\'\\\\n\\\')
(51,dataLen = strlen(data)
(52,100)
(53,fgets(data+dataLen, (int)
(54,data_buf[100] = FULL_COMMAND)
(55,)
(56,data)
(57,data)
(58,dataLen)
(59,data[dataLen])
(60,)
(61,)
(62,)
(63,NULL)
(64,)
(65,strlen(data)
(66,data[dataLen-1])
(67,(int)
(68,)
(69,if (fgets(data+dataLen, (int)
(70,dataLen)
(71,switch(6)
(72,pipe = POPEN(data, "w")
(73,0)
(74,\\\'\\\\0\\\')
(75,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(76,dataLen)
(77,data[dataLen] = \\\'\\\\0\\\')
(78,fgets(data+dataLen, (int)
(79,100)
(80,data)
(81,100-dataLen > 1)
(82,data)
(83,dataLen)
(84,break;)
(85,data[dataLen-1] = \\\'\\\\0\\\')
(86,stdin)
(87,dataLen)
(88,if (100-dataLen > 1)
(89,data+dataLen)
(90,pipe)
(91,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
