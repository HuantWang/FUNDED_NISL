-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execv - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECV(COMMAND_INT_PATH, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
41,42
42,43
42,44
42,45
43,44
45,46
48,49
48,50
49,50
50,51
50,52
52,53
52,54
52,55
52,56
56,57
57,58
57,59
57,60
57,61
58,59
60,61
62,63
64,65
66,67
67,68
67,69
67,70
68,69
70,71
72,73
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,38,39,44,46,47,51,53,54,55,59,61,63,65,69,71,73
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execv - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECV(COMMAND_INT_PATH, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECV(COMMAND_INT_PATH, args);
EXECV(COMMAND_INT_PATH, args)
EXECV
EXECV
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(4,17,0)
(11,15,0)
(19,7,0)
(25,17,0)
(9,7,0)
(21,24,0)
(6,12,0)
(5,2,0)
(26,12,0)
(24,22,0)
(23,24,0)
(7,8,0)
(15,12,0)
(14,8,0)
(13,8,0)
(8,17,0)
(2,7,0)
(24,7,0)
(0,17,0)
(12,17,0)
(16,2,0)
(7,17,0)
(6,15,0)
(2,18,0)
(1,6,0)
(3,6,0)
(15,11,1)
(10,7,1)
(1,3,1)
(7,9,1)
(9,19,1)
(11,2,1)
(6,1,1)
(8,13,1)
(11,24,1)
(16,5,1)
(3,15,1)
(21,23,1)
(6,15,1)
(20,6,1)
(5,10,1)
(24,21,1)
(2,16,1)
(23,10,1)
(7,8,1)
(24,7,1)
(2,7,1)
(13,14,1)
(19,8,1)
(2,10,2)
(7,8,2)
(2,7,2)
(23,10,2)
(6,15,2)
(24,7,2)
(16,10,2)
(21,10,2)
(5,10,2)
(24,10,2)
-----------------------------------
(0,dataBuffer)
(1,args)
(2,strcat(data, "*.*")
(3,COMMAND_INT_PATH)
(4,if(globalReturnsTrueOrFalse()
(5,data)
(6,EXECV(COMMAND_INT_PATH, args)
(7,data = dataBuffer)
(8,dataBuffer[100] = COMMAND_ARG2)
(9,dataBuffer)
(10,globalReturnsTrueOrFalse()
(11,args)
(12,)
(13,COMMAND_ARG2)
(14,dataBuffer)
(15,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(16,"*.*")
(17,)
(18,)
(19,data)
(20,RET)
(21,"*.*")
(22,)
(23,data)
(24,strcat(data, "*.*")
(25,data)
(26,args)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
