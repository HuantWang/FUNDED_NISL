-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    /* FIX: Append a fixed string to data (not user / external input) */
    strcat(data, "*.*");
    {
        char * dataCopy = data;
        char * data = dataCopy;
        {
            FILE *pipe;
            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
            pipe = POPEN(data, "w");
            if (pipe != NULL)
            {
                PCLOSE(pipe);
            }
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
35,38
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
54,55
54,56
54,57
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,38,40,41,44,47,49,50,53,58,60,61,65,68,70,71,75,77,82,84
-----computeFrom-----
23,24
23,25
63,64
63,65
73,74
73,75
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char * dataCopy = data;        char * data = dataCopy;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
static void
goodG2B()
goodG2B
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char * dataCopy = data;        char * data = dataCopy;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char * dataCopy = data;        char * data = dataCopy;        {            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
{            FILE *pipe;            /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */            pipe = POPEN(data, "w");            if (pipe != NULL)            {                PCLOSE(pipe);            }        }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)            {                PCLOSE(pipe);            }
pipe != NULL
pipe
pipe
NULL
NULL
{                PCLOSE(pipe);            }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(26,25,0)
(32,26,0)
(31,13,0)
(21,34,0)
(15,12,0)
(3,25,0)
(7,11,0)
(27,12,0)
(22,10,0)
(26,7,0)
(12,28,0)
(25,12,0)
(9,26,0)
(19,30,0)
(34,33,0)
(35,33,0)
(11,13,0)
(13,33,0)
(30,7,0)
(28,34,0)
(28,33,0)
(23,7,0)
(10,33,0)
(16,30,0)
(7,26,0)
(18,28,0)
(29,34,0)
(10,28,0)
(25,13,0)
(14,7,0)
(12,13,0)
(17,13,0)
(4,33,0)
(24,11,0)
(2,23,0)
(23,20,0)
(5,28,0)
(1,10,0)
(6,11,0)
(0,25,0)
(22,1,1)
(21,29,1)
(26,32,1)
(8,23,1)
(30,19,1)
(12,27,1)
(15,10,1)
(2,30,1)
(27,15,1)
(16,7,1)
(34,21,1)
(19,16,1)
(23,7,1)
(23,2,1)
(18,5,1)
(5,34,1)
(25,12,1)
(9,14,1)
(0,12,1)
(10,22,1)
(25,3,1)
(26,25,1)
(7,26,1)
(10,28,1)
(32,9,1)
(1,28,1)
(3,0,1)
(14,25,1)
(28,34,1)
(28,18,1)
(12,28,1)
(8,30,1)
(30,7,1)
(10,28,2)
(26,25,2)
(23,30,2)
(7,26,2)
(30,7,2)
(2,30,2)
(28,34,2)
(25,12,2)
(23,7,2)
(12,28,2)
-----------------------------------
(0,data)
(1,data)
(2,pipe)
(3,dataCopy)
(4,data)
(5,data)
(6,if (pipe != NULL)
(7,pipe = POPEN(data, "w")
(8,RET)
(9,data)
(10,strcat(data, "*.*")
(11,)
(12,* dataCopy = data)
(13,)
(14,pipe)
(15,dataCopy)
(16,pipe)
(17,dataCopy)
(18,data_buf)
(19,NULL)
(20,)
(21,FULL_COMMAND)
(22,"*.*")
(23,PCLOSE(pipe)
(24,pipe)
(25,* data = dataCopy)
(26,POPEN(data, "w")
(27,data)
(28,data = data_buf)
(29,data_buf)
(30,pipe != NULL)
(31,data)
(32,"w")
(33,)
(34,data_buf[100] = FULL_COMMAND)
(35,data_buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
