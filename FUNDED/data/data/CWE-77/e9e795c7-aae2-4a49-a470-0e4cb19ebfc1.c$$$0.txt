-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_w32spawnl_22_badSource(char * data)
{
    if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
29,31
30,31
30,32
31,32
31,33
33,34
36,37
37,38
37,39
37,40
38,39
38,40
39,40
39,41
39,42
39,43
40,41
42,43
42,44
43,44
45,46
47,48
47,49
48,49
48,50
51,52
52,53
52,54
54,55
56,57
58,59
60,61
60,62
61,62
62,63
62,64
63,64
65,66
65,67
66,67
68,69
70,71
70,72
71,72
71,73
72,73
72,74
73,74
76,77
76,78
77,78
77,79
78,79
80,81
80,82
81,82
85,86
86,87
87,88
87,89
88,89
88,90
89,90
91,92
91,93
92,93
96,97
96,98
97,98
98,99
98,100
99,100
102,103
103,104
103,105
104,105
104,106
105,106
107,108
110,111
111,112
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,32,34,35,41,44,46,49,50,53,55,57,59,64,67,69,74,75,79,82,83,84,90,93,94,95,100,101,106,108,109,112
-----computeFrom-----
30,31
30,32
31,32
31,33
38,39
38,40
42,43
42,44
52,53
52,54
62,63
62,64
71,72
71,73
72,73
72,74
76,77
76,78
80,81
80,82
87,88
87,89
91,92
91,93
103,104
103,105
-----guardedBy-----
34,108
44,90
55,93
79,90
82,93
-----guardedByNegation-----
44,106
55,108
-----lastLexicalUse-----
44,106
55,108
-----jump-----
44,106
55,108
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_w32spawnl_22_badSource(char * data){    if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_w32spawnl_22_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_w32spawnl_22_badSource
char * data
char
* data
*
data
{    if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    return data;}
if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal
CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(14,4,0)
(62,6,0)
(59,12,0)
(11,6,0)
(51,55,0)
(21,2,0)
(47,57,0)
(8,4,0)
(4,12,0)
(26,37,0)
(64,24,0)
(7,40,0)
(7,6,0)
(42,5,0)
(30,40,0)
(5,4,0)
(61,18,0)
(40,48,0)
(16,48,0)
(63,5,0)
(53,58,0)
(15,24,0)
(50,62,0)
(28,63,0)
(11,40,0)
(12,6,0)
(41,31,0)
(24,58,0)
(12,4,0)
(34,14,0)
(65,2,0)
(20,18,0)
(46,11,0)
(22,8,0)
(4,10,0)
(32,11,0)
(29,5,0)
(39,6,0)
(14,39,0)
(49,2,0)
(27,61,0)
(31,40,0)
(31,6,0)
(3,20,0)
(63,6,0)
(11,53,0)
(33,53,0)
(43,48,0)
(58,53,0)
(57,63,0)
(2,40,0)
(5,63,0)
(54,39,0)
(63,57,0)
(58,24,0)
(57,22,0)
(45,7,0)
(24,40,0)
(39,37,0)
(62,60,0)
(38,60,0)
(52,58,0)
(9,31,0)
(1,53,0)
(25,65,0)
(17,8,0)
(19,8,0)
(48,13,0)
(37,0,0)
(58,52,0)
(23,14,0)
(40,7,0)
(39,14,0)
(44,1,0)
(53,1,0)
(53,11,0)
(35,10,0)
(22,57,0)
(31,20,0)
(56,62,0)
(66,4,0)
(2,65,0)
(8,22,0)
(62,50,1)
(24,40,1)
(61,27,1)
(57,63,1)
(29,28,1)
(27,1,1)
(15,11,1)
(58,52,1)
(30,36,1)
(26,39,1)
(42,29,1)
(22,57,1)
(40,7,1)
(9,61,1)
(19,4,1)
(24,64,1)
(12,59,1)
(1,53,1)
(33,58,1)
(50,22,1)
(17,19,1)
(56,62,1)
(7,45,1)
(8,17,1)
(31,41,1)
(14,23,1)
(11,40,1)
(31,40,1)
(64,15,1)
(5,42,1)
(53,33,1)
(4,12,1)
(50,37,1)
(59,66,1)
(66,1,1)
(1,44,1)
(37,26,1)
(34,54,1)
(11,6,1)
(23,34,1)
(25,2,1)
(7,6,1)
(39,6,1)
(44,53,1)
(50,36,1)
(47,63,1)
(46,65,1)
(58,24,1)
(3,31,1)
(14,4,1)
(31,6,1)
(63,5,1)
(62,6,1)
(57,47,1)
(8,4,1)
(21,49,1)
(53,58,1)
(45,30,1)
(65,25,1)
(53,11,1)
(22,8,1)
(11,32,1)
(41,9,1)
(39,14,1)
(2,40,1)
(20,3,1)
(12,6,1)
(54,22,1)
(50,20,1)
(5,4,1)
(32,46,1)
(65,2,1)
(28,8,1)
(2,21,1)
(49,40,1)
(63,6,1)
(50,65,1)
(39,6,2)
(57,8,2)
(41,1,2)
(31,40,2)
(9,1,2)
(30,36,2)
(47,8,2)
(58,24,2)
(34,22,2)
(22,57,2)
(5,4,2)
(14,22,2)
(23,22,2)
(59,1,2)
(28,8,2)
(65,2,2)
(58,52,2)
(11,40,2)
(8,4,2)
(21,36,2)
(31,6,2)
(53,65,2)
(12,6,2)
(17,1,2)
(57,63,2)
(19,1,2)
(7,36,2)
(66,1,2)
(58,65,2)
(22,1,2)
(31,1,2)
(53,11,2)
(14,4,2)
(40,36,2)
(22,8,2)
(12,1,2)
(56,62,2)
(20,1,2)
(37,22,2)
(33,65,2)
(2,36,2)
(45,36,2)
(39,22,2)
(49,36,2)
(63,8,2)
(25,36,2)
(29,8,2)
(54,22,2)
(40,7,2)
(46,65,2)
(11,65,2)
(5,8,2)
(2,40,2)
(63,5,2)
(64,65,2)
(26,22,2)
(4,12,2)
(32,65,2)
(39,14,2)
(4,1,2)
(61,1,2)
(65,36,2)
(27,1,2)
(44,65,2)
(15,65,2)
(24,40,2)
(24,65,2)
(53,58,2)
(8,1,2)
(62,6,2)
(3,1,2)
(1,65,2)
(11,6,2)
(42,8,2)
(1,53,2)
(63,6,2)
(7,6,2)
-----------------------------------
(0,)
(1,fgets(data+dataLen, (int)
(2,100-dataLen)
(3,\\\'\\\\0\\\')
(4,dataLen = strlen(data)
(5,dataLen-1)
(6,char * data)
(7,strlen(data)
(8,dataLen > 0)
(9,data)
(10,)
(11,data+dataLen)
(12,strlen(data)
(13,)
(14,dataLen-1)
(15,100)
(16,dataLen)
(17,0)
(18,)
(19,dataLen)
(20,data[dataLen] = \\\'\\\\0\\\')
(21,dataLen)
(22,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(23,1)
(24,100-dataLen)
(25,1)
(26,\\\'\\\\0\\\')
(27,"fgets()
(28,data)
(29,dataLen)
(30,dataLen)
(31,data[dataLen])
(32,dataLen)
(33,stdin)
(34,dataLen)
(35,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(36,CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)
(37,data[dataLen-1] = \\\'\\\\0\\\')
(38,if(CWE78_OS_Command_Injection__char_console_w32spawnl_22_badGlobal)
(39,data[dataLen-1])
(40,dataLen = strlen(data)
(41,dataLen)
(42,1)
(43,if (100-dataLen > 1)
(44,NULL)
(45,data)
(46,data)
(47,\\\'\\\\n\\\')
(48,)
(49,100)
(50,data)
(51,if (fgets(data+dataLen, (int)
(52,int)
(53,fgets(data+dataLen, (int)
(54,data)
(55,)
(56,RET)
(57,data[dataLen-1] == \\\'\\\\n\\\')
(58,(int)
(59,data)
(60,)
(61,printLine("fgets()
(62,return data;)
(63,data[dataLen-1])
(64,dataLen)
(65,100-dataLen > 1)
(66,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
