-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_execlp_41_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_execlp_41_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_execlp_41_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_41_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_execlp_41_bad()
CWE78_OS_Command_Injection__char_console_execlp_41_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_execlp_41_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_execlp_41_badSink(data);
CWE78_OS_Command_Injection__char_console_execlp_41_badSink(data)
CWE78_OS_Command_Injection__char_console_execlp_41_badSink
CWE78_OS_Command_Injection__char_console_execlp_41_badSink
data
data
-----joern-----
(26,61,0)
(49,50,0)
(70,56,0)
(6,45,0)
(16,10,0)
(45,6,0)
(17,49,0)
(23,22,0)
(57,70,0)
(41,16,0)
(12,32,0)
(33,16,0)
(14,55,0)
(4,51,0)
(8,3,0)
(9,38,0)
(64,45,0)
(67,38,0)
(3,7,0)
(34,39,0)
(37,39,0)
(10,7,0)
(48,70,0)
(45,49,0)
(27,14,0)
(28,20,0)
(21,55,0)
(28,23,0)
(22,61,0)
(25,20,0)
(39,37,0)
(22,62,0)
(39,47,0)
(62,22,0)
(20,28,0)
(47,39,0)
(16,49,0)
(54,10,0)
(9,51,0)
(6,39,0)
(59,57,0)
(39,6,0)
(12,22,0)
(35,38,0)
(70,57,0)
(19,23,0)
(55,14,0)
(16,9,0)
(62,9,0)
(14,49,0)
(2,37,0)
(36,12,0)
(70,9,0)
(60,45,0)
(32,9,0)
(43,47,0)
(0,51,0)
(53,4,0)
(46,57,0)
(1,12,0)
(65,51,0)
(6,58,0)
(31,50,0)
(42,56,0)
(49,69,0)
(32,12,0)
(69,9,0)
(68,69,0)
(44,9,0)
(38,51,0)
(32,20,0)
(58,6,0)
(4,9,0)
(11,9,0)
(47,49,0)
(57,22,0)
(56,63,0)
(23,28,0)
(5,23,0)
(30,32,0)
(13,62,0)
(69,49,0)
(29,47,0)
(20,32,0)
(66,14,0)
(18,50,0)
(24,52,0)
(40,22,0)
(50,51,0)
(47,9,0)
(40,37,1)
(13,40,1)
(10,54,1)
(60,47,1)
(3,8,1)
(12,22,1)
(1,36,1)
(41,3,1)
(6,45,1)
(55,14,1)
(23,22,1)
(33,41,1)
(39,47,1)
(36,30,1)
(48,28,1)
(69,9,1)
(47,49,1)
(14,27,1)
(16,33,1)
(30,23,1)
(23,19,1)
(64,60,1)
(8,37,1)
(32,12,1)
(4,53,1)
(62,9,1)
(6,58,1)
(15,4,1)
(55,21,1)
(16,49,1)
(32,9,1)
(54,16,1)
(35,67,1)
(4,9,1)
(29,55,1)
(70,9,1)
(39,6,1)
(59,46,1)
(70,57,1)
(47,43,1)
(39,34,1)
(16,9,1)
(25,32,1)
(66,49,1)
(27,66,1)
(37,2,1)
(28,20,1)
(43,29,1)
(49,69,1)
(2,39,1)
(46,48,1)
(19,5,1)
(69,68,1)
(37,39,1)
(12,1,1)
(11,44,1)
(47,9,1)
(53,55,1)
(14,49,1)
(56,42,1)
(38,35,1)
(45,49,1)
(9,11,1)
(28,23,1)
(53,28,1)
(9,38,1)
(22,62,1)
(20,25,1)
(53,10,1)
(68,17,1)
(42,70,1)
(53,56,1)
(21,14,1)
(62,13,1)
(57,59,1)
(44,38,1)
(20,32,1)
(5,22,1)
(57,22,1)
(17,9,1)
(45,64,1)
(34,6,1)
(6,55,2)
(45,49,2)
(32,12,2)
(36,23,2)
(47,49,2)
(25,23,2)
(55,14,2)
(57,28,2)
(20,32,2)
(5,37,2)
(23,22,2)
(23,37,2)
(60,55,2)
(13,37,2)
(34,55,2)
(10,37,2)
(33,37,2)
(32,9,2)
(49,69,2)
(3,37,2)
(32,23,2)
(20,23,2)
(16,37,2)
(59,28,2)
(39,6,2)
(62,37,2)
(70,9,2)
(6,45,2)
(62,9,2)
(2,55,2)
(69,9,2)
(28,20,2)
(37,39,2)
(46,28,2)
(70,28,2)
(30,23,2)
(16,49,2)
(28,23,2)
(1,23,2)
(56,28,2)
(28,37,2)
(48,28,2)
(39,55,2)
(22,62,2)
(47,55,2)
(14,49,2)
(6,58,2)
(40,37,2)
(37,55,2)
(8,37,2)
(12,22,2)
(41,37,2)
(57,22,2)
(39,47,2)
(29,55,2)
(19,37,2)
(47,9,2)
(70,57,2)
(54,37,2)
(45,55,2)
(22,37,2)
(12,23,2)
(64,55,2)
(16,9,2)
(43,55,2)
(4,9,2)
(42,28,2)
(9,38,2)
-----------------------------------
(0,data)
(1,1)
(2,NULL)
(3,printLine("fgets()
(4,CWE78_OS_Command_Injection__char_console_execlp_41_badSink(data)
(5,dataLen)
(6,(int)
(7,)
(8,"fgets()
(9,data = dataBuffer)
(10,data[dataLen] = \\\'\\\\0\\\')
(11,dataBuffer)
(12,dataLen-1)
(13,data)
(14,100-dataLen)
(15,RET)
(16,data[dataLen])
(17,dataLen)
(18,if (100-dataLen > 1)
(19,0)
(20,data[dataLen-1] == \\\'\\\\n\\\')
(21,1)
(22,dataLen = strlen(data)
(23,dataLen > 0)
(24,if (fgets(data+dataLen, (int)
(25,\\\'\\\\n\\\')
(26,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(27,dataLen)
(28,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(29,data)
(30,data)
(31,dataLen)
(32,data[dataLen-1])
(33,dataLen)
(34,stdin)
(35,COMMAND_ARG2)
(36,dataLen)
(37,fgets(data+dataLen, (int)
(38,dataBuffer[100] = COMMAND_ARG2)
(39,fgets(data+dataLen, (int)
(40,dataLen)
(41,data)
(42,\\\'\\\\0\\\')
(43,dataLen)
(44,data)
(45,100-dataLen)
(46,dataLen)
(47,data+dataLen)
(48,data)
(49,dataLen = strlen(data)
(50,)
(51,)
(52,)
(53,data)
(54,\\\'\\\\0\\\')
(55,100-dataLen > 1)
(56,data[dataLen-1] = \\\'\\\\0\\\')
(57,dataLen-1)
(58,int)
(59,1)
(60,100)
(61,)
(62,strlen(data)
(63,)
(64,dataLen)
(65,dataBuffer)
(66,100)
(67,dataBuffer)
(68,data)
(69,strlen(data)
(70,data[dataLen-1])
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
