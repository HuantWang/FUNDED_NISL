-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    goto source;
source:
    /* FIX: Append a fixed string to data (not user / external input) */
    strcat(data, "*.*");
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
30,31
30,32
32,33
33,34
33,35
33,36
34,35
36,37
39,40
39,41
40,41
40,42
41,42
41,43
42,43
44,45
47,48
47,49
48,49
49,50
49,51
50,51
53,54
54,55
54,56
55,56
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,31,35,37,38,43,45,46,51,52,56,57
-----computeFrom-----
23,24
23,25
40,41
40,42
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    goto source;source:    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B()
goodG2B
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    goto source;source:    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
goto source;
source
source:    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");
source
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(6,23,0)
(23,16,0)
(7,10,0)
(17,8,0)
(3,10,0)
(23,5,0)
(18,19,0)
(16,10,0)
(16,19,0)
(19,10,0)
(11,10,0)
(9,16,0)
(24,14,0)
(22,10,0)
(20,10,0)
(14,16,0)
(0,19,0)
(5,23,0)
(14,10,0)
(4,17,0)
(1,8,0)
(15,5,0)
(12,14,0)
(13,1,0)
(21,16,0)
(21,9,1)
(20,16,1)
(2,5,1)
(0,18,1)
(12,24,1)
(1,13,1)
(17,4,1)
(19,0,1)
(16,19,1)
(15,23,1)
(13,17,1)
(14,12,1)
(6,14,1)
(5,15,1)
(24,20,1)
(5,23,1)
(14,16,1)
(23,16,1)
(9,19,1)
(4,5,1)
(23,6,1)
(16,21,1)
(2,1,1)
(16,19,2)
(13,5,2)
(17,5,2)
(14,16,2)
(4,5,2)
(23,16,2)
(1,5,2)
(5,23,2)
-----------------------------------
(0,FULL_COMMAND)
(1,exit(1)
(2,RET)
(3,data_buf)
(4,"command execution failed!")
(5,SYSTEM(data)
(6,data)
(7,data)
(8,)
(9,data)
(10,)
(11,source:)
(12,"*.*")
(13,1)
(14,strcat(data, "*.*")
(15,0)
(16,data = data_buf)
(17,printLine("command execution failed!")
(18,data_buf)
(19,data_buf[100] = FULL_COMMAND)
(20,goto source;)
(21,data_buf)
(22,if (SYSTEM(data)
(23,SYSTEM(data)
(24,data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
