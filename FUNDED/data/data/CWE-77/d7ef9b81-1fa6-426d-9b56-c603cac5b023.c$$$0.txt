-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    /* FIX: Append a fixed string to data (not user / external input) */
    strcat(data, "*.*");
    {
        char * dataCopy = data;
        char * data = dataCopy;
        /* execlp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
29,30
29,31
29,32
30,31
32,33
35,36
35,37
35,38
36,37
37,38
37,39
39,40
39,41
39,42
42,43
43,44
45,46
46,47
46,48
48,49
48,50
48,51
51,52
52,53
54,55
55,56
55,57
55,58
55,59
55,60
55,61
56,57
58,59
60,61
62,63
64,65
66,67
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,33,34,38,40,41,44,47,49,50,53,57,59,61,63,65,67
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char * dataCopy = data;        char * data = dataCopy;        /* execlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
static void
goodG2B()
goodG2B
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    strcat(data, "*.*");    {        char * dataCopy = data;        char * data = dataCopy;        /* execlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        char * dataCopy = data;        char * data = dataCopy;        /* execlp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
char * dataCopy = data;
char * dataCopy = data;
char
* dataCopy = data
*
dataCopy
= data
data
data
char * data = dataCopy;
char * data = dataCopy;
char
* data = dataCopy
*
data
= dataCopy
dataCopy
dataCopy
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECLP
EXECLP
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(7,24,0)
(6,11,0)
(10,11,0)
(17,24,0)
(20,8,0)
(15,17,0)
(14,24,0)
(8,15,0)
(13,7,0)
(27,11,0)
(5,8,0)
(12,11,0)
(9,17,0)
(18,1,0)
(26,1,0)
(14,7,0)
(16,24,0)
(11,17,0)
(2,7,0)
(15,7,0)
(19,15,0)
(3,11,0)
(1,24,0)
(4,14,0)
(0,14,0)
(22,17,0)
(7,1,0)
(8,17,0)
(23,24,0)
(21,15,0)
(4,7,1)
(19,21,1)
(10,12,1)
(27,3,1)
(15,19,1)
(5,20,1)
(26,18,1)
(8,15,1)
(7,1,1)
(2,13,1)
(14,0,1)
(21,14,1)
(1,26,1)
(3,6,1)
(20,15,1)
(13,1,1)
(12,27,1)
(15,7,1)
(8,5,1)
(25,11,1)
(0,4,1)
(11,10,1)
(7,2,1)
(6,8,1)
(14,7,1)
(8,15,2)
(15,7,2)
(14,7,2)
(7,1,2)
-----------------------------------
(0,"*.*")
(1,dataBuffer[100] = COMMAND_ARG2)
(2,dataBuffer)
(3,COMMAND_INT)
(4,data)
(5,dataCopy)
(6,COMMAND_INT)
(7,data = dataBuffer)
(8,* data = dataCopy)
(9,data)
(10,NULL)
(11,EXECLP(COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(12,COMMAND_ARG3)
(13,data)
(14,strcat(data, "*.*")
(15,* dataCopy = data)
(16,dataBuffer)
(17,)
(18,dataBuffer)
(19,data)
(20,data)
(21,dataCopy)
(22,dataCopy)
(23,data)
(24,)
(25,RET)
(26,COMMAND_ARG2)
(27,COMMAND_ARG1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
