-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from a file */
        size_t dataLen = strlen(data);
        FILE * pFile;
        /* if there is room in data, attempt to read the input from a file */
        if (100-dataLen > 1)
        {
            pFile = fopen(FILENAME, "r");
            if (pFile != NULL)
            {
                /* POTENTIAL FLAW: Read data from a file */
                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
                fclose(pFile);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
12,15
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
26,27
26,28
27,28
29,30
29,31
32,33
32,34
33,34
33,35
34,35
34,36
36,37
39,40
39,41
40,41
41,42
41,43
42,43
44,45
44,46
44,47
45,46
47,48
50,51
50,52
51,52
51,53
52,53
54,55
56,57
56,58
57,58
57,59
58,59
58,60
59,60
59,61
59,62
59,63
60,61
62,63
62,64
63,64
65,66
67,68
67,69
68,69
68,70
71,72
72,73
72,74
74,75
76,77
78,79
80,81
80,82
81,82
82,83
82,84
83,84
86,87
87,88
87,89
88,89
88,90
89,90
91,92
94,95
95,96
95,97
96,97
98,99
100,101
101,102
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,35,37,38,43,46,48,49,53,55,61,64,66,69,70,73,75,77,79,84,85,90,92,93,97,99,102
-----computeFrom-----
33,34
33,35
34,35
34,36
41,42
41,43
51,52
51,53
58,59
58,60
62,63
62,64
72,73
72,74
87,88
87,89
-----guardedBy-----
37,92
55,79
53,99
64,90
75,92
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }    return data;}
{        /* Read input from a file */        size_t dataLen = strlen(data);        FILE * pFile;        /* if there is room in data, attempt to read the input from a file */        if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)        {            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            pFile = fopen(FILENAME, "r");            if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }        }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)            {                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
pFile != NULL
pFile
pFile
NULL
NULL
{                /* POTENTIAL FLAW: Read data from a file */                if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }                fclose(pFile);            }
if (fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL)                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgets(data+dataLen, (int)(100-dataLen), pFile)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
return data;
data
data
-----joern-----
(15,50,0)
(41,50,0)
(36,6,0)
(43,26,0)
(19,10,0)
(2,29,0)
(14,10,0)
(23,50,0)
(16,29,0)
(14,51,0)
(39,18,0)
(5,44,0)
(16,51,0)
(31,22,0)
(24,2,0)
(0,50,0)
(46,16,0)
(7,49,0)
(49,6,0)
(30,25,0)
(50,41,0)
(20,41,0)
(44,3,0)
(17,27,0)
(12,23,0)
(32,44,0)
(37,3,0)
(3,44,0)
(21,2,0)
(15,26,0)
(1,17,0)
(40,15,0)
(0,3,0)
(44,10,0)
(42,14,0)
(35,51,0)
(6,27,0)
(34,14,0)
(45,0,0)
(49,51,0)
(0,4,0)
(47,18,0)
(10,2,0)
(13,35,0)
(9,50,0)
(3,0,0)
(18,22,0)
(4,0,0)
(33,23,0)
(50,25,0)
(14,0,0)
(0,14,0)
(48,16,0)
(28,4,0)
(10,35,0)
(8,2,0)
(49,10,0)
(35,10,0)
(3,37,0)
(38,41,0)
(22,18,0)
(11,49,0)
(18,10,0)
(3,37,1)
(14,51,1)
(18,10,1)
(20,38,1)
(16,46,1)
(46,15,1)
(49,51,1)
(50,41,1)
(44,5,1)
(35,13,1)
(44,10,1)
(38,9,1)
(34,23,1)
(7,17,1)
(46,22,1)
(0,50,1)
(39,10,1)
(13,19,1)
(31,18,1)
(0,45,1)
(32,14,1)
(14,42,1)
(22,31,1)
(49,11,1)
(1,4,1)
(11,7,1)
(15,40,1)
(46,23,1)
(5,32,1)
(10,35,1)
(9,22,1)
(33,50,1)
(3,44,1)
(4,0,1)
(49,10,1)
(12,33,1)
(42,34,1)
(48,16,1)
(0,14,1)
(18,47,1)
(15,50,1)
(28,0,1)
(0,3,1)
(17,1,1)
(36,49,1)
(14,10,1)
(40,6,1)
(4,28,1)
(23,50,1)
(41,20,1)
(16,51,1)
(45,3,1)
(47,39,1)
(22,18,1)
(40,4,1)
(6,36,1)
(23,12,1)
(35,51,1)
(50,41,2)
(14,10,2)
(49,51,2)
(18,10,2)
(7,4,2)
(3,23,2)
(50,22,2)
(12,22,2)
(44,10,2)
(23,50,2)
(3,37,2)
(49,10,2)
(0,14,2)
(22,18,2)
(23,22,2)
(10,35,2)
(34,23,2)
(14,23,2)
(0,3,2)
(11,4,2)
(0,23,2)
(48,16,2)
(17,4,2)
(6,4,2)
(45,23,2)
(33,22,2)
(42,23,2)
(3,44,2)
(15,50,2)
(28,23,2)
(14,51,2)
(32,23,2)
(36,4,2)
(15,23,2)
(0,50,2)
(49,4,2)
(40,23,2)
(44,23,2)
(1,4,2)
(35,51,2)
(41,22,2)
(9,22,2)
(16,51,2)
(4,23,2)
(4,0,2)
(38,22,2)
(5,23,2)
(20,22,2)
-----------------------------------
(0,fgets(data+dataLen, (int)
(1,"fgets()
(2,)
(3,(int)
(4,fgets(data+dataLen, (int)
(5,dataLen)
(6,data[dataLen] = \\\'\\\\0\\\')
(7,data)
(8,if (100-dataLen > 1)
(9,pFile)
(10,dataLen = strlen(data)
(11,dataLen)
(12,NULL)
(13,data)
(14,data+dataLen)
(15,fclose(pFile)
(16,return data;)
(17,printLine("fgets()
(18,100-dataLen)
(19,dataLen)
(20,"r")
(21,pFile)
(22,100-dataLen > 1)
(23,pFile != NULL)
(24,dataLen)
(25,)
(26,)
(27,)
(28,NULL)
(29,)
(30,if (pFile != NULL)
(31,1)
(32,100)
(33,pFile)
(34,data)
(35,strlen(data)
(36,\\\'\\\\0\\\')
(37,int)
(38,FILENAME)
(39,100)
(40,pFile)
(41,fopen(FILENAME, "r")
(42,dataLen)
(43,if (fgets(data+dataLen, (int)
(44,100-dataLen)
(45,pFile)
(46,data)
(47,dataLen)
(48,RET)
(49,data[dataLen])
(50,pFile = fopen(FILENAME, "r")
(51,char * data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
