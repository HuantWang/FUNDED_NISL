-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        char * data = *dataPtr1;
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        /* execl - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
71,72
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
84,85
86,87
87,88
87,89
87,90
87,91
87,92
87,93
88,89
90,91
92,93
94,95
96,97
98,99
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,67,72,74,78,80,81,85,89,91,93,95,97,99
-----computeFrom-----
45,46
45,47
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* execl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
static void
goodG2B()
goodG2B
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        /* execl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        char * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        /* execl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(39,16,0)
(15,1,0)
(30,24,0)
(37,5,0)
(44,1,0)
(28,44,0)
(33,1,0)
(38,34,0)
(5,16,0)
(34,1,0)
(22,17,0)
(10,34,0)
(14,4,0)
(11,12,0)
(8,17,0)
(42,17,0)
(13,17,0)
(30,25,0)
(23,38,0)
(40,17,0)
(34,10,0)
(19,1,0)
(0,1,0)
(4,1,0)
(5,12,0)
(24,1,0)
(16,12,0)
(29,4,0)
(27,44,0)
(35,24,0)
(4,44,0)
(20,33,0)
(17,33,0)
(24,35,0)
(18,39,0)
(21,1,0)
(2,10,0)
(25,30,0)
(11,16,0)
(31,11,0)
(9,30,0)
(7,34,0)
(43,11,0)
(25,33,0)
(16,39,0)
(38,5,0)
(26,25,0)
(32,12,0)
(12,1,0)
(36,16,0)
(39,34,0)
(6,24,0)
(41,35,0)
(41,6,1)
(42,22,1)
(44,28,1)
(2,7,1)
(29,44,1)
(5,16,1)
(39,34,1)
(11,43,1)
(25,30,1)
(23,11,1)
(40,13,1)
(16,39,1)
(4,44,1)
(24,35,1)
(18,36,1)
(31,16,1)
(8,25,1)
(35,41,1)
(22,40,1)
(17,42,1)
(10,2,1)
(37,38,1)
(27,24,1)
(6,34,1)
(9,26,1)
(30,9,1)
(28,27,1)
(30,24,1)
(3,17,1)
(43,31,1)
(36,4,1)
(38,23,1)
(39,18,1)
(34,10,1)
(26,5,1)
(13,8,1)
(5,37,1)
(4,14,1)
(14,29,1)
(11,16,1)
(38,34,1)
(38,34,2)
(4,44,2)
(39,34,2)
(25,30,2)
(11,16,2)
(30,24,2)
(16,39,2)
(34,10,2)
(24,35,2)
(5,16,2)
-----------------------------------
(0,dataPtr2)
(1,)
(2,data)
(3,RET)
(4,data = dataBuffer)
(5,*dataPtr1 = data)
(6,dataPtr2)
(7,dataPtr1)
(8,COMMAND_INT_PATH)
(9,dataPtr2)
(10,&data)
(11,strcat(data, "*.*")
(12,)
(13,COMMAND_INT_PATH)
(14,dataBuffer)
(15,data)
(16,* data = *dataPtr1)
(17,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(18,dataPtr1)
(19,dataPtr1)
(20,data)
(21,dataBuffer)
(22,COMMAND_ARG3)
(23,dataPtr1)
(24,* *dataPtr2 = &data)
(25,* data = *dataPtr2)
(26,data)
(27,dataBuffer)
(28,COMMAND_ARG2)
(29,data)
(30,*dataPtr2)
(31,data)
(32,data)
(33,)
(34,* *dataPtr1 = &data)
(35,&data)
(36,data)
(37,data)
(38,*dataPtr1)
(39,*dataPtr1)
(40,COMMAND_ARG1)
(41,data)
(42,NULL)
(43,"*.*")
(44,dataBuffer[100] = COMMAND_ARG2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
