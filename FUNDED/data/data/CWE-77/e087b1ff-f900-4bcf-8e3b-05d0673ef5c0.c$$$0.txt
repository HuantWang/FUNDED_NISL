-----label-----
0
-----code-----
static void goodG2B()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    if(globalReturnsTrueOrFalse())
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    else
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
28,31
29,30
30,31
32,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
41,42
42,43
42,44
42,45
43,44
45,46
48,49
48,50
49,50
49,51
50,51
50,52
51,52
53,54
56,57
56,58
57,58
58,59
58,60
59,60
62,63
63,64
63,65
64,65
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,31,36,38,39,44,46,47,52,54,55,60,61,65,66
-----computeFrom-----
23,24
23,25
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;FunctionCallExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B()
goodG2B
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
if(globalReturnsTrueOrFalse())    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    else    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
globalReturnsTrueOrFalse()
globalReturnsTrueOrFalse
globalReturnsTrueOrFalse
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(17,10,0)
(22,10,0)
(13,29,0)
(0,8,0)
(15,27,0)
(5,10,0)
(15,21,0)
(6,16,0)
(28,7,0)
(1,27,0)
(16,27,0)
(19,27,0)
(18,22,0)
(26,16,0)
(9,15,0)
(14,19,0)
(23,10,0)
(20,15,0)
(27,22,0)
(27,10,0)
(7,19,0)
(12,27,0)
(3,22,0)
(16,11,0)
(2,10,0)
(19,7,0)
(29,8,0)
(25,0,0)
(3,18,1)
(0,25,1)
(25,29,1)
(20,9,1)
(14,15,1)
(7,28,1)
(4,27,1)
(13,7,1)
(16,27,1)
(29,13,1)
(24,0,1)
(14,16,1)
(22,3,1)
(16,26,1)
(15,27,1)
(9,4,1)
(15,20,1)
(19,14,1)
(12,1,1)
(1,22,1)
(7,19,1)
(24,7,1)
(26,6,1)
(19,27,1)
(6,4,1)
(28,19,1)
(27,12,1)
(27,22,1)
(25,7,2)
(26,4,2)
(16,27,2)
(27,22,2)
(16,4,2)
(9,4,2)
(0,7,2)
(15,4,2)
(6,4,2)
(20,4,2)
(19,27,2)
(15,27,2)
(13,7,2)
(7,19,2)
(29,7,2)
-----------------------------------
(0,exit(1)
(1,data)
(2,if(globalReturnsTrueOrFalse()
(3,FULL_COMMAND)
(4,globalReturnsTrueOrFalse()
(5,data)
(6,data)
(7,SYSTEM(data)
(8,)
(9,data)
(10,)
(11,)
(12,data_buf)
(13,"command execution failed!")
(14,data)
(15,strcat(data, "*.*")
(16,strcat(data, "*.*")
(17,if (SYSTEM(data)
(18,data_buf)
(19,SYSTEM(data)
(20,"*.*")
(21,)
(22,data_buf[100] = FULL_COMMAND)
(23,data_buf)
(24,RET)
(25,1)
(26,"*.*")
(27,data = data_buf)
(28,0)
(29,printLine("command execution failed!")
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
