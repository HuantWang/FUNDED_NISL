-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_popen_64_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_popen_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_popen_64_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_popen_64_bad()
CWE78_OS_Command_Injection__char_console_popen_64_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_popen_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_popen_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_popen_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_popen_64b_badSink
CWE78_OS_Command_Injection__char_console_popen_64b_badSink
&data
data
data
-----joern-----
(31,29,0)
(11,9,0)
(28,29,0)
(63,7,0)
(16,31,0)
(3,36,0)
(35,37,0)
(26,1,0)
(57,70,0)
(17,6,0)
(36,17,0)
(41,14,0)
(18,66,0)
(52,29,0)
(27,21,0)
(42,14,0)
(16,53,0)
(39,9,0)
(37,35,0)
(34,61,0)
(33,17,0)
(69,66,0)
(45,0,0)
(30,16,0)
(35,29,0)
(50,31,0)
(33,47,0)
(22,61,0)
(16,36,0)
(24,12,0)
(19,43,0)
(27,31,0)
(17,7,0)
(37,31,0)
(44,5,0)
(47,70,0)
(8,44,0)
(9,31,0)
(12,29,0)
(62,37,0)
(46,5,0)
(40,28,0)
(5,27,0)
(51,53,0)
(38,27,0)
(49,21,0)
(43,21,0)
(46,66,0)
(6,31,0)
(1,21,0)
(56,33,0)
(66,21,0)
(36,16,0)
(67,43,0)
(46,64,0)
(9,42,0)
(47,33,0)
(54,22,0)
(61,70,0)
(31,12,0)
(55,42,0)
(43,71,0)
(70,47,0)
(27,5,0)
(48,31,0)
(10,17,0)
(6,17,0)
(68,29,0)
(20,33,0)
(66,46,0)
(65,27,0)
(15,41,0)
(22,17,0)
(70,61,0)
(21,28,0)
(1,31,0)
(4,28,0)
(59,71,0)
(60,6,0)
(5,44,0)
(21,1,0)
(61,22,0)
(2,12,0)
(9,21,0)
(23,5,0)
(53,58,0)
(71,43,0)
(64,46,0)
(5,46,0)
(32,36,0)
(61,31,0)
(25,22,0)
(42,55,1)
(55,9,1)
(44,5,1)
(27,21,1)
(26,49,1)
(37,31,1)
(5,23,1)
(43,67,1)
(62,71,1)
(59,43,1)
(41,15,1)
(61,31,1)
(53,51,1)
(51,16,1)
(43,21,1)
(27,65,1)
(36,32,1)
(70,57,1)
(11,39,1)
(62,53,1)
(9,21,1)
(48,12,1)
(66,21,1)
(9,11,1)
(57,61,1)
(54,34,1)
(24,2,1)
(30,47,1)
(6,31,1)
(71,43,1)
(50,48,1)
(66,18,1)
(47,33,1)
(62,47,1)
(62,42,1)
(10,44,1)
(71,59,1)
(15,44,1)
(46,66,1)
(32,3,1)
(47,70,1)
(23,46,1)
(33,17,1)
(12,24,1)
(65,38,1)
(33,20,1)
(69,27,1)
(60,10,1)
(20,56,1)
(3,30,1)
(61,22,1)
(8,5,1)
(34,33,1)
(38,71,1)
(9,31,1)
(49,31,1)
(46,64,1)
(5,46,1)
(18,69,1)
(13,35,1)
(56,17,1)
(1,26,1)
(70,61,1)
(31,12,1)
(35,37,1)
(17,6,1)
(16,31,1)
(37,62,1)
(31,50,1)
(44,8,1)
(16,36,1)
(67,19,1)
(22,17,1)
(6,60,1)
(25,54,1)
(1,31,1)
(39,41,1)
(5,27,1)
(21,1,1)
(19,21,1)
(36,17,1)
(27,31,1)
(22,25,1)
(10,44,2)
(66,21,2)
(39,44,2)
(38,71,2)
(65,71,2)
(44,5,2)
(70,33,2)
(9,21,2)
(30,47,2)
(53,47,2)
(22,17,2)
(16,36,2)
(11,44,2)
(47,70,2)
(31,12,2)
(44,71,2)
(15,44,2)
(27,21,2)
(42,44,2)
(5,71,2)
(8,71,2)
(41,44,2)
(6,31,2)
(21,1,2)
(47,33,2)
(3,47,2)
(37,31,2)
(36,47,2)
(54,33,2)
(60,44,2)
(16,31,2)
(51,47,2)
(66,71,2)
(20,44,2)
(35,37,2)
(9,31,2)
(23,71,2)
(46,71,2)
(17,6,2)
(5,27,2)
(55,44,2)
(56,44,2)
(25,33,2)
(70,61,2)
(71,43,2)
(27,31,2)
(46,64,2)
(43,21,2)
(6,44,2)
(69,71,2)
(34,33,2)
(61,22,2)
(5,46,2)
(17,44,2)
(33,44,2)
(47,44,2)
(33,17,2)
(27,71,2)
(36,17,2)
(18,71,2)
(9,44,2)
(32,47,2)
(16,47,2)
(61,31,2)
(46,66,2)
(22,33,2)
(57,33,2)
(61,33,2)
(1,31,2)
-----------------------------------
(0,)
(1,strlen(data)
(2,data_buf)
(3,dataLen)
(4,if (100-dataLen > 1)
(5,fgets(data+dataLen, (int)
(6,strlen(data)
(7,)
(8,NULL)
(9,data[dataLen])
(10,dataLen)
(11,dataLen)
(12,data_buf[100] = FULL_COMMAND)
(13,RET)
(14,)
(15,"fgets()
(16,data[dataLen-1])
(17,dataLen = strlen(data)
(18,dataLen)
(19,100)
(20,0)
(21,dataLen = strlen(data)
(22,dataLen-1)
(23,stdin)
(24,FULL_COMMAND)
(25,1)
(26,data)
(27,data+dataLen)
(28,)
(29,)
(30,data)
(31,data = data_buf)
(32,1)
(33,dataLen > 0)
(34,data)
(35,CWE78_OS_Command_Injection__char_console_popen_64b_badSink(&data)
(36,dataLen-1)
(37,&data)
(38,data)
(39,data)
(40,dataLen)
(41,printLine("fgets()
(42,data[dataLen] = \\\'\\\\0\\\')
(43,100-dataLen)
(44,fgets(data+dataLen, (int)
(45,if (fgets(data+dataLen, (int)
(46,(int)
(47,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(48,data)
(49,dataLen)
(50,data_buf)
(51,\\\'\\\\0\\\')
(52,data)
(53,data[dataLen-1] = \\\'\\\\0\\\')
(54,dataLen)
(55,\\\'\\\\0\\\')
(56,dataLen)
(57,\\\'\\\\n\\\')
(58,)
(59,1)
(60,data)
(61,data[dataLen-1])
(62,data)
(63,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(64,int)
(65,dataLen)
(66,100-dataLen)
(67,dataLen)
(68,data_buf)
(69,100)
(70,data[dataLen-1] == \\\'\\\\n\\\')
(71,100-dataLen > 1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
