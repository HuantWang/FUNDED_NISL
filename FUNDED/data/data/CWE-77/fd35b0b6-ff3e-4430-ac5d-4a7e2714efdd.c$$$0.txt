-----label-----
0
-----code-----
static void goodG2B2()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    switch(6)
    {
    case 6:
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
        break;
    default:
        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */
        printLine("Benign, fixed string");
        break;
    }
    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
    if (SYSTEM(data) != 0)
    {
        printLine("command execution failed!");
        exit(1);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
30,31
30,32
30,33
30,34
30,35
30,36
31,32
33,34
34,35
34,36
34,37
35,36
37,38
42,43
43,44
43,45
44,45
48,49
48,50
49,50
49,51
50,51
50,52
51,52
53,54
56,57
56,58
57,58
58,59
58,60
59,60
62,63
63,64
63,65
64,65
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,32,36,38,39,40,41,45,46,47,52,54,55,60,61,65,66
-----computeFrom-----
23,24
23,25
49,50
49,51
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;SwitchStatement;LiteralExpression;CompoundStatement;CaseStatement;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;BreakStatement;DefaultStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;BreakStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;
-----ast_node-----
static void goodG2B2(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
static void
goodG2B2()
goodG2B2
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }    /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */    if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
switch(6)    {    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
6
{    case 6:        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");        break;    default:        /* INCIDENTAL: CWE 561 Dead Code, the code below will never run */        printLine("Benign, fixed string");        break;    }
case 6:
6
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
break;
default:
printLine("Benign, fixed string");
printLine("Benign, fixed string")
printLine
printLine
"Benign, fixed string"
break;
if (SYSTEM(data) != 0)    {        printLine("command execution failed!");        exit(1);    }
SYSTEM(data) != 0
SYSTEM(data)
SYSTEM
SYSTEM
data
data
0
{        printLine("command execution failed!");        exit(1);    }
printLine("command execution failed!");
printLine("command execution failed!")
printLine
printLine
"command execution failed!"
exit(1);
exit(1)
exit
exit
1
-----joern-----
(21,22,0)
(14,13,0)
(8,23,0)
(24,30,0)
(20,10,0)
(5,9,0)
(27,30,0)
(16,22,0)
(13,9,0)
(15,13,0)
(19,0,0)
(18,1,0)
(28,23,0)
(17,0,0)
(26,27,0)
(4,29,0)
(9,23,0)
(1,11,0)
(12,9,0)
(31,23,0)
(6,22,0)
(10,22,0)
(9,0,0)
(0,23,0)
(3,23,0)
(27,9,0)
(13,22,0)
(30,27,0)
(29,11,0)
(2,22,0)
(18,30,1)
(25,30,1)
(30,27,1)
(0,17,1)
(26,2,1)
(9,12,1)
(27,26,1)
(9,0,1)
(27,9,1)
(12,5,1)
(25,29,1)
(6,10,1)
(10,20,1)
(7,9,1)
(30,24,1)
(24,27,1)
(14,7,1)
(2,13,1)
(5,0,1)
(4,1,1)
(20,7,1)
(26,6,1)
(1,18,1)
(29,4,1)
(13,9,1)
(15,14,1)
(13,15,1)
(17,19,1)
(30,27,2)
(6,7,2)
(14,7,2)
(18,30,2)
(2,7,2)
(1,30,2)
(29,30,2)
(10,7,2)
(15,7,2)
(13,9,2)
(13,7,2)
(27,9,2)
(20,7,2)
(9,0,2)
(4,30,2)
-----------------------------------
(0,data_buf[100] = FULL_COMMAND)
(1,printLine("command execution failed!")
(2,break;)
(3,switch(6)
(4,1)
(5,data)
(6,break;)
(7,6)
(8,if (SYSTEM(data)
(9,data = data_buf)
(10,printLine("Benign, fixed string")
(11,)
(12,data_buf)
(13,strcat(data, "*.*")
(14,data)
(15,"*.*")
(16,default:)
(17,FULL_COMMAND)
(18,"command execution failed!")
(19,data_buf)
(20,"Benign, fixed string")
(21,case 6:)
(22,)
(23,)
(24,0)
(25,RET)
(26,data)
(27,SYSTEM(data)
(28,data)
(29,exit(1)
(30,SYSTEM(data)
(31,data_buf)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
