-----label-----
0
-----code-----
static void goodG2B()
{
    int h;
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    for(h = 0; h < 1; h++)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        strcat(data, "*.*");
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, "w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
48,49
48,50
48,51
49,50
51,52
54,55
54,56
54,57
55,56
56,57
56,58
57,58
59,60
59,61
62,63
63,64
63,65
64,65
66,67
66,68
66,69
67,68
69,70
72,73
72,74
73,74
73,75
74,75
76,77
78,79
79,80
80,81
80,82
81,82
83,84
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,50,52,53,58,60,61,65,68,70,71,75,77,82,84
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
63,64
63,65
73,74
73,75
-----guardedBy-----
75,84
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    int h;    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
static void
goodG2B()
goodG2B
{    int h;    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
int h;
int h;
int
h
h
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
for(h = 0; h < 1; h++)    {        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
h = 0;
h = 0
h
h
0
h < 1
h
h
1
h++
h
h
{        /* FIX: Append a fixed string to data (not user / external input) */        strcat(data, "*.*");    }
strcat(data, "*.*");
strcat(data, "*.*")
strcat
strcat
data
data
"*.*"
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, "w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, "w");
pipe = POPEN(data, "w")
pipe
pipe
POPEN(data, "w")
POPEN
POPEN
data
data
"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(5,14,0)
(9,15,0)
(7,0,0)
(18,2,0)
(36,14,0)
(30,14,0)
(28,30,0)
(22,30,0)
(6,2,0)
(1,2,0)
(29,16,0)
(10,18,0)
(31,0,0)
(33,7,0)
(30,19,0)
(26,19,0)
(25,19,0)
(24,3,0)
(32,3,0)
(17,16,0)
(35,14,0)
(16,14,0)
(12,30,0)
(2,16,0)
(6,20,0)
(22,2,0)
(23,6,0)
(19,14,0)
(21,22,0)
(11,14,0)
(2,22,0)
(3,30,0)
(37,18,0)
(27,0,0)
(34,22,0)
(8,7,0)
(3,13,0)
(15,0,0)
(4,6,1)
(6,2,1)
(22,21,1)
(8,33,1)
(6,23,1)
(15,0,1)
(18,2,1)
(0,27,1)
(12,19,1)
(27,31,1)
(31,30,1)
(28,12,1)
(4,18,1)
(23,18,1)
(32,7,1)
(7,8,1)
(7,0,1)
(30,28,1)
(2,22,1)
(3,24,1)
(37,2,1)
(34,1,1)
(10,37,1)
(1,7,1)
(26,25,1)
(30,19,1)
(33,0,1)
(19,26,1)
(22,30,1)
(3,30,1)
(18,10,1)
(33,15,1)
(15,9,1)
(24,32,1)
(21,34,1)
(9,3,1)
(15,7,2)
(3,7,2)
(24,7,2)
(33,7,2)
(15,0,2)
(23,18,2)
(9,7,2)
(7,0,2)
(6,18,2)
(8,7,2)
(6,2,2)
(22,30,2)
(7,7,2)
(3,30,2)
(2,22,2)
(18,2,2)
(30,19,2)
(32,7,2)
-----------------------------------
(0,h = 0)
(1,pipe)
(2,pipe = POPEN(data, "w")
(3,strcat(data, "*.*")
(4,RET)
(5,for(h = 0; h < 1; h++)
(6,PCLOSE(pipe)
(7,h < 1)
(8,1)
(9,h)
(10,NULL)
(11,data)
(12,data)
(13,)
(14,)
(15,h++)
(16,)
(17,pipe)
(18,pipe != NULL)
(19,data_buf[100] = FULL_COMMAND)
(20,)
(21,"w")
(22,POPEN(data, "w")
(23,pipe)
(24,"*.*")
(25,data_buf)
(26,FULL_COMMAND)
(27,0)
(28,data_buf)
(29,if (pipe != NULL)
(30,data = data_buf)
(31,h)
(32,data)
(33,h)
(34,data)
(35,data_buf)
(36,h)
(37,pipe)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
