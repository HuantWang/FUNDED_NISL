-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(38,6,0)
(28,36,0)
(28,32,0)
(60,46,0)
(30,49,0)
(58,18,0)
(31,21,0)
(19,17,0)
(60,32,0)
(36,18,0)
(42,21,0)
(35,22,0)
(40,33,0)
(40,6,0)
(9,63,0)
(63,53,0)
(14,43,0)
(6,40,0)
(3,53,0)
(17,19,0)
(46,16,0)
(32,52,0)
(56,14,0)
(20,40,0)
(35,53,0)
(39,57,0)
(33,40,0)
(14,53,0)
(55,51,0)
(40,53,0)
(12,3,0)
(57,32,0)
(63,9,0)
(46,60,0)
(4,9,0)
(2,28,0)
(37,55,0)
(24,19,0)
(59,57,0)
(3,12,0)
(28,53,0)
(46,36,0)
(10,35,0)
(61,63,0)
(50,3,0)
(49,34,0)
(29,6,0)
(27,33,0)
(26,43,0)
(3,55,0)
(44,14,0)
(33,17,0)
(7,36,0)
(52,53,0)
(18,36,0)
(36,28,0)
(0,35,0)
(57,23,0)
(6,9,0)
(14,32,0)
(36,46,0)
(32,21,0)
(45,19,0)
(11,32,0)
(16,46,0)
(5,62,0)
(8,52,0)
(23,57,0)
(13,60,0)
(43,34,0)
(52,32,0)
(19,9,0)
(48,23,0)
(21,22,0)
(9,62,0)
(54,41,0)
(1,12,0)
(12,9,0)
(47,28,0)
(17,33,0)
(25,60,0)
(15,12,0)
(36,7,1)
(26,14,1)
(23,57,1)
(52,53,1)
(0,55,1)
(35,0,1)
(9,63,1)
(56,44,1)
(50,17,1)
(14,56,1)
(28,32,1)
(33,40,1)
(57,39,1)
(47,2,1)
(14,53,1)
(20,19,1)
(29,38,1)
(18,36,1)
(25,28,1)
(19,45,1)
(27,40,1)
(32,52,1)
(63,53,1)
(12,9,1)
(2,23,1)
(36,28,1)
(10,35,1)
(0,43,1)
(1,15,1)
(61,4,1)
(36,46,1)
(44,49,1)
(28,53,1)
(0,17,1)
(14,32,1)
(63,61,1)
(4,18,1)
(45,24,1)
(3,53,1)
(43,26,1)
(46,16,1)
(52,8,1)
(35,53,1)
(58,36,1)
(17,19,1)
(37,3,1)
(12,1,1)
(49,30,1)
(60,13,1)
(57,32,1)
(0,23,1)
(46,60,1)
(23,48,1)
(15,50,1)
(6,9,1)
(30,18,1)
(7,46,1)
(39,59,1)
(55,37,1)
(8,11,1)
(28,47,1)
(40,53,1)
(24,9,1)
(60,32,1)
(6,29,1)
(38,20,1)
(48,57,1)
(3,12,1)
(59,32,1)
(17,33,1)
(13,25,1)
(18,58,1)
(40,6,1)
(19,9,1)
(33,27,1)
(17,33,2)
(19,18,2)
(63,53,2)
(29,19,2)
(52,53,2)
(33,40,2)
(3,12,2)
(9,63,2)
(28,53,2)
(28,23,2)
(58,23,2)
(40,6,2)
(28,32,2)
(25,23,2)
(30,18,2)
(40,19,2)
(10,35,2)
(7,23,2)
(1,17,2)
(46,23,2)
(61,18,2)
(3,53,2)
(18,36,2)
(43,18,2)
(19,9,2)
(44,18,2)
(18,23,2)
(33,19,2)
(17,18,2)
(60,23,2)
(40,53,2)
(36,28,2)
(17,19,2)
(14,18,2)
(13,23,2)
(63,18,2)
(20,19,2)
(14,53,2)
(6,9,2)
(2,23,2)
(35,53,2)
(6,19,2)
(3,17,2)
(56,18,2)
(57,32,2)
(38,19,2)
(24,18,2)
(50,17,2)
(36,23,2)
(55,17,2)
(14,32,2)
(37,17,2)
(46,16,2)
(32,52,2)
(49,18,2)
(27,19,2)
(9,18,2)
(4,18,2)
(46,60,2)
(45,18,2)
(26,18,2)
(23,57,2)
(47,23,2)
(12,9,2)
(12,17,2)
(60,32,2)
(36,46,2)
(15,17,2)
-----------------------------------
(0,data)
(1,1)
(2,data)
(3,data[dataLen-1])
(4,dataLen)
(5,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(6,dataLen-1)
(7,stdin)
(8,data)
(9,dataLen = strlen(data)
(10,RET)
(11,dataLen)
(12,dataLen-1)
(13,dataLen)
(14,data[dataLen])
(15,dataLen)
(16,int)
(17,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(18,fgets(data+dataLen, (int)
(19,dataLen > 0)
(20,data)
(21,)
(22,)
(23,100-dataLen > 1)
(24,dataLen)
(25,100)
(26,\\\'\\\\0\\\')
(27,\\\'\\\\n\\\')
(28,data+dataLen)
(29,1)
(30,"fgets()
(31,dataLen)
(32,dataLen = strlen(data)
(33,data[dataLen-1] == \\\'\\\\n\\\')
(34,)
(35,return data;)
(36,fgets(data+dataLen, (int)
(37,\\\'\\\\0\\\')
(38,dataLen)
(39,dataLen)
(40,data[dataLen-1])
(41,)
(42,if (100-dataLen > 1)
(43,data[dataLen] = \\\'\\\\0\\\')
(44,data)
(45,0)
(46,(int)
(47,dataLen)
(48,1)
(49,printLine("fgets()
(50,data)
(51,)
(52,strlen(data)
(53,char * data)
(54,if (fgets(data+dataLen, (int)
(55,data[dataLen-1] = \\\'\\\\0\\\')
(56,dataLen)
(57,100-dataLen)
(58,NULL)
(59,100)
(60,100-dataLen)
(61,data)
(62,)
(63,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
