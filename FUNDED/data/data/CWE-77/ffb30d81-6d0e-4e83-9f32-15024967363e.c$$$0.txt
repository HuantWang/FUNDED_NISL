-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_17_bad()
{
    int i;
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    for(i = 0; i < 1; i++)
    {
        {
            /* Read input from the console */
            size_t dataLen = strlen(data);
            /* if there is room in data, read into it from the console */
            if (100-dataLen > 1)
            {
                /* POTENTIAL FLAW: Read data from the console */
                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
                {
                    /* The next few lines remove the carriage return from the string that is
                     * inserted by fgets() */
                    dataLen = strlen(data);
                    if (dataLen > 0 && data[dataLen-1] == '\n')
                    {
                        data[dataLen-1] = '\0';
                    }
                }
                else
                {
                    printLine("fgets() failed");
                    /* Restore NUL terminator if fgets fails */
                    data[dataLen] = '\0';
                }
            }
        }
    }
    {
        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
        /* execvp - searches for the location of the command among
         * the directories specified by the PATH environment variable */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECVP(COMMAND_INT, args);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
47,49
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
58,59
60,61
60,62
61,62
61,63
62,63
62,64
64,65
67,68
68,69
68,70
68,71
69,70
69,71
70,71
70,72
70,73
70,74
71,72
73,74
73,75
74,75
76,77
78,79
78,80
79,80
79,81
82,83
83,84
83,85
85,86
87,88
89,90
91,92
91,93
92,93
93,94
93,95
94,95
96,97
96,98
97,98
99,100
101,102
101,103
102,103
102,104
103,104
103,105
104,105
107,108
107,109
108,109
108,110
109,110
111,112
111,113
112,113
116,117
117,118
118,119
118,120
119,120
119,121
120,121
122,123
122,124
123,124
127,128
127,129
128,129
129,130
129,131
130,131
133,134
134,135
134,136
135,136
135,137
136,137
138,139
141,142
141,143
142,143
143,144
143,145
145,146
145,147
145,148
145,149
149,150
150,151
150,152
150,153
150,154
151,152
153,154
155,156
157,158
159,160
160,161
160,162
160,163
161,162
163,164
165,166
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,51,53,57,59,63,65,66,72,75,77,80,81,84,86,88,90,95,98,100,105,106,110,113,114,115,121,124,125,126,131,132,137,139,140,144,146,147,148,152,154,156,158,162,164,166
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
61,62
61,63
62,63
62,64
69,70
69,71
73,74
73,75
83,84
83,85
93,94
93,95
102,103
102,104
103,104
103,105
107,108
107,109
111,112
111,113
118,119
118,120
122,123
122,124
134,135
134,136
-----guardedBy-----
65,139
75,121
86,124
110,121
113,124
-----guardedByNegation-----
75,137
86,139
-----lastLexicalUse-----
75,137
86,139
-----jump-----
75,137
86,139
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_17_bad(){    int i;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_17_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_17_bad
{    int i;    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }    {        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }}
int i;
int i;
int
i
i
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
for(i = 0; i < 1; i++)    {        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }    }
{            /* Read input from the console */            size_t dataLen = strlen(data);            /* if there is room in data, read into it from the console */            if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)            {                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                /* POTENTIAL FLAW: Read data from the console */                if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }            }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)                {                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }                else                {                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                    /* The next few lines remove the carriage return from the string that is                     * inserted by fgets() */                    dataLen = strlen(data);                    if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }                }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                    {                        data[dataLen-1] = '\0';                    }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                        data[dataLen-1] = '\0';                    }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                    printLine("fgets() failed");                    /* Restore NUL terminator if fgets fails */                    data[dataLen] = '\0';                }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
{        char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};        /* execvp - searches for the location of the command among         * the directories specified by the PATH environment variable */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECVP(COMMAND_INT, args);    }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
EXECVP(COMMAND_INT, args);
EXECVP(COMMAND_INT, args)
EXECVP
EXECVP
COMMAND_INT
COMMAND_INT
args
args
-----joern-----
(45,63,0)
(80,83,0)
(76,84,0)
(29,52,0)
(76,20,0)
(53,38,0)
(66,56,0)
(61,84,0)
(30,29,0)
(68,84,0)
(37,38,0)
(50,46,0)
(76,83,0)
(8,51,0)
(17,83,0)
(69,31,0)
(64,45,0)
(84,66,0)
(84,56,0)
(59,66,0)
(57,76,0)
(45,38,0)
(61,30,0)
(74,80,0)
(52,29,0)
(25,29,0)
(83,1,0)
(60,77,0)
(30,47,0)
(14,68,0)
(12,85,0)
(9,77,0)
(55,46,0)
(85,56,0)
(31,39,0)
(49,25,0)
(72,25,0)
(0,45,0)
(54,50,0)
(70,47,0)
(43,85,0)
(42,77,0)
(35,80,0)
(10,84,0)
(81,56,0)
(73,61,0)
(27,13,0)
(79,38,0)
(21,43,0)
(24,76,0)
(63,40,0)
(19,79,0)
(79,19,0)
(28,80,0)
(47,30,0)
(20,39,0)
(38,37,0)
(44,37,0)
(2,79,0)
(11,66,0)
(1,33,0)
(43,12,0)
(41,30,0)
(86,77,0)
(46,50,0)
(61,83,0)
(40,63,0)
(50,27,0)
(37,84,0)
(26,63,0)
(22,40,0)
(78,56,0)
(46,38,0)
(16,61,0)
(71,20,0)
(58,56,0)
(32,56,0)
(3,85,0)
(23,84,0)
(36,15,0)
(82,46,0)
(40,19,0)
(63,27,0)
(80,28,0)
(5,1,0)
(83,68,0)
(68,83,0)
(50,84,0)
(67,12,0)
(19,40,0)
(34,79,0)
(7,9,0)
(48,27,0)
(25,83,0)
(30,61,0)
(38,51,0)
(6,9,0)
(29,25,0)
(62,1,0)
(65,43,0)
(63,45,0)
(63,84,0)
(18,28,0)
(4,86,0)
(29,30,0)
(70,30,1)
(43,65,1)
(24,31,1)
(35,74,1)
(9,77,1)
(12,67,1)
(25,83,1)
(75,43,1)
(2,34,1)
(6,7,1)
(54,19,1)
(10,23,1)
(43,12,1)
(66,59,1)
(7,86,1)
(18,80,1)
(83,68,1)
(31,69,1)
(4,19,1)
(60,84,1)
(29,25,1)
(19,79,1)
(59,11,1)
(76,83,1)
(61,84,1)
(47,70,1)
(64,0,1)
(80,35,1)
(30,61,1)
(69,47,1)
(72,49,1)
(57,24,1)
(45,38,1)
(53,47,1)
(28,18,1)
(79,2,1)
(73,28,1)
(80,83,1)
(46,38,1)
(30,41,1)
(46,55,1)
(38,37,1)
(7,77,1)
(74,83,1)
(55,82,1)
(27,48,1)
(76,84,1)
(29,52,1)
(4,20,1)
(37,84,1)
(19,40,1)
(77,42,1)
(20,71,1)
(61,16,1)
(40,22,1)
(48,50,1)
(76,57,1)
(42,60,1)
(82,54,1)
(63,84,1)
(65,21,1)
(40,63,1)
(68,84,1)
(4,27,1)
(37,44,1)
(17,9,1)
(61,83,1)
(68,14,1)
(28,80,1)
(50,46,1)
(71,76,1)
(67,9,1)
(9,6,1)
(79,38,1)
(50,84,1)
(25,72,1)
(63,45,1)
(45,64,1)
(63,27,1)
(30,29,1)
(16,73,1)
(84,66,1)
(86,4,1)
(26,79,1)
(14,17,1)
(22,63,1)
(49,61,1)
(86,77,1)
(44,53,1)
(34,38,1)
(23,66,1)
(21,12,1)
(41,29,1)
(84,10,1)
(47,30,1)
(4,28,1)
(0,26,1)
(25,83,2)
(49,28,2)
(45,38,2)
(48,19,2)
(80,9,2)
(72,28,2)
(25,28,2)
(30,28,2)
(63,84,2)
(44,47,2)
(79,47,2)
(76,83,2)
(9,77,2)
(61,83,2)
(35,9,2)
(55,19,2)
(41,28,2)
(19,79,2)
(61,84,2)
(7,9,2)
(30,61,2)
(76,84,2)
(86,77,2)
(30,29,2)
(71,47,2)
(22,79,2)
(76,47,2)
(50,46,2)
(73,28,2)
(45,79,2)
(53,47,2)
(40,63,2)
(6,9,2)
(20,47,2)
(84,66,2)
(47,30,2)
(34,47,2)
(54,19,2)
(63,27,2)
(29,25,2)
(50,84,2)
(57,47,2)
(70,28,2)
(31,47,2)
(0,79,2)
(40,79,2)
(37,84,2)
(68,9,2)
(43,12,2)
(9,9,2)
(17,9,2)
(28,80,2)
(83,68,2)
(14,9,2)
(83,9,2)
(63,45,2)
(38,47,2)
(74,9,2)
(46,19,2)
(47,28,2)
(18,9,2)
(27,19,2)
(69,47,2)
(80,83,2)
(2,47,2)
(37,47,2)
(19,47,2)
(86,9,2)
(38,37,2)
(68,84,2)
(63,79,2)
(50,19,2)
(24,47,2)
(29,52,2)
(19,40,2)
(82,19,2)
(61,28,2)
(28,9,2)
(79,38,2)
(16,28,2)
(29,28,2)
(4,9,2)
(26,79,2)
(46,38,2)
(64,79,2)
-----------------------------------
(0,dataLen)
(1,)
(2,0)
(3,args)
(4,i)
(5,if (100-dataLen > 1)
(6,1)
(7,i)
(8,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(9,i < 1)
(10,dataBuffer)
(11,dataBuffer)
(12,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(13,)
(14,data)
(15,)
(16,dataLen)
(17,dataLen)
(18,1)
(19,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(20,data[dataLen] = \\\'\\\\0\\\')
(21,COMMAND_INT)
(22,\\\'\\\\n\\\')
(23,data)
(24,data)
(25,100-dataLen)
(26,data)
(27,data[dataLen-1] = \\\'\\\\0\\\')
(28,100-dataLen > 1)
(29,(int)
(30,fgets(data+dataLen, (int)
(31,printLine("fgets()
(32,i)
(33,)
(34,dataLen)
(35,dataLen)
(36,if (fgets(data+dataLen, (int)
(37,strlen(data)
(38,dataLen = strlen(data)
(39,)
(40,data[dataLen-1] == \\\'\\\\n\\\')
(41,stdin)
(42,0)
(43,EXECVP(COMMAND_INT, args)
(44,data)
(45,dataLen-1)
(46,dataLen-1)
(47,fgets(data+dataLen, (int)
(48,\\\'\\\\0\\\')
(49,100)
(50,data[dataLen-1])
(51,)
(52,int)
(53,dataLen)
(54,data)
(55,1)
(56,)
(57,dataLen)
(58,data)
(59,COMMAND_ARG2)
(60,i)
(61,data+dataLen)
(62,dataLen)
(63,data[dataLen-1])
(64,1)
(65,args)
(66,dataBuffer[100] = COMMAND_ARG2)
(67,args)
(68,strlen(data)
(69,"fgets()
(70,NULL)
(71,\\\'\\\\0\\\')
(72,dataLen)
(73,data)
(74,100)
(75,RET)
(76,data[dataLen])
(77,i = 0)
(78,for(i = 0; i < 1; i++)
(79,dataLen > 0)
(80,100-dataLen)
(81,dataBuffer)
(82,dataLen)
(83,dataLen = strlen(data)
(84,data = dataBuffer)
(85,)
(86,i++)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
