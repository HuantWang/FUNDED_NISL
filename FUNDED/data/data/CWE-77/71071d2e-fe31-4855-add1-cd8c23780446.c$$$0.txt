-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__wchar_t_file_popen_17_bad()
{
    int i;
    wchar_t * data;
    wchar_t data_buf[100] = FULL_COMMAND;
    data = data_buf;
    for(i = 0; i < 1; i++)
    {
        {
            /* Read input from a file */
            size_t dataLen = wcslen(data);
            FILE * pFile;
            /* if there is room in data, attempt to read the input from a file */
            if (100-dataLen > 1)
            {
                pFile = fopen(FILENAME, "r");
                if (pFile != NULL)
                {
                    /* POTENTIAL FLAW: Read data from a file */
                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)
                    {
                        printLine("fgetws() failed");
                        /* Restore NUL terminator if fgetws fails */
                        data[dataLen] = L'\0';
                    }
                    fclose(pFile);
                }
            }
        }
    }
    {
        FILE *pipe;
        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */
        pipe = POPEN(data, L"w");
        if (pipe != NULL)
        {
            PCLOSE(pipe);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
11,12
12,13
12,14
14,15
14,16
17,18
18,19
18,20
20,21
20,22
20,23
22,23
24,25
25,26
27,28
28,29
28,30
29,30
31,32
33,34
33,35
33,36
33,37
34,35
35,36
35,37
36,37
39,40
39,41
40,41
43,44
44,45
46,47
47,48
47,49
47,50
48,49
49,50
49,51
50,51
52,53
52,54
54,55
55,56
55,57
56,57
58,59
60,61
61,62
61,63
62,63
64,65
64,66
67,68
67,69
68,69
68,70
69,70
69,71
71,72
74,75
74,76
75,76
76,77
76,78
77,78
79,80
79,81
79,82
80,81
82,83
85,86
85,87
86,87
86,88
87,88
89,90
91,92
91,93
92,93
92,94
93,94
93,95
94,95
94,96
94,97
94,98
95,96
97,98
97,99
98,99
100,101
102,103
102,104
103,104
103,105
106,107
107,108
107,109
109,110
111,112
113,114
115,116
115,117
116,117
117,118
117,119
118,119
121,122
122,123
122,124
123,124
123,125
124,125
126,127
129,130
130,131
130,132
131,132
133,134
135,136
135,137
135,138
136,137
137,138
137,139
138,139
140,141
140,142
143,144
144,145
144,146
145,146
147,148
147,149
147,150
148,149
150,151
153,154
153,155
154,155
154,156
155,156
157,158
159,160
160,161
161,162
161,163
162,163
164,165
-----nextToken-----
2,4,8,10,13,15,16,19,21,23,26,30,32,37,38,41,42,45,51,53,57,59,63,65,66,70,72,73,78,81,83,84,88,90,96,99,101,104,105,108,110,112,114,119,120,125,127,128,132,134,139,141,142,146,149,151,152,156,158,163,165
-----computeFrom-----
28,29
28,30
35,36
35,37
39,40
39,41
68,69
68,70
69,70
69,71
76,77
76,78
86,87
86,88
93,94
93,95
97,98
97,99
107,108
107,109
122,123
122,124
144,145
144,146
154,155
154,156
-----guardedBy-----
72,127
90,114
88,134
99,125
110,127
156,165
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ForStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;IdExpression;Name;LiteralExpression;UnaryExpression;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Pointer;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__wchar_t_file_popen_17_bad(){    int i;    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    for(i = 0; i < 1; i++)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
void
CWE78_OS_Command_Injection__wchar_t_file_popen_17_bad()
CWE78_OS_Command_Injection__wchar_t_file_popen_17_bad
{    int i;    wchar_t * data;    wchar_t data_buf[100] = FULL_COMMAND;    data = data_buf;    for(i = 0; i < 1; i++)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }    {        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }}
int i;
int i;
int
i
i
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t data_buf[100] = FULL_COMMAND;
wchar_t
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
for(i = 0; i < 1; i++)    {        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
i = 0;
i = 0
i
i
0
i < 1
i
i
1
i++
i
i
{        {            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }    }
{            /* Read input from a file */            size_t dataLen = wcslen(data);            FILE * pFile;            /* if there is room in data, attempt to read the input from a file */            if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }        }
size_t dataLen = wcslen(data);
size_t dataLen = wcslen(data);
size_t
size_t
dataLen = wcslen(data)
dataLen
= wcslen(data)
wcslen(data)
wcslen
wcslen
data
data
FILE * pFile;
FILE * pFile;
FILE
FILE
* pFile
*
pFile
if (100-dataLen > 1)            {                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{                pFile = fopen(FILENAME, "r");                if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }            }
pFile = fopen(FILENAME, "r");
pFile = fopen(FILENAME, "r")
pFile
pFile
fopen(FILENAME, "r")
fopen
fopen
FILENAME
FILENAME
"r"
if (pFile != NULL)                {                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
pFile != NULL
pFile
pFile
NULL
NULL
{                    /* POTENTIAL FLAW: Read data from a file */                    if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }                    fclose(pFile);                }
if (fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL)                    {                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
fgetws(data+dataLen, (int)(100-dataLen), pFile) == NULL
fgetws(data+dataLen, (int)(100-dataLen), pFile)
fgetws
fgetws
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
pFile
pFile
NULL
NULL
{                        printLine("fgetws() failed");                        /* Restore NUL terminator if fgetws fails */                        data[dataLen] = L'\0';                    }
printLine("fgetws() failed");
printLine("fgetws() failed")
printLine
printLine
"fgetws() failed"
data[dataLen] = L'\0';
data[dataLen] = L'\0'
data[dataLen]
data
data
dataLen
dataLen
L'\0'
fclose(pFile);
fclose(pFile)
fclose
fclose
pFile
pFile
{        FILE *pipe;        /* POTENTIAL FLAW: Execute command in data possibly leading to command injection */        pipe = POPEN(data, L"w");        if (pipe != NULL)        {            PCLOSE(pipe);        }    }
FILE *pipe;
FILE *pipe;
FILE
FILE
*pipe
*
pipe
pipe = POPEN(data, L"w");
pipe = POPEN(data, L"w")
pipe
pipe
POPEN(data, L"w")
POPEN
POPEN
data
data
L"w"
if (pipe != NULL)        {            PCLOSE(pipe);        }
pipe != NULL
pipe
pipe
NULL
NULL
{            PCLOSE(pipe);        }
PCLOSE(pipe);
PCLOSE(pipe)
PCLOSE
PCLOSE
pipe
pipe
-----joern-----
(18,22,0)
(55,25,0)
(55,56,0)
(16,67,0)
(6,7,0)
(26,47,0)
(32,63,0)
(8,51,0)
(5,18,0)
(27,5,0)
(67,16,0)
(23,14,0)
(47,63,0)
(20,14,0)
(0,15,0)
(2,67,0)
(19,18,0)
(57,66,0)
(30,7,0)
(65,68,0)
(47,51,0)
(50,40,0)
(9,15,0)
(71,47,0)
(45,70,0)
(49,0,0)
(38,1,0)
(14,23,0)
(62,15,0)
(60,18,0)
(64,18,0)
(46,59,0)
(13,1,0)
(37,71,0)
(40,52,0)
(39,66,0)
(31,47,0)
(51,63,0)
(24,63,0)
(71,66,0)
(58,68,0)
(28,53,0)
(35,67,0)
(56,55,0)
(48,16,0)
(44,42,0)
(1,63,0)
(41,39,0)
(4,35,0)
(66,67,0)
(34,35,0)
(65,67,0)
(66,39,0)
(33,65,0)
(71,5,0)
(12,71,0)
(25,55,0)
(43,56,0)
(56,5,0)
(29,23,0)
(69,63,0)
(21,11,0)
(11,15,0)
(54,51,0)
(23,5,0)
(59,42,0)
(3,63,0)
(66,71,0)
(36,56,0)
(67,70,0)
(53,5,0)
(55,66,0)
(5,53,0)
(66,55,0)
(10,11,0)
(17,23,0)
(72,16,0)
(53,47,0)
(49,65,1)
(66,71,1)
(53,28,1)
(21,10,1)
(66,67,1)
(28,27,1)
(33,44,1)
(7,6,1)
(11,15,1)
(16,48,1)
(14,23,1)
(59,46,1)
(9,62,1)
(71,12,1)
(20,23,1)
(14,20,1)
(47,51,1)
(23,5,1)
(0,15,1)
(61,40,1)
(11,21,1)
(55,25,1)
(33,39,1)
(55,56,1)
(26,51,1)
(65,33,1)
(15,9,1)
(35,67,1)
(2,14,1)
(46,39,1)
(5,53,1)
(48,72,1)
(27,11,1)
(0,49,1)
(65,67,1)
(37,35,1)
(71,5,1)
(57,55,1)
(50,7,1)
(72,2,1)
(31,26,1)
(41,66,1)
(54,8,1)
(10,15,1)
(30,11,1)
(56,5,1)
(36,71,1)
(66,57,1)
(6,30,1)
(29,5,1)
(47,31,1)
(49,14,1)
(34,4,1)
(12,37,1)
(39,66,1)
(17,29,1)
(71,47,1)
(4,67,1)
(62,47,1)
(43,36,1)
(66,55,1)
(53,47,1)
(44,59,1)
(23,17,1)
(35,34,1)
(40,50,1)
(51,54,1)
(49,35,1)
(10,0,1)
(39,41,1)
(61,7,1)
(67,16,1)
(56,43,1)
(39,35,2)
(66,55,2)
(66,35,2)
(2,14,2)
(55,35,2)
(56,35,2)
(20,11,2)
(21,11,2)
(41,35,2)
(4,14,2)
(17,11,2)
(53,47,2)
(39,66,2)
(59,39,2)
(47,51,2)
(49,11,2)
(12,35,2)
(48,14,2)
(50,7,2)
(11,11,2)
(37,35,2)
(33,35,2)
(23,5,2)
(10,11,2)
(5,11,2)
(53,11,2)
(43,35,2)
(34,14,2)
(65,35,2)
(35,67,2)
(55,56,2)
(67,14,2)
(57,35,2)
(36,35,2)
(11,15,2)
(71,47,2)
(67,16,2)
(29,11,2)
(40,7,2)
(56,5,2)
(35,14,2)
(65,67,2)
(16,14,2)
(46,39,2)
(23,11,2)
(66,67,2)
(0,15,2)
(66,71,2)
(44,39,2)
(14,23,2)
(71,5,2)
(5,53,2)
(28,11,2)
(71,35,2)
(0,11,2)
(14,11,2)
(27,11,2)
(72,14,2)
(55,25,2)
-----------------------------------
(0,i++)
(1,)
(2,pFile)
(3,i)
(4,pFile)
(5,dataLen = wcslen(data)
(6,NULL)
(7,pipe != NULL)
(8,data_buf)
(9,0)
(10,i)
(11,i < 1)
(12,dataLen)
(13,if (pipe != NULL)
(14,100-dataLen > 1)
(15,i = 0)
(16,fopen(FILENAME, "r")
(17,dataLen)
(18,)
(19,if (100-dataLen > 1)
(20,1)
(21,1)
(22,)
(23,100-dataLen)
(24,data_buf)
(25,int)
(26,data)
(27,dataLen)
(28,data)
(29,100)
(30,pipe)
(31,data_buf)
(32,data)
(33,pFile)
(34,NULL)
(35,pFile != NULL)
(36,100)
(37,data)
(38,pipe)
(39,fgetws(data+dataLen, (int)
(40,PCLOSE(pipe)
(41,NULL)
(42,)
(43,dataLen)
(44,\\\'\\\\0\\\')
(45,if (pFile != NULL)
(46,"fgetws()
(47,data = data_buf)
(48,"r")
(49,i)
(50,pipe)
(51,data_buf[100] = FULL_COMMAND)
(52,)
(53,wcslen(data)
(54,FULL_COMMAND)
(55,(int)
(56,100-dataLen)
(57,pFile)
(58,if (fgetws(data+dataLen, (int)
(59,printLine("fgetws()
(60,dataLen)
(61,RET)
(62,i)
(63,)
(64,pFile)
(65,fclose(pFile)
(66,fgetws(data+dataLen, (int)
(67,pFile = fopen(FILENAME, "r")
(68,)
(69,for(i = 0; i < 1; i++)
(70,)
(71,data+dataLen)
(72,FILENAME)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
