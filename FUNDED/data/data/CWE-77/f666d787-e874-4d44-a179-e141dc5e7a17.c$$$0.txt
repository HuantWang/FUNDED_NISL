-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnv_34_unionType myUnion;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    /* FIX: Append a fixed string to data (not user / external input) */
    wcscat(data, L"*.*");
    myUnion.unionFirst = data;
    {
        wchar_t * data = myUnion.unionSecond;
        {
            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* wspawnv - specify the path where the command is located */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
14,15
16,17
18,19
19,20
19,21
21,22
21,23
21,24
23,24
25,26
26,27
28,29
29,30
29,31
30,31
32,33
34,35
35,36
35,37
35,38
36,37
38,39
41,42
42,43
42,44
43,44
43,45
44,45
47,48
49,50
49,51
50,51
51,52
51,53
53,54
53,55
53,56
56,57
57,58
57,59
58,59
61,62
61,63
62,63
63,64
63,65
65,66
65,67
65,68
65,69
69,70
70,71
70,72
70,73
70,74
71,72
73,74
75,76
77,78
79,80
80,81
80,82
80,83
80,84
81,82
83,84
85,86
87,88
-----nextToken-----
2,4,8,10,11,15,17,20,22,24,27,31,33,37,39,40,45,46,48,52,54,55,59,60,64,66,67,68,72,74,76,78,82,84,86,88
-----computeFrom-----
29,30
29,31
42,43
42,44
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;FieldReference;IdExpression;Name;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FieldReference;IdExpression;Name;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnv_34_unionType myUnion;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnv_34_unionType myUnion;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    myUnion.unionFirst = data;    {        wchar_t * data = myUnion.unionSecond;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnv_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnv_34_unionType myUnion;
CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnv_34_unionType
CWE78_OS_Command_Injection__wchar_t_connect_socket_w32_spawnv_34_unionType
myUnion
myUnion
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
myUnion.unionFirst = data;
myUnion.unionFirst = data
myUnion.unionFirst
myUnion
myUnion
unionFirst
data
data
{        wchar_t * data = myUnion.unionSecond;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }
wchar_t * data = myUnion.unionSecond;
wchar_t * data = myUnion.unionSecond;
wchar_t
* data = myUnion.unionSecond
*
data
= myUnion.unionSecond
myUnion.unionSecond
myUnion
myUnion
unionSecond
{            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);        }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
_wspawnv
_wspawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(11,13,0)
(18,4,0)
(5,14,0)
(21,14,0)
(9,8,0)
(29,28,0)
(26,8,0)
(12,15,0)
(2,24,0)
(24,13,0)
(22,13,0)
(4,13,0)
(23,28,0)
(17,24,0)
(28,29,0)
(29,11,0)
(8,13,0)
(16,13,0)
(30,3,0)
(10,0,0)
(3,4,0)
(4,8,0)
(6,14,0)
(27,11,0)
(8,24,0)
(19,29,0)
(0,15,0)
(25,3,0)
(20,28,0)
(1,13,0)
(14,0,0)
(14,15,0)
(15,11,0)
(30,25,1)
(3,30,1)
(4,18,1)
(20,19,1)
(5,6,1)
(0,10,1)
(25,8,1)
(26,9,1)
(4,8,1)
(8,26,1)
(29,28,1)
(9,24,1)
(19,4,1)
(14,5,1)
(18,3,1)
(8,24,1)
(6,21,1)
(23,20,1)
(10,29,1)
(7,14,1)
(14,0,1)
(28,23,1)
(24,17,1)
(21,0,1)
(17,2,1)
(4,8,2)
(14,0,2)
(29,28,2)
(8,24,2)
-----------------------------------
(0,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(1,myUnion)
(2,dataBuffer)
(3,myUnion.unionFirst)
(4,myUnion.unionFirst = data)
(5,args)
(6,COMMAND_INT_PATH)
(7,RET)
(8,data = dataBuffer)
(9,data)
(10,args)
(11,)
(12,args)
(13,)
(14,_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
(15,)
(16,data)
(17,COMMAND_ARG2)
(18,data)
(19,data)
(20,myUnion)
(21,_P_WAIT)
(22,dataBuffer)
(23,unionSecond)
(24,dataBuffer[100] = COMMAND_ARG2)
(25,myUnion)
(26,dataBuffer)
(27,data)
(28,myUnion.unionSecond)
(29,* data = myUnion.unionSecond)
(30,unionFirst)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
