-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_53_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_system_53b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_53_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_53b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_system_53_bad()
CWE78_OS_Command_Injection__char_console_system_53_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_53b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_system_53b_badSink(data);
CWE78_OS_Command_Injection__char_console_system_53b_badSink(data)
CWE78_OS_Command_Injection__char_console_system_53b_badSink
CWE78_OS_Command_Injection__char_console_system_53b_badSink
data
data
-----joern-----
(52,51,0)
(69,47,0)
(49,13,0)
(33,37,0)
(46,2,0)
(45,26,0)
(56,69,0)
(3,50,0)
(62,53,0)
(26,51,0)
(33,51,0)
(63,49,0)
(36,53,0)
(40,37,0)
(6,49,0)
(2,25,0)
(20,47,0)
(3,48,0)
(47,27,0)
(25,2,0)
(25,51,0)
(37,47,0)
(27,47,0)
(33,16,0)
(42,48,0)
(28,6,0)
(58,42,0)
(49,63,0)
(7,27,0)
(34,53,0)
(67,9,0)
(2,46,0)
(63,29,0)
(47,31,0)
(22,42,0)
(13,49,0)
(9,25,0)
(64,51,0)
(63,8,0)
(29,51,0)
(4,31,0)
(26,48,0)
(44,8,0)
(48,36,0)
(42,66,0)
(69,46,0)
(32,3,0)
(49,6,0)
(61,3,0)
(5,29,0)
(59,39,0)
(50,39,0)
(9,47,0)
(66,42,0)
(3,51,0)
(48,26,0)
(15,63,0)
(14,57,0)
(18,36,0)
(38,37,0)
(1,48,0)
(16,17,0)
(8,63,0)
(34,51,0)
(29,48,0)
(46,69,0)
(6,48,0)
(29,63,0)
(12,59,0)
(25,9,0)
(35,50,0)
(23,25,0)
(60,33,0)
(55,34,0)
(43,29,0)
(51,53,0)
(30,24,0)
(24,53,0)
(70,2,0)
(21,24,0)
(54,69,0)
(19,16,0)
(68,53,0)
(11,36,0)
(41,6,0)
(27,51,0)
(51,24,0)
(10,9,0)
(0,66,0)
(37,33,0)
(70,25,1)
(56,47,1)
(44,63,1)
(20,8,1)
(37,47,1)
(48,26,1)
(8,63,1)
(3,48,1)
(2,25,1)
(66,0,1)
(5,43,1)
(10,23,1)
(61,59,1)
(38,60,1)
(16,19,1)
(63,49,1)
(55,50,1)
(28,41,1)
(25,51,1)
(58,22,1)
(34,51,1)
(12,8,1)
(49,13,1)
(8,44,1)
(55,66,1)
(3,51,1)
(21,30,1)
(24,21,1)
(51,52,1)
(3,32,1)
(22,48,1)
(23,69,1)
(63,15,1)
(69,47,1)
(7,20,1)
(41,29,1)
(29,51,1)
(40,38,1)
(32,61,1)
(55,16,1)
(25,9,1)
(35,3,1)
(19,33,1)
(33,37,1)
(63,29,1)
(55,46,1)
(27,51,1)
(29,48,1)
(26,45,1)
(42,48,1)
(54,56,1)
(37,40,1)
(46,2,1)
(47,27,1)
(52,64,1)
(29,5,1)
(6,48,1)
(64,24,1)
(49,6,1)
(66,42,1)
(67,10,1)
(50,35,1)
(26,51,1)
(0,42,1)
(9,47,1)
(6,28,1)
(60,46,1)
(46,69,1)
(15,49,1)
(27,7,1)
(1,51,1)
(2,70,1)
(65,34,1)
(34,55,1)
(45,1,1)
(59,12,1)
(42,58,1)
(9,67,1)
(69,54,1)
(51,24,1)
(43,66,1)
(33,51,1)
(33,37,2)
(51,24,2)
(6,48,2)
(33,46,2)
(63,29,2)
(9,69,2)
(48,26,2)
(60,46,2)
(5,66,2)
(49,66,2)
(50,8,2)
(67,69,2)
(3,8,2)
(47,27,2)
(34,51,2)
(9,47,2)
(47,8,2)
(8,66,2)
(42,48,2)
(70,69,2)
(29,48,2)
(35,8,2)
(44,66,2)
(19,46,2)
(2,25,2)
(7,8,2)
(27,8,2)
(54,8,2)
(10,69,2)
(15,66,2)
(26,51,2)
(20,8,2)
(27,51,2)
(46,8,2)
(37,46,2)
(28,66,2)
(41,66,2)
(32,8,2)
(69,47,2)
(69,8,2)
(46,2,2)
(49,6,2)
(46,69,2)
(37,47,2)
(25,69,2)
(25,51,2)
(29,66,2)
(8,63,2)
(25,9,2)
(40,46,2)
(12,8,2)
(43,66,2)
(16,46,2)
(3,51,2)
(59,8,2)
(2,69,2)
(3,48,2)
(56,8,2)
(29,51,2)
(66,42,2)
(6,66,2)
(23,69,2)
(38,46,2)
(49,13,2)
(33,51,2)
(61,8,2)
(63,66,2)
(63,49,2)
-----------------------------------
(0,1)
(1,dataLen)
(2,data[dataLen-1] == \\\'\\\\n\\\')
(3,data[dataLen])
(4,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(5,dataLen)
(6,100-dataLen)
(7,data)
(8,fgets(data+dataLen, (int)
(9,dataLen-1)
(10,dataLen)
(11,if (100-dataLen > 1)
(12,"fgets()
(13,int)
(14,if (fgets(data+dataLen, (int)
(15,stdin)
(16,data[dataLen-1] = \\\'\\\\0\\\')
(17,)
(18,dataLen)
(19,\\\'\\\\0\\\')
(20,dataLen)
(21,FULL_COMMAND)
(22,100)
(23,data)
(24,data_buf[100] = FULL_COMMAND)
(25,data[dataLen-1])
(26,strlen(data)
(27,strlen(data)
(28,dataLen)
(29,data+dataLen)
(30,data_buf)
(31,)
(32,dataLen)
(33,data[dataLen-1])
(34,CWE78_OS_Command_Injection__char_console_system_53b_badSink(data)
(35,\\\'\\\\0\\\')
(36,)
(37,dataLen-1)
(38,dataLen)
(39,)
(40,1)
(41,100)
(42,100-dataLen)
(43,data)
(44,NULL)
(45,data)
(46,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(47,dataLen = strlen(data)
(48,dataLen = strlen(data)
(49,(int)
(50,data[dataLen] = \\\'\\\\0\\\')
(51,data = data_buf)
(52,data_buf)
(53,)
(54,0)
(55,data)
(56,dataLen)
(57,)
(58,dataLen)
(59,printLine("fgets()
(60,data)
(61,data)
(62,data_buf)
(63,fgets(data+dataLen, (int)
(64,data)
(65,RET)
(66,100-dataLen > 1)
(67,1)
(68,data)
(69,dataLen > 0)
(70,\\\'\\\\n\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
