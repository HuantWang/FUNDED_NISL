-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnv_32_bad()
{
    char * data;
    char * *dataPtr1 = &data;
    char * *dataPtr2 = &data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        char * data = *dataPtr1;
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
        *dataPtr1 = data;
    }
    {
        char * data = *dataPtr2;
        {
            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* spawnv - specify the path where the command is located */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
61,63
61,64
62,63
63,64
63,65
64,65
66,67
66,68
68,69
69,70
69,71
70,71
72,73
74,75
75,76
75,77
77,78
77,79
77,80
80,81
81,82
81,83
82,83
84,85
86,87
86,88
87,88
87,89
88,89
90,91
92,93
93,94
94,95
94,96
94,97
94,98
95,96
97,98
97,99
98,99
100,101
102,103
104,105
104,106
105,106
105,107
107,108
110,111
111,112
111,113
112,113
113,114
115,116
117,118
117,119
118,119
119,120
119,121
121,122
121,123
121,124
124,125
125,126
126,127
128,129
128,130
129,130
130,131
130,132
132,133
132,134
132,135
132,136
136,137
137,138
137,139
137,140
137,141
138,139
140,141
142,143
144,145
146,147
147,148
147,149
147,150
147,151
148,149
150,151
152,153
154,155
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,65,67,71,73,76,78,79,83,85,89,91,96,99,101,103,106,108,109,114,116,120,122,123,127,131,133,134,135,139,141,143,145,149,151,153,155
-----computeFrom-----
45,46
45,47
87,88
87,89
97,98
97,99
104,105
104,106
105,106
105,107
111,112
111,113
-----guardedBy-----
89,103
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_environment_w32_spawnv_32_bad(){    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
void
CWE78_OS_Command_Injection__char_environment_w32_spawnv_32_bad()
CWE78_OS_Command_Injection__char_environment_w32_spawnv_32_bad
{    char * data;    char * *dataPtr1 = &data;    char * *dataPtr2 = &data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }    {        char * data = *dataPtr2;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
char * data;
char * data;
char
* data
*
data
char * *dataPtr1 = &data;
char * *dataPtr1 = &data;
char
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
char * *dataPtr2 = &data;
char * *dataPtr2 = &data;
char
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        char * data = *dataPtr1;        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }        *dataPtr1 = data;    }
char * data = *dataPtr1;
char * data = *dataPtr1;
char
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        char * data = *dataPtr2;        {            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }
char * data = *dataPtr2;
char * data = *dataPtr2;
char
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* spawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _spawnv(_P_WAIT, COMMAND_INT_PATH, args);        }
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
char
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_spawnv(_P_WAIT, COMMAND_INT_PATH, args);
_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
_spawnv
_spawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(31,56,0)
(11,28,0)
(43,19,0)
(5,50,0)
(1,16,0)
(48,1,0)
(32,56,0)
(42,28,0)
(7,41,0)
(23,32,0)
(2,44,0)
(41,46,0)
(44,28,0)
(52,57,0)
(67,45,0)
(38,14,0)
(19,28,0)
(67,38,0)
(23,45,0)
(55,14,0)
(57,52,0)
(67,18,0)
(12,67,0)
(30,38,0)
(51,16,0)
(39,67,0)
(25,34,0)
(24,43,0)
(13,34,0)
(35,66,0)
(68,23,0)
(40,16,0)
(64,41,0)
(43,40,0)
(34,53,0)
(54,1,0)
(53,2,0)
(4,2,0)
(27,56,0)
(69,61,0)
(0,22,0)
(26,57,0)
(38,56,0)
(66,44,0)
(58,34,0)
(34,2,0)
(35,52,0)
(32,54,0)
(19,22,0)
(46,28,0)
(45,23,0)
(20,35,0)
(17,32,0)
(45,67,0)
(33,66,0)
(3,44,0)
(14,38,0)
(36,61,0)
(67,39,0)
(65,23,0)
(59,40,0)
(63,19,0)
(50,1,0)
(66,35,0)
(49,56,0)
(37,45,0)
(39,32,0)
(8,28,0)
(15,46,0)
(60,39,0)
(16,28,0)
(47,54,0)
(56,16,0)
(22,19,0)
(54,32,0)
(29,53,0)
(9,28,0)
(40,1,0)
(1,50,0)
(41,28,0)
(62,39,0)
(21,52,0)
(39,1,0)
(6,46,0)
(61,38,0)
(50,19,0)
(52,28,0)
(25,13,1)
(39,32,1)
(26,21,1)
(34,53,1)
(64,46,1)
(33,40,1)
(50,19,1)
(37,12,1)
(39,62,1)
(34,58,1)
(57,26,1)
(14,55,1)
(61,38,1)
(22,0,1)
(6,52,1)
(13,53,1)
(43,24,1)
(23,32,1)
(36,38,1)
(52,57,1)
(69,36,1)
(54,47,1)
(65,37,1)
(43,19,1)
(55,30,1)
(7,64,1)
(20,33,1)
(1,50,1)
(67,45,1)
(24,61,1)
(35,52,1)
(30,32,1)
(15,6,1)
(66,35,1)
(29,66,1)
(47,17,1)
(48,41,1)
(46,15,1)
(45,23,1)
(40,1,1)
(60,61,1)
(21,19,1)
(67,38,1)
(12,39,1)
(54,1,1)
(67,39,1)
(61,69,1)
(53,29,1)
(68,65,1)
(39,1,1)
(38,14,1)
(50,5,1)
(41,46,1)
(58,25,1)
(35,20,1)
(59,43,1)
(23,68,1)
(19,22,1)
(24,67,1)
(32,54,1)
(0,63,1)
(40,59,1)
(5,48,1)
(17,1,1)
(10,34,1)
(62,60,1)
(41,7,1)
(40,1,2)
(39,1,2)
(65,61,2)
(50,19,2)
(66,35,2)
(39,61,2)
(39,32,2)
(32,54,2)
(60,61,2)
(35,52,2)
(23,61,2)
(67,38,2)
(19,22,2)
(37,61,2)
(12,61,2)
(45,23,2)
(38,14,2)
(67,45,2)
(67,61,2)
(1,50,2)
(68,61,2)
(62,61,2)
(54,1,2)
(61,38,2)
(43,19,2)
(45,61,2)
(52,57,2)
(41,46,2)
(34,53,2)
(67,39,2)
(23,32,2)
-----------------------------------
(0,data)
(1,* data = *dataPtr1)
(2,)
(3,data)
(4,args)
(5,dataPtr1)
(6,dataBuffer)
(7,dataBuffer)
(8,dataPtr1)
(9,dataBuffer)
(10,RET)
(11,dataPtr2)
(12,environment)
(13,_P_WAIT)
(14,GETENV(ENV_VARIABLE)
(15,COMMAND_ARG2)
(16,)
(17,dataLen)
(18,)
(19,* *dataPtr1 = &data)
(20,dataPtr2)
(21,dataPtr2)
(22,&data)
(23,dataLen-1)
(24,dataPtr1)
(25,COMMAND_INT_PATH)
(26,data)
(27,dataLen)
(28,)
(29,args)
(30,environment)
(31,environment)
(32,dataLen = strlen(data)
(33,data)
(34,_spawnv(_P_WAIT, COMMAND_INT_PATH, args)
(35,*dataPtr2)
(36,environment)
(37,100)
(38,* environment = GETENV(ENV_VARIABLE)
(39,data+dataLen)
(40,*dataPtr1 = data)
(41,data = dataBuffer)
(42,data)
(43,*dataPtr1)
(44,)
(45,100-dataLen-1)
(46,dataBuffer[100] = COMMAND_ARG2)
(47,data)
(48,data)
(49,if (environment != NULL)
(50,*dataPtr1)
(51,data)
(52,* *dataPtr2 = &data)
(53,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(54,strlen(data)
(55,ENV_VARIABLE)
(56,)
(57,&data)
(58,args)
(59,data)
(60,data)
(61,environment != NULL)
(62,dataLen)
(63,dataPtr1)
(64,data)
(65,dataLen)
(66,* data = *dataPtr2)
(67,strncat(data+dataLen, environment, 100-dataLen-1)
(68,1)
(69,NULL)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
