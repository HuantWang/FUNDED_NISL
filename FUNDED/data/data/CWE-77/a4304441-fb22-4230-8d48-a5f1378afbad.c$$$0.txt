-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_51_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execvp_51_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_w32_execvp_51_bad()
CWE78_OS_Command_Injection__char_console_w32_execvp_51_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data);
CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data)
CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink
CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink
data
data
-----joern-----
(56,69,0)
(15,24,0)
(44,22,0)
(3,21,0)
(51,0,0)
(59,42,0)
(27,10,0)
(10,27,0)
(15,6,0)
(19,48,0)
(1,9,0)
(68,20,0)
(4,11,0)
(38,27,0)
(31,20,0)
(3,24,0)
(69,16,0)
(16,22,0)
(32,66,0)
(16,69,0)
(10,24,0)
(57,29,0)
(18,35,0)
(34,27,0)
(30,3,0)
(17,6,0)
(11,46,0)
(40,24,0)
(0,27,0)
(20,49,0)
(21,3,0)
(29,49,0)
(1,24,0)
(53,28,0)
(65,66,0)
(35,32,0)
(58,1,0)
(13,18,0)
(2,38,0)
(69,56,0)
(22,16,0)
(1,27,0)
(15,59,0)
(47,49,0)
(0,69,0)
(52,53,0)
(38,24,0)
(25,49,0)
(41,49,0)
(7,24,0)
(69,0,0)
(6,21,0)
(45,9,0)
(66,21,0)
(6,15,0)
(12,35,0)
(33,21,0)
(18,24,0)
(23,66,0)
(32,35,0)
(64,33,0)
(21,48,0)
(70,21,0)
(5,38,0)
(35,18,0)
(27,29,0)
(53,27,0)
(37,15,0)
(67,41,0)
(36,53,0)
(63,59,0)
(62,1,0)
(38,16,0)
(54,10,0)
(33,18,0)
(8,28,0)
(61,16,0)
(28,53,0)
(41,24,0)
(60,0,0)
(55,6,0)
(26,33,0)
(43,29,0)
(16,38,0)
(14,50,0)
(66,32,0)
(18,33,0)
(9,46,0)
(24,20,0)
(24,49,0)
(38,27,1)
(6,17,1)
(41,24,1)
(44,16,1)
(36,52,1)
(1,24,1)
(35,18,1)
(10,24,1)
(18,33,1)
(22,16,1)
(39,41,1)
(52,27,1)
(33,21,1)
(33,64,1)
(30,70,1)
(28,53,1)
(10,54,1)
(55,37,1)
(11,4,1)
(32,66,1)
(61,69,1)
(66,21,1)
(65,23,1)
(21,3,1)
(2,28,1)
(20,68,1)
(6,21,1)
(45,1,1)
(34,24,1)
(28,8,1)
(51,38,1)
(38,5,1)
(22,44,1)
(7,20,1)
(59,63,1)
(38,24,1)
(53,27,1)
(1,62,1)
(66,65,1)
(67,59,1)
(67,9,1)
(27,10,1)
(62,58,1)
(67,32,1)
(3,24,1)
(68,31,1)
(69,0,1)
(16,61,1)
(58,11,1)
(5,2,1)
(32,35,1)
(54,34,1)
(70,22,1)
(9,45,1)
(0,60,1)
(41,67,1)
(13,66,1)
(16,38,1)
(23,21,1)
(53,36,1)
(0,27,1)
(37,32,1)
(24,40,1)
(15,6,1)
(1,27,1)
(18,24,1)
(63,15,1)
(17,55,1)
(8,53,1)
(60,51,1)
(3,30,1)
(12,18,1)
(69,56,1)
(35,12,1)
(64,26,1)
(26,13,1)
(15,24,1)
(16,69,1)
(40,7,1)
(24,20,1)
(4,22,1)
(67,28,1)
(51,28,2)
(0,28,2)
(2,28,2)
(30,22,2)
(62,22,2)
(1,27,2)
(12,66,2)
(15,32,2)
(38,28,2)
(0,27,2)
(22,28,2)
(15,6,2)
(32,35,2)
(37,32,2)
(5,28,2)
(1,24,2)
(70,22,2)
(33,21,2)
(69,56,2)
(13,66,2)
(21,22,2)
(69,28,2)
(16,28,2)
(11,22,2)
(38,24,2)
(3,22,2)
(55,32,2)
(18,24,2)
(53,27,2)
(28,53,2)
(21,3,2)
(32,66,2)
(18,66,2)
(63,32,2)
(35,66,2)
(16,69,2)
(65,22,2)
(32,22,2)
(41,24,2)
(16,38,2)
(44,28,2)
(59,32,2)
(61,28,2)
(33,66,2)
(17,32,2)
(66,22,2)
(15,24,2)
(35,18,2)
(45,22,2)
(26,66,2)
(10,24,2)
(64,66,2)
(38,27,2)
(23,22,2)
(22,16,2)
(18,33,2)
(1,22,2)
(6,32,2)
(60,28,2)
(9,22,2)
(58,22,2)
(24,20,2)
(3,24,2)
(27,10,2)
(69,0,2)
(6,21,2)
(4,22,2)
(66,21,2)
-----------------------------------
(0,100-dataLen)
(1,data[dataLen])
(2,data)
(3,strlen(data)
(4,"fgets()
(5,dataLen)
(6,dataLen-1)
(7,data)
(8,1)
(9,data[dataLen] = \\\'\\\\0\\\')
(10,strlen(data)
(11,printLine("fgets()
(12,\\\'\\\\n\\\')
(13,data)
(14,if (fgets(data+dataLen, (int)
(15,data[dataLen-1])
(16,fgets(data+dataLen, (int)
(17,1)
(18,data[dataLen-1])
(19,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(20,dataBuffer[100] = COMMAND_ARG2)
(21,dataLen = strlen(data)
(22,fgets(data+dataLen, (int)
(23,dataLen)
(24,data = dataBuffer)
(25,data)
(26,dataLen)
(27,dataLen = strlen(data)
(28,100-dataLen > 1)
(29,)
(30,data)
(31,dataBuffer)
(32,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(33,dataLen-1)
(34,dataLen)
(35,data[dataLen-1] == \\\'\\\\n\\\')
(36,dataLen)
(37,data)
(38,data+dataLen)
(39,RET)
(40,dataBuffer)
(41,CWE78_OS_Command_Injection__char_console_w32_execvp_51b_badSink(data)
(42,)
(43,if (100-dataLen > 1)
(44,NULL)
(45,\\\'\\\\0\\\')
(46,)
(47,dataBuffer)
(48,)
(49,)
(50,)
(51,100)
(52,100)
(53,100-dataLen)
(54,data)
(55,dataLen)
(56,int)
(57,dataLen)
(58,data)
(59,data[dataLen-1] = \\\'\\\\0\\\')
(60,dataLen)
(61,stdin)
(62,dataLen)
(63,\\\'\\\\0\\\')
(64,1)
(65,0)
(66,dataLen > 0)
(67,data)
(68,COMMAND_ARG2)
(69,(int)
(70,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
