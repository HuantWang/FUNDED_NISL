-----label-----
1
-----code-----
static char * badSource(char * data)
{
    if(badStatic)
    {
        {
            /* Append input from an environment variable to data */
            size_t dataLen = strlen(data);
            char * environment = GETENV(ENV_VARIABLE);
            /* If there is data in the environment variable */
            if (environment != NULL)
            {
                /* POTENTIAL FLAW: Read data from an environment variable */
                strncat(data+dataLen, environment, 100-dataLen-1);
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
15,16
16,17
16,18
16,19
17,18
18,19
18,20
19,20
21,22
21,23
23,24
24,25
24,26
25,26
27,28
29,30
30,31
30,32
32,33
32,34
32,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
45,46
47,48
48,49
49,50
49,51
49,52
49,53
50,51
52,53
52,54
53,54
55,56
57,58
59,60
59,61
60,61
60,62
62,63
65,66
66,67
-----nextToken-----
2,4,5,7,9,10,14,20,22,26,28,31,33,34,38,40,44,46,51,54,56,58,61,63,64,67
-----computeFrom-----
42,43
42,44
52,53
52,54
59,60
59,61
60,61
60,62
-----guardedBy-----
44,58
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;IfStatement;IdExpression;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    if(badStatic)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    if(badStatic)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }    return data;}
if(badStatic)    {        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
badStatic
badStatic
{        {            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }    }
{            /* Append input from an environment variable to data */            size_t dataLen = strlen(data);            char * environment = GETENV(ENV_VARIABLE);            /* If there is data in the environment variable */            if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }        }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
char * environment = GETENV(ENV_VARIABLE);
char * environment = GETENV(ENV_VARIABLE);
char
* environment = GETENV(ENV_VARIABLE)
*
environment
= GETENV(ENV_VARIABLE)
GETENV(ENV_VARIABLE)
GETENV
GETENV
ENV_VARIABLE
ENV_VARIABLE
if (environment != NULL)            {                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
environment != NULL
environment
environment
NULL
NULL
{                /* POTENTIAL FLAW: Read data from an environment variable */                strncat(data+dataLen, environment, 100-dataLen-1);            }
strncat(data+dataLen, environment, 100-dataLen-1);
strncat(data+dataLen, environment, 100-dataLen-1)
strncat
strncat
data+dataLen
data
data
dataLen
dataLen
environment
environment
100-dataLen-1
100-dataLen
100
dataLen
dataLen
1
return data;
data
data
-----joern-----
(20,19,0)
(6,14,0)
(15,23,0)
(28,10,0)
(1,26,0)
(31,15,0)
(26,1,0)
(23,20,0)
(0,26,0)
(26,24,0)
(26,0,0)
(7,22,0)
(13,1,0)
(4,30,0)
(8,24,0)
(15,17,0)
(0,23,0)
(0,17,0)
(2,20,0)
(33,23,0)
(14,1,0)
(12,0,0)
(22,24,0)
(18,14,0)
(10,16,0)
(24,30,0)
(3,26,0)
(1,14,0)
(21,22,0)
(30,24,0)
(9,0,0)
(25,20,0)
(10,17,0)
(11,20,0)
(27,16,0)
(32,10,0)
(14,23,0)
(26,29,0)
(24,20,0)
(23,15,0)
(12,9,1)
(7,24,1)
(23,15,1)
(10,17,1)
(13,3,1)
(10,28,1)
(0,23,1)
(15,17,1)
(28,26,1)
(30,4,1)
(0,12,1)
(26,0,1)
(8,23,1)
(3,0,1)
(28,22,1)
(21,7,1)
(28,5,1)
(22,24,1)
(31,33,1)
(26,24,1)
(26,1,1)
(4,8,1)
(14,6,1)
(15,31,1)
(6,18,1)
(9,22,1)
(1,14,1)
(18,13,1)
(14,23,1)
(0,17,1)
(32,10,1)
(24,30,1)
(22,21,1)
(33,5,1)
(14,22,2)
(6,22,2)
(15,5,2)
(18,22,2)
(26,22,2)
(3,22,2)
(1,14,2)
(7,5,2)
(33,5,2)
(15,17,2)
(23,5,2)
(22,5,2)
(0,22,2)
(24,5,2)
(26,24,2)
(32,10,2)
(21,5,2)
(24,30,2)
(14,23,2)
(22,24,2)
(10,17,2)
(13,22,2)
(23,15,2)
(9,22,2)
(12,22,2)
(26,1,2)
(26,0,2)
(1,22,2)
(31,5,2)
(30,5,2)
(8,5,2)
(4,5,2)
(0,17,2)
(0,23,2)
-----------------------------------
(0,data+dataLen)
(1,100-dataLen-1)
(2,dataLen)
(3,environment)
(4,ENV_VARIABLE)
(5,badStatic)
(6,1)
(7,environment)
(8,environment)
(9,data)
(10,return data;)
(11,environment)
(12,dataLen)
(13,100)
(14,dataLen-1)
(15,strlen(data)
(16,)
(17,char * data)
(18,dataLen)
(19,)
(20,)
(21,NULL)
(22,environment != NULL)
(23,dataLen = strlen(data)
(24,* environment = GETENV(ENV_VARIABLE)
(25,if (environment != NULL)
(26,strncat(data+dataLen, environment, 100-dataLen-1)
(27,if(badStatic)
(28,data)
(29,)
(30,GETENV(ENV_VARIABLE)
(31,data)
(32,RET)
(33,dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
