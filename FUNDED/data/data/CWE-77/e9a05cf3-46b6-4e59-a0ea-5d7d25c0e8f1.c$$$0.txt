-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_64_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_system_64b_badSink(&data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
127,128
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,128
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;UnaryExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_64_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_64b_badSink(&data);}
void
CWE78_OS_Command_Injection__char_console_system_64_bad()
CWE78_OS_Command_Injection__char_console_system_64_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_64b_badSink(&data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_system_64b_badSink(&data);
CWE78_OS_Command_Injection__char_console_system_64b_badSink(&data)
CWE78_OS_Command_Injection__char_console_system_64b_badSink
CWE78_OS_Command_Injection__char_console_system_64b_badSink
&data
data
data
-----joern-----
(52,42,0)
(45,23,0)
(13,52,0)
(52,11,0)
(19,9,0)
(29,59,0)
(43,55,0)
(21,50,0)
(50,12,0)
(27,42,0)
(31,59,0)
(3,4,0)
(39,30,0)
(28,71,0)
(31,50,0)
(12,42,0)
(30,48,0)
(48,30,0)
(17,69,0)
(36,50,0)
(35,33,0)
(4,42,0)
(36,19,0)
(70,64,0)
(8,9,0)
(42,69,0)
(38,69,0)
(20,30,0)
(14,2,0)
(61,36,0)
(45,3,0)
(2,14,0)
(46,36,0)
(66,0,0)
(30,3,0)
(65,42,0)
(53,14,0)
(60,21,0)
(41,17,0)
(11,52,0)
(35,21,0)
(3,57,0)
(56,31,0)
(63,66,0)
(62,17,0)
(59,0,0)
(19,36,0)
(16,51,0)
(18,12,0)
(1,23,0)
(48,55,0)
(50,17,0)
(55,67,0)
(37,31,0)
(32,69,0)
(42,51,0)
(68,45,0)
(67,71,0)
(67,42,0)
(11,69,0)
(35,19,0)
(6,22,0)
(34,51,0)
(10,2,0)
(4,3,0)
(31,42,0)
(7,19,0)
(23,42,0)
(12,50,0)
(23,45,0)
(67,55,0)
(36,42,0)
(15,3,0)
(40,2,0)
(58,67,0)
(55,48,0)
(21,35,0)
(44,21,0)
(47,4,0)
(19,35,0)
(25,45,0)
(2,50,0)
(54,57,0)
(9,19,0)
(5,71,0)
(23,6,0)
(33,35,0)
(51,69,0)
(26,50,0)
(71,3,0)
(24,6,0)
(71,67,0)
(63,9,1)
(31,50,1)
(19,35,1)
(20,39,1)
(9,8,1)
(52,13,1)
(23,45,1)
(65,27,1)
(13,59,1)
(21,44,1)
(14,2,1)
(52,42,1)
(67,71,1)
(5,28,1)
(59,29,1)
(23,42,1)
(40,10,1)
(3,4,1)
(46,14,1)
(51,16,1)
(47,15,1)
(11,52,1)
(12,42,1)
(30,20,1)
(29,31,1)
(25,68,1)
(39,3,1)
(43,67,1)
(37,66,1)
(28,58,1)
(42,65,1)
(68,1,1)
(42,51,1)
(49,11,1)
(36,50,1)
(16,34,1)
(36,61,1)
(56,37,1)
(13,14,1)
(31,56,1)
(35,33,1)
(2,50,1)
(18,26,1)
(27,51,1)
(7,35,1)
(71,3,1)
(8,19,1)
(4,47,1)
(13,48,1)
(26,42,1)
(48,55,1)
(21,50,1)
(10,50,1)
(6,24,1)
(61,46,1)
(24,23,1)
(45,25,1)
(45,3,1)
(19,36,1)
(30,3,1)
(60,36,1)
(19,7,1)
(36,42,1)
(66,63,1)
(71,5,1)
(44,60,1)
(2,40,1)
(53,2,1)
(55,43,1)
(67,42,1)
(1,48,1)
(50,12,1)
(15,9,1)
(9,19,1)
(12,18,1)
(58,30,1)
(13,6,1)
(35,21,1)
(48,30,1)
(31,42,1)
(4,42,1)
(55,67,1)
(14,53,1)
(52,42,2)
(31,9,2)
(20,9,2)
(61,14,2)
(43,30,2)
(7,14,2)
(36,42,2)
(31,50,2)
(24,48,2)
(68,48,2)
(19,14,2)
(31,42,2)
(23,42,2)
(21,50,2)
(37,9,2)
(39,9,2)
(9,14,2)
(55,67,2)
(28,30,2)
(71,30,2)
(23,48,2)
(19,35,2)
(59,9,2)
(36,14,2)
(4,9,2)
(67,30,2)
(1,48,2)
(29,9,2)
(30,3,2)
(23,45,2)
(67,71,2)
(67,42,2)
(2,50,2)
(11,52,2)
(36,50,2)
(30,9,2)
(46,14,2)
(48,30,2)
(21,14,2)
(50,12,2)
(19,36,2)
(4,42,2)
(14,2,2)
(42,51,2)
(5,30,2)
(45,3,2)
(3,9,2)
(35,33,2)
(12,42,2)
(44,14,2)
(9,19,2)
(48,9,2)
(48,55,2)
(15,9,2)
(35,14,2)
(3,4,2)
(25,48,2)
(6,48,2)
(8,14,2)
(45,48,2)
(60,14,2)
(58,30,2)
(35,21,2)
(71,3,2)
(63,9,2)
(66,9,2)
(55,30,2)
(56,9,2)
(47,9,2)
-----------------------------------
(0,)
(1,data)
(2,100-dataLen)
(3,dataLen = strlen(data)
(4,strlen(data)
(5,1)
(6,data[dataLen-1] = \\\'\\\\0\\\')
(7,stdin)
(8,NULL)
(9,fgets(data+dataLen, (int)
(10,100)
(11,CWE78_OS_Command_Injection__char_console_system_64b_badSink(&data)
(12,strlen(data)
(13,data)
(14,100-dataLen > 1)
(15,dataLen)
(16,FULL_COMMAND)
(17,)
(18,data)
(19,fgets(data+dataLen, (int)
(20,0)
(21,100-dataLen)
(22,)
(23,data[dataLen-1])
(24,\\\'\\\\0\\\')
(25,1)
(26,dataLen)
(27,data)
(28,dataLen)
(29,\\\'\\\\0\\\')
(30,dataLen > 0)
(31,data[dataLen])
(32,data_buf)
(33,int)
(34,data_buf)
(35,(int)
(36,data+dataLen)
(37,data)
(38,data)
(39,dataLen)
(40,dataLen)
(41,dataLen)
(42,data = data_buf)
(43,\\\'\\\\n\\\')
(44,dataLen)
(45,dataLen-1)
(46,data)
(47,data)
(48,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(49,RET)
(50,dataLen = strlen(data)
(51,data_buf[100] = FULL_COMMAND)
(52,&data)
(53,1)
(54,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(55,data[dataLen-1] == \\\'\\\\n\\\')
(56,dataLen)
(57,)
(58,data)
(59,data[dataLen] = \\\'\\\\0\\\')
(60,100)
(61,dataLen)
(62,if (100-dataLen > 1)
(63,"fgets()
(64,)
(65,data_buf)
(66,printLine("fgets()
(67,data[dataLen-1])
(68,dataLen)
(69,)
(70,if (fgets(data+dataLen, (int)
(71,dataLen-1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
