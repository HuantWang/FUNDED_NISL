-----label-----
1
-----code-----
char * CWE78_OS_Command_Injection__char_console_system_61b_badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
char * CWE78_OS_Command_Injection__char_console_system_61b_badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
char
* CWE78_OS_Command_Injection__char_console_system_61b_badSource(char * data)
*
CWE78_OS_Command_Injection__char_console_system_61b_badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(39,31,0)
(6,45,0)
(18,35,0)
(60,11,0)
(0,25,0)
(4,9,0)
(13,31,0)
(41,21,0)
(9,4,0)
(8,36,0)
(42,25,0)
(4,44,0)
(7,38,0)
(41,45,0)
(24,32,0)
(3,52,0)
(48,61,0)
(33,26,0)
(36,18,0)
(22,53,0)
(34,53,0)
(59,6,0)
(11,60,0)
(46,44,0)
(56,44,0)
(12,42,0)
(60,28,0)
(54,35,0)
(11,45,0)
(61,45,0)
(2,3,0)
(15,13,0)
(53,52,0)
(13,45,0)
(28,60,0)
(50,47,0)
(11,40,0)
(21,10,0)
(37,11,0)
(17,13,0)
(55,63,0)
(44,4,0)
(6,18,0)
(51,17,0)
(40,53,0)
(60,4,0)
(57,60,0)
(26,33,0)
(3,45,0)
(58,26,0)
(19,26,0)
(27,28,0)
(36,41,0)
(43,36,0)
(16,18,0)
(13,17,0)
(33,31,0)
(62,21,0)
(31,33,0)
(42,40,0)
(5,42,0)
(29,3,0)
(40,32,0)
(23,61,0)
(61,40,0)
(30,40,0)
(17,18,0)
(4,60,0)
(49,50,0)
(20,17,0)
(61,50,0)
(26,18,0)
(31,13,0)
(44,40,0)
(14,41,0)
(41,36,0)
(63,47,0)
(18,6,0)
(25,42,0)
(32,45,0)
(1,11,0)
(32,40,0)
(26,19,1)
(13,45,1)
(11,45,1)
(2,21,1)
(56,46,1)
(14,33,1)
(63,55,1)
(50,49,1)
(4,9,1)
(46,11,1)
(61,45,1)
(55,28,1)
(11,37,1)
(51,20,1)
(6,59,1)
(18,6,1)
(58,18,1)
(32,45,1)
(57,4,1)
(1,25,1)
(41,45,1)
(49,61,1)
(21,62,1)
(24,30,1)
(32,24,1)
(6,45,1)
(44,56,1)
(41,36,1)
(31,13,1)
(25,0,1)
(2,25,1)
(33,26,1)
(60,11,1)
(17,18,1)
(61,40,1)
(4,44,1)
(15,26,1)
(3,2,1)
(43,8,1)
(5,12,1)
(28,27,1)
(13,17,1)
(16,28,1)
(60,4,1)
(28,60,1)
(36,43,1)
(12,40,1)
(26,18,1)
(23,63,1)
(8,14,1)
(33,31,1)
(59,16,1)
(3,45,1)
(61,48,1)
(2,50,1)
(62,41,1)
(25,42,1)
(27,60,1)
(48,23,1)
(29,3,1)
(0,42,1)
(42,5,1)
(2,33,1)
(60,57,1)
(37,1,1)
(39,13,1)
(19,58,1)
(31,39,1)
(20,15,1)
(40,32,1)
(44,40,1)
(36,18,1)
(17,51,1)
(42,40,1)
(11,40,1)
(31,26,2)
(13,45,2)
(13,17,2)
(29,3,2)
(26,18,2)
(36,18,2)
(44,40,2)
(57,25,2)
(14,33,2)
(33,26,2)
(60,25,2)
(4,9,2)
(46,25,2)
(60,11,2)
(36,33,2)
(61,28,2)
(39,26,2)
(58,28,2)
(11,45,2)
(62,33,2)
(31,13,2)
(59,28,2)
(55,28,2)
(42,40,2)
(26,28,2)
(15,26,2)
(51,26,2)
(3,45,2)
(37,25,2)
(28,60,2)
(41,33,2)
(40,32,2)
(20,26,2)
(43,33,2)
(19,28,2)
(33,28,2)
(56,25,2)
(61,40,2)
(18,6,2)
(13,26,2)
(25,42,2)
(21,33,2)
(8,33,2)
(49,28,2)
(4,25,2)
(11,40,2)
(17,26,2)
(23,28,2)
(17,18,2)
(16,28,2)
(60,4,2)
(18,28,2)
(4,44,2)
(6,45,2)
(48,28,2)
(63,28,2)
(27,25,2)
(50,28,2)
(41,45,2)
(1,25,2)
(33,31,2)
(6,28,2)
(28,25,2)
(44,25,2)
(61,45,2)
(41,36,2)
(11,25,2)
(32,45,2)
-----------------------------------
(0,1)
(1,data)
(2,data)
(3,return data;)
(4,(int)
(5,dataLen)
(6,strlen(data)
(7,if (fgets(data+dataLen, (int)
(8,dataLen)
(9,int)
(10,)
(11,data+dataLen)
(12,100)
(13,data[dataLen-1])
(14,data)
(15,data)
(16,dataLen)
(17,dataLen-1)
(18,dataLen = strlen(data)
(19,0)
(20,dataLen)
(21,data[dataLen-1] = \\\'\\\\0\\\')
(22,if (100-dataLen > 1)
(23,data)
(24,data)
(25,100-dataLen > 1)
(26,dataLen > 0)
(27,NULL)
(28,fgets(data+dataLen, (int)
(29,RET)
(30,dataLen)
(31,data[dataLen-1] == \\\'\\\\n\\\')
(32,strlen(data)
(33,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(34,dataLen)
(35,)
(36,dataLen-1)
(37,dataLen)
(38,)
(39,\\\'\\\\n\\\')
(40,dataLen = strlen(data)
(41,data[dataLen-1])
(42,100-dataLen)
(43,1)
(44,100-dataLen)
(45,char * data)
(46,100)
(47,)
(48,dataLen)
(49,\\\'\\\\0\\\')
(50,data[dataLen] = \\\'\\\\0\\\')
(51,1)
(52,)
(53,)
(54,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(55,"fgets()
(56,dataLen)
(57,stdin)
(58,dataLen)
(59,data)
(60,fgets(data+dataLen, (int)
(61,data[dataLen])
(62,\\\'\\\\0\\\')
(63,printLine("fgets()
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
