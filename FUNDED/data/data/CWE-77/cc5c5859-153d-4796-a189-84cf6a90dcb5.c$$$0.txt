-----label-----
1
-----code-----
static char * badSource(char * data)
{
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    return data;
}
-----children-----
1,2
1,3
1,4
3,4
3,5
3,6
6,7
6,8
8,9
8,10
11,12
11,13
12,13
12,14
13,14
14,15
14,16
15,16
17,18
17,19
19,20
20,21
20,22
21,22
23,24
25,26
25,27
26,27
26,28
27,28
27,29
29,30
32,33
33,34
33,35
33,36
34,35
34,36
35,36
35,37
35,38
35,39
36,37
38,39
38,40
39,40
41,42
43,44
43,45
44,45
44,46
47,48
48,49
48,50
50,51
52,53
54,55
56,57
56,58
57,58
58,59
58,60
59,60
61,62
61,63
62,63
64,65
66,67
66,68
67,68
67,69
68,69
68,70
69,70
72,73
72,74
73,74
73,75
74,75
76,77
76,78
77,78
81,82
82,83
83,84
83,85
84,85
84,86
85,86
87,88
87,89
88,89
92,93
92,94
93,94
94,95
94,96
95,96
98,99
99,100
99,101
100,101
100,102
101,102
103,104
106,107
107,108
-----nextToken-----
2,4,5,7,9,10,16,18,22,24,28,30,31,37,40,42,45,46,49,51,53,55,60,63,65,70,71,75,78,79,80,86,89,90,91,96,97,102,104,105,108
-----computeFrom-----
26,27
26,28
27,28
27,29
34,35
34,36
38,39
38,40
48,49
48,50
58,59
58,60
67,68
67,69
68,69
68,70
72,73
72,74
76,77
76,78
83,84
83,85
87,88
87,89
99,100
99,101
-----guardedBy-----
30,104
40,86
51,89
75,86
78,89
-----guardedByNegation-----
40,102
51,104
-----lastLexicalUse-----
40,102
51,104
-----jump-----
40,102
51,104
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Pointer;Name;ParameterDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;CompoundStatement;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ReturnStatement;IdExpression;Name;
-----ast_node-----
static char * badSource(char * data){    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
static char
* badSource(char * data)
*
badSource
char * data
char
* data
*
data
{    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    return data;}
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
return data;
data
data
-----joern-----
(39,27,0)
(57,8,0)
(59,3,0)
(21,47,0)
(61,2,0)
(13,25,0)
(5,61,0)
(22,41,0)
(41,22,0)
(12,15,0)
(35,2,0)
(47,4,0)
(11,6,0)
(15,24,0)
(33,40,0)
(10,0,0)
(2,4,0)
(23,28,0)
(27,39,0)
(30,2,0)
(33,12,0)
(6,12,0)
(46,28,0)
(20,39,0)
(54,48,0)
(8,57,0)
(47,24,0)
(58,22,0)
(4,29,0)
(8,3,0)
(28,43,0)
(50,1,0)
(17,6,0)
(34,33,0)
(27,41,0)
(49,56,0)
(2,61,0)
(6,8,0)
(4,47,0)
(42,48,0)
(39,24,0)
(23,12,0)
(23,24,0)
(41,27,0)
(31,27,0)
(60,23,0)
(51,14,0)
(8,6,0)
(52,49,0)
(55,33,0)
(15,12,0)
(26,15,0)
(37,14,0)
(3,59,0)
(12,25,0)
(7,8,0)
(22,4,0)
(49,24,0)
(45,25,0)
(63,29,0)
(9,50,0)
(25,56,0)
(48,39,0)
(61,24,0)
(14,3,0)
(16,4,0)
(0,43,0)
(38,23,0)
(48,4,0)
(6,24,0)
(44,19,0)
(61,50,0)
(14,12,0)
(3,8,0)
(39,48,0)
(3,14,0)
(40,33,0)
(18,22,0)
(62,12,0)
(53,49,0)
(32,57,0)
(36,40,0)
(47,21,1)
(9,61,1)
(27,39,1)
(14,37,1)
(6,12,1)
(61,24,1)
(36,33,1)
(41,27,1)
(21,16,1)
(5,41,1)
(52,50,1)
(46,23,1)
(18,4,1)
(7,3,1)
(33,34,1)
(17,40,1)
(22,58,1)
(52,28,1)
(15,26,1)
(37,51,1)
(20,22,1)
(39,24,1)
(48,42,1)
(61,2,1)
(33,12,1)
(50,9,1)
(30,35,1)
(55,12,1)
(8,7,1)
(58,18,1)
(51,6,1)
(57,32,1)
(40,33,1)
(6,11,1)
(3,59,1)
(6,24,1)
(40,36,1)
(12,15,1)
(23,24,1)
(23,12,1)
(8,3,1)
(31,39,1)
(57,8,1)
(2,30,1)
(10,57,1)
(38,60,1)
(35,5,1)
(3,14,1)
(52,40,1)
(26,62,1)
(15,24,1)
(23,38,1)
(2,4,1)
(54,20,1)
(8,6,1)
(52,41,1)
(28,46,1)
(22,4,1)
(27,31,1)
(49,52,1)
(41,22,1)
(4,47,1)
(34,55,1)
(48,4,1)
(49,24,1)
(0,10,1)
(11,17,1)
(16,57,1)
(39,48,1)
(14,12,1)
(53,49,1)
(60,0,1)
(32,8,1)
(42,54,1)
(47,24,1)
(20,22,2)
(57,8,2)
(14,12,2)
(12,15,2)
(38,57,2)
(48,22,2)
(53,49,2)
(3,40,2)
(8,3,2)
(16,57,2)
(2,4,2)
(23,24,2)
(41,57,2)
(22,4,2)
(23,57,2)
(27,39,2)
(47,24,2)
(8,40,2)
(61,41,2)
(8,6,2)
(4,47,2)
(58,57,2)
(21,57,2)
(22,57,2)
(7,40,2)
(4,57,2)
(60,57,2)
(17,40,2)
(41,27,2)
(6,12,2)
(40,33,2)
(2,41,2)
(48,4,2)
(33,12,2)
(11,40,2)
(30,41,2)
(51,40,2)
(61,2,2)
(46,57,2)
(35,41,2)
(31,22,2)
(15,24,2)
(3,14,2)
(37,40,2)
(27,22,2)
(39,24,2)
(42,22,2)
(54,22,2)
(10,57,2)
(5,41,2)
(57,40,2)
(9,41,2)
(39,22,2)
(41,22,2)
(39,48,2)
(14,40,2)
(3,59,2)
(28,57,2)
(23,12,2)
(6,24,2)
(49,24,2)
(6,40,2)
(18,57,2)
(0,57,2)
(32,40,2)
(47,57,2)
(61,24,2)
(50,41,2)
-----------------------------------
(0,printLine("fgets()
(1,)
(2,dataLen-1)
(3,(int)
(4,dataLen = strlen(data)
(5,data)
(6,data+dataLen)
(7,stdin)
(8,fgets(data+dataLen, (int)
(9,\\\'\\\\0\\\')
(10,"fgets()
(11,dataLen)
(12,dataLen = strlen(data)
(13,dataLen)
(14,100-dataLen)
(15,strlen(data)
(16,dataLen)
(17,data)
(18,dataLen)
(19,)
(20,data)
(21,data)
(22,dataLen > 0)
(23,data[dataLen])
(24,char * data)
(25,)
(26,data)
(27,data[dataLen-1] == \\\'\\\\n\\\')
(28,data[dataLen] = \\\'\\\\0\\\')
(29,)
(30,1)
(31,\\\'\\\\n\\\')
(32,NULL)
(33,100-dataLen)
(34,dataLen)
(35,dataLen)
(36,1)
(37,dataLen)
(38,dataLen)
(39,data[dataLen-1])
(40,100-dataLen > 1)
(41,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(42,1)
(43,)
(44,if (fgets(data+dataLen, (int)
(45,if (100-dataLen > 1)
(46,\\\'\\\\0\\\')
(47,strlen(data)
(48,dataLen-1)
(49,return data;)
(50,data[dataLen-1] = \\\'\\\\0\\\')
(51,100)
(52,data)
(53,RET)
(54,dataLen)
(55,100)
(56,)
(57,fgets(data+dataLen, (int)
(58,0)
(59,int)
(60,data)
(61,data[dataLen-1])
(62,dataLen)
(63,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
