-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_w32_execv_45_bad()
{
    char * data;
    char dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_w32_execv_45_badData = data;
    badSink();
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
128,129
129,130
130,131
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127,131
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
123,124
123,125
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_w32_execv_45_bad(){    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_45_badData = data;    badSink();}
void
CWE78_OS_Command_Injection__char_console_w32_execv_45_bad()
CWE78_OS_Command_Injection__char_console_w32_execv_45_bad
{    char * data;    char dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_w32_execv_45_badData = data;    badSink();}
char * data;
char * data;
char
* data
*
data
char dataBuffer[100] = COMMAND_ARG2;
char dataBuffer[100] = COMMAND_ARG2;
char
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_w32_execv_45_badData = data;
CWE78_OS_Command_Injection__char_console_w32_execv_45_badData = data
CWE78_OS_Command_Injection__char_console_w32_execv_45_badData
CWE78_OS_Command_Injection__char_console_w32_execv_45_badData
data
data
badSink();
badSink()
badSink
badSink
-----joern-----
(14,35,0)
(15,58,0)
(38,62,0)
(46,16,0)
(43,62,0)
(59,16,0)
(59,58,0)
(58,69,0)
(7,14,0)
(2,61,0)
(48,66,0)
(29,33,0)
(62,38,0)
(31,35,0)
(38,14,0)
(19,58,0)
(59,14,0)
(60,59,0)
(53,15,0)
(36,11,0)
(45,38,0)
(24,72,0)
(0,66,0)
(54,56,0)
(3,17,0)
(1,43,0)
(18,58,0)
(16,64,0)
(58,63,0)
(44,66,0)
(20,61,0)
(70,48,0)
(15,13,0)
(54,14,0)
(37,15,0)
(28,21,0)
(12,64,0)
(48,39,0)
(39,22,0)
(51,18,0)
(4,7,0)
(63,58,0)
(43,18,0)
(57,56,0)
(23,59,0)
(40,63,0)
(25,35,0)
(52,14,0)
(62,17,0)
(34,14,0)
(26,54,0)
(49,13,0)
(22,39,0)
(20,22,0)
(72,14,0)
(22,20,0)
(69,33,0)
(7,33,0)
(61,11,0)
(56,54,0)
(50,20,0)
(9,33,0)
(6,32,0)
(38,58,0)
(35,33,0)
(56,61,0)
(39,48,0)
(67,56,0)
(55,33,0)
(14,33,0)
(63,14,0)
(71,38,0)
(66,61,0)
(68,62,0)
(13,15,0)
(27,7,0)
(30,69,0)
(8,39,0)
(65,12,0)
(32,41,0)
(17,62,0)
(10,20,0)
(54,32,0)
(43,1,0)
(5,18,0)
(47,69,0)
(62,43,0)
(48,14,0)
(18,43,0)
(66,48,0)
(72,61,0)
(61,72,0)
(62,38,1)
(53,37,1)
(56,57,1)
(45,71,1)
(15,58,1)
(43,1,1)
(32,6,1)
(48,14,1)
(37,58,1)
(7,14,1)
(62,43,1)
(5,38,1)
(20,61,1)
(63,40,1)
(49,15,1)
(17,62,1)
(66,61,1)
(51,5,1)
(68,43,1)
(0,44,1)
(61,72,1)
(34,35,1)
(27,4,1)
(12,65,1)
(39,48,1)
(4,13,1)
(4,32,1)
(59,14,1)
(19,14,1)
(7,27,1)
(10,50,1)
(13,15,1)
(59,58,1)
(52,34,1)
(58,63,1)
(38,14,1)
(72,24,1)
(72,14,1)
(38,58,1)
(22,39,1)
(42,29,1)
(63,14,1)
(29,7,1)
(17,3,1)
(40,19,1)
(70,20,1)
(43,18,1)
(3,62,1)
(26,22,1)
(38,45,1)
(67,26,1)
(54,56,1)
(71,13,1)
(66,0,1)
(50,61,1)
(65,17,1)
(62,68,1)
(22,20,1)
(44,70,1)
(14,52,1)
(35,31,1)
(16,46,1)
(18,58,1)
(31,25,1)
(46,59,1)
(24,2,1)
(8,48,1)
(6,54,1)
(13,49,1)
(14,35,1)
(15,53,1)
(4,22,1)
(54,14,1)
(60,12,1)
(39,8,1)
(18,51,1)
(48,66,1)
(2,17,1)
(57,67,1)
(56,61,1)
(20,10,1)
(4,16,1)
(59,23,1)
(23,60,1)
(22,20,2)
(61,17,2)
(38,58,2)
(72,14,2)
(8,20,2)
(43,13,2)
(43,1,2)
(38,13,2)
(18,13,2)
(65,17,2)
(32,22,2)
(50,17,2)
(39,48,2)
(61,72,2)
(63,14,2)
(14,35,2)
(59,17,2)
(26,22,2)
(12,17,2)
(17,13,2)
(0,20,2)
(66,20,2)
(59,58,2)
(16,17,2)
(70,20,2)
(2,17,2)
(59,14,2)
(43,18,2)
(20,17,2)
(56,22,2)
(39,20,2)
(7,14,2)
(66,61,2)
(5,13,2)
(23,17,2)
(67,22,2)
(24,17,2)
(54,22,2)
(57,22,2)
(44,20,2)
(51,13,2)
(54,56,2)
(48,14,2)
(10,17,2)
(58,63,2)
(22,17,2)
(62,13,2)
(13,15,2)
(56,61,2)
(48,20,2)
(6,22,2)
(45,13,2)
(18,58,2)
(38,14,2)
(17,62,2)
(54,14,2)
(20,61,2)
(68,13,2)
(3,13,2)
(15,58,2)
(62,38,2)
(72,17,2)
(60,17,2)
(71,13,2)
(46,17,2)
(48,66,2)
(62,43,2)
(22,39,2)
-----------------------------------
(0,1)
(1,int)
(2,dataLen)
(3,NULL)
(4,CWE78_OS_Command_Injection__char_console_w32_execv_45_badData)
(5,100)
(6,\\\'\\\\0\\\')
(7,CWE78_OS_Command_Injection__char_console_w32_execv_45_badData = data)
(8,\\\'\\\\n\\\')
(9,data)
(10,0)
(11,)
(12,printLine("fgets()
(13,100-dataLen > 1)
(14,data = dataBuffer)
(15,100-dataLen)
(16,data[dataLen] = \\\'\\\\0\\\')
(17,fgets(data+dataLen, (int)
(18,100-dataLen)
(19,dataLen)
(20,dataLen > 0)
(21,)
(22,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(23,dataLen)
(24,data)
(25,dataBuffer)
(26,data)
(27,data)
(28,if (fgets(data+dataLen, (int)
(29,badSink()
(30,dataLen)
(31,COMMAND_ARG2)
(32,data[dataLen-1] = \\\'\\\\0\\\')
(33,)
(34,data)
(35,dataBuffer[100] = COMMAND_ARG2)
(36,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(37,100)
(38,data+dataLen)
(39,data[dataLen-1] == \\\'\\\\n\\\')
(40,data)
(41,)
(42,RET)
(43,(int)
(44,dataLen)
(45,dataLen)
(46,\\\'\\\\0\\\')
(47,if (100-dataLen > 1)
(48,data[dataLen-1])
(49,1)
(50,dataLen)
(51,dataLen)
(52,dataBuffer)
(53,dataLen)
(54,data[dataLen-1])
(55,dataBuffer)
(56,dataLen-1)
(57,1)
(58,dataLen = strlen(data)
(59,data[dataLen])
(60,data)
(61,dataLen = strlen(data)
(62,fgets(data+dataLen, (int)
(63,strlen(data)
(64,)
(65,"fgets()
(66,dataLen-1)
(67,dataLen)
(68,stdin)
(69,)
(70,data)
(71,data)
(72,strlen(data)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
