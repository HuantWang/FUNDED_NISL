-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    goto source;
source:
    /* FIX: Append a fixed string to data (not user / external input) */
    wcscat(data, L"*.*");
    /* wexecl - specify the path where the command is located */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
30,31
30,32
32,33
33,34
33,35
33,36
34,35
36,37
39,40
40,41
40,42
40,43
40,44
40,45
40,46
41,42
43,44
45,46
47,48
49,50
51,52
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,29,31,35,37,38,42,44,46,48,50,52
-----computeFrom-----
23,24
23,25
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;GotoStatement;Name;LabelStatement;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    /* wexecl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    goto source;source:    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");    /* wexecl - specify the path where the command is located */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
goto source;
source
source:    /* FIX: Append a fixed string to data (not user / external input) */    wcscat(data, L"*.*");
source
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(4,10,0)
(5,9,0)
(15,9,0)
(1,14,0)
(2,14,0)
(13,9,0)
(17,9,0)
(10,9,0)
(17,10,0)
(0,17,0)
(8,17,0)
(11,14,0)
(7,14,0)
(16,14,0)
(12,9,0)
(14,9,0)
(3,10,0)
(1,16,1)
(16,5,1)
(7,1,1)
(6,14,1)
(14,11,1)
(17,10,1)
(4,3,1)
(8,10,1)
(11,2,1)
(2,7,1)
(5,17,1)
(0,8,1)
(10,4,1)
(17,0,1)
(17,10,2)
-----------------------------------
(0,dataBuffer)
(1,COMMAND_INT_PATH)
(2,COMMAND_ARG3)
(3,dataBuffer)
(4,COMMAND_ARG2)
(5,goto source;)
(6,RET)
(7,COMMAND_ARG1)
(8,data)
(9,)
(10,dataBuffer[100] = COMMAND_ARG2)
(11,NULL)
(12,source:)
(13,data)
(14,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(15,dataBuffer)
(16,COMMAND_INT_PATH)
(17,data = dataBuffer)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
