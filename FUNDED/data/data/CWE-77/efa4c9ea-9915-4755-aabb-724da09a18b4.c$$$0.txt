-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        wchar_t * data = *dataPtr1;
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        {
            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
            /* wspawnv - specify the path where the command is located */
            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
        }
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
71,72
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
84,85
86,87
86,88
87,88
88,89
88,90
90,91
90,92
90,93
90,94
94,95
95,96
95,97
95,98
95,99
96,97
98,99
100,101
102,103
104,105
105,106
105,107
105,108
105,109
106,107
108,109
110,111
112,113
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,67,72,74,78,80,81,85,89,91,92,93,97,99,101,103,107,109,111,113
-----computeFrom-----
45,46
45,47
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Pointer;Name;ArrayModifier;EqualsInitializer;InitializerList;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        {            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);        }    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
{            wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};            /* wspawnv - specify the path where the command is located */            /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */            _wspawnv(_P_WAIT, COMMAND_INT_PATH, args);        }
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t *args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL};
wchar_t
*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
*
args
[]
= {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
{COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL}
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args);
_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
_wspawnv
_wspawnv
_P_WAIT
_P_WAIT
COMMAND_INT_PATH
COMMAND_INT_PATH
args
args
-----joern-----
(39,16,0)
(0,8,0)
(29,22,0)
(28,23,0)
(12,8,0)
(4,22,0)
(20,8,0)
(36,22,0)
(10,17,0)
(4,16,0)
(18,8,0)
(7,17,0)
(37,41,0)
(41,22,0)
(5,23,0)
(26,8,0)
(32,20,0)
(24,13,0)
(17,5,0)
(13,16,0)
(15,8,0)
(14,20,0)
(1,7,0)
(41,13,0)
(9,15,0)
(19,8,0)
(25,15,0)
(38,15,0)
(40,23,0)
(28,9,0)
(9,28,0)
(2,5,0)
(23,8,0)
(35,36,0)
(43,9,0)
(16,4,0)
(27,26,0)
(15,38,0)
(22,36,0)
(3,28,0)
(7,5,0)
(22,8,0)
(31,19,0)
(16,26,0)
(6,38,0)
(30,4,0)
(42,7,0)
(13,26,0)
(34,7,0)
(33,8,0)
(19,20,0)
(11,19,0)
(20,32,1)
(10,28,1)
(7,1,1)
(41,37,1)
(14,15,1)
(31,20,1)
(34,42,1)
(36,35,1)
(32,14,1)
(13,16,1)
(7,17,1)
(21,7,1)
(37,16,1)
(22,36,1)
(16,4,1)
(9,43,1)
(25,22,1)
(1,34,1)
(17,10,1)
(28,9,1)
(19,11,1)
(41,22,1)
(3,13,1)
(19,20,1)
(24,41,1)
(38,6,1)
(9,15,1)
(15,38,1)
(35,29,1)
(11,31,1)
(43,3,1)
(6,25,1)
(13,24,1)
(4,22,1)
(30,39,1)
(42,17,1)
(4,30,1)
(39,19,1)
(15,38,2)
(4,22,2)
(41,22,2)
(7,17,2)
(19,20,2)
(9,15,2)
(16,4,2)
(22,36,2)
(28,9,2)
(13,16,2)
-----------------------------------
(0,dataBuffer)
(1,args)
(2,args)
(3,data)
(4,*dataPtr1)
(5,)
(6,data)
(7,_wspawnv(_P_WAIT, COMMAND_INT_PATH, args)
(8,)
(9,*dataPtr2)
(10,args)
(11,dataBuffer)
(12,dataPtr2)
(13,*dataPtr1 = data)
(14,dataBuffer)
(15,* *dataPtr2 = &data)
(16,* data = *dataPtr1)
(17,*args[] = {COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL})
(18,dataPtr1)
(19,data = dataBuffer)
(20,dataBuffer[100] = COMMAND_ARG2)
(21,RET)
(22,* *dataPtr1 = &data)
(23,)
(24,data)
(25,dataPtr2)
(26,)
(27,data)
(28,* data = *dataPtr2)
(29,dataPtr1)
(30,dataPtr1)
(31,data)
(32,COMMAND_ARG2)
(33,data)
(34,COMMAND_INT_PATH)
(35,data)
(36,&data)
(37,dataPtr1)
(38,&data)
(39,data)
(40,data)
(41,*dataPtr1)
(42,_P_WAIT)
(43,dataPtr2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
