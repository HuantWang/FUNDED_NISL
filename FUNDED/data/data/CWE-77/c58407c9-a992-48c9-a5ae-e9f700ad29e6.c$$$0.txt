-----label-----
1
-----code-----
void CWE78_OS_Command_Injection__char_console_system_51_bad()
{
    char * data;
    char data_buf[100] = FULL_COMMAND;
    data = data_buf;
    {
        /* Read input from the console */
        size_t dataLen = strlen(data);
        /* if there is room in data, read into it from the console */
        if (100-dataLen > 1)
        {
            /* POTENTIAL FLAW: Read data from the console */
            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)
            {
                /* The next few lines remove the carriage return from the string that is
                 * inserted by fgets() */
                dataLen = strlen(data);
                if (dataLen > 0 && data[dataLen-1] == '\n')
                {
                    data[dataLen-1] = '\0';
                }
            }
            else
            {
                printLine("fgets() failed");
                /* Restore NUL terminator if fgets fails */
                data[dataLen] = '\0';
            }
        }
    }
    CWE78_OS_Command_Injection__char_console_system_51b_badSink(data);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
30,31
30,32
31,32
33,34
33,35
35,36
36,37
36,38
37,38
39,40
41,42
41,43
42,43
42,44
43,44
43,45
45,46
48,49
49,50
49,51
49,52
50,51
50,52
51,52
51,53
51,54
51,55
52,53
54,55
54,56
55,56
57,58
59,60
59,61
60,61
60,62
63,64
64,65
64,66
66,67
68,69
70,71
72,73
72,74
73,74
74,75
74,76
75,76
77,78
77,79
78,79
80,81
82,83
82,84
83,84
83,85
84,85
84,86
85,86
88,89
88,90
89,90
89,91
90,91
92,93
92,94
93,94
97,98
98,99
99,100
99,101
100,101
100,102
101,102
103,104
103,105
104,105
108,109
108,110
109,110
110,111
110,112
111,112
114,115
115,116
115,117
116,117
116,118
117,118
119,120
122,123
123,124
123,125
124,125
126,127
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,32,34,38,40,44,46,47,53,56,58,61,62,65,67,69,71,76,79,81,86,87,91,94,95,96,102,105,106,107,112,113,118,120,121,125,127
-----computeFrom-----
23,24
23,25
42,43
42,44
43,44
43,45
50,51
50,52
54,55
54,56
64,65
64,66
74,75
74,76
83,84
83,85
84,85
84,86
88,89
88,90
92,93
92,94
99,100
99,101
103,104
103,105
115,116
115,117
-----guardedBy-----
46,120
56,102
67,105
91,102
94,105
-----guardedByNegation-----
56,118
67,120
-----lastLexicalUse-----
56,118
67,120
-----jump-----
56,118
67,120
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;NamedTypeSpecifier;Name;Declarator;Name;EqualsInitializer;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;LiteralExpression;CompoundStatement;IfStatement;BinaryExpression;FunctionCallExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;IdExpression;Name;CastExpression;TypeId;SimpleDeclSpecifier;Declarator;UnaryExpression;BinaryExpression;LiteralExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;CompoundStatement;ExpressionStatement;BinaryExpression;IdExpression;Name;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;BinaryExpression;IdExpression;Name;LiteralExpression;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;BinaryExpression;IdExpression;Name;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;ArraySubscriptExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;
-----ast_node-----
void CWE78_OS_Command_Injection__char_console_system_51_bad(){    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_51b_badSink(data);}
void
CWE78_OS_Command_Injection__char_console_system_51_bad()
CWE78_OS_Command_Injection__char_console_system_51_bad
{    char * data;    char data_buf[100] = FULL_COMMAND;    data = data_buf;    {        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }    CWE78_OS_Command_Injection__char_console_system_51b_badSink(data);}
char * data;
char * data;
char
* data
*
data
char data_buf[100] = FULL_COMMAND;
char data_buf[100] = FULL_COMMAND;
char
data_buf[100] = FULL_COMMAND
data_buf
[100]
100
= FULL_COMMAND
FULL_COMMAND
FULL_COMMAND
data = data_buf;
data = data_buf
data
data
data_buf
data_buf
{        /* Read input from the console */        size_t dataLen = strlen(data);        /* if there is room in data, read into it from the console */        if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }    }
size_t dataLen = strlen(data);
size_t dataLen = strlen(data);
size_t
size_t
dataLen = strlen(data)
dataLen
= strlen(data)
strlen(data)
strlen
strlen
data
data
if (100-dataLen > 1)        {            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
100-dataLen > 1
100-dataLen
100
dataLen
dataLen
1
{            /* POTENTIAL FLAW: Read data from the console */            if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }        }
if (fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL)            {                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }            else            {                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
fgets(data+dataLen, (int)(100-dataLen), stdin) != NULL
fgets(data+dataLen, (int)(100-dataLen), stdin)
fgets
fgets
data+dataLen
data
data
dataLen
dataLen
(int)(100-dataLen)
int
int

(100-dataLen)
100-dataLen
100
dataLen
dataLen
stdin
stdin
NULL
NULL
{                /* The next few lines remove the carriage return from the string that is                 * inserted by fgets() */                dataLen = strlen(data);                if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }            }
dataLen = strlen(data);
dataLen = strlen(data)
dataLen
dataLen
strlen(data)
strlen
strlen
data
data
if (dataLen > 0 && data[dataLen-1] == '\n')                {                    data[dataLen-1] = '\0';                }
dataLen > 0 && data[dataLen-1] == '\n'
dataLen > 0
dataLen
dataLen
0
data[dataLen-1] == '\n'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\n'
{                    data[dataLen-1] = '\0';                }
data[dataLen-1] = '\0';
data[dataLen-1] = '\0'
data[dataLen-1]
data
data
dataLen-1
dataLen
dataLen
1
'\0'
{                printLine("fgets() failed");                /* Restore NUL terminator if fgets fails */                data[dataLen] = '\0';            }
printLine("fgets() failed");
printLine("fgets() failed")
printLine
printLine
"fgets() failed"
data[dataLen] = '\0';
data[dataLen] = '\0'
data[dataLen]
data
data
dataLen
dataLen
'\0'
CWE78_OS_Command_Injection__char_console_system_51b_badSink(data);
CWE78_OS_Command_Injection__char_console_system_51b_badSink(data)
CWE78_OS_Command_Injection__char_console_system_51b_badSink
CWE78_OS_Command_Injection__char_console_system_51b_badSink
data
data
-----joern-----
(50,5,0)
(22,36,0)
(29,24,0)
(24,53,0)
(43,7,0)
(28,57,0)
(26,54,0)
(70,5,0)
(27,23,0)
(46,4,0)
(11,23,0)
(36,4,0)
(36,70,0)
(62,4,0)
(52,55,0)
(35,66,0)
(44,36,0)
(43,5,0)
(16,70,0)
(36,22,0)
(37,9,0)
(59,6,0)
(0,54,0)
(66,61,0)
(66,12,0)
(9,30,0)
(42,5,0)
(32,68,0)
(24,12,0)
(45,28,0)
(68,53,0)
(12,14,0)
(68,32,0)
(63,62,0)
(67,68,0)
(25,24,0)
(3,34,0)
(59,7,0)
(23,5,0)
(58,14,0)
(34,32,0)
(61,28,0)
(49,12,0)
(48,12,0)
(32,34,0)
(19,11,0)
(62,5,0)
(4,46,0)
(10,55,0)
(1,6,0)
(54,6,0)
(48,7,0)
(70,7,0)
(47,7,0)
(20,21,0)
(7,55,0)
(4,36,0)
(17,53,0)
(60,61,0)
(40,48,0)
(8,22,0)
(61,7,0)
(53,24,0)
(13,62,0)
(65,59,0)
(2,7,0)
(41,66,0)
(39,30,0)
(23,11,0)
(53,68,0)
(5,54,0)
(69,34,0)
(33,6,0)
(51,70,0)
(38,50,0)
(50,39,0)
(18,43,0)
(50,7,0)
(34,12,0)
(12,48,0)
(61,66,0)
(53,7,0)
(56,23,0)
(15,50,0)
(31,39,0)
(55,6,0)
(7,6,0)
(5,43,0)
(4,62,0)
(70,36,0)
(35,41,1)
(53,24,1)
(36,70,1)
(47,2,1)
(50,15,1)
(49,22,1)
(38,9,1)
(66,35,1)
(29,25,1)
(7,55,1)
(7,47,1)
(18,42,1)
(22,8,1)
(32,68,1)
(69,3,1)
(51,11,1)
(37,22,1)
(65,32,1)
(64,59,1)
(70,7,1)
(23,5,1)
(50,5,1)
(15,38,1)
(61,66,1)
(16,51,1)
(41,60,1)
(70,16,1)
(23,27,1)
(43,18,1)
(66,12,1)
(56,5,1)
(62,5,1)
(48,40,1)
(10,52,1)
(39,31,1)
(11,23,1)
(53,7,1)
(3,12,1)
(60,32,1)
(67,53,1)
(24,29,1)
(36,4,1)
(19,23,1)
(5,43,1)
(70,5,1)
(65,11,1)
(13,70,1)
(28,45,1)
(42,7,1)
(24,12,1)
(11,19,1)
(59,65,1)
(63,13,1)
(48,7,1)
(27,56,1)
(4,62,1)
(44,4,1)
(12,48,1)
(61,7,1)
(17,34,1)
(4,46,1)
(8,36,1)
(45,61,1)
(25,17,1)
(65,39,1)
(43,7,1)
(55,10,1)
(50,7,1)
(32,34,1)
(34,12,1)
(59,7,1)
(68,67,1)
(65,28,1)
(68,53,1)
(34,69,1)
(36,44,1)
(2,55,1)
(62,63,1)
(31,50,1)
(22,36,1)
(40,49,1)
(9,37,1)
(22,11,2)
(43,7,2)
(16,11,2)
(34,12,2)
(67,34,2)
(63,11,2)
(11,23,2)
(32,22,2)
(50,7,2)
(17,34,2)
(12,22,2)
(32,34,2)
(31,22,2)
(44,11,2)
(53,24,2)
(8,11,2)
(70,5,2)
(22,36,2)
(59,7,2)
(4,46,2)
(62,5,2)
(53,34,2)
(34,22,2)
(49,22,2)
(25,34,2)
(51,11,2)
(68,53,2)
(70,7,2)
(41,32,2)
(48,22,2)
(61,7,2)
(62,11,2)
(4,11,2)
(24,34,2)
(4,62,2)
(24,12,2)
(61,32,2)
(66,32,2)
(9,22,2)
(53,7,2)
(5,43,2)
(50,5,2)
(66,12,2)
(12,48,2)
(36,70,2)
(70,11,2)
(50,22,2)
(36,11,2)
(40,22,2)
(36,4,2)
(28,32,2)
(3,22,2)
(61,66,2)
(48,7,2)
(35,32,2)
(37,22,2)
(29,34,2)
(60,32,2)
(68,34,2)
(23,5,2)
(45,32,2)
(13,11,2)
(15,22,2)
(32,68,2)
(39,22,2)
(7,55,2)
(69,22,2)
(38,22,2)
-----------------------------------
(0,dataLen)
(1,data)
(2,data)
(3,dataLen)
(4,(int)
(5,dataLen = strlen(data)
(6,)
(7,data = data_buf)
(8,NULL)
(9,printLine("fgets()
(10,FULL_COMMAND)
(11,100-dataLen > 1)
(12,dataLen = strlen(data)
(13,100)
(14,)
(15,dataLen)
(16,dataLen)
(17,data)
(18,data)
(19,1)
(20,if (fgets(data+dataLen, (int)
(21,)
(22,fgets(data+dataLen, (int)
(23,100-dataLen)
(24,dataLen-1)
(25,dataLen)
(26,if (100-dataLen > 1)
(27,dataLen)
(28,data[dataLen-1] = \\\'\\\\0\\\')
(29,1)
(30,)
(31,\\\'\\\\0\\\')
(32,dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(33,data_buf)
(34,dataLen > 0)
(35,1)
(36,fgets(data+dataLen, (int)
(37,"fgets()
(38,data)
(39,data[dataLen] = \\\'\\\\0\\\')
(40,data)
(41,dataLen)
(42,dataLen)
(43,strlen(data)
(44,stdin)
(45,\\\'\\\\0\\\')
(46,int)
(47,data_buf)
(48,strlen(data)
(49,dataLen)
(50,data[dataLen])
(51,data)
(52,data_buf)
(53,data[dataLen-1])
(54,)
(55,data_buf[100] = FULL_COMMAND)
(56,100)
(57,)
(58,if (dataLen > 0 && data[dataLen-1] == \\\'\\\\n\\\')
(59,CWE78_OS_Command_Injection__char_console_system_51b_badSink(data)
(60,data)
(61,data[dataLen-1])
(62,100-dataLen)
(63,dataLen)
(64,RET)
(65,data)
(66,dataLen-1)
(67,\\\'\\\\n\\\')
(68,data[dataLen-1] == \\\'\\\\n\\\')
(69,0)
(70,data+dataLen)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
