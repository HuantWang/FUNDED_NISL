-----label-----
0
-----code-----
static void goodG2B()
{
    wchar_t * data;
    wchar_t * *dataPtr1 = &data;
    wchar_t * *dataPtr2 = &data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    {
        wchar_t * data = *dataPtr1;
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
        *dataPtr1 = data;
    }
    {
        wchar_t * data = *dataPtr2;
        /* wexecl - specify the path where the command is located */
        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
    }
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
5,11
5,12
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
15,19
19,20
20,21
21,22
23,24
24,25
24,26
26,27
26,28
26,29
26,30
30,31
31,32
32,33
34,35
35,36
35,37
37,38
37,39
37,40
39,40
41,42
42,43
44,45
45,46
45,47
46,47
48,49
50,51
50,52
50,53
51,52
52,53
52,54
54,55
54,56
54,57
57,58
58,59
59,60
61,62
62,63
62,64
62,65
63,64
65,66
68,69
69,70
69,71
70,71
71,72
73,74
75,76
75,77
76,77
77,78
77,79
79,80
79,81
79,82
82,83
83,84
84,85
86,87
87,88
87,89
87,90
87,91
87,92
87,93
88,89
90,91
92,93
94,95
96,97
98,99
-----nextToken-----
2,4,8,10,11,14,16,17,18,22,25,27,28,29,33,36,38,40,43,47,49,53,55,56,60,64,66,67,72,74,78,80,81,85,89,91,93,95,97,99
-----computeFrom-----
45,46
45,47
69,70
69,71
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;BinaryExpression;UnaryExpression;IdExpression;Name;IdExpression;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;EqualsInitializer;UnaryExpression;IdExpression;Name;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B(){    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* wexecl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
static void
goodG2B()
goodG2B
{    wchar_t * data;    wchar_t * *dataPtr1 = &data;    wchar_t * *dataPtr2 = &data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    {        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }    {        wchar_t * data = *dataPtr2;        /* wexecl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t * *dataPtr1 = &data;
wchar_t * *dataPtr1 = &data;
wchar_t
* *dataPtr1 = &data
*
*
dataPtr1
= &data
&data
data
data
wchar_t * *dataPtr2 = &data;
wchar_t * *dataPtr2 = &data;
wchar_t
* *dataPtr2 = &data
*
*
dataPtr2
= &data
&data
data
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
{        wchar_t * data = *dataPtr1;        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");        *dataPtr1 = data;    }
wchar_t * data = *dataPtr1;
wchar_t * data = *dataPtr1;
wchar_t
* data = *dataPtr1
*
data
= *dataPtr1
*dataPtr1
dataPtr1
dataPtr1
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
*dataPtr1 = data;
*dataPtr1 = data
*dataPtr1
dataPtr1
dataPtr1
data
data
{        wchar_t * data = *dataPtr2;        /* wexecl - specify the path where the command is located */        /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */        EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);    }
wchar_t * data = *dataPtr2;
wchar_t * data = *dataPtr2;
wchar_t
* data = *dataPtr2
*
data
= *dataPtr2
*dataPtr2
dataPtr2
dataPtr2
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL);
EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
EXECL
EXECL
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_INT_PATH
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(25,22,0)
(21,0,0)
(19,15,0)
(39,10,0)
(20,27,0)
(4,23,0)
(26,12,0)
(14,39,0)
(38,40,0)
(37,22,0)
(15,19,0)
(0,22,0)
(1,0,0)
(12,22,0)
(29,14,0)
(9,40,0)
(13,9,0)
(15,40,0)
(34,8,0)
(24,11,0)
(30,22,0)
(10,8,0)
(10,22,0)
(11,23,0)
(41,39,0)
(33,15,0)
(32,30,0)
(40,22,0)
(0,30,0)
(27,12,0)
(23,22,0)
(39,14,0)
(28,9,0)
(8,10,0)
(18,9,0)
(3,30,0)
(7,27,0)
(31,22,0)
(14,12,0)
(6,9,0)
(7,10,0)
(36,10,0)
(16,19,0)
(5,9,0)
(2,7,0)
(27,14,0)
(23,11,0)
(19,23,0)
(35,22,0)
(27,20,1)
(41,29,1)
(5,18,1)
(29,0,1)
(20,7,1)
(24,4,1)
(28,13,1)
(30,3,1)
(1,21,1)
(34,36,1)
(11,24,1)
(21,30,1)
(15,19,1)
(3,32,1)
(0,1,1)
(9,28,1)
(2,14,1)
(19,16,1)
(4,10,1)
(0,30,1)
(7,2,1)
(18,15,1)
(8,34,1)
(23,11,1)
(32,23,1)
(16,33,1)
(19,23,1)
(13,6,1)
(14,39,1)
(39,10,1)
(27,14,1)
(10,8,1)
(7,10,1)
(39,41,1)
(17,9,1)
(6,5,1)
(33,27,1)
(10,8,2)
(39,10,2)
(0,30,2)
(19,23,2)
(14,39,2)
(23,11,2)
(7,10,2)
(15,19,2)
(27,14,2)
-----------------------------------
(0,data = dataBuffer)
(1,dataBuffer)
(2,dataPtr1)
(3,COMMAND_ARG2)
(4,dataPtr2)
(5,COMMAND_INT_PATH)
(6,COMMAND_ARG1)
(7,*dataPtr1)
(8,&data)
(9,EXECL(COMMAND_INT_PATH, COMMAND_INT_PATH, COMMAND_ARG1, COMMAND_ARG3, NULL)
(10,* *dataPtr1 = &data)
(11,&data)
(12,)
(13,COMMAND_ARG3)
(14,* data = *dataPtr1)
(15,* data = *dataPtr2)
(16,dataPtr2)
(17,RET)
(18,COMMAND_INT_PATH)
(19,*dataPtr2)
(20,data)
(21,data)
(22,)
(23,* *dataPtr2 = &data)
(24,data)
(25,dataPtr1)
(26,data)
(27,*dataPtr1 = data)
(28,NULL)
(29,data)
(30,dataBuffer[100] = COMMAND_ARG2)
(31,data)
(32,dataBuffer)
(33,data)
(34,data)
(35,dataBuffer)
(36,dataPtr1)
(37,dataPtr2)
(38,data)
(39,*dataPtr1)
(40,)
(41,dataPtr1)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
