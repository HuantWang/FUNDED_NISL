-----label-----
0
-----code-----
static void goodG2B2()
{
    wchar_t * data;
    wchar_t dataBuffer[100] = COMMAND_ARG2;
    data = dataBuffer;
    if(5==5)
    {
        /* FIX: Append a fixed string to data (not user / external input) */
        wcscat(data, L"*.*");
    }
    /* wspawnlp - searches for the location of the command among
     * the directories specified by the PATH environment variable */
    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */
    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
}
-----children-----
1,2
1,3
1,4
3,4
5,6
5,7
5,8
5,9
5,10
6,7
7,8
7,9
9,10
9,11
12,13
13,14
13,15
15,16
15,17
15,18
17,18
19,20
20,21
22,23
23,24
23,25
24,25
26,27
28,29
28,30
29,30
29,31
32,33
33,34
34,35
34,36
34,37
35,36
37,38
40,41
41,42
41,43
41,44
41,45
41,46
41,47
41,48
42,43
44,45
46,47
48,49
50,51
52,53
54,55
-----nextToken-----
2,4,8,10,11,14,16,18,21,25,27,30,31,36,38,39,43,45,47,49,51,53,55
-----computeFrom-----
23,24
23,25
29,30
29,31
-----guardedBy-----
-----guardedByNegation-----
-----lastLexicalUse-----
-----jump-----
-----attribute-----
FunctionDefinition;SimpleDeclSpecifier;FunctionDeclarator;Name;CompoundStatement;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;Declarator;Pointer;Name;DeclarationStatement;SimpleDeclaration;SimpleDeclSpecifier;ArrayDeclarator;Name;ArrayModifier;LiteralExpression;EqualsInitializer;IdExpression;Name;ExpressionStatement;BinaryExpression;IdExpression;Name;IdExpression;Name;IfStatement;BinaryExpression;LiteralExpression;LiteralExpression;CompoundStatement;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;LiteralExpression;ExpressionStatement;FunctionCallExpression;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;IdExpression;Name;
-----ast_node-----
static void goodG2B2(){    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(5==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* wspawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
static void
goodG2B2()
goodG2B2
{    wchar_t * data;    wchar_t dataBuffer[100] = COMMAND_ARG2;    data = dataBuffer;    if(5==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }    /* wspawnlp - searches for the location of the command among     * the directories specified by the PATH environment variable */    /* POTENTIAL FLAW: Execute command without validating input possibly leading to command injection */    _wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);}
wchar_t * data;
wchar_t * data;
wchar_t
* data
*
data
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t dataBuffer[100] = COMMAND_ARG2;
wchar_t
dataBuffer[100] = COMMAND_ARG2
dataBuffer
[100]
100
= COMMAND_ARG2
COMMAND_ARG2
COMMAND_ARG2
data = dataBuffer;
data = dataBuffer
data
data
dataBuffer
dataBuffer
if(5==5)    {        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
5==5
5
5
{        /* FIX: Append a fixed string to data (not user / external input) */        wcscat(data, L"*.*");    }
wcscat(data, L"*.*");
wcscat(data, L"*.*")
wcscat
wcscat
data
data
L"*.*"
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL);
_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
_wspawnlp
_wspawnlp
_P_WAIT
_P_WAIT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_INT
COMMAND_ARG1
COMMAND_ARG1
COMMAND_ARG3
COMMAND_ARG3
NULL
NULL
-----joern-----
(15,5,0)
(3,18,0)
(15,20,0)
(7,20,0)
(10,20,0)
(19,18,0)
(5,20,0)
(17,20,0)
(13,15,0)
(1,15,0)
(9,17,0)
(14,17,0)
(16,17,0)
(6,17,0)
(2,17,0)
(0,20,0)
(4,5,0)
(11,17,0)
(12,5,0)
(16,14,1)
(1,13,1)
(15,5,1)
(11,9,1)
(14,11,1)
(15,1,1)
(17,6,1)
(5,4,1)
(4,12,1)
(9,2,1)
(13,5,1)
(8,17,1)
(2,18,1)
(6,16,1)
(19,3,1)
(18,19,1)
(3,15,1)
(15,5,2)
-----------------------------------
(0,data)
(1,dataBuffer)
(2,_P_WAIT)
(3,5)
(4,COMMAND_ARG2)
(5,dataBuffer[100] = COMMAND_ARG2)
(6,NULL)
(7,if(5==5)
(8,RET)
(9,COMMAND_INT)
(10,dataBuffer)
(11,COMMAND_INT)
(12,dataBuffer)
(13,data)
(14,COMMAND_ARG1)
(15,data = dataBuffer)
(16,COMMAND_ARG3)
(17,_wspawnlp(_P_WAIT, COMMAND_INT, COMMAND_INT, COMMAND_ARG1, COMMAND_ARG3, NULL)
(18,5==5)
(19,5)
(20,)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
